id _LSRecordLog()
{
  if (_LSRecordLog_onceToken != -1) {
    dispatch_once(&_LSRecordLog_onceToken, &__block_literal_global_21);
  }
  return (id)_LSRecordLog_log;
}

void sub_183E59B74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t _LSCurrentProcessMayMapDatabase()
{
  if (_LSCurrentProcessMayMapDatabase::once != -1) {
    dispatch_once(&_LSCurrentProcessMayMapDatabase::once, &__block_literal_global_116);
  }
  unsigned __int8 v0 = atomic_load(mayMapDatabase);
  return v0 & 1;
}

uint64_t __LSDefaultsGetSharedInstance()
{
  if (__LSDefaultsGetSharedInstance_onceToken != -1) {
    dispatch_once(&__LSDefaultsGetSharedInstance_onceToken, &__block_literal_global_22);
  }
  return __LSDefaultsGetSharedInstance_sharedInstance;
}

uint64_t _LSContextInit(id *a1)
{
  IsCurrentThreadInLSContextInitReference = getIsCurrentThreadInLSContextInitReference();
  ++*IsCurrentThreadInLSContextInitReference;
  v3 = +[_LSDServiceDomain defaultServiceDomain]();
  id v8 = 0LL;
  LOBYTE(a1) = _LSContextInitCommon(a1, v3, 0, &v8);
  id v4 = v8;

  else {
    uint64_t v5 = _LSGetOSStatusFromNSError(v4);
  }
  v6 = getIsCurrentThreadInLSContextInitReference();
  --*v6;

  return v5;
}

void sub_183E59D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *getIsCurrentThreadInLSContextInitReference(void)
{
  unsigned __int8 v0 = pthread_getspecific(getIsCurrentThreadInLSContextInitReference(void)::key);
  if (!v0)
  {
    unsigned __int8 v0 = calloc(1uLL, 4uLL);
    pthread_setspecific(getIsCurrentThreadInLSContextInitReference(void)::key, v0);
  }

  return v0;
}

uint64_t _LSContextInitCommon(id *a1, void *a2, char a3, void *a4)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  id v7 = a2;
  IsCurrentThreadInLSContextInitReference = getIsCurrentThreadInLSContextInitReference();
  ++*IsCurrentThreadInLSContextInitReference;
  __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__();
  __LAUNCH_SERVICES_IS_ABORTING_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__();
  *a1 = 0LL;
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    id v68 = 0LL;
    v9 = (void *)_LSServer_CopyLocalDatabase(&v68);
    if (!v9)
    {
      unint64_t v10 = _LSServer_SelfSessionKey();
      v11 = _LSDatabaseCreateFromPersistentStore(7, 0LL, &v68);
      v12 = v11;
      if (!v11)
      {
        v9 = 0LL;
        if ((a3 & 4) == 0)
        {
LABEL_7:
          if (v9) {
            objc_storeStrong(a1, v9);
          }
          BOOL v15 = v9 == 0LL;

          id v16 = v68;
          if (!v15) {
            goto LABEL_10;
          }
          goto LABEL_67;
        }

LABEL_6:
        id v14 = _LSDatabaseCreateSnapshot(v9, &v68);
        v9 = v14;
        goto LABEL_7;
      }

      _LSSetLocalDatabase(v11);
      id v13 = _LSCopyLocalDatabase(v10, &v68);

      v9 = v13;
    }

    if ((a3 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  v18 = (_LSDServiceDomain *)v7;
  id location = 0LL;
  uint64_t v19 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v18);
  if ((os_unfair_recursive_lock_trylock() & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      v67 = a4;
      v20 = v18;
      v21 = availabilityStateForServiceDomain(v20);
      v22 = v21;
      unsigned __int8 v23 = atomic_load((unsigned __int8 *)v21);
      if ((v23 & 1) != 0)
      {

        goto LABEL_25;
      }

      unint64_t v24 = atomic_load(v21 + 1);
      os_unfair_lock_lock((os_unfair_lock_t)v21 + 4);
      if (v24 == v22[1])
      {
        unint64_t v66 = v24;
        v25 = v20;
        v26 = (void *)objc_opt_class();
        _LSDServiceGetXPCConnection(v26, (uint64_t)v25);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        [v27 synchronousRemoteObjectProxyWithErrorHandler:&__block_literal_global_271];
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        id obj = 0LL;
        p_id obj = &obj;
        uint64_t v79 = 0x2020000000LL;
        int v80 = 0;
        v72 = 0LL;
        v73 = &v72;
        uint64_t v74 = 0x2020000000LL;
        char v75 = 0;
        *(void *)block = MEMORY[0x1895F87A8];
        *(void *)&block[8] = 3221225472LL;
        *(void *)&block[16] = ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke_272;
        v82 = (_LSDatabase *)&unk_189D75508;
        v83 = &obj;
        v84 = &v72;
        [v28 getServerStatusWithCompletionHandler:block];
        if (*((_BYTE *)v73 + 24))
        {
          BOOL v29 = ((_DWORD)p_obj[3] & 0x80) == 0;
          _Block_object_dispose(&v72, 8);
          _Block_object_dispose(&obj, 8);

          a4 = v67;
          if (v29)
          {
            atomic_store(1u, (unsigned __int8 *)v22);
            atomic_store(v66 + 1, v22 + 1);
            os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);

            goto LABEL_25;
          }
        }

        else
        {
          _Block_object_dispose(&v72, 8);
          _Block_object_dispose(&obj, 8);

          a4 = v67;
        }

        atomic_store(v66 + 1, v22 + 1);
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);
      }

      else
      {
        unsigned __int8 v45 = *(_BYTE *)v22;
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 4);

        if ((v45 & 1) != 0) {
          goto LABEL_25;
        }
      }

      id obj = (id)*MEMORY[0x189607490];
      *(void *)block = @"Database not availabile yet";
      [MEMORY[0x189603F68] dictionaryWithObjects:block forKeys:&obj count:1];
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 36LL, (uint64_t)"_LSContextInitClient", 3035LL, v50);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      id v65 = location;
      id location = v64;

      goto LABEL_56;
    }

    id v8 = 0;
    goto LABEL_7;
  }

  id v8 = 1;
LABEL_7:

  return v8;
}
}
}

    goto LABEL_12;
  }

  if (v9)
  {
    _LSDatabaseSetHeaderFlag(v9, 0x1000000, 0);
    v11 = *(_LSDatabase **)(a1 + 32);
    if (v11)
    {
      _LSDatabaseSetHeaderFlag(v11, 0x2000000, 0);
      v12 = *(_LSDatabase **)(a1 + 32);
      if (v12)
      {
        _LSDatabaseSetHeaderFlag(v12, 0x4000000, 0);
        id v13 = *(_LSDatabase **)(a1 + 32);
        if (v13) {
          _LSDatabaseSetHeaderFlag(v13, 0x8000000, 0);
        }
      }
    }
  }

    v9 = 0;
    goto LABEL_7;
  }

  id v4 = (const __CFString *)getkTCCServiceUserTracking();
  -[_LSDClient XPCConnection](self, "XPCConnection");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5) {
    [v5 auditToken];
  }
  else {
    memset(&v27[1], 0, 32);
  }
  buf = *(audit_token_t *)&v27[1];
  v11 = softLinkTCCAccessPreflightWithAuditToken(v4, &buf, 0LL);

  if (v11)
  {
    if (v11 == 1)
    {
      _LSDefaultLog();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v18 = -[_LSDClient XPCConnection](self, "XPCConnection");
        uint64_t v19 = [v18 processIdentifier];
        buf.val[0] = 67109120;
        buf.val[1] = v19;
        _os_log_impl( &dword_183E58000,  v7,  OS_LOG_TYPE_INFO,  "Advertising identifier: PID %d access denied because because user denided kTCCServiceUserTracking",  (uint8_t *)&buf,  8u);
      }
    }

    else
    {
      if (v11 == 2)
      {
        v27[0] = 0LL;
        if (+[LSATTrackingEnforcementManager shouldEnforceTrackingWithReasonCode:]( &OBJC_CLASS___LSATTrackingEnforcementManager,  "shouldEnforceTrackingWithReasonCode:",  v27))
        {
          _LSDefaultLog();
          v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            -[_LSDClient XPCConnection](self, "XPCConnection");
            id v13 = (void *)objc_claimAutoreleasedReturnValue();
            id v14 = [v13 processIdentifier];
            buf.val[0] = 67109120;
            buf.val[1] = v14;
            _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_INFO,  "Advertising identifier: PID %d access denied because because app has not requested kTCCServiceUserTracking",  (uint8_t *)&buf,  8u);
          }
        }

        else
        {
          _LSDefaultLog();
          v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            buf.val[0] = 134217984;
            *(void *)&buf.val[1] = v27[0];
            _os_log_impl( &dword_183E58000,  v20,  OS_LOG_TYPE_INFO,  "Advertising identifier: AppTrackingTransparency enforcement is off (ATEnforcementServiceReasonCode %ld)",  (uint8_t *)&buf,  0xCu);
          }

          if (!-[LSApplicationRestrictionsManager isLimitAdTrackingForced]((uint64_t)v3))
          {
            _LSDefaultLog();
            v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            v9 = 1;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              -[_LSDClient XPCConnection](self, "XPCConnection");
              unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue();
              unint64_t v24 = [v23 processIdentifier];
              buf.val[0] = 67109120;
              buf.val[1] = v24;
              _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_INFO,  "Advertising identifier: PID %d access permitted because AppTrackingTransparency enforcement is off and L imitAdTracking is off",  (uint8_t *)&buf,  8u);

              v9 = 1;
            }

            goto LABEL_30;
          }

          _LSDefaultLog();
          v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            v21 = -[_LSDClient XPCConnection](self, "XPCConnection");
            v22 = [v21 processIdentifier];
            buf.val[0] = 67109120;
            buf.val[1] = v22;
            _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_INFO,  "Advertising identifier: PID %d access denied because LimitAdTracking is on",  (uint8_t *)&buf,  8u);
          }
        }

        v9 = 0;
LABEL_30:

        goto LABEL_7;
      }

      _LSDefaultLog();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v25 = -[_LSDClient XPCConnection](self, "XPCConnection");
        v26 = [v25 processIdentifier];
        buf.val[0] = 67109376;
        buf.val[1] = v26;
        LOWORD(buf.val[2]) = 1024;
        *(unsigned int *)((char *)&buf.val[2] + 2) = v11;
        _os_log_error_impl( &dword_183E58000,  v7,  OS_LOG_TYPE_ERROR,  "Advertising identifier: PID %d access denied because because kTCCServiceUserTracking has invalid state %u",  (uint8_t *)&buf,  0xEu);
      }
    }

    goto LABEL_6;
  }

  _LSDefaultLog();
  BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    -[_LSDClient XPCConnection](self, "XPCConnection");
    id v16 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v17 = [v16 processIdentifier];
    buf.val[0] = 67109120;
    buf.val[1] = v17;
    _os_log_impl( &dword_183E58000,  v15,  OS_LOG_TYPE_INFO,  "Advertising identifier: PID %d access permitted because user granted kTCCServiceUserTracking",  (uint8_t *)&buf,  8u);
  }

  v9 = 1;
LABEL_7:

  return v9;
}

  return v13;
}

    id v8 = 0;
    goto LABEL_7;
  }

  id v8 = 1;
LABEL_7:

  return v8;
}

  _LSErrorLog();
  v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 67109634;
    v6[1] = v1;
    id v7 = 2082;
    id v8 = strerror(v1);
    v9 = 2048;
    unint64_t v10 = (int)v2;
    _os_log_debug_impl( &dword_183E58000,  v3,  OS_LOG_TYPE_DEBUG,  "Converted POSIX error %i (%{public}s) to OSStatus %li",  (uint8_t *)v6,  0x1Cu);
  }

  return v2;
}

    v9 = *MEMORY[0x189607490];
    v10[0] = @"Could not find open staging directory for main data volume?";
    [MEMORY[0x189603F68] dictionaryWithObjects:v10 forKeys:&v9 count:1];
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  2LL,  (uint64_t)"-[LSOpenStagingDirectoryManager mainDataVolumeStagingURLWithError:]",  428LL,  v7);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_7;
  }
  v6 = -[LSOpenStagingDirectoryManager _locked_stagingDirectoryForKey:]( self,  "_locked_stagingDirectoryForKey:",  self->_mainStagingDirectoryKey.var0.__val_);
  os_unfair_lock_unlock(p_mutex);
  if (!v6)
  {
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  return v6;
}

  if (v5) {
    [*(id *)(a1 + 32) unionSet:v5];
  }
}

LABEL_25:
    os_unfair_recursive_lock_lock_with_options();
  }

  os_unfair_lock_assert_owner((os_unfair_lock_t)&gSessionLock);
  id obj = location;
  v30 = (_LSDatabase *)_LSCopyLocalDatabase(v19, &obj);
  objc_storeStrong(&location, obj);
  if (v30)
  {
    BOOL v31 = _LSDatabaseNeedsUpdate(v30);
    if ((a3 & 2) == 0 && !v31)
    {
      os_unfair_recursive_lock_unlock();
LABEL_62:
      objc_storeStrong(a1, v30);
      id v51 = 0LL;
      char v52 = 1;
      goto LABEL_66;
    }
  }

  else
  {
    LSSessionKey v32 = (LSSessionKey)v19;
    _LSDatabaseNotificationCheck(v32);
  }

  _LSDatabaseGetLog();
  v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    pid_t v62 = getpid();
    v63 = (void *)_LSSessionKeyCopyDescription(v19);
    *(_DWORD *)block = 134218498;
    *(void *)&block[4] = v62;
    *(_WORD *)&block[12] = 2112;
    *(void *)&block[14] = v63;
    *(_WORD *)&block[22] = 2048;
    v82 = v30;
    _os_log_debug_impl( &dword_183E58000,  v33,  OS_LOG_TYPE_DEBUG,  "LS DB needs to be mapped into process %llu for session %@ (existing DB @ %p).",  block,  0x20u);
  }

  v72 = 0LL;
  CFTypeRef cf = 0LL;
  if ([(id)__LSDefaultsGetSharedInstance() hasServer]
    && (CFTypeRef cf = 0LL, _LSCopyServerStore(v18, a3, &v72, &cf, &location)))
  {
    id v69 = location;
    v34 = _LSDatabaseCreate(v72, v19, cf, &v69);
    objc_storeStrong(&location, v69);

    v30 = (_LSDatabase *)v34;
    if (v34)
    {
      LSSessionKey v35 = (LSSessionKey)v34[206];
      if ([(id)__LSDefaultsGetSharedInstance() hasServer])
      {
        os_unfair_recursive_lock_lock_with_options();
        LSSessionKey v36 = v35;
        v37 = (unsigned int *)(_LSGetSession(v36) + 12);
        int v38 = atomic_load(v37);
        if (!notify_is_valid_token(v38))
        {
          [(id)__LSDefaultsGetSharedInstance() databaseUpdateNotificationNameForSessionKey:v35];
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          _LSGetDispatchTokenQueue();
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          *(void *)block = MEMORY[0x1895F87A8];
          *(void *)&block[8] = 3221225472LL;
          *(void *)&block[16] = ___ZL31_LSDatabaseNotificationRegister12LSSessionKey_block_invoke;
          v82 = (_LSDatabase *)&unk_189D72268;
          v41 = v39;
          v83 = v41;
          v84 = (void **)v35;
          LaunchServices::notifyd::NotifyToken::RegisterDispatch(v41, v40, block, &v76);
          LaunchServices::notifyd::NotifyToken::operator=( (LaunchServices::notifyd::NotifyToken *)v37,  (LaunchServices::notifyd::NotifyToken *)&v76);
          LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v76);
        }

        os_unfair_recursive_lock_unlock();
      }

      LSSessionKey v42 = (LSSessionKey)v19;
      v43 = _LSGetSession(v42);
      v43[20] |= 4u;
      int v44 = 1;
    }

    else
    {
      int v44 = 0;
    }

    atomic_store(1u, (unsigned __int8 *)availabilityStateForServiceDomain(v18));
    if (v44) {
      goto LABEL_57;
    }
  }

  else
  {
    int v44 = 0;
  }

  if (!location)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10813LL, (uint64_t)"_LSContextInitClient", 3129LL, 0LL);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = location;
    id location = v46;
LABEL_48:

    goto LABEL_49;
  }

LABEL_26:
}

  return v11;
}

      v2 = 4294967260LL;
      goto LABEL_6;
    }

    v2 = 4294967292LL;
    goto LABEL_6;
  }

  v2 = a1;
  switch((int)a1)
  {
    case -1:
      if (*__error() == -1) {
        goto LABEL_25;
      }
      uint64_t v5 = __error();
      v2 = _LSGetOSStatusFromPOSIXErrorCode(*v5);
      break;
    case 0:
      break;
    case 1:
      v2 = 4294967242LL;
      break;
    case 2:
      v2 = 4294967253LL;
      break;
    case 9:
      v2 = 4294967245LL;
      break;
    case 12:
    case 23:
      v2 = 4294967255LL;
      break;
    case 13:
      goto LABEL_20;
    case 16:
      goto LABEL_16;
    case 17:
      v2 = 4294967248LL;
      break;
    case 20:
      v2 = 4294967176LL;
      break;
    case 22:
      v2 = 4294967246LL;
      break;
    case 24:
      v2 = 4294967254LL;
      break;
    case 28:
      goto LABEL_21;
    case 30:
      v2 = 4294967235LL;
      break;
    default:
      goto LABEL_25;
  }

  if (a8) {
    LSSessionKey v32 = v22;
  }
  else {
    LSSessionKey v32 = 1;
  }
  if ((v32 & 1) == 0) {
    *a8 = v23;
  }

  return v22;
}

                v20 = _LSRegisterExtensionPoint(v12, 0LL, a3, a4, a5, a6);
                goto LABEL_26;
              }
            }
          }
        }
      }
    }

    else
    {
      CFDictionaryGetTypeID();
    }

    v25 = kLSVersionNumberNull;
    v26 = *(_OWORD *)algn_183FBF5B0;
    goto LABEL_22;
  }

  _LSRegistrationLog();
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( &dword_183E58000,  v19,  OS_LOG_TYPE_ERROR,  "No declaringFrameworkURL or parentBundleUnit != nullID, so returning kLSApplicationNotFoundErr",  buf,  2u);
  }

  v20 = 4294956482LL;
LABEL_26:

  return v20;
}

            if (v28[1]) {
              CFRelease(v28[1]);
            }
            v28[1] = 0LL;
            if (v28[0]) {
              CFRelease(v28[0]);
            }
            v28[0] = 0LL;
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            goto LABEL_31;
          }

          CFDictionarySetValue(a5, @"_LSBundleLibraryPath", v22);
          CFRelease(v22);
          CFRelease(v21);
        }
      }
    }

    if ((v14->options & 0x10000000) != 0)
    {
      v25 = xmmword_183FBF3F0;
      v26 = 1LL;
      cf[1] = &v25;
      _LSHoistLibraryItems((uint64_t)a1, cf);
    }

    else
    {
      for (i = 0LL; i != 60; i += 6LL)
      {
        cf[1] = &kLibrarySubfolders[i];
        _LSHoistLibraryItems((uint64_t)a1, cf);
      }
    }

    if (a7) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }

    v47 = *p_bundleLocalizations;
    uint64_t v19 = @"en";
    goto LABEL_26;
  }
  v18 = -[_LSStringLocalizer bundleProvider](v12, "bundleProvider");
  uint64_t v19 = (__CFString *)LSBundleProvider::CFBundleCopyDevelopmentRegion((LSBundleProvider *)[v18 provider]);

  if ([v10 isEqual:@"InfoPlist"])
  {
    v20 = -[_LSStringLocalizer bundleProvider](v12, "bundleProvider");
    [v20 infoDictionary];
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21 == 0LL;

    if (v22)
    {
      if (!-[__CFString cfBundleRef:reason:](v9, "cfBundleRef:reason:", 1LL, @"Need to load non-Info.Plist file")) {
        goto LABEL_8;
      }
      unsigned __int8 v23 = (void *)_CFBundleCopyInfoPlistURL();
      if (!v23) {
        goto LABEL_7;
      }
      int v38 = +[_LSLazyPropertyList lazyPropertyListWithPropertyListURL:]((uint64_t)&OBJC_CLASS____LSLazyPropertyList, v23);
      unlocalizedInfoPlistStrings = v12->_unlocalizedInfoPlistStrings;
      v12->_unlocalizedInfoPlistStrings = (_LSLazyPropertyList *)v38;
    }

    else
    {
      -[_LSStringLocalizer bundleProvider](v12, "bundleProvider");
      unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue();
      [v23 infoDictionary];
      unlocalizedInfoPlistStrings = (void *)objc_claimAutoreleasedReturnValue();
      v25 = +[_LSLazyPropertyList lazyPropertyListWithPropertyList:]( (uint64_t)&OBJC_CLASS____LSLazyPropertyList,  unlocalizedInfoPlistStrings);
      v26 = v12->_unlocalizedInfoPlistStrings;
      v12->_unlocalizedInfoPlistStrings = (_LSLazyPropertyList *)v25;
    }

LABEL_7:
  }

  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 0x40000000LL;
  v16[2] = ___AppleIDAuthenticationFindPersonWithBlock_block_invoke;
  v16[3] = &unk_189D7A440;
  v16[4] = a4;
  softLinkSFAppleIDClientCopyPersonInfo((uint64_t)ValueAtIndex, a3, (uint64_t)v16);
  return 1LL;
}

LABEL_57:
  if (v44 && v30)
  {
    _LSSetLocalDatabase(v30);
    _LSDatabaseGetHeader(block);
    _LSDatabaseGetLog();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v47, OS_LOG_TYPE_DEBUG)) {
      _LSContextInitCommon();
    }
    goto LABEL_48;
  }

  if (self->_installType)
  {
    if ([(id)__LSDefaultsGetSharedInstance() allowsAlternateIcons])
    {
      v40 = (self->_bundleFlags & 0x40000) == 0;
      v41 = (void *)MEMORY[0x186E2A59C]();
      if (v40)
      {
        +[LSAltIconManager sharedInstance](&OBJC_CLASS___LSAltIconManager, "sharedInstance");
        LSSessionKey v42 = (void *)objc_claimAutoreleasedReturnValue();
        [v42 clearAlternateNameForBundleIdentifier:v49->_installType validationDictionary:v49->_alternatePrimaryIconName];
      }
    }

    else
    {
      v41 = (void *)MEMORY[0x186E2A59C]();
    }

    objc_autoreleasePoolPop(v41);
  }

  v43 = v54;

  return v43;
}

LABEL_49:
  if (cf) {
    CFRelease(cf);
  }

  os_unfair_recursive_lock_unlock();
  if (v30) {
    BOOL v48 = 0;
  }
  else {
    BOOL v48 = v44 != 0;
  }
  if (v48)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10813LL, (uint64_t)"_LSContextInitClient", 3143LL, 0LL);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = location;
    id location = v49;
LABEL_56:

    v30 = 0LL;
    goto LABEL_63;
  }

  if (v44) {
    goto LABEL_62;
  }
LABEL_63:
  id v53 = *a1;
  *a1 = 0LL;

  _LSDatabaseGetLog();
  v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
    _LSContextInitCommon();
  }

  id v51 = location;
  char v52 = 0;
LABEL_66:

  id v16 = v51;
  if ((v52 & 1) != 0)
  {
LABEL_10:
    if (_LSDatabaseGetNoServerLock::once != -1) {
      dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_88);
    }
    if (_LSDatabaseGetNoServerLock::result) {
      pthread_mutex_lock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
    }
    uint64_t v17 = 1LL;
    goto LABEL_74;
  }

LABEL_67:
  v55 = (void *)MEMORY[0x186E2A59C]();
  [NSString stringWithFormat:@"_LSContextInitReturningError() failed with error %@", v16];
  v56 = (id *)(id)objc_claimAutoreleasedReturnValue();
  v57 = (dispatch_queue_s *)_LSLoggingQueue(void)::logQueue;
  *(void *)block = MEMORY[0x1895F87A8];
  *(void *)&block[8] = 3221225472LL;
  *(void *)&block[16] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  v82 = (_LSDatabase *)&unk_189D741C8;
  v83 = v56;
  v58 = v56;
  dispatch_sync(v57, block);

  dispatch_time_t v59 = dispatch_time(0LL, 2000000000LL);
  dispatch_after(v59, (dispatch_queue_t)_LSLoggingQueue(void)::logQueue, &__block_literal_global_275);

  objc_autoreleasePoolPop(v55);
  if (a4)
  {
    id v16 = v16;
    uint64_t v17 = 0LL;
    *a4 = v16;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

LABEL_74:
  v60 = getIsCurrentThreadInLSContextInitReference();
  --*v60;

  return v17;
}

  return v21;
}

void sub_183E5A748( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__()
{
  uint64_t result = _LSCurrentProcessMayMapDatabase();
  if (!(_DWORD)result) {
    return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__("forbidden-map-ls-database");
  }
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_ABORTING_BECAUSE_THIS_PROCESS_MAY_NOT_MAP_THE_DATABASE__()
{
  uint64_t result = _LSCurrentProcessMayMapDatabase();
  if (!(_DWORD)result)
  {
    uint64_t result = [(id)__LSDefaultsGetSharedInstance() abortIfMayNotMapDatabase];
    if ((_DWORD)result) {
      abort();
    }
  }

  return result;
}

void sub_183E5AA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSCopyLocalDatabase(unint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v4 = (LSSessionKey)a1;
  uint64_t v5 = _LSGetSession(v4);
  if (!*((void *)v5 + 3))
  {
    if (a2)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10813LL, (uint64_t)"_LSCopyLocalDatabase", 799LL, 0LL);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
LABEL_13:
      id v8 = 0LL;
      *a2 = v9;
      goto LABEL_15;
    }

LABEL_14:
    id v8 = 0LL;
    goto LABEL_15;
  }

  v6 = v5;
  unint64_t v7 = *(void *)(*((void *)v5 + 3) + 1648LL);
  if ((v7 & 0x100000000LL) == 0)
  {
    if ((a1 & 0x100000000LL) == 0 && (_DWORD)v7 == (_DWORD)a1) {
      goto LABEL_5;
    }
LABEL_9:
    _LSDatabaseGetLog();
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      id v12 = *((id *)v6 + 3);
      id v13 = (id)_LSSessionKeyCopyDescription(a1);
      id v14 = (void *)_LSSessionKeyCopyDescription(v7);
      int v15 = 138543874;
      id v16 = v12;
      __int16 v17 = 2112;
      id v18 = v13;
      __int16 v19 = 2112;
      v20 = v14;
      _os_log_fault_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_FAULT,  "session key of database %{public}@ was expected to be %@, but was %@!",  (uint8_t *)&v15,  0x20u);
    }

    if (a2)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10817LL, (uint64_t)"_LSCopyLocalDatabase", 794LL, 0LL);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  if ((a1 & 0x100000000LL) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  id v8 = *((id *)v5 + 3);
LABEL_15:
  os_unfair_recursive_lock_unlock();
  return v8;
}

  return v10;
}

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    int v15 = [v3 objectForKeyedSubscript:@"LSDefaultLocalizedValue"];
    id v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
    __int16 v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }

LABEL_17:
}

  v6 = (__CFFileDescriptor *)*((void *)streamRef + 52);
  if (v6) {
    CFFileDescriptorEnableCallBacks(v6, 1uLL);
  }
  unint64_t v7 = (dispatch_object_s *)*((void *)streamRef + 54);
  if (v7) {
    resume_source(v7, (int *)streamRef + 110);
  }
  LOBYTE(v3) = 1;
  return v3;
}

        free(v10);
      }
    }

    syslog(2, "dev %d (%s) : purging events up to event id %lld", dev, v17, eventId);
    if (f2d_purge_events_for_device_up_to_event_id_rpc(FSEvents_f2d_public_port, dev, eventId, &v16))
    {
      id v14 = (os_log_s *)fsevent_default_log();
      uint64_t v5 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (v5)
      {
        FSEventsPurgeEventsForDeviceUpToEventId_cold_1();
        LOBYTE(v5) = 0;
      }
    }

    else
    {
      LOBYTE(v5) = v16 == 0;
    }
  }

  return v5;
}

  v11 = v10;

  return v11;
}

    id v12 = 0LL;
    goto LABEL_15;
  }

  v11 = [MEMORY[0x189603F48] dataWithBytes:v10 length:strlen(v10)];
  id v12 = (void *)v11;
  if (a5 && !v11)
  {
    id v13 = 3718LL;
    id v14 = -41LL;
LABEL_13:
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  v14,  (uint64_t)"-[FSNode(BookmarkData) bookmarkDataWithOptions:relativeToNode:error:]",  v13,  0LL);
    id v12 = 0LL;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v8;
}

  _LSDefaultLog();
  v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
    _LSUnregisterAppWithBundleID_cold_1();
  }

  v27 = 0LL;
LABEL_18:
  _LSLogStepFinished(6LL, v27, a2, @"Finished _LSUnregisterAppWithBundleID", v13, v14, v15, v16, v29);

  return v17;
}

  if (!*((void *)this + 1))
  {
    unint64_t v10 = (const __CFString *)*((void *)this + 2);
    if (v10)
    {
      v11 = _LSDatabaseGetStringForCFString(**(void ***)this, v10, 1);
      LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 5u, v11);
    }
  }

  if ((*((_BYTE *)this + 117) & 0x20) != 0)
  {
    id v14 = *((void *)this + 27) == 0LL;
    _LSBindingLog();
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    id v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG);
    if (v14)
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl( &dword_183E58000,  v15,  OS_LOG_TYPE_DEBUG,  "Skipping wildcard document claims because we are not binding to a UTI",  (uint8_t *)&buf,  2u);
      }

      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Skipping wildcard document claims because we are not binding to a UTI",  v20);
    }

    else
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl( &dword_183E58000,  v15,  OS_LOG_TYPE_DEBUG,  "Adding wildcard document claims from all applications",  (uint8_t *)&buf,  2u);
      }

      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding wildcard document claims from all applications",  v17);
      *(void *)&buf = MEMORY[0x1895F87A8];
      *((void *)&buf + 1) = 3221225472LL;
      BOOL v29 = ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke;
      v30 = &__block_descriptor_40_e19_v32__0I8r_v12I20_24l;
      BOOL v31 = this;
      _CSStoreEnumerateUnits();
    }
  }

  else
  {
    _LSBindingLog();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_DEBUG,  "Skipping legacy wildcard document claims",  (uint8_t *)&buf,  2u);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Skipping legacy wildcard document claims",  v13);
  }

  _LSBindingLog();
  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_183E58000, v21, OS_LOG_TYPE_DEBUG, "%llu bindings found", (uint8_t *)&buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%llu bindings found",  v23,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5));
}

  return v15;
}

  return v11;
}

  _LSDatabaseSentinelDecrement();
  if (!v9) {
    _LSDatabaseSentinelFlush();
  }
  if (v7)
  {
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  v7,  (uint64_t)"-[_LSDModifyClient unregisterApplicationAtURL:reply:]_block_invoke",  1328LL,  0LL);
    int v15 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    int v15 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

            if (a3) {
              StringForCFString = _LSDatabaseCreateStringForCFString(v7, v12, 0);
            }
            else {
              StringForCFString = _LSDatabaseGetStringForCFString(v7, v12, 0);
            }
            id v8 = StringForCFString;
            goto LABEL_18;
          }

          unint64_t v10 = 2;
        }

        *a4 = v10;
        id v12 = FirstTag;
        goto LABEL_14;
      }

      *a4 = 0;
      if (a3) {
        v11 = _LSDatabaseCreateStringForCFString(v7, a2, 1);
      }
      else {
        v11 = _LSDatabaseGetStringForCFString(v7, a2, 1);
      }
      id v8 = v11;
    }

    else
    {
      id v8 = 0LL;
    }
  }

  getNeedsRegistrationLog();
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = 134217984;
    __int16 v19 = a4;
    _os_log_impl(&dword_183E58000, v16, OS_LOG_TYPE_DEFAULT, "bundle 0x%llx needs registration", (uint8_t *)&v18, 0xCu);
  }

  int v15 = 1LL;
LABEL_17:

  return v15;
}

  return v2;
}

        [*(id *)(v2 + 2216) defaultManager];
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = 0LL;
        v26 = [v25 removeItemAtURL:v13 error:&v37];
        id v9 = v37;

        if ((v26 & 1) == 0)
        {
          _LSInstallLog();
          v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            unsigned __int8 v45 = v13;
            v46 = 2112;
            v47 = (uint64_t)v9;
            _os_log_error_impl( &dword_183E58000,  v27,  OS_LOG_TYPE_ERROR,  "Error unlinking notification journal file at %@: %@",  buf,  0x16u);
          }
        }

        ++v12;
      }

      while (v8 != v12);
      LSSessionKey v32 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
      id v8 = v32;
      if (!v32)
      {

        v6 = v34;
        break;
      }
    }
  }

  [v6 sortUsingComparator:&__block_literal_global_296_0];
  return v6;
}

  CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
  return MutableCopy;
}

void sub_183E5AD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *_LSGetSession(LSSessionKey a1)
{
  LSSessionKey v4 = a1;
  uint64_t v1 = _LSGetSessions();
  uint64_t v5 = &v4;
  v2 = (char *)std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>( v1,  (unsigned int *)&v4,  (uint64_t)&std::piecewise_construct,  (void **)&v5)[3];
  if (!v2)
  {
    v2 = (char *)operator new(0x38uLL);
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *(void *)(v2 + 12) = -1LL;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    uint64_t v5 = &v4;
    std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>( v1,  (unsigned int *)&v4,  (uint64_t)&std::piecewise_construct,  (void **)&v5)[3] = v2;
  }

  return v2;
}

uint64_t _LSGetSessions(void)
{
  return _LSGetSessions(void)::sessions;
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__do_rehash<true>( a1,  prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__do_rehash<true>( uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(va, 8) = a1 + 16;
      v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

void *std::__hash_table<std::__hash_value_type<LSSessionKey,LSSession *>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSSession *>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSSession *>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey const&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  if (*((_BYTE *)a2 + 4)) {
    unint64_t v7 = 1LL;
  }
  else {
    unint64_t v7 = *a2;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *(void *)a2;
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v7)
          {
            uint64_t v14 = v11[2];
            if ((v14 & 0x100000000LL) != 0)
            {
              if ((v12 & 0x100000000LL) != 0) {
                return v11;
              }
            }

            else if ((v12 & 0x100000000LL) == 0 && (_DWORD)v14 == (_DWORD)v12)
            {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }

            else
            {
              v13 &= v8 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  v11 = operator new(0x20uLL);
  void *v11 = 0LL;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0LL;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1LL;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v21 = *(void *)a1;
  v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *v11 = *v22;
LABEL_46:
    void *v22 = v11;
    goto LABEL_47;
  }

  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v23 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }

    else
    {
      v23 &= v8 - 1;
    }

    v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_46;
  }

LABEL_47:
  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  objc_autoreleasePoolPop(context);

  return v13;
}

void sub_183E5B2C8(_Unwind_Exception *a1)
{
}

BOOL _LSDatabaseNeedsUpdate(_LSDatabase *a1)
{
  uint64_t v1 = a1;
  if ((*((_BYTE *)v1 + 1664) & 6) != 0)
  {
    BOOL v2 = 0LL;
  }

  else
  {
    os_unfair_recursive_lock_lock_with_options();
    if ((*((_BYTE *)v1 + 1664) & 1) != 0)
    {
      BOOL v2 = 1LL;
    }

    else
    {
      LSSessionKey sessionKey = v1->sessionKey;
      BOOL v2 = _LSDatabaseNotificationCheck(sessionKey);
      *((_BYTE *)v1 + 1664) = *((_BYTE *)v1 + 1664) & 0xFE | v2;
    }

    os_unfair_recursive_lock_unlock();
  }

  return v2;
}

void sub_183E5B360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSDatabaseNotificationCheck(LSSessionKey a1)
{
  LSSessionKey v2 = a1;
  v3 = (unsigned int *)(_LSGetSession(v2) + 16);
  int v4 = atomic_load(v3);
  if (!notify_is_valid_token(v4))
  {
    [(id)__LSDefaultsGetSharedInstance() databaseUpdateNotificationNameForSessionKey:a1];
    unint64_t v5 = (LaunchServices::notifyd::NotifyToken *)objc_claimAutoreleasedReturnValue();
    LaunchServices::notifyd::NotifyToken::RegisterCheck(v5, &v11);
    LaunchServices::notifyd::NotifyToken::operator=( (LaunchServices::notifyd::NotifyToken *)v3,  (LaunchServices::notifyd::NotifyToken *)&v11);
    LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)&v11);
  }

  if (([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) != 0
    || [(id)__LSDefaultsGetSharedInstance() isServer])
  {
    int v6 = atomic_load(v3);
    if (notify_is_valid_token(v6))
    {
      unint64_t v7 = LaunchServices::notifyd::NotifyToken::checkValue((LaunchServices::notifyd::NotifyToken *)v3);
      BOOL v9 = (v7 & 0xFF00000000LL) == 0 || (_DWORD)v7 != 0;
    }

    else
    {
      BOOL v9 = 1LL;
    }
  }

  else
  {
    BOOL v9 = 0LL;
  }

  os_unfair_recursive_lock_unlock();
  return v9;
}

void sub_183E5B448( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  _Unwind_Resume(a1);
}

unint64_t LaunchServices::notifyd::NotifyToken::checkValue( LaunchServices::notifyd::NotifyToken *this)
{
  int check = 0;
  int v1 = atomic_load((unsigned int *)this);
  uint32_t v2 = notify_check(v1, &check);
  if (v2) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = check;
  }
  return v3 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t _LSFindBundleWithInfo( LSContext *a1, unint64_t a2, void *a3, int a4, const void *a5, uint64_t a6, void *a7)
{
  return _LSFindBundleWithInfo_NoIOFiltered(a1, a2, a3, a4, a5, a6, 0LL, 0LL, a7);
}

uint64_t _LSFindBundleWithInfo_NoIOFiltered( LSContext *a1, unint64_t a2, void *a3, int a4, const void *a5, uint64_t a6, void *a7, void *a8, void *a9)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v37 = a7;
  id v16 = a8;
  uint64_t v52 = 0LL;
  id v53 = &v52;
  uint64_t v54 = 0x2020000000LL;
  int v55 = 0;
  uint64_t v48 = 0LL;
  v49 = &v48;
  uint64_t v50 = 0x2020000000LL;
  char v51 = 0;
  if (!a1)
  {
    [MEMORY[0x1896077D8] currentHandler];
    LSSessionKey v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "LSBundleID _LSFindBundleWithInfo_NoIOFiltered(LSContext * _Nonnull, LSBundleType, CFStringRef _Nullable, Boolean, CFURLRef _Nullable, UInt64, NSString *__strong _Nullable, BOOL (^__strong _Nullable)(LSContext *, LSBundleID, cons t LSBundleData *), NSError *__autoreleasing * _Nullable)");
    LSSessionKey v36 = (void *)objc_claimAutoreleasedReturnValue();
    [v35 handleFailureInFunction:v36, @"LSBundleProxy.m", 130, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];
  }

  if (a3)
  {
    if (a2 == 7)
    {
      __int128 v56 = kLSVersionNumberNull;
      __int128 v57 = *(_OWORD *)algn_183FBF5B0;
      BOOL v17 = _LSBundleFindWithInfoAndNo_IOFilter( a1,  0LL,  a3,  a4 != 0,  &v56,  14,  1152,  v37,  v16,  (_DWORD *)v53 + 6,  0LL,  a9);
      *((_BYTE *)v49 + 24) = v17;
      goto LABEL_39;
    }

    if (a2 >= 2)
    {
      id v26 = 0LL;
      if (!*((_BYTE *)v49 + 24))
      {
LABEL_20:
        if (a2 == 3 || !a2)
        {
          id v46 = v26;
          __int128 v56 = kLSVersionNumberNull;
          __int128 v57 = *(_OWORD *)algn_183FBF5B0;
          BOOL v27 = _LSBundleFindWithInfoAndNo_IOFilter( a1,  0LL,  a3,  a4 != 0,  &v56,  2,  1152,  v37,  v16,  (_DWORD *)v53 + 6,  0LL,  &v46);
          id v28 = v46;

          *((_BYTE *)v49 + 24) = v27;
          id v26 = v28;
          if (v27) {
            goto LABEL_28;
          }
        }

        if ((a2 | 8) == 8)
        {
          id v45 = v26;
          __int128 v56 = kLSVersionNumberNull;
          __int128 v57 = *(_OWORD *)algn_183FBF5B0;
          BOOL v29 = _LSBundleFindWithInfoAndNo_IOFilter( a1,  0LL,  a3,  a4 != 0,  &v56,  16,  32896,  v37,  v16,  (_DWORD *)v53 + 6,  0LL,  &v45);
          id v28 = v45;

          *((_BYTE *)v49 + 24) = v29;
          if (v29) {
            goto LABEL_28;
          }
        }

        else
        {
          id v28 = v26;
        }

        if (a2 != 5 && a2) {
          goto LABEL_47;
        }
        id v44 = v28;
        __int128 v56 = kLSVersionNumberNull;
        __int128 v57 = *(_OWORD *)algn_183FBF5B0;
        BOOL v33 = _LSBundleFindWithInfoAndNo_IOFilter( a1,  0LL,  a3,  a4 != 0,  &v56,  13,  128,  v37,  v16,  (_DWORD *)v53 + 6,  0LL,  &v44);
        id v34 = v44;

        *((_BYTE *)v49 + 24) = v33;
        id v28 = v34;
        if (!v33)
        {
LABEL_47:
          if (!v28)
          {
            _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10814LL,  (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered",  166LL,  0LL);
            id v28 = (id)objc_claimAutoreleasedReturnValue();
          }
        }

        goto LABEL_28;
      }
    }

    else
    {
      id v47 = 0LL;
      __int128 v56 = kLSVersionNumberNull;
      __int128 v57 = *(_OWORD *)algn_183FBF5B0;
      BOOL v25 = _LSBundleFindWithInfoAndNo_IOFilter( a1,  0LL,  a3,  a4 != 0,  &v56,  2,  128,  v37,  v16,  (_DWORD *)v53 + 6,  0LL,  &v47);
      id v26 = v47;
      *((_BYTE *)v49 + 24) = v25;
      if (!v25) {
        goto LABEL_20;
      }
    }

    id v28 = v26;
LABEL_28:
    if (a9) {
      *a9 = v28;
    }

    goto LABEL_39;
  }

  if (a5)
  {
    CFErrorRef v18 = _LSCreateResolvedURL(a5);
    unint64_t v19 = -[FSNode initWithURL:flags:error:](objc_alloc(&OBJC_CLASS___FSNode), "initWithURL:flags:error:", v18, 0LL, a9);
    if (v19)
    {
      *(void *)&__int128 v56 = 0LL;
      int v20 = _LSBundleFindWithNode(a1, v19, (_DWORD *)v53 + 6, &v56);
      BOOL v21 = _LSGetNSErrorFromOSStatusImpl(v20, a9, (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered", 178LL);
      *((_BYTE *)v49 + 24) = v21;
      if (v16 && v21)
      {
        char v23 = (*((uint64_t (**)(id, LSContext *, void, void))v16 + 2))( v16,  a1,  *((unsigned int *)v53 + 6),  v56);
        *((_BYTE *)v49 + 24) = v23;
        char v24 = a9 ? v23 : 1;
        if ((v24 & 1) == 0)
        {
          _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10814LL,  (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered",  185LL,  0LL);
          *a9 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
    }
  }

  else if (a6)
  {
    if (a2 == 5) {
      uint64_t v30 = 13LL;
    }
    else {
      uint64_t v30 = 2LL;
    }
    v38[0] = MEMORY[0x1895F87A8];
    v38[1] = 3221225472LL;
    v38[2] = ___LSFindBundleWithInfo_NoIOFiltered_block_invoke;
    v38[3] = &unk_189D74640;
    uint64_t v42 = a6;
    id v39 = v16;
    v40 = &v52;
    v43 = a1;
    v41 = &v48;
    _LSEnumerateViableBundlesOfClass(a1, v30, v38);
    if (a9 && !*((_BYTE *)v49 + 24))
    {
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10814LL,  (uint64_t)"_LSFindBundleWithInfo_NoIOFiltered",  203LL,  0LL);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

LABEL_39:
  if (*((_BYTE *)v49 + 24))
  {
    uint64_t v31 = *((unsigned int *)v53 + 6);
  }

  else
  {
    uint64_t v31 = 0LL;
    *((_DWORD *)v53 + 6) = 0;
  }

  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v52, 8);

  return v31;
}

  ++*(void *)(a1 + 24);
  return v11;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

  if (v20 <= 0x3E6 && (v11 & 0x80000000) == 0) {
    return 0LL;
  }
LABEL_45:
  id v34 = (os_log_s *)fsevent_default_log();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    LSSessionKey v36 = strerror(v13);
    *(_DWORD *)buf = 136316418;
    id v44 = "watch_path";
    id v45 = 2080;
    p_s = (char *)a3;
    id v47 = 1024;
    uint64_t v48 = v11;
    v49 = 1024;
    *(_DWORD *)uint64_t v50 = v10;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v13;
    LOWORD(v51[0]) = 2080;
    *(void *)((char *)v51 + 2) = v36;
    _os_log_error_impl( &dword_183E58000,  v34,  OS_LOG_TYPE_ERROR,  "%s: watching path (%s) fd(%d) retry (%d) failed (%d):(%s)",  buf,  0x32u);
  }

  return v13;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v12;
}

  ++*(void *)(a1 + 40);
  return i;
}

  ++*(void *)(a1 + 24);
  return v10;
}

  ++*(void *)(a1 + 24);
  return v11;
}

        id v16 = 0LL;
LABEL_55:

        goto LABEL_56;
      }

      goto LABEL_49;
    }
  }

  else
  {
    if (v12)
    {
      [v11 getResourceValue:&v58 forKey:*MEMORY[0x189603E38] options:1 error:a7];
      float v15 = v58;
      if (v15) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }

    [v11 nameWithError:a7];
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue();
    CFErrorRef v18 = v58;
    uint64_t v58 = v17;

    float v15 = v17;
  }

  unint64_t v19 = [v15 stringByDeletingPathExtension];

  float v15 = (id)v19;
  if (v19) {
    goto LABEL_12;
  }
LABEL_9:
  id v16 = 0LL;
LABEL_56:

  return v16;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return i;
}

  ++*(void *)(a1 + 24);
  return v14;
}

  HIDWORD(v99[0]) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 5), 0);
  BOOL v33 = (const __CFString *)*((void *)a2 + 7);
  if (!v33)
  {
    if ((*((_BYTE *)a2 + 188) & 1) == 0) {
      goto LABEL_43;
    }
    BOOL v33 = @"0000000000";
  }

  LODWORD(v99[1]) = _LSDatabaseCreateStringForCFString(v13, v33, 0);
LABEL_43:
  if (Value) {
    id v34 = Value;
  }
  else {
    id v34 = v17;
  }
  StringForCFString = _LSDatabaseCreateStringForCFString(v13, v19, 0);
  if (v21) {
    LSSessionKey v36 = v21;
  }
  else {
    LSSessionKey v36 = (__CFString *)v76;
  }
  DWORD1(v104) = StringForCFString;
  _LSGetVersionFromString(v36, buf);
  *(_OWORD *)((char *)&v99[1] + 12) = *(_OWORD *)buf;
  *(_OWORD *)((char *)&v99[2] + 12) = *(_OWORD *)&buf[16];
  if (a3) {
    _LSGetVersionFromString(a3, buf);
  }
  else {
    memset(buf, 0, sizeof(buf));
  }
  *(_OWORD *)((char *)v105 + 4) = *(_OWORD *)buf;
  *(_OWORD *)((char *)&v105[1] + 4) = *(_OWORD *)&buf[16];
  DWORD1(v99[1]) = v77;
  if (v17)
  {
    id v37 = _LSDatabaseCreateStringForCFString(v13, v17, 0);
    goto LABEL_66;
  }

  if (_LSExtensionPointFindWithIdentifier(v13, v34, v77, 0LL, &v87, &v86) == -10814)
  {
    _LSRegistrationLog();
    int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v34;
      _os_log_impl( &dword_183E58000,  v38,  OS_LOG_TYPE_INFO,  "Registering extension %@ but haven't yet registered extension point %@",  buf,  0x16u);
    }

  ++*(void *)(a1 + 24);
  return v12;
}

  ++*(void *)(a1 + 24);
  return v11;
}

void sub_183E5BAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

BOOL _LSBundleFindWithInfoAndNo_IOFilter( LSContext *a1, NSString *a2, void *a3, int a4, _OWORD *a5, int a6, int a7, void *a8, void *a9, _DWORD *a10, void *a11, void *a12)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  unint64_t v19 = a3;
  id v20 = a8;
  id v21 = a9;
  v38[0] = 0;
  char v39 = 0;
  if (a4)
  {
    if (!a12)
    {
LABEL_19:
      BOOL v24 = 0LL;
      goto LABEL_20;
    }

    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -4LL, (uint64_t)"_LSBundleFindWithInfoAndNo_IOFilter", 775LL, 0LL);
    *a12 = (id)objc_claimAutoreleasedReturnValue();
  }

  else if (v19 || (_DWORD)a2 && (_DWORD)a2 != 1061109567)
  {
    __int128 v22 = a5[1];
    v31[0] = *a5;
    v31[1] = v22;
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(v19, 0LL, a2, 0LL, v31, (uint64_t)&__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>( (LaunchServices::BindingEvaluator *)v38,  (const LaunchServices::BindingEvaluator *)&__p);
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&__p);
  }

  else if (a12)
  {
    uint64_t v29 = *MEMORY[0x189607490];
    uint64_t v30 = @"inBundleID || inHFSCreator";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    id v26 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSBundleFindWithInfoAndNo_IOFilter", 781LL, v26);
    *a12 = (id)objc_claimAutoreleasedReturnValue();
  }

  if (!v39) {
    goto LABEL_19;
  }
  LaunchServices::BindingEvaluator::setLimit((uint64_t)v38, 1uLL);
  LaunchServices::BindingEvaluator::setOptions((uint64_t)v38, a7);
  char v23 = operator new(4uLL);
  __p = v23;
  *char v23 = a6;
  BOOL v33 = v23 + 1;
  id v34 = v23 + 1;
  LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)v38, (uint64_t)&__p);
  if (__p)
  {
    BOOL v33 = __p;
    operator delete(__p);
  }

  if (v21)
  {
    v27[0] = MEMORY[0x1895F87A8];
    v27[1] = 3221225472LL;
    v27[2] = ___LSBundleFindWithInfoAndNo_IOFilter_block_invoke;
    v27[3] = &unk_189D74430;
    id v28 = v21;
    LaunchServices::BindingEvaluator::setFilter((uint64_t)v38, v20, v27);
  }

  LaunchServices::BindingEvaluator::getBestBinding((LaunchServices::BindingEvaluator *)v38, a1, a12, (uint64_t *)&__p);
  BOOL v24 = v37 != 0;
  if (v37)
  {
    if (a10) {
      *a10 = (_DWORD)__p;
    }
    if (a11) {
      *a11 = v33;
    }
  }

  if (v39) {
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v38);
  }
LABEL_20:

  return v24;
}

void sub_183E5BDD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a64) {
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a43);
  }

  _Unwind_Resume(a1);
}

__n128 LaunchServices::BindingEvaluator::CreateWithBundleInfo@<Q0>( LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, NSString *a3@<X2>, LSVersionNumber *a4@<X4>, _OWORD *a5@<X3>, uint64_t a6@<X8>)
{
  char v6 = (char)a4;
  unsigned int v8 = a3;
  uint64_t v36 = *MEMORY[0x1895F89C0];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a6);
  _LSBindingLog();
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v13 = (id)_LSCopyStringForOSType(v8);
    __int128 v14 = a5[1];
    v27[0] = *a5;
    v27[1] = v14;
    _LSVersionNumberGetStringRepresentation(v27);
    float v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138478595;
    uint64_t v29 = this;
    __int16 v30 = 2113;
    uint64_t v31 = a2;
    __int16 v32 = 2114;
    BOOL v33 = v13;
    __int16 v34 = 2114;
    id v35 = v15;
    _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_DEBUG,  "BindingEvaluator::CreateWithBundleInfo(ID=%{private}@, name=%{private}@, CC=%{public}@, vers=%{public}@)",  buf,  0x2Au);
  }

  id v16 = (__CFString *)_LSCopyStringForOSType(v8);
  __int128 v17 = a5[1];
  v26[0] = *a5;
  v26[1] = v17;
  _LSVersionNumberGetStringRepresentation(v26);
  CFErrorRef v18 = (void *)objc_claimAutoreleasedReturnValue();
  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Creating binding evaluator for bundle info: ID=%@, name=%@, CC=%@, vers=%@",  v19,  this,  a2,  v16,  v18);

  uint64_t v20 = -[LaunchServices::BindingEvaluator copy](this, "copy");
  id v21 = *(void **)(a6 + 32);
  *(void *)(a6 + 32) = v20;

  uint64_t v22 = -[NSString copy](a2, "copy");
  char v23 = *(void **)(a6 + 40);
  *(void *)(a6 + 40) = v22;

  __n128 result = *(__n128 *)a5;
  __int128 v25 = a5[1];
  *(_OWORD *)(a6 + 4_Block_object_dispose(va, 8) = *a5;
  *(_OWORD *)(a6 + 64) = v25;
  *(_BYTE *)(a6 + 8_Block_object_dispose(va, 8) = 1;
  *(_BYTE *)(a6 + 89) = v6;
  return result;
}

void sub_183E5C004(_Unwind_Exception *a1)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *LaunchServices::BindingEvaluator::BindingEvaluator( LaunchServices::BindingEvaluator *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 3) = kLSVersionNumberNull;
  *((_OWORD *)this + 4) = *(_OWORD *)algn_183FBF5B0;
  *((void *)this + 10) = 0LL;
  *((_WORD *)this + 44) = 0;
  *((void *)this + 12) = 32LL;
  *((_DWORD *)this + 26) = 14;
  *(void *)((char *)this + 10_Block_object_dispose(va, 8) = 0LL;
  *(void *)((char *)this + 124) = 0LL;
  *(void *)((char *)this + 116) = 0LL;
  *((_DWORD *)this + 33) = 0;
  uint32_t v2 = operator new(4uLL);
  *((void *)this + 14) = v2;
  *v2++ = 2;
  *((void *)this + 15) = v2;
  *((void *)this + 16) = v2;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

void sub_183E5C0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBindingLog()
{
  if (_LSBindingLog_once != -1) {
    dispatch_once(&_LSBindingLog_once, &__block_literal_global_27);
  }
  return (id)_LSBindingLog_result;
}

CFStringRef _LSCopyStringForOSType(unsigned int a1)
{
  if (a1) {
    unsigned int v1 = a1;
  }
  else {
    unsigned int v1 = 1061109567;
  }
  *(_DWORD *)bytes = bswap32(v1);
  return CFStringCreateWithBytes(0LL, bytes, 4LL, 0, 0);
}

CFStringRef _LSVersionNumberGetStringRepresentation(_OWORD *a1)
{
  __int128 v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  return (id)LaunchServices::VersionNumber::copyStringRepresentation((LaunchServices::VersionNumber *)v3);
}

CFStringRef LaunchServices::VersionNumber::copyStringRepresentation(LaunchServices::VersionNumber *this)
{
  if (!*(void *)this && !*((void *)this + 1) && !*((void *)this + 2)) {
    return 0LL;
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v7);
  uint32_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v2, (uint64_t)".", 1LL);
  std::ostream::operator<<();
  if (*((void *)this + 2))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v7, (uint64_t)".", 1LL);
    std::ostream::operator<<();
  }

  std::stringbuf::str(&__p, &v8);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::stringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], (const char *)p_p, 0x8000100u);
  uint64_t v7 = *MEMORY[0x189614738];
  *(uint64_t *)((char *)&v7 + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x189614738] + 24LL);
  v8.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186E29D68](&v9);
  return v4;
}

void sub_183E5C328( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::logToFile(LaunchServices::BindingEvaluation *this, NSString *a2, ...)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (this && LaunchServices::BindingEvaluation::logFile)
  {
    va_copy(v8, va);
    uint32_t v2 = (void *)[objc_alloc(NSString) initWithFormat:this arguments:va];
    uint64_t v3 = v2;
    if (v2)
    {
      uint64_t v4 = [v2 length];
      uint64_t v6 = 0LL;
      for (i = v4; i; uint64_t v4 = i)
      {
        size_t __size = 0LL;
        if ((objc_msgSend( v3,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  __ptr,  512,  &__size,  4,  0,  v6,  v4,  &v6) & 1) == 0) {
          break;
        }
        fwrite(__ptr, __size, 1uLL, (FILE *)LaunchServices::BindingEvaluation::logFile);
        fputc(10, (FILE *)LaunchServices::BindingEvaluation::logFile);
      }
    }
  }

void sub_183E5C454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *LaunchServices::BindingEvaluator::BindingEvaluator( LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  *(void *)this = *(id *)a2;
  *((void *)this + 1) = *((id *)a2 + 1);
  *((void *)this + 2) = *((id *)a2 + 2);
  *((void *)this + 3) = *((id *)a2 + 3);
  *((void *)this + 4) = *((id *)a2 + 4);
  *((void *)this + 5) = *((id *)a2 + 5);
  __int128 v4 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v4;
  *((void *)this + 10) = *((id *)a2 + 10);
  uint64_t v5 = *((void *)a2 + 13);
  *(_OWORD *)((char *)this + 8_Block_object_dispose(va, 8) = *(_OWORD *)((char *)a2 + 88);
  *((void *)this + 13) = v5;
  std::vector<LSBundleClass>::vector( (std::vector<unsigned int> *)((char *)this + 112),  (const std::vector<unsigned int> *)((char *)a2 + 112));
  *((void *)this + 17) = MEMORY[0x186E2A7B8](*((void *)a2 + 17));
  *((void *)this + 1_Block_object_dispose(va, 8) = *((id *)a2 + 18);
  *((void *)this + 19) = MEMORY[0x186E2A7B8](*((void *)a2 + 19));
  *((void *)this + 20) = *((id *)a2 + 20);
  return this;
}

void sub_183E5C53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<LSBundleClass>::vector( std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  this->__begin_ = 0LL;
  this->__end_ = 0LL;
  this->__end_cap_.__value_ = 0LL;
  std::vector<unsigned int>::pointer begin = __x->__begin_;
  end = __x->__end_;
  int64_t v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100](this, v5 >> 2);
    std::vector<unsigned int>::pointer v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v6 + v5);
  }

  return this;
}

void LaunchServices::BindingEvaluator::~BindingEvaluator(id *this)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  _LSBindingLog();
  uint32_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    std::vector<unsigned int>::pointer v6 = this;
    _os_log_impl(&dword_183E58000, v2, OS_LOG_TYPE_DEBUG, "BindingEvaluator::~BindingEvaluator(%p)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Destroying binding evaluator %p",  v3,  this);
  id v4 = this[14];
  if (v4)
  {
    this[15] = v4;
    operator delete(v4);
  }
}

void sub_183E5C704(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 112);
  if (v3)
  {
    *(void *)(v1 + 120) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::setLimit(uint64_t this, unint64_t a2)
{
  uint64_t v2 = 1024LL;
  if (a2 < 0x400) {
    uint64_t v2 = a2;
  }
  *(void *)(this + 96) = v2;
  return this;
}

uint64_t LaunchServices::BindingEvaluator::setOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 10_Block_object_dispose(va, 8) = a2;
  return this;
}

char *LaunchServices::BindingEvaluator::setAllowedBundleClasses(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v3 == (char *)v4)
  {
LABEL_5:
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = (uint64_t)v3;
    uint64_t v7 = v3;
    while (*(_DWORD *)v7)
    {
      v7 += 4;
      v6 += 4LL;
    }
  }

  __n128 result = (char *)(a1 + 112);
  if (v4 != v6)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    unint64_t v9 = 0LL;
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>( result,  v3,  v4,  v9);
  }

  if (result != (char *)a2)
  {
    unint64_t v9 = (v4 - (uint64_t)v3) >> 2;
    return std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>( result,  v3,  v4,  v9);
  }

  return result;
}

void LaunchServices::BindingEvaluator::getBestBinding( LaunchServices::BindingEvaluator *a1@<X0>, LSContext *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void LaunchServices::BindingEvaluator::getBestBinding( uint64_t *__return_ptr a1@<X8>, LaunchServices::BindingEvaluator *a2@<X0>, LSContext *a3@<X1>, void **a4@<X2>, void *a5@<X3>)
{
  v22[12] = *(id *)MEMORY[0x1895F89C0];
  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 4_Block_object_dispose(va, 8) = 0;
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v20, a3, a2);
  if (a4)
  {
    uint64_t v9 = LaunchServices::BindingEvaluation::State::getTypeRecord((LaunchServices::BindingEvaluation::State *)&v20);
    uint64_t v10 = *a4;
    *a4 = (void *)v9;
  }

  v21[12] = (id)1;
  LaunchServices::BindingEvaluation::runEvaluator(&v20, a5, (uint64_t *)v16);
  unsigned int v11 = v16[0];
  if (v16[0] != v16[1])
  {
    _LSBindingLog();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v13 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  &v20,  v11);
      *(_DWORD *)buf = 134349315;
      *(void *)&uint8_t buf[4] = a2;
      __int16 v18 = 2113;
      unint64_t v19 = v13;
      _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_DEBUG,  "Best binding found for evaluator %{public}p: %{private}@",  buf,  0x16u);
    }

    __int128 v14 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  &v20,  v11);
    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Best binding found for evaluator %p: %@",  v15,  a2,  v14);

    std::optional<LSBinding>::operator=[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding const&,void>( (uint64_t)a1,  (uint64_t)v11);
  }

  *(void *)buf = v16;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)buf);

  v16[0] = (id **)v22;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](v16);
  LaunchServices::BindingEvaluator::~BindingEvaluator(v21);
}

void sub_183E5C9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  unsigned int v11 = va_arg(va2, id **);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);

  va_copy((va_list)v11, va);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)va1);
  LaunchServices::BindingEvaluation::State::~State((id *)va2);
  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](v3);
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluation::State *LaunchServices::BindingEvaluation::State::State( LaunchServices::BindingEvaluation::State *this, LSContext *a2, const LaunchServices::BindingEvaluator *a3)
{
  *(void *)this = a2;
  uint64_t v4 = (void *)((char *)this + 176);
  int64_t v5 = (char *)this + 8;
  uint64_t v6 = LaunchServices::BindingEvaluator::BindingEvaluator( (LaunchServices::BindingEvaluation::State *)((char *)this + 8),  a3);
  uint64_t BindingMemoryResource = LaunchServices::BindingEvaluation::getBindingMemoryResource(v6);
  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  v4[2] = 0LL;
  *((void *)this + 25) = BindingMemoryResource;
  *((void *)this + 27) = 0LL;
  uint64_t v8 = (CFStringRef *)((char *)this + 216);
  *((_DWORD *)this + 56) = 0;
  *((void *)this + 29) = 0LL;
  *((_BYTE *)this + 20_Block_object_dispose(va, 8) = 0;
  *((_BYTE *)this + 240) = 0;
  *((void *)this + 31) = 0LL;
  *((_WORD *)this + 12_Block_object_dispose(va, 8) = 0;
  *((void *)this + 33) = 0LL;
  LaunchServices::BindingEvaluation::calculateUTI( *(LSContext **)this,  (uint64_t)v5,  (id *)this + 27,  (unint64_t)this + 224,  (unint64_t)this + 232);
  if (!*((void *)this + 29) && *v8) {
    *((_BYTE *)this + 240) = UTTypeIsDynamic(*v8) != 0;
  }
  return this;
}

void sub_183E5CB00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void LaunchServices::BindingEvaluation::calculateUTI( LSContext *a1, uint64_t a2, id *a3, unint64_t a4, unint64_t a5)
{
  int v24 = 0;
  uint64_t v10 = (__CFString *)*(id *)(a2 + 16);
  if (v10)
  {
    if (a4 | a5) {
      active = (void *)_UTGetActiveTypeForCFStringIdentifier(a1->db, v10, &v24);
    }
    else {
      active = 0LL;
    }
  }

  else
  {
    active = *(void **)a2;
    if (*(void *)a2)
    {
      _LSBindingLog();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_DEBUG,  "Calculating UTI because we don't have it yet",  (uint8_t *)&buf,  2u);
      }

      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Calculating UTI because we don't have it yet",  v13);
      LaunchServices::TypeEvaluator::TypeEvaluator(v23, active);
      if ((*(_BYTE *)(a2 + 108) & 0x10) != 0) {
        LaunchServices::TypeEvaluator::setSniffIfNeeded((LaunchServices::TypeEvaluator *)v23, 1);
      }
      LaunchServices::TypeEvaluator::evaluateType((uint64_t)v23, (void **)&a1->db, 0LL, (uint64_t)&buf);
      if (v22)
      {
        if (v21)
        {
          [active nameWithError:0];
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
          LaunchServices::TypeEvaluator::Result::getTypeIdentifier(&buf, a1);
          float v15 = (void *)objc_claimAutoreleasedReturnValue();
          LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Calculated UTI of file %@ was %@, but sniffed something better: %@",  v16,  v14,  0LL,  v15);
        }

        active = v19;
        if (v19)
        {
          int v24 = (int)buf;
          __int128 v17 = (__CFString *)_CSStringCopyCFString();
        }

        else
        {
          __int128 v17 = (__CFString *)v20;
        }

        uint64_t v10 = v17;
        if (v22) {
      }
        }

      else
      {
        uint64_t v10 = 0LL;
        active = 0LL;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }
  }

  if (a3) {
    objc_storeStrong(a3, v10);
  }
  if (a4) {
    *(_DWORD *)a4 = v24;
  }
  if (a5) {
    *(void *)a5 = active;
  }
}

void sub_183E5CD38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, void *a18)
{
  if (a17) {
  _Unwind_Resume(a1);
  }
}

void LaunchServices::BindingEvaluation::runEvaluator(void **a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  uint64_t BindingMemoryResource = LaunchServices::BindingEvaluation::getBindingMemoryResource((LaunchServices::BindingEvaluation *)a1);
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  a3[3] = BindingMemoryResource;
  _LSBindingLog();
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)id buf = 134217984;
    *(void *)&uint8_t buf[4] = a1 + 1;
    _os_log_impl(&dword_183E58000, v6, OS_LOG_TYPE_DEBUG, "Running evaluator %p", buf, 0xCu);
  }

  uint64_t v7 = a1 + 1;
  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Running evaluator %p",  v8,  a1 + 1);
  if (*((_BYTE *)a1 + 96)) {
    goto LABEL_4;
  }
  uint64_t v14 = a1[27];
  if (!v14) {
    goto LABEL_4;
  }
  if ((*((_BYTE *)a1 + 117) & 2) != 0)
  {
    BOOL v16 = 0;
    int IsDenylistedForBinding = 0;
  }

  else
  {
    int IsDenylistedForBinding = _UTTypeIsDenylistedForBinding(v14);
    BOOL v16 = a1[27] == 0LL;
    if ((IsDenylistedForBinding & 1) != 0) {
      goto LABEL_81;
    }
  }

  if (!v16)
  {
    if ((*((_BYTE *)a1 + 117) & 8) != 0) {
      goto LABEL_4;
    }
    TypeApplication = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(*(_LSDatabase **)*a1);
    int IsDenylistedForBinding = LaunchServices::BindingEvaluation::conformsTo( (void ***)a1,  TypeApplication,  @"com.apple.application",  v71);
  }

LABEL_81:
  if (IsDenylistedForBinding)
  {
    _LSBindingLog();
    v72 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      v73 = a1[27];
      *(_DWORD *)id buf = 138412290;
      *(void *)&uint8_t buf[4] = v73;
      _os_log_impl(&dword_183E58000, v72, OS_LOG_TYPE_DEBUG, "Denylisted type: %@", buf, 0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Denylisted type: %@",  v74,  a1[27]);
    goto LABEL_22;
  }

LABEL_4:
  *((_BYTE *)a1 + 20_Block_object_dispose(va, 8) = 1;
  _LSBindingLog();
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl(&dword_183E58000, v9, OS_LOG_TYPE_DEBUG, "Adding user preferences", buf, 2u);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding user preferences",  v10);
  LaunchServices::BindingEvaluation::addAndEvaluate( (uint64_t *)a1,  (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addUserPreferences,  (uint64_t)a3);
  *((_BYTE *)a1 + 20_Block_object_dispose(va, 8) = 0;
  if (*((_BYTE *)a1 + 96))
  {
    _LSBindingLog();
    unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl(&dword_183E58000, v11, OS_LOG_TYPE_DEBUG, "Adding and sorting bundles", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding and sorting bundles",  v12);
    uint64_t v13 = (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addBundles;
  }

  else
  {
    _LSBindingLog();
    __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl(&dword_183E58000, v17, OS_LOG_TYPE_DEBUG, "Adding and sorting claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding and sorting claims",  v18);
    LaunchServices::BindingEvaluation::addAndEvaluate( (uint64_t *)a1,  (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addClaims,  (uint64_t)a3);
    _LSBindingLog();
    unint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl(&dword_183E58000, v19, OS_LOG_TYPE_DEBUG, "Adding and sorting alternate UTI claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding and sorting alternate UTI claims",  v20);
    LaunchServices::BindingEvaluation::addAndEvaluate( (uint64_t *)a1,  (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addAlternateUTIClaims,  (uint64_t)a3);
    _LSBindingLog();
    char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl(&dword_183E58000, v21, OS_LOG_TYPE_DEBUG, "Adding and sorting parent UTI claims", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding and sorting parent UTI claims",  v22);
    uint64_t v13 = (void (*)(LaunchServices::BindingEvaluation *))LaunchServices::BindingEvaluation::addParentUTIClaims;
  }

  LaunchServices::BindingEvaluation::addAndEvaluate((uint64_t *)a1, v13, (uint64_t)a3);
LABEL_22:
  if (*a3 == a3[1] && !*((_BYTE *)a1 + 96))
  {
    char v23 = *v7;
    if (*v7)
    {
      int v24 = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(*(_LSDatabase **)*a1);
      if (LaunchServices::BindingEvaluation::conformsTo( (void ***)a1,  v24,  @"com.apple.application",  v25))
      {
        _LSBindingLog();
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)id buf = 138412290;
          *(void *)&uint8_t buf[4] = v23;
          _os_log_impl(&dword_183E58000, v26, OS_LOG_TYPE_DEBUG, "Binding application %@ to itself", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Binding application %@ to itself",  v27,  v23);
        int v76 = 0;
        *(void *)v77 = 0LL;
        if (!_LSBundleFindWithNode(*a1, v23, &v76, v77))
        {
          __int128 v84 = 0u;
          __int128 v85 = 0u;
          __int128 v82 = 0u;
          __int128 v83 = 0u;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int128 v81 = 0u;
          *(_DWORD *)id buf = v76;
          *(void *)&buf[8] = *(void *)v77;
          objc_storeStrong((id *)&v84, v23);
          if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)a1 + 118) & 2) != 0)
          {
            id v28 = (void *)*((void *)&v82 + 1);
            *((void *)&v82 + 1) = @"Application bound to self";
          }

          LaunchServices::BindingEvaluation::pushBackBinding( (LaunchServices::BindingEvaluation *)a1,  a3,  (LaunchServices::BindingEvaluation::State *)buf);
        }
      }
    }
  }

  uint64_t v30 = *a3;
  uint64_t v29 = a3[1];
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 5);
  unint64_t v32 = (unint64_t)a1[13];
  if (v31 > v32)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase( (uint64_t)a3,  v30 + 96 * v32,  v29);
    uint64_t v30 = *a3;
    uint64_t v29 = a3[1];
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 5);
  }

  if (v31 >= 2)
  {
    uint64_t v33 = *(void *)(v30 + 24);
    if (v33)
    {
      if ((*(_BYTE *)(v33 + 8) & 2) != 0) {
        std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase( (uint64_t)a3,  v30 + 96,  v29);
      }
    }
  }

  if ((*((_DWORD *)a1 + 29) & 0x80200) != 0)
  {
    if ((v34 & 1) == 0
    {
      LaunchServices::BindingEvaluation::runEvaluator(LaunchServices::BindingEvaluation::State &,NSError * {__autoreleasing}*)::options = 77998;
    }

    uint64_t v36 = *a3;
    uint64_t v35 = a3[1];
    if (*a3 != v35)
    {
      do
      {
        if (!*(void *)(v36 + 24))
        {
          *(_DWORD *)id buf = 0;
          *(void *)&buf[8] = 0LL;
          LODWORD(v81) = 0;
          __int128 v82 = 0uLL;
          *((void *)&v81 + 1) = 0LL;
          char v37 = *a1;
          int v38 = a1[2];
          LODWORD(v37) = _LSGetBindingForNodeOrSchemeOrUTI( (int)v37,  0LL,  v38,  (LaunchServices::BindingEvaluator *)a1[27],  *(_DWORD *)v36,  -1,  0LL,  LaunchServices::BindingEvaluation::runEvaluator(LaunchServices::BindingEvaluation::State &,NSError * {__autoreleasing}*)::options,  (uint64_t)buf) == 0;

          if ((_DWORD)v37)
          {
            _LSBindingLog();
            char v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v40 =  -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  v36);
              v41 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  buf);
              *(_DWORD *)v77 = 138412546;
              *(void *)&v77[4] = v40;
              __int16 v78 = 2112;
              uint64_t v79 = v41;
              _os_log_impl( &dword_183E58000,  v39,  OS_LOG_TYPE_DEBUG,  "Had claimless binding %@, but found a claim-based binding %@ to substitute",  v77,  0x16u);
            }

            uint64_t v42 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  v36);
            v43 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  buf);
            LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Had claimless binding %@, but found a claim-based binding %@ to substitute",  v44,  v42,  v43);

            *(_DWORD *)(v36 + 16) = v81;
            *(void *)(v36 + 24) = *((void *)&v81 + 1);
          }
        }

        v36 += 96LL;
      }

      while (v36 != v35);
    }
  }

  uint64_t v46 = *a3;
  uint64_t v45 = a3[1];
  if ((*((_BYTE *)a1 + 117) & 2) != 0)
  {
    if (v46 == v45) {
      goto LABEL_65;
    }
    while (1)
    {
      uint64_t v47 = *(void *)(v46 + 24);
      if (!v47 || !*(_DWORD *)(v47 + 28)) {
        break;
      }
      v46 += 96LL;
      if (v46 == v45)
      {
        uint64_t v48 = a3[1];
        goto LABEL_66;
      }
    }

    v49 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  v46);
    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v50,  "no icon (required one)",  v49);

    uint64_t v48 = v45;
    if (v46 == v45) {
      goto LABEL_66;
    }
    uint64_t v51 = v46 + 96;
    if (v46 + 96 == v45)
    {
LABEL_65:
      uint64_t v48 = v46;
    }

    else
    {
      uint64_t v48 = v46;
      do
      {
        if ((*((_BYTE *)a1 + 117) & 2) == 0 || (uint64_t v52 = *(void *)(v51 + 24)) != 0 && *(_DWORD *)(v52 + 28))
        {
          __int128 v53 = *(_OWORD *)(v51 + 16);
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v51;
          *(_OWORD *)(v48 + 16) = v53;
          uint64_t v54 = *(void *)(v51 + 32);
          *(void *)(v51 + 32) = 0LL;
          int v55 = *(void **)(v48 + 32);
          *(void *)(v48 + 32) = v54;

          uint64_t v56 = *(void *)(v51 + 40);
          *(void *)(v51 + 40) = 0LL;
          __int128 v57 = *(void **)(v48 + 40);
          *(void *)(v48 + 40) = v56;

          *(_WORD *)(v48 + 4_Block_object_dispose(va, 8) = *(_WORD *)(v51 + 48);
          uint64_t v58 = *(void *)(v51 + 56);
          *(void *)(v51 + 56) = 0LL;
          dispatch_time_t v59 = *(void **)(v48 + 56);
          *(void *)(v48 + 56) = v58;

          uint64_t v60 = *(void *)(v51 + 64);
          *(void *)(v51 + 64) = 0LL;
          v61 = *(void **)(v48 + 64);
          *(void *)(v48 + 64) = v60;

          *(_BYTE *)(v48 + 72) = *(_BYTE *)(v51 + 72);
          uint64_t v62 = *(void *)(v51 + 80);
          *(void *)(v51 + 80) = 0LL;
          v63 = *(void **)(v48 + 80);
          *(void *)(v48 + 80) = v62;

          *(_DWORD *)(v48 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(v51 + 88);
          v48 += 96LL;
        }

        else
        {
          v64 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  v51);
          LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v65,  "no icon (required one)",  v64);
        }

        v51 += 96LL;
      }

      while (v51 != v45);
    }

  char v22 = (void *)[v18 mutableCopy];
  char v23 = v22;
  if (v22)
  {
    int v24 = v22;
  }

  else
  {
    [MEMORY[0x189603FC8] dictionary];
    int v24 = (id)objc_claimAutoreleasedReturnValue();
  }

  __int128 v25 = v24;

  [v25 setObject:MEMORY[0x189604A88] forKeyedSubscript:@"LSBlockUntilComplete"];
  id v26 = v25;

  v36[0] = MEMORY[0x1895F87A8];
  v36[1] = 3221225472LL;
  v36[2] = __152__LSApplicationWorkspace_operationToOpenResource_usingApplication_uniqueDocumentIdentifier_isContentManaged_sourceAuditToken_userInfo_options_delegate___block_invoke_2;
  v36[3] = &unk_189D73358;
  char v37 = v14;
  int v38 = v17;
  char v39 = v26;
  uint64_t v40 = v21;
  v41 = v15;
  uint64_t v42 = v16;
  id v44 = a6;
  v43 = ($115C4C562B26FF47E01F9F4EA65B5887 *)a7;
  BOOL v27 = (id)a7;
  id v28 = v16;
  uint64_t v29 = v15;
  uint64_t v30 = v21;
  unint64_t v31 = v26;
  unint64_t v32 = v17;
  uint64_t v33 = v14;
  [v20 addExecutionBlock:v36];

  return v20;
}

  return (LSBundleRecord *)v8;
}

  if (!a5->db) {
    goto LABEL_17;
  }
  if (v13) {
    goto LABEL_6;
  }
LABEL_18:
  [MEMORY[0x1896077D8] currentHandler];
  char v22 = (void *)objc_claimAutoreleasedReturnValue();
  [v22 handleFailureInMethod:a2, self, @"LSCanOpenURLManager.mm", 429, @"Invalid parameter not satisfying: %@", @"scheme != nil" object file lineNumber description];

LABEL_6:
  if (a4->types)
  {
    _LSDatabaseGetStringArray(a5->db);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13) {
      goto LABEL_8;
    }
LABEL_11:
    float v15 = 0;
    if (!a7) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }

  uint64_t v14 = 0LL;
  if (!v13) {
    goto LABEL_11;
  }
LABEL_8:
  float v15 = [v14 containsObject:v13];
  if (!a7) {
    goto LABEL_14;
  }
LABEL_12:
  if ((v15 & 1) == 0)
  {
    [NSString stringWithFormat:@"This app is not allowed to query for scheme %@", v13];
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
    char v23 = *MEMORY[0x1896075E0];
    v24[0] = v16;
    [MEMORY[0x189603F68] dictionaryWithObjects:v24 forKeys:&v23 count:1];
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl( @"LSApplicationWorkspaceErrorDomain",  -106LL,  (uint64_t)"-[_LSCanOpenURLManager(PrivateSchemeChecking) isBundleID:bundleData:context:allowedToCheckScheme:error:]",  448LL,  v17);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
  }

  if (!a5->db) {
    goto LABEL_35;
  }
  if (v13) {
    goto LABEL_6;
  }
LABEL_36:
  [MEMORY[0x1896077D8] currentHandler];
  unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
  [v31 handleFailureInMethod:a2, self, @"LSCanOpenURLManager.mm", 464, @"Invalid parameter not satisfying: %@", @"scheme != nil" object file lineNumber description];

LABEL_6:
  if ([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer])
  {
    _LSDefaultLog();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
      -[_LSCanOpenURLManager(PrivateSchemeChecking) legacy_isBundleID:bundleData:context:allowedToCheckScheme:error:].cold.1();
    }
    goto LABEL_15;
  }

  float v15 = (os_log_s *)_CSStringCopyCFString();
  uint64_t v14 = v15;
  if (!v15)
  {
LABEL_15:
    id v20 = 0;
    goto LABEL_24;
  }

  int v38 = 0LL;
  v39[0] = &v38;
  v39[1] = 0x3032000000LL;
  v39[2] = __Block_byref_object_copy__10;
  v39[3] = __Block_byref_object_dispose__10;
  uint64_t v40 = 0LL;
  canOpenURLsMapQueue = (dispatch_queue_s *)self->_canOpenURLsMapQueue;
  __int128 v17 = MEMORY[0x1895F87A8];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __111___LSCanOpenURLManager_PrivateSchemeChecking__legacy_isBundleID_bundleData_context_allowedToCheckScheme_error___block_invoke;
  block[3] = &unk_189D74C20;
  char v37 = &v38;
  block[4] = self;
  uint64_t v14 = v15;
  uint64_t v36 = v14;
  dispatch_sync(canOpenURLsMapQueue, block);
  __int16 v18 = *(void **)(v39[0] + 40LL);
  if (v18)
  {
    if ([v18 containsObject:v13])
    {
      _LSDefaultLog();
      unint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        -[_LSCanOpenURLManager(PrivateSchemeChecking) legacy_isBundleID:bundleData:context:allowedToCheckScheme:error:].cold.3();
      }

      goto LABEL_22;
    }

    if ((unint64_t)[*(id *)(v39[0] + 40) count] > 0x31)
    {
      _LSDefaultLog();
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        -[_LSCanOpenURLManager(PrivateSchemeChecking) legacy_isBundleID:bundleData:context:allowedToCheckScheme:error:].cold.4( (uint64_t)v14,  (uint64_t)v39,  v26);
      }

      id v20 = 0;
      goto LABEL_23;
    }

    _LSDefaultLog();
    char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      BOOL v27 = [*(id *)(v39[0] + 40) count];
      *(_DWORD *)id buf = 138412802;
      id v44 = v14;
      uint64_t v45 = 1024;
      uint64_t v46 = v27;
      uint64_t v47 = 2112;
      uint64_t v48 = v13;
      _os_log_debug_impl( &dword_183E58000,  v21,  OS_LOG_TYPE_DEBUG,  "LSTesting: app %@ has only asked about %d schemes, adding %@ and allowing",  buf,  0x1Cu);
    }
  }

  else
  {
    _LSDefaultLog();
    char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
      -[_LSCanOpenURLManager(PrivateSchemeChecking) legacy_isBundleID:bundleData:context:allowedToCheckScheme:error:].cold.2();
    }
  }

  MEMORY[0x186E2AFD4]();
  char v22 = (dispatch_queue_s *)self->_canOpenURLsMapQueue;
  v32[0] = v17;
  v32[1] = 3221225472LL;
  v32[2] = __111___LSCanOpenURLManager_PrivateSchemeChecking__legacy_isBundleID_bundleData_context_allowedToCheckScheme_error___block_invoke_60;
  v32[3] = &unk_189D74C48;
  v32[4] = self;
  uint64_t v33 = v14;
  unsigned __int8 v34 = v13;
  dispatch_barrier_async(v22, v32);

LABEL_22:
  id v20 = 1;
LABEL_23:

  _Block_object_dispose(&v38, 8);
LABEL_24:

  if (a7) {
    char v23 = v20;
  }
  else {
    char v23 = 1;
  }
  if ((v23 & 1) == 0)
  {
    v41 = *MEMORY[0x1896075E0];
    uint64_t v42 = @"This app has exceeded the number of allowed scheme queries";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v42 forKeys:&v41 count:1];
    int v24 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl( @"LSApplicationWorkspaceErrorDomain",  -107LL,  (uint64_t)"-[_LSCanOpenURLManager(PrivateSchemeChecking) legacy_isBundleID:bundleData:context:allowedToCheckScheme:error:]",  524LL,  v24);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v20;
}

  bundleData = a4->bundleData;
  if (!bundleData) {
    goto LABEL_23;
  }
  if (bundleData->_clas == 11)
  {
    float v15 = *a5;
    if (v15) {
      goto LABEL_12;
    }
    +[LSBundleRecord coreTypesBundleRecord](&OBJC_CLASS___LSBundleRecord, "coreTypesBundleRecord");
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(a5, v16);
  }

  else
  {
    __int128 v17 = (objc_class *)objc_opt_class();
    if (a4->bundleData->_clas == 2) {
      __int128 v17 = (objc_class *)objc_opt_class();
    }
    BOOL v16 = (void *)[[v17 alloc] _initWithNode:0 bundleIdentifier:0 context:a3 tableID:a3->db->schema.bundleTable unitID:a4->bundle bundleBaseData:a4->bundleData error:a7];
  }

  float v15 = v16;
  if (!v16)
  {

LABEL_20:
    id v20 = 0LL;
LABEL_26:
    char v21 = 0LL;
    goto LABEL_27;
  }

    unsigned int v11 = -1;
    goto LABEL_37;
  }

LABEL_66:
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase( (uint64_t)a3,  v48,  a3[1]);
    uint64_t v46 = *a3;
    uint64_t v45 = a3[1];
  }

  if (v46 != v45) {
    return;
  }
  int v66 = *((_DWORD *)a1 + 56);
  if (v66 == _UTTypeGetTypeWindowsExecutable(*(_LSDatabase **)*a1))
  {
    if (!a2) {
      return;
    }
    uint64_t v67 = 1744LL;
    uint64_t v68 = -10661LL;
    goto LABEL_75;
  }

  _LSBindingLog();
  id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl( &dword_183E58000,  v69,  OS_LOG_TYPE_DEBUG,  "Unable to bind to an executable or application, returning kLSApplicationNotFoundErr.",  buf,  2u);
  }

  if (a2)
  {
    uint64_t v67 = 1747LL;
    uint64_t v68 = -10814LL;
LABEL_75:
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v68, (uint64_t)"runEvaluator", v67, 0LL);
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }

void sub_183E5D76C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void LaunchServices::BindingEvaluation::addUserPreferences( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if ((*((_BYTE *)this + 116) & 4) != 0)
  {
    _LSBindingLog();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl(&dword_183E58000, v6, OS_LOG_TYPE_DEBUG, "Skipping weak binding due to options", buf, 2u);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Skipping weak binding due to options",  v7);
    goto LABEL_36;
  }

  uint64_t v3 = (const __CFString *)*((void *)this + 27);
  if (v3)
  {
    int TagForContentType = LSHandlerPref::GetTagForContentType(**(void ***)this, v3, (int *)buf);
    if (!TagForContentType)
    {
LABEL_27:
      _LSBindingLog();
      __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl(&dword_183E58000, v17, OS_LOG_TYPE_DEBUG, "Adding weak binding", buf, 2u);
      }

      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding weak binding",  v18);
      goto LABEL_36;
    }

    uint64_t HandlerPref = LSHandlerPref::GetHandlerPref(**(void ***)this, TagForContentType, *(int *)buf, 0LL);
  }

  else
  {
    uint64_t v8 = (const __CFString *)*((void *)this + 2);
    if (!v8) {
      goto LABEL_27;
    }
    int StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v8, 1);
    if (!StringForCFString) {
      goto LABEL_27;
    }
    uint64_t HandlerPref = LSHandlerPref::GetHandlerPref(**(void ***)this, StringForCFString, 5, 0LL);
  }

  uint64_t v10 = (LSHandlerPref *)HandlerPref;
  if (!HandlerPref) {
    goto LABEL_27;
  }
  _LSBindingLog();
  unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl(&dword_183E58000, v11, OS_LOG_TYPE_DEBUG, "Adding weak binding", buf, 2u);
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)@"Adding weak binding", v12);
  memset(&v36, 0, sizeof(v36));
  if (LSHandlerPref::roleHandler(v10, *((_DWORD *)this + 28), &v36))
  {
    uint64_t v13 = (LaunchServices::BindingEvaluator *)_CSStringCopyCFString();
    uint64_t v14 = v13;
    if (!v13)
    {
LABEL_35:

      goto LABEL_36;
    }

    LOBYTE(v22) = 0;
    char v26 = 0;
    memset(&v36, 0, sizeof(v36));
    memset(v32, 0, sizeof(v32));
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(v13, 0LL, 0LL, 0LL, v32, (uint64_t)buf);
    int v35 = 128;
    LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v27, (LaunchServices::BindingEvaluator *)buf);
    std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>( (uint64_t)&v22,  (uint64_t)&v27);
    if ((_BYTE)v29)
    {
    }

    LSVersionNumber v27 = v36;
    __int128 v37 = kLSVersionNumberNull;
    __int128 v38 = *(_OWORD *)algn_183FBF5B0;
    if (_LSVersionNumberCompare(&v27, &v37))
    {
      if (v26) {
        goto LABEL_23;
      }
      __int128 v37 = kLSVersionNumberNull;
      __int128 v38 = *(_OWORD *)algn_183FBF5B0;
      LaunchServices::BindingEvaluator::CreateWithBundleInfo(v14, 0LL, 0LL, 0LL, &v37, (uint64_t)&v27);
      LaunchServices::BindingEvaluator::operator=((uint64_t)buf, (uint64_t)&v27);
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)&v27);
      int v35 = 128;
      LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)&v27, (LaunchServices::BindingEvaluator *)buf);
      std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>( (uint64_t)&v22,  (uint64_t)&v27);
      if ((_BYTE)v29)
      {
      }
    }

    if (!v26)
    {
LABEL_33:
      LaunchServices::BindingEvaluator::~BindingEvaluator((id *)buf);
      if (v26)
      {
      }

      goto LABEL_35;
    }

LABEL_23:
    __int128 v31 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    *(_OWORD *)&v27._opaque[16] = 0u;
    __int128 v28 = 0u;
    *(void *)v27._opaque = v22;
    *(void *)&v27._opaque[8] = v23;
    if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)this + 118) & 2) != 0)
    {
      if (v25)
      {
        id v15 = objc_alloc(NSString);
        BOOL v16 = (const __CFString *)[v15 initWithFormat:@"Weak Binding (%@)", v25];
      }

      else
      {
        BOOL v16 = @"Weak Binding";
      }

      *((void *)&v28 + 1) = v16;
    }

    LaunchServices::BindingEvaluation::pushBackBinding( this,  (uint64_t *)this + 22,  (LaunchServices::BindingEvaluation::State *)&v27);

    goto LABEL_33;
  }

  if ((a5 & 2) == 0 && !propertyValueTypeRefPtr)
  {
    if (a6)
    {
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10813LL,  (uint64_t)"-[FSNode getResourceValue:forKey:options:error:]",  825LL,  0LL);
      uint64_t v13 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_27;
    }

    goto LABEL_32;
  }

  if (a3) {
    objc_storeStrong(a3, propertyValueTypeRefPtr);
  }
  char v21 = 1;
LABEL_33:

  return v21;
}

      mach_msg_destroy(&msg);
      return v20;
    }

    mig_dealloc_special_reply_port();
  }

  return v20;
}

LABEL_24:
    id v24 = [v20 length];
    uint64_t v23 = 0LL;
    if (v24 <= 0x400 && v24)
    {
      [v13 extensionWithError:0];
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      __int16 v18 = v25;
      if (v25 && -[os_log_s length](v25, "length"))
      {
        [v20 stringByAppendingPathExtension:v18];
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        uint64_t v23 = v20;
      }
    }

    else
    {
      __int16 v18 = (os_log_s *)v20;
    }

    goto LABEL_31;
  }

  [NSString stringWithFormat:@"%@#%@", *MEMORY[0x189604AA0], v12];
  unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[os_log_s localizedStringWithString:preferredLocalizations:]( v18,  "localizedStringWithString:preferredLocalizations:",  v19,  v14);
  unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20) {
    goto LABEL_19;
  }
LABEL_22:
  uint64_t v23 = 0LL;
LABEL_31:

LABEL_32:
  return v23;
}

          __int128 v28 = @"CFBundlePrimaryIcon";
          objc_msgSend( MEMORY[0x189607968],  "numberWithBool:",  v9,  @"CFBundleIconFiles",  @"UIPrerenderedIcon",  v17);
          unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
          v27[1] = v19;
          [MEMORY[0x189603F68] dictionaryWithObjects:v27 forKeys:&v26 count:2];
          unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
          __int128 v29 = v20;
          char v21 = [MEMORY[0x189603F68] dictionaryWithObjects:&v29 forKeys:&v28 count:1];

          uint64_t v7 = (void *)v21;
          goto LABEL_29;
        }
      }
    }

    __int128 v17 = 0LL;
    goto LABEL_29;
  }

    if ((v12 & 1) == 0)
    {
      unsigned int v22 = 0LL;
      LOBYTE(v23) = 1;
LABEL_37:

      __int128 v30 = v22;
      if ((v23 & 1) == 0)
      {
        _LSDatabaseGetLog();
        __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_1();
        }
      }

      uint64_t v33 = (void *)*((void *)&v50 + 1);
      for (uint64_t i = (void *)v50; i != v33; ++i)
      {
        unint64_t v34 = (void (**)(void, void, void, void))MEMORY[0x186E2A7B8](*i);
        int v35 = (void *)MEMORY[0x186E2A59C]();
        ((void (**)(void, uint64_t, _DWORD *, id))v34)[2](v34, 1LL, v11, v30);
        objc_autoreleasePoolPop(v35);
      }

      objc_autoreleasePoolPop(v9);
      goto LABEL_45;
    }

    __int128 v53 = 0LL;
    id v24 = v11;
    if (![(id)__LSDefaultsGetSharedInstance() isServer]
      || [(id)__LSDefaultsGetSharedInstance() isInSyncBubble])
    {
      _LSDatabaseCommit((uint64_t)v24);
LABEL_28:
      uint64_t v23 = 1;
LABEL_29:

      id v25 = v53;
      if (v23)
      {
        _LSDatabaseGetLog();
        char v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          LSVersionNumber v27 = (void *)_LSSessionKeyCopyDescription(*((void *)v24 + 206));
          *(_DWORD *)id buf = 136446466;
          *(void *)&uint8_t buf[4] = "_LSSessionSave";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v27;
          _os_log_impl( &dword_183E58000,  v26,  OS_LOG_TYPE_DEFAULT,  "%{public}s: saved database for session %@",  buf,  0x16u);
        }

        unsigned int v22 = 0LL;
      }

      else
      {
        _LSDatabaseGetLog();
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          __int128 v29 = (void *)_LSSessionKeyCopyDescription(*((void *)v24 + 206));
          ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_2( v29,  (uint64_t)v25,  buf,  v28);
        }

        unsigned int v22 = v25;
      }

      goto LABEL_37;
    }

    LSVersionNumber v36 = *((id *)v24 + 205);
    [v36 pathWithError:&v53];
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue();

    if (v37)
    {
      __int128 v38 = _CSStoreValidate();
      if (!v38)
      {
        uint64_t v39 = [v37 stringByAppendingString:@"_corrupt"];

        __int128 v37 = (void *)v39;
      }

      uint64_t v40 = (void *)[objc_alloc(MEMORY[0x189604030]) initFileURLWithPath:v37 isDirectory:0];
      if (v40)
      {
        *(void *)id buf = 0LL;
        _LSDatabaseGetFileResourceProperties();
        v41 = *(const void **)buf;
        *(void *)id buf = 0LL;
        if (v41) {
          CFRelease(v41);
        }
        uint64_t v42 = _CSStoreWriteToURL();
        if (v42)
        {
          _LSDatabaseSentinelFlush();
          if (!v38)
          {
            _LSDatabaseGetLog();
            v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
              ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_4();
            }
          }

          id v44 = 0LL;
        }

        else
        {
          id v44 = *(id *)buf;
        }

        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        if (v42)
        {

          uint64_t v45 = v24;
          if ((-[_LSDatabase isSeeded]((uint64_t)v45) & 1) != 0)
          {
            MEMORY[0x186E2AFD4]();
            _LSDatabaseGetHeader(buf);
            uint64_t v46 = v60;
            _LSServer_DatabaseExecutionContext();
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue();
            *(void *)id buf = MEMORY[0x1895F87A8];
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&uint8_t buf[16] = ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke;
            uint64_t v56 = &unk_189D72568;
            dispatch_time_t v59 = v46;
            __int128 v57 = v45;
            uint64_t v58 = &__block_literal_global_295;
            -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v47, buf);
          }

          goto LABEL_28;
        }
      }

      else
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -37LL, (uint64_t)"_LSDatabaseSave", 2487LL, 0LL);
        id v44 = (id)objc_claimAutoreleasedReturnValue();
      }

      uint64_t v48 = v44;
      __int128 v53 = v48;
      _LSDatabaseGetLog();
      v49 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT)) {
        ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_cold_3();
      }
    }

    uint64_t v23 = 0;
    goto LABEL_29;
  }

  if (*(void *)(*(void *)(a1 + 32) + 48LL)
    && [(id)__LSDefaultsGetSharedInstance() isInEducationMode])
  {
    _LSPerUserEntropyURL();
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      [MEMORY[0x1896078F8] archivedDataWithRootObject:*(void *)(*(void *)(a1 + 32) + 48)];
      unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
      [v19 writeToURL:v18 options:1073741825 error:0];
    }
  }
}
}

  CFDictionaryAddValue(v2, @"_LSSliceInfosKey", v9);
}

  uint64_t v23 = (void *)MEMORY[0x186E2A59C]();
  id v24 = _LSRegisterDirectoryNode(a1, v16, (FSNode *)v17, v22, a6, a7, a8, a9, v29);
  objc_autoreleasePoolPop(v23);
  char v21 = v24 == 0;
  if (a10 && v24)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v24, (uint64_t)"_LSRegisterBundleNode", 2152LL, 0LL);
    unint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
    char v21 = 0LL;
LABEL_26:
    *a10 = v20;
    if (!a6) {
      goto LABEL_42;
    }
LABEL_30:
    if (*MEMORY[0x189604E00])
    {
      Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)a6, (const void *)*MEMORY[0x189604E00]);
      TypeID = CFStringGetTypeID();
      if (!Value || !TypeID || CFGetTypeID(Value) == TypeID)
      {
        if (v21)
        {
LABEL_35:
          LSVersionNumber v27 = @"success";
LABEL_41:
          _LSLogStepFinished(4LL, v21, Value, @"Registered bundle status = %@", v27);

          goto LABEL_42;
        }

LABEL_36:
  _LSBindingLog();
  unint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
    *(_DWORD *)id buf = 134217984;
    unint64_t v34 = v20;
    _os_log_impl(&dword_183E58000, v19, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%llu bindings found",  v21,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5));
}

void sub_183E5DCF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, id a43)
{
  if (a16)
  {
  }

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>( void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }

  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  for (__n128 result = *v6; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3) {
        return result;
      }
    }

    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }

      else
      {
        v8 &= *(void *)&v2 - 1LL;
      }

      if (v8 != v5) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table( uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      int8x8_t v2 = v3;
    }

    while (v3);
  }

  uint8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unsigned int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          unsigned int v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  unsigned int v11 = operator new(0x30uLL);
  void *v11 = 0LL;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0LL;
  v11[5] = 0LL;
  v11[3] = 0LL;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1LL;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }

  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }

    else
    {
      v21 &= v8 - 1;
    }

    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_183E5E090(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,_LSDatabaseTableVisualizationFunctions> const&>( uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0LL;
  v10[1] = v6;
  __int128 v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v10 = *v20;
LABEL_38:
    void *v20 = v10;
    goto LABEL_39;
  }

  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_183E5E2AC(_Unwind_Exception *a1)
{
}

void LaunchServices::BindingEvaluation::addBundles( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t v3 = (const __CFString *)*((void *)this + 5);
  if (v3)
  {
    int StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v3, 0);
    LaunchServices::BindingEvaluation::addBundlesInBindingMap((uint64_t)this, 6LL, StringForCFString);
  }

  unint64_t v5 = (const __CFString *)*((void *)this + 6);
  if (v5)
  {
    int v6 = _LSDatabaseGetStringForCFString(**(void ***)this, v5, 1);
    LaunchServices::BindingEvaluation::addBundlesInBindingMap((uint64_t)this, 7LL, v6);
  }

  _LSBindingLog();
  unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
    *(_DWORD *)id buf = 134217984;
    unint64_t v11 = v8;
    _os_log_impl(&dword_183E58000, v7, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%llu bindings found",  v9,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5));
}

uint64_t _LSDatabaseGetStringForCFString(void *a1, const __CFString *a2, int a3)
{
  v10[20] = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2 || (CFTypeID v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
  {
    XCFBufInit((uint64_t)v10);
    goto LABEL_6;
  }

  CFIndex Length = CFStringGetLength(a2);
  if (!XCFBufInitWithCFStringRange((uint64_t)v10, a2, 0LL, Length, a3))
  {
LABEL_6:
    uint64_t v8 = 0LL;
    goto LABEL_7;
  }

  uint64_t v8 = _CSGetStringForCharacters();
  XCFBufDestroy((uint64_t)v10);
LABEL_7:

  return v8;
}

void sub_183E5E4CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t XCFBufInitWithCFStringRange(uint64_t a1, const __CFString *a2, CFIndex a3, CFIndex a4, int a5)
{
  uint64_t result = 0LL;
  *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  CFIndex usedBufLen = 0LL;
  *(void *)a1 = a1 + 28;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(void *)(a1 + 16) = 0LL;
  if (a2 && a3 != -1)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(a2)) {
      return 0LL;
    }
    if (!a4) {
      return 1LL;
    }
    v21.id location = a3;
    v21.length = a4;
    if (a4 == CFStringGetBytes(a2, v21, 0x8000100u, 0, 0, *(UInt8 **)a1, 127LL, &usedBufLen))
    {
      uint64_t v12 = usedBufLen;
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = usedBufLen;
LABEL_11:
      *(_BYTE *)(*(void *)a1 + v12) = 0;
      if (a5)
      {
        uint64_t v16 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v16)
        {
          unint64_t v17 = *(_BYTE **)a1;
          do
          {
            int v18 = *v17;
            ++v17;
            --v16;
          }

          while (v16);
        }
      }

      return 1LL;
    }

    v22.id location = a3;
    v22.length = a4;
    if (CFStringGetBytes(a2, v22, 0x8000100u, 0, 0, 0LL, 0LL, &usedBufLen) >= 1)
    {
      CFIndex v13 = usedBufLen;
      float v14 = (UInt8 *)malloc(usedBufLen + 1);
      *(void *)(a1 + 16) = v14;
      *(void *)a1 = v14;
      *(_DWORD *)(a1 + 24) = v13;
      v23.id location = a3;
      v23.length = a4;
      CFIndex Bytes = CFStringGetBytes(a2, v23, 0x8000100u, 0, 0, v14, v13, &usedBufLen);
      LODWORD(v12) = usedBufLen;
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = usedBufLen;
      if (Bytes)
      {
        uint64_t v12 = v12;
        goto LABEL_11;
      }
    }

    uint64_t v19 = *(void **)(a1 + 16);
    if (v19) {
      free(v19);
    }
    uint64_t result = 0LL;
    *(void *)a1 = a1 + 28;
    *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
    *(_DWORD *)(a1 + 24) = 127;
    *(void *)(a1 + 16) = 0LL;
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  }

  return result;
}

void XCFBufDestroy(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2) {
    free(v2);
  }
  *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = 0;
  *(void *)a1 = a1 + 28;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(void *)(a1 + 16) = 0LL;
}

uint64_t LaunchServices::BindingEvaluation::addBundlesInBindingMap(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return _LSDatabaseEnumeratingBindingMap();
  }
  return result;
}

uint64_t _LSDatabaseEnumeratingBindingMap()
{
  return _CSStringBindingEnumerate();
}

uint64_t _LSBundleGet(void *a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1;
  uint64_t Unit = 0LL;
  if (v3)
  {
    if (a2)
    {
      uint64_t Unit = CSStoreGetUnit();
      if (!Unit)
      {
        _LSRegistrationLog();
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          uint64_t v6 = v3[1];
          v8[0] = 67240451;
          v8[1] = a2;
          __int16 v9 = 2113;
          uint64_t v10 = v6;
          _os_log_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_ERROR,  "Failed to get unit %{public}d from store %{private}@",  (uint8_t *)v8,  0x12u);
        }

        uint64_t Unit = 0LL;
      }
    }
  }

  return Unit;
}

void sub_183E5E898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::isBindingOK_NoIO( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if (!*((_BYTE *)a2 + 91))
  {
    uint64_t v6 = (void *)*((void *)this + 21);
    unint64_t v7 = (uint64_t (**)(void, void, void))MEMORY[0x186E2A7B8](*((void *)this + 20));

    if (v7
      && (((uint64_t (**)(void, void, LaunchServices::BindingEvaluation::State *))v7)[2]( v7,  *(void *)this,  a2) & 1) == 0)
    {
      uint64_t v12 = [v6 UTF8String];
      if (v12) {
        CFIndex v13 = (const char *)v12;
      }
      else {
        CFIndex v13 = "caller-supplied no-I/O filter";
      }
      uint64_t v8 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v14,  v13,  v8);
      goto LABEL_15;
    }

    if ((*((_BYTE *)this + 117) & 0x80) != 0)
    {
      uint64_t result = 1LL;
LABEL_17:
      *((_WORD *)a2 + 45) = result | 0x100;
      return result;
    }

    if (_LSBundleDataGetUnsupportedFormatFlag())
    {
      uint64_t v8 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v9,  "unsupported format",  v8);
LABEL_15:

LABEL_16:
      uint64_t result = 0LL;
      goto LABEL_17;
    }

    uint64_t v16 = (_DWORD *)*((void *)this + 15);
    BOOL v15 = (_DWORD *)*((void *)this + 16);
    if (v16 != v15)
    {
      while (*v16 != *(_DWORD *)(*((void *)a2 + 1) + 160LL))
      {
        if (++v16 == v15)
        {
          uint64_t v16 = (_DWORD *)*((void *)this + 16);
          break;
        }
      }

      if (v15 == v16)
      {
        uint64_t v8 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v28,  "disallowed bundle class",  v8);
        goto LABEL_15;
      }
    }

    __int128 v17 = *(_OWORD *)((char *)this + 72);
    __int128 v41 = *(_OWORD *)((char *)this + 56);
    __int128 v42 = v17;
    v40[0] = v41;
    v40[1] = v17;
    memset(v39, 0, sizeof(v39));
    if (_LSVersionNumberCompare(v40, v39))
    {
      v38[0] = v41;
      v38[1] = v42;
      uint64_t v18 = *((void *)a2 + 1);
      __int128 v19 = *(_OWORD *)(v18 + 44);
      v37[0] = *(_OWORD *)(v18 + 28);
      v37[1] = v19;
      if (_LSVersionNumberCompare(v38, v37))
      {
        unint64_t v20 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v21,  "version does not match",  v20);

        goto LABEL_16;
      }
    }

    uint64_t v22 = *((void *)a2 + 1);
    int v23 = *(_DWORD *)(v22 + 160);
    if (v23 == 16)
    {
      __int128 v30 = (_DWORD *)*((void *)this + 15);
      __int128 v29 = (_DWORD *)*((void *)this + 16);
      if (v30 == v29) {
        goto LABEL_40;
      }
      while (*v30 != 14)
      {
        if (++v30 == v29)
        {
          __int128 v30 = (_DWORD *)*((void *)this + 16);
          break;
        }
      }

      if (v29 == v30)
      {
LABEL_40:
        char v26 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v31,  "remote placeholder",  v26);
        goto LABEL_50;
      }
    }

    else if (v23 == 14)
    {
      id v25 = (_DWORD *)*((void *)this + 15);
      id v24 = (_DWORD *)*((void *)this + 16);
      if (v25 == v24) {
        goto LABEL_33;
      }
      while (*v25 != 14)
      {
        if (++v25 == v24)
        {
          id v25 = (_DWORD *)*((void *)this + 16);
          break;
        }
      }

      if (v24 == v25)
      {
LABEL_33:
        char v26 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v27,  "system placeholder",  v26);
LABEL_50:

        goto LABEL_16;
      }
    }

    else if (((*(_DWORD *)(v22 + 164) >> 18) & 1) != (*((_DWORD *)this + 29) & 0x400u) >> 10)
    {
      if ((*((_DWORD *)this + 29) & 0x400) != 0) {
        uint64_t v33 = "placeholder";
      }
      else {
        uint64_t v33 = "not placeholder";
      }
      char v26 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v34,  v33,  v26);
      goto LABEL_50;
    }

    if ((*((_BYTE *)this + 117) & 0x10) != 0 || (uint64_t v32 = *((void *)a2 + 3)) == 0 || *(_WORD *)(v32 + 12))
    {
      uint64_t result = LaunchServices::BindingEvaluation::checkApplicationIdentifier(this, (uint64_t)a2);
      goto LABEL_17;
    }

    int v35 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v36,  "handler rank 'none'",  v35);

    goto LABEL_16;
  }

  if (*((_BYTE *)a2 + 90)) {
    return 1LL;
  }
  uint64_t v10 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v11,  "(no-I/O) previously found to be not-OK",  v10);

  return *((_BYTE *)a2 + 90) != 0;
}

void sub_183E5ED04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataGetUnsupportedFormatFlag()
{
  return 0LL;
}

uint64_t _LSVersionNumberCompare(void *a1, void *a2)
{
  if (*a1 > *a2) {
    return 1LL;
  }
  if (*a1 < *a2) {
    return -1LL;
  }
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  unint64_t v5 = a2[1];
  unint64_t v6 = a2[2];
  BOOL v7 = v4 > v6;
  if (v4 >= v6) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = -1LL;
  }
  if (v7) {
    uint64_t v8 = 1LL;
  }
  BOOL v9 = v3 > v5;
  if (v3 >= v5) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = -1LL;
  }
  if (v9) {
    return 1LL;
  }
  else {
    return v10;
  }
}

uint64_t LaunchServices::BindingEvaluation::checkApplicationIdentifier(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[11];
  if (v2)
  {
    +[_LSLazyPropertyList lazyPropertyListWithContext:unit:]( &OBJC_CLASS____LSLazyPropertyList,  "lazyPropertyListWithContext:unit:",  *a1,  *(unsigned int *)(*(void *)(a2 + 8) + 132LL));
    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 _applicationIdentifier];
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v7 = v6;
    if (v6)
    {
      if ([v6 isEqual:v2])
      {
        uint64_t v8 = 1LL;
LABEL_9:

        return v8;
      }

      BOOL v9 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  a2);
      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v11,  "app ID",  v9);
    }

    else
    {
      BOOL v9 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  a2);
      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v10,  "no app ID",  v9);
    }

    uint64_t v8 = 0LL;
    goto LABEL_9;
  }

  return 1LL;
}

void sub_183E5EEC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>( uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0LL;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  __int128 v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *__int128 v19 = v10;
    goto LABEL_39;
  }

  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    __int128 v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_183E5F1C8(_Unwind_Exception *a1)
{
}

uint64_t LaunchServices::BindingEvaluation::isBindingOK( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (!*((_BYTE *)a2 + 89))
  {
    unint64_t v6 = (void *)*((void *)this + 19);
    unint64_t v7 = (uint64_t (**)(void, void, void))MEMORY[0x186E2A7B8](*((void *)this + 18));

    if (v7
      && (((uint64_t (**)(void, void, LaunchServices::BindingEvaluation::State *))v7)[2]( v7,  *(void *)this,  a2) & 1) == 0)
    {
      uint64_t v24 = [v6 UTF8String];
      if (v24) {
        id v25 = (const char *)v24;
      }
      else {
        id v25 = "caller-supplied filter";
      }
      char v26 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v27,  v25,  v26);

LABEL_42:
      uint64_t result = 0LL;
    }

    else
    {
      uint64_t result = LaunchServices::BindingEvaluation::isBindingOK_NoIO(this, a2, v8);
      if ((_DWORD)result)
      {
        if ((*((_BYTE *)this + 117) & 0x80) == 0)
        {
          if (*((void *)a2 + 3))
          {
            _LSDatabaseGetStringArray(**(void ***)this);
            BOOL v9 = (void *)objc_claimAutoreleasedReturnValue();
            uint64_t v32 = v9;
            uint64_t v10 = v9;
            if (v9)
            {
              uint64_t v11 = [v9 count];
              uint64_t v10 = v32;
              if (v11)
              {
                if (!*((void *)this + 33))
                {
                  uint64_t v12 = [MEMORY[0x189603FC8] dictionary];
                  float v13 = (void *)*((void *)this + 33);
                  *((void *)this + 33) = v12;
                }

                __int128 v36 = 0u;
                __int128 v37 = 0u;
                __int128 v34 = 0u;
                __int128 v35 = 0u;
                id obj = v32;
                uint64_t v14 = [obj countByEnumeratingWithState:&v34 objects:buf count:16];
                if (v14)
                {
                  uint64_t v15 = *(void *)v35;
                  do
                  {
                    for (uint64_t i = 0LL; i != v14; ++i)
                    {
                      if (*(void *)v35 != v15) {
                        objc_enumerationMutation(obj);
                      }
                      uint64_t v17 = *(void *)(*((void *)&v34 + 1) + 8 * i);
                      [*((id *)this + 33) objectForKeyedSubscript:v17];
                      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v18) {
                        goto LABEL_19;
                      }
                      __int128 v19 = (void *)MGCopyAnswer();
                      if (!v19 || (objc_opt_respondsToSelector() & 1) == 0)
                      {

                        uint64_t v18 = 0LL;
                        goto LABEL_26;
                      }

                      objc_msgSend(MEMORY[0x189607968], "numberWithBool:", objc_msgSend(v19, "BOOLValue"));
                      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
                      [*((id *)this + 33) setObject:v18 forKeyedSubscript:v17];

                      if (v18)
                      {
LABEL_19:
                        if (([v18 BOOLValue] & 1) == 0)
                        {
                          id v28 = [NSString stringWithFormat:@"missing capability %@", v17];
                          uint64_t v29 = [v28 UTF8String];
                          __int128 v30 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
                          LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v31,  v29,  v30);

                          goto LABEL_42;
                        }
                      }

LABEL_26:
                    }

                    uint64_t v14 = [obj countByEnumeratingWithState:&v34 objects:buf count:16];
                  }

                  while (v14);
                }

                uint64_t v10 = v32;
              }
            }
          }

          if ((!*((_BYTE *)this + 96) || *((_BYTE *)this + 97)) && (*((_BYTE *)this + 118) & 1) == 0)
          {
            _LSBindingLog();
            unint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)id buf = 0;
              _os_log_impl( &dword_183E58000,  v20,  OS_LOG_TYPE_DEBUG,  "Launch Services does not perform restrictions checking during binding on this platform.",  buf,  2u);
            }

            LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Launch Services does not perform restrictions checking during binding on this platform.",  v21);
          }
        }

        uint64_t result = 1LL;
      }
    }

    *((_WORD *)a2 + 44) = result | 0x100;
    *((_WORD *)a2 + 45) = result | 0x100;
    return result;
  }

  if (*((_BYTE *)a2 + 88)) {
    return 1LL;
  }
  uint64_t v22 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  this,  a2);
  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ FILTERED",  v23,  "previously found to be not-OK",  v22);

  return *((_BYTE *)a2 + 88) != 0;
}

    unint64_t v3 = 0;
    uint8x8_t v8 = 0LL;
LABEL_27:
    if (v38 && v40) {
      _LSContextDestroy(v38);
    }
    LSVersionNumber v27 = v39;
    __int128 v38 = 0LL;
    uint64_t v39 = 0LL;

    uint64_t v40 = 0;
    id v28 = v41;
    __int128 v41 = 0LL;

    return v3;
  }

  _LSDefaultLog();
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
    -[LSBundleRecord(Redaction) unredactWithError:].cold.1(v17, v18, v19, v20, v21, v22, v23, v24);
  }

  if (!a3) {
    return 0;
  }
  _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -54LL,  (uint64_t)"-[LSBundleRecord(Redaction) unredactWithError:]",  1788LL,  0LL);
  unint64_t v3 = 0;
  *a3 = (id)objc_claimAutoreleasedReturnValue();
  return v3;
}

  return v15;
}
  }

  objc_autoreleasePoolPop(v10);

  return v13;
}

void sub_183E5F5DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_183E5F994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E5FB3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, id a31)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_IS_PERFORMING_IO_FOR_A_CALLER__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t _LSBundleCopyOrCheckNode(void *a1, unsigned int a2, int a3, int a4, void **a5)
{
  *(void *)&v41[5] = *MEMORY[0x1895F89C0];
  id v9 = a1;
  __int16 v37 = 0;
  if (a5)
  {
    uint64_t v10 = *a5;
    *a5 = 0LL;
  }

  uint64_t v11 = _LSBundleGet(v9, a2);
  if (v11 && (v12 = *(unsigned int *)(v11 + 4), (uint64_t v13 = _LSContainerGet()) != 0))
  {
    int v14 = _LSContainerCheckState(v9, v12, v13, (_BYTE *)&v37 + 1, 0LL);
    if (!a4 || (uint64_t v15 = 0LL, v16 = 4294967261LL, !v14) && HIBYTE(v37) == 1)
    {
      id v36 = 0LL;
      _LSBundleCreateNode(v9, a2, a4 != 0, (BOOL *)&v37, &v36);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
      id v17 = v36;
      uint64_t v18 = v17;
      if (v15)
      {
        uint64_t v16 = 0LL;
      }

      else
      {
        uint64_t v16 = _LSGetOSStatusFromNSError(v17);
        _LSDefaultLog();
        __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 136315650;
          uint64_t v39 = "_LSBundleCopyOrCheckNode";
          __int16 v40 = 1026;
          *(_DWORD *)__int128 v41 = a2;
          v41[2] = 1024;
          *(_DWORD *)&v41[3] = v16;
          _os_log_impl( &dword_183E58000,  v19,  OS_LOG_TYPE_DEFAULT,  "%s: cached node not found, _LSBundleCreateNode for bundleID %{public}u returned %d",  buf,  0x18u);
        }
      }

      if (a4 && !(_DWORD)v16 && (_BYTE)v37)
      {
        _LSDefaultLog();
        unint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 136315394;
          uint64_t v39 = "_LSBundleCopyOrCheckNode";
          __int16 v40 = 2112;
          *(void *)__int128 v41 = v15;
          _os_log_impl( &dword_183E58000,  v20,  OS_LOG_TYPE_DEFAULT,  "%s: cached node not found, registering new node %@",  buf,  0x16u);
        }

        id v35 = 0LL;
        BOOL v21 = _LSRegisterBundleNode(0LL, v15, 1u, 0LL, &v35);
        id v22 = v35;
        if (!v21)
        {
          _LSDefaultLog();
          int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
            _LSBundleCopyOrCheckNode((uint64_t)v15, (uint64_t)v22, v23);
          }
        }
      }

      if (v15) {
        BOOL v24 = a5 != 0LL;
      }
      else {
        BOOL v24 = 0;
      }
      if (v24)
      {
        if (a3)
        {
          id v25 = (void *)_CSStringCopyCFString();
          uint64_t v26 = _CSStringCopyCFString();
          LSVersionNumber v27 = (void *)v26;
          uint64_t v16 = 4294957797LL;
          if (v25 && v26)
          {
            [v25 stringByAppendingString:v26];
            id v28 = (void *)objc_claimAutoreleasedReturnValue();
            if (v28)
            {
              id v34 = 0LL;
              uint64_t v29 = [v15 childNodeWithRelativePath:v28 flags:1 error:&v34];
              id v30 = v34;
              __int128 v31 = *a5;
              *a5 = (void *)v29;

              if (*a5) {
                uint64_t v16 = 0LL;
              }
              else {
                uint64_t v16 = _LSGetOSStatusFromNSError(v30);
              }
            }

            else
            {
              uint64_t v16 = 4294967255LL;
            }
          }
        }

        else
        {
          id v32 = v15;
          id v25 = *a5;
          *a5 = v32;
        }
      }
    }
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = 4294956479LL;
  }

  return v16;
}

void sub_183E5FFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContainerGet()
{
  return CSStoreGetUnit();
}

uint64_t _LSContainerCheckState(void *a1, uint64_t a2, uint64_t Unit, _BYTE *a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = 4294967246LL;
  if (v9 && (_DWORD)a2)
  {
    if (!Unit)
    {
      uint64_t Unit = CSStoreGetUnit();
      if (!Unit)
      {
        uint64_t v10 = 4294967261LL;
        goto LABEL_14;
      }
    }

    if (*(_BYTE *)(Unit + 2))
    {
      __int128 v11 = *(_OWORD *)Unit;
      int v14 = *(_DWORD *)(Unit + 16);
      __int128 v13 = v11;
    }

    else
    {
      uint64_t v10 = _LSUpdateContainerState(v9, a2, (uint64_t)&v13);
      if ((_DWORD)v10) {
        goto LABEL_14;
      }
    }

    if (a4) {
      *a4 = BYTE2(v13);
    }
    uint64_t v10 = 0LL;
    if (a5) {
      *a5 = *(void *)((char *)&v13 + 4);
    }
  }

void sub_183E60140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleCreateNode(void *a1, unsigned int a2, int a3, BOOL *a4, void *a5)
{
  id v9 = a1;
  uint64_t v10 = v9;
  BOOL v24 = 0;
  if (a3)
  {
    id v11 = v9;
    uint64_t v12 = (int *)_LSBundleGet(v11, a2);
    __int128 v13 = v12;
    if (v12 && (_LSAliasGetPath(v11, *v12), (int v14 = (void *)objc_claimAutoreleasedReturnValue()) != 0LL))
    {
      uint64_t v15 = (void *)[objc_alloc(MEMORY[0x189604030]) initFileURLWithPath:v14 isDirectory:(v13[44] >> 3) & 1];
      BOOL v16 = +[FSNode canReadMetadataOfURL:fromSandboxWithAuditToken:]( &OBJC_CLASS___FSNode,  "canReadMetadataOfURL:fromSandboxWithAuditToken:",  v15,  0LL);

      if (!v16)
      {
        if (a5)
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -43LL, (uint64_t)"_LSBundleCreateNode", 1598LL, 0LL);
          id v17 = 0LL;
          *a5 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_20;
        }

LABEL_19:
        id v17 = 0LL;
        goto LABEL_20;
      }
    }

    else
    {
    }
  }

  uint64_t v18 = (int *)_LSBundleGet(v10, a2);
  id v17 = _LSAliasCopyResolvedNode(v10, *v18, 0LL, (uint64_t)&v24, a5);
  if (!v17)
  {
    uint64_t v20 = _LSContainerGet();
    if (!v20) {
      goto LABEL_19;
    }
    int v21 = *(_DWORD *)(v20 + 12);
    if (!v21) {
      goto LABEL_19;
    }
    id v22 = _LSAliasCopyResolvedNode(v10, v21, 0LL, (uint64_t)&v24, a5);
    if (!v22) {
      goto LABEL_19;
    }
    id v17 = _LSAliasCopyResolvedNode(v10, *v18, v22, (uint64_t)&v24, a5);
    if (!v17)
    {

      goto LABEL_20;
    }
  }

  BOOL v19 = v24;
  if (a3 && !v24)
  {
    BOOL v19 = _LSNodeHasChanged(v17, (uint64_t)v10, a2, (uint64_t)v18, 0LL) != 0;
    BOOL v24 = v19;
  }

  if (a4) {
    *a4 = v19;
  }
LABEL_20:

  return v17;
}
    }
  }

  _Block_object_dispose(&v27, 8);

  return v17;
}
      }

      unint64_t v7 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
    }

    while (v7);
  }

  else
  {
    id v9 = 0x8000;
  }

  uint64_t v20 = _LSCopyHandlerRankStringFromNumericHandlerRank(v9);
  return v20;
}

  int *v12 = &v9[v17];
  return result;
}

  return v21;
}
}
}

    if ([(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
    {
      [v20 stringByAppendingString:@"🔥"];
      int v23 = (void *)objc_claimAutoreleasedReturnValue();

      uint64_t v20 = v23;
      if (!v23) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }

  return v8;
}

        BOOL v16 = _CFGetEUID();
        id v22 = 0LL;
        id v17 = _LSDatabaseCreate(string, v16, v6, &v22);
        uint64_t v18 = (LaunchServices::DatabaseContext *)v22;
        BOOL v19 = v18;
        if (v17)
        {
          *(void *)id buf = v17;
          _LSContextObserveChange((void **)buf);
        }

        else
        {
          LaunchServices::DatabaseContext::getLog(v18);
          int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)id buf = 138412290;
            *(void *)&uint8_t buf[4] = v19;
            _os_log_impl( &dword_183E58000,  v21,  OS_LOG_TYPE_INFO,  "Could not replace the local LS database with a pushed copy: %@",  buf,  0xCu);
          }
        }

LABEL_29:
        CFRelease(v6);
LABEL_30:

        return;
      }
    }

    else
    {

      uint64_t v10 = v6 == 0LL;
      if (string && v6)
      {
        LaunchServices::DatabaseContext::getLog(v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)id buf = 0;
          uint64_t v12 = "Replacing local LS database with a copy pushed by an unspecified process.";
          __int128 v13 = v11;
          int v14 = 2;
LABEL_18:
          _os_log_impl(&dword_183E58000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
          goto LABEL_19;
        }

        goto LABEL_19;
      }
    }

    LaunchServices::DatabaseContext::getLog(v9);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( &dword_183E58000,  v20,  OS_LOG_TYPE_INFO,  "Could not replace the local LS database with a pushed copy because the pushed XPC object was malformed.",  buf,  2u);
    }

    if (v10) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

    uint64_t v18 = (void *)[v41 mutableCopy];
    BOOL v19 = self->_stagingDirectoryInfoMap.__table_.__p1_.__value_.__next_;
    for (j = v18; v19; BOOL v19 = (void *)*v19)
    {
      if (v19[3]) {
        objc_msgSend(v18, "removeObject:", j, v37);
      }
    }

    uint64_t v47 = 0u;
    uint64_t v48 = 0u;
    uint64_t v45 = 0u;
    uint64_t v46 = 0u;
    uint64_t v39 = v18;
    uint64_t v20 = [v39 countByEnumeratingWithState:&v45 objects:v49 count:16];
    if (!v20)
    {
LABEL_49:

      unint64_t v6 = (os_log_s *)obj;
      goto LABEL_50;
    }

    int v21 = *(void *)v46;
LABEL_25:
    id v22 = 0LL;
    while (1)
    {
      if (*(void *)v46 != v21) {
        objc_enumerationMutation(v39);
      }
      int v23 = *(void *)(*((void *)&v45 + 1) + 8 * v22);
      _LSDefaultLog();
      BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412290;
        *(void *)&uint8_t buf[4] = v23;
        _os_log_impl( &dword_183E58000,  v24,  OS_LOG_TYPE_DEFAULT,  "Processing new persona %@ in staging dir manager",  buf,  0xCu);
      }

      ioPersonality = self->_ioPersonality;
      id v44 = 0LL;
      if (!ioPersonality) {
        break;
      }
      -[LSOpenStagingDirectoryManagerIOPersonality stagingDirectoryInfoForPersonaUniqueString:error:]( ioPersonality,  "stagingDirectoryInfoForPersonaUniqueString:error:",  v23,  &v44);
      uint64_t v26 = v44;
      LSVersionNumber v27 = v26;
      if (!BYTE8(v51))
      {
        id v32 = v26;
LABEL_38:
        _LSDefaultLog();
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v52 = 138412546;
          *(void *)&v52[4] = v23;
          *(_WORD *)&v52[12] = 2112;
          *(void *)&v52[14] = v32;
          _os_log_error_impl( &dword_183E58000,  v34,  OS_LOG_TYPE_ERROR,  "Could not get staging directory for persona UUID %@: %@",  v52,  0x16u);
        }

        goto LABEL_40;
      }

      id v28 = self->_ioPersonality;
      __int128 v42 = v27;
      uint64_t v29 = -[LSOpenStagingDirectoryManagerIOPersonality stagingDirectoryKeyForNode:error:]( v28,  "stagingDirectoryKeyForNode:error:",  *(void *)&buf[8],  &v42);
      __int128 v31 = v30;
      id v32 = v42;

      v43[0] = v29;
      v43[1] = v31;
      if ((_BYTE)v31)
      {
        _LSDefaultLog();
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v52 = 138412546;
          *(void *)&v52[4] = v23;
          *(_WORD *)&v52[12] = 2112;
          *(void *)&v52[14] = *(void *)&buf[8];
          _os_log_impl(&dword_183E58000, v33, OS_LOG_TYPE_INFO, "staging directory for persona %@ is %@", v52, 0x16u);
        }

        std::unordered_map<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>::insert_or_assign[abi:nn180100]<LaunchServices::OpenStaging::StagingDirectoryInfo>( (uint64_t)p_stagingDirectoryInfoMap,  v43,  (LaunchServices::OpenStaging::StagingDirectoryInfo *)buf);
        goto LABEL_41;
      }

      _LSDefaultLog();
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v52 = 138412546;
        *(void *)&v52[4] = *(void *)&buf[8];
        *(_WORD *)&v52[12] = 2112;
        *(void *)&v52[14] = v32;
        _os_log_error_impl( &dword_183E58000,  v34,  OS_LOG_TYPE_ERROR,  "Could not get volume identifier for %@: %@",  v52,  0x16u);
      }

  uint64_t v20 = v13;
  if (v26 && v28) {
    _LSContextDestroy(v26);
  }
  int v21 = v27;
  uint64_t v26 = 0LL;
  LSVersionNumber v27 = 0LL;

  id v28 = 0;
  id v22 = v29;
  uint64_t v29 = 0LL;

  return v20;
}

void sub_183E60354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_LSAliasCopyResolvedNode(void *a1, int a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a3;
  _LSAliasGet(a1, a2);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    id v11 = -[FSNode initByResolvingBookmarkData:relativeToNode:bookmarkDataIsStale:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initByResolvingBookmarkData:relativeToNode:bookmarkDataIsStale:error:",  v10,  v9,  a4,  a5);
    uint64_t v12 = v11;
    if (v11) {
      id v13 = v11;
    }
  }

  else if (a5)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -9499LL, (uint64_t)"_LSAliasCopyResolvedNode", 301LL, 0LL);
    uint64_t v12 = 0LL;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  return v12;
}

void sub_183E6047C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSAliasGet(void *a1, int a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (a2)
  {
    uint64_t Unit = (void *)CSStoreGetUnit();
    if (Unit)
    {
      unint64_t v5 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:Unit length:v8 freeWhenDone:0];
      uint64_t Unit = v5;
      if (v5)
      {
        if ([v5 length] != v8)
        {
          _LSDefaultLog();
          unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id buf = 134218496;
            uint64_t v10 = Unit;
            __int16 v11 = 2048;
            uint64_t v12 = [Unit length];
            __int16 v13 = 2048;
            uint64_t v14 = v8;
            _os_log_error_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_ERROR,  "bad alias at %p, size %ld, CSStore size %lu\n",  buf,  0x20u);
          }

          goto LABEL_11;
        }

        if ((unint64_t)[Unit length] > 0x2000)
        {
          _LSDefaultLog();
          unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            _LSAliasGet_cold_1((uint64_t)Unit, buf, [Unit length], v6);
          }
LABEL_11:
        }
      }
    }
  }

  else
  {
    uint64_t Unit = 0LL;
  }

  return Unit;
}

void sub_183E6063C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E60854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6090C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E60A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E60E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSGetNSErrorFromOSStatusImpl(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a2)
  {
    uint64_t v6 = (a1 - 100000);
    if (v6 > 0x3E7)
    {
      if ((a1 + 3278) > 0x4E)
      {
        unint64_t v7 = (void *)*MEMORY[0x189607670];
        uint64_t v6 = a1;
      }

      else
      {
        unint64_t v7 = (void *)*MEMORY[0x189607688];
        uint64_t v6 = (-3200 - a1);
      }
    }

    else
    {
      unint64_t v7 = (void *)*MEMORY[0x189607688];
    }

    _LSMakeNSErrorImpl(v7, v6, a3, a4, 0LL);
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue();
    _LSErrorLog();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      _LSGetNSErrorFromOSStatusImpl_cold_1();
    }

    id v10 = v8;
    *a2 = v10;
  }

  return a1 == 0;
}

void sub_183E6124C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_183E616C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, id a46)
{
  _Unwind_Resume(a1);
}

void sub_183E617EC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E61824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

objc_selector *__LSRECORD_GETTER__<objc_object * {__strong}>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  unint64_t v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    id v9 = CachedPropertyValue;
  }

  else
  {
    _LSRecordLog();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v22 = 136446978;
      Name = sel_getName(a3);
      __int16 v24 = 2114;
      uint64_t v25 = objc_opt_class();
      __int16 v26 = 2048;
      LSVersionNumber v27 = v5;
      __int16 v28 = 2082;
      uint64_t v29 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  (uint8_t *)&v22,  0x2Au);
    }

    __int16 v11 = v5;
    uint64_t v12 = v11;
    uint64_t v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      uint64_t v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (void (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      MethodImplementation(v15, a3, v14, v17, v18, Unit);
      id v9 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      id v9 = 0LL;
    }

    LaunchServices::Record::setCachedPropertyValue(v12, a2, v9, v20);
  }

  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_183E61AA8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E61B08LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E61B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E61B24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *LaunchServices::Record::getCachedPropertyValue( LaunchServices::Record *this, LSRecord *a2, objc_selector *a3)
{
  unint64_t v4 = a2;
  uint64_t result = (void *)*((void *)this + 1);
  if (result)
  {
    uint64_t result = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>( result,  &v4);
    if (result) {
      return (void *)result[3];
    }
  }

  return result;
}

id _LSDatabaseGetStringArray(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:_CSArrayGetCount()];
  id v5 = v1;
  id v6 = v2;
  _CSArrayEnumerateAllValues();
  id v3 = v6;

  return v3;
}

void sub_183E61C74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *LaunchServices::Record::setCachedPropertyValue( LaunchServices::Record *this, LSRecord *a2, objc_selector *a3, objc_object *a4)
{
  id v7 = a3;
  char v8 = a2;
  id v5 = (_OWORD *)*((void *)this + 1);
  if (!v5)
  {
    id v5 = operator new(0x28uLL);
    *id v5 = 0u;
    v5[1] = 0u;
    *((_DWORD *)v5 + _Block_object_dispose(va, 8) = 1065353216;
    *((void *)this + 1) = v5;
  }

  return std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *&,objc_object * const {__strong}&>( (uint64_t)v5,  &v8,  &v8,  &v7);
}

id _LSPlistGet(uint64_t a1, unsigned int a2)
{
  DataWithUnitNoCopy = 0LL;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (a1 && a2)
  {
    DataWithUnitNoCopy = (void *)_CSStoreCreateDataWithUnitNoCopy();
    _LSDefaultLog();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 134218496;
      char v8 = DataWithUnitNoCopy;
      __int16 v9 = 2048;
      uint64_t v10 = a2;
      __int16 v11 = 2048;
      uint64_t v12 = a1;
      _os_log_debug_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_DEBUG,  "Got plist data %p for unit %llx from database %p",  (uint8_t *)&v7,  0x20u);
    }
  }

  return DataWithUnitNoCopy;
}

void sub_183E61E2C(_Unwind_Exception *exception_object)
{
}

id _LSDefaultLog()
{
  if (_LSDefaultLog_onceToken != -1) {
    dispatch_once(&_LSDefaultLog_onceToken, &__block_literal_global_44);
  }
  return (id)_LSDefaultLog_log;
}

void sub_183E61ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E61F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E620CC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_183E62178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_LSPlistDataGetHint(void *a1)
{
  id v1 = a1;
  _LSDefaultLog();
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _LSPlistDataGetHint_cold_1((uint64_t)v1, v2, v3);
  }

  if (v1)
  {
    unint64_t v4 = (void *)MEMORY[0x186E2A59C]();
    BOOL v10 = 0;
    _LSPlistGetSubdataForFCF(v1, &v10);
    id v5 = (void *)objc_claimAutoreleasedReturnValue();

    id v6 = (void *)_CFPropertyListCopyTopLevelKeys();
    if (v6)
    {
      int v7 = objc_alloc(&OBJC_CLASS____LSPlistHint);
      char v8 = -[_LSPlistHint initWithKeys:compacted:](v7, v6, v10);
    }

    else
    {
      char v8 = 0LL;
    }

    objc_autoreleasePoolPop(v4);
  }

  else
  {
    char v8 = 0LL;
    id v5 = 0LL;
  }

  return v8;
}

void sub_183E62274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSData *_LSPlistGetSubdataForFCF(NSData *a1, BOOL *a2)
{
  BOOL v8 = 0;
  _LSPlistDataIsBinary(a1, &v8);
  if (!v8)
  {
    id v6 = a1;
    if (!a2) {
      return v6;
    }
    goto LABEL_3;
  }

  id v4 = objc_alloc(MEMORY[0x189603F48]);
  id v5 = a1;
  id v6 = (NSData *)objc_msgSend( v4,  "initWithBytesNoCopy:length:freeWhenDone:",  -[NSData bytes](v5, "bytes") + 4,  -[NSData length](v5, "length") - 4,  0);
  if (a2) {
LABEL_3:
  }
    *a2 = v8;
  return v6;
}

NSUInteger _LSPlistDataIsBinary(NSData *a1, BOOL *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  NSUInteger result = -[NSData length](a1, "length");
  if (result < 0xA)
  {
    BOOL v6 = 0;
    if (!a2) {
      return result;
    }
    goto LABEL_11;
  }

  NSUInteger result = -[NSData getBytes:length:](a1, "getBytes:length:", &v7, 10LL);
  BOOL v6 = v7 == 0x696C706268636E6CLL && v8 == 29811;
  if (a2) {
LABEL_11:
  }
    *a2 = v6;
  return result;
}

void sub_183E62488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistDataGetValueForKey(NSData *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0LL;
  uint64_t v9 = a2;
  if (a1 && a2)
  {
    BOOL v6 = (void *)[objc_alloc(MEMORY[0x189604010]) initWithObjects:&v9 count:1];
    _LSPlistDataGetValuesForKeys(a1, v6, a3);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    [v7 objectForKeyedSubscript:v9];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

void sub_183E62528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistDataGetValuesForKeys(NSData *a1, void *a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  id v50 = a2;
  id v48 = (id)objc_msgSend(objc_alloc(MEMORY[0x189603FC8]), "initWithCapacity:", objc_msgSend(v50, "count"));
  if (a1 && v50)
  {
    context = (void *)MEMORY[0x186E2A59C]();
    BOOL v56 = 0;
    _LSPlistDataIsBinary(a1, &v56);
    if (!a3)
    {
      id v11 = v50;
      goto LABEL_19;
    }

    BOOL v3 = v56;
    -[_LSPlistHint completeDictionary](a3);
    __int128 v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      id v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FC8]), "initWithCapacity:", objc_msgSend(v50, "count"));
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      id v5 = v50;
      uint64_t v6 = [v5 countByEnumeratingWithState:&v57 objects:v63 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v58;
        do
        {
          for (uint64_t i = 0LL; i != v6; ++i)
          {
            if (*(void *)v58 != v7) {
              objc_enumerationMutation(v5);
            }
            uint64_t v9 = *(void *)(*((void *)&v57 + 1) + 8 * i);
            [v53 objectForKeyedSubscript:v9];
            BOOL v10 = (void *)objc_claimAutoreleasedReturnValue();
            [v4 setObject:v10 forKeyedSubscript:v9];
          }

          uint64_t v6 = [v5 countByEnumeratingWithState:&v57 objects:v63 count:16];
        }

        while (v6);
      }

      id v11 = 0LL;
      id v12 = 0LL;
      goto LABEL_13;
    }

    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    id obj = v50;
    id v12 = 0LL;
    id v4 = 0LL;
    uint64_t v26 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
    if (!v26)
    {
LABEL_60:

      if ([v12 count])
      {
        uint64_t v33 = (void *)[obj mutableCopy];
        id v11 = v33;
        if (v12) {
          [v33 minusSet:v12];
        }
        if (!v3) {
          [v11 intersectSet:*(void *)(a3 + 8)];
        }
      }

      else
      {
        id v11 = obj;
      }

LABEL_13:
      if (v4) {
        [v48 addEntriesFromDictionary:v4];
      }

      if (!v11) {
        goto LABEL_23;
      }
LABEL_19:
      if (![v11 count])
      {
LABEL_23:
        id v13 = 0LL;
LABEL_81:

        objc_autoreleasePoolPop(context);
        goto LABEL_82;
      }

      if (_NSIsNSString())
      {
        if ([v11 containsString:@":"])
        {
LABEL_76:
          __int128 v41 = (void *)MEMORY[0x186E2A59C]();
          _LSPlistRestore(a1);
          __int128 v42 = (void *)objc_claimAutoreleasedReturnValue();
          [v11 allObjects];
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
          [v42 dictionaryWithValuesForKeys:v43];
          id v13 = (id)objc_claimAutoreleasedReturnValue();

          objc_autoreleasePoolPop(v41);
          _LSDefaultLog();
          __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            [v11 allObjects];
            id v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "componentsJoinedByString:", @", ");
            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue();
            _LSPlistDataGetValuesForKeys_cold_1(v45, (uint64_t)v63, v38, v44);
          }

  if (v25 && v27) {
    _LSContextDestroy(v25);
  }
  uint64_t v21 = v26;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;

  uint64_t v27 = 0;
  uint64_t v22 = v28;
  uint64_t v28 = 0LL;

LABEL_17:
}

  objc_autoreleasePoolPop(v8);
}

    return 0LL;
  }

  BOOL v19 = (void *)MEMORY[0x189603F70];
  id v20 = (void *)objc_msgSend( objc_alloc(MEMORY[0x189603F48]),  "initWithBytes:length:",  a4,  a5,  @"LSPersistentIdentifier");
  __int16 v24 = v20;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 exceptionWithName:*MEMORY[0x189603A58] reason:@"The persistent identifier passed to -[LSBundleRecord initWithPersistentIdentifier:] was for a different type of record." userInfo:v21];
  uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v22);
  __break(1u);
  return result;
}

    __int16 v8 = -1LL;
    goto LABEL_20;
  }

  int StringForCFString = _LSDatabaseGetStringForCFString(v5, @"com.apple.mobilephone", 1);
  if (StringForCFString)
  {
    if (*(_DWORD *)(a2 + 292) != StringForCFString)
    {
      if (*(_DWORD *)(a3 + 292) == StringForCFString)
      {
LABEL_16:
        __int16 v8 = 1LL;
        goto LABEL_20;
      }

      goto LABEL_15;
    }

    goto LABEL_13;
  }

  _LSSetCrashMessage((NSString *)[objc_alloc(NSString) initWithFormat:@"Unit exhaustion in table %@", v4]);
  abort();
}
}

  return v13;
}

    _LSDefaultLog();
    BOOL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = 134217984;
      uint64_t v7 = _CFGetEUID();
      _os_log_impl( &dword_183E58000,  v3,  OS_LOG_TYPE_DEFAULT,  "LaunchServices: Begin database seeding for uid %lli",  (uint8_t *)&v6,  0xCu);
    }

    _LSSetDatabaseIsSeeded(0);
    goto LABEL_16;
  }

  return result;
}

  objc_autoreleasePoolPop(v9);
  return v13;
}
}
}

    [v3 objectAtIndex:0];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v10 = [v9 capitalizedString];
    goto LABEL_14;
  }

  uint64_t v6 = 0LL;
  return v6;
}

LABEL_16:
  return v4;
}
}

  CFRelease(v8);
  if (a2) {
LABEL_7:
  }
    CFRelease(a2);
}

LABEL_78:
          if (v13)
          {
            [v48 addEntriesFromDictionary:v13];
            if (a3)
            {
              v54[0] = MEMORY[0x1895F87A8];
              v54[1] = 3221225472LL;
              v54[2] = ___LSPlistDataGetValuesForKeys_block_invoke;
              v54[3] = &unk_189D77A18;
              BOOL v55 = v56;
              v54[4] = a3;
              [v13 enumerateKeysAndObjectsUsingBlock:v54];
            }
          }

          goto LABEL_81;
        }
      }

      else if ((_NSIsNSSet() & 1) != 0)
      {
        __int128 v59 = 0u;
        __int128 v60 = 0u;
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        id v14 = v11;
        uint64_t v15 = [v14 countByEnumeratingWithState:&v57 objects:v63 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v58;
          while (2)
          {
            for (uint64_t j = 0LL; j != v15; ++j)
            {
              if (*(void *)v58 != v16) {
                objc_enumerationMutation(v14);
              }
              if ([*(id *)(*((void *)&v57 + 1) + 8 * j) containsString:@":"])
              {

                goto LABEL_76;
              }
            }

            uint64_t v15 = [v14 countByEnumeratingWithState:&v57 objects:v63 count:16];
            if (v15) {
              continue;
            }
            break;
          }
        }
      }

      id v62 = 0LL;
      BOOL v61 = 0;
      _LSPlistGetSubdataForFCF(a1, &v61);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v61)
      {
        BOOL v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FE0]), "initWithCapacity:", objc_msgSend(v11, "count"));
        __int128 v59 = 0u;
        __int128 v60 = 0u;
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        id v20 = v11;
        uint64_t v21 = [v20 countByEnumeratingWithState:&v57 objects:v63 count:16];
        if (v21)
        {
          uint64_t v22 = *(void *)v58;
          do
          {
            for (uint64_t k = 0LL; k != v21; ++k)
            {
              if (*(void *)v58 != v22) {
                objc_enumerationMutation(v20);
              }
              _LSPlistCompactString(*(NSString **)(*((void *)&v57 + 1) + 8 * k), 0LL);
              __int16 v24 = (void *)objc_claimAutoreleasedReturnValue();
              [v19 addObject:v24];
            }

            uint64_t v21 = [v20 countByEnumeratingWithState:&v57 objects:v63 count:16];
          }

          while (v21);
        }

        uint64_t v25 = v19;
      }

      else
      {
        uint64_t v25 = 0LL;
      }

      if (_CFPropertyListCreateFiltered() && (_NSIsNSDictionary() & 1) == 0)
      {
        id v34 = v62;
        id v62 = 0LL;
      }

      id v35 = v62;
      if (v62 && v61)
      {
        Transformed = (void *)_LSPlistCreateTransformed(v62, (uint64_t)_LSPlistRestoreString, 0LL);
        id v37 = v62;
        id v62 = Transformed;

        id v35 = v62;
      }

      id v13 = v35;

      _LSDefaultLog();
      __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        [v11 allObjects];
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "componentsJoinedByString:", @", ");
        __int16 v40 = (void *)objc_claimAutoreleasedReturnValue();
        _LSPlistDataGetValuesForKeys_cold_2(v40, (uint64_t)v63, v38, v39);
      }

      goto LABEL_78;
    }

    uint64_t v27 = *(void *)v58;
LABEL_45:
    uint64_t v28 = 0LL;
    while (1)
    {
      if (*(void *)v58 != v27) {
        objc_enumerationMutation(obj);
      }
      uint64_t v29 = (NSString *)*(id *)(*((void *)&v57 + 1) + 8 * v28);
      uint64_t v30 = v29;
      __int128 v31 = v29;
      if (v3)
      {
        _LSPlistCompactString(v29, 0LL);
        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue();
      }

      -[_LSPlistHint cachedValueForKey:](a3, (uint64_t)v31);
      id v32 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32) {
        break;
      }
      if (([*(id *)(a3 + 8) containsObject:v31] & 1) == 0) {
        goto LABEL_55;
      }
LABEL_58:

      if (v26 == ++v28)
      {
        uint64_t v26 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
        if (!v26) {
          goto LABEL_60;
        }
        goto LABEL_45;
      }
    }

    if (!v4) {
      id v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FC8]), "initWithCapacity:", objc_msgSend(obj, "count"));
    }
    [v4 setObject:v32 forKeyedSubscript:v30];
LABEL_55:
    if (!v12) {
      id v12 = objc_alloc_init(MEMORY[0x189603FE0]);
    }
    [v12 addObject:v30];
    goto LABEL_58;
  }

  id v11 = v50;
LABEL_82:

  return v48;
}

      v57[v76] = v66;
      *((void *)v60 + v76) = v67;
      ++v63;
      BOOL v55 = v222;
      uint64_t v64 = v219;
      goto LABEL_79;
    }

    if (*((uint64_t *)Value + 9) >= 1)
    {
      uint64_t v68 = 0LL;
      id v69 = v226;
      do
      {
        v70 = *((void *)Value + 11);
        (&v69[v63])[v68] = *(const char **)(*((void *)Value + 10) + 8 * v68);
        v55[v63 + v68] = *(_DWORD *)(v70 + 4 * v68);
        v57[v63 + v68] = v66 | 1;
        *((void *)v60 + v63 + v68++) = v67;
      }

      while (*((void *)Value + 9) > v68);
      v63 += v68;
    }

void sub_183E62CD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

NSString *_LSPlistCompactString(NSString *a1, BOOL *a2)
{
  NSUInteger v4 = -[NSString length](a1, "length");
  if (!a1) {
    goto LABEL_14;
  }
  if (!v4)
  {
    [NSString stringWithCharacters:&_LSPlistEscapeCharacter length:1];
    uint64_t v7 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v7) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v7 = a1;
    return v7;
  }

  if (-[NSString characterAtIndex:](a1, "characterAtIndex:", 0LL) == 8
    || _LSPlistLookUpIndexOfCompactedString(a1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x189607940], "stringWithCapacity:", -[NSString length](a1, "length") + 1);
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    [NSString stringWithCharacters:&_LSPlistEscapeCharacter length:1];
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 appendString:v8];

    [v5 appendString:a1];
    uint64_t v9 = [v5 copy];
  }

  else
  {
    _LSPlistGetCommonStrings();
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    unint64_t v6 = [v5 indexOfObject:a1];
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v7 = 0LL;
      goto LABEL_9;
    }

    uint64_t v9 = _LSPlistLookUpCompactedStringByIndex(v6);
  }

  uint64_t v7 = (NSString *)v9;
LABEL_9:

  if (!v7) {
    goto LABEL_14;
  }
LABEL_10:
  if (a2 && v7 != a1) {
    *a2 = 1;
  }
  return v7;
}

void sub_183E63020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPlistLookUpIndexOfCompactedString(NSString *a1)
{
  if (_LSPlistLookUpIndexOfCompactedString(NSString *)::once != -1) {
    dispatch_once(&_LSPlistLookUpIndexOfCompactedString(NSString *)::once, &__block_literal_global_49);
  }
  [(id)_LSPlistLookUpIndexOfCompactedString(NSString *)::indexes objectForKeyedSubscript:a1];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v3 = v2;
  if (v2) {
    uint64_t v4 = [v2 unsignedIntegerValue];
  }
  else {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v4;
}

void sub_183E630BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistGetCommonStrings(void)
{
  return (id)_LSPlistGetCommonStrings(void)::result;
}

id _LSPlistLookUpCompactedStringByIndex(unint64_t a1)
{
  if (_LSPlistLookUpCompactedStringByIndex(unsigned long)::once != -1) {
    dispatch_once(&_LSPlistLookUpCompactedStringByIndex(unsigned long)::once, &__block_literal_global_543);
  }
  if ([(id)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings count] <= a1)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    [(id)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings objectAtIndexedSubscript:a1];
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

uint64_t __LSRECORD_GETTER__<unsigned long long>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedLongLongValue];
  }

  else
  {
    _LSRecordLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      uint64_t v28 = v5;
      __int16 v29 = 2082;
      uint64_t v30 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  (uint8_t *)&v23,  0x2Au);
    }

    id v11 = v5;
    id v12 = v11;
    id v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      uint64_t v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    [MEMORY[0x189607968] numberWithUnsignedLongLong:v9];
    id v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }

  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_183E63404(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E63468LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E6346C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E63480(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_183E63570( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Unwind_Resume(a1);
}

void sub_183E635F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E63670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E636FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetCacheGUID()
{
  v2[3] = *MEMORY[0x1895F89C0];
  _LSDatabaseGetHeader(v1);
  return (id)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:v2];
}

__n128 _LSDatabaseGetHeader@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Header = CSStoreGetHeader();
  if (v13 != 160 || Header == 0)
  {
    _LSDatabaseGetLog();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_183E58000, v5, OS_LOG_TYPE_DEFAULT, "Failed to read DB header, generating new one", v12, 2u);
    }

    result.n128_u64[0] = 0LL;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }

  else
  {
    __int128 v6 = *(_OWORD *)(Header + 112);
    a1[6] = *(_OWORD *)(Header + 96);
    a1[7] = v6;
    __int128 v7 = *(_OWORD *)(Header + 144);
    a1[8] = *(_OWORD *)(Header + 128);
    a1[9] = v7;
    __int128 v8 = *(_OWORD *)(Header + 48);
    a1[2] = *(_OWORD *)(Header + 32);
    a1[3] = v8;
    __int128 v9 = *(_OWORD *)(Header + 80);
    a1[4] = *(_OWORD *)(Header + 64);
    a1[5] = v9;
    __n128 result = *(__n128 *)Header;
    __int128 v11 = *(_OWORD *)(Header + 16);
    *a1 = *(_OWORD *)Header;
    a1[1] = v11;
  }

  return result;
}

uint64_t _LSDatabaseGetSequenceNumber()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  _LSDatabaseGetHeader(v1);
  return v2;
}

void sub_183E6414C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL _LSDatabaseContextGetDetachProxyObjects(LaunchServices::DatabaseContext *a1)
{
  return *((_BYTE *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1) + 40) == 0;
}

void *LaunchServices::DatabaseContext::getPerThreadStateReference(LaunchServices::DatabaseContext *this)
{
  id v1 = pthread_getspecific(LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key);
  if (!v1)
  {
    id v1 = operator new(0x30uLL);
    void *v1 = 0LL;
    v1[1] = 0LL;
    *((_BYTE *)v1 + 16) = 0;
    v1[3] = 0LL;
    v1[4] = 0LL;
    *((_BYTE *)v1 + 40) = 0;
    pthread_setspecific(LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key, v1);
  }

  return v1;
}

void sub_183E644AC(_Unwind_Exception *exception_object)
{
}

void sub_183E647B8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void sub_183E64820(_Unwind_Exception *a1)
{
}

uint64_t __LSRECORD_GETTER__<LSBundleMoreFlags>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  unsigned __int16 v23 = 0;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    [CachedPropertyValue getBytes:&v23 length:2];
  }

  else
  {
    _LSRecordLog();
    __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id buf = 136446978;
      Name = sel_getName(a3);
      __int16 v26 = 2114;
      uint64_t v27 = objc_opt_class();
      __int16 v28 = 2048;
      __int16 v29 = v5;
      __int16 v30 = 2082;
      uint64_t v31 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v9,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  buf,  0x2Au);
    }

    BOOL v10 = v5;
    __int128 v11 = v10;
    int v13 = (char *)v10 + 16;
    uint64_t v12 = *((void *)v10 + 2);
    if ((*((_BYTE *)v10 + 31) & 0x40) == 0 && !v12) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v10, (const char *)a2);
    }
    if (v12)
    {
      id v14 = v10;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v16 = *((unsigned __int16 *)v14 + 14);
      uint64_t v17 = *((unsigned int *)v14 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      unsigned __int16 v23 = MethodImplementation(v14, a3, v13, v16, v17, Unit);
    }

    BOOL v19 = (objc_selector *)[objc_alloc(MEMORY[0x189603F48]) initWithBytes:&v23 length:2];
    LaunchServices::Record::setCachedPropertyValue(v11, a2, v19, v20);
  }

  os_unfair_recursive_lock_unlock();

  uint64_t v21 = v23;
  return v21;
}

void sub_183E64A7C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E64AE0LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E64AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E64AF8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned char>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedCharValue];
  }

  else
  {
    _LSRecordLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      __int16 v28 = v5;
      __int16 v29 = 2082;
      __int16 v30 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  (uint8_t *)&v23,  0x2Au);
    }

    __int128 v11 = v5;
    uint64_t v12 = v11;
    id v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      uint64_t v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    [MEMORY[0x189607968] numberWithUnsignedChar:v9];
    id v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }

  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_183E64D5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E64DC0LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E64DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E64DD8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_183E64F50(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned int>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedIntValue];
  }

  else
  {
    _LSRecordLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      __int16 v28 = v5;
      __int16 v29 = 2082;
      __int16 v30 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  (uint8_t *)&v23,  0x2Au);
    }

    __int128 v11 = v5;
    uint64_t v12 = v11;
    id v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      uint64_t v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    [MEMORY[0x189607968] numberWithUnsignedInt:v9];
    id v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }

  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_183E651BC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E65220LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E65224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E65238(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataGetModTime(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

void sub_183E6543C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E655CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Unwind_Resume(a1);
}

void sub_183E6578C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_183E6593C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetPreferredLaunchArchitecture(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = _LSBundleGet(v3, a2);
  id v5 = _LSBundleCopyArchitecturesValidOnCurrentSystem(v3, a2);
  __int128 v6 = v5;
  __int128 v7 = 0LL;
  if (v4 && v5)
  {
    if (-[__CFArray count](v5, "count"))
    {
      -[__CFArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", 0LL);
      __int128 v7 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      __int128 v7 = 0LL;
    }
  }

  return v7;
}

void sub_183E65A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFArrayRef _LSBundleCopyArchitecturesValidOnCurrentSystem(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = _LSBundleGet(v3, a2);
  if (v4)
  {
    id v5 = (void *)MEMORY[0x186E2A59C]();
    __int128 v6 = (const __CFArray *)_LSBundleCopyArchitectures_Common(v4);
    if (v6)
    {
      _LSGetCurrentSystemVersion(v17);
      int v7 = _LSGetCPUType();
      _LSPlistGet((uint64_t)v3, *(_DWORD *)(v4 + 128));
      char v8 = (NSData *)objc_claimAutoreleasedReturnValue();
      _LSPlistDataGetValueForKey(v8, (uint64_t)@"LSMinimumSystemVersionByArchitecture", 0LL);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9 && (_NSIsNSDictionary() & 1) == 0)
      {

        uint64_t v9 = 0LL;
      }

      MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, v6);
      CFRelease(v6);
      CFIndex Count = CFArrayGetCount(MutableCopy);
      if (Count >= 1)
      {
        for (unint64_t i = Count + 1; i > 1; --i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, i - 2);
          if (!v9
            || (_LSGetVersionForArchitecture((const __CFDictionary *)v9, ValueAtIndex, v16),
                v19[0] = v16[0],
                v19[1] = v16[1],
                v18[0] = v17[0],
                v18[1] = v17[1],
                _LSVersionNumberCompare(v19, v18) != 1))
          {
            if (!CFEqual(ValueAtIndex, @"ppc") && !CFEqual(ValueAtIndex, @"ppc64"))
            {
              switch(v7)
              {
                case 12:
                  if (CFEqual(ValueAtIndex, @"armv6")) {
                    continue;
                  }
                  int v14 = CFEqual(ValueAtIndex, @"armv7");
                  goto LABEL_25;
                case 16777228:
                  if (CFEqual(ValueAtIndex, @"armv6") || CFEqual(ValueAtIndex, @"armv7")) {
                    continue;
                  }
                  int v14 = CFEqual(ValueAtIndex, @"arm64");
LABEL_25:
                  if (v14) {
                    continue;
                  }
                  break;
                case 16777223:
                  if (CFEqual(ValueAtIndex, @"i386")) {
                    continue;
                  }
                  int v14 = CFEqual(ValueAtIndex, @"x86_64");
                  goto LABEL_25;
              }
            }
          }

          CFArrayRemoveValueAtIndex(MutableCopy, i - 2);
        }
      }
    }

    else
    {
      MutableCopy = 0LL;
    }

    objc_autoreleasePoolPop(v5);
  }

  else
  {
    MutableCopy = 0LL;
  }

  return MutableCopy;
}

void sub_183E65D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleCopyArchitectures_Common(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x189603FA8]);
  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x4812000000LL;
  uint64_t v17 = __Block_byref_object_copy__7;
  uint64_t v18 = __Block_byref_object_dispose__7;
  BOOL v19 = "";
  std::stringbuf::string_type __p = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  v13[2] = ___ZL33_LSBundleCopyArchitectures_CommonPK12LSBundleDataP7NSArrayIP8NSStringE_block_invoke;
  v13[3] = &unk_189D744F0;
  v13[4] = &v14;
  _LSEnumerateSliceMask(*(_WORD *)(a1 + 148), v13);
  uint64_t v3 = v15[6];
  uint64_t v4 = (uint64_t *)v15[7];
  unint64_t v5 = 126 - 2 * __clz(((uint64_t)v4 - v3) >> 3);
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>( v3,  v4,  v6,  1);
  int v7 = (int *)v15[6];
  for (unint64_t i = (int *)v15[7]; v7 != i; v7 += 2)
  {
    int v9 = *v7;
    if (*v7 > 16777222)
    {
      switch(v9)
      {
        case 16777223:
          BOOL v10 = @"x86_64";
          goto LABEL_20;
        case 16777234:
          BOOL v10 = @"ppc64";
          goto LABEL_20;
        case 16777228:
          BOOL v10 = @"arm64";
          goto LABEL_20;
      }
    }

    else
    {
      switch(v9)
      {
        case 7:
          BOOL v10 = @"i386";
          goto LABEL_20;
        case 12:
          unsigned int v11 = v7[1] - 6;
          if (v11 > 0xA || ((0x779u >> v11) & 1) == 0) {
            continue;
          }
          BOOL v10 = off_189D745B8[v11];
          goto LABEL_20;
        case 18:
          BOOL v10 = @"ppc";
LABEL_20:
          [v2 addObject:v10];
          break;
      }
    }
  }

  _Block_object_dispose(&v14, 8);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }

  return v2;
}

void sub_183E65F5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void _LSEnumerateSliceMask(unsigned __int16 a1, void *a2)
{
  uint64_t v3 = a2;
  char v6 = 0;
  uint64_t v4 = &_LSEnumerateSliceMask::flagsToTypes;
  do
  {
    while (((unsigned __int16)*v4 & a1) == 0)
    {
      v4 += 6;
    }

    v3[2](v3, *(void *)(v4 + 2), &v6);
    v4 += 6;
    if (v6) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v4 == (__int16 *)&xmmword_183FBF23C;
    }
  }

  while (!v5);
LABEL_10:
}

void sub_183E6601C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _LSGetCurrentSystemVersion@<D0>(_OWORD *a1@<X8>)
{
  if (_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once != -1) {
    dispatch_once( &_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::once,  &__block_literal_global_70);
  }
  double result = *(double *)&_LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  __int128 v3 = unk_18C49A9A8;
  *a1 = _LSGetCurrentSystemIOSSupportAndBuildVersions(LSVersionNumber *,LSVersionNumber *,__CFString const**,LSVersionNumber *,__CFString const**)::cachedSystemVersion;
  a1[1] = v3;
  return result;
}

uint64_t _LSGetCPUType()
{
  if (_LSGetCPUType::once != -1) {
    dispatch_once(&_LSGetCPUType::once, &__block_literal_global_35_0);
  }
  return _LSGetCPUType::type;
}

uint64_t _LSPlistCreateTransformed(void *a1, uint64_t a2, BOOL *a3)
{
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  char v18 = 0;
  char v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FC8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 3221225472LL;
  v11[2] = ___ZL25_LSPlistCreateTransformedP12NSDictionaryIP8NSStringP11objc_objectEPFS1_S1_PbES6__block_invoke;
  v11[3] = &unk_189D77AA0;
  uint64_t v13 = &v15;
  uint64_t v14 = a2;
  id v7 = v6;
  id v12 = v7;
  [a1 enumerateKeysAndObjectsUsingBlock:v11];
  uint64_t v8 = [v7 copy];

  if (a3)
  {
    BOOL v9 = *a3 || *((_BYTE *)v16 + 24) != 0;
    *a3 = v9;
  }

  _Block_object_dispose(&v15, 8);
  return v8;
}

void sub_183E661CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_183E663AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E664E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_183E665E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E66730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<unsigned long>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  BOOL v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    uint64_t v9 = [CachedPropertyValue unsignedLongValue];
  }

  else
  {
    _LSRecordLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      __int16 v28 = v5;
      __int16 v29 = 2082;
      __int16 v30 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  (uint8_t *)&v23,  0x2Au);
    }

    unsigned int v11 = v5;
    id v12 = v11;
    uint64_t v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      uint64_t v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    [MEMORY[0x189607968] numberWithUnsignedLong:v9];
    uint64_t v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }

  os_unfair_recursive_lock_unlock();

  return v9;
}

void sub_183E66A40(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E66AA4LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E66AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E66ABC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_183E66BF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183E66C58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E66D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E66E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E66FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E670E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E67438(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_183E676D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E677B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistGetValueForKey(_LSDatabase *a1, unsigned int a2, NSString *a3, _LSPlistHint *a4)
{
  char v6 = a3;
  _LSPlistGet((uint64_t)a1, a2);
  id v7 = (NSData *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetValueForKey(v7, (uint64_t)v6, 0LL);
  char v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_183E67828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL __LSRECORD_GETTER__<BOOL>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  BOOL v5 = a1;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    if ((void *)*MEMORY[0x189604DE8] == CachedPropertyValue)
    {
      LODWORD(v9) = 1;
    }

    else if ((void *)*MEMORY[0x189604DE0] == CachedPropertyValue)
    {
      LODWORD(v9) = 0;
    }

    else
    {
      LODWORD(v9) = [CachedPropertyValue BOOLValue];
    }
  }

  else
  {
    _LSRecordLog();
    BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 136446978;
      Name = sel_getName(a3);
      __int16 v25 = 2114;
      uint64_t v26 = objc_opt_class();
      __int16 v27 = 2048;
      __int16 v28 = v5;
      __int16 v29 = 2082;
      __int16 v30 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  (uint8_t *)&v23,  0x2Au);
    }

    unsigned int v11 = v5;
    id v12 = v11;
    uint64_t v14 = (char *)v11 + 16;
    uint64_t v13 = *((void *)v11 + 2);
    if ((*((_BYTE *)v11 + 31) & 0x40) == 0 && !v13) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v11, (const char *)a2);
    }
    if (v13)
    {
      uint64_t v15 = v11;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v17 = *((unsigned __int16 *)v15 + 14);
      uint64_t v18 = *((unsigned int *)v15 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      uint64_t v9 = MethodImplementation(v15, a3, v14, v17, v18, Unit);
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    [MEMORY[0x189607968] numberWithBool:v9];
    uint64_t v20 = (objc_selector *)objc_claimAutoreleasedReturnValue();
    LaunchServices::Record::setCachedPropertyValue(v12, a2, v20, v21);
  }

  os_unfair_recursive_lock_unlock();

  return (_DWORD)v9 != 0;
}

void sub_183E67ADC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E67B40LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E67B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E67B58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_183E67C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E67D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E67FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E68218( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

NSString *_LSPlistRestoreString(NSString *a1, BOOL *a2)
{
  NSUInteger v4 = -[NSString length](a1, "length");
  if (!a1 || !v4) {
    goto LABEL_14;
  }
  if (-[NSString characterAtIndex:](a1, "characterAtIndex:", 0LL) == 8)
  {
    -[NSString substringFromIndex:](a1, "substringFromIndex:", 1LL);
    BOOL v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
LABEL_14:
      BOOL v5 = a1;
      return v5;
    }
  }

  else
  {
    uint64_t v6 = _LSPlistLookUpIndexOfCompactedString(a1);
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_14;
    }
    unint64_t v7 = v6;
    _LSPlistGetCommonStrings();
    char v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7 >= [v8 count])
    {
      BOOL v5 = 0LL;
    }

    else
    {
      [v8 objectAtIndexedSubscript:v7];
      BOOL v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    }

    if (!v5) {
      goto LABEL_14;
    }
  }

  if (a2 && v5 != a1) {
    *a2 = 1;
  }
  return v5;
}

void sub_183E68338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E683C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E685AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E686A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_183E68788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E68818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E68944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E68AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_GETTER__<LSBundleBaseFlags>(void *a1, LSRecord *a2, const char *a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  BOOL v5 = a1;
  unsigned __int8 v23 = 0;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v5, a2, v6);
  if (v8)
  {
    [CachedPropertyValue getBytes:&v23 length:1];
  }

  else
  {
    _LSRecordLog();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id buf = 136446978;
      Name = sel_getName(a3);
      __int16 v26 = 2114;
      uint64_t v27 = objc_opt_class();
      __int16 v28 = 2048;
      __int16 v29 = v5;
      __int16 v30 = 2082;
      uint64_t v31 = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v9,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  buf,  0x2Au);
    }

    BOOL v10 = v5;
    unsigned int v11 = v10;
    uint64_t v13 = (char *)v10 + 16;
    uint64_t v12 = *((void *)v10 + 2);
    if ((*((_BYTE *)v10 + 31) & 0x40) == 0 && !v12) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v10, (const char *)a2);
    }
    if (v12)
    {
      uint64_t v14 = v10;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v16 = *((unsigned __int16 *)v14 + 14);
      uint64_t v17 = *((unsigned int *)v14 + 6);
      MethodImplementation = (uint64_t (*)(LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      unsigned __int8 v23 = MethodImplementation(v14, a3, v13, v16, v17, Unit);
    }

    BOOL v19 = (objc_selector *)[objc_alloc(MEMORY[0x189603F48]) initWithBytes:&v23 length:1];
    LaunchServices::Record::setCachedPropertyValue(v11, a2, v19, v20);
  }

  os_unfair_recursive_lock_unlock();

  uint64_t v21 = v23;
  return v21;
}

void sub_183E68D98(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E68DFCLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E68E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E68E14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __LSRECORD_GETTER__<LSVersionNumber>( void *a1@<X0>, LSRecord *a2@<X1>, const char *a3@<X2>, _OWORD *a4@<X8>)
{
  void (*MethodImplementation)(_BYTE *__return_ptr, LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t);
  __int128 v21;
  objc_selector *v22;
  objc_object *v23;
  _BYTE v24[32];
  __int16 v25;
  const char *Name;
  uint64_t v27;
  uint64_t v27 = *MEMORY[0x1895F89C0];
  unint64_t v7 = a1;
  *a4 = 0u;
  a4[1] = 0u;
  os_unfair_recursive_lock_lock_with_options();
  CachedPropertyValue = LaunchServices::Record::getCachedPropertyValue(v7, a2, v8);
  if (v10)
  {
    [CachedPropertyValue getBytes:a4 length:32];
  }

  else
  {
    _LSRecordLog();
    unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v24 = 136446978;
      *(void *)&v24[4] = sel_getName(a3);
      *(_WORD *)&v24[12] = 2114;
      *(void *)&v24[14] = objc_opt_class();
      *(_WORD *)&v24[22] = 2048;
      *(void *)&v24[24] = v7;
      __int16 v25 = 2082;
      Name = sel_getName((SEL)a2);
      _os_log_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_DEBUG,  "Invoking selector %{public}s on <%{public}@ %p> to get the value for property %{public}s",  v24,  0x2Au);
    }

    uint64_t v12 = v7;
    uint64_t v13 = v12;
    uint64_t v15 = (char *)v12 + 16;
    uint64_t v14 = *((void *)v12 + 2);
    if ((*((_BYTE *)v12 + 31) & 0x40) == 0 && !v14) {
      __LSRECORD_IS_CRASHING_DUE_TO_A_CALLER_BUG__((uint64_t)v12, (const char *)a2);
    }
    if (v14)
    {
      uint64_t v16 = v12;
      uint64_t Unit = CSStoreGetUnit();
      uint64_t v18 = *((unsigned __int16 *)v16 + 14);
      uint64_t v19 = *((unsigned int *)v16 + 6);
      MethodImplementation = (void (*)(_BYTE *__return_ptr, LaunchServices::Record *, const char *, char *, uint64_t, uint64_t, uint64_t))object_getMethodImplementation();
      MethodImplementation(v24, v16, a3, v15, v18, v19, Unit);
      uint64_t v21 = *(_OWORD *)&v24[16];
      *a4 = *(_OWORD *)v24;
      a4[1] = v21;
    }

    uint64_t v22 = (objc_selector *)[objc_alloc(MEMORY[0x189603F48]) initWithBytes:a4 length:32];
    LaunchServices::Record::setCachedPropertyValue(v13, a2, v22, v23);
  }

  os_unfair_recursive_lock_unlock();
}

void sub_183E690D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    os_unfair_recursive_lock_unlock();
    objc_exception_rethrow();
    JUMPOUT(0x183E69134LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183E69138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6914C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_183E692C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::LocalizedString::Get(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  id v2 = this;
  if (!v2)
  {
    [MEMORY[0x1896077D8] currentHandler];
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "static const LocalizedString *LaunchServices::LocalizedString::Get(_LSDatabase *__strong _Nonnull, _LSLocalizedStringID)");
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 handleFailureInFunction:v6, @"LSLocalizedString.mm", 154, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }

  uint64_t Unit = CSStoreGetUnit();

  return Unit;
}

void sub_183E693B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E69588( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183E69678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E697C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183E6993C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183E69A2C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id _LSPlistDataGetDictionary(void *a1, uint64_t a2)
{
  NSUInteger v4 = (void *)MEMORY[0x186E2A59C]();
  -[_LSPlistHint completeDictionary](a2);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    _LSPlistRestore(a1);
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[_LSPlistHint setCompleteDictionary:](a2, v5);
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_183E69AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistRestore(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v2 = v1;
    __int128 v3 = (void *)MEMORY[0x186E2A59C]();
    BOOL v9 = 0;
    _LSPlistGetSubdataForFCF(v2, &v9);
    NSUInteger v4 = (void *)objc_claimAutoreleasedReturnValue();

    [MEMORY[0x1896079E8] propertyListWithData:v4 options:0 format:0 error:0];
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5 && _NSIsNSDictionary())
    {
      if (v9) {
        id Transformed = (id)_LSPlistCreateTransformed(v5, (uint64_t)_LSPlistRestoreString, 0LL);
      }
      else {
        id Transformed = v5;
      }
      unint64_t v7 = Transformed;
    }

    else
    {
      unint64_t v7 = 0LL;
    }

    objc_autoreleasePoolPop(v3);
  }

  else
  {
    NSUInteger v4 = 0LL;
    unint64_t v7 = 0LL;
  }

  return v7;
}

void sub_183E69BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E69E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6A09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSPersistentIdentifierDataMake(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0LL;
  *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)(a4 + 16) = 0LL;
  *(_DWORD *)(a4 + 4) = a3;
  *(_DWORD *)(a4 + _Block_object_dispose(va, 8) = a2;
  _LSDatabaseGetCacheGUIDBytes(*a1, (unsigned __int8 *)(a4 + 12));
}

void _LSDatabaseGetCacheGUIDBytes(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  _LSDatabaseGetHeader(v3);
  uuid_copy(a2, v4);
}

void sub_183E6A308()
{
}

void sub_183E6A33C(_Unwind_Exception *a1)
{
}

void sub_183E6A564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6A88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6A97C(void *a1)
{
}

void sub_183E6A994(_Unwind_Exception *a1)
{
}

void sub_183E6AA00(_Unwind_Exception *a1)
{
}

id LaunchServices::LocalizedString::getAllUnsafeLocalizations( LaunchServices::LocalizedString *this, _LSDatabase *a2, NSString *a3, BOOL *a4, BOOL *a5)
{
  v56[1] = *MEMORY[0x1895F89C0];
  BOOL v9 = a2;
  id v44 = a3;
  uint64_t v45 = v9;
  if (v9)
  {
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  [MEMORY[0x1896077D8] currentHandler];
  __int16 v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "NSDictionary<NSString *,NSString *> *LaunchServices::LocalizedString::getAllUnsafeLocalizations(_LSDatabase *__stron g _Nonnull, NSString *__strong _Nullable, BOOL * _Nullable, BOOL * _Nullable) const");
  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue();
  [v40 handleFailureInFunction:v41, @"LSLocalizedString.mm", 308, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

  if (a4) {
LABEL_3:
  }
    *a4 = *((_BYTE *)this + 8) & 1;
LABEL_4:
  if (a5) {
    *a5 = (*((_BYTE *)this + 8) & 2) != 0;
  }
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    id v48 = (void *)_CSStringCopyCFString();
    if (v48)
    {
      if ([(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
      {
        if ((*((_BYTE *)this + 8) & 1) != 0) {
          uint64_t v21 = @"✴️";
        }
        else {
          uint64_t v21 = @"🔂";
        }
        [v48 stringByAppendingString:v21];
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        uint64_t v22 = v48;
      }

      BOOL v55 = @"LSDefaultLocalizedValue";
      v56[0] = v22;
      [MEMORY[0x189603F68] dictionaryWithObjects:v56 forKeys:&v55 count:1];
      unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_64;
    }

LABEL_28:
    unsigned int v11 = 0LL;
    goto LABEL_64;
  }

  if (!*(_DWORD *)this || !*((_DWORD *)this + 1)) {
    goto LABEL_28;
  }
  _LSDatabaseGetStringArray(v9);
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseGetStringArrayWithNullValues((uint64_t)v9, *((unsigned int *)this + 1), 0LL);
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = [v47 count];
  unsigned int v11 = 0LL;
  if (v47 && v43)
  {
    unint64_t v12 = v10;
    if (v10 != [v43 count]) {
      goto LABEL_62;
    }
    uint64_t v13 = (void *)MEMORY[0x186E2A59C]();
    objc_msgSend(MEMORY[0x189603FC8], "dictionaryWithCapacity:", objc_msgSend(v47, "count"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      if (v12)
      {
        char v15 = 0;
        uint64_t v16 = 0LL;
LABEL_15:
        uint64_t v17 = v16;
        do
        {
          [v47 objectAtIndexedSubscript:v17];
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
          [v43 pointerAtIndex:v17];
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v20 = v19;
          if (!v18 || !v19)
          {

            uint64_t v16 = v17 + 1;
            char v15 = 1;
            if (v12 - 1 != v17) {
              goto LABEL_15;
            }
            goto LABEL_32;
          }

          [v14 setObject:v19 forKeyedSubscript:v18];

          ++v17;
        }

        while (v12 != v17);
        if ((v15 & 1) == 0) {
          goto LABEL_41;
        }
LABEL_32:
        unsigned __int8 v23 = v44;
        if (v23
          || ([v14 objectForKeyedSubscript:@"LSDefaultLocalizedValue"],
              (unsigned __int8 v23 = (NSString *)objc_claimAutoreleasedReturnValue()) != 0LL))
        {
          uint64_t v24 = 0LL;
          if (v12 <= 1) {
            uint64_t v25 = 1LL;
          }
          else {
            uint64_t v25 = v12;
          }
          do
          {
            [v47 objectAtIndexedSubscript:v24];
            __int16 v26 = (void *)objc_claimAutoreleasedReturnValue();
            [v14 objectForKeyedSubscript:v26];
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v27) {
              [v14 setObject:v23 forKeyedSubscript:v26];
            }

            ++v24;
          }

          while (v25 != v24);
        }
      }

    goto LABEL_31;
  }

  NSUInteger v4 = 0LL;
LABEL_39:

  return v4;
}

          char v15 = 0LL;
          *a5 = v20;
          goto LABEL_30;
        }

        if (v9)
        {
          if (a5)
          {
            uint64_t v19 = __error();
            _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  *v19,  (uint64_t)"-[FSNode(ExtendedAttributes) extendedAttributeWithName:options:error:]",  3490LL,  0LL);
            *a5 = (id)objc_claimAutoreleasedReturnValue();
            return 0LL;
          }
        }

        else
        {
          [MEMORY[0x189603F48] data];
          char v15 = (id)objc_claimAutoreleasedReturnValue();
          if (v15) {
            return v15;
          }
          [MEMORY[0x1896077D8] currentHandler];
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
          [NSString stringWithUTF8String:"-[FSNode(ExtendedAttributes) extendedAttributeWithName:options:error:]"];
          unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue();
          [v22 handleFailureInFunction:v23 file:@"FSUtils.mm" lineNumber:3487 description:@"Failed to allocate empty NSData."];
        }
      }

      else if (a5)
      {
        __int16 v26 = *MEMORY[0x189607490];
        uint64_t v27 = @"Extended attribute name too long or invalid.";
        [MEMORY[0x189603F68] dictionaryWithObjects:&v27 forKeys:&v26 count:1];
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"-[FSNode(ExtendedAttributes) extendedAttributeWithName:options:error:]",  3460LL,  v18);
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
  }

  else if (a5)
  {
    uint64_t v24 = *MEMORY[0x189607490];
    uint64_t v25 = @"name";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"-[FSNode(ExtendedAttributes) extendedAttributeWithName:options:error:]",  3495LL,  v16);
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

  char v15 = 0LL;
  return v15;
}

    os_unfair_lock_unlock(&hrnLock);
    LOBYTE(v2) = isHRN != 0;
  }

  return (char)v2;
}

  if (v16) {
    CFRelease(v16);
  }
  return v17;
}

LABEL_41:
      v49 = (void *)[v14 copy];
    }

    else
    {
      v49 = 0LL;
    }

    objc_autoreleasePoolPop(v13);
    if (v49)
    {
      if ([(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
      {
        context = (void *)MEMORY[0x186E2A59C]();
        [v49 objectForKeyedSubscript:@"LSDefaultLocalizedValue"];
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v46 = this;
        [MEMORY[0x189603FC8] dictionary];
        unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue();
        __int128 v52 = 0u;
        __int128 v53 = 0u;
        __int128 v50 = 0u;
        __int128 v51 = 0u;
        id v29 = v47;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v50 objects:v54 count:16];
        if (v30)
        {
          uint64_t v31 = *(void *)v51;
          do
          {
            for (uint64_t i = 0LL; i != v30; ++i)
            {
              if (*(void *)v51 != v31) {
                objc_enumerationMutation(v29);
              }
              uint64_t v33 = *(void **)(*((void *)&v50 + 1) + 8 * i);
              if ([v33 isEqual:@"LSDefaultLocalizedValue"])
              {
                [v28 stringByAppendingString:@"*️⃣"];
                id v34 = (void *)objc_claimAutoreleasedReturnValue();
              }

              else
              {
                [v49 objectForKeyedSubscript:v33];
                id v35 = (void *)objc_claimAutoreleasedReturnValue();
                id v36 = v35;
                if (v35)
                {
                  if ((*((_BYTE *)v46 + 8) & 2) != 0) {
                    id v37 = @"🔂";
                  }
                  else {
                    id v37 = @"❇️";
                  }
                  uint64_t v38 = [v35 stringByAppendingString:v37];
                }

                else
                {
                  uint64_t v38 = [v28 stringByAppendingString:@"🔴"];
                }

                id v34 = (void *)v38;
              }

              [v11 setObject:v34 forKeyedSubscript:v33];
            }

            uint64_t v30 = [v29 countByEnumeratingWithState:&v50 objects:v54 count:16];
          }

          while (v30);
        }

        objc_autoreleasePoolPop(context);
      }

      else
      {
        unsigned int v11 = v49;
      }
    }

    else
    {
LABEL_62:
      unsigned int v11 = 0LL;
    }
  }

LABEL_64:
  return v11;
}

LABEL_42:
    uint64_t v18 = 0LL;
    goto LABEL_43;
  }

  uint64_t v18 = 1LL;
LABEL_43:
  return v18;
}

void sub_183E6B044( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetStringArrayWithNullValues(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  NSUInteger v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (a3) {
    *a3 = 0;
  }
  id v6 = v4;
  _CSArrayEnumerateAllValues();

  return v6;
}

void sub_183E6B210( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183E6B284( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E6B47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getBundleLocs(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  v9[1] = *MEMORY[0x1895F89C0];
  __int128 v3 = a2;
  NSUInteger v4 = v3;
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    uint64_t v6 = _CSStringCopyCFString();
    unint64_t v7 = (void *)v6;
    if (v6)
    {
      v9[0] = v6;
      [MEMORY[0x189603F18] arrayWithObjects:v9 count:1];
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      uint64_t v5 = 0LL;
    }
  }

  else
  {
    _LSDatabaseGetStringArray(v3);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_183E6B598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContextDestroy(void **a1)
{
  id v1 = *a1;
  *a1 = 0LL;

  if (_LSDatabaseGetNoServerLock::once != -1) {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_88);
  }
  uint64_t result = _LSDatabaseGetNoServerLock::result;
  if (_LSDatabaseGetNoServerLock::result) {
    return pthread_mutex_unlock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
  }
  return result;
}

void sub_183E6B8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id XNSArrayByMappingBlock(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  NSUInteger v4 = a2;
  uint64_t v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        v4[2](v4, *(void *)(*((void *)&v12 + 1) + 8 * v9));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v10, (void)v12);

        ++v9;
      }

      while (v7 != v9);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v7);
  }

  return v5;
}

void sub_183E6BA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6BBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id computeIdentityBookmark(LSApplicationRecord *a1)
{
  id v1 = a1;
  -[LSBundleRecord bundleIdentifier](v1, "bundleIdentifier");
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[LSBundleRecord URL](v1, "URL");

  return v2;
}

void sub_183E6BC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id computeIdentityString(LSApplicationRecord *a1, _LSPersonaWithAttributes *a2)
{
  id v3 = a1;
  NSUInteger v4 = a2;
  -[LSBundleRecord bundleIdentifier](v3, "bundleIdentifier");
  uint64_t v5 = (NSString *)objc_claimAutoreleasedReturnValue();
  -[LSBundleRecord URL](v3, "URL");
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  computeIdentityString(v5, (NSURL *)v4, v7);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_183E6BCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id computeIdentityString(NSString *a1, NSURL *a2, _LSPersonaWithAttributes *a3)
{
  NSUInteger v4 = a1;
  uint64_t v5 = a2;
  objc_msgSend(NSString, "stringWithFormat:", @"{v:%d,", 2);
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[_LSDatabase store]((uint64_t)v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = [v6 stringByAppendingFormat:@"p:%@, pt: %lu, ", v7, -[_LSPersonaWithAttributes personaType]((uint64_t)v5)];

    id v6 = (void *)v8;
  }

  if (v4)
  {
    id v22 = 0LL;
    [MEMORY[0x1896078D8] dataWithJSONObject:v4 options:4 error:&v22];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    id v10 = v22;
    if (v9)
    {
      unsigned int v11 = (__CFString *)[objc_alloc(NSString) initWithData:v9 encoding:4];
    }

    else
    {
      _LSDefaultLog();
      __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        computeIdentityString((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
      }

      unsigned int v11 = @"<ERROR>";
    }

    uint64_t v19 = [v6 stringByAppendingFormat:@"b:%@", v11];

    id v6 = (void *)v19;
  }

  else
  {
    id v10 = 0LL;
  }

  [v6 stringByAppendingString:@"}"];
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

void sub_183E6BEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6BFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6C0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6C37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6C4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6C5D4(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
  __break(1u);
}

void sub_183E6C5F8(_Unwind_Exception *a1)
{
}

void sub_183E6C9DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_183E6CBCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDNCBalanceBiDiControlCharacters(NSString *a1)
{
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v11 = 0LL;
    __int128 v12 = &v11;
    uint64_t v13 = 0x2020000000LL;
    uint64_t v14 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000LL;
    uint64_t v10 = 0LL;
    v6[0] = MEMORY[0x1895F87A8];
    v6[1] = 3221225472LL;
    v6[2] = ___ZL34_LSDNCBalanceBiDiControlCharactersP8NSString_block_invoke;
    v6[3] = &unk_189D76008;
    v6[4] = &v11;
    v6[5] = &v7;
    _LSDNCWithInlineBuffer(v1, v6);
    _LSDNCBalanceBiDiControlCharacterInString(8236, v2, v12[3]);
    id v3 = (NSString *)objc_claimAutoreleasedReturnValue();

    _LSDNCBalanceBiDiControlCharacterInString(8297, v3, v8[3]);
    NSUInteger v4 = (void *)objc_claimAutoreleasedReturnValue();

    _Block_object_dispose(&v7, 8);
    _Block_object_dispose(&v11, 8);
  }

  else
  {
    NSUInteger v4 = 0LL;
  }

  return v4;
}

void sub_183E6CCFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

void _LSDNCWithInlineBuffer(void *a1, void *a2)
{
  id v3 = a1;
  NSUInteger v4 = a2;
  uint64_t v5 = -[__CFString length](v3, "length");
  uint64_t v8 = v3;
  uint64_t v11 = 0LL;
  uint64_t v12 = v5;
  if (CFStringGetCharactersPtr(v3)) {
    CStringPtr = 0LL;
  }
  else {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v10 = CStringPtr;
  v4[2](v4, v7, v5);
}

void sub_183E6CDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *_LSDNCBalanceBiDiControlCharacterInString(__int16 a1, NSString *a2, uint64_t a3)
{
  __int16 v14 = a1;
  NSUInteger v4 = a2;
  uint64_t v5 = v4;
  id v6 = v4;
  if (a3)
  {
    uint64_t v7 = (void *)-[NSString mutableCopy](v4, "mutableCopy");
    id v6 = v5;
    if (v7)
    {
      if (a3 <= 0)
      {
        do
          [v7 appendCharacters:&v14 length:1];
        while (!__CFADD__(a3++, 1LL));
      }

      else
      {
        uint64_t v8 = (void *)[objc_alloc(NSString) initWithCharacters:&v14 length:1];
        uint64_t v9 = a3 + 1;
        do
        {
          uint64_t v11 = [v7 rangeOfString:v8 options:4];
          if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
            objc_msgSend(v7, "deleteCharactersInRange:", v11, v10);
          }
          --v9;
        }

        while (v9 > 1);
      }

      id v6 = (NSString *)[v7 copy];
    }
  }

  return v6;
}

void sub_183E6CED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *_LSDNCReplaceForbiddenCharacters(NSString *a1, char a2)
{
  id v3 = a1;
  _LSDNCGetForbiddenCharacters(a2);
  NSUInteger v4 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x3032000000LL;
  uint64_t v19 = __Block_byref_object_copy__16;
  uint64_t v20 = __Block_byref_object_dispose__16;
  id v21 = 0LL;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 3221225472LL;
  v12[2] = ___ZL32_LSDNCReplaceForbiddenCharactersP8NSStringj_block_invoke;
  v12[3] = &unk_189D75FA0;
  id v5 = v4;
  id v13 = v5;
  uint64_t v15 = &v16;
  id v6 = v3;
  __int16 v14 = v6;
  _LSDNCWithInlineBuffer(v6, v12);
  uint64_t v7 = (void *)v17[5];
  uint64_t v8 = v6;
  if (v7)
  {
    uint64_t v8 = v7;
  }

  uint64_t v9 = v14;
  uint64_t v10 = v8;

  _Block_object_dispose(&v16, 8);
  return v10;
}

void sub_183E6D028( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

id _LSDNCGetForbiddenCharacters(char a1)
{
  id v2 = &_LSDNCGetForbiddenCharacters::forbiddenWithNewlines;
  if ((a1 & 1) != 0) {
    id v2 = &_LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines;
  }
  return (id)*v2;
}

uint64_t _LSDNCCharacterSetContainsCharacterFromInlineBuffer( NSCharacterSet *a1, uint64_t a2, CFStringInlineBuffer *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  if (!-[NSCharacterSet characterIsMember:](v7, "characterIsMember:", a2))
  {
    if ((a2 & 0xF800 | 0x400) != 0xDC00)
    {
      uint64_t v8 = 0LL;
      goto LABEL_23;
    }

    if (a4 == 0x7FFFFFFFFFFFFFFFLL)
    {
      [MEMORY[0x1896077D8] currentHandler];
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSDNCCharacterSetContainsCharacterFromInlineBuffer(NSCharacterSet *__strong, unichar, CFStringInlineBuffer *, CFIndex)");
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      [v16 handleFailureInFunction:v17 file:@"LSDisplayNameConstructor.mm" lineNumber:1704 description:@"Insanely long string for display name"];
    }

    else if (a4 >= -1)
    {
      int64_t v9 = a4 + 1;
      CFIndex length = a3->rangeToBuffer.length;
      if (length > a4 + 1)
      {
        directUniCharBuffer = a3->directUniCharBuffer;
        if (directUniCharBuffer)
        {
          UniChar v12 = directUniCharBuffer[a3->rangeToBuffer.location + v9];
        }

        else
        {
          directCStringBuffer = a3->directCStringBuffer;
          if (directCStringBuffer)
          {
            UniChar v12 = directCStringBuffer[a3->rangeToBuffer.location + v9];
          }

          else
          {
            if (a3->bufferedRangeEnd <= v9 || (CFIndex bufferedRangeStart = a3->bufferedRangeStart, bufferedRangeStart > v9))
            {
              CFIndex v15 = a4 - 3;
              if (v15 + 64 < length) {
                CFIndex length = v15 + 64;
              }
              a3->CFIndex bufferedRangeStart = v15;
              a3->bufferedRangeEnd = length;
              v19.id location = a3->rangeToBuffer.location + v15;
              v19.CFIndex length = length - v15;
              CFStringGetCharacters(a3->theString, v19, a3->buffer);
              CFIndex bufferedRangeStart = a3->bufferedRangeStart;
            }

            UniChar v12 = a3->buffer[v9 - bufferedRangeStart];
          }
        }

        goto LABEL_22;
      }
    }

    UniChar v12 = 0;
LABEL_22:
    uint64_t v8 = -[NSCharacterSet longCharacterIsMember:]( v7,  "longCharacterIsMember:",  ((_DWORD)a2 << 10) + v12 - 56613888);
    goto LABEL_23;
  }

  uint64_t v8 = 1LL;
LABEL_23:

  return v8;
}

void sub_183E6D264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id postprocessLocalizedNameishStringFromStringRecord(LSBundleRecord *a1, NSString *a2)
{
  id v3 = a2;
  NSUInteger v4 = v3;
  if (!v3 || !-[NSString length](v3, "length"))
  {
    uint64_t v5 = -[LSBundleRecord _fallbackLocalizedName](a1, "_fallbackLocalizedName");

    NSUInteger v4 = (void *)v5;
  }

  return v4;
}

void sub_183E6D2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6D514(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

LABEL_20:
  return v14;
}

  return v10;
}

    uint64_t v8 = 0LL;
  }

          break;
        }
      }
    }
  }

  uint64_t v11 = 0LL;
LABEL_22:
  CFRelease(Mutable);
  if (a1)
  {
LABEL_23:
    if (!v11)
    {
      uint64_t v11 = 0LL;
      *a1 = v15;
    }
  }

      uint64_t result = CFStringCreateCopy(v6, v5);
      break;
    default:
      return 0LL;
  }

  return result;
}

  objc_autoreleasePoolPop(v4);

  return v5;
}

    goto LABEL_21;
  }

  unsigned __int8 v23 = *MEMORY[0x189607490];
  uint64_t v24 = @"No path in container";
  [MEMORY[0x189603F68] dictionaryWithObjects:&v24 forKeys:&v23 count:1];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  96LL,  (uint64_t)"-[LSServerOpenStagingIOPersonality stagingDirectoryInfoForPersonaUniqueString:error:]",  158LL,  v10);
  __int16 v14 = (id)objc_claimAutoreleasedReturnValue();
LABEL_21:

  if (a5 && !retstr->var1) {
    *a5 = v14;
  }

  return result;
}
}
    }
  }

  uint64_t v16 = (id)v24[5];
  _Block_object_dispose(&v23, 8);

  return (_LSQueryResultWithPropertyList *)v16;
}

  return v20;
}

  return a1;
}

void sub_183E6DA8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6DBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSShouldFetchContainersFromContainermanagerForPersona(void *a1, int a2, BOOL *a3)
{
  v18[1] = *MEMORY[0x1895F89C0];
  id v5 = a1;
  BOOL v6 = 0;
  if ([v5 count] == 1 && (a2 & 1) == 0)
  {
    [v5 firstObject];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = -[_LSPersonaWithAttributes personaType]((uint64_t)v7);

    BOOL v6 = (unint64_t)(v8 - 3) < 0xFFFFFFFFFFFFFFFELL;
  }

  if ((unint64_t)[v5 count] <= 1 && !a2)
  {
    int64_t v9 = 0LL;
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  -[objc_class sharedManager](getUMUserManagerClass(), "sharedManager");
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  [v10 currentPersona];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2
    && (([v11 isDefaultPersona] & 1) != 0 || objc_msgSend(v11, "isSystemPersona"))
    && [v5 count] == 1)
  {
    _LSDefaultLog();
    UniChar v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      _LSShouldFetchContainersFromContainermanagerForPersona_cold_2(v12);
    }

    if (_os_feature_enabled_impl())
    {
      _LSDefaultLog();
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
        _LSShouldFetchContainersFromContainermanagerForPersona_cold_1(v13);
      }

      __int16 v14 = (void *)*MEMORY[0x189607670];
      uint64_t v17 = *MEMORY[0x189607490];
      v18[0] = @"Unable to find this application extension record in the Launch Services database.";
      [MEMORY[0x189603F68] dictionaryWithObjects:v18 forKeys:&v17 count:1];
      CFIndex v15 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl(v14, -50LL, (uint64_t)"_LSShouldFetchContainersFromContainermanagerForPersona", 311LL, v15);
      int64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      int64_t v9 = 0LL;
    }

    BOOL v6 = 0;
  }

  else
  {
    int64_t v9 = 0LL;
    BOOL v6 = 1;
  }

  if (a3) {
LABEL_20:
  }
    *a3 = v6;
LABEL_21:

  return v9;
}

id _LSLazyLoadObjectWithLock(id *a1, os_unfair_lock_s *a2, void *a3)
{
  id v5 = a3;
  os_unfair_lock_lock(a2);
  id v6 = *a1;
  if (!v6)
  {
    v5[2](v5);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v7 = *a1;
    *a1 = v6;
  }

  os_unfair_lock_unlock(a2);

  return v6;
}

void sub_183E6E2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSIsNewsBundleIdentifier(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1) {
    BOOL v3 = [v1 caseInsensitiveCompare:@"com.apple.news"] == 0;
  }
  else {
    BOOL v3 = 0LL;
  }

  return v3;
}

void sub_183E6E5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E6E70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetDMFPolicy(LaunchServices::DMFSupport *a1, NSString *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v3 = v2;
  if (v2) {
    uint64_t v4 = [v2 integerValue];
  }
  else {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_183E6EC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::DMFSupport::getCachedPolicy(LaunchServices::DMFSupport *this, NSString *a2)
{
  id v2 = this;
  id v3 = LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)1);
  if (v2)
  {
    os_unfair_lock_lock(&LaunchServices::DMFSupport::allPoliciesLock);
    [(id)LaunchServices::DMFSupport::allPolicies objectForKeyedSubscript:v2];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    os_unfair_lock_unlock(&LaunchServices::DMFSupport::allPoliciesLock);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_183E6EC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::DMFSupport::getMonitor(LaunchServices::DMFSupport *this)
{
  if ((_DWORD)this)
  {
    if (LaunchServices::DMFSupport::getMonitor(BOOL)::once != -1) {
      dispatch_once(&LaunchServices::DMFSupport::getMonitor(BOOL)::once, &__block_literal_global_12);
    }
    id v1 = &LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor;
  }

  else
  {
    if (LaunchServices::DMFSupport::getMonitor(BOOL)::once != -1) {
      dispatch_once(&LaunchServices::DMFSupport::getMonitor(BOOL)::once, &__block_literal_global_15);
    }
    id v1 = &LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor;
  }

  return (id)*v1;
}

void sub_183E6F028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSCopyRationalizedEnvironmentVariablesDict(void *a1)
{
  id v1 = a1;
  if (!v1) {
    goto LABEL_3;
  }
  id v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FC8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  v5[2] = ___LSCopyRationalizedEnvironmentVariablesDict_block_invoke;
  v5[3] = &unk_189D74F28;
  id v3 = v2;
  id v6 = v3;
  [v1 enumerateKeysAndObjectsUsingBlock:v5];

  if (!v3) {
LABEL_3:
  }
    id v3 = (id)MEMORY[0x189604A60];

  return v3;
}

void sub_183E6F424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table( uint64_t a1)
{
  id v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__deallocate_node( uint64_t a1, id *a2)
{
  if (a2)
  {
    id v2 = a2;
    do
    {
      id v3 = (id *)*v2;

      operator delete(v2);
      id v2 = v3;
    }

    while (v3);
  }

void *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>( void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69LL * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1LL);
  }

  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0LL;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }

      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }

        else
        {
          v10 &= *(void *)&v2 - 1LL;
        }

        if (v10 != v7) {
          return 0LL;
        }
      }

      uint64_t result = (void *)*result;
    }

    while (result);
  }

  return result;
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *&,objc_object * const {__strong}&>( uint64_t a1, void *a2, void *a3, id *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69LL * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69LL * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }

    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }

    id v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }

          else
          {
            v15 &= v11 - 1;
          }

          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }

  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v10;
  i[2] = *a3;
  i[3] = *a4;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_38:
    *uint64_t v24 = i;
    goto LABEL_39;
  }

  *uint64_t i = *v16;
  *uint64_t v16 = i;
  *(void *)(v23 + 8 * v4) = v16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }

    else
    {
      v25 &= v11 - 1;
    }

    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }

void sub_183E6F974(_Unwind_Exception *a1)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__erase_unique<objc_selector *>( void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>( a1,  a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::erase( a1,  result);
    return (uint64_t *)1;
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::erase( void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove( a1,  a2,  (uint64_t)&__p);
  unint64_t v3 = (id *)__p;
  std::stringbuf::string_type __p = 0LL;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }

  return v2;
}

void *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove@<X0>( void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  char v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    char v6 = (void *)*v6;
  }

  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }

  else
  {
    v8 &= *(void *)&v3 - 1LL;
  }

  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }

    else
    {
      v9 &= *(void *)&v3 - 1LL;
    }

    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0LL;
  }

  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }

    else
    {
      v11 &= *(void *)&v3 - 1LL;
    }

    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }

  *unint64_t v7 = v10;
  *a2 = 0LL;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + _Block_object_dispose((const void *)(v9 - 64), 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,objc_selector *,decltype(nullptr)>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  __int16 v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0LL;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }

  *uint64_t i = *v14;
  *__int16 v14 = i;
  *(void *)(v21 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }

    else
    {
      v23 &= v9 - 1;
    }

    size_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }

void sub_183E6FDAC(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,objc_object * {__strong}>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,objc_object * {__strong}>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector * const,objc_object * {__strong}> const&>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  __int16 v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  float v15 = (void *)a3[1];
  i[2] = *a3;
  i[3] = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_38:
    *unint64_t v23 = i;
    goto LABEL_39;
  }

  *uint64_t i = *v14;
  *__int16 v14 = i;
  *(void *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }

    else
    {
      v24 &= v9 - 1;
    }

    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }

void sub_183E70030(_Unwind_Exception *a1)
{
}

LABEL_34:
    _Block_object_dispose(&v41, 8);
LABEL_35:
    _Block_object_dispose(&v49, 8);

LABEL_36:
    if (CurrentContext && v57) {
      _LSContextDestroy(CurrentContext);
    }
    uint64_t v32 = v56;
    CurrentContext = 0LL;
    BOOL v56 = 0LL;

    __int128 v57 = 0;
    uint64_t v33 = v58;
    __int128 v58 = 0LL;

    goto LABEL_40;
  }

  unint64_t v20 = _LSGetPIDFromToken(a3);
  if (v20 == getpid())
  {
    v39[0] = MEMORY[0x1895F87A8];
    v39[1] = 3221225472LL;
    _OWORD v39[2] = __75__LSBundleRecord__bundleRecordForAuditToken_checkNSBundleMainBundle_error___block_invoke_3;
    v39[3] = &unk_189D74830;
    v39[4] = &v59;
    _LSRetryForConnectionInterrupted(v39);
    size_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = v21;
    if (v60[5])
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        [(id)v60[5] extensionPointRecord];
        unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
        +[LSExtensionPointRecord setExtensionPointRecordForCurrentProcess:]( &OBJC_CLASS___LSExtensionPointRecord,  "setExtensionPointRecordForCurrentProcess:",  v23);
      }
    }

    else if (a5)
    {
      *a5 = v21;
    }
  }

  else if (a5)
  {
    int v66 = *MEMORY[0x189607490];
    uint64_t v67 = @"unknown entitlement";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v67 forKeys:&v66 count:1];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -54LL,  (uint64_t)"+[LSBundleRecord _bundleRecordForAuditToken:checkNSBundleMainBundle:error:]",  407LL,  v27);
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

          DynamicIdentifierForTag = 0LL;
          goto LABEL_35;
        }

        uint64_t v22 = 0LL;
      }

      unint64_t v23 = 0LL;
      goto LABEL_34;
    }

    if (LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::once != -1) {
      dispatch_once( &LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::once,  &__block_literal_global_73);
    }
    objc_msgSend( (id)LaunchServices::TypeEvaluation::resolveBaseType(LaunchServices::TypeEvaluation::State &,NSError * {__autoreleasing}*)::posixUTIs,  "objectForKeyedSubscript:",  v63,  *(void *)v57);
    __int128 v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (v53)
    {
      uint64_t v54 = _UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, v53, &TypeDirectory);
      if (!a3 || v54) {
        goto LABEL_117;
      }
      v71[0] = *(CFTypeRef *)MEMORY[0x189607490];
      v71[1] = v52;
      uint64_t v64 = @"File system object has an unknown POSIX type.";
      id v65 = (uint64_t)v63;
      [MEMORY[0x189603F68] dictionaryWithObjects:&v64 forKeys:v71 count:2];
      BOOL v55 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10815LL, (uint64_t)"resolveBaseType", 366LL, v55);
      BOOL v56 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      if (!a3)
      {
LABEL_117:

        goto LABEL_118;
      }

      v69[0] = *MEMORY[0x189607490];
      v69[1] = v52;
      v70[0] = @"File system object has an unknown POSIX type.";
      v70[1] = v63;
      [MEMORY[0x189603F68] dictionaryWithObjects:v70 forKeys:v69 count:2];
      BOOL v55 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10815LL, (uint64_t)"resolveBaseType", 371LL, v55);
      BOOL v56 = (void *)objc_claimAutoreleasedReturnValue();
    }

    *a3 = v56;

    goto LABEL_117;
  }

LABEL_40:
  id v34 = (void *)v60[5];
  if (v34 && !v34[4])
  {
    id v35 = operator new(0x20uLL);
    id v36 = *(_OWORD *)&a3->var0[4];
    *id v35 = *(_OWORD *)a3->var0;
    v35[1] = v36;
    v34[4] = v35;
    id v34 = (void *)v60[5];
  }

  id v37 = v34;
  _Block_object_dispose(&v59, 8);

  return v37;
}

LABEL_41:
      if (BYTE8(v51)) {
        LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo((LaunchServices::OpenStaging::StagingDirectoryInfo *)buf);
      }

      if (v20 == ++v22)
      {
        id v35 = [v39 countByEnumeratingWithState:&v45 objects:v49 count:16];
        unint64_t v20 = v35;
        if (!v35) {
          goto LABEL_49;
        }
        goto LABEL_25;
      }
    }

    uint64_t v32 = 0LL;
    *(_OWORD *)id buf = 0u;
    __int128 v51 = 0u;
    goto LABEL_38;
  }

  _LSDefaultLog();
  uint8x8_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  unint64_t v6 = v5;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    -[LSOpenStagingDirectoryManager _locked_updatePersonaStagingDirectories].cold.1();
    unint64_t v6 = v5;
  }

LABEL_41:
  if (v21) {
    id v35 = 1;
  }
  else {
    id v35 = v25;
  }
  if ((v35 & 1) == 0)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10814LL, (uint64_t)"_LSIsRequestValid", 740LL, 0LL);
    size_t v21 = (id)objc_claimAutoreleasedReturnValue();
  }

  if ((v25 & 1) != 0)
  {
    unint64_t v23 = 1;
    goto LABEL_48;
  }

  id v36 = v21;
  unint64_t v23 = 0;
  size_t v21 = v36;
LABEL_50:

  id v37 = v55;
  uint8x8_t v12 = v36;

  if (v23)
  {
    uint64_t v38 = *(void **)(a1 + 40);
    uint64_t v39 = MEMORY[0x1895F87A8];
    __int16 v40 = *(void **)(a1 + 56);
    v60[0] = MEMORY[0x1895F87A8];
    v60[1] = 3321888768LL;
    BOOL v61 = ___LSServer_PerformOpenOperation_block_invoke_2;
    id v62 = &unk_189D77890;
    v70 = *(id *)(a1 + 96);
    v63 = *(id *)(a1 + 40);
    uint64_t v64 = *(id *)(a1 + 64);
    __int128 v41 = v37;
    id v65 = v41;
    v73 = v59 != 0LL;
    int v66 = *(id *)(a1 + 72);
    uint64_t v67 = *(id *)(a1 + 80);
    v71 = v58;
    v72 = 1;
    uint64_t v68 = *(id *)(a1 + 88);
    id v69 = *(id *)(a1 + 56);
    __int128 v42 = v38;
    uint64_t v43 = v71;
    id v44 = v40;
    uint64_t v45 = v60;
    uint64_t v46 = v45;
    __int128 v59 = v41;
    if (v41)
    {
      ((void (*)(void *, void))v61)(v45, 0LL);
LABEL_67:

      if (v72) {
      goto LABEL_70;
      }
    }

    id v48 = objc_opt_class();
    v49 = [v43 objectForKey:@"NoOverrides"];
    __int128 v50 = (void *)v49;
    if (v48 && v49)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {

        __int128 v50 = 0LL;
        goto LABEL_65;
      }
    }

    else if (!v49)
    {
      goto LABEL_65;
    }

    if (objc_msgSend(v50, "BOOLValue", v52))
    {
      ((void (*)(void *, void))v61)(v46, 0LL);
LABEL_66:

      goto LABEL_67;
    }

void sub_183E709CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, id a42)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a37, 8);

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v43 - 256));
  _Block_object_dispose((const void *)(v43 - 224), 8);

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseContextGetCurrentContext(LaunchServices::DatabaseContext *a1)
{
  return *LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
}

uint64_t LaunchServices::Database::Context::_get( LaunchServices::Database::Context *this, _LSDServiceDomain *a2, uint64_t a3)
{
  uint8x8_t v5 = a2;
  uint64_t v6 = *(void *)this;
  if (!*(void *)this)
  {
    if (*((void *)this + 3))
    {
      uint64_t v6 = 0LL;
    }

    else
    {
      unint64_t v7 = (void *)MEMORY[0x186E2A59C]();
      id v12 = 0LL;
      int v8 = _LSContextInitWithOptions((char *)this + 8, v5, a3, &v12);
      id v9 = v12;
      id v10 = v12;
      if (v8)
      {
        *(void *)this = (char *)this + 8;
        *((_BYTE *)this + 16) = 1;
      }

      else
      {
        objc_storeStrong((id *)this + 3, v9);
      }

      objc_autoreleasePoolPop(v7);
      uint64_t v6 = *(void *)this;
    }
  }

  return v6;
}

void sub_183E70B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E70C20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t _LSCopyBundleURLForAuditToken(_OWORD *a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  if (a2 != 1) {
    goto LABEL_6;
  }
  if ([(id)__LSDefaultsGetSharedInstance() isServer]) {
    goto LABEL_6;
  }
  pid_t v3 = getpid();
  pid_t pidp = 0;
  __int128 v4 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0LL, 0LL, 0LL, 0LL, 0LL, &pidp, 0LL, 0LL);
  if (v3 != pidp || (_LSGetMainBundleURL(), (uint64_t v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_6:
    CFURLRef v6 = _LSCopyExecutableURLForAuditToken();
    if (v6)
    {
      CFURLRef v7 = v6;
      int v8 = (const __CFURL *)_CFBundleCopyBundleURLForExecutableURL();
      id v9 = v8;
      if (v8)
      {
        id v10 = CFURLCopyPathExtension(v8);
        unint64_t v11 = v10;
        if (v10)
        {
          if (CFStringGetLength(v10) <= 0)
          {
            CFRelease(v11);
          }

          else
          {
            uint64_t v5 = (uint64_t)CFRetain(v9);
            CFRelease(v11);
            if (v5) {
              goto LABEL_15;
            }
          }
        }
      }

      uint64_t v5 = (uint64_t)CFRetain(v7);
      if (!v9)
      {
LABEL_16:
        CFRelease(v7);
        return v5;
      }

LABEL_15:
      CFRelease(v9);
      goto LABEL_16;
    }

    return 0LL;
  }

  return v5;
}

    id v10 = 0LL;
    unint64_t v11 = 0LL;
    goto LABEL_16;
  }

  __int128 v4 = operator new(0x400uLL);
  bzero(v4, 0x400uLL);
  uint64_t v5 = a1;
  CFURLRef v6 = realpath_DARWIN_EXTSN((const char *)[v5 UTF8String], (char *)v4);
  if (!v6)
  {
    if (a2)
    {
      [MEMORY[0x189607870] errorWithDomain:*MEMORY[0x189607688] code:*__error() userInfo:0];
      id v9 = (void *)objc_claimAutoreleasedReturnValue();
      operator delete(v4);
      goto LABEL_8;
    }

    operator delete(v4);
    goto LABEL_15;
  }

  CFURLRef v7 = v5;
  if (!strcmp(v6, (const char *)[v7 UTF8String]))
  {
    int v8 = v7;
  }

  else
  {
    [NSString stringWithUTF8String:v6];
    int v8 = (id)objc_claimAutoreleasedReturnValue();
  }

  id v10 = v8;
  operator delete(v4);
  id v9 = 0LL;
  unint64_t v11 = 0LL;
  if (a2) {
    goto LABEL_13;
  }
LABEL_16:

  return v10;
}

  return v12;
}

  return v9;
}

  RegTime = _LSBundleDataGetRegTime(a2);
  unint64_t v11 = _LSBundleDataGetRegTime(a3);
  if (RegTime < v11) {
    goto LABEL_16;
  }
  if (RegTime <= v11) {
    int v8 = 0LL;
  }
  else {
    int v8 = -1LL;
  }
LABEL_20:

  return v8;
}

  uint64_t v22 = *v13;
  if (*v13)
  {
    unint64_t v23 = v60;
    uint64_t v64 = 0LL;
    unint64_t v24 = _LSSchemaConfigureTable(v22, (uint64_t)@"DB Header", (_DWORD *)v14 + 4, &v64);
    unint64_t v25 = v64;
    if (!v24)
    {
LABEL_37:
      id v36 = v25;
      goto LABEL_44;
    }

    LODWORD(v63) = 0;
    uint64_t Header = (unsigned int *)CSStoreGetHeader();
    uint64_t v27 = Header;
    if (!Header)
    {
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10817LL,  (uint64_t)"_LSSchemaConfigureForStore",  507LL,  &unk_189DA8410);
      id v36 = (id)objc_claimAutoreleasedReturnValue();
LABEL_43:

      goto LABEL_44;
    }

    if ((_DWORD)v63 == 160)
    {
      __int16 v28 = *Header;
      if (v28 != [(id)__LSDefaultsGetSharedInstance() currentSchemaVersion])
      {
        uint64_t v67 = @"WrongSchemaVersion";
        [MEMORY[0x189607968] numberWithUnsignedInt:*v27];
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v68 = @"CurrentSchemaVersion";
        location[0] = v49;
        objc_msgSend( MEMORY[0x189607968],  "numberWithUnsignedInt:",  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "currentSchemaVersion"));
        __int128 v50 = (void *)objc_claimAutoreleasedReturnValue();
        location[1] = v50;
        [MEMORY[0x189603F68] dictionaryWithObjects:location forKeys:&v67 count:2];
        __int128 v52 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10817LL, (uint64_t)"_LSSchemaConfigureForStore", 487LL, v52);
        id v36 = (id)objc_claimAutoreleasedReturnValue();

        unint64_t v25 = v52;
        goto LABEL_42;
      }

      if (v27[1] == 160)
      {
        id v29 = 0LL;
        while (1)
        {
          uint64_t v30 = *(uint64_t *)((char *)&kLSTableInfo + v29);
          uint64_t v31 = (_DWORD *)(*(char **)((char *)&kLSTableInfo + v29 + 8) + (void)(v14 + 2));
          v63 = v25;
          uint64_t v32 = _LSSchemaConfigureTable(v22, v30, v31, &v63);
          uint64_t v33 = v63;

          unint64_t v25 = v33;
          if (!v32) {
            goto LABEL_37;
          }
          v29 += 16LL;
          if (v29 == 192)
          {
            id v34 = CSBindableKeyMapInit();
            id v62 = v33;
            id v35 = _LSGetNSErrorFromOSStatusImpl(v34, &v62, (uint64_t)"_LSSchemaConfigureForStore", 524LL);
            id v36 = v62;

            if (v35)
            {
              id v37 = 0LL;
              uint64_t v38 = v14 + 17;
              uint64_t v39 = &byte_189D74FA8;
              BOOL v56 = (void *)*MEMORY[0x189607670];
              __int16 v40 = v36;
              do
              {
                BOOL v61 = v40;
                __int128 v41 = *((void *)v39 - 1);
                if (!v41 || (strlen(*((const char **)v39 - 1)), _CSGetStringForCharacters()))
                {
                  uint64_t v45 = CSStringBindingStoreInit();
                  id v44 = _LSGetNSErrorFromOSStatusImpl(v45, &v61, (uint64_t)"_LSSchemaConfigureBindingMap", 452LL);
                }

                else
                {
                  uint64_t v67 = @"BindingClassName";
                  [NSString stringWithUTF8String:v41];
                  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue();
                  location[0] = v42;
                  [MEMORY[0x189603F68] dictionaryWithObjects:location forKeys:&v67 count:1];
                  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue();
                  _LSMakeNSErrorImpl(v56, -10817LL, (uint64_t)"_LSSchemaConfigureBindingMap", 447LL, v43);
                  BOOL v61 = (id)objc_claimAutoreleasedReturnValue();

                  id v44 = 0;
                }

                id v36 = v61;

                uint64_t v47 = v37++ < 0xD && v44;
                v39 += 32;
                v38 += 26;
                __int16 v40 = v36;
              }

              while (v47);
              if (v44)
              {
                id v48 = 1;
                goto LABEL_45;
              }
            }

            goto LABEL_44;
          }
        }
      }

      uint64_t v67 = @"WrongHeaderLength";
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v68 = @"ExpectedHeaderLength";
      location[0] = v49;
      location[1] = &unk_189DA80C8;
      [MEMORY[0x189603F68] dictionaryWithObjects:location forKeys:&v67 count:2];
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue();
      __int128 v51 = _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10817LL, (uint64_t)"_LSSchemaConfigureForStore", 491LL, v50);
    }

    else
    {
      uint64_t v67 = @"WrongHeaderLength";
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v68 = @"ExpectedHeaderLength";
      location[0] = v49;
      location[1] = &unk_189DA80C8;
      [MEMORY[0x189603F68] dictionaryWithObjects:location forKeys:&v67 count:2];
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue();
      __int128 v51 = _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10817LL, (uint64_t)"_LSSchemaConfigureForStore", 483LL, v50);
    }

    id v36 = (id)v51;
LABEL_42:

    unint64_t v25 = v49;
    goto LABEL_43;
  }

  _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSSchemaConfigureForStore", 468LL, 0LL);
  id v36 = (id)objc_claimAutoreleasedReturnValue();
LABEL_44:
  id v36 = v36;
  id v48 = 0;
  unint64_t v23 = v36;
LABEL_45:

  objc_storeStrong(&v60, v23);
  if ((v48 & 1) != 0)
  {
    if (v14)
    {
      -[_LSDatabase setAccessContext:](v14, cf);
      _LSDatabaseGetLog();
      __int128 v53 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        _LSDatabaseGetHeader(location);
        _LSDatabaseCreateWithAccessContext_cold_1((uint64_t)location, (uint64_t)&v67, v53);
      }

      goto LABEL_55;
    }
  }

  else
  {
    _LSDatabaseGetLog();
    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateWithAccessContext_cold_2();
    }
  }

  [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
  BOOL v18 = (void *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseDeleteRecoveryFile(v18);

  objc_autoreleasePoolPop(v6);
  if (v11)
  {
    if (a2) {
      *a2 = v23;
    }
  }

  else if (a3)
  {
    *a3 = v12;
  }

  return v11;
}

  return v21;
}

    CFURLRef v7 = -[LSSliceInfo initWithType:subtype:](objc_alloc(&OBJC_CLASS___LSSliceInfo), "initWithType:subtype:", a2, a3);
    [v5 addObject:v7];

    goto LABEL_16;
  }

  if ((_DWORD)a2 == 7) {
    goto LABEL_15;
  }
  if ((_DWORD)a2 != 12)
  {
    if ((_DWORD)a2 != 18) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  _LSDefaultLog();
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = 134217984;
    id v10 = (int)a3;
    _os_log_impl( &dword_183E58000,  v8,  OS_LOG_TYPE_DEFAULT,  "LaunchServices: ARM CPU subtype %lu not recognized",  (uint8_t *)&v9,  0xCu);
  }

LABEL_16:
}

  if (a3 && (v9 & 1) == 0) {
    *a3 = v14;
  }

  return v9;
}

  CFAllocatorDeallocate(a1, v6);
  CFAllocatorDeallocate(a1, v7);
  return Mutable;
}

  return isKindOfClass & 1;
}

void sub_183E70D60(_Unwind_Exception *a1)
{
}

CFURLRef _LSCopyExecutableURLForAuditToken()
{
  unsigned __int8 v0 = (_OWORD *)MEMORY[0x1895F8858]();
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (!v0) {
    return 0LL;
  }
  __int128 v1 = v0[1];
  *(_OWORD *)v6.val = *v0;
  *(_OWORD *)&v6.val[4] = v1;
  if (proc_pidpath_audittoken(&v6, buffer, 0x1000u) < 1) {
    return 0LL;
  }
  uint64_t v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  pid_t v3 = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x189604DB0], buffer);
  if (!v3) {
    return 0LL;
  }
  CFURLRef v4 = CFURLCreateWithFileSystemPath(v2, v3, kCFURLPOSIXPathStyle, 0);
  CFRelease(v3);
  return v4;
}

void sub_183E70E7C(_Unwind_Exception *a1)
{
}

uint64_t _LSGetBundleClassForNode(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isVolume] & 1) == 0
    && (([v3 isDirectory] & 1) != 0 || (objc_msgSend(v3, "isResolvable") & 1) == 0))
  {
    id v28 = 0LL;
    [v3 extensionWithError:&v28];
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    id v6 = v28;
    CFURLRef v7 = v6;
    uint64_t v8 = -[__CFString length](v5, "length");
    uint64_t v9 = v8;
    if (!v8)
    {
LABEL_31:
      int v17 = [v3 hasPackageBit] ^ 1;
      if (v9) {
        LOBYTE(v17) = 0;
      }
      if ((v17 & 1) == 0)
      {
LABEL_42:
        if ([v3 getHFSType:v20 creator:0 error:0])
        {
          uint64_t v4 = _LSGetBundleClassForHFSType(v20[0]);
LABEL_38:

          goto LABEL_39;
        }
      }

LABEL_37:
      uint64_t v4 = 0LL;
      goto LABEL_38;
    }

    size_t v21 = v5;
    uint64_t v24 = 0LL;
    uint64_t v25 = v8;
    if (CFStringGetCharactersPtr(v5)) {
      CStringPtr = 0LL;
    }
    else {
      CStringPtr = CFStringGetCStringPtr(v5, 0x600u);
    }
    unint64_t v23 = CStringPtr;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v11 = _LSGetBundleClassForExtensionInlineBuffer((uint64_t)v20);
    uint64_t v4 = v11;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
      {
        [v3 pathWithError:0];
        id v12 = (void *)objc_claimAutoreleasedReturnValue();
        unint64_t v13 = v12;
        if (v12
          && ![v12 caseInsensitiveCompare:@"/System/Library/CoreServices/MobileCoreTypes.bundle"])
        {

          uint64_t v4 = 11LL;
        }

        else
        {

          uint64_t v4 = 1LL;
        }
      }

      goto LABEL_38;
    }

    if ([v3 isDirectory])
    {
      goto LABEL_31;
    }

    int v19 = 1061109567;
    if (a1)
    {
      __int16 v14 = v5;
      float v15 = v14;
      if (v5 && -[__CFString length](v14, "length") == 3)
      {
        uint64_t v16 = -[__CFString caseInsensitiveCompare:](v15, "caseInsensitiveCompare:", @"exe");

        if (!v16) {
          goto LABEL_28;
        }
      }

      else
      {
      }
    }

  return v35;
}

void sub_183E7113C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetSimpleBoolValue(FSNode *a1, NSString *a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    [MEMORY[0x1896077D8] currentHandler];
    id v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _FSNodeGetSimpleBoolValue(FSNode *const __strong, const __strong NSURLResourceKey, CFURLResourcePropertyFlags , CFURLVolumePropertyFlags)");
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v10 handleFailureInFunction:v11, @"FSUtils.mm", 657, @"Invalid parameter not satisfying: %@", @"inKey != nil" file lineNumber description];

    if (!a1) {
      goto LABEL_10;
    }
    goto LABEL_4;
  }

  [MEMORY[0x1896077D8] currentHandler];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _FSNodeGetSimpleBoolValue(FSNode *const __strong, const __strong NSURLResourceKey, CFURLResourcePropertyFlags, CFURLVolumePropertyFlags)");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  [v8 handleFailureInFunction:v9, @"FSUtils.mm", 656, @"Invalid parameter not satisfying: %@", @"inNode != nil" file lineNumber description];

  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (!a1) {
    goto LABEL_10;
  }
LABEL_4:
  if (a4 | a3 && (*((_BYTE *)a1 + 24) & 8) != 0 && __CFURLResourceInfoPtr())
  {
    id v14 = 0LL;
    MEMORY[0x186E297BC]();
  }

LABEL_10:
  id v14 = 0LL;
  if (-[FSNode getResourceValue:forKey:options:error:]( a1,  "getResourceValue:forKey:options:error:",  &v14,  a2,  1LL,  0LL))
  {
    uint64_t v12 = [v14 BOOLValue];
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  return v12;
}

  return (void *)v6;
}

    id v14 = 0LL;
    goto LABEL_13;
  }

  if ((*(_BYTE *)(v10 + 176) & 8) == 0) {
    goto LABEL_10;
  }
  if ((_DWORD)a3 || *(_DWORD *)(v10 + 160) != 11)
  {
    uint64_t v11 = -[_LSStringLocalizer initWithDatabase:bundleUnit:delegate:]( objc_alloc(&OBJC_CLASS____LSStringLocalizer),  "initWithDatabase:bundleUnit:delegate:",  v7,  a2,  a3);
  }

  else
  {
    +[_LSStringLocalizer coreTypesLocalizer](&OBJC_CLASS____LSStringLocalizer, "coreTypesLocalizer");
    uint64_t v11 = (_LSStringLocalizer *)objc_claimAutoreleasedReturnValue();
  }

  id v14 = v11;
LABEL_13:
  objc_autoreleasePoolPop(v9);

  return v14;
}
}

  id v6 = 0LL;
LABEL_11:

  return v6;
}

  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  return a1;
}

  [MEMORY[0x189607968] numberWithUnsignedInt:a3];
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  id v10 = v9;
  uint64_t v11 = v5;
  CFURLRef v7 = v5;
  CSStore2::AttributedStringWriter::withAppliedAttribute();

  uint64_t v8 = v10;
LABEL_11:
}

  LOBYTE(v15) = 1;
  return v15;
}

    if (!v18)
    {
LABEL_12:
      __int16 v40 = (__CFString *)v10;
      unint64_t v20 = (__CFString *)v11;
      uint64_t v45 = 0LL;
      __int128 v42 = 0LL;
      uint64_t v43 = 0LL;
      id v44 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      size_t v21 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v42, v21, 0LL);

      if (v22)
      {
        int StringForCFString = _LSDatabaseGetStringForCFString(*v22, v20, 1);
        if (StringForCFString
          && (uint64_t HandlerPref = (LSHandlerPref *)LSHandlerPref::GetHandlerPref(*v22, StringForCFString, 5, 0LL)) != 0LL)
        {
          uint64_t v25 = LSHandlerPref::roleHandler(HandlerPref, 0xFFFFFFFF, 0LL);
          uint64_t v26 = _LSDatabaseGetStringForCFString(*v22, v40, 0);
          if (v25) {
            uint64_t v27 = v25 == v26;
          }
          else {
            uint64_t v27 = 0;
          }
          LODWORD(v22) = v27;
        }

        else
        {
          LODWORD(v22) = 0;
        }
      }

      if (v42 && v44) {
        _LSContextDestroy(v42);
      }
      uint64_t v33 = v43;
      __int128 v42 = 0LL;
      uint64_t v43 = 0LL;

      id v44 = 0;
      id v34 = v45;
      uint64_t v45 = 0LL;

      if ((_DWORD)v22)
      {
        v13[2](v13, 1LL, 0LL);
        goto LABEL_51;
      }

      id v35 = !v19;
      if (!v9) {
        id v35 = 1;
      }
      if ((v35 & 1) == 0)
      {
        _LSSchemeApprovalUsePreferenceOrPromptWithCompletionHandler(v9, v16, v40, v20, a4, v13);
        goto LABEL_51;
      }

      id v48 = *MEMORY[0x189607490];
      v49[0] = @"invalid input parameters";
      [MEMORY[0x189603F68] dictionaryWithObjects:v49 forKeys:&v48 count:1];
      int v17 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSSchemeApprovalFindWithCompletionHandler",  151LL,  v17);
      id v36 = (void *)objc_claimAutoreleasedReturnValue();
      ((void (**)(void, void, void *))v13)[2](v13, 0LL, v36);

LABEL_8:
LABEL_51:

      goto LABEL_52;
    }

  return v8;
}

    id v14 = fallbackDynamicOrBaseTypeRecord(v10, (const __CFString *)a3, (__CFString *)a4, (__CFString *)a5);
    goto LABEL_11;
  }

void sub_183E713F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E7170C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_183E717EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E7198C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E71A88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetBundleClassForExtensionInlineBuffer(uint64_t a1)
{
  uint64_t result = 0LL;
  switch(*(void *)(a1 + 160))
  {
    case 3LL:
      v11.id location = *(void *)(a1 + 152);
      v11.CFIndex length = 3LL;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"app", v11, 0LL))
      {
        id v3 = *(const __CFString **)(a1 + 128);
        CFRange v4 = *(CFRange *)(a1 + 152);
        uint64_t v5 = @"xpc";
        goto LABEL_7;
      }

      return 2LL;
    case 4LL:
      v12.id location = *(void *)(a1 + 152);
      v12.CFIndex length = 4LL;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"wdgt", v12, 0LL))
      {
        BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"dext", *(CFRange *)(a1 + 152), 0LL) == kCFCompareEqualTo;
        unsigned int v7 = 15;
        goto LABEL_19;
      }

      return 6LL;
    case 5LL:
      id v3 = *(const __CFString **)(a1 + 128);
      v4.id location = *(void *)(a1 + 152);
      uint64_t v5 = @"appex";
      v4.CFIndex length = 5LL;
LABEL_7:
      BOOL v6 = CFStringCompareWithOptions(v3, v5, v4, 0LL) == kCFCompareEqualTo;
      unsigned int v7 = 12;
      goto LABEL_19;
    case 6LL:
      v13.id location = *(void *)(a1 + 152);
      v13.CFIndex length = 6LL;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"bundle", v13, 0LL))
      {
        BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"action", *(CFRange *)(a1 + 152), 0LL) == kCFCompareEqualTo;
        unsigned int v7 = 5;
        goto LABEL_19;
      }

      uint64_t result = 1LL;
      break;
    case 7LL:
      uint64_t v8 = *(const __CFString **)(a1 + 128);
      v10.id location = *(void *)(a1 + 152);
      uint64_t v9 = @"service";
      v10.CFIndex length = 7LL;
      return 2 * (CFStringCompareWithOptions(v8, v9, v10, 0LL) == kCFCompareEqualTo);
    case 8LL:
      v14.id location = *(void *)(a1 + 152);
      v14.CFIndex length = 8LL;
      BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"prefpane", v14, 0LL) == kCFCompareEqualTo;
      unsigned int v7 = 9;
      goto LABEL_19;
    case 9LL:
      v15.id location = *(void *)(a1 + 152);
      v15.CFIndex length = 9LL;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"framework", v15, 0LL))
      {
        BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"vpnplugin", *(CFRange *)(a1 + 152), 0LL) == kCFCompareEqualTo;
        unsigned int v7 = 13;
LABEL_19:
        if (v6) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = 0LL;
        }
      }

      else
      {
        uint64_t result = 3LL;
      }

      break;
    case 0xALL:
      v16.id location = *(void *)(a1 + 152);
      v16.CFIndex length = 10LL;
      return 4
           * (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"mdimporter", v16, 0LL) == kCFCompareEqualTo);
    case 0xBLL:
      v17.id location = *(void *)(a1 + 152);
      v17.CFIndex length = 11LL;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"qlgenerator", v17, 0LL) == kCFCompareEqualTo) {
        return 7LL;
      }
      uint64_t v8 = *(const __CFString **)(a1 + 128);
      CFRange v10 = *(CFRange *)(a1 + 152);
      uint64_t v9 = @"placeholder";
      return 2 * (CFStringCompareWithOptions(v8, v9, v10, 0LL) == kCFCompareEqualTo);
    case 0xCLL:
      v18.id location = *(void *)(a1 + 152);
      v18.CFIndex length = 12LL;
      BOOL v6 = CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"cannedsearch", v18, 0LL) == kCFCompareEqualTo;
      unsigned int v7 = 10;
      goto LABEL_19;
    case 0xFLL:
      v19.id location = *(void *)(a1 + 152);
      v19.CFIndex length = 15LL;
      if (CFStringCompareWithOptions(*(CFStringRef *)(a1 + 128), @"systemextension", v19, 0LL)) {
        return 0LL;
      }
      else {
        return 15LL;
      }
    default:
      return result;
  }

  return result;
}

void sub_183E72118( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose(&a23, 8);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);

  _Unwind_Resume(a1);
}

CFErrorRef _LSCreateResolvedURL(const void *a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!CFURLGetFileSystemRepresentation((CFURLRef)a1, 1u, buffer, 1024LL))
  {
    uint64_t v9 = CFGetAllocator(a1);
    CFErrorRef v7 = CFErrorCreate(v9, (CFErrorDomain)*MEMORY[0x189604F40], 4LL, 0LL);
    _LSDefaultLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _LSCreateResolvedURL_cold_2();
    }
    goto LABEL_7;
  }

  uint64_t v15 = 0LL;
  __int128 v14 = xmmword_183FBF23C;
  int v2 = getattrlist((const char *)buffer, &v14, v16, 0x40CuLL, 0x21u);
  id v3 = CFGetAllocator(a1);
  CFRange v4 = v3;
  if (v2)
  {
    uint64_t v5 = (const __CFString *)*MEMORY[0x189604F58];
    BOOL v6 = __error();
    CFErrorRef v7 = CFErrorCreate(v4, v5, *v6, 0LL);
    _LSDefaultLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      _LSCreateResolvedURL_cold_3();
    }
LABEL_7:

    goto LABEL_8;
  }

  CFRange v12 = CFStringCreateWithFileSystemRepresentation(v3, (const char *)v17 + v17[0]);
  if (v12)
  {
    CFRange v13 = v12;
    CFErrorRef v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x189604DB0], v12, kCFURLPOSIXPathStyle, 1u);
    CFRelease(v13);
    if (v7) {
      return v7;
    }
  }

  else
  {
    CFErrorRef v7 = 0LL;
  }

LABEL_8:
  _LSDefaultLog();
  CFRange v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    _LSCreateResolvedURL_cold_1();
  }

  if (v7) {
    CFRelease(v7);
  }
  return (CFErrorRef)CFRetain(a1);
}
}

    CFRange v13 = 0LL;
    goto LABEL_9;
  }

  _LSDatabaseGetLog();
  CFRange v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    _LSDatabaseGetHeader(buf);
    CFRange v12 = v25;
    _LSDatabaseGetHeader(buf);
    _LSSetLocalDatabaseIfNewer_cold_1((uint64_t)buf, (uint64_t)v20, v12);
  }

  LSSession::setDatabase((LSSession *)v4, v2);
  CFRange v13 = 1LL;
LABEL_9:
  os_unfair_recursive_lock_unlock();

  return v13;
}

    BOOL v6 = 0LL;
    *a2 = v9;
    goto LABEL_9;
  }

  [v3 URL];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v6 = _CSStoreCreateWithURL();

  if (!v6)
  {
    _LSDatabaseGetLog();
    CFErrorRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      _LSCreateStoreWithFileContents();
    }

    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }

  uint64_t v19 = v13;
  if (!v13)
  {
    [v12 URL];
    unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "ls_preferredLocalizations");
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  }

  size_t v21 = _LSGetBRDisplayNameForContainerNode();
  if (!v21)
  {
    size_t v21 = _LSGetBRDisplayNameForContainerNode();
    if (!v21)
    {
      if (!a5)
      {
        a5 = (const unsigned int *)&v42;
      }

      if (*a5)
      {
        +[_LSDServiceDomain defaultServiceDomain]();
        unint64_t v23 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
        uint64_t v24 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a3, v23, 0LL);

        if (!v24)
        {
          if (!a8) {
            goto LABEL_59;
          }
          goto LABEL_66;
        }

        uint64_t v25 = v43;
        if (v43) {
          goto LABEL_19;
        }
        if (!_LSFindOrFindOrRegisterBundleNode(v24, v12, (unsigned int *)a5, 0x2000000u, 0LL, &v43, 0LL))
        {
          uint64_t v25 = v43;
LABEL_19:
          _LSBundleGetLocalizedName(v24->db, v25, 0LL, v12, v19, 0);
          CFRange v17 = (id)objc_claimAutoreleasedReturnValue();
          CFRange v18 = 0;
          goto LABEL_22;
        }
      }

      CFRange v18 = 0;
      CFRange v17 = 0LL;
LABEL_22:
      __int128 v14 = 1;
      if (!(_DWORD)v16) {
        goto LABEL_43;
      }
      goto LABEL_23;
    }
  }

  uint64_t v22 = 0LL;
  CFRange v17 = (id)v21;
LABEL_54:
  id v34 = (void *)[objc_alloc((Class)a1) initWithContextIfNeeded:a3 node:v12 isDirectory:v16 bundleClass:a5 desiredDisplayName:v17 treatAsFSName:v22];
LABEL_55:

  return v34;
}

  v13.__val_ = v12 | v10;
  __int128 v14 = v11;
  result.__engaged_ = v14;
  result.var0 = v13;
  return result;
}

    __int128 v14 = 0LL;
LABEL_9:
    _Block_object_dispose(&v30, 8);
    if (v14) {
      goto LABEL_11;
    }
  }

  __int128 v14 = v6;
LABEL_11:
  if (*(_BYTE *)(v9 + 24)) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = *((_BYTE *)v35 + 24) != 0;
  }
  *(_BYTE *)(v9 + 24) = v15;
  _Block_object_dispose(&v34, 8);

  [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:v7];
}

    CFRange v10 = 0LL;
    goto LABEL_17;
  }

  if (-[LSRecord isMemberOfClass:](self, "isMemberOfClass:", LaunchServices::Record::recordClass))
  {
    SubclassForTable = (objc_class *)LaunchServices::Record::findSubclassForTable( (LaunchServices::Record *)a3,  (LSContext *)*((unsigned int *)v7 + 2));
    if (SubclassForTable)
    {
      CFRange v12 = (LSRecord *)objc_alloc(SubclassForTable);
    }

    else
    {
      _LSRecordLog();
      CFRange v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        __int128 v14 = (void *)*((unsigned int *)v7 + 2);
        *(_DWORD *)id buf = 134217984;
        uint64_t v22 = v14;
        _os_log_impl( &dword_183E58000,  v13,  OS_LOG_TYPE_ERROR,  "Unexpected table ID 0x%llx when instantiating an LSRecord from a persistent identifier.",  buf,  0xCu);
      }

      CFRange v12 = 0LL;
    }

    self = v12;
  }

  CFRange v10 = -[LSRecord _initWithContext:persistentIdentifierData:length:]( self,  "_initWithContext:persistentIdentifierData:length:",  a3,  v7,  [a4 length]);
LABEL_17:

  return v10;
}

  CFRange v11 = objc_alloc_init(&OBJC_CLASS___LSRegistrationInfo);
  v11->version = 7;
  v11->action = 205;
  v11->options = a3;
  v11->containeruint64_t Unit = v22;
  v11->bundleuint64_t Unit = v24;
  v11->bundleClass = 8;
  if (_LSGetItemInfoFlagsForNode(a1, v9, &v11->itemFlags, a4)
    && -[FSNode getContentModificationDate:error:](v9, "getContentModificationDate:error:", &v11->contentModDate, a4)
    && -[FSNode getInodeNumber:error:](v9, "getInodeNumber:error:", &v11->inoBundle, a4)
    && (-[FSNode bookmarkDataRelativeToNode:error:](v9, "bookmarkDataRelativeToNode:error:", v21, a4),
        (CFRange v12 = (LSRegistrationInfo *)objc_claimAutoreleasedReturnValue()) != 0LL))
  {
    uint64_t v25 = *MEMORY[0x189604E00];
    v26[0] = v7;
    [MEMORY[0x189603F68] dictionaryWithObjects:v26 forKeys:&v25 count:1];
    CFRange v13 = (FSNode *)objc_claimAutoreleasedReturnValue();
    -[FSNode URL](v9, "URL");
    __int128 v14 = (NSData *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = _LSDispatchRegistration(a1, (char *)v11, v12, v14, v13, (const __CFURL *)&v11->bundleUnit, 0LL, 0LL, v20, v21);

    CFRange v16 = v15 == 0;
    if (a4 && v15)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v15, (uint64_t)"_LSRegisterLibrary", 3095LL, 0LL);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  else
  {
    CFRange v16 = 0LL;
  }

LABEL_31:
  return v16;
}

  -[_LSStringLocalizer bundleProvider](v12, "bundleProvider");
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
  id v28 = LSBundleProvider::CFBundleCopyBundleLocalizations((LSBundleProvider *)[v27 provider]);
  p_bundleLocalizations = (id *)&v12->_bundleLocalizations;
  bundleLocalizations = v12->_bundleLocalizations;
  v12->_bundleLocalizations = (NSArray *)v28;

  if (v5 && v19 && [*p_bundleLocalizations containsObject:v19])
  {
    _LSDefaultLog();
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      uint64_t v64 = v9;
      _os_log_impl( &dword_183E58000,  v31,  OS_LOG_TYPE_DEFAULT,  "Applying legacy localization list behavior to bundle %@",  buf,  0xCu);
    }

    -[_LSStringLocalizer bundleProvider](v12, "bundleProvider");
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    [v32 bundleURL];
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    Unique = (const void *)_CFBundleCreateUnique();

    if (Unique)
    {
      id v35 = (void *)MEMORY[0x186E296A8](Unique, 1LL);
      id v36 = [v35 copy];
      id v37 = *p_bundleLocalizations;
      *p_bundleLocalizations = (id)v36;

      CFRelease(Unique);
    }

    else
    {
      _LSDefaultLog();
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        -[_LSStringLocalizer initWithBundleProvider:stringsFile:legacyLocalizationList:].cold.1( v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46);
      }
    }
  }

  uint64_t v47 = *p_bundleLocalizations;
  if (!*p_bundleLocalizations) {
    goto LABEL_33;
  }
  if (!v19) {
    goto LABEL_25;
  }
LABEL_26:
  id v48 = [v47 indexOfObject:v19];
  v49 = v48;
  if (v48)
  {
    if (v48 == 0x7FFFFFFFFFFFFFFFLL)
    {
      _LSDefaultLog();
      __int128 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        -[_LSStringLocalizer bundleProvider](v12, "bundleProvider");
        __int128 v51 = (void *)objc_claimAutoreleasedReturnValue();
        [v51 bundleURL];
        __int128 v52 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)id buf = 138543619;
        uint64_t v64 = v19;
        id v65 = 2113;
        int v66 = v52;
        _os_log_error_impl( &dword_183E58000,  v50,  OS_LOG_TYPE_ERROR,  "LSStringLocalizer development region %{public}@ not found in localizations available for bundle %{private}@",  buf,  0x16u);
      }
    }

    else
    {
      __int128 v50 = (os_log_s *)[*p_bundleLocalizations mutableCopy];
      -[os_log_s removeObjectAtIndex:](v50, "removeObjectAtIndex:", v49);
      -[os_log_s insertObject:atIndex:](v50, "insertObject:atIndex:", v19, 0LL);
      __int128 v53 = -[os_log_s copy](v50, "copy");
      uint64_t v54 = *p_bundleLocalizations;
      *p_bundleLocalizations = (id)v53;
    }
  }

  BOOL v55 = (const __CFArray *)*p_bundleLocalizations;
  if (*p_bundleLocalizations) {
    goto LABEL_34;
  }
LABEL_33:
  BOOL v56 = *p_bundleLocalizations;
  *p_bundleLocalizations = (id)MEMORY[0x189604A58];

  BOOL v55 = (const __CFArray *)*p_bundleLocalizations;
  if (*p_bundleLocalizations)
  {
LABEL_34:
    [(id)__LSDefaultsGetSharedInstance() preferredLocalizations];
    __int128 v57 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
    __int128 v58 = CFBundleCopyLocalizationsForPreferences(v55, v57);
    __int128 v59 = -[__CFArray copy](v58, "copy");
    bundleLocalizationsWithDefaultPrefLocs = v12->_bundleLocalizationsWithDefaultPrefLocs;
    v12->_bundleLocalizationsWithDefaultPrefLocs = (NSArray *)v59;
  }

  if (!v12->_bundleLocalizationsWithDefaultPrefLocs)
  {
    v12->_bundleLocalizationsWithDefaultPrefLocs = (NSArray *)MEMORY[0x189604A58];
  }

  objc_autoreleasePoolPop(v15);
LABEL_38:

  return v12;
}

  if (*(_DWORD *)(a1 + 32) == 8)
  {
    +[LSApplicationRestrictionsManager sharedInstance]();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[LSApplicationRestrictionsManager schedulePruneObsoleteTrustedSignerIdentities]((uint64_t)v9);
  }

  +[_LSInstallProgressService sharedInstance](&OBJC_CLASS____LSInstallProgressService, "sharedInstance");
  CFRange v10 = (void *)objc_claimAutoreleasedReturnValue();
  CFRange v11 = *(unsigned int *)(a1 + 32);
  v13[0] = v4;
  [MEMORY[0x189603F18] arrayWithObjects:v13 count:1];
  CFRange v12 = (void *)objc_claimAutoreleasedReturnValue();
  [v10 sendNotification:v11 forAppProxies:v12 Plugins:0 completion:0];

LABEL_11:
}

  uint64_t v9 = *((unsigned __int8 *)v16 + 24);
  _Block_object_dispose(&v15, 8);

  return v9;
}

uint64_t _LSBundleFindWithNode(LSContext *a1, void *a2, _DWORD *a3, void *a4)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  id v7 = a2;
  uint64_t v48 = 0LL;
  v49 = &v48;
  uint64_t v50 = 0x2020000000LL;
  char v51 = 0;
  uint64_t v44 = 0LL;
  uint64_t v45 = &v44;
  uint64_t v46 = 0x2020000000LL;
  int v47 = 0;
  uint64_t v40 = 0LL;
  __int128 v41 = &v40;
  uint64_t v42 = 0x2020000000LL;
  uint64_t v43 = 0LL;
  id v38 = 0LL;
  uint64_t v39 = 0LL;
  [v7 nameWithError:&v38];
  uint64_t v8 = (NSString *)objc_claimAutoreleasedReturnValue();
  id v9 = v38;
  CFRange v10 = v9;
  if (v8)
  {
  }

  else
  {
    uint64_t v14 = _LSGetOSStatusFromNSError(v9);

    if ((_DWORD)v14) {
      goto LABEL_9;
    }
  }

  id v37 = 0LL;
  int v11 = [v7 getVolumeIdentifier:&v39 error:&v37];
  id v12 = v37;
  CFRange v13 = v12;
  if (v11)
  {
  }

  else
  {
    uint64_t v14 = _LSGetOSStatusFromNSError(v12);

    if ((_DWORD)v14) {
      goto LABEL_9;
    }
  }

  if (!*((_BYTE *)v49 + 24))
  {
    memset(v52, 0, sizeof(v52));
    LaunchServices::BindingEvaluator::CreateWithBundleInfo(0LL, v8, 0LL, 0LL, v52, (uint64_t)v53);
    uint64_t v19 = (void *)MEMORY[0x1895F87A8];
    v33[0] = MEMORY[0x1895F87A8];
    v33[1] = 3221225472LL;
    v33[2] = ___LSBundleFindWithNode_block_invoke;
    v33[3] = &unk_189D743B8;
    id v35 = a1;
    id v20 = v7;
    id v34 = v20;
    uint64_t v36 = v39;
    LaunchServices::BindingEvaluator::setFilter((uint64_t)v53, @"bundle unit matches input node", v33);
    LaunchServices::BindingEvaluator::setOptions((uint64_t)v53, 32910);
    LaunchServices::BindingEvaluator::getBestBinding((LaunchServices::BindingEvaluator *)v53, a1, 0LL, v31);
    if (v32)
    {
      *((_DWORD *)v45 + 6) = v31[0];
      v41[3] = v31[1];
      *((_BYTE *)v49 + 24) = 1;
    }

    else
    {
      _LSDefaultLog();
      size_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
        _LSBundleFindWithNode_cold_1((uint64_t)v20, v21);
      }

      v24[1] = v19;
      v24[2] = (id)3221225472LL;
      v24[3] = ___LSBundleFindWithNode_block_invoke_91;
      v24[4] = &unk_189D743E0;
      uint64_t v26 = &v44;
      uint64_t v27 = &v40;
      uint64_t v29 = a1;
      id v22 = v20;
      uint64_t v30 = v39;
      id v25 = v22;
      id v28 = &v48;
      _CSStoreEnumerateUnits();
    }

    if (v32)
    {
    }

    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v53);
    id v15 = 0LL;
    goto LABEL_23;
  }

  uint64_t v14 = 0LL;
LABEL_9:
  if (*((_BYTE *)v49 + 24))
  {
    id v15 = 0LL;
    goto LABEL_24;
  }

  v24[0] = 0LL;
  [v7 pathWithError:v24];
  CFRange v16 = (void *)objc_claimAutoreleasedReturnValue();
  id v17 = v24[0];
  CFRange v18 = v17;
  if (v16)
  {
  }

  else
  {
    uint64_t v14 = _LSGetOSStatusFromNSError(v17);

    if ((_DWORD)v14)
    {
      id v15 = 0LL;
      goto LABEL_30;
    }
  }

  id v15 = v16;
  _CSStoreEnumerateUnits();

LABEL_23:
  uint64_t v14 = 0LL;
LABEL_24:
  if (*((_BYTE *)v49 + 24))
  {
    if (a3) {
      *a3 = *((_DWORD *)v45 + 6);
    }
    if (a4) {
      *a4 = v41[3];
    }
  }

  else
  {
    uint64_t v14 = 4294957797LL;
  }

LABEL_30:
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  _Block_object_dispose(&v48, 8);

  return v14;
}

    uint64_t v14 = v24 >= 0;
    id v12 = v10 + 1;
    if (v10 == 1000)
    {
      CFRange v10 = 1001;
      goto LABEL_45;
    }
  }

  if ((*(_DWORD *)a5 & 5) != 4) {
    goto LABEL_30;
  }
  if (!fcntl(*(_DWORD *)(a5 + 4), 50, buf))
  {
    free(*(void **)(a5 + 24));
    *(void *)(a5 + 24) = strdup((const char *)buf);
  }

  return v7;
}
  }

  if ([v4 count])
  {
    unint64_t v23 = (NSDictionary *)[v4 copy];
    sandboxEnvironmentVariables = self->_sandboxEnvironmentVariables;
    self->_sandboxEnvironmentVariables = v23;
  }

  objc_autoreleasePoolPop(context);
}

      CFRange v16 = 0LL;
      goto LABEL_31;
    }
  }

  if (!_LSContainerFindOrRegisterWithNode((id *)&a1->db, v9, a3, &v22, 0LL, (id *)&v21, a4)) {
    goto LABEL_30;
  }
  if (!v24)
  {
    CFRange v18 = _LSBundleFindWithNode(a1, v9, &v24, &v23);
    if (v18 != -9499)
    {
      if (!v18)
      {
        goto LABEL_8;
      }

      if (a4)
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v18, (uint64_t)"_LSRegisterLibrary", 3055LL, 0LL);
        id v17 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      }

      goto LABEL_30;
    }
  }

void sub_183E7281C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, id a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&a30);
  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a63);

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);

  _Unwind_Resume(a1);
}

void sub_183E72944( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void LaunchServices::BindingEvaluator::setFilter(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = [a3 copy];
  BOOL v6 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v5;

  uint64_t v7 = [a2 copy];
  uint64_t v8 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v7;
}

uint64_t _LSBundleMatchesNode(void *a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a4;
  int v11 = v10;
  uint64_t v12 = 0LL;
  if (a2 && a3 && v10) {
    uint64_t v12 = _LSAliasAndInodeOnContainerMatchesNode(v9, *(_DWORD *)a3, 0LL, *(unsigned int *)(a3 + 4), v10, a5);
  }

  return v12;
}

void sub_183E72A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasAndInodeOnContainerMatchesNode( void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v11 = a1;
  id v12 = a5;
  uint64_t Unit = CSStoreGetUnit();
  if (Unit
    && ((char v19 = 0, v18 = 0LL, !_LSContainerCheckState(v11, a4, Unit, &v19, &v18))
      ? (BOOL v14 = v19 == 1)
      : (BOOL v14 = 0),
        v14 ? (BOOL v15 = v18 == a6) : (BOOL v15 = 0),
        v15))
  {
    uint64_t v16 = _LSAliasCompareToNode(v11, a2, a6, a3, v12);
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return v16;
}

void sub_183E72B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasCompareToNode(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  _LSAliasGet(a1, a2);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  id v9 = v8;
  if (v8) {
    uint64_t v10 = _LSAliasMatchesNode(v8, v7);
  }
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_183E72BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasMatchesNode(void *a1, void *a2)
{
  id v3 = a1;
  CFRange v4 = (void *)MEMORY[0x186E2A59C]();
  [a2 canonicalPathWithError:0];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v6 = v5;
  uint64_t v7 = 0LL;
  if (v3 && v5) {
    uint64_t v7 = _LSAliasDataMatchesPath_NoIO(v3, v5, 0LL);
  }

  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_183E72C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E72DD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasDataMatchesPath_NoIO(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
  }

  else
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSAliasDataMatchesPath_NoIO(NSData *__strong, NSString *__strong, LSAliasPathMatchType)");
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    [v17 handleFailureInFunction:v18, @"LSUtils.mm", 783, @"Invalid parameter not satisfying: %@", @"inAlias != nil" file lineNumber description];

    if (v7) {
      goto LABEL_3;
    }
  }

  [MEMORY[0x1896077D8] currentHandler];
  char v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSAliasDataMatchesPath_NoIO(NSData *__strong, NSString *__strong, LSAliasPathMatchType)");
  id v20 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 handleFailureInFunction:v20, @"LSUtils.mm", 784, @"Invalid parameter not satisfying: %@", @"inPath != nil" file lineNumber description];

LABEL_3:
  uint64_t v8 = (void *)MEMORY[0x186E2A59C]();
  +[FSNode pathForBookmarkData:error:](&OBJC_CLASS___FSNode, "pathForBookmarkData:error:", v5, 0LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9) {
    goto LABEL_9;
  }
  if (!a3)
  {
    while (([v7 hasSuffix:@"/"] & 1) != 0)
    {
      uint64_t v14 = objc_msgSend( v7,  "stringByReplacingCharactersInRange:withString:",  objc_msgSend(v7, "length") - 1,  1,  &stru_189D7B4C8);

      uint64_t v7 = (void *)v14;
    }

    while ([v9 hasSuffix:@"/"])
    {
      uint64_t v15 = objc_msgSend( v9,  "stringByReplacingCharactersInRange:withString:",  objc_msgSend(v9, "length") - 1,  1,  &stru_189D7B4C8);

      id v9 = (void *)v15;
    }
  }

  uint64_t v10 = v9;
  id v11 = v7;
  switch(a3)
  {
    case 2LL:
LABEL_15:
      uint64_t v12 = [v10 hasPrefix:v11];
      goto LABEL_16;
    case 1LL:
      uint64_t v10 = v7;
      id v11 = v9;
      goto LABEL_15;
    case 0LL:
      uint64_t v12 = [v7 isEqual:v9];
LABEL_16:
      uint64_t v13 = v12;
      goto LABEL_17;
  }

LABEL_9:
  uint64_t v13 = 0LL;
LABEL_17:

  objc_autoreleasePoolPop(v8);
  return v13;
}

  void *v6 = 0;
  v6[1] = v2;
  FSEventsD2F_server(v9, (uint64_t)v6);
  if (v9 != v4) {
    free(v9);
  }
}

    id v11 = 0;
LABEL_10:

    return v11;
  }

  return 0;
}

    LOBYTE(v11) = 0;
    return v11;
  }

  if (a3)
  {
    uint64_t v12 = a3;
    uint64_t v13 = setxattr(path, name, (const void *)[v12 bytes], objc_msgSend(v12, "length"), 0, a5) == 0;
  }

  else
  {
    if (!removexattr(path, name, a5))
    {
      LOBYTE(v11) = 1;
      return v11;
    }

    uint64_t v13 = *__error() == 93;
  }

  LOBYTE(v11) = v13;
  if (a6 && !v11)
  {
    uint64_t v16 = __error();
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  *v16,  (uint64_t)"-[FSNode(ExtendedAttributes) setExtendedAttribute:name:options:error:]",  3532LL,  0LL);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    LOBYTE(v11) = 0;
    *a6 = v17;
  }

  return v11;
}

  return v10;
}

  uint64_t v15 = v11 == 0;

  return v15;
}
}

      id v25 = (id)v10;
      [v7 nameWithError:&v25];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      id v17 = v25;

      if (v18)
      {
        [v18 stringByDeletingPathExtension];
        char v19 = (void *)objc_claimAutoreleasedReturnValue();
        id v20 = v19;
        if (v19 && ![v19 caseInsensitiveCompare:v14])
        {
          _LSBundleGetLocalizer(*a1, 0LL, 0LL, v7);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
        }

        else
        {
          uint64_t v16 = 0LL;
        }

        if (!v16)
        {
          uint64_t v15 = 0LL;
LABEL_23:
          uint64_t v10 = (uint64_t)v17;
          goto LABEL_24;
        }

        [v7 URL];
        size_t v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "ls_preferredLocalizations");
        id v22 = (void *)objc_claimAutoreleasedReturnValue();
        [v16 localizedStringWithString:v12 preferredLocalizations:v22];
        unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v23)
        {
          uint64_t v15 = [v23 stringByAppendingPathExtension:v8];
        }

        else
        {
          uint64_t v15 = 0LL;
        }
      }

      else
      {
        uint64_t v15 = 0LL;
        uint64_t v16 = v14;
      }

  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  id v17 = 0;
  id v9 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  uint64_t v10 = v9 == 0;
  uint64_t v8 = v9 != 0;
  uint64_t v10 = !v10 || a2 == 0;
  if (!v10)
  {
    db = a1->db;
    TypePackage = _UTTypeGetTypePackage(db);
    return _UTTypeGetActiveIdentifierForTag(db, @"public.filename-extension", theString, TypePackage, 0LL) != 0;
  }

  return v8;
}

  return v6;
}

  objc_autoreleasePoolPop(v0);
}

  return (NSString *)v2;
}

  return v6;
}

LABEL_23:
  uint64_t v7 = 0;
LABEL_24:
  uint64_t v8 = v7 != 0;
  if (v6)
  {

    uint64_t v10 = 0LL;
LABEL_33:
    uint64_t v30 = 0LL;
    _LSLogStepFinished(4LL, 0LL, *(NSString **)(a1 + 32), @"Failed to register %@", *(void *)(a1 + 32));
    uint64_t v31 = 0;
    goto LABEL_35;
  }

  unint64_t v23 = *(void *)(a1 + 72);
  uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 32LL);
  uint64_t v48 = 0LL;
  id v9 = [v5 findOrRegisterContainerizedNodeReinitializingContext:v23 installDictionary:v4 personasWithAttributes:v24 error:&v48];
  id v25 = v48;
  uint64_t v26 = v25;
  if ((_DWORD)v9)
  {
    int v47 = v25;
    [v5 findContainerizedRecordForBundleUnit:v9 error:&v47];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    id v28 = v47;

    if (v27)
    {
      uint64_t v46 = v28;
      uint64_t v10 = -[LSRecordPromise initWithRecord:error:]( objc_alloc(&OBJC_CLASS___LSRecordPromise),  "initWithRecord:error:",  v27,  &v46);
      uint64_t v29 = v46;

      id v28 = v29;
    }

    else
    {
      uint64_t v10 = 0LL;
    }
  }

  else
  {
    id v28 = *(id *)(a1 + 80);
    uint64_t v10 = 0LL;
    uint64_t v27 = v26;
  }

  id v6 = v28;
LABEL_32:

  if (v6) {
    goto LABEL_33;
  }
  _LSLogStepFinished( 4LL,  1LL,  *(NSString **)(a1 + 32),  @"Finished registering %@, bundle unit %llx",  *(void *)(a1 + 32),  v9);
  char v32 = -[_LSDModificationPendingSaveToken initWithUUID:]( objc_alloc(&OBJC_CLASS____LSDModificationPendingSaveToken),  "initWithUUID:",  *(void *)(*(void *)(a1 + 56) + 16LL));
  v43[0] = MEMORY[0x1895F87A8];
  v43[1] = 3221225472LL;
  v43[2] = __42__LSMIResultRegistrant_runWithCompletion___block_invoke_94;
  v43[3] = &unk_189D78CD8;
  uint64_t v45 = v9;
  uint64_t v30 = v32;
  uint64_t v44 = v30;
  [v3 armSaveTimerIfNecessary:v43];

  id v6 = 0LL;
  uint64_t v31 = 1;
LABEL_35:
  [*(id *)(*(void *)(a1 + 56) + 8) endModificationOperation];
  if ((v31 & 1) == 0) {
    [*(id *)(*(void *)(a1 + 56) + 8) flushModificationState];
  }
  registrationCleanupQueue();
  uint64_t v33 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __42__LSMIResultRegistrant_runWithCompletion___block_invoke_2;
  block[3] = &unk_189D78D00;
  block[4] = *(void *)(a1 + 56);
  id v37 = *(id *)(a1 + 32);
  id v34 = v6;
  id v38 = v34;
  uint64_t v39 = *(id *)(a1 + 88);
  __int128 v41 = *(_BYTE *)(a1 + 112);
  uint64_t v42 = v8;
  uint64_t v40 = *(id *)(a1 + 96);
  dispatch_async(v33, block);

  (*(void (**)(void))(*(void *)(a1 + 104) + 16LL))();
  if (v51 && v53) {
    _LSContextDestroy(v51);
  }
}

  objc_autoreleasePoolPop(v13);
}

void sub_183E73070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E73260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E733B0()
{
}

void sub_183E733E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t __LSRECORD_IS_CONSTRUCTING_A_COMPATIBILITY_OBJECT__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_183E73498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZZZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEvEUb_EN3__08__invokeEPv(void *a1)
{
  if (a1)
  {
    int v2 = *(void ***)a1;
    if (v2)
    {
      if (*((_BYTE *)a1 + 16)) {
        _LSContextDestroy(v2);
      }
    }

    id v3 = (void *)*((void *)a1 + 1);
    *(void *)a1 = 0LL;
    *((void *)a1 + 1) = 0LL;

    *((_BYTE *)a1 + 16) = 0;
    CFRange v4 = (void *)*((void *)a1 + 3);
    *((void *)a1 + 3) = 0LL;

    operator delete(a1);
  }

void sub_183E73534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MDTCopierGetTypeID()
{
  while (!__ldxr((unsigned int *)&__gMDTCopierTypeInitialized))
  {
    if (!__stxr(1u, (unsigned int *)&__gMDTCopierTypeInitialized))
    {
      __gMDTCopierCFTypeID TypeID = _CFRuntimeRegisterClass();
      pthread_mutex_init(&__gMDTCopierLock, 0LL);
      __gMDTCopierPorts = (uint64_t)CFDictionaryCreateMutable(0LL, 0LL, 0LL, MEMORY[0x189605250]);
      return __gMDTCopierTypeID;
    }
  }

  __clrex();
  return __gMDTCopierTypeID;
}

uint64_t _status(unsigned int a1, uint64_t a2, const UInt8 *a3, unsigned int a4)
{
  Value = CFDictionaryGetValue((CFDictionaryRef)__gMDTCopierPorts, (const void *)a1);
  pthread_mutex_unlock(&__gMDTCopierLock);
  if (Value)
  {
    if (a4)
    {
      uint64_t v8 = CFDataCreateWithBytesNoCopy(0LL, a3, a4, (CFAllocatorRef)*MEMORY[0x189604DC8]);
      if (v8 && (v9 = v8, uint64_t v10 = __MDTUnserializePropertyList(v8), CFRelease(v9), v10))
      {
        *((void *)Value + 11) = __MDTCreateURLFromPropertyList(v10);
        id v11 = __MDTCreateErrorFromPropertyList(v10);
      }

      else
      {
        id v11 = CFErrorCreate(0LL, (CFErrorDomain)*MEMORY[0x189604F58], 5LL, 0LL);
        uint64_t v10 = 0LL;
      }

      *((void *)Value + 12) = v11;
    }

    else
    {
      uint64_t v10 = 0LL;
      id v11 = (const __CFDictionary *)*((void *)Value + 12);
    }

    if (v11) {
      uint64_t v12 = 3LL;
    }
    else {
      uint64_t v12 = 1LL;
    }
    (*((void (**)(const void *, uint64_t, void))Value + 2))(Value, v12, *((void *)Value + 11));
    if (v10) {
      CFRelease(v10);
    }
  }

  return 0LL;
}

CFMachPortRef *MDTCreateCopierWithSandboxExtensionAndReturnError( const __CFAllocator *a1, const __CFURL *a2, const __CFURL *a3, const __CFString *a4, const __CFString *a5, __CFMachPort *a6, __CFMachPort *a7, __CFMachPort *a8, CFErrorRef *a9)
{
  kern_return_t v20;
  kern_return_t v21;
  kern_return_t v22;
  kern_return_t inserted;
  __CFMachPort *v24;
  mach_port_t v25;
  mach_port_t Port;
  int v27;
  CFURLRef v28;
  CFURLRef v29;
  CFStringRef v30;
  CFStringRef Copy;
  kern_return_t v32;
  __CFDictionary *v33;
  mach_port_t v34;
  CFStringRef v36;
  CFStringRef v37;
  CFIndex v38;
  int v39;
  CFErrorRef v40;
  CFIndex v41;
  CFStringRef v42;
  CFStringRef v43;
  int v44;
  CFMachPortRef v45;
  CFMachPortRef v46;
  CFMachPortRef v47;
  CFMachPortRef v48;
  CFMachPortRef v49;
  CFMachPortContext v50;
  int v51;
  mach_port_t previous;
  mach_port_t special_port;
  mach_port_t sp[2];
  *(void *)sp = 0LL;
  if (!a2)
  {
    uint64_t v36 = (const __CFString *)*MEMORY[0x189604F58];
    id v37 = @"NULL source URL";
    id v38 = 22LL;
    uint64_t v39 = 341;
LABEL_27:
    uint64_t v40 = MDTCreateError(v36, v38, v39, (uint64_t)v37);
    goto LABEL_53;
  }

  if (!a3)
  {
    uint64_t v36 = (const __CFString *)*MEMORY[0x189604F58];
    id v37 = @"NULL destination URL";
    id v38 = 22LL;
    uint64_t v39 = 342;
    goto LABEL_27;
  }

  if (!a7)
  {
    uint64_t v36 = (const __CFString *)*MEMORY[0x189604F58];
    id v37 = @"NULL callback";
    id v38 = 22LL;
    uint64_t v39 = 343;
    goto LABEL_27;
  }

  MDTCopierGetTypeID();
  Instance = (CFMachPortRef *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v36 = (const __CFString *)*MEMORY[0x189604F58];
    id v37 = @"Could not create CF instance";
    id v38 = 12LL;
    uint64_t v39 = 348;
    goto LABEL_27;
  }

  uint64_t v18 = Instance;
  *((_OWORD *)Instance + 5) = 0u;
  *((_OWORD *)Instance + 6) = 0u;
  *((_OWORD *)Instance + 3) = 0u;
  *((_OWORD *)Instance + 4) = 0u;
  *((_OWORD *)Instance + 1) = 0u;
  *((_OWORD *)Instance + 2) = 0u;
  char v19 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  id v20 = task_get_special_port(*MEMORY[0x1895FBBE0], 4, &special_port);
  if (v20)
  {
    __int128 v41 = v20;
    uint64_t v42 = @"Could not get bootstrap port";
    uint64_t v43 = (const __CFString *)*MEMORY[0x189604F48];
    uint64_t v44 = 354;
  }

  else if (special_port)
  {
    size_t v21 = bootstrap_look_up(special_port, "com.apple.mdt", &sp[1]);
    if (v21)
    {
      __int128 v41 = v21;
      uint64_t v42 = @"Could not look up MDT service";
      uint64_t v43 = (const __CFString *)*MEMORY[0x189604F48];
      uint64_t v44 = 360;
    }

    else if (sp[1])
    {
      v50.version = 0LL;
      memset(&v50.retain, 0, 24);
      v50.info = v18;
      id v22 = mach_port_allocate(*v19, 1u, sp);
      if (v22)
      {
        __int128 v41 = v22;
        uint64_t v42 = @"Could not allocate port receive right";
        uint64_t v43 = (const __CFString *)*MEMORY[0x189604F48];
        uint64_t v44 = 374;
      }

      else
      {
        inserted = mach_port_insert_right(*v19, sp[0], sp[0], 0x14u);
        if (inserted)
        {
          __int128 v41 = inserted;
          uint64_t v42 = @"Could not insert send right";
          uint64_t v43 = (const __CFString *)*MEMORY[0x189604F48];
          uint64_t v44 = 377;
        }

        else
        {
          uint64_t v24 = CFMachPortCreateWithPort(a1, sp[0], (CFMachPortCallBack)__MDTCopierMachCallback, &v50, 0LL);
          v18[6] = v24;
          if (v24)
          {
            id v25 = sp[1];
            Port = CFMachPortGetPort(v24);
            uint64_t v27 = MDT_create_session(v25, Port, (_DWORD *)v18 + 10, &v51);
            if (v27)
            {
              __int128 v41 = v27;
              uint64_t v42 = @"Could not create MDT session";
              uint64_t v43 = (const __CFString *)*MEMORY[0x189604F48];
              uint64_t v44 = 389;
            }

            else
            {
              id v28 = CFURLCopyAbsoluteURL(a2);
              v18[7] = v28;
              if (v28)
              {
                uint64_t v29 = CFURLCopyAbsoluteURL(a3);
                v18[8] = v29;
                if (v29)
                {
                  if (a4 && (uint64_t v30 = CFStringCreateCopy(0LL, a4), (v18[9] = (CFMachPortRef)v30) == 0LL))
                  {
                    uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
                    uint64_t v42 = @"Could not copy unique ID";
                    __int128 v41 = 12LL;
                    uint64_t v44 = 403;
                  }

                  else if (a5 && (Copy = CFStringCreateCopy(0LL, a5), (v18[10] = (CFMachPortRef)Copy) == 0LL))
                  {
                    uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
                    uint64_t v42 = @"Could not copy sandbox extension";
                    __int128 v41 = 12LL;
                    uint64_t v44 = 410;
                  }

                  else
                  {
                    char v32 = mach_port_request_notification(*v19, sp[0], 70, 1u, sp[0], 0x15u, &previous);
                    if (v32)
                    {
                      __int128 v41 = v32;
                      uint64_t v42 = @"Could not request port notification";
                      uint64_t v43 = (const __CFString *)*MEMORY[0x189604F48];
                      uint64_t v44 = 418;
                    }

                    else
                    {
                      if (!previous)
                      {
                        void v18[2] = a7;
                        v18[3] = a8;
                        v18[13] = a6;
                        pthread_mutex_lock(&__gMDTCopierLock);
                        uint64_t v33 = (__CFDictionary *)__gMDTCopierPorts;
                        id v34 = CFMachPortGetPort(v18[6]);
                        CFDictionarySetValue(v33, (const void *)v34, v18);
                        pthread_mutex_unlock(&__gMDTCopierLock);
                        return v18;
                      }

                      uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
                      uint64_t v42 = @"Could not request port notification";
                      __int128 v41 = 12LL;
                      uint64_t v44 = 420;
                    }
                  }
                }

                else
                {
                  uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
                  uint64_t v42 = @"Could not copy destination URL";
                  __int128 v41 = 12LL;
                  uint64_t v44 = 397;
                }
              }

              else
              {
                uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
                uint64_t v42 = @"Could not copy source URL";
                __int128 v41 = 12LL;
                uint64_t v44 = 393;
              }
            }
          }

          else
          {
            uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
            uint64_t v42 = @"Could not create CFMachPort";
            __int128 v41 = 12LL;
            uint64_t v44 = 381;
          }
        }
      }
    }

    else
    {
      uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
      uint64_t v42 = @"Could not look up MDT service";
      __int128 v41 = 12LL;
      uint64_t v44 = 362;
    }
  }

  else
  {
    uint64_t v43 = (const __CFString *)*MEMORY[0x189604F58];
    uint64_t v42 = @"Could not get bootstrap port";
    __int128 v41 = 12LL;
    uint64_t v44 = 356;
  }

  uint64_t v40 = MDTCreateError(v43, v41, v44, (uint64_t)v42);
  uint64_t v45 = v18[7];
  if (v45) {
    CFRelease(v45);
  }
  uint64_t v46 = v18[8];
  if (v46) {
    CFRelease(v46);
  }
  int v47 = v18[9];
  if (v47) {
    CFRelease(v47);
  }
  uint64_t v48 = v18[10];
  if (v48) {
    CFRelease(v48);
  }
  v49 = v18[6];
  if (v49) {
    CFRelease(v49);
  }
  CFRelease(v18);
LABEL_53:
  if (a9)
  {
    uint64_t v18 = 0LL;
    *a9 = v40;
  }

  else
  {
    if (v40) {
      CFRelease(v40);
    }
    return 0LL;
  }

  return v18;
}

CFErrorRef MDTCreateError(const __CFString *a1, CFIndex a2, int a3, uint64_t a4)
{
  userInfoKeys[3] = *(void **)MEMORY[0x1895F89C0];
  int valuePtr = a3;
  userInfoKeys[0] = @"MobileDataTransitErrorFile";
  userInfoKeys[1] = @"MobileDataTransitErrorLine";
  userInfoKeys[2] = *(void **)MEMORY[0x189604F38];
  userInfoValues = @"/Library/Caches/com.apple.xbs/Sources/MobileDataTransit/Client.c";
  CFTypeRef cf = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  uint64_t v12 = a4;
  CFErrorRef v7 = CFErrorCreateWithUserInfoKeysAndValues( 0LL,  a1,  a2,  (const void *const *)userInfoKeys,  (const void *const *)&userInfoValues,  3LL);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void __MDTCopierMachCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  int v5 = *(_DWORD *)(a2 + 20);
  if ((v5 - 78) <= 0xFFFFFFF1)
  {
    MDTR_server(a2, (uint64_t)v8);
    int v5 = *(_DWORD *)(a2 + 20);
  }

  if (v5 == 72 || v5 == 70)
  {
    MDTCopierInvalidate(a4);
    CFErrorRef v7 = CFErrorCreate(0LL, (CFErrorDomain)*MEMORY[0x189604F58], 57LL, 0LL);
    *(void *)(a4 + 96) = v7;
    (*(void (**)(uint64_t, uint64_t, void, CFErrorRef, void))(a4 + 16))( a4,  3LL,  0LL,  v7,  *(void *)(a4 + 24));
  }

__CFRunLoopSource *MDTCopierScheduleWithRunLoop(uint64_t a1, __CFRunLoop *a2, const __CFString *a3)
{
  if (!*(void *)(a1 + 32))
  {
    id v6 = CFGetAllocator((CFTypeRef)a1);
    uint64_t result = CFMachPortCreateRunLoopSource(v6, *(CFMachPortRef *)(a1 + 48), 0LL);
    *(void *)(a1 + 32) = result;
    if (!result) {
      return result;
    }
    CFRunLoopAddSource(a2, result, a3);
  }

  return (__CFRunLoopSource *)1;
}

void MDTCopierUnscheduleFromRunLoop(uint64_t a1, CFRunLoopRef rl, const __CFString *a3)
{
  id v3 = *(__CFRunLoopSource **)(a1 + 32);
  if (v3) {
    CFRunLoopRemoveSource(rl, v3, a3);
  }
}

BOOL MDTCopierStart(uint64_t a1)
{
  int v2 = copyCStringPath(*(const __CFURL **)(a1 + 56));
  id v3 = copyCStringPath(*(const __CFURL **)(a1 + 64));
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    int v5 = copyCString(*(const __CFString **)(a1 + 72));
  }
  else {
    int v5 = "";
  }
  id v6 = copyCString(*(const __CFString **)(a1 + 80));
  int v7 = MDT_start(*(unsigned int *)(a1 + 40));
  CFAllocatorDeallocate(0LL, v2);
  CFAllocatorDeallocate(0LL, v3);
  if (v4) {
    CFAllocatorDeallocate(0LL, v5);
  }
  if (v6) {
    CFAllocatorDeallocate(0LL, v6);
  }
  return v7 == 0;
}

CFURLRef copyCStringPath(const __CFURL *result)
{
  if (result)
  {
    uint64_t v1 = CFURLCopyFileSystemPath(result, kCFURLPOSIXPathStyle);
    int v2 = copyCString(v1);
    CFRelease(v1);
    return (const __CFURL *)v2;
  }

  return result;
}

char *copyCString(const __CFString *a1)
{
  if (!a1) {
    return 0LL;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v4 = (char *)MEMORY[0x186E28C1C](0LL, v3, 0LL);
  CFStringGetCString(a1, v4, v3, 0x8000100u);
  return v4;
}

void MDTCopierInvalidate(uint64_t a1)
{
  int v2 = *(__CFRunLoopSource **)(a1 + 32);
  if (v2) {
    CFRunLoopSourceInvalidate(v2);
  }
  mach_port_name_t v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    mach_port_deallocate(*MEMORY[0x1895FBBE0], v3);
    *(_DWORD *)(a1 + 40) = 0;
  }

  uint64_t v4 = *(__CFMachPort **)(a1 + 48);
  if (v4) {
    CFMachPortInvalidate(v4);
  }
}

void __MDTCopierFinalize(void *a1)
{
  int v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  mach_port_name_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  int v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  id v6 = (const void *)a1[9];
  if (v6) {
    CFRelease(v6);
  }
  int v7 = (const void *)a1[10];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)a1[11];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[12];
  if (v9) {
    CFRelease(v9);
  }
}

__CFString *__MDTCopierCopyDescription(void *a1)
{
  int v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<MDTCopier %p [%p]> {\n", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"RunLoopSource: %p", a1[4]);
  CFStringAppendFormat(Mutable, 0LL, @"Source: %@", a1[7]);
  CFStringAppendFormat(Mutable, 0LL, @"Dest: %@", a1[8]);
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

CFDictionaryRef __MDTCreateErrorFromPropertyList(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t v1 = result;
    Value = (const __CFString *)CFDictionaryGetValue(result, @"Domain");
    mach_port_name_t v3 = (const __CFNumber *)CFDictionaryGetValue(v1, @"Code");
    uint64_t v4 = (const __CFDictionary *)CFDictionaryGetValue(v1, @"UserInfo");
    uint64_t result = 0LL;
    CFIndex valuePtr = 0LL;
    if (Value)
    {
      if (v3)
      {
        CFNumberGetValue(v3, kCFNumberLongType, &valuePtr);
        return CFErrorCreate(0LL, Value, valuePtr, v4);
      }
    }
  }

  return result;
}

CFURLRef __MDTCreateURLFromPropertyList(const __CFDictionary *a1)
{
  if (a1 && (Value = (const __CFString *)CFDictionaryGetValue(a1, @"URL")) != 0LL) {
    return CFURLCreateWithString(0LL, Value, 0LL);
  }
  else {
    return 0LL;
  }
}

CFDataRef __MDTUnserializePropertyList(CFDataRef theData)
{
  uint64_t v1 = theData;
  if (theData)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(v1);
    uint64_t v4 = CFReadStreamCreateWithBytesNoCopy(0LL, BytePtr, Length, (CFAllocatorRef)*MEMORY[0x189604DC8]);
    if (v4)
    {
      int v5 = v4;
      CFReadStreamOpen(v4);
      CFIndex v6 = CFDataGetLength(v1);
      uint64_t v1 = (const __CFData *)CFPropertyListCreateWithStream(0LL, v5, v6, 0LL, &format, 0LL);
      CFReadStreamClose(v5);
      CFRelease(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return v1;
}

uint64_t MDT_create_session(mach_port_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  int v13 = 1;
  int v14 = a2;
  int v16 = 1114112;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x38E38E3900000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v8 = mach_msg(&msg, 3, 0x28u, 0x3Cu, reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v8)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v9 = 4294966988LL;
      }

      else if (msg.msgh_id == 954437277)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v9 = 4294966996LL;
          if (v13 == 1 && msg.msgh_size == 52 && !msg.msgh_remote_port && HIWORD(v16) << 16 == 1114112)
          {
            uint64_t v9 = 0LL;
            int v10 = v17;
            *a3 = v14;
            *a4 = v10;
            return v9;
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v9 = 4294966996LL;
          if (v15)
          {
            if (msg.msgh_remote_port) {
              uint64_t v9 = 4294966996LL;
            }
            else {
              uint64_t v9 = v15;
            }
          }
        }

        else
        {
          uint64_t v9 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v9 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v9;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v9;
}

uint64_t MDT_start(uint64_t a1)
{
  mach_port_t v1 = MEMORY[0x1895F8858](a1);
  int v4 = v3;
  CFIndex v6 = v5;
  int v8 = v7;
  int v10 = v9;
  uint64_t v12 = v11;
  mach_port_t v13 = v1;
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v33 = *MEMORY[0x1895F8468];
  int v14 = MEMORY[0x1895FBEC0];
  if (MEMORY[0x1895FBEC0]) {
    int v15 = mig_strncpy_zerofill(v36, v2, 1024);
  }
  else {
    int v15 = mig_strncpy(v36, v2, 1024);
  }
  int v34 = 0;
  int v35 = v15;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  int v17 = (char *)&v32 + v16 - 1024;
  uint64_t v18 = &v36[v16 + 8];
  if (v14) {
    int v19 = mig_strncpy_zerofill(v18, v12, 1024);
  }
  else {
    int v19 = mig_strncpy(v18, v12, 1024);
  }
  *((_DWORD *)v17 + 267) = v19;
  *((_DWORD *)v17 + 266) = 0;
  uint64_t v20 = (v19 + 3) & 0xFFFFFFFC;
  size_t v21 = &v17[v20];
  uint64_t v22 = (uint64_t)&v17[v20 - 1024];
  unint64_t v23 = v21 + 1080;
  if (v14) {
    int v24 = mig_strncpy_zerofill(v23, v10, 1024);
  }
  else {
    int v24 = mig_strncpy(v23, v10, 1024);
  }
  *(_DWORD *)(v22 + 2100) = v24;
  *(_DWORD *)(v22 + 2096) = 0;
  uint64_t v25 = (v24 + 3) & 0xFFFFFFFC;
  uint64_t v26 = v22 + v25;
  uint64_t v27 = v22 + v25 - 1024;
  *(_DWORD *)(v26 + 2104) = v8;
  id v28 = (char *)(v26 + 2116);
  if (v14) {
    int v29 = mig_strncpy_zerofill(v28, v6, 1024);
  }
  else {
    int v29 = mig_strncpy(v28, v6, 1024);
  }
  *(_DWORD *)(v27 + 3136) = v29;
  *(_DWORD *)(v27 + 3132) = 0;
  uint64_t v30 = (v29 + 3) & 0xFFFFFFFC;
  *(_DWORD *)(v27 + v30 + 3140) = v4;
  v32.msgh_bits = 19;
  v32.msgh_remote_port = v13;
  v32.msgh_local_port = 0;
  v32.msgh_voucher_port = 0;
  v32.msgh_id = 954437179;
  if (MEMORY[0x1895FD5F8]) {
    voucher_mach_msg_set(&v32);
  }
  return mach_msg(&v32, 1, v16 + v20 + v25 + v30 + 72, 0, 0, 0, 0);
}

uint64_t MDTR_server(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = *(_DWORD *)a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = *(_DWORD *)(a1 + 20) + 100;
  *(_DWORD *)(a2 + _Block_object_dispose((const void *)(v9 - 64), 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (*(_DWORD *)(a1 + 20) != 954437178)
  {
    uint64_t result = 0LL;
    *(void *)(a2 + 24) = *MEMORY[0x1895F8468];
    *(_DWORD *)(a2 + 32) = -303;
    return result;
  }

  if ((*(_DWORD *)a1 & 0x80000000) == 0 || *(_DWORD *)(a1 + 24) != 1 || *(_DWORD *)(a1 + 4) != 60)
  {
    int v7 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 24) = *MEMORY[0x1895F8468];
    return 1LL;
  }

  if (*(_BYTE *)(a1 + 39) != 1 || (unsigned int v5 = *(_DWORD *)(a1 + 40), v5 != *(_DWORD *)(a1 + 56)))
  {
    int v7 = -300;
    goto LABEL_10;
  }

  *(_DWORD *)(a2 + 32) = _status(*(_DWORD *)(a1 + 12), *(unsigned int *)(a1 + 52), *(const UInt8 **)(a1 + 28), v5);
  mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
  *(void *)(a1 + 2_Block_object_dispose((const void *)(v9 - 64), 8) = 0LL;
  *(_DWORD *)(a1 + 40) = 0;
  return 1LL;
}

uint64_t fsevent_default_log()
{
  if (fsevent_default_log_once != -1) {
    dispatch_once(&fsevent_default_log_once, &__block_literal_global);
  }
  return fsevent_default_log_logger;
}

os_log_t __fsevent_default_log_block_invoke()
{
  os_log_t result = os_log_create("com.apple.fsevents", "client");
  fsevent_default_log_logger = (uint64_t)result;
  return result;
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  if (!streamRef)
  {
    int v4 = (os_log_s *)fsevent_default_log();
    BOOL v3 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!v3) {
      return v3;
    }
    FSEventStreamStart_cold_1();
    goto LABEL_20;
  }

  if (*((_BYTE *)streamRef + 188))
  {
    int v2 = (os_log_s *)fsevent_default_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!v3) {
      return v3;
    }
    FSEventStreamStart_cold_3();
    goto LABEL_20;
  }

  if (!*((void *)streamRef + 27) && !*((void *)streamRef + 45))
  {
    int v8 = (os_log_s *)fsevent_default_log();
    BOOL v3 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!v3) {
      return v3;
    }
    FSEventStreamStart_cold_2();
    goto LABEL_20;
  }

  int v5 = *((_DWORD *)streamRef + 46);
  if ((v5 & 4) != 0 && !*((void *)streamRef + 54) && !*((void *)streamRef + 52) && !*((void *)streamRef + 53))
  {
LABEL_20:
    LOBYTE(v3) = 0;
    return v3;
  }

  if (!*((_DWORD *)streamRef + 49))
  {
    if (!register_with_server( (uint64_t)streamRef,  (uint64_t)"FSEventStreamStart",  *((_DWORD *)streamRef + 48),  *((_DWORD *)streamRef + 16),  *((_DWORD *)streamRef + 18),  *((const void ***)streamRef + 10),  *((void *)streamRef + 21),  *((void *)streamRef + 22),  v5,  (_DWORD *)streamRef + 49))
    {
      *((_BYTE *)streamRef + 18_Block_object_dispose((const void *)(v9 - 64), 8) = 1;
      if (*((void *)streamRef + 27))
      {
        context.version = 0LL;
        context.info = streamRef;
        context.retain = (const void *(__cdecl *)(const void *))_FSEventStreamRetainAndReturnSelf;
        context.release = (void (__cdecl *)(const void *))FSEventStreamRelease;
        context.copyDescription = (CFStringRef (__cdecl *)(const void *))FSEventStreamCopyDescription;
        uint64_t v9 = CFMachPortCreateWithPort( 0LL,  *((_DWORD *)streamRef + 49),  (CFMachPortCallBack)FSEventsClientPortCallback,  &context,  0LL);
        *((void *)streamRef + 26) = v9;
        CFMachPortSetInvalidationCallBack(v9, (CFMachPortInvalidationCallBack)server_gone_callback);
      }

      else
      {
        int v10 = (dispatch_object_s *)*((void *)streamRef + 45);
        if (v10)
        {
          resume_source(v10, (int *)streamRef + 92);
        }
      }

      goto LABEL_14;
    }

    goto LABEL_20;
  }

uint64_t register_with_server( uint64_t a1, uint64_t a2, int a3, int a4, int a5, const void **a6, uint64_t a7, uint64_t a8, int a9, _DWORD *a10)
{
  uint64_t v17 = FSEvents_connect();
  if ((_DWORD)v17) {
    return v17;
  }
  uint64_t v70 = a7;
  int v19 = (int *)malloc(4LL * a5);
  if (v19)
  {
    uint64_t v20 = v19;
    size_t v21 = malloc(4LL * a5);
    if (v21)
    {
      uint64_t v68 = a8;
      int v65 = a3;
      int v66 = a4;
      uint64_t v69 = (uint64_t)v21;
      uint64_t v22 = a5;
      if (a5 < 1)
      {
        int v23 = 0;
      }

      else
      {
        int v23 = 0;
        uint64_t v24 = a5;
        uint64_t v25 = (const char **)a6;
        uint64_t v26 = v20;
        do
        {
          uint64_t v27 = *v25++;
          int v28 = strlen(v27);
          *v26++ = v28;
          v23 += v28;
          --v24;
        }

        while (v24);
      }

      int v31 = v23 + a5;
      mach_msg_header_t v32 = (char *)malloc(v23 + a5);
      uint64_t v33 = (_DWORD *)v69;
      if (!v32)
      {
        int v47 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
          register_with_server_cold_3();
        }
        uint64_t v48 = 0LL;
        v49 = 0LL;
        uint64_t v17 = 4294967293LL;
        goto LABEL_48;
      }

      int v67 = v31;
      uint64_t v64 = v20;
      int v34 = 0;
      if (a5 >= 1)
      {
        do
        {
          *v33++ = v34;
          int v35 = *v20++;
          int v36 = v35 + 1;
          uint64_t v37 = *a6++;
          memcpy(&v32[v34], v37, v36);
          v34 += v36;
          --v22;
        }

        while (v22);
      }

      BOOL v38 = v34 == v67;
      int v39 = v67;
      if (!v38)
      {
        uint64_t v40 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
          register_with_server_cold_7();
        }
      }

      uint64_t v41 = *(void *)(a1 + 96);
      uint64_t v20 = v64;
      uint64_t v42 = v68;
      if (v41)
      {
        if (v41 < 1)
        {
          size_t v43 = 0LL;
        }

        else
        {
          size_t v43 = 0LL;
          uint64_t v44 = (const char **)(a1 + 104);
          uint64_t v45 = *(void *)(a1 + 96);
          do
          {
            uint64_t v46 = *v44++;
            v43 += strlen(v46) + 1;
            --v45;
          }

          while (v45);
        }

        uint64_t v50 = malloc(4 * v41);
        if (!v50)
        {
          __int128 v58 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
            register_with_server_cold_5();
          }
          uint64_t v48 = 0LL;
          v49 = 0LL;
          uint64_t v17 = 4294967292LL;
          uint64_t v33 = (_DWORD *)v69;
          goto LABEL_48;
        }

        uint64_t v48 = v50;
        int v63 = a5;
        char v51 = (char *)malloc(v43);
        if (!v51)
        {
          __int128 v59 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
            register_with_server_cold_6();
          }
          v49 = 0LL;
          uint64_t v17 = 4294967291LL;
          uint64_t v33 = (_DWORD *)v69;
          goto LABEL_48;
        }

        v49 = v51;
        if (v41 < 1)
        {
          int v39 = v67;
        }

        else
        {
          uint64_t v52 = 0LL;
          int v53 = 0;
          uint64_t v54 = v48;
          uint64_t v55 = a1 + 104;
          do
          {
            v54[v52] = v53;
            size_t v56 = strlen(*(const char **)(v55 + 8 * v52));
            int v57 = v56 + 1;
            memcpy(&v49[v53], *(const void **)(v55 + 8 * v52), v56 + 1);
            v53 += v57;
            ++v52;
          }

          while (v41 != v52);
          uint64_t v20 = v64;
          uint64_t v42 = v68;
          int v39 = v67;
          uint64_t v48 = v54;
        }
      }

      else
      {
        int v63 = a5;
        v49 = 0LL;
        uint64_t v48 = 0LL;
        LODWORD(v43) = 0;
      }

      int v62 = v41;
      int v61 = v41;
      uint64_t v33 = (_DWORD *)v69;
      uint64_t v17 = f2d_register_rpc( FSEvents_f2d_public_port,  v65,  v66,  v63,  v69,  v63,  (uint64_t)v32,  v39,  v61,  (uint64_t)v48,  v62,  (uint64_t)v49,  v43,  v42,  a9,  v70,  a10);
      if ((_DWORD)v17)
      {
        __int128 v60 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
          register_with_server_cold_4();
        }
      }

LABEL_48:
      free(v20);
      free(v33);
      if (v32) {
        free(v32);
      }
      if (v48) {
        free(v48);
      }
      if (v49) {
        free(v49);
      }
      return v17;
    }

    uint64_t v30 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      register_with_server_cold_2();
    }
    free(v20);
    return 4294967294LL;
  }

  else
  {
    int v29 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      register_with_server_cold_1();
    }
    return 0xFFFFFFFFLL;
  }

            v49[0] = MEMORY[0x1895F87A8];
            v49[1] = 3221225472LL;
            v49[2] = __123___LSDisplayNameConstructor_ConstructForAnyFile__displayNameConstructorsWithContextIfNeeded_bundle_bundleClass_node_error___block_invoke;
            v49[3] = &unk_189D75EB8;
            uint64_t v37 = v25;
            size_t v56 = 1;
            uint64_t v50 = v37;
            int v53 = v48;
            char v51 = v20;
            uint64_t v54 = a3;
            int v57 = v13;
            uint64_t v52 = v11;
            uint64_t v55 = a5;
            [v24 enumerateKeysAndObjectsUsingBlock:v49];

            goto LABEL_49;
          }

          if (a7)
          {
            int v61 = *MEMORY[0x189607490];
            v62[0] = @"node had unregistered personality but cannot do IO to localize its name";
            [MEMORY[0x189603F68] dictionaryWithObjects:v62 forKeys:&v61 count:1];
            mach_msg_header_t v32 = (void *)objc_claimAutoreleasedReturnValue();
            _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  5LL,  (uint64_t)"+[_LSDisplayNameConstructor(ConstructForAnyFile) displayNameConstructorsWithContextIfNeeded:bundl e:bundleClass:node:error:]",  628LL,  v32);
            *a7 = (id)objc_claimAutoreleasedReturnValue();
          }
        }

        else if (a7)
        {
          LaunchServices::Database::Context::error((id *)&a3->_contextPointer);
          uint64_t v16 = 0LL;
          *a7 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_55;
        }

unsigned int *_FSEventStreamRetainAndReturnSelf(unsigned int *a1)
{
  if (a1)
  {
    do
      unsigned int v2 = __ldaxr(a1);
    while (__stlxr(v2 + 1, a1));
  }

  else
  {
    BOOL v3 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamRetainAndReturnSelf_cold_1();
    }
  }

  return a1;
}

void FSEventStreamRelease(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    do
    {
      unsigned int v1 = __ldaxr((unsigned int *)streamRef);
      BOOL v2 = __OFSUB__(v1, 1);
      signed int v3 = v1 - 1;
    }

    while (__stlxr(v3, (unsigned int *)streamRef));
    if ((v3 < 0) ^ v2 | (v3 == 0))
    {
      if ((*(_DWORD *)streamRef & 0x80000000) != 0)
      {
        int v5 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          FSEventStreamRelease_cold_2(v5, v6, v7, v8, v9, v10, v11, v12);
        }
      }

      else
      {
        _FSEventStreamDeallocate((char *)streamRef);
      }
    }
  }

  else
  {
    int v4 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      FSEventStreamRelease_cold_1();
    }
  }

CFStringRef FSEventStreamCopyDescription(ConstFSEventStreamRef streamRef)
{
  if (!streamRef)
  {
    uint64_t v17 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyDescription_cold_1();
    }
    return 0LL;
  }

  BOOL v2 = (char *)malloc((*((_DWORD *)streamRef + 18) << 10) + 1024);
  if (!v2)
  {
    uint64_t v18 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyDescription_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    return 0LL;
  }

  signed int v3 = v2;
  int v4 = &v2[sprintf(v2, "FSEventStreamRef @ %p:\n", streamRef)];
  int v5 = &v4[sprintf(v4, "   allocator = %p\n", *((const void **)streamRef + 1))];
  uint64_t v6 = &v5[sprintf(v5, "   callback = %p\n", *((const void **)streamRef + 2))];
  uint64_t v7 = &v6[sprintf( v6,  "   context = {%lu, %p, %p, %p, %p}\n",  *((void *)streamRef + 3),  *((const void **)streamRef + 4),  *((const void **)streamRef + 5),  *((const void **)streamRef + 6),  *((const void **)streamRef + 7))];
  uint64_t v8 = &v7[sprintf(v7, "   numPathsToWatch = %lu\n", *((void *)streamRef + 9))];
  uint64_t v9 = &v8[sprintf(v8, "   pathsToWatch = %p\n", *((const void **)streamRef + 10))];
  if (*((uint64_t *)streamRef + 9) >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      v9 += sprintf( v9,  "        pathsToWatch[%d] = '%s'\n",  v10,  *(const char **)(*((void *)streamRef + 10) + 8 * v10));
      ++v10;
    }

    while (*((void *)streamRef + 9) > v10);
  }

  uint64_t v11 = &v9[sprintf(v9, "   latestEventId = %lld\n", *((void *)streamRef + 21))];
  uint64_t v12 = &v11[sprintf(v11, "   latency = %llu (microseconds)\n", *((void *)streamRef + 22))];
  mach_port_t v13 = &v12[sprintf(v12, "   flags = 0x%08x\n", *((_DWORD *)streamRef + 46))];
  int v14 = sprintf(v13, "\trunLoop = %p\n", *((const void **)streamRef + 28));
  sprintf(&v13[v14], "\trunLoopMode = %p\n", *((const void **)streamRef + 29));
  int v15 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], v3, 0x8000100u);
  free(v3);
  return v15;
}

void FSEventsClientPortCallback()
{
  unsigned __int8 v0 = (os_log_s *)fsevent_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    FSEventsClientPortCallback_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
  }
}

void server_gone_callback(uint64_t a1, uint64_t a2)
{
}

BOOL create_f2d_private_port_source(uint64_t a1)
{
  uintptr_t v2 = *(unsigned int *)(a1 + 196);
  uint64_t v3 = dispatch_source_create(MEMORY[0x1895F8B48], v2, 1uLL, *(dispatch_queue_t *)(a1 + 352));
  if (v3)
  {
    FSEventStreamRetain((FSEventStreamRef)a1);
    dispatch_set_qos_class_fallback();
    uint64_t v4 = MEMORY[0x1895F87A8];
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 0x40000000LL;
    handler[2] = __create_f2d_private_port_source_block_invoke;
    handler[3] = &__block_descriptor_tmp_52;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    v6[0] = v4;
    v6[1] = 0x40000000LL;
    v6[2] = __create_f2d_private_port_source_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_53;
    int v7 = v2;
    v6[4] = v3;
    v6[5] = a1;
    dispatch_source_set_cancel_handler(v3, v6);
    *(void *)(a1 + 376) = v3;
    *(_DWORD *)(a1 + 384) = 1;
  }

  return v3 != 0LL;
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    if (*((_BYTE *)streamRef + 188))
    {
      if (*((_DWORD *)streamRef + 49))
      {
        uintptr_t v2 = (dispatch_object_s *)*((void *)streamRef + 45);
        if (v2 && *((_DWORD *)streamRef + 92) == 3)
        {
          dispatch_suspend(v2);
          *((_DWORD *)streamRef + 92) = 2;
        }

        uint64_t v3 = *((void *)streamRef + 47);
        if (v3)
        {
          cancel_source((dispatch_object_s **)streamRef + 47, (int *)streamRef + 96);
          *((_DWORD *)streamRef + 49) = 0;
        }

        uint64_t v4 = (__CFMachPort *)*((void *)streamRef + 26);
        if (v4)
        {
          CFMachPortSetInvalidationCallBack(v4, 0LL);
          CFMachPortInvalidate(*((CFMachPortRef *)streamRef + 26));
          CFRelease(*((CFTypeRef *)streamRef + 26));
          *((void *)streamRef + 26) = 0LL;
        }

        if (!v3)
        {
          dispose_f2d_private_port(*((_DWORD *)streamRef + 49));
          *((_DWORD *)streamRef + 49) = 0;
        }

        uint64_t v5 = (__CFFileDescriptor *)*((void *)streamRef + 52);
        if (v5) {
          CFFileDescriptorDisableCallBacks(v5, 1uLL);
        }
        uint64_t v6 = (dispatch_object_s *)*((void *)streamRef + 54);
        if (v6)
        {
          if (*((_DWORD *)streamRef + 110) == 3)
          {
            dispatch_suspend(v6);
            *((_DWORD *)streamRef + 110) = 2;
          }
        }

        *((_BYTE *)streamRef + 18_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
      }

      else
      {
        uint64_t v8 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          FSEventStreamStop_cold_2();
        }
      }
    }
  }

  else
  {
    int v7 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      FSEventStreamStop_cold_1();
    }
  }

void dispose_f2d_private_port(mach_port_name_t a1)
{
  kern_return_t v3;
  mach_error_t v4;
  os_log_s *v5;
  if (a1)
  {
    if (f2d_unregister_rpc(a1))
    {
      uintptr_t v2 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        dispose_f2d_private_port_cold_2();
      }
    }

    else
    {
      uint64_t v3 = mach_port_deallocate(*MEMORY[0x1895FBBE0], a1);
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          dispose_f2d_private_port_cold_1(v4);
        }
      }
    }
  }

uint64_t implementation_callback_rpc( int a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5, int a6, __CFArray *a7, int a8, char *a9, int a10)
{
  uint64_t v15 = a2;
  uint64_t v239 = *MEMORY[0x1895F89C0];
  int valuePtr = a1;
  if ((_DWORD)a2 != a4)
  {
    uint64_t v16 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_18();
    }
  }

  if ((_DWORD)v15 != a6)
  {
    uint64_t v17 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_17();
    }
  }

  if ((_DWORD)v15 == a8 || (uint64_t v18 = (os_log_s *)fsevent_default_log(), !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)))
  {
    if ((_DWORD)v15) {
      goto LABEL_10;
    }
LABEL_89:
    v105 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_1(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    return 4294967278LL;
  }

  implementation_callback_rpc_cold_16();
  if (!(_DWORD)v15) {
    goto LABEL_89;
  }
LABEL_10:
  uint64_t v19 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFNumberRef v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberIntType, &valuePtr);
  if (!v20)
  {
    int v36 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_2(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    return 4294967279LL;
  }

  CFNumberRef v21 = v20;
  pthread_mutex_lock(&FSEvents_streamDict_mutex);
  Value = (char *)CFDictionaryGetValue((CFDictionaryRef)FSEvents_streamDict, v21);
  pthread_mutex_unlock(&FSEvents_streamDict_mutex);
  CFRelease(v21);
  if (!Value)
  {
    uint64_t v45 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_3(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    return 4294967286LL;
  }

  *(void *)&__int128 v224 = a3;
  uint64_t v23 = 0LL;
  int v24 = 0;
  LODWORD(v25) = 0;
  LODWORD(v229) = a10;
  v228 = a9;
  do
  {
    unsigned int v26 = *(_DWORD *)&a5[v23];
    int v27 = (v26 >> 29) | 4;
    if ((v26 & 0x80000000) == 0) {
      int v27 = (v26 >> 29) & 3;
    }
    int v28 = (v26 << 8) & 0x1000;
    if ((v26 & 0x20) != 0) {
      int v28 = 4096;
    }
    int8x16_t v29 = vandq_s8( (int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v26), (uint32x4_t)xmmword_183FBEE60),  (int8x16_t)xmmword_183FBEE70);
    int8x8_t v30 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
    unsigned __int32 v31 = v30.i32[0] | v26 & 0x100000 | v30.i32[1] | (v26 >> 4) & 0x40000 | (((v26 >> 19) & 1) << 21) | (v26 << 8) & 0x400F00 | v28 | v27;
    if ((v26 & 0x40) != 0) {
      v31 |= 0xA000u;
    }
    int v32 = (v26 << 6) & 0x8000;
    if ((v26 & 0x400) != 0) {
      int v32 = 0x8000;
    }
    *(_DWORD *)&a5[v23] = (v26 >> 2) & 0x80000 | (((v26 >> 8) & 1) << 14) | (((v26 >> 7) & 1) << 8) | v32 | v31;
    if ((v31 & 6) != 0)
    {
      int v33 = *((_DWORD *)Value + 18);
      int v24 = 1;
    }

    else
    {
      int v33 = 1;
    }

    size_t v25 = (v33 + v25);
    v23 += 4LL;
  }

  while (4LL * v15 != v23);
  int v34 = *((_DWORD *)Value + 46);
  if ((v34 & 0x40) != 0)
  {
    int v35 = calloc(v25, 8uLL);
    if ((*((_DWORD *)Value + 46) & 0x100) != 0) {
      goto LABEL_27;
    }
LABEL_35:
    v227 = 0LL;
    goto LABEL_36;
  }

  int v35 = 0LL;
  if ((v34 & 0x100) == 0) {
    goto LABEL_35;
  }
LABEL_27:
  v227 = calloc(v25, 4uLL);
LABEL_36:
  if ((_DWORD)v15 == 1 && (*a5 & 0x10) != 0)
  {
    if (!Value[190]) {
      return 0LL;
    }
    Value[190] = 0;
  }

  if (!Value[188]) {
    return 4294966297LL;
  }
  v226 = (const char **)malloc(8LL * v25);
  if (!v226)
  {
    __int128 v85 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_4(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    v93 = 0LL;
    uint64_t v44 = 4294967285LL;
    goto LABEL_222;
  }

  int64_t v218 = v15;
  int v53 = calloc(v25, 4uLL);
  v222 = v53;
  if (!v53)
  {
    v94 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_5(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    v102 = 0LL;
    CFArrayRef v103 = 0LL;
    v104 = 0LL;
    int v57 = 0LL;
    __int128 v60 = 0LL;
    uint64_t v44 = 4294967285LL;
    goto LABEL_205;
  }

  uint64_t v55 = v53;
  if (!v24)
  {
    if (!(_DWORD)v25)
    {
      __int128 v60 = a7;
      int v57 = a5;
      goto LABEL_133;
    }

    v223 = a7;
    uint64_t v216 = v15;
    CFAllocatorRef v220 = v19;
    LODWORD(v217) = 0;
    v113 = v35;
    v114 = (int *)(v224 + 4);
    *(void *)&__int128 v54 = 136315394LL;
    __int128 v224 = v54;
    v115 = v226;
    v116 = v227;
    size_t v117 = v25;
    v225 = v113;
    unsigned int v118 = v229;
    while (1)
    {
      if (*(v114 - 1) >= v118)
      {
        v119 = (os_log_s *)fsevent_default_log();
        BOOL v120 = os_log_type_enabled(v119, OS_LOG_TYPE_ERROR);
        unsigned int v118 = v229;
        if (v120)
        {
          *(_DWORD *)id buf = v224;
          v236 = "implementation_callback_rpc";
          __int16 v237 = 2080;
          v238 = "path_offsets[i] < paths_blobCnt";
          _os_log_error_impl(&dword_183E58000, v119, OS_LOG_TYPE_ERROR, "%s(): failed assertion '%s'\n", buf, 0x16u);
          unsigned int v118 = v229;
        }
      }

      uint64_t v121 = *(v114 - 1);
      else {
        v122 = &v228[v121];
      }
      *v115 = v122;
      if (v225)
      {
        int v123 = strlen(v122);
        unsigned int v118 = v229;
        int v124 = (int)v229;
        if ((_DWORD)v25 != 1)
        {
          int v124 = (int)v229;
          if ((_DWORD)v117 != 1) {
            int v124 = *v114;
          }
        }

        int v125 = v121 + v123 + 1;
        if (v125 == v124)
        {
          uint64_t v126 = 0LL;
        }

        else
        {
          uint64_t v126 = *(void *)&v228[v125];
        }

        void *v113 = v126;
      }

LABEL_110:
      if (v227)
      {
        int v127 = strlen(v122);
        unsigned int v118 = v229;
        int v128 = (int)v229;
        if ((_DWORD)v25 != 1)
        {
          int v128 = (int)v229;
          if ((_DWORD)v117 != 1) {
            int v128 = *v114;
          }
        }

        int v129 = v121 + v127 + 9;
        if (v129 == v128)
        {
          int v130 = 0;
LABEL_118:
          _DWORD *v116 = v130;
          goto LABEL_119;
        }

        if (v129 + 4LL <= (unint64_t)v128)
        {
          int v130 = *(_DWORD *)&v228[v129];
          goto LABEL_118;
        }
      }

LABEL_119:
      ++v116;
      ++v113;
      ++v114;
      ++v115;
      if (!--v117)
      {
        uint64_t v55 = v222;
        __int128 v60 = v223;
        int v57 = a5;
LABEL_128:
        int v24 = (int)v217;
        int v35 = v225;
        uint64_t v19 = v220;
        LODWORD(v15) = v216;
        goto LABEL_133;
      }
    }
  }

  v223 = a7;
  size_t v56 = malloc(4 * v25);
  if (!v56)
  {
    v132 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_13(v132, v133, v134, v135, v136, v137, v138, v139);
    }
    v102 = 0LL;
    CFArrayRef v103 = 0LL;
    v104 = 0LL;
    int v57 = 0LL;
    __int128 v60 = 0LL;
    uint64_t v44 = 4294967281LL;
    goto LABEL_205;
  }

  int v57 = v56;
  __int128 v58 = (__CFArray *)malloc(8LL * v25);
  if (!v58)
  {
    v140 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_14(v140, v141, v142, v143, v144, v145, v146, v147);
    }
    v102 = 0LL;
    CFArrayRef v103 = 0LL;
    v104 = 0LL;
    __int128 v60 = 0LL;
    uint64_t v44 = 4294967280LL;
    goto LABEL_205;
  }

  __int128 v60 = v58;
  CFAllocatorRef v220 = v19;
  v225 = v35;
  LODWORD(v217) = v24;
  uint64_t v61 = v15;
  uint64_t v62 = 0LL;
  unsigned int v63 = 0;
  uint64_t v216 = v61;
  else {
    uint64_t v64 = v61;
  }
  *(void *)&__int128 v59 = 136315394LL;
  __int128 v215 = v59;
  unsigned int v65 = v229;
  *(void *)&__int128 v219 = v64;
  do
  {
    int v66 = *(_DWORD *)&a5[4 * v62];
    uint64_t v67 = *((void *)v223 + v62);
    if ((v66 & 6) == 0)
    {
      unsigned int v71 = *(_DWORD *)(v224 + 4 * v62);
      LODWORD(v221) = v63;
      if (v71 >= v65)
      {
        v72 = (os_log_s *)fsevent_default_log();
        BOOL v73 = os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
        unsigned int v63 = v221;
        unsigned int v65 = v229;
        if (v73)
        {
          *(_DWORD *)id buf = v215;
          v236 = "implementation_callback_rpc";
          __int16 v237 = 2080;
          v238 = "path_offsets[i] < paths_blobCnt";
          _os_log_error_impl(&dword_183E58000, v72, OS_LOG_TYPE_ERROR, "%s(): failed assertion '%s'\n", buf, 0x16u);
          unsigned int v63 = v221;
          unsigned int v65 = v229;
        }
      }

      uint64_t v74 = *(unsigned int *)(v224 + 4 * v62);
      char v75 = &v228[v74];
      uint64_t v76 = v63;
      v226[v63] = v75;
      if (v225)
      {
        int v77 = strlen(v226[v62]);
        unsigned int v65 = v229;
        int v78 = (int)v229;
        if ((_DWORD)v25 != 1)
        {
          int v78 = (int)v229;
          if (v62 != v25) {
            int v78 = *(_DWORD *)(v224 + 4 * v62 + 4);
          }
        }

        int v79 = v74 + v77 + 1;
        unsigned int v63 = v221;
        if (v79 == v78)
        {
          uint64_t v80 = 0LL;
        }

        else
        {
          uint64_t v80 = *(void *)&v228[v79];
        }

        v225[v76] = v80;
      }

                int v78 = v76 & 0xFFFFFFFB;
LABEL_120:
                DWORD2(v133) = v78;
LABEL_121:
                LODWORD(v134) = v123;
                HIDWORD(v137) = 0;
                int v79 = CFDictionaryGetValue((CFDictionaryRef)v37, @"LSItemContentTypes");
                uint64_t v80 = CFArrayGetTypeID();
                if (v79 && (!v80 || CFGetTypeID(v79) == v80))
                {
                  int v81 = CFGetTypeID(v79);
                  if (v81 == CFArrayGetTypeID())
                  {
                    int v82 = CFArrayGetCount((CFArrayRef)v79);
                    if (v82 >= 1)
                    {
                      int v83 = 0LL;
                      int v84 = 0;
                      do
                      {
                        __int128 v85 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v79, v83);
                        uint64_t v86 = CFStringGetTypeID();
                        if (v85 && (!v86 || CFGetTypeID(v85) == v86))
                        {
                          uint64_t v87 = CFStringGetTypeID();
                          if (v87 == CFGetTypeID(v85)
                            && ((v52 & 8) == 0 || !UTTypeEqual(v85, @"com.apple.application")))
                          {
                            active = _UTGetActiveTypeForCFStringIdentifier(v39, v85, 0LL);
                            if (active && (*(_BYTE *)(active + 9) & 2) != 0)
                            {
                              DWORD2(v133) |= 0x400u;
                              int v84 = 1;
                            }

                            uint64_t v89 = _LSDatabaseCreateStringForCFString(v39, v85, 1);
                            if (v89)
                            {
                              _CSStringRelease();
                            }
                          }
                        }

                        ++v83;
                      }

                      while (v82 != v83);
                      goto LABEL_181;
                    }
                  }

                  goto LABEL_183;
                }

                if (*(_DWORD *)(v9 + 20) >= 2u)
                {
                  _LSDefaultLog();
                  uint64_t v99 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v100 = *(unsigned int *)(v9 + 20);
                    *(_DWORD *)id buf = 134218240;
                    *(void *)&uint8_t buf[4] = v123;
                    *(_WORD *)&_BYTE buf[12] = 2048;
                    *(void *)&buf[14] = v100;
                    _os_log_impl( &dword_183E58000,  v99,  OS_LOG_TYPE_INFO,  "Skipping legacy claim registration for bundle %llu because it's the wrong platform (is %llu)",  buf,  0x16u);
                  }

                  goto LABEL_183;
                }

                if (v115)
                {
                  uint64_t v90 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v37, v115);
                  uint64_t v91 = CFArrayGetTypeID();
                  if (v90 && (!v91 || CFGetTypeID(v90) == v91))
                  {
                    uint64_t v92 = CFArrayGetCount(v90);
                    if (v92 >= 1)
                    {
                      v93 = 0LL;
                      int v84 = 0;
                      do
                      {
                        v94 = (const __CFString *)CFArrayGetValueAtIndex(v90, v93);
                        uint64_t v95 = CFStringGetTypeID();
                        if (v94 && (!v95 || CFGetTypeID(v94) == v95))
                        {
                          uint64_t v96 = CFStringGetTypeID();
                          if (v96 == CFGetTypeID(v94) && (CFStringCompare(v94, @"app", 1uLL) || (v52 & 8) == 0))
                          {
                            uint64_t v97 = _LSDatabaseCreateStringForCFString(v39, v94, 1);
                            if (v97)
                            {
                              _CSStringRelease();
                            }

                            if (CFStringCompare(v94, @"*", 0LL))
                            {
                              if (*(_BYTE *)(*((void *)&v142 + 1) + 24LL))
                              {
                                *(void *)id buf = MEMORY[0x1895F87A8];
                                *(void *)&buf[8] = 3221225472LL;
                                *(void *)&uint8_t buf[16] = ___ZL23_LSRegisterDocumentTypeP11_LSDatabasejPK12LSBundleDataPK14__CFDictionaryP12NSDictionaryIP8NSStringPS7_IS9_S9_EEjP19LSBindingListBuffer_block_invoke;
                                *(void *)&buf[24] = &unk_189D729E8;
                                uint64_t v98 = v39;
                                *(void *)&v140 = v130;
                                *(void *)&uint64_t v139 = v98;
                                *((void *)&v139 + 1) = &v142;
                                _CSStringBindingEnumerate();
                              }
                            }

                            else
                            {
                              DWORD2(v133) |= 0x10u;
                              int v84 = 1;
                            }
                          }
                        }

                        ++v93;
                      }

                      while (v92 != v93);
LABEL_168:
                      uint64_t v101 = (const __CFArray *)CFDictionaryGetValue( (CFDictionaryRef)v37,  @"CFBundleTypeMIMETypes");
                      v102 = CFArrayGetTypeID();
                      if (v101 && (!v102 || CFGetTypeID(v101) == v102))
                      {
                        CFArrayRef v103 = CFArrayGetCount(v101);
                        if (v103 >= 1)
                        {
                          for (uint64_t k = 0LL; k != v103; ++k)
                          {
                            v105 = (const __CFString *)CFArrayGetValueAtIndex(v101, k);
                            uint64_t v106 = CFStringGetTypeID();
                            if (v105 && v106 && CFGetTypeID(v105) != v106) {
                              v105 = 0LL;
                            }
                            uint64_t v107 = _LSDatabaseCreateStringForCFString(v39, v105, 1);
                            if (v107)
                            {
                              _CSStringRelease();
                            }
                          }
                        }
                      }

LABEL_69:
      if (v227)
      {
        int v81 = strlen(v226[v62]);
        unsigned int v65 = v229;
        int v82 = (int)v229;
        if ((_DWORD)v25 != 1)
        {
          int v82 = (int)v229;
          if (v62 != v25) {
            int v82 = *(_DWORD *)(v224 + 4 * v62 + 4);
          }
        }

        int v83 = v74 + v81 + 9;
        unsigned int v63 = v221;
        if (v83 == v82)
        {
          int v84 = 0;
LABEL_77:
          v227[v76] = v84;
          goto LABEL_78;
        }

        if (v83 + 4LL <= (unint64_t)v82)
        {
          int v84 = *(_DWORD *)&v228[v83];
          goto LABEL_77;
        }
      }

    ++v15;
  }

  while (v130 != v15);
  if (values)
  {
    uint64_t v137 = values;
    operator delete(values);
  }

  if (keys)
  {
    v140 = keys;
    operator delete(keys);
  }

  if (v110)
  {
    LSPluginSendNotification(v21, (uint64_t)@"com.apple.LaunchServices.pluginsregistered", v110);
    CFRelease(v110);
  }

  uint64_t v19 = 0;
LABEL_70:
  if ((_BYTE)v1) {
    CFNumberRef v20 = v19 == 0;
  }
  else {
    CFNumberRef v20 = 1;
  }
  return !v20;
}

LABEL_79:
    ++v62;
  }

  while (v62 != v64);
  if (v63 == (_DWORD)v25) {
    goto LABEL_128;
  }
  v131 = (os_log_s *)fsevent_default_log();
  int v24 = (int)v217;
  int v35 = v225;
  LODWORD(v15) = v216;
  if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR)) {
    implementation_callback_rpc_cold_15();
  }
  uint64_t v55 = v222;
  uint64_t v19 = v220;
LABEL_133:
  uint64_t v148 = 0LL;
  unint64_t v149 = *((void *)Value + 21);
  if (v149 == -1LL) {
    unint64_t v149 = 0LL;
  }
  else {
    unsigned int v150 = v15;
  }
  uint64_t v151 = 8LL * v150;
  do
  {
    v148 += 8LL;
  }

  while (v151 != v148);
  *((void *)Value + 21) = v149;
  int v152 = *((_DWORD *)Value + 46);
  if ((v152 & 0x40) == 0)
  {
    if ((v152 & 1) == 0)
    {
      v104 = 0LL;
      goto LABEL_167;
    }

    v175 = (const void **)calloc(v25, 8uLL);
    if (!v175)
    {
      v196 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR)) {
        implementation_callback_rpc_cold_6(v196, v197, v198, v199, v200, v201, v202, v203);
      }
      v102 = 0LL;
      CFArrayRef v103 = 0LL;
      v104 = 0LL;
      uint64_t v44 = 4294967284LL;
      goto LABEL_205;
    }

    v102 = v175;
    v225 = v35;
    if ((_DWORD)v25)
    {
      uint64_t v176 = 0LL;
      while (1)
      {
        v177 = caller_path(v226[v176], v55[v176]);
        CFStringRef v178 = CFStringCreateWithFileSystemRepresentation(v19, v177);
        if (!v178) {
          break;
        }
        v102[v176++] = v178;
        if (v25 == v176) {
          goto LABEL_182;
        }
      }

      v204 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR)) {
        implementation_callback_rpc_cold_8();
      }
      CFArrayRef v103 = 0LL;
      v104 = 0LL;
      uint64_t v44 = 4294967283LL;
      int v35 = v225;
      goto LABEL_205;
    }

LABEL_182:
    CFArrayRef v179 = CFArrayCreate(v19, v102, v25, MEMORY[0x189605228]);
    if (v179)
    {
      CFArrayRef v103 = v179;
      v104 = 0LL;
      int v35 = v225;
LABEL_168:
      if (*((void *)Value + 2) && Value[188] && !Value[189])
      {
        FSEventStreamRetain((FSEventStreamRef)Value);
        int v167 = *((_DWORD *)Value + 46);
        if ((v167 & 0x40) != 0)
        {
          (*((void (**)(char *, void, size_t, __CFArray *, _DWORD *, __CFArray *))Value + 2))( Value,  *((void *)Value + 4),  v25,  v104,  v57,  v60);
        }

        else if ((v167 & 1) != 0)
        {
          (*((void (**)(char *, void, size_t, CFArrayRef, _DWORD *, __CFArray *))Value + 2))( Value,  *((void *)Value + 4),  v25,  v103,  v57,  v60);
        }

        else
        {
          v223 = v104;
          v225 = v35;
          LODWORD(v217) = v24;
          v228 = (char *)&v215;
          MEMORY[0x1895F8858]();
          v229 = (__CFDictionary *)((char *)&v215 - ((v168 + 15) & 0xFFFFFFFF0LL));
          if ((_DWORD)v25)
          {
            size_t v169 = v25;
            v170 = v229;
            v171 = v222;
            v172 = v226;
            do
            {
              v174 = *v172++;
              v173 = v174;
              LODWORD(v174) = *v171++;
              *(void *)v170 = caller_path(v173, (char)v174);
              v170 = (__CFDictionary *)((char *)v170 + 8);
              --v169;
            }

            while (v169);
          }

          (*((void (**)(char *, void, size_t, __CFDictionary *, _DWORD *, __CFArray *))Value + 2))( Value,  *((void *)Value + 4),  v25,  v229,  v57,  v60);
          int v24 = (int)v217;
          int v35 = v225;
          v104 = v223;
        }

        if (*((void *)Value + 45))
        {
          pthread_mutex_lock((pthread_mutex_t *)(Value + 240));
          pthread_cond_signal((pthread_cond_t *)(Value + 304));
          pthread_mutex_unlock((pthread_mutex_t *)(Value + 240));
        }

        FSEventStreamRelease((FSEventStreamRef)Value);
      }

      uint64_t v44 = 0LL;
      goto LABEL_205;
    }

    v205 = (os_log_s *)fsevent_default_log();
    int v35 = v225;
    if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_7(v205, v206, v207, v208, v209, v210, v211, v212);
    }
LABEL_187:
    CFArrayRef v103 = 0LL;
    v104 = 0LL;
    uint64_t v44 = 4294967282LL;
    goto LABEL_205;
  }

  CFMutableArrayRef Mutable = CFArrayCreateMutable(v19, v218, MEMORY[0x189605228]);
  if (!Mutable)
  {
    v180 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR)) {
      implementation_callback_rpc_cold_9(v180, v181, v182, v183, v184, v185, v186, v187);
    }
    v102 = 0LL;
    goto LABEL_187;
  }

  v104 = Mutable;
  if (!(_DWORD)v25)
  {
LABEL_167:
    CFArrayRef v103 = 0LL;
    v102 = 0LL;
    goto LABEL_168;
  }

  CFAllocatorRef v220 = v19;
  CFIndex v155 = 0LL;
  int64_t v218 = (int64_t)&v234;
  v217 = &v232;
  *(void *)&__int128 v154 = 136315394LL;
  __int128 v219 = v154;
  v228 = (char *)v35;
  v223 = Mutable;
  *(void *)&__int128 v224 = v227;
  v225 = v35;
  while (1)
  {
    v156 = v226[v155];
    int v157 = v222[v155];
    v229 = CFDictionaryCreateMutable(v220, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!v229) {
      break;
    }
    v158 = caller_path(v156, v157);
    CFStringRef v159 = CFStringCreateWithFileSystemRepresentation(v220, v158);
    if (v159)
    {
      CFStringRef v160 = v159;
      CFDictionaryAddValue(v229, @"path", v159);
      CFRelease(v160);
      int v35 = v225;
      v104 = v223;
    }

    else
    {
      os_log_t v221 = (os_log_t)fsevent_default_log();
      int v35 = v225;
      v104 = v223;
      if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)id buf = v219;
        v236 = "implementation_callback_rpc";
        __int16 v237 = 2080;
        v238 = v158;
        _os_log_error_impl( &dword_183E58000,  v221,  OS_LOG_TYPE_ERROR,  "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed",  buf,  0x16u);
      }
    }

    if ((*(_DWORD *)&a5[4 * v155] & 0x77FF00) != 0)
    {
      if (v35 && *(void *)v228)
      {
        CFNumberRef v161 = CFNumberCreate(v220, kCFNumberSInt64Type, v228);
        if (v161)
        {
          CFNumberRef v162 = v161;
          CFDictionaryAddValue(v229, @"fileID", v161);
          CFRelease(v162);
        }

        else
        {
          v163 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR)) {
            implementation_callback_rpc_cold_11(v233, (void *)v218, v163);
          }
        }
      }

      if (v227 && *(_DWORD *)v224)
      {
        CFNumberRef v164 = CFNumberCreate(v220, kCFNumberSInt32Type, (const void *)v224);
        if (v164)
        {
          CFNumberRef v165 = v164;
          CFDictionaryAddValue(v229, @"docID", v164);
          CFRelease(v165);
        }

        else
        {
          v166 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR)) {
            implementation_callback_rpc_cold_11(v231, v217, v166);
          }
        }
      }
    }

    CFArraySetValueAtIndex(v104, v155, v229);
    CFRelease(v229);
    ++v155;
    *(void *)&__int128 v224 = v224 + 4;
    v228 += 8;
    if (v25 == v155) {
      goto LABEL_167;
    }
  }

  v188 = (os_log_s *)fsevent_default_log();
  if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR)) {
    implementation_callback_rpc_cold_10(v188, v189, v190, v191, v192, v193, v194, v195);
  }
  v102 = 0LL;
  CFArrayRef v103 = 0LL;
  uint64_t v44 = 4294967281LL;
  int v35 = v225;
  v104 = v223;
LABEL_205:
  free(v226);
  if (v57 && v24) {
    free(v57);
  }
  if (v60 && v24) {
    free(v60);
  }
  if (v102)
  {
    if ((_DWORD)v25)
    {
      v213 = v102;
      do
      {
        if (!*v213) {
          break;
        }
        CFRelease(*v213++);
        --v25;
      }

      while (v25);
    }

    free(v102);
  }

  if (v103) {
    CFRelease(v103);
  }
  if (v104) {
    CFRelease(v104);
  }
  v93 = v222;
LABEL_222:
  if (v35) {
    free(v35);
  }
  free(v93);
  return v44;
}

const char *caller_path(const char *a1, char a2)
{
  uintptr_t v2 = a1;
  if (!(a2 & 3 | strncmp(a1, "/System/Volumes/Data/", 0x15uLL)))
  {
    if (!strncmp(v2 + 20, "/Device/", 8uLL)) {
      v2 += 27;
    }
    else {
      v2 += 20;
    }
  }

  return v2;
}

void FSEventStreamRetain(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    do
      unsigned int v1 = __ldaxr((unsigned int *)streamRef);
    while (__stlxr(v1 + 1, (unsigned int *)streamRef));
  }

  else
  {
    uintptr_t v2 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      FSEventStreamRetain_cold_1();
    }
  }

FSEventStreamEventId FSEventStreamGetLatestEventId(ConstFSEventStreamRef streamRef)
{
  if (streamRef) {
    return *((void *)streamRef + 21);
  }
  uintptr_t v2 = (os_log_s *)fsevent_default_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    FSEventStreamGetLatestEventId_cold_1();
  }
  return 0LL;
}

dev_t FSEventStreamGetDeviceBeingWatched(ConstFSEventStreamRef streamRef)
{
  if (streamRef) {
    return *((_DWORD *)streamRef + 16);
  }
  uintptr_t v2 = (os_log_s *)fsevent_default_log();
  dev_t result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    FSEventStreamGetDeviceBeingWatched_cold_1();
    return 0;
  }

  return result;
}

CFArrayRef FSEventStreamCopyPathsBeingWatched(ConstFSEventStreamRef streamRef)
{
  if (!streamRef)
  {
    uint64_t v11 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_1();
    }
    return 0LL;
  }

  uintptr_t v2 = (const void **)calloc(*((void *)streamRef + 9), 8uLL);
  if (!v2)
  {
    uint64_t v12 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    return 0LL;
  }

  uint64_t v3 = v2;
  CFIndex v4 = *((void *)streamRef + 9);
  uint64_t v5 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  if (v4 >= 1)
  {
    uint64_t v6 = 0LL;
    while (1)
    {
      CFStringRef v7 = CFStringCreateWithFileSystemRepresentation(v5, *(const char **)(*((void *)streamRef + 10) + 8 * v6));
      if (!v7) {
        break;
      }
      v3[v6++] = v7;
      CFIndex v4 = *((void *)streamRef + 9);
      if (v4 <= v6) {
        goto LABEL_7;
      }
    }

    CFNumberRef v20 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_3((void *)streamRef + 10, v6, v20);
    }
    goto LABEL_20;
  }

LABEL_7:
  CFArrayRef v8 = CFArrayCreate(v5, v3, v4, MEMORY[0x189605228]);
  if (!v8)
  {
    CFNumberRef v21 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      FSEventStreamCopyPathsBeingWatched_cold_4(v21, v22, v23, v24, v25, v26, v27, v28);
    }
LABEL_20:
    if (*((uint64_t *)streamRef + 9) >= 1)
    {
      uint64_t v29 = 0LL;
      do
      {
        int8x8_t v30 = v3[v29];
        if (!v30) {
          break;
        }
        CFRelease(v30);
        ++v29;
      }

      while (*((void *)streamRef + 9) > v29);
    }

    free(v3);
    return 0LL;
  }

  uint64_t v9 = v8;
  if (*((uint64_t *)streamRef + 9) >= 1)
  {
    uint64_t v10 = 0LL;
    do
      CFRelease(v3[v10++]);
    while (*((void *)streamRef + 9) > v10);
  }

  free(v3);
  return v9;
}
}

    *(void *)a3 = 4096LL;
    goto LABEL_8;
  }

  dev_t result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

  return v10;
}

    uint64_t v17 = -[_LSBundleProvider initWithURL:useCacheIfPossible:]( objc_alloc(&OBJC_CLASS____LSBundleProvider),  "initWithURL:useCacheIfPossible:",  v10,  1LL);
    uint64_t v18 = -[_LSStringLocalizer initWithBundleProvider:stringsFile:legacyLocalizationList:]( self,  "initWithBundleProvider:stringsFile:legacyLocalizationList:",  v17,  v11,  v6);
    self = (_LSStringLocalizer *)v17;
LABEL_9:

    uint64_t v16 = v18;
    goto LABEL_10;
  }

  _LSGetMainBundleURL();
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = v13;
  if (!v13) {
    goto LABEL_7;
  }
  uint64_t v15 = [v13 isEqual:v10];

  if (!v15) {
    goto LABEL_7;
  }
  uint64_t v16 = -[_LSStringLocalizer initWithCFBundle:stringsFile:legacyLocalizationList:]( self,  "initWithCFBundle:stringsFile:legacyLocalizationList:",  CFBundleGetMainBundle(),  v11,  v6);
LABEL_10:
  objc_autoreleasePoolPop(v12);

  return v16;
}

  return v7;
}

FSEventStreamRef FSEventStreamCreate( CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)_FSEventStreamCreate( "FSEventStreamCreate",  allocator,  (uint64_t)callback,  (__int128 *)&context->version,  0,  pathsToWatch,  sinceWhen,  (unint64_t)(latency * 1000000.0),  flags);
}

uint64_t _FSEventStreamCreate( const char *a1, CFAllocatorRef Default, uint64_t a3, __int128 *a4, int a5, CFArrayRef theArray, uint64_t a7, uint64_t a8, int a9)
{
  v81[127] = *MEMORY[0x1895F89C0];
  if ((a9 & 0x41) == 0x40)
  {
    uint64_t v9 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_1();
    }
    return 0LL;
  }

  CFIndex Count = CFArrayGetCount(theArray);
  if ((CFAllocatorRef)*MEMORY[0x189604DB0] == Default) {
    Default = CFAllocatorGetDefault();
  }
  uint64_t v16 = MEMORY[0x186E28C1C](Default, 456LL, 0LL);
  if (!v16)
  {
    uint64_t v49 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_2((uint64_t)a1, v49);
    }
    return 0LL;
  }

  uint64_t v17 = v16;
  *(void *)(v16 + 44_Block_object_dispose((const void *)(v9 - 64), 8) = 0LL;
  *(_OWORD *)(v16 + 416) = 0u;
  *(_OWORD *)(v16 + 432) = 0u;
  *(_OWORD *)(v16 + 384) = 0u;
  *(_OWORD *)(v16 + 400) = 0u;
  *(_OWORD *)(v16 + 352) = 0u;
  *(_OWORD *)(v16 + 36_Block_object_dispose((const void *)(v9 - 64), 8) = 0u;
  *(_OWORD *)(v16 + 320) = 0u;
  *(_OWORD *)(v16 + 336) = 0u;
  *(_OWORD *)(v16 + 28_Block_object_dispose((const void *)(v9 - 64), 8) = 0u;
  *(_OWORD *)(v16 + 304) = 0u;
  *(_OWORD *)(v16 + 256) = 0u;
  *(_OWORD *)(v16 + 272) = 0u;
  *(_OWORD *)(v16 + 224) = 0u;
  *(_OWORD *)(v16 + 240) = 0u;
  *(_OWORD *)(v16 + 192) = 0u;
  *(_OWORD *)(v16 + 20_Block_object_dispose((const void *)(v9 - 64), 8) = 0u;
  *(_OWORD *)(v16 + 160) = 0u;
  *(_OWORD *)(v16 + 176) = 0u;
  *(_OWORD *)(v16 + 12_Block_object_dispose((const void *)(v9 - 64), 8) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 4_Block_object_dispose((const void *)(v9 - 64), 8) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(void *)(v16 + _Block_object_dispose((const void *)(v9 - 64), 8) = Default;
  CFRetain(Default);
  *(void *)(v17 + 16) = a3;
  if (a4)
  {
    __int128 v18 = *a4;
    __int128 v19 = a4[1];
    *(void *)(v17 + 56) = *((void *)a4 + 4);
    *(_OWORD *)(v17 + 40) = v19;
    *(_OWORD *)(v17 + 24) = v18;
  }

  CFNumberRef v20 = *(void (**)(void))(v17 + 40);
  if (v20) {
    v20(*(void *)(v17 + 32));
  }
  *(_DWORD *)(v17 + 64) = a5;
  *(void *)(v17 + 72) = Count;
  *(void *)(v17 + 80) = MEMORY[0x186E28C1C](Default, 8 * Count, 0LL);
  *(void *)(v17 + 8_Block_object_dispose((const void *)(v9 - 64), 8) = MEMORY[0x186E28C1C](Default, 4 * Count, 0LL);
  CFNumberRef v21 = *(void **)(v17 + 80);
  if (!v21)
  {
    uint64_t v50 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_3((uint64_t)a1);
    }
    goto LABEL_89;
  }

  bzero(v21, 8 * Count);
  bzero(*(void **)(v17 + 88), 4 * Count);
  if ((a9 & 4) == 0)
  {
    *(_DWORD *)(v17 + 40_Block_object_dispose((const void *)(v9 - 64), 8) = -1;
    goto LABEL_14;
  }

  int v51 = kqueue();
  *(_DWORD *)(v17 + 40_Block_object_dispose((const void *)(v9 - 64), 8) = v51;
  if (v51 < 0)
  {
    __int128 v54 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_7();
    }
    goto LABEL_89;
  }

  uint64_t v52 = (void *)MEMORY[0x186E28C1C](Default, 32 * Count, 0LL);
  *(void *)(v17 + 392) = v52;
  if (!v52)
  {
    uint64_t v55 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_8((uint64_t)a1);
    }
    goto LABEL_89;
  }

  bzero(v52, 32 * Count);
  int v53 = (void *)MEMORY[0x186E28C1C](Default, 32 * Count, 0LL);
  *(void *)(v17 + 400) = v53;
  if (!v53)
  {
    __int128 v59 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamCreate_cold_9((uint64_t)a1);
    }
LABEL_89:
    _FSEventStreamDeallocate((char *)v17);
    return 0LL;
  }

  bzero(v53, 32 * Count);
LABEL_14:
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID != CFGetTypeID(ValueAtIndex))
      {
        size_t v56 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamCreate_cold_6(i, (uint64_t)a1);
        }
        goto LABEL_89;
      }

      if (!CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024LL))
      {
        int v57 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamCreate_cold_4();
        }
        goto LABEL_89;
      }

      if (a5)
      {
        int v25 = 1000;
        while (1)
        {
          int v26 = getfsstat(0LL, 0, 2);
          if (v26 < 0) {
            goto LABEL_33;
          }
          int v27 = 2168 * (v26 + 1);
          uint64_t v28 = (statfs *)malloc(2168LL * (v26 + 1));
          if (!v28) {
            goto LABEL_33;
          }
          uint64_t v29 = v28;
          unsigned int v30 = getfsstat(v28, v27, 2);
          if ((v30 & 0x80000000) == 0) {
            break;
          }
          free(v29);
          if (!--v25) {
            goto LABEL_33;
          }
        }

        if (!v30)
        {
LABEL_33:
          unsigned __int32 v31 = buffer;
          __strlcpy_chk();
LABEL_34:
          *(_DWORD *)(*(void *)(v17 + 88) + 4 * i) |= 2u;
          goto LABEL_35;
        }

        uint64_t v32 = 0LL;
        while (1)
        {
          int v33 = &v29[v32];
          if (v29[v32].f_fsid.val[0] == a5) {
            break;
          }
          if (v30 == ++v32)
          {
            unsigned __int32 v31 = buffer;
            __strlcpy_chk();
LABEL_64:
            free(v29);
            goto LABEL_34;
          }
        }

        f_mntonname = v33->f_mntonname;
        snprintf(__s, 0x400uLL, "%s/%s", v33->f_mntonname, buffer);
        if (realpath_DARWIN_EXTSN(__s, __s1))
        {
          size_t v47 = strlen(f_mntonname);
          if (__s1[v47] == 47) {
            unsigned __int32 v31 = &__s1[v47 + 1];
          }
          else {
            unsigned __int32 v31 = &__s1[v47];
          }
          goto LABEL_64;
        }

        free(v29);
      }

      else
      {
        unsigned __int32 v31 = __s1;
        if (fsevent_realpath(buffer, __s1)) {
          goto LABEL_35;
        }
      }

      if (buffer[0] == 47)
      {
        unsigned __int32 v31 = buffer;
        __strlcpy_chk();
      }

      else
      {
        unsigned __int32 v31 = __s1;
        getcwd(__s1, 0x400uLL);
        __strlcat_chk();
        __strlcat_chk();
      }

LABEL_35:
      size_t v34 = (int)(strlen(v31) + 1);
      *(void *)(*(void *)(v17 + 80) + 8 * i) = MEMORY[0x186E28C1C](Default, v34, 0LL);
      int v35 = *(char **)(*(void *)(v17 + 80) + 8 * i);
      if (!v35)
      {
        __int128 v58 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamCreate_cold_5((uint64_t)a1);
        }
        goto LABEL_89;
      }

      strlcpy(v35, v31, v34);
      if (*(void *)buffer == 0x2F6D65747379532FLL
        && v81[0] == 0x2F73656D756C6F56LL
        && *(void *)((char *)v81 + 5) == 0x2F617461442F7365LL)
      {
        *(_DWORD *)(*(void *)(v17 + 88) + 4 * i) |= 1u;
        if ((a9 & 4) == 0) {
          continue;
        }
      }

      else if ((a9 & 4) == 0)
      {
        continue;
      }

      uint64_t v38 = *(void *)(v17 + 392);
      CFIndex v39 = v38 + 32 * i;
      *(_DWORD *)(v39 + 4) = -1;
      if (!*(_DWORD *)(v17 + 64) || __s1[0] == 47)
      {
        *(void *)(v39 + 24) = strdup(__s1);
      }

      else
      {
        if (!realpath_DARWIN_EXTSN(*(const char **)(*(void *)(v17 + 80) + 8 * i), __s))
        {
          getcwd(__s, 0x400uLL);
          int v40 = strlen(__s);
          __s[v40] = 47;
          strlcpy(&__s[v40 + 1], *(const char **)(*(void *)(v17 + 80) + 8 * i), 1024LL - (v40 + 1));
        }

        *(void *)(*(void *)(v17 + 392) + 32 * i + 24) = strdup(__s);
        uint64_t v38 = *(void *)(v17 + 392);
      }

      uint64_t v41 = (_DWORD *)(v38 + 32 * i);
      _DWORD *v41 = 8;
      int v42 = watch_path(a1, *(_DWORD *)(v17 + 408), __s1, *(void *)(v17 + 400) + 32 * i, (uint64_t)v41, i);
      if (v42)
      {
        int v43 = v42;
        uint64_t v44 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          uint64_t v48 = strerror(v43);
          *(_DWORD *)__s = 136316674;
          uint64_t v68 = a1;
          __int16 v69 = 2080;
          uint64_t v70 = "_FSEventStreamCreate";
          __int16 v71 = 2080;
          v72 = v31;
          __int16 v73 = 2080;
          *(void *)uint64_t v74 = __s1;
          *(_WORD *)&v74[8] = 1024;
          *(_DWORD *)&v74[10] = i;
          __int16 v75 = 1024;
          int v76 = v43;
          __int16 v77 = 2080;
          int v78 = v48;
          _os_log_error_impl( &dword_183E58000,  v44,  OS_LOG_TYPE_ERROR,  "%s: %s: ERROR: watch_path() failed for srcPath='%s' resolvedPath='%s' index=%d (%d):(%s)",  (uint8_t *)__s,  0x40u);
        }
      }

      int v45 = watch_all_parents((uint64_t)a1, *(_DWORD *)(v17 + 408), __s1, *(void *)(v17 + 392) + 32 * i, i);
      if (v45)
      {
        int v60 = v45;
        uint64_t v61 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          unsigned int v63 = strerror(v60);
          *(_DWORD *)__s = 136316162;
          uint64_t v68 = a1;
          __int16 v69 = 2080;
          uint64_t v70 = "_FSEventStreamCreate";
          __int16 v71 = 2080;
          v72 = v31;
          __int16 v73 = 1024;
          *(_DWORD *)uint64_t v74 = v60;
          *(_WORD *)&v74[4] = 2080;
          *(void *)&v74[6] = v63;
          _os_log_error_impl( &dword_183E58000,  v61,  OS_LOG_TYPE_ERROR,  "%s: %s: ERROR: watch_all_parents() failed for '%s' (%d):(%s)",  (uint8_t *)__s,  0x30u);
        }

        goto LABEL_89;
      }
    }
  }

  *(void *)(v17 + 16_Block_object_dispose((const void *)(v9 - 64), 8) = a7;
  *(void *)(v17 + 176) = a8;
  *(_DWORD *)(v17 + 184) = a9;
  *(_BYTE *)(v17 + 18_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  *(_BYTE *)(v17 + 190) = a7 != -1;
  *(void *)(v17 + 216) = 0LL;
  *(void *)(v17 + 360) = 0LL;
  *(void *)(v17 + 432) = 0LL;
  *(void *)(v17 + 192) = 0LL;
  *(void *)(v17 + 200) = 0LL;
  *(_DWORD *)uint64_t v17 = 1;
  return v17;
}

      ++v7;
      --v6;
      ++v8;
    }

    while (a3 != v7);
  }

      uint64_t v46 = objc_opt_class();
      size_t v47 = [v186 objectForKey:@"RequireOpenInPlace"];
      uint64_t v48 = (void *)v47;
      if (v46 && v47 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        uint64_t v48 = 0LL;
      }

      uint64_t v49 = [v48 BOOLValue];

      if ((v49 & 1) != 0)
      {
        CFStringRef v178 = 1;
      }

      else
      {
        uint64_t v50 = objc_opt_class();
        int v51 = [v183 objectForKey:@"RequireOpenInPlace"];
        uint64_t v52 = (void *)v51;
        if (v50 && v51 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          uint64_t v52 = 0LL;
        }

        CFStringRef v178 = [v52 BOOLValue];
      }

      int v53 = objc_opt_class();
      __int128 v54 = [v186 objectForKey:@"LSMoveDocumentOnOpen"];
      uint64_t v55 = (void *)v54;
      if (v53 && v54 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        uint64_t v55 = 0LL;
      }

      size_t v56 = [v55 BOOLValue];

      if ((v56 & 1) != 0) {
        goto LABEL_56;
      }
      int v57 = objc_opt_class();
      __int128 v58 = [v183 objectForKey:@"LSMoveDocumentOnOpen"];
      __int128 v59 = (void *)v58;
      if (v57 && v58 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        __int128 v59 = 0LL;
      }

      int v60 = [v59 BOOLValue];

      if (v60)
      {
LABEL_56:
        [v187 _xpcConnection];
        uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue();
        v166 = _LSCheckEntitlementForXPCConnection( v61,  @"com.apple.launchservices.MoveDocumentOnOpen") != 0;

        if (v19)
        {
LABEL_57:
          int v167 = 0;
          goto LABEL_63;
        }
      }

      else
      {
        v166 = 0;
        if (v19) {
          goto LABEL_57;
        }
      }

      [v171 dataContainerURL];
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue();
      if (v62)
      {
        [v16 absoluteString];
        unsigned int v63 = (void *)objc_claimAutoreleasedReturnValue();
        [v62 absoluteString];
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue();
        [v63 rangeOfString:v64 options:8];
        int v66 = v65;

        uint64_t v67 = v66 == 0;
      }

      else
      {
        uint64_t v67 = 1;
      }

      int v167 = v67;

LABEL_63:
      if (v178 && ([v171 supportsOpenInPlace] & 1) == 0)
      {
        _LSDefaultLog();
        uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138412546;
          *(void *)&uint8_t buf[4] = v16;
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v188;
          _os_log_impl( &dword_183E58000,  v90,  OS_LOG_TYPE_DEFAULT,  "Document %@ requires open-in-place but target (%@) does not support it.",  buf,  0x16u);
        }

        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 45LL, (uint64_t)"_LSOpenOperationPerform", 419LL, 0LL);
        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue();
        v185[2](v185, 0LL, v91);

        goto LABEL_163;
      }

      uint64_t v68 = v187;
      __int16 v69 = v171;
      uint64_t v70 = v16;
      if (v68)
      {
        if (v69) {
          goto LABEL_67;
        }
      }

      else
      {
        [MEMORY[0x1896077D8] currentHandler];
        v158 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSCheckIfXPCConnectionCanReadDocument(NSXPCConnection *__strong, LSApplicationProxy *__strong, NSURL *__ strong, NSError *__autoreleasing *)");
        CFStringRef v159 = (void *)objc_claimAutoreleasedReturnValue();
        [v158 handleFailureInFunction:v159, @"LSOpenOperation.mm", 1026, @"Invalid parameter not satisfying: %@", @"clientXPCConnection != nil" file lineNumber description];

        if (v69) {
          goto LABEL_67;
        }
      }

      [MEMORY[0x1896077D8] currentHandler];
      CFStringRef v160 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSCheckIfXPCConnectionCanReadDocument(NSXPCConnection *__strong, LSApplicationProxy *__strong, NSURL *__st rong, NSError *__autoreleasing *)");
      CFNumberRef v161 = (void *)objc_claimAutoreleasedReturnValue();
      [v160 handleFailureInFunction:v161, @"LSOpenOperation.mm", 1027, @"Invalid parameter not satisfying: %@", @"targetApp != nil" file lineNumber description];

LABEL_67:
      __int16 v71 = (void *)MEMORY[0x186E2A59C]();
      if (v68) {
        [v68 auditToken];
      }
      else {
        memset(buf, 0, sizeof(buf));
      }
      if (+[FSNode canReadURL:fromSandboxWithAuditToken:]( &OBJC_CLASS___FSNode,  "canReadURL:fromSandboxWithAuditToken:",  v70,  buf)
        || (v72 = (void *)_CFURLCopyPromiseURLOfLogicalURL()) != 0LL
        && (__int16 v73 = +[FSNode canReadURL:fromSandboxWithAuditToken:]( &OBJC_CLASS___FSNode,  "canReadURL:fromSandboxWithAuditToken:",  v72,  buf),  v72,  v73))
      {
        uint64_t v74 = 0LL;
        __int16 v75 = 1;
      }

      else
      {
        _LSDefaultLog();
        int v76 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v77 = [v68 processIdentifier];
          *(_DWORD *)uint64_t v207 = 67109635;
          *(_DWORD *)&v207[4] = v77;
          *(_WORD *)&v207[8] = 2113;
          *(void *)&v207[10] = v70;
          *(_WORD *)&v207[18] = 2113;
          *(void *)&v207[20] = v69;
          _os_log_impl( &dword_183E58000,  v76,  OS_LOG_TYPE_DEFAULT,  "pid %i does not have read access to document %{private}@ in order to open it in target %{private}@.",  v207,  0x1Cu);
        }

        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  1LL,  (uint64_t)"_LSCheckIfXPCConnectionCanReadDocument",  1055LL,  0LL);
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue();
        __int16 v75 = 0;
      }

      objc_autoreleasePoolPop(v71);
      if ((v75 & 1) != 0) {
        int v78 = 0LL;
      }
      else {
        int v78 = v74;
      }

      int v79 = v78;
      uint64_t v80 = v79;
      if ((v75 & 1) == 0)
      {
        v185[2](v185, 0LL, v79);

        goto LABEL_163;
      }

      int v81 = v69;
      uint64_t v168 = v70;
      if (!v69)
      {
        [MEMORY[0x1896077D8] currentHandler];
        CFNumberRef v162 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSCheckIfApplicationCanOpenUSBOrSMBDocument(LSApplicationProxy *__strong, NSURL *__strong, NSError *__autoreleasing *)");
        v163 = (void *)objc_claimAutoreleasedReturnValue();
        [v162 handleFailureInFunction:v163, @"LSOpenOperation.mm", 1072, @"Invalid parameter not satisfying: %@", @"targetApp != nil" file lineNumber description];
      }

      int v82 = (void *)MEMORY[0x186E2A59C]();
      *(void *)uint64_t v207 = 0LL;
      int v83 = *MEMORY[0x189603DF8];
      int v84 = [v168 getResourceValue:v207 forKey:*MEMORY[0x189603DF8] error:0];
      __int128 v85 = *(id *)v207;
      if ((v84 & 1) == 0)
      {
        uint64_t v86 = (void *)_CFURLCopyPromiseURLOfLogicalURL();
        *(void *)uint64_t v201 = 0LL;
        [v86 getResourceValue:v201 forKey:v83 error:0];
        uint64_t v87 = *(id *)v201;

        __int128 v85 = v87;
      }

      if (v85 && ([v85 BOOLValue] & 1) == 0)
      {
        _LSDefaultLog();
        uint64_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)id buf = 138478083;
          *(void *)&uint8_t buf[4] = v168;
          *(_WORD *)&_BYTE buf[12] = 2113;
          *(void *)&buf[14] = v81;
          _os_log_impl( &dword_183E58000,  v92,  OS_LOG_TYPE_INFO,  "Document %{private}@ is on USB/SMB. Checking if application %{private}@ can open such documents.",  buf,  0x16u);
        }

        v213 = (void **)*MEMORY[0x189607490];
        *(void *)id buf = @"SMB/USB documents not supported on this platform.";
        [MEMORY[0x189603F68] dictionaryWithObjects:buf forKeys:&v213 count:1];
        v93 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  45LL,  (uint64_t)"_LSCheckIfApplicationCanOpenUSBOrSMBDocument",  1101LL,  v93);
        uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue();

        uint64_t v89 = 0;
      }

      else
      {
        uint64_t v88 = 0LL;
        uint64_t v89 = 1;
      }

      objc_autoreleasePoolPop(v82);
      if ((v89 & 1) != 0) {
        v94 = 0LL;
      }
      else {
        v94 = v88;
      }

      uint64_t v95 = v94;
      if ((v89 & 1) == 0) {
        v185[2](v185, 0LL, v95);
      }

      if (((v69 != 0LL) & v89 & a4) != 1)
      {
        if (!v89) {
          goto LABEL_163;
        }
        goto LABEL_155;
      }

      if (![v168 isFileURL])
      {
LABEL_155:
        if (!v167)
        {
          _LSDefaultLog();
          v131 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138412546;
            *(void *)&uint8_t buf[4] = v168;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v188;
            _os_log_impl(&dword_183E58000, v131, OS_LOG_TYPE_DEFAULT, "Not copying %@ to Inbox for %@", buf, 0x16u);
          }

          CFNumberRef v21 = (NSURL *)v168;
          uint64_t v22 = 0;
          goto LABEL_164;
        }

        _LSGetInboxURLForBundleIdentifier(v188);
        int v129 = (void *)objc_claimAutoreleasedReturnValue();
        if (v129)
        {
          v190[0] = MEMORY[0x1895F87A8];
          v190[1] = 3221225472LL;
          v190[2] = ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke;
          v190[3] = &unk_189D77960;
          uint64_t v191 = v182;
          uint64_t v192 = v68;
          uint64_t v193 = v186;
          uint64_t v194 = v183;
          uint64_t v195 = v188;
          v196 = v185;
          _LSCopyOrMoveFileResource(v168, v180, v181, v129, v166, v190);

          int v130 = v191;
        }

        else
        {
          _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 45LL, (uint64_t)"_LSOpenOperationPerform", 458LL, 0LL);
          int v130 = (void *)objc_claimAutoreleasedReturnValue();
          v185[2](v185, 0LL, v130);
        }

LABEL_163:
        CFNumberRef v21 = 0LL;
        uint64_t v22 = 1;
LABEL_164:

        LOBYTE(v16) = 0;
        CFNumberRef v20 = 0;
        goto LABEL_165;
      }

      v175 = v81;
      uint64_t v96 = v168;
      uint64_t v200 = 0LL;
      uint64_t v97 = -[FSNode initWithURL:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithURL:flags:error:",  v96,  0LL,  &v200);
      uint64_t v98 = v200;
      if (!v97)
      {
        _LSDefaultLog();
        v119 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138478083;
          *(void *)&uint8_t buf[4] = v96;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v98;
          _os_log_impl( &dword_183E58000,  v119,  OS_LOG_TYPE_DEFAULT,  "Could not create node for resource URL %{private}@ for default handler update: %{public}@",  buf,  0x16u);
        }

        goto LABEL_154;
      }

      uint64_t v216 = 0LL;
      v213 = 0LL;
      v214 = 0LL;
      __int128 v215 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v99 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v100 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v213, v99, 0LL);

      if (!v100)
      {
        _LSDefaultLog();
        BOOL v120 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        {
          +[_LSDServiceDomain defaultServiceDomain]();
          uint64_t v121 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
          v122 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v213, v121, 0LL);

          if (v122) {
            int v123 = 0LL;
          }
          else {
            int v123 = v216;
          }
          *(_DWORD *)id buf = 138543362;
          *(void *)&uint8_t buf[4] = v123;
          _os_log_impl( &dword_183E58000,  v120,  OS_LOG_TYPE_DEFAULT,  "Could not create database context for default handler update: %{public}@",  buf,  0xCu);
        }

        CFNumberRef v165 = v98;
        goto LABEL_150;
      }

      LaunchServices::TypeEvaluator::TypeEvaluator(v199, v97);
      LaunchServices::TypeEvaluator::getTypeIdentifier((uint64_t)v199, (void **)&v100->db, 0LL);
      CFNumberRef v164 = (LaunchServices::BindingEvaluator *)objc_claimAutoreleasedReturnValue();
      if (!v164)
      {
        _LSDefaultLog();
        CFArrayRef v103 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138478083;
          *(void *)&uint8_t buf[4] = v97;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v98;
          _os_log_impl( &dword_183E58000,  v103,  OS_LOG_TYPE_DEFAULT,  "Could not get UTI for node %{private}@ for default handler update: %{public}@",  buf,  0x16u);
        }

        CFNumberRef v165 = v98;
        goto LABEL_146;
      }

      uint64_t v101 = objc_alloc(&OBJC_CLASS___FSNode);
      [v175 bundleURL];
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v198 = v98;
      CFArrayRef v103 = -[FSNode initWithURL:flags:error:](v101, "initWithURL:flags:error:", v102, 0LL, &v198);
      CFNumberRef v165 = v198;

      if (!v103)
      {
        _LSDefaultLog();
        int v124 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138478083;
          *(void *)&uint8_t buf[4] = v175;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v165;
          _os_log_impl( &dword_183E58000,  v124,  OS_LOG_TYPE_DEFAULT,  "Could not get node for app %{private}@: %{public}@",  buf,  0x16u);
        }

        CFArrayRef v103 = 0LL;
        goto LABEL_146;
      }

      uint64_t v197 = 0;
      v104 = v175;
      if (_LSBundleFindWithNode(v100, v103, &v197, 0LL))
      {
        _LSDefaultLog();
        v105 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138477827;
          *(void *)&uint8_t buf[4] = v175;
          _os_log_impl(&dword_183E58000, v105, OS_LOG_TYPE_DEFAULT, "Could not get unit for app %{private}@", buf, 0xCu);
        }

        goto LABEL_146;
      }

      *(_DWORD *)id buf = 0;
      *(void *)&buf[8] = 0LL;
      *(_DWORD *)&uint8_t buf[16] = 0;
      uint64_t v211 = 0LL;
      uint64_t v212 = 0LL;
      *(void *)&buf[24] = 0LL;
      if (!_LSGetBindingForNodeOrSchemeOrUTI( (int)v100,  0LL,  0LL,  v164,  v197,  14,  0LL,  12320,  (uint64_t)buf)
        && *(void *)&buf[24])
      {
        if (_LSClaimFlagsAreWildcard(*(_DWORD *)(*(void *)&buf[24] + 8LL)))
        {
          _LSDefaultLog();
          int v152 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
          {
            [v175 bundleIdentifier];
            v153 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)uint64_t v207 = 138478083;
            *(void *)&v207[4] = v153;
            *(_WORD *)&v207[12] = 2113;
            *(void *)&v207[14] = v97;
            _os_log_impl( &dword_183E58000,  v152,  OS_LOG_TYPE_INFO,  "App %{private}@ claims %{private}@ via a wildcard UTI, so won't set default handler.",  v207,  0x16u);
          }

FSEventStreamRef FSEventStreamCreateRelativeToDevice( CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, dev_t deviceToWatch, CFArrayRef pathsToWatchRelativeToDevice, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  if (deviceToWatch > 0) {
    return (FSEventStreamRef)_FSEventStreamCreate( "FSEventStreamCreateRelativeToDevice",  allocator,  (uint64_t)callback,  (__int128 *)&context->version,  deviceToWatch,  pathsToWatchRelativeToDevice,  sinceWhen,  (unint64_t)(latency * 1000000.0),  flags);
  }
  uint64_t v9 = (os_log_s *)fsevent_default_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    FSEventStreamCreateRelativeToDevice_cold_1();
  }
  return 0LL;
}

void _FSEventStreamDeallocate(char *ptr)
{
  if (ptr)
  {
    if (*(_DWORD *)ptr)
    {
      uintptr_t v2 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        _FSEventStreamDeallocate_cold_4();
      }
    }

    else
    {
      if (ptr[188])
      {
        CFIndex v4 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamDeallocate_cold_3();
        }
      }

      if (*((void *)ptr + 27) || *((void *)ptr + 45))
      {
        uint64_t v5 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          _FSEventStreamDeallocate_cold_2();
        }
      }

      uint64_t v6 = (const __CFAllocator *)*((void *)ptr + 1);
      if (v6)
      {
        CFStringRef v7 = (void *)*((void *)ptr + 10);
        if (v7)
        {
          uint64_t v8 = *((void *)ptr + 9);
          *((void *)ptr + 9) = 0LL;
          if ((int)v8 >= 1)
          {
            uint64_t v9 = 0LL;
            uint64_t v10 = v8;
            do
            {
              uint64_t v11 = *(void **)(*((void *)ptr + 10) + 8 * v9);
              if (v11) {
                CFAllocatorDeallocate(v6, v11);
              }
              uint64_t v12 = *((void *)ptr + 49);
              if (v12)
              {
                uint64_t v13 = *(void **)(v12 + 32 * v9 + 24);
                if (v13)
                {
                  free(v13);
                  uint64_t v12 = *((void *)ptr + 49);
                }

                uint64_t v14 = v12 + 32 * v9;
                uint64_t v15 = *(void **)(v14 + 16);
                if (v15)
                {
                  if (*(int *)(v14 + 8) >= 1)
                  {
                    uint64_t v16 = 0LL;
                    do
                    {
                      close(*(_DWORD *)(*(void *)(v12 + 32 * v9 + 16) + 4 * v16++));
                      uint64_t v12 = *((void *)ptr + 49);
                      uint64_t v17 = v12 + 32 * v9;
                    }

                    while (v16 < *(int *)(v17 + 8));
                    uint64_t v15 = *(void **)(v17 + 16);
                  }

                  free(v15);
                  uint64_t v12 = *((void *)ptr + 49);
                }

                close(*(_DWORD *)(v12 + 32 * v9 + 4));
              }

              ++v9;
            }

            while (v9 != v10);
            CFStringRef v7 = (void *)*((void *)ptr + 10);
          }

          CFAllocatorDeallocate(v6, v7);
          CFAllocatorDeallocate(v6, *((void **)ptr + 11));
          __int128 v18 = (void *)*((void *)ptr + 49);
          if (v18) {
            CFAllocatorDeallocate(v6, v18);
          }
          __int128 v19 = (void *)*((void *)ptr + 50);
          if (v19) {
            CFAllocatorDeallocate(v6, v19);
          }
        }

        for (uint64_t i = 104LL; i != 168; i += 8LL)
        {
          CFNumberRef v21 = *(void **)&ptr[i];
          if (v21)
          {
            free(v21);
            *(void *)&ptr[i] = 0LL;
          }
        }

        *((void *)ptr + 12) = 0LL;
        uint64_t v22 = (dispatch_object_s *)*((void *)ptr + 44);
        if (v22) {
          dispatch_release(v22);
        }
        uint64_t v23 = (void (*)(void))*((void *)ptr + 6);
        if (v23) {
          v23(*((void *)ptr + 4));
        }
        *((void *)ptr + 56) = 0LL;
        *((_OWORD *)ptr + 26) = 0u;
        *((_OWORD *)ptr + 27) = 0u;
        *((_OWORD *)ptr + 24) = 0u;
        *((_OWORD *)ptr + 25) = 0u;
        *((_OWORD *)ptr + 22) = 0u;
        *((_OWORD *)ptr + 23) = 0u;
        *((_OWORD *)ptr + 20) = 0u;
        *((_OWORD *)ptr + 21) = 0u;
        *((_OWORD *)ptr + 1_Block_object_dispose((const void *)(v9 - 64), 8) = 0u;
        *((_OWORD *)ptr + 19) = 0u;
        *((_OWORD *)ptr + 16) = 0u;
        *((_OWORD *)ptr + 17) = 0u;
        *((_OWORD *)ptr + 14) = 0u;
        *((_OWORD *)ptr + 15) = 0u;
        *((_OWORD *)ptr + 12) = 0u;
        *((_OWORD *)ptr + 13) = 0u;
        *((_OWORD *)ptr + 10) = 0u;
        *((_OWORD *)ptr + 11) = 0u;
        *((_OWORD *)ptr + _Block_object_dispose((const void *)(v9 - 64), 8) = 0u;
        *((_OWORD *)ptr + 9) = 0u;
        *((_OWORD *)ptr + 6) = 0u;
        *((_OWORD *)ptr + 7) = 0u;
        *((_OWORD *)ptr + 4) = 0u;
        *((_OWORD *)ptr + 5) = 0u;
        *((_OWORD *)ptr + 2) = 0u;
        *((_OWORD *)ptr + 3) = 0u;
        *(_OWORD *)ptr = 0u;
        *((_OWORD *)ptr + 1) = 0u;
        CFAllocatorDeallocate(v6, ptr);
        CFRelease(v6);
      }
    }
  }

  else
  {
    uint64_t v3 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      _FSEventStreamDeallocate_cold_1();
    }
  }

void FSEventStreamScheduleWithRunLoop( FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (streamRef)
  {
    if (runLoop)
    {
      uint64_t v6 = (mach_port_name_t *)((char *)streamRef + 192);
      if (*((_DWORD *)streamRef + 48))
      {
LABEL_4:
        if (_createAndAddRunLoopSource( (int)"FSEventStreamScheduleWithRunLoop",  (uint64_t)streamRef,  runLoop,  runLoopMode))
        {
          CFStringRef v7 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
            FSEventStreamScheduleWithRunLoop_cold_5();
          }
          mach_port_deallocate(*MEMORY[0x1895FBBE0], *v6);
          mach_port_name_t *v6 = 0;
        }

        else
        {
          *((void *)streamRef + 2_Block_object_dispose((const void *)(v9 - 64), 8) = CFRetain(runLoop);
          *((void *)streamRef + 29) = CFStringCreateCopy(0LL, runLoopMode);
          if ((*((_BYTE *)streamRef + 184) & 4) != 0)
          {
            context.version = 0LL;
            context.info = streamRef;
            context.retain = (void *(__cdecl *)(void *))_FSEventStreamRetainAndReturnSelf;
            context.release = (void (__cdecl *)(void *))FSEventStreamRelease;
            context.copyDescription = (CFStringRef (__cdecl *)(void *))FSEventStreamCopyDescription;
            uint64_t v11 = CFFileDescriptorCreate( 0LL,  *((_DWORD *)streamRef + 102),  1u,  (CFFileDescriptorCallBack)cffd_callback,  &context);
            *((void *)streamRef + 52) = v11;
            if (v11)
            {
              RunLoopSource = CFFileDescriptorCreateRunLoopSource(0LL, v11, 0LL);
              *((void *)streamRef + 53) = RunLoopSource;
              if (RunLoopSource)
              {
                CFRunLoopAddSource(runLoop, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1896051B0]);
              }

              else
              {
                uint64_t v23 = (os_log_s *)fsevent_default_log();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
                  FSEventStreamScheduleWithRunLoop_cold_4(v23, v24, v25, v26, v27, v28, v29, v30);
                }
                CFFileDescriptorInvalidate(*((CFFileDescriptorRef *)streamRef + 52));
                CFRelease(*((CFTypeRef *)streamRef + 52));
                *((void *)streamRef + 52) = 0LL;
              }
            }

            else
            {
              uint64_t v15 = (os_log_s *)fsevent_default_log();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
                FSEventStreamScheduleWithRunLoop_cold_3(v15, v16, v17, v18, v19, v20, v21, v22);
              }
            }
          }
        }

        return;
      }

      if (!allocate_d2f_port((uint64_t)"FSEventStreamScheduleWithRunLoop", (uint64_t)streamRef))
      {
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        uint64_t v13 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        if (!FSEvents_streamDict) {
          FSEvents_streamDict = (uint64_t)CFDictionaryCreateMutable(v13, 0LL, MEMORY[0x189605240], 0LL);
        }
        CFNumberRef v14 = CFNumberCreate(v13, kCFNumberIntType, v6);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v14, streamRef);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v14);
        goto LABEL_4;
      }

      uint64_t v10 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        FSEventStreamScheduleWithRunLoop_cold_6();
      }
    }

    else
    {
      uint64_t v9 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        FSEventStreamScheduleWithRunLoop_cold_2();
      }
    }
  }

  else
  {
    uint64_t v8 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      FSEventStreamScheduleWithRunLoop_cold_1();
    }
  }

uint64_t allocate_d2f_port(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = mach_port_allocate(*MEMORY[0x1895FBBE0], 1u, (mach_port_name_t *)(a2 + 192));
  if ((_DWORD)v2)
  {
    uint64_t v3 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      allocate_d2f_port_cold_1();
    }
  }

  return v2;
}

uint64_t _createAndAddRunLoopSource(int a1, uint64_t a2, CFRunLoopRef rl, CFRunLoopMode mode)
{
  mach_port_t v5 = *(_DWORD *)(a2 + 192);
  if (!v5)
  {
    uint64_t v10 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _createAndAddRunLoopSource_cold_1();
    }
    return 5LL;
  }

  if (*(void *)(a2 + 200))
  {
    uint64_t v8 = *(__CFRunLoopSource **)(a2 + 216);
    if (!v8)
    {
      uint64_t v9 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        _createAndAddRunLoopSource_cold_4();
      }
      return 5LL;
    }

LABEL_11:
    CFRunLoopAddSource(rl, v8, mode);
    return 0LL;
  }

  memset(&v16, 0, sizeof(v16));
  uint64_t v11 = CFMachPortCreateWithPort(0LL, v5, (CFMachPortCallBack)FSEventsClientProcessMessageCallback, &v16, 0LL);
  *(void *)(a2 + 200) = v11;
  if (v11)
  {
    CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource((CFAllocatorRef)*MEMORY[0x189604DB0], v11, 0LL);
    *(void *)(a2 + 216) = RunLoopSource;
    if (RunLoopSource)
    {
      uint64_t v8 = RunLoopSource;
      goto LABEL_11;
    }

    uint64_t v15 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      _createAndAddRunLoopSource_cold_3();
    }
    CFMachPortInvalidate(*(CFMachPortRef *)(a2 + 200));
    CFRelease(*(CFTypeRef *)(a2 + 200));
    *(void *)(a2 + 200) = 0LL;
  }

  else
  {
    CFNumberRef v14 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      _createAndAddRunLoopSource_cold_2();
    }
  }

  mach_port_deallocate(*MEMORY[0x1895FBBE0], *(_DWORD *)(a2 + 196));
  *(_DWORD *)(a2 + 196) = 0;
  return 5LL;
}

    uint64_t v9 = (void *)MEMORY[0x189604A58];
    goto LABEL_12;
  }

  uint64_t v9 = (void *)MEMORY[0x189604A58];
  return v9;
}

  return v4;
}

    LOBYTE(v5) = 0;
LABEL_12:
  }

  return v5;
}

    uint64_t v17 = 0LL;
    goto LABEL_12;
  }

  uint64_t v6 = *(id *)(a1 + 32);
  CFStringRef v7 = *((id *)v6 + 205);
  uint64_t v8 = v7;
  if (v7)
  {
    *(void *)id buf = 0LL;
    uint64_t v9 = (const void *)_LSCreateStoreWithFileContents(v7, buf);
    uint64_t v10 = *(id *)buf;
    uint64_t v11 = v10;
    if (v9)
    {
      uint64_t v12 = *((void *)v6 + 206);
      uint64_t v13 = (const void *)*((void *)v6 + 207);
      uint64_t v26 = v10;
      CFNumberRef v14 = (os_log_s *)_LSDatabaseCreateWithAccessContext(v8, v12, v9, v13, &v26);
      uint64_t v15 = v26;

      CFRelease(v9);
      if (v14)
      {
        _LSSchemaTransferCache((uint64_t)v6 + 16, (uint64_t)v14 + 16);
        -[_LSDatabase setAccessContext:](v14, *((CFTypeRef *)v6 + 207));

        CFMachPortContext v16 = 0LL;
        goto LABEL_18;
      }

      uint64_t v11 = v15;
    }
  }

  else
  {
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSDatabaseCreateByRemappingDatabase",  1473LL,  0LL);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  }

  _LSDatabaseGetLog();
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_3();
  }

  CFMachPortContext v16 = v11;
  CFNumberRef v14 = 0LL;
  uint64_t v15 = v16;
LABEL_18:

  uint64_t v17 = v16;
  if (!v14)
  {
    _LSDatabaseGetLog();
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_2();
    }

    uint64_t v25 = v17;
    uint64_t v21 = _LSDatabaseCreateFromPersistentStore(7LL, 0LL, &v25);
    uint64_t v22 = v25;

    if (!v21)
    {
      _LSDatabaseGetLog();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke_cold_1();
      }
      CFNumberRef v14 = 0LL;
      goto LABEL_31;
    }

    CFNumberRef v14 = (os_log_s *)v21;
    uint64_t v17 = v22;
  }

  if (-[_LSDatabase isSeeded]((uint64_t)v14))
  {

    _LSServer_DatabaseExecutionContext();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[LSDBExecutionContext setServerDatabase:]((uint64_t)v23, v14);

    _LSDatabaseCommit((uint64_t)v14);
    if (gSkippedRemap == 1)
    {
      gSkippedRemap = 0;
      _LSDatabaseGetLog();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 136446210;
        *(void *)&uint8_t buf[4] = "_LSDatabaseRemap_block_invoke";
        _os_log_impl( &dword_183E58000,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}s remapped the database after skipping a previous remap",  buf,  0xCu);
      }

      uint64_t v22 = 0LL;
LABEL_31:

      uint64_t v17 = v22;
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  uint64_t v9 = 0;
LABEL_12:

  return v9;
}

  v10[2](v10, *((unsigned __int8 *)v36 + 24), v30[5]);
  _Block_object_dispose(&v29, 8);

  _Block_object_dispose(&v35, 8);
}

    _LSDefaultLog();
    CFStringRef v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      [v3 auditToken];
      uint64_t v8 = audit_token_to_pid(&v10);
      *(_DWORD *)id buf = 134218242;
      uint64_t v12 = v8;
      uint64_t v13 = 2114;
      CFNumberRef v14 = v4;
      _os_log_impl( &dword_183E58000,  v7,  OS_LOG_TYPE_DEFAULT,  "Connection from process %llu does not have the required entitlement %{public}@",  buf,  0x16u);
    }

    uint64_t v6 = 0LL;
    goto LABEL_14;
  }

  uint64_t v6 = 0LL;
LABEL_15:

  return v6;
}

      _CSStoreWriteToUnit();
      return;
    }
  }

  while (v4 != 5)
  {
    uint64_t v18 = v16[1];
    ++v16;
    ++v4;
    if (v14 == v18)
    {
      uint64_t v6 = 1;
      goto LABEL_6;
    }
  }

  if ((v5 & 1) != 0) {
    goto LABEL_11;
  }
}

    if (_LSSchemeApprovalBundleIsAppleInternal((NSString *)v16))
    {
LABEL_50:
      v13[2](v13, 1LL, 0LL);
      goto LABEL_51;
    }

    goto LABEL_12;
  }

  v13[2](v13, 1LL, 0LL);
LABEL_52:
}

    uint64_t v18 = 0LL;
LABEL_12:

    goto LABEL_13;
  }

  [MEMORY[0x1896078A8] defaultManager];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  [v3 path];
  CFStringRef v7 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = [v6 fileExistsAtPath:v7];

  if (!v8)
  {
    _LSDefaultLog();
    CFNumberRef v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      uint64_t v25 = v3;
      uint64_t v15 = "LaunchServices: No file to migrate at URL %@";
      CFMachPortContext v16 = v14;
      uint64_t v17 = 12;
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  [MEMORY[0x1896078A8] defaultManager];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  [v5 path];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = [v9 fileExistsAtPath:v10];

  if ((v11 & 1) != 0)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 1;
  }

  else
  {
    [MEMORY[0x1896078A8] defaultManager];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = 0LL;
    uint64_t v13 = [v19 copyItemAtURL:v3 toURL:v5 error:&v23];
    uint64_t v12 = v23;
  }

  [MEMORY[0x1896078A8] defaultManager];
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v22 = v12;
  uint64_t v21 = [v20 removeItemAtURL:v3 error:&v22];
  uint64_t v18 = v22;

  if ((!v13 || (v21 & 1) == 0) && [v18 code] != 4)
  {
    _LSDefaultLog();
    CFNumberRef v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      uint64_t v25 = v18;
      _os_log_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_DEFAULT,  "LaunchServices: Migration move item step failed with error: %@",  buf,  0xCu);
    }

    goto LABEL_12;
  }

  if (v14 && !v15) {
    goto LABEL_7;
  }
  if (v15 && !v14) {
    goto LABEL_4;
  }
LABEL_23:
  if ((v12 != 0) != (v13 != 0))
  {
LABEL_24:
    if (v12) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = -1;
    }
    goto LABEL_37;
  }

  CFRelease(v8);
  if (a2) {
LABEL_7:
  }
    CFRelease(a2);
}

void cffd_callback(__CFFileDescriptor *a1, int a2, FSEventStreamRef streamRef)
{
  CFFileDescriptorNativeDescriptor NativeDescriptor = CFFileDescriptorGetNativeDescriptor(a1);
  process_dir_events(NativeDescriptor, streamRef);
  FSEventStreamRelease(streamRef);
}

void FSEventStreamUnscheduleFromRunLoop( FSEventStreamRef streamRef, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (streamRef)
  {
    if (runLoop)
    {
      mach_port_t v5 = (__CFRunLoopSource *)*((void *)streamRef + 27);
      if (v5)
      {
        CFRunLoopRemoveSource(runLoop, v5, runLoopMode);
        CFStringRef v7 = (__CFRunLoopSource *)*((void *)streamRef + 53);
        if (v7) {
          CFRunLoopRemoveSource(runLoop, v7, runLoopMode);
        }
        _FSEventStreamUnscheduleFromRunLoops((uint64_t)streamRef);
      }

      else
      {
        uint64_t v10 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          FSEventStreamUnscheduleFromRunLoop_cold_3();
        }
      }
    }

    else
    {
      uint64_t v9 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        FSEventStreamUnscheduleFromRunLoop_cold_2();
      }
    }
  }

  else
  {
    uint64_t v8 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      FSEventStreamUnscheduleFromRunLoop_cold_1();
    }
  }

void _FSEventStreamUnscheduleFromRunLoops(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 224);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 224) = 0LL;
  }

  uint64_t v3 = *(const void **)(a1 + 232);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 232) = 0LL;
  }

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
  if (streamRef)
  {
    if (q)
    {
      if (!*((_DWORD *)streamRef + 48))
      {
        if (allocate_d2f_port((uint64_t)"FSEventStreamSetDispatchQueue", (uint64_t)streamRef))
        {
          uint64_t v18 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
            FSEventStreamSetDispatchQueue_cold_4();
          }
          return;
        }

        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        uint64_t v19 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        if (!FSEvents_streamDict) {
          FSEvents_streamDict = (uint64_t)CFDictionaryCreateMutable(v19, 0LL, MEMORY[0x189605240], 0LL);
        }
        CFNumberRef v20 = CFNumberCreate(v19, kCFNumberIntType, (char *)streamRef + 192);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v20, streamRef);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v20);
      }

      pthread_mutex_init((pthread_mutex_t *)((char *)streamRef + 240), 0LL);
      pthread_cond_init((pthread_cond_t *)((char *)streamRef + 304), 0LL);
      dispatch_retain(q);
      *((void *)streamRef + 44) = q;
      if (create_d2f_port_source((uint64_t)streamRef))
      {
        if ((*((_BYTE *)streamRef + 184) & 4) == 0) {
          return;
        }
        int v4 = *((_DWORD *)streamRef + 102);
        dispatch_source_t v5 = dispatch_source_create(MEMORY[0x1895F8B60], v4, 0LL, *((dispatch_queue_t *)streamRef + 44));
        if (v5)
        {
          uint64_t v6 = v5;
          dispatch_set_qos_class_fallback();
          FSEventStreamRetain(streamRef);
          uint64_t v7 = MEMORY[0x1895F87A8];
          handler[0] = MEMORY[0x1895F87A8];
          handler[1] = 0x40000000LL;
          handler[2] = __FSEventStreamSetDispatchQueue_block_invoke;
          handler[3] = &__block_descriptor_tmp_0;
          handler[4] = streamRef;
          int v32 = v4;
          dispatch_source_set_event_handler(v6, handler);
          v29[0] = v7;
          v29[1] = 0x40000000LL;
          v29[2] = __FSEventStreamSetDispatchQueue_block_invoke_2;
          v29[3] = &__block_descriptor_tmp_22;
          int v30 = v4;
          v29[4] = v6;
          v29[5] = streamRef;
          dispatch_source_set_cancel_handler(v6, v29);
          *((void *)streamRef + 54) = v6;
          *((_DWORD *)streamRef + 110) = 1;
          return;
        }

        uint64_t v21 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          FSEventStreamSetDispatchQueue_cold_2(v21, v22, v23, v24, v25, v26, v27, v28);
        }
      }

      else
      {
        uint64_t v10 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          FSEventStreamSetDispatchQueue_cold_3(v10, v11, v12, v13, v14, v15, v16, v17);
        }
      }

      if (*((void *)streamRef + 54))
      {
        cancel_source((dispatch_object_s **)streamRef + 54, (int *)streamRef + 110);
        *((_DWORD *)streamRef + 102) = -1;
      }

      if (*((void *)streamRef + 45))
      {
        cancel_source((dispatch_object_s **)streamRef + 45, (int *)streamRef + 92);
        *((_DWORD *)streamRef + 4_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
      }
    }

    else
    {
      if (*((void *)streamRef + 45))
      {
        cancel_source((dispatch_object_s **)streamRef + 45, (int *)streamRef + 92);
        *((_DWORD *)streamRef + 4_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
      }

      if (*((void *)streamRef + 47))
      {
        cancel_source((dispatch_object_s **)streamRef + 47, (int *)streamRef + 96);
        *((_DWORD *)streamRef + 49) = 0;
      }

      if ((*((_BYTE *)streamRef + 184) & 4) != 0 && *((void *)streamRef + 54))
      {
        cancel_source((dispatch_object_s **)streamRef + 54, (int *)streamRef + 110);
        *((_DWORD *)streamRef + 102) = -1;
      }

      uint64_t v9 = (dispatch_object_s *)*((void *)streamRef + 44);
      if (v9)
      {
        dispatch_release(v9);
        *((void *)streamRef + 44) = 0LL;
      }
    }
  }

  else
  {
    uint64_t v8 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      FSEventStreamSetDispatchQueue_cold_1();
    }
  }

BOOL create_d2f_port_source(uint64_t a1)
{
  uintptr_t v2 = *(unsigned int *)(a1 + 192);
  uint64_t v3 = dispatch_source_create(MEMORY[0x1895F8B40], v2, 0LL, *(dispatch_queue_t *)(a1 + 352));
  if (v3)
  {
    FSEventStreamRetain((FSEventStreamRef)a1);
    dispatch_set_qos_class_fallback();
    uint64_t v4 = MEMORY[0x1895F87A8];
    handler[0] = MEMORY[0x1895F87A8];
    handler[1] = 0x40000000LL;
    handler[2] = __create_d2f_port_source_block_invoke;
    handler[3] = &__block_descriptor_tmp_64;
    int v9 = v2;
    dispatch_source_set_event_handler(v3, handler);
    v6[0] = v4;
    v6[1] = 0x40000000LL;
    v6[2] = __create_d2f_port_source_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_65;
    int v7 = v2;
    v6[4] = v3;
    v6[5] = a1;
    dispatch_source_set_cancel_handler(v3, v6);
    *(void *)(a1 + 360) = v3;
    *(_DWORD *)(a1 + 36_Block_object_dispose((const void *)(v9 - 64), 8) = 1;
  }

  return v3 != 0LL;
}

void __FSEventStreamSetDispatchQueue_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 188))
  {
    if (!*(_BYTE *)(v1 + 189)) {
      process_dir_events(*(_DWORD *)(a1 + 40), (void *)v1);
    }
  }

void process_dir_events(int a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a2[49];
  uint64_t v4 = (kevent *)a2[50];
  uint64_t v6 = a2[9];
  timeout.tv_sec = 0LL;
  timeout.tv_nsec = 0LL;
  dev_t v40 = v6;
  unsigned int v7 = kevent(a1, 0LL, 0, v4, v6, &timeout);
  if ((v7 & 0x80000000) != 0)
  {
    int v38 = *__error();
    CFIndex v39 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      process_dir_events_cold_1(v38);
    }
  }

  else if (v7)
  {
    for (uint64_t i = v7; i; --i)
    {
      else {
        int64_t udata = (int64_t)v4->udata;
      }
      if (udata < 0
        || udata >= v40
        || (uint64_t v10 = v5 + 32 * udata, v12 = (int *)(v10 + 4), v11 = *(_DWORD *)(v10 + 4), v11 < 0)
        || (v14 = (char **)(v10 + 24), (uint64_t v13 = *(const char **)(v10 + 24)) == 0LL))
      {
        uint64_t v22 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          if (udata >= v40)
          {
            __darwin_time_t v28 = 0LL;
            dev_t v27 = -1;
          }

          else
          {
            uint64_t v26 = v5 + 32 * udata;
            dev_t v27 = *(_DWORD *)(v26 + 4);
            __darwin_time_t v28 = *(void *)(v26 + 24);
          }

          buf.st_dev = 136316162;
          *(void *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = udata;
          HIWORD(buf.st_gid) = 1024;
          buf.st_rdev = v40;
          *((_WORD *)&buf.st_rdev + 2) = 1024;
          *(dev_t *)((char *)&buf.st_rdev + 6) = v27;
          WORD1(buf.st_atimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&buf.st_atimespec.tv_sec + 4) = v28;
          p_stat buf = (uint8_t *)&buf;
          uint64_t v19 = v22;
          CFNumberRef v20 = "%s: index in event (%ld) not valid (%d max; fdtbl %d name %p)";
          uint32_t v21 = 44;
          goto LABEL_39;
        }
      }

      else
      {
        if ((*(_BYTE *)v10 & 1) != 0)
        {
          if (watch_path("process_dir_events", a1, v13, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            uint64_t v23 = (os_log_s *)fsevent_default_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              int v36 = *v14;
              buf.st_dev = 136315394;
              *(void *)&buf.st_mode = "process_dir_events";
              WORD2(buf.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v36;
              _os_log_error_impl( &dword_183E58000,  v23,  OS_LOG_TYPE_ERROR,  "%s: creation: watch_path() failed for '%s'",  (uint8_t *)&buf,  0x16u);
            }
          }

          if ((*(_BYTE *)v10 & 1) != 0) {
            goto LABEL_17;
          }
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if ((*(_BYTE *)v10 & 8) == 0) {
            goto LABEL_17;
          }
          uint64_t v24 = (os_log_s *)fsevent_default_log();
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            goto LABEL_17;
          }
          uint64_t v25 = *v14;
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v25;
          p_stat buf = (uint8_t *)&buf;
          uint64_t v19 = v24;
          CFNumberRef v20 = "%s: creation: watch_all_parents() failed for '%s'";
LABEL_51:
          uint32_t v21 = 22;
          goto LABEL_39;
        }

        uint32_t fflags = v4->fflags;
        if ((fflags & 0x22) == 0)
        {
          if ((fflags & 1) == 0) {
            goto LABEL_17;
          }
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if (watch_path("process_dir_events", a1, *v14, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            uint64_t v29 = (os_log_s *)fsevent_default_log();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              uint64_t v37 = *v14;
              buf.st_dev = 136315394;
              *(void *)&buf.st_mode = "process_dir_events";
              WORD2(buf.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v37;
              _os_log_error_impl( &dword_183E58000,  v29,  OS_LOG_TYPE_ERROR,  "%s: delete: watch_path() failed for '%s'",  (uint8_t *)&buf,  0x16u);
            }
          }

          if ((*(_BYTE *)v10 & 8) == 0) {
            goto LABEL_17;
          }
          int v30 = (os_log_s *)fsevent_default_log();
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            goto LABEL_17;
          }
          unsigned __int32 v31 = *v14;
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v31;
          p_stat buf = (uint8_t *)&buf;
          uint64_t v19 = v30;
          CFNumberRef v20 = "%s: delete: watch_all_parents() failed for '%s'";
          goto LABEL_51;
        }

        if (!fcntl(v11, 50, __s1))
        {
          if (!strcmp(__s1, *v14) && !lstat(__s1, &buf)) {
            goto LABEL_17;
          }
          root_dir_event_callback((uint64_t)a2, udata, 32);
          if ((*(_BYTE *)v10 & 4) != 0)
          {
            free(*v14);
            *uint64_t v14 = strdup(__s1);
          }

          else if (watch_path("process_dir_events", a1, *v14, (uint64_t)v4, v5 + 32 * udata, udata))
          {
            int v32 = (os_log_s *)fsevent_default_log();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              int v33 = *v14;
              *(_DWORD *)int v42 = 136315394;
              int v43 = "process_dir_events";
              __int16 v44 = 2080;
              int v45 = v33;
              _os_log_error_impl( &dword_183E58000,  v32,  OS_LOG_TYPE_ERROR,  "%s: rename: watch_path() failed for '%s'",  v42,  0x16u);
            }
          }

          if ((*(_BYTE *)v10 & 8) == 0) {
            goto LABEL_17;
          }
          size_t v34 = (os_log_s *)fsevent_default_log();
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            goto LABEL_17;
          }
          int v35 = *v14;
          *(_DWORD *)int v42 = 136315394;
          int v43 = "process_dir_events";
          __int16 v44 = 2080;
          int v45 = v35;
          p_stat buf = v42;
          uint64_t v19 = v34;
          CFNumberRef v20 = "%s: rename: watch_all_parents() failed for '%s'";
          goto LABEL_51;
        }

        uint64_t v16 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v17 = *v12;
          buf.st_dev = 136315394;
          *(void *)&buf.st_mode = "process_dir_events";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = v17;
          p_stat buf = (uint8_t *)&buf;
          uint64_t v19 = v16;
          CFNumberRef v20 = "%s: failed to get the new path for fd %d";
          uint32_t v21 = 18;
LABEL_39:
          _os_log_error_impl(&dword_183E58000, v19, OS_LOG_TYPE_ERROR, v20, p_buf, v21);
        }
      }

LABEL_17:
      ++v4;
    }
  }

    uint64_t v19 = 0LL;
    goto LABEL_18;
  }

  CFNumberRef v20 = open((const char *)[v9 fileSystemRepresentation], 0);
  if ((v20 & 0x80000000) == 0)
  {
    uint64_t v18 = (id)[objc_alloc(MEMORY[0x189607898]) initWithFileDescriptor:v20 closeOnDealloc:1];
    if (a4) {
      goto LABEL_14;
    }
    goto LABEL_17;
  }

  uint64_t v23 = (void *)*MEMORY[0x189607688];
  uint64_t v24 = *__error();
  uint64_t v26 = *MEMORY[0x189607490];
  v27[0] = @"open(2) failed when opening resource to open";
  [MEMORY[0x189603F68] dictionaryWithObjects:v27 forKeys:&v26 count:1];
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl(v23, v24, (uint64_t)"getFileHandleForOpeningResource", 1863LL, v25);
  uint64_t v19 = (id)objc_claimAutoreleasedReturnValue();

  if (a5)
  {
    uint64_t v19 = v19;
    uint32_t v21 = 0LL;
    uint64_t v18 = 0LL;
    *a5 = v19;
  }

  else
  {
    uint32_t v21 = 0LL;
    uint64_t v18 = 0LL;
  }

  return v14;
}

  return v8;
}

  return v8;
}

  active_platform = dyld_get_active_platform();
  if (a4) {
    objc_storeStrong(a4, v13);
  }
  if (a5) {
    *a5 = active_platform;
  }
}
      }
    }
  }

void __FSEventStreamSetDispatchQueue_block_invoke_2(uint64_t a1)
{
}

FSEventStreamEventId FSEventStreamFlushAsync(FSEventStreamRef streamRef)
{
  FSEventStreamEventId v5 = 0LL;
  if (streamRef)
  {
    if (*((_BYTE *)streamRef + 188))
    {
      if (*((void *)streamRef + 25))
      {
        if (f2d_flush_rpc(*((_DWORD *)streamRef + 49), &v5))
        {
          uint64_t v1 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
            FSEventStreamFlushAsync_cold_3();
          }
        }
      }
    }

    else
    {
      uint64_t v3 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        FSEventStreamFlushAsync_cold_2();
      }
    }
  }

  else
  {
    uintptr_t v2 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      FSEventStreamFlushAsync_cold_1();
    }
  }

  return v5;
}

void FSEventStreamFlushSync(FSEventStreamRef streamRef)
{
  uint64_t v14 = 0LL;
  if (streamRef)
  {
    if (*((_BYTE *)streamRef + 188))
    {
      if (*((void *)streamRef + 25) || *((void *)streamRef + 45))
      {
        uintptr_t v2 = (__CFRunLoop *)*((void *)streamRef + 28);
        if (v2 || *((void *)streamRef + 45))
        {
          uint64_t v3 = (__CFRunLoopSource *)*((void *)streamRef + 27);
          if (v3 || *((void *)streamRef + 45))
          {
            if (v2)
            {
              CFRunLoopAddSource(v2, v3, @"com.apple.FSEvents");
              uint64_t v13 = 0LL;
              while (*((_BYTE *)streamRef + 190)
                   && !_runRunLoopOnceForFlushSync( (uint64_t)"FSEventStreamFlushSync:1",  (uint64_t)streamRef,  (int *)&v13 + 1,  &v13))
                ;
            }

            else
            {
              pthread_mutex_lock((pthread_mutex_t *)((char *)streamRef + 240));
              while (*((_BYTE *)streamRef + 190))
              {
                if (pthread_cond_wait( (pthread_cond_t *)((char *)streamRef + 304),  (pthread_mutex_t *)((char *)streamRef + 240)))
                {
                  uint64_t v6 = (os_log_s *)fsevent_default_log();
                  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
                    FSEventStreamFlushSync_cold_8();
                  }
                  break;
                }
              }

              pthread_mutex_unlock((pthread_mutex_t *)((char *)streamRef + 240));
            }

            if (f2d_flush_rpc(*((_DWORD *)streamRef + 49), &v14))
            {
              unsigned int v7 = (os_log_s *)fsevent_default_log();
              if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
                FSEventStreamFlushSync_cold_7();
              }
            }

            if (!v14) {
              goto LABEL_46;
            }
            if (v14 > 0)
            {
              *((void *)streamRef + 56) = v14;
              uint64_t v13 = 0LL;
              if (*((void *)streamRef + 28))
              {
                while (*((void *)streamRef + 21) < *((void *)streamRef + 56)
                     && !_runRunLoopOnceForFlushSync( (uint64_t)"FSEventStreamFlushSync:2",  (uint64_t)streamRef,  (int *)&v13 + 1,  &v13))
                  ;
              }

              else
              {
                pthread_mutex_lock((pthread_mutex_t *)((char *)streamRef + 240));
                while (*((void *)streamRef + 21) < *((void *)streamRef + 56))
                {
                  if (pthread_cond_wait( (pthread_cond_t *)((char *)streamRef + 304),  (pthread_mutex_t *)((char *)streamRef + 240)))
                  {
                    int v11 = (os_log_s *)fsevent_default_log();
                    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
                      FSEventStreamFlushSync_cold_5();
                    }
                    break;
                  }
                }

                pthread_mutex_unlock((pthread_mutex_t *)((char *)streamRef + 240));
              }

              *((void *)streamRef + 56) = 0LL;
LABEL_46:
              uint64_t v12 = (__CFRunLoop *)*((void *)streamRef + 28);
              if (v12) {
                CFRunLoopRemoveSource(v12, *((CFRunLoopSourceRef *)streamRef + 27), @"com.apple.FSEvents");
              }
              return;
            }

            uint64_t v8 = (os_log_s *)fsevent_default_log();
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
              FSEventStreamFlushSync_cold_6();
            }
          }

          else
          {
            uint64_t v10 = (os_log_s *)fsevent_default_log();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
              FSEventStreamFlushSync_cold_4();
            }
          }
        }

        else
        {
          int v9 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
            FSEventStreamFlushSync_cold_3();
          }
        }
      }
    }

    else
    {
      FSEventStreamEventId v5 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        FSEventStreamFlushAsync_cold_2();
      }
    }
  }

  else
  {
    uint64_t v4 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      FSEventStreamFlushSync_cold_1();
    }
  }

uint64_t _runRunLoopOnceForFlushSync(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  __int32 v8 = CFRunLoopRunInMode(@"com.apple.FSEvents", 5.0, 1u) - 1;
  uint64_t result = 0LL;
  switch(v8)
  {
    case 0:
      uint64_t v10 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        _runRunLoopOnceForFlushSync_cold_1();
      }
      return 1LL;
    case 1:
      uint64_t v12 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        _runRunLoopOnceForFlushSync_cold_2();
      }
      return 1LL;
    case 2:
      int v13 = *a3;
      if ((*a3 & ~(-1 << *a4)) == 0)
      {
        uint64_t v14 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          double v15 = (double)(*a3 + 1) * 5.0;
          int v16 = 136316162;
          uint64_t v17 = a1;
          __int16 v18 = 2048;
          uint64_t v19 = a2;
          __int16 v20 = 2080;
          uint32_t v21 = "The run loop timed out.";
          __int16 v22 = 1024;
          int v23 = 3;
          __int16 v24 = 2048;
          double v25 = v15;
          _os_log_error_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_ERROR,  "%s(streamRef = %p): WARNING: CFRunLoopRunInMode() => %s (%d) (%.2f seconds)",  (uint8_t *)&v16,  0x30u);
        }

        ++*a4;
        int v13 = *a3;
      }

      uint64_t result = 0LL;
      *a3 = v13 + 1;
      return result;
    case 3:
      return result;
    default:
      int v11 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315906;
        uint64_t v17 = a1;
        __int16 v18 = 2048;
        uint64_t v19 = a2;
        __int16 v20 = 2080;
        uint32_t v21 = "UNKNOWN";
        __int16 v22 = 1024;
        int v23 = 0;
        _os_log_error_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_ERROR,  "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)",  (uint8_t *)&v16,  0x26u);
      }

      return 1LL;
  }

void FSEventStreamInvalidate(FSEventStreamRef streamRef)
{
  if (streamRef)
  {
    if (*((void *)streamRef + 27) || *((void *)streamRef + 45))
    {
      if (*((_BYTE *)streamRef + 188))
      {
        uintptr_t v2 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
          FSEventStreamInvalidate_cold_3();
        }
      }

      *((_BYTE *)streamRef + 189) = 1;
      _FSEventStreamUnscheduleFromRunLoops((uint64_t)streamRef);
      CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberIntType, (char *)streamRef + 192);
      pthread_mutex_lock(&FSEvents_streamDict_mutex);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)FSEvents_streamDict, v3);
      pthread_mutex_unlock(&FSEvents_streamDict_mutex);
      CFRelease(v3);
      uint64_t v4 = (__CFMachPort *)*((void *)streamRef + 25);
      if (v4)
      {
        CFMachPortInvalidate(v4);
        CFRelease(*((CFTypeRef *)streamRef + 25));
        *((void *)streamRef + 25) = 0LL;
        FSEventStreamEventId v5 = (__CFMachPort *)*((void *)streamRef + 26);
        if (v5)
        {
          CFMachPortSetInvalidationCallBack(v5, 0LL);
          CFRelease(*((CFTypeRef *)streamRef + 26));
          *((void *)streamRef + 26) = 0LL;
        }

        uint64_t v6 = (const void *)*((void *)streamRef + 27);
        if (v6)
        {
          CFRelease(v6);
          *((void *)streamRef + 27) = 0LL;
        }
      }

      if (*((void *)streamRef + 45)) {
        cancel_source((dispatch_object_s **)streamRef + 45, (int *)streamRef + 92);
      }
      else {
        dispose_d2f_port(*((_DWORD *)streamRef + 48));
      }
      *((_DWORD *)streamRef + 4_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
      if (*((void *)streamRef + 47))
      {
        cancel_source((dispatch_object_s **)streamRef + 47, (int *)streamRef + 96);
        *((_DWORD *)streamRef + 49) = 0;
      }

      if ((*((_BYTE *)streamRef + 184) & 4) != 0)
      {
        __int32 v8 = (__CFFileDescriptor *)*((void *)streamRef + 52);
        if (v8)
        {
          CFFileDescriptorInvalidate(v8);
          CFRelease(*((CFTypeRef *)streamRef + 52));
          *((void *)streamRef + 52) = 0LL;
          int v9 = (const void *)*((void *)streamRef + 53);
          if (v9)
          {
            CFRelease(v9);
            *((void *)streamRef + 53) = 0LL;
          }
        }

        if (*((void *)streamRef + 54))
        {
          cancel_source((dispatch_object_s **)streamRef + 54, (int *)streamRef + 110);
          *((_DWORD *)streamRef + 102) = -1;
        }
      }
    }

    else
    {
      uint64_t v10 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        FSEventStreamInvalidate_cold_2();
      }
    }
  }

  else
  {
    unsigned int v7 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      FSEventStreamInvalidate_cold_1();
    }
  }

void dispose_d2f_port(mach_port_name_t name)
{
  kern_return_t v1;
  mach_error_t v2;
  os_log_s *v3;
  if (name)
  {
    uint64_t v1 = mach_port_mod_refs(*MEMORY[0x1895FBBE0], name, 1u, -1);
    if (v1)
    {
      uintptr_t v2 = v1;
      CFNumberRef v3 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        dispose_d2f_port_cold_1(v2);
      }
    }
  }

FSEventStreamEventId FSEventsGetCurrentEventId(void)
{
  FSEventStreamEventId v2 = 0LL;
  int v0 = FSEvents_connect();
  FSEventStreamEventId result = 0LL;
  if (!v0)
  {
    f2d_get_current_event_id_rpc(FSEvents_f2d_public_port, &v2);
    return v2;
  }

  return result;
}

uint64_t FSEvents_connect()
{
  if (FSEvents_f2d_public_port)
  {
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    return 0LL;
  }

  else
  {
    uint64_t v0 = bootstrap_look_up2();
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    if ((_DWORD)v0)
    {
      uint64_t v1 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        FSEvents_connect_cold_1();
      }
    }
  }

  return v0;
}

CFUUIDRef FSEventsCopyUUIDForDevice(dev_t dev)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (dev <= 0)
  {
    FSEventStreamEventId v2 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      FSEventsCopyUUIDForDevice_cold_1();
    }
  }

  int v9 = 0;
  memset(v8, 0, sizeof(v8));
  f2d_get_server_uuid_rpc(FSEvents_f2d_public_port, dev, (uint64_t)v8);
  uint64_t v6 = CFStringCreateWithBytes(0LL, (const UInt8 *)v8, 36LL, 0x600u, 0);
  if (!v6) {
    return 0LL;
  }
  unsigned int v7 = v6;
  CFNumberRef v3 = CFUUIDCreateFromString(0LL, v6);
  CFRelease(v7);
  return v3;
}

FSEventStreamEventId FSEventsGetLastEventIdForDeviceBeforeTime(dev_t dev, CFAbsoluteTime time)
{
  FSEventStreamEventId v6 = 0LL;
  int v4 = FSEvents_connect();
  FSEventStreamEventId result = 0LL;
  if (!v4)
  {
    f2d_get_last_event_for_device_before_time_rpc(FSEvents_f2d_public_port, dev, (unint64_t)time, &v6);
    return v6;
  }

  return result;
}

Boolean FSEventStreamSetExclusionPaths(FSEventStreamRef streamRef, CFArrayRef pathsToExclude)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (*((_BYTE *)streamRef + 188)) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(pathsToExclude);
  *((void *)streamRef + 12) = Count;
  if (Count && Count <= 8)
  {
    if (Count >= 1)
    {
      CFIndex v6 = 0LL;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(pathsToExclude, v6);
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID != CFGetTypeID(ValueAtIndex) || !CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024LL)) {
          break;
        }
        if (*((_DWORD *)streamRef + 16) || !fsevent_realpath(buffer, __s1)) {
          __strlcpy_chk();
        }
        *((void *)streamRef + v6++ + 13) = strdup(__s1);
        if (*((void *)streamRef + 12) <= v6) {
          return 1;
        }
      }

      return 0;
    }

    return 1;
  }

  else
  {
    Boolean result = 0;
    *((void *)streamRef + 12) = 0LL;
  }

  return result;
}

char *fsevent_realpath(const char *a1, char *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  __int128 v4 = xmmword_183FBEE84;
  uint64_t v5 = 0x2000000000LL;
  DWORD1(v4) = 0x80000000;
  if (getattrlist(a1, &v4, v6, 0x420uLL, 0x20u) == -1) {
    return 0LL;
  }
  if (!a2) {
    return (char *)v7 + v7[0];
  }
  strlcpy(a2, (const char *)v7 + v7[0], 0x400uLL);
  return a2;
}

Boolean FSEventsPurgeEventsForDeviceUpToEventId(dev_t dev, FSEventStreamEventId eventId)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v16 = 0;
  int v4 = FSEvents_connect();
  LOBYTE(v5) = 0;
  if (!v4)
  {
    v17[0] = 0;
    int v6 = getfsstat(0LL, 0, 2);
    if ((v6 & 0x80000000) == 0)
    {
      unsigned int v7 = v6;
      int v8 = 2168 * v6;
      int v9 = (statfs *)malloc(2168 * v6);
      if (v9)
      {
        uint64_t v10 = v9;
        unsigned int v11 = getfsstat(v9, v8, 2);
        if ((v11 & 0x80000000) == 0)
        {
          uint64_t v12 = v11 >= v7 ? v7 : v11;
          if ((_DWORD)v12)
          {
            f_mntonname = v10->f_mntonname;
            while (*((_DWORD *)f_mntonname - 10) != dev)
            {
              f_mntonname += 2168;
              if (!--v12) {
                goto LABEL_14;
              }
            }

            __strlcpy_chk();
          }
        }

void FSEventStreamShow(ConstFSEventStreamRef streamRef)
{
  FSEventStreamEventId v2 = (FILE **)MEMORY[0x1895F89D0];
  fprintf((FILE *)*MEMORY[0x1895F89D0], "FSEventStreamRef @ %p:\n", streamRef);
  if (streamRef)
  {
    fprintf(*v2, "   allocator = %p\n", *((const void **)streamRef + 1));
    fprintf(*v2, "   callbacuint64_t k = %p\n", *((const void **)streamRef + 2));
    fprintf(*v2, "   f2d_private_port = 0x%x\n", *((_DWORD *)streamRef + 49));
    fprintf( *v2,  "   CFFileDescriptorContext context = {%lu, %p, %p, %p, %p}\n",  *((void *)streamRef + 3),  *((const void **)streamRef + 4),  *((const void **)streamRef + 5),  *((const void **)streamRef + 6),  *((const void **)streamRef + 7));
    fprintf(*v2, "   numPathsToWatch = %lu\n", *((void *)streamRef + 9));
    fprintf(*v2, "   pathsToWatch = %p\n", *((const void **)streamRef + 10));
    if (*((uint64_t *)streamRef + 9) >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        fprintf(*v2, "        pathsToWatch[%d] = '%s'\n", v3, *(const char **)(*((void *)streamRef + 10) + 8 * v3));
        ++v3;
      }

      while (*((void *)streamRef + 9) > v3);
    }

    fprintf(*v2, "   numPathsToExclude = %lu\n", *((void *)streamRef + 12));
    if (*((uint64_t *)streamRef + 12) >= 1)
    {
      uint64_t v4 = 0LL;
      do
      {
        fprintf(*v2, "        pathsToExclude[%d] = '%s'\n", v4, *((const char **)streamRef + v4 + 13));
        ++v4;
      }

      while (*((void *)streamRef + 12) > v4);
    }

    fprintf(*v2, "   latestEventId = %lld\n", *((void *)streamRef + 21));
    fprintf(*v2, "   latency = %llu (microseconds)\n", *((void *)streamRef + 22));
    fprintf(*v2, "   flags = 0x%08x\n", *((_DWORD *)streamRef + 46));
    fprintf(*v2, "   runLoop = %p\n", *((const void **)streamRef + 28));
    fprintf(*v2, "   runLoopMode = %p\n", *((const void **)streamRef + 29));
  }

void server_gone_StreamRef_callback(uint64_t a1)
{
  if (a1 && !*(_BYTE *)(a1 + 189) && (*(void *)(a1 + 360) || *(void *)(a1 + 224)))
  {
    FSEventStreamEventId v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    uint64_t v3 = (mach_port_name_t *)(a1 + 192);
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberIntType, (const void *)(a1 + 192));
    pthread_mutex_lock(&FSEvents_streamDict_mutex);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)FSEvents_streamDict, v4);
    pthread_mutex_unlock(&FSEvents_streamDict_mutex);
    CFRelease(v4);
    pthread_mutex_lock(&FSEvents_f2d_public_port_mutex);
    BOOL v5 = (ipc_space_t *)MEMORY[0x1895FBBE0];
    mach_port_deallocate(*MEMORY[0x1895FBBE0], FSEvents_f2d_public_port);
    FSEvents_f2d_public_port = 0;
    pthread_mutex_unlock(&FSEvents_f2d_public_port_mutex);
    uint64_t v6 = *(void *)(a1 + 360);
    if (v6)
    {
      cancel_source((dispatch_object_s **)(a1 + 360), (int *)(a1 + 368));
      *(_DWORD *)(a1 + 192) = 0;
    }

    uint64_t v7 = *(void *)(a1 + 376);
    if (v7)
    {
      cancel_source((dispatch_object_s **)(a1 + 376), (int *)(a1 + 384));
      *(_DWORD *)(a1 + 196) = 0;
    }

    int v8 = *(__CFRunLoopSource **)(a1 + 216);
    if (v8)
    {
      CFRunLoopRemoveSource(*(CFRunLoopRef *)(a1 + 224), v8, *(CFRunLoopMode *)(a1 + 232));
      CFRelease(*(CFTypeRef *)(a1 + 216));
      *(void *)(a1 + 216) = 0LL;
    }

    int v9 = *(__CFMachPort **)(a1 + 208);
    if (v9)
    {
      CFMachPortSetInvalidationCallBack(v9, 0LL);
      CFMachPortInvalidate(*(CFMachPortRef *)(a1 + 208));
      CFRelease(*(CFTypeRef *)(a1 + 208));
      *(void *)(a1 + 20_Block_object_dispose((const void *)(v9 - 64), 8) = 0LL;
    }

    if (!v7)
    {
      mach_port_deallocate(*v5, *(_DWORD *)(a1 + 196));
      *(_DWORD *)(a1 + 196) = 0;
    }

    uint64_t v10 = *(__CFMachPort **)(a1 + 200);
    if (v10)
    {
      CFMachPortInvalidate(v10);
      CFRelease(*(CFTypeRef *)(a1 + 200));
      *(void *)(a1 + 200) = 0LL;
    }

    if (!v6)
    {
      dispose_d2f_port(*v3);
      mach_port_name_t *v3 = 0;
    }

    if (FSEvents_connect())
    {
      unsigned int v11 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        server_gone_StreamRef_callback_cold_4();
      }
    }

    else if (allocate_d2f_port((uint64_t)"server_gone_StreamRef_callback", a1))
    {
      uint64_t v12 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        server_gone_StreamRef_callback_cold_3();
      }
    }

    else
    {
      int v13 = (int *)(a1 + 196);
      int v14 = register_with_server( a1,  (uint64_t)"server_gone_StreamRef_callback",  *(_DWORD *)(a1 + 192),  *(_DWORD *)(a1 + 64),  *(_DWORD *)(a1 + 72),  *(const void ***)(a1 + 80),  -1LL,  *(void *)(a1 + 176),  *(_DWORD *)(a1 + 184),  (_DWORD *)(a1 + 196));
      if (v14)
      {
        int v15 = v14;
        int v16 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          server_gone_StreamRef_callback_cold_2(v13, v15, v16);
        }
      }

      else
      {
        CFNumberRef v17 = CFNumberCreate(v2, kCFNumberIntType, (const void *)(a1 + 192));
        pthread_mutex_lock(&FSEvents_streamDict_mutex);
        CFDictionaryAddValue((CFMutableDictionaryRef)FSEvents_streamDict, v17, (const void *)a1);
        pthread_mutex_unlock(&FSEvents_streamDict_mutex);
        CFRelease(v17);
        if (v6)
        {
          if (create_d2f_port_source(a1)) {
            resume_source(*(dispatch_object_s **)(a1 + 360), (int *)(a1 + 368));
          }
          if (create_f2d_private_port_source(a1)) {
            resume_source(*(dispatch_object_s **)(a1 + 376), (int *)(a1 + 384));
          }
        }

        else if (*(void *)(a1 + 224))
        {
          context.version = 0LL;
          context.info = (void *)a1;
          context.retain = (const void *(__cdecl *)(const void *))_FSEventStreamRetainAndReturnSelf;
          context.release = (void (__cdecl *)(const void *))FSEventStreamRelease;
          context.copyDescription = (CFStringRef (__cdecl *)(const void *))FSEventStreamCopyDescription;
          uint64_t v18 = CFMachPortCreateWithPort( 0LL,  *(_DWORD *)(a1 + 196),  (CFMachPortCallBack)FSEventsClientPortCallback,  &context,  0LL);
          *(void *)(a1 + 20_Block_object_dispose((const void *)(v9 - 64), 8) = v18;
          if (v18)
          {
            CFMachPortSetInvalidationCallBack(v18, (CFMachPortInvalidationCallBack)server_gone_callback);
            _createAndAddRunLoopSource( (int)"server_gone_StreamRef_callback",  a1,  *(CFRunLoopRef *)(a1 + 224),  *(CFRunLoopMode *)(a1 + 232));
          }

          else
          {
            uint64_t v19 = (os_log_s *)fsevent_default_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              server_gone_StreamRef_callback_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
            }
          }
        }

        FSEventStreamRetain((FSEventStreamRef)a1);
        if (*(uint64_t *)(a1 + 72) >= 1)
        {
          uint64_t v27 = 0LL;
          do
            root_dir_event_callback(a1, v27++, 5);
          while (*(void *)(a1 + 72) > v27);
        }

        FSEventStreamRelease((FSEventStreamRef)a1);
      }
    }
  }

void root_dir_event_callback(uint64_t a1, int a2, int a3)
{
  v41[1] = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void (**)(uint64_t, void, uint64_t, const char **, int *, void *))(a1 + 16);
  if (!v3) {
    return;
  }
  uint64_t v6 = caller_path(*(const char **)(*(void *)(a1 + 80) + 8LL * a2), *(_DWORD *)(*(void *)(a1 + 88) + 4LL * a2));
  int v38 = v6;
  int v37 = a3;
  v41[0] = 0LL;
  int v7 = *(_DWORD *)(a1 + 184);
  if ((v7 & 0x40) != 0)
  {
    int v8 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    int v9 = (__CFString *)CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x189604DB0], v6);
    if (v9)
    {
      uint64_t v10 = v9;
      values = v9;
      keys = @"path";
      CFTypeRef cf = CFDictionaryCreate( v8,  (const void **)&keys,  (const void **)&values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
      if (cf)
      {
        CFArrayRef v11 = CFArrayCreate(v8, &cf, 1LL, MEMORY[0x189605228]);
        if (v11)
        {
          CFArrayRef v12 = v11;
          (*(void (**)(uint64_t, void, uint64_t, CFArrayRef, int *, void *))(a1 + 16))( a1,  *(void *)(a1 + 32),  1LL,  v11,  &v37,  v41);
          CFRelease(v12);
        }

        else
        {
          uint64_t v20 = (os_log_s *)fsevent_default_log();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            root_dir_event_callback_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
          }
        }

        CFRelease(cf);
      }

      else
      {
        uint64_t v18 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          root_dir_event_callback_cold_4();
        }
      }

      CFTypeRef v16 = v10;
      goto LABEL_22;
    }

    CFNumberRef v17 = (os_log_s *)fsevent_default_log();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_13:
    root_dir_event_callback_cold_1();
    return;
  }

  if ((v7 & 1) == 0)
  {
    v3(a1, *(void *)(a1 + 32), 1LL, &v38, &v37, v41);
    return;
  }

  int v13 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFTypeRef cf = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x189604DB0], v6);
  if (!cf)
  {
    uint64_t v19 = (os_log_s *)fsevent_default_log();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_13;
  }

  CFArrayRef v14 = CFArrayCreate(v13, &cf, 1LL, MEMORY[0x189605228]);
  if (v14)
  {
    CFArrayRef v15 = v14;
    (*(void (**)(uint64_t, void, uint64_t, CFArrayRef, int *, void *))(a1 + 16))( a1,  *(void *)(a1 + 32),  1LL,  v14,  &v37,  v41);
    CFRelease(v15);
    CFTypeRef v16 = cf;
LABEL_22:
    CFRelease(v16);
    return;
  }

  __darwin_time_t v28 = (os_log_s *)fsevent_default_log();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    root_dir_event_callback_cold_2(v28, v29, v30, v31, v32, v33, v34, v35);
  }
}

void resume_source(dispatch_object_s *a1, int *a2)
{
  if (a1)
  {
    int v3 = *a2;
    if (*a2)
    {
      if (v3 == 2)
      {
        dispatch_resume(a1);
      }

      else if (v3 == 1)
      {
        dispatch_activate(a1);
      }

      *a2 = 3;
    }
  }

uint64_t __create_f2d_private_port_source_block_invoke(uint64_t a1)
{
  return server_gone_StreamRef_callback(*(void *)(a1 + 32));
}

void __create_f2d_private_port_source_block_invoke_2(uint64_t a1)
{
}

void cancel_source(dispatch_object_s **a1, int *a2)
{
  CFNumberRef v4 = (dispatch_source_s *)*a1;
  if (v4)
  {
    dispatch_source_cancel(v4);
    resume_source(*a1, a2);
    *a1 = 0LL;
  }

  *a2 = 0;
}

uint64_t watch_path(const char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10 = 0;
  uint64_t v55 = *MEMORY[0x1895F89C0];
  int v11 = -1;
  int v12 = 1;
  uint64_t v13 = 0xFFFFFFFFLL;
  BOOL v14 = 1;
  while (1)
  {
    unsigned int v15 = v10;
    int v10 = v12;
    realpath_DARWIN_EXTSN(a3, &__s);
    if (v53)
    {
      int v16 = 0;
      while (1)
      {
        int v17 = open(&__s, 0x8000);
        if ((v17 & 0x80000000) == 0) {
          break;
        }
        __error();
        my_dirname(&__s, v54);
        realpath_DARWIN_EXTSN(v54, &__s);
        ++v16;
        if (!v53) {
          goto LABEL_8;
        }
      }

      int v11 = v17;
LABEL_11:
      uint64_t v13 = 0LL;
      goto LABEL_12;
    }

    int v16 = 0;
    if (v11 < 0)
    {
LABEL_8:
      int v11 = open(&__s, 0x8000);
      if (v11 < 0)
      {
        uint64_t v30 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          watch_path_cold_2();
        }
        __error();
        uint64_t v32 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          watch_path_cold_1();
        }
        uint64_t v13 = *__error();
        goto LABEL_45;
      }

      goto LABEL_11;
    }

LABEL_12:
    fcntl(v11, 2, 1LL);
    if (v14 || (int v18 = open(&__s, 0), v18 < 0))
    {
      unsigned int v20 = v15;
    }

    else
    {
      int v19 = v18;
      fstat(v11, &v42);
      fstat(v19, &v41);
      close(v19);
      close(v11);
      if (v42.st_ino == v41.st_ino)
      {
        uint64_t v33 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          watch_path_cold_3();
        }
        int v11 = -1;
        goto LABEL_45;
      }

      unsigned int v20 = v15;
      int v11 = -1;
    }

    *(void *)a4 = v11;
    *(void *)(a4 + _Block_object_dispose((const void *)(v9 - 64), 8) = 0x270021FFFCLL;
    *(void *)(a4 + 16) = 0LL;
    *(void *)(a4 + 24) = a6;
    uint64_t v13 = kevent(a2, (const kevent *)a4, 1, 0LL, 0, 0LL);
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v21 = (os_log_s *)fsevent_default_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = *(void *)(a5 + 24);
        uint64_t v26 = __error();
        uint64_t v27 = strerror(*v26);
        *(_DWORD *)stat buf = 136316162;
        __int16 v44 = a1;
        __int16 v45 = 2080;
        p_s = "watch_path";
        __int16 v47 = 1024;
        int v48 = v11;
        __int16 v49 = 2080;
        *(void *)uint64_t v50 = v37;
        *(_WORD *)&v50[8] = 2080;
        v51[0] = v27;
        _os_log_error_impl( &dword_183E58000,  v21,  OS_LOG_TYPE_ERROR,  "%s: %s: error trying to add kqueue for fd %d (%s; %s)",
          buf,
          0x30u);
      }
    }

    uint64_t v22 = *(unsigned int *)(a5 + 4);
    if ((v22 & 0x80000000) == 0)
    {
      *(void *)a4 = v22;
      *(void *)(a4 + _Block_object_dispose((const void *)(v9 - 64), 8) = 0x270002FFFCLL;
      *(void *)(a4 + 16) = 0LL;
      *(void *)(a4 + 24) = a6;
      uint64_t v13 = kevent(a2, (const kevent *)a4, 1, 0LL, 0, 0LL);
      if ((v13 & 0x80000000) != 0)
      {
        uint64_t v23 = (os_log_s *)fsevent_default_log();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          int v38 = *(_DWORD *)(a5 + 4);
          __darwin_time_t v28 = __error();
          uint64_t v29 = strerror(*v28);
          *(_DWORD *)stat buf = 136315906;
          __int16 v44 = a1;
          __int16 v45 = 2080;
          p_s = "watch_path";
          __int16 v47 = 1024;
          int v48 = v38;
          __int16 v49 = 2080;
          *(void *)uint64_t v50 = v29;
          _os_log_error_impl( &dword_183E58000,  v23,  OS_LOG_TYPE_ERROR,  "%s: %s: error removing fd %d from kqueue (%s)",  buf,  0x26u);
        }
      }

      close(*(_DWORD *)(a5 + 4));
    }

    *(_DWORD *)a5 = *(_DWORD *)a5 & 0xFFFFFFFE | (v16 != 0);
    *(_DWORD *)(a5 + 4) = v11;
    int v24 = open(&__s, 0);
    if (v24 < 0) {
      break;
    }
    fstat(v11, &v42);
    fstat(v24, &v41);
    close(v24);
    if (v42.st_ino == v41.st_ino) {
      goto LABEL_39;
    }
    uint64_t v25 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      __int16 v44 = "watch_path";
      __int16 v45 = 2080;
      p_s = &__s;
      _os_log_error_impl( &dword_183E58000,  v25,  OS_LOG_TYPE_ERROR,  "%s: watching path(%s) renamed while registering watchroot",  buf,  0x16u);
    }

  if (v15)
  {
LABEL_13:
    int v18 = 0LL;
    if (a4)
    {
LABEL_14:
      int v18 = v18;
      int v19 = 0LL;
      *a4 = v18;
LABEL_18:
      uint64_t v21 = 1LL;
      goto LABEL_19;
    }

  return v4;
}

  if (!a4->claimData)
  {
    unsigned int v20 = 0LL;
    goto LABEL_16;
  }

  int v18 = -[LSRecord _initWithContext:tableID:unitID:]( objc_alloc(&OBJC_CLASS___LSClaimRecord),  "_initWithContext:tableID:unitID:",  a3,  a3->db->schema.claimTable,  a4->claim);
  int v19 = v18;
  if (!v18)
  {

    if (a7)
    {
      __darwin_time_t v28 = *MEMORY[0x189607490];
      uint64_t v29 = @"Unable to find this claim record in the Launch Services database.";
      [MEMORY[0x189603F68] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10810LL,  (uint64_t)"-[LSClaimBinding _initWithContext:binding:coreTypesBundleRecord:typeRecord:error:]",  292LL,  v22);
      *a7 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_20;
  }

  objc_storeWeak(v18 + 4, v15);
  unsigned int v20 = v19;
LABEL_16:
  uint64_t v21 = -[LSClaimBinding _initWithClaimRecord:typeRecord:bundleRecord:]( self,  "_initWithClaimRecord:typeRecord:bundleRecord:",  v20,  a6,  v15);
LABEL_27:
  uint64_t v26 = v21;

  return v26;
}

      goto LABEL_13;
    }

    _LSDatabaseGetLog();
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__new = 138412290;
      uint64_t v30 = v14;
      _os_log_error_impl( &dword_183E58000,  v23,  OS_LOG_TYPE_ERROR,  "couldn't get file system representation of database path: %@",  (uint8_t *)__new,  0xCu);
    }
  }

  else
  {
    _LSDatabaseGetLog();
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138412290;
      uint64_t v32 = (uint64_t)v11;
      _os_log_error_impl(&dword_183E58000, v22, OS_LOG_TYPE_ERROR, "couldn't get database aside node: %@", buf, 0xCu);
    }
  }

  if (v19 && v21) {
    _LSContextDestroy(v19);
  }
  BOOL v14 = v20;
  int v19 = 0LL;
  unsigned int v20 = 0LL;

  uint64_t v21 = 0;
  unsigned int v15 = v22;
  uint64_t v22 = 0LL;
}

  int v18 = (*(uint64_t (**)(void, BOOL, id, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v17 == 0LL,  v17,  0LL);
  MEMORY[0x186E2AFE0](v18);
}

  -[_LSDClient XPCConnection](self, "XPCConnection");
  int v19 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v23 = 0LL;
  [v11 _resolveQueries:v8 XPCConnection:v19 error:&v23];
  unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v21 = v23;

LABEL_15:
  v9[2](v9, v20, v21);
}

    _LSResetServer();
    if ((v2 & 0x100) == 0)
    {
LABEL_16:
      if ((v2 & 0x80) != 0)
      {
        _LSDefaultLog();
        CFNumberRef v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v5 = _CFGetEUID();
          uint64_t v6 = 134217984;
          int v7 = v5;
          _os_log_impl( &dword_183E58000,  v4,  OS_LOG_TYPE_DEFAULT,  "LaunchServices: Completed database seeding for uid %lli",  (uint8_t *)&v6,  0xCu);
        }

        _LSSetDatabaseIsSeeded(1);
      }

      return 0LL;
    }
}

          int v17 = *(void *)(a1 + 64);
          [v6 error];
          int v18 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v18);

          goto LABEL_13;
        }
      }

      else
      {
      }
    }

    _LSDefaultLog();
    unsigned int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      [v6 error];
      int v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)stat buf = 138412290;
      __darwin_time_t v28 = v16;
      _os_log_impl( &dword_183E58000,  v15,  OS_LOG_TYPE_DEFAULT,  "application launch failed - received error %@",  buf,  0xCu);
    }

    goto LABEL_12;
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
LABEL_13:
}

  if (!*(_BYTE *)(a4 + 32))
  {
    BOOL v14 = *(id *)a2;
    __int128 v59 = 256;
    TypeDirectory = 0;
    uint64_t v61 = 0LL;
    *(void *)int v57 = a1;
    __int128 v58 = 0LL;
    objc_storeStrong(&v58, v14);
    if (TypeDirectory) {
      goto LABEL_14;
    }
    LOBYTE(v59) = 0;
    if ([v58 isVolume])
    {
      TypeVolume = _UTTypeGetTypeVolume(**(_LSDatabase ***)v57);
LABEL_21:
      TypeDirectory = TypeVolume;
      goto LABEL_83;
    }

    if ([v58 isDirectory])
    {
      LOBYTE(v63) = 0;
      if (_LSNodeIsPackageIgnoringTypeDeclarations(*(LSContext **)v57, v58, &v63))
      {
        unsigned int v20 = **(_LSDatabase ***)v57;
        if ((_BYTE)v63) {
          TypeAVCHDCollection = _UTTypeGetTypeAVCHDCollection(v20);
        }
        else {
          TypeAVCHDCollection = _UTTypeGetTypePackage(v20);
        }
        TypeDirectory = TypeAVCHDCollection;
        LOBYTE(v59) = (_BYTE)v63 == 0;
      }

      else
      {
        TypeDirectory = _UTTypeGetTypeDirectory(**(_LSDatabase ***)v57);
        HIBYTE(v59) = 0;
        LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
        LOBYTE(v59) = v34 != 0LL;
      }

      goto LABEL_82;
    }

    if ([v58 isSymbolicLink])
    {
      TypeVolume = _UTTypeGetTypeSymbolicLink(**(_LSDatabase ***)v57);
      goto LABEL_21;
    }

    if ([v58 isAliasFile])
    {
      TypeVolume = _UTTypeGetTypeAliasFile(**(_LSDatabase ***)v57);
      goto LABEL_21;
    }

    if ([v58 isRegularFile])
    {
      TypeVolume = _UTTypeGetTypeData(**(_LSDatabase ***)v57);
      TypeDirectory = TypeVolume;
      LOBYTE(v59) = 1;
      goto LABEL_83;
    }

    unsigned int v63 = 0LL;
    uint64_t v52 = (const void *)*MEMORY[0x189603BF8];
    if (![v58 getResourceValue:&v63 forKey:*MEMORY[0x189603BF8] options:1 error:a3])
    {
LABEL_118:

LABEL_82:
      TypeVolume = TypeDirectory;
LABEL_83:
      if (a3 && !TypeVolume)
      {
        if (*a3) {
          goto LABEL_88;
        }
        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10813LL, (uint64_t)"resolveBaseType", 381LL, 0LL);
        int v43 = (id)objc_claimAutoreleasedReturnValue();
LABEL_77:
        *a3 = v43;
LABEL_88:
        stat v42 = *(unsigned __int8 *)(a4 + 32);
        goto LABEL_89;
      }

      if (!TypeVolume) {
        goto LABEL_88;
      }
LABEL_14:
      if (!(_BYTE)v59) {
        goto LABEL_39;
      }
      LOBYTE(v64) = 0;
      uint64_t v68 = 0;
      unsigned int v15 = (const __CFString *)LaunchServices::TypeEvaluation::State::getExtension((LaunchServices::TypeEvaluation::State *)v57);
      int v16 = TypeDirectory;
      if (v15)
      {
        LODWORD(v71[0]) = 0;
        if (_UTTypeGetActiveIdentifierForTag( **(void ***)v57,  @"public.filename-extension",  v15,  TypeDirectory,  (uint64_t)v71))
        {
          int v17 = (int)v71[0];
          if (LODWORD(v71[0]))
          {
            int v18 = _UTTypeGet();
            LODWORD(v64) = v17;
            unsigned int v65 = v18;
            int v66 = 0LL;
            uint64_t v68 = 1;
            uint64_t v67 = 0;
            goto LABEL_37;
          }
        }

        int v16 = TypeDirectory;
      }

      if (!v16 || !(_BYTE)v59 || !HIBYTE(v59))
      {
LABEL_37:
        std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>( a4,  (uint64_t)&v64);
        if (v68) {

        }
LABEL_39:
        if (*(_BYTE *)(a4 + 32)) {
          goto LABEL_74;
        }
        LODWORD(v64) = 0;
        uint64_t v26 = TypeDirectory;
        if (v26 == _UTTypeGetTypeData(**(_LSDatabase ***)v57))
        {
          [v58 nameWithError:0];
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
          __darwin_time_t v28 = v27;
          if (v27)
          {
            if (![v27 caseInsensitiveCompare:@"makefile"]
              || ![v28 caseInsensitiveCompare:@"gnumakefile"])
            {
              _UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, @"public.make-source", &v64);
            }

            if (objc_msgSend( (id)LaunchServices::TypeEvaluation::gnitsFileNames(void)::result,  "containsObject:",  v28,  *(void *)v57)) {
              _UTGetActiveTypeForCFStringIdentifier(**(void ***)v57, @"public.plain-text", &v64);
            }
          }

          uint64_t v29 = (int)v64;
          if ((_DWORD)v64)
          {
            uint64_t v30 = _UTTypeGet();
            uint64_t v31 = *(unsigned __int8 *)(a4 + 32);
            *(_DWORD *)a4 = v29;
            *(void *)(a4 + _Block_object_dispose((const void *)(v9 - 64), 8) = v30;
            if (v31)
            {
              uint64_t v32 = *(void **)(a4 + 16);
              *(void *)(a4 + 16) = 0LL;
            }

            else
            {
              *(void *)(a4 + 16) = 0LL;
              *(_BYTE *)(a4 + 32) = 1;
            }

            *(_BYTE *)(a4 + 24) = 0;
          }
        }

        if (*(_BYTE *)(a4 + 32)) {
          goto LABEL_74;
        }
        uint64_t v35 = TypeDirectory;
        if (v35 == _UTTypeGetTypeData(**(_LSDatabase ***)v57))
        {
          if ([v58 isExecutable])
          {
            TypeUnixExecutable = _UTTypeGetTypeUnixExecutable(**(_LSDatabase ***)v57);
            goto LABEL_68;
          }
        }

        else
        {
          uint64_t v37 = TypeDirectory;
          if (v37 == _UTTypeGetTypeDirectory(**(_LSDatabase ***)v57))
          {
            TypeUnixExecutable = _UTTypeGetTypeFolder(**(_LSDatabase ***)v57);
LABEL_68:
            int v38 = TypeUnixExecutable;
            if (TypeUnixExecutable) {
              goto LABEL_70;
            }
          }
        }

        int v38 = TypeDirectory;
        if (!TypeDirectory)
        {
LABEL_74:
          stat v42 = *(unsigned __int8 *)(a4 + 32);
          if (!a3 || *(_BYTE *)(a4 + 32))
          {
LABEL_89:
            if (!v42
              || !*(_BYTE *)(a2 + 8)
              || (__int16 v44 = *(_DWORD *)a4,
                  LOBYTE(v64) = 0,
                  uint64_t v68 = 0,
                  _UTTypeGetTypeData(**(_LSDatabase ***)v57) != v44))
            {
LABEL_103:

              goto LABEL_104;
            }

            v71[0] = 0LL;
            [v58 URL];
            __int16 v45 = (void *)objc_claimAutoreleasedReturnValue();
            v71[0] = 0LL;
            if (_LSCopySniffedExtensionAndTypeIdentifierForURL())
            {
              uint64_t v46 = v71[0] == 0LL;

              if (!v46)
              {
                LODWORD(v70[0]) = 0;
                __int16 v47 = **(void ***)v57;
                int v48 = (const __CFString *)v71[0];
                TypeData = _UTTypeGetTypeData(**(_LSDatabase ***)v57);
                ActiveIdentifierForTag = _UTTypeGetActiveIdentifierForTag( v47,  @"public.filename-extension",  v48,  TypeData,  (uint64_t)v70);
                if (ActiveIdentifierForTag)
                {
                  LODWORD(v64) = v70[0];
                  unsigned int v65 = ActiveIdentifierForTag;
                  int v66 = 0LL;
                  int v51 = 1;
                  uint64_t v68 = 1;
                  uint64_t v67 = 1;
LABEL_98:
                  if (v71[0]) {
                    CFRelease(v71[0]);
                  }
                  if (v51)
                  {
                    std::__optional_storage_base<LaunchServices::TypeEvaluator::Result,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LaunchServices::TypeEvaluator::Result,false>>( a4,  (uint64_t)&v64);
                    if (v68) {
                  }
                    }

                  goto LABEL_103;
                }
              }
            }

            else
            {
            }

            int v51 = 0;
            goto LABEL_98;
          }

          _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10813LL, (uint64_t)"runEvaluator", 274LL, 0LL);
          int v43 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_77;
        }

  if (CurrentContext && v25) {
    _LSContextDestroy(CurrentContext);
  }
  int v16 = v24;
  CurrentContext = 0LL;
  int v24 = 0LL;

  uint64_t v25 = 0;
  int v17 = v26;
  uint64_t v26 = 0LL;

LABEL_16:
  int v18 = (id)v28[5];
  _Block_object_dispose(&v27, 8);

  return (UTTypeRecord *)v18;
}
          }

          FSEventStreamEventId v2 = v20;
          int v11 = v19;
          int v10 = v18;
          int v8 = v35;
          goto LABEL_14;
        }

        _LSInstallLog();
        int v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 138412546;
          __int16 v45 = v13;
          uint64_t v46 = 2112;
          __int16 v47 = (uint64_t)v16;
          _os_log_error_impl( &dword_183E58000,  (os_log_t)v17,  OS_LOG_TYPE_ERROR,  "Error reading install notification journal %@: %@",  buf,  0x16u);
        }

uint64_t watch_all_parents(uint64_t a1, int kq, char *__s, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  int v10 = *(void **)(a4 + 16);
  if (v10)
  {
    int v11 = *(_DWORD *)(a4 + 8);
    if (v11 >= 1)
    {
      for (uint64_t i = 0LL; i < v11; ++i)
      {
        if ((*(_DWORD *)(*(void *)(a4 + 16) + 4 * i) & 0x80000000) == 0)
        {
          changelist.ident = *(unsigned int *)(*(void *)(a4 + 16) + 4 * i);
          *(void *)&changelist.filter = 0x200002FFFCLL;
          changelist.data = 0LL;
          changelist.int64_t udata = (void *)(a5 | 0x80000000LL);
          kevent(kq, &changelist, 1, 0LL, 0, 0LL);
          close(*(_DWORD *)(*(void *)(a4 + 16) + 4 * i));
          int v11 = *(_DWORD *)(a4 + 8);
        }
      }

      int v10 = *(void **)(a4 + 16);
    }

    free(v10);
    *(void *)(a4 + 16) = 0LL;
    *(_DWORD *)(a4 + _Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  }

  if (__s && *__s)
  {
    my_dirname(__s, __sa);
    uint64_t v13 = v39;
    realpath_DARWIN_EXTSN(__sa, v39);
    int v14 = 0;
    do
    {
      while (1)
      {
        int v16 = *v13++;
        int v15 = v16;
        if (v16 != 47) {
          break;
        }
        ++v14;
      }
    }

    while (v15);
    int v19 = malloc(4LL * v14);
    *(void *)(a4 + 16) = v19;
    if (v19)
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = v14;
      *(_DWORD *)(a4 + _Block_object_dispose((const void *)(v9 - 64), 8) = v14;
      do
      {
        int v22 = open(v39, 0x8000);
        *(_DWORD *)(*(void *)(a4 + 16) + 4 * v20) = v22;
        if ((v22 & 0x80000000) == 0)
        {
          fcntl(v22, 2, 1LL);
          changelist.ident = *(int *)(*(void *)(a4 + 16) + 4 * v20);
          *(void *)&changelist.filter = 0x200021FFFCLL;
          changelist.data = 0LL;
          changelist.int64_t udata = (void *)(a5 | 0x80000000LL);
          if (kevent(kq, &changelist, 1, 0LL, 0, 0LL) < 0)
          {
            uint64_t v23 = (os_log_s *)fsevent_default_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              int v24 = *(_DWORD *)(*(void *)(a4 + 16) + 4 * v20);
              uint64_t v25 = __error();
              uint64_t v26 = strerror(*v25);
              *(_DWORD *)stat buf = 136316162;
              uint64_t v29 = a1;
              __int16 v30 = 2080;
              uint64_t v31 = "watch_all_parents";
              __int16 v32 = 1024;
              int v33 = v24;
              __int16 v34 = 2080;
              uint64_t v35 = v39;
              __int16 v36 = 2080;
              uint64_t v37 = v26;
              _os_log_error_impl( &dword_183E58000,  v23,  OS_LOG_TYPE_ERROR,  "%s: %s: error trying to add kqueue for fd %d (%s; %s)",
                buf,
                0x30u);
            }
          }
        }

        __strcpy_chk();
        my_dirname(__sa, v39);
        uint64_t result = 0LL;
        ++v20;
      }

      while (v20 < v21 && v39[1]);
    }

    else
    {
      return 12LL;
    }
  }

  else
  {
    int v17 = (os_log_s *)fsevent_default_log();
    uint64_t result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      watch_all_parents_cold_1();
      return 0LL;
    }
  }

  return result;
}

char *my_dirname(char *__s, char *a2)
{
  if (__s && *__s && (CFNumberRef v4 = strrchr(__s, 47)) != 0LL)
  {
    if (v4 > __s)
    {
      while (*v4 == 47)
      {
        if (--v4 <= __s)
        {
          CFNumberRef v4 = __s;
          break;
        }
      }
    }

    uint64_t v5 = v4 - __s;
    if (v4 - __s > 1023)
    {
      strncpy(a2, __s, 0x3FFuLL);
      a2[1023] = 0;
    }

    else
    {
      uint64_t v6 = v5 + 1;
      strncpy(a2, __s, v5 + 1);
      a2[v6] = 0;
    }
  }

  else
  {
    strcpy(a2, "./");
  }

  return a2;
}

uint64_t FSEventsClientProcessMessageCallback()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  return FSEventsD2F_server(v0, (uint64_t)v2);
}

void __create_d2f_port_source_block_invoke(uint64_t a1)
{
}

void receive_and_dispatch_rcv_msg(mach_port_name_t a1)
{
  mach_msg_return_t v7;
  mach_msg_size_t v8;
  mach_msg_header_t *v9;
  os_log_s *v10;
  os_log_s *v11;
  void v12[2];
  v12[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *MEMORY[0x1895FD590];
  uint64_t v3 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  CFNumberRef v4 = (mach_msg_header_t *)((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (_DWORD *)((char *)v12 - v5);
  int v7 = mach_msg(v4, 50331910, 0, v2, a1, 0, 0);
  if (!v7)
  {
LABEL_8:
    int v9 = (mach_msg_header_t *)((char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    goto LABEL_9;
  }

  if (v7 != 268451844)
  {
    int v11 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      receive_and_dispatch_rcv_msg_cold_1();
    }
    goto LABEL_8;
  }

  int v8 = v4->msgh_size + 68;
  int v9 = (mach_msg_header_t *)malloc(v8);
  if (mach_msg(v9, 262, 0, v8, a1, 0, 0))
  {
    int v10 = (os_log_s *)fsevent_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      receive_and_dispatch_rcv_msg_cold_2();
    }
  }

void __create_d2f_port_source_block_invoke_2(uint64_t a1)
{
}

void OUTLINED_FUNCTION_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_3( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_5(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_6( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void OUTLINED_FUNCTION_8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_9(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_14(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_15(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_20( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

char *OUTLINED_FUNCTION_24( int a1, mach_error_t error_value, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return mach_error_string(error_value);
}

char *OUTLINED_FUNCTION_25@<X0>(mach_error_t error_value@<W0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 24) = a2;
  return mach_error_string(error_value);
}

void OUTLINED_FUNCTION_26(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_27( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_28( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void FSEventStreamStart_cold_1()
{
}

void FSEventStreamStart_cold_2()
{
}

void FSEventStreamStart_cold_3()
{
}

void register_with_server_cold_1()
{
  OUTLINED_FUNCTION_0( &dword_183E58000,  v0,  v1,  "%s: %s: ERROR: array_of_path_lengths = malloc() failed",  v2,  v3,  v4,  v5,  2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_2()
{
  OUTLINED_FUNCTION_0( &dword_183E58000,  v0,  v1,  "%s: %s: ERROR: array_of_path_offsets = malloc() failed",  v2,  v3,  v4,  v5,  2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_3()
{
  OUTLINED_FUNCTION_0(&dword_183E58000, v0, v1, "%s: %s: ERROR: paths_blob = malloc() failed", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void register_with_server_cold_4()
{
  *(_DWORD *)int v11 = 136315906;
  *(void *)&void v11[4] = v1;
  OUTLINED_FUNCTION_4();
  *(void *)&v11[14] = "register_with_server";
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_14(&dword_183E58000, v0, v10, "%s: %s: ERROR: f2d_register_rpc() => %s (%d)", v11);
  OUTLINED_FUNCTION_10();
}

void register_with_server_cold_5()
{
}

void register_with_server_cold_6()
{
}

void register_with_server_cold_7()
{
}

void _FSEventStreamRetainAndReturnSelf_cold_1()
{
}

void FSEventStreamRelease_cold_1()
{
}

void FSEventStreamRelease_cold_2( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamCopyDescription_cold_1()
{
}

void FSEventStreamCopyDescription_cold_2( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: cStr = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void FSEventsClientPortCallback_cold_1( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamStop_cold_1()
{
}

void FSEventStreamStop_cold_2()
{
}

void dispose_f2d_private_port_cold_1(mach_error_t a1)
{
  OUTLINED_FUNCTION_28( &dword_183E58000,  v1,  v2,  "%s: ERROR: mach_port_deallocate(port = 0x%x) => %s (%d)",  v3,  v4,  v5,  v6,  2u);
  OUTLINED_FUNCTION_10();
}

void dispose_f2d_private_port_cold_2()
{
  OUTLINED_FUNCTION_6(&dword_183E58000, v1, v2, "%s: ERROR: f2d_unregister_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void implementation_callback_rpc_cold_1( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "FSEvents: %s: WARNING: num_paths == 0", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_2( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: CFNumberCreate() => NULL", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_3( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3( &dword_183E58000,  a1,  a3,  "%s: ERROR: CFDictionaryGetValue(FSEvents_streamDict, cfPortNumber) => NULL",  a5,  a6,  a7,  a8,  2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: eventPaths = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_5( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: pathFlags = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_6( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3( &dword_183E58000,  a1,  a3,  "%s: ERROR: cfStringRef_eventPaths = calloc() failed",  a5,  a6,  a7,  a8,  2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_7( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void implementation_callback_rpc_cold_8()
{
}

void implementation_callback_rpc_cold_9( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: CFArrayCreateMutable() => NULL\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_10( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: CFDictionaryCreateMutable() => NULL\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_11(uint8_t *a1, void *a2, os_log_s *a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "implementation_callback_rpc";
  OUTLINED_FUNCTION_5(&dword_183E58000, a3, (uint64_t)a3, "%s: ERROR: CFNumberCreate() => NULL\n", a1);
}

void implementation_callback_rpc_cold_13( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: eventFlags = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_14( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3(&dword_183E58000, a1, a3, "%s: ERROR: eventIds = malloc() failed", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void implementation_callback_rpc_cold_15()
{
}

void implementation_callback_rpc_cold_16()
{
}

void implementation_callback_rpc_cold_17()
{
}

void implementation_callback_rpc_cold_18()
{
}

void FSEventStreamRetain_cold_1()
{
}

void FSEventStreamGetLatestEventId_cold_1()
{
}

void FSEventStreamGetDeviceBeingWatched_cold_1()
{
}

void FSEventStreamCopyPathsBeingWatched_cold_1()
{
}

void FSEventStreamCopyPathsBeingWatched_cold_2( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamCopyPathsBeingWatched_cold_3(void *a1, uint64_t a2, os_log_t log)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(*a1 + 8 * a2);
  int v4 = 136315394;
  uint64_t v5 = "FSEventStreamCopyPathsBeingWatched";
  __int16 v6 = 2080;
  uint64_t v7 = v3;
  _os_log_error_impl( &dword_183E58000,  log,  OS_LOG_TYPE_ERROR,  "%s: ERROR: CFStringCreateWithFileSystemRepresentation('%s') failed",  (uint8_t *)&v4,  0x16u);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamCopyPathsBeingWatched_cold_4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _FSEventStreamCreate_cold_1()
{
}

void _FSEventStreamCreate_cold_2(uint64_t a1, os_log_s *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v2 = 136315650;
  uint64_t v3 = a1;
  __int16 v4 = 2080;
  uint64_t v5 = "_FSEventStreamCreate";
  __int16 v6 = 2048;
  uint64_t v7 = 456LL;
  _os_log_error_impl( &dword_183E58000,  a2,  OS_LOG_TYPE_ERROR,  "%s: %s: ERROR: could not allocate %lu bytes for FSEventStream",  (uint8_t *)&v2,  0x20u);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_3(uint64_t a1)
{
  LODWORD(v3) = 136315650;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_15( &dword_183E58000,  v1,  v2,  "%s: %s: ERROR: could not allocate %lu bytes for array of path strings",  (const char *)v3,  DWORD2(v3),  v4);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_4()
{
}

void _FSEventStreamCreate_cold_5(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v3 = 136315650;
  uint64_t v4 = a1;
  OUTLINED_FUNCTION_4();
  uint64_t v5 = "_FSEventStreamCreate";
  __int16 v6 = 1024;
  int v7 = v1;
  OUTLINED_FUNCTION_9( &dword_183E58000,  v2,  (uint64_t)v2,  "%s: %s: ERROR: could not allocate %d bytes for path string (2)",  (uint8_t *)&v3);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_6(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  int v4 = 136315650;
  uint64_t v5 = a2;
  OUTLINED_FUNCTION_4();
  __int16 v6 = "_FSEventStreamCreate";
  __int16 v7 = 1024;
  int v8 = v2;
  OUTLINED_FUNCTION_9( &dword_183E58000,  v3,  (uint64_t)v3,  "%s: %s: ERROR: (CFStringGetTypeID() != CFGetTypeID(cfStringRef)) (uint64_t i = %d)\n",  (uint8_t *)&v4);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_7()
{
}

void _FSEventStreamCreate_cold_8(uint64_t a1)
{
  LODWORD(v3) = 136315650;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_15( &dword_183E58000,  v1,  v2,  "%s: %s: ERROR: could not allocate %lu bytes for array of dir_info structs",  (const char *)v3,  DWORD2(v3),  v4);
  OUTLINED_FUNCTION_16();
}

void _FSEventStreamCreate_cold_9(uint64_t a1)
{
  LODWORD(v3) = 136315650;
  *(void *)((char *)&v3 + 4) = a1;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_22();
  OUTLINED_FUNCTION_15( &dword_183E58000,  v1,  v2,  "%s: %s: ERROR: could not allocate %lu bytes for array of kevents",  (const char *)v3,  DWORD2(v3),  v4);
  OUTLINED_FUNCTION_16();
}

void FSEventStreamCreateRelativeToDevice_cold_1()
{
}

void _FSEventStreamDeallocate_cold_1()
{
}

void _FSEventStreamDeallocate_cold_2()
{
}

void _FSEventStreamDeallocate_cold_3()
{
}

void _FSEventStreamDeallocate_cold_4()
{
}

void FSEventStreamScheduleWithRunLoop_cold_1()
{
}

void FSEventStreamScheduleWithRunLoop_cold_2()
{
}

void FSEventStreamScheduleWithRunLoop_cold_3( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamScheduleWithRunLoop_cold_4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamScheduleWithRunLoop_cold_5()
{
  OUTLINED_FUNCTION_6( &dword_183E58000,  v1,  v2,  "%s: ERROR: _createAndAddRunLoopSource(...) => %s (%d)",  v3,  v4,  v5,  v6,  2u);
  OUTLINED_FUNCTION_13();
}

void FSEventStreamScheduleWithRunLoop_cold_6()
{
  OUTLINED_FUNCTION_6(&dword_183E58000, v1, v2, "%s: ERROR: allocate_d2f_port(...) => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void allocate_d2f_port_cold_1()
{
  *(_DWORD *)int v11 = 136315906;
  *(void *)&void v11[4] = v1;
  OUTLINED_FUNCTION_4();
  *(void *)&v11[14] = "allocate_d2f_port";
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_14(&dword_183E58000, v0, v10, "%s: %s: ERROR: mach_port_allocate() => %s (%d)", v11);
  OUTLINED_FUNCTION_10();
}

void _createAndAddRunLoopSource_cold_1()
{
}

void _createAndAddRunLoopSource_cold_2()
{
  OUTLINED_FUNCTION_0(&dword_183E58000, v0, v1, "%s: %s: ERROR: CFMachPortCreateWithPort() => NULL", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void _createAndAddRunLoopSource_cold_3()
{
  OUTLINED_FUNCTION_0( &dword_183E58000,  v0,  v1,  "%s: %s: ERROR: CFMachPortCreateRunLoopSource() => NULL",  v2,  v3,  v4,  v5,  2u);
  OUTLINED_FUNCTION_1();
}

void _createAndAddRunLoopSource_cold_4()
{
}

void FSEventStreamUnscheduleFromRunLoop_cold_1()
{
}

void FSEventStreamUnscheduleFromRunLoop_cold_2()
{
}

void FSEventStreamUnscheduleFromRunLoop_cold_3()
{
}

void FSEventStreamSetDispatchQueue_cold_1()
{
}

void FSEventStreamSetDispatchQueue_cold_2( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamSetDispatchQueue_cold_3( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void FSEventStreamSetDispatchQueue_cold_4()
{
  OUTLINED_FUNCTION_6(&dword_183E58000, v1, v2, "%s: ERROR: allocate_d2f_port(...) => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void process_dir_events_cold_1(int a1)
{
  OUTLINED_FUNCTION_6(&dword_183E58000, v1, v2, "%s: kevent returned %d (%s)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void FSEventStreamFlushAsync_cold_1()
{
}

void FSEventStreamFlushAsync_cold_2()
{
}

void FSEventStreamFlushAsync_cold_3()
{
  OUTLINED_FUNCTION_6(&dword_183E58000, v1, v2, "%s: ERROR: f2d_flush_rpc() => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_13();
}

void FSEventStreamFlushSync_cold_1()
{
}

void FSEventStreamFlushSync_cold_3()
{
}

void FSEventStreamFlushSync_cold_4()
{
}

void FSEventStreamFlushSync_cold_5()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  *(_DWORD *)uint64_t v4 = 136315650;
  OUTLINED_FUNCTION_23();
  *(_DWORD *)&v4[7] = 3370;
  v4[9] = v0;
  int v5 = v1;
  OUTLINED_FUNCTION_26(&dword_183E58000, v2, v3, "%s:%d: error waiting on the dispatch_cond (%d)\n", (uint8_t *)v4);
  OUTLINED_FUNCTION_1();
}

void FSEventStreamFlushSync_cold_6()
{
}

void FSEventStreamFlushSync_cold_7()
{
  *(_DWORD *)int v11 = 136315906;
  *(void *)&void v11[4] = "FSEventStreamFlushSync";
  *(_WORD *)&v11[12] = 2048;
  *(void *)&v11[14] = v1;
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_14(&dword_183E58000, v0, v10, "%s(streamRef = %p): ERROR: f2d_flush_rpc() => %s (%d)", v11);
  OUTLINED_FUNCTION_10();
}

void FSEventStreamFlushSync_cold_8()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  *(_DWORD *)int v4 = 136315650;
  OUTLINED_FUNCTION_23();
  *(_DWORD *)&v4[7] = 3329;
  v4[9] = v0;
  int v5 = v1;
  OUTLINED_FUNCTION_26(&dword_183E58000, v2, v3, "%s:%d: error waiting on the dispatch_cond (%d)\n", (uint8_t *)v4);
  OUTLINED_FUNCTION_1();
}

void _runRunLoopOnceForFlushSync_cold_1()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_32();
  int v2 = 1;
  OUTLINED_FUNCTION_14( &dword_183E58000,  v0,  (uint64_t)v0,  "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)",  v1);
  OUTLINED_FUNCTION_16();
}

void _runRunLoopOnceForFlushSync_cold_2()
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_32();
  int v2 = 2;
  OUTLINED_FUNCTION_14( &dword_183E58000,  v0,  (uint64_t)v0,  "%s(streamRef = %p): ERROR: CFRunLoopRunInMode() => %s (%d)",  v1);
  OUTLINED_FUNCTION_16();
}

void FSEventStreamInvalidate_cold_1()
{
}

void FSEventStreamInvalidate_cold_2()
{
}

void FSEventStreamInvalidate_cold_3()
{
}

void dispose_d2f_port_cold_1(mach_error_t a1)
{
  OUTLINED_FUNCTION_28( &dword_183E58000,  v1,  v2,  "%s: ERROR: mach_port_mod_refs(port = 0x%x, MACH_PORT_RIGHT_RECEIVE, -1) => %s (%d)",  v3,  v4,  v5,  v6,  2u);
  OUTLINED_FUNCTION_10();
}

void FSEvents_connect_cold_1()
{
  kern_return_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_21();
  bootstrap_strerror(v0);
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_6(&dword_183E58000, v1, v2, "%s: ERROR: FSEvents_connect() => %s (%d)", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_10();
}

void FSEventsCopyUUIDForDevice_cold_1()
{
}

void FSEventsPurgeEventsForDeviceUpToEventId_cold_1()
{
}

void server_gone_StreamRef_callback_cold_1( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void server_gone_StreamRef_callback_cold_2(int *a1, int a2, os_log_s *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  int v3 = *a1;
  int v4 = 136315650;
  uint64_t v5 = "server_gone_StreamRef_callback";
  __int16 v6 = 1024;
  int v7 = a2;
  __int16 v8 = 1024;
  int v9 = v3;
  OUTLINED_FUNCTION_26( &dword_183E58000,  a3,  (uint64_t)a3,  "%s: re-registering with server failed and returned %d (f2d port %u)",  (uint8_t *)&v4);
  OUTLINED_FUNCTION_1();
}

void server_gone_StreamRef_callback_cold_3()
{
  OUTLINED_FUNCTION_8(&dword_183E58000, v0, v1, "%s: re-allocating d2f port failed and returned %d", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void server_gone_StreamRef_callback_cold_4()
{
}

void root_dir_event_callback_cold_1()
{
}

void root_dir_event_callback_cold_2( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void root_dir_event_callback_cold_4()
{
}

void watch_path_cold_1()
{
  __int16 v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_27( &dword_183E58000,  v1,  v2,  "%s: %s:2: open('%s', O_RDONLY) failed <3>, errno = %d (%s)",  v3,  v4,  v5,  v6,  2u);
  OUTLINED_FUNCTION_30();
}

void watch_path_cold_2()
{
  __int16 v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_27( &dword_183E58000,  v1,  v2,  "%s: %s:2: open('%s', O_RDONLY) failed <2>, errno = %d (%s)",  v3,  v4,  v5,  v6,  2u);
  OUTLINED_FUNCTION_30();
}

void watch_path_cold_3()
{
}

void watch_all_parents_cold_1()
{
}

void receive_and_dispatch_rcv_msg_cold_1()
{
}

void receive_and_dispatch_rcv_msg_cold_2()
{
}

void _Xcallback_rpc(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 4 && *(_DWORD *)(a1 + 4) == 120)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && *(_BYTE *)(a1 + 55) == 1 && *(_BYTE *)(a1 + 71) == 1 && *(_BYTE *)(a1 + 87) == 1)
    {
      int v3 = *(_DWORD *)(a1 + 40) >> 2;
      if (v3 == *(_DWORD *)(a1 + 104))
      {
        int v4 = *(_DWORD *)(a1 + 56) >> 2;
        if (v4 == *(_DWORD *)(a1 + 108))
        {
          int v5 = *(_DWORD *)(a1 + 72) >> 3;
          if (v5 == *(_DWORD *)(a1 + 112) && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a1 + 116))
          {
            *(_DWORD *)(a2 + 32) = implementation_callback_rpc( *(_DWORD *)(a1 + 12),  *(unsigned int *)(a1 + 100),  *(void *)(a1 + 28),  v3,  *(_BYTE **)(a1 + 44),  v4,  *(__CFArray **)(a1 + 60),  v5,  *(char **)(a1 + 76),  *(_DWORD *)(a1 + 88));
            mig_deallocate(*(void *)(a1 + 76), *(unsigned int *)(a1 + 88));
            *(void *)(a1 + 76) = 0LL;
            *(_DWORD *)(a1 + 8_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
            mig_deallocate(*(void *)(a1 + 60), *(unsigned int *)(a1 + 72));
            *(void *)(a1 + 60) = 0LL;
            *(_DWORD *)(a1 + 72) = 0;
            mig_deallocate(*(void *)(a1 + 44), *(unsigned int *)(a1 + 56));
            *(void *)(a1 + 44) = 0LL;
            *(_DWORD *)(a1 + 56) = 0;
            mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
            *(void *)(a1 + 2_Block_object_dispose((const void *)(v9 - 64), 8) = 0LL;
            *(_DWORD *)(a1 + 40) = 0;
            return;
          }
        }
      }
    }

    int v6 = -300;
  }

  else
  {
    int v6 = -304;
  }

  *(_DWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 24) = *MEMORY[0x1895F8468];
}

uint64_t FSEventsD2F_server(_DWORD *a1, uint64_t a2)
{
  unsigned int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(void *)(a2 + _Block_object_dispose((const void *)(v9 - 64), 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 67000)
  {
    _Xcallback_rpc((uint64_t)a1, a2);
    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(void *)(a2 + 24) = *MEMORY[0x1895F8468];
    *(_DWORD *)(a2 + 32) = -303;
  }

  return result;
}

uint64_t f2d_register_rpc( mach_port_t a1, int a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, uint64_t a10, int a11, uint64_t a12, int a13, uint64_t a14, int a15, uint64_t a16, _DWORD *a17)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  int v23 = 5;
  int v24 = a2;
  int v26 = 1310720;
  uint64_t v27 = a5;
  int v28 = 16777472;
  int v29 = 4 * a6;
  uint64_t v30 = a7;
  int v31 = 16777472;
  int v32 = a8;
  uint64_t v33 = a10;
  int v34 = 16777472;
  int v35 = 4 * a11;
  uint64_t v36 = a12;
  int v37 = 16777472;
  int v38 = a13;
  uint64_t v39 = *MEMORY[0x1895F8468];
  int v40 = a3;
  int v41 = a4;
  int v42 = a6;
  int v43 = a8;
  int v44 = a9;
  int v45 = a11;
  int v46 = a13;
  uint64_t v47 = a14;
  int v48 = a15;
  uint64_t v49 = a16;
  special_mach_port_t reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x101D000000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    special_mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v19 = mach_msg(&msg, 3162115, 0xA0u, 0x30u, special_reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) > 0xE || ((1 << (v19 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988LL;
      }

      else if (msg.msgh_id == 66100)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v20 = 4294966996LL;
            if (v25)
            {
              if (msg.msgh_remote_port) {
                uint64_t v20 = 4294966996LL;
              }
              else {
                uint64_t v20 = v25;
              }
            }
          }

          else
          {
            uint64_t v20 = 4294966996LL;
          }

          goto LABEL_23;
        }

        uint64_t v20 = 4294966996LL;
        if (v23 == 1 && msg.msgh_size == 40 && !msg.msgh_remote_port && HIWORD(v26) << 16 == 1114112)
        {
          uint64_t v20 = 0LL;
          *a17 = v24;
          return v20;
        }
      }

      else
      {
        uint64_t v20 = 4294966995LL;
      }

uint64_t f2d_flush_rpc(mach_port_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  special_mach_port_t reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x101D100000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    special_mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3162115, 0x18u, 0x34u, special_reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v6 = 4294966988LL;
      }

      else if (msg.msgh_id == 66101)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v6 = v10;
              if (!v10)
              {
                *a2 = v11;
                return v6;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = v10 == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996LL;
            }
            else {
              uint64_t v6 = v10;
            }
            goto LABEL_22;
          }
        }

        uint64_t v6 = 4294966996LL;
      }

      else
      {
        uint64_t v6 = 4294966995LL;
      }

LABEL_22:
      mach_msg_destroy(&msg);
      return v6;
    }

    mig_dealloc_special_reply_port();
  }

  return v6;
}

      mach_msg_destroy(&msg);
      return v7;
    }

    mig_dealloc_special_reply_port();
  }

  return v7;
}

      mach_msg_destroy(&msg);
      return v6;
    }

    mig_dealloc_special_reply_port();
  }

  return v6;
}

      mach_msg_destroy(&msg);
      return v8;
    }

    mig_dealloc_special_reply_port();
  }

  return v8;
}

      mach_msg_destroy(&v11);
      return v8;
    }

    mig_dealloc_special_reply_port();
  }

  return v8;
}
}
}

      goto LABEL_23;
    }

    if (v13) {
      goto LABEL_9;
    }
  }

  int v15 = 0LL;
LABEL_24:

LABEL_25:
  if (!(v15 | v10))
  {
    unsigned int v10 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10813LL,  (uint64_t)"_LSBundleGetDisplayNameForNodeWithUnregisteredBundleType",  2090LL,  0LL);
  }

  if (a4 && !v15) {
    *a4 = (id) v10;
  }

  return (id)v15;
}

  _LSErrorLog();
  int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  int v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);

  if (v23)
  {
    [v5 objectForKeyedSubscript:@"_LSFunction"];
    int v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
    {
      [v5 objectForKeyedSubscript:@"_LSLine"];
      unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      _LSErrorLog();
      int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        int v28 = 138544130;
        int v29 = v24;
        uint64_t v30 = 2114;
        int v31 = v25;
        int v32 = 2048;
        uint64_t v33 = (int)v4;
        int v34 = 2114;
        int v35 = v2;
        _os_log_debug_impl( &dword_183E58000,  v26,  OS_LOG_TYPE_DEBUG,  "Launch Services constructed an error at %{public}@:%{public}@, translating to OSStatus %li: %{public}@",  (uint8_t *)&v28,  0x2Au);
      }
    }

    else
    {
      _LSErrorLog();
      unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        _LSGetOSStatusFromNSError_cold_1();
      }
    }
  }

LABEL_31:
  return v4;
}

uint64_t f2d_get_server_uuid_rpc(mach_port_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v12 = *MEMORY[0x1895F8468];
  unsigned int v13 = a2;
  special_mach_port_t reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x101D200000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    special_mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v6 = mach_msg(&msg, 3162115, 0x24u, 0x50u, special_reply_port, 0, 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v6)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v7 = 4294966988LL;
      }

      else if (msg.msgh_id == 66102)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 72)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v7 = v13;
              if (!v13)
              {
                __int128 v10 = v15;
                *(_OWORD *)a3 = v14;
                *(_OWORD *)(a3 + 16) = v10;
                *(_DWORD *)(a3 + 32) = v16;
                return v7;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v8 = 1;
            }
            else {
              BOOL v8 = v13 == 0;
            }
            if (v8) {
              uint64_t v7 = 4294966996LL;
            }
            else {
              uint64_t v7 = v13;
            }
            goto LABEL_22;
          }
        }

        uint64_t v7 = 4294966996LL;
      }

      else
      {
        uint64_t v7 = 4294966995LL;
      }

uint64_t f2d_get_current_event_id_rpc(mach_port_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  special_mach_port_t reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x101D300000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    special_mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3162115, 0x18u, 0x34u, special_reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v6 = 4294966988LL;
      }

      else if (msg.msgh_id == 66103)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v6 = v10;
              if (!v10)
              {
                *a2 = v11;
                return v6;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = v10 == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996LL;
            }
            else {
              uint64_t v6 = v10;
            }
            goto LABEL_22;
          }
        }

        uint64_t v6 = 4294966996LL;
      }

      else
      {
        uint64_t v6 = 4294966995LL;
      }

uint64_t f2d_get_last_event_for_device_before_time_rpc( mach_port_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x1895F8468];
  unsigned int v13 = a2;
  uint64_t v14 = a3;
  special_mach_port_t reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x101D400000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    special_mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&msg, 3162115, 0x2Cu, 0x34u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (msg.msgh_id == 66104)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v8 = v13;
              if (!v13)
              {
                *a4 = v14;
                return v8;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = v13 == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996LL;
            }
            else {
              uint64_t v8 = v13;
            }
            goto LABEL_22;
          }
        }

        uint64_t v8 = 4294966996LL;
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

uint64_t f2d_purge_events_for_device_up_to_event_id_rpc( mach_port_t a1, unsigned int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v12 = *MEMORY[0x1895F8468];
  unsigned int v13 = a2;
  uint64_t v14 = a3;
  special_mach_port_t reply_port = mig_get_special_reply_port();
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = special_reply_port;
  v11.msgh_bits = 5395;
  *(void *)&v11.msgh_voucher_port = 0x101D500000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&v11);
    special_mach_port_t reply_port = v11.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&v11, 3162115, 0x2Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (v11.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (v11.msgh_id == 66105)
      {
        if ((v11.msgh_bits & 0x80000000) == 0)
        {
          if (v11.msgh_size == 40)
          {
            if (!v11.msgh_remote_port)
            {
              uint64_t v8 = v13;
              if (!v13)
              {
                *a4 = v14;
                return v8;
              }

              goto LABEL_22;
            }
          }

          else if (v11.msgh_size == 36)
          {
            if (v11.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = v13 == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996LL;
            }
            else {
              uint64_t v8 = v13;
            }
            goto LABEL_22;
          }
        }

        uint64_t v8 = 4294966996LL;
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

uint64_t f2d_unregister_rpc(mach_port_t a1)
{
  special_mach_port_t reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x101D600000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    special_mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v3 = mach_msg(&msg, 3162115, 0x18u, 0x2Cu, special_reply_port, 0, 0);
  uint64_t v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v3)
    {
      mig_dealloc_special_reply_port();
      return v4;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v4 = 4294966988LL;
    }

    else if (msg.msgh_id == 66106)
    {
      uint64_t v4 = 4294966996LL;
      if ((msg.msgh_bits & 0x80000000) == 0 && msg.msgh_size == 36 && !msg.msgh_remote_port)
      {
        uint64_t v4 = v7;
        if (!v7) {
          return v4;
        }
      }
    }

    else
    {
      uint64_t v4 = 4294966995LL;
    }

    mach_msg_destroy(&msg);
  }

  return v4;
}

CFTypeRef _XCFRetain(int a1, CFTypeRef cf)
{
  if (!cf)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(NSString, "stringWithUTF8String:", "const void *_XCFRetain(CFAllocatorRef, const void *)");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v4 handleFailureInFunction:v5, @"CFUtils.m", 26, @"Invalid parameter not satisfying: %@", @"ptr != NULL" file lineNumber description];
  }

  return CFRetain(cf);
}

void _XCFRelease(int a1, CFTypeRef cf)
{
  if (!cf)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(NSString, "stringWithUTF8String:", "void _XCFRelease(CFAllocatorRef, const void *)");
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    [v3 handleFailureInFunction:v4, @"CFUtils.m", 37, @"Invalid parameter not satisfying: %@", @"ptr != NULL" file lineNumber description];
  }

  CFRelease(cf);
}

BOOL _XCFStringEqualCaseInsensitive(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 1uLL) == kCFCompareEqualTo;
}

uint64_t _XCFStringHashCaseInsensitive(const __CFString *a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    uint64_t v3 = (unsigned __int8 *)CStringPtr;
    unsigned int v4 = strlen(CStringPtr);
    return _XCFHash8BitCaseInsensitive(v3, v4);
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  *(_OWORD *)mach_msg_header_t v11 = 0u;
  if (!a1 || (CFTypeID v6 = CFGetTypeID(a1), v6 != CFStringGetTypeID()))
  {
    *(void *)&__int128 v10 = (char *)&v11[1] + 4;
    DWORD2(v10) = 0;
    LODWORD(v11[1]) = 127;
    v11[0] = 0LL;
    BYTE4(v11[1]) = 0;
    goto LABEL_9;
  }

  CFIndex Length = CFStringGetLength(a1);
  if (!XCFBufInitWithCFStringRange((uint64_t)&v10, a1, 0LL, Length, 0))
  {
LABEL_9:
    _LSDefaultLog();
    BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _XCFStringHashCaseInsensitive_cold_1(v9);
    }

    return 0LL;
  }

  uint64_t v8 = _XCFHash8BitCaseInsensitive((unsigned __int8 *)v10, DWORD2(v10));
  if (v11[0]) {
    free(v11[0]);
  }
  return v8;
}

CFArrayRef XCFArrayCreateWithSet(const __CFAllocator *a1, CFSetRef theSet, const CFArrayCallBacks *a3)
{
  values[256] = *(void **)MEMORY[0x1895F89C0];
  unint64_t Count = CFSetGetCount(theSet);
  CFIndex v7 = Count;
  uint64_t v8 = (const void **)values;
  if (Count >= 0x101) {
    uint64_t v8 = (const void **)malloc(8 * Count);
  }
  CFSetGetValues(theSet, v8);
  CFArrayRef v9 = CFArrayCreate(a1, v8, v7, a3);
  return v9;
}

CFSetRef XCFSetCreateWithArray(const __CFAllocator *a1, CFArrayRef theArray, const CFSetCallBacks *a3)
{
  values[256] = *(void **)MEMORY[0x1895F89C0];
  unint64_t Count = CFArrayGetCount(theArray);
  CFIndex v7 = Count;
  uint64_t v8 = (const void **)values;
  if (Count >= 0x101) {
    uint64_t v8 = (const void **)malloc(8 * Count);
  }
  v12.id location = 0LL;
  v12.CFIndex length = v7;
  CFArrayGetValues(theArray, v12, v8);
  CFSetRef v9 = CFSetCreate(a1, v8, v7, a3);
  return v9;
}

CFNumberRef XCFNumberCreateWithHFSTypeAndCreatorCodes(unsigned int a1, unsigned int a2)
{
  if (a2 == 1061109567) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = a2;
  }
  if (a1 == 1061109567) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = a1;
  }
  uint64_t valuePtr = v3 | (v2 << 32);
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt64Type, &valuePtr);
}

CFNumberRef XCFNumberGetHFSTypeAndCreatorCodes(const __CFNumber *result, int *a2, int *a3)
{
  if (result)
  {
    uint64_t valuePtr = 0LL;
    uint64_t result = (const __CFNumber *)CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    if (a2)
    {
      int v5 = valuePtr;
      if (!(_DWORD)valuePtr) {
        int v5 = 1061109567;
      }
      *a2 = v5;
    }

    if (a3)
    {
      int v6 = HIDWORD(valuePtr);
      if (!HIDWORD(valuePtr)) {
        int v6 = 1061109567;
      }
      *a3 = v6;
    }
  }

  return result;
}

uint64_t XCFBufInit(uint64_t result)
{
  *(_BYTE *)(result + 2_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  *(void *)uint64_t result = result + 28;
  *(_DWORD *)(result + _Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  *(_DWORD *)(result + 24) = 127;
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t XCFBufInitWithBytes(uint64_t a1, void *__src, size_t __len, int a4)
{
  *(_BYTE *)(a1 + 2_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  uint64_t result = a1 + 28;
  *(void *)a1 = result;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v9 - 64), 8) = 0;
  *(_DWORD *)(a1 + 24) = 127;
  *(void *)(a1 + 16) = 0LL;
  if (!(_DWORD)__len) {
    return 0LL;
  }
  unsigned int v7 = __len;
  if (__len >= 0x80)
  {
    uint64_t result = (uint64_t)malloc((__len + 1));
    if (!result) {
      return result;
    }
    *(void *)(a1 + 16) = result;
    *(void *)a1 = result;
    *(_DWORD *)(a1 + 24) = v7;
  }

  uint64_t v9 = v7;
  memmove((void *)result, __src, v7);
  *(_BYTE *)(*(void *)a1 + v7) = 0;
  *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v9 - 64), 8) = v7;
  if (a4)
  {
    __int128 v10 = *(_BYTE **)a1;
    do
    {
      int v11 = *v10;
      ++v10;
      --v9;
    }

    while (v9);
  }

  return 1LL;
}

uint64_t XCFBufInitWithCFStringInlineBuffer(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a2 + 144))
  {
    *(_DWORD *)(a1 + 24) = 127;
    *(void *)(a1 + 16) = 0LL;
    *(_BYTE *)(a1 + 2_Block_object_dispose((const void *)(v9 - 64), 8) = 0;
    uint64_t v3 = (unsigned __int8 *)(*(void *)(a2 + 144) + *(void *)(a2 + 152));
    *(void *)a1 = v3;
    uint64_t v4 = *(void *)(a2 + 160);
    *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v9 - 64), 8) = v4;
    if (!a3 || !(_DWORD)v4) {
      return 1LL;
    }
    uint64_t v4 = v4;
    while (1)
    {
      int v5 = *v3++;
      if (!--v4) {
        return 1LL;
      }
    }
  }

  return XCFBufInitWithCFStringRange( a1,  *(const __CFString **)(a2 + 128),  *(void *)(a2 + 152),  *(void *)(a2 + 160),  a3);
}

unsigned int *XCFBufAddCapacity(unsigned int *result, int a2)
{
  size_t v2 = result[2];
  unsigned int v3 = result[6];
  if ((int)v2 + a2 > v3)
  {
    uint64_t v4 = result;
    unsigned int v5 = (2 * v3) | 1;
    else {
      unsigned int v6 = v2 + a2;
    }
    unsigned int v7 = *(const void **)result;
    if (*(void *)result == *((void *)result + 2))
    {
      uint64_t result = (unsigned int *)realloc(*(void **)result, v6 + 1);
      uint64_t v8 = result;
      *((void *)v4 + 2) = result;
    }

    else
    {
      uint64_t v8 = malloc(v6 + 1);
      *((void *)v4 + 2) = v8;
      uint64_t result = (unsigned int *)memcpy(v8, v7, v2);
    }

    *(void *)uint64_t v4 = v8;
    v4[6] = v6;
  }

  return result;
}

void *XCFBufAppend(unsigned int *a1, const void *a2, unsigned int a3)
{
  uint64_t result = memcpy((void *)(*(void *)a1 + a1[2]), a2, a3);
  unsigned int v7 = a1[2] + a3;
  a1[2] = v7;
  *(_BYTE *)(*(void *)a1 + v7) = 0;
  return result;
}

CFURLRef XCFBundleCopyFolderURL(__CFBundle *a1, const __CFString *a2)
{
  CFURLRef result = CFBundleCopySupportFilesDirectoryURL(a1);
  if (result)
  {
    unsigned int v5 = result;
    unsigned int v6 = CFGetAllocator(a1);
    CFURLRef v7 = CFURLCreateWithString(v6, a2, v5);
    CFRelease(v5);
    return v7;
  }

  return result;
}

CFStringRef XCFURLCopyRelativeFileSystemPath(const __CFURL *a1, const __CFURL *a2, CFURLPathStyle a3)
{
  unsigned int v6 = CFURLCopyAbsoluteURL(a1);
  CFStringRef Copy = (CFStringRef)v6;
  if (v6)
  {
    uint64_t v8 = CFURLCopyFileSystemPath(v6, a3);
    CFRelease(Copy);
    if (v8)
    {
      uint64_t v9 = CFURLCopyAbsoluteURL(a2);
      CFStringRef Copy = (CFStringRef)v9;
      if (v9)
      {
        int v10 = CFURLHasDirectoryPath(v9);
        int v11 = CFURLCopyFileSystemPath((CFURLRef)Copy, a3);
        CFRelease(Copy);
        CFIndex Length = CFStringGetLength(v8);
        CFIndex v13 = CFStringGetLength(v11);
        if (Length <= v13)
        {
          CFIndex v15 = v13;
          v22.id location = 0LL;
          v22.CFIndex length = Length;
          CFStringRef Copy = 0LL;
          if (CFStringCompareWithOptions(v11, v8, v22, 0LL) == kCFCompareEqualTo)
          {
            if (v15 > Length && CFStringGetCharacterAtIndex(v11, Length) == 47) {
              ++Length;
            }
            __int128 v17 = CFGetAllocator(a1);
            v23.CFIndex length = v15 - Length;
            v23.id location = Length;
            __int128 v18 = CFStringCreateWithSubstring(v17, v11, v23);
            CFStringRef Copy = v18;
            if (v10)
            {
              if (!CFStringHasSuffix(v18, @"/"))
              {
                __int128 v19 = (const __CFAllocator *)*MEMORY[0x189604DB0];
                MutableCFStringRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, Copy);
                if (MutableCopy)
                {
                  uint64_t v21 = MutableCopy;
                  CFStringAppend(MutableCopy, @"/");
                  CFRelease(Copy);
                  CFStringRef Copy = CFStringCreateCopy(v19, v21);
                  CFRelease(v21);
                }
              }
            }
          }
        }

        else
        {
          CFStringRef Copy = 0LL;
        }

        CFRelease(v8);
        __int128 v14 = v11;
      }

      else
      {
        __int128 v14 = v8;
      }

      CFRelease(v14);
    }

    else
    {
      return 0LL;
    }
  }

  return Copy;
}

void XCFURLEnumerate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v7 = a4;
  uint64_t v8 = (void (**)(void, void, void, void, void))v7;
  if (a1)
  {
    if (v7) {
      goto LABEL_3;
    }
  }

  else
  {
    [MEMORY[0x1896077D8] currentHandler];
    CFIndex v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void XCFURLEnumerate(CFURLRef, CFURLEnumeratorOptions, CFArrayRef, void (^__strong)(CFURLEnumeratorRef, CFURLRef, CFErrorRef, Boolean *))");
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue();
    [v15 handleFailureInFunction:v16, @"CFUtils.m", 732, @"Invalid parameter not satisfying: %@", @"inURL != nil" file lineNumber description];

    if (v8) {
      goto LABEL_3;
    }
  }

  [MEMORY[0x1896077D8] currentHandler];
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "void XCFURLEnumerate(CFURLRef, CFURLEnumeratorOptions, CFArrayRef, void (^__strong)(CFURLEnumeratorRef, CFURLRef, CF ErrorRef, Boolean *))");
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue();
  [v17 handleFailureInFunction:v18, @"CFUtils.m", 733, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

LABEL_3:
  uint64_t v9 = MEMORY[0x186E2942C](*MEMORY[0x189604DB0], a1, a2, a3);
  if (v9)
  {
    int v10 = (const void *)v9;
    char v21 = 0;
    do
    {
      id v19 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v11 = MEMORY[0x186E29438](v10, &v20, &v19);
      switch(v11)
      {
        case 1LL:
          ((void (**)(void, const void *, uint64_t, void, char *))v8)[2](v8, v10, v20, 0LL, &v21);
          break;
        case 2LL:
          char v21 = 1;
          break;
        case 3LL:
          _LSDefaultLog();
          CFRange v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 138478083;
            uint64_t v23 = a1;
            __int16 v24 = 2114;
            id v25 = v19;
            _os_log_error_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_ERROR,  "Error (non-fatal) enumerating %{private}@: %{public}@",  buf,  0x16u);
          }

          ((void (**)(void, const void *, void, id, char *))v8)[2](v8, v10, 0LL, v19, &v21);
          break;
        case 4LL:
          break;
        default:
          CFIndex v13 = (void *)v11;
          _LSDefaultLog();
          __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138478083;
            uint64_t v23 = a1;
            __int16 v24 = 2048;
            id v25 = v13;
            _os_log_debug_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_DEBUG,  "Unexpected CFURLEnumeratorResult when enumerating %{private}@: %lli",  buf,  0x16u);
          }

          break;
      }
    }

    while (!v21);
    CFRelease(v10);
  }
}

id XNSGetPropertyListClasses()
{
  if (XNSGetPropertyListClasses_once != -1) {
    dispatch_once(&XNSGetPropertyListClasses_once, &__block_literal_global_14);
  }
  return (id)XNSGetPropertyListClasses_result;
}

void __XNSGetPropertyListClasses_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x189604010]);
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, v4, v5, objc_opt_class(), 0);
  id v7 = (void *)XNSGetPropertyListClasses_result;
  XNSGetPropertyListClasses_CFURLRef result = v6;
}

id _LSGetFrontBoardOptionsDictionaryClasses()
{
  if (_LSGetFrontBoardOptionsDictionaryClasses_once != -1) {
    dispatch_once(&_LSGetFrontBoardOptionsDictionaryClasses_once, &__block_literal_global_22);
  }
  return (id)_LSGetFrontBoardOptionsDictionaryClasses_result;
}

uint64_t _XCFHash8BitCaseInsensitive(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 < 0x81)
  {
    if (a2)
    {
      unint64_t v5 = a2;
      uint64_t v3 = a2;
      do
      {
        int v6 = *a1++;
        uint64_t v3 = 17 * v3 + (v6 & 0xFFFFFFDF);
        --v5;
      }

      while (v5);
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  else
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = a2;
    do
      uint64_t v3 = 17 * v3 + (a1[v2++] & 0xDF);
    while (v2 != 64);
    uint64_t v4 = -64LL;
    do
      uint64_t v3 = 17 * v3 + (a1[a2 + v4++] & 0xDF);
    while (v4);
  }

  return (v3 << (a2 & 7)) + v3;
}

Class initBSServiceConnectionEndpoint()
{
  if (!BoardServicesLibrary_frameworkLibrary) {
    BoardServicesLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices",  2);
  }
  Class result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass[0] = (uint64_t (*)())BSServiceConnectionEndpointFunction;
  return result;
}

id BSServiceConnectionEndpointFunction()
{
  return (id)classBSServiceConnectionEndpoint;
}

uint64_t CSBindableKeyMapAddTable()
{
  return CSMapAddMapTable();
}

uint64_t CSBindableKeyMapInit()
{
  return CSMapInit();
}

uint64_t _CSBindableKeyMapGetHashForUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t CSBindableKeyMapNextKey()
{
  uint64_t Header = (unsigned int *)CSMapGetHeader();
  if (!Header) {
    return 0LL;
  }
  uint64_t v1 = *Header;
  CSMapWriteToHeader();
  return v1;
}

id fileSystemRealPath(void *a1, void *a2)
{
  if (!a1 || ![a1 length])
  {
    if (a2)
    {
      [MEMORY[0x189607870] errorWithDomain:*MEMORY[0x189607670] code:-43 userInfo:0];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_8:
      int v10 = 0LL;
LABEL_13:
      id v11 = v9;
      *a2 = v11;
      goto LABEL_16;
    }

void sub_183E7F6DC(_Unwind_Exception *a1)
{
}

id _FSNodeGetClasses()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    [MEMORY[0x189604010] setWithObject:objc_opt_class()];
    id v0 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v0;
}

uint64_t FSNodeCreateWithURL(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3 = 4294967246LL;
  if (a1 && a3)
  {
    id v9 = 0LL;
    id v5 = -[FSNode initWithURL:flags:error:](objc_alloc(&OBJC_CLASS___FSNode), "initWithURL:flags:error:", a1, a2, &v9);
    id v6 = v9;
    id v7 = v6;
    if (v5)
    {
      objc_storeStrong(a3, v5);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = _LSGetOSStatusFromNSError(v6);
    }
  }

  return v3;
}

void sub_183E7F7E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E7F890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E7F9EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_183E7FA9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E7FD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E7FE18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E7FFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E80110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8030C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E80440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E805A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_183E80624( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E8069C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E80928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E809F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E80A58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E80C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E80DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E80EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E80F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E81008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E810A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E81168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E81338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8140C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E814D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E815A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E8193C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  for (uint64_t i = 8LL; i != -8; i -= 8LL)
  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetNonFictionalDeviceNumber(FSNode *a1)
{
  id v7 = 0LL;
  BOOL v1 = -[FSNode getDeviceNumber:error:](a1, "getDeviceNumber:error:", &v8, &v7);
  id v2 = v7;
  if (v1)
  {
    uint64_t v3 = v8;
  }

  else
  {
    _LSDefaultLog();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _FSNodeGetNonFictionalDeviceNumber((uint64_t)v2, v4, v5);
    }

    uint64_t v3 = 0LL;
  }

  return v3;
}

void sub_183E81A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E81B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E81C00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E81C84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E81D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E81D8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E81EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E81FC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_183E821D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  CFRelease(v10);
  _Unwind_Resume(a1);
}

uint64_t _FSNodeGetTimestampValue(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*MEMORY[0x189603B88] == a2 || *MEMORY[0x189603B70] == a2 || *MEMORY[0x189603B58] == a2)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    *(_OWORD *)CFRange v12 = 0u;
    __int128 v13 = 0u;
    [a1 URL];
    int v10 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = _CFURLCopyResourcePropertyValuesAndFlags() != 0;

    if ((_DWORD)v6)
    {
      if (a3) {
        *a3 = 0LL;
      }
    }

    else if (a4)
    {
      *a4 = 0LL;
    }
  }

  else
  {
    v12[0] = 0LL;
    uint64_t v6 = [a1 getResourceValue:v12 forKey:a2 options:3 error:a4];
    char v7 = v6 ^ 1;
    id v8 = v12[0];
    if (!a3) {
      char v7 = 1;
    }
    if ((v7 & 1) == 0)
    {
      if (v12[0])
      {
        [v12[0] timeIntervalSinceReferenceDate];
        *a3 = v9;
        id v8 = v12[0];
      }

      else
      {
        *a3 = 0LL;
      }
    }
  }

  return v6;
}

void sub_183E823F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_183E824A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E826EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

LABEL_18:
    return v9;
  }

  char v7 = (_OWORD *)MEMORY[0x186E297B0]();
  if (!a3 || !v7)
  {
    if (v7) {
      return 1;
    }
    goto LABEL_9;
  }

  id v8 = v7[1];
  *(_OWORD *)a3->var0 = *v7;
  *(_OWORD *)a3->var2.var1 = v8;
  return 1;
}

  return v10;
}

  if (v9 == v10 || *v8 != a3) {
    goto LABEL_20;
  }
LABEL_22:

  return v11;
}
}

      __int128 v13 = 0LL;
      goto LABEL_19;
    }
  }

  puint64_t i = self->_pi;
  __int16 v24 = 0LL;
  int v10 = _LSCheckRecordPISizeAndVersionReturningPIInnerBytes(pi, &v24);
  id v11 = v24;
  if (!v10) {
    goto LABEL_15;
  }
  SubclassForTable = (objc_class *)LaunchServices::Record::findSubclassForTable( v6,  (LSContext *)*((unsigned int *)v10 + 2));
  if (!SubclassForTable)
  {
    int v31 = *MEMORY[0x189607490];
    objc_msgSend(NSString, "stringWithFormat:", @"bogus table %d", *((unsigned int *)v10 + 2));
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue();
    v32[0] = v15;
    [MEMORY[0x189603F68] dictionaryWithObjects:v32 forKeys:&v31 count:1];
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue();
    __int128 v17 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10810LL,  (uint64_t)"-[LSRecordPromise fulfillReturningError:]",  839LL,  v16);

    id v11 = (id)v17;
    if (!a3) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }

  __int128 v13 = (void *)[[SubclassForTable alloc] _initWithContext:v6 persistentIdentifier:self->_pi];
  if (!v13)
  {
    __int128 v14 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10814LL,  (uint64_t)"-[LSRecordPromise fulfillReturningError:]",  835LL,  0LL);

    id v11 = (id)v14;
    if (!a3) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }

    int v28 = 1LL;
LABEL_19:

    return v28;
  }

  _LSDefaultLog();
  __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    LaunchServices::URLPropertyProvider::prepareArchitecturesValue(v19, v20, v21, v22, v23, v24, v25, v26);
  }

  if (a6)
  {
    int v35 = *MEMORY[0x189607490];
    v36[0] = @"can't provide with mimic";
    [MEMORY[0x189603F68] dictionaryWithObjects:v36 forKeys:&v35 count:1];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"prepareArchitecturesValue", 1982LL, v27);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }

  return 0LL;
}

        __int128 v17 = 0LL;
        goto LABEL_19;
      }

      _LSDefaultLog();
      __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
        -[UTTypeRecord(IconServices) iconResourceBundleURLWithContext:tableID:unitID:unitBytes:].cold.1( (uint64_t)self,  (unsigned int *)(v13 + 444),  v18);
      }
    }

    __int128 v15 = 0LL;
    goto LABEL_18;
  }

  __int128 v17 = 0LL;
  return v17;
}

void sub_183E828D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183E82A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82D68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E82FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_29:
              __int128 v15 = 0LL;
              goto LABEL_30;
            }

            if (!a5) {
              goto LABEL_29;
            }
            char v21 = __error();
            _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  *v21,  (uint64_t)"-[FSNode(ExtendedAttributes) extendedAttributeWithName:options:error:]",  3471LL,  0LL);
            uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
          }

          else
          {
            if (!a5) {
              goto LABEL_29;
            }
            _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -41LL,  (uint64_t)"-[FSNode(ExtendedAttributes) extendedAttributeWithName:options:error:]",  3482LL,  0LL);
            uint64_t v20 = (id)objc_claimAutoreleasedReturnValue();
          }

  if (a6) {
    goto LABEL_30;
  }
LABEL_42:

  return v21;
}

void sub_183E833A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E83650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E83804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E83980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E83A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZL27_FSNodeInfoLifetimeAbsolutev_block_invoke()
{
  uint64_t v0 = _LSGetMachTimebase();
  double result = 5000000000.0 / ((double)v0 / (double)HIDWORD(v0));
  _FSNodeInfoLifetimeAbsolute(void)::nodeInfoLifetimeAbsolute = (unint64_t)result;
  return result;
}

uint64_t _LSAliasAdd(void *a1, void *a2, void *a3)
{
  v13[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  char v7 = v6;
  if (v5 && v6 && v5[1])
  {
    [v6 length];
    [v7 bytes];
    uint64_t v8 = CSStoreAllocUnitWithData();
    uint64_t v9 = v8;
    if (a3 && !(_DWORD)v8)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -9493LL, (uint64_t)"_LSAliasAdd", 27LL, 0LL);
      uint64_t v9 = 0LL;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  else
  {
    if (a3)
    {
      uint64_t v12 = *MEMORY[0x189607490];
      v13[0] = @"invalid input parameters";
      [MEMORY[0x189603F68] dictionaryWithObjects:v13 forKeys:&v12 count:1];
      int v10 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSAliasAdd", 31LL, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }

    uint64_t v9 = 0LL;
  }

  return v9;
}

void sub_183E83C3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasAddNode(void *a1, void *a2, void *a3)
{
  v13[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  char v7 = v6;
  if (v5 && v6 && v5[1])
  {
    [v6 bookmarkDataRelativeToNode:0 error:a3];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8) {
      uint64_t v9 = _LSAliasAdd(v5, v8, a3);
    }
    else {
      uint64_t v9 = 4294956486LL;
    }
  }

  else
  {
    if (a3)
    {
      uint64_t v12 = *MEMORY[0x189607490];
      v13[0] = @"invalid input parameters";
      [MEMORY[0x189603F68] dictionaryWithObjects:v13 forKeys:&v12 count:1];
      int v10 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSAliasAddNode", 54LL, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }

    uint64_t v9 = 4294956486LL;
  }

  return v9;
}

void sub_183E83DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasAddURL(void *a1, void *a2, void *a3)
{
  v13[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  id v6 = a2;
  char v7 = v6;
  if (v5 && v6 && v5[1] && [v6 isFileURL])
  {
    uint64_t v8 = -[FSNode initWithURL:flags:error:](objc_alloc(&OBJC_CLASS___FSNode), "initWithURL:flags:error:", v7, 0LL, a3);
    if (v8) {
      uint64_t v9 = _LSAliasAddNode(v5, v8, a3);
    }
    else {
      uint64_t v9 = 4294956486LL;
    }
  }

  else
  {
    if (a3)
    {
      uint64_t v12 = *MEMORY[0x189607490];
      v13[0] = @"invalid input parameters";
      [MEMORY[0x189603F68] dictionaryWithObjects:v13 forKeys:&v12 count:1];
      int v10 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSAliasAddURL", 78LL, v10);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }

    uint64_t v9 = 4294956486LL;
  }

  return v9;
}

void sub_183E83F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasRemove(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = 4294967246LL;
  if (v3 && a2 && *((void *)v3 + 1))
  {
    CSStoreFreeUnit();
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_183E83FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSAliasMatchesPath_NoIO(void *a1, int a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = v8;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
  }

  else
  {
    [MEMORY[0x1896077D8] currentHandler];
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSAliasMatchesPath_NoIO(__strong LSDatabaseRef, LSAliasID, NSString *__strong, LSAliasPathMatchType)");
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue();
    [v14 handleFailureInFunction:v15, @"LSAlias.mm", 235, @"Invalid parameter not satisfying: %@", @"inDB != nil" file lineNumber description];

    if (v9) {
      goto LABEL_3;
    }
  }

  [MEMORY[0x1896077D8] currentHandler];
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSAliasMatchesPath_NoIO(__strong LSDatabaseRef, LSAliasID, NSString *__strong, LSAliasPathMatchType)");
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue();
  [v16 handleFailureInFunction:v17, @"LSAlias.mm", 236, @"Invalid parameter not satisfying: %@", @"inPath != nil" file lineNumber description];

LABEL_3:
  _LSAliasGet(v7, a2);
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  id v11 = v10;
  if (v10) {
    uint64_t v12 = _LSAliasDataMatchesPath_NoIO(v10, v9, a4);
  }
  else {
    uint64_t v12 = 0LL;
  }

  return v12;
}

void sub_183E84164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSAliasGetName(void *a1, int a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    +[FSNode nameForBookmarkData:error:](&OBJC_CLASS___FSNode, "nameForBookmarkData:error:", v2, 0LL);
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

void sub_183E841FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSAliasGetPath(void *a1, int a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    +[FSNode pathForBookmarkData:error:](&OBJC_CLASS___FSNode, "pathForBookmarkData:error:", v2, 0LL);
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

void sub_183E84260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAliasGetVisualizationFunctions(id (**a1)(void **this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Aliases::getSummary;
  a1[1] = (id (*)(void **, LSContext *, int))LaunchServices::Aliases::display;
  a1[2] = (id (*)(void **, LSContext *, int))LaunchServices::Aliases::copyBindingForVisualization;
}

id LaunchServices::Aliases::getSummary(void **this, LSContext *a2, int a3)
{
  return _LSAliasGetPath(*this, a3);
}

BOOL LaunchServices::Aliases::display(void **a1, uint64_t a2, int a3, CSStore2::AttributedStringWriter *a4)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    +[FSNode pathForBookmarkData:error:](&OBJC_CLASS___FSNode, "pathForBookmarkData:error:", v5, 0LL);
    id v6 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      id v7 = (NSURL *)[objc_alloc(MEMORY[0x189604030]) initFileURLWithPath:v6 isDirectory:0];
      CSStore2::AttributedStringWriter::link(a4, v7, v6);
      id v8 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, @"path", v8);

      CSStore2::AttributedStringWriter::separator(a4, 45LL, 0LL);
    }

    unsigned int v14 = 0;
    if ((unint64_t)[v5 length] >= 5
      && ([v5 getBytes:&v14 length:4], v9 = v14, unsigned int v14 = bswap32(v14), v9 == 1802465122)
      && (int v10 = (NSAttributedString *)MEMORY[0x186E29768](v5)) != 0LL)
    {
      id v11 = (NSAttributedString *)[objc_alloc(MEMORY[0x189607928]) initWithString:v10];
      uint64_t v12 = -[NSAttributedString length](v11, "length");
      -[NSAttributedString addAttribute:value:range:]( v11,  "addAttribute:value:range:",  *MEMORY[0x18960DF28],  MEMORY[0x189604A88],  0LL,  v12);
      CSStore2::AttributedStringWriter::attributedString(a4, v11);
    }

    else
    {
      int v10 = (NSAttributedString *)_CSStoreCopyDebugDescriptionOfUnit();
      CSStore2::AttributedStringWriter::attributedString(a4, v10);
    }
  }

  return v5 != 0LL;
}

void sub_183E8447C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Aliases::copyBindingForVisualization(LaunchServices::Aliases *this, LSContext *a2)
{
  return 0LL;
}

void sub_183E84B40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_183E85040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::EligibilityPredicateEvaluation::Predicate::parse_dictionary( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v68[1] = *MEMORY[0x1895F89C0];
  id v39 = a1;
  if ((_NSIsNSDictionary() & 1) == 0)
  {
    if (a2)
    {
      uint64_t v67 = *MEMORY[0x189607490];
      v68[0] = @"Predicate was not a dictionary";
      [MEMORY[0x189603F68] dictionaryWithObjects:v68 forKeys:&v67 count:1];
      id v6 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"parse_dictionary", 86LL, v6);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_50;
  }

  uint64_t v3 = objc_opt_class();
  uint64_t v4 = [v39 objectForKey:@"Conditions"];
  uint64_t v5 = (void *)v4;
  if (v3 && v4)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      goto LABEL_48;
    }
  }

  else if (!v4)
  {
LABEL_48:
    if (a2)
    {
      uint64_t v65 = *MEMORY[0x189607490];
      int v66 = @"Predicate key Conditions was not a dictionary";
      [MEMORY[0x189603F68] dictionaryWithObjects:&v66 forKeys:&v65 count:1];
      int v29 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 79LL, (uint64_t)"parse_dictionary", 92LL, v29);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }

LABEL_50:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    goto LABEL_67;
  }

  __int128 v59 = 0LL;
  int v60 = 0LL;
  __int128 v58 = (uint64_t *)&v59;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  id obj = v5;
  uint64_t v7 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
  if (v7)
  {
    uint64_t v41 = *(void *)v55;
    int v8 = 1;
    while (2)
    {
      uint64_t v40 = v7;
      for (uint64_t i = 0LL; i != v40; ++i)
      {
        if (*(void *)v55 != v41) {
          objc_enumerationMutation(obj);
        }
        int v10 = *(void **)(*((void *)&v54 + 1) + 8 * i);
        if ((_NSIsNSString() & 1) == 0) {
          goto LABEL_56;
        }
        uint64_t v53 = [v10 longLongValue];
        [obj objectForKey:v10];
        id v11 = (void *)objc_claimAutoreleasedReturnValue();
        if ((_NSIsNSArray() & 1) == 0)
        {

LABEL_56:
LABEL_57:
          if (a2)
          {
            uint64_t v61 = *MEMORY[0x189607490];
            uint64_t v62 = @"Predicate conditions was not a stringifiedNumber->[number] map";
            [MEMORY[0x189603F68] dictionaryWithObjects:&v62 forKeys:&v61 count:1];
            int v32 = (void *)objc_claimAutoreleasedReturnValue();
            _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 79LL, (uint64_t)"parse_dictionary", 122LL, v32);
            *a2 = (id)objc_claimAutoreleasedReturnValue();
          }

          *(_BYTE *)a3 = 0;
          *(_BYTE *)(a3 + 24) = 0;
          goto LABEL_66;
        }

        std::stringbuf::string_type __p = 0LL;
        int v51 = 0LL;
        uint64_t v52 = 0LL;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v49 = 0u;
        id v12 = v11;
        uint64_t v13 = [v12 countByEnumeratingWithState:&v46 objects:v63 count:16];
        if (v13)
        {
          int v36 = v8;
          uint64_t v14 = *(void *)v47;
          while (2)
          {
            for (uint64_t j = 0LL; j != v13; ++j)
            {
              if (*(void *)v47 != v14) {
                objc_enumerationMutation(v12);
              }
              __int128 v16 = *(void **)(*((void *)&v46 + 1) + 8 * j);
              if ((_NSIsNSNumber() & 1) == 0)
              {
                int v8 = 0;
                goto LABEL_42;
              }

              uint64_t v17 = [v16 unsignedLongLongValue];
              uint64_t v18 = v17;
              __int128 v19 = v51;
              if (v51 >= v52)
              {
                char v21 = (char *)__p;
                uint64_t v22 = (v51 - (_BYTE *)__p) >> 3;
                unint64_t v23 = v22 + 1;
                uint64_t v24 = v52 - (_BYTE *)__p;
                if ((v52 - (_BYTE *)__p) >> 2 > v23) {
                  unint64_t v23 = v24 >> 2;
                }
                else {
                  unint64_t v25 = v23;
                }
                if (v25)
                {
                  uint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>( (uint64_t)&v52,  v25);
                  char v21 = (char *)__p;
                  __int128 v19 = v51;
                }

                else
                {
                  uint64_t v26 = 0LL;
                }

                uint64_t v27 = (uint64_t *)&v26[8 * v22];
                uint64_t *v27 = v18;
                uint64_t v20 = (char *)(v27 + 1);
                while (v19 != v21)
                {
                  uint64_t v28 = *((void *)v19 - 1);
                  v19 -= 8;
                  *--uint64_t v27 = v28;
                }

                std::stringbuf::string_type __p = v27;
                int v51 = v20;
                uint64_t v52 = &v26[8 * v25];
                if (v21) {
                  operator delete(v21);
                }
              }

              else
              {
                *(void *)int v51 = v17;
                uint64_t v20 = v19 + 8;
              }

              int v51 = v20;
            }

            uint64_t v13 = [v12 countByEnumeratingWithState:&v46 objects:v63 count:16];
            if (v13) {
              continue;
            }
            break;
          }

          int v8 = v36;
        }
}

LABEL_42:
        std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__emplace_unique_key_args<os_eligibility_domain_t,os_eligibility_domain_t&,std::vector<os_eligibility_answer_t>>( &v58,  (unint64_t *)&v53,  &v53,  (uint64_t)&__p);
        if (__p)
        {
          int v51 = (char *)__p;
          operator delete(__p);
        }
      }

      uint64_t v7 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
      if (v7) {
        continue;
      }
      break;
    }

    if ((v8 & 1) == 0) {
      goto LABEL_57;
    }
  }

  else
  {
  }

  int v31 = v58;
  uint64_t v30 = v59;
  int v43 = v58;
  int v44 = v59;
  int v45 = v60;
  if (v60)
  {
    *((void *)v59 + 2) = &v44;
    __int128 v58 = (uint64_t *)&v59;
    __int128 v59 = 0LL;
    int v60 = 0LL;
    std::stringbuf::string_type __p = v31;
    int v51 = v30;
    uint64_t v52 = v45;
    if (v45)
    {
      *((void *)v30 + 2) = &v51;
      int v43 = (uint64_t *)&v44;
      int v44 = 0LL;
      int v45 = 0LL;
      goto LABEL_62;
    }
  }

  else
  {
    int v43 = (uint64_t *)&v44;
    int v51 = v59;
    uint64_t v52 = 0LL;
  }

  std::stringbuf::string_type __p = &v51;
  int v31 = (uint64_t *)&v51;
LABEL_62:
  *(void *)a3 = v31;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v30;
  uint64_t v33 = a3 + 8;
  int v34 = v52;
  *(void *)(a3 + 16) = v52;
  if (v34)
  {
    int v35 = 0LL;
    *((void *)v30 + 2) = v33;
    std::stringbuf::string_type __p = &v51;
    int v51 = 0LL;
    uint64_t v52 = 0LL;
  }

  else
  {
    *(void *)a3 = v33;
    int v35 = v51;
  }

  *(_BYTE *)(a3 + 24) = 1;
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy( (uint64_t)&__p,  v35);
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy( (uint64_t)&v43,  v44);
LABEL_66:
  std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy( (uint64_t)&v58,  v59);

LABEL_67:
}

  ++*(void *)(a1 + 24);
  return i;
}

  if (v14)
  {
    [MEMORY[0x189607968] numberWithBool:a4];
    int v35 = (void *)objc_claimAutoreleasedReturnValue();
    [v19 setObject:v35 forKeyedSubscript:@"__UserActivity4LS"];
  }

  else
  {
    [v19 setObject:0 forKeyedSubscript:@"__UserActivity4LS"];
  }

  if (v28 && v30) {
    _LSContextDestroy(v28);
  }
  uint64_t v26 = v29;
  uint64_t v28 = 0LL;
  int v29 = 0LL;

  uint64_t v30 = 0;
  uint64_t v27 = v31;
  int v31 = 0LL;
}

                int v34 = objc_alloc(MEMORY[0x189604030]);
                [@"settings-navigation://com.apple.Settings.AppleAccount/" stringByAppendingString:v35];
                id v12 = (id)objc_claimAutoreleasedReturnValue();
                __int128 v15 = (void *)[v34 initWithString:v12];
                goto LABEL_43;
              }
            }

            uint64_t v18 = [v17 countByEnumeratingWithState:&v42 objects:v47 count:16];
            if (v18) {
              continue;
            }
            break;
          }
        }

        unint64_t v23 = objc_alloc(MEMORY[0x189604030]);
        [@"settings-navigation://com.apple.Settings.AppleAccount?" stringByAppendingString:v37];
        int v36 = (void *)objc_claimAutoreleasedReturnValue();
        __int128 v15 = (void *)objc_msgSend(v23, "initWithString:");
      }
    }

    else
    {
      __int128 v15 = 0LL;
    }
  }

  else
  {
    __int128 v15 = 0LL;
  }

  return v15;
}

void sub_183E85630( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *__p, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, void *a42)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DelayedInitable<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace<LaunchServices::EligibilityPredicateEvaluation::Predicate>( uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void LaunchServices::DelayedInitable<LaunchServices::Predicate>::emplace(Args &&...) [T = LaunchServices::Predicat e, Args = <LaunchServices::Predicate>]");
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 handleFailureInFunction:v6 file:@"LSObjCPlusPlusHelpers.hpp" lineNumber:34 description:@"can't re-emplace a DelayedInitable"];
  }

  return std::optional<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::EligibilityPredicateEvaluation::Predicate,void>( a1,  a2);
}

void sub_183E85794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::EligibilityPredicateEvaluation::Predicate::evaluate( void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  int v8 = (void *)*a1;
  id v6 = a1 + 1;
  uint64_t v7 = v8;
  if (v8 == v6)
  {
LABEL_14:
    int v17 = 1;
    int v18 = 1;
  }

  else
  {
    while (1)
    {
      [v5 eligibilityForDomain:v7[4] error:a3];
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue();
      int v10 = v9;
      if (!v9)
      {
        int v18 = 0;
        goto LABEL_17;
      }

      id v11 = (void *)v7[5];
      id v12 = (void *)v7[6];
      uint64_t v13 = [v9 unsignedLongLongValue];
      if (v11 != v12)
      {
        while (*v11 != v13)
        {
          if (++v11 == v12)
          {
            id v11 = v12;
            break;
          }
        }
      }

      if (v11 == (void *)v7[6]) {
        break;
      }

      uint64_t v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          __int128 v15 = v14;
          uint64_t v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          __int128 v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          uint64_t v7 = v15;
        }

        while (!v16);
      }

      uint64_t v7 = v15;
      if (v15 == v6) {
        goto LABEL_14;
      }
    }

    int v18 = 1;
LABEL_17:

    int v17 = 0;
  }

  return v17 | (v18 << 8);
}

void sub_183E8590C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E859B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LaunchServices::EligibilityPredicateEvaluation::Predicate::to_string@<X0>( LaunchServices::EligibilityPredicateEvaluation::Predicate *this@<X0>, std::stringbuf::string_type *a2@<X8>)
{
  id v6 = *(char **)this;
  uint64_t v4 = (char *)this + 8;
  id v5 = v6;
  if (v6 != v4)
  {
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)", ", 2LL);
      }
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)": [", 3LL);
      uint64_t v8 = *((void *)v5 + 5);
      uint64_t v9 = *((void *)v5 + 6);
      if (v8 != v9)
      {
        char v10 = 1;
        do
        {
          if ((v10 & 1) == 0) {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)", ", 2LL);
          }
          std::ostream::operator<<();
          char v10 = 0;
          v8 += 8LL;
        }

        while (v8 != v9);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)"]", 1LL);
      id v11 = (char *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          id v12 = v11;
          id v11 = *(char **)v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          id v12 = (char *)*((void *)v5 + 2);
          BOOL v13 = *(void *)v12 == (void)v5;
          id v5 = v12;
        }

        while (!v13);
      }

      char v7 = 0;
      id v5 = v12;
    }

    while (v12 != v4);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)"}", 1LL);
  std::stringbuf::str(a2, &v16);
  uint64_t v15 = *MEMORY[0x189614738];
  *(uint64_t *)((char *)&v15 + *(void *)(v15 - 24)) = *(void *)(MEMORY[0x189614738] + 24LL);
  v16.__vftable = (std::stringbuf_vtbl *)(MEMORY[0x189614750] + 16LL);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x186E29D68](&v17);
}

void sub_183E85BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_183E85C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>( uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

uint64_t **std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__emplace_unique_key_args<os_eligibility_domain_t,os_eligibility_domain_t&,std::vector<os_eligibility_answer_t>>( uint64_t **a1, unint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1;
  char v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        char v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        char v7 = *v10;
        uint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }

      if (v11 >= v9) {
        break;
      }
      char v7 = v10[1];
      if (!v7)
      {
        uint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    char v10 = a1 + 1;
LABEL_10:
    id v12 = (char *)operator new(0x40uLL);
    *((void *)v12 + 4) = *a3;
    *(_OWORD *)(v12 + 40) = *(_OWORD *)a4;
    *((void *)v12 + 7) = *(void *)(a4 + 16);
    *(void *)(a4 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
    *(void *)a4 = 0LL;
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at( a1,  (uint64_t)v10,  v8,  (uint64_t *)v12);
    return (uint64_t **)v12;
  }

  return v10;
}

uint64_t *std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::__insert_node_at( uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  id v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  double result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>( uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      id v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), id v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unint64_t v9 = (uint64_t **)a2[2];
          }

          else
          {
            unint64_t v9 = (uint64_t **)v2[1];
            char v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }

            void v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            id v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), id v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        id v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        _OWORD v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *id v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

void std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy( uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy( a1,  *a2);
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy( a1,  a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }

    operator delete(a2);
  }

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614768];
  uint64_t v3 = MEMORY[0x189614768] + 64LL;
  *(void *)(a1 + 112) = MEMORY[0x189614768] + 64LL;
  uint64_t v4 = *(void *)(MEMORY[0x189614738] + 8LL);
  uint64_t v5 = *(void *)(MEMORY[0x189614738] + 16LL);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v5;
  int v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0LL;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2 + 24;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + _Block_object_dispose(va, 8) = MEMORY[0x189614750] + 16LL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_183E860B4(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x189614738];
  uint64_t v3 = *MEMORY[0x189614738];
  *(void *)a1 = *MEMORY[0x189614738];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + _Block_object_dispose(va, 8) = MEMORY[0x189614750] + 16LL;
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x186E29D68](a1 + 112);
  return a1;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>( void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      char v10 = std::locale::use_facet(&v14, MEMORY[0x189614558]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  MEMORY[0x186E29CD8](v13);
  return a1;
}

void sub_183E86268( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_183E863B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::optional<LaunchServices::EligibilityPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::EligibilityPredicateEvaluation::Predicate,void>( uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::__map_value_compare<os_eligibility_domain_t,std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>,std::less<os_eligibility_domain_t>,true>,std::allocator<std::__value_type<os_eligibility_domain_t,std::vector<os_eligibility_answer_t>>>>::destroy( a1,  *(void **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }

  *(void *)a1 = *a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = a2[1];
  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *a2 = v4;
    *uint64_t v4 = 0LL;
    a2[2] = 0LL;
  }

  else
  {
    *(void *)a1 = v6;
  }

  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void sub_183E86598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8664C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8675C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E86918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E86B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

uint64_t findPluginDataInContext( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, void *a8)
{
  uint64_t v19 = 0LL;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x3032000000LL;
  uint64_t v22 = __Block_byref_object_copy__0;
  unint64_t v23 = __Block_byref_object_dispose__0;
  id v24 = 0LL;
  uint64_t v15 = 0LL;
  std::stringbuf v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  uint64_t v18 = 0LL;
  if (a5) {
    char v9 = 4;
  }
  else {
    char v9 = 0;
  }
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 3221225472LL;
  id v12[2] = ___ZL23findPluginDataInContextP9LSContextP6NSUUIDP6FSNodeP8NSStringbjPjPU15__autoreleasingP7NSError_block_invoke;
  v12[3] = &unk_189D72388;
  void v12[4] = a2;
  v12[5] = a4;
  char v14 = v9;
  v12[6] = a3;
  v12[7] = &v15;
  int v13 = a6;
  v12[9] = a1;
  v12[10] = a7;
  v12[8] = &v19;
  __LSRECORD_IS_PERFORMING_IO_FOR_A_CALLER__((uint64_t)v12);
  if (a8) {
    *a8 = (id) v20[5];
  }
  uint64_t v10 = v16[3];
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v10;
}

void sub_183E86C88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  _Unwind_Resume(a1);
}

void LaunchServices::Database::Context::~Context(LaunchServices::Database::Context *this)
{
  uint64_t v2 = *(void ***)this;
  if (v2 && *((_BYTE *)this + 16)) {
    _LSContextDestroy(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *(void *)this = 0LL;
  *((void *)this + 1) = 0LL;

  *((_BYTE *)this + 16) = 0;
  uint64_t v4 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0LL;
}

void sub_183E86D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E86D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E86EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E87638( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table((uint64_t)&a53);
  *(void *)(v55 - 256) = &a46;
  std::vector<std::pair<unsigned int,NSUUID * {__strong}>>::__destroy_vector::operator()[abi:nn180100]((void ***)(v55 - 256));

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a49);
  _Unwind_Resume(a1);
}

void sub_183E878CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E87944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8798C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E879D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E87A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E87A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E87C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E87CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E87FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E88140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E88324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, id a32)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_183E88478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E88640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL23findPluginDataInContextP9LSContextP6NSUUIDP6FSNodeP8NSStringbjPjPU15__autoreleasingP7NSError_block_invoke( uint64_t a1)
{
  uint64_t v2 = **(void ***)(a1 + 72);
  [*(id *)(a1 + 32) UUIDString];
  uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  char v4 = *(_BYTE *)(a1 + 92);
  uint64_t v5 = *(const __CFString **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 88);
  size_t v8 = *(_DWORD **)(a1 + 80);
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id obj = *(id *)(v9 + 40);
  uint64_t v10 = _LSPluginFindWithPlatformInfo(v2, v3, v5, v4 | 3u, v6, v7, v8, &obj);
  objc_storeStrong((id *)(v9 + 40), obj);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v10;
}

void sub_183E88708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned int,NSUUID * {__strong}>>::__destroy_vector::operator()[abi:nn180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    char v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;

        char v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>( uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::pair<unsigned int,NSUUID * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,LSApplicationRecord * {__strong}>>( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }
    }
  }

  int64_t v12 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0LL;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 8);
  *(void *)(a3 + _Block_object_dispose((const void *)(v13 - 64), 8) = 0LL;
  v10[3] = v13;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1LL;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t v10 = *v21;
LABEL_38:
    void *v21 = v10;
    goto LABEL_39;
  }

  *uint64_t v10 = *v12;
  void *v12 = v10;
  *(void *)(v20 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v22 = *(void *)(*v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }

    else
    {
      v22 &= v7 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_183E88A48(_Unwind_Exception *a1)
{
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,void *>>>::operator()[abi:nn180100]( uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void sub_183E88B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E88C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E88D14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E88DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E89044( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a17);
  _Unwind_Resume(a1);
}

void sub_183E890FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183E89234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8937C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E89674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E897FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E89958(_Unwind_Exception *a1)
{
  unint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_183E89B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E89D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E89EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8A0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8A29C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_183E8A370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initUMUserPersonaAttributes(void)
{
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/UserManagement.framewor k/UserManagement",  2);
  }
  Class result = objc_getClass("UMUserPersonaAttributes");
  classUMUserPersonaAttributes = (uint64_t)result;
  getUMUserPersonaAttributesClass = (uint64_t (*)(void))UMUserPersonaAttributesFunction;
  return result;
}

{
  Class result;
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/UserManagement.framewor k/UserManagement",  2);
  }
  Class result = objc_getClass("UMUserPersonaAttributes");
  classUMUserPersonaAttributes = (uint64_t)result;
  getUMUserPersonaAttributesClass = (uint64_t (*)(void))UMUserPersonaAttributesFunction;
  return result;
}

id UMUserPersonaAttributesFunction(void)
{
  return (id)classUMUserPersonaAttributes;
}

{
  return (id)classUMUserPersonaAttributes;
}

void OUTLINED_FUNCTION_0_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_183E8A468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8A758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183E8A880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8A938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSNoteSystemAppInstallOrUninstall(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  softLinkADClientAddValueForScalarKey(v3, a2);
}

void sub_183E8A9CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t initADClientAddValueForScalarKey(const __CFString *a1, uint64_t a2)
{
  char v4 = (void *)AggregateDictionaryLibrary(void)::frameworkLibrary;
  if (!AggregateDictionaryLibrary(void)::frameworkLibrary)
  {
    char v4 = dlopen("/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary", 2);
    AggregateDictionaryLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }

  softLinkADClientAddValueForScalarKey = (uint64_t (*)(const __CFString *, uint64_t))dlsym( v4,  "ADClientAddValueForScalarKey");
  return softLinkADClientAddValueForScalarKey(a1, a2);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v13 - 64), 8) = 0LL;
  *(void *)(result + 4_Block_object_dispose((const void *)(v13 - 64), 8) = v2;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

{
  void *v2;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void sub_183E8B29C(_Unwind_Exception *a1)
{
}

void sub_183E8C9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8CC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL evaluateBundleNoIOCommon(LSContext *a1, uint64_t a2, const LSBundleData *a3)
{
  if (a2 && (*(_BYTE *)(a2 + 156) & 1) != 0) {
    return 1LL;
  }
  uint64_t v5 = (os_log_s *)_LSEnumeratorLog;
  BOOL result = os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    evaluateBundleNoIOCommon((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
    return 0LL;
  }

  return result;
}

void sub_183E8CE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8D0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8D1E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_183E8D280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8D33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8D60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8D71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8D85C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

char *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>( char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<unsigned int>::__vallocate[abi:nn180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    int64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      size_t v19 = __src;
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  int64_t v12 = (void **)(result + 8);
  float v14 = (_BYTE *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  BOOL v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }

  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    size_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }

char *std::vector<unsigned int>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>( _DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100]( uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      uint64_t v5 = *(_DWORD **)(v4 + 8);
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    float v14 = &v13[4 * v9];
    unint64_t v15 = &v13[4 * v12];
    *(_DWORD *)float v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }

    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + _Block_object_dispose((const void *)(v13 - 64), 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *uint64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }

  *(void *)(v4 + _Block_object_dispose((const void *)(v13 - 64), 8) = v7;
  return a1;
}

void OUTLINED_FUNCTION_0_1( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_183E8DC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8DDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8DFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8E25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8E704(_Unwind_Exception *a1)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v2 - 176));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table( a1 + 48,  (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__2(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 48);
}

void sub_183E8E908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8EA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8EBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8EC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8ED00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8EE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8F088( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__93(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__94(uint64_t a1)
{
}

uint64_t _LSLogAppRecordInitsForDataSeparation()
{
  if (_LSLogAppRecordInitsForDataSeparation::onceToken != -1) {
    dispatch_once(&_LSLogAppRecordInitsForDataSeparation::onceToken, &__block_literal_global_3);
  }
  return _LSLogAppRecordInitsForDataSeparation::result;
}

void sub_183E8F4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8F61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8F680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8F774( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E8F9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8FB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8FCAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  uint64_t v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_183E8FDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E8FF20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  uint64_t v27 = v26;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_183E90034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E900A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E902A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E903AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E90454( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E90868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E90A94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_183E90CE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_183E90F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E90FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E91050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E910E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E9141C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__585(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__586(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void sub_183E91858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E919D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E91A64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183E91B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E91BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E91C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E91C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E91DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E91FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E92338(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183E92594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E92718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E9284C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(void *a1)
{
  if ((unint64_t)[a1 length] <= 0x23)
  {
    [MEMORY[0x1896077D8] currentHandler];
    unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
    [NSString stringWithUTF8String:"uint64_t _LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(const __strong LSPersistentIdentifier _Nonnull)"];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"LSApplicationRecord.mm",  2924,  @"persistent identifier of length %zu is too short to extract sequence number!",  objc_msgSend(a1, "length"));
  }

  return *(void *)([a1 bytes] + 28);
}

void sub_183E9290C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E9295C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E92A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E92B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E92C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E92D74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose((const void *)(v28 - 64), 8);
  _Unwind_Resume(a1);
}

id _LSGetApplicationExtensionDiagnosticDescriptionForBundle(uint64_t a1, unsigned int a2)
{
  id v3 = (id)objc_msgSend( objc_alloc(MEMORY[0x189607940]),  "initWithFormat:",  @"plugins for bundle %llx:",  a2);
  _CSArrayEnumerateAllValues();

  return v3;
}

void sub_183E92ECC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_183E9307C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL11_LSIconsLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "icons");
  uint64_t v1 = (void *)_LSIconsLog(void)::log;
  _LSIconsLog(void)::log = (uint64_t)v0;
}

uint64_t initMobileInstallationCopyAppMetadata(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }

  softLinkMobileInstallationCopyAppMetadata = (uint64_t (*)())dlsym(v4, "MobileInstallationCopyAppMetadata");
  uint64_t v5 = ((uint64_t (*)(id, uint64_t))softLinkMobileInstallationCopyAppMetadata)(v3, a2);

  return v5;
}

void sub_183E93170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL56_LSGetApplicationExtensionDiagnosticDescriptionForBundleP9LSContextjPK12LSBundleDataPU15__autoreleasingP7NSError_block_invoke( uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (_LSGetPlugin(**(void **)(a1 + 40), a3))
  {
    uint64_t v5 = (void *)_CSStringCopyCFString();
    uint64_t v6 = v5;
    if (v5) {
      id v7 = v5;
    }
    else {
      id v7 = (id)_CSStringCopyCFString();
    }
    id v9 = v7;

    uint64_t v8 = (void *)_CSStringCopyCFString();
    [*(id *)(a1 + 32) appendFormat:@" with bundleID %@ is for EPID %@", v9, v8];
  }

  else
  {
    [*(id *)(a1 + 32) appendFormat:@" was not found in the database!"];
  }

void sub_183E932F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__emplace_unique_key_args<unsigned int,unsigned int &,LSApplicationRecordUpdateAvailability>( uint64_t a1, unsigned int *a2, _DWORD *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & v8;
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  unint64_t v12 = operator new(0x20uLL);
  void *v12 = 0LL;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  v12[3] = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }

  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_183E93530(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table( uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0LL;
  *(void *)__n128 result = v2;
  *(void *)(result + _Block_object_dispose((const void *)(v1 - 80), 8) = a2[1];
  a2[1] = 0LL;
  uint64_t v5 = a2[2];
  id v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }

    else
    {
      v7 &= v8 - 1;
    }

    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0LL;
    v3[1] = 0LL;
  }

  return result;
}

LABEL_21:
        unint64_t v9 = v8 + v16;
        if (v20 < v22)
        {
          uint64_t v26 = v22;
          do
          {
            uint64_t v27 = *(_DWORD *)v9;
            *(_DWORD *)unint64_t v9 = *(_DWORD *)v26;
            *(_DWORD *)uint64_t v26 = v27;
            uint64_t v28 = *(void *)(v9 + 8);
            *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(v26 + 8);
            *(void *)(v26 + _Block_object_dispose((const void *)(v1 - 80), 8) = v28;
            do
            {
              uint64_t v29 = *(void *)(v9 + 24);
              v9 += 16LL;
            }

            while (_LSBundleCompareForActivityContinuationSuitability(***a3, v29, v18) == -1);
            do
            {
              uint64_t v30 = *(void *)(v26 - 8);
              v26 -= 16LL;
            }

            while (_LSBundleCompareForActivityContinuationSuitability(***a3, v30, v18) != -1);
          }

          while (v9 < v26);
        }

        if (v9 - 16 != v8)
        {
          *(_DWORD *)unint64_t v8 = *(_DWORD *)(v9 - 16);
          *(void *)(v8 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(v9 - 8);
        }

        *(_DWORD *)(v9 - 16) = v17;
        *(void *)(v9 - _Block_object_dispose((const void *)(v1 - 80), 8) = v18;
        if (v20 < v22)
        {
LABEL_32:
          __n128 result = std::__introsort<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *,false>( v8,  v9 - 16,  a3,  a4,  a5 & 1);
          a5 = 0;
          continue;
        }

        int v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( v8,  v9 - 16,  a3);
        __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( v9,  a2,  a3);
        if (!(_DWORD)result)
        {
          if (v31) {
            continue;
          }
          goto LABEL_32;
        }

        a2 = v9 - 16;
        if (!v31) {
          goto LABEL_2;
        }
        return result;
    }
  }

    goto LABEL_22;
  }

  id v24 = *MEMORY[0x189607490];
  unint64_t v25 = @"invalid plugin URL";
  [MEMORY[0x189603F68] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
  float v14 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSUnregisterPluginsAtURL", 523LL, v14);
  uint64_t v5 = (id)objc_claimAutoreleasedReturnValue();

  float v15 = 0LL;
  if (!a2) {
    goto LABEL_26;
  }
LABEL_24:
  if (!v15) {
    *a2 = v5;
  }
LABEL_26:

  return v15;
}

  if (v40) {
    _LSContextDestroy(&v40);
  }
LABEL_23:

  return v8;
}

  _LSDefaultLog();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_DEFAULT,  "LSDatabaseBuilder: MobileInstallation reported PartialResultsReturned = YES, setting incomplete seed flag",  buf,  2u);
  }

  uint64_t v4 = 0;
LABEL_24:
  _LSServer_DatabaseExecutionContext();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  v10[2] = __48__LSDatabaseBuilder_createAndSeedLocalDatabase___block_invoke_1;
  v10[3] = &unk_189D75618;
  v10[4] = *(void *)(a1 + 32);
  uint64_t v11 = v4;
  -[LSDBExecutionContext syncWrite:]((uint64_t)v6, v10);

  +[_LSInstallProgressService sharedInstance](&OBJC_CLASS____LSInstallProgressService, "sharedInstance");
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  [v7 sendDatabaseRebuiltNotification];

  _LSDatabaseGetSeedingGroup();
  unint64_t v8 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v8);

  return MEMORY[0x186E2AFE0]();
}

    unint64_t v23 = self->_identifiers;
    if (!v23)
    {
      _LSDefaultLog();
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl( &dword_183E58000,  v24,  OS_LOG_TYPE_DEFAULT,  "Creating identifiers table for the first time.",  buf,  2u);
      }

      objc_msgSend(MEMORY[0x189603FC8], "dictionary", @"LSVendors");
      unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
      int v31 = v25;
      [MEMORY[0x189603F68] dictionaryWithObjects:&v31 forKeys:&v30 count:1];
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v27 = (NSDictionary *)[v26 copy];
      uint64_t v28 = self->_identifiers;
      self->_identifiers = v27;

      -[_LSDeviceIdentifierCache save](self, "save");
      unint64_t v23 = self->_identifiers;
    }

    id v3 = v23;
LABEL_26:
  }

  return v3;
}

  if (!v22)
  {
    int v31 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x189607928]);
    if (v31)
    {
      v36[0] = 0LL;
      v36[1] = v36;
      v36[2] = (void *)0x13812000000LL;
      v36[3] = __Block_byref_object_copy__22;
      v36[4] = __Block_byref_object_dispose__22;
      v36[5] = (void *)256;
      LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v37, v31);
      int v35 = v23;
      CSStore2::AttributedStringWriter::withWarningColors();
      -[NSMutableAttributedString cs_writeToFileHandle:](v31, "cs_writeToFileHandle:", *MEMORY[0x1895F89D0]);

      _Block_object_dispose(v36, 8);
      LaunchServices::DumpWriter::~DumpWriter(v37);
    }
  }

  return v7;
}

  return v8;
}

            --v23;
            v24 -= 32LL;
            if (v23 == 3) {
              goto LABEL_31;
            }
          }
        }

        for (uint64_t i = 0LL; i != -10; i -= 2LL)
        {
          if (*(_DWORD *)((char *)&v37[2] + i * 2))
          {
            _CSStringRelease();
            *(_DWORD *)((char *)&v37[2] + i * 2) = 0;
            int v34 = &v37[i];
            *(_OWORD *)((char *)v34 + 16_Block_object_dispose((const void *)(v1 - 80), 8) = kLSVersionNumberNull;
            *(_OWORD *)((char *)v34 + 184) = *(_OWORD *)algn_183FBF5B0;
          }
        }

        if (DWORD1(v38) != a4
          || (int v51 = *(_OWORD *)&v48[8],
              uint64_t v52 = *(_OWORD *)&v48[24],
              int v35 = a5[1],
              __int128 v49 = *a5,
              uint64_t v50 = v35,
              _LSVersionNumberCompare(&v51, &v49)))
        {
          _CSStringRelease();
          _CSStringRetain();
          DWORD1(v3_Block_object_dispose((const void *)(v1 - 80), 8) = a4;
          int v36 = a5[1];
          *(_OWORD *)&v48[8] = *a5;
          *(_OWORD *)&v48[24] = v36;
        }

    unint64_t v25 = *(uint64_t (**)(FSMimicPopulator *, uint64_t, uint64_t, _BYTE *, id *))(v21 + 24);
    if (a7) {
      id obj = location;
    }
    uint64_t v26 = v25(v16, a2, v22, v64, v49);
    if (a7) {
      objc_storeStrong(&location, obj);
    }
    *((_BYTE *)v75 + 24) = v26;
    objc_msgSend(v51, "addObject:", v22, v47);
    goto LABEL_26;
  }

  BOOL v16 = 0LL;
  int v51 = 0LL;
LABEL_33:
  unint64_t v12 = v48;
  if (*((_BYTE *)v75 + 24))
  {
    uint64_t v11 = v47;
    if ([v51 count])
    {
      v58[0] = 0LL;
      v58[1] = v58;
      v58[2] = 0x3032000000LL;
      v58[3] = __Block_byref_object_copy__42;
      v58[4] = __Block_byref_object_dispose__42;
      __int128 v59 = 0LL;
      uint64_t v27 = MEMORY[0x1895F87A8];
      v57[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
      v57[1] = (void (*)(void, void))3221225472LL;
      v57[2] = (void (*)(void, void))___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke;
      v57[3] = (void (*)(void, void))&unk_189D72338;
      v57[4] = (void (*)(void, void))v58;
      +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDReadService, v57);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v16)
      {
        LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v61);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29) {
          BOOL v16 = -[FSMimicPopulator initWithNode:](objc_alloc(&OBJC_CLASS___FSMimicPopulator), "initWithNode:", v29);
        }
        else {
          BOOL v16 = 0LL;
        }
      }

      BOOL v16 = v16;
      -[FSMimicPopulator mimic](v16, "mimic");
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
      [(id)__LSDefaultsGetSharedInstance() preferredLocalizations];
      int v31 = (void *)objc_claimAutoreleasedReturnValue();
      v56[0] = v27;
      v56[1] = 3221225472LL;
      v56[2] = ___ZN14LaunchServices19URLPropertyProviderL13prepareValuesEPK7__CFURLP11__FileCachePKPK10__CFStringPPKvlSC_PP9__CFError_block_invoke_2;
      void v56[3] = &unk_189D78F80;
      v56[4] = &v74;
      v56[5] = v58;
      v56[6] = a2;
      [v28 getResourceValuesForKeys:v51 mimic:v30 preferredLocalizations:v31 completionHandler:v56];

      _Block_object_dispose(v58, 8);
    }
  }

  else
  {
    uint64_t v11 = v47;
  }

LABEL_43:
  if (a5 >= 1)
  {
    if (a7) {
      int v32 = &v55;
    }
    else {
      int v32 = 0LL;
    }
    do
    {
      if (!*((_BYTE *)v75 + 24)) {
        break;
      }
      uint64_t v33 = *a4;
      if (*(void *)(*a4 + 16))
      {
        int v34 = *a3;
        if (!MEMORY[0x186E297D4](a2, *a3, &v63))
        {
          int v35 = v12;
          if (v12)
          {
            int v36 = v35;
            int v37 = v75;
          }

          else
          {
            int v38 = LaunchServices::URLPropertyProvider::prepareValues(__CFURL const*,__FileCache *,__CFString const* const*,void const**,long,void const*,__CFError **)::$_0::operator()(v61);
            int v37 = v75;
            if (v38)
            {
              int v36 = (void *)v38;
            }

            else
            {
              int v36 = 0LL;
              *((_BYTE *)v75 + 24) = 0;
            }
          }

          if (*((_BYTE *)v37 + 24))
          {
            if (a7) {
              uint64_t v55 = location;
            }
            id v39 = (*(uint64_t (**)(void ***, void *, uint64_t, uint64_t, _BYTE *, id *))(v33 + 16))( &v68,  v36,  a2,  v34,  v64,  v32);
            if (a7) {
              objc_storeStrong(&location, v55);
            }
            if (!v39) {
              *((_BYTE *)v75 + 24) = 0;
            }
          }
        }
      }

      ++a4;
      ++a3;
      --a5;
    }

    while (a5);
  }

  uint64_t v40 = v72;
  uint64_t v41 = v72;
  if (v41 && os_unfair_lock_trylock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock))
  {
    if (!LaunchServices::URLPropertyProvider::reusableNode)
    {
      [v41 prepareForReuse];
      objc_storeStrong((id *)&LaunchServices::URLPropertyProvider::reusableNode, v40);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&LaunchServices::URLPropertyProvider::reusableNodeLock);
  }

  int v42 = v72;
  v72 = 0LL;

  if (a7 && !*((_BYTE *)v75 + 24))
  {
    __int128 v54 = location;
    LaunchServices::URLPropertyProvider::normalizeError(v50, 0LL, &v54);
    objc_storeStrong(&location, v54);
    *a7 = location;
  }

  if (v66) {
  if (v68 && v70)
  }
    _LSContextDestroy(v68);
  int v43 = v69;
  uint64_t v68 = 0LL;
  __int16 v69 = 0LL;

  uint64_t v70 = 0;
  int v44 = v71;
  __int16 v71 = 0LL;

  objc_autoreleasePoolPop(v11);
  int v45 = *((unsigned __int8 *)v75 + 24);

  _Block_object_dispose(&v74, 8);
  return v45;
}

  if (CurrentContext && v34) {
    _LSContextDestroy(CurrentContext);
  }
  id v24 = v33;
  CurrentContext = 0LL;
  uint64_t v33 = 0LL;

  int v34 = 0;
  unint64_t v25 = v35;
  int v35 = 0LL;

LABEL_25:
  uint64_t v26 = (id)v37[5];
  _Block_object_dispose(&v36, 8);

  return v26;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *,0>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void ****a6)
{
  uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a5 + 8), *(void *)(a4 + 8));
  if (result == -1)
  {
    int v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    uint64_t v14 = *(void *)(a4 + 8);
    *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a5 + 8);
    *(void *)(a5 + _Block_object_dispose((const void *)(v1 - 80), 8) = v14;
    uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a4 + 8), *(void *)(a3 + 8));
    if (result == -1)
    {
      int v15 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v15;
      uint64_t v16 = *(void *)(a3 + 8);
      *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a4 + 8);
      *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 80), 8) = v16;
      uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a3 + 8), *(void *)(a2 + 8));
      if (result == -1)
      {
        int v17 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v17;
        uint64_t v18 = *(void *)(a2 + 8);
        *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a3 + 8);
        *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 80), 8) = v18;
        uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a6, *(void *)(a2 + 8), *(void *)(a1 + 8));
        if (result == -1)
        {
          int v19 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v19;
          uint64_t v20 = *(void *)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a2 + 8);
          *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 80), 8) = v20;
        }
      }
    }
  }

  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( int *a1, int *a2, int *a3, void ****a4)
{
  unint64_t v8 = (uint64_t *)(a2 + 2);
  unint64_t v9 = (uint64_t *)(a1 + 2);
  uint64_t v10 = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a2 + 1), *((void *)a1 + 1));
  uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a3 + 1), *v8);
  if (v10 == -1)
  {
    int v15 = *a1;
    if (result == -1)
    {
      *a1 = *a3;
      *a3 = v15;
    }

    else
    {
      *a1 = *a2;
      *a2 = v15;
      uint64_t v16 = *((void *)a1 + 1);
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = v16;
      uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a3 + 1), v16);
      if (result != -1) {
        return result;
      }
      int v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      unint64_t v9 = v8;
    }

    unint64_t v8 = (uint64_t *)(a3 + 2);
    goto LABEL_10;
  }

  if (result == -1)
  {
    int v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    uint64_t v13 = *((void *)a2 + 1);
    *((void *)a2 + 1) = *((void *)a3 + 1);
    *((void *)a3 + 1) = v13;
    uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a4, *((void *)a2 + 1), *v9);
    if (result == -1)
    {
      int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
LABEL_10:
      uint64_t v18 = *v9;
      uint64_t *v9 = *v8;
      *unint64_t v8 = v18;
    }
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( uint64_t a1, uint64_t a2, void ****a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      if (_LSBundleCompareForActivityContinuationSuitability(***a3, *(void *)(a2 - 8), *(void *)(a1 + 8)) == -1)
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        uint64_t v9 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a2 - 8);
        *(void *)(a2 - _Block_object_dispose((const void *)(v1 - 80), 8) = v9;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( (int *)a1,  (int *)(a1 + 16),  (int *)(a2 - 16),  a3);
      return 1LL;
    case 4LL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( a1,  a1 + 16,  a1 + 32,  a2 - 16,  a3);
      return 1LL;
    case 5LL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *,0>( a1,  a1 + 16,  a1 + 32,  a1 + 48,  a2 - 16,  a3);
      return 1LL;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( (int *)a1,  (int *)(a1 + 16),  (int *)(a1 + 32),  a3);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1LL;
      }
      uint64_t v12 = 0LL;
      int v13 = 0;
      break;
  }

  while (1)
  {
    if (_LSBundleCompareForActivityContinuationSuitability(***a3, *(void *)(v11 + 8), *(void *)(v10 + 8)) == -1)
    {
      int v14 = *(_DWORD *)v11;
      uint64_t v15 = *(void *)(v11 + 8);
      uint64_t v16 = v12;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_DWORD *)(v17 + 4_Block_object_dispose((const void *)(v1 - 80), 8) = *(_DWORD *)(a1 + v16 + 32);
        *(void *)(v17 + 56) = *(void *)(a1 + v16 + 40);
        if (v16 == -32) {
          break;
        }
        v16 -= 16LL;
        if (_LSBundleCompareForActivityContinuationSuitability(***a3, v15, *(void *)(v17 + 24)) != -1)
        {
          uint64_t v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }

      uint64_t v18 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v18 = v14;
      *(void *)(v18 + _Block_object_dispose((const void *)(v1 - 80), 8) = v15;
      if (++v13 == 8) {
        return v11 + 16 == a2;
      }
    }

    uint64_t v10 = v11;
    v12 += 16LL;
    v11 += 16LL;
    if (v11 == a2) {
      return 1LL;
    }
  }

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,+[LSApplicationRecord(UserActivity) applicationRecordsForUserActivityType:limit:error:]::$_0 &,std::pair<unsigned int,LSBundleData const*> *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void ****a5)
{
  uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(void *)(a4 + 8), *(void *)(a3 + 8));
  if (result == -1)
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a4 + 8);
    *(void *)(a4 + _Block_object_dispose((const void *)(v1 - 80), 8) = v12;
    uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(void *)(a3 + 8), *(void *)(a2 + 8));
    if (result == -1)
    {
      int v13 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v13;
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a3 + 8);
      *(void *)(a3 + _Block_object_dispose((const void *)(v1 - 80), 8) = v14;
      uint64_t result = _LSBundleCompareForActivityContinuationSuitability(***a5, *(void *)(a2 + 8), *(void *)(a1 + 8));
      if (result == -1)
      {
        int v15 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v15;
        uint64_t v16 = *(void *)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 80), 8) = *(void *)(a2 + 8);
        *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 80), 8) = v16;
      }
    }
  }

  return result;
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void LSNoteFirstBootForRestrictions()
{
  os_log_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl( &dword_183E58000,  v0,  OS_LOG_TYPE_DEFAULT,  "Clearing important app restriction state for boot",  buf,  2u);
  }

  uint64_t v1 = (const __CFString *)*MEMORY[0x189605198];
  uint64_t v2 = (const __CFString *)*MEMORY[0x189605178];
  CFPreferencesSetValue( @"LSLastSeenImportantAppRestrictionStateKey",  0LL,  @"com.apple.lsd.restrictionhardening",  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605178]);
  if (!CFPreferencesSynchronize(@"com.apple.lsd.restrictionhardening", v1, v2))
  {
    _LSDefaultLog();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( &dword_183E58000,  v3,  OS_LOG_TYPE_DEFAULT,  "error synchronizing after clearing app restriction state!",  v4,  2u);
    }
  }

void _applicationStateChangedCallback(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 _MCRestrictionManager];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  [v2 invalidateSettings];

  [v4 _MCRestrictionManager];
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  [v3 invalidateRestrictions];

  [v4 clearAllValues];
}

id getSharedMCProfileConnection()
{
  os_log_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v0)
  {
    _LSDefaultLog();
    uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      getSharedMCProfileConnection_cold_1();
    }
  }

  return v0;
}

void sub_183E94F64(void *a1)
{
}

void sub_183E94F78(_Unwind_Exception *a1)
{
}

void sub_183E951A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_183E95A9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_183E95C60(void *a1)
{
}

void sub_183E95C74(_Unwind_Exception *a1)
{
}

BOOL isFeatureAllowed(void *a1)
{
  id v1 = a1;
  getSharedMCProfileConnection();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  int v3 = [v2 effectiveBoolValueForSetting:v1];

  return v3 != 2;
}

uint64_t initMCEffectiveSettingsChangedNotification()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCEffectiveSettingsChangedNotification");
  constantMCEffectiveSettingsChangedNotification = result;
  getMCEffectiveSettingsChangedNotification[0] = MCEffectiveSettingsChangedNotificationFunction;
  return result;
}

uint64_t MCEffectiveSettingsChangedNotificationFunction()
{
  return constantMCEffectiveSettingsChangedNotification;
}

Class initMCProfileConnection()
{
  if (!ManagedConfigurationLibrary_frameworkLibrary) {
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/ManagedConfiguration.fra mework/ManagedConfiguration",  2);
  }
  Class result = objc_getClass("MCProfileConnection");
  classMCProfileConnection = (uint64_t)result;
  getMCProfileConnectionClass[0] = (uint64_t (*)())MCProfileConnectionFunction;
  return result;
}

id MCProfileConnectionFunction()
{
  return (id)classMCProfileConnection;
}

Class initMCRestrictionManager()
{
  if (!ManagedConfigurationLibrary_frameworkLibrary) {
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/ManagedConfiguration.fra mework/ManagedConfiguration",  2);
  }
  Class result = objc_getClass("MCRestrictionManager");
  classMCRestrictionManager = (uint64_t)result;
  getMCRestrictionManagerClass[0] = (uint64_t (*)())MCRestrictionManagerFunction;
  return result;
}

id MCRestrictionManagerFunction()
{
  return (id)classMCRestrictionManager;
}

uint64_t initMCFeatureMaximumAppsRating()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCFeatureMaximumAppsRating");
  constantMCFeatureMaximumAppsRating = result;
  getMCFeatureMaximumAppsRating[0] = MCFeatureMaximumAppsRatingFunction;
  return result;
}

uint64_t MCFeatureMaximumAppsRatingFunction()
{
  return constantMCFeatureMaximumAppsRating;
}

uint64_t initMCFeatureRemovedSystemAppBundleIDs()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCFeatureRemovedSystemAppBundleIDs");
  constantMCFeatureRemovedSystemAppBundleIDs = result;
  getMCFeatureRemovedSystemAppBundleIDs = MCFeatureRemovedSystemAppBundleIDsFunction;
  return result;
}

uint64_t MCFeatureRemovedSystemAppBundleIDsFunction()
{
  return constantMCFeatureRemovedSystemAppBundleIDs;
}

uint64_t initMCFeatureNewsAllowed()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCFeatureNewsAllowed");
  constantMCFeatureNewsAllowed = result;
  getMCFeatureNewsAllowed[0] = MCFeatureNewsAllowedFunction;
  return result;
}

uint64_t MCFeatureNewsAllowedFunction()
{
  return constantMCFeatureNewsAllowed;
}

uint64_t initMCFeatureNewsTodayAllowed()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCFeatureNewsTodayAllowed");
  constantMCFeatureNewsTodayAllowed = result;
  getMCFeatureNewsTodayAllowed = MCFeatureNewsTodayAllowedFunction;
  return result;
}

uint64_t MCFeatureNewsTodayAllowedFunction()
{
  return constantMCFeatureNewsTodayAllowed;
}

uint64_t initMCFeatureIdentifierForAdvertisingAllowed()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCFeatureIdentifierForAdvertisingAllowed");
  constantMCFeatureIdentifierForAdvertisingAllowed = result;
  getMCFeatureIdentifierForAdvertisingAllowed = MCFeatureIdentifierForAdvertisingAllowedFunction;
  return result;
}

uint64_t MCFeatureIdentifierForAdvertisingAllowedFunction()
{
  return constantMCFeatureIdentifierForAdvertisingAllowed;
}

uint64_t initMCFeatureLimitAdTrackingForced()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCFeatureLimitAdTrackingForced");
  constantMCFeatureLimitAdTrackingForced = result;
  getMCFeatureLimitAdTrackingForced = MCFeatureLimitAdTrackingForcedFunction;
  return result;
}

uint64_t MCFeatureLimitAdTrackingForcedFunction()
{
  return constantMCFeatureLimitAdTrackingForced;
}

uint64_t initMCFeatureSystemAppRemovalAllowed()
{
  os_log_t v0 = (void *)ManagedConfigurationLibrary_frameworkLibrary;
  if (!ManagedConfigurationLibrary_frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
    ManagedConfigurationLibrary_frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "MCFeatureSystemAppRemovalAllowed");
  constantMCFeatureSystemAppRemovalAllowed = result;
  getMCFeatureSystemAppRemovalAllowed[0] = MCFeatureSystemAppRemovalAllowedFunction;
  return result;
}

uint64_t MCFeatureSystemAppRemovalAllowedFunction()
{
  return constantMCFeatureSystemAppRemovalAllowed;
}

  ;
}

void OUTLINED_FUNCTION_4_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_183E971D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E9728C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E97420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183E974F0(_Unwind_Exception *a1)
{
}

void sub_183E97548(_Unwind_Exception *a1)
{
}

void sub_183E975F0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_183E977B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  os_unfair_lock_unlock(v24);
  os_unfair_lock_unlock(v25);

  _Unwind_Resume(a1);
}

id LaunchServices::PerThreadContext::getDatabase(id *a1, void *a2)
{
  id v4 = *a1;
  if (a2 && !v4)
  {
    *a2 = a1[1];
    id v4 = *a1;
  }

  return v4;
}

void LaunchServices::PerThreadContext::releaseDatabase(LaunchServices::PerThreadContext *this)
{
  uint64_t v2 = *(void **)this;
  *(void *)this = 0LL;

  if (!*((void *)this + 1))
  {
    uint64_t v3 = _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10813LL, (uint64_t)"releaseDatabase", 60LL, MEMORY[0x189604A60]);
    id v4 = (void *)*((void *)this + 1);
    *((void *)this + 1) = v3;
  }

void sub_183E97B64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  a14 = &a11;
  std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__destroy_vector::operator()[abi:nn180100]((void ***)&a14);
  os_unfair_lock_unlock(v15);

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::push_back[abi:nn180100]( char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v12 = (v7 - *a1) >> 4;
    unint64_t v13 = v12 + 1;
    uint64_t v14 = v5 - (void)*a1;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v31 = result;
    uint64_t v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>( result,  v15);
    uint64_t v18 = &v16[16 * v12];
    __int128 v19 = *a2;
    *(_OWORD *)uint64_t v18 = *a2;
    if (*((void *)&v19 + 1))
    {
      uint64_t v20 = (unint64_t *)(*((void *)&v19 + 1) + 8LL);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    unint64_t v23 = *a1;
    unint64_t v22 = a1[1];
    if (v22 == *a1)
    {
      int64x2_t v26 = vdupq_n_s64((unint64_t)v22);
      id v24 = &v16[16 * v12];
    }

    else
    {
      id v24 = &v16[16 * v12];
      do
      {
        __int128 v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(void *)unint64_t v22 = 0LL;
        *((void *)v22 + 1) = 0LL;
      }

      while (v22 != v23);
      int64x2_t v26 = *(int64x2_t *)a1;
    }

    int v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    int64x2_t v29 = v26;
    uint64_t v27 = a1[2];
    a1[2] = &v16[16 * v17];
    uint64_t v30 = v27;
    uint64_t v28 = v26.i64[0];
    uint64_t result = std::__split_buffer<std::shared_ptr<LaunchServices::PerThreadContext>>::~__split_buffer((uint64_t)&v28);
  }

  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 8);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    int v11 = v7 + 16;
  }

  a1[1] = v11;
  return result;
}

void sub_183E97DB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183E97F10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_unlock(v10);
  _Unwind_Resume(a1);
}

void LaunchServices::PerThreadContext::initialize(LaunchServices::PerThreadContext *this)
{
  if (!*((_BYTE *)this + 17))
  {
    unint64_t v2 = _LSServer_SelfSessionKey();
    id v7 = 0LL;
    id v3 = _LSCopyLocalDatabase(v2, &v7);
    id v4 = v7;
    unint64_t v5 = *(void **)this;
    *(void *)this = v3;

    unint64_t v6 = (void *)*((void *)this + 1);
    *((void *)this + 1) = v4;

    *((_BYTE *)this + 17) = 1;
  }

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::~__shared_ptr_emplace( std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_189D72D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::~__shared_ptr_emplace( std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_189D72D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<LaunchServices::PerThreadContext>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return a1;
}

void *std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__emplace_unique_key_args<_opaque_pthread_t *,std::piecewise_construct_t const&,std::tuple<_opaque_pthread_t *&&>,std::tuple<std::shared_ptr<LaunchServices::PerThreadContext>&&>>( uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  unint64_t v9 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v10 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v9 >> 47) ^ v9);
  unint64_t v11 = 0x9DDFEA08EB382D69LL * (v10 ^ (v10 >> 47));
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v5 = 0x9DDFEA08EB382D69LL * (v10 ^ (v10 >> 47));
      if (v11 >= v12) {
        unint64_t v5 = v11 % v12;
      }
    }

    else
    {
      unint64_t v5 = v11 & (v12 - 1);
    }

    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v5);
    if (v14)
    {
      unint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == *a2) {
              return v15;
            }
          }

          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }

            else
            {
              v16 &= v12 - 1;
            }

            if (v16 != v5) {
              break;
            }
          }

          unint64_t v15 = (void *)*v15;
        }

        while (v15);
      }
    }
  }

  uint64_t v17 = a1 + 16;
  uint64_t v18 = (char *)operator new(0x28uLL);
  v29[0] = v18;
  v29[1] = a1 + 16;
  *(void *)uint64_t v18 = 0LL;
  *((void *)v18 + 1) = v11;
  uint64_t v19 = *a5;
  *((void *)v18 + 2) = **a4;
  *(_OWORD *)(v18 + 24) = *(_OWORD *)v19;
  *(void *)uint64_t v19 = 0LL;
  *(void *)(v19 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1LL;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v25);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v5 = v11 % v12;
      }
      else {
        unint64_t v5 = v11;
      }
    }

    else
    {
      unint64_t v5 = (v12 - 1) & v11;
    }
  }

  int64x2_t v26 = *(void **)(*(void *)a1 + 8 * v5);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }

  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v5) = v17;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8LL);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v27 >= v12) {
          v27 %= v12;
        }
      }

      else
      {
        v27 &= v12 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }

  unint64_t v15 = (void *)v29[0];
  v29[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>>::reset[abi:nn180100]( (uint64_t)v29,  0LL);
  return v15;
}

void sub_183E984BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>>::reset[abi:nn180100]( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100]((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }

uint64_t std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__erase_unique<_opaque_pthread_t *>( void *a1, void *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>( a1,  a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::remove( a1,  (void *)result,  (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,void *>>>>::reset[abi:nn180100]( (uint64_t)v4,  0LL);
    return 1LL;
  }

  return result;
}

void std::vector<std::shared_ptr<LaunchServices::PerThreadContext>>::__destroy_vector::operator()[abi:nn180100]( void ***a1)
{
  id v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100](v4 - 16);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t std::__split_buffer<std::shared_ptr<LaunchServices::PerThreadContext>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100](i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::~__hash_table( uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::__deallocate_node( uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::shared_ptr<LaunchServices::PerThreadContext>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 3));
      operator delete(v2);
      unint64_t v2 = v3;
    }

    while (v3);
  }

void _LSServer_RefreshContentInFrameworkAtURL(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_RefreshContentInFrameworkAtURL(NSURL *__strong, void (^__strong)(NSError *__strong))");
  id v13 = 0LL;
  softLinkMobileInstallationCopyFrameworkInfoForLaunchServices(v3, 0LL, (uint64_t)&v13);
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  id v6 = v13;
  if (v5)
  {
    _LSServer_DatabaseExecutionContext();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 3221225472LL;
    void v9[2] = ___LSServer_RefreshContentInFrameworkAtURL_block_invoke;
    v9[3] = &unk_189D72EE8;
    id v10 = v3;
    id v11 = v5;
    id v12 = v4;
    -[LSDBExecutionContext syncWrite:]((uint64_t)v7, v9);
  }

  else
  {
    _LSInstallLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _LSServer_RefreshContentInFrameworkAtURL_cold_1();
    }

    (*((void (**)(id, id))v4 + 2))(v4, v6);
  }
}

void sub_183E98C00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31)
{
}

id __copy_helper_block_e8_40n6_8_8_s0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40n4_8_s0(uint64_t a1)
{
}

void _registerMIPluginDictionary(void *a1, void *a2)
{
  v31[1] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  kdebug_trace();
  [v3 objectForKey:*MEMORY[0x189604E00]];
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  id v6 = (void *)[v3 mutableCopy];
  [v3 objectForKey:@"Entitlements"];
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  [v7 objectForKey:@"com.apple.developer.replace-plugin"];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8) {
    [v4 addObject:v8];
  }
  id v9 = objc_alloc(MEMORY[0x189604030]);
  [v3 objectForKey:@"Path"];
  id v10 = (void *)objc_claimAutoreleasedReturnValue();
  id v11 = (void *)[v9 initFileURLWithPath:v10 isDirectory:1];

  Unique = (const void *)_CFBundleCreateUnique();
  [NSString stringWithFormat:@"LaunchServices: registering extension %@"];
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v27 = v7;
  if (_LSLoggingQueue_onceToken != -1) {
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_884);
  }
  uint64_t v14 = (dispatch_queue_s *)_LSLoggingQueue_logQueue;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___LSSetCrashMessage_block_invoke;
  block[3] = &unk_189D72BF0;
  id v29 = v13;
  id v15 = v13;
  dispatch_sync(v14, block);

  _LSLogStepStart(4LL, 0LL, v5, @"registering app extension", v16, v17, v18, v19, (uint64_t)v5);
  char v30 = v5;
  v31[0] = v6;
  [MEMORY[0x189603F68] dictionaryWithObjects:v31 forKeys:&v30 count:1];
  float v20 = (void *)objc_claimAutoreleasedReturnValue();
  int v21 = _LSRegisterPluginWithInfo(v11, v20);

  _LSLogStepFinished(4LL, v21 == 0, v5, @"registered app extension", v22, v23, v24, v25, v26);
  if (Unique) {
    CFRelease(Unique);
  }
  kdebug_trace();
}

uint64_t _LSUnregisterAppWithBundleIDUsingContext(void *a1, unsigned int a2, LSContext *a3, int *a4)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  BOOL v7 = (a2 & 1) == 0;
  BOOL v8 = (a2 & 2) == 0;
  uint64_t v37 = 0LL;
  memset(buf, 0, sizeof(buf));
  BOOL v9 = _LSBundleFindWithInfoAndNo_IOFilter(a3, 0LL, a1, 0, buf, 2, 1152, 0LL, 0LL, &v37, &v35, 0LL);
  _LSInstallLog();
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (v9) {
      id v11 = @"Found";
    }
    else {
      id v11 = @"No";
    }
    *(_DWORD *)stat buf = 138412546;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = a1;
    _os_log_impl(&dword_183E58000, v10, OS_LOG_TYPE_DEFAULT, "%@ placeholder to remove for %@", buf, 0x16u);
  }

  memset(buf, 0, sizeof(buf));
  if (_LSBundleFindWithInfoAndNo_IOFilter(a3, 0LL, a1, 0, buf, 2, 128, 0LL, 0LL, (_DWORD *)&v37 + 1, &v36, 0LL))
  {
    BOOL v12 = 1;
  }

  else
  {
    memset(buf, 0, sizeof(buf));
    BOOL v12 = _LSBundleFindWithInfoAndNo_IOFilter(a3, 0LL, a1, 0, buf, 13, 128, 0LL, 0LL, (_DWORD *)&v37 + 1, &v36, 0LL);
  }

  int v13 = a2 & v8;
  _LSInstallLog();
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (v12) {
      id v15 = @"Found";
    }
    else {
      id v15 = @"No";
    }
    *(_DWORD *)stat buf = 138412546;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = a1;
    _os_log_impl(&dword_183E58000, v14, OS_LOG_TYPE_DEFAULT, "%@ app to remove for %@", buf, 0x16u);
  }

  if ((v13 & v9 & v12) == 1)
  {
    uint64_t v16 = _LSUnregisterBundle((void **)&a3->db, v37, 0LL);
    _LSInstallLog();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      [MEMORY[0x189607968] numberWithInt:(_DWORD)v16 == 0];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)stat buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v18;
      _os_log_impl( &dword_183E58000,  v17,  OS_LOG_TYPE_DEFAULT,  "_LSUnregisterBundle(%@) returned %@ for placeholder only",  buf,  0x16u);
    }

    int v19 = 10;
  }

  else if (v12 || v9)
  {
    int v20 = v7 & (a2 >> 1);
    int v21 = (a2 >> 2) & 1;
    int v22 = !v9;
    if ((((v20 ^ 1) & 1) != 0 || v22)
      && ((+[_LSDDeviceIdentifierService clearIdentifiersForUninstallationWithContext:bundleUnit:bundleData:]( &OBJC_CLASS____LSDDeviceIdentifierService,  "clearIdentifiersForUninstallationWithContext:bundleUnit:bundleData:",  a3,  HIDWORD(v37),  v36),  !v21)
        ? (int v23 = v20 ^ 1)
        : (int v23 = 0),
          (v23 & v9) == 1))
    {
      int v33 = _LSUnregisterBundle((void **)&a3->db, v37, 0LL);
      _LSInstallLog();
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        [MEMORY[0x189607968] numberWithInt:v33 == 0];
        int v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)stat buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&buf[14] = v34;
        _os_log_impl( &dword_183E58000,  v24,  OS_LOG_TYPE_DEFAULT,  "_LSUnregisterBundle(%@) returned %@ for placeholder",  buf,  0x16u);
      }

      int v19 = 9;
    }

    else
    {
      int v19 = 0;
    }

    if ((v12 & (v13 ^ 1)) == 1)
    {
      uint64_t v16 = _LSUnregisterBundle((void **)&a3->db, HIDWORD(v37), 0LL);
      _LSInstallLog();
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        [MEMORY[0x189607968] numberWithInt:(_DWORD)v16 == 0];
        unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)stat buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&buf[14] = v27;
        _os_log_impl( &dword_183E58000,  v26,  OS_LOG_TYPE_DEFAULT,  "_LSUnregisterBundle(%@) returned %@ for app",  buf,  0x16u);
      }

      if (v20 ^ 1 | v22) {
        int v19 = 8;
      }
      else {
        int v19 = 5;
      }
    }

    else
    {
      _LSInstallLog();
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138413570;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v12;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v9;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v20;
        *(_WORD *)&buf[30] = 1024;
        int v39 = v13;
        __int16 v40 = 1024;
        int v41 = v21;
        _os_log_impl( &dword_183E58000,  v28,  OS_LOG_TYPE_DEFAULT,  "no bundles to remove for %@ (found app: %d placeholder: %d app only: %d placeholder only: %d placeholder only if parallel: %d)",  buf,  0x2Au);
      }

      uint64_t v16 = 0LL;
    }
  }

  else
  {
    _LSInstallLog();
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138412290;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_183E58000, v25, OS_LOG_TYPE_DEFAULT, "No bundles to remove for %@", buf, 0xCu);
    }

    uint64_t v16 = 0LL;
    int v19 = 0;
  }

  id v29 = (void *)MEMORY[0x186E2A59C]();
  _LSInstallLog();
  char v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412290;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_183E58000, v30, OS_LOG_TYPE_DEFAULT, "Clearing icon cache entries for %@", buf, 0xCu);
  }

  objc_autoreleasePoolPop(v29);
  if (a4) {
    *a4 = v19;
  }
  return v16;
}

uint64_t _LSUnregisterAppWithBundleID( LSContext *a1, void *a2, unsigned int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = @" (placeholder only)";
  if ((a3 & 3) != 1) {
    BOOL v12 = &stru_189D7B4C8;
  }
  char v30 = 0LL;
  _LSLogStepStart(6LL, 0LL, a2, @"Beginning _LSUnregisterAppWithBundleID%@%@%@", a5, a6, a7, a8, (uint64_t)v12);
  if (a1)
  {
    if (a2)
    {
LABEL_5:
      uint64_t v17 = _LSUnregisterAppWithBundleIDUsingContext(a2, a3, a1, a4);
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v17 = _LSContextInit(&v30);
    if ((_DWORD)v17) {
      goto LABEL_14;
    }
    a1 = (LSContext *)&v30;
    if (a2) {
      goto LABEL_5;
    }
  }

  _LSDefaultLog();
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    _LSUnregisterAppWithBundleID_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
  }

  uint64_t v17 = 4294967246LL;
LABEL_11:
  if (a1 == (LSContext *)&v30) {
    _LSContextDestroy(&v30);
  }
  if (!(_DWORD)v17)
  {
    uint64_t v27 = 1LL;
    goto LABEL_18;
  }

void sub_183E99728( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void _LSLogStepStart( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a3;
  if (a4)
  {
    BOOL v12 = (objc_class *)NSString;
    id v13 = a4;
    a4 = (void *)[[v12 alloc] initWithFormat:v13 arguments:&a9];
  }

  [(Class)getAITransactionLogClass[0]() logStep:a1 byParty:5 phase:1 success:1 forBundleID:v11 description:a4];
}

void _LSLogStepFinished( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  if (a4)
  {
    id v13 = (objc_class *)NSString;
    id v14 = a4;
    a4 = (void *)[[v13 alloc] initWithFormat:v14 arguments:&a9];
  }

  [(Class)getAITransactionLogClass[0]() logStep:a1 byParty:5 phase:2 success:a2 forBundleID:v12 description:a4];
}

void _LSInvokeMIForShimmedInstall(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  _LSInstallLog();
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412290;
    id v18 = v5;
    _os_log_impl(&dword_183E58000, v8, OS_LOG_TYPE_DEFAULT, "Processing install of %@... later.", buf, 0xCu);
  }

  getShimInvokeQueue();
  BOOL v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___LSInvokeMIForShimmedInstall_block_invoke;
  block[3] = &unk_189D72F18;
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v10 = v7;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

id getShimInvokeQueue()
{
  if (getShimInvokeQueue_onceToken != -1) {
    dispatch_once(&getShimInvokeQueue_onceToken, &__block_literal_global_840);
  }
  return (id)getShimInvokeQueue_queue;
}

void _LSInvokeMIForShimmedUninstall(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  _LSInstallLog();
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412290;
    id v18 = v5;
    _os_log_impl(&dword_183E58000, v8, OS_LOG_TYPE_DEFAULT, "Processing uninstall of %@... later.", buf, 0xCu);
  }

  getShimInvokeQueue();
  BOOL v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___LSInvokeMIForShimmedUninstall_block_invoke;
  block[3] = &unk_189D72F18;
  id v14 = v5;
  id v15 = v6;
  id v16 = v7;
  id v10 = v7;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

void sub_183E9A2DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, ...)
{
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_183E9A448( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183E9ABFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183E9AE0C(_Unwind_Exception *a1)
{
}

void mutateSubscriberCountForNotificationName(const __CFString *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v3 = a2;
  if (mutateSubscriberCountForNotificationName_onceToken != -1) {
    dispatch_once(&mutateSubscriberCountForNotificationName_onceToken, &__block_literal_global_145);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&mutateSubscriberCountForNotificationName_notificationCountLock);
  [(id)mutateSubscriberCountForNotificationName_notificationSubscriberCounts objectForKey:a1];
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  id v5 = v4;
  if (v4) {
    uint64_t v6 = [v4 unsignedIntValue];
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = v3[2](v3, v6);
  uint64_t v8 = v7;
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    if ((_DWORD)v6)
    {
      if (!(_DWORD)v7)
      {
        _LSInstallLog();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 138412290;
          id v16 = a1;
          _os_log_impl( &dword_183E58000,  v9,  OS_LOG_TYPE_DEFAULT,  "unregistering for distributed notification %@ in this process",  (uint8_t *)&v15,  0xCu);
        }

        DistributedCenter = CFNotificationCenterGetDistributedCenter();
        CFNotificationCenterRemoveObserver( DistributedCenter,  +[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"),  a1,  0LL);
      }
    }

    else
    {
      _LSInstallLog();
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138412290;
        id v16 = a1;
        _os_log_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_DEFAULT,  "registering for distributed notification %@ in this process",  (uint8_t *)&v15,  0xCu);
      }

      id v12 = CFNotificationCenterGetDistributedCenter();
      CFNotificationCenterAddObserver( v12,  +[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"),  (CFNotificationCallback)LSApplicationWorkspaceNotificationCallback,  a1,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }

  id v13 = (void *)mutateSubscriberCountForNotificationName_notificationSubscriberCounts;
  [MEMORY[0x189607968] numberWithUnsignedInt:v8];
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  [v13 setObject:v14 forKey:a1];

  os_unfair_lock_unlock((os_unfair_lock_t)&mutateSubscriberCountForNotificationName_notificationCountLock);
}

void __mutateSubscriberCountForNotificationName_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x189603FC8]);
  id v1 = (void *)mutateSubscriberCountForNotificationName_notificationSubscriberCounts;
  mutateSubscriberCountForNotificationName_notificationSubscriberCounts = (uint64_t)v0;
}

void LSApplicationWorkspaceNotificationCallback(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  if (([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.cancel"] & 1) != 0
    || ([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.pause"] & 1) != 0
    || ([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.prioritize"] & 1) != 0
    || ([a3 isEqualToString:@"com.lsinstallprogress.appcontrols.resume"] & 1) != 0
    || [a3 isEqualToString:@"com.lsinstallprogress.networkusagechanged"])
  {
    id v8 = a5;
    id v9 = a3;
    [a2 remoteObserver];
    id v10 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = MEMORY[0x1895F87A8];
    uint64_t v19 = 3221225472LL;
    uint64_t v20 = __LSApplicationWorkspaceObserverCallback_block_invoke;
    uint64_t v21 = &unk_189D73BE0;
    id v22 = v9;
    id v23 = v8;
    id v24 = v10;
    id v11 = v9;
    id v12 = v8;
    id v13 = v10;
    id v14 = "com.apple.launchservices.LSApplicationWorkspaceObserverCallback";
LABEL_7:
    dispatchAsyncToCallbackQueueWithTransaction((uint64_t)v14, &v18);

    return;
  }

  if (([a3 isEqualToString:@"com.apple.LaunchServices.pluginsregistered"] & 1) != 0
    || ([a3 isEqualToString:@"com.apple.LaunchServices.pluginsunregistered"] & 1) != 0
    || [a3 isEqualToString:@"com.apple.LaunchServices.pluginswillberemoved"])
  {
    id v15 = a5;
    id v16 = a3;
    [a2 remoteObserver];
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v18 = MEMORY[0x1895F87A8];
    uint64_t v19 = 3221225472LL;
    uint64_t v20 = __LSApplicationWorkspacePluginsChangedCallback_block_invoke;
    uint64_t v21 = &unk_189D73BE0;
    id v22 = v16;
    id v23 = v15;
    id v24 = v17;
    id v11 = v16;
    id v12 = v15;
    id v13 = v17;
    id v14 = "com.apple.launchservices.LSApplicationWorkspacePluginsChangedCallback";
    goto LABEL_7;
  }

void performWithLSAWDistributedNotificationNameBasedOnObserverConformance( void *a1, void (*a2)(const __CFString *))
{
  id v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.lsinstallprogress.appcontrols.cancel");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.lsinstallprogress.appcontrols.pause");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.lsinstallprogress.appcontrols.prioritize");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.lsinstallprogress.appcontrols.resume");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.lsinstallprogress.networkusagechanged");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.apple.LaunchServices.pluginsregistered");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.apple.LaunchServices.pluginsunregistered");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.apple.LaunchServices.pluginswillberemoved");
  }
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    a2(@"com.apple.LaunchServices.applicationStateChanged");
  }
}

void sub_183E9B758(_Unwind_Exception *a1)
{
}

uint64_t shouldConnectToLSD(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0
    || (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = objc_opt_respondsToSelector() & 1;
  }

  return v2;
}

void sub_183E9BB00(_Unwind_Exception *a1)
{
}

void unsubscribeFromLSAWDistributedNotification(const __CFString *a1)
{
  v1[0] = MEMORY[0x1895F87A8];
  v1[1] = 3221225472LL;
  v1[2] = __unsubscribeFromLSAWDistributedNotification_block_invoke;
  v1[3] = &__block_descriptor_40_e8_I12__0I8l;
  v1[4] = a1;
  mutateSubscriberCountForNotificationName(a1, v1);
}

void sub_183E9BFB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183E9C1B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t getFileHandleForOpeningResource(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  v27[1] = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = v10;
  if (([v9 isFileURL] & 1) == 0)
  {

    goto LABEL_13;
  }

  uint64_t v13 = objc_opt_class();
  uint64_t v14 = [v11 objectForKey:@"FileProviderString"];
  uint64_t v15 = (void *)v14;
  if (v13 && v14)
  {
    if ((objc_opt_isKindOfClass() & 1) != 0) {
      goto LABEL_12;
    }
  }

  else if (v14)
  {
    goto LABEL_12;
  }

  uint64_t v16 = objc_opt_class();
  uint64_t v17 = [v12 objectForKey:@"FileProviderString"];
  uint64_t v15 = (void *)v17;
  if (v16 && v17 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v15 = 0LL;
  }

void sub_183E9D598( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void _LSCommonOpenApplicationWithBundleIdentifier(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a5;
  if (!v10)
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSCommonOpenApplicationWithBundleIdentifier(LSApplicationWorkspace *__strong, NSString *__strong, _LSOpenCon figuration *__strong, BOOL, void (^__strong)(BOOL, NSError *__strong))");
    id v19 = (void *)objc_claimAutoreleasedReturnValue();
    [v18 handleFailureInFunction:v19, @"LSApplicationWorkspace.m", 2174, @"Invalid parameter not satisfying: %@", @"bundleIdentifier != nil" file lineNumber description];
  }

  [v9 optionsFromOpenConfiguration:v11];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = MEMORY[0x1895F87A8];
  v22[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
  v22[1] = (void (*)(void, void))3221225472LL;
  v22[2] = (void (*)(void, void))___LSCommonOpenApplicationWithBundleIdentifier_block_invoke;
  v22[3] = (void (*)(void, void))&unk_189D73298;
  id v15 = v12;
  id v23 = v15;
  +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDOpenService, v22);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v14;
  v20[1] = 3221225472LL;
  v20[2] = ___LSCommonOpenApplicationWithBundleIdentifier_block_invoke_2;
  v20[3] = &unk_189D73C90;
  id v21 = v15;
  id v17 = v15;
  [v16 openApplicationWithIdentifier:v10 options:v13 useClientProcessHandle:a4 completionHandler:v20];
}

void enumeratePluginsMatchingQuery(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  +[_LSQueryContext defaultContext](&OBJC_CLASS____LSQueryContext, "defaultContext");
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = __enumeratePluginsMatchingQuery_block_invoke;
  v7[3] = &unk_189D73470;
  id v8 = v3;
  id v6 = v3;
  [v5 enumerateResolvedResultsOfQuery:v4 withBlock:v7];
}

void sub_183E9E8B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id mapBundleIdentifiersToUUIDs(int a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v23 = 0LL;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x3032000000LL;
  uint64_t v26 = __Block_byref_object_copy__3;
  uint64_t v27 = __Block_byref_object_dispose__3;
  id v28 = 0LL;
  uint64_t v17 = 0LL;
  id v18 = &v17;
  uint64_t v19 = 0x3032000000LL;
  uint64_t v20 = __Block_byref_object_copy__3;
  id v21 = __Block_byref_object_dispose__3;
  id v22 = 0LL;
  uint64_t v6 = MEMORY[0x1895F87A8];
  v16[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
  v16[1] = (void (*)(void, void))3221225472LL;
  _OWORD v16[2] = (void (*)(void, void))__mapBundleIdentifiersToUUIDs_block_invoke;
  v16[3] = (void (*)(void, void))&unk_189D731E8;
  _BYTE v16[4] = (void (*)(void, void))&v17;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDReadService, v16);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  id v8 = v7;
  v14[0] = v6;
  if (a1) {
    id v9 = 0LL;
  }
  else {
    id v9 = v5;
  }
  v14[1] = 3221225472LL;
  if (a1) {
    id v10 = v5;
  }
  else {
    id v10 = 0LL;
  }
  v14[2] = __mapBundleIdentifiersToUUIDs_block_invoke_2;
  v14[3] = &unk_189D73CD8;
  char v15 = a1;
  v14[4] = &v23;
  v14[5] = &v17;
  [v7 mapBundleIdentifiers:v9 orMachOUUIDs:v10 completionHandler:v14];
  id v11 = (void *)v24[5];
  if (a3 && !v11)
  {
    *a3 = (id) v18[5];
    id v11 = (void *)v24[5];
  }

  id v12 = v11;

  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v23, 8);

  return v12;
}

void sub_183E9EAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183E9EDD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

id serviceDomainForRequestContext(void *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  [v1 targetUserID];
  id v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    _LSDefaultLog();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      [v1 targetUserID];
      id v5 = (void *)objc_claimAutoreleasedReturnValue();
      int v7 = 138543618;
      id v8 = v5;
      __int16 v9 = 2114;
      id v10 = @"platform lacks support";
      _os_log_impl( &dword_183E58000,  v4,  OS_LOG_TYPE_DEFAULT,  "Ignoring request to target domain for user %{public}@ because %{public}@, will target default service domain",  (uint8_t *)&v7,  0x16u);
    }
  }

  return v2;
}

void handleSaveObserverBehavior(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = v10;
  if (v7)
  {
    if (v10)
    {
      [v7 operationWithUUID:v9 didFailToSaveWithError:v10];
    }

    else if (v8)
    {
      uint64_t v12 = MEMORY[0x1895F87A8];
      v21[0] = MEMORY[0x1895F87A8];
      v21[1] = 3221225472LL;
      v21[2] = __handleSaveObserverBehavior_block_invoke;
      v21[3] = &unk_189D73D00;
      id v13 = v7;
      id v22 = v13;
      id v14 = v9;
      id v23 = v14;
      [v8 remoteObjectProxyWithErrorHandler:v21];
      char v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = v12;
      v18[1] = 3221225472LL;
      void v18[2] = __handleSaveObserverBehavior_block_invoke_2;
      v18[3] = &unk_189D73D28;
      id v19 = v13;
      id v20 = v14;
      [v15 waitForResult:v18];
    }

    else
    {
      _LSInstallLog();
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        handleSaveObserverBehavior_cold_1();
      }

      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10810LL, (uint64_t)"handleSaveObserverBehavior", 2467LL, 0LL);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      [v7 operationWithUUID:v9 didFailToSaveWithError:v17];
    }
  }
}

void sub_183E9F5B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

void sub_183E9F8F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

void sub_183E9FCB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_183E9FEF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183EA059C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EA085C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183EA0A94(_Unwind_Exception *a1)
{
}

void sub_183EA0CC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183EA0F8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t registerApplicationWithDictionary(void *a1, unsigned int a2)
{
  id v3 = a1;
  kdebug_trace();
  id v22 = 0LL;
  v23.db = 0LL;
  id v20 = 0LL;
  -[FSNode objectForKey:](v3, "objectForKey:", @"IsPlaceholder");
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  int v5 = [v4 BOOLValue];

  -[FSNode objectForKey:](v3, "objectForKey:", @"IsParallelPlaceholder");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  int v7 = [v6 BOOLValue];

  -[FSNode objectForKey:](v3, "objectForKey:", *MEMORY[0x189604E00]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[FSNode objectForKey:](v3, "objectForKey:", @"Path");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    id v10 = &stru_189D7B4C8;
    if (v7) {
      id v10 = @"(parallel)";
    }
    uint64_t v11 = @"app bundle";
    if (v5) {
      uint64_t v11 = @"placeholder";
    }
    [NSString stringWithFormat:@"LaunchServices: registering %@%@ for %@", v10, v11, v8];
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    if (_LSLoggingQueue_onceToken != -1) {
      dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_884);
    }
    uint64_t v13 = (dispatch_queue_s *)_LSLoggingQueue_logQueue;
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = ___LSSetCrashMessage_block_invoke;
    block[3] = &unk_189D72BF0;
    id v25 = v12;
    id v14 = v12;
    dispatch_sync(v13, block);

    uint64_t v15 = (void *)[objc_alloc(MEMORY[0x189604030]) initFileURLWithPath:v9 isDirectory:1];
    uint64_t v16 = FSNodeCreateWithURL((uint64_t)v15, 0LL, &v22);

    if (!(_DWORD)v16)
    {
      uint64_t v16 = _LSContextInit((id *)&v23.db);
      if (!(_DWORD)v16)
      {
        uint64_t v16 = _LSFindOrRegisterBundleNode(&v23, v22, 0LL, (((a2 >> 30) & 1) == 0) | a2 | 0x2000000, v3, &v21, &v20);
        if (!(_DWORD)v16)
        {
          if (([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
          {
            -[FSNode objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"IsPlaceholder");
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
            char v18 = [v17 BOOLValue];

            if ((v18 & 1) == 0) {
              +[_LSDDeviceIdentifierService generateIdentifiersForInstallationWithContext:bundleUnit:bundleData:]( &OBJC_CLASS____LSDDeviceIdentifierService,  "generateIdentifiersForInstallationWithContext:bundleUnit:bundleData:",  &v23,  v21,  v20);
            }
          }

          if (_LSLoggingQueue_onceToken != -1) {
            dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_884);
          }
          dispatch_sync((dispatch_queue_t)_LSLoggingQueue_logQueue, &__block_literal_global_883);
        }

        _LSContextDestroy((void **)&v23.db);
      }
    }
  }

  else
  {
    uint64_t v16 = 4294967246LL;
  }

  kdebug_trace();

  return v16;
}

void sub_183EA1494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void sub_183EA179C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_183EA19DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_183EA1C80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

uint64_t _updatePlaceholderInstallType(void *a1, void *a2, uint64_t a3, void *a4)
{
  v24[1] = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = v8;
  if (a3
    && (softLinkMobileInstallationUpdatePlaceholderMetadata(v8, a3, 0LL, 0LL, 0LL),
        (uint64_t v10 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v11 = (id)v10;
    _LSInstallLog();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      -[LSApplicationWorkspace updatePlaceholderMetadataForApp:installType:failure:underlyingError:source:outError:].cold.1();
    }

    uint64_t v17 = 0LL;
  }

  else
  {
    LSContext v23 = @"LSInstallType";
    [MEMORY[0x189607968] numberWithUnsignedInteger:a3];
    char v18 = (void *)objc_claimAutoreleasedReturnValue();
    v24[0] = v18;
    [MEMORY[0x189603F68] dictionaryWithObjects:v24 forKeys:&v23 count:1];
    id v19 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189607AB8] UUID];
    id v20 = (void *)objc_claimAutoreleasedReturnValue();
    id v22 = 0LL;
    uint64_t v17 = [v7 updateRecordForApp:v9 withSINF:0 iTunesMetadata:0 placeholderMetadata:v19 sendNotification:1 operationUUID:v20 outSaveToken:0 error:&v22];
    id v11 = v22;

    _LSContextInvalidate();
  }

  _LSLogStepFinished( 11LL,  v17,  v9,  @"Updated Placeholder install type with error %@",  v13,  v14,  v15,  v16,  (uint64_t)v11);
  if (a4) {
    *a4 = v11;
  }

  return v17;
}

BOOL _LSUnregisterPluginsAtURL(void *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  if (v3)
  {
    id v22 = 0LL;
    LSContext v23 = 0LL;
    int inited = _LSContextInitReturningError((uint64_t)&v23, (uint64_t)&v22);
    id v5 = v22;
    if (!inited)
    {
      int v13 = 0;
      goto LABEL_23;
    }

    uint64_t v6 = (void *)_LSCopyPluginsWithURL((uint64_t)&v23, v3);
    id v7 = v6;
    if (v6)
    {
      if (![v6 count])
      {
        int v13 = 1;
LABEL_22:
        _LSContextDestroy(&v23);

LABEL_23:
        BOOL v15 = v13 != 0;
        if (!a2) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }

      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      objc_msgSend(MEMORY[0x189604010], "setWithArray:", v7, 0);
      id v8 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
      if (v9)
      {
        uint64_t v10 = *(void *)v19;
        while (2)
        {
          for (uint64_t i = 0LL; i != v9; ++i)
          {
            if (*(void *)v19 != v10) {
              objc_enumerationMutation(v8);
            }
            int v12 = _LSUnregisterPlugin( &v23,  [*(id *)(*((void *)&v18 + 1) + 8 * i) unsignedLongLongValue]);
            if (v12)
            {
              uint64_t v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v12, (uint64_t)"_LSUnregisterPluginsAtURL", 509LL, 0LL);

              int v13 = 0;
              id v5 = (id)v16;
              goto LABEL_21;
            }
          }

          uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v26 count:16];
          int v13 = 1;
          if (v9) {
            continue;
          }
          break;
        }
      }

      else
      {
        int v13 = 0;
      }
    }

    else
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10814LL, (uint64_t)"_LSUnregisterPluginsAtURL", 516LL, 0LL);
      int v13 = 0;
      id v8 = v5;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
    }

void sub_183EA2A38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

uint64_t _LSRegisterPluginWithInfo(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)MEMORY[0x186E2A59C]();
  id v17 = 0LL;
  v18.db = 0LL;
  if (v3)
  {
    uint64_t v6 = _LSContextInit((id *)&v18.db);
    if ((_DWORD)v6)
    {
      id v11 = 0LL;
    }

    else
    {
      id v7 = (void *)_LSCopyPluginsWithURL((uint64_t)&v18, v3);
      id v8 = v7;
      if (v7)
      {
        [v7 objectAtIndex:0];
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
        unsigned int v10 = [v9 unsignedLongLongValue];
        CFRelease(v8);
      }

      else
      {
        unsigned int v10 = 0;
      }

      uint64_t v6 = FSNodeCreateWithURL((uint64_t)v3, 0LL, &v17);
      id v11 = v17;
      if (!(_DWORD)v6)
      {
        id v16 = 0LL;
        BOOL v12 = _LSRegisterPluginNode(&v18, v17, v4, 0, v10, &v16);
        id v13 = v16;
        uint64_t v14 = v13;
        if (v12) {
          uint64_t v6 = 0LL;
        }
        else {
          uint64_t v6 = _LSGetOSStatusFromNSError(v13);
        }

        _LSContextDestroy((void **)&v18.db);
        id v11 = v17;
      }
    }
  }

  else
  {
    id v11 = 0LL;
    uint64_t v6 = 4294967246LL;
  }

  objc_autoreleasePoolPop(v5);
  return v6;
}

void sub_183EA2BC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_183EA2DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183EA3070( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EA31A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_183EA3348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EA347C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_183EA3614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EA3740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183EA38D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EA3AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_183EA43A0(_Unwind_Exception *a1)
{
}

void sub_183EA4648(_Unwind_Exception *a1)
{
}

void sub_183EA480C(_Unwind_Exception *a1)
{
}

void sub_183EA4A7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EA51BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t _LSServer_UpdateDatabaseWithInfo( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    uint64_t v13 = @"sinfData";
  }

  else if (a3)
  {
    uint64_t v13 = @"iTunesData";
  }

  else
  {
    uint64_t v13 = @"placeholderMetadata";
    if (!a4) {
      uint64_t v13 = @"bumping sequence number";
    }
  }

  _LSLogStepStart(11LL, 0LL, a1, @"Updating bundle record for app (%@)", a5, a6, a7, a8, (uint64_t)v13);
  uint64_t v14 = (void *)MEMORY[0x186E2A59C]();
  BOOL v15 = -[LSBundleRecordUpdater initWithBundleIdentifier:preferPlaceholder:]( objc_alloc(&OBJC_CLASS___LSBundleRecordUpdater),  "initWithBundleIdentifier:preferPlaceholder:",  a1,  a4 != 0);
  if (v15)
  {
    id v16 = v15;
    if (!v8
      && !-[LSBundleRecordUpdater checkNeedsUpdateForiTunesMetadata:SINFo:placeholderMetadata:]( v15,  "checkNeedsUpdateForiTunesMetadata:SINFo:placeholderMetadata:",  a3,  a2,  a4))
    {
      _LSDefaultLog();
      char v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138413058;
        uint64_t v38 = a2;
        __int16 v39 = 2112;
        uint64_t v40 = a3;
        __int16 v41 = 2112;
        uint64_t v42 = a4;
        __int16 v43 = 2112;
        int v44 = a1;
        _os_log_impl( &dword_183E58000,  v30,  OS_LOG_TYPE_DEFAULT,  "Updating database with %@ %@ %@ for %@: did not actually need an update, and it was not forced, so skipping",  buf,  0x2Au);
      }

      objc_autoreleasePoolPop(v14);
      _LSLogStepFinished( 11LL,  1LL,  a1,  @"Updated bundle record%@",  v31,  v32,  v33,  v34,  (uint64_t)@" (skipped)");
      return 0LL;
    }

    -[LSBundleRecordUpdater parseSINFDictionary:](v16, "parseSINFDictionary:", a2);
    -[LSBundleRecordUpdater parseiTunesMetadata:](v16, "parseiTunesMetadata:", a3);
    -[LSBundleRecordUpdater parsePlaceholderMetadata:](v16, "parsePlaceholderMetadata:", a4);
    id v36 = 0LL;
    BOOL v17 = -[LSBundleRecordUpdater updateBundleRecord:](v16, "updateBundleRecord:", &v36);
    id v18 = v36;

    objc_autoreleasePoolPop(v14);
    if (v17)
    {
      _LSArmSaveTimer(1);
      _LSLogStepFinished(11LL, 1LL, a1, @"Updated bundle record%@", v19, v20, v21, v22, (uint64_t)&stru_189D7B4C8);

      return 0LL;
    }
  }

  else
  {
    _LSDefaultLog();
    LSContext v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      _LSServer_UpdateDatabaseWithInfo_cold_2();
    }

    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10814LL, (uint64_t)"_LSServer_UpdateDatabaseWithInfo", 6334LL, 0LL);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    objc_autoreleasePoolPop(v14);
  }

  _LSDefaultLog();
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    _LSServer_UpdateDatabaseWithInfo_cold_1((uint64_t)a1);
  }

  _LSLogStepFinished(11LL, 0LL, a1, @"Updated bundle record%@", v25, v26, v27, v28, (uint64_t)&stru_189D7B4C8);
  uint64_t v29 = _LSGetOSStatusFromNSError(v18);

  return v29;
}

void _LSLogStepAsync( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  if (a4)
  {
    uint64_t v13 = (objc_class *)NSString;
    id v14 = a4;
    a4 = (void *)[[v13 alloc] initWithFormat:v14 arguments:&a9];
  }

  [(Class)getAITransactionLogClass[0]() logStep:a1 byParty:5 phase:3 success:a2 forBundleID:v12 description:a4];
}

void sub_183EA6E70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183EA7234( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183EA7DC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_183EA836C(_Unwind_Exception *a1)
{
}

void sub_183EA83DC(_Unwind_Exception *a1)
{
}

void sub_183EA8448(_Unwind_Exception *a1)
{
}

void sub_183EA84A8(_Unwind_Exception *a1)
{
}

void dispatchAsyncToCallbackQueueWithTransaction(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (void *)os_transaction_create();
  +[LSApplicationWorkspace callbackQueue](&OBJC_CLASS___LSApplicationWorkspace, "callbackQueue");
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = __dispatchAsyncToCallbackQueueWithTransaction_block_invoke;
  v7[3] = &unk_189D73D90;
  id v8 = v3;
  id v9 = v2;
  id v5 = v3;
  id v6 = v2;
  dispatch_async(v4, v7);
}

id filterProxiesForHelperPlaceholders(void *a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x189603FA8]);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0LL; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        objc_msgSend(v8, "correspondingApplicationRecord", (void)v12);
        id v9 = (void *)objc_claimAutoreleasedReturnValue();
        int v10 = [v9 isWebAppPlaceholder];

        if (v10) {
          [v2 addObject:v8];
        }
      }

      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v5);
  }

  return v2;
}

LABEL_24:
        ++v12;
      }

      while (v10 != v12);
      uint64_t v34 = [v8 countByEnumeratingWithState:&v41 objects:v47 count:16];
      int v10 = v34;
    }

    while (v34);
  }

  [*(id *)(v39 + 40) messageObserversWithSelector:sel_applicationsDidInstall_ andApps:v40];
  uint64_t v35 = dispatch_time(0LL, 2000000000LL);
  if (_LSLoggingQueue_onceToken != -1) {
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_884);
  }
  dispatch_after(v35, (dispatch_queue_t)_LSLoggingQueue_logQueue, &__block_literal_global_891);
}

  if (a7 && !v25) {
    *a7 = v12;
  }

  return v25;
}

  [v19 pathExtension];
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v52 = v26;
  if (v26 && (objc_msgSend(v26, "isEqualToString:", @"zip", v26) & 1) != 0)
  {
    [v19 stringByDeletingPathExtension];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    [v27 pathExtension];
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = [v28 length] == 0;

    if (!v29)
    {
      char v30 = v27;

      uint64_t v19 = v30;
      +[LSDocumentProxy documentProxyForName:type:MIMEType:isContentManaged:sourceAuditToken:]( &OBJC_CLASS___LSDocumentProxy,  "documentProxyForName:type:MIMEType:isContentManaged:sourceAuditToken:",  v30,  0LL,  0LL,  v14 != 0,  &buf);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();

      uint64_t v74 = v21;
      uint64_t v53 = v31;
      [v31 applicationsAvailableForOpeningWithStyle:2 limit:-1 XPCConnection:v15 error:&v74];
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v33 = v74;

      uint64_t v21 = v33;
      __int128 v54 = v32;
      if (v22 || !v32)
      {
        if (!v32) {
          goto LABEL_38;
        }
      }

      else if ([v32 count])
      {
        [v32 objectAtIndex:0];
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue();
        [v34 bundleIdentifier];
        uint64_t v55 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v22 = v34;
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      if ([v54 containsObject:v22])
      {
        uint64_t v25 = 1;
LABEL_39:
        uint64_t v27 = v19;
        goto LABEL_40;
      }

    id v16 = 0LL;
    uint64_t v17 = 0LL;
LABEL_25:
    id v18 = 0LL;
    goto LABEL_26;
  }

  if (!a6) {
    goto LABEL_24;
  }
  id v16 = 0LL;
  uint64_t v17 = 0LL;
  id v18 = 0LL;
  uint64_t v19 = @"No plugin data pointer";
LABEL_14:
  *a6 = v19;
LABEL_26:

  return v16;
}

        ++v17;
      }

      while (v15 != v17);
      __int128 v15 = [v14 countByEnumeratingWithState:&v30 objects:v34 count:16];
    }

    while (v15);
  }

  objc_autoreleasePoolPop(context);
}

  if (!CFBooleanGetValue(v7))
  {
    id v0 = (const __CFBoolean *)_CSDeviceSupportsAirDrop_supportsAirDrop;
    if (_CSDeviceSupportsAirDrop_supportsAirDrop) {
      return CFBooleanGetValue(v0);
    }
    goto LABEL_26;
  }

  _CSDeviceSupportsAirDrop_supportsAirDrop = *MEMORY[0x189604DE8];
  id v0 = (const __CFBoolean *)_CSDeviceSupportsAirDrop_supportsAirDrop;
  if (!_CSDeviceSupportsAirDrop_supportsAirDrop)
  {
LABEL_26:
    id v0 = (const __CFBoolean *)*MEMORY[0x189604DE0];
    _CSDeviceSupportsAirDrop_supportsAirDrop = *MEMORY[0x189604DE0];
  }

  return CFBooleanGetValue(v0);
}

void _LSServer_ExecuteSyncWithQuiescedInstallationActivity(void *a1)
{
  id v1 = a1;
  RegisterInstallResultsLocuint64_t k = (os_unfair_lock_s *)_LSDatabaseGetRegisterInstallResultsLock();
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  uint64_t v6 = ___LSServer_ExecuteSyncWithQuiescedInstallationActivity_block_invoke;
  id v7 = &unk_189D73B48;
  id v3 = v1;
  id v8 = v3;
  uint64_t v4 = v5;
  os_unfair_lock_lock(RegisterInstallResultsLock);
  v6((uint64_t)v4);
  os_unfair_lock_unlock(RegisterInstallResultsLock);
}

void sub_183EAB0C0(void *a1)
{
}

void sub_183EAB0D4(_Unwind_Exception *a1)
{
}

void sub_183EAB5DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

BOOL _LSServer_PerformExternalRebuildRegistration(void *a1, void *a2)
{
  v12[1] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  +[LSDatabaseRebuildContext currentRebuildContextIfExists]();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    _LSInstallLog();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      _LSServer_PerformExternalRebuildRegistration_cold_1();
    }

    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  94LL,  (uint64_t)"_LSServer_PerformExternalRebuildRegistration",  5514LL,  0LL);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!a2) {
      goto LABEL_9;
    }
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[LSDatabaseRebuildContext registerItems:]((uint64_t)v4, v3);
    uint64_t v5 = 0LL;
    if (!a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  _LSInstallLog();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    _LSServer_PerformExternalRebuildRegistration_cold_2((uint64_t)v3, v8);
  }

  id v9 = (void *)*MEMORY[0x189607670];
  uint64_t v11 = *MEMORY[0x189607490];
  v12[0] = @"bad registration input";
  [MEMORY[0x189603F68] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl(v9, -50LL, (uint64_t)"_LSServer_PerformExternalRebuildRegistration", 5510LL, v10);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2) {
    goto LABEL_8;
  }
LABEL_9:

  return v5 == 0LL;
}

void _LSServer_NoteMigratorRunningInMigration()
{
  uint64_t v0 = +[LSDatabaseRebuildContext currentRebuildContextIfExists]();
  id v1 = (void *)v0;
  if (v0)
  {
    -[LSRebuildStatisticsGatherer setMigratorRunning:](*(void *)(v0 + 8), 1);
  }

  else
  {
    _LSInstallLog();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _LSServer_NoteMigratorRunningInMigration_cold_1();
    }
  }
}

uint64_t _LSServer_LSEnumerateAndRegisterAllBundles(void *a1, __int16 a2)
{
  id v3 = a1;
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  char v19 = 0;
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = [v3 objectForKey:@"UserRequestedAppDBRebuild"];
  uint64_t v6 = (void *)v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v6 = 0LL;
  }

  char v8 = [v6 BOOLValue];

  id v9 = objc_alloc_init(&OBJC_CLASS___LSRebuildStatisticsGatherer);
  -[LSRebuildStatisticsGatherer setIsUserRequested:]((uint64_t)v9, v8);
  -[LSRebuildStatisticsGatherer setRebuildReasonFlags:]((uint64_t)v9, a2);
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  void v13[2] = ___LSServer_LSEnumerateAndRegisterAllBundles_block_invoke;
  v13[3] = &unk_189D739E0;
  int v10 = v9;
  __int128 v14 = v10;
  __int128 v15 = &v16;
  -[LSRebuildStatisticsGatherer performRebuild:]((uint64_t)v10, v13);
  -[LSRebuildStatisticsGatherer submitAnalytics]((uint64_t)v10);
  uint64_t v11 = *((unsigned __int8 *)v17 + 24);

  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_183EAB9AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EABD84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_183EAC1B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183EAC29C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t _LSServer_RebuildApplicationDatabases(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  v62[1] = *MEMORY[0x1895F89C0];
  uint64_t v7 = MEMORY[0x186E2AFD4]();
  char v8 = (void *)MEMORY[0x186E2A59C](v7);
  _LSLogStepStart(9LL, 0LL, 0LL, @"Force rebuilding LaunchServices database", v9, v10, v11, v12, v39);
  uint64_t v57 = 0LL;
  __int128 v58 = &v57;
  uint64_t v59 = 0x2020000000LL;
  char v60 = 0;
  v55[0] = 0LL;
  v55[1] = v55;
  v55[2] = 0x3032000000LL;
  v55[3] = __Block_byref_object_copy__3;
  v55[4] = __Block_byref_object_dispose__3;
  id v56 = 0LL;
  id v13 = objc_alloc_init(MEMORY[0x189603FC8]);
  _LSServer_DatabaseExecutionContext();
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = MEMORY[0x1895F87A8];
  v49[0] = MEMORY[0x1895F87A8];
  v49[1] = 3221225472LL;
  v49[2] = ___LSServer_RebuildApplicationDatabases_block_invoke;
  v49[3] = &unk_189D73A30;
  char v53 = a4;
  int v51 = v55;
  uint64_t v52 = &v57;
  id v16 = v13;
  id v50 = v16;
  char v54 = a5;
  -[LSDBExecutionContext syncWrite:]((uint64_t)v14, v49);

  if (*((_BYTE *)v58 + 24))
  {
    [MEMORY[0x189603FA8] arrayWithCapacity:0];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189603FA8] arrayWithCapacity:0];
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189603FA8] arrayWithCapacity:0];
    LSContext v23 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189603FA8] arrayWithCapacity:0];
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v61 = @"UserRequestedAppDBRebuild";
    v62[0] = MEMORY[0x189604A88];
    [MEMORY[0x189603F68] dictionaryWithObjects:v62 forKeys:&v61 count:1];
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
    int v26 = _LSServer_LSEnumerateAndRegisterAllBundles(v25, 0);
    char v27 = v26;
    _LSLogStepFinished( 9LL,  v26 != 0,  0LL,  @"Finished rebuilding LaunchServices database",  v28,  v29,  v30,  v31,  v40);
    _LSServer_DatabaseExecutionContext();
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    v41[0] = v15;
    v41[1] = 3221225472LL;
    void v41[2] = ___LSServer_RebuildApplicationDatabases_block_invoke_3;
    v41[3] = &unk_189D73A80;
    __int128 v47 = v55;
    char v48 = v27;
    id v42 = v16;
    id v33 = v21;
    id v43 = v33;
    id v34 = v23;
    id v44 = v34;
    id v35 = v22;
    id v45 = v35;
    id v36 = v24;
    id v46 = v36;
    -[LSDBExecutionContext syncWrite:]((uint64_t)v32, v41);
  }

  else
  {
    _LSLogStepFinished(9LL, 0LL, 0LL, @"Skipping rebuild", v17, v18, v19, v20, v40);
  }

  _LSDatabaseGetSeedingGroup();
  uint64_t v37 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v37);

  _Block_object_dispose(v55, 8);
  _Block_object_dispose(&v57, 8);
  objc_autoreleasePoolPop(v8);
  MEMORY[0x186E2AFE0]();
  return 1LL;
}

void sub_183EAC9BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void enumeratePlaceholderAndInstalledApplicationRecords(void *a1)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  char v20 = 0;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  +[LSApplicationRecord enumeratorWithOptions:](&OBJC_CLASS___LSApplicationRecord, "enumeratorWithOptions:", 64LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v17 != v5) {
        objc_enumerationMutation(v2);
      }
      v1[2](v1, *(void *)(*((void *)&v16 + 1) + 8 * v6), &v20);
      if (v20) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  if (!v20)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    +[LSApplicationRecord enumeratorWithOptions:](&OBJC_CLASS___LSApplicationRecord, "enumeratorWithOptions:", 0LL, 0LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v21 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
LABEL_12:
      uint64_t v11 = 0LL;
      while (1)
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        v1[2](v1, *(void *)(*((void *)&v12 + 1) + 8 * v11), &v20);
        if (v20) {
          break;
        }
        if (v9 == ++v11)
        {
          uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v21 count:16];
          if (v9) {
            goto LABEL_12;
          }
          break;
        }
      }
    }
  }
}

id allAppexRecords()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  [v0 allObjects];
  id v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void _LSServer_SyncWithMobileInstallation(void *a1)
{
  id v1 = a1;
  _LSDatabaseGetMobileInstallSyncupGroup();
  id v2 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v2);

  _LSServer_DatabaseExecutionContext();
  uint64_t v3 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext assertNotActiveForThisThread](v3);

  do
    signed __int8 v4 = __ldaxr((unsigned __int8 *)&sMISyncFlag);
  while (__stlxr(v4 | 0x80, (unsigned __int8 *)&sMISyncFlag));
  if ((v4 & 0x80000000) == 0)
  {
    _LSInstallLog();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_DEFAULT,  "Syncing with MobileInstallation once in-flight installation activity is quiesced",  buf,  2u);
    }

    MEMORY[0x186E2AFD4]();
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 3221225472LL;
    v7[2] = ___LSServer_SyncWithMobileInstallation_block_invoke;
    v7[3] = &unk_189D73B48;
    id v8 = v1;
    _LSServer_ExecuteSyncWithQuiescedInstallationActivity(v7);
  }

  _LSDatabaseGetMobileInstallSyncupGroup();
  uint64_t v6 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v6);
}

void sub_183EAD9E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_183EADFB8(_Unwind_Exception *a1)
{
}

uint64_t __Block_byref_object_copy__789(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x186E2A7B8](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__790(uint64_t a1)
{
}

void sub_183EAE1B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

id _getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged(LSContext *a1, void *a2, void *a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v25 = 0LL;
  _LSDefaultLog();
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 138412546;
    id v27 = v7;
    __int16 v28 = 2112;
    id v29 = v8;
    _os_log_impl(&dword_183E58000, v10, OS_LOG_TYPE_DEFAULT, "Checking if %@ needs to be registered at %@", buf, 0x16u);
  }

  if (FSNodeCreateWithURL((uint64_t)v8, 0LL, &v25))
  {
    _LSDefaultLog();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      _getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_cold_1();
    }

    __int128 v12 = 0LL;
  }

  else
  {
    uint64_t v23 = 0LL;
    int v13 = _LSBundleFindWithNode(a1, v25, &v24, &v23);
    if (v13 || _LSNodeHasChanged(v25, (uint64_t)a1->db, v24, v23, 0LL))
    {
      _LSDefaultLog();
      __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v15 = @"missing";
        *(_DWORD *)stat buf = 138412802;
        id v27 = v8;
        __int16 v28 = 2112;
        if (!v13) {
          __int128 v15 = @"stale";
        }
        id v29 = v7;
        __int16 v30 = 2112;
        uint64_t v31 = v15;
        _os_log_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_DEFAULT,  "Registering %@ (%@) because its record is %@",  buf,  0x20u);
      }

      v19[0] = MEMORY[0x1895F87A8];
      v19[1] = 3221225472LL;
      _OWORD v19[2] = ___getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_block_invoke;
      v19[3] = &unk_189D73BE0;
      char v20 = (os_log_s *)v8;
      id v21 = v9;
      id v22 = v7;
      __int128 v12 = (void *)MEMORY[0x186E2A7B8](v19);

      __int128 v16 = v20;
    }

    else
    {
      _LSDefaultLog();
      __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 138412290;
        id v27 = v8;
        _os_log_impl( &dword_183E58000,  v16,  OS_LOG_TYPE_DEFAULT,  "Skipping %@ because its record is up-to-date",  buf,  0xCu);
      }

      __int128 v12 = 0LL;
    }
  }

  __int128 v17 = (void *)MEMORY[0x186E2A7B8](v12);

  return v17;
}

LABEL_16:
        _LSDefaultLog();
        char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = @"missing";
          *(_DWORD *)stat buf = 138412802;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&_BYTE buf[12] = 2112;
          if (v17) {
            id v21 = @"stale";
          }
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2112;
          uint64_t v31 = v21;
          _os_log_impl( &dword_183E58000,  v20,  OS_LOG_TYPE_DEFAULT,  "Registering %@ (%@) because its record is %@",  buf,  0x20u);
        }

        *(void *)stat buf = MEMORY[0x1895F87A8];
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke;
        uint64_t v31 = (const __CFString *)&unk_189D73BE0;
        uint64_t v32 = v10;
        id v33 = v9;
        id v34 = v11;
        id v22 = (void *)MEMORY[0x186E2A7B8](buf);

        goto LABEL_21;
      }
    }

    else
    {
      _LSDefaultLog();
      __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        ___LSServer_SyncWithMobileInstallation_block_invoke_3_cold_1();
      }
    }

    __int128 v17 = 0;
    __int128 v16 = 0LL;
    goto LABEL_16;
  }

    if (v12)
    {

      id v25 = 0LL;
      goto LABEL_24;
    }
  }

  else
  {
  }

  if ([v25 count])
  {
    if ([v25 count] > a5) {
      objc_msgSend(v25, "removeObjectsInRange:", a5, objc_msgSend(v25, "count") - a5);
    }
    __int128 v12 = 0LL;
  }

  else
  {
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10814LL,  (uint64_t)"+[LSAppLink(Private) _appLinksWithState:context:limit:URLComponents:error:]",  985LL,  0LL);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

        return (char)a4;
      case 5LL:
      case 6LL:
        if (!a4) {
          return (char)a4;
        }
        __int16 v28 = *MEMORY[0x189607490];
        NSStringFromSelector(a3);
        id v8 = (void *)objc_claimAutoreleasedReturnValue();
        v29[0] = v8;
        [MEMORY[0x189603F68] dictionaryWithObjects:v29 forKeys:&v28 count:1];
        id v9 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"-[FSMimicPopulator populateSimpleSelector:error:]",  487LL,  v9);
        *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_7:
        LOBYTE(a4) = 0;
        break;
      default:
        goto LABEL_7;
    }
  }

  return (char)a4;
}

    id v8 = 0LL;
  }

    if ((a7 & 1) != 0)
    {
      uint64_t v39 = v23;
      __int16 v28 = &v39;
      id v29 = _LSDisplayMachineReadableData(v36, (uint64_t)a1, v12, v16, a7, (uint64_t)&v39);
    }

    else
    {
      uint64_t v38 = v23;
      __int16 v28 = &v38;
      id v29 = _LSDisplayHumanReadableData((uint64_t *)v36, a1, v12, theArray, v16, a7, &v38);
    }

    id v22 = v29;
    __int16 v30 = *v28;

    uint64_t v23 = v30;
    _LSContextDestroy(v36);
LABEL_20:

    if ((a7 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }

  char v20 = fopen(a2, "rb");
  id v21 = v20;
  if (v20)
  {
    v42[0] = 0LL;
    id v22 = _LSDisplayHumanReadableCopyOfMachineReadableData( (uint64_t)v20,  (uint64_t)a1,  (uint64_t)v12,  (uint64_t)theArray,  (uint64_t)v16,  a7,  v42);
    uint64_t v23 = v42[0];
    fclose(v21);
    if ((a7 & 4) == 0) {
      goto LABEL_25;
    }
  }

  else
  {
    id v34 = __error();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], *v34, (uint64_t)"_LSDisplayData", 2567LL, 0LL);
    uint64_t v23 = (id)objc_claimAutoreleasedReturnValue();
    id v22 = 0LL;
    if ((a7 & 4) == 0) {
      goto LABEL_25;
    }
  }

  [v19 removeObjectForKey:@"_LSAppLinkOpenStateLaunchOptionKey"];
  if (v14 || v15 || v16)
  {
    if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
    {
      FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardService s.framework/FrontBoardServices",  2);
      if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
      {
LABEL_41:
        FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardServi ces.framework/FrontBoardServices",  2);
        goto LABEL_42;
      }
    }

    if (v14 && getFBSOpenApplicationOptionKeyActions())
    {
      v51[0] = v14;
      [MEMORY[0x189603F18] arrayWithObjects:v51 count:1];
      id v25 = (void *)objc_claimAutoreleasedReturnValue();
      [v19 setObject:v25 forKeyedSubscript:getFBSOpenApplicationOptionKeyActions()];
    }

    if (v15 && getFBSOpenApplicationOptionKeyAppLink4LS()) {
      [v19 setObject:v15 forKeyedSubscript:getFBSOpenApplicationOptionKeyAppLink4LS()];
    }
    if (v16)
    {
      int v26 = (id)v16;
      [v26 browserState];
      id v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (v27)
      {
        __int16 v28 = getFBSOpenApplicationOptionKeyBrowserAppLinkState4LS() == 0;

        if (!v28)
        {
          [v26 browserState];
          id v29 = (void *)objc_claimAutoreleasedReturnValue();
          [v19 setObject:v29 forKeyedSubscript:getFBSOpenApplicationOptionKeyBrowserAppLinkState4LS()];
        }
      }

      [v26 openConfiguration];
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue();
      [v30 targetConnectionEndpoint];
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();

      if (v31)
      {
        [v19 objectForKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
        id v33 = v32 == 0LL;

        if (v33) {
          [v19 setObject:v31 forKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
        }
      }
    }

    id v34 = a7 ^ 1;
    if (!v15) {
      id v34 = 1;
    }
    if ((v34 & 1) == 0 && getFBSOpenApplicationOptionKeyPayloadIsValid4LS()) {
      [v19 setObject:MEMORY[0x189604A88] forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadIsValid4LS()];
    }
  }

    int v13 = 0LL;
    goto LABEL_19;
  }

  if (v12)
  {
    if (a5)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v12, (uint64_t)"_LSRegisterBundleNode", 2534LL, 0LL);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:
      __int128 v16 = v18;
LABEL_18:
      int v13 = 0LL;
      *a5 = v16;
      goto LABEL_19;
    }

    goto LABEL_16;
  }

  int v13 = 1LL;
LABEL_19:
  if (v23 && v25) {
    _LSContextDestroy(v23);
  }
  __int128 v19 = v24;
  uint64_t v23 = 0LL;
  unsigned int v24 = 0LL;

  id v25 = 0;
  char v20 = v26;
  int v26 = 0LL;

  return v13;
}

void sub_183EAE874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183EAED00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
  _Unwind_Resume(a1);
}

void sub_183EAEE30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void _LSServer_NoteTerminationRequestForMISync()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  while (1)
  {
    unsigned int v0 = __ldaxr((unsigned int *)&sMISyncFlag);
    if (v0 != 128) {
      break;
    }
    if (!__stlxr(0x80u, (unsigned int *)&sMISyncFlag))
    {
      int v1 = 1;
      goto LABEL_6;
    }
  }

  int v1 = 0;
  __clrex();
LABEL_6:
  _LSDefaultLog();
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = v2;
  if (v1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      _LSServer_NoteTerminationRequestForMISync_cold_1();
    }

    _LSDatabaseSetSyncInterrupted();
  }

  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = sMISyncFlag;
      _os_log_impl(&dword_183E58000, v3, OS_LOG_TYPE_DEFAULT, "MI sync was not running, %d.", (uint8_t *)v4, 8u);
    }
  }

id initMobileInstallationCopyFrameworkInfoForLaunchServices(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    id v7 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v7;
  }

  softLinkMobileInstallationCopyFrameworkInfoForLaunchServices = (uint64_t (*)())dlsym( v7,  "MobileInstallationCopyFrame workInfoForLaunchServices");
  ((void (*)(id, id, uint64_t))softLinkMobileInstallationCopyFrameworkInfoForLaunchServices)(v5, v6, a3);
  id v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void ___registerExtensionPointsFromMIFrameworkDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  [NSString stringWithFormat:@"LaunchServices: registering extension point %@"];
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  if (_LSLoggingQueue_onceToken != -1) {
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_884);
  }
  id v8 = (dispatch_queue_s *)_LSLoggingQueue_logQueue;
  *(void *)blocuint64_t k = MEMORY[0x1895F87A8];
  *(void *)&block[8] = 3221225472LL;
  *(void *)&block[16] = ___LSSetCrashMessage_block_invoke;
  *(void *)&__int128 v24 = &unk_189D72BF0;
  *((void *)&v24 + 1) = v7;
  id v9 = v7;
  dispatch_sync(v8, block);

  _LSLogStepStart(4LL, 0LL, v5, @"registering extension point", v10, v11, v12, v13, (uint64_t)v5);
  uint64_t active_platform = dyld_get_active_platform();
  _LSExtensionsLog();
  __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    *(_DWORD *)blocuint64_t k = 136316162;
    *(void *)&void block[4] = "void _registerExtensionPointsFromMIFrameworkDictionary(NSDictionary<NSString *,id> *__strong)_block_invoke";
    *(_WORD *)&block[12] = 2112;
    *(void *)&block[14] = v5;
    *(_WORD *)&block[22] = 1024;
    LODWORD(v24) = active_platform;
    WORD2(v24) = 2112;
    *(void *)((char *)&v24 + 6) = v21;
    HIWORD(v24) = 2112;
    id v25 = v6;
    _os_log_debug_impl( &dword_183E58000,  v15,  OS_LOG_TYPE_DEBUG,  "%s Registering extension point with identifier '%@' platform: %d url '%@' SDK Dictionary: %@",  block,  0x30u);
  }

  BOOL v16 = _LSRegisterExtensionPoint(0LL, 0LL, v5, active_platform, v6, *(void **)(a1 + 32)) == 0;
  _LSLogStepFinished(4LL, v16, v5, @"registered extension point", v17, v18, v19, v20, v22);
}

Class initAITransactionLog()
{
  if (!MobileInstallationLibrary_frameworkLibrary) {
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/MobileInstallation.framewo rk/MobileInstallation",  2);
  }
  Class result = objc_getClass("AITransactionLog");
  classAITransactionLog = (uint64_t)result;
  getAITransactionLogClass[0] = (uint64_t (*)())AITransactionLogFunction;
  return result;
}

id AITransactionLogFunction()
{
  return (id)classAITransactionLog;
}

void __getShimInvokeQueue_block_invoke()
{
  id v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.LaunchServices.InstallationShimInvoke", v2);
  int v1 = (void *)getShimInvokeQueue_queue;
  getShimInvokeQueue_queue = (uint64_t)v0;
}

Class initMIInstallOptions()
{
  if (!MobileInstallationLibrary_frameworkLibrary) {
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/MobileInstallation.framewo rk/MobileInstallation",  2);
  }
  Class result = objc_getClass("MIInstallOptions");
  classMIInstallOptions = (uint64_t)result;
  getMIInstallOptionsClass = (uint64_t (*)())MIInstallOptionsFunction;
  return result;
}

id MIInstallOptionsFunction()
{
  return (id)classMIInstallOptions;
}

uint64_t initMobileInstallationInstallForInstallCoordinationWithError( void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v15 = a1;
  id v16 = a3;
  id v17 = a4;
  id v18 = a8;
  uint64_t v19 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v19 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v19;
  }

  softLinkMobileInstallationInstallForInstallCoordinationWithError = (uint64_t (*)())dlsym( v19,  "MobileInstallationInsta llForInstallCoordinationWithError");
  uint64_t v20 = ((uint64_t (*)(id, uint64_t, id, id, uint64_t, uint64_t, uint64_t, id))softLinkMobileInstallationInstallForInstallCoordinationWithError)( v15,  a2,  v16,  v17,  a5,  a6,  a7,  v18);

  return v20;
}

id initMobileInstallationUninstallForInstallCoordinationWithError( void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a5;
  uint64_t v13 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v13 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v13;
  }

  softLinkMobileInstallationUninstallForInstallCoordinationWithError = (uint64_t (*)())dlsym( v13,  "MobileInstallationUni nstallForInstallCoord inationWithError");
  ((void (*)(id, id, id, uint64_t, id))softLinkMobileInstallationUninstallForInstallCoordinationWithError)( v9,  v10,  v11,  a4,  v12);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void LSApplicationStateChangedCallback(void *a1, uint64_t a2, void *a3)
{
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    LSApplicationStateChangedCallback_cold_1();
  }

  [a1 remoteObserver];
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  id v7 = a3;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  v10[2] = __LSApplicationStateChangedCallback_block_invoke;
  v10[3] = &unk_189D72430;
  id v11 = v7;
  id v12 = v6;
  id v8 = v6;
  id v9 = v7;
  dispatchAsyncToCallbackQueueWithTransaction( (uint64_t)"com.apple.launchservices.LSApplicationStateChangedCallback",  v10);
}

void __LSApplicationWorkspaceObserverCallback_block_invoke(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  _LSContextInvalidate();
  int v2 = [*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.networkusagechanged"];
  uint64_t v3 = *(void **)(a1 + 40);
  if (v2)
  {
    [v3 objectForKeyedSubscript:@"usingNetwork"];
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "networkUsageChanged:", objc_msgSend(v14, "BOOLValue"));

    return;
  }

  [v3 objectForKeyedSubscript:@"LSApplicationProxiesList"];
  signed __int8 v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ([*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.cancel"])
  {
    id v5 = &selRef_applicationInstallsDidCancel_;
LABEL_11:
    id v6 = *v5;
    if (*v5 && [v4 count] && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id v7 = objc_alloc_init(MEMORY[0x189603FA8]);
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v8 = v4;
      uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v16;
        do
        {
          uint64_t v12 = 0LL;
          do
          {
            if (*(void *)v16 != v11) {
              objc_enumerationMutation(v8);
            }
            +[LSApplicationProxy applicationProxyForIdentifier:placeholder:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForIdentifier:placeholder:",  *(void *)(*((void *)&v15 + 1) + 8 * v12),  1LL);
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
            [v7 addObject:v13];

            ++v12;
          }

          while (v10 != v12);
          uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }

        while (v10);
      }

      objc_msgSend(*(id *)(a1 + 48), v6, v7);
    }

    goto LABEL_22;
  }

  if ([*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.pause"])
  {
    id v5 = &selRef_applicationInstallsDidPause_;
    goto LABEL_11;
  }

  if ([*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.prioritize"])
  {
    id v5 = &selRef_applicationInstallsDidPrioritize_;
    goto LABEL_11;
  }

  if ([*(id *)(a1 + 32) isEqualToString:@"com.lsinstallprogress.appcontrols.resume"])
  {
    id v5 = &selRef_applicationInstallsDidResume_;
    goto LABEL_11;
  }

void __LSApplicationWorkspacePluginsChangedCallback_block_invoke(id *a1)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  _LSContextInvalidate();
  unint64_t v2 = 0x189603000uLL;
  id v3 = objc_alloc_init(MEMORY[0x189603FA8]);
  if ([a1[4] isEqualToString:@"com.apple.LaunchServices.pluginsregistered"])
  {
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    [a1[5] allKeys];
    signed __int8 v4 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = [v4 countByEnumeratingWithState:&v62 objects:v76 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v63;
      do
      {
        for (uint64_t i = 0LL; i != v6; ++i)
        {
          if (*(void *)v63 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = (void *)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDString:*(void *)(*((void *)&v62 + 1) + 8 * i)];
          [v3 addObject:v9];
        }

        uint64_t v6 = [v4 countByEnumeratingWithState:&v62 objects:v76 count:16];
      }

      while (v6);
    }

    id v61 = 0LL;
    id v10 = v3;
    if (_LSCurrentProcessMayMapDatabase())
    {
      id v74 = 0LL;
      +[LSApplicationExtensionRecord applicationExtensionRecordsForUUIDs:outContainingBundleRecords:error:]( &OBJC_CLASS___LSApplicationExtensionRecord,  "applicationExtensionRecordsForUUIDs:outContainingBundleRecords:error:",  v10,  &v61,  &v74);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
      id v12 = v74;
      uint64_t v13 = v12;
      if (v11)
      {
        int v51 = v12;
        id v52 = v10;
        id v14 = objc_alloc_init(MEMORY[0x189603FA8]);
        __int128 v70 = 0u;
        __int128 v71 = 0u;
        __int128 v72 = 0u;
        __int128 v73 = 0u;
        id v15 = v11;
        uint64_t v16 = [v15 countByEnumeratingWithState:&v70 objects:v79 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v71;
          do
          {
            for (uint64_t j = 0LL; j != v17; ++j)
            {
              if (*(void *)v71 != v18) {
                objc_enumerationMutation(v15);
              }
              uint64_t v20 = *(void **)(*((void *)&v70 + 1) + 8 * j);
              [v20 compatibilityObject];
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
              if (v21)
              {
                [v14 addObject:v21];
              }

              else
              {
                _LSInstallLog();
                uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)stat buf = 138412290;
                  int v78 = v20;
                  _os_log_error_impl( &dword_183E58000,  v22,  OS_LOG_TYPE_ERROR,  "Could not get a proxy for appex record %@; did it go away?",
                    buf,
                    0xCu);
                }
              }
            }

            uint64_t v17 = [v15 countByEnumeratingWithState:&v70 objects:v79 count:16];
          }

          while (v17);
        }

        id v10 = v52;
        unint64_t v2 = 0x189603000LL;
        if (v14)
        {
LABEL_47:

          __int16 v30 = (void *)[v61 mutableCopy];
          id v29 = sel_pluginsDidInstall_;

          if (!sel_pluginsDidInstall_) {
            goto LABEL_51;
          }
          goto LABEL_48;
        }
      }

      else
      {
        _LSInstallLog();
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          __LSApplicationWorkspacePluginsChangedCallback_block_invoke_cold_2();
        }
      }
    }

    _LSInstallLog();
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      __LSApplicationWorkspacePluginsChangedCallback_block_invoke_cold_1();
    }

    id v14 = objc_alloc_init(*(Class *)(v2 + 4008));
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    id v33 = v10;
    uint64_t v34 = [v33 countByEnumeratingWithState:&v66 objects:buf count:16];
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v36 = *(void *)v67;
      do
      {
        for (uint64_t k = 0LL; k != v35; ++k)
        {
          if (*(void *)v67 != v36) {
            objc_enumerationMutation(v33);
          }
          +[LSPlugInKitProxy pluginKitProxyForUUID:]( &OBJC_CLASS___LSPlugInKitProxy,  "pluginKitProxyForUUID:",  *(void *)(*((void *)&v66 + 1) + 8 * k));
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue();
          if (v38) {
            [v14 addObject:v38];
          }
        }

        uint64_t v35 = [v33 countByEnumeratingWithState:&v66 objects:buf count:16];
      }

      while (v35);
    }

    goto LABEL_47;
  }

  if (([a1[4] isEqualToString:@"com.apple.LaunchServices.pluginsunregistered"] & 1) == 0
    && ![a1[4] isEqualToString:@"com.apple.LaunchServices.pluginswillberemoved"])
  {
    id v14 = 0LL;
    __int16 v30 = 0LL;
    goto LABEL_51;
  }

  id v23 = objc_alloc_init(MEMORY[0x189603FA8]);
  id v24 = a1[5];
  v58[0] = MEMORY[0x1895F87A8];
  v58[1] = 3221225472LL;
  v58[2] = __LSApplicationWorkspacePluginsChangedCallback_block_invoke_2;
  v58[3] = &unk_189D73C08;
  id v59 = v3;
  id v25 = v23;
  id v60 = v25;
  [v24 enumerateKeysAndObjectsUsingBlock:v58];
  id v26 = a1[4];
  id v14 = v25;
  int v27 = [v26 isEqualToString:@"com.apple.LaunchServices.pluginsunregistered"];
  __int16 v28 = &selRef_pluginsDidUninstall_;
  if (!v27) {
    __int16 v28 = &selRef_pluginsWillUninstall_;
  }
  id v29 = *v28;

  __int16 v30 = 0LL;
  if (v29)
  {
LABEL_48:
    if ([v14 count] && (objc_opt_respondsToSelector() & 1) != 0) {
      objc_msgSend(a1[6], v29, v14);
    }
  }

LABEL_51:
  if ([v30 count])
  {
    do
    {
      uint64_t v39 = MEMORY[0x186E2A59C]();
      [v30 lastObject];
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
      CFMachPortContext context = (void *)v39;
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        [v40 applicationExtensionRecords];
        __int16 v41 = (void *)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        __int16 v41 = 0LL;
      }

      [v40 _resolveAllProperties];
      [v40 detach];
      id v42 = v30;
      [v30 removeLastObject];

      __int128 v56 = 0u;
      __int128 v57 = 0u;
      __int128 v54 = 0u;
      __int128 v55 = 0u;
      id v43 = v41;
      uint64_t v44 = [v43 countByEnumeratingWithState:&v54 objects:v75 count:16];
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = *(void *)v55;
        do
        {
          for (uint64_t m = 0LL; m != v45; ++m)
          {
            if (*(void *)v55 != v46) {
              objc_enumerationMutation(v43);
            }
            char v48 = *(void **)(*((void *)&v54 + 1) + 8 * m);
            [v48 uniqueIdentifier];
            __int128 v49 = (void *)objc_claimAutoreleasedReturnValue();
            int v50 = [v3 containsObject:v49];

            if (v50)
            {
              [v48 _resolveAllProperties];
              [v48 detach];
            }
          }

          uint64_t v45 = [v43 countByEnumeratingWithState:&v54 objects:v75 count:16];
        }

        while (v45);
      }

      objc_autoreleasePoolPop(context);
      __int16 v30 = v42;
    }

    while ([v42 count]);
  }
}

  id v61 = (void *)MEMORY[0x186E2A59C]();
  [(id)__LSDefaultsGetSharedInstance() systemContainerURL];
  __int128 v62 = (void *)objc_claimAutoreleasedReturnValue();
  setBackupAttributesForURL(v62);

  if (([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
  {
    [(id)__LSDefaultsGetSharedInstance() userContainerURL];
    __int128 v63 = (void *)objc_claimAutoreleasedReturnValue();
    setBackupAttributesForURL(v63);
  }

  objc_autoreleasePoolPop(v61);
  objc_autoreleasePoolPop((void *)MEMORY[0x186E2A59C]());
  __int128 v64 = (void *)MEMORY[0x186E2A59C]();
  *(void *)&uint64_t v101 = 0LL;
  *((void *)&v101 + 1) = &v101;
  *(void *)&v102 = 0x2020000000LL;
  BYTE8(v102) = 0;
  SyncInterrupted = _LSDatabaseGetSyncInterrupted();
  _LSDatabaseClearSyncInterrupted();
  if (SyncInterrupted)
  {
    _LSDefaultLog();
    __int128 v66 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
      _LSServerMain_cold_2(v66);
    }

    [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
    __int128 v67 = (void *)objc_claimAutoreleasedReturnValue();
    _LSDatabaseDeleteRecoveryFile(v67);
  }

  +[LSDBExecutionContext sharedServerInstance]();
  __int128 v68 = (void *)objc_claimAutoreleasedReturnValue();
  _LSServer_SetDatabaseExecutionContext(v68);

  _LSServer_DatabaseExecutionContext();
  __int128 v69 = (void *)objc_claimAutoreleasedReturnValue();
  *(void *)stat buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&uint8_t buf[16] = __seedDatabase_block_invoke;
  uint64_t v99 = (unint64_t)&unk_189D730E8;
  uint64_t v100 = &v101;
  -[LSDBExecutionContext beginServerDBBootstrap:]((uint64_t)v69, buf);

  if (!*(_BYTE *)(*((void *)&v101 + 1) + 24LL) && (SyncInterrupted || _LSDatabaseSentinelGet()))
  {
    _LSServer_GetIOQueue();
    __int128 v70 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
    dispatch_async(v70, &__block_literal_global_30_0);
  }

  _Block_object_dispose(&v101, 8);
  objc_autoreleasePoolPop(v64);
  if (!_LSServerHasDoneFirstBootWork())
  {
    _LSDefaultLog();
    __int128 v71 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_183E58000, v71, OS_LOG_TYPE_DEFAULT, "Reboot detected, performing first boot work.", buf, 2u);
    }

    _LSServer_DatabaseExecutionContext();
    __int128 v72 = (void *)objc_claimAutoreleasedReturnValue();
    -[LSDBExecutionContext syncWrite:]((uint64_t)v72, &__block_literal_global_32);

    LSNoteFirstBootForRestrictions();
    _LSDefaultLog();
    __int128 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_183E58000, v73, OS_LOG_TYPE_DEFAULT, "First boot work complete!", buf, 2u);
    }

    id v74 = sem_open("com.apple.lsd.firstboot", 512, 256LL, 0LL);
    if (v74 == (sem_t *)-1LL)
    {
      _LSDefaultLog();
      __int16 v75 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
        _LSServerMain_cold_1(v75);
      }
    }

    else
    {
      sem_close(v74);
    }
  }

  _LSServer_DatabaseExecutionContext();
  int v76 = (void *)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext syncWrite:]((uint64_t)v76, &__block_literal_global_33_2);

  __int16 v77 = (void *)MEMORY[0x186E2A59C]();
  _LSDServiceStartAllServices();
  +[LSDatabaseBlockingFetchServer sharedInstance](&OBJC_CLASS___LSDatabaseBlockingFetchServer, "sharedInstance");
  int v78 = (void *)objc_claimAutoreleasedReturnValue();
  [v78 startRunningIfNecessary];

  if (([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer] & 1) == 0)
  {
    +[_LSInstallProgressService beginListening](&OBJC_CLASS____LSInstallProgressService, "beginListening");
    +[_LSInstallationService beginListening](&OBJC_CLASS____LSInstallationService, "beginListening");
    int v79 = +[_LSPersonaDatabase sharedInstance]();
    if (ExtensionFoundationLibrary_frameworkLibrary
      || (ExtensionFoundationLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/Frameworks/ExtensionFoundation.framew ork/ExtensionFoundation",  2)) != 0)
    {
      softLink_EXStartService();
    }

    _LSServer_BeginProvidingVisualizationArchives();
  }

  objc_autoreleasePoolPop(v77);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)languagePrefChanged,  @"AppleLanguagePreferencesChangedNotification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  objc_autoreleasePoolPop(context);
  else {
    __int128 v85 = runServerMainRunLoop;
  }
  uint64_t v86 = _LSBundleDisplayNameContextEnumerate(v85, v81, v82, v83, v84);
  ((void (*)(uint64_t))v85)(v86);
  return 0LL;
}

void __LSApplicationWorkspacePluginsChangedCallback_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (objc_class *)MEMORY[0x189607AB8];
  id v7 = a2;
  id v8 = (void *)[[v6 alloc] initWithUUIDString:v7];

  [*(id *)(a1 + 32) addObject:v8];
  id v19 = v5;
  [v19 objectForKeyedSubscript:*MEMORY[0x189604E00]];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 objectForKeyedSubscript:@"NSExtensionIdentifier"];
  id v10 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 objectForKeyedSubscript:@"LSEffectiveIdentifier"];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 objectForKeyedSubscript:*MEMORY[0x189604E18]];
  id v12 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = [v19 objectForKeyedSubscript:@"_LSBundlePath"];
  id v14 = (void *)v13;
  if (v8 && v13)
  {
    BOOL v15 = !v9 || v10 == 0LL;
    if (!v15 && v12 != 0LL)
    {
      uint64_t v17 = (void *)[objc_alloc(MEMORY[0x189604030]) initFileURLWithPath:v13 isDirectory:1];
      +[LSPlugInKitProxy plugInKitProxyForUUID:bundleIdentifier:pluginIdentifier:effectiveIdentifier:version:bundleURL:]( &OBJC_CLASS___LSPlugInKitProxy,  "plugInKitProxyForUUID:bundleIdentifier:pluginIdentifier:effectiveIdentifier:version:bundleURL:",  v8,  v9,  v10,  v11,  v12,  v17);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v18) {
        [*(id *)(a1 + 40) addObject:v18];
      }
    }
  }
}

void __LSApplicationStateChangedCallback_block_invoke(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  _LSContextInvalidate();
  [*(id *)(a1 + 32) allKeys];
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  id v3 = v2;
  if (v2 && [v2 count] && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x189603FA8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
    signed __int8 v4 = (void *)objc_claimAutoreleasedReturnValue();
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v5 = v3;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        uint64_t v9 = 0LL;
        do
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          +[LSApplicationProxy applicationProxyForIdentifier:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForIdentifier:",  *(void *)(*((void *)&v12 + 1) + 8 * v9),  (void)v12);
          id v10 = (void *)objc_claimAutoreleasedReturnValue();
          [v4 addObject:v10];

          ++v9;
        }

        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v18 count:16];
      }

      while (v7);
    }

    _LSDefaultLog();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138412290;
      uint64_t v17 = v4;
      _os_log_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_DEFAULT,  "Preparing to call applicationStateDidChange: with %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) applicationStateDidChange:v4];
  }
}

uint64_t __subscribeToLSAWDistributedNotification_block_invoke(uint64_t a1, int a2)
{
  return (a2 + 1);
}

uint64_t __unsubscribeFromLSAWDistributedNotification_block_invoke(uint64_t a1, int a2)
{
  if (a2) {
    return (a2 - 1);
  }
  _LSDefaultLog();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
    __unsubscribeFromLSAWDistributedNotification_block_invoke_cold_1();
  }

  return 0LL;
}

void __pluginQueryFault_block_invoke()
{
  dispatch_queue_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    __pluginQueryFault_block_invoke_cold_1();
  }
}

void __enumeratePluginsMatchingQuery_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)MEMORY[0x186E2A59C]();
  if (v8)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v7 = v5;
    if (!v7)
    {
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10810LL,  (uint64_t)"enumeratePluginsMatchingQuery_block_invoke",  324LL,  0LL);
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  objc_autoreleasePoolPop(v6);
}

void __mapBundleIdentifiersToUUIDs_block_invoke(uint64_t a1, void *a2)
{
}

void __mapBundleIdentifiersToUUIDs_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v30 = a2;
  id v7 = a3;
  id v8 = a4;
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v9 = v30;
  }
  else {
    uint64_t v9 = v7;
  }
  id v10 = v9;
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v30;
  }
  id v12 = v11;
  __int128 v13 = v12;
  if (v10) {
    BOOL v14 = v12 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v16 = v8;
    uint64_t v17 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v16;
  }

  else
  {
    id v29 = v8;
    [MEMORY[0x189603FC8] dictionary];
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    unint64_t v18 = [v10 count];
    unint64_t v19 = [v13 count];
    if (v18 >= v19) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      for (uint64_t i = 0LL; i != v20; ++i)
      {
        [v10 objectAtIndexedSubscript:i];
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
        [v17 objectForKeyedSubscript:v22];
        id v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v23)
        {
          [MEMORY[0x189603FE0] set];
          id v23 = (void *)objc_claimAutoreleasedReturnValue();
          [v10 objectAtIndexedSubscript:i];
          id v24 = (void *)objc_claimAutoreleasedReturnValue();
          [v17 setObject:v23 forKeyedSubscript:v24];
        }

        [v13 objectAtIndexedSubscript:i];
        id v25 = (void *)objc_claimAutoreleasedReturnValue();
        [v23 addObject:v25];
      }
    }

    uint64_t v26 = [v17 copy];
    uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 8LL);
    __int16 v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = v26;

    id v8 = v29;
  }
}

uint64_t __handleSaveObserverBehavior_block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) operationWithUUID:*(void *)(a1 + 40) didFailToSaveWithError:a2];
}

uint64_t __handleSaveObserverBehavior_block_invoke_2(uint64_t a1, int a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (a2) {
    return objc_msgSend(v5, "operationWithUUIDWasSaved:", v6, a3);
  }
  else {
    return [v5 operationWithUUID:v6 didFailToSaveWithError:a3];
  }
}

void _LSSetCrashReporterMessage(void *a1)
{
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    id v3 = strdup((const char *)[v1 UTF8String]);
    _LSDefaultLog();
    signed __int8 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _LSSetCrashReporterMessage_cold_1();
    }
  }

  else
  {
    id v3 = 0LL;
  }

  uint64_t v5 = _LSSetCrashReporterMessage_messagePtr;
  while (1)
  {
    unint64_t v6 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage_messagePtr);
    if (v6 != v5) {
      break;
    }
    if (!__stxr((unint64_t)v3, (unint64_t *)&_LSSetCrashReporterMessage_messagePtr))
    {
      int v7 = 1;
      goto LABEL_11;
    }
  }

  int v7 = 0;
  __clrex();
LABEL_11:
  if (v7) {
    id v8 = (void *)v5;
  }
  else {
    id v8 = v3;
  }
  free(v8);
  qword_18C49A7B0 = _LSSetCrashReporterMessage_messagePtr;
}

uint64_t initMobileInstallationUpdatePlaceholderMetadata( void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a4;
  uint64_t v11 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v11 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v11;
  }

  softLinkMobileInstallationUpdatePlaceholderMetadata = (uint64_t (*)())dlsym( v11,  "MobileInstallationUpdatePlaceholderMetadata");
  uint64_t v12 = ((uint64_t (*)(id, uint64_t, uint64_t, id, uint64_t))softLinkMobileInstallationUpdatePlaceholderMetadata)( v9,  a2,  a3,  v10,  a5);

  return v12;
}

uint64_t __dispatchAsyncToCallbackQueueWithTransaction_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void __registerSingleMIDict_block_invoke(void **a1)
{
  unint64_t v2 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v2);

  if (a1[4] && ([a1[5] isEqualToString:@"Framework"] & 1) == 0)
  {
    if ([a1[5] isEqualToString:@"PluginKitPlugin"])
    {
      _registerMIPluginDictionary(a1[4], a1[6]);
    }

    else if (([a1[5] isEqualToString:@"CoreServices"] & 1) != 0 {
           || ([a1[5] isEqualToString:@"Internal"] & 1) != 0
    }
           || ([a1[5] isEqualToString:@"User"] & 1) != 0
           || ([a1[5] isEqualToString:@"System"] & 1) != 0
           || ([a1[5] isEqualToString:@"SystemAppPlaceholder"] & 1) != 0
           || [a1[5] isEqualToString:@"VPNPlugin"])
    {
      id v3 = objc_alloc(MEMORY[0x189604030]);
      [a1[4] objectForKey:@"Path"];
      signed __int8 v4 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v5 = (void *)[v3 initFileURLWithPath:v4 isDirectory:1];

      Unique = (const void *)_CFBundleCreateUnique();
      _LSLogStepStart(4LL, 0LL, a1[7], @"registering app bundle", v7, v8, v9, v10, v28);
      BOOL v11 = registerApplicationWithDictionary(a1[4], 0x21u) == 0;
      _LSLogStepFinished(4LL, v11, a1[7], @"registered app bundle", v12, v13, v14, v15, v29);
      if (Unique) {
        CFRelease(Unique);
      }
      [a1[4] objectForKeyedSubscript:@"ParallelPlaceholderPath"];
      id v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
      {
        uint64_t v17 = (void *)[a1[4] mutableCopy];
        uint64_t v18 = MEMORY[0x189604A88];
        [v17 setObject:MEMORY[0x189604A88] forKeyedSubscript:@"IsPlaceholder"];
        [v17 setObject:v16 forKeyedSubscript:@"Path"];
        [v17 setObject:v18 forKeyedSubscript:@"IsParallelPlaceholder"];
        _LSLogStepStart(4LL, 0LL, a1[7], @"registering parallel placeholder", v19, v20, v21, v22, v30);
        BOOL v23 = registerApplicationWithDictionary(v17, 0x21u) == 0;
        _LSLogStepFinished(4LL, v23, a1[7], @"registered parallel placeholder", v24, v25, v26, v27, v31);
      }
    }
  }

  if (_LSLoggingQueue_onceToken != -1) {
    dispatch_once(&_LSLoggingQueue_onceToken, &__block_literal_global_884);
  }
  dispatch_sync((dispatch_queue_t)_LSLoggingQueue_logQueue, &__block_literal_global_883);
  _LSDatabaseGetSeedingGroup();
  uint64_t v32 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v32);
}

uint64_t initMobileInstallationEnumerateAllInstalledItemDictionaries(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void *)MobileInstallationLibrary_frameworkLibrary;
  if (!MobileInstallationLibrary_frameworkLibrary)
  {
    uint64_t v5 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary_frameworkLibrary = (uint64_t)v5;
  }

  softLinkMobileInstallationEnumerateAllInstalledItemDictionaries = (uint64_t (*)())dlsym( v5,  "MobileInstallationEnumer ateAllInstalledItemDictionaries");
  uint64_t v6 = ((uint64_t (*)(id, id))softLinkMobileInstallationEnumerateAllInstalledItemDictionaries)(v3, v4);

  return v6;
}

{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    uint64_t v5 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v5;
  }

  softLinkMobileInstallationEnumerateAllInstalledItemDictionaries = (uint64_t (*)())dlsym( v5,  "MobileInstallationEnumer ateAllInstalledItemDictionaries");
  uint64_t v6 = ((uint64_t (*)(id, id))softLinkMobileInstallationEnumerateAllInstalledItemDictionaries)(v3, v4);

  return v6;
}

void ___getBlockToUpdateBundleRecordFromMIAndNotifyIfChanged_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  Unique = (const void *)_CFBundleCreateUnique();
  int v3 = registerApplicationWithDictionary(*(void **)(a1 + 40), 0x40000000u);
  if (v3)
  {
    int v4 = v3;
    _LSDefaultLog();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)stat buf = 67109634;
      *(_DWORD *)uint64_t v17 = v4;
      *(_WORD *)&v17[4] = 2112;
      *(void *)&v17[6] = v11;
      *(_WORD *)&v17[14] = 2112;
      *(void *)&v17[16] = v12;
      _os_log_error_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_ERROR,  "registerApplicationWithDictionary returned error %d for %@ (%@)",  buf,  0x1Cu);
    }
  }

  +[LSApplicationProxy applicationProxyForBundleURL:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForBundleURL:",  *(void *)(a1 + 32));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v6 isInstalled])
  {
    uint64_t v7 = 7LL;
  }

  else if ([v6 isPlaceholder])
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    _LSProgressLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)stat buf = 138412802;
      *(void *)uint64_t v17 = v6;
      *(_WORD *)&v17[8] = 2112;
      *(void *)&v17[10] = v13;
      *(_WORD *)&v17[18] = 2112;
      *(void *)&v17[20] = v14;
      _os_log_error_impl( &dword_183E58000,  v8,  OS_LOG_TYPE_ERROR,  "Got app proxy %@ for %@ (%@), not sending any notification",  buf,  0x20u);
    }

    uint64_t v7 = 0LL;
  }

  +[_LSInstallProgressService sharedInstance](&OBJC_CLASS____LSInstallProgressService, "sharedInstance");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = v6;
  [MEMORY[0x189603F18] arrayWithObjects:&v15 count:1];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  [v9 sendNotification:v7 forAppProxies:v10 Plugins:0 completion:0];

  if (Unique) {
    CFRelease(Unique);
  }
}

void ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke(uint64_t a1)
{
  v30[1] = *MEMORY[0x1895F89C0];
  unint64_t v2 = (void *)(a1 + 32);
  Unique = (const void *)_CFBundleCreateUnique();
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v4 = a1 + 40;
  _LSLogStepStart(4LL, 0LL, v5, @"registering app extension", v6, v7, v8, v9, v23);
  uint64_t v10 = (void *)*v2;
  uint64_t v11 = *(void *)(v4 + 8);
  uint64_t v29 = *(void **)v4;
  v30[0] = v11;
  [MEMORY[0x189603F68] dictionaryWithObjects:v30 forKeys:&v29 count:1];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  int v13 = _LSRegisterPluginWithInfo(v10, v12);

  if (v13)
  {
    _LSDefaultLog();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = (void *)*v2;
      id v16 = *(void **)v4;
      LODWORD(v23) = 67109634;
      HIDWORD(v23) = v13;
      __int16 v24 = 2112;
      uint64_t v25 = v15;
      __int16 v26 = 2112;
      uint64_t v27 = v16;
      _os_log_error_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_ERROR,  "_LSRegisterPluginWithInfo returned error %d for %@ (%@)",  (uint8_t *)&v23,  0x1Cu);
    }
  }

  else
  {
    +[LSPlugInKitProxy pluginKitProxyForURL:](&OBJC_CLASS___LSPlugInKitProxy, "pluginKitProxyForURL:", *v2);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      +[_LSInstallProgressService sharedInstance](&OBJC_CLASS____LSInstallProgressService, "sharedInstance");
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v28 = v14;
      [MEMORY[0x189603F18] arrayWithObjects:&v28 count:1];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      [v17 sendNotification:@"com.apple.LaunchServices.pluginsregistered" ForPlugins:v18];
    }

    else
    {
      _LSDefaultLog();
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_ERROR)) {
        ___getBlockToUpdatePluginRecordFromMIAndNotifyIfChanged_block_invoke_cold_1();
      }
    }
  }

  _LSLogStepFinished(4LL, v13 == 0, *(void **)v4, @"registered app extension", v19, v20, v21, v22, v23);
  if (Unique) {
    CFRelease(Unique);
  }
}

uint64_t __Block_byref_object_copy__914(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(result + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v2;
  return result;
}

void __Block_byref_object_dispose__915(uint64_t a1)
{
}

void ___uninstallMIBundlesNotInSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 160);
  if (v3 == 13 || v3 == 2)
  {
    id v10 = (id)_CSStringCopyCFString();
    uint64_t v8 = -[_LSEnumeratedBundleInfo initWithBundleID:isPlaceholder:]( objc_alloc(&OBJC_CLASS____LSEnumeratedBundleInfo),  "initWithBundleID:isPlaceholder:",  v10,  (*(void *)(a3 + 164) >> 18) & 1LL);
    if (([*(id *)(a1 + 32) containsObject:v8] & 1) == 0)
    {
      uint64_t v9 = -[_LSAppToUnregister initWithContext:bundleUnit:bundleData:]( objc_alloc(&OBJC_CLASS____LSAppToUnregister),  *(void *)(*(void *)(a1 + 48) + 8LL) + 48LL,  a2,  a3);
      [*(id *)(a1 + 40) addObject:v9];
    }
  }

void OUTLINED_FUNCTION_4_1( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_15_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v1 - 152), 8) = a1;
}

void OUTLINED_FUNCTION_16_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

const char *OUTLINED_FUNCTION_21_0()
{
  return sel_getName(v0);
}

  ;
}

void sub_183EB13D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB1524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB15D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB16B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB1738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB189C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB1960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB1A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB1B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB1C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB1D00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EB1E60(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_183EB2140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB21DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EB232C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB23AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EB2638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB26B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EB2880( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_183EB29C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB2A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB2B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB2C4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EB2DC0(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_183EB2FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB3214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB33D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_32:
        if (v11) {
          (*((void (**)(id, void, id))v11 + 2))(v11, 0LL, v12);
        }
        uint64_t v9 = 0LL;
        goto LABEL_12;
      }

      uint64_t v25 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10814LL,  (uint64_t)"+[LSAppLink(Internal) _openWithAppLink:state:completionHandler:]",  763LL,  0LL);

      uint64_t v12 = (id)v25;
    }

    goto LABEL_32;
  }

  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v30 = *MEMORY[0x189607490];
  uint64_t v31 = @"invalid input parameters";
  [MEMORY[0x189603F68] dictionaryWithObjects:&v31 forKeys:&v30 count:1];
  uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"+[LSAppLink(Internal) _openWithAppLink:state:completionHandler:]",  809LL,  v12);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  (*((void (**)(id, void, void *))v11 + 2))(v11, 0LL, v15);

LABEL_12:
LABEL_13:
}

      ++v7;
      --v6;
      ++v8;
      if (a3 == v7) {
        return;
      }
    }

    directUniCharBuffer = buffer->directUniCharBuffer;
    if (directUniCharBuffer)
    {
      int v13 = directUniCharBuffer[v7 + buffer->rangeToBuffer.location];
    }

    else
    {
      directCStringBuffer = buffer->directCStringBuffer;
      if (directCStringBuffer)
      {
        int v13 = directCStringBuffer[buffer->rangeToBuffer.location + v7];
      }

      else
      {
        if (buffer->bufferedRangeEnd <= v7
          || (CFIndex bufferedRangeStart = buffer->bufferedRangeStart, bufferedRangeStart > v7))
        {
          id v16 = -v10;
          uint64_t v17 = v10 + v6;
          uint64_t v18 = v8 - v10;
          uint64_t v19 = v7 + v16;
          uint64_t v20 = v19 + 64;
          if (v19 + 64 >= length) {
            uint64_t v20 = buffer->rangeToBuffer.length;
          }
          buffer->CFIndex bufferedRangeStart = v19;
          buffer->bufferedRangeEnd = v20;
          if (length >= v18) {
            CFIndex length = v18;
          }
          v23.CFIndex length = length + v17;
          v23.id location = v19 + buffer->rangeToBuffer.location;
          CFStringGetCharacters(buffer->theString, v23, buffer->buffer);
          CFIndex bufferedRangeStart = buffer->bufferedRangeStart;
        }

        int v13 = buffer->buffer[v7 - bufferedRangeStart];
      }
    }

    if (v13 <= 0x7Fu)
    {
      if ((*(_DWORD *)(v9 + 4LL * v13 + 60) & 0x40000) != 0)
      {
        if (v13 == 58 && *(_BYTE *)(a1 + 40)) {
          *(_BYTE *)(*(void *)(a1 + 32) + 32LL) |= 0x10u;
        }
        goto LABEL_32;
      }
    }

    else
    {
      *(_BYTE *)(*(void *)(a1 + 32) + 32LL) |= 8u;
      uint64_t v21 = (NSCharacterSet *)(id)_LSDNCGetBiDiControlCharacters(void)::result;
    }

    goto LABEL_29;
  }

  uint64_t v34 = v24;

  _Block_object_dispose(&v60, 8);
  return v34;
}

    goto LABEL_33;
  }

  if (v8)
  {
LABEL_16:
    uint64_t v9 = (void *)[v1 mutableCopy];
    [v9 objectForKey:@"NSExtension"];
    id v10 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = (void *)[v10 mutableCopy];

    if (v11)
    {
      _LSRegistrationLog();
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v13 = objc_opt_class();
        uint64_t v14 = [v1 objectForKey:*MEMORY[0x189604E00]];
        uint64_t v15 = (__CFString *)v14;
        if (v13 && v14 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          uint64_t v15 = 0LL;
        }

        uint64_t v22 = 138412546;
        uint64_t v23 = v8;
        __int16 v24 = 2112;
        uint64_t v25 = v15;
        _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_INFO,  "Overriding NSExtension->NSExtensionPointIdentifier to %@ for bundleID %@",  (uint8_t *)&v22,  0x16u);
      }
    }

    else
    {
      _LSRegistrationLog();
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = objc_opt_class();
        uint64_t v18 = [v1 objectForKey:*MEMORY[0x189604E00]];
        uint64_t v19 = (__CFString *)v18;
        if (v17 && v18 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          uint64_t v19 = 0LL;
        }

        uint64_t v22 = 138412546;
        uint64_t v23 = v8;
        __int16 v24 = 2112;
        uint64_t v25 = v19;
        _os_log_impl( &dword_183E58000,  v16,  OS_LOG_TYPE_INFO,  "Synthesizing NSExtension->NSExtensionPointIdentifier to %@ for bundleID %@",  (uint8_t *)&v22,  0x16u);
      }

      [MEMORY[0x189603FC8] dictionaryWithCapacity:2];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    }

    [v11 setObject:v8 forKey:@"NSExtensionPointIdentifier"];
    [v9 setObject:v11 forKey:@"NSExtension"];
    uint64_t v20 = [v9 copy];

    uint64_t v1 = (id)v20;
    goto LABEL_32;
  }
}

  uint64_t v17 = a4[2] ^ a2[2];
  if ((v17 & 2) != 0)
  {
    id v16 = (a2[2] & 2) == 0;
    goto LABEL_17;
  }

  if ((v17 & 4) != 0)
  {
    id v16 = (a2[2] & 4) == 0;
LABEL_17:
    if (v16) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = 1;
    }
    goto LABEL_37;
  }

  if (a2[5] == a4[5] && (v17 & 0x2000) == 0) {
    goto LABEL_36;
  }
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)v26);
  uint64_t v19 = (_LSDatabase *)v7;
  v25.db = v19;
  __int16 v24 = 0;
  UltimateDeclaringBundle = _UTTypeGetUltimateDeclaringBundle(v19, (uint64_t)a2, (int *)&v24);
  uint64_t v23 = 0;
  uint64_t v21 = _UTTypeGetUltimateDeclaringBundle(v8, (uint64_t)a4, (int *)&v23);
  if (UltimateDeclaringBundle && v21)
  {
    uint64_t v11 = LaunchServices::BindingEvaluator::compareBundles( (LaunchServices::BindingEvaluator *)v26,  &v25,  v24,  (LSBundleData *)UltimateDeclaringBundle,  v23,  (LSBundleData *)v21);

    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v26);
    goto LABEL_37;
  }

  uint64_t v22 = (UltimateDeclaringBundle | v21) != 0;
  uint64_t v11 = UltimateDeclaringBundle ? 1 : -1;

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v26);
  if (!v22) {
    goto LABEL_36;
  }
LABEL_37:

  return v11;
}

void sub_183EB37D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB3C98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_183EB3F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB4284( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_183EB4408(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183EB4604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB47C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB4848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB48AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB4930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB4A90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_183EB4B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB4CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB4DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB51CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41, void *a42)
{
  _Unwind_Resume(a1);
}

void sub_183EB5334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB53B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EB5480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB5504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183EB5578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB5710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_183EB5884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB5920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB5A70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB5BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB5C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB5D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_atomic_property_(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  id result = *(id *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_183EB5E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB6124(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](v3);
  _Unwind_Resume(a1);
}

void sub_183EB6280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB6524( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_183EB6834( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void **a36)
{
  _Block_object_dispose(&a27, 8);
  a36 = a10;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&a36);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void *v2;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void sub_183EB6A30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

char *std::vector<LSApplicationRecord * {__strong}>::emplace_back<LSApplicationRecord * {__strong}&>( char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    uint64_t v25 = v4;
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(v4, v12);
    }
    else {
      int v13 = 0LL;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    __int16 v24 = v15;
    *(void *)uint64_t v14 = *a2;
    uint64_t v8 = v14 + 8;
    v23.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v17 = *a1;
    id v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)id v16 = 0LL;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }

      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      uint64_t v8 = (char *)v23.i64[1];
      uint64_t v15 = v24;
    }

    *a1 = v14;
    a1[1] = v8;
    int64x2_t v23 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v15;
    __int16 v24 = v20;
    uint64_t v22 = v19.i64[0];
    std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v22);
  }

  else
  {
    *(void *)uint64_t v7 = *a2;
    uint64_t v8 = v7 + 8;
  }

  a1[1] = v8;
  return v8 - 8;
}

void sub_183EB6BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB6F30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Block_object_dispose((const void *)(v25 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__126(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__127(uint64_t a1)
{
}

void sub_183EB70CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

__n128 std::__optional_storage_base<LSBinding,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<LSBinding,false>>( uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      __int128 v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      uint64_t v5 = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = 0LL;
      unint64_t v6 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v5;

      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a2 + 40) = 0LL;
      uint64_t v8 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v7;
    }
  }

  else if (*(_BYTE *)(a1 + 48))
  {
    std::__optional_destruct_base<LSBinding,false>::reset[abi:nn180100](a1);
  }

  else
  {
    __int128 v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    __n128 result = *(__n128 *)(a2 + 32);
    *(void *)(a2 + 32) = 0LL;
    *(void *)(a2 + 40) = 0LL;
    *(__n128 *)(a1 + 32) = result;
    *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  }

  return result;
}

void std::__optional_destruct_base<LSBinding,false>::reset[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {

    *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0;
  }

uint64_t std::__optional_destruct_base<LSBinding,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
  }

  return a1;
}

void std::__throw_bad_optional_access[abi:nn180100]()
{
}

void std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    __int128 v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void _LSWriteApplicationPlaceholderToURL(void *a1, void *a2, uint64_t a3, void *a4)
{
  v21[1] = *MEMORY[0x1895F89C0];
  id v7 = a4;
  if (a1)
  {
    int v8 = _CFURLIsFileURL();
    if (a2)
    {
      if (v8)
      {
        int v9 = _CFURLIsFileURL();
        if (v7)
        {
          if (!a3 && v9)
          {
            id v10 = a1;
            id v11 = a2;
            unint64_t v12 = (dispatch_queue_s *)_LSGetPlaceholderQueue(void)::result;
            v16[0] = MEMORY[0x1895F87A8];
            v16[1] = 3221225472LL;
            _OWORD v16[2] = ___LSWriteApplicationPlaceholderToURL_block_invoke;
            v16[3] = &unk_189D72970;
            id v17 = v10;
            id v18 = v11;
            id v19 = v7;
            id v13 = v11;
            id v14 = v10;
            dispatch_async(v12, v16);

            goto LABEL_12;
          }
        }
      }
    }
  }

  if (v7)
  {
    uint64_t v20 = *MEMORY[0x189607490];
    v21[0] = @"invalid input parameters";
    [MEMORY[0x189603F68] dictionaryWithObjects:v21 forKeys:&v20 count:1];
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    id v15 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSWriteApplicationPlaceholderToURL",  69LL,  v14);
    (*((void (**)(id, void, id))v7 + 2))(v7, 0LL, v15);
LABEL_12:
  }
}

void sub_183EB74C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EB75C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

uint64_t _LSWriteBundlePlaceholderToURLInternal(id *a1, NSURL *a2, NSURL *a3)
{
  uint64_t v137 = *MEMORY[0x1895F89C0];
  __int128 v4 = a2;
  uint64_t v5 = a3;
  uint64_t v92 = v4;
  v93 = v5;
  if (v4)
  {
    if (v5) {
      goto LABEL_3;
    }
  }

  else
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "OSStatus _LSWriteBundlePlaceholderToURLInternal(Context &, NSURL *__strong, NSURL *__strong)");
    uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue();
    [v86 handleFailureInFunction:v87, @"LSAppPlaceholders.mm", 92, @"Invalid parameter not satisfying: %@", @"inSrcURL != nil" file lineNumber description];

    if (v93) {
      goto LABEL_3;
    }
  }

  [MEMORY[0x1896077D8] currentHandler];
  uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "OSStatus _LSWriteBundlePlaceholderToURLInternal(Context &, NSURL *__strong, NSURL *__strong)");
  uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue();
  [v88 handleFailureInFunction:v89, @"LSAppPlaceholders.mm", 93, @"Invalid parameter not satisfying: %@", @"inDestURL != nil" file lineNumber description];

LABEL_3:
  id v132 = 0LL;
  uint64_t v6 = FSNodeCreateWithURL((uint64_t)v4, 1LL, &v132);
  if ((_DWORD)v6)
  {
LABEL_4:
    id v7 = 0LL;
LABEL_9:
    uint64_t v90 = 0LL;
    unsigned int v129 = 0;
    int v128 = 0LL;
    int v127 = 0;
    goto LABEL_10;
  }

  if (([v132 isDirectory] & 1) == 0)
  {
    id v7 = 0LL;
    uint64_t v6 = 4294965889LL;
    goto LABEL_9;
  }

  *(void *)&__int128 path = 0LL;
  -[NSURL URLByDeletingLastPathComponent](v93, "URLByDeletingLastPathComponent");
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = FSNodeCreateWithURL((uint64_t)v8, 1LL, (id *)&path);

  if ((_DWORD)v6)
  {

    goto LABEL_4;
  }

  id v20 = objc_alloc_init(MEMORY[0x1896078A8]);
  [(id)path URL];
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
  id v131 = 0LL;
  [v20 URLForDirectory:99 inDomain:1 appropriateForURL:v21 create:1 error:&v131];
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  id v23 = v131;

  if (v22)
  {
    id v130 = v23;
    uint64_t v96 = -[FSNode initWithURL:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithURL:flags:error:",  v22,  8LL,  &v130);
    id v24 = v130;

    if (v96)
    {
      uint64_t v6 = 0LL;
      goto LABEL_92;
    }

    id v23 = v24;
  }

  uint64_t v6 = _LSGetOSStatusFromNSError(v23);
  uint64_t v96 = 0LL;
  id v24 = v23;
LABEL_92:

  if ((_DWORD)v6)
  {
    id v7 = v96;
    goto LABEL_9;
  }

  uint64_t v6 = LaunchServices::Database::Context::status(a1);
  uint64_t v90 = 0LL;
  unsigned int v129 = 0;
  int v128 = 0LL;
  int v127 = 0;
  id v7 = v96;
  if ((_DWORD)v6) {
    goto LABEL_10;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  __int128 v70 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v71 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v70, 0LL);

  id v7 = v96;
  int v72 = _LSGetBundleClassForNode(v71, v132);
  if (v72 != 2)
  {
    if (v72 != 12)
    {
      uint64_t v6 = 4294956485LL;
      goto LABEL_30;
    }

    id v126 = 0LL;
    [v132 extensionWithError:&v126];
    __int128 v73 = (void *)objc_claimAutoreleasedReturnValue();
    id v74 = v126;
    __int16 v75 = v74;
    if (v73)
    {
      BOOL v76 = [v73 caseInsensitiveCompare:@"appex"] == 0;

      if (!v76)
      {
        uint64_t v6 = 4294956485LL;
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t v6 = _LSGetOSStatusFromNSError(v74);

      if ((_DWORD)v6)
      {
        uint64_t v90 = 0LL;
LABEL_114:
        id v7 = v96;
        goto LABEL_10;
      }
    }

    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v80 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    int v81 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v80, 0LL);

    int v82 = *v81;
    id v125 = 0LL;
    uint64_t v83 = _LSPluginFindWithInfo(v82, 0LL, 0LL, 0, v132, &v127, &v125);
    id v84 = v125;
    __int128 v85 = v84;
    uint64_t v90 = v83;
    if (v83) {
      uint64_t v6 = 0LL;
    }
    else {
      uint64_t v6 = _LSGetOSStatusFromNSError(v84);
    }

    goto LABEL_114;
  }

  +[_LSDServiceDomain defaultServiceDomain]();
  __int16 v77 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  int v78 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v77, 0LL);

  id v7 = v96;
  uint64_t v6 = _LSFindOrRegisterBundleNode(v78, v132, 0LL, 0x2000000u, 0LL, &v129, &v128);
  if ((_DWORD)v6 == -9499)
  {
    _LSDefaultLog();
    int v79 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      LODWORD(path) = 138477827;
      *(void *)((char *)&path + 4) = v132;
      _os_log_impl( &dword_183E58000,  v79,  OS_LOG_TYPE_INFO,  "Unable to find or register bundle for node %{private}@, so returning kLSApplicationNotFoundErr.",  (uint8_t *)&path,  0xCu);
    }

    uint64_t v90 = 0LL;
    uint64_t v6 = 4294956482LL;
    id v7 = v96;
    goto LABEL_12;
  }

  uint64_t v90 = 0LL;
LABEL_10:
  if ((_DWORD)v6 && (_DWORD)v6 != -10814) {
    goto LABEL_30;
  }
LABEL_12:
  id v124 = 0LL;
  uint64_t v96 = v7;
  [v132 bundleInfoDictionaryWithError:&v124];
  int v9 = (void *)objc_claimAutoreleasedReturnValue();
  id v10 = v124;
  id v11 = v10;
  if (v9)
  {
    unint64_t v12 = (void *)[v9 mutableCopy];
    id v13 = v12;
    if (v12)
    {
      [v12 setObject:MEMORY[0x189604A88] forKeyedSubscript:@"IsPlaceholder"];
      [v13 setObject:&unk_189DA7BA0 forKeyedSubscript:@"LSInstallType"];
      [v13 removeObjectForKey:@"CFBundleInfoPlistURL"];
      [v13 removeObjectForKey:@"CFBundleRawInfoPlistURL"];
      [MEMORY[0x1896079E8] dataWithPropertyList:v13 format:200 options:0 error:0];
      id v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        -[FSNode childNodeWithRelativePath:flags:error:]( v7,  "childNodeWithRelativePath:flags:error:",  @"Info.plist",  0LL,  0LL);
        id v15 = (void *)objc_claimAutoreleasedReturnValue();
        id v16 = v15;
        if (v15)
        {
          [v15 URL];
          id v17 = (void *)objc_claimAutoreleasedReturnValue();
          id v123 = 0LL;
          char v18 = [v14 writeToURL:v17 options:1 error:&v123];
          id v19 = v123;

          if ((v18 & 1) != 0) {
            uint64_t v6 = 0LL;
          }
          else {
            uint64_t v6 = _LSGetOSStatusFromNSError(v19);
          }
        }
      }
    }

    else
    {
      uint64_t v6 = 4294967255LL;
    }
  }

  else
  {
    uint64_t v6 = _LSGetOSStatusFromNSError(v10);
  }

  if ((_DWORD)v6) {
    goto LABEL_29;
  }
  [v132 URL];
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue();
  [v26 URLByDeletingLastPathComponent];
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();

  if (v27 && (uint64_t v28 = (void *)_LSCopyiTunesMetadataDictionaryForAppContainerURL((CFURLRef)v27)) != 0LL)
  {
    [MEMORY[0x1896079E8] dataWithPropertyList:v28 format:200 options:0 error:0];
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
    {
      -[FSNode childNodeWithRelativePath:flags:error:]( v96,  "childNodeWithRelativePath:flags:error:",  @"iTunesMetadata.plist",  0LL,  0LL);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v31 = v30;
      if (v30)
      {
        [v30 URL];
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
        id v122 = 0LL;
        char v33 = [v29 writeToURL:v32 options:1 error:&v122];
        id v34 = v122;

        if ((v33 & 1) != 0) {
          uint64_t v6 = 0LL;
        }
        else {
          uint64_t v6 = _LSGetOSStatusFromNSError(v34);
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    if ((_DWORD)v6) {
      goto LABEL_29;
    }
  }

  else
  {
    _LSDefaultLog();
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
      _LSWriteBundlePlaceholderToURLInternal((uint64_t)v92, v35);
    }
  }

  uint64_t v36 = (__CFBundle *)[v132 copyCFBundleWithError:0];
  if (v36)
  {
    CFTypeRef cf = v36;
    __int128 v120 = 0u;
    __int128 v121 = 0u;
    __int128 v118 = 0u;
    __int128 v119 = 0u;
    id obj = CFBundleCopyBundleLocalizations(v36);
    uint64_t v37 = -[__CFArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v118,  v136,  16LL);
    if (v37)
    {
      uint64_t v38 = *(void *)v119;
      do
      {
        for (uint64_t i = 0LL; i != v37; ++i)
        {
          if (*(void *)v119 != v38) {
            objc_enumerationMutation(obj);
          }
          uint64_t v40 = *(void **)(*((void *)&v118 + 1) + 8 * i);
          __int16 v41 = v96;
          [v40 stringByAppendingPathExtension:@"lproj"];
          id v42 = (NSString *)objc_claimAutoreleasedReturnValue();
          _LSCreatePlaceholderSubfolder(v41, v42);
          id v43 = (FSNode *)objc_claimAutoreleasedReturnValue();

          if (v43)
          {
            [@"InfoPlist" stringByAppendingPathExtension:@"strings"];
            uint64_t v44 = (NSString *)objc_claimAutoreleasedReturnValue();
            _LSCopyResourceFileToPlaceholder(cf, v43, (NSString *)v40, v44);
          }
        }

        uint64_t v37 = -[__CFArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v118,  v136,  16LL);
      }

      while (v37);
    }

    if (v128)
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v45 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v46 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v45, 0LL);

      id v47 = *v46;
      uint64_t v111 = MEMORY[0x1895F87A8];
      uint64_t v112 = 3321888768LL;
      v113 = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke;
      v114 = &unk_189D73FF0;
      id v115 = v47;
      CFRetain(cf);
      v116 = v96;
      _CSArrayEnumerateAllValues();

      CFRelease(cf);
      CFTypeRef v117 = 0LL;
    }

    CFRelease(cf);
  }

  char v48 = v128;
  if (v128)
  {
    if (!v128->iconFileNames) {
      goto LABEL_61;
    }
    +[_LSDServiceDomain defaultServiceDomain]();
    __int128 v49 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    int v50 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v49, 0LL);

    id v51 = *v50;
    *(void *)&__int128 path = 0LL;
    *((void *)&path + 1) = &path;
    uint64_t v134 = 0x2020000000LL;
    char v135 = 0;
    v109[0] = 0LL;
    v109[1] = v109;
    v109[2] = 0x2020000000LL;
    char v110 = 0;
    uint64_t v100 = MEMORY[0x1895F87A8];
    uint64_t v101 = 3221225472LL;
    v102 = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_36;
    CFArrayRef v103 = &unk_189D74028;
    id v104 = v51;
    p___int128 path = &path;
    uint64_t v107 = v109;
    v105 = v96;
    uint64_t v108 = a1;
    id v52 = v51;
    _CSArrayEnumerateAllValues();

    _Block_object_dispose(v109, 8);
    _Block_object_dispose(&path, 8);
    char v48 = v128;
  }

  if (!v48)
  {
LABEL_62:
    if (!v90 || !*(_DWORD *)(v90 + 132)) {
      goto LABEL_75;
    }
    goto LABEL_64;
  }

LABEL_61:
  if (!v48->base.entitlements) {
    goto LABEL_62;
  }
LABEL_64:
  +[_LSDServiceDomain defaultServiceDomain]();
  char v53 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  __int128 v54 = (id *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v53, 0LL);

  __int128 v55 = (_LSDatabase *)*v54;
  __int128 v57 = v55;
  if (v128 && (unsigned int entitlements = v128->base.entitlements) != 0 || v90 && (unsigned int entitlements = *(_DWORD *)(v90 + 132)) != 0)
  {
    _LSPlistGetDictionary(v55, entitlements, v56);
    id v59 = (void *)objc_claimAutoreleasedReturnValue();
    if (v59)
    {
      [MEMORY[0x1896079E8] dataWithPropertyList:v59 format:200 options:0 error:0];
      id v60 = (void *)objc_claimAutoreleasedReturnValue();
      if (v60)
      {
        -[FSNode childNodeWithRelativePath:flags:error:]( v96,  "childNodeWithRelativePath:flags:error:",  @"PlaceholderEntitlements.plist",  0LL,  0LL);
        id v61 = (void *)objc_claimAutoreleasedReturnValue();
        __int128 v62 = v61;
        if (v61)
        {
          [v61 URL];
          __int128 v63 = (void *)objc_claimAutoreleasedReturnValue();
          [v60 writeToURL:v63 atomically:1];
        }
      }
    }
  }

LABEL_75:
  *(void *)&__int128 path = 0LL;
  uint64_t v64 = *MEMORY[0x189603C10];
  if ([v132 getResourceValue:&path forKey:*MEMORY[0x189603C10] options:1 error:0])
  {
    -[FSNode URL](v96, "URL");
    __int128 v65 = (void *)objc_claimAutoreleasedReturnValue();
    v98[0] = MEMORY[0x1895F87A8];
    v98[1] = 3221225472LL;
    v98[2] = ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_2;
    v98[3] = &unk_189D74050;
    id v99 = (id)path;
    XCFURLEnumerate((uint64_t)v65, 1LL, 0LL, v98);

    -[FSNode setResourceValue:forKey:options:error:]( v96,  "setResourceValue:forKey:options:error:",  (void)path,  v64,  3LL,  0LL);
  }

  -[FSNode setResourceValue:forKey:options:error:]( v96,  "setResourceValue:forKey:options:error:",  MEMORY[0x189604A88],  *MEMORY[0x189603C70],  3LL,  0LL);
  id v97 = 0LL;
  BOOL v66 = -[FSNode getFileSystemRepresentation:error:](v96, "getFileSystemRepresentation:error:", &path, &v97);
  id v67 = v97;
  __int128 v68 = v67;
  if (!v66)
  {
    uint64_t v6 = _LSGetOSStatusFromNSError(v67);

    if (!(_DWORD)v6) {
      goto LABEL_80;
    }
LABEL_29:
    id v7 = v96;
    goto LABEL_30;
  }

LABEL_80:
  id v7 = v96;
  if (!rename( (const char *)&path, -[NSURL fileSystemRepresentation](v93, "fileSystemRepresentation")))
  {
    uint64_t v6 = 0LL;
    goto LABEL_34;
  }

  __int128 v69 = __error();
  uint64_t v6 = _LSGetOSStatusFromPOSIXErrorCode(*v69);
LABEL_30:
  if (v7
    && (_DWORD)v6
    && -[FSNode getFileSystemRepresentation:error:](v7, "getFileSystemRepresentation:error:", &path, 0LL))
  {
    removefile((const char *)&path, 0LL, 1u);
  }

    goto LABEL_62;
  }

  if (a3)
  {
    *(_OWORD *)stat buf = *(_OWORD *)((char *)v105 + 4);
    *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)((char *)&v105[1] + 4);
    uint64_t v39 = *(_OWORD *)(v86 + 24);
    uint64_t v107 = *(_OWORD *)(v86 + 8);
    uint64_t v108 = v39;
    if (_LSVersionNumberCompare(buf, &v107))
    {
      _LSRegistrationLog();
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        uint64_t v40 = *(_OWORD *)(v86 + 24);
        v93[0] = *(_OWORD *)(v86 + 8);
        v93[1] = v40;
        _LSVersionNumberGetStringRepresentation(v93);
        __int16 v41 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)stat buf = 138413058;
        *(void *)&uint8_t buf[4] = v19;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&buf[14] = a3;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&buf[24] = v34;
        uint64_t v95 = 2112;
        uint64_t v96 = v41;
        _os_log_impl( &dword_183E58000,  v38,  OS_LOG_TYPE_INFO,  "Extension %@ specified NSExtensionPointVersion %@ that does not match the active extensionPoint <%@:%@>",  buf,  0x2Au);
      }

      goto LABEL_61;
    }
  }

void sub_183EB8378( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void *a12, void *a13, uint64_t a14, CFTypeRef a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, CFTypeRef cf, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void ___ZL22_LSGetPlaceholderQueuev_block_invoke()
{
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.app-placeholders", v2);
  uint64_t v1 = (void *)_LSGetPlaceholderQueue(void)::result;
  _LSGetPlaceholderQueue(void)::__n128 result = (uint64_t)v0;
}

uint64_t LaunchServices::Database::Context::status(id *this)
{
  uint64_t v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)this, v2, 0LL);

  if (v3)
  {
    __int128 v4 = 0LL;
  }

  else
  {
    id v6 = this[3];
    __int128 v4 = v6;
    if (v6)
    {
      uint64_t v5 = _LSGetOSStatusFromNSError(v6);
      goto LABEL_6;
    }
  }

  uint64_t v5 = 0LL;
LABEL_6:

  return v5;
}

void sub_183EB8788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSCopyResourceFileToPlaceholder(__CFBundle *a1, FSNode *a2, NSString *a3, NSString *a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v7 = a2;
  int v8 = a3;
  int v9 = a4;
  id v10 = (__CFString *)v9;
  if (a1 && v7 && v9)
  {
    if (v8)
    {
      id v11 = CFBundleCopyResourceURLForLocalization(a1, v9, 0LL, 0LL, v8);
      if (!v11) {
        goto LABEL_18;
      }
    }

    else
    {
      CFURLRef v12 = CFBundleCopyBundleURL(a1);
      -[__CFURL URLByAppendingPathComponent:isDirectory:](v12, "URLByAppendingPathComponent:isDirectory:", v10, 0LL);
      id v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v11)
      {
LABEL_18:

        goto LABEL_19;
      }
    }

    id v13 = v7;
    id v14 = v11;
    id v21 = 0LL;
    int v15 = [v14 getResourceValue:&v21 forKey:*MEMORY[0x189603C88] error:0];
    id v16 = v21;
    id v17 = v16;
    if (v16) {
      int v18 = v15;
    }
    else {
      int v18 = 0;
    }
    if (v18 == 1 && [v16 BOOLValue])
    {
      [v14 lastPathComponent];
      id v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[FSNode childNodeWithRelativePath:flags:error:](v13, "childNodeWithRelativePath:flags:error:", v19, 0LL, 0LL);
      id v20 = (void *)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_18;
  }

void sub_183EB8968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke( uint64_t a1)
{
  uint64_t v2 = (NSString *)_CSStringCopyCFString();
  if (v2) {
    _LSCopyResourceFileToPlaceholder(*(__CFBundle **)(a1 + 48), *(FSNode **)(a1 + 40), 0LL, v2);
  }
}

void sub_183EB8A28( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

CFTypeRef __copy_helper_block_ea8_48c31_ZTS10CFReleaserIP10__CFBundleE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_48c31_ZTS10CFReleaserIP10__CFBundleE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_36( uint64_t a1, uint64_t a2, int a3)
{
  __int128 v4 = (int *)_LSGetPlugin(*(void *)(a1 + 32), a3);
  if (v4 && *v4)
  {
    uint64_t v5 = _LSAliasCopyResolvedNode(*(void **)(a1 + 32), *v4, 0LL, 0LL, 0LL);
    if (v5)
    {
      id v16 = v5;
      [v5 URL];
      id v6 = (NSURL *)objc_claimAutoreleasedReturnValue();
      -[NSURL lastPathComponent](v6, "lastPathComponent");
      id v7 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v8 = [v7 caseInsensitiveCompare:@"PlugIns"];

      if (v8)
      {
        int v9 = (_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
        id v10 = @"Extensions";
      }

      else
      {
        int v9 = (_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        id v10 = @"PlugIns";
      }

      int v11 = *v9;
      _BYTE *v9 = 1;
      if (!v11)
      {
        _LSCreatePlaceholderSubfolder(*(FSNode **)(a1 + 40), &v10->isa);
      }

      [*(id *)(a1 + 40) URL];
      CFURLRef v12 = (void *)objc_claimAutoreleasedReturnValue();
      [v12 URLByAppendingPathComponent:v10 isDirectory:1];
      id v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSURL lastPathComponent](v6, "lastPathComponent");
      id v14 = (void *)objc_claimAutoreleasedReturnValue();
      [v13 URLByAppendingPathComponent:v14 isDirectory:1];
      int v15 = (NSURL *)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        if (v15) {
          _LSWriteBundlePlaceholderToURLInternal(*(LaunchServices::Database::Context **)(a1 + 64), v6, v15);
        }
      }

      uint64_t v5 = v16;
    }
  }

void sub_183EB8BFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EB8C50()
{
}

id _LSCreatePlaceholderSubfolder(FSNode *a1, NSString *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v3 = a1;
  __int128 v4 = a2;
  uint64_t v5 = v4;
  id v6 = 0LL;
  if (v3 && v4)
  {
    -[FSNode childNodeWithRelativePath:flags:error:](v3, "childNodeWithRelativePath:flags:error:", v4, 8LL, 0LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = v7;
    if (v7
      && [v7 getFileSystemRepresentation:v10 error:0]
      && (!mkdir(v10, 0x1C0u) || *__error() == 17))
    {
      id v6 = v8;
    }

    else
    {
      id v6 = 0LL;
    }
  }

  return v6;
}

void sub_183EB8D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistGetDictionary(_LSDatabase *a1, unsigned int a2, _LSPlistHint *a3)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetDictionary(v3, 0LL);
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

{
  void *v3;
  void *v4;
  _LSPlistGet((uint64_t)a1, a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetDictionary(v3, 0LL);
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

{
  void *v3;
  void *v4;
  _LSPlistGet((uint64_t)a1, a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetDictionary(v3, 0LL);
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_183EB8DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38_LSWriteBundlePlaceholderToURLInternalRN14LaunchServices8Database7ContextEP5NSURLS4__block_invoke_2( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    __int128 v4 = -[FSNode initWithURL:flags:error:](objc_alloc(&OBJC_CLASS___FSNode), "initWithURL:flags:error:", a3, 0LL, 0LL);
    if (v4) {
      -[FSNode setResourceValue:forKey:options:error:]( v4,  "setResourceValue:forKey:options:error:",  *(void *)(a1 + 32),  *MEMORY[0x189603C10],  3LL,  0LL);
    }
  }

void sub_183EB8E40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id _LSAppRemovalServiceXPCInterface()
{
  if (_LSAppRemovalServiceXPCInterface_onceToken != -1) {
    dispatch_once(&_LSAppRemovalServiceXPCInterface_onceToken, &__block_literal_global_9);
  }
  return (id)_LSAppRemovalServiceXPCInterface_interface;
}

void _LSServer_DisplayRemovedAppPrompt(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  id v6 = a2;
  id v7 = a3;
  id v41 = a4;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_DisplayRemovedAppPrompt(LSContext * _Nonnull, NSString *__strong _Nul"
                                    "lable, NSURL *__strong _Nullable, void (^__strong _Nonnull)(BOOL, NSError *__strong))");
  id v50 = 0LL;
  id v8 = v6;
  id v9 = v7;
  id v10 = v9;
  if (v8)
  {
    uint64_t v11 = -[LSApplicationRecord initWithBundleIdentifierOfSystemPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifierOfSystemPlaceholder:error:",  v8,  &v50);
  }

  else
  {
    if ([v9 isFileURL])
    {
      v53[0] = *MEMORY[0x189607490];
      *(void *)&__int128 buf = @"The app restoration prompt is not available for file URLs.";
      [MEMORY[0x189603F68] dictionaryWithObjects:&buf forKeys:v53 count:1];
      int v15 = (LSApplicationRecord *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt",  131LL,  v15);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }

    if (!v10)
    {
      v53[0] = *MEMORY[0x189607490];
      *(void *)&__int128 buf = @"Either bundleID or resourceURL must be specified to present an app restoration prompt.";
      [MEMORY[0x189603F68] dictionaryWithObjects:&buf forKeys:v53 count:1];
      int v15 = (LSApplicationRecord *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt",  149LL,  v15);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_18;
    }

    LODWORD(buf) = 0;
    *((void *)&buf + 1) = 0LL;
    LODWORD(v55) = 0;
    id v57 = 0LL;
    id v58 = 0LL;
    uint64_t v56 = 0LL;
    LODWORD(v51) = 14;
    [v10 scheme];
    uint64_t v23 = (LaunchServices::BindingEvaluator *)objc_claimAutoreleasedReturnValue();
    int v24 = _LSGetBindingForNodeOrSchemeOrUTI(a1, 0LL, v23, 0LL, 0, -1, (int *)&v51, 0, (uint64_t)&buf);

    if (v24)
    {
      uint64_t v25 = *MEMORY[0x189607760];
      v52[0] = *MEMORY[0x189607490];
      v52[1] = v25;
      v53[0] = @"Failed to find an application that could open the specified URL.";
      v53[1] = v10;
      [MEMORY[0x189603F68] dictionaryWithObjects:v53 forKeys:v52 count:2];
      __int16 v26 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  v24,  (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt",  144LL,  v26);
      id v50 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v39 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
      uint64_t v11 = -[LSApplicationRecord _initWithContext:bundleID:bundleData:error:]( v39,  "_initWithContext:bundleID:bundleData:error:",  a1,  buf,  *((void *)&buf + 1),  &v50);
    }
  }

  if (!v11) {
    goto LABEL_20;
  }
  +[LSApplicationRestrictionsManager sharedInstance]();
  CFURLRef v12 = (id *)objc_claimAutoreleasedReturnValue();
  -[LSBundleRecord bundleIdentifier](v11, "bundleIdentifier");
  id v13 = (void *)objc_claimAutoreleasedReturnValue();
  unsigned int v14 = -[LSApplicationRestrictionsManager isApplicationRestricted:](v12, v13);

  if (!v14)
  {
    id v17 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
    -[LSBundleRecord bundleIdentifier](v11, "bundleIdentifier");
    int v18 = (void *)objc_claimAutoreleasedReturnValue();
    int v15 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v17,  "initWithBundleIdentifier:allowPlaceholder:error:",  v18,  1LL,  0LL);

    if (v15)
    {
      -[LSApplicationRecord applicationState](v15, "applicationState");
      id v19 = (void *)objc_claimAutoreleasedReturnValue();
      int v20 = [v19 isDowngraded];

      if (v20)
      {
        _LSDefaultLog();
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          -[LSBundleRecord bundleIdentifier](v11, "bundleIdentifier");
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v22;
          _os_log_impl( &dword_183E58000,  v21,  OS_LOG_TYPE_INFO,  "Application %@ exists as an offloaded placeholder.",  (uint8_t *)&buf,  0xCu);
        }
      }

      else
      {

        uint64_t v51 = *MEMORY[0x189607490];
        *(void *)&__int128 buf = @"The specified application is currently installed or installing.";
        [MEMORY[0x189603F68] dictionaryWithObjects:&buf forKeys:&v51 count:1];
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt",  169LL,  v21);
        uint64_t v11 = 0LL;
        id v50 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

    goto LABEL_19;
  }

  uint64_t v51 = *MEMORY[0x189607490];
  *(void *)&__int128 buf = @"The specified application is restricted, so the system cannot prompt to reinstall it.";
  [MEMORY[0x189603F68] dictionaryWithObjects:&buf forKeys:&v51 count:1];
  int v15 = (LSApplicationRecord *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -54LL,  (uint64_t)"_LSGetPlaceholderRecordForRemovedAppPrompt",  155LL,  v15);
  id v16 = (id)objc_claimAutoreleasedReturnValue();
LABEL_18:
  uint64_t v11 = 0LL;
  id v50 = v16;
LABEL_19:

LABEL_20:
  id v27 = v50;
  if (v11)
  {
    -[LSBundleRecord localizedName](v11, "localizedName");
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[LSBundleRecord bundleIdentifier](v11, "bundleIdentifier");
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v55 = 0x2020000000LL;
    uint64_t v56 = 0LL;
    id v30 = -[LSApplicationRecord _initWithNode:bundleIdentifier:placeholderBehavior:systemPlaceholder:itemID:forceInBundleContainer:context:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "_initWithNode:bundleIdentifier:placeholderBehavior:systemPlaceholder:itemID:forceInBundleContainer:context:error:",  0LL,  @"com.apple.AppStore",  0LL,  0LL,  0LL,  0LL,  a1,  0LL);
    [v30 applicationState];
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue();
    char v32 = [v31 isInstalled];

    if ((v32 & 1) != 0)
    {
      char v33 = 0LL;
    }

    else
    {
      *(void *)(*((void *)&buf + 1) + 24LL) = 1LL;
      id v34 = -[LSApplicationRecord _initWithNode:bundleIdentifier:placeholderBehavior:systemPlaceholder:itemID:forceInBundleContainer:context:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "_initWithNode:bundleIdentifier:placeholderBehavior:systemPlaceholder:itemID:forceInBundleContainer:context:error:",  0LL,  @"com.apple.AppStore",  0LL,  1LL,  0LL,  0LL,  a1,  0LL);
      [v34 localizedName];
      char v33 = (void *)objc_claimAutoreleasedReturnValue();
    }

    id v35 = (id)_LSGetAppRemovalPromptQueue(void)::result;
    v42[0] = MEMORY[0x1895F87A8];
    v42[1] = 3221225472LL;
    v42[2] = ___LSServer_DisplayRemovedAppPrompt_block_invoke;
    v42[3] = &unk_189D74098;
    id v36 = v28;
    id v43 = v36;
    id v44 = v8;
    id v45 = v33;
    p___int128 buf = &buf;
    id v37 = v29;
    id v46 = v37;
    id v47 = v10;
    id v48 = v41;
    id v38 = v33;
    _LSAskForScreenUnlock(v35, v42);

    _Block_object_dispose(&buf, 8);
  }

  else
  {
    (*((void (**)(id, void, id))v41 + 2))(v41, 0LL, v27);
  }
}

void sub_183EB95E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, _Unwind_Exception *exception_object, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_183EB9FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  CFRelease(v20);
  _Unwind_Resume(a1);
}

void ___ZL27_LSGetAppRemovalPromptQueuev_block_invoke()
{
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("LS app removal prompt queue", v2);
  uint64_t v1 = (void *)_LSGetAppRemovalPromptQueue(void)::result;
  _LSGetAppRemovalPromptQueue(void)::CFTypeRef result = (uint64_t)v0;
}

__CFString *_LSGetAppRemovalPromptStringForKey(NSString *a1, NSString *a2)
{
  uint64_t v3 = a1;
  __int128 v4 = a2;
  uint64_t v5 = (__CFBundle *)_LSGetBundle();
  id v6 = (__CFString *)CFBundleCopyLocalizedString(v5, v4, v4, @"AppRemoval");
  if (!v6) {
    id v6 = v3;
  }

  return v6;
}

void sub_183EBA258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL26_LSDisplayRemovedAppPromptP20__CFUserNotificationP8NSStringP5NSURL18LSAppRestoreSourceU13block_pointerFvbP7NSErrorE_block_invoke( void *a1)
{
  v5[3] = *MEMORY[0x1895F89C0];
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____LSSpringBoardCall);
  -[_LSSpringBoardCall setBundleIdentifier:](v2, "setBundleIdentifier:", a1[4]);
  v4[0] = getFBSOpenApplicationOptionKeyPayloadURL[0]();
  v5[0] = a1[5];
  v4[1] = getFBSOpenApplicationOptionKeyIsSensitiveURL[0]();
  _DWORD v4[2] = @"__PayloadOptions";
  v5[1] = MEMORY[0x189604A88];
  void v5[2] = &unk_189DA83E8;
  [MEMORY[0x189603F68] dictionaryWithObjects:v5 forKeys:v4 count:3];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[_LSSpringBoardCall setLaunchOptions:](v2, "setLaunchOptions:", v3);

  -[_LSSpringBoardCall setClientXPCConnection:](v2, "setClientXPCConnection:", 0LL);
  -[_LSSpringBoardCall setCallCompletionHandlerWhenFullyComplete:]( v2,  "setCallCompletionHandlerWhenFullyComplete:",  1LL);
  -[_LSSpringBoardCall callWithCompletionHandler:](v2, "callWithCompletionHandler:", a1[6]);
}

void sub_183EBA37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initFBSOpenApplicationOptionKeyPayloadURL(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL[0] = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

{
  void *v0;
  uint64_t result;
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

{
  void *v0;
  uint64_t result;
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  constantFBSOpenApplicationOptionKeyPayloadURL = result;
  getFBSOpenApplicationOptionKeyPayloadURL = FBSOpenApplicationOptionKeyPayloadURLFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPayloadURLFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

{
  return constantFBSOpenApplicationOptionKeyPayloadURL;
}

uint64_t initFBSOpenApplicationOptionKeyIsSensitiveURL(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyIsSensitiveURL");
  constantFBSOpenApplicationOptionKeyIsSensitiveURL = result;
  getFBSOpenApplicationOptionKeyIsSensitiveURL[0] = FBSOpenApplicationOptionKeyIsSensitiveURLFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyIsSensitiveURLFunction(void)
{
  return constantFBSOpenApplicationOptionKeyIsSensitiveURL;
}

Class initATTrackingEnforcementManager()
{
  if (!AppTrackingTransparencyLibrary_frameworkLibrary) {
    AppTrackingTransparencyLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/Frameworks/AppTrackingTransparency.fram ework/AppTrackingTransparency",  2);
  }
  Class result = objc_getClass("ATTrackingEnforcementManager");
  classATTrackingEnforcementManager = (uint64_t)result;
  getATTrackingEnforcementManagerClass = (uint64_t (*)())ATTrackingEnforcementManagerFunction;
  return result;
}

id ATTrackingEnforcementManagerFunction()
{
  return (id)classATTrackingEnforcementManager;
}

uint64_t _LSAudioUnitURLOpen(NSURL *a1)
{
  return softLinkAudioUnitURLOpen((const __CFURL *)a1);
}

uint64_t (*initAudioUnitURLOpen(const __CFURL *a1))(const __CFURL *)
{
  uint64_t v2 = (void *)AudioToolboxLibrary(void)::frameworkLibrary;
  if (!AudioToolboxLibrary(void)::frameworkLibrary)
  {
    uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 2);
    AudioToolboxLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }

  Class result = (uint64_t (*)(const __CFURL *))dlsym(v2, "AudioUnitURLOpen");
  softLinkAudioUnitURLOpen = result;
  if (result) {
    return (uint64_t (*)(const __CFURL *))result(a1);
  }
  return result;
}

uint64_t _LSBindableComparePriority(void *a1, char a2, char a3)
{
  id v5 = a1;
  unsigned int v6 = a2 & 3;
  if (v6 == (a3 & 3))
  {
    if (v6 == 3)
    {
      id v7 = (_DWORD *)_UTTypeGet();
      uint64_t v11 = _UTTypeGet();
      id v9 = (_DWORD *)v11;
      if (v7 && v11)
      {
LABEL_10:
        char v10 = _UTTypeComparePriority(v5, v7, v5, v9);
        goto LABEL_18;
      }
    }

    else
    {
      if ((a2 & 3) != 0)
      {
        char v10 = 0;
        goto LABEL_18;
      }

      id v7 = (_DWORD *)_UTTypeGet();
      uint64_t v8 = _UTTypeGet();
      id v9 = (_DWORD *)v8;
      if (v7 && v8) {
        goto LABEL_10;
      }
    }

    if (v9) {
      char v12 = -1;
    }
    else {
      char v12 = 0;
    }
    if (v7) {
      char v10 = 1;
    }
    else {
      char v10 = v12;
    }
  }

  else
  {
    char v10 = v6 < (a3 & 3u);
  }

void sub_183EBA6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindableActivate(void *a1, int a2)
{
  id v3 = a1;
  int v12 = a2;
  if (a2)
  {
    if (_CSStringBindingGetBindings())
    {
      uint64_t v8 = 0LL;
      id v9 = &v8;
      uint64_t v10 = 0x2020000000LL;
      int v11 = -1;
      id v7 = v3;
      _CSArrayEnumerateAllValues();
      if (*((_DWORD *)v9 + 6) == -1)
      {
        _CSArrayAppendValue();
      }

      else if (_CSArrayGetValueAtIndex() != a2)
      {
        _CSArrayInsertValueAtIndex();
      }

      _Block_object_dispose(&v8, 8);
      uint64_t v4 = 0LL;
    }

    else
    {
      uint64_t v8 = 0LL;
      else {
        uint64_t v5 = _LSGetOSStatusFromNSError(v8);
      }
      uint64_t v4 = v5;
    }
  }

  else
  {
    uint64_t v4 = 4294967246LL;
  }

  return v4;
}

void sub_183EBA8D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSBindableSetGeneration(void *a1, int a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = a2 & 0xFFFFFFFC;
  id v7 = v5;
  if ((a2 & 3) != 0)
  {
    if ((a2 & 3) == 2) {
      _LSClaimSetGeneration((uint64_t)v5, v6, a3);
    }
  }

  else
  {
    _UTTypeSetGeneration((uint64_t)v5, v6, a3);
  }
}

void sub_183EBAA1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t _LSBindableDeactivate(void *a1, int a2)
{
  id v3 = a1;
  if (a2)
  {
    if (_CSStringBindingGetBindings())
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = &v7;
      uint64_t v9 = 0x2020000000LL;
      int v10 = -1;
      id v6 = v3;
      _CSArrayEnumerateAllValues();
      if (*((_DWORD *)v8 + 6) != -1)
      {
        if (_CSArrayGetCount() == 1)
        {
          uint64_t v4 = CSMapRemoveValue();
          if ((_DWORD)v4)
          {
LABEL_11:

            _Block_object_dispose(&v7, 8);
            goto LABEL_12;
          }

          _CSArrayDispose();
        }

        else
        {
          _CSArrayRemoveValueAtIndex();
        }
      }

      uint64_t v4 = 0LL;
      goto LABEL_11;
    }

    uint64_t v4 = 4294957797LL;
  }

  else
  {
    uint64_t v4 = 4294967246LL;
  }

void sub_183EBABDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LSBindingMapGetVisualizationFunctions(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = LaunchServices::BindingMaps::display;
  a1[2] = 0LL;
}

BOOL LaunchServices::BindingMaps::display(uint64_t *a1, int a2)
{
  int BindingMapIndexWithTargetTable = _LSDatabaseFindBindingMapIndexWithTargetTable(*a1, a2);
  if (BindingMapIndexWithTargetTable != -1)
  {
    _LSDatabaseFindBindingMapTargetTable((void *)*a1, BindingMapIndexWithTargetTable);
    _CSStringBindingEnumerateAllBindings();
  }

  return BindingMapIndexWithTargetTable != -1;
}

void ___ZN14LaunchServices11BindingMapsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke( uint64_t a1, unsigned int a2)
{
  uint64_t v4 = _CSStringCopyCFString();
  if (!v4)
  {
    uint64_t v4 = objc_msgSend(NSString, "stringWithFormat:", @"unknown bindable key string (0x%llx):", a2);
  }

  id v5 = (NSString *)v4;
  [MEMORY[0x189603FA8] array];
  id v6 = (NSArray *)(id)objc_claimAutoreleasedReturnValue();
  _CSArrayEnumerateAllValues();
  CSStore2::AttributedStringWriter::array(*(CSStore2::AttributedStringWriter **)(a1 + 40), v5, v6);
}

void sub_183EBAE70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices11BindingMapsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2( uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 != *(_DWORD *)(**(void **)(a1 + 40) + 20LL)
    && (_DWORD)v5 != *(_DWORD *)(**(void **)(a1 + 40) + 1604LL)
    && (_DWORD)v5 != *(_DWORD *)(**(void **)(a1 + 40) + 1608LL))
  {
    __asm { BR              X11 }
  }

  uint64_t v6 = CSStore2::AttributedStringWriter::link(*(CSStore2::AttributedStringWriter **)(a1 + 48), v5, a3, 0LL);
  uint64_t v7 = *(void **)(a1 + 32);
  id v9 = (id)v6;
  [NSString stringWithFormat:@"%@ (0x%llx)", v6, v3];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  [v7 addObject:v8];
}

void sub_183EBB13C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithURL( LaunchServices::BindingEvaluator *this@<X0>, FSNode **a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a2);
  _LSBindingLog();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138478083;
    id v16 = this;
    __int16 v17 = 1024;
    int v18 = -[LaunchServices::BindingEvaluator isFileURL](this, "isFileURL");
    _os_log_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_DEBUG,  "BindingEvaluator::CreateWithURL(%{private}@) isFileURL=%{BOOL}d",  buf,  0x12u);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Creating binding evaluator for URL %@",  v6,  this);
  if (-[LaunchServices::BindingEvaluator isFileURL](this, "isFileURL"))
  {
    uint64_t v7 = -[FSNode initWithURL:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithURL:flags:error:",  this,  0LL,  0LL);
    uint64_t v8 = *a2;
    *a2 = v7;

    id v9 = a2[1];
    a2[1] = (FSNode *)@"file";

    uint64_t v10 = -[FSNode nameWithError:](*a2, "nameWithError:", 0LL);
    int v11 = a2[3];
    a2[3] = (FSNode *)v10;
  }

  else
  {
    int v12 = (FSNode *)[objc_alloc(MEMORY[0x189607A50]) initWithURL:this resolvingAgainstBaseURL:0];
    int v11 = v12;
    if (v12)
    {
      uint64_t v13 = -[FSNode scheme](v12, "scheme");
      unsigned int v14 = a2[1];
      a2[1] = (FSNode *)v13;
    }
  }
}

void sub_183EBB2FC(_Unwind_Exception *a1)
{
  LaunchServices::BindingEvaluator::~BindingEvaluator(v1);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluator::CreateWithNode( void *a1@<X0>, LaunchServices::BindingEvaluator *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  LaunchServices::BindingEvaluator::BindingEvaluator(a2);
  _LSBindingLog();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138477827;
    uint64_t v10 = a1;
    _os_log_impl(&dword_183E58000, v4, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithNode(%{private}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Creating binding evaluator for FSNode %@",  v5,  a1);
  objc_storeStrong((id *)a2, a1);
  uint64_t v6 = (void *)*((void *)a2 + 1);
  *((void *)a2 + 1) = @"file";

  uint64_t v7 = [a1 nameWithError:0];
  uint64_t v8 = (void *)*((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
}

void sub_183EBB43C(_Unwind_Exception *a1)
{
}

void LaunchServices::BindingEvaluator::CreateWithURLScheme( LaunchServices::BindingEvaluator *this@<X0>, id *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a2);
  _LSBindingLog();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138477827;
    uint64_t v8 = this;
    _os_log_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_DEBUG,  "BindingEvaluator::CreateWithURLScheme(%{private}@)",  buf,  0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Creating binding evaluator for URL scheme %@",  v6,  this);
  objc_storeStrong(a2 + 1, this);
}

void sub_183EBB52C(_Unwind_Exception *a1)
{
}

void LaunchServices::BindingEvaluator::CreateWithApplicationIdentifier( LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = (char)a2;
  LaunchServices::BindingEvaluator::BindingEvaluator((LaunchServices::BindingEvaluator *)a3);
  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Creating binding evaluator for application identifier %@",  v6,  this);
  id v11 = 0LL;
  int v12 = 0LL;
  _LSSplitApplicationIdentifier(this, &v12, &v11);
  uint64_t v7 = [v11 copy];
  uint64_t v8 = *(void **)(a3 + 32);
  *(void *)(a3 + 32) = v7;

  if (v12)
  {
    uint64_t v9 = -[LaunchServices::BindingEvaluator copy](this, "copy");
    uint64_t v10 = *(void **)(a3 + 80);
    *(void *)(a3 + 80) = v9;
  }

  *(_BYTE *)(a3 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  *(_BYTE *)(a3 + 89) = v3;
}

void sub_183EBB5F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void LaunchServices::BindingEvaluator::CreateWithUTI( LaunchServices::BindingEvaluator *this@<X0>, NSString *a2@<X1>, LaunchServices::BindingEvaluator *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  LaunchServices::BindingEvaluator::BindingEvaluator(a3);
  _LSBindingLog();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138543362;
    unsigned int v14 = this;
    _os_log_impl(&dword_183E58000, v7, OS_LOG_TYPE_DEBUG, "BindingEvaluator::CreateWithUTI(%{public}@)", buf, 0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Creating binding evaluator for UTI %@",  v8,  this);
  uint64_t v9 = -[LaunchServices::BindingEvaluator copy](this, "copy");
  uint64_t v10 = (void *)*((void *)a3 + 2);
  *((void *)a3 + 2) = v9;

  uint64_t v11 = -[NSString copy](a2, "copy");
  int v12 = (void *)*((void *)a3 + 3);
  *((void *)a3 + 3) = v11;
}

void sub_183EBB714(_Unwind_Exception *a1)
{
}

uint64_t LaunchServices::BindingEvaluator::PrepareMimicForBinding(void *a1, uint64_t a2)
{
  uint64_t result = LaunchServices::TypeEvaluator::PrepareMimicForTypeEvaluation(a1, a2);
  if ((_DWORD)result) {
    return _LSPrepareMimicForBundleLookup(a1, a2) != 0;
  }
  return result;
}

uint64_t LaunchServices::BindingEvaluator::getOptions(LaunchServices::BindingEvaluator *this)
{
  return *((unsigned int *)this + 27);
}

void LaunchServices::BindingEvaluator::setFilter_NoIO(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = [a3 copy];
  uint64_t v6 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v5;

  uint64_t v7 = [a2 copy];
  uint64_t v8 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v7;
}

void LaunchServices::BindingEvaluator::evaluateBindings( LaunchServices::BindingEvaluator *a1@<X0>, LSContext *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void LaunchServices::BindingEvaluator::evaluateBindings( LaunchServices::BindingEvaluator *a1@<X0>, LSContext *a2@<X1>, void **a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  v22[12] = *(id *)MEMORY[0x1895F89C0];
  *a5 = 0LL;
  a5[1] = 0LL;
  a5[2] = 0LL;
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v20, a2, a1);
  if (a3)
  {
    uint64_t v9 = LaunchServices::BindingEvaluation::State::getTypeRecord((LaunchServices::BindingEvaluation::State *)&v20);
    uint64_t v10 = *a3;
    *a3 = (void *)v9;
  }

  LaunchServices::BindingEvaluation::runEvaluator(&v20, a4, (uint64_t *)&v17);
  if (v17 != v18)
  {
    std::vector<LSBinding>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 5));
    std::vector<LSBinding>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>( a5,  *a5,  (uint64_t)v17,  (uint64_t)v18,  0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 5));
    if ((LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)a1 + 110) & 2) != 0) && v18 != v17)
    {
      uint64_t v11 = 0LL;
      else {
        uint64_t v12 = ((char *)v18 - (char *)v17) / 96;
      }
      uint64_t v13 = 40LL;
      do
      {
        uint64_t v14 = LaunchServices::BindingEvaluation::getReasonFromBinding((uint64_t)&v17[v11]);
        uint64_t v15 = (void *)v14;
        if (v14) {
          id v16 = (__CFString *)v14;
        }
        else {
          id v16 = &stru_189D7B4C8;
        }
        objc_storeStrong((id *)(*a5 + v13), v16);

        v11 += 12LL;
        v13 += 48LL;
        --v12;
      }

      while (v12);
    }
  }

  uint64_t v19 = &v17;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)&v19);

  __int16 v17 = (id **)v22;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v17);
  LaunchServices::BindingEvaluator::~BindingEvaluator(&v21);
}

void sub_183EBB990( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id **a13, void **a14)
{
  a13 = (id **)&a9;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&a13);
  LaunchServices::BindingEvaluation::State::~State((id *)&a14);
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&a14);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::State::getTypeRecord(LaunchServices::BindingEvaluation::State *this)
{
  if (*((_BYTE *)this + 240))
  {
    id v1 = -[_UTDynamicTypeRecord _initWithContext:dynamicUTI:]( objc_alloc(&OBJC_CLASS____UTDynamicTypeRecord),  "_initWithContext:dynamicUTI:",  *(void *)this,  *((void *)this + 27));
  }

  else if (*((_DWORD *)this + 56))
  {
    id v1 = -[LSRecord _initWithContext:tableID:unitID:]( objc_alloc(&OBJC_CLASS____UTDeclaredTypeRecord),  "_initWithContext:tableID:unitID:");
  }

  else
  {
    id v1 = 0LL;
  }

  return v1;
}

uint64_t std::vector<LSBinding>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556LL) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<LSBinding>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)v7);
  }

  return result;
}

void sub_183EBBAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id LaunchServices::BindingEvaluation::getReasonFromBinding(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = "?";
    int v3 = *(unsigned __int8 *)(a1 + 72);
    if (v3 == 1) {
      uint64_t v2 = "beat next";
    }
    if (v3 == 255) {
      uint64_t v4 = "lost to prev";
    }
    else {
      uint64_t v4 = v2;
    }
    [NSString stringWithFormat:@"%@ (%s because %@)", *(void *)(a1 + 40), v4, v1];
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v5 = *(id *)(a1 + 40);
  }

  return v5;
}

void LaunchServices::BindingEvaluation::State::~State(id *this)
{
  uint64_t v2 = (id **)(this + 22);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v2);
  LaunchServices::BindingEvaluator::~BindingEvaluator(this + 1);
}

id LaunchServices::getLocalizedKindStringWithEvaluator( void **a1, void *a2, const LaunchServices::BindingEvaluator *a3, void *a4)
{
  v41[12] = *(id *)MEMORY[0x1895F89C0];
  id v7 = a2;
  char v33 = a1;
  id v34 = 0LL;
  char v35 = 0;
  id v36 = 0LL;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v8 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v33, v8, 0LL);

  if (v9)
  {
    LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v37, v9, a3);
    v38[12] = (id)1;
    v40 |= 0x1508Au;
    int v39 = 15;
    char v32 = 0;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    memset(v27, 0, sizeof(v27));
    KindStringFromState = (void *)LaunchServices::BindingEvaluation::getKindStringFromState( (LaunchServices::BindingEvaluation *)&v37,  (LaunchServices::BindingEvaluation::State *)&v32,  (BOOL *)v27,  v10);
    if (KindStringFromState)
    {
      if (!v7)
      {
        if (*(void *)a3)
        {
          [*(id *)a3 URL];
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "ls_preferredLocalizations");
          id v7 = (id)objc_claimAutoreleasedReturnValue();
        }

        else
        {
          id v7 = 0LL;
        }
      }

      if (v32)
      {
        uint64_t v16 = LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString( &v37,  (unsigned int *)v27,  (uint64_t)v7,  0);
        int v18 = (NSString *)v16;
        if (v32)
        {
          if (v16)
          {
            uint64_t v19 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find( *v37,  (_LSDatabase *)@"%@ Document",  v17);
            if (v19) {
              KindStringFromState = (void *)LaunchServices::CanonicalString::getLocalizedString(v19);
            }
          }
        }

        int v20 = v18;
      }

      else
      {
        int v20 = 0LL;
      }

      LaunchServices::LocalizedString::localizeUnsafely((uint64_t)KindStringFromState, *v37, v7);
      uint64_t v22 = (LaunchServices::BindingEvaluation::State *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        LaunchServices::BindingEvaluation::formatAndSanitizeKindString( (LaunchServices::BindingEvaluation *)&v37,  v22,  v20,  v21);
        KindStringFromState = (void *)objc_claimAutoreleasedReturnValue();
      }

      else if (a4)
      {
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10813LL,  (uint64_t)"getLocalizedKindStringWithEvaluator",  1048LL,  0LL);
        KindStringFromState = 0LL;
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        KindStringFromState = 0LL;
      }
    }

    *(void *)&v27[0] = v41;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)v27);
    LaunchServices::BindingEvaluator::~BindingEvaluator(v38);
  }

  else if (a4)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v13 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v33, v13, 0LL);

    if (v14) {
      id v15 = 0LL;
    }
    else {
      id v15 = v36;
    }
    KindStringFromState = 0LL;
    *a4 = v15;
  }

  else
  {
    KindStringFromState = 0LL;
  }

  id v23 = KindStringFromState;
  if (v33 && v35) {
    _LSContextDestroy(v33);
  }
  id v24 = v34;
  char v33 = 0LL;
  id v34 = 0LL;

  char v35 = 0;
  id v25 = v36;
  id v36 = 0LL;

  return v23;
}

void sub_183EBBF48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  LaunchServices::BindingEvaluation::State::~State(&a28);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a23);

  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluator::getLocalizedKindString( const LaunchServices::BindingEvaluator *a1, void **a2, void *a3, void *a4)
{
  return (id)objc_claimAutoreleasedReturnValue();
}

id LaunchServices::BindingEvaluator::getLocalizedKindStringDictionary( const LaunchServices::BindingEvaluator *a1, void **a2, void *a3)
{
  v63[12] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v51 = a2;
  id v52 = 0LL;
  char v53 = 0;
  id v54 = 0LL;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v51, v5, 0LL);

  if (v6)
  {
    uint64_t v55 = 0LL;
    uint64_t v56 = &v55;
    uint64_t v57 = 0x14012000000LL;
    id v58 = __Block_byref_object_copy__5;
    uint64_t v59 = __Block_byref_object_dispose__5;
    id v60 = " 5#0%3$02";
    LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)&v61, v6, a1);
    id v7 = v56;
    uint64_t v8 = (LaunchServices::BindingEvaluation *)(v56 + 6);
    v56[19] = 1LL;
    int v9 = *((_DWORD *)v7 + 41) | 0x1508A;
    *((_DWORD *)v7 + 40) = 15;
    *((_DWORD *)v7 + 41) = v9;
    char v50 = 0;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    *(_OWORD *)id v44 = 0u;
    __int128 v45 = 0u;
    KindStringFromState = (LaunchServices::LocalizedString *)LaunchServices::BindingEvaluation::getKindStringFromState( v8,  (LaunchServices::BindingEvaluation::State *)&v50,  v44,  v10);
    if (KindStringFromState)
    {
      if (v50)
      {
        LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString( (void **)v56 + 6,  (unsigned int *)v44,  0LL,  1);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      [v12 objectForKeyedSubscript:@"LSDefaultLocalizedValue"];
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue();
      [v12 allKeys];
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (v50)
      {
        if (v17)
        {
          int v20 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find( *(LaunchServices::CanonicalString **)v56[6],  (_LSDatabase *)@"%@ Document",  v18);
          if (v20) {
            KindStringFromState = (LaunchServices::LocalizedString *)LaunchServices::CanonicalString::getLocalizedString(v20);
          }
        }
      }

      LaunchServices::LocalizedString::getAllUnsafeLocalizations( KindStringFromState,  *(_LSDatabase **)v56[6],  0LL,  0LL,  0LL);
      id v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (v21)
      {
        uint64_t v38 = 0LL;
        int v39 = &v38;
        uint64_t v40 = 0x3032000000LL;
        id v41 = __Block_byref_object_copy__20;
        id v42 = __Block_byref_object_dispose__21;
        id v43 = 0LL;
        uint64_t v28 = MEMORY[0x1895F87A8];
        uint64_t v29 = 3221225472LL;
        __int128 v30 = ___ZNK14LaunchServices16BindingEvaluator32getLocalizedKindStringDictionaryEP9LSContextPU15__autoreleasingP7NSError_block_invoke;
        __int128 v31 = &unk_189D74178;
        id v32 = v12;
        id v33 = v19;
        id v34 = v17;
        id v36 = &v55;
        id v37 = &v38;
        id v16 = v21;
        id v35 = v16;
        [v16 enumerateKeysAndObjectsUsingBlock:&v28];
        uint64_t v22 = (void *)v39[5];
        if (v22)
        {
          uint64_t v23 = objc_msgSend(v22, "copy", v28, v29, v30, v31, v32, v33, v34);

          id v16 = (id)v23;
        }

        _Block_object_dispose(&v38, 8);
      }

      else if (a3)
      {
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10813LL,  (uint64_t)"getLocalizedKindStringDictionary",  1147LL,  0LL);
        id v16 = 0LL;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        id v16 = 0LL;
      }
    }

    else if (a3)
    {
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10813LL,  (uint64_t)"getLocalizedKindStringDictionary",  1150LL,  0LL);
      id v16 = 0LL;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      id v16 = 0LL;
    }

    _Block_object_dispose(&v55, 8);
    *(void *)id v44 = v63;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)v44);
    LaunchServices::BindingEvaluator::~BindingEvaluator(&v62);
  }

  else if (a3)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v13 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v51, v13, 0LL);

    if (v14) {
      id v15 = 0LL;
    }
    else {
      id v15 = v54;
    }
    id v16 = 0LL;
    *a3 = v15;
  }

  else
  {
    id v16 = 0LL;
  }

  id v24 = v16;
  if (v51 && v53) {
    _LSContextDestroy(v51);
  }
  id v25 = v52;
  uint64_t v51 = 0LL;
  id v52 = 0LL;

  char v53 = 0;
  id v26 = v54;
  id v54 = 0LL;

  return v24;
}

void sub_183EBC4A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24, id a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44)
{
  _Block_object_dispose(&a19, 8);
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a25);
  _Block_object_dispose(&a44, 8);
  LaunchServices::BindingEvaluation::State::~State(v44);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a39);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  LaunchServices::BindingEvaluator::BindingEvaluator( (LaunchServices::BindingEvaluator *)&a1[3].n128_i8[8],  (const LaunchServices::BindingEvaluator *)&a2[3].n128_i8[8]);
  a1[14].n128_u64[0] = 0LL;
  a1[14].n128_u64[1] = 0LL;
  a1[15].n128_u64[0] = 0LL;
  a1[15].n128_u64[1] = a2[15].n128_u64[1];
  a1[14] = a2[14];
  a1[15].n128_u64[0] = a2[15].n128_u64[0];
  a2[14].n128_u64[1] = 0LL;
  a2[15].n128_u64[0] = 0LL;
  a2[14].n128_u64[0] = 0LL;
  a1[16].n128_u8[0] = a2[16].n128_u8[0];
  unint64_t v4 = a2[16].n128_u64[1];
  a2[16].n128_u64[1] = 0LL;
  a1[16].n128_u64[1] = v4;
  __n128 result = a2[17];
  a1[18].n128_u8[0] = a2[18].n128_u8[0];
  a1[17] = result;
  unint64_t v6 = a2[18].n128_u64[1];
  a2[18].n128_u64[1] = 0LL;
  a1[18].n128_u64[1] = v6;
  a1[19].n128_u16[0] = a2[19].n128_u16[0];
  unint64_t v7 = a2[19].n128_u64[1];
  a2[19].n128_u64[1] = 0LL;
  a1[19].n128_u64[1] = v7;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  uint64_t v2 = (id **)(a1 + 224);
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v2);
  LaunchServices::BindingEvaluator::~BindingEvaluator((id *)(a1 + 56));
}

uint64_t LaunchServices::BindingEvaluation::getKindStringFromState( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, BOOL *a3, LaunchServices::BindingEvaluation::ExtendedBinding *a4)
{
  *(_OWORD *)__int128 v49 = 0u;
  *(_OWORD *)char v50 = 0u;
  *(_OWORD *)id obj = 0u;
  *(_OWORD *)__int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  if (*((_BYTE *)this + 96))
  {
    objc_msgSend(MEMORY[0x1896077D8], "currentHandler", a3, a4);
    id v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "const LocalizedString *LaunchServices::getKindStringFromState(State &, BOOL *, ExtendedBinding *)");
    id v43 = (void *)objc_claimAutoreleasedReturnValue();
    [v42 handleFailureInFunction:v43 file:@"LSBindingEvaluator.mm" lineNumber:1950 description:@"Attempted to get a kind string when performing bundle lookup."];
  }

  if (!*((_DWORD *)this + 56) && !*((_BYTE *)this + 240))
  {
    unint64_t v7 = 0LL;
LABEL_35:

LABEL_36:
    BOOL v31 = 0;
    goto LABEL_37;
  }

  TypeResolvable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeResolvable(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeResolvable, @"com.apple.resolvable", v9) & 1) != 0)
  {
    unint64_t v7 = @"Alias";
    goto LABEL_35;
  }

  TypeVolume = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeVolume(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeVolume, @"public.volume", v11) & 1) != 0)
  {
    unint64_t v7 = @"Volume";
    goto LABEL_35;
  }

  TypeApplication = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeApplication(**(_LSDatabase ***)this);
  if (LaunchServices::BindingEvaluation::conformsTo( (void ***)this,  TypeApplication,  @"com.apple.application",  v13))
  {
    uint64_t v14 = (void *)*((void *)this + 1);
    id v15 = @"Application";
    if (v14)
    {
      LODWORD(v51) = 0;
      v44[0] = 0LL;
      int v16 = _LSBundleFindWithNode(*(LSContext **)this, v14, &v51, v44);
      if (v44[0])
      {
        if ((*(void *)(v44[0] + 164) & 0x200000LL) != 0) {
          id v15 = @"Beta Application";
        }
      }

      else
      {
        int v32 = v16;
        _LSDefaultLog();
        id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          LaunchServices::BindingEvaluation::getKindStringFromState((uint64_t)v14, v32, v33);
        }

        id v15 = @"Application";
      }
    }

    unint64_t v7 = v15;
    goto LABEL_35;
  }

  TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypePackage, @"com.apple.package", v18) & 1) != 0)
  {
    unint64_t v7 = @"Package";
    goto LABEL_18;
  }

  TypeDirectory = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeDirectory(**(_LSDatabase ***)this);
  if ((LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeDirectory, @"public.directory", v24) & 1) != 0)
  {
    unint64_t v7 = @"Folder";
    goto LABEL_35;
  }

  TypeUnixExecutable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeUnixExecutable(**(_LSDatabase ***)this);
  int v27 = LaunchServices::BindingEvaluation::conformsTo( (void ***)this,  TypeUnixExecutable,  @"public.unix-executable",  v26);
  char v28 = v27;
  unint64_t v7 = @"Document";
  if (v27) {
    uint64_t v29 = @"Unix Executable File";
  }
  else {
    uint64_t v29 = @"Document";
  }

  if ((v28 & 1) == 0)
  {
LABEL_18:
    LaunchServices::BindingEvaluation::runEvaluator((void **)this, 0LL, v44);
    uint64_t v19 = v44[0];
    if (v44[0] == v44[1])
    {
      uint64_t v21 = 0LL;
    }

    else
    {
      __int128 v20 = *(_OWORD *)(v44[0] + 16);
      __int128 v45 = *(_OWORD *)v44[0];
      __int128 v46 = v20;
      obj[0] = *(id *)(v44[0] + 32);
      obj[1] = *(id *)(v19 + 40);
      LOWORD(v48[0]) = *(_WORD *)(v19 + 48);
      v48[1] = *(id *)(v19 + 56);
      v49[0] = *(id *)(v19 + 64);
      LOBYTE(v49[1]) = *(_BYTE *)(v19 + 72);
      v50[0] = *(id *)(v19 + 80);
      LODWORD(v50[1]) = *(_DWORD *)(v19 + 88);
      uint64_t v21 = *((void *)&v46 + 1);
      if ((_DWORD)v46)
      {
        if (*((void *)&v46 + 1))
        {
          if (!_LSClaimFlagsAreWildcard(*(_DWORD *)(*((void *)&v46 + 1) + 8LL)))
          {
            uint64_t LocalizedString = LaunchServices::LocalizedString::Get( **(LaunchServices::LocalizedString ***)this,  (_LSDatabase *)*(unsigned int *)(v21 + 20));
            if (LocalizedString)
            {
              uint64_t v51 = (id **)v44;
              std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
              goto LABEL_62;
            }
          }
        }
      }
    }

    int v39 = *((_DWORD *)this + 56);
    if (v39
      && (uint64_t v40 = *((void *)this + 29)) != 0
      && (*(_BYTE *)(v40 + 9) & 2) == 0
      && v39 != _UTTypeGetTypeApplication(**(_LSDatabase ***)this))
    {
      id v41 = (_LSDatabase *)_UTGetLocalizedDescription(**(void ***)this, *((_DWORD *)this + 56));
      uint64_t LocalizedString = LaunchServices::LocalizedString::Get(**(LaunchServices::LocalizedString ***)this, v41);
      uint64_t v51 = (id **)v44;
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
      if (LocalizedString)
      {
LABEL_62:
        BOOL v31 = 0;
        if (a2) {
          goto LABEL_43;
        }
        goto LABEL_44;
      }
    }

    else
    {
      uint64_t v51 = (id **)v44;
      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&v51);
    }

    if (*((void *)&v45 + 1))
    {
      if (v21) {
        BOOL v31 = !_LSClaimFlagsAreWildcard(*(_DWORD *)(v21 + 8));
      }
      else {
        BOOL v31 = 1;
      }
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  BOOL v31 = 0;
  unint64_t v7 = @"Unix Executable File";
LABEL_37:
  id v34 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find( **(LaunchServices::CanonicalString ***)this,  (_LSDatabase *)v7,  v30);
  if (v34)
  {
    uint64_t LocalizedString = LaunchServices::CanonicalString::getLocalizedString(v34);
    if (!a2) {
      goto LABEL_44;
    }
LABEL_43:
    *(_BYTE *)a2 = v31;
    goto LABEL_44;
  }

  _LSDefaultLog();
  id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
    LaunchServices::BindingEvaluation::getKindStringFromState((uint64_t)v7, v35);
  }

  uint64_t LocalizedString = 0LL;
  if (a2) {
    goto LABEL_43;
  }
LABEL_44:
  if (a3)
  {
    __int128 v36 = v46;
    *(_OWORD *)a3 = v45;
    *((_OWORD *)a3 + 1) = v36;
    objc_storeStrong((id *)a3 + 4, obj[0]);
    objc_storeStrong((id *)a3 + 5, obj[1]);
    *((_WORD *)a3 + 24) = v48[0];
    objc_storeStrong((id *)a3 + 7, v48[1]);
    objc_storeStrong((id *)a3 + 8, v49[0]);
    a3[72] = (BOOL)v49[1];
    objc_storeStrong((id *)a3 + 10, v50[0]);
    *((_DWORD *)a3 + 22) = v50[1];
  }

  if (!LocalizedString)
  {
    _LSDefaultLog();
    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      LaunchServices::BindingEvaluation::getKindStringFromState(v37);
    }
  }

  return LocalizedString;
}

void sub_183EBCBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding((id *)va);
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::getBoundDisplayNameConstructorsForKindString( void **a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v8 = (id *)(a2 + 16);
  if (!*((void *)a2 + 8))
  {
    id obj = 0LL;
    _LSBundleCopyNode(**a1, *a2, 0LL, 0LL, &obj);
    objc_storeStrong(v8, obj);
  }

  int v13 = *(_DWORD *)(*((void *)a2 + 1) + 160LL);
  int v9 = *a1;
  uint64_t v10 = *a2;
  uint64_t v11 = *((void *)a2 + 8);
  if (a4) {
    +[_LSDisplayNameConstructor displayNameConstructorsWithContext:bundle:bundleClass:node:error:]( &OBJC_CLASS____LSDisplayNameConstructor,  "displayNameConstructorsWithContext:bundle:bundleClass:node:error:",  v9,  v10,  &v13,  v11,  0LL);
  }
  else {
    +[_LSDisplayNameConstructor displayNameConstructorWithContext:bundle:bundleClass:node:preferredLocalizations:error:]( &OBJC_CLASS____LSDisplayNameConstructor,  "displayNameConstructorWithContext:bundle:bundleClass:node:preferredLocalizations:error:",  v9,  v10,  &v13,  v11,  a3,  0LL);
  }
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_183EBCCD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

{
}

void ___ZNK14LaunchServices16BindingEvaluator32getLocalizedKindStringDictionaryEP9LSContextPU15__autoreleasingP7NSError_block_invoke( uint64_t a1, uint64_t a2, LaunchServices::BindingEvaluation::State *a3)
{
  v18[1] = *MEMORY[0x1895F89C0];
  unint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    [v6 objectForKeyedSubscript:a2];
    uint64_t v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v8) {
      goto LABEL_9;
    }
    if ((unint64_t)[*(id *)(a1 + 32) count] >= 2)
    {
      int v9 = *(const __CFArray **)(a1 + 40);
      v18[0] = a2;
      CFArrayRef v10 = CFBundleCopyLocalizationsForPreferences( v9,  (CFArrayRef)[MEMORY[0x189603F18] arrayWithObjects:v18 count:1]);
      -[__CFArray firstObject](v10, "firstObject");
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (v11)
      {
        uint64_t v12 = [*(id *)(a1 + 32) objectForKeyedSubscript:v11];

        uint64_t v8 = (NSString *)v12;
        if (v12) {
          goto LABEL_9;
        }
      }

      else
      {
      }
    }
  }

  uint64_t v8 = (NSString *)*(id *)(a1 + 48);
LABEL_9:
  LaunchServices::BindingEvaluation::formatAndSanitizeKindString( (LaunchServices::BindingEvaluation *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 48LL),  a3,  v8,  v7);
  int v13 = (LaunchServices::BindingEvaluation::State *)objc_claimAutoreleasedReturnValue();
  if (v13 != a3)
  {
    uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    if (!v14)
    {
      uint64_t v15 = [*(id *)(a1 + 56) mutableCopy];
      uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8LL);
      __int16 v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    }

    [v14 setObject:v13 forKeyedSubscript:a2];
  }
}

void sub_183EBCE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::BindingEvaluation::formatAndSanitizeKindString( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, NSString *a3, _LSDisplayNameConstructor *a4)
{
  if (a3)
  {
    -[NSString unlocalizedNameWithContext:](a3, "unlocalizedNameWithContext:", *(void *)this, a4);
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", a2, v5);

    unint64_t v7 = (LaunchServices::BindingEvaluation::State *)v6;
  }

  else
  {
    unint64_t v7 = a2;
  }

  _LSBalanceBiDiControlCharacters(v7);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();

  _LSReplaceForbiddenCharacters(v8, 0LL);
  int v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_183EBCF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(id *this)
{
}

uint64_t std::optional<LSBinding>::operator=[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding const&,void>( uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  if (v4)
  {
    objc_storeStrong((id *)(a1 + 32), *(id *)(a2 + 32));
    objc_storeStrong((id *)(a1 + 40), *(id *)(a2 + 40));
  }

  else
  {
    *(void *)(a1 + 32) = *(id *)(a2 + 32);
    *(void *)(a1 + 40) = *(id *)(a2 + 40);
    *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  }

  return a1;
}

uint64_t LaunchServices::BindingEvaluator::compareBindings( LaunchServices::BindingEvaluator *this, LSContext *a2, const LSBinding *a3, const LSBinding *a4)
{
  v23[12] = *(id *)MEMORY[0x1895F89C0];
  LaunchServices::BindingEvaluation::State::State((LaunchServices::BindingEvaluation::State *)v21, a2, this);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  LODWORD(v16) = a3->claim;
  *((void *)&v16 + 1) = a3->claimData;
  LODWORD(v15) = a3->bundle;
  *((void *)&v15 + 1) = a3->bundleData;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  LODWORD(v10) = a4->claim;
  *((void *)&v10 + 1) = a4->claimData;
  LODWORD(v9) = a4->bundle;
  *((void *)&v9 + 1) = a4->bundleData;
  uint64_t v7 = LaunchServices::BindingEvaluation::compareBindings( (LaunchServices::BindingEvaluation *)v21,  (LaunchServices::BindingEvaluation::State *)&v15,  (const LaunchServices::BindingEvaluation::ExtendedBinding *)&v9,  v6);

  *(void *)&__int128 v15 = v23;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)&v15);
  LaunchServices::BindingEvaluator::~BindingEvaluator(&v22);
  return v7;
}

void sub_183EBD18C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, id a34)
{
}

uint64_t LaunchServices::BindingEvaluation::compareBindings( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3, const LaunchServices::BindingEvaluation::ExtendedBinding *a4)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  if ((*((_BYTE *)this + 116) & 0x40) == 0
    || (int v7 = LaunchServices::BindingEvaluation::compareVendors((uint64_t)a2, (uint64_t)a3),
        LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"vendor (prioritized is-Apple check)",  v7),  !v7)
    && (int v7 = LaunchServices::BindingEvaluation::compareBundleClass((uint64_t)a2, (uint64_t)a3),
        LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"system placeholder (prioritized is-Apple check)",  v7),  !v7))
  {
    if ((*((_BYTE *)a2 + 49) != 0) == (*((_BYTE *)a3 + 49) == 0))
    {
      int v7 = 0;
    }

    else
    {
      uint64_t v9 = *((void *)a2 + 3);
      if (v9) {
        BOOL v10 = (*(_BYTE *)(v9 + 8) & 1) == 0;
      }
      else {
        BOOL v10 = 1;
      }
      uint64_t v11 = *((void *)a3 + 3);
      if (v11) {
        LODWORD(v11) = *(_BYTE *)(v11 + 8) & 1;
      }
      int v12 = v10 | v11;
      int v13 = (int)((v10 & v11) << 31) >> 31;
      if (v12 == 1) {
        int v7 = v13;
      }
      else {
        int v7 = 1;
      }
    }

    LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"Apple default",  v7);
    if (!v7)
    {
      uint64_t v14 = *((void *)a2 + 3);
      if (!v14
        || !*((void *)a3 + 3)
        || ((int v15 = !_LSClaimFlagsAreWildcard(*(_DWORD *)(v14 + 8)),
             int v16 = _LSClaimFlagsAreWildcard(*(_DWORD *)(*((void *)a3 + 3) + 8LL)),
             (v15 & v16) != 0)
          ? (LOBYTE(v7) = 1)
          : (LOBYTE(v7) = -1),
            v15 != v16))
      {
        LOBYTE(v7) = 0;
      }

      LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"wildcard",  (char)v7);
    }
  }

  if (!(_BYTE)v7)
  {
    uint64_t v17 = *((void *)a2 + 3);
    if (v17)
    {
      uint64_t v18 = *((void *)a3 + 3);
      if (v18)
      {
        int v19 = *(__int16 *)(v17 + 12);
        int v20 = *(__int16 *)(v18 + 12);
        if (v19 > v20)
        {
          LOBYTE(v7) = 1;
LABEL_32:
          LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"handler rank",  (char)v7);
          goto LABEL_33;
        }

        if (v19 < v20)
        {
          LOBYTE(v7) = -1;
          goto LABEL_32;
        }
      }
    }

    LOBYTE(v7) = 0;
    goto LABEL_32;
  }

LABEL_33:
  if (!(_BYTE)v7)
  {
    if (*((_BYTE *)a3 + 48)) {
      BOOL v21 = *((_BYTE *)a2 + 48) != 0;
    }
    else {
      BOOL v21 = 1;
    }
    int v22 = v21 - 1;
    if (*((_BYTE *)a2 + 48) != 0 && *((_BYTE *)a3 + 48) == 0) {
      int v7 = 1;
    }
    else {
      int v7 = v22;
    }
    LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"legacy claim",  v7);
  }

  if (!(_BYTE)v7)
  {
    unsigned int v23 = LaunchServices::BindingEvaluation::compareDirectoryClasses(LaunchServices::BindingEvaluation::State &,LaunchServices::BindingEvaluation::ExtendedBinding const&,LaunchServices::BindingEvaluation::ExtendedBinding const&)::priority[*(unsigned __int8 *)(*((void *)a2 + 1) + 140LL)];
    unsigned int v24 = LaunchServices::BindingEvaluation::compareDirectoryClasses(LaunchServices::BindingEvaluation::State &,LaunchServices::BindingEvaluation::ExtendedBinding const&,LaunchServices::BindingEvaluation::ExtendedBinding const&)::priority[*(unsigned __int8 *)(*((void *)a3 + 1) + 140LL)];
    BOOL v25 = v23 >= v24;
    BOOL v26 = v23 > v24;
    if (v25) {
      int v7 = v26;
    }
    else {
      int v7 = -1;
    }
    LaunchServices::BindingEvaluation::logComparison((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)"dir class", v7);
  }

  if ((*((_BYTE *)this + 116) & 0x40) == 0)
  {
    if (!(_BYTE)v7)
    {
      int v27 = LaunchServices::BindingEvaluation::compareVendors((uint64_t)a2, (uint64_t)a3);
      LOBYTE(v7) = v27;
      LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"is Apple",  v27);
    }

    if (!(_BYTE)v7)
    {
      int v28 = LaunchServices::BindingEvaluation::compareBundleClass((uint64_t)a2, (uint64_t)a3);
      LOBYTE(v7) = v28;
      LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"system placeholder",  v28);
    }
  }

  if (!(_BYTE)v7)
  {
    uint64_t v29 = *((void *)a2 + 1);
    uint64_t v30 = *((void *)a3 + 1);
    if (*(_DWORD *)(v29 + 292) == *(_DWORD *)(v30 + 292))
    {
      __int128 v31 = *(_OWORD *)(v29 + 44);
      v48[0] = *(_OWORD *)(v29 + 28);
      v48[1] = v31;
      __int128 v32 = *(_OWORD *)(v30 + 44);
      v47[0] = *(_OWORD *)(v30 + 28);
      v47[1] = v32;
      uint64_t v33 = _LSVersionNumberCompare(v48, v47);
      if (v33 == -1) {
        char v34 = -1;
      }
      else {
        char v34 = 0;
      }
      if (v33 == 1) {
        LOBYTE(v7) = 1;
      }
      else {
        LOBYTE(v7) = v34;
      }
    }

    else
    {
      LOBYTE(v7) = 0;
    }

    LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"bundle version",  (char)v7);
  }

  if (!(_BYTE)v7)
  {
    id v35 = (void *)_CSStringCopyCFString();
    uint64_t v36 = _CSStringCopyCFString();
    id v37 = (void *)v36;
    if (v35) {
      BOOL v38 = v36 == 0;
    }
    else {
      BOOL v38 = 1;
    }
    if (v38)
    {
      LOBYTE(v7) = 0;
    }

    else
    {
      uint64_t v39 = [v35 compare:v36];
      if (v39 == -1) {
        LOBYTE(v7) = -1;
      }
      else {
        LOBYTE(v7) = v39 == 1;
      }
    }

    LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"desperation (bundle ID)",  (char)v7);
  }

  if (!(_BYTE)v7)
  {
    LaunchServices::BindingEvaluation::getBindingPath((void ***)this, a2, v8);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v42 = LaunchServices::BindingEvaluation::getBindingPath((void ***)this, a3, v41);
    id v43 = (void *)v42;
    LOBYTE(v7) = 0;
    if (v40 && v42)
    {
      uint64_t v44 = [v40 caseInsensitiveCompare:v42];
      if (v44 == 1) {
        char v45 = -1;
      }
      else {
        char v45 = 0;
      }
      if (v44 == -1) {
        LOBYTE(v7) = 1;
      }
      else {
        LOBYTE(v7) = v45;
      }
    }

    LaunchServices::BindingEvaluation::logComparison( (uint64_t)this,  (uint64_t)a2,  (uint64_t)a3,  (uint64_t)"last resort",  (char)v7);
  }

  return (char)v7;
}

    if (-[__CFArray count](v8, "count")
      && -[__CFArray indexOfObject:](v6, "indexOfObject:", @"LSDefaultLocalizedValue") != 0x7FFFFFFFFFFFFFFFLL)
    {
      _LSDatabaseGetNSStringFromArray(v29);
      int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      int v20 = @"🔴";
    }

    else
    {
      int v13 = 0LL;
LABEL_41:
      int v20 = @"❇️";
    }
  }

  if (v13 && [(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
  {
    BOOL v21 = -[os_log_s stringByAppendingString:](v13, "stringByAppendingString:", v20);

    int v13 = (os_log_s *)v21;
  }

    uint64_t v51 = 0LL;
    goto LABEL_34;
  }

  uint64_t v51 = 0LL;
LABEL_6:
  int v12 = (void *)_CSStringCopyCFString();
  if (!v12)
  {
LABEL_34:

    unsigned int v24 = 0LL;
    id v43 = 0LL;
    uint64_t v44 = 0LL;
    uint64_t v49 = 0LL;
    char v50 = 0LL;
    id obj = 0LL;
    __int128 v48 = 0LL;
    int v16 = 0LL;
    int v15 = 0LL;
    unsigned int v23 = 0LL;
    int v20 = 0LL;
    char v45 = 0LL;
    int v12 = 0LL;
    goto LABEL_32;
  }

  uint64_t v39 = *(_WORD *)_LSContainerGet();
  uint64_t v40 = *(_DWORD *)(v9 + 160);
  if ((v40 & 4) != 0)
  {
    id obj = (id)_CSStringCopyCFString();
    char v45 = (id)_CSStringCopyCFString();
  }

  else
  {
    char v45 = (id)_CSStringCopyCFString();
    id obj = v45;
  }

  uint64_t v44 = (id)_CSStringCopyCFString();
  id v43 = (id)_CSStringCopyCFString();
  BOOL v38 = *(_DWORD *)(v9 + 20);
  int v13 = *(_OWORD *)(v9 + 44);
  *(_OWORD *)__int128 buf = *(_OWORD *)(v9 + 28);
  *(_OWORD *)&uint8_t buf[16] = v13;
  _LSVersionNumberGetStringRepresentation(buf);
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue();
  char v50 = (void *)_CSStringCopyCFString();
  if (*(_DWORD *)(v9 + 96) && ([(id)__LSDefaultsGetSharedInstance() isInEducationMode] & 1) == 0)
  {
    uint64_t v14 = _LSAliasCopyResolvedNode(a4->db, *(_DWORD *)(v9 + 96), 0LL, 0LL, 0LL);
    [v14 URL];
    __int128 v48 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    __int128 v48 = 0LL;
  }

  [MEMORY[0x189603F50] dateWithTimeIntervalSinceReferenceDate:(double)(int)_LSBundleDataGetRegTime(v9)];
  int v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_DWORD *)(v9 + 92))
  {
    char v53 = MEMORY[0x1895F87A8];
    id v54 = 3221225472LL;
    uint64_t v55 = __91__LSPlugInKitProxy__initWithPlugin_andContext_applicationExtensionRecord_resolveAndDetach___block_invoke;
    uint64_t v56 = &unk_189D77C20;
    id v58 = &v60;
    uint64_t v59 = a4;
    uint64_t v57 = v12;
    _CSArrayEnumerateAllValues();
  }

  +[_LSLazyPropertyList lazyPropertyListWithContext:unit:]( &OBJC_CLASS____LSLazyPropertyList,  "lazyPropertyListWithContext:unit:",  a4,  *(unsigned int *)(v9 + 132));
  int v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[_LSLazyPropertyList lazyPropertyListWithContext:unit:]( &OBJC_CLASS____LSLazyPropertyList,  "lazyPropertyListWithContext:unit:",  a4,  *(unsigned int *)(v9 + 128));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  +[_LSLazyPropertyList lazyPropertyListWithContext:unit:]( &OBJC_CLASS____LSLazyPropertyList,  "lazyPropertyListWithContext:unit:",  a4,  _LSPluginGetSDKDictionaryDataUnit(a4->db, v7, v9));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v18)
  {
    _LSDefaultLog();
    int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = -[_LSLazyPropertyList propertyList](0LL);
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = obj;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v51;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&buf[24] = v36;
      id v37 = (void *)v36;
      _os_log_error_impl( &dword_183E58000,  v19,  OS_LOG_TYPE_ERROR,  "Invalid overlay plist for extension %@ (%@): %@",  buf,  0x20u);
    }
  }

  int v20 = -[_LSPlugInPropertyList initWithInfoPlist:SDKPlist:]( objc_alloc(&OBJC_CLASS____LSPlugInPropertyList),  "initWithInfoPlist:SDKPlist:",  v17,  v18);

  BOOL v21 = *(_OWORD *)(v9 + 76);
  *(_OWORD *)__int128 buf = *(_OWORD *)(v9 + 60);
  *(_OWORD *)&uint8_t buf[16] = v21;
  memset(v66, 0, sizeof(v66));
  if (_LSVersionNumberCompare(buf, v66))
  {
    int v22 = *(_OWORD *)(v9 + 76);
    *(_OWORD *)__int128 buf = *(_OWORD *)(v9 + 60);
    *(_OWORD *)&uint8_t buf[16] = v22;
    _LSVersionNumberGetStringRepresentation(buf);
    unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    unsigned int v23 = 0LL;
  }

  v52.receiver = self;
  v52.super_class = (Class)&OBJC_CLASS___LSPlugInKitProxy;
  unsigned int v24 = -[LSBundleProxy _initWithBundleUnit:context:bundleType:bundleID:localizedName:bundleContainerURL:dataContainerURL:resourcesDirectoryURL:iconsDictionary:iconFileNames:version:]( &v52,  sel__initWithBundleUnit_context_bundleType_bundleID_localizedName_bundleContainerURL_dataContainerURL_resourcesDirectoryURL_iconsDictionary_iconFileNames_version_,  0LL,  a4,  6LL,  v12,  0LL,  0LL,  v48,  v51,  0LL,  0LL,  v49);
  if (v24)
  {
    if (v46) {
      BOOL v25 = v46;
    }
    else {
      BOOL v25 = -[LSApplicationExtensionRecord _initWithContext:pluginID:pluginData:error:]( objc_alloc(&OBJC_CLASS___LSApplicationExtensionRecord),  "_initWithContext:pluginID:pluginData:error:",  a4,  v7,  v9,  0LL);
    }
    BOOL v26 = (void *)*((void *)v24 + 19);
    *((void *)v24 + 19) = v25;

    [*((id *)v24 + 19) containingBundleRecord];
    int v27 = (void *)objc_claimAutoreleasedReturnValue();
    int v28 = [v27 compatibilityObject];
    uint64_t v29 = (void *)*((void *)v24 + 27);
    *((void *)v24 + 27) = v28;

    *((_DWORD *)v24 + 37) = v40;
    objc_storeStrong((id *)v24 + 22, obj);
    objc_storeStrong((id *)v24 + 23, v45);
    objc_storeStrong((id *)v24 + 24, v44);
    objc_storeStrong((id *)v24 + 20, v43);
    *((_DWORD *)v24 + 36) = v38;
    objc_storeStrong((id *)v24 + 26, v15);
    if (v50)
    {
      uint64_t v30 = [objc_alloc(MEMORY[0x189607AB8]) initWithUUIDString:v50];
      __int128 v31 = (void *)*((void *)v24 + 25);
      *((void *)v24 + 25) = v30;
    }

    *((_BYTE *)v24 + 16_Block_object_dispose((const void *)(v1 - 152), 8) = (v39 & 0x10) != 0;
    [v24 _setInfoDictionary:v20];
    [v24 setMachOUUIDs:v61[5]];
    [v24 setSDKVersion:v23];
    __int128 v32 = (LaunchServices::DatabaseContext *)[v24 _setEntitlements:v16];
    if (v41 && _LSDatabaseContextGetDetachProxyObjects(v32))
    {
      [*((id *)v24 + 19) _resolveAllProperties];
      [*((id *)v24 + 19) containingBundleRecord];
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
      [v33 _resolveAllProperties];

      [*((id *)v24 + 19) detach];
    }
  }

  return v1;
}

void sub_183EBD68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluator::compareBundles( LaunchServices::BindingEvaluator *this, LSContext *a2, unsigned int a3, LSBundleData *a4, unsigned int a5, LSBundleData *a6)
{
  v8.claiuint64_t m = 0;
  memset(&v8.claimData, 0, 24);
  v8.bundle = a3;
  v8.bundleData = a4;
  v7.claiuint64_t m = 0;
  memset(&v7.claimData, 0, 24);
  v7.bundle = a5;
  v7.bundleData = a6;
  return LaunchServices::BindingEvaluator::compareBindings(this, a2, &v8, &v7);
}

uint64_t _LSBindingSetReasonTrackingEnabled(uint64_t result)
{
  LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled = result;
  return result;
}

uint64_t _LSBindingSetLogFile(uint64_t result)
{
  LaunchServices::BindingEvaluation::logFile = result;
  return result;
}

uint64_t _LSGetBindingForNodeOrSchemeOrUTI( int a1, void *a2, LaunchServices::BindingEvaluator *this, LaunchServices::BindingEvaluator *a4, int a5, int a6, int *a7, int a8, uint64_t a9)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  LOBYTE(v31[0]) = 0;
  char v36 = 0;
  if (a2)
  {
    LaunchServices::BindingEvaluator::CreateWithNode(a2, (LaunchServices::BindingEvaluator *)__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>( (LaunchServices::BindingEvaluator *)v31,  (const LaunchServices::BindingEvaluator *)__p);
LABEL_7:
    LaunchServices::BindingEvaluator::~BindingEvaluator(__p);
    uint64_t v13 = 4294956486LL;
    goto LABEL_8;
  }

  if (this)
  {
    LaunchServices::BindingEvaluator::CreateWithURLScheme(this, __p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>( (LaunchServices::BindingEvaluator *)v31,  (const LaunchServices::BindingEvaluator *)__p);
    goto LABEL_7;
  }

  if (a4)
  {
    LaunchServices::BindingEvaluator::CreateWithUTI(a4, 0LL, (LaunchServices::BindingEvaluator *)__p);
    std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>( (LaunchServices::BindingEvaluator *)v31,  (const LaunchServices::BindingEvaluator *)__p);
    goto LABEL_7;
  }

  uint64_t v13 = 4294967246LL;
LABEL_8:
  if (!v36) {
    return v13;
  }
  int v32 = a6;
  if (a5)
  {
    v24[0] = MEMORY[0x1895F87A8];
    v24[1] = 3221225472LL;
    void v24[2] = ___LSGetBindingForNodeOrSchemeOrUTI_block_invoke;
    v24[3] = &__block_descriptor_36_e60_B24__0__LSContext___8r__LSBinding_I__LSBundleData_I_______16l;
    int v25 = a5;
    uint64_t v14 = [v24 copy];
    int v15 = v34;
    char v34 = (void *)v14;

    uint64_t v16 = [@"bundle unit" copy];
    uint64_t v17 = v35;
    id v35 = (void *)v16;
  }

  int v33 = a8;
  if (a7)
  {
    int v18 = *a7;
    int v19 = operator new(4uLL);
    __p[0] = v19;
    *int v19 = v18;
    __p[1] = v19 + 1;
    *(void *)&__int128 v27 = v19 + 1;
    LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)v31, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }

  LaunchServices::BindingEvaluator::getBestBinding((uint64_t *)__p, (LaunchServices::BindingEvaluator *)v31);
  id v20 = 0LL;
  BOOL v21 = v20;
  if (v30)
  {
    if (!a9)
    {
      uint64_t v13 = 0LL;
      goto LABEL_21;
    }

    __int128 v22 = v27;
    *(_OWORD *)a9 = *(_OWORD *)__p;
    *(_OWORD *)(a9 + 16) = v22;
    objc_storeStrong((id *)(a9 + 32), obj);
    objc_storeStrong((id *)(a9 + 40), v29);
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = _LSGetOSStatusFromNSError(v20);
  }

  if (v30)
  {
LABEL_21:
  }

  if (v36) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(v31);
  }
  return v13;
}

void sub_183EBD964( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, id a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(&a36);
  }
  _Unwind_Resume(a1);
}

LaunchServices::BindingEvaluator *std::optional<LaunchServices::BindingEvaluator>::operator=[abi:nn180100]<LaunchServices::BindingEvaluator,void>( LaunchServices::BindingEvaluator *this, const LaunchServices::BindingEvaluator *a2)
{
  if (*((_BYTE *)this + 168))
  {
    LaunchServices::BindingEvaluator::operator=((uint64_t)this, (uint64_t)a2);
  }

  else
  {
    LaunchServices::BindingEvaluator::BindingEvaluator(this, a2);
    *((_BYTE *)this + 16_Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  }

  return this;
}

__CFString *LaunchServices::BindingEvaluation::State::getExtension( LaunchServices::BindingEvaluation::State *this)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (__CFString *)*((void *)this + 31);
  if (!v2)
  {
    int v3 = (void *)*((void *)this + 1);
    if (v3)
    {
      [v3 extensionWithError:0];
      int v4 = (const __CFString *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        _LSBindingLog();
        __int128 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138477827;
          uint64_t v16 = v4;
          _os_log_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_DEBUG,  "Got extension .%{private}@ from file URL.",  buf,  0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Got extension .%@ from file URL.",  v6,  v4);
      }
    }

    else
    {
      LSBinding v7 = (void *)*((void *)this + 4);
      if (v7)
      {
        [v7 pathExtension];
        LSBinding v8 = (void *)objc_claimAutoreleasedReturnValue();
        [v8 lowercaseString];
        uint64_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (v9)
        {
          _LSBindingLog();
          BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138477827;
            uint64_t v16 = v9;
            _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEBUG,  "Got extension .%{private}@ from caller-supplied filename. This is less accurate than passing a file URL.",  buf,  0xCu);
          }

          LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Got extension .%@ from caller-supplied filename. This is less accurate than passing a file URL.",  v11,  v9);
          int v4 = v9;
        }

        else
        {
          int v4 = &stru_189D7B4C8;
        }
      }

      else
      {
        int v4 = &stru_189D7B4C8;
      }
    }

    uint64_t v13 = (void *)*((void *)this + 31);
    int v12 = (const __CFString **)((char *)this + 248);
    void *v12 = v4;

    uint64_t v2 = (__CFString *)*v12;
  }

  return v2;
}

void sub_183EBDBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL LaunchServices::BindingEvaluation::State::shouldBindToTagClaims( LaunchServices::BindingEvaluation::State *this)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (*((_BYTE *)this + 257)) {
    return *((_BYTE *)this + 256) != 0;
  }
  if (!*((void *)this + 29) && !*((_BYTE *)this + 240))
  {
    uint64_t v11 = *((void *)this + 1);
    if (!v11)
    {
      uint64_t v10 = 0LL;
      goto LABEL_12;
    }

    if ([*((id *)this + 1) isRegularFile])
    {
      uint64_t v8 = [(id)v11 isResolvable];
      goto LABEL_6;
    }

    if (_LSNodeIsPackage(*(LSContext **)this, (void *)v11, 0LL))
    {
      BOOL v12 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v11 = _LSNodeIsAVCHDCollection((void *)v11) != 0;
      goto LABEL_22;
    }

    goto LABEL_11;
  }

  TypeData = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeData(**(_LSDatabase ***)this);
  int v4 = LaunchServices::BindingEvaluation::conformsTo((void ***)this, TypeData, @"public.data", v3);
  __int128 v5 = **(_LSDatabase ***)this;
  if (v4)
  {
    TypeResolvable = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeResolvable(v5);
    uint64_t v8 = LaunchServices::BindingEvaluation::conformsTo( (void ***)this,  TypeResolvable,  @"com.apple.resolvable",  v7);
LABEL_6:
    uint64_t v9 = v8;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    BOOL v12 = 0LL;
    uint64_t v13 = 1LL;
    goto LABEL_23;
  }

  TypeDirectory = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeDirectory(v5);
  if (!LaunchServices::BindingEvaluation::conformsTo( (void ***)this,  TypeDirectory,  @"public.directory",  v15))
  {
    if (!*((void *)this + 1))
    {
      if (*((void *)this + 29))
      {
        uint64_t v10 = 0LL;
        uint64_t v11 = 0LL;
        uint64_t v9 = 0LL;
        uint64_t v13 = 0LL;
        BOOL v12 = _LSBindingListGetEntryCount() != 0;
        goto LABEL_23;
      }

      TagSpecification = (void *)_UTDynamicGetTagSpecification(*((const __CFString **)this + 27));
      BOOL v12 = TagSpecification != 0LL;

      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
LABEL_13:
      uint64_t v9 = 0LL;
      uint64_t v13 = 0LL;
      goto LABEL_23;
    }

    goto LABEL_11;
  }

  TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage(**(_LSDatabase ***)this);
  if (!LaunchServices::BindingEvaluation::conformsTo( (void ***)this,  TypePackage,  @"com.apple.package",  v17))
  {
LABEL_11:
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
LABEL_12:
    BOOL v12 = 0LL;
    goto LABEL_13;
  }

  TypeAVCHDCollection = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeAVCHDCollection(**(_LSDatabase ***)this);
  uint64_t v11 = LaunchServices::BindingEvaluation::conformsTo( (void ***)this,  TypeAVCHDCollection,  @"public.avchd-collection",  v19);
  BOOL v12 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v13 = 0LL;
LABEL_22:
  uint64_t v10 = 1LL;
LABEL_23:
  *((_WORD *)this + 12_Block_object_dispose((const void *)(v1 - 152), 8) = v12 | ~((v9 | ~(_WORD)v13) & (v11 | ~(_WORD)v10)) | 0x100;
  _LSBindingLog();
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    if (*((_BYTE *)this + 256)) {
      BOOL v21 = "";
    }
    else {
      BOOL v21 = " NOT";
    }
    *(_DWORD *)__int128 buf = 136447490;
    __int128 v27 = v21;
    __int16 v28 = 1024;
    int v29 = v13;
    __int16 v30 = 1024;
    int v31 = v9;
    __int16 v32 = 1024;
    int v33 = v10;
    __int16 v34 = 1024;
    int v35 = v11;
    __int16 v36 = 1024;
    BOOL v37 = v12;
    _os_log_impl( &dword_183E58000,  v20,  OS_LOG_TYPE_DEBUG,  "Will%{public}s bind to tag claims (regular file? %i; resolvable? %i; package? %i; AVCHD? %i; tagged UTI? %i)",
      buf,
      0x2Au);
  }

  if (*((_BYTE *)this + 256)) {
    unsigned int v23 = "";
  }
  else {
    unsigned int v23 = " NOT";
  }
  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Will%s bind to tag claims (regular file? %i; resolvable? %i; package? %i; AVCHD? %i; tagged UTI? %i)",
    v22,
    v23,
    v13,
    v9,
    v10,
    v11,
    v12);
  if (!*((_BYTE *)this + 257)) {
    return 1LL;
  }
  return *((_BYTE *)this + 256) != 0;
}

uint64_t LaunchServices::BindingEvaluation::conformsTo( void ***this, const LaunchServices::BindingEvaluation::State *a2, CFStringRef inConformsToUTI, const __CFString *a4)
{
  unsigned int v5 = a2;
  unsigned int v11 = a2;
  int v7 = *((_DWORD *)this + 56);
  if (v7)
  {
    uint64_t v8 = **this;
    if (!v5)
    {
      uint64_t result = _UTGetActiveTypeForCFStringIdentifier(v8, inConformsToUTI, &v11);
      if (!result) {
        return result;
      }
      uint64_t v8 = **this;
      int v7 = *((_DWORD *)this + 56);
      unsigned int v5 = v11;
    }

    int v10 = _UTTypeConformsTo(v8, v7, v5);
  }

  else
  {
    if (!*((_BYTE *)this + 240)) {
      return 0LL;
    }
    int v10 = UTTypeConformsTo((CFStringRef)this[27], inConformsToUTI);
  }

  return v10 != 0;
}

uint64_t LaunchServices::BindingEvaluation::getBindingMemoryResource(LaunchServices::BindingEvaluation *this)
{
  if (LaunchServices::BindingEvaluation::getLocalAllocatorInfo(void)::onceToken != -1) {
    dispatch_once( &LaunchServices::BindingEvaluation::getLocalAllocatorInfo(void)::onceToken,  &__block_literal_global_227);
  }
  return std::pmr::get_default_resource(this);
}

void sub_183EBE0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *LaunchServices::BindingEvaluation::addAndEvaluate( uint64_t *result, void (*a2)(LaunchServices::BindingEvaluation *), uint64_t a3)
{
  uint64_t v167 = *MEMORY[0x1895F89C0];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5) < result[13])
  {
    v153 = (LaunchServices::BindingEvaluation *)result;
    int v4 = (id *)result[22];
    uint64_t v142 = result + 22;
    unsigned int v5 = (id *)result[23];
    if (v5 != v4)
    {
      uint64_t v6 = (uint64_t)(result + 25);
      do
      {
        v5 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( v6,  v5);
      }

      while (v5 != v4);
    }

    *((void *)v153 + 23) = v4;
    a2(v153);
    int v7 = v142;
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v142);
    if (!*((_BYTE *)v153 + 208))
    {
      uint64_t v8 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 23);
      int v152 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 22);
      unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v152) >> 5);
      if (*((void *)v153 + 13) >= v140) {
        uint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v152) >> 5);
      }
      else {
        uint64_t v9 = *((void *)v153 + 13);
      }
      __int128 v154 = v153;
      if (v9)
      {
        if (v9 >= 2)
        {
          unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
          unint64_t v11 = v10 + 1;
          BOOL v12 = (__int128 *)((char *)v152 + 96 * v10);
          do
          {
            std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>( (uint64_t)v152,  &v154,  v9,  v12);
            v12 -= 6;
            --v11;
          }

          while (v11);
        }

        uint64_t v151 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v9);
        if (v151 != v8)
        {
          for (uint64_t i = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v9);
                i != v8;
                uint64_t i = (LaunchServices::BindingEvaluation::State *)((char *)i + 96))
          {
            uint64_t v14 = (void *)MEMORY[0x186E2A59C]();
            int v16 = LaunchServices::BindingEvaluation::compareBindings(v153, i, v152, v15);
            if (v16 == -1)
            {
              int v19 = v153;
            }

            else
            {
              if (v16 == 1)
              {
                char isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17);
                objc_autoreleasePoolPop(v14);
                if ((isBindingOK & 1) == 0) {
                  continue;
                }
LABEL_21:
                std::swap[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( (__int128 *)i,  (__int128 *)v152);
                std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>( (uint64_t)v152,  &v154,  v9,  (__int128 *)v152);
                continue;
              }

              int v19 = v153;
              if ((LaunchServices::BindingEvaluation::isBindingOK(v153, i, v17) & 1) == 0)
              {
LABEL_23:
                objc_autoreleasePoolPop(v14);
                continue;
              }
            }

            char v21 = LaunchServices::BindingEvaluation::isBindingOK(v19, v152, v20);
            objc_autoreleasePoolPop(v14);
            if ((v21 & 1) == 0) {
              goto LABEL_21;
            }
          }
        }

        if (v9 >= 2)
        {
          int64_t v22 = 96 * v9 / 0x60uLL;
          do
          {
            uint64_t v23 = 0LL;
            unsigned int v24 = v151;
            uint64_t v25 = (uint64_t)v152;
            __int128 v155 = *(_OWORD *)v152;
            __int128 v156 = *((_OWORD *)v152 + 1);
            uint64_t v146 = *((void *)v152 + 4);
            uint64_t v147 = *((void *)v152 + 5);
            *((_OWORD *)v152 + 2) = 0u;
            __int16 v26 = *((_WORD *)v152 + 24);
            uint64_t v148 = *((void *)v152 + 7);
            uint64_t v149 = *((void *)v152 + 8);
            *(_OWORD *)((char *)v152 + 56) = 0u;
            char v144 = *((_BYTE *)v152 + 72);
            __int16 v145 = v26;
            uint64_t v150 = *((void *)v152 + 10);
            *((void *)v152 + 10) = 0LL;
            int v143 = *((_DWORD *)v152 + 22);
            do
            {
              uint64_t v27 = v25 + 96 * v23 + 96;
              uint64_t v28 = 2 * v23;
              uint64_t v23 = (2 * v23) | 1;
              uint64_t v29 = v28 + 2;
              if (v28 + 2 >= v22) {
                goto LABEL_39;
              }
              __int16 v30 = (void *)MEMORY[0x186E2A59C]();
              int v32 = LaunchServices::BindingEvaluation::compareBindings( v154,  (LaunchServices::BindingEvaluation::State *)v27,  (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v27 + 96),  v31);
              if (v32 == -1)
              {
                if (LaunchServices::BindingEvaluation::isBindingOK( v154,  (LaunchServices::BindingEvaluation::State *)v27,  v33)) {
                  goto LABEL_36;
                }
LABEL_38:
                objc_autoreleasePoolPop(v30);
                goto LABEL_39;
              }

              if (v32 != 1)
              {
                if (LaunchServices::BindingEvaluation::isBindingOK( v154,  (LaunchServices::BindingEvaluation::State *)v27,  v33))
                {
LABEL_36:
                  char v36 = LaunchServices::BindingEvaluation::isBindingOK( v154,  (LaunchServices::BindingEvaluation::State *)(v27 + 96),  v35);
                  objc_autoreleasePoolPop(v30);
                  if ((v36 & 1) != 0) {
                    goto LABEL_39;
                  }
LABEL_37:
                  v27 += 96LL;
                  uint64_t v23 = v29;
                  goto LABEL_39;
                }

                goto LABEL_38;
              }

              int v34 = LaunchServices::BindingEvaluation::isBindingOK( v154,  (LaunchServices::BindingEvaluation::State *)v27,  v33);
              objc_autoreleasePoolPop(v30);
              if (v34) {
                goto LABEL_37;
              }
LABEL_39:
              __int128 v37 = *(_OWORD *)(v27 + 16);
              *(_OWORD *)uint64_t v25 = *(_OWORD *)v27;
              *(_OWORD *)(v25 + 16) = v37;
              uint64_t v38 = *(void *)(v27 + 32);
              *(void *)(v27 + 32) = 0LL;
              uint64_t v39 = *(void **)(v25 + 32);
              *(void *)(v25 + 32) = v38;

              uint64_t v40 = *(void *)(v27 + 40);
              *(void *)(v27 + 40) = 0LL;
              id v41 = *(void **)(v25 + 40);
              *(void *)(v25 + 40) = v40;

              *(_WORD *)(v25 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(v27 + 48);
              uint64_t v42 = *(void *)(v27 + 56);
              *(void *)(v27 + 56) = 0LL;
              id v43 = *(void **)(v25 + 56);
              *(void *)(v25 + 56) = v42;

              uint64_t v44 = *(void *)(v27 + 64);
              *(void *)(v27 + 64) = 0LL;
              char v45 = *(void **)(v25 + 64);
              *(void *)(v25 + 64) = v44;

              *(_BYTE *)(v25 + 72) = *(_BYTE *)(v27 + 72);
              uint64_t v46 = *(void *)(v27 + 80);
              *(void *)(v27 + 80) = 0LL;
              __int128 v47 = *(void **)(v25 + 80);
              *(void *)(v25 + 80) = v46;

              *(_DWORD *)(v25 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(v27 + 88);
              uint64_t v25 = v27;
            }

            while (v23 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
            uint64_t v151 = (LaunchServices::BindingEvaluation::State *)((char *)v151 - 96);
            if ((LaunchServices::BindingEvaluation::State *)v27 == (LaunchServices::BindingEvaluation::State *)((char *)v24 - 96))
            {
              __int128 v72 = v156;
              *(_OWORD *)uint64_t v27 = v155;
              *(_OWORD *)(v27 + 16) = v72;
              __int128 v73 = *(void **)(v27 + 32);
              *(void *)(v27 + 32) = v146;

              id v74 = *(void **)(v27 + 40);
              *(void *)(v27 + 40) = v147;

              *(_WORD *)(v27 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v145;
              __int16 v75 = *(void **)(v27 + 56);
              *(void *)(v27 + 56) = v148;

              BOOL v76 = *(void **)(v27 + 64);
              *(void *)(v27 + 64) = v149;

              *(_BYTE *)(v27 + 72) = v144;
              __int16 v77 = *(void **)(v27 + 80);
              *(void *)(v27 + 80) = v150;

              *(_DWORD *)(v27 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v143;
              continue;
            }

            __int128 v48 = *((_OWORD *)v24 - 5);
            *(_OWORD *)uint64_t v27 = *((_OWORD *)v24 - 6);
            *(_OWORD *)(v27 + 16) = v48;
            uint64_t v49 = *((void *)v24 - 8);
            *((void *)v24 - _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
            char v50 = *(void **)(v27 + 32);
            *(void *)(v27 + 32) = v49;

            uint64_t v51 = *((void *)v24 - 7);
            *((void *)v24 - 7) = 0LL;
            id v52 = *(void **)(v27 + 40);
            *(void *)(v27 + 40) = v51;

            *(_WORD *)(v27 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *((_WORD *)v24 - 24);
            uint64_t v53 = *((void *)v24 - 5);
            *((void *)v24 - 5) = 0LL;
            id v54 = *(void **)(v27 + 56);
            *(void *)(v27 + 56) = v53;

            uint64_t v55 = *((void *)v24 - 4);
            *((void *)v24 - 4) = 0LL;
            uint64_t v56 = *(void **)(v27 + 64);
            *(void *)(v27 + 64) = v55;

            uint64_t v57 = *((void *)v24 - 2);
            *(_BYTE *)(v27 + 72) = *((_BYTE *)v24 - 24);
            *((void *)v24 - 2) = 0LL;
            id v58 = *(void **)(v27 + 80);
            *(void *)(v27 + 80) = v57;

            *(_DWORD *)(v27 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *((_DWORD *)v24 - 2);
            *(_OWORD *)uint64_t v151 = v155;
            *((_OWORD *)v151 + 1) = v156;
            uint64_t v59 = (void *)*((void *)v24 - 8);
            *((void *)v24 - _Block_object_dispose((const void *)(v1 - 152), 8) = v146;

            id v60 = (void *)*((void *)v24 - 7);
            *((void *)v24 - 7) = v147;

            *((_WORD *)v24 - 24) = v145;
            uint64_t v61 = (void *)*((void *)v24 - 5);
            *((void *)v24 - 5) = v148;

            id v62 = (void *)*((void *)v24 - 4);
            *((void *)v24 - 4) = v149;

            *((_BYTE *)v24 - 24) = v144;
            __int128 v63 = (void *)*((void *)v24 - 2);
            *((void *)v24 - 2) = v150;

            *((_DWORD *)v24 - 2) = v143;
            uint64_t v64 = v27 + 96 - (void)v152;
            if (v64 < 97) {
              continue;
            }
            __int128 v65 = (void *)MEMORY[0x186E2A59C]();
            unint64_t v66 = (v64 / 0x60uLL - 2) >> 1;
            id v67 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v66);
            int v69 = LaunchServices::BindingEvaluation::compareBindings( v154,  v67,  (const LaunchServices::BindingEvaluation::ExtendedBinding *)v27,  v68);
            if (v69 == -1)
            {
              int v78 = v154;
              if (LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70))
              {
LABEL_50:
                char v80 = LaunchServices::BindingEvaluation::isBindingOK( v78,  (LaunchServices::BindingEvaluation::State *)v27,  v79);
                objc_autoreleasePoolPop(v65);
                if ((v80 & 1) != 0) {
                  continue;
                }
LABEL_51:
                __int128 v81 = *(_OWORD *)(v27 + 16);
                *(_OWORD *)__int128 buf = *(_OWORD *)v27;
                __int128 v160 = v81;
                __int128 v82 = *(_OWORD *)(v27 + 32);
                *(_OWORD *)(v27 + 32) = 0u;
                __int128 v161 = v82;
                __int16 v162 = *(_WORD *)(v27 + 48);
                __int128 v83 = *(_OWORD *)(v27 + 56);
                *(_OWORD *)(v27 + 56) = 0u;
                __int128 v163 = v83;
                char v164 = *(_BYTE *)(v27 + 72);
                id v84 = *(void **)(v27 + 80);
                *(void *)(v27 + 80) = 0LL;
                id v165 = v84;
                int v166 = *(_DWORD *)(v27 + 88);
                __int128 v85 = v154;
                while (1)
                {
                  uint64_t v86 = (uint64_t)v67;
                  __int128 v87 = *((_OWORD *)v67 + 1);
                  *(_OWORD *)uint64_t v27 = *(_OWORD *)v67;
                  *(_OWORD *)(v27 + 16) = v87;
                  uint64_t v88 = *((void *)v67 + 4);
                  *((void *)v67 + 4) = 0LL;
                  uint64_t v89 = *(void **)(v27 + 32);
                  *(void *)(v27 + 32) = v88;

                  uint64_t v90 = *((void *)v67 + 5);
                  *((void *)v67 + 5) = 0LL;
                  uint64_t v91 = *(void **)(v27 + 40);
                  *(void *)(v27 + 40) = v90;

                  *(_WORD *)(v27 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *((_WORD *)v67 + 24);
                  uint64_t v92 = *((void *)v67 + 7);
                  *((void *)v67 + 7) = 0LL;
                  v93 = *(void **)(v27 + 56);
                  *(void *)(v27 + 56) = v92;

                  uint64_t v94 = *((void *)v67 + 8);
                  *((void *)v67 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
                  uint64_t v95 = *(void **)(v27 + 64);
                  *(void *)(v27 + 64) = v94;

                  *(_BYTE *)(v27 + 72) = *((_BYTE *)v67 + 72);
                  uint64_t v96 = *((void *)v67 + 10);
                  *((void *)v67 + 10) = 0LL;
                  id v97 = *(void **)(v27 + 80);
                  *(void *)(v27 + 80) = v96;

                  *(_DWORD *)(v27 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *((_DWORD *)v67 + 22);
                  if (!v66)
                  {
LABEL_64:
                    __int128 v105 = v160;
                    *(_OWORD *)uint64_t v86 = *(_OWORD *)buf;
                    *(_OWORD *)(v86 + 16) = v105;
                    uint64_t v106 = v161;
                    *(void *)&__int128 v161 = 0LL;
                    uint64_t v107 = *(void **)(v86 + 32);
                    *(void *)(v86 + 32) = v106;

                    uint64_t v108 = *((void *)&v161 + 1);
                    *((void *)&v161 + 1) = 0LL;
                    uint64_t v109 = *(void **)(v86 + 40);
                    *(void *)(v86 + 40) = v108;

                    *(_WORD *)(v86 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = v162;
                    uint64_t v110 = v163;
                    *(void *)&__int128 v163 = 0LL;
                    uint64_t v111 = *(void **)(v86 + 56);
                    *(void *)(v86 + 56) = v110;

                    uint64_t v112 = *((void *)&v163 + 1);
                    *((void *)&v163 + 1) = 0LL;
                    v113 = *(void **)(v86 + 64);
                    *(void *)(v86 + 64) = v112;

                    *(_BYTE *)(v86 + 72) = v164;
                    id v114 = v165;
                    id v165 = 0LL;
                    id v115 = *(void **)(v86 + 80);
                    *(void *)(v86 + 80) = v114;

                    *(_DWORD *)(v86 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v166;
                    goto LABEL_65;
                  }

                  uint64_t v98 = (void *)MEMORY[0x186E2A59C]();
                  unint64_t v66 = (v66 - 1) >> 1;
                  id v67 = (LaunchServices::BindingEvaluation::State *)((char *)v152 + 96 * v66);
                  int v100 = LaunchServices::BindingEvaluation::compareBindings( v85,  v67,  (const LaunchServices::BindingEvaluation::ExtendedBinding *)buf,  v99);
                  if (v100 == -1)
                  {
                  }

                  else
                  {
                    if (v100 == 1)
                    {
                      char v102 = LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101);
                      objc_autoreleasePoolPop(v98);
                      uint64_t v27 = v86;
                      if ((v102 & 1) == 0) {
                        goto LABEL_64;
                      }
                      continue;
                    }

                    if (!LaunchServices::BindingEvaluation::isBindingOK(v85, v67, v101))
                    {
LABEL_63:
                      objc_autoreleasePoolPop(v98);
                      goto LABEL_64;
                    }
                  }

                  char v104 = LaunchServices::BindingEvaluation::isBindingOK( v85,  (LaunchServices::BindingEvaluation::State *)buf,  v103);
                  objc_autoreleasePoolPop(v98);
                  uint64_t v27 = v86;
                  if ((v104 & 1) != 0) {
                    goto LABEL_64;
                  }
                }
              }

LABEL_62:
              objc_autoreleasePoolPop(v65);
              continue;
            }

            if (v69 != 1)
            {
              int v78 = v154;
              goto LABEL_62;
            }

            int v71 = LaunchServices::BindingEvaluation::isBindingOK(v154, v67, v70);
            objc_autoreleasePoolPop(v65);
            if (v71) {
              goto LABEL_51;
            }
LABEL_65:
            ;
          }

          while (v22-- > 2);
        }
      }

      unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5);
      int v7 = v142;
      if (v117 != v140)
      {
        objc_msgSend( NSString,  "stringWithFormat:",  @"binding count unexpectedly changed from %zu to %zu; please file a bug and relate to rdar://126722263",
          v140,
          v117);
        uint64_t v139 = (NSString *)objc_claimAutoreleasedReturnValue();
        _LSSetCrashMessage(v139);
        abort();
      }
    }

    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v7);
    _LSBindingLog();
    __int128 v118 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v119 = *((void *)v153 + 13);
      *(_DWORD *)__int128 buf = 134217984;
      *(void *)&uint8_t buf[4] = v119;
      _os_log_impl( &dword_183E58000,  v118,  OS_LOG_TYPE_DEBUG,  "Truncating a list of bindings to max %lu known-good ones.",  buf,  0xCu);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Truncating a list of bindings to max %lu known-good ones.",  v120,  *((void *)v153 + 13));
    uint64_t v121 = *(void *)(a3 + 24);
    __int128 v155 = 0uLL;
    *(void *)&__int128 v156 = 0LL;
    *((void *)&v156 + 1) = v121;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve( (uint64_t *)&v155,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5));
    size_t v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
    __int128 v154 = *(LaunchServices::BindingEvaluation **)(a3 + 24);
    std::unordered_set<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::unordered_set( (unint64_t)buf,  v122,  (uint64_t)&v158,  (uint64_t)&v157,  (uint64_t *)&v154);
    id v124 = *(unsigned int **)a3;
    id v123 = *(unsigned int **)(a3 + 8);
    while (v124 != v123)
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>( (unint64_t)buf,  v124,  v124);
      v124 += 24;
    }

    id v126 = (unsigned int *)*((void *)v153 + 22);
    for (uint64_t j = (unsigned int *)*((void *)v153 + 23); v126 != j; v126 += 24)
    {
      if (!std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>( buf,  v126))
      {
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>( (unint64_t)buf,  v126,  v126);
        uint64_t v127 = *((void *)&v155 + 1);
        if (*((void *)&v155 + 1) >= (unint64_t)v156)
        {
          uint64_t v128 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>( (uint64_t *)&v155,  (uint64_t)v126);
        }

        else
        {
          std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>( (uint64_t)&v156 + 8,  *((uint64_t *)&v155 + 1),  (uint64_t)v126);
          uint64_t v128 = v127 + 96;
        }

        *((void *)&v155 + 1) = v128;
      }
    }

    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign( (uint64_t)v142,  (uint64_t *)&v155);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table((uint64_t *)buf);
    *(void *)__int128 buf = &v155;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)buf);
    uint64_t v129 = *(void *)(a3 + 24);
    memset(buf, 0, sizeof(buf));
    *(void *)&__int128 v160 = 0LL;
    *((void *)&v160 + 1) = v129;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve( (uint64_t *)buf,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5));
    id v131 = v153;
    uint64_t v133 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 22);
    id v132 = (LaunchServices::BindingEvaluation::State *)*((void *)v153 + 23);
    if (v133 != v132)
    {
      do
      {
        id v131 = v153;
        uint64_t v133 = (LaunchServices::BindingEvaluation::State *)((char *)v133 + 96);
      }
    }

    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign( (uint64_t)v142,  (uint64_t *)buf);
    *(void *)&__int128 v155 = buf;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]((id ***)&v155);
    LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(v142);
    if (!*((_BYTE *)v153 + 208)
      && (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*((_BYTE *)v153 + 118) & 2) != 0))
    {
      unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5);
      if (v136 >= 2)
      {
        unint64_t v137 = v136 - 1;
        uint64_t v138 = 96LL;
        do
        {
          LaunchServices::BindingEvaluation::compareBindings( v153,  (LaunchServices::BindingEvaluation::State *)(*((void *)v153 + 22) + v138 - 96),  (const LaunchServices::BindingEvaluation::ExtendedBinding *)(*((void *)v153 + 22) + v138),  v135);
          v138 += 96LL;
          --v137;
        }

        while (v137);
      }
    }

    return (uint64_t *)std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>( (uint64_t *)a3,  *(void *)(a3 + 8),  *((void *)v153 + 22),  *((void *)v153 + 23),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v153 + 23) - *((void *)v153 + 22)) >> 5));
  }

  return result;
}

      int v16 = 1LL;
      goto LABEL_52;
    }

    if (!a8) {
      goto LABEL_59;
    }
LABEL_66:
    LaunchServices::Database::Context::error((id *)&a3->_contextPointer);
    uint64_t v17 = 0LL;
    int v34 = 0LL;
    *a8 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_55;
  }

  if (v86 && (_CSStringRetain(), v86)) {
    __int128 v37 = *(_DWORD *)(v86 + 40);
  }
  else {
    __int128 v37 = 0;
  }
LABEL_66:
  LODWORD(v105[0]) = v37;
  HIDWORD(v104) = _LSDatabaseCreateStringForCFString(v13, v34, 0);
  DWORD1(v100) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 8), 0);
  HIDWORD(v100) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 9), 0);
  DWORD2(v99[0]) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 15), 0);
  DWORD1(v101) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 10), 0);
  DWORD2(v101) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 11), 0);
  HIDWORD(v101) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 12), 0);
  [*((id *)a2 + 1) sortedArrayUsingSelector:sel_compare_];
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*((_BYTE *)a2 + 188) & 0x20) != 0)
  {
    _LSAliasGet(v13, v99[0]);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue();
    __int128 v47 = (void *)[v46 mutableCopy];

    __int128 v82 = 0u;
    __int128 v83 = 0u;
    char v80 = 0u;
    __int128 v81 = 0u;
    __int128 v48 = v42;
    uint64_t v49 = [v48 countByEnumeratingWithState:&v80 objects:v92 count:16];
    if (v49)
    {
      char v50 = *(void *)v81;
      do
      {
        for (uint64_t i = 0LL; i != v49; ++i)
        {
          if (*(void *)v81 != v50) {
            objc_enumerationMutation(v48);
          }
          objc_msgSend(*(id *)(*((void *)&v80 + 1) + 8 * i), "dataUsingEncoding:", 4, v75);
          id v52 = (void *)objc_claimAutoreleasedReturnValue();
          [v47 appendData:v52];
        }

        uint64_t v49 = [v48 countByEnumeratingWithState:&v80 objects:v92 count:16];
      }

      while (v49);
    }

    objc_msgSend(MEMORY[0x189607AB8], "_LS_UUIDWithData:digestType:", v47, 1);
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue();
    [v53 UUIDString];
    char v45 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    id v43 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    uint64_t v44 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x189604DB0]);
    char v45 = (__CFString *)CFUUIDCreateString(v43, v44);
    CFRelease(v44);
  }

  DWORD1(v105[2]) = _LSDatabaseCreateStringForCFString(v13, v45, 0);
  if ([v42 count]) {
    StringArray = _LSDatabaseCreateStringArray(v13, *((void **)a2 + 1), 0, 0LL);
  }
  else {
    StringArray = 0;
  }
  uint64_t v55 = (__CFString *)*((void *)a2 + 2);
  if (v55)
  {
    _LSGetVersionFromString(v55, buf);
    id v97 = *(_OWORD *)buf;
    uint64_t v98 = *(_OWORD *)&buf[16];
  }

  *(_OWORD *)((char *)&v99[3] + 12) = v97;
  *(_OWORD *)((char *)&v99[4] + 12) = v98;
  DWORD1(v102) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 13));
  if (([(id)__LSDefaultsGetSharedInstance() isInEducationMode] & 1) == 0) {
    DWORD2(v102) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 14));
  }
  LODWORD(v102) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 16));
  HIDWORD(v99[5]) = StringArray;
  DWORD2(v105[2]) = a7;
  if ((*(_BYTE *)a2 & 4) != 0)
  {
    uint64_t v56 = _LSPluginFindWithInfo(v13, 0LL, *((const __CFString **)a2 + 6), 0, 0LL, &v88, 0LL);
    uint64_t v57 = v56;
    if (v56 && *(_DWORD *)(v56 + 176) != LODWORD(v105[0]))
    {
      uint64_t v28 = 0LL;
      v78 &= ~4u;
    }

    else
    {
      DWORD2(v104) = _LSDatabaseCreateStringForCFString(v13, *((const __CFString **)a2 + 6), 0);
      if (v57)
      {
        LODWORD(v107) = *(_DWORD *)(v57 + 160) | 8;
        *(void *)__int128 buf = 0LL;
        else {
          uint64_t v28 = _LSGetOSStatusFromNSError(*(void **)buf);
        }
      }

      else
      {
        uint64_t v28 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v28 = 0LL;
    DWORD2(v104) = 0;
  }

  WORD2(v103) = _LSSliceMaskForSliceArray(*((void **)a2 + 19));
  DWORD2(v103) = *((_DWORD *)a2 + 46);
  LODWORD(v104) = v78;
  BYTE12(v103) = *((_BYTE *)a2 + 188);
  id v58 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v59 = -[FSNode initWithURL:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithURL:flags:error:",  *((void *)a2 + 3),  0LL,  0LL);
  BYTE12(v102) = _LSGetDirectoryClassForNode(v59);

  objc_autoreleasePoolPop(v58);
  id v60 = (void *)MEMORY[0x186E2A59C]();
  [*((id *)a2 + 17) objectForKeyedSubscript:*MEMORY[0x189604AA0]];
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v101) = LaunchServices::LocalizedString::Add(v13, v61, *((void **)a2 + 9));

  objc_autoreleasePoolPop(v60);
  id v62 = (void *)MEMORY[0x186E2A59C]();
  [*((id *)a2 + 17) objectForKeyedSubscript:*MEMORY[0x189604E10]];
  __int128 v63 = (void *)objc_claimAutoreleasedReturnValue();
  DWORD2(v100) = LaunchServices::LocalizedString::Add(v13, v63, *((void **)a2 + 9));

  objc_autoreleasePoolPop(v62);
  LODWORD(v103) = _LSPlistAdd((uint64_t)v13, *((void **)a2 + 18));
  BYTE13(v102) = *((_BYTE *)a2 + 180);
  uint64_t v90 = *(_OWORD *)((char *)&v99[3] + 12);
  uint64_t v91 = *(_OWORD *)((char *)&v99[4] + 12);
  uint64_t v64 = DWORD1(v99[1]) - 1;
  if ((DWORD1(v99[1]) - 1) > 0xA)
  {
    __int128 v65 = -1LL;
    unint64_t v66 = -1LL;
    id v67 = -1LL;
  }

  else
  {
    __int128 v65 = qword_183FBF408[v64];
    unint64_t v66 = qword_183FBF460[v64];
    id v67 = qword_183FBF4B8[v64];
  }

  _LSMakeVersionNumber(v65, v66, v67, v106);
  *(_OWORD *)__int128 buf = v90;
  *(_OWORD *)&uint8_t buf[16] = v91;
  uint64_t v107 = v106[0];
  uint64_t v108 = v106[1];
  __int128 v68 = (const __CFArray *)*((void *)a2 + 20);
  if (v68) {
    unint64_t Count = CFArrayGetCount(v68);
  }
  else {
    unint64_t Count = 0LL;
  }
  __int128 v70 = (const __CFArray *)*((void *)a2 + 21);
  if (v70) {
    __int128 v70 = (const __CFArray *)CFArrayGetCount(v70);
  }
  else {
LABEL_107:
  }
    int v71 = 0;
  HIDWORD(v105[2]) = v71;
  v89[10] = v104;
  v89[11] = v105[0];
  v89[6] = v100;
  v89[7] = v101;
  v89[8] = v102;
  v89[9] = v103;
  v89[2] = v99[2];
  v89[3] = v99[3];
  v89[4] = v99[4];
  v89[5] = v99[5];
  v89[0] = v99[0];
  v89[1] = v99[1];
  v89[12] = v105[1];
  v89[13] = v105[2];
  __int128 v72 = _LSPluginAdd(v13, (uint64_t)v89);
  HIDWORD(v8_Block_object_dispose((const void *)(v1 - 152), 8) = v72;
  if ((_DWORD)v72)
  {
    if (v71)
    {
      if (a7) {
        _LSBundleGet(v13, a7);
      }
      _LSRegisterTypeDeclarationsForPlugin(v13, v72, (uint64_t)v99, *((const void **)a2 + 21), *((void **)a2 + 17));
      _LSRegisterTypeDeclarationsForPlugin(v13, v72, (uint64_t)v99, *((const void **)a2 + 20), *((void **)a2 + 17));
    }

    __int128 v73 = _LSBundleGet(v13, a7);
    if (v73)
    {
      if (*(_DWORD *)(v73 + 460))
      {
        _CSArrayAppendValue();
        goto LABEL_116;
      }

      *(void *)__int128 buf = 0LL;
      LODWORD(v107) = _CSArrayCreate();
      if (!(_DWORD)v107 && (uint64_t v28 = _LSGetOSStatusFromNSError(*(void **)buf), (_DWORD)v28))
      {
      }

      else
      {
        if (_CSStoreWriteToUnit())
        {

          uint64_t v28 = 0LL;
          if (!v45) {
            goto LABEL_118;
          }
LABEL_117:
          CFRelease(v45);
          goto LABEL_118;
        }

        uint64_t v28 = _LSGetOSStatusFromNSError(*(void **)buf);
      }
    }

void sub_183EBEE00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, id **a33)
{
  a33 = (id **)&a27;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100](&a33);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::addClaims( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 0, *(_DWORD *)(v3 + 12));
  }
  if (LaunchServices::BindingEvaluation::State::shouldBindToTagClaims(this))
  {
    id v4 = *((id *)this + 1);
    if (v4)
    {

      goto LABEL_6;
    }

    if (!*((void *)this + 27))
    {
LABEL_6:
      if (*((void *)this + 1))
      {
        LaunchServices::BindingEvaluation::State::getExtension(this);
        unsigned int v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v6 = v5;
        if (v5 && -[__CFString length](v5, "length"))
        {
          int StringForCFString = _LSDatabaseGetStringForCFString(**(void ***)this, v6, 1);
          LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)this, 1u, StringForCFString);
        }
      }

      goto LABEL_14;
    }

    v26[0] = 0LL;
    v26[1] = v26;
    _OWORD v26[2] = 0x2020000000LL;
    int v27 = 0;
    v24[0] = 0LL;
    v24[1] = v24;
    void v24[2] = 0x2020000000LL;
    int v25 = -1;
    *(void *)&__int128 buf = MEMORY[0x1895F87A8];
    *((void *)&buf + 1) = 3221225472LL;
    uint64_t v29 = ___ZN14LaunchServices17BindingEvaluationL27addExtensionAndOSTypeClaimsERNS0_5StateE_block_invoke;
    __int16 v30 = &unk_189D74250;
    int v31 = (LaunchServices::BindingEvaluation *)v26;
    int v32 = v24;
    int v33 = this;
    int v18 = (void *)MEMORY[0x186E2A7B8](&buf);
    uint64_t v19 = *((void *)this + 29);
    if (v19)
    {
      _LSBindingListEnumerate(**(void ***)this, *(unsigned int *)(v19 + 80), v18);
    }

    else if (*((_BYTE *)this + 240))
    {
      _UTDynamicEnumerateTagsFoundInDatabase(**(void **)this, *((const __CFString **)this + 27), (uint64_t)v18);
    }

    _Block_object_dispose(v24, 8);
    _Block_object_dispose(v26, 8);
  }

  else
  {
    _LSBindingLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl( &dword_183E58000,  v8,  OS_LOG_TYPE_DEBUG,  "Skipping tag claims because the item is not a regular file or package and any UTI has no tags",  (uint8_t *)&buf,  2u);
    }

    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Skipping tag claims because the item is not a regular file or package and any UTI has no tags",  v9);
  }

void sub_183EBF310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void LaunchServices::BindingEvaluation::addAlternateUTIClaims( void ***this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if ((*((_BYTE *)this + 118) & 4) != 0)
  {
    _LSBindingLog();
    BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl(&dword_183E58000, v12, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims due to options", buf, 2u);
    }

    BOOL v14 = @"Skipping alternate UTI claims due to options";
    goto LABEL_18;
  }

  if (!this[27])
  {
    _LSBindingLog();
    BOOL v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl(&dword_183E58000, v16, OS_LOG_TYPE_DEBUG, "Skipping alternate UTI claims (no UTI!)", buf, 2u);
    }

    BOOL v14 = @"Skipping alternate UTI claims (no UTI!)";
    goto LABEL_18;
  }

  uint64_t v3 = (__CFString *)LaunchServices::BindingEvaluation::State::getExtension((LaunchServices::BindingEvaluation::State *)this);
  if (!v3 || (id v4 = v3, !-[__CFString length](v3, "length")))
  {
    _LSBindingLog();
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_183E58000,  v15,  OS_LOG_TYPE_DEBUG,  "Skipping alternate UTI claims (no path extension)",  buf,  2u);
    }

    BOOL v14 = @"Skipping alternate UTI claims (no path extension)";
LABEL_18:
    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v14, v13);
    return;
  }

  TypePackage = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypePackage((_LSDatabase *)**this);
  TypeData = (const LaunchServices::BindingEvaluation::State *)_UTTypeGetTypeData((_LSDatabase *)**this);
  if (LaunchServices::BindingEvaluation::conformsTo(this, TypePackage, @"com.apple.package", v7))
  {
    _LSBindingLog();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v10 = this[27];
      *(_DWORD *)__int128 buf = 138412290;
      int v27 = v10;
      _os_log_impl( &dword_183E58000,  v9,  OS_LOG_TYPE_DEBUG,  "Base type of UTI %@ was com.apple.package; looking for alternate UTI claims",
        buf,
        0xCu);
    }

    int v11 = @"Base type of UTI %@ was com.apple.package; looking for alternate UTI claims";
LABEL_24:

    LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v11, v20, this[27]);
    if ((_DWORD)TypePackage)
    {
      char v21 = **this;
      v24[0] = MEMORY[0x1895F87A8];
      v24[1] = 3221225472LL;
      void v24[2] = ___ZN14LaunchServices17BindingEvaluationL21addAlternateUTIClaimsERNS0_5StateE_block_invoke;
      void v24[3] = &__block_descriptor_52_e41_v32__0I8I12r____IIIIiII_8I_IIIIIIII_16_24lu40l8;
      int v25 = (int)TypePackage;
      void v24[4] = this;
      id v24[5] = v4;
      _UTEnumerateTypesForTag(v21, @"public.filename-extension", v4, v24);
    }

    return;
  }

  int v17 = LaunchServices::BindingEvaluation::conformsTo(this, TypeData, @"public.data", v8);
  _LSBindingLog();
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v18 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
  if (v17)
  {
    if (v18)
    {
      uint64_t v19 = this[27];
      *(_DWORD *)__int128 buf = 138412290;
      int v27 = v19;
      _os_log_impl( &dword_183E58000,  v9,  OS_LOG_TYPE_DEBUG,  "Base type of UTI %@ was public.data; looking for alternate UTI claims",
        buf,
        0xCu);
    }

    int v11 = @"Base type of UTI %@ was public.data; looking for alternate UTI claims";
    LODWORD(TypePackage) = (_DWORD)TypeData;
    goto LABEL_24;
  }

  if (v18)
  {
    unint64_t v22 = this[27];
    *(_DWORD *)__int128 buf = 138412290;
    int v27 = v22;
    _os_log_impl( &dword_183E58000,  v9,  OS_LOG_TYPE_DEBUG,  "Base type of UTI %@ was not public.data or com.apple.package; skipping alternate UTI claims",
      buf,
      0xCu);
  }

  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Base type of UTI %@ was not public.data or com.apple.package; skipping alternate UTI claims",
    v23,
    this[27]);
}

void LaunchServices::BindingEvaluation::addParentUTIClaims( LaunchServices::BindingEvaluation *this, LaunchServices::BindingEvaluation::State *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if ((*((_BYTE *)this + 117) & 1) != 0)
  {
    _LSBindingLog();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl(&dword_183E58000, v7, OS_LOG_TYPE_DEBUG, "Skipping parent UTI claims due to options", buf, 2u);
    }

    uint64_t v6 = @"Skipping parent UTI claims due to options";
  }

  else
  {
    int v3 = *((_DWORD *)this + 56);
    if (v3 == _UTTypeGetTypeWindowsExecutable(**(_LSDatabase ***)this))
    {
      _LSBindingLog();
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( &dword_183E58000,  v4,  OS_LOG_TYPE_DEBUG,  "Skipping parent UTI claims because the type is a Windows executable",  buf,  2u);
      }

      uint64_t v6 = @"Skipping parent UTI claims because the type is a Windows executable";
    }

    else
    {
      if (*((void *)this + 29))
      {
        _LSBindingLog();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v9 = *((void *)this + 27);
          *(_DWORD *)__int128 buf = 138412290;
          unint64_t v20 = v9;
          _os_log_impl(&dword_183E58000, v8, OS_LOG_TYPE_DEBUG, "Adding claims for parent UTIs of %@", buf, 0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding claims for parent UTIs of %@",  v10,  *((void *)this + 27));
        _UTTypeSearchConformsToTypes( **(void **)this,  *((_DWORD *)this + 56),  (uint64_t)LaunchServices::BindingEvaluation::searchParentUTIsForClaims,  (uint64_t)this,  0LL);
      }

      else if (*((_BYTE *)this + 240))
      {
        _LSBindingLog();
        int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v12 = *((void *)this + 27);
          *(_DWORD *)__int128 buf = 138412290;
          unint64_t v20 = v12;
          _os_log_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_DEBUG,  "Adding claims for parent UTIs of dynamic %@",  buf,  0xCu);
        }

        LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding claims for parent UTIs of dynamic %@",  v13,  *((void *)this + 27));
        BOOL v14 = (const __CFString *)*((void *)this + 27);
        v18[0] = MEMORY[0x1895F87A8];
        v18[1] = 3221225472LL;
        void v18[2] = ___ZN14LaunchServices17BindingEvaluationL18addParentUTIClaimsERNS0_5StateE_block_invoke;
        v18[3] = &__block_descriptor_40_e22_v24__0__NSString_8_B16l;
        void v18[4] = this;
        _UTDynamicEnumerateParentIdentifiers(v14, (uint64_t)v18);
      }

      _LSBindingLog();
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
        *(_DWORD *)__int128 buf = 134217984;
        unint64_t v20 = v16;
        _os_log_impl(&dword_183E58000, v15, OS_LOG_TYPE_DEBUG, "%llu bindings found", buf, 0xCu);
      }

      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 5);
      uint64_t v6 = @"%llu bindings found";
    }
  }

  LaunchServices::BindingEvaluation::logToFile((LaunchServices::BindingEvaluation *)v6, v5, v17);
}

void LaunchServices::BindingEvaluation::pushBackBinding( LaunchServices::BindingEvaluation *a1, uint64_t *a2, LaunchServices::BindingEvaluation::State *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*((void *)a3 + 1))
  {
    if (LaunchServices::BindingEvaluation::isBindingOK_NoIO(a1, a3, a3))
    {
      _LSBindingLog();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  a3);
        uint64_t v8 = *((void *)a3 + 5);
        *(_DWORD *)__int128 buf = 138543618;
        unint64_t v16 = v7;
        __int16 v17 = 2114;
        uint64_t v18 = v8;
        _os_log_impl(&dword_183E58000, v6, OS_LOG_TYPE_DEBUG, "+++ %{public}@ %{public}@", buf, 0x16u);
      }

      unint64_t v9 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  a3);
      LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"+++ %@ %@",  v10,  v9,  *((void *)a3 + 5));

      unint64_t v11 = a2[1];
      if (v11 >= a2[2])
      {
        uint64_t v12 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>( a2,  (uint64_t)a3);
      }

      else
      {
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>( (uint64_t)(a2 + 3),  a2[1],  (uint64_t)a3);
        uint64_t v12 = v11 + 96;
        a2[1] = v11 + 96;
      }

      a2[1] = v12;
    }
  }

  else
  {
    _LSBindingLog();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      BOOL v14 = (_LSBindingForLog *)*(unsigned int *)a3;
      *(_DWORD *)__int128 buf = 134217984;
      unint64_t v16 = v14;
      _os_log_impl( &dword_183E58000,  v13,  OS_LOG_TYPE_FAULT,  "pushing back binding for unit %llu that had no bundle data pointer!?",  buf,  0xCu);
    }
  }

void sub_183EBFB44(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::erase( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>( (uint64_t)&v9,  a3,  *(void *)(a1 + 8),  a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(id **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( a1 + 24,  v7);
      }

      while (v7 != v6);
    }

    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  }

  return a2;
}

uint64_t *LaunchServices::BindingEvaluation::ensureBundlePointersInBindings(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    uint64_t v3 = 0LL;
    do
    {
      if (!*(void *)(v1 + v3 + 8))
      {
        objc_msgSend( NSString,  "stringWithFormat:",  @"bundle data for bundle %llx was nil; binding %zu of %zu; please file a bug and relate to rdar://126722263",
          *(unsigned int *)(v1 + v3),
          0xAAAAAAAAAAAAAAABLL * (v3 >> 5),
          0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 5));
        id v4 = (NSString *)objc_claimAutoreleasedReturnValue();
        _LSSetCrashMessage(v4);
        abort();
      }

      v3 += 96LL;
    }

    while (v1 + v3 != v2);
  }

  return result;
}

void sub_183EBFC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( uint64_t a1, id *a2)
{
}

void _LSSetCrashMessage(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (dispatch_queue_s *)_LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke;
  block[3] = &unk_189D741C8;
  uint64_t v5 = v1;
  uint64_t v3 = v1;
  dispatch_sync(v2, block);
}

{
  NSString *v1;
  dispatch_queue_s *v2;
  NSString *v3;
  void block[4];
  NSString *v5;
  uint64_t v1 = a1;
  uint64_t v2 = (dispatch_queue_s *)_LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_189D741C8;
  uint64_t v5 = v1;
  uint64_t v3 = v1;
  dispatch_sync(v2, block);
}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = strdup((const char *)[v1 UTF8String]);
    _LSDefaultLog();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      ___ZL18_LSSetCrashMessageP8NSString_block_invoke_cold_1((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  uint64_t v11 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  while (1)
  {
    unint64_t v12 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr);
    if (v12 != v11) {
      break;
    }
    if (!__stxr((unint64_t)v3, (unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr))
    {
      int v13 = 1;
      goto LABEL_11;
    }
  }

  int v13 = 0;
  __clrex();
LABEL_11:
  if (v13) {
    BOOL v14 = (void *)v11;
  }
  else {
    BOOL v14 = v3;
  }
  free(v14);
  qword_18C49A7B0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void sub_183EBFE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15_LSLoggingQueuev_block_invoke()
{
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.logging", v2);
  id v1 = (void *)_LSLoggingQueue(void)::logQueue;
  _LSLoggingQueue(void)::logQueue = (uint64_t)v0;
}

void std::swap[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>(__int128 *a1, __int128 *a2)
{
  __int128 v28 = *a1;
  __int128 v29 = a1[1];
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  a1[2] = 0u;
  __int16 v6 = *((_WORD *)a1 + 24);
  uint64_t v8 = *((void *)a1 + 7);
  uint64_t v7 = *((void *)a1 + 8);
  *(__int128 *)((char *)a1 + 56) = 0u;
  char v9 = *((_BYTE *)a1 + 72);
  uint64_t v10 = *((void *)a1 + 10);
  *((void *)a1 + 10) = 0LL;
  int v11 = *((_DWORD *)a1 + 22);
  __int128 v12 = a2[1];
  *a1 = *a2;
  a1[1] = v12;
  uint64_t v13 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0LL;
  BOOL v14 = (void *)*((void *)a1 + 4);
  *((void *)a1 + 4) = v13;

  uint64_t v15 = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0LL;
  unint64_t v16 = (void *)*((void *)a1 + 5);
  *((void *)a1 + 5) = v15;

  *((_WORD *)a1 + 24) = *((_WORD *)a2 + 24);
  uint64_t v17 = *((void *)a2 + 7);
  *((void *)a2 + 7) = 0LL;
  uint64_t v18 = (void *)*((void *)a1 + 7);
  *((void *)a1 + 7) = v17;

  uint64_t v19 = *((void *)a2 + 8);
  *((void *)a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  unint64_t v20 = (void *)*((void *)a1 + 8);
  *((void *)a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v19;

  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  uint64_t v21 = *((void *)a2 + 10);
  *((void *)a2 + 10) = 0LL;
  unint64_t v22 = (void *)*((void *)a1 + 10);
  *((void *)a1 + 10) = v21;

  *((_DWORD *)a1 + 22) = *((_DWORD *)a2 + 22);
  *a2 = v28;
  a2[1] = v29;
  uint64_t v23 = (void *)*((void *)a2 + 4);
  *((void *)a2 + 4) = v5;

  unsigned int v24 = (void *)*((void *)a2 + 5);
  *((void *)a2 + 5) = v4;

  *((_WORD *)a2 + 24) = v6;
  int v25 = (void *)*((void *)a2 + 7);
  *((void *)a2 + 7) = v8;

  __int16 v26 = (void *)*((void *)a2 + 8);
  *((void *)a2 + _Block_object_dispose((const void *)(v1 - 152), 8) = v7;

  *((_BYTE *)a2 + 72) = v9;
  int v27 = (void *)*((void *)a2 + 10);
  *((void *)a2 + 10) = v10;

  *((_DWORD *)a2 + 22) = v11;
}

uint64_t LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()( LaunchServices::BindingEvaluation **a1, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  __int16 v6 = (void *)MEMORY[0x186E2A59C]();
  int v8 = LaunchServices::BindingEvaluation::compareBindings(*a1, a2, a3, v7);
  if (v8 == -1 || v8 != 1)
  {
    else {
      uint64_t isBindingOK = 0LL;
    }
  }

  else
  {
    uint64_t isBindingOK = LaunchServices::BindingEvaluation::isBindingOK(*a1, a2, v9);
  }

  objc_autoreleasePoolPop(v6);
  return isBindingOK;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0 &,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>( uint64_t a1, LaunchServices::BindingEvaluation **a2, uint64_t a3, __int128 *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      uint64_t v10 = (0x5555555555555556LL * (((uint64_t)a4 - a1) >> 5)) | 1;
      int v11 = (__int128 *)(a1 + 96 * v10);
      uint64_t v12 = 0x5555555555555556LL * (((uint64_t)a4 - a1) >> 5) + 2;
      if (v12 < a3
        && LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()( a2,  (LaunchServices::BindingEvaluation::State *)(a1 + 96 * v10),  (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v11 + 6)))
      {
        v11 += 6;
        uint64_t v10 = v12;
      }

      if ((LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()( a2,  (LaunchServices::BindingEvaluation::State *)v11,  (const LaunchServices::BindingEvaluation::ExtendedBinding *)v5) & 1) == 0)
      {
        __int128 v13 = v5[1];
        __int128 v41 = *v5;
        __int128 v42 = v13;
        __int128 v14 = v5[2];
        void v5[2] = 0u;
        __int128 v43 = v14;
        __int16 v44 = *((_WORD *)v5 + 24);
        __int128 v15 = *(__int128 *)((char *)v5 + 56);
        *(__int128 *)((char *)v5 + 56) = 0u;
        char v46 = *((_BYTE *)v5 + 72);
        unint64_t v16 = (void *)*((void *)v5 + 10);
        *((void *)v5 + 10) = 0LL;
        id v47 = v16;
        int v48 = *((_DWORD *)v5 + 22);
        __int128 v45 = v15;
        do
        {
          uint64_t v17 = v5;
          uint64_t v5 = v11;
          __int128 v18 = v11[1];
          *uint64_t v17 = *v11;
          v17[1] = v18;
          uint64_t v19 = *((void *)v11 + 4);
          *((void *)v11 + 4) = 0LL;
          unint64_t v20 = (void *)*((void *)v17 + 4);
          *((void *)v17 + 4) = v19;

          uint64_t v21 = *((void *)v11 + 5);
          *((void *)v11 + 5) = 0LL;
          unint64_t v22 = (void *)*((void *)v17 + 5);
          *((void *)v17 + 5) = v21;

          *((_WORD *)v17 + 24) = *((_WORD *)v11 + 24);
          uint64_t v23 = *((void *)v11 + 7);
          *((void *)v11 + 7) = 0LL;
          unsigned int v24 = (void *)*((void *)v17 + 7);
          *((void *)v17 + 7) = v23;

          uint64_t v25 = *((void *)v11 + 8);
          *((void *)v11 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
          __int16 v26 = (void *)*((void *)v17 + 8);
          *((void *)v17 + _Block_object_dispose((const void *)(v1 - 152), 8) = v25;

          *((_BYTE *)v17 + 72) = *((_BYTE *)v11 + 72);
          uint64_t v27 = *((void *)v11 + 10);
          *((void *)v11 + 10) = 0LL;
          __int128 v28 = (void *)*((void *)v17 + 10);
          *((void *)v17 + 10) = v27;

          *((_DWORD *)v17 + 22) = *((_DWORD *)v11 + 22);
          if (v7 < v10) {
            break;
          }
          uint64_t v29 = (2 * v10) | 1;
          int v11 = (__int128 *)(a1 + 96 * v29);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v29;
          }

          else if (LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()( a2,  (LaunchServices::BindingEvaluation::State *)(a1 + 96 * v29),  (const LaunchServices::BindingEvaluation::ExtendedBinding *)(v11 + 6)))
          {
            v11 += 6;
          }

          else
          {
            uint64_t v10 = v29;
          }
        }

        while (!LaunchServices::BindingEvaluation::sort(LaunchServices::BindingEvaluation::State &)::$_0::operator()( a2,  (LaunchServices::BindingEvaluation::State *)v11,  (const LaunchServices::BindingEvaluation::ExtendedBinding *)&v41));
        __int128 v30 = v42;
        *uint64_t v5 = v41;
        v5[1] = v30;
        uint64_t v31 = v43;
        *(void *)&__int128 v43 = 0LL;
        int v32 = (void *)*((void *)v5 + 4);
        *((void *)v5 + 4) = v31;

        uint64_t v33 = *((void *)&v43 + 1);
        *((void *)&v43 + 1) = 0LL;
        uint64_t v34 = (void *)*((void *)v5 + 5);
        *((void *)v5 + 5) = v33;

        *((_WORD *)v5 + 24) = v44;
        uint64_t v35 = v45;
        *(void *)&__int128 v45 = 0LL;
        char v36 = (void *)*((void *)v5 + 7);
        *((void *)v5 + 7) = v35;

        uint64_t v37 = *((void *)&v45 + 1);
        *((void *)&v45 + 1) = 0LL;
        uint64_t v38 = (void *)*((void *)v5 + 8);
        *((void *)v5 + _Block_object_dispose((const void *)(v1 - 152), 8) = v37;

        *((_BYTE *)v5 + 72) = v46;
        id v39 = v47;
        id v47 = 0LL;
        uint64_t v40 = (void *)*((void *)v5 + 10);
        *((void *)v5 + 10) = v39;

        *((_DWORD *)v5 + 22) = v48;
      }
    }
  }

void sub_183EC0360( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

uint64_t *std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::reserve( uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    void v5[4] = result + 3;
    v5[0] = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>( result + 3,  a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 96 * v4;
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer( v2,  v5);
    return std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(v5);
  }

  return result;
}

void sub_183EC0414(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

unint64_t std::unordered_set<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::unordered_set( unint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *a5;
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *a5;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0LL;
  *(_DWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 1065353216;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>( a1,  a2);
  return a1;
}

void sub_183EC046C(_Unwind_Exception *a1)
{
}

unint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>( unint64_t result, size_t __n)
{
  uint64_t v2 = result;
  if (__n == 1)
  {
    unint64_t v3 = 2LL;
  }

  else
  {
    unint64_t v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      uint64_t result = std::__next_prime(__n);
      unint64_t v3 = result;
    }
  }

  int8x8_t v4 = *(int8x8_t *)(v2 + 8);
  if (v3 > *(void *)&v4) {
    return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>( v2,  v3);
  }
  if (v3 < *(void *)&v4)
  {
    uint64_t result = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 40) / *(float *)(v2 + 48));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4), v5.i16[0] = vaddlv_u8(v5), v5.u32[0] > 1uLL))
    {
      uint64_t result = std::__next_prime(result);
    }

    else
    {
      uint64_t v6 = 1LL << -(char)__clz(result - 1);
      if (result >= 2) {
        uint64_t result = v6;
      }
    }

    if (v3 <= result) {
      unint64_t v3 = result;
    }
    if (v3 < *(void *)&v4) {
      return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>( v2,  v3);
    }
  }

  return result;
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__do_rehash<true>( uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 16) + 16LL))( *(void *)(result + 16),  8 * a2,  8LL);
    uint64_t v4 = *(void *)v2;
    *(void *)uint64_t v2 = result;
    if (v4) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v2 + 16) + 24LL))( *(void *)(v2 + 16),  v4,  8LL * *(void *)(v2 + 8),  8LL);
    }
    uint64_t v5 = 0LL;
    *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 152), 8) = a2;
    do
      *(void *)(*(void *)v2 + 8 * v5++) = 0LL;
    while (a2 != v5);
    uint64_t v6 = *(void **)(v2 + 24);
    if (v6)
    {
      unint64_t v7 = v6[1];
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }

      else
      {
        v7 &= a2 - 1;
      }

      *(void *)(*(void *)v2 + 8 * v7) = v2 + 24;
      uint64_t v10 = (void *)*v6;
      if (*v6)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= a2) {
              v11 %= a2;
            }
          }

          else
          {
            v11 &= a2 - 1;
          }

          if (v11 != v7)
          {
            if (!*(void *)(*(void *)v2 + 8 * v11))
            {
              *(void *)(*(void *)v2 + 8 * v11) = v6;
              goto LABEL_24;
            }

            void *v6 = *v10;
            *uint64_t v10 = **(void **)(*(void *)v2 + 8 * v11);
            **(void **)(*(void *)v2 + 8 * v11) = v10;
            uint64_t v10 = v6;
          }

          unint64_t v11 = v7;
LABEL_24:
          uint64_t v6 = v10;
          uint64_t v10 = (void *)*v10;
          unint64_t v7 = v11;
        }

        while (v10);
      }
    }
  }

  else
  {
    uint64_t v9 = *(void *)result;
    *(void *)uint64_t result = 0LL;
    if (v9) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(result + 16) + 24LL))( *(void *)(result + 16),  v9,  8LL * *(void *)(result + 8),  8LL);
    }
    *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
  }

  return result;
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::~__hash_table( uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      (*(void (**)(uint64_t))(*(void *)a1[4] + 24LL))(a1[4]);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *a1;
  *a1 = 0LL;
  if (v4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 24LL))(a1[2], v4, 8 * a1[1], 8LL);
  }
  return a1;
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>( unint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    uint64_t v9 = *(uint64_t **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = *(void *)i)
      {
        unint64_t v11 = *(void *)(i + 8);
        if (v11 == v6)
        {
          if (*(_DWORD *)(i + 16) == (_DWORD)v6) {
            return i;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  24LL,  8LL);
  *(void *)uint64_t i = 0LL;
  *(void *)(i + _Block_object_dispose((const void *)(v1 - 152), 8) = v6;
  *(_DWORD *)(i + 16) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 40) + 1LL);
  float v13 = *(float *)(a1 + 48);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::pmr::polymorphic_allocator<unsigned int>>::__rehash<true>( a1,  v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  __int128 v18 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *(void *)uint64_t i = *v18;
LABEL_38:
    uint64_t *v18 = i;
    goto LABEL_39;
  }

  *(void *)uint64_t i = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = i;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*(void *)i)
  {
    unint64_t v19 = *(void *)(*(void *)i + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v19 >= v7) {
        v19 %= v7;
      }
    }

    else
    {
      v19 &= v7 - 1;
    }

    __int128 v18 = (uint64_t *)(*(void *)a1 + 8 * v19);
    goto LABEL_38;
  }

void sub_183EC0974(_Unwind_Exception *a1)
{
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__push_back_slow_path<LaunchServices::BindingEvaluation::ExtendedBinding const&>( uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 3);
  if (0x5555555555555556LL * ((a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556LL * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555LL) {
    unint64_t v7 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v15 = a1 + 3;
  if (v7) {
    uint64_t v8 = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>( a1 + 3,  v7);
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v11 = v8;
  uint64_t v12 = v8 + 96 * v2;
  unint64_t v14 = v8 + 96 * v7;
  std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>( v6,  v12,  a2);
  uint64_t v13 = v12 + 96;
  std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer( a1,  &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(&v11);
  return v9;
}

void sub_183EC0A90(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = *(id *)(a3 + 32);
  *(void *)(a2 + 40) = *(id *)(a3 + 40);
  *(_WORD *)(a2 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(a3 + 48);
  *(void *)(a2 + 56) = *(id *)(a3 + 56);
  *(void *)(a2 + 64) = *(id *)(a3 + 64);
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a3 + 72);
  id result = *(id *)(a3 + 80);
  *(void *)(a2 + 80) = result;
  *(_DWORD *)(a2 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a3 + 88);
  return result;
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer( uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>( (uint64_t)(a1 + 3),  a1[1],  a1[1],  *a1,  *a1,  a2[1],  a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>( void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return (*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)*a1 + 16LL))(*a1, 96 * a2, 8LL);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a6;
  if (a3 != a5)
  {
    uint64_t v8 = 0LL;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      __int128 v11 = *(_OWORD *)(a3 + v8 - 80);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 + v8 - 96);
      *(_OWORD *)(v9 - 80) = v11;
      __int128 v12 = *(_OWORD *)(a3 + v8 - 64);
      *(_OWORD *)(v10 - 64) = 0uLL;
      *(_OWORD *)(v9 - 64) = v12;
      *(_WORD *)(v9 - 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(a3 + v8 - 48);
      __int128 v13 = *(_OWORD *)(a3 + v8 - 40);
      *(_OWORD *)(v10 - 40) = 0uLL;
      *(_OWORD *)(v9 - 40) = v13;
      *(_BYTE *)(v9 - 24) = *(_BYTE *)(a3 + v8 - 24);
      uint64_t v14 = *(void *)(a3 + v8 - 16);
      *(void *)(v10 - 16) = 0LL;
      *(void *)(v9 - 16) = v14;
      *(_DWORD *)(v9 - _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a3 + v8 - 8);
      v8 -= 96LL;
    }

    while (a3 + v8 != a5);
  }

  return result;
}

void *std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer( void *a1)
{
  if (*a1) {
    (*(void (**)(void, void, void, uint64_t))(**(void **)a1[4] + 24LL))( *(void *)a1[4],  *a1,  a1[3] - *a1,  8LL);
  }
  return a1;
}

void std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::clear[abi:nn180100]( void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( v4,  (id *)(i - 96));
  }

void std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_assign( uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 == a2[3] || ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 32LL))(v4) & 1) != 0)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate((id **)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  else
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__assign_with_size[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>>( a1,  *a2,  a2[1],  0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5));
  }

void std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__assign_with_size[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>>( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(id **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate((id **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vallocate[abi:nn180100]( (uint64_t *)a1,  v10);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>( a1 + 24,  a2,  a3,  *(void *)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 5) < a4)
  {
    uint64_t v12 = a2 + 32 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>( (uint64_t)&v16,  a2,  v12,  (uint64_t)v8);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>( a1 + 24,  v12,  a3,  *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v11;
    return;
  }

  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>( (uint64_t)&v17,  a2,  a3,  (uint64_t)v8);
  uint64_t v14 = v13;
  unint64_t v15 = *(id **)(a1 + 8);
  if (v15 != v13)
  {
    do
    {
      v15 -= 12;
      std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( a1 + 24,  v15);
    }

    while (v15 != v14);
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v14;
}

void sub_183EC0EE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v2;
  _Unwind_Resume(a1);
}

void sub_183EC0EEC(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v2;
  _Unwind_Resume(a1);
}

id **std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vdeallocate( id **result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    unint64_t v3 = result[1];
    uint64_t v4 = *result;
    if (v3 != v1)
    {
      do
      {
        v3 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( (uint64_t)(v2 + 3),  v3);
      }

      while (v3 != v1);
      uint64_t v4 = *v2;
    }

    v2[1] = v1;
    uint64_t result = (id **)(*((uint64_t (**)(id *, id *, int64_t, uint64_t))*v2[3] + 3))( v2[3],  v4,  (char *)v2[2] - (char *)v4,  8LL);
    void *v2 = 0LL;
    v2[1] = 0LL;
    v2[2] = 0LL;
  }

  return result;
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__vallocate[abi:nn180100]( uint64_t *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t result = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>( a1 + 3,  a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 96 * v4;
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 96LL)
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v5;
    __int128 v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 32) = 0uLL;
    *(_OWORD *)(result + 32) = v6;
    *(_WORD *)(result + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(a2 + 48);
    __int128 v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a2 + 56) = 0uLL;
    *(_OWORD *)(result + 56) = v7;
    *(_BYTE *)(result + 72) = *(_BYTE *)(a2 + 72);
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a2 + 80) = 0LL;
    *(void *)(result + 80) = v8;
    *(_DWORD *)(result + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a2 + 88);
    result += 96LL;
  }

  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>,LaunchServices::BindingEvaluation::ExtendedBinding *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    __int128 v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    uint64_t v8 = *(void *)(v5 + 32);
    *(void *)(v5 + 32) = 0LL;
    unint64_t v9 = *(void **)(a4 + 32);
    *(void *)(a4 + 32) = v8;

    uint64_t v10 = *(void *)(v5 + 40);
    *(void *)(v5 + 40) = 0LL;
    uint64_t v11 = *(void **)(a4 + 40);
    *(void *)(a4 + 40) = v10;

    *(_WORD *)(a4 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(v5 + 48);
    uint64_t v12 = *(void *)(v5 + 56);
    *(void *)(v5 + 56) = 0LL;
    __int128 v13 = *(void **)(a4 + 56);
    *(void *)(a4 + 56) = v12;

    uint64_t v14 = *(void *)(v5 + 64);
    *(void *)(v5 + 64) = 0LL;
    unint64_t v15 = *(void **)(a4 + 64);
    *(void *)(a4 + 64) = v14;

    *(_BYTE *)(a4 + 72) = *(_BYTE *)(v5 + 72);
    uint64_t v16 = *(void *)(v5 + 80);
    *(void *)(v5 + 80) = 0LL;
    char v17 = *(void **)(a4 + 80);
    *(void *)(a4 + 80) = v16;

    *(_DWORD *)(a4 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(v5 + 88);
    a4 += 96LL;
    v5 += 96LL;
  }

  while (v5 != v6);
  return v6;
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    unint64_t v10 = a1[1];
    uint64_t v9 = a1[2];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 5)) >= a5)
    {
      uint64_t v19 = v10 - a2;
      if (a5 <= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - a2) >> 5)))
      {
        uint64_t v20 = a3 + 96 * a5;
      }

      else
      {
        uint64_t v20 = a3 + 32 * ((uint64_t)(v10 - a2) >> 5);
        std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__construct_at_end<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>( a1,  v20,  a4);
        if (v19 < 1) {
          return v5;
        }
      }

      std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_range( (uint64_t)a1,  v5,  v10,  v5 + 96 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>( (uint64_t)v26,  v7,  v20,  v5);
    }

    else
    {
      uint64_t v11 = *a1;
      unint64_t v12 = a5 - 0x5555555555555555LL * ((uint64_t)(v10 - *a1) >> 5);
      if (v12 > 0x2AAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11) >> 5);
      uint64_t v14 = a1 + 3;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 5);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v12) {
        uint64_t v16 = v12;
      }
      if (v15 >= 0x155555555555555LL) {
        unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v29 = a1 + 3;
      if (v17) {
        uint64_t v18 = std::__allocate_at_least[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>( v14,  v17);
      }
      else {
        uint64_t v18 = 0LL;
      }
      uint64_t v21 = v18 + 96 * v13;
      v26[0] = v18;
      v26[1] = v21;
      uint64_t v27 = v21;
      unint64_t v28 = v18 + 96 * v17;
      uint64_t v22 = 3 * a5;
      uint64_t v23 = v21 + 96 * a5;
      uint64_t v24 = 32 * v22;
      do
      {
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>( (uint64_t)v29,  v21,  v7);
        v21 += 96LL;
        v7 += 96LL;
        v24 -= 96LL;
      }

      while (v24);
      uint64_t v27 = v23;
      uint64_t v5 = std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer( a1,  v26,  v5);
      std::__split_buffer<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding> &>::~__split_buffer(v26);
    }
  }

  return v5;
}

void sub_183EC12C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__construct_at_end<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>( void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t result = std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::construct[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding,LaunchServices::BindingEvaluation::ExtendedBinding const&>( (uint64_t)(v3 + 3),  v4 + v7,  a2 + v7);
      v7 += 96LL;
    }

    while (a2 + v7 != a3);
    v4 += v7;
  }

  v3[1] = v4;
  return result;
}

void sub_183EC1350(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__move_range( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      __int128 v10 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v10;
      __int128 v11 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v9 + 32) = 0uLL;
      *(_OWORD *)(v8 + 32) = v11;
      *(_WORD *)(v8 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(v9 + 48);
      __int128 v12 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v9 + 56) = 0uLL;
      *(_OWORD *)(v8 + 56) = v12;
      *(_BYTE *)(v8 + 72) = *(_BYTE *)(v9 + 72);
      uint64_t v13 = *(void *)(v9 + 80);
      *(void *)(v9 + 80) = 0LL;
      *(void *)(v8 + 80) = v13;
      *(_DWORD *)(v8 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(v9 + 88);
      v8 += 96LL;
      v9 += 96LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>( (uint64_t)&v15,  a2,  v7,  v6);
}

uint64_t std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__swap_out_circular_buffer( uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 3);
  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>,std::reverse_iterator<LaunchServices::BindingEvaluation::ExtendedBinding*>>( (uint64_t)(a1 + 3),  a3,  a3,  *a1,  *a1,  v6,  v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,std::move_iterator<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding*>>,LaunchServices::BindingEvaluation::ExtendedBinding*>( v7,  a3,  a1[1],  a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      __int128 v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 + v7 - 96);
      *(_OWORD *)(v9 - 80) = v10;
      uint64_t v11 = *(void *)(a3 + v7 - 64);
      *(void *)(a3 + v7 - 64) = 0LL;
      __int128 v12 = *(void **)(a4 + v7 - 64);
      *(void *)(v9 - 64) = v11;

      uint64_t v13 = *(void *)(a3 + v7 - 56);
      *(void *)(v8 - 56) = 0LL;
      uint64_t v14 = *(void **)(a4 + v7 - 56);
      *(void *)(v9 - 56) = v13;

      *(_WORD *)(v9 - 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(a3 + v7 - 48);
      uint64_t v15 = *(void *)(a3 + v7 - 40);
      *(void *)(v8 - 40) = 0LL;
      uint64_t v16 = *(void **)(a4 + v7 - 40);
      *(void *)(v9 - 40) = v15;

      uint64_t v17 = *(void *)(a3 + v7 - 32);
      *(void *)(v8 - 32) = 0LL;
      uint64_t v18 = *(void **)(a4 + v7 - 32);
      *(void *)(v9 - 32) = v17;

      *(_BYTE *)(v9 - 24) = *(_BYTE *)(a3 + v7 - 24);
      uint64_t v19 = *(void *)(a3 + v7 - 16);
      *(void *)(v8 - 16) = 0LL;
      uint64_t v20 = *(void **)(a4 + v7 - 16);
      *(void *)(v9 - 16) = v19;

      *(_DWORD *)(v9 - _Block_object_dispose((const void *)(v1 - 152), 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 96LL;
    }

    while (a3 + v7 != a2);
  }

  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    __int128 v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    objc_storeStrong((id *)(a4 + 32), *(id *)(v5 + 32));
    objc_storeStrong((id *)(a4 + 40), *(id *)(v5 + 40));
    *(_WORD *)(a4 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(v5 + 48);
    objc_storeStrong((id *)(a4 + 56), *(id *)(v5 + 56));
    objc_storeStrong((id *)(a4 + 64), *(id *)(v5 + 64));
    *(_BYTE *)(a4 + 72) = *(_BYTE *)(v5 + 72);
    objc_storeStrong((id *)(a4 + 80), *(id *)(v5 + 80));
    *(_WORD *)(a4 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = *(_WORD *)(v5 + 88);
    *(_WORD *)(a4 + 90) = *(_WORD *)(v5 + 90);
    a4 += 96LL;
    v5 += 96LL;
  }

  while (v5 != v6);
  return v6;
}

uint64_t LaunchServices::BindingEvaluator::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  objc_storeStrong((id *)(a1 + 80), *(id *)(a2 + 80));
  __int128 v5 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v5;
  if (a1 != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>( (char *)(a1 + 112),  *(char **)(a2 + 112),  *(void *)(a2 + 120),  (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 2);
  }
  uint64_t v6 = MEMORY[0x186E2A7B8](*(void *)(a2 + 136));
  __int128 v7 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v6;

  objc_storeStrong((id *)(a1 + 144), *(id *)(a2 + 144));
  uint64_t v8 = MEMORY[0x186E2A7B8](*(void *)(a2 + 152));
  uint64_t v9 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v8;

  objc_storeStrong((id *)(a1 + 160), *(id *)(a2 + 160));
  return a1;
}

void ___ZN14LaunchServices17BindingEvaluationL22addBundlesInBindingMapERNS0_5StateE14LSBindingMapIDj_block_invoke( uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = a3 & 0xFFFFFFFC;
  if ((a3 & 0xFFFFFFFC) != 0)
  {
    uint64_t v5 = _LSBundleGet(***(void ****)(a1 + 32), a3 & 0xFFFFFFFC);
    if (v5)
    {
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v11 = 0u;
      *(void *)&__int128 v10 = v3;
      *((void *)&v10 + 1) = v5;
      uint64_t v6 = *(void *)(a1 + 32);
      if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(_BYTE *)(v6 + 118) & 2) != 0)
      {
        _LSDatabaseGetBindingMapDebugName(**(void **)v6, *(_DWORD *)(a1 + 40));
        __int128 v7 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v8 = objc_msgSend(@"Bundle in binding map ", "stringByAppendingString:", v7, v10, v11, (void)v12);
        uint64_t v9 = (void *)*((void *)&v12 + 1);
        *((void *)&v12 + 1) = v8;

        uint64_t v6 = *(void *)(a1 + 32);
      }

      LaunchServices::BindingEvaluation::pushBackBinding( (LaunchServices::BindingEvaluation *)v6,  (uint64_t *)(v6 + 176),  (LaunchServices::BindingEvaluation::State *)&v10);
    }
  }

void sub_183EC181C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

uint64_t **LaunchServices::BindingEvaluation::addClaimsInBindingMap( uint64_t **result, unsigned int a2, int a3)
{
  if (a3)
  {
    _LSDatabaseGetBindingMapDebugName(**result, a2);
    unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue();
    __int128 v4 = (void *)_CSStringCopyCFString();
    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Adding claims for %@ %@",  v5,  v3,  v4);

    return (uint64_t **)_LSDatabaseEnumeratingBindingMap();
  }

  return result;
}

void sub_183EC1924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices17BindingEvaluationL21addClaimsInBindingMapERNS0_5StateE14LSBindingMapIDjb_block_invoke( uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = a3 & 0xFFFFFFFC;
  if ((a3 & 3) == 2 && v3 != 0)
  {
    uint64_t v6 = _LSClaimGet();
    if (v6)
    {
      uint64_t v7 = v6;
      int v8 = *(_DWORD *)(v6 + 16);
      if (v8)
      {
        uint64_t v9 = _LSBundleGet(***(void ****)(a1 + 32), v8);
        if (v9)
        {
          __int128 v17 = 0u;
          __int128 v18 = 0u;
          __int128 v15 = 0u;
          __int128 v16 = 0u;
          __int128 v13 = 0u;
          *(void *)&__int128 v14 = v3;
          *((void *)&v14 + 1) = v7;
          LODWORD(v13) = *(_DWORD *)(v7 + 16);
          *((void *)&v13 + 1) = v9;
          uint64_t v10 = *(void *)(a1 + 32);
          if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(_BYTE *)(v10 + 118) & 2) != 0)
          {
            _LSDatabaseGetBindingMapDebugName(**(void **)v10, *(_DWORD *)(a1 + 40));
            __int128 v11 = (void *)objc_claimAutoreleasedReturnValue();
            if (*(_BYTE *)(a1 + 44)) {
              __int128 v12 = @"Parent of claim in binding map ";
            }
            else {
              __int128 v12 = @"Claim in binding map ";
            }

            *((void *)&v15 + 1) = -[__CFString stringByAppendingString:](v12, "stringByAppendingString:", v11, v13, v14, (void)v15);

            uint64_t v10 = *(void *)(a1 + 32);
          }

          LOBYTE(v16) = *(_DWORD *)(a1 + 40) == 0;
          BYTE1(v16) = *(_BYTE *)(a1 + 44);
          LaunchServices::BindingEvaluation::pushBackBinding( (LaunchServices::BindingEvaluation *)v10,  (uint64_t *)(v10 + 176),  (LaunchServices::BindingEvaluation::State *)&v13);
        }
      }
    }
  }

void sub_183EC1AA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  LaunchServices::BindingEvaluation::ExtendedBinding::~ExtendedBinding(&a9);
  _Unwind_Resume(a1);
}

uint64_t **___ZN14LaunchServices17BindingEvaluationL27addExtensionAndOSTypeClaimsERNS0_5StateE_block_invoke( uint64_t **result, int a2, int a3)
{
  __int128 v4 = result;
  uint64_t v5 = result[4][1];
  if (*(_DWORD *)(v5 + 24) != a2)
  {
    *(_DWORD *)(v5 + 24) = a2;
    uint64_t result = (uint64_t **)_LSDatabaseFindBindingMapIndex(*(void *)*result[6], a2);
    *(_DWORD *)(v4[5][1] + 24) = (_DWORD)result;
  }

  unsigned int v6 = *(_DWORD *)(v4[5][1] + 24);
  if (v6 != -1 && v6 != 2) {
    return LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)v4[6], v6, a3);
  }
  return result;
}

uint64_t ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(a3 + 167) & 0x10) != 0) {
    return _CSArrayEnumerateAllValues();
  }
  return result;
}

void ___ZN14LaunchServices17BindingEvaluationL17addWildcardClaimsERNS0_5StateE_block_invoke_2( uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = _LSClaimGet();
  if (v5 && (*(_BYTE *)(v5 + 8) & 0x10) != 0)
  {
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    LODWORD(v7) = *(_DWORD *)(a1 + 48);
    *((void *)&v7 + 1) = *(void *)(a1 + 40);
    LODWORD(v_Block_object_dispose((const void *)(v1 - 152), 8) = a3;
    *((void *)&v8 + 1) = v5;
    if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled
      || (uint64_t v6 = *(void *)(a1 + 32), (*(_BYTE *)(v6 + 118) & 2) != 0))
    {
      *((void *)&v9 + 1) = @"Wildcard document claim";
      uint64_t v6 = *(void *)(a1 + 32);
    }

    LaunchServices::BindingEvaluation::pushBackBinding( (LaunchServices::BindingEvaluation *)v6,  (uint64_t *)(v6 + 176),  (LaunchServices::BindingEvaluation::State *)&v7);
  }

void sub_183EC1C98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

uint64_t **___ZN14LaunchServices17BindingEvaluationL21addAlternateUTIClaimsERNS0_5StateE_block_invoke( uint64_t **result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __int128 v4 = result[4];
  if (*((_DWORD *)v4 + 56) != a3 && (*(_BYTE *)(a4 + 8) & 1) != 0)
  {
    uint64_t v6 = result;
    uint64_t result = (uint64_t **)_UTTypeConformsTo(*(void **)*v4, a3, *((_DWORD *)result + 12));
    if ((_DWORD)result)
    {
      _LSDefaultLog();
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        __int128 v8 = v6[5];
        __int128 v9 = (void *)_CSStringCopyCFString();
        int v10 = 138412546;
        __int128 v11 = v8;
        __int16 v12 = 2112;
        __int128 v13 = v9;
        _os_log_impl( &dword_183E58000,  v7,  OS_LOG_TYPE_INFO,  "Found alternate UTI for extension .%@: %@",  (uint8_t *)&v10,  0x16u);
      }

      return LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)v6[4], 0, *(_DWORD *)(a4 + 12));
    }
  }

  return result;
}

void sub_183EC1DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::searchParentUTIsForClaims(uint64_t a1)
{
  return 0LL;
}

uint64_t ___ZN14LaunchServices17BindingEvaluationL18addParentUTIClaimsERNS0_5StateE_block_invoke( uint64_t a1, const __CFString *a2)
{
  int v4 = 0;
  uint64_t result = _UTGetActiveTypeForCFStringIdentifier(***(void ****)(a1 + 32), a2, &v4);
  if (result)
  {
    LaunchServices::BindingEvaluation::addClaimsForParentUTI(*(void *)(a1 + 32), result);
    return _UTTypeSearchConformsToTypes( ***(void ***)(a1 + 32),  v4,  (uint64_t)LaunchServices::BindingEvaluation::searchParentUTIsForClaims,  *(void *)(a1 + 32),  0LL);
  }

  return result;
}

void LaunchServices::BindingEvaluation::addClaimsForParentUTI(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a2 + 9) & 2) == 0 || (*(_BYTE *)(a1 + 116) & 0x20) != 0)
  {
    LaunchServices::BindingEvaluation::addClaimsInBindingMap((uint64_t **)a1, 0, *(_DWORD *)(a2 + 12));
  }

  else
  {
    _LSBindingLog();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v3 = (void *)_CSStringCopyCFString();
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v7 = v3;
      _os_log_impl( &dword_183E58000,  v2,  OS_LOG_TYPE_DEBUG,  "Skipping parent UTI claim for %@ due to options (wildcard UTIs not requested)",  buf,  0xCu);
    }

    int v4 = (void *)_CSStringCopyCFString();
    LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"Skipping parent UTI claim for %@ due to options (wildcard UTIs not requested)",  v5,  v4);
  }

void sub_183EC1FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::compareVendors(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && (*(_BYTE *)(v2 + 156) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    return !v5 || (*(_BYTE *)(v5 + 156) & 1) == 0;
  }

  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3 || (*(_BYTE *)(v3 + 156) & 1) == 0) {
    return 0;
  }
  return -1;
}

void LaunchServices::BindingEvaluation::logComparison( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5 = a5;
  switch(a5)
  {
    case -1:
      uint64_t v10 = 60LL;
      break;
    case 0:
      return;
    case 1:
      uint64_t v10 = 62LL;
      break;
    default:
      uint64_t v10 = 63LL;
      break;
  }

  __int128 v11 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  a2);
  __int16 v12 = -[_LSBindingForLog initWithState:binding:]( objc_alloc(&OBJC_CLASS____LSBindingForLog),  "initWithState:binding:",  a1,  a3);
  LaunchServices::BindingEvaluation::logToFile( (LaunchServices::BindingEvaluation *)@"%s: %@ %c %@",  v13,  a4,  v11,  v10,  v12);

  if (LaunchServices::BindingEvaluation::gIsReasonTrackingEnabled || (*(_BYTE *)(a1 + 118) & 2) != 0)
  {
    uint64_t v14 = [NSString stringWithUTF8String:a4];
    __int128 v15 = *(void **)(a2 + 80);
    *(void *)(a2 + 80) = v14;

    *(_BYTE *)(a2 + 72) = v5;
    uint64_t v16 = [NSString stringWithUTF8String:a4];
    __int128 v17 = *(void **)(a3 + 80);
    *(void *)(a3 + 80) = v16;

    *(_BYTE *)(a3 + 72) = -v5;
  }

void sub_183EC2170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::BindingEvaluation::compareBundleClass(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) + 160LL);
  int v3 = *(_DWORD *)(*(void *)(a2 + 8) + 160LL);
  if (v2 == 16 && v3 != 16) {
    return -1;
  }
  if (v2 != 16 && v3 == 16) {
    return 1;
  }
  if (v2 != 14 || v3 == 14) {
    return v2 != 14 && v3 == 14;
  }
  else {
    return -1;
  }
}

id LaunchServices::BindingEvaluation::getBindingPath( void ***this, LaunchServices::BindingEvaluation::State *a2, const LaunchServices::BindingEvaluation::ExtendedBinding *a3)
{
  id v5 = *((id *)a2 + 7);
  if (!v5)
  {
    uint64_t v6 = _LSAliasGetPath(**this, **((_DWORD **)a2 + 1));
    __int128 v7 = (void *)*((void *)a2 + 7);
    *((void *)a2 + 7) = v6;

    id v5 = *((id *)a2 + 7);
  }

  return v5;
}

void std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }

void std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 48LL)
  {
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = a2;
}

id ***std::vector<LaunchServices::BindingEvaluation::ExtendedBinding,std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>>::__destroy_vector::operator()[abi:nn180100]( id ***result)
{
  uint64_t v1 = *result;
  int v2 = **result;
  if (v2)
  {
    int v3 = v1[1];
    int v4 = **result;
    id v5 = *result;
    if (v3 != v2)
    {
      uint64_t v6 = result;
      do
      {
        v3 -= 12;
        std::pmr::polymorphic_allocator<LaunchServices::BindingEvaluation::ExtendedBinding>::destroy[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding>( (uint64_t)(v1 + 3),  v3);
      }

      while (v3 != v2);
      id v5 = *v6;
      int v4 = **v6;
    }

    v1[1] = v2;
    return (id ***)(*((uint64_t (**)(id *, id *, int64_t, uint64_t))*v5[3] + 3))( v5[3],  v4,  (char *)v5[2] - (char *)v4,  8LL);
  }

  return result;
}

uint64_t *std::vector<LSBinding>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }

  else
  {
    do
    {
      uint64_t v5 = v4 - 48;
      __int128 v6 = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_OWORD *)(v3 - 48);
      *(_OWORD *)(v4 - 32) = v6;
      __int128 v7 = *(_OWORD *)(v3 - 16);
      *(void *)(v3 - 16) = 0LL;
      *(void *)(v3 - _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
      *(_OWORD *)(v4 - 16) = v7;
      v3 -= 48LL;
      v4 -= 48LL;
    }

    while (v3 != v2);
  }

  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556LL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__split_buffer<LSBinding>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<LSBinding>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
  }

uint64_t std::vector<LSBinding>::__insert_with_size[abi:nn180100]<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>,std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = a3 + 96 * a5;
      }

      else
      {
        uint64_t v21 = a3 + 32 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<LSBinding>,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding*>( v9,  v21,  a4,  *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }

      std::vector<LSBinding>::__move_range((uint64_t)a1, v5, v12, v5 + 48 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding *>( (uint64_t)&v23,  a3,  v21,  v5);
    }

    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555LL * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x555555555555555LL) {
        abort();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555LL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(v9, v18);
      }
      else {
        uint64_t v19 = 0LL;
      }
      uint64_t v23 = v19;
      uint64_t v24 = &v19[48 * v15];
      uint64_t v25 = v24;
      __int16 v26 = &v19[48 * v18];
      std::__split_buffer<LSBinding>::__construct_at_end_with_size<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>( &v23,  a3,  a5);
      uint64_t v5 = std::vector<LSBinding>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<LSBinding>::~__split_buffer((uint64_t)&v23);
    }
  }

  return v5;
}

void sub_183EC2664( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + _Block_object_dispose((const void *)(v1 - 152), 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<LSBinding>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (_OWORD *)v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      __int128 v10 = *(_OWORD *)(v9 + 16);
      *uint64_t v8 = *(_OWORD *)v9;
      v8[1] = v10;
      __int128 v11 = *(_OWORD *)(v9 + 32);
      *(void *)(v9 + 32) = 0LL;
      *(void *)(v9 + 40) = 0LL;
      _OWORD v8[2] = v11;
      v8 += 3;
      v9 += 48LL;
    }

    while (v9 < a3);
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 152), 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>( (uint64_t)&v13,  a2,  v7,  v6);
}

void *std::__split_buffer<LSBinding>::__construct_at_end_with_size<std::__wrap_iter<LaunchServices::BindingEvaluation::ExtendedBinding *>>( void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 48 * a3;
    do
    {
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      *(_OWORD *)(v4 + 16) = v7;
      *(void *)(v4 + 32) = *(id *)(a2 + 32);
      uint64_t result = *(id *)(a2 + 40);
      *(void *)(v4 + 40) = result;
      v4 += 48LL;
      a2 += 96LL;
    }

    while (v4 != v6);
    uint64_t v4 = v6;
  }

  _OWORD v3[2] = v4;
  return result;
}

uint64_t std::vector<LSBinding>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2[1];
    do
    {
      uint64_t v6 = v8 - 48;
      __int128 v9 = *(_OWORD *)(v7 - 32);
      *(_OWORD *)(v8 - 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_OWORD *)(v7 - 48);
      *(_OWORD *)(v8 - 32) = v9;
      __int128 v10 = *(_OWORD *)(v7 - 16);
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
      *(_OWORD *)(v8 - 16) = v10;
      v7 -= 48LL;
      v8 -= 48LL;
    }

    while (v7 != v5);
  }

  a2[1] = v6;
  uint64_t v11 = a1[1];
  unint64_t v12 = (_OWORD *)a2[2];
  if (v11 != a3)
  {
    do
    {
      __int128 v13 = *(_OWORD *)(a3 + 16);
      _OWORD *v12 = *(_OWORD *)a3;
      v12[1] = v13;
      __int128 v14 = *(_OWORD *)(a3 + 32);
      *(void *)(a3 + 32) = 0LL;
      *(void *)(a3 + 40) = 0LL;
      void v12[2] = v14;
      v12 += 3;
      a3 += 48LL;
    }

    while (a3 != v11);
    uint64_t v6 = a2[1];
  }

  a2[2] = v12;
  uint64_t v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  uint64_t v16 = a1[1];
  a1[1] = a2[2];
  a2[2] = v16;
  uint64_t v17 = a1[2];
  a1[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<LSBinding>,LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding*>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      __int128 v7 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a4 = *(_OWORD *)v6;
      *(_OWORD *)(a4 + 16) = v7;
      *(void *)(a4 + 32) = *(id *)(v6 + 32);
      *(void *)(a4 + 40) = *(id *)(v6 + 40);
      a4 += 48LL;
      v6 += 96LL;
    }

    while (v6 != a3);
  }

  return a4;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      __int128 v8 = *(_OWORD *)(v7 - 32);
      *(_OWORD *)(a4 - 4_Block_object_dispose((const void *)(v1 - 152), 8) = *(_OWORD *)(v7 - 48);
      *(_OWORD *)(a4 - 32) = v8;
      uint64_t v9 = *(void *)(v7 - 16);
      *(void *)(v7 - 16) = 0LL;
      __int128 v10 = *(void **)(a4 - 16);
      *(void *)(a4 - 16) = v9;

      uint64_t v11 = *(void *)(v7 - 8);
      *(void *)(v7 - _Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
      unint64_t v12 = *(void **)(a4 - 8);
      *(void *)(a4 - _Block_object_dispose((const void *)(v1 - 152), 8) = v11;

      a4 -= 48LL;
      v7 -= 48LL;
    }

    while (v7 != a2);
  }

  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LaunchServices::BindingEvaluation::ExtendedBinding *,LaunchServices::BindingEvaluation::ExtendedBinding *,LSBinding *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    __int128 v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    objc_storeStrong((id *)(a4 + 32), *(id *)(v5 + 32));
    objc_storeStrong((id *)(a4 + 40), *(id *)(v5 + 40));
    a4 += 48LL;
    v5 += 96LL;
  }

  while (v5 != v6);
  return v6;
}

double _LSBindingListBufferInit(uint64_t a1, void *a2)
{
  *(void *)&double result = 8184LL;
  *a2 = 8184LL;
  return result;
}

uint64_t _LSBindingListBufferAppend(void *a1, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  id v7 = a1;
  __int128 v8 = a2 + 2;
  unsigned int v9 = a2[1];
  if (!v9)
  {
LABEL_6:
    uint64_t v11 = 0LL;
LABEL_20:
    uint64_t v16 = *a2;
    if (v16 >= 0xC)
    {
      a2[1] = v9 + 1;
      memmove(v8 + 3, v8, (char *)a2 - (char *)v8 - v16 + 0x2000);
      *__int128 v8 = a3;
      _CSStringRetain();
      v8[1] = 1;
      _OWORD v8[2] = a4;
      _CSStringRetain();
      *a2 -= 12;
      uint64_t v11 = 1LL;
    }

    goto LABEL_22;
  }

  int v10 = 0;
  while (1)
  {
    if (*v8 > a3)
    {
      uint64_t v11 = 0LL;
      goto LABEL_18;
    }

    if (*v8 == a3) {
      break;
    }
    v8 += v8[1] + 2;
    if (v9 == ++v10) {
      goto LABEL_6;
    }
  }

  uint64_t v12 = v8[1];
  if ((_DWORD)v12)
  {
    uint64_t v13 = 0LL;
    while (v8[v13 + 2] != a4)
    {
      if (v12 == ++v13)
      {
        uint64_t v11 = 0LL;
        goto LABEL_16;
      }
    }

    uint64_t v11 = 1LL;
  }

  else
  {
    LODWORD(v13) = 0;
    uint64_t v11 = 0LL;
  }

  if ((_DWORD)v13 == (_DWORD)v12)
  {
LABEL_16:
    uint64_t v14 = *a2;
    v8[1] = v12 + 1;
    uint64_t v15 = &v8[v12 + 2];
    memmove(&v8[(v12 + 1) + 2], v15, (char *)a2 - (char *)v15 - v14 + 0x2000);
    *uint64_t v15 = a4;
    _CSStringRetain();
    unsigned int v9 = a2[1];
    *a2 -= 4;
    uint64_t v11 = 1LL;
  }

void sub_183EC2B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSBindingListBufferAppendNSString(void *a1, unsigned int *a2, unsigned int a3, void *a4, int a5)
{
  id v9 = a1;
  int v10 = a4;
  unsigned int StringForCFString = _LSDatabaseCreateStringForCFString(v9, v10, a5);
  if (StringForCFString)
  {
    BOOL v12 = _LSBindingListBufferAppend(v9, a2, a3, StringForCFString) != 0;
    _CSStringRelease();
  }

  else
  {
    BOOL v12 = 1LL;
  }

  return v12;
}

void sub_183EC2C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _LSBindingListBufferReset(void *a1, uint64_t a2)
{
  *(void *)&double result = 8184LL;
  *(void *)a2 = 8184LL;
  return result;
}

void _LSBindingListDataReleaseContents(void *a1, unsigned int *a2)
{
  id v7 = a1;
  if (*a2)
  {
    unsigned int v3 = 0;
    uint64_t v4 = a2 + 1;
    do
    {
      _CSStringRelease();
      if (v4[1])
      {
        unint64_t v5 = 0LL;
        do
        {
          _CSStringRelease();
          ++v5;
          unint64_t v6 = v4[1];
        }

        while (v5 < v6);
      }

      else
      {
        unint64_t v6 = 0LL;
      }

      v4 += v6 + 2;
      ++v3;
    }

    while (v3 < *a2);
  }
}

void sub_183EC2D20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t _LSBindingListCreate(void *a1, _DWORD *a2, _DWORD *a3)
{
  id v5 = a1;
  unint64_t v6 = a2 + 1;
  if (a2[1])
  {
    int v7 = CSStoreAllocUnitWithData();
    *a3 = v7;
    if (v7)
    {
      uint64_t v8 = 0LL;
    }

    else
    {
      _LSBindingListDataReleaseContents(v5, a2 + 1);
      uint64_t v8 = 4294957803LL;
    }

    *a2 = 8184;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v6 = a3;
  }

  _DWORD *v6 = 0;

  return v8;
}

void sub_183EC2DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBindingListDestroy()
{
  id v0 = (id)MEMORY[0x1895F8858]();
  if (CSStoreGetUnit())
  {
    uint64_t Unit = (const void *)CSStoreGetUnit();
    if (Unit) {
      BOOL v2 = __n == 0;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2)
    {
      memcpy(__n_4, Unit, __n);
      _LSBindingListDataReleaseContents(v0, __n_4);
    }

    CSStoreFreeUnit();
  }

  else
  {
    puts("_LSBindingListDestroy: binding list not found");
  }
}

void sub_183EC2F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindingListValidate(void *a1, uint64_t a2, const char **a3)
{
  id v5 = a1;
  if (!(_DWORD)a2)
  {
    uint64_t v8 = 0LL;
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  a2 = (uint64_t)bindingListDataHasValidLength(Unit, v13);
  if (!(_DWORD)a2)
  {
    uint64_t v8 = "Invalid length";
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  if (!*Unit)
  {
    uint64_t v8 = 0LL;
    a2 = 1LL;
    if (!a3) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  int v7 = 0;
  uint64_t v8 = "Bad class string";
  unint64_t v9 = (unint64_t)(Unit + 1);
  while (1)
  {
    if (v9 < (unint64_t)(Unit + 1) || v9 >= (unint64_t)Unit + v13)
    {
      uint64_t v8 = 0LL;
      goto LABEL_21;
    }

    if (*(_DWORD *)(v9 + 4)) {
      break;
    }
    unint64_t v11 = 0LL;
LABEL_14:
    v9 += 4 * v11 + 8;
    if (++v7 >= *Unit)
    {
      uint64_t v8 = 0LL;
      a2 = 1LL;
      goto LABEL_21;
    }
  }

  unint64_t v10 = 0LL;
  while (_CSStringIsValid())
  {
    ++v10;
    unint64_t v11 = *(unsigned int *)(v9 + 4);
    if (v10 >= v11) {
      goto LABEL_14;
    }
  }

  uint64_t v8 = "Bad binding string";
LABEL_21:
  if (a3) {
LABEL_22:
  }
    *a3 = v8;
LABEL_23:

  return a2;
}

void sub_183EC30AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *bindingListDataHasValidLength(_DWORD *result, unsigned int a2)
{
  if (result)
  {
    if (a2 < 4)
    {
      return 0LL;
    }

    else
    {
      BOOL v2 = (char *)(result + 1);
      int v3 = *result;
      if (*result)
      {
        uint64_t v4 = (char *)result + a2;
        int v5 = 4;
        unint64_t v6 = (char *)(result + 1);
        while (1)
        {
          double result = 0LL;
          if (v6 < v2 || v6 >= v4) {
            break;
          }
          uint64_t v7 = *((unsigned int *)v6 + 1);
          v5 += 4 * v7 + 8;
          v6 += 4 * v7 + 8;
          if (!--v3) {
            return (_DWORD *)(v5 == a2);
          }
        }
      }

      else
      {
        int v5 = 4;
        return (_DWORD *)(v5 == a2);
      }
    }
  }

  return result;
}

unsigned int *_LSBindingListGetEntryCount()
{
  double result = (unsigned int *)CSStoreGetUnit();
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

char *_LSBindingListGetEntryWithClass(void *a1, uint64_t a2, unsigned int a3)
{
  id v4 = a1;
  uint64_t Unit = (unsigned int *)CSStoreGetUnit();
  if (Unit) {
    BOOL v6 = v15 >= 4;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6 || ((v7 = (char *)(Unit + 1), uint64_t v8 = (char *)Unit + v15, *Unit) ? (v9 = v7 >= v8) : (v9 = 1), v9))
  {
LABEL_11:
    unint64_t v10 = 0LL;
  }

  else
  {
    unsigned int v11 = 1;
    BOOL v12 = (char *)(Unit + 1);
    while (*(_DWORD *)v12 != a3)
    {
      if (*(_DWORD *)v12 > a3) {
        goto LABEL_11;
      }
      unint64_t v10 = 0LL;
      if (v11 < *Unit)
      {
        v12 += 4 * *((unsigned int *)v12 + 1) + 8;
        ++v11;
        if (v12 >= v7 && v12 < v8) {
          continue;
        }
      }

      goto LABEL_20;
    }

    unint64_t v10 = v12;
  }

void sub_183EC326C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *_LSBindingListGetEntryAtIndex(void *a1, uint64_t a2, unsigned int a3)
{
  id v4 = a1;
  uint64_t Unit = (unsigned int *)CSStoreGetUnit();
  if (*Unit <= a3)
  {
    uint64_t i = 0LL;
  }

  else
  {
    for (uint64_t i = Unit + 1; a3; --a3)
      i += i[1] + 2;
  }

  return i;
}

void sub_183EC3314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindingListActivate()
{
  id v0 = (void *)MEMORY[0x1895F8858]();
  int v2 = v1;
  id v3 = v0;
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  int v5 = Unit;
  if (Unit)
  {
    if (bindingListDataHasValidLength(Unit, v15))
    {
      memcpy(&__dst, v5, v15);
      int v6 = __dst;
      if (__dst)
      {
        uint64_t v7 = 0LL;
        int v8 = 0;
        BOOL v9 = &v17;
        do
        {
          int BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v3, *v9);
          unint64_t v11 = v9[1];
          if (BindingMapIndex << 16 != -65536 && v9[1])
          {
            unint64_t v12 = 0LL;
            do
            {
              uint64_t v13 = _LSBindableActivate(v3, v2);
              ++v12;
              unint64_t v11 = v9[1];
            }

            while (v12 < v11);
            uint64_t v7 = v13;
          }

          v9 += v11 + 2;
          ++v8;
        }

        while (v8 != v6);
      }

      else
      {
        uint64_t v7 = 0LL;
      }
    }

    else
    {
      uint64_t v7 = 4294957799LL;
    }
  }

  else
  {
    uint64_t v7 = 4294957797LL;
  }

  return v7;
}

void sub_183EC349C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBindingListDeactivate()
{
  id v0 = (void *)MEMORY[0x1895F8858]();
  int v2 = v1;
  id v3 = v0;
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  int v5 = Unit;
  if (Unit)
  {
    if (bindingListDataHasValidLength(Unit, v15))
    {
      memcpy(&__dst, v5, v15);
      int v6 = __dst;
      if (__dst)
      {
        uint64_t v7 = 0LL;
        int v8 = 0;
        BOOL v9 = &v17;
        do
        {
          int BindingMapIndex = _LSDatabaseFindBindingMapIndex((uint64_t)v3, *v9);
          unint64_t v11 = v9[1];
          if (BindingMapIndex << 16 != -65536 && v9[1])
          {
            unint64_t v12 = 0LL;
            do
            {
              uint64_t v13 = _LSBindableDeactivate(v3, v2);
              ++v12;
              unint64_t v11 = v9[1];
            }

            while (v12 < v11);
            uint64_t v7 = v13;
          }

          v9 += v11 + 2;
          ++v8;
        }

        while (v8 != v6);
      }

      else
      {
        uint64_t v7 = 0LL;
      }
    }

    else
    {
      uint64_t v7 = 4294957799LL;
    }
  }

  else
  {
    uint64_t v7 = 4294957797LL;
  }

  return v7;
}

void sub_183EC361C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBindingListEnumerate(void *a1, uint64_t a2, void *a3)
{
  id v4 = a1;
  id v5 = a3;
  uint64_t Unit = (unsigned int *)CSStoreGetUnit();
  uint64_t v7 = Unit;
  if (Unit)
  {
    char v12 = 0;
    if (*Unit)
    {
      unsigned int v8 = 0;
      BOOL v9 = Unit + 1;
      do
      {
        unint64_t v10 = 0LL;
        while (1)
        {
          unint64_t v11 = v9[1];
          if (v10 >= v11) {
            break;
          }
          (*((void (**)(id, void, void, char *))v5 + 2))(v5, *v9, v9[v10++ + 2], &v12);
          if (v12) {
            goto LABEL_9;
          }
        }

        v9 += v11 + 2;
        ++v8;
      }

      while (v8 < *v7);
    }
  }

void sub_183EC3724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBindingListEnumerateEntryWithClass(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a4;
  EntryWithClass = _LSBindingListGetEntryWithClass(a1, a2, a3);
  BOOL v9 = EntryWithClass;
  if (EntryWithClass)
  {
    unint64_t v10 = *((unsigned int *)EntryWithClass + 1);
    char v12 = 0;
    if ((_DWORD)v10)
    {
      uint64_t v11 = 2LL;
      do
      {
        v7[2](v7, a3, *(unsigned int *)&v9[4 * v11], &v12);
        if (v11 - 1 >= v10) {
          break;
        }
        ++v11;
      }

      while (!v12);
    }
  }
}

void sub_183EC37DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSBindingListGetVisualizationFunctions(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = LaunchServices::BindingLists::display;
  a1[2] = 0LL;
}

uint64_t LaunchServices::BindingLists::display( void **this, LSContext *a2, uint64_t a3, void *a4, LaunchServices::DumpWriter *a5)
{
  if ((_DWORD)a3)
  {
    uint64_t v16 = 0LL;
    if (!_LSBindingListValidate(*this, a3, &v16))
    {
      v15[33] = (id)MEMORY[0x1895F87A8];
      v15[34] = (id)3221225472LL;
      v15[35] = ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      v15[36] = &__block_descriptor_48_e5_v8__0l;
      v15[37] = a4;
      v15[38] = (id)v16;
      CSStore2::AttributedStringWriter::withWarningColors();
    }

    _CSStoreGetStringTable();
    int v6 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x189607928]);
    uint64_t v9 = 0LL;
    unint64_t v10 = &v9;
    uint64_t v11 = 0x13812000000LL;
    char v12 = __Block_byref_object_copy__6;
    uint64_t v13 = __Block_byref_object_dispose__6;
    uint64_t v14 = 256LL;
    LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v15, v6);
    CSStore2::AttributedStringWriter::getVisualizer((CSStore2::AttributedStringWriter *)a4);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::setVisualizer();

    CSStore2::AttributedStringWriter::setInsertsNewlines((CSStore2::AttributedStringWriter *)(v10 + 6));
    CSStore2::AttributedStringWriter::withReferenceToUnit();
    CSStore2::AttributedStringWriter::attributedString((CSStore2::AttributedStringWriter *)a4, &v6->super);
    _Block_object_dispose(&v9, 8);
    LaunchServices::DumpWriter::~DumpWriter(v15);
  }

  return 1LL;
}

void sub_183EC39C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _Block_object_dispose(va, 8);
  LaunchServices::DumpWriter::~DumpWriter(v11);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format( *(CSStore2::AttributedStringWriter **)(a1 + 32),  0LL,  @"*** Invalid binding list (%s) ***",  *(void *)(a1 + 40));
}

id __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = off_189D76AA8;
  id result = *(id *)(a2 + 304);
  *(void *)(a1 + 304) = result;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6(uint64_t a1)
{
  v11[0] = 0LL;
  v11[1] = v11;
  v11[2] = 0x2020000000LL;
  int v12 = 0;
  v9[0] = 0LL;
  v9[1] = v9;
  void v9[2] = 0x2020000000LL;
  int v10 = -1;
  v7[0] = 0LL;
  v7[1] = v7;
  v7[2] = 0x2020000000LL;
  char v8 = 1;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  _DWORD v4[2] = ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2;
  void v4[3] = &unk_189D74368;
  uint64_t v1 = *(unsigned int *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  v4[4] = *(void *)(a1 + 32);
  v4[5] = v7;
  v4[6] = v11;
  v4[7] = v9;
  __int128 v2 = *(_OWORD *)(a1 + 40);
  id v3 = **(void ***)(a1 + 40);
  __int128 v5 = v2;
  _LSBindingListEnumerate(v3, v1, v4);
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v11, 8);
}

void sub_183EC3B5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2()
{
  return CSStore2::AttributedStringWriter::withReferenceToUnit();
}

void ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (*(_BYTE *)(v2 + 24)) {
    *(_BYTE *)(v2 + 24) = 0;
  }
  else {
    CSStore2::AttributedStringWriter::string( (CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL),  @", ");
  }
  id v3 = (NSString *)_CSStringCopyCFString();
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 84);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (v4 != *(_DWORD *)(v5 + 24))
    {
      *(_DWORD *)(v5 + 24) = v4;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = _LSDatabaseFindBindingMapIndex( **(void **)(a1 + 64),  *(_DWORD *)(a1 + 84));
    }

    int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    if (v6)
    {
      if (v6 == 1)
      {
        CSStore2::AttributedStringWriter::format( (CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL),  0LL,  @".%@",  v3);
      }

      else if (v6 == 5)
      {
        CSStore2::AttributedStringWriter::format( (CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL),  0LL,  @"%@:",  v3);
      }

      else
      {
        CSStore2::AttributedStringWriter::string( (CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL),  v3);
      }
    }

    else
    {
      unsigned int v11 = 0;
      uint64_t active = _UTGetActiveTypeForIdentifier(**(void ***)(a1 + 64), *(_DWORD *)(a1 + 80), &v11);
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v9 = (CSStore2::AttributedStringWriter *)(v8 + 48);
      if (active)
      {
        CSStore2::AttributedStringWriter::link(v9, *(unsigned int *)(**(void **)(a1 + 64) + 32LL), v11, v3);
        int v10 = (NSString *)objc_claimAutoreleasedReturnValue();
        CSStore2::AttributedStringWriter::string(v9, v10);
      }

      else
      {
        CSStore2::AttributedStringWriter::string((CSStore2::AttributedStringWriter *)(v8 + 48), v3);
      }
    }
  }

  else
  {
    CSStore2::AttributedStringWriter::withWarningColors();
  }
}

void sub_183EC3DFC(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices12BindingListsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4( uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format( (CSStore2::AttributedStringWriter *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 48LL),  0LL,  @"0x%llx",  *(unsigned int *)(a1 + 40));
}

uint64_t _LSGetBRDisplayNameForContainerNode()
{
  return 0LL;
}

uint64_t _LSSliceMaskWriteDescription(CSStore2::AttributedStringWriter *a1)
{
  return CSStore2::AttributedStringWriter::endFlags(a1);
}

uint64_t _LSBundleBaseFlagsWriteDescription(CSStore2::AttributedStringWriter *a1)
{
  return CSStore2::AttributedStringWriter::endFlags(a1);
}

__CFString *_LSBundleClassGetName(unsigned int a1)
{
  if (a1 < 0x11) {
    return off_189D74530[a1];
  }
  objc_msgSend(NSString, "stringWithFormat:", @"0x%llx", a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t _LSBundleDataSetModTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + 18_Block_object_dispose((const void *)(v13 - 48), 8) = a2;
  return result;
}

uint64_t _LSBundleDataGetRegTime(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t _LSBundleDataSetRegTime(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

BOOL _LSBundleDataIsInUnsupportedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 164);
  _LSContainerGet();
  return (v2 & 0x1000000040LL) != 0;
}

uint64_t _LSPrepareMimicForBundleLookup(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = _LSPrepareMimicForBundleClass(v3, a2);
  if ((_DWORD)v4)
  {
    uint64_t v9 = sel_nameWithError_;
    int v10 = sel_getVolumeIdentifier_error_;
    unsigned int v11 = sel_getCreationDate_error_;
    int v12 = sel_getFileIdentifier_error_;
    uint64_t v13 = sel_canonicalPathWithError_;
    uint64_t v14 = sel_getInodeNumber_error_;
    id v5 = v3;
    uint64_t v6 = 0LL;
    char v7 = 1;
    do
    {
      if (v7) {
        char v7 = objc_msgSend(v5, "populateSimpleSelector:error:", (&v9)[v6], a2, v9, v10, v11, v12, v13, v14);
      }
      else {
        char v7 = 0;
      }
      ++v6;
    }

    while (v6 != 6);
  }

  return v4;
}

void sub_183EC444C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleFindWithInfo( LSContext *a1, NSString *a2, void *a3, int a4, _OWORD *a5, int a6, int a7, _DWORD *a8, void *a9)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int128 v9 = a5[1];
  v16[0] = *a5;
  v16[1] = v9;
  id v15 = 0LL;
  BOOL v10 = _LSBundleFindWithInfoAndNo_IOFilter(a1, a2, a3, a4 != 0, v16, a6, a7, 0LL, 0LL, a8, a9, &v15);
  id v11 = v15;
  int v12 = v11;
  if (v10) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = _LSGetOSStatusFromNSError(v11);
  }

  return v13;
}

void sub_183EC4518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataMayBeOnNetwork(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (a2) {
    a2 = *(_DWORD *)(a2 + 4) && (uint64_t v4 = (_WORD *)_LSContainerGet()) != 0LL && (*v4 & 1) == 0;
  }

  return a2;
}

void sub_183EC45A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleDataIsIncomplete(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v11 = 0LL;
  int v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  if (v3 && a2)
  {
    uint64_t v5 = *(void *)(a2 + 164);
    if ((v5 & 0x20000000000200LL) != 0)
    {
      if ((v5 & 0x2000000000LL) != 0 && (*(_BYTE *)(a2 + 156) & 1) != 0 && *(_BYTE *)(a2 + 140) == 2)
      {
        _LSDefaultLog();
        uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          _LSDatabaseGetNSStringFromString(v4);
          char v7 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)__int128 buf = 138543362;
          uint64_t v16 = v7;
          _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_INFO,  "Ignoring first-party applet %{public}@ in /Library during incompleteness check",  buf,  0xCu);
        }
      }

      else
      {
        char v14 = 1;
      }
    }

    else
    {
      BOOL v10 = v3;
      _CSArrayEnumerateAllValues();
    }
  }

  uint64_t v8 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_183EC4754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _LSDatabaseGetNSStringFromString(_LSDatabase *a1)
{
  return (id)_CSStringCopyCFString();
}

void sub_183EC48E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = v4;
  if (v4 && v4->store)
  {
    int v6 = CSStoreAllocUnitWithData();
    if (v6)
    {
      -[_LSDatabase setApplicationsChanged:](v5, 1);
      uint64_t v7 = 0LL;
      if (a3) {
        *a3 = v6;
      }
    }

    else
    {
      uint64_t v7 = 4294957803LL;
    }
  }

  else
  {
    uint64_t v7 = 4294967246LL;
  }

  return v7;
}

void sub_183EC4998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetRegistrationNotification(void *a1, int a2, char a3, uint64_t a4)
{
  id v7 = a1;
  uint64_t v8 = _LSBundleGet(v7, a2);
  if (!v8)
  {

    CFMutableArrayRef Mutable = 0LL;
LABEL_16:
    uint64_t v16 = 0LL;
    goto LABEL_17;
  }

  __int128 v9 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  values = (void *)_CSStringCopyCFString();
  if (values)
  {
    CFArrayRef v11 = CFArrayCreate(v9, (const void **)&values, 1LL, MEMORY[0x189605228]);
    if (v11)
    {
      CFDictionaryAddValue(Mutable, @"bundleIDs", v11);
      CFRelease(v11);
    }

    CFRelease(values);
  }

  int v12 = (const void *)_CSStringCopyCFString();
  if (v12)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x189604AA0], v12);
    CFRelease(v12);
  }

  uint64_t v13 = *(void *)(v8 + 164);
  char v14 = (const void *)*MEMORY[0x189604DE8];
  if ((v13 & 0x40000) != 0) {
    id v15 = (const void *)*MEMORY[0x189604DE8];
  }
  else {
    id v15 = (const void *)*MEMORY[0x189604DE0];
  }
  CFDictionaryAddValue(Mutable, @"isPlaceholder", v15);
  if ((a3 & 1) != 0) {
    CFDictionaryAddValue(Mutable, @"isForcedUpdate", v14);
  }

  if (!Mutable) {
    goto LABEL_16;
  }
  uint64_t v16 = (void *)[objc_alloc(MEMORY[0x189607950]) initWithName:a4 object:0 userInfo:Mutable];
LABEL_17:

  return v16;
}

void sub_183EC4B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleRemove(void *a1, int a2, int a3)
{
  *(_LSDatabase **)((char *)&__dst[66] + 4) = *(_LSDatabase **)MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  int v6 = (const void *)_LSBundleGet(v5, a2);
  memcpy(__dst, v6, 0x214uLL);
  -[_LSDatabase setApplicationsChanged:](v5, 1);
  if ((HIDWORD(__dst[20]) & 0x40000) != 0)
  {
    uint64_t v16 = v5;
    _LSDatabaseEnumeratingBindingMap();
  }

  _LSDatabaseDisposeStringArray(v5, (int)__dst[56]);
  if (HIDWORD(__dst[56]))
  {
    id v15 = v5;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }

  if (LODWORD(__dst[57]))
  {
    char v14 = v5;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }

  if (HIDWORD(__dst[57]))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    uint64_t v13 = v5;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }

  else
  {
    CFMutableDictionaryRef Mutable = 0LL;
  }

  if (HIDWORD(__dst[58]))
  {
    int v12 = v5;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();
  }

  _LSBindableDeactivate(v5, a2);
  _LSBindableDeactivate(v5, a2);
  if (HIDWORD(__dst[12])) {
    _LSBindableDeactivate(v5, a2);
  }
  if (LODWORD(__dst[59]))
  {
    _LSBundleDeactivateBindingsForUserActivityTypes(v5, a2, (uint64_t)__dst);
    _CSArrayDispose();
  }

  if (HIDWORD(__dst[65])) {
    _LSBindableDeactivate(v5, a2);
  }
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v5, (int)__dst[58]);
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _CSStringRelease();
  _LSPlistRemove((uint64_t)v5, (int)__dst[53]);
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v5, (int)__dst[37]);
  _LSDatabaseDisposeStringArray(v5, SHIDWORD(__dst[37]));
  _LSDatabaseDisposeStringArray(v5, (int)__dst[55]);
  _LSDatabaseDisposeStringArray(v5, SHIDWORD(__dst[59]));
  _LSDatabaseDisposeStringArray(v5, SHIDWORD(__dst[11]));
  _CSStringRelease();
  _CSStringRelease();
  _CSArrayDispose();
  _LSPlistRemove((uint64_t)v5, SHIDWORD(__dst[54]));
  _LSPlistRemove((uint64_t)v5, (int)__dst[16]);
  _LSPlistRemove((uint64_t)v5, SHIDWORD(__dst[16]));
  _LSPlistRemove((uint64_t)v5, (int)__dst[17]);
  _LSPlistRemove((uint64_t)v5, SHIDWORD(__dst[61]));
  _LSPlistRemove((uint64_t)v5, (int)__dst[18]);
  _LSPlistRemove((uint64_t)v5, (int)__dst[64]);
  _CSStringRelease();
  _CSStringRelease();
  _LSDatabaseDisposeStringArray(v5, (int)__dst[60]);
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v5, (_LSDatabase *)LODWORD(__dst[14]));
  LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v5, (_LSDatabase *)LODWORD(__dst[13]));
  uint64_t v8 = v5;
  __int128 v9 = v8;
  if (LODWORD(__dst[0])) {
    _LSAliasRemove(v8, (int)__dst[0]);
  }
  if (HIDWORD(__dst[60])) {
    _LSAliasRemove(v9, SHIDWORD(__dst[60]));
  }
  if (LODWORD(__dst[12])) {
    _LSAliasRemove(v9, (int)__dst[12]);
  }
  _LSDatabaseDisposeStringArray(v9, (int)__dst[62]);
  _CSArrayDispose();
  BOOL v10 = v9;
  _CSArrayEnumerateAllValues();
  _CSArrayDispose();
  _LSPlistRemove((uint64_t)v10, (int)__dst[65]);
  CSStoreFreeUnit();
  if (a3 || Mutable)
  {
    _LSDatabaseCommit((uint64_t)v10);
    if (Mutable)
    {
      LSPluginSendNotification(v10, (uint64_t)@"com.apple.LaunchServices.pluginsunregistered", Mutable);
      CFRelease(Mutable);
    }
  }

  return 0LL;
}

void sub_183EC52C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleSetFlags()
{
  return _CSStoreWriteToUnit();
}

_LSStringLocalizer *_LSBundleGetLocalizer(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  __int128 v9 = (void *)MEMORY[0x186E2A59C]();
  if (!(_DWORD)a2 || (uint64_t v10 = _LSBundleGet(v7, a2)) == 0)
  {
    if (v8 && [v8 isDirectory])
    {
      int v12 = objc_alloc(&OBJC_CLASS____LSStringLocalizer);
      [v8 URL];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
      char v14 = -[_LSStringLocalizer initWithBundleURL:stringsFile:]( v12,  "initWithBundleURL:stringsFile:",  v13,  @"InfoPlist");

      goto LABEL_13;
    }

void sub_183EC55EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetLocalizedName(void *a1, uint64_t a2, void *a3, void *a4, void *a5, char a6)
{
  v27[5] = *MEMORY[0x1895F89C0];
  id v11 = a1;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  uint64_t v15 = _LSBundleGet(v11, a2);
  if (v12)
  {
    v27[0] = 0LL;
    v27[1] = v27;
    _OWORD v27[2] = 0x2020000000LL;
    v27[3] = -1LL;
    _Block_object_dispose(v27, 8);
  }

  else
  {
    uint64_t v22 = LaunchServices::LocalizedString::Get((LaunchServices::LocalizedString *)v11, v21);
    if (v22)
    {
      LaunchServices::LocalizedString::localizeUnsafely(v22, v11, v14);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        _LSDefaultLog();
        unint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          _LSBundleGetShortDescription(v11, a2);
          objc_claimAutoreleasedReturnValue();
          _LSBundleGetLocalizedName_cold_2();
        }

        goto LABEL_23;
      }
    }
  }

  _LSDefaultLog();
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    _LSBundleGetShortDescription(v11, a2);
    objc_claimAutoreleasedReturnValue();
    _LSBundleGetLocalizedName_cold_1();
  }

  _LSBundleGetLocalizer(v11, a2, 0LL, v13);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  unint64_t v18 = v17;
  if (!v17) {
    goto LABEL_22;
  }
  if (!v12)
  {
    if ((a6 & 1) != 0
      || (-[os_log_s localizedStringWithString:preferredLocalizations:]( v17,  "localizedStringWithString:preferredLocalizations:",  *MEMORY[0x189604AA0],  v14),  (uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue()) == 0LL))
    {
      -[os_log_s localizedStringWithString:preferredLocalizations:]( v18,  "localizedStringWithString:preferredLocalizations:",  *MEMORY[0x189604E10],  v14);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v20) {
        goto LABEL_22;
      }
    }

void sub_183EC591C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetShortDescription(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = _LSBundleGet(v3, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = LaunchServices::LocalizedString::Get( (LaunchServices::LocalizedString *)v3,  (_LSDatabase *)*(unsigned int *)(v4 + 112));
    if (v6)
    {
      LaunchServices::LocalizedString::localizeUnsafely(v6, v3, 0LL);
      id v7 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      id v7 = 0LL;
    }

    uint64_t v8 = LaunchServices::LocalizedString::Get( (LaunchServices::LocalizedString *)v3,  (_LSDatabase *)*(unsigned int *)(v5 + 104));
    if (v8)
    {
      uint64_t v9 = LaunchServices::LocalizedString::localizeUnsafely(v8, v3, 0LL);

      id v7 = (void *)v9;
    }

    if (!v7)
    {
      id v7 = (void *)_CSStringCopyCFString();
      if (!v7)
      {
        id v7 = (void *)_CSStringCopyCFString();
        if (!v7)
        {
          _LSAliasGetName(v3, *(_DWORD *)v5);
          id v7 = (void *)objc_claimAutoreleasedReturnValue();
        }
      }
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

void sub_183EC5AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetDisplayNameForNodeWithUnregisteredBundleType(void **a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!_LSBundleNodeHasUnregisteredPersonality(a1, v7, v8, 0LL))
  {
    uint64_t v10 = 0LL;
    uint64_t v15 = 0LL;
    goto LABEL_25;
  }

  id v26 = 0LL;
  [v7 bundleInfoDictionaryWithError:&v26];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = (uint64_t)v26;
  if (v9)
  {
    uint64_t v11 = objc_opt_class();
    uint64_t v12 = *MEMORY[0x189604AA0];
    uint64_t v13 = [v9 objectForKey:*MEMORY[0x189604AA0]];
    id v14 = (void *)v13;
    if (v11 && v13)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v15 = 0LL;
        uint64_t v16 = v14;
        id v17 = (id)v10;
        goto LABEL_22;
      }

void sub_183EC5D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleNodeHasUnregisteredPersonality(void **a1, void *a2, void *a3, int *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (a4)
  {
    int v10 = *a4;
  }

  else
  {
    if (v8) {
      int v11 = _LSGetBundleClassForExtensionNSString(v8);
    }
    else {
      int v11 = _LSGetBundleClassForNode((uint64_t)a1, v7);
    }
    int v10 = v11;
  }

  uint64_t HasUnregisteredPersonality = _LSBundleClassHasUnregisteredPersonality(v10);
  uint64_t v13 = HasUnregisteredPersonality;
  if (!v10 && !(_DWORD)HasUnregisteredPersonality)
  {
    CFStringRef inUTI = 0LL;
    if ([v7 getCachedResourceValueIfPresent:&inUTI forKey:*MEMORY[0x189603D30] error:0])
    {
      uint64_t v13 = UTTypeConformsTo(inUTI, @"com.apple.localizable-name-bundle");
    }

    else
    {
      LaunchServices::TypeEvaluator::TypeEvaluator(v17, v7);
      int v16 = 0;
      if (LaunchServices::TypeEvaluator::getTypeUnit((uint64_t)v17, a1, &v16, 0LL)
        && (unsigned int TypeLocalizableNameBundle = _UTTypeGetTypeLocalizableNameBundle((_LSDatabase *)*a1)) != 0)
      {
        uint64_t v13 = _UTTypeConformsTo(*a1, v16, TypeLocalizableNameBundle);
      }

      else
      {
        uint64_t v13 = 0LL;
      }
    }
  }

  return v13;
}

void sub_183EC5EF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyStringDictionaryForKey(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v10 = (void *)MEMORY[0x186E2A59C]();
  _LSBundleGetLocalizer(a1, a2, 0LL, a3);
  int v11 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v13 = [v11 localizedStringDictionaryWithString:a4 defaultValue:a5];
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  objc_autoreleasePoolPop(v10);
  return v13;
}

void sub_183EC5FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSBundleGetLocalizedNameDictionary(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _LSBundleGet(v7, a2);
  int v11 = (_LSDatabase *)*(unsigned int *)(v10 + 112);
  if (!(_DWORD)v11) {
    int v11 = (_LSDatabase *)*(unsigned int *)(v10 + 104);
  }
  uint64_t v12 = (LaunchServices::LocalizedString *)LaunchServices::LocalizedString::Get( (LaunchServices::LocalizedString *)v7,  v11);
  if (v12)
  {
    uint64_t v13 = LaunchServices::LocalizedString::getAllUnsafeLocalizations(v12, v7, 0LL, 0LL, 0LL);
    if (v13)
    {
      _LSDefaultLog();
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        _LSBundleGetShortDescription(v7, a2);
        objc_claimAutoreleasedReturnValue();
        _LSBundleGetLocalizedNameDictionary_cold_2();
      }

      uint64_t v15 = (void *)v13;
      goto LABEL_11;
    }
  }

  _LSDefaultLog();
  int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    _LSBundleGetShortDescription(v7, a2);
    objc_claimAutoreleasedReturnValue();
    _LSBundleGetLocalizedNameDictionary_cold_1();
  }

  uint64_t v15 = (void *)_LSBundleCopyStringDictionaryForKey(v7, a2, v8, *MEMORY[0x189604AA0], (uint64_t)v9);
  if (v15)
  {
LABEL_11:
    if ([v15 count] != 1) {
      goto LABEL_16;
    }
  }

  id v17 = (void *)_LSBundleCopyStringDictionaryForKey(v7, a2, v8, *MEMORY[0x189604E10], (uint64_t)v9);
  unint64_t v18 = v17;
  if (v17 && (unint64_t)[v17 count] >= 2)
  {
    id v19 = v18;

    uint64_t v15 = v19;
  }

LABEL_16:
  return v15;
}

void sub_183EC61B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleInfoPlistKeyIsCommon(void *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (_LSBundleInfoPlistKeyIsCommon::once != -1) {
    dispatch_once(&_LSBundleInfoPlistKeyIsCommon::once, &__block_literal_global_12);
  }
  if ([(id)_LSBundleInfoPlistKeyIsCommon::explicitlyIgnoredKeys containsObject:a1]) {
    return 0LL;
  }
  if ([(id)_LSBundleInfoPlistKeyIsCommon::explicitlyIncludedKeys containsObject:a1]) {
    return 1LL;
  }
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = (id)_LSBundleInfoPlistKeyIsCommon::prefixes;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(a1, "hasPrefix:", *(void *)(*((void *)&v8 + 1) + 8 * i), (void)v8))
        {
          uint64_t v2 = 1LL;
          goto LABEL_17;
        }
      }

      uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  uint64_t v2 = 0LL;
LABEL_17:

  return v2;
}

void sub_183EC638C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EC652C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleCopyArchitecturesAvailable(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = 0LL;
  if (v3)
  {
    if (a2)
    {
      uint64_t v5 = _LSBundleGet(v3, a2);
      if (v5)
      {
        uint64_t v6 = (void *)MEMORY[0x186E2A59C]();
        uint64_t v5 = (uint64_t)_LSBundleCopyArchitectures_Common(v5);
        objc_autoreleasePoolPop(v6);
      }
    }
  }

  return v5;
}

void sub_183EC65B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSEnumerateViableBundlesOfClass(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (a1)
  {
    if (v4) {
      goto LABEL_3;
    }
  }

  else
  {
    [MEMORY[0x1896077D8] currentHandler];
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "OSStatus _LSEnumerateViableBundlesOfClass(LSContext *, LSBundleClass, void (^__strong)(LSBundleID, const LSBundleD ata *, Boolean *))");
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v8 handleFailureInFunction:v9, @"LSBundle.mm", 2601, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

    if (v5) {
      goto LABEL_3;
    }
  }

  [MEMORY[0x1896077D8] currentHandler];
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "OSStatus _LSEnumerateViableBundlesOfClass(LSContext *, LSBundleClass, void (^__strong)(LSBundleID, const LSBundleDat a *, Boolean *))");
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue();
  [v10 handleFailureInFunction:v11, @"LSBundle.mm", 2602, @"Invalid parameter not satisfying: %@", @"inSearchBlock != nil" file lineNumber description];

LABEL_3:
  uint64_t v6 = _LSCheckAllContainerStates(a1);
  if (!(_DWORD)v6)
  {
    id v12 = v5;
    _CSStoreEnumerateUnits();
  }

  return v6;
}

void sub_183EC6778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *_LSGetDescriptionForPersonaType(unint64_t a1)
{
  if (a1 >= 5) {
    uint64_t v1 = (__CFString *)objc_msgSend(objc_alloc(NSString), "initWithFormat:", @"InvalidType(%lu)", a1);
  }
  else {
    uint64_t v1 = off_189D74610[a1];
  }
  return v1;
}

void _LSBundleGetVisualizationFunctions(id (**a1)(void **this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Bundles::getSummary;
  a1[1] = (id (*)(void **, LSContext *, int))LaunchServices::Bundles::display;
  a1[2] = (id (*)(void **, LSContext *, int))LaunchServices::Bundles::copyBindingForVisualization;
}

id LaunchServices::Bundles::getSummary(void **this, LSContext *a2, int a3)
{
  return _LSBundleGetShortDescription(*this, a3);
}

BOOL LaunchServices::Bundles::display( void **this, LSContext *a2, unsigned int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v124 = *MEMORY[0x1895F89C0];
  uint64_t v7 = _LSBundleGet(*this, a3);
  if (v7)
  {
    __int128 v73 = (unsigned int *)v7;
    id v74 = a4;
    if (*(_BYTE *)(v7 + 488) != 11)
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedChar:");
      __int128 v8 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v74, @"revision", v8);
    }

    __int128 v9 = *this;
    id v113 = 0LL;
    _LSBundleCreateNode(v9, a3, 0, 0LL, &v113);
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue();
    id v11 = v113;
    id v12 = v11;
    int v69 = v10;
    if (!v10
      || (id v112 = v11,
          char v13 = [v10 checkResourceIsReachableAndReturnError:&v112],
          id v14 = v112,
          v12,
          id v12 = v14,
          (v13 & 1) == 0))
    {
      uint64_t v106 = MEMORY[0x1895F87A8];
      uint64_t v107 = 3221225472LL;
      uint64_t v108 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      uint64_t v109 = &unk_189D72268;
      uint64_t v111 = v74;
      id v14 = v12;
      id v110 = v14;
      CSStore2::AttributedStringWriter::withWarningColors();
    }

    uint64_t v15 = v73[40];
    _LSBundleClassGetName(v73[40]);
    __int128 v68 = (void *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::format(v74, @"class", @"%@ (0x%llx)", v68, v15);
    CSStore2::AttributedStringWriter::link(v74, *((unsigned int *)*this + 399), v73[1], 0LL);
    int v16 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v74, @"container", v16);

    uint64_t v17 = _LSContainerGet();
    if (v17)
    {
      _LSContainerStateGetDescription(*(char *)(v17 + 2));
      unint64_t v18 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v74, @"mount state", v18);
    }

    CSStore2::AttributedStringWriter::stringArray(v74, @"Driver Extensions");
    if (*((void *)v73 + 34))
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
      id v19 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v74, @"Compatibility", v19);
    }

    if (*((void *)v73 + 40))
    {
      objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedLongLong:");
      uint64_t v20 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(v74, @"InstallFailure", v20);
    }

    CSStore2::AttributedStringWriter::stringArray(v74, @"Mach-O UUIDs");
    [MEMORY[0x189603FA8] array];
    int v71 = (NSArray *)objc_claimAutoreleasedReturnValue();
    if (v73[72])
    {
      uint64_t v101 = MEMORY[0x1895F87A8];
      uint64_t v102 = 3221225472LL;
      CFArrayRef v103 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2;
      char v104 = &unk_189D724C8;
      __int128 v105 = v71;
      _CSArrayEnumerateAllValues();
    }

    CSStore2::AttributedStringWriter::array(v74, @"Device Family", v71);
    CSStore2::AttributedStringWriter::stringArray(v74, @"Counterparts");
    CSStore2::AttributedStringWriter::stringArray(v74, @"EquivalentIDs");
    [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v73 + 33)];
    uint64_t v21 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"sequenceNum", v21);

    [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v73 + 35)];
    uint64_t v22 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"itemID", v22);

    [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v73 + 45)];
    uint64_t v23 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"FamilyID", v23);

    [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v73 + 43)];
    unint64_t v24 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"PurchaserID", v24);

    [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v73 + 44)];
    id v25 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"DownloaderID", v25);

    [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v73 + 42)];
    id v26 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"staticSize", v26);

    [MEMORY[0x189607968] numberWithUnsignedInt:v73[79]];
    uint64_t v27 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"installType", v27);

    CSStore2::AttributedStringWriter::link(v74, *((unsigned int *)*this + 400), v73[121], 0LL);
    unint64_t v28 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v74, @"appContainer", v28);

    CSStore2::AttributedStringWriter::link(v74, *((unsigned int *)*this + 400), v73[24], 0LL);
    uint64_t v29 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v74, @"dataContainer", v29);

    CSStore2::AttributedStringWriter::link(v74, *((unsigned int *)*this + 400), *v73, 0LL);
    __int128 v30 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(v74, @"path", v30);

    LaunchServices::DumpWriter::directoryClass((uint64_t)v74, @"directory", *((unsigned __int8 *)v73 + 140));
    CSStore2::AttributedStringWriter::string(v74, @"name");
    CSStore2::AttributedStringWriter::string(v74, @"displayName");
    CSStore2::AttributedStringWriter::childUnit(v74, @"localizedNames");
    CSStore2::AttributedStringWriter::childUnit(v74, @"localizedShortNames");
    CSStore2::AttributedStringWriter::string(v74, @"itemName");
    CSStore2::AttributedStringWriter::string(v74, @"teamID");
    [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(v73 + 93)];
    uint64_t v31 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"storeFront", v31);

    [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(v73 + 95)];
    int v32 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"versionID", v32);

    CSStore2::AttributedStringWriter::string(v74, @"sourceAppBundleID");
    CSStore2::AttributedStringWriter::string(v74, @"ratingLabel");
    [MEMORY[0x189607968] numberWithUnsignedLongLong:*((void *)v73 + 50)];
    uint64_t v33 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"ratingRank", v33);

    CSStore2::AttributedStringWriter::string(v74, @"genre");
    [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(v73 + 103)];
    uint64_t v34 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"genreID", v34);

    CSStore2::AttributedStringWriter::childUnit(v74, @"distributorInfo");
    CSStore2::AttributedStringWriter::string(v74, @"identifier");
    if (v73[3] != v73[73]) {
      CSStore2::AttributedStringWriter::string(v74, @"canonical id");
    }
    CSStore2::AttributedStringWriter::string(v74, @"vendor");
    CSStore2::AttributedStringWriter::string(v74, @"type");
    __int128 v35 = *(_OWORD *)(v73 + 11);
    *(_OWORD *)v119._opaque = *(_OWORD *)(v73 + 7);
    *(_OWORD *)&v119._opaque[16] = v35;
    LaunchServices::DumpWriter::version(v74, @"version", &v119);
    CSStore2::AttributedStringWriter::string(v74, @"versionString");
    CSStore2::AttributedStringWriter::string(v74, @"displayVersion");
    CSStore2::AttributedStringWriter::string(v74, @"codeInfoID");
    CSStore2::AttributedStringWriter::string(v74, @"signerOrg");
    CSStore2::AttributedStringWriter::string(v74, @"signer identity");
    CSStore2::AttributedStringWriter::string(v74, @"appVariant");
    CSStore2::AttributedStringWriter::string(v74, @"managementDeclarationID");
    CSStore2::AttributedStringWriter::timestamp(v74, @"mod date", (double)(int)v73[47]);
    CSStore2::AttributedStringWriter::timestamp(v74, @"reg date", (double)(int)v73[6]);
    CSStore2::AttributedStringWriter::timestamp(v74, @"rec mod date", (double)(int)v73[126]);
    if (*((_BYTE *)v73 + 489))
    {
      uint64_t v95 = MEMORY[0x1895F87A8];
      uint64_t v96 = 3221225472LL;
      id v97 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4;
      uint64_t v98 = &__block_descriptor_48_e5_v8__0l;
      id v99 = v74;
      int v100 = v73;
      CSStore2::AttributedStringWriter::withWarningColors();
    }

    CSStore2::AttributedStringWriter::beginFlags(v74, @"bundle flags");
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 12566272;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v74);
    CSStore2::AttributedStringWriter::beginBitfieldFlags(v74, @"more flags");
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16727808;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16727808;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 5213952;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v74);
    if ((v73[43] & 0x10000) != 0)
    {
      if (v73[114]) {
        _CSArrayGetCount();
      }
      if (v73[113]) {
        _CSArrayGetCount();
      }
    }

    CSStore2::AttributedStringWriter::beginFlags(v74, @"plist flags");
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v74);
    CSStore2::AttributedStringWriter::beginFlags(v74, @"icon flags");
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v74);
    _LSSliceMaskWriteDescription(v74);
    CSStore2::AttributedStringWriter::beginFlags(v74, @"item flags");
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v122) = 0;
    BYTE4(v122) = 0;
    CSStore2::AttributedStringWriter::flag();
    LODWORD(v122) = 16711680;
    BYTE4(v122) = 1;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(v74);
    _LSBundleBaseFlagsWriteDescription(v74);
    if (*((_BYTE *)v73 + 141))
    {
      _LSProfileValidationStateGetVisualizationDescription(*((unsigned __int8 *)v73 + 141));
      char v36 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(v74, @"validation", v36);
    }

    LaunchServices::DumpWriter::platform(v74, @"platform", v73[5]);
    CSStore2::AttributedStringWriter::string(v74, @"iconName");
    CSStore2::AttributedStringWriter::string(v74, @"alternate primary icon");
    if (v73[109]) {
      CSStore2::AttributedStringWriter::childUnit(v74, @"iconDict");
    }
    CSStore2::AttributedStringWriter::stringArray(v74, @"icons");
    CSStore2::AttributedStringWriter::string(v74, @"executable");
    __int128 v37 = *(_OWORD *)(v73 + 53);
    __int128 v122 = *(_OWORD *)(v73 + 49);
    __int128 v123 = v37;
    __int128 v120 = kLSVersionNumberNull;
    __int128 v121 = *(_OWORD *)algn_183FBF5B0;
    if (_LSVersionNumberCompare(&v122, &v120))
    {
      __int128 v38 = *(_OWORD *)(v73 + 53);
      *(_OWORD *)v118._opaque = *(_OWORD *)(v73 + 49);
      *(_OWORD *)&v118._opaque[16] = v38;
      LaunchServices::DumpWriter::version(v74, @"min version", &v118);
      LaunchServices::DumpWriter::platform(v74, @"min version platform", v73[48]);
    }

    __int128 v39 = *(_OWORD *)(v73 + 61);
    __int128 v122 = *(_OWORD *)(v73 + 57);
    __int128 v123 = v39;
    __int128 v120 = kLSVersionNumberNull;
    __int128 v121 = *(_OWORD *)algn_183FBF5B0;
    if (_LSVersionNumberCompare(&v122, &v120))
    {
      __int128 v40 = *(_OWORD *)(v73 + 61);
      *(_OWORD *)v117._opaque = *(_OWORD *)(v73 + 57);
      *(_OWORD *)&v117._opaque[16] = v40;
      LaunchServices::DumpWriter::version(v74, @"max version", &v117);
    }

    __int128 v41 = *(_OWORD *)(v73 + 19);
    __int128 v122 = *(_OWORD *)(v73 + 15);
    __int128 v123 = v41;
    __int128 v120 = kLSVersionNumberNull;
    __int128 v121 = *(_OWORD *)algn_183FBF5B0;
    if (_LSVersionNumberCompare(&v122, &v120))
    {
      __int128 v42 = *(_OWORD *)(v73 + 19);
      *(_OWORD *)v116._opaque = *(_OWORD *)(v73 + 15);
      *(_OWORD *)&v116._opaque[16] = v42;
      LaunchServices::DumpWriter::version(v74, @"execSDK ver", &v116);
    }

    CSStore2::AttributedStringWriter::string(v74, @"App Store tools build version");
    CSStore2::AttributedStringWriter::stringArray(v74, @"personas");
    __int128 v70 = (NSArray *)objc_alloc_init(MEMORY[0x189603FA8]);
    if (v73[125])
    {
      uint64_t v90 = MEMORY[0x1895F87A8];
      uint64_t v91 = 3221225472LL;
      uint64_t v92 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_5;
      v93 = &unk_189D724C8;
      uint64_t v94 = v70;
      _CSArrayEnumerateAllValues();
    }

    CSStore2::AttributedStringWriter::array(v74, @"personaTypes", v70);
    CSStore2::AttributedStringWriter::childUnit(v74, @"infoDictionary");
    CSStore2::AttributedStringWriter::string(v74, @"library");
    CSStore2::AttributedStringWriter::stringArray(v74, @"library items");
    CSStore2::AttributedStringWriter::stringArray(v74, @"queriable schemes");
    CSStore2::AttributedStringWriter::stringArray(v74, @"BGPermittedIDs");
    CSStore2::AttributedStringWriter::stringArray(v74, @"activityTypes");
    CSStore2::AttributedStringWriter::childUnit(v74, @"MI Install IDs");
    uint64_t v84 = MEMORY[0x1895F87A8];
    uint64_t v85 = 3221225472LL;
    uint64_t v86 = ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6;
    __int128 v87 = &__block_descriptor_48_e14_v24__0I8I12_16l;
    uint64_t v88 = v74;
    uint64_t v89 = this;
    _CSArrayEnumerateAllValues();
    CSStore2::AttributedStringWriter::string(v74, @"management domain");
    CSStore2::AttributedStringWriter::string(v74, @"linked parent bundleID");
    CSStore2::AttributedStringWriter::childUnit(v74, @"stashed app info");
    [MEMORY[0x189607968] numberWithUnsignedInt:v73[38]];
    __int128 v43 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(v74, @"code signature version", v43);

    if (v73[40] == 2)
    {
      CFMachPortContext context = (void *)MEMORY[0x186E2A59C]();
      [MEMORY[0x189603FA8] array];
      __int16 v44 = (NSArray *)objc_claimAutoreleasedReturnValue();
      __int128 v82 = 0u;
      __int128 v83 = 0u;
      __int128 v80 = 0u;
      __int128 v81 = 0u;
      _LSGetAllClaimedTypesOrSchemesForBundleID((uint64_t)this, (uint64_t)v73, 14LL, 1LL);
      __int128 v45 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v46 = [v45 countByEnumeratingWithState:&v80 objects:v115 count:16];
      if (v46)
      {
        uint64_t v47 = *(void *)v81;
        do
        {
          for (uint64_t i = 0LL; i != v46; ++i)
          {
            if (*(void *)v81 != v47) {
              objc_enumerationMutation(v45);
            }
            uint64_t v49 = (__CFString *)*(id *)(*((void *)&v80 + 1) + 8 * i);
            if (UTTypeIsDynamic(v49))
            {
              CFStringRef v50 = UTTypeCopyPreferredTagWithClass(v49, @"public.filename-extension");
              uint64_t v51 = (__CFString *)v50;
              if (v50)
              {
                -[__CFString stringByAppendingFormat:](v49, "stringByAppendingFormat:", @" (.%@)", v50);
                id v52 = v49;
                uint64_t v49 = (__CFString *)objc_claimAutoreleasedReturnValue();
              }

              else
              {
                CFStringRef v54 = UTTypeCopyPreferredTagWithClass(v49, @"public.mime-type");
                id v52 = (__CFString *)v54;
                if (v54)
                {
                  uint64_t v55 = -[__CFString stringByAppendingFormat:](v49, "stringByAppendingFormat:", @" (MIME %@)", v54);

                  uint64_t v49 = (__CFString *)v55;
                }
              }
            }

            else
            {
              LODWORD(v122) = 0;
              if (_UTGetActiveTypeForCFStringIdentifier(*this, v49, &v122))
              {
                uint64_t v53 = CSStore2::AttributedStringWriter::link(v74, *((unsigned int *)*this + 8), v122, &v49->isa);

                uint64_t v49 = (__CFString *)v53;
              }
            }

            -[NSArray addObject:](v44, "addObject:", v49);
          }

          uint64_t v46 = [v45 countByEnumeratingWithState:&v80 objects:v115 count:16];
        }

        while (v46);
      }

      -[NSArray sortUsingSelector:](v44, "sortUsingSelector:", sel_caseInsensitiveCompare_);
      CSStore2::AttributedStringWriter::array(v74, @"claimed UTIs", v44);

      objc_autoreleasePoolPop(context);
      inTagClass = (__CFString *)MEMORY[0x186E2A59C]();
      [MEMORY[0x189603FA8] array];
      uint64_t v56 = (NSArray *)objc_claimAutoreleasedReturnValue();
      __int128 v78 = 0u;
      __int128 v79 = 0u;
      __int128 v76 = 0u;
      __int128 v77 = 0u;
      _LSGetAllClaimedTypesOrSchemesForBundleID((uint64_t)this, (uint64_t)v73, 14LL, 0LL);
      uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v58 = [v57 countByEnumeratingWithState:&v76 objects:v114 count:16];
      if (v58)
      {
        uint64_t v59 = *(void *)v77;
        do
        {
          for (uint64_t j = 0LL; j != v58; ++j)
          {
            if (*(void *)v77 != v59) {
              objc_enumerationMutation(v57);
            }
            id v61 = *(id *)(*((void *)&v76 + 1) + 8 * j);
            [NSString stringWithFormat:@"%@:", v61];
            id v62 = (void *)objc_claimAutoreleasedReturnValue();

            -[NSArray addObject:](v56, "addObject:", v62);
          }

          uint64_t v58 = [v57 countByEnumeratingWithState:&v76 objects:v114 count:16];
        }

        while (v58);
      }

      -[NSArray sortUsingSelector:](v56, "sortUsingSelector:", sel_caseInsensitiveCompare_);
      CSStore2::AttributedStringWriter::array(v74, @"claimed schemes", v56);

      objc_autoreleasePoolPop(inTagClass);
    }

    __int128 v63 = (void *)MEMORY[0x186E2A59C]();
    if (v69)
    {
      if ([(id)__LSDefaultsGetSharedInstance() isServer])
      {
        *(void *)&__int128 v122 = 0LL;
        if ([v69 getContentModificationDate:&v122 error:0])
        {
          int v64 = v73[47];
          if (v64 != (int)*(double *)&v122)
          {
            CSStore2::AttributedStringWriter::timestamp(v74, @"bundleModDate", (double)v64);
            CSStore2::AttributedStringWriter::timestamp(v74, @"NodeModDate", *(double *)&v122);
          }
        }
      }
    }

    objc_autoreleasePoolPop(v63);
    [MEMORY[0x189603FA8] array];
    __int128 v65 = (NSArray *)(id)objc_claimAutoreleasedReturnValue();
    _CSArrayEnumerateAllValues();
    CSStore2::AttributedStringWriter::array(v74, @"plugin Identifiers", v65);
    if (v73[33]) {
      CSStore2::AttributedStringWriter::childUnit(v74, @"entitlements");
    }
    if (v73[34]) {
      CSStore2::AttributedStringWriter::childUnit(v74, @"group ctrs");
    }
    if (v73[123]) {
      CSStore2::AttributedStringWriter::childUnit(v74, @"environment");
    }
    if (v73[36]) {
      CSStore2::AttributedStringWriter::childUnit(v74, @"Intents");
    }
    if (v73[114]) {
      _CSArrayEnumerateAllValues();
    }
    if (v73[113]) {
      _CSArrayEnumerateAllValues();
    }

    uint64_t v7 = (uint64_t)v73;
  }

  return v7 != 0;
}

void sub_183EC8B68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
}

uint64_t LaunchServices::Bundles::copyBindingForVisualization(LaunchServices::Bundles *this, LSContext *a2)
{
  return 0LL;
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void ___ZL33_LSBundleCopyArchitectures_CommonPK12LSBundleDataP7NSArrayIP8NSStringE_block_invoke( uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v4 = (void *)v3[7];
  unint64_t v5 = v3[8];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = v3[6];
    uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
    uint64_t v9 = v5 - v7;
    uint64_t v10 = v9 >> 2;
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      id v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>( (uint64_t)(v3 + 8),  v11);
    }
    else {
      id v12 = 0LL;
    }
    char v13 = &v12[8 * v8];
    id v14 = &v12[8 * v11];
    *(void *)char v13 = a2;
    uint64_t v6 = v13 + 8;
    int v16 = (char *)v3[6];
    uint64_t v15 = (char *)v3[7];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }

      while (v15 != v16);
      uint64_t v15 = (char *)v3[6];
    }

    v3[6] = v13;
    v3[7] = v6;
    _OWORD v3[8] = v14;
    if (v15) {
      operator delete(v15);
    }
  }

  else
  {
    *id v4 = a2;
    uint64_t v6 = v4 + 1;
  }

  v3[7] = v6;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>( uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  __int128 v105 = (int *)result;
LABEL_2:
  id v99 = a2 - 1;
  uint64_t v6 = v105;
  while (2)
  {
    uint64_t v7 = (uint64_t *)v6;
    uint64_t v8 = (char *)a2 - (char *)v6;
    unint64_t v9 = ((char *)a2 - (char *)v6) >> 3;
    __int128 v105 = (int *)v7;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        uint64_t v37 = *(a2 - 1);
        uint64_t v38 = *v7;
        unsigned int v39 = _LSScoreCPUType(v37);
        __n128 result = _LSScoreCPUType(v38);
        if (v39 < result)
        {
          *uint64_t v7 = v37;
          *(a2 - 1) = v38;
        }

        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v7,  v7 + 1,  v99);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v7,  v7 + 1,  v7 + 2,  v99);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>( v7,  v7 + 1,  v7 + 2,  v7 + 3,  v99);
      default:
        if (v8 <= 191)
        {
          __int128 v40 = v7 + 1;
          BOOL v42 = v7 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              uint64_t v43 = 0LL;
              do
              {
                uint64_t v45 = *v7;
                uint64_t v44 = v7[1];
                uint64_t v7 = v40;
                unsigned int v46 = _LSScoreCPUType(v44);
                __n128 result = _LSScoreCPUType(v45);
                if (v46 < result)
                {
                  uint64_t v47 = v43;
                  while (1)
                  {
                    *(void *)((char *)v105 + v47 + _Block_object_dispose((const void *)(v13 - 48), 8) = v45;
                    if (!v47) {
                      break;
                    }
                    uint64_t v45 = *(void *)((char *)v105 + v47 - 8);
                    __n128 result = _LSScoreCPUType(v45);
                    v47 -= 8LL;
                    if (v46 >= result)
                    {
                      int v48 = (void *)((char *)v105 + v47 + 8);
                      goto LABEL_76;
                    }
                  }

                  int v48 = v105;
LABEL_76:
                  *int v48 = v44;
                }

                __int128 v40 = v7 + 1;
                v43 += 8LL;
              }

              while (v7 + 1 != a2);
            }
          }

          else if (!v42)
          {
            do
            {
              uint64_t v92 = *(void *)v105;
              uint64_t v91 = *((void *)v105 + 1);
              v93 = v40;
              unsigned int v94 = _LSScoreCPUType(v91);
              __n128 result = _LSScoreCPUType(v92);
              if (v94 < result)
              {
                uint64_t v95 = v93;
                do
                {
                  *uint64_t v95 = v92;
                  uint64_t v92 = *(v95 - 2);
                  __n128 result = _LSScoreCPUType(v92);
                  --v95;
                }

                while (v94 < result);
                *uint64_t v95 = v91;
              }

              __int128 v105 = (int *)v93;
              __int128 v40 = v93 + 1;
            }

            while (v93 + 1 != a2);
          }

          return result;
        }

        if (!a3)
        {
          if (v7 != a2)
          {
            unint64_t v96 = v8;
            int64_t v49 = (v9 - 2) >> 1;
            int64_t v50 = v49;
            unint64_t v98 = v9;
            do
            {
              int64_t v51 = v50;
              if (v49 >= v50)
              {
                uint64_t v52 = (2 * v50) | 1;
                uint64_t v53 = &v7[v52];
                uint64_t v54 = 2 * v50 + 2;
                uint64_t v55 = *v53;
                int64_t v100 = v50;
                if (v54 < (uint64_t)v9)
                {
                  uint64_t v56 = v53[1];
                  unsigned int v57 = _LSScoreCPUType(v55);
                  unsigned int v58 = _LSScoreCPUType(v56);
                  if (v57 < v58) {
                    uint64_t v55 = v56;
                  }
                  uint64_t v7 = (uint64_t *)v105;
                  if (v57 < v58)
                  {
                    ++v53;
                    uint64_t v52 = v54;
                  }
                }

                uint64_t v59 = &v7[v51];
                uint64_t v60 = *v59;
                unsigned int v61 = _LSScoreCPUType(v55);
                __n128 result = _LSScoreCPUType(v60);
                unsigned int v103 = result;
                BOOL v62 = v61 >= result;
                uint64_t v7 = (uint64_t *)v105;
                if (v62)
                {
                  uint64_t v97 = v60;
                  do
                  {
                    __int128 v63 = v53;
                    *uint64_t v59 = v55;
                    if (v49 < v52) {
                      break;
                    }
                    uint64_t v64 = (2 * v52) | 1;
                    uint64_t v53 = &v7[v64];
                    uint64_t v65 = 2 * v52 + 2;
                    uint64_t v55 = *v53;
                    if (v65 < (uint64_t)v9)
                    {
                      uint64_t v66 = v53[1];
                      unsigned int v67 = _LSScoreCPUType(*v53);
                      unsigned int v68 = _LSScoreCPUType(v66);
                      if (v67 < v68) {
                        uint64_t v55 = v66;
                      }
                      uint64_t v7 = (uint64_t *)v105;
                      if (v67 < v68) {
                        ++v53;
                      }
                      unint64_t v9 = v98;
                      if (v67 < v68) {
                        uint64_t v64 = v65;
                      }
                    }

                    __n128 result = _LSScoreCPUType(v55);
                    uint64_t v59 = v63;
                    uint64_t v52 = v64;
                  }

                  while (result >= v103);
                  uint64_t *v63 = v97;
                  int64_t v51 = v100;
                }
              }

              int64_t v50 = v51 - 1;
            }

            while (v51);
            uint64_t v69 = v96 >> 3;
            do
            {
              uint64_t v70 = 0LL;
              int v71 = v105;
              uint64_t v101 = *(void *)v105;
              char v104 = a2;
              do
              {
                __int128 v72 = &v71[2 * v70];
                uint64_t v75 = *((void *)v72 + 1);
                __int128 v73 = (uint64_t *)(v72 + 2);
                uint64_t v74 = v75;
                uint64_t v76 = (2 * v70) | 1;
                uint64_t v77 = 2 * v70 + 2;
                if (v77 < v69)
                {
                  uint64_t v78 = v73[1];
                  unsigned int v79 = _LSScoreCPUType(v74);
                  __n128 result = _LSScoreCPUType(v78);
                  if (v79 < result)
                  {
                    uint64_t v74 = v78;
                    ++v73;
                    uint64_t v76 = v77;
                  }
                }

                *(void *)int v71 = v74;
                int v71 = (int *)v73;
                uint64_t v70 = v76;
              }

              while (v76 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
              __int128 v80 = v104 - 1;
              if (v73 == v104 - 1)
              {
                __int128 v81 = v104 - 1;
                uint64_t *v73 = v101;
              }

              else
              {
                uint64_t *v73 = *v80;
                __int128 v81 = v104 - 1;
                *__int128 v80 = v101;
                uint64_t v82 = (char *)v73 - (char *)v105 + 8;
                if (v82 >= 9)
                {
                  unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  uint64_t v84 = &v105[2 * v83];
                  uint64_t v85 = *(void *)v84;
                  uint64_t v86 = *v73;
                  unsigned int v87 = _LSScoreCPUType(*(void *)v84);
                  __n128 result = _LSScoreCPUType(v86);
                  if (v87 < result)
                  {
                    unsigned int v88 = result;
                    do
                    {
                      uint64_t v89 = (uint64_t *)v84;
                      uint64_t *v73 = v85;
                      if (!v83) {
                        break;
                      }
                      unint64_t v83 = (v83 - 1) >> 1;
                      uint64_t v84 = &v105[2 * v83];
                      uint64_t v85 = *(void *)v84;
                      __n128 result = _LSScoreCPUType(*(void *)v84);
                      __int128 v73 = v89;
                    }

                    while (result < v88);
                    *uint64_t v89 = v86;
                  }
                }
              }

              BOOL v90 = v69-- <= 2;
              a2 = v81;
            }

            while (!v90);
          }

          return result;
        }

        uint64_t v10 = &v7[v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( &v7[v9 >> 1],  v7,  v99);
        }

        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v7,  &v7[v9 >> 1],  v99);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v7 + 1,  v10 - 1,  a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v7 + 2,  &v7[(v9 >> 1) + 1],  a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v10 - 1,  &v7[v9 >> 1],  &v7[(v9 >> 1) + 1]);
          uint64_t v11 = *v7;
          *uint64_t v7 = *v10;
          *uint64_t v10 = v11;
        }

        --a3;
        uint64_t v12 = *v7;
        if ((a4 & 1) == 0)
        {
          unsigned int v14 = _LSScoreCPUType(*((_DWORD *)v7 - 2));
          unsigned int v13 = _LSScoreCPUType(v12);
          if (v14 < v13) {
            goto LABEL_12;
          }
          __n128 result = _LSScoreCPUType(*(_DWORD *)v99);
          if (v13 >= result)
          {
            uint64_t v29 = (int *)(v7 + 1);
            do
            {
              uint64_t v6 = v29;
              v29 += 2;
              __n128 result = _LSScoreCPUType(*v6);
            }

            while (v13 >= result);
          }

          else
          {
            uint64_t v6 = (int *)v7;
            do
            {
              int v28 = v6[2];
              v6 += 2;
              __n128 result = _LSScoreCPUType(v28);
            }

            while (v13 >= result);
          }

          __int128 v30 = (int *)a2;
          if (v6 < (int *)a2)
          {
            __int128 v30 = (int *)a2;
            do
            {
              int v31 = *(v30 - 2);
              v30 -= 2;
              __n128 result = _LSScoreCPUType(v31);
            }

            while (v13 < result);
          }

          if (v6 < v30)
          {
            uint64_t v32 = *(void *)v6;
            uint64_t v33 = *(void *)v30;
            do
            {
              *(void *)uint64_t v6 = v33;
              *(void *)__int128 v30 = v32;
              do
              {
                uint64_t v34 = *((void *)v6 + 1);
                v6 += 2;
                uint64_t v32 = v34;
              }

              while (v13 >= _LSScoreCPUType(v34));
              do
              {
                uint64_t v35 = *((void *)v30 - 1);
                v30 -= 2;
                uint64_t v33 = v35;
                __n128 result = _LSScoreCPUType(v35);
              }

              while (v13 < result);
            }

            while (v6 < v30);
          }

          char v36 = (uint64_t *)(v6 - 2);
          a4 = 0;
          *char v36 = v12;
          continue;
        }

        unsigned int v13 = _LSScoreCPUType(*v7);
LABEL_12:
        uint64_t v15 = 0LL;
        do
          uint64_t v16 = v7[++v15];
        while (_LSScoreCPUType(v16) < v13);
        uint64_t v17 = &v7[v15];
        unint64_t v18 = a2;
        if (v15 == 1)
        {
          unint64_t v18 = a2;
          do
          {
            if (v17 >= v18) {
              break;
            }
            int v20 = *((_DWORD *)v18-- - 2);
          }

          while (_LSScoreCPUType(v20) >= v13);
        }

        else
        {
          do
            int v19 = *((_DWORD *)v18-- - 2);
          while (_LSScoreCPUType(v19) >= v13);
        }

        if (v17 >= v18)
        {
          id v26 = v17 - 1;
        }

        else
        {
          uint64_t v21 = *v18;
          uint64_t v22 = &v7[v15];
          uint64_t v23 = v18;
          do
          {
            uint64_t *v22 = v21;
            *uint64_t v23 = v16;
            do
            {
              uint64_t v24 = v22[1];
              ++v22;
              uint64_t v16 = v24;
            }

            while (_LSScoreCPUType(v24) < v13);
            do
            {
              uint64_t v25 = *--v23;
              uint64_t v21 = v25;
            }

            while (_LSScoreCPUType(v25) >= v13);
          }

          while (v22 < v23);
          id v26 = v22 - 1;
          uint64_t v7 = (uint64_t *)v105;
        }

        if (v26 != v7) {
          *uint64_t v7 = *v26;
        }
        uint64_t *v26 = v12;
        if (v17 < v18)
        {
LABEL_33:
          __n128 result = std::__introsort<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,false>( v7,  v26,  a3,  a4 & 1);
          a4 = 0;
          uint64_t v6 = (int *)(v26 + 1);
          continue;
        }

        BOOL v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v7,  v26);
        uint64_t v6 = (int *)(v26 + 1);
        __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( v26 + 1,  a2);
        if (!(_DWORD)result)
        {
          if (v27) {
            continue;
          }
          goto LABEL_33;
        }

        a2 = v26;
        if (!v27) {
          goto LABEL_2;
        }
        return result;
    }
  }

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v11 = *a4;
  unsigned int v12 = _LSScoreCPUType(*a5);
  uint64_t result = _LSScoreCPUType(v11);
  if (v12 < result)
  {
    *a4 = v10;
    *a5 = v11;
    uint64_t v14 = *a4;
    uint64_t v15 = *a3;
    unsigned int v16 = _LSScoreCPUType(*a4);
    uint64_t result = _LSScoreCPUType(v15);
    if (v16 < result)
    {
      *a3 = v14;
      *a4 = v15;
      uint64_t v17 = *a3;
      uint64_t v18 = *a2;
      unsigned int v19 = _LSScoreCPUType(*a3);
      uint64_t result = _LSScoreCPUType(v18);
      if (v19 < result)
      {
        *a2 = v17;
        *a3 = v18;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        unsigned int v22 = _LSScoreCPUType(*a2);
        uint64_t result = _LSScoreCPUType(v21);
        if (v22 < result)
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }

  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  unsigned int v8 = _LSScoreCPUType(*a2);
  unsigned int v9 = _LSScoreCPUType(v7);
  uint64_t v10 = *a3;
  uint64_t result = _LSScoreCPUType(*a3);
  if (v8 >= v9)
  {
    if (result < v8)
    {
      *a2 = v10;
      *a3 = v6;
      uint64_t v12 = *a2;
      uint64_t v13 = *a1;
      unsigned int v14 = _LSScoreCPUType(*a2);
      uint64_t result = _LSScoreCPUType(v13);
      if (v14 < result)
      {
        *a1 = v12;
        *a2 = v13;
      }
    }
  }

  else
  {
    if (result >= v8)
    {
      *a1 = v6;
      *a2 = v7;
      uint64_t v15 = *a3;
      uint64_t result = _LSScoreCPUType(*a3);
      *a2 = v15;
    }

    else
    {
      *a1 = v10;
    }

    *a3 = v7;
  }

  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      unsigned int v8 = _LSScoreCPUType(v6);
      if (v8 < _LSScoreCPUType(v7))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }

      return 1LL;
    case 3LL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( a1,  a1 + 1,  a2 - 1);
      return 1LL;
    case 4LL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( a1,  a1 + 1,  a1 + 2,  a2 - 1);
      return 1LL;
    case 5LL:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *,0>( a1,  a1 + 1,  a1 + 2,  a1 + 3,  a2 - 1);
      return 1LL;
    default:
      unsigned int v9 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( a1,  a1 + 1,  a1 + 2);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1LL;
      }
      int v11 = 0;
      uint64_t v12 = 24LL;
      break;
  }

  while (1)
  {
    uint64_t v13 = *v10;
    uint64_t v14 = *v9;
    unsigned int v15 = _LSScoreCPUType(*v10);
    if (v15 < _LSScoreCPUType(v14))
    {
      uint64_t v16 = v12;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16) = v14;
        uint64_t v17 = v16 - 8;
        if (v16 == 8) {
          break;
        }
        uint64_t v14 = *(uint64_t *)((char *)a1 + v16 - 16);
        unsigned int v18 = _LSScoreCPUType(v14);
        uint64_t v16 = v17;
        if (v15 >= v18)
        {
          unsigned int v19 = (uint64_t *)((char *)a1 + v17);
          goto LABEL_12;
        }
      }

      unsigned int v19 = a1;
LABEL_12:
      *unsigned int v19 = v13;
      if (++v11 == 8) {
        return v10 + 1 == a2;
      }
    }

    unsigned int v9 = v10;
    v12 += 8LL;
    if (++v10 == a2) {
      return 1LL;
    }
  }

uint64_t _LSScoreCPUType(int a1)
{
  if (a1 == 16777228) {
    int v1 = 1;
  }
  else {
    int v1 = -1;
  }
  if (a1 == 16777234) {
    int v2 = 4;
  }
  else {
    int v2 = v1;
  }
  if (a1 == 16777223) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 18) {
    unsigned int v4 = 5;
  }
  else {
    unsigned int v4 = -1;
  }
  if (a1 == 12) {
    unsigned int v4 = 6;
  }
  if (a1 == 7) {
    unsigned int v4 = 3;
  }
  if (a1 <= 16777222) {
    return v4;
  }
  else {
    return v3;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,_LSBundleCopyArchitectures_Common(LSBundleData const*,NSArray<NSString *> *)::$_0 &,LSSliceData *>( uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = *a3;
  unsigned int v10 = _LSScoreCPUType(*a4);
  uint64_t result = _LSScoreCPUType(v9);
  if (v10 < result)
  {
    *a3 = v8;
    *a4 = v9;
    uint64_t v12 = *a3;
    uint64_t v13 = *a2;
    unsigned int v14 = _LSScoreCPUType(*a3);
    uint64_t result = _LSScoreCPUType(v13);
    if (v14 < result)
    {
      *a2 = v12;
      *a3 = v13;
      uint64_t v15 = *a2;
      uint64_t v16 = *a1;
      unsigned int v17 = _LSScoreCPUType(*a2);
      uint64_t result = _LSScoreCPUType(v16);
      if (v17 < result)
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }

  return result;
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format( *(CSStore2::AttributedStringWriter **)(a1 + 40),  0LL,  @"Bundle node not found on disk: %@",  *(void *)(a1 + 32));
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_2(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x189607968], "numberWithUnsignedInt:");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "addObject:");
}

void sub_183EC9C3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_4(uint64_t a1)
{
  int v1 = *(CSStore2::AttributedStringWriter **)(a1 + 32);
  [MEMORY[0x189607968] numberWithUnsignedChar:*(unsigned __int8 *)(*(void *)(a1 + 40) + 489)];
  id v2 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  CSStore2::AttributedStringWriter::number(v1, @"retries", v2);
}

void sub_183EC9CA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_5( uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(void **)(a1 + 32);
  _LSGetDescriptionForPersonaType(a3);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:");
}

void sub_183EC9CFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_6(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::childUnit( *(CSStore2::AttributedStringWriter **)(a1 + 32),  @"supportedGameController");
}

void ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_7( uint64_t a1, uint64_t a2, int a3)
{
  if (_LSGetPlugin(**(void **)(a1 + 40), a3))
  {
    id v4 = (id)_CSStringCopyCFString();
    if (v4) {
      [*(id *)(a1 + 32) addObject:v4];
    }
  }

void sub_183EC9DC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_8(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 32));
}

uint64_t ___ZN14LaunchServices7BundlesL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke_9(uint64_t a1)
{
  uint64_t result = _LSClaimGet();
  if (result) {
    return CSStore2::AttributedStringWriter::childUnit(*(CSStore2::AttributedStringWriter **)(a1 + 40));
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_2(uint64_t result, unsigned int a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2048;
  *(void *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_1_1(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, os_log_s *a4@<X8>)
{
}

  ;
}

  ;
}

void sub_183ECA520( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_183ECA740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_183ECA9D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&currentLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x183ECAA08LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_183ECAA18(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x183ECA9DCLL);
  }
  objc_terminate();
  return __45__LSBundleProxy_bundleProxyForCurrentProcess__block_invoke();
}

void sub_183ECBA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECBB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECBCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECBEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECC0B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183ECC2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECC3AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECC488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECC520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECC62C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void yieldAppsMatchingSearch(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v22 = 0LL;
  unsigned int v19 = 0LL;
  id v20 = 0LL;
  char v21 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  unint64_t v5 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = (void *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v5, 0LL);

  if (v6)
  {
    v15[0] = MEMORY[0x1895F87A8];
    v15[1] = 3221225472LL;
    v15[2] = ___ZL23yieldAppsMatchingSearchU13block_pointerFbP14_LSQueryResultP7NSErrorEU13block_pointerFbP11_LSDatabasejPK12LSBundleDataE_block_invoke;
    v15[3] = &unk_189D74758;
    id v16 = v4;
    unsigned int v18 = v6;
    id v7 = v3;
    id v17 = v7;
    int v8 = _LSEnumerateViableBundlesOfClass(v6, 2LL, v15);
    if (v8)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v8, (uint64_t)"yieldAppsMatchingSearch", 659LL, 0LL);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void, void *))v7 + 2))(v7, 0LL, v9);
    }

    id v10 = v16;
  }

  else
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    int v11 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v11, 0LL);

    if (v12) {
      id v10 = 0LL;
    }
    else {
      id v10 = v22;
    }
    (*((void (**)(id, void, id))v3 + 2))(v3, 0LL, v10);
  }

  if (v19 && v21) {
    _LSContextDestroy(v19);
  }
  id v13 = v20;
  unsigned int v19 = 0LL;
  id v20 = 0LL;

  char v21 = 0;
  id v14 = v22;
  id v22 = 0LL;
}

void sub_183ECC820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183ECC8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECC9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECCAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECCB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECCC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECCD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECCE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECCF10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECCFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECD27C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_183ECD390(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_183ECD4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECD584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECD61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECD6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL23yieldAppsMatchingSearchU13block_pointerFbP14_LSQueryResultP7NSErrorEU13block_pointerFbP11_LSDatabasejPK12LSBundleDataE_block_invoke( void *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v8 = (void *)MEMORY[0x186E2A59C]();
  if (*(_DWORD *)(a3 + 12) && (*(unsigned int (**)(void))(a1[4] + 16LL))())
  {
    +[LSApplicationProxy applicationProxyWithBundleUnitID:withContext:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyWithBundleUnitID:withContext:",  a2,  a1[6]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9) {
      *a4 = (*(uint64_t (**)(void))(a1[5] + 16LL))() ^ 1;
    }
  }

  objc_autoreleasePoolPop(v8);
}

void sub_183ECD7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECD9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::Record::storeWeakSharedRecord(void *a1, id *a2)
{
  id v3 = a1;
  objc_storeWeak(a2, v3);
  if (v3)
  {
    [v3 _setShared:1];
    CFAutorelease(v3);
  }
}

void sub_183ECDA64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ECDC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECDF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void sub_183ECE09C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_183ECE150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECE294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECE348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ECE40C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ECE578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECE674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECE7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_183ECE868( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183ECEC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECECCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECEDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECEE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECEEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECF01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECF464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECF5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __LAUNCH_SERVICES_IS_GETTING_ENTITLEMENTS_FROM_THE_KERNEL__(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  id v2 = (void *)xpc_copy_entitlements_data_for_token();
  id v3 = v2;
  if (v2 && object_getClass(v2) == (Class)MEMORY[0x1895F9240])
  {
    id v5 = objc_alloc(MEMORY[0x189603F48]);
    bytes_ptr = xpc_data_get_bytes_ptr(v3);
    id v7 = (void *)[v5 initWithBytesNoCopy:bytes_ptr length:xpc_data_get_length(v3) freeWhenDone:0];
    if (!v7)
    {
      id v4 = 0LL;
LABEL_16:

      goto LABEL_17;
    }

    id v14 = 0LL;
    [MEMORY[0x1896079E8] propertyListWithData:v7 options:0 format:0 error:&v14];
    int v8 = (void *)objc_claimAutoreleasedReturnValue();
    id v9 = v14;
    if (v8)
    {
      if (_NSIsNSDictionary())
      {
        +[_LSLazyPropertyList lazyPropertyListWithPropertyList:]((uint64_t)&OBJC_CLASS____LSLazyPropertyList, v8);
        id v4 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

        goto LABEL_16;
      }

      _LSRecordLog();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = objc_opt_class();
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v16 = a1;
        __int16 v17 = 2114;
        uint64_t v18 = v12;
        int v11 = "Entitlements for audit-token-based bundle record %@ were of type %{public}@ instead of NSDictionary. Please file a radar.";
        goto LABEL_13;
      }
    }

    else
    {
      _LSRecordLog();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v16 = a1;
        __int16 v17 = 2112;
        uint64_t v18 = (uint64_t)v9;
        int v11 = "Error reading entitlements from data blob for audit-token-based bundle record %@: %@";
LABEL_13:
        _os_log_impl(&dword_183E58000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x16u);
      }
    }

    id v4 = 0LL;
    goto LABEL_15;
  }

  id v4 = 0LL;
LABEL_17:

  return v4;
}

void sub_183ECF7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECF8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECF948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECF9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECFA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECFC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECFCA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECFD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ECFDB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ECFFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED03C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);
  _Unwind_Resume(a1);
}

void sub_183ED076C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED0AA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ED0B64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ED0BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL27_LSBundleRecordMaybeLogInitP6FSNodeP8NSString_block_invoke()
{
  id v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v1 = os_log_type_enabled(v0, OS_LOG_TYPE_INFO);

  if (v1)
  {
    [MEMORY[0x1896077F8] mainBundle];
    id v2 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 bundleURL];
    id v3 = (void *)objc_claimAutoreleasedReturnValue();
    [v3 lastPathComponent];
    id v10 = (id)objc_claimAutoreleasedReturnValue();

    if (([v10 hasSuffix:@".app"] & 1) != 0
      || [v10 hasSuffix:@".appex"])
    {
      [MEMORY[0x1896077F8] mainBundle];
      id v4 = (void *)objc_claimAutoreleasedReturnValue();
      [v4 bundleIdentifier];
      id v5 = (void *)objc_claimAutoreleasedReturnValue();
      int v6 = [v5 hasPrefix:@"com.apple."];

      if (v6)
      {
        [MEMORY[0x1896077F8] mainBundle];
        id v7 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v8 = [v7 bundleIdentifier];
        id v9 = (void *)_LSBundleRecordMaybeLogInit(FSNode *,NSString *)::myBundleIDIfEnabledAndFirstParty;
        _LSBundleRecordMaybeLogInit(FSNode *,NSString *)::myBundleIDIfEnabledAndFirstParty = v8;
      }
    }
  }

void sub_183ED0F78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return NSRequestConcreteImplementation();
}

void sub_183ED10DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183ED13EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_183ED1618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED2010( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_183ED20B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183ED2164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_183ED22A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183ED23DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183ED2448( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ED27B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSIconDictionarySupportsAlternateIcons(NSDictionary *a1)
{
  id v2 = (void *)MEMORY[0x186E2A59C]();
  -[NSDictionary objectForKey:](a1, "objectForKey:", @"CFBundleAlternateIcons");
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v4 = (_NSIsNSArray() & 1) != 0 || _NSIsNSDictionary();

  objc_autoreleasePoolPop(v2);
  return v4;
}

void sub_183ED28D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED299C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ED2AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED2D04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_183ED2F1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_215:
  *((_BYTE *)&self->_moreFlags + 2) = (2 * *((_BYTE *)&self->_moreFlags + 2)) & 0x20 | *((_BYTE *)&self->_moreFlags + 2) & 0xDF;
  uint64_t v193 = objc_opt_class();
  uint64_t v194 = [v4 objectForKey:@"bundlePersonas"];
  uint64_t v195 = (NSDictionary *)v194;
  if (v193 && v194 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v195 = 0LL;
  }

  unlocalizedNamesWithContext = self->_unlocalizedNamesWithContext;
  self->_unlocalizedNamesWithContext = v195;

  [v4 objectForKey:@"_LSUsesSystemPersona"];
  uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v198 = [v197 BOOLValue];

  if (v198) {
    -[LSBundleRecordBuilder addBundleFlag:](self, "addBundleFlag:", 0x100000000000000LL);
  }
  v240 = 0u;
  v241 = 0u;
  v238 = 0u;
  uint64_t v239 = 0u;
  uint64_t v199 = self->_unlocalizedNamesWithContext;
  uint64_t v200 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v199,  "countByEnumeratingWithState:objects:count:",  &v238,  v246,  16LL);
  if (v200)
  {
    uint64_t v201 = *(void *)v239;
    do
    {
      for (uint64_t i = 0LL; i != v200; ++i)
      {
        if (*(void *)v239 != v201) {
          objc_enumerationMutation(v199);
        }
        uint64_t v203 = *(void *)(*((void *)&v238 + 1) + 8 * i);
        if (-[_LSPersonaWithAttributes personaType](v203) != 1 && -[_LSPersonaWithAttributes personaType](v203) != 3) {
          *((_BYTE *)&self->_moreFlags + 2) &= ~0x20u;
        }
      }

      uint64_t v200 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v199,  "countByEnumeratingWithState:objects:count:",  &v238,  v246,  16LL);
    }

    while (v200);
  }

  v204 = objc_opt_class();
  v205 = [v4 objectForKey:@"_LSDirectoryClass"];
  uint64_t v206 = (NSArray *)v205;
  if (v204 && v205 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v206 = 0LL;
  }

  bundlePersonas = self->_bundlePersonas;
  self->_bundlePersonas = v206;

  -[LSBundleRecordBuilder parseURLClaimsFromDict:](self, "parseURLClaimsFromDict:", v4);
  -[LSBundleRecordBuilder parseIconFilenamesFromDict:forPlatform:]( self,  "parseIconFilenamesFromDict:forPlatform:",  v4,  *(_DWORD *)&self->_baseFlags);
  -[LSBundleRecordBuilder parseDeviceFamilyFromDict:](self, "parseDeviceFamilyFromDict:", v4);
  -[LSBundleRecordBuilder parseArchitecturesFromDict:](self, "parseArchitecturesFromDict:", v4);
  uint64_t v208 = objc_opt_class();
  uint64_t v209 = [v4 objectForKey:@"_LSRequiresGarbageCollection"];
  uint64_t v210 = (void *)v209;
  if (v208 && v209)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_244:

      goto LABEL_245;
    }

LABEL_240:
    else {
      uint64_t v211 = 0;
    }
    *((_BYTE *)&self->_moreFlags + 2) = *((_BYTE *)&self->_moreFlags + 2) & 0xFD | v211;
    goto LABEL_244;
  }

  if (v209) {
    goto LABEL_240;
  }
LABEL_245:
  uint64_t v212 = objc_opt_class();
  v213 = [v4 objectForKey:@"NSBuiltWithThreadSanitizer"];
  v214 = (void *)v213;
  if (v212 && v213)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_254:

      goto LABEL_255;
    }

LABEL_250:
    else {
      __int128 v215 = 0;
    }
    *((_BYTE *)&self->_moreFlags + 2) = *((_BYTE *)&self->_moreFlags + 2) & 0xFB | v215;
    goto LABEL_254;
  }

  if (v213) {
    goto LABEL_250;
  }
LABEL_255:
  uint64_t v216 = objc_opt_class();
  v217 = [v4 objectForKey:@"LSExecutableFormat"];
  int64_t v218 = (void *)v217;
  if (v216 && v217)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      int64_t v218 = 0LL;
      goto LABEL_262;
    }
  }

  else if (!v217)
  {
    goto LABEL_262;
  }

  itemID = (const __CFString *)self->_itemID;
  if (itemID)
  {
LABEL_253:
    v185->base.teamID = _LSDatabaseCreateStringForCFString(v189, itemID, 0);
    goto LABEL_254;
  }

  if ((*((_BYTE *)&self->_moreFlags + 2) & 1) != 0)
  {
    itemID = @"0000000000";
    goto LABEL_253;
  }

LABEL_262:
  if (*(void *)&self->_hfsCreator)
  {
    __int128 v219 = 0;
  }

  else
  {
    [v4 objectForKey:*MEMORY[0x189604DF8]];
    CFAllocatorRef v220 = (void *)objc_claimAutoreleasedReturnValue();
    __int128 v219 = v220 != 0LL;
  }

  os_log_t v221 = objc_opt_class();
  v222 = [v4 objectForKey:@"LSEligibilityInstallPredicate"];
  v223 = (void *)v222;
  if (!v221 || !v222)
  {
    if (!v222) {
      goto LABEL_271;
    }
LABEL_270:

LABEL_276:
    -[LSBundleRecordBuilder addPlistFlag:](self, "addPlistFlag:", 0x2000000LL);
    goto LABEL_277;
  }

  if ((objc_opt_isKindOfClass() & 1) != 0) {
    goto LABEL_270;
  }

LABEL_271:
  __int128 v224 = objc_opt_class();
  v225 = [v4 objectForKey:@"LSEligibilityUninstallPredicate"];
  v226 = (void *)v225;
  if (v224 && v225 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    v226 = 0LL;
  }

  if (v226) {
    goto LABEL_276;
  }
LABEL_277:
  v227 = objc_opt_class();
  [v4 objectForKey:@"LSRequiredFeatureFlags"];
  v228 = (void *)objc_claimAutoreleasedReturnValue();
  v229 = v228;
  if (v227 && v228)
  {
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0) {
      goto LABEL_283;
    }
    goto LABEL_282;
  }

  v231 = v228 == 0LL;

  if (!v231) {
LABEL_282:
  }
    -[LSBundleRecordBuilder addPlistFlag:](self, "addPlistFlag:", 0x4000000LL);
LABEL_283:
  if (v219)
  {
    -[LSBundleRecordBuilder addBundleFlag:](self, "addBundleFlag:", 512LL);
    _LSInstallLog();
    int v232 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
    {
      v233 = self->_installType;
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v233;
      _os_log_impl( &dword_183E58000,  v232,  OS_LOG_TYPE_DEFAULT,  "Placeholder detected - Flagging bundle %@ incomplete",  buf,  0xCu);
    }
  }

  uint64_t v23 = 1;
LABEL_288:

  return v23;
}

void sub_183ED4780( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Block_object_dispose((const void *)(v18 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_183ED4B90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ED4C48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183ED5998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED5CE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_183ED6054( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

LABEL_298:
    goto LABEL_143;
  }

LABEL_216:
  uint64_t v134 = self->_queriableSchemes;
  if (v134)
  {
    buf.__begin_ = 0LL;
    -[NSArray count](v134, "count");
    char v135 = _CSArrayCreateWithCapacity();
    v185->iconFileNames = v135;
    if (v135)
    {
    }

    else
    {
      int v11 = _LSGetOSStatusFromNSError(buf.__begin_);

      if (v11) {
        goto LABEL_143;
      }
    }
  }

  id v125 = self;
  sandboxEnvironmentVariables = self->_sandboxEnvironmentVariables;
  if (sandboxEnvironmentVariables)
  {
    buf.__begin_ = 0LL;
    -[NSDictionary count](sandboxEnvironmentVariables, "count");
    unint64_t v137 = _CSArrayCreateWithCapacity();
    v185->libraryItems = v137;
    if (v137)
    {

      id v125 = self;
    }

    else
    {
      int v11 = _LSGetOSStatusFromNSError(buf.__begin_);

      id v125 = self;
      if (v11) {
        goto LABEL_143;
      }
    }
  }

LABEL_222:
  pluginMIDicts = v125->_pluginMIDicts;
  if (pluginMIDicts) {
    v185->libraryPath = _LSDatabaseCreateStringArray(v189, pluginMIDicts, 0, 0LL);
  }
  uint64_t v139 = self;
  unint64_t v140 = self->_installType;
  if (v140)
  {
    uint64_t v141 = -[NSNumber hasPrefix:](v140, "hasPrefix:", @"com.apple.");
    uint64_t v139 = self;
    if ((v141 & 1) != 0) {
      goto LABEL_232;
    }
  }

  uint64_t v142 = v139->_vendorName;
  if (!v142) {
    goto LABEL_250;
  }
  int v143 = -[NSString isEqualToString:](v142, "isEqualToString:", @"Internal");
  uint64_t v139 = self;
  if (v143) {
    goto LABEL_232;
  }
  char v144 = -[NSString isEqualToString:](self->_vendorName, "isEqualToString:", @"System");
  uint64_t v139 = self;
  if (v144
    || (__int16 v145 = -[NSString isEqualToString:](self->_vendorName, "isEqualToString:", @"SystemAppPlaceholder"),
        uint64_t v139 = self,
        v145)
    || (uint64_t v146 = -[NSString isEqualToString:](self->_vendorName, "isEqualToString:", @"CoreServices"),
        uint64_t v139 = self,
        v146)
    || (v147 = -[NSString isEqualToString:](self->_vendorName, "isEqualToString:", @"Hidden"), uint64_t v139 = self, v147))
  {
LABEL_232:
    *((_BYTE *)&v139->_moreFlags + 2) |= 1u;
  }

  uint64_t v148 = v139->_vendorName;
  if (v148 && !-[NSString isEqualToString:](v148, "isEqualToString:", @"User"))
  {
    if ((self->_plistContentFlags & 0x800) != 0)
    {
      uint64_t v150 = *(void **)&self->_canDefineSystemExtensionPoint;
      uint64_t v151 = objc_opt_class();
      int v152 = [v150 objectForKey:@"SBAppTags"];
      v153 = (void *)v152;
      if (v151 && v152 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        v153 = 0LL;
      }
    }

    else if (-[NSString isEqualToString:](self->_vendorName, "isEqualToString:", @"CoreServices") {
           || (uint64_t v149 = self->_installType) != 0LL
    }
           && -[NSNumber isEqualToString:](v149, "isEqualToString:", @"com.apple.purplebuddy"))
    {
      -[LSBundleRecordBuilder addBundleFlag:](self, "addBundleFlag:", 0x40000000000LL, v179);
    }
  }

LABEL_254:
  teamID = self->_teamID;
  if (teamID)
  {
    __int128 v156 = _LSDatabaseCreateStringArray(v189, teamID, 0, 0LL);
    v185->claims = v156;
    if (!v156)
    {
LABEL_294:
      int v11 = -9493;
      goto LABEL_143;
    }
  }

  v185->base.signerIdentity = _LSDatabaseCreateStringForCFString(v189, (const __CFString *)self->_appType, 0);
  v185->base.codeInfoIdentifier = _LSDatabaseCreateStringForCFString(v189, (const __CFString *)self->_signerIdentity, 0);
  v185->base.signerOrganization = _LSDatabaseCreateStringForCFString( v189,  (const __CFString *)self->_codeInfoIdentifier,  0);
  v185->base.signatureVersion = -[NSArray unsignedLongLongValue](self->_slices, "unsignedLongLongValue");
  v185->sandboxEnvironmentVariables = _LSPlistAdd((uint64_t)v189, self->_directoryClass);
  v185->bundlePersonas = _LSDatabaseCreateStringForCFString(v189, (const __CFString *)self->_stashedAppInfo, 0);
  v185->recordModificationTime = _LSDatabaseCreateStringForCFString( v189,  (const __CFString *)self->_applicationManagementDomain,  0);
  char v157 = self;
  if (self->_documentClaims)
  {
    v196 = 0u;
    uint64_t v197 = 0u;
    uint64_t v194 = 0u;
    uint64_t v195 = 0u;
    obja = self->_documentClaims;
    char v158 = -[NSArray countByEnumeratingWithState:objects:count:]( obja,  "countByEnumeratingWithState:objects:count:",  &v194,  v214,  16LL);
    if (v158)
    {
      CFStringRef v159 = *(void *)v195;
      __int128 v160 = *MEMORY[0x189604B08];
      do
      {
        for (uint64_t m = 0LL; m != v158; ++m)
        {
          if (*(void *)v195 != v159) {
            objc_enumerationMutation(obja);
          }
          __int16 v162 = *(void **)(*((void *)&v194 + 1) + 8 * m);
          if (_NSIsNSDictionary())
          {
            __int128 v163 = objc_opt_class();
            char v164 = [v162 objectForKey:v160];
            id v165 = (void *)v164;
            if (v163 && v164 && (objc_opt_isKindOfClass() & 1) == 0)
            {

              id v165 = 0LL;
            }

            uint64_t v192 = 0u;
            uint64_t v193 = 0u;
            uint64_t v190 = 0u;
            uint64_t v191 = 0u;
            int v166 = v165;
            uint64_t v167 = [v166 countByEnumeratingWithState:&v190 objects:v213 count:16];
            if (v167)
            {
              uint64_t v168 = *(void *)v191;
              while (2)
              {
                for (n = 0LL; n != v167; ++n)
                {
                  if (*(void *)v191 != v168) {
                    objc_enumerationMutation(v166);
                  }
                  v170 = *(void **)(*((void *)&v190 + 1) + 8 * n);
                  if (_NSIsNSString() && ![v170 caseInsensitiveCompare:@"file"])
                  {
                    -[LSBundleRecordBuilder addBundleFlag:](v188, "addBundleFlag:", 0x8000000LL);
                    goto LABEL_278;
                  }
                }

                uint64_t v167 = [v166 countByEnumeratingWithState:&v190 objects:v213 count:16];
                if (v167) {
                  continue;
                }
                break;
              }
            }

LABEL_278:
          }
        }

        char v158 = -[NSArray countByEnumeratingWithState:objects:count:]( obja,  "countByEnumeratingWithState:objects:count:",  &v194,  v214,  16LL);
      }

      while (v158);
    }

    char v157 = v188;
  }

  v171 = (&v157->super.super.isa)[(unint64_t)v179 / 8];
  if (v171)
  {
    v172 = -[objc_class objectForKey:](v171, "objectForKey:", @"beta-reports-active");
    v173 = v172 == 0LL;

    if (!v173) {
      -[LSBundleRecordBuilder addBundleFlag:](v188, "addBundleFlag:", 0x200000LL);
    }
  }

  v185->bundlePersonaTypes = _LSPlistAdd((uint64_t)v189, v188->_signatureVersion);
  v185->base._sliceMasuint64_t k = _LSSliceMaskForSliceArray(v188->_mobileInstallIDs);
  if (v188->_sdkVersionNumber._opaque[25]) {
    -[LSBundleRecordBuilder addBundleFlag:](v188, "addBundleFlag:", 0x8000000000LL);
  }
  v174 = v188->_registrationInfo;
  if ((v174->options & 0x40) != 0 || v174->bundleClass == 16) {
    -[LSBundleRecordBuilder addBundleFlag:](v188, "addBundleFlag:", 0x40000LL, v179);
  }
  *(void *)(&v185->_clas + 1) = v188->_bundleFlags;
  plistContentFlags = v188->_plistContentFlags;
  itemFlags = v188->_itemFlags;
  LOBYTE(v185->_itemFlags) = v188->_iconFlags;
  moreFlags = (__int16)v188->_moreFlags;
  HIDWORD(v185->_bundleFlags) = plistContentFlags;
  v185->_plistContentFlags = itemFlags;
  *(_WORD *)((char *)&v185->_itemFlags + 1) = moreFlags;
  *(_BYTE *)&v185->base.flags = *((_BYTE *)&v188->_moreFlags + 2);
  uint64_t v24 = v184;
LABEL_291:

  return result;
}

void sub_183ED7CF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve( std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      abort();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    int v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    id v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    id v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--uint64_t v12 = v13;
      }

      while (end != begin);
    }

    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin) {
      operator delete(begin);
    }
  }

void sub_183ED8038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED86CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

Class initEXEnumerator(void)
{
  if (!ExtensionFoundationLibrary(void)::frameworkLibrary) {
    ExtensionFoundationLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/Frameworks/ExtensionFoundation.frame work/ExtensionFoundation",  2);
  }
  Class result = objc_getClass("EXEnumerator");
  classEXEnumerator = (uint64_t)result;
  getEXEnumeratorClass = (uint64_t (*)(void))EXEnumeratorFunction;
  return result;
}

{
  Class result;
  if (!ExtensionFoundationLibrary(void)::frameworkLibrary) {
    ExtensionFoundationLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/Frameworks/ExtensionFoundation.frame work/ExtensionFoundation",  2);
  }
  Class result = objc_getClass("EXEnumerator");
  classEXEnumerator = (uint64_t)result;
  getEXEnumeratorClass = (uint64_t (*)(void))EXEnumeratorFunction;
  return result;
}

id EXEnumeratorFunction(void)
{
  return (id)classEXEnumerator;
}

{
  return (id)classEXEnumerator;
}

void sub_183ED9510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183ED9778( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_183ED9830( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___LSBundleRecordUpdater;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

LABEL_73:
}

void sub_183ED9E8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, id a16)
{
  _Unwind_Resume(a1);
}

void sub_183EDA0A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183EDA150( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EDA69C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *__p, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void sub_183EDAA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDABE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183EDACC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned int,LSPluginData>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSPluginData>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSPluginData>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSPluginData>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,LSPluginData>>( uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }

    id v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      id v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          id v10 = *(char **)v10;
        }

        while (v10);
      }
    }
  }

  id v10 = (char *)operator new(0xF8uLL);
  *(void *)id v10 = 0LL;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 180) = *(_OWORD *)(a3 + 164);
  *(_OWORD *)(v10 + 196) = *(_OWORD *)(a3 + 180);
  *(_OWORD *)(v10 + 212) = *(_OWORD *)(a3 + 196);
  *(_OWORD *)(v10 + 22_Block_object_dispose((const void *)(v13 - 48), 8) = *(_OWORD *)(a3 + 212);
  *(_OWORD *)(v10 + 116) = *(_OWORD *)(a3 + 100);
  *(_OWORD *)(v10 + 132) = *(_OWORD *)(a3 + 116);
  *(_OWORD *)(v10 + 14_Block_object_dispose((const void *)(v13 - 48), 8) = *(_OWORD *)(a3 + 132);
  *(_OWORD *)(v10 + 164) = *(_OWORD *)(a3 + 148);
  *(_OWORD *)(v10 + 52) = *(_OWORD *)(a3 + 36);
  *(_OWORD *)(v10 + 6_Block_object_dispose((const void *)(v13 - 48), 8) = *(_OWORD *)(a3 + 52);
  *(_OWORD *)(v10 + 84) = *(_OWORD *)(a3 + 68);
  *(_OWORD *)(v10 + 100) = *(_OWORD *)(a3 + 84);
  *(_OWORD *)(v10 + 20) = *(_OWORD *)(a3 + 4);
  *(_OWORD *)(v10 + 36) = *(_OWORD *)(a3 + 20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1LL;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)id v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }

  *(void *)id v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }

    else
    {
      v20 &= v7 - 1;
    }

    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }

void sub_183EDAFBC(_Unwind_Exception *a1)
{
}

void sub_183EDB7EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

CFSetRef _LSBundleActivateBindingsForUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  unint64_t v6 = v5;
  unint64_t v7 = (const __CFSet *)4294967246LL;
  if (v5)
  {
    if (a2)
    {
      if (a3)
      {
        unint64_t v7 = _LSBundleCopyUserActivityTypes(v5, a2, a3);
        if (v7)
        {
          id v9 = v6;
          int v10 = a2;
          CFSetApplyFunction(v7, (CFSetApplierFunction)_LSBundleActivateBindingForUserActivityType, &v9);
          CFRelease(v7);

          unint64_t v7 = 0LL;
        }
      }
    }
  }

  return v7;
}

void sub_183EDBE20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFSetRef _LSBundleCopyUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  CFSetRef Copy = 0LL;
  if (v5 && a2 && a3)
  {
    if (*(_DWORD *)(a3 + 472)
      && (unint64_t v7 = (const __CFAllocator *)*MEMORY[0x189604DB0],
          (CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605258])) != 0LL))
    {
      id v10 = v5;
      _CSArrayEnumerateAllValues();
      CFSetRef Copy = CFSetCreateCopy(v7, Mutable);
      CFRelease(Mutable);
    }

    else
    {
      CFSetRef Copy = 0LL;
    }
  }

  return Copy;
}

void sub_183EDBF44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

CFStringRef _LSBundleActivateBindingForUserActivityType(const __CFString *result, void *a2)
{
  if (result && a2)
  {
    __n128 result = (const __CFString *)_LSDatabaseCreateStringForCFString(*(void **)a2, result, 0);
    if ((_DWORD)result)
    {
      _LSBindableActivate(*(void **)a2, *((_DWORD *)a2 + 2));
      return (const __CFString *)_CSStringRelease();
    }
  }

  return result;
}

CFSetRef _LSBundleDeactivateBindingsForUserActivityTypes(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  unint64_t v6 = v5;
  unint64_t v7 = (const __CFSet *)4294967246LL;
  if (v5)
  {
    if (a2)
    {
      if (a3)
      {
        unint64_t v7 = _LSBundleCopyUserActivityTypes(v5, a2, a3);
        if (v7)
        {
          id v9 = v6;
          int v10 = a2;
          CFSetApplyFunction(v7, (CFSetApplierFunction)_LSBundleDeactivateBindingForUserActivityType, &v9);
          CFRelease(v7);

          unint64_t v7 = 0LL;
        }
      }
    }
  }

  return v7;
}

void sub_183EDC080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef _LSBundleDeactivateBindingForUserActivityType(const __CFString *result, void *a2)
{
  if (result && a2)
  {
    __n128 result = (const __CFString *)_LSDatabaseGetStringForCFString(*(void **)a2, result, 0);
    if ((_DWORD)result) {
      return (const __CFString *)_LSBindableDeactivate(*(void **)a2, *((_DWORD *)a2 + 2));
    }
  }

  return result;
}

CFSetRef _LSBundleCopyUserActivityDomainNames(uint64_t a1, int a2, uint64_t a3)
{
  CFSetRef Copy = 0LL;
  if (a1 && a2 && a3)
  {
    uint64_t v4 = _CSStringCopyCFString();
    if (v4)
    {
      id v5 = (const void *)v4;
      unint64_t v6 = (const __CFArray *)_LSCopyUserActivityDomainNamesForBundleID(v4);
      if (v6)
      {
        unint64_t v7 = v6;
        uint8x8_t v8 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        CFIndex Count = CFArrayGetCount(v6);
        CFMutableSetRef Mutable = CFSetCreateMutable(v8, Count, MEMORY[0x189605258]);
        if (Mutable)
        {
          unint64_t v11 = Mutable;
          CFIndex v12 = CFArrayGetCount(v7);
          if (v12 >= 1)
          {
            uint64_t v13 = v12 + 1;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v7, v13 - 2);
              CFSetAddValue(v11, ValueAtIndex);
              --v13;
            }

            while (v13 > 1);
          }

          CFSetRef Copy = CFSetCreateCopy(v8, v11);
          CFRelease(v11);
        }

        else
        {
          CFSetRef Copy = 0LL;
        }

        CFRelease(v7);
      }

      else
      {
        CFSetRef Copy = 0LL;
      }

      CFRelease(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return Copy;
}

BOOL _LSBundleCouldBeSelectedForActivityContinuation(void *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a4;
  BOOL v9 = 0LL;
  if (v7 && a2 && a3)
  {
    uint64_t v10 = *(void *)(a3 + 164);
    BOOL v11 = (_LSBundleDataGetUnsupportedFormatFlag() & 0x400000) == 0;
    BOOL v9 = (v10 & 0x80) == 0 && v11;
    CFIndex v12 = (void *)_CSStringCopyCFString();
    +[LSApplicationRestrictionsManager sharedInstance]();
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(a3 + 400)];
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[LSApplicationRestrictionsManager isRatingAllowed:](v13, v14))
    {
      +[LSApplicationRestrictionsManager sharedInstance]();
      unint64_t v15 = (id *)objc_claimAutoreleasedReturnValue();
      unsigned int v16 = -[LSApplicationRestrictionsManager isApplicationRestricted:checkFlags:]( v15,  v12,  *(void *)(a3 + 164));

      if (!v16)
      {
LABEL_14:

        goto LABEL_15;
      }
    }

    else
    {
    }

    _LSDefaultLog();
    size_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412546;
      unint64_t v20 = v12;
      __int16 v21 = 2112;
      id v22 = v8;
      _os_log_impl( &dword_183E58000,  v17,  OS_LOG_TYPE_DEFAULT,  "%@ is currently restricted and cannot be returned for activity type %@.",  (uint8_t *)&v19,  0x16u);
    }

    BOOL v9 = 0LL;
    goto LABEL_14;
  }

void sub_183EDC414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleCompareForActivityContinuationSuitability(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2 || !a3)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "NSComparisonResult _LSBundleCompareForActivityContinuationSuitability(__strong LSDatabaseRef, const LSBundleData * , const LSBundleData *)");
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 handleFailureInFunction:v14 file:@"LSBundleUserActivitySupport.mm" lineNumber:245 description:@"unexpected NULL bundle data"];
  }

  MayBeOnNetworuint64_t k = _LSBundleDataMayBeOnNetwork(v5, a2);
  if ((MayBeOnNetwork != 0) == (_LSBundleDataMayBeOnNetwork(v5, a3) == 0))
  {
    if (MayBeOnNetwork) {
      uint64_t v8 = 1LL;
    }
    else {
      uint64_t v8 = -1LL;
    }
    goto LABEL_20;
  }

  if (*(_DWORD *)(a2 + 292) == *(_DWORD *)(a3 + 292))
  {
    __int128 v17 = *(_OWORD *)(a2 + 28);
    __int128 v18 = *(_OWORD *)(a2 + 44);
    __int128 v15 = *(_OWORD *)(a3 + 28);
    __int128 v16 = *(_OWORD *)(a3 + 44);
    __int128 v21 = v17;
    __int128 v22 = v18;
    __int128 v7 = *(_OWORD *)(a3 + 44);
    __int128 v19 = *(_OWORD *)(a3 + 28);
    __int128 v20 = v7;
    if (_LSVersionNumberCompare(&v21, &v19) != 1)
    {
      __int128 v21 = v17;
      __int128 v22 = v18;
      __int128 v19 = v15;
      __int128 v20 = v16;
      if (_LSVersionNumberCompare(&v21, &v19) == -1) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }

void sub_183EDC660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDC7DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDC878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDC930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetSchemeType(NSString *a1)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  BOOL v1 = a1;
  if (!v1)
  {
    [MEMORY[0x1896077D8] currentHandler];
    int v11 = (void *)objc_claimAutoreleasedReturnValue();
    [NSString stringWithUTF8String:"_LSURLSchemeType _LSGetSchemeType(NSString *__strong)"];
    CFIndex v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 handleFailureInFunction:v12, @"LSCanOpenURLManager.mm", 734, @"Invalid parameter not satisfying: %@", @"scheme != nil" file lineNumber description];
  }

  id v18 = 0LL;
  __int128 v15 = 0LL;
  id v16 = 0LL;
  char v17 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  id v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  unint64_t v3 = (LSContext *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v15, v2, 0LL);

  if (v3)
  {
    uint64_t v4 = v1;
    if (!v1)
    {
      [MEMORY[0x1896077D8] currentHandler];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( NSString,  "stringWithUTF8String:",  "_LSURLSchemeType _LSGetSchemeType(LSContext *, NSString *__strong)");
      BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
      [v13 handleFailureInFunction:v14, @"LSCanOpenURLManager.mm", 708, @"Invalid parameter not satisfying: %@", @"scheme != nil" file lineNumber description];
    }

    +[_LSCanOpenURLManager bindingEvaluatorForScheme:]( &OBJC_CLASS____LSCanOpenURLManager,  "bindingEvaluatorForScheme:",  v4);
    LaunchServices::BindingEvaluator::evaluateBindings((LaunchServices::BindingEvaluator *)v21, v3, 0LL, v19);
    uint64_t v5 = v19[0];
    uint64_t v6 = -1LL;
    while (v5 != v19[1])
    {
      uint64_t v7 = *(void *)(v5 + 24);
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 8) & 0x80) != 0)
        {
          uint64_t v6 = 1LL;
          break;
        }

        uint64_t v6 = 0LL;
      }

      v5 += 48LL;
    }

    __int128 v20 = (void **)v19;
    std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100](&v20);
    LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)v21);
  }

  else
  {
    uint64_t v6 = -1LL;
  }

  if (v15 && v17) {
    _LSContextDestroy(v15);
  }
  id v8 = v16;
  __int128 v15 = 0LL;
  id v16 = 0LL;

  char v17 = 0;
  id v9 = v18;
  id v18 = 0LL;

  return v6;
}

void sub_183EDCB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183EDCD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDCDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDD030(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183EDD1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDD48C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDD73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDDA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDDCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDDFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDE51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void sub_183EDE610( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EDE6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDE77C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  LaunchServices::BindingEvaluator::~BindingEvaluator(v11);
  _Unwind_Resume(a1);
}

void sub_183EDE824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDE8FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EDEF10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char *a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
  a20 = &a24;
  std::vector<LSBinding>::__destroy_vector::operator()[abi:nn180100]((void ***)&a20);

  LaunchServices::BindingEvaluator::~BindingEvaluator((LaunchServices::BindingEvaluator *)&a34);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a27);

  _Unwind_Resume(a1);
}

void sub_183EDF0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDF178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNumericHandlerRankFromHandlerRankString(const __CFString *a1)
{
  if (!a1 || CFStringCompare(a1, @"None", 1uLL) == kCFCompareEqualTo) {
    return 0LL;
  }
  uint64_t v2 = 1LL;
  if (CFStringCompare(a1, @"Alternate", 1uLL))
  {
    if (CFStringCompare(a1, @"Default", 1uLL))
    {
      if (CFStringCompare(a1, @"Owner", 1uLL)) {
        return 0LL;
      }
      else {
        return 3LL;
      }
    }

    else
    {
      return 2LL;
    }
  }

  return v2;
}

void *_LSCopyHandlerRankStringFromNumericHandlerRank(uint64_t a1)
{
  switch((int)a1)
  {
    case 0:
      __n128 result = (void *)CFRetain(@"None");
      break;
    case 1:
      __n128 result = (void *)CFRetain(@"Alternate");
      break;
    case 2:
      __n128 result = (void *)CFRetain(@"Default");
      break;
    case 3:
      __n128 result = (void *)CFRetain(@"Owner");
      break;
    default:
      __n128 result = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, @"# (%i)", a1);
      break;
  }

  return result;
}

CFSetRef _LSCopyAllHandlerRankStrings()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  v1[0] = xmmword_189D74C68;
  v1[1] = *(_OWORD *)off_189D74C78;
  return CFSetCreate((CFAllocatorRef)*MEMORY[0x189604DB0], (const void **)v1, 4LL, MEMORY[0x189605258]);
}

BOOL _LSClaimFlagsAreWildcard(__int16 a1)
{
  return (a1 & 0x410) != 0;
}

uint64_t _LSClaimAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = v5;
  uint64_t v7 = 4294967246LL;
  if (v5 && a2 && v5->store)
  {
    int v8 = CSStoreAllocUnitWithData();
    if (v8 && CSStoreGetUnit())
    {
      CSBindableKeyMapNextKey();
      id v9 = (void *)MEMORY[0x186E2A59C]();
      else {
        uint64_t v7 = _LSGetOSStatusFromNSError(0LL);
      }

      objc_autoreleasePoolPop(v9);
      if (!(_DWORD)v7)
      {
        CSMapSetValue();
        int v10 = *(_DWORD *)(a2 + 8);
        if ((v10 & 0x20) != 0)
        {
          -[_LSDatabase setDocumentTypesChanged:](v6, 1);
          int v10 = *(_DWORD *)(a2 + 8);
        }

        if ((v10 & 0x40) != 0) {
          -[_LSDatabase setURLTypesChanged:](v6, 1);
        }
        uint64_t v7 = 0LL;
        if (a3) {
          *a3 = v8;
        }
      }
    }

    else
    {
      uint64_t v7 = 4294957803LL;
    }
  }

  return v7;
}

void sub_183EDF528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSClaimRemove(void *a1)
{
  BOOL v1 = a1;
  uint64_t Unit = (_DWORD *)CSStoreGetUnit();
  if (Unit)
  {
    CSMapRemoveValue();
    int v3 = Unit[2];
    if ((v3 & 0x20) != 0)
    {
      -[_LSDatabase setDocumentTypesChanged:](v1, 1);
      int v3 = Unit[2];
    }

    if ((v3 & 0x40) != 0) {
      -[_LSDatabase setURLTypesChanged:](v1, 1);
    }
    LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v1, (_LSDatabase *)Unit[5]);
    for (uint64_t i = 0LL; i != 8 && Unit[i + 7]; ++i)
      _CSStringRelease();
    _CSStringRelease();
    _LSDatabaseDisposeStringArray(v1, Unit[6]);
    if (Unit[17])
    {
      uint64_t v5 = _LSBindingListDeactivate();
      _LSBindingListDestroy();
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    CSStoreFreeUnit();
  }

  else
  {
    uint64_t v5 = 4294957797LL;
  }

  return v5;
}

void sub_183EDF6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSClaimGet()
{
  return CSStoreGetUnit();
}

uint64_t _LSClaimSetGeneration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = CSStoreGetUnit();
  if (result) {
    *(_DWORD *)(result + 4) = a3;
  }
  return result;
}

void _LSClaimGetVisualizationFunctions( unsigned int *(**a1)(LaunchServices::LocalizedString **this, LSContext *a2)@<X8>)
{
  *a1 = LaunchServices::Claims::getSummary;
  a1[1] = (unsigned int *(*)(LaunchServices::LocalizedString **, LSContext *))LaunchServices::Claims::display;
  a1[2] = (unsigned int *(*)(LaunchServices::LocalizedString **, LSContext *))LaunchServices::Claims::copyBindingForVisualization;
}

unsigned int *LaunchServices::Claims::getSummary(LaunchServices::LocalizedString **this, LSContext *a2)
{
  uint64_t Unit = (unsigned int *)CSStoreGetUnit();
  if (Unit)
  {
    uint64_t Unit = (unsigned int *)LaunchServices::LocalizedString::Get(*this, (_LSDatabase *)Unit[5]);
    if (Unit)
    {
      LaunchServices::LocalizedString::localizeUnsafely((uint64_t)Unit, *this, 0LL);
      uint64_t Unit = (unsigned int *)objc_claimAutoreleasedReturnValue();
    }
  }

  return Unit;
}

BOOL LaunchServices::Claims::display( uint64_t a1, uint64_t a2, uint64_t a3, CSStore2::AttributedStringWriter *a4)
{
  uint64_t Unit = CSStoreGetUnit();
  if (Unit)
  {
    CSStore2::AttributedStringWriter::childUnit(a4, @"localizedNames");
    uint64_t v7 = (NSString *)_LSCopyHandlerRankStringFromNumericHandlerRank(*(__int16 *)(Unit + 12));
    CSStore2::AttributedStringWriter::string(a4, @"rank", v7);
    CSStore2::AttributedStringWriter::link( a4,  *(unsigned int *)(*(void *)a1 + 20LL),  *(unsigned int *)(Unit + 16),  0LL);
    int v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"bundle", v8);

    CSStore2::AttributedStringWriter::stringArray(a4, @"reqCaps");
    CSStore2::AttributedStringWriter::beginFlags(a4, @"flags");
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::beginFlags(a4, @"roles");
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::stringArray(a4, @"iconFiles", (const unsigned int *)(Unit + 28));
    CSStore2::AttributedStringWriter::string(a4, @"iconName");
    CSStore2::AttributedStringWriter::string(a4, @"delegate");
    CSStore2::AttributedStringWriter::childUnit(a4, @"bindings");
  }

  return Unit != 0;
}

void sub_183EDFC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Claims::copyBindingForVisualization(LaunchServices::Claims *this, LSContext *a2)
{
  return 0LL;
}

void _LSEnumerateTypesInBindingList(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  if (a1)
  {
    if ((_DWORD)a2) {
      goto LABEL_3;
    }
LABEL_6:
    [MEMORY[0x1896077D8] currentHandler];
    CFIndex v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^_ _strong _Nonnull)(NSString *__strong))");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v12 handleFailureInFunction:v13, @"LSClaimedTypes.mm", 69, @"Invalid parameter not satisfying: %@", @"inBindingList != kCSStoreNullID" file lineNumber description];

    if (v6) {
      goto LABEL_4;
    }
LABEL_7:
    [MEMORY[0x1896077D8] currentHandler];
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^_ _strong _Nonnull)(NSString *__strong))");
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue();
    [v14 handleFailureInFunction:v15, @"LSClaimedTypes.mm", 70, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    goto LABEL_4;
  }

  [MEMORY[0x1896077D8] currentHandler];
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateTypesInBindingList(LSContext * _Nonnull, LSBindingListID, const LSClaimData * _Nullable, void (^__s trong _Nonnull)(NSString *__strong))");
  int v11 = (void *)objc_claimAutoreleasedReturnValue();
  [v10 handleFailureInFunction:v11, @"LSClaimedTypes.mm", 68, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  if (!(_DWORD)a2) {
    goto LABEL_6;
  }
LABEL_3:
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(unsigned int *)(*(void *)a1 + 232LL);
  v20[0] = 0LL;
  v20[1] = v20;
  v20[2] = 0x2020000000LL;
  char v21 = 0;
  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 3221225472LL;
  _OWORD v16[2] = ___LSEnumerateTypesInBindingList_block_invoke;
  v16[3] = &unk_189D74C90;
  id v18 = v20;
  uint64_t v19 = a1;
  id v9 = v6;
  id v17 = v9;
  _LSBindingListEnumerateEntryWithClass(v7, a2, v8, v16);

  _Block_object_dispose(v20, 8);
}

void sub_183EDFEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EDFF68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void _LSEnumerateClaimedTypes(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v14 = v5;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    [MEMORY[0x1896077D8] currentHandler];
    int v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    int v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v10 handleFailureInFunction:v11, @"LSClaimedTypes.mm", 138, @"Invalid parameter not satisfying: %@", @"inClaimData != NULL" file lineNumber description];

    if (v14) {
      goto LABEL_4;
    }
LABEL_10:
    [MEMORY[0x1896077D8] currentHandler];
    CFIndex v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v12 handleFailureInFunction:v13, @"LSClaimedTypes.mm", 139, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    goto LABEL_4;
  }

  [MEMORY[0x1896077D8] currentHandler];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateClaimedTypes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  [v8 handleFailureInFunction:v9, @"LSClaimedTypes.mm", 137, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  id v5 = v14;
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v5) {
    goto LABEL_10;
  }
LABEL_4:
  if ((*(_BYTE *)(a2 + 8) & 0x20) != 0)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v7) {
      _LSEnumerateTypesInBindingList(a1, v7, v6, v14);
    }
  }
}

void sub_183EE0120( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _LSEnumerateClaimedSchemes(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    id v17 = v5;
    [MEMORY[0x1896077D8] currentHandler];
    int v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSSt ring *__strong))");
    CFIndex v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 handleFailureInFunction:v12, @"LSClaimedTypes.mm", 156, @"Invalid parameter not satisfying: %@", @"inClaimData != NULL" file lineNumber description];

    id v5 = v17;
    if (v17) {
      goto LABEL_4;
    }
LABEL_10:
    id v18 = v5;
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSSt ring *__strong))");
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 handleFailureInFunction:v14, @"LSClaimedTypes.mm", 157, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    id v5 = v18;
    goto LABEL_4;
  }

  id v16 = v5;
  [MEMORY[0x1896077D8] currentHandler];
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateClaimedSchemes(LSContext * _Nonnull, const LSClaimData * _Nonnull, void (^__strong _Nonnull)(NSString *__strong))");
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  [v9 handleFailureInFunction:v10, @"LSClaimedTypes.mm", 155, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  id v5 = v16;
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v5) {
    goto LABEL_10;
  }
LABEL_4:
  if ((*(_BYTE *)(a2 + 8) & 0x40) != 0)
  {
    uint64_t v6 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v6)
    {
      uint64_t v7 = *(void **)a1;
      uint64_t v8 = *(unsigned int *)(*(void *)a1 + 752LL);
      v19[1] = 3221225472LL;
      _OWORD v19[2] = ___LSEnumerateClaimedSchemes_block_invoke;
      uint64_t v19[3] = &unk_189D74CB8;
      uint64_t v21 = a1;
      id v15 = v5;
      v19[0] = MEMORY[0x1895F87A8];
      id v20 = v5;
      _LSBindingListEnumerateEntryWithClass(v7, v6, v8, v19);

      id v5 = v15;
    }
  }
}

void sub_183EE0370( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(a1);
}

void sub_183EE041C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void _LSEnumerateAllClaimedTypesOrSchemesForBundleID( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_6:
    [MEMORY[0x1896077D8] currentHandler];
    int v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesM ask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
    int v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v10 handleFailureInFunction:v11, @"LSClaimedTypes.mm", 183, @"Invalid parameter not satisfying: %@", @"inBundleData != NULL" file lineNumber description];

    if (v7) {
      goto LABEL_4;
    }
LABEL_7:
    [MEMORY[0x1896077D8] currentHandler];
    CFIndex v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesM ask, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v12 handleFailureInFunction:v13, @"LSClaimedTypes.mm", 184, @"Invalid parameter not satisfying: %@", @"inBlock != nil" file lineNumber description];

    goto LABEL_4;
  }

  [MEMORY[0x1896077D8] currentHandler];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSEnumerateAllClaimedTypesOrSchemesForBundleID(LSContext * _Nonnull, const LSBundleData * _Nonnull, LSRolesMas k, BOOL, void (^__strong _Nonnull)(NSString *__strong, const LSClaimData *))");
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  [v8 handleFailureInFunction:v9, @"LSClaimedTypes.mm", 182, @"Invalid parameter not satisfying: %@", @"inContext != NULL" file lineNumber description];

  if (!a2) {
    goto LABEL_6;
  }
LABEL_3:
  if (!v7) {
    goto LABEL_7;
  }
LABEL_4:
  id v14 = v7;
  _CSArrayEnumerateAllValues();
}

void sub_183EE063C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE07B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetAllClaimedTypesOrSchemesForBundleID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)MEMORY[0x186E2A59C]();
  [MEMORY[0x189603FE0] set];
  id v9 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  void v13[2] = ___LSGetAllClaimedTypesOrSchemesForBundleID_block_invoke;
  v13[3] = &unk_189D74D30;
  id v10 = v9;
  id v14 = v10;
  _LSEnumerateAllClaimedTypesOrSchemesForBundleID(a1, a2, a3, a4, v13);
  int v11 = (void *)[v10 copy];

  objc_autoreleasePoolPop(v8);
  return v11;
}

void sub_183EE08B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183EE0918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE0968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE0A18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183EE0B38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183EE0E68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_183EE0F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE0FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_183EE1078( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_183EE1114( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_183EE11C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_183EE15EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE1828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183EE1A60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183EE1C34(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_183EE1CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE1DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE1F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE20C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE21A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CreateBindingEvaluatorWithConfiguration@<X0>( LSClaimBindingConfiguration *a1@<X0>, LaunchServices::BindingEvaluator *a2@<X8>)
{
  uint64_t v4 = (LaunchServices::BindingEvaluator *)objc_claimAutoreleasedReturnValue();
  LaunchServices::BindingEvaluator::CreateWithUTI(v4, 0LL, a2);

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    __int16 v5 = -[LSClaimBindingConfiguration bundleClassMask](a1, "bundleClassMask");
    uint64_t v6 = 0LL;
    std::stringbuf::string_type __p = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    if ((v5 & 4) != 0)
    {
      id v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v23, 1uLL);
      *(_DWORD *)id v7 = 2;
      uint64_t v6 = v7 + 4;
      std::stringbuf::string_type __p = v7;
      uint64_t v23 = &v7[4 * v8];
      uint64_t v22 = v7 + 4;
    }

    if ((v5 & 0x800) != 0)
    {
      if (v6 >= v23)
      {
        id v10 = (char *)__p;
        uint64_t v11 = (v6 - (_BYTE *)__p) >> 2;
        unint64_t v12 = v11 + 1;
        uint64_t v13 = v23 - (_BYTE *)__p;
        if ((v23 - (_BYTE *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          id v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v23, v14);
          id v10 = (char *)__p;
          uint64_t v6 = v22;
        }

        else
        {
          id v15 = 0LL;
        }

        id v16 = &v15[4 * v11];
        id v17 = &v15[4 * v14];
        *(_DWORD *)id v16 = 11;
        id v9 = v16 + 4;
        while (v6 != v10)
        {
          int v18 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v16 - 1) = v18;
          v16 -= 4;
        }

        std::stringbuf::string_type __p = v16;
        uint64_t v22 = v9;
        uint64_t v23 = v17;
        if (v10) {
          operator delete(v10);
        }
      }

      else
      {
        *(_DWORD *)uint64_t v6 = 11;
        id v9 = v6 + 4;
      }

      uint64_t v22 = v9;
    }

    LaunchServices::BindingEvaluator::setAllowedBundleClasses((uint64_t)a2, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v22 = (char *)__p;
      operator delete(__p);
    }
  }

  uint64_t result = -[LSClaimBindingConfiguration addClaimRecordIfMissing](a1, "addClaimRecordIfMissing");
  if ((_DWORD)result)
  {
    int Options = LaunchServices::BindingEvaluator::getOptions(a2);
    return LaunchServices::BindingEvaluator::setOptions((uint64_t)a2, Options | 0x80000u);
  }

  return result;
}

void sub_183EE238C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  LaunchServices::BindingEvaluator::~BindingEvaluator(v11);
  _Unwind_Resume(a1);
}

void sub_183EE2454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFString *_LSContainerStateGetDescription(int a1)
{
  uint64_t v1 = a1 + 1LL;
  objc_msgSend(NSString, "stringWithFormat:", @"? (%llu)", a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void _LSContainerSetMounted(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  uint64_t Unit = CSStoreGetUnit();
  if (Unit)
  {
    _LSAliasGetPath(v5, *(_DWORD *)(Unit + 12));
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    _LSDefaultLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 134218499;
      uint64_t v10 = a2;
      __int16 v11 = 2113;
      unint64_t v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = a3;
      _os_log_impl( &dword_183E58000,  v8,  OS_LOG_TYPE_INFO,  "Updating state of volume %llx %{private}@ to mounted with volume ID %llu",  buf,  0x20u);
    }

    _CSStoreWriteToUnit();
  }
}

void sub_183EE2648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSContainerFindOrRegisterWithNode( id *a1, void *a2, int a3, _DWORD *a4, uint64_t *a5, id *a6, void *a7)
{
  v80[1] = *MEMORY[0x1895F89C0];
  id v13 = a2;
  uint64_t v14 = v13;
  uint64_t v45 = 0LL;
  unsigned int v46 = &v45;
  uint64_t v47 = 0x2020000000LL;
  char v48 = 0;
  if (a1 && v13 && *a1)
  {
    uint64_t v43 = 0LL;
    id obj = 0LL;
    __int16 v42 = 0;
    uint64_t v38 = 0LL;
    unsigned int v39 = &v38;
    uint64_t v40 = 0x2020000000LL;
    int v41 = 0;
    BOOL v15 = _LSCreateContainerNodesAndFlagsForNode(v13, &obj, &v43, &v42, a7);
    *((_BYTE *)v46 + 24) = v15;
    if (v15)
    {
      uint64_t v34 = a6;
      id v17 = v43;
      id v16 = obj;
      __int16 v33 = v42;
      __int128 v30 = v39;
      id v18 = *a1;
      id v19 = v16;
      id v35 = v17;
      uint64_t v78 = 0LL;
      uint64_t v74 = 0LL;
      uint64_t v75 = &v74;
      uint64_t v76 = 0x2020000000LL;
      int v77 = 0;
      uint64_t v70 = 0LL;
      int v71 = &v70;
      uint64_t v72 = 0x2020000000LL;
      uint64_t v73 = 0LL;
      int v31 = v18;
      uint64_t v32 = v19;
      if ([v19 getVolumeIdentifier:&v78 error:0])
      {
        uint64_t v59 = MEMORY[0x1895F87A8];
        uint64_t v60 = 3221225472LL;
        uint64_t v61 = (uint64_t)___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke;
        BOOL v62 = (uint64_t (*)(uint64_t, uint64_t))&unk_189D74E20;
        __int16 v69 = v33;
        uint64_t v68 = v78;
        id v20 = (void (*)(uint64_t))v18;
        __int128 v63 = v20;
        id v21 = v19;
        id v64 = v21;
        id v65 = v35;
        uint64_t v66 = &v74;
        unsigned int v67 = &v70;
        _CSStoreEnumerateUnits();

        uint64_t v22 = v34;
        uint64_t v23 = v71[3];
        if (v23) {
          goto LABEL_8;
        }
        uint64_t v49 = MEMORY[0x1895F87A8];
        uint64_t v50 = 3221225472LL;
        int64_t v51 = ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke_2;
        uint64_t v52 = &unk_189D74E48;
        __int16 v58 = v33;
        uint64_t v53 = v20;
        uint64_t v55 = &v74;
        uint64_t v56 = &v70;
        uint64_t v57 = v78;
        id v54 = v21;
        _CSStoreEnumerateUnits();

        uint64_t v22 = v34;
        uint64_t v23 = v71[3];
        if (v23) {
LABEL_8:
        }
          *((_DWORD *)v30 + 6) = *((_DWORD *)v75 + 6);
      }

      else
      {
        uint64_t v23 = v71[3];
        uint64_t v22 = v34;
      }

      BOOL v24 = v23 != 0;
      _Block_object_dispose(&v70, 8);
      _Block_object_dispose(&v74, 8);

      *((_BYTE *)v46 + 24) = v24;
      if (v24) {
        goto LABEL_17;
      }
      uint64_t v59 = 0LL;
      uint64_t v60 = (uint64_t)&v59;
      uint64_t v61 = 0x3032000000LL;
      BOOL v62 = __Block_byref_object_copy__11;
      __int128 v63 = __Block_byref_object_dispose__11;
      id v64 = 0LL;
      v36[0] = MEMORY[0x1895F87A8];
      v36[1] = 3221225472LL;
      v36[2] = ___LSContainerFindOrRegisterWithNode_block_invoke;
      v36[3] = &unk_189D74D80;
      v36[4] = &v38;
      v36[5] = &v45;
      BOOL v37 = a7 != 0LL;
      v36[6] = &v59;
      _LSContainerAddWithNode((uint64_t)a1, v14, 1, v36);
      int v25 = *((unsigned __int8 *)v46 + 24);
      if (a7 && !*((_BYTE *)v46 + 24))
      {
        *a7 = *(id *)(v60 + 40);
        int v25 = *((unsigned __int8 *)v46 + 24);
      }

      if ((a3 & 0x3000000) == 0x2000000 && v25)
      {
        char v26 = _LSContextUpdate(a1, 1, (uint64_t)a7);
        *((_BYTE *)v46 + 24) = v26;
      }

      _Block_object_dispose(&v59, 8);

      if (*((_BYTE *)v46 + 24))
      {
LABEL_17:
        if (a4) {
          *a4 = *((_DWORD *)v39 + 6);
        }
        if (a5) {
          *a5 = CSStoreGetUnit();
        }
        if (v22) {
          objc_storeStrong(v22, obj);
        }
      }
    }

    _Block_object_dispose(&v38, 8);
  }

  else if (a7)
  {
    uint64_t v79 = *MEMORY[0x189607490];
    v80[0] = @"invalid input parameters";
    [MEMORY[0x189603F68] dictionaryWithObjects:v80 forKeys:&v79 count:1];
    BOOL v27 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSContainerFindOrRegisterWithNode", 366LL, v27);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
  }

  BOOL v28 = *((_BYTE *)v46 + 24) != 0;
  _Block_object_dispose(&v45, 8);

  return v28;
}

void sub_183EE2BB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id a29, id a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, id a39, id a40)
{
  _Block_object_dispose((const void *)(v41 - 200), 8);
  _Block_object_dispose((const void *)(v41 - 168), 8);

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

BOOL _LSCreateContainerNodesAndFlagsForNode(void *a1, void **a2, void **a3, _WORD *a4, void *a5)
{
  v26[1] = *MEMORY[0x1895F89C0];
  id v9 = a1;
  uint64_t v10 = v9;
  if (v9)
  {
    [v9 volumeNodeWithFlags:0 error:a5];
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v12 = v11 != 0LL;
    if (v11)
    {
      +[FSNode rootVolumeNode](&OBJC_CLASS___FSNode, "rootVolumeNode");
      id v13 = (void *)objc_claimAutoreleasedReturnValue();
      char v14 = [v11 isEqual:v13];

      if ((v14 & 1) != 0)
      {
        __int16 v15 = 18;
      }

      else
      {
        +[FSNode prebootVolumeNode](&OBJC_CLASS___FSNode, "prebootVolumeNode");
        id v18 = (void *)objc_claimAutoreleasedReturnValue();
        [v11 isEqual:v18];

        __int16 v15 = 16;
      }

      if ([v11 isOnDiskImage])
      {
        if (a3)
        {
          [v11 diskImageURLWithFlags:1 error:0];
          id v19 = (void *)objc_claimAutoreleasedReturnValue();
          id v20 = v19;
          if (v19 && [v19 isFileURL]) {
            id v17 = -[FSNode initWithURL:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithURL:flags:error:",  v20,  0LL,  0LL);
          }
          else {
            id v17 = 0LL;
          }
        }

        else
        {
          id v17 = 0LL;
        }

        v15 |= 4u;
      }

      else
      {
        id v17 = 0LL;
      }

      __int16 v21 = [v11 isOnLocalVolume];
      if (a2)
      {
        uint64_t v22 = *a2;
        *a2 = v11;

        __int16 v11 = 0LL;
      }

      if (a3)
      {
        uint64_t v23 = *a3;
        *a3 = v17;

        id v17 = 0LL;
      }

      if (a4) {
        *a4 = v15 | v21;
      }
    }

    else
    {
      id v17 = 0LL;
    }
  }

  else
  {
    if (a5)
    {
      uint64_t v25 = *MEMORY[0x189607490];
      v26[0] = @"inNode";
      [MEMORY[0x189603F68] dictionaryWithObjects:v26 forKeys:&v25 count:1];
      id v16 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSCreateContainerNodesAndFlagsForNode",  206LL,  v16);
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }

    BOOL v12 = 0LL;
  }

  return v12;
}

void sub_183EE2EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void _LSContainerAddWithNode(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  id v9 = (void *)MEMORY[0x186E2A59C]();
  if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
    || ([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) == 0)
  {
    MEMORY[0x186E2AFD4]();
    v21[0] = MEMORY[0x1895F87A8];
    v21[1] = 3221225472LL;
    void v21[2] = ___LSContainerAddWithNode_block_invoke;
    v21[3] = &unk_189D74DA8;
    id v22 = v7;
    uint64_t v24 = a1;
    char v25 = a3;
    id v23 = v8;
    uint64_t v12 = MEMORY[0x186E2A7B8](v21);
    id v13 = (void *)v12;
    if (a3)
    {
      (*(void (**)(uint64_t))(v12 + 16))(v12);
    }

    else
    {
      if (a1)
      {
        [MEMORY[0x1896077D8] currentHandler];
        id v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSContainerAddWithNode(LSContext *, FSNode *__strong, Boolean, void (^__strong)(LSContainerID, NSError *__strong))");
        id v18 = (void *)objc_claimAutoreleasedReturnValue();
        [v17 handleFailureInFunction:v18 file:@"LSContainer.mm" lineNumber:617 description:@"if asyncing _LSContainerAddWithNode it cannot use a caller's context"];
      }

      _LSServer_GetIOQueue();
      char v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
      dispatch_async(v14, v13);
    }

    __int16 v15 = v22;
  }

  else
  {
    if (a3)
    {
      v20[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
      v20[1] = (void (*)(void, void))3221225472LL;
      v20[2] = (void (*)(void, void))___LSContainerAddWithNode_block_invoke_18;
      void v20[3] = (void (*)(void, void))&unk_189D72590;
      uint64_t v10 = v20;
      void v20[4] = (void (*)(void, void))v8;
      uint64_t v11 = +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, v20);
    }

    else
    {
      v19[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
      v19[1] = (void (*)(void, void))3221225472LL;
      _OWORD v19[2] = (void (*)(void, void))___LSContainerAddWithNode_block_invoke_2;
      uint64_t v19[3] = (void (*)(void, void))&unk_189D72590;
      uint64_t v10 = v19;
      void v19[4] = (void (*)(void, void))v8;
      uint64_t v11 = +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, v19);
    }

    __int16 v15 = (void *)v11;

    [v7 URL];
    id v16 = (void *)objc_claimAutoreleasedReturnValue();
    [v15 registerContainerURL:v16 completionHandler:v8];
  }

  objc_autoreleasePoolPop(v9);
}

void sub_183EE3198( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24)
{
  _Unwind_Resume(a1);
}

BOOL _LSContainerDataNeedsUpdate(uint64_t a1)
{
  return *(_BYTE *)(a1 + 2) == 0;
}

void sub_183EE36A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, void *a34, void *a35, void *a36)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContainerAdd(void *a1, uint64_t a2, _DWORD *a3)
{
  id v4 = a1;
  id v5 = v4;
  if (v4 && *((void *)v4 + 1))
  {
    int v6 = CSStoreAllocUnitWithData();
    if (v6)
    {
      uint64_t v7 = 0LL;
      if (a3) {
        *a3 = v6;
      }
    }

    else
    {
      uint64_t v7 = 4294957803LL;
    }
  }

  else
  {
    uint64_t v7 = 4294967246LL;
  }

  return v7;
}

void sub_183EE3828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContainerRemove(uint64_t *a1, int a2)
{
  uint64_t result = -[_LSDatabase accessContext](*a1);
  if (result) {
    uint64_t result = _CSStoreAccessContextAssertWriting();
  }
  if (a2)
  {
    uint64_t result = CSStoreGetUnit();
    if (result)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = &v9;
      uint64_t v11 = 0x4812000000LL;
      uint64_t v12 = __Block_byref_object_copy__20_0;
      id v13 = __Block_byref_object_dispose__21_0;
      char v14 = "";
      std::stringbuf::string_type __p = 0LL;
      id v16 = 0LL;
      uint64_t v17 = 0LL;
      _CSStoreEnumerateUnits();
      id v5 = (unsigned int *)v10[6];
      int v6 = (unsigned int *)v10[7];
      while (v5 != v6)
        _LSUnregisterBundle((void **)a1, *v5++, 0LL);
      _Block_object_dispose(&v9, 8);
      if (__p)
      {
        id v16 = __p;
        operator delete(__p);
      }

      uint64_t v9 = 0LL;
      uint64_t v10 = &v9;
      uint64_t v11 = 0x4812000000LL;
      uint64_t v12 = __Block_byref_object_copy__20_0;
      id v13 = __Block_byref_object_dispose__21_0;
      char v14 = "";
      std::stringbuf::string_type __p = 0LL;
      id v16 = 0LL;
      uint64_t v17 = 0LL;
      _CSStoreEnumerateUnits();
      uint64_t v7 = (int *)v10[6];
      id v8 = (int *)v10[7];
      while (v7 != v8)
        _LSPluginRemove((void *)*a1, *v7++);
      _Block_object_dispose(&v9, 8);
      if (__p)
      {
        id v16 = __p;
        operator delete(__p);
      }

      return CSStoreFreeUnit();
    }
  }

  return result;
}

void sub_183EE3A60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *__p, uint64_t a28)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__20_0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__21_0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

uint64_t _LSContainerSet(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  id v5 = v4;
  if (v4 && a3 && *((void *)v4 + 1))
  {
    _CSStoreWriteToUnit();
    int v6 = 0LL;
  }

  else
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSContainerSet", 737LL, 0LL);
    int v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return 1LL;
}

void sub_183EE3D6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckAllContainerStates(void *a1)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  char v11 = 0;
  v7[1] = (id)MEMORY[0x1895F87A8];
  v7[2] = (id)3221225472LL;
  void v7[3] = ___LSCheckAllContainerStates_block_invoke;
  void v7[4] = &unk_189D74DF8;
  void v7[5] = &v8;
  v7[6] = a1;
  _CSStoreEnumerateUnits();
  if (*((_BYTE *)v9 + 24))
  {
    v7[0] = 0LL;
    char v2 = _LSContextUpdate((void **)a1, 1, (uint64_t)v7);
    id v3 = v7[0];
    id v4 = v3;
    if ((v2 & 1) != 0) {
      uint64_t v5 = 0LL;
    }
    else {
      uint64_t v5 = _LSGetOSStatusFromNSError(v3);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_183EE3E88(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 48), 8);
  _Unwind_Resume(a1);
}

void _LSContainerGetVisualizationFunctions(int *(**a1)(void **this, LSContext *a2)@<X8>)
{
  *a1 = LaunchServices::Containers::getSummary;
  a1[1] = (int *(*)(void **, LSContext *))LaunchServices::Containers::display;
  a1[2] = (int *(*)(void **, LSContext *))LaunchServices::Containers::copyBindingForVisualization;
}

int *LaunchServices::Containers::getSummary(void **this, LSContext *a2)
{
  uint64_t Unit = (int *)CSStoreGetUnit();
  if (Unit)
  {
    _LSAliasGetPath(*this, Unit[3]);
    uint64_t Unit = (int *)objc_claimAutoreleasedReturnValue();
  }

  return Unit;
}

BOOL LaunchServices::Containers::display( uint64_t a1, uint64_t a2, uint64_t a3, CSStore2::AttributedStringWriter *a4)
{
  uint64_t Unit = CSStoreGetUnit();
  uint64_t v7 = Unit;
  if (Unit)
  {
    CSStore2::AttributedStringWriter::link( a4,  *(unsigned int *)(*(void *)a1 + 1600LL),  *(unsigned int *)(Unit + 12),  0LL);
    uint64_t v8 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"path", v8);

    uint64_t v9 = *(unsigned int *)(v7 + 16);
    if ((_DWORD)v9)
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)a1 + 1600LL), v9, 0LL);
      uint64_t v10 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, @"disk image", v10);
    }

    CSStore2::AttributedStringWriter::beginFlags(a4, @"flags");
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::missingFlag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    _LSContainerStateGetDescription(*(char *)(v7 + 2));
    char v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"state", v11);
    if (*(_BYTE *)(v7 + 2) == 1)
    {
      [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(v7 + 4)];
      uint64_t v12 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(a4, @"volume", v12);
    }

    else
    {
      CSStore2::AttributedStringWriter::string(a4, @"volume", &stru_189D7B4C8);
    }
  }

  return v7 != 0;
}

void sub_183EE41A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Containers::copyBindingForVisualization( LaunchServices::Containers *this, LSContext *a2)
{
  return 0LL;
}

uint64_t ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke( uint64_t result, int a2, unsigned __int16 *a3, uint64_t a4, _BYTE *a5)
{
  int v5 = *a3;
  if (*((_BYTE *)a3 + 2) != 1) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 72);
  if (v8 != *(void *)(a3 + 2)) {
    return result;
  }
  if ((v5 & 2) != 0)
  {
LABEL_9:
    *(_DWORD *)(*(void *)(*(void *)(v7 + 56) + 8LL) + 24LL) = a2;
    *(void *)(*(void *)(*(void *)(v7 + 64) + 8LL) + 24LL) = a3;
    *a5 = 1;
    return result;
  }

  __n128 result = _LSAliasCompareToNode(*(void **)(result + 32), *((_DWORD *)a3 + 3), v8, 0LL, *(void **)(result + 40));
  if (!(_DWORD)result) {
    return result;
  }
  int v11 = *((_DWORD *)a3 + 4);
  uint64_t v12 = *(void **)(v7 + 48);
  if (!v11)
  {
    if (v12) {
      return result;
    }
    goto LABEL_9;
  }

  if (v12)
  {
    __n128 result = _LSAliasCompareToNode(*(void **)(v7 + 32), v11, 0LL, 0LL, v12);
    if ((_DWORD)result) {
      goto LABEL_9;
    }
  }

  return result;
}

uint64_t ___ZL33_LSContainerFindWithNodesAndFlagsP11_LSDatabaseP6FSNodeS2_tPjPPK15LSContainerData_block_invoke_2( uint64_t result, uint64_t a2, unsigned __int16 *a3, uint64_t a4, _BYTE *a5)
{
  if (*a3 == *(unsigned __int16 *)(result + 72))
  {
    int v7 = a2;
    uint64_t v8 = result;
    __n128 result = _LSContainerCheckState(*(void **)(result + 32), a2, (uint64_t)a3, &v11, &v10);
    if ((_DWORD)result) {
      BOOL v9 = 0;
    }
    else {
      BOOL v9 = v11 == 1;
    }
    if (v9 && v10 == *(void *)(v8 + 64))
    {
      if ((*a3 & 2) != 0
        || (__n128 result = _LSAliasCompareToNode(*(void **)(v8 + 32), *((_DWORD *)a3 + 3), v10, 0LL, *(void **)(v8 + 40)),
            (_DWORD)result))
      {
        *(_DWORD *)(*(void *)(*(void *)(v8 + 48) + 8LL) + 24LL) = v7;
        *(void *)(*(void *)(*(void *)(v8 + 56) + 8LL) + 24LL) = a3;
        *a5 = 1;
      }
    }
  }

  return result;
}

void ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke( uint64_t a1)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  unsigned int v67 = *(void ***)(a1 + 64);
  id v68 = 0LL;
  char v69 = 0;
  id v70 = 0LL;
  +[_LSDServiceDomain defaultServiceDomain]();
  uint64_t v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  id v3 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v67, v2, 0LL);

  if (!v3)
  {
    uint64_t v24 = *(void *)(a1 + 56);
    +[_LSDServiceDomain defaultServiceDomain]();
    char v25 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v26 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v67, v25, 0LL);

    if (v26) {
      id v27 = 0LL;
    }
    else {
      id v27 = v70;
    }
    (*(void (**)(uint64_t, void, id))(v24 + 16))(v24, 0LL, v27);

    goto LABEL_19;
  }

  uint64_t v63 = 0LL;
  id v64 = &v63;
  uint64_t v65 = 0x2020000000LL;
  int v66 = 0;
  _LSDefaultLog();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_4( a1,  v4,  v5,  v6,  v7,  v8,  v9,  v10);
  }

  char v11 = (void *)MEMORY[0x1895F87A8];
  uint64_t v56 = MEMORY[0x1895F87A8];
  uint64_t v57 = 3221225472LL;
  __int16 v58 = ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_27;
  id v13 = (uint64_t *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 72);
  __int16 v62 = *(_WORD *)(a1 + 80);
  uint64_t v59 = &unk_189D74E70;
  uint64_t v60 = &v63;
  uint64_t v61 = v12;
  _CSStoreEnumerateUnits();
  if (*((_DWORD *)v64 + 6)) {
    goto LABEL_11;
  }
  _LSDefaultLog();
  char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_3( a1,  v14,  v15,  v16,  v17,  v18,  v19,  v20);
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  id v72 = 0LL;
  v50[1] = v11;
  __int16 v21 = *(void **)(a1 + 32);
  v50[3] = ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_28;
  v50[4] = &unk_189D74E98;
  __int16 v55 = *(_WORD *)(a1 + 80);
  id v50[2] = (id)3221225472LL;
  uint64_t v52 = buf;
  id v54 = v3;
  id v51 = v21;
  uint64_t v53 = &v63;
  _CSStoreEnumerateUnits();
  unsigned int v22 = *((_DWORD *)v64 + 6);
  if (v22 && *(void *)(*(void *)&buf[8] + 24LL)) {
    _LSContainerSetMounted(*v3, v22, *v13);
  }

  _Block_object_dispose(buf, 8);
  if (*((_DWORD *)v64 + 6))
  {
LABEL_11:
    _LSDefaultLog();
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
      ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_2();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_14;
  }

  _LSDefaultLog();
  __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
    ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_cold_1();
  }

  int v31 = *(void **)(a1 + 40);
  if (v31)
  {
    uint64_t v32 = *v3;
    v50[0] = 0LL;
    int v33 = _LSAliasAdd(v32, v31, v50);
    id v34 = v50[0];
    id v35 = v34;
    if (!v33)
    {
LABEL_38:
      _LSDefaultLog();
      __int16 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *(void *)(a1 + 32);
        uint64_t v44 = *v13;
        *(_DWORD *)__int128 buf = 138478339;
        *(void *)&uint8_t buf[4] = v43;
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v44;
        *(_WORD *)&buf[22] = 2114;
        id v72 = v35;
        _os_log_error_impl( &dword_183E58000,  v42,  OS_LOG_TYPE_ERROR,  "Error adding database record for volume %{private}@ with volume ID %llu: %{public}@",  buf,  0x20u);
      }

      id v34 = v35;
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      goto LABEL_42;
    }
  }

  else
  {
    id v34 = 0LL;
    int v33 = 0;
  }

  char v36 = *(void **)(a1 + 48);
  if (v36)
  {
    BOOL v37 = *v3;
    id v49 = v34;
    int v38 = _LSAliasAdd(v37, v36, &v49);
    id v35 = v49;

    id v34 = v35;
    if (!v38)
    {
LABEL_36:
      if (v33) {
        _LSAliasRemove(*v3, v33);
      }
      goto LABEL_38;
    }
  }

  else
  {
    int v38 = 0;
  }

  uint64_t v39 = *(void *)(a1 + 72);
  uint64_t v40 = *v3;
  v45[0] = *(_WORD *)(a1 + 80);
  v45[1] = 0;
  uint64_t v46 = v39;
  int v47 = v33;
  int v48 = v38;
  int v41 = _LSContainerAdd(v40, (uint64_t)v45, (_DWORD *)v64 + 6);
  if (v41)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v41, (uint64_t)"_LSContainerAdd_block_invoke", 520LL, 0LL);
    id v35 = (id)objc_claimAutoreleasedReturnValue();

    if (v38) {
      _LSAliasRemove(*v3, v38);
    }
    goto LABEL_36;
  }

  _LSContainerSetMounted(*v3, *((_DWORD *)v64 + 6), *v13);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_42:

LABEL_14:
  _Block_object_dispose(&v63, 8);
LABEL_19:
  MEMORY[0x186E2AFE0]();
  if (v67 && v69) {
    _LSContextDestroy(v67);
  }
  id v28 = v68;
  unsigned int v67 = 0LL;
  id v68 = 0LL;

  char v69 = 0;
  id v29 = v70;
  id v70 = 0LL;
}

void sub_183EE48B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
  _Block_object_dispose(&a31, 8);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v32 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_27( uint64_t result, int a2, unsigned __int16 *a3, uint64_t a4, _BYTE *a5)
{
  if (*a3 == *(unsigned __int16 *)(result + 48)
    && *((_BYTE *)a3 + 2) == 1
    && *(void *)(result + 40) == *(void *)(a3 + 2))
  {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
    *a5 = 1;
  }

  return result;
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_28( uint64_t result, int a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a3;
  uint64_t v5 = *(unsigned __int16 **)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL);
  if (*v5 == *(unsigned __int16 *)(result + 64))
  {
    uint64_t v8 = result;
    __n128 result = _LSAliasCompareToNode( **(void ***)(result + 56),  *((_DWORD *)v5 + 3),  *(void *)(v5 + 2),  0LL,  *(void **)(result + 32));
    if ((_DWORD)result)
    {
      *(_DWORD *)(*(void *)(*(void *)(v8 + 48) + 8LL) + 24LL) = a2;
      *a5 = 1;
    }
  }

  return result;
}

uint64_t ___ZL15_LSContainerAddP9LSContextP6FSNodeP6NSDataS2_S4_tyhU13block_pointerFvjP7NSErrorE_block_invoke_30( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

  ;
}

void *_LSCopyGroupContainerIdentifiersFromEntitlements(void *a1, void *a2)
{
  id v3 = a2;
  [a1 UTF8String];
  uint64_t v13 = MEMORY[0x1895F87A8];
  id v4 = v3;
  char v14 = v4;
  uint64_t v5 = (void *)container_entitlements_copy_container_identifiers();
  if (object_getClass(v5) != (Class)MEMORY[0x1895F9220])
  {
    [MEMORY[0x1896077D8] currentHandler];
    char v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "NSSet<NSString *> * _Nonnull _LSCopyGroupContainerIdentifiersFromEntitlements(NSString *__strong _Nonnull, LSPrope rtyList *__strong _Nonnull)");
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 handleFailureInFunction:v12, @"LSContainerHelpers.m", 152, @"Returned XPC object %@ was not an array, cannot continue", v5, v13, 3221225472, ___LSCopyGroupContainerIdentifiersFromEntitlements_block_invoke, &unk_189D74F00, v4 file lineNumber description];
  }

  size_t count = xpc_array_get_count(v5);
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x189603FE0]) initWithCapacity:count];
  if (count)
  {
    for (size_t i = 0LL; i != count; ++i)
    {
      uint64_t v9 = (void *)objc_msgSend(objc_alloc(NSString), "initWithUTF8String:", xpc_array_get_string(v5, i));
      if (v9) {
        [v7 addObject:v9];
      }
    }
  }

  return v7;
}

uint64_t _LSCopyRationalizedGroupContainerURLDict(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1) {
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x189603FC8], "dictionaryWithCapacity:", objc_msgSend(v1, "count"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 3221225472LL;
  v7[2] = ___LSCopyRationalizedGroupContainerURLDict_block_invoke;
  void v7[3] = &unk_189D74F28;
  id v8 = v3;
  id v4 = v3;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = [v4 copy];

  if (!v5) {
LABEL_3:
  }
    uint64_t v5 = MEMORY[0x189604A60];

  return v5;
}

uint64_t _LSCopyDataContainerURLFromContainermanager(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  _LSDefaultLog();
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v13 = 138412802;
    *(void *)&void v13[4] = v5;
    __int16 v14 = 2048;
    uint64_t v15 = a2;
    __int16 v16 = 2048;
    uint64_t v17 = a3;
    _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_DEFAULT,  "querying MCM for container for %@, class %llx, platform %lu",  v13,  0x20u);
  }

  *(void *)uint64_t v13 = 1LL;
  id v7 = v5;
  [v7 UTF8String];
  uint64_t v8 = container_create_or_lookup_path_for_platform();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    uint64_t v10 = [objc_alloc(MEMORY[0x189604030]) initFileURLWithFileSystemRepresentation:v8 isDirectory:1 relativeToURL:0];
    free(v9);
  }

  else
  {
    _LSDefaultLog();
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      _LSCopyDataContainerURLFromContainermanager_cold_1();
    }

    uint64_t v10 = 0LL;
  }

  return v10;
}

id _LSCopyGroupContainerURLSFromContainermanager(void *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v23 = 1LL;
  id v1 = a1;
  [v1 UTF8String];
  uint64_t v2 = (void *)container_create_or_lookup_app_group_paths_for_platform();
  if (v2)
  {
    id v18 = v1;
    id v3 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    id v4 = objc_alloc(MEMORY[0x189603FC8]);
    [v3 allKeys];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    id v6 = (id)objc_msgSend(v4, "initWithCapacity:", objc_msgSend(v5, "count"));

    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v7 = v3;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:v24 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        for (uint64_t i = 0LL; i != v9; ++i)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v19 + 1) + 8 * i);
          id v13 = objc_alloc(MEMORY[0x189604030]);
          [v7 objectForKeyedSubscript:v12];
          __int16 v14 = (void *)objc_claimAutoreleasedReturnValue();
          uint64_t v15 = (void *)[v13 initFileURLWithPath:v14 isDirectory:1];
          [v6 setObject:v15 forKeyedSubscript:v12];
        }

        uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:v24 count:16];
      }

      while (v9);
    }

    id v1 = v18;
  }

  else
  {
    _LSDefaultLog();
    __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _LSCopyGroupContainerURLSFromContainermanager_cold_1();
    }

    id v6 = objc_alloc_init(MEMORY[0x189603F68]);
  }

  return v6;
}

uint64_t _LSCopyEnvironmentVariablesFromContainermanager(void *a1, void *a2, unsigned int a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  _LSDefaultLog();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v23 = v5;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    __int16 v26 = 2048;
    uint64_t v27 = a3;
    _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_DEFAULT,  "querying MCM for environment for %@, class %llx, platform %lu",  buf,  0x20u);
  }

  id v7 = v5;
  [v7 UTF8String];
  uint64_t v8 = container_create_or_lookup_path_for_platform();
  if (!v8)
  {
    _LSDefaultLog();
    __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _LSCopyEnvironmentVariablesFromContainermanager_cold_1();
    }

    goto LABEL_14;
  }

  uint64_t v9 = (void *)v8;
  uint64_t v10 = (void *)[objc_alloc(MEMORY[0x189604030]) initFileURLWithFileSystemRepresentation:v8 isDirectory:1 relativeToURL:0];
  [v10 URLByAppendingPathComponent:@"tmp" isDirectory:1];
  char v11 = (void *)objc_claimAutoreleasedReturnValue();
  [v11 path];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = [v10 path];
  __int16 v14 = (void *)v13;
  if (v12 && v13)
  {
    v20[0] = @"HOME";
    v20[1] = @"CFFIXED_USER_HOME";
    v21[0] = v13;
    v21[1] = v13;
    v20[2] = @"TMPDIR";
    void v20[3] = @"_DYLD_CLOSURE_HOME";
    void v21[2] = v12;
    v21[3] = v13;
    uint64_t v15 = [MEMORY[0x189603F68] dictionaryWithObjects:v21 forKeys:v20 count:4];
  }

  else
  {
    _LSDefaultLog();
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      [v11 path];
      id v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)__int128 buf = 138412546;
      id v23 = v18;
      __int16 v24 = 2112;
      uint64_t v25 = v14;
      _os_log_impl( &dword_183E58000,  v17,  OS_LOG_TYPE_DEFAULT,  "Error creating env variables-tempURL: %@, containerPath: %@",  buf,  0x16u);
    }

    uint64_t v15 = 0LL;
  }

  free(v9);

  if (!v15) {
LABEL_14:
  }
    uint64_t v15 = MEMORY[0x189604A60];

  return v15;
}

Class initUMUserManager()
{
  if (!UserManagementLibrary_frameworkLibrary) {
    UserManagementLibrary_frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/UserManagement.framework/UserManagement",  2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass = (uint64_t (*)())UMUserManagerFunction;
  return result;
}

id UMUserManagerFunction()
{
  return (id)classUMUserManager;
}

  ;
}

void OUTLINED_FUNCTION_1_3( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return container_get_error_description();
}

void _LSGetNodeTypeCreatorInfo(LSContext *a1, void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  id v9 = a2;
  if (a3 && *(void *)a3)
  {
    *a4 = *(_DWORD *)(*(void *)a3 + 184LL);
LABEL_9:
    *a5 = 0;
    goto LABEL_10;
  }

  if (a1
    && _LSGetBundleClassForNode((uint64_t)a1, v9) == 2
    && (uint64_t v11 = 0LL, !_LSBundleFindWithNode(a1, v9, 0LL, &v11)))
  {
    uint64_t v10 = v11;
    *a4 = *(_DWORD *)(v11 + 184);
    *a5 = 0;
    if (a3) {
      *(void *)a3 = v10;
    }
  }

  else if (([v9 getHFSType:a4 creator:a5 error:0] & 1) == 0)
  {
    *a4 = 0;
    goto LABEL_9;
  }

void sub_183EE5594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSNodeIsAVCHDCollection(void *a1)
{
  return [a1 isAVCHDCollection];
}

BOOL _LSIsKnownExtensionInlineBuffer(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 0LL;
  v4[20] = *MEMORY[0x1895F89C0];
  if (a1 && a2)
  {
    if (*(uint64_t *)(a2 + 160) >= 1 && XCFBufInitWithCFStringInlineBuffer((uint64_t)v4, a2, 1))
    {
      BOOL v2 = CSStringBindingFindStringAndBindings() == 0;
      XCFBufDestroy((uint64_t)v4);
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t _LSGetBundleClassForHFSType(int a1)
{
  uint64_t result = 2LL;
  if (a1 <= 1128547669)
  {
    return a1 == 1112425548;
  }

  if (a1 <= 1634758756)
  {
    if (a1 == 1128547670) {
      return result;
    }
    if (a1 == 1179473739) {
      return 3LL;
    }
    return 0LL;
  }

  if (a1 != 1634758757 && a1 != 1667523958 && a1 != 1684433260) {
    return 0LL;
  }
  return result;
}

uint64_t _LSGetBundleClassForExtensionNSString(void *a1)
{
  id v1 = a1;
  id v6 = v1;
  uint64_t v9 = 0LL;
  uint64_t v10 = -[__CFString length](v1, "length");
  if (CFStringGetCharactersPtr(v1)) {
    CStringPtr = 0LL;
  }
  else {
    CStringPtr = CFStringGetCStringPtr(v1, 0x600u);
  }
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v8 = CStringPtr;
  uint64_t v3 = _LSGetBundleClassForExtensionInlineBuffer((uint64_t)v5);

  return v3;
}

void sub_183EE57D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSBundleClassHasUnregisteredPersonality(int a1)
{
  else {
    char v1 = 0x1000001000101uLL >> (8 * (a1 - 9));
  }
  return v1 & 1;
}

uint64_t _LSNodeIsPackageCommon(LSContext *a1, void *a2, int a3, _BYTE *a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (a4) {
    *a4 = 0;
  }
  if ([v7 isDirectory] && (objc_msgSend(v8, "isVolume") & 1) == 0)
  {
    if ([v8 hasPackageBit])
    {
      uint64_t v9 = 1LL;
    }

    else
    {
      [v8 extensionWithError:0];
      uint64_t v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
      uint64_t v12 = v11;
      if (v11)
      {
        if (a1
          && -[__CFString length](v11, "length")
          && (_LSIsPackageExtension(a1, a3, v12)
           || ([v8 getHFSType:0 creator:0 error:0] & 1) != 0))
        {
          uint64_t v9 = 1LL;
        }

        else
        {
          uint64_t v9 = [v8 isAVCHDCollection];
          char v13 = v9 ^ 1;
          if (!a4) {
            char v13 = 1;
          }
          if ((v13 & 1) == 0)
          {
            uint64_t v9 = 1LL;
            *a4 = 1;
          }
        }
      }

      else
      {
        uint64_t v9 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

void sub_183EE5914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSIsPackageExtension(LSContext *a1, int a2, CFStringRef theString)
{
  if (!theString) {
    goto LABEL_9;
  }
  CFIndex Length = CFStringGetLength(theString);
  switch(Length)
  {
    case 3LL:
      id v7 = @"app";
      goto LABEL_8;
    case 11LL:
      id v7 = @"placeholder";
LABEL_8:
      BOOL v8 = 1LL;
      if (CFStringCompare(theString, v7, 1uLL) == kCFCompareEqualTo) {
        return v8;
      }
      break;
    case 7LL:
      id v7 = @"service";
      goto LABEL_8;
  }

void sub_183EE5A94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t _LSNodeIsPackage(LSContext *a1, void *a2, _BYTE *a3)
{
  return _LSNodeIsPackageCommon(a1, a2, 1, a3);
}

uint64_t _LSNodeIsPackageIgnoringTypeDeclarations(LSContext *a1, void *a2, _BYTE *a3)
{
  return _LSNodeIsPackageCommon(a1, a2, 0, a3);
}

uint64_t _LSPrepareMimicForIsPackage(void *a1, uint64_t a2)
{
  v8[0] = sel_isDirectory;
  v8[1] = sel_isVolume;
  _OWORD v8[2] = sel_hasPackageBit;
  v8[3] = sel_extensionWithError_;
  v8[4] = sel_isAVCHDCollection;
  id v3 = a1;
  uint64_t v4 = 0LL;
  LOBYTE(v5) = 1;
  do
  {
    while (!(_BYTE)v5)
    {
      if (++v4 == 5)
      {

        goto LABEL_10;
      }

      LOBYTE(v5) = 0;
    }

    int v5 = [v3 populateSimpleSelector:v8[v4++] error:a2];
  }

  while (v4 != 5);

  if (v5)
  {
    uint64_t v6 = [v3 populateHFSTypeAndCreatorWithError:a2];
    goto LABEL_11;
  }

void sub_183EE5BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPrepareMimicForBundleClass(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (_LSPrepareMimicForIsPackage(v3, a2))
  {
    v8[0] = sel_isResolvable;
    v8[1] = sel_pathWithError_;
    _OWORD v8[2] = sel_getInodeNumber_error_;
    id v4 = v3;
    uint64_t v5 = 0LL;
    LOBYTE(v6) = 1;
    do
    {
      if ((_BYTE)v6) {
        uint64_t v6 = [v4 populateSimpleSelector:v8[v5] error:a2];
      }
      else {
        uint64_t v6 = 0LL;
      }
      ++v5;
    }

    while (v5 != 3);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_183EE5C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyInfoForNode(LSContext *a1, void *a2, int a3, int *a4)
{
  id v7 = a2;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  *((void *)a4 + 1) = 0LL;
  *(void *)a4 = 0LL;
  a4[4] = 0;
  if (!a1 && a3 != 64)
  {
    uint64_t v8 = _LSContextInit(&v40);
    if ((_DWORD)v8)
    {
      int v9 = 0LL;
      goto LABEL_23;
    }

    a1 = (LSContext *)&v40;
  }

  id v38 = 0LL;
  [v7 nameWithError:&v38];
  int v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
  id v10 = v38;
  uint64_t v11 = v10;
  if (v9)
  {
  }

  else
  {
    uint64_t v8 = _LSGetOSStatusFromNSError(v10);

    if ((_DWORD)v8) {
      goto LABEL_21;
    }
  }

  _CFGetPathExtensionRangesFromPathComponent();
  if ((a3 & 1) != 0)
  {
    v12.id location = range.location;
    if (range.location != -1)
    {
      v12.CFIndex length = range.length;
      if (range.length >= 1) {
        *(void *)(a4 + 3) = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x189604DB0], v9, v12);
      }
    }
  }

  if ((a3 & 0x54) != 0)
  {
    v32[0] = 0LL;
    if ([v7 getResourceValue:v32 forKey:*MEMORY[0x189603C30] options:1 error:0]
      && [v32[0] BOOLValue])
    {
      *a4 |= 0x100000u;
    }
  }

  if (a3 == 64) {
    goto LABEL_20;
  }
  int v14 = _LSGetBundleClassForNode((uint64_t)a1, v7);
  int v15 = v14;
  if (v14) {
    BOOL v16 = v14 == 3;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  if (![v7 isDirectory])
  {
    if ([v7 isSymbolicLink])
    {
      int v19 = *a4 | 0x30;
      goto LABEL_64;
    }

    if ([v7 isAliasFile])
    {
      int v23 = *a4;
      int v24 = 17;
    }

    else
    {
      int v23 = *a4;
      if (v15 != 2)
      {
        int v19 = v23 | 1;
LABEL_64:
        *a4 = v19;
        memset(v37, 63, sizeof(v37));
        [v7 getHFSType:&v37[1] creator:v37 error:0];
        if ((a3 & 0x14) != 0 && (*(_BYTE *)a4 & 0x10) == 0 && [v7 isExecutable])
        {
          BOOL v26 = (v37[1] == 1061109567 || v37[1] == 0) && range.length == 0;
          if (v26 || v15)
          {
            *a4 |= 0x2000u;
          }

          else
          {
            LODWORD(v32[0]) = 0;
            v32[1] = 0LL;
            int v33 = 0;
            id v35 = 0LL;
            id v36 = 0LL;
            uint64_t v34 = 0LL;
            if (_LSGetBindingForNodeOrSchemeOrUTI((int)a1, v7, 0LL, 0LL, 0, -1, 0LL, 2, (uint64_t)v32)
              || !v34)
            {
              *a4 |= 0x2000u;
            }
          }
        }

        if ((a3 & 2) != 0)
        {
          a4[1] = v37[1];
          a4[2] = v37[0];
        }

        if ((a3 & 0x18) != 0 && (*a4 & 4) != 0)
        {
          uint64_t v27 = v39;
          if (a1 && !v39)
          {
            _LSFindOrRegisterBundleNode(a1, v7, 0LL, (a1 == (LSContext *)&v40) << 25, 0LL, 0LL, &v39);
            uint64_t v27 = v39;
          }

          if (v27)
          {
            unsigned int plistContentFlags = v27->_plistContentFlags;
            *a4 |= (_LSBundleDataGetUnsupportedFormatFlag() | plistContentFlags) & 0x600F80;
            int v29 = _LSGetItemInfoArchFlagsForBundle(v39);
          }

          else
          {
            int v29 = 0x400000;
          }

          *a4 |= v29;
        }

        goto LABEL_20;
      }

      int v24 = 5;
    }

    int v19 = v23 | v24;
    goto LABEL_64;
  }

  *a4 |= 8u;
  if ([v7 isVolume])
  {
    if ((a3 & 0x14) != 0)
    {
      uint64_t v8 = 0LL;
      int v18 = *a4 | 0x1000;
LABEL_34:
      *a4 = v18;
      goto LABEL_21;
    }

    goto LABEL_20;
  }

  if ((a3 & 0x3E) == 0) {
    goto LABEL_20;
  }
  if ((a3 & 2) != 0 && (*(_BYTE *)a4 & 2) != 0)
  {
    if (v39) {
      int v20 = 0;
    }
    else {
      int v20 = v17;
    }
    if (a1 && v20) {
      _LSFindOrRegisterBundleNode(a1, v7, 0LL, (a1 == (LSContext *)&v40) << 25, 0LL, 0LL, &v39);
    }
    _LSGetNodeTypeCreatorInfo(a1, v7, (uint64_t)&v39, a4 + 1, a4 + 2);
  }

  if ((a3 & 0x3C) == 0) {
    goto LABEL_20;
  }
  uint64_t v8 = 0LL;
  if ((*a4 & 2) != 0 && v15 == 2)
  {
    *a4 |= 4u;
    if ((a3 & 0x18) != 0)
    {
      __int128 v21 = v39;
      if (a1 && !v39)
      {
        _LSFindOrRegisterBundleNode(a1, v7, 0LL, (a1 == (LSContext *)&v40) << 25, 0LL, 0LL, &v39);
        __int128 v21 = v39;
      }

      if (v21)
      {
        unsigned int v22 = v21->_plistContentFlags;
        *a4 |= (_LSBundleDataGetUnsupportedFormatFlag() | v22) & 0x600F80;
        uint64_t v8 = 0LL;
        int v18 = *a4 | _LSGetItemInfoArchFlagsForBundle(v39);
        goto LABEL_34;
      }

      [v7 URL];
      __int128 v30 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
      int v31 = CFBundleCopyInfoDictionaryInDirectory(v30);

      *a4 |= _LSGetApplicationFlagsFromPlist(v31, v7, 1, 0, 0, 0LL);
      if (v31) {
        CFRelease(v31);
      }
    }

void sub_183EE621C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetItemInfoArchFlagsForBundle(const LSBundleData *a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  int v7 = 0;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  _OWORD v3[2] = ___ZL32_LSGetItemInfoArchFlagsForBundlePK12LSBundleData_block_invoke;
  v3[3] = &unk_189D744F0;
  v3[4] = &v4;
  _LSEnumerateSliceMask(a1->base._sliceMask, v3);
  uint64_t v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_183EE6310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t _LSGetApplicationFlagsFromPlist( const __CFDictionary *a1, void *a2, int a3, int a4, int a5, _BYTE *a6)
{
  id v11 = a2;
  if (a1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      if (CFDictionaryGetCount(a1))
      {
        if (_LSGetBooleanFromDict(a1, @"LSRequiresClassic"))
        {
          unsigned int v13 = 256;
        }

        else if (_LSGetBooleanFromDict(a1, @"LSRequiresCarbon"))
        {
          unsigned int v13 = 128;
        }

        else if (_LSGetBooleanFromDict(a1, @"LSPrefersCarbon"))
        {
          unsigned int v13 = 640;
        }

        else if (_LSGetBooleanFromDict(a1, @"LSPrefersClassic"))
        {
          unsigned int v13 = 1152;
        }

        else if (a4)
        {
          unsigned int v13 = 640;
        }

        else
        {
          unsigned int v13 = 128;
        }

        if (CFDictionaryContainsKey(a1, @"AMCustomServiceTypes")) {
          uint64_t v15 = v13 | 0x20000;
        }
        else {
          uint64_t v15 = v13;
        }
        if (!a6) {
          goto LABEL_16;
        }
LABEL_15:
        *a6 = 0;
        goto LABEL_16;
      }
    }
  }

  if (a5) {
    unsigned int v14 = 256;
  }
  else {
    unsigned int v14 = 128;
  }
  if (a3) {
    unsigned int v14 = 0;
  }
  if (a4) {
    uint64_t v15 = 640LL;
  }
  else {
    uint64_t v15 = v14;
  }
  if (a6) {
    goto LABEL_15;
  }
LABEL_16:

  return v15;
}

void sub_183EE6474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSGetItemInfoFlagsForNode(LSContext *a1, void *a2, _DWORD *a3, void *a4)
{
  id v7 = a2;
  if (v7)
  {
    if (a3) {
      goto LABEL_3;
    }
  }

  else
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSGetItemInfoFlagsForNode(LSContext *, FSNode *__strong, LSItemInfoFlags *, NSError *__autoreleasing *)");
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v10 handleFailureInFunction:v11, @"LSCore.mm", 1530, @"Invalid parameter not satisfying: %@", @"inNode != nil" file lineNumber description];

    if (a3) {
      goto LABEL_3;
    }
  }

  [MEMORY[0x1896077D8] currentHandler];
  CFRange v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSGetItemInfoFlagsForNode(LSContext *, FSNode *__strong, LSItemInfoFlags *, NSError *__autoreleasing *)");
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue();
  [v12 handleFailureInFunction:v13, @"LSCore.mm", 1531, @"Invalid parameter not satisfying: %@", @"outFlags != NULL" file lineNumber description];

LABEL_3:
  v14[0] = 0LL;
  v14[1] = 0LL;
  int v15 = 0;
  int v8 = _LSCopyInfoForNode(a1, v7, 4, (int *)v14);
  if (v8)
  {
    if (a4)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v8, (uint64_t)"_LSGetItemInfoFlagsForNode", 1539LL, 0LL);
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  else
  {
    *a3 = v14[0];
  }

  return v8 == 0;
}

void sub_183EE6614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopySniffedExtensionAndTypeIdentifierForURL()
{
  id v0 = (const void *)_CFBundleCopyFileTypeForFileURL();
  if (v0) {
    CFRelease(v0);
  }
  return 0LL;
}

__CFSet *_LSCopyPackageExtensions(LSContext *a1)
{
  BOOL v2 = a1->db;
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605258]);
  if (Mutable)
  {
    uint64_t v4 = (const __CFArray *)CSStringBindingCopyCFStrings();
    uint64_t v5 = v4;
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v7 = 0LL;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v7);
          if (_LSIsPackageExtension(a1, 1, ValueAtIndex))
          {
            int v9 = CFArrayGetValueAtIndex(v5, v7);
            CFSetAddValue(Mutable, v9);
          }

          ++v7;
        }

        while (Count != v7);
      }

      CFRelease(v5);
    }

    if (CFSetGetCount(Mutable) < 1)
    {
      CFRelease(Mutable);
      CFMutableSetRef Mutable = 0LL;
    }

    else
    {
      CFSetAddValue(Mutable, @"app");
      CFSetAddValue(Mutable, @"service");
    }
  }

  return Mutable;
}

void sub_183EE67A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSSetKernelPackageExtensions()
{
  id v0 = _LSCopyPackageExtensionsUnion();
  if (v0)
  {
    uint64_t v1 = v0;
    CFIndex Count = CFArrayGetCount(v0);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      pthread_rwlock_wrlock(&packageExtensionsLock);
      if (lastPackageExtensions) {
        CFRelease((CFTypeRef)lastPackageExtensions);
      }
      lastPackageExtensions = (uint64_t)CFRetain(v1);
      pthread_rwlock_unlock(&packageExtensionsLock);
      CFIndex v4 = 0LL;
      for (CFIndex i = 0LL; i != v3; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v1, i);
        v18.CFIndex length = CFStringGetLength(ValueAtIndex);
        v18.id location = 0LL;
        CFIndex Bytes = CFStringGetBytes(ValueAtIndex, v18, 0x8000100u, 0, 0, 0LL, 0LL, &usedBufLen);
        CFIndex v8 = usedBufLen;
        if (usedBufLen <= v4) {
          CFIndex v8 = v4;
        }
        if (Bytes) {
          CFIndex v4 = v8;
        }
      }

      CFIndex v9 = v4 + 1;
      id v10 = malloc((v4 + 1) * v3);
      if (v10)
      {
        id v11 = v10;
        CFIndex v12 = 0LL;
        unsigned int v13 = (char *)v10;
        while (1)
        {
          unsigned int v14 = (const __CFString *)CFArrayGetValueAtIndex(v1, v12);
          if (!CFStringGetCString(v14, v13, v9, 0x8000100u)) {
            break;
          }
          ++v12;
          v13 += v9;
          if (v3 == v12)
          {
            CFIndex usedBufLen = (CFIndex)v11;
            int v16 = v3;
            int v17 = v9;
            fsctl("/", 0x80104102uLL, &usedBufLen, 0);
            break;
          }
        }

        free(v11);
      }
    }

    CFRelease(v1);
  }

CFArrayRef _LSCopyPackageExtensionsUnion(void)
{
  v3.db = 0LL;
  if (_LSContextInit(&v3))
  {
    CFArrayRef v0 = 0LL;
  }

  else
  {
    uint64_t v1 = _LSCopyPackageExtensions(&v3);
    if (v1)
    {
      CFArrayRef v0 = XCFArrayCreateWithSet((const __CFAllocator *)*MEMORY[0x189604DB0], v1, MEMORY[0x189605228]);
      CFRelease(v1);
    }

    else
    {
      CFArrayRef v0 = 0LL;
    }

    _LSContextDestroy((void **)&v3.db);
  }

  return v0;
}

void sub_183EE69B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

CFArrayRef _LSCopyKernelPackageExtensionsAsLSD()
{
  if (pthread_rwlock_tryrdlock(&packageExtensionsLock)) {
    return _LSCopyPackageExtensionsUnion();
  }
  if (!lastPackageExtensions)
  {
    pthread_rwlock_unlock(&packageExtensionsLock);
    return _LSCopyPackageExtensionsUnion();
  }

  CFTypeRef v1 = CFRetain((CFTypeRef)lastPackageExtensions);
  pthread_rwlock_unlock(&packageExtensionsLock);
  if (!v1) {
    return _LSCopyPackageExtensionsUnion();
  }
  return (CFArrayRef)v1;
}

uint64_t ___ZL28_LSIsClaimedPackageExtensionP9LSContextPK10__CFString_block_invoke( uint64_t result, uint64_t a2, int a3, _BYTE *a4)
{
  if ((a3 & 3) == 2 && (a3 & 0xFFFFFFFC) != 0)
  {
    uint64_t v6 = result;
    uint64_t result = _LSClaimGet();
    if (result)
    {
      if ((*(_BYTE *)(result + 8) & 8) != 0)
      {
        *(_BYTE *)(*(void *)(*(void *)(v6 + 32) + 8LL) + 24LL) = 1;
        *a4 = 1;
      }
    }
  }

  return result;
}

uint64_t ___ZL32_LSGetItemInfoArchFlagsForBundlePK12LSBundleData_block_invoke(uint64_t result, int a2)
{
  if (a2 > 16777222)
  {
    if (a2 == 16777223)
    {
      int v2 = 0x10000000;
    }

    else
    {
      if (a2 != 16777234) {
        return result;
      }
      int v2 = 0x8000000;
    }
  }

  else if (a2 == 7)
  {
    int v2 = 0x4000000;
  }

  else
  {
    if (a2 != 18) {
      return result;
    }
    int v2 = 0x2000000;
  }

  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) |= v2;
  return result;
}

uint64_t _LSServer_SelfSessionKey()
{
  if ([(id)__LSDefaultsGetSharedInstance() isLightweightSystemServer]) {
    return 0x100000000LL;
  }
  else {
    return _CFGetEUID();
  }
}

void _LSServer_SetDatabaseExecutionContext(id obj)
{
}

id _LSServer_DatabaseExecutionContext()
{
  CFArrayRef v0 = (void *)sharedContext;
  if (!sharedContext)
  {
    [MEMORY[0x1896077D8] currentHandler];
    int v2 = (void *)objc_claimAutoreleasedReturnValue();
    [NSString stringWithUTF8String:"LSDBExecutionContext *_LSServer_DatabaseExecutionContext()"];
    LSContext v3 = (void *)objc_claimAutoreleasedReturnValue();
    [v2 handleFailureInFunction:v3 file:@"LSDatabase.mm" lineNumber:268 description:@"no execution context in server?"];

    CFArrayRef v0 = (void *)sharedContext;
  }

  return v0;
}

void sub_183EE6BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSSetLocalDatabase(void *a1)
{
  LSContext v3 = a1;
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey sessionKey = v3->sessionKey;
  int v2 = _LSGetSession(sessionKey);
  LSSession::setDatabase((LSSession *)v2, v3);
  os_unfair_recursive_lock_unlock();
}

void sub_183EE6C8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void LSSession::setDatabase(LSSession *this, _LSDatabase *a2)
{
  id v10 = a2;
  objc_storeStrong((id *)this + 3, a2);
  CFIndex v4 = (void *)*((void *)this + 4);
  uint64_t v5 = (void *)*((void *)this + 5);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = (void (**)(void, void, void, void))MEMORY[0x186E2A7B8](*v4);
      CFIndex v7 = (void *)MEMORY[0x186E2A59C]();
      v6[2](v6, 0LL, 0LL, 0LL);
      objc_autoreleasePoolPop(v7);

      ++v4;
    }

    while (v4 != v5);
    CFIndex v4 = (void *)*((void *)this + 4);
    for (CFIndex i = (void *)*((void *)this + 5); i != v4; --i)
    {
      CFIndex v9 = (void *)*(i - 1);
    }
  }

  *((void *)this + 5) = v4;
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit((char **)this + 4);
}

void sub_183EE6D68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSSetLocalDatabaseIfNewer(void *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  int v2 = a1;
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey sessionKey = v2->sessionKey;
  CFIndex v4 = (id *)_LSGetSession(sessionKey);
  id v5 = v4[3];
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = v5;
  id v7 = v4[3];
  _LSDatabaseGetCacheGUID();
  CFIndex v8 = (void *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseGetCacheGUID();
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  int v9 = [v8 isEqual:v1];

  if (!v9)
  {
LABEL_7:
    _LSDatabaseGetLog();
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      _LSDatabaseGetCacheGUID();
      int v17 = (void *)objc_claimAutoreleasedReturnValue();
      id v18 = v4[3];
      if (v18)
      {
        id v1 = v4[3];
        _LSDatabaseGetCacheGUID();
        int v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }

      else
      {
        int v19 = @"(no db)";
      }

      *(_DWORD *)__int128 buf = 138412546;
      unsigned int v22 = v17;
      __int16 v23 = 2112;
      int v24 = v19;
      _os_log_debug_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_DEBUG,  "Database with GUID %@ does not match existing database GUID %@",  buf,  0x16u);
      if (v18)
      {
      }
    }

    goto LABEL_8;
  }

  _LSDatabaseGetHeader(buf);
  unint64_t v10 = v25;
  _LSDatabaseGetHeader(buf);
  if (v10 <= v25)
  {
    _LSDatabaseGetLog();
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      _LSDatabaseGetHeader(buf);
      uint64_t v16 = v25;
      _LSDatabaseGetHeader(buf);
      _LSSetLocalDatabaseIfNewer_cold_2((uint64_t)buf, (uint64_t)v20, v16);
    }

void sub_183EE7008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseGetSessionStatus()
{
  LSSessionKey v0 = (LSSessionKey)_LSServer_SelfSessionKey();
  id v1 = _LSGetSession(v0);
  uint64_t v2 = ((v1[20] & 2) << 9) | ((v1[20] & 1) << 7);
  id v3 = *((id *)v1 + 3);
  if (v3)
  {
    CFIndex v4 = v3;
    int v5 = -[_LSDatabase isSeedingComplete](*((void *)v1 + 3));

    if (v5) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = v2 | 0x200;
    }
  }

  id v6 = *((id *)v1 + 3);
  if (v6)
  {
    id v7 = v6;
    int v8 = -[_LSDatabase isSeeded](*((void *)v1 + 3));

    if (v8) {
      uint64_t v2 = v2 | 0x100;
    }
    else {
      uint64_t v2 = v2;
    }
  }

  os_unfair_recursive_lock_unlock();
  return v2;
}

void sub_183EE7128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE7504( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id _LSDatabaseGetNode(uint64_t a1)
{
  return *(id *)(a1 + 1640);
}

void _LSDatabaseHandleUnitExhaustion(_LSDatabase *a1, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v4 = _CSStoreCopyTableName();
  int v5 = a1->node;
  id v6 = objc_alloc(&OBJC_CLASS___FSNode);
  -[FSNode URL](v5, "URL");
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(NSString, "stringWithFormat:", @"%ld.exhausted", a2);
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  [v7 URLByAppendingPathExtension:v8];
  int v9 = (void *)objc_claimAutoreleasedReturnValue();
  id v26 = 0LL;
  unint64_t v10 = -[FSNode initWithURL:flags:error:](v6, "initWithURL:flags:error:", v9, 0LL, &v26);
  id v11 = v26;

  if (v10)
  {
    _LSDatabaseGetLog();
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v32 = v4;
      __int16 v33 = 2114;
      uint64_t v34 = v5;
      __int16 v35 = 2114;
      id v36 = v10;
      _os_log_error_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_ERROR,  "Unit exhaustion in table %{public}@; moving database %{public}@ -> %{public}@",
        buf,
        0x20u);
    }

    id v25 = v11;
    BOOL v13 = -[FSNode getFileSystemRepresentation:error:](v5, "getFileSystemRepresentation:error:", buf, &v25);
    id v14 = v25;

    if (v13)
    {
      id v24 = v14;
      BOOL v15 = -[FSNode getFileSystemRepresentation:error:](v10, "getFileSystemRepresentation:error:", __new, &v24);
      uint64_t v16 = (char *)v24;

      if (v15)
      {
        if (!rename((const char *)buf, __new))
        {
          _LSDatabaseGetLog();
          id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v27 = 136446210;
            uint64_t v28 = __new;
            _os_log_impl(&dword_183E58000, v18, OS_LOG_TYPE_DEFAULT, "moved database to %{public}s", v27, 0xCu);
          }

          goto LABEL_12;
        }

        int v17 = *__error();
        _LSDatabaseGetLog();
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v27 = 67109120;
          LODWORD(v2_Block_object_dispose(va, 8) = v17;
          int v19 = "rename() failed: %{darwin.errno}d";
          int v20 = v18;
          uint32_t v21 = 8;
LABEL_11:
          _os_log_error_impl(&dword_183E58000, v20, OS_LOG_TYPE_ERROR, v19, v27, v21);
        }
      }

      else
      {
        _LSDatabaseGetLog();
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v27 = 138412290;
          uint64_t v28 = v16;
          int v19 = "couldn't get file system representation of database moved-aside path: %@";
          int v20 = v18;
          uint32_t v21 = 12;
          goto LABEL_11;
        }
      }

void sub_183EE78EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE7A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE7AB8(_Unwind_Exception *a1)
{
  id v3 = v2;
  operator delete(v3);

  _Unwind_Resume(a1);
}

void sub_183EE7B50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS____LSDatabase;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_183EE7C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseSetSequenceNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  _LSDatabaseGetHeader(v4);
  uint64_t v5 = a2;
  _LSDatabaseSetHeader(a1);
}

void _LSDatabaseSetHeader(uint64_t a1)
{
  if (a1)
  {
    if (!_CSStoreWriteToHeader())
    {
      _LSDatabaseGetLog();
      id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        _LSDatabaseSetHeader();
      }
    }
  }

void sub_183EE7E04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t _LSDatabaseSessionSetSeedingInProgress(char a1)
{
  LSSessionKey v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  id v3 = _LSGetSession(v2);
  v3[20] = v3[20] & 0xFE | a1;
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseSessionSetSeedingDueToManualRebuild(int a1)
{
  LSSessionKey v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  id v3 = _LSGetSession(v2);
  if (a1) {
    char v4 = 2;
  }
  else {
    char v4 = 0;
  }
  v3[20] = v3[20] & 0xFD | v4;
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseGetSessionKey(uint64_t a1)
{
  return *(void *)(a1 + 1648);
}

void LSDBHeader::GetCurrentBuildVersion(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  _LSGetCurrentSystemBuildVersionString();
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    id v6 = v3;
    uint64_t v4 = [v3 UTF8String];
    if (v4) {
      uint64_t v5 = (const char *)v4;
    }
    else {
      uint64_t v5 = "";
    }
    MEMORY[0x186E29CB4](a1, v5);
    id v3 = v6;
  }
}

void sub_183EE7F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EE8184( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LSDBHeader::GetCurrentModelCode(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  id v3 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:2];
  uint64_t v4 = (void *)MGCopyAnswer();
  if (v4) {
    [v3 addObject:v4];
  }

  uint64_t v5 = (void *)MGCopyAnswer();
  if (v5) {
    [v3 addObject:v5];
  }

  [v3 componentsJoinedByString:@"/"];
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6) {
    MEMORY[0x186E29CB4](a1, [v6 UTF8String]);
  }
}

void sub_183EE8298(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void _LSDatabaseSetHeaderFlag(_LSDatabase *a1, int a2, int a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a1;
  _LSDatabaseGetHeader(&v7);
  if (a3) {
    int v6 = v8 | a2;
  }
  else {
    int v6 = v8 & ~a2;
  }
  int v8 = v6;
  _LSDatabaseSetHeader((uint64_t)v5);
}

void sub_183EE83B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededSystemVersion()
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  _LSDatabaseGetHeader(&v9);
  v8[0] = v10;
  v8[1] = v11;
  uint64_t v0 = _LSVersionNumberGetStringRepresentation(v8);
  if (v0) {
    uint64_t v1 = (__CFString *)v0;
  }
  else {
    uint64_t v1 = @"?";
  }
  LSSessionKey v2 = (void *)NSString;
  *(void *)int __dst = 0LL;
  uint64_t v14 = 0LL;
  strlcpy(__dst, v12, 0x10uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, __dst);
  if (v7 >= 0) {
    id v3 = __p;
  }
  else {
    id v3 = (void **)__p[0];
  }
  [v2 stringWithFormat:@"%@ (%s)", v1, v3];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_183EE84C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id _LSDatabaseGetSeededModelCode()
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  _LSDatabaseGetHeader(v7);
  memset(__dst, 0, sizeof(__dst));
  strlcpy((char *)__dst, v8, 0x40uLL);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)__dst);
  unint64_t v0 = v6;
  unsigned __int8 v1 = v6;
  if ((v6 & 0x80u) != 0) {
    unint64_t v0 = (unint64_t)__p[1];
  }
  if (!v0)
  {
    MEMORY[0x186E29CB4](__p, "?");
    unsigned __int8 v1 = v6;
  }

  if ((v1 & 0x80u) == 0) {
    LSSessionKey v2 = __p;
  }
  else {
    LSSessionKey v2 = (void **)__p[0];
  }
  [NSString stringWithUTF8String:v2];
  id v3 = (void *)objc_claimAutoreleasedReturnValue();
  return v3;
}

void sub_183EE85DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *_LSDatabaseCreateWithAccessContext( void *a1, uint64_t a2, const void *a3, const void *a4, void *a5)
{
  location[20] = *(id *)MEMORY[0x1895F89C0];
  id v58 = a1;
  id v60 = 0LL;
  if (!a3)
  {
    uint64_t v65 = *MEMORY[0x189607490];
    int v66 = @"inStore";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v66 forKeys:&v65 count:1];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSDatabaseCreateWithAccessContext", 1386LL, v15);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    id v17 = v60;
    id v60 = v16;

    goto LABEL_53;
  }

  CFTypeRef cf = a4;
  uint64_t v10 = -[_LSDatabase _init](objc_alloc(&OBJC_CLASS____LSDatabase), "_init");
  __int128 v11 = (uint64_t *)v10;
  if (!v10)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -41LL, (uint64_t)"_LSDatabaseCreateWithAccessContext", 1381LL, 0LL);
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    id v19 = v60;
    id v60 = v18;

    goto LABEL_53;
  }

  objc_storeStrong(v10 + 205, a1);
  v11[206] = a2;
  if (![(id)__LSDefaultsGetSharedInstance() isServer])
  {
    CFTypeRef v20 = CFRetain(a3);
    v11[1] = (uint64_t)v20;
    goto LABEL_12;
  }

  MutableCFSetRef Copy = CSStoreCreateMutableCopy();
  v11[1] = MutableCopy;
  BOOL v13 = v11 + 1;
  if (!MutableCopy)
  {
    _LSDatabaseGetLog();
    uint32_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateWithAccessContext_cold_3();
    }

    __int128 v11 = 0LL;
    CFTypeRef v20 = (CFTypeRef)MEMORY[8];
LABEL_12:
    BOOL v13 = v11 + 1;
    uint64_t v14 = v11;
    if (!v20) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  uint64_t v14 = v11;
LABEL_13:
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    objc_initWeak(location, v14);
    objc_copyWeak(&v59, location);
    _CSStoreSetUnitIdentifierExhaustionHandler();
    objc_destroyWeak(&v59);
    objc_destroyWeak(location);
  }

LABEL_53:
  uint64_t v14 = 0LL;
  if (a5) {
    *a5 = v60;
  }
LABEL_55:

  return v14;
}
}

      id v17 = v51 + 1;
    }

    while (v51 + 1 != v46);
    uint64_t v15 = [obj countByEnumeratingWithState:&v68 objects:v76 count:16];
    uint64_t v4 = 0LL;
  }

  while (v15);
LABEL_62:

  uint64_t v14 = v48;
LABEL_63:

  uint64_t v10 = v52;
LABEL_64:

  id v3 = (os_log_s *)v59;
LABEL_65:

  return v4;
}

void sub_183EE8E38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id location)
{
  _Unwind_Resume(a1);
}

void sub_183EE8F6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *_LSDatabaseCreate(void *a1, uint64_t a2, const void *a3, void *a4)
{
  id v7 = a1;
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    _LSServer_DatabaseExecutionContext();
    int v8 = (void *)objc_claimAutoreleasedReturnValue();
    char v9 = (const void *)-[LSDBExecutionContext rawWriteAccessContextForDBInit]((uint64_t)v8);
  }

  else
  {
    char v9 = 0LL;
  }

  uint64_t v10 = _LSDatabaseCreateWithAccessContext(v7, a2, a3, v9, a4);

  return v10;
}

void sub_183EE900C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreateFromPersistentStore(char a1, _WORD *a2, void *a3)
{
  __int16 v23 = 0;
  unsigned __int8 v6 = (void *)MEMORY[0x186E2A59C]();
  [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  int v8 = _LSDatabaseRecoveryFileExists(v7);

  if (v8)
  {
    _LSDatabaseGetLog();
    char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStore_cold_3();
    }

    uint64_t v10 = 0LL;
    __int16 v23 = 4;
    if ((a1 & 4) == 0)
    {
LABEL_5:
      __int128 v11 = 0LL;
      id v12 = v10;
      goto LABEL_15;
    }
  }

  else
  {
    [(id)__LSDefaultsGetSharedInstance() dbRecoveryFileURL];
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    _LSDatabaseCreateRecoveryFile(v13);

    id v22 = 0LL;
    uint64_t v14 = _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(a1, 0, &v23, &v22);
    id v15 = v22;
    uint64_t v10 = v15;
    if (v14)
    {
      id v12 = v15;
      __int128 v11 = v14;
      goto LABEL_15;
    }

    _LSDatabaseGetLog();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStore_cold_2();
    }

    if ((a1 & 4) == 0) {
      goto LABEL_5;
    }
  }

  __int16 v21 = 0;
  id v20 = v10;
  __int128 v11 = _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(a1, 1, &v21, &v20);
  id v12 = v20;

  v23 |= v21;
  if (!v11)
  {
    _LSDatabaseGetLog();
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStore_cold_1();
    }
  }

void sub_183EE9244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseRecoveryFileExists(void *a1)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  uint64_t result = [a1 getFileSystemRepresentation:v2 maxLength:1024];
  if ((_DWORD)result) {
    return access(v2, 0) == 0;
  }
  return result;
}

void _LSDatabaseCreateRecoveryFile(void *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if ([a1 getFileSystemRepresentation:v14 maxLength:1024])
  {
    int v1 = open_dprotected_np(v14, 2561, 4, 0, 436LL);
    int v2 = v1;
    if (v1 < 0)
    {
      BOOL v7 = *__error() == 17;
      _LSDatabaseGetLog();
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v5 = v8;
      if (v7)
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          _LSDatabaseCreateRecoveryFile_cold_2();
        }
      }

      else if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        char v9 = __error();
        _LSDatabaseCreateRecoveryFile_cold_3((uint64_t)v14, v9, buf, v5);
      }
    }

    else
    {
      BOOL v3 = close(v1) == 0;
      _LSDatabaseGetLog();
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      uint64_t v5 = v4;
      if (v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136446466;
          __int128 v11 = "void _LSDatabaseCreateRecoveryFile(NSURL *__strong)";
          __int16 v12 = 2082;
          BOOL v13 = v14;
          _os_log_impl( &dword_183E58000,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}s: Successfully created recovery file %{public}s",  buf,  0x16u);
        }
      }

      else if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        unsigned __int8 v6 = __error();
        _LSDatabaseCreateRecoveryFile_cold_1(v6, buf, v2, v5);
      }
    }
  }

void sub_183EE9488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile(char a1, int a2, __int16 *a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v33 = 0LL;
  _LSGetStoreNode();
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  char v9 = v8;
  if (a2)
  {
    if ((a1 & 4) == 0)
    {
      _LSDatabaseGetLog();
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
      }

      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile",  1917LL,  0LL);
      __int16 v11 = 64;
      char v12 = 1;
      BOOL v13 = 0LL;
      uint64_t v14 = 0LL;
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      if (!a4)
      {
LABEL_45:
        id v17 = v15;
        if (!a3) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }

      goto LABEL_42;
    }

    id v32 = 0LL;
    uint64_t v14 = _LSCreateEmptyStore(&v32);
    id v15 = v32;
    if (v14)
    {
      __int16 v11 = 1;
      goto LABEL_11;
    }

    _LSDatabaseGetLog();
    __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
    }

    BOOL v13 = 0LL;
    uint64_t v14 = 0LL;
    __int16 v11 = 64;
LABEL_41:
    char v12 = 1;
    if (!a4) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }

  id v31 = 0LL;
  uint64_t v14 = (const void *)_LSCreateStoreWithFileContents(v8, &v31);
  id v15 = v31;
  if (!v14)
  {
    _LSDatabaseGetLog();
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
    }

    if (_LSGetOSStatusFromNSError(v15) == -43)
    {
      BOOL v13 = 0LL;
      uint64_t v14 = 0LL;
      __int16 v11 = 8;
      goto LABEL_41;
    }

    id v15 = v15;
    [v15 domain];
    id v22 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = *MEMORY[0x189607670];
    if ([v22 isEqualToString:*MEMORY[0x189607670]])
    {
      if ([v15 code] == -9496)
      {

LABEL_40:
        BOOL v13 = 0LL;
        uint64_t v14 = 0LL;
        __int16 v11 = 16;
        goto LABEL_41;
      }

      BOOL v26 = [v15 code] == -9489;

      if (v26) {
        goto LABEL_40;
      }
    }

    else
    {
    }

    id v15 = v15;
    [v15 domain];
    BOOL v24 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v24 isEqualToString:v23])
    {
      BOOL v25 = [v15 code] == -9493;

      BOOL v13 = 0LL;
      uint64_t v14 = 0LL;
      if (v25) {
        __int16 v11 = 128;
      }
      else {
        __int16 v11 = 256;
      }
    }

    else
    {

      BOOL v13 = 0LL;
      uint64_t v14 = 0LL;
      __int16 v11 = 256;
    }

    goto LABEL_41;
  }

  __int16 v11 = 0;
LABEL_11:
  uint64_t v16 = _LSServer_SelfSessionKey();
  id v30 = v15;
  BOOL v13 = _LSDatabaseCreate(v9, v16, v14, &v30);
  id v17 = v30;

  id v33 = v13;
  if (v13)
  {
    if ((a1 & 2) == 0)
    {
      char v12 = 0;
      if (!a3) {
        goto LABEL_47;
      }
LABEL_46:
      *a3 = v11;
      goto LABEL_47;
    }

    _LSDatabaseGetLog();
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 138543362;
      BOOL v35 = v13;
      _os_log_impl(&dword_183E58000, v20, OS_LOG_TYPE_INFO, "Cleaning new database object %{public}@", buf, 0xCu);
    }

    _LSDatabaseClean((id *)&v33);
    char v12 = 0;
    BOOL v13 = v33;
  }

  else
  {
    _LSDatabaseGetLog();
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateFromPersistentStoreIgnoringRecoveryFile();
    }

    BOOL v13 = 0LL;
    char v12 = 0;
    v11 |= 0x20u;
  }

  id v15 = v17;
  if (!a4) {
    goto LABEL_45;
  }
LABEL_42:
  if (v13) {
    goto LABEL_45;
  }
  id v17 = v15;
  BOOL v13 = 0LL;
  *a4 = v17;
  if (a3) {
    goto LABEL_46;
  }
LABEL_47:
  uint64_t v27 = v13;
  unsigned int v28 = v27;
  if ((v12 & 1) == 0)
  {
    CFRelease(v14);
    unsigned int v28 = v33;
  }

  return v27;
}

void sub_183EE98BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseDeleteRecoveryFile(void *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  if ([v1 getFileSystemRepresentation:v6 maxLength:1024])
  {
    if (remove(v6) && *__error() != 2)
    {
      _LSDatabaseGetLog();
      int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      {
        BOOL v3 = __error();
        _LSDatabaseDeleteRecoveryFile_cold_1((uint64_t)v6, v3, (uint8_t *)&v4, v2);
      }
    }

    else
    {
      _LSDatabaseGetLog();
      int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 136446210;
        uint64_t v5 = v6;
        _os_log_impl( &dword_183E58000,  v2,  OS_LOG_TYPE_DEFAULT,  "Successfully removed recovery file %{public}s",  (uint8_t *)&v4,  0xCu);
      }
    }
  }
}

void sub_183EE9A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *_LSDatabaseCreateSystemContentDatabaseFromPersistentStore(void *a1)
{
  int v2 = objc_alloc(&OBJC_CLASS___FSNode);
  [(id)__LSDefaultsGetSharedInstance() systemContentDatabaseStoreFileURL];
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue();
  int v4 = -[FSNode initWithURL:flags:error:](v2, "initWithURL:flags:error:", v3, 0LL, a1);

  if (v4 && (uint64_t v5 = (const void *)_LSCreateStoreWithFileContents(v4, a1)) != 0LL)
  {
    uint64_t v6 = _LSServer_SelfSessionKey();
    uint64_t v7 = _LSDatabaseCreateWithAccessContext(v4, v6, v5, 0LL, a1);
    CFRelease(v5);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

void sub_183EE9B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCreateStoreWithFileContents(void *a1, void *a2)
{
  id v3 = a1;
  int v4 = v3;
  id v9 = 0LL;
  if (!v3)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSCreateStoreWithFileContents", 555LL, 0LL);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!a2)
    {
LABEL_6:
      uint64_t v6 = 0LL;
      goto LABEL_9;
    }

void sub_183EE9C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

_BYTE *_LSDatabaseCreateCleanForTesting(void *a1)
{
  uint64_t result = _LSCreateEmptyStore(a1);
  if (result)
  {
    id v3 = result;
    unsigned int v4 = _CFGetEUID();
    uint64_t v5 = _LSDatabaseCreate(0LL, v4, v3, a1);
    uint64_t v6 = v5;
    CFRelease(v3);
    if (v5)
    {
      *((_BYTE *)v5 + 1664) |= 2u;
      _LSDatabaseClean((id *)&v6);
      uint64_t result = v6;
      *((_BYTE *)v6 + 1664) |= 2u;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sub_183EE9CFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

CFTypeRef _LSCreateEmptyStore(void *a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  id v15 = 0LL;
  CFMutableSetRef Mutable = (const void *)CSStoreCreateMutable();
  if (!Mutable)
  {
    CFTypeRef v11 = 0LL;
    if (!a1) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }

  memset(v20, 0, sizeof(v20));
  if (_CSStoreAddTable())
  {
    LSDBHeader::reset((LSDBHeader *)v20);
    if (_CSStoreWriteToHeader())
    {
      uint64_t v3 = 0LL;
      while (_CSStoreAddTable())
      {
        v3 += 16LL;
        if (v3 == 192)
        {
          int v4 = CSBindableKeyMapAddTable();
          if (v4)
          {
            _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v4, (uint64_t)"_LSCreateEmptyStore", 595LL, 0LL);
            char v12 = 0LL;
            id v15 = (id)objc_claimAutoreleasedReturnValue();
          }

          else
          {
            for (uint64_t i = 0LL; i != 448; i += 32LL)
            {
              uint64_t v6 = *(void *)((char *)&kLSBindingInfo + i);
              int v7 = CSStringBindingStoreAddTable();
              if (v7)
              {
                id v18 = @"Table";
                uint64_t v19 = v6;
                [MEMORY[0x189603F68] dictionaryWithObjects:&v19 forKeys:&v18 count:1];
                char v12 = (void *)objc_claimAutoreleasedReturnValue();
                _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], v7, (uint64_t)"_LSCreateEmptyStore", 601LL, v12);
                id v15 = (id)objc_claimAutoreleasedReturnValue();

                goto LABEL_20;
              }
            }

            int v8 = (const char **)&off_189D74FA0;
            unint64_t v9 = -6LL;
            while (1)
            {
              if (v9 >= 8)
              {
                uint64_t v10 = *v8;
                strlen(*v8);
              }

              v8 += 4;
              if (++v9 == 8)
              {
                CFTypeRef v11 = CFRetain(Mutable);
                goto LABEL_22;
              }
            }

            uint64_t v16 = @"BindingClass";
            [NSString stringWithUTF8String:v10];
            char v12 = (void *)objc_claimAutoreleasedReturnValue();
            id v17 = v12;
            [MEMORY[0x189603F68] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
            BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
            _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10817LL, (uint64_t)"_LSCreateEmptyStore", 609LL, v13);
            id v15 = (id)objc_claimAutoreleasedReturnValue();
          }

void sub_183EEA024( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  CFRelease(v10);
  _Unwind_Resume(a1);
}

void _LSDatabaseClean(id *a1)
{
  uint64_t v65 = *MEMORY[0x1895F89C0];
  kdebug_trace();
  id location = a1;
  id v49 = *a1;
  uint64_t v44 = MEMORY[0x1895F87A8];
  uint64_t v45 = 3321888768LL;
  uint64_t v46 = ___ZL16_LSDatabaseCleanPU8__strongP11_LSDatabase_block_invoke;
  BOOL v47 = &__block_descriptor_40_ea8_32c14_ZTS9LSContext_e19_v32__0I8r_v12I20_24l;
  id v48 = v49;
  _CSStoreEnumerateUnits();
  _LSDatabaseGetLog();
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl(&dword_183E58000, v2, OS_LOG_TYPE_DEFAULT, "Registering CoreTypes bundle", buf, 2u);
  }

  __int16 v55 = @"ApplicationType";
  uint64_t v56 = @"Hidden";
  [MEMORY[0x189603F68] dictionaryWithObjects:&v56 forKeys:&v55 count:1];
  uint64_t v36 = (FSNode *)objc_claimAutoreleasedReturnValue();
  int v3 = -[_LSDatabase isSeeded]((uint64_t)v49);
  int v4 = -[FSNode initWithFileSystemRepresentation:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithFileSystemRepresentation:flags:error:",  "/System/Library/CoreServices/MobileCoreTypes.bundle",  0LL,  0LL);
  if (v4 && _LSFindOrRegisterBundleNode((LSContext *)&v49, v4, 0LL, v3 ^ 1 | 0x11000000u, v36, 0LL, 0LL))
  {
    _LSDatabaseGetLog();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseClean();
    }
  }

  _LSDatabaseGetLog();
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl(&dword_183E58000, v6, OS_LOG_TYPE_DEFAULT, "Registering extension points", buf, 2u);
  }

  [(id)getEXEnumeratorClass() extensionPointDefinitionEnumerator];
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = [obj countByEnumeratingWithState:&v40 objects:v54 count:16];
  if (v7)
  {
    uint64_t v38 = *(void *)v41;
    do
    {
      for (uint64_t i = 0LL; i != v7; ++i)
      {
        if (*(void *)v41 != v38) {
          objc_enumerationMutation(obj);
        }
        unint64_t v9 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        [v9 identifier];
        uint64_t v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v11 = [v9 platform];
        [v9 SDKDictionary];
        char v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        [v9 url];
        BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
        uint64_t v14 = objc_alloc(&OBJC_CLASS___FSNode);
        id v39 = 0LL;
        id v15 = -[FSNode initWithURL:flags:error:](v14, "initWithURL:flags:error:", v13, 8LL, &v39);
        id v16 = v39;
        if (!v15)
        {
          _LSDatabaseGetLog();
          id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138543618;
            *(void *)&uint8_t buf[4] = v13;
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v16;
            _os_log_error_impl( &dword_183E58000,  v17,  OS_LOG_TYPE_ERROR,  "Failed to create node for framework %{public}@: %{public}@",  buf,  0x16u);
          }
        }

        _LSExtensionsLog();
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315394;
          *(void *)&uint8_t buf[4] = "void _LSDatabaseClean(LSDatabaseHandle)";
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v9;
          _os_log_debug_impl( &dword_183E58000,  v18,  OS_LOG_TYPE_DEBUG,  "%s Registering extension point '%@'",  buf,  0x16u);
        }

        if (([(id)__LSDefaultsGetSharedInstance() isServer] & 1) != 0
          || -[FSNode canReadFromSandboxWithAuditToken:](v15, "canReadFromSandboxWithAuditToken:", 0LL))
        {
          [NSString stringWithFormat:@"registering extension point %@ at URL %@", v10, v13, location];
          uint64_t v19 = (NSString *)objc_claimAutoreleasedReturnValue();
          LSCrashMessage::LSCrashMessage((LSCrashMessage *)&v50, v19);

          int v20 = _LSRegisterFrameworkExtensionPointIfNecessary(v49, 0, v10, v11, v12, v13);
          if (v20)
          {
            _LSDatabaseGetLog();
            uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 134218242;
              *(void *)&uint8_t buf[4] = v20;
              *(_WORD *)&_BYTE buf[12] = 2114;
              *(void *)&buf[14] = v13;
              _os_log_error_impl( &dword_183E58000,  v21,  OS_LOG_TYPE_ERROR,  "Error %ld registering extension points inside framework %{public}@",  buf,  0x16u);
            }
          }

          LSCrashMessage::~LSCrashMessage((LSCrashMessage *)&v50);
        }
      }

      uint64_t v7 = [obj countByEnumeratingWithState:&v40 objects:v54 count:16];
    }

    while (v7);
  }

  _LSDatabaseGetLog();
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl(&dword_183E58000, v22, OS_LOG_TYPE_DEFAULT, "Done reregistering extension points", buf, 2u);
  }

  _LSDatabaseGetLog();
  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl(&dword_183E58000, v23, OS_LOG_TYPE_DEFAULT, "Registering canonical names", buf, 2u);
  }

  id v24 = v49;
  _LSDatabaseGetLog();
  BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl(&dword_183E58000, v25, OS_LOG_TYPE_DEFAULT, "Registering canonical names", buf, 2u);
  }

  BOOL v26 = (void *)MEMORY[0x186E2A59C]();
  _LSDatabaseGetLog();
  uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl(&dword_183E58000, v27, OS_LOG_TYPE_DEFAULT, "Registering framework bundle localized strings", buf, 2u);
  }

  id v28 = +[_LSStringLocalizer newFrameworkBundleLocalizer]( &OBJC_CLASS____LSStringLocalizer,  "newFrameworkBundleLocalizer");
  id v29 = v24;
  id v30 = v28;
  uint64_t v50 = 0LL;
  uint64_t v51 = &v50;
  uint64_t v52 = 0x2020000000LL;
  uint64_t v53 = 0LL;
  *(void *)__int128 buf = MEMORY[0x1895F87A8];
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&uint8_t buf[16] = ___ZL52_LSDatabaseRegisterCanonicalNamesFromStringLocalizerP11_LSDatabaseP18_LSStringLocalizer_block_invoke;
  id v62 = &unk_189D75448;
  id v31 = v29;
  id v63 = v31;
  id v64 = &v50;
  [v30 enumerateLocalizedStringsUsingBlock:buf];
  if (v51[3])
  {
    _LSDatabaseGetLog();
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = v51[3];
      [v30 debugDescription];
      int v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)uint64_t v57 = 134218242;
      uint64_t v58 = v33;
      __int16 v59 = 2114;
      id v60 = v34;
      _os_log_impl( &dword_183E58000,  v32,  OS_LOG_TYPE_DEFAULT,  "Registered %llu new canonical strings from string localizer %{public}@",  v57,  0x16u);
    }
  }

  _Block_object_dispose(&v50, 8);
  objc_autoreleasePoolPop(v26);

  if (([(id)__LSDefaultsGetSharedInstance() hasServer] & 1) == 0
    && ([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0)
  {
    -[_LSDatabase setSeeded:]((uint64_t)v49, 1);
  }

  objc_storeStrong(location, v49);
  kdebug_trace();
}

void sub_183EEA87C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, void *a36, char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void _LSDatabaseCommit(uint64_t a1)
{
  id v1 = (LaunchServices::notifyd::NotifyToken *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseGetLog();
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _LSDatabaseCommit_cold_1();
  }

  LaunchServices::notifyd::NotifyToken::Post(v1, v3);
}

void sub_183EEAA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

time_t LSDBHeader::reset(LSDBHeader *this)
{
  *(_DWORD *)this = [(id)__LSDefaultsGetSharedInstance() currentSchemaVersion];
  *((_DWORD *)this + 1) = 160;
  *(_OWORD *)((char *)this + _Block_object_dispose(va, 8) = kLSVersionNumberNull;
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)algn_183FBF5B0;
  *((void *)this + 5) = 0LL;
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((void *)this + 6) = 0LL;
  *((void *)this + 7) = 0LL;
  if (v6 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  strlcpy((char *)this + 48, (const char *)v2, 0x10uLL);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "");
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 5) = 0u;
  if (v6 >= 0) {
    int v3 = __p;
  }
  else {
    int v3 = (void **)__p[0];
  }
  strlcpy((char *)this + 64, (const char *)v3, 0x40uLL);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 16) = 0LL;
  uuid_generate_random((unsigned __int8 *)this + 136);
  time_t result = time(0LL);
  *((void *)this + 19) = result;
  return result;
}

void sub_183EEAB88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL _LSDatabaseSaveSystemContentDatabase(void *a1, void *a2)
{
  id v3 = a1;
  int v4 = (void *)MEMORY[0x186E2A59C]();
  v22[0] = 0LL;
  id SnapshotAgainstAccessContext = _LSDatabaseCreateSnapshotAgainstAccessContext(v3, 0LL, v22);
  id v6 = v22[0];
  uint64_t v7 = v6;
  if (SnapshotAgainstAccessContext)
  {
    id v20 = v3;
    uint64_t v21 = v6;
    uint64_t v19 = a2;
    id v8 = SnapshotAgainstAccessContext;
    uint64_t v42 = 0LL;
    __int128 v43 = &v42;
    uint64_t v44 = 0x4812000000LL;
    uint64_t v45 = __Block_byref_object_copy__12;
    uint64_t v46 = __Block_byref_object_dispose__12;
    BOOL v47 = "";
    id v48 = 0LL;
    id v49 = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v33 = 0LL;
    int v34 = &v33;
    uint64_t v35 = 0x4812000000LL;
    uint64_t v36 = __Block_byref_object_copy__12;
    unint64_t v37 = __Block_byref_object_dispose__12;
    uint64_t v38 = "";
    std::stringbuf::string_type __p = 0LL;
    __int128 v40 = 0LL;
    uint64_t v41 = 0LL;
    unint64_t v9 = (void *)MEMORY[0x1895F87A8];
    uint64_t v26 = MEMORY[0x1895F87A8];
    uint64_t v27 = 3221225472LL;
    id v28 = ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke;
    id v29 = &unk_189D75470;
    id v31 = &v42;
    id v10 = v8;
    id v30 = v10;
    id v32 = &v33;
    _CSStoreEnumerateUnits();
    v22[1] = v9;
    v22[2] = (id)3221225472LL;
    v22[3] = ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke_2;
    v22[4] = &unk_189D75470;
    id v24 = &v42;
    uint64_t v11 = (_LSDatabase *)v10;
    uint64_t v23 = v11;
    BOOL v25 = &v33;
    _CSStoreEnumerateUnits();
    char v12 = (int *)v43[6];
    uint64_t v14 = (int *)v34[6];
    id v15 = (int *)v34[7];
    while (v14 != v15)
      _LSPlistRemove((uint64_t)v11, *v14++);

    _Block_object_dispose(&v33, 8);
    if (__p)
    {
      __int128 v40 = __p;
      operator delete(__p);
    }

    _Block_object_dispose(&v42, 8);
    a2 = v19;
    if (v48)
    {
      id v49 = v48;
      operator delete(v48);
    }

    -[_LSDatabase setSeeded:]((uint64_t)v11, 1);
    _LSDatabaseSetHeaderFlag(v11, 2, 0);
    [(id)__LSDefaultsGetSharedInstance() systemContentDatabaseStoreFileURL];
    _LSDatabaseGetFileResourceProperties();
    BOOL v16 = _CSStoreWriteToURL() != 0;

    uint64_t v7 = 0LL;
    id v3 = v20;
  }

  else
  {
    BOOL v16 = 0LL;
  }

  objc_autoreleasePoolPop(v4);
  if (a2) {
    char v17 = v16;
  }
  else {
    char v17 = 1;
  }
  if ((v17 & 1) == 0) {
    *a2 = v7;
  }

  return v16;
}

void sub_183EEAE78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35)
{
  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }

  _Block_object_dispose((const void *)(v36 - 176), 8);
  uint64_t v38 = *(void **)(v36 - 128);
  if (v38)
  {
    *(void *)(v36 - 120) = v38;
    operator delete(v38);
  }

  _Unwind_Resume(a1);
}

id _LSDatabaseGetFileResourceProperties(void)
{
  unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (v0)
  {
    id v1 = CFFileSecurityCreate((CFAllocatorRef)*MEMORY[0x189604DB0]);
    if (v1)
    {
      mode_t v2 = [(id)__LSDefaultsGetSharedInstance() databaseStoreFileMode];
      CFFileSecuritySetMode(v1, v2);
      [v0 setObject:v1 forKeyedSubscript:*MEMORY[0x189603C10]];
      CFRelease(v1);
    }

    [v0 setObject:*MEMORY[0x189603BD8] forKeyedSubscript:*MEMORY[0x189603BD0]];
  }

  return v0;
}

void sub_183EEAFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseFindBindingMapIndex(uint64_t a1, int a2)
{
  uint64_t result = 0LL;
  int v4 = (int *)(a1 + 232);
  while (1)
  {
    int v5 = *v4;
    v4 += 26;
    if (v5 == a2) {
      break;
    }
    if (++result == 14) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t _LSDatabaseFindBindingMapIndexWithTargetTable(uint64_t a1, int a2)
{
  uint64_t result = 0LL;
  int v4 = (int *)(a1 + 136);
  while (1)
  {
    int v5 = *v4;
    v4 += 26;
    if (v5 == a2) {
      break;
    }
    if (++result == 14) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t _LSDatabaseFindBindingMapTargetTable(void *a1, int a2)
{
  id v3 = a1;
  else {
    uint64_t v4 = *(unsigned int *)&v3[*((void *)&kLSBindingInfo + 4 * a2 + 3) + 16];
  }

  return v4;
}

__CFString *_LSDatabaseGetBindingMapDebugName(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xD)
  {
    mode_t v2 = @"unknown";
  }

  else
  {
    mode_t v2 = (__CFString *)*((id *)&kLSBindingInfo + 4 * a2);
    if (-[__CFString hasSuffix:](v2, "hasSuffix:", @"Binding"))
    {
      uint64_t v3 = -[__CFString substringToIndex:]( v2,  "substringToIndex:",  -[__CFString length](v2, "length") - [@"Binding" length]);

      mode_t v2 = (__CFString *)v3;
    }
  }

  return v2;
}

void sub_183EEB130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringForCFString(void *a1, const __CFString *a2, int a3)
{
  v10[20] = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!a2 || (CFTypeID v6 = CFGetTypeID(a2), v6 != CFStringGetTypeID()))
  {
    XCFBufInit((uint64_t)v10);
    goto LABEL_6;
  }

  CFIndex Length = CFStringGetLength(a2);
  if (!XCFBufInitWithCFStringRange((uint64_t)v10, a2, 0LL, Length, a3))
  {
LABEL_6:
    uint64_t v8 = 0LL;
    goto LABEL_7;
  }

  uint64_t v8 = _CSCopyStringForCharacters();
  XCFBufDestroy((uint64_t)v10);
LABEL_7:

  return v8;
}

void sub_183EEB218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseGetNSStringFromArray(void *a1)
{
  id v1 = a1;
  _CSArrayGetValueAtIndex();
  mode_t v2 = (void *)_CSStringCopyCFString();

  return v2;
}

void sub_183EEB288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArray(void *a1, void *a2, int a3, _BYTE *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t StringArrayCommon = _LSDatabaseCreateStringArrayCommon(v7, v8, [v8 count], 0, a3, a4);

  return StringArrayCommon;
}

void sub_183EEB304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArrayCommon( void *a1, void *a2, std::vector<unsigned int>::size_type a3, int a4, int a5, _BYTE *a6)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  id v47 = a1;
  id v45 = a2;
  if (a6) {
    *a6 = 0;
  }
  memset(&v54, 0, sizeof(v54));
  std::vector<unsigned int>::reserve(&v54, a3);
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  id v10 = v45;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v50 objects:v59 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v51;
    do
    {
      for (uint64_t i = 0LL; i != v11; ++i)
      {
        if (*(void *)v51 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(const __CFString **)(*((void *)&v50 + 1) + 8 * i);
        if (v14) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = a4 == 0;
        }
        if (v15)
        {
          if (!_NSIsNSString())
          {
            if (a6) {
              *a6 = 1;
            }
            _LSDatabaseGetLog();
            id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              __int128 v40 = (objc_class *)objc_opt_class();
              NSStringFromClass(v40);
              uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)__int128 buf = 138478083;
              int64_t v56 = (int64_t)v14;
              __int16 v57 = 2114;
              uint64_t v58 = v41;
              _os_log_debug_impl( &dword_183E58000,  v28,  OS_LOG_TYPE_DEBUG,  "Expected %{private}@ to be a string, but instead it was a %{public}@",  buf,  0x16u);
            }

            goto LABEL_31;
          }

          unsigned int StringForCFString = _LSDatabaseCreateStringForCFString(v47, v14, a5);
          unsigned int v17 = StringForCFString;
          if (!StringForCFString)
          {
            if (a6) {
              *a6 = 1;
            }
            _LSDatabaseGetLog();
            id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138477827;
              int64_t v56 = (int64_t)v14;
              _os_log_error_impl( &dword_183E58000,  v28,  OS_LOG_TYPE_ERROR,  "Could not create a CSString for CFString %{private}@",  buf,  0xCu);
            }

LABEL_31:
            continue;
          }

          std::vector<unsigned int>::pointer end = v54.__end_;
          if (v54.__end_ >= v54.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer begin = v54.__begin_;
            int64_t v33 = v54.__end_ - v54.__begin_;
            unint64_t v34 = v33 + 1;
            int64_t v35 = (char *)v54.__end_cap_.__value_ - (char *)v54.__begin_;
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              unint64_t v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>( (uint64_t)&v54.__end_cap_,  v36);
              std::vector<unsigned int>::pointer begin = v54.__begin_;
              std::vector<unsigned int>::pointer end = v54.__end_;
            }

            else
            {
              unint64_t v37 = 0LL;
            }

            uint64_t v38 = (unsigned int *)&v37[4 * v33];
            *uint64_t v38 = v17;
            uint64_t v19 = v38 + 1;
            while (end != begin)
            {
              unsigned int v39 = *--end;
              *--uint64_t v38 = v39;
            }

            v54.__begin_ = v38;
            v54.__end_ = v19;
            v54.__end_cap_.__value_ = (unsigned int *)&v37[4 * v36];
            if (begin) {
              operator delete(begin);
            }
          }

          else
          {
            *v54.__end_ = StringForCFString;
            uint64_t v19 = end + 1;
          }

          v54.__end_ = v19;
        }

        else
        {
          std::vector<unsigned int>::pointer v20 = v54.__end_;
          if (v54.__end_ >= v54.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer v22 = v54.__begin_;
            int64_t v23 = v54.__end_ - v54.__begin_;
            unint64_t v24 = v23 + 1;
            int64_t v25 = (char *)v54.__end_cap_.__value_ - (char *)v54.__begin_;
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              uint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>( (uint64_t)&v54.__end_cap_,  v26);
              std::vector<unsigned int>::pointer v22 = v54.__begin_;
              std::vector<unsigned int>::pointer v20 = v54.__end_;
            }

            else
            {
              uint64_t v27 = 0LL;
            }

            id v29 = (unsigned int *)&v27[4 * v23];
            *id v29 = 0;
            uint64_t v21 = v29 + 1;
            while (v20 != v22)
            {
              unsigned int v30 = *--v20;
              *--id v29 = v30;
            }

            v54.__begin_ = v29;
            v54.__end_ = v21;
            v54.__end_cap_.__value_ = (unsigned int *)&v27[4 * v26];
            if (v22) {
              operator delete(v22);
            }
          }

          else
          {
            *v54.__end_ = 0;
            uint64_t v21 = v20 + 1;
          }

          v54.__end_ = v21;
          _LSDatabaseGetLog();
          id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            _LSDatabaseCreateStringArrayCommon(&v48, v49, v31);
          }
        }
      }

      uint64_t v11 = [v10 countByEnumeratingWithState:&v50 objects:v59 count:16];
    }

    while (v11);
  }

  uint64_t v42 = _CSArrayCreate();
  if (!(_DWORD)v42)
  {
    _LSDatabaseGetLog();
    __int128 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 134218242;
      int64_t v56 = v54.__end_ - v54.__begin_;
      __int16 v57 = 2114;
      uint64_t v58 = 0LL;
      _os_log_error_impl( &dword_183E58000,  v43,  OS_LOG_TYPE_ERROR,  "Failed to create CSArray with %zu elements: %{public}@",  buf,  0x16u);
    }
  }

  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }

  return v42;
}

  if (a3)
  {
    id v31 = *MEMORY[0x189607490];
    id v32 = @"LSDatabaseContext cannot take a user ID while the database is already being accessed.";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    int64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  56LL,  (uint64_t)"_LSDatabaseContextStartAccessingWithDomain",  175LL,  v23);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

  return 0LL;
}

        DWORD1(v37[0]) = CSStoreGetGeneration() + 1;
        _CSStoreWriteToUnit();
      }
    }
  }
}

  objc_autoreleasePoolPop(v13);
  return v24;
}

void sub_183EEB7E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *__p, uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseCreateStringArrayWithNullValues(void *a1, void *a2, int a3, _BYTE *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t StringArrayCommon = _LSDatabaseCreateStringArrayCommon(v7, v8, [v8 count], 1, a3, a4);

  return StringArrayCommon;
}

void sub_183EEB8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseDisposeStringArray(void *a1, int a2)
{
  id v3 = a1;
  if (a2)
  {
    id v4 = v3;
    id v5 = v3;
    _CSArrayEnumerateAllValues();
    _CSArrayDispose();

    id v3 = v4;
  }
}

void sub_183EEB980( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id _LSDatabaseCreateSnapshot(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (v3) {
    uint64_t v5 = v3[207];
  }
  else {
    uint64_t v5 = 0LL;
  }
  id SnapshotAgainstAccessContext = _LSDatabaseCreateSnapshotAgainstAccessContext(v3, v5, a2);

  return SnapshotAgainstAccessContext;
}

void sub_183EEB9F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseSetMutable()
{
  return _CSStoreSetMutable();
}

uint64_t _LSDatabaseIsMutable()
{
  return _CSStoreIsMutable();
}

uint64_t _LSServer_CopyLocalDatabase(void *a1)
{
  mode_t v2 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  id v3 = v2;
  if (v2)
  {
    -[LSDBExecutionContext assertActiveForThisThread](v2);
    uint64_t v4 = -[LSDBExecutionContext getPerThreadDatabaseWithError:](v3, a1);
  }

  else
  {
    unint64_t v5 = _LSServer_SelfSessionKey();
    uint64_t v4 = (uint64_t)_LSCopyLocalDatabase(v5, a1);
  }

  uint64_t v6 = v4;

  return v6;
}

void sub_183EEBA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *availabilityStateForServiceDomain(_LSDServiceDomain *a1)
{
  id v1 = a1;
  if (availabilityStateForServiceDomain(_LSDServiceDomain *)::onceToken != -1) {
    dispatch_once(&availabilityStateForServiceDomain(_LSDServiceDomain *)::onceToken, &__block_literal_global_18);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);
  uint64_t v2 = availabilityStateForServiceDomain(_LSDServiceDomain *)::sessionQuickAvailabilityMap;
  uint64_t v5 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v1);
  uint64_t v6 = &v5;
  id v3 = std::__hash_table<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey&&>,std::tuple<>>( v2,  (unsigned int *)&v5,  (uint64_t)&std::piecewise_construct,  &v6)
     + 3;
  os_unfair_lock_unlock((os_unfair_lock_t)&availabilityStateForServiceDomain(_LSDServiceDomain *)::m);

  return v3;
}

void sub_183EEBB38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___Z33availabilityStateForServiceDomainP17_LSDServiceDomain_block_invoke()
{
  unint64_t v0 = operator new(0x28uLL);
  double result = 0.0;
  *unint64_t v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + _Block_object_dispose(va, 8) = 1065353216;
  availabilityStateForServiceDomain(_LSDServiceDomain *)::sessionQuickAvailabilityMap = (uint64_t)v0;
  return result;
}

unsigned __int8 *LSResetDatabaseKnownAvailable(_LSDServiceDomain *a1)
{
  double result = (unsigned __int8 *)availabilityStateForServiceDomain(a1);
  atomic_store(0, result);
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_INSECURE_SPI__()
{
  uint64_t result = _LSCurrentProcessMayMapDatabase();
  if ((_DWORD)result) {
    return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__("forbidden-ls-deprecated-symbol");
  }
  return result;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION__(const char *a1)
{
  uint64_t result = [(id)__LSDefaultsGetSharedInstance() issueSandboxExceptionsIfMayNotMapDatabase];
  if ((_DWORD)result)
  {
    _LSGetAuditTokenForSelf();
    return sandbox_check_by_audit_token();
  }

  return result;
}

void __LAUNCH_SERVICES_IS_FAULTING_BECAUSE_THIS_PROCESS_IS_USING_VERY_EXPENSIVE_SPI__()
{
  unint64_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)id v1 = 0;
    _os_log_fault_impl( &dword_183E58000,  v0,  OS_LOG_TYPE_FAULT,  "This process is not entitled to map the LS database. It is using SPI that is very expensive, causing many megabyte s of memory to be dirtied in both the client (this process) and the database server. This will become a hard abort soon.",  v1,  2u);
  }
}

uint64_t _LSContextInitReturningError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t inited = _LSContextInitCommon(a1, v4, 0LL, a2);

  return inited;
}

void sub_183EEBCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSContextIsCurrentThreadInitializing()
{
  return *(_DWORD *)getIsCurrentThreadInLSContextInitReference() != 0;
}

void _LSContextInvalidate()
{
  void v4[3] = *MEMORY[0x1895F89C0];
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    _LSDatabaseGetLog();
    unint64_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
      _LSContextInvalidate_cold_1();
    }
  }

  else
  {
    unint64_t v1 = _CFGetEUID();
    LSSessionKey v2 = (LSSessionKey)v1;
    _LSReleaseLocalDatabase(v2);
    _LSDatabaseGetLog();
    unint64_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      id v3 = (void *)_LSSessionKeyCopyDescription(v1);
      _LSContextInvalidate_cold_2(v3, (uint64_t)v4, v0);
    }
  }
}

void sub_183EEBDBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSContextInitWithPath(id *a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSContextInitWithPath(LSContext *, const char *, NSError *__autoreleasing *)");
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v12 handleFailureInFunction:v13, @"LSDatabase.mm", 3321, @"Invalid parameter not satisfying: %@", @"ioContext != NULL" file lineNumber description];

    if (a2) {
      goto LABEL_3;
    }
LABEL_11:
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSContextInitWithPath(LSContext *, const char *, NSError *__autoreleasing *)");
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue();
    [v14 handleFailureInFunction:v15, @"LSDatabase.mm", 3322, @"Invalid parameter not satisfying: %@", @"inPath != NULL" file lineNumber description];

    goto LABEL_3;
  }

  if (!a2) {
    goto LABEL_11;
  }
LABEL_3:
  *a1 = 0LL;
  uint64_t v6 = -[FSNode initWithFileSystemRepresentation:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithFileSystemRepresentation:flags:error:",  a2,  0LL,  a3);
  id v7 = v6;
  if (v6 && (id v8 = (const void *)_LSCreateStoreWithFileContents(v6, a3)) != 0LL)
  {
    unint64_t v9 = _LSDatabaseCreate(v7, 4294967294LL, v8, a3);
    BOOL v10 = v9 != 0LL;
    if (v9) {
      objc_storeStrong(a1, v9);
    }

    CFRelease(v8);
  }

  else
  {
    BOOL v10 = 0LL;
  }

  return v10;
}

void sub_183EEBF70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSContextUpdate(void **a1, int a2, uint64_t a3)
{
  if (a2
    && ([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0
    && [(id)__LSDefaultsGetSharedInstance() hasServer])
  {
    if (a1 && *a1)
    {
      LSSessionKey v5 = (LSSessionKey)*((void *)*a1 + 206);
      _LSReleaseLocalDatabase(v5);
LABEL_9:
      _LSContextDestroy(a1);
      return _LSContextInitReturningError((uint64_t)a1, a3);
    }

    +[_LSDServiceDomain defaultServiceDomain]();
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    LSSessionKey v8 = (LSSessionKey)-[_LSDServiceDomain resolvedSessionKey]((uint64_t)v7);
    _LSReleaseLocalDatabase(v8);

    if (a1) {
      goto LABEL_9;
    }
  }

  else if (a1 && _LSDatabaseNeedsUpdate((_LSDatabase *)*a1))
  {
    goto LABEL_9;
  }

  return 1LL;
}

void sub_183EEC05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSReleaseLocalDatabase(LSSessionKey a1)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = a1;
  id v3 = (id *)_LSGetSession(v2);
  id v4 = v3[3];
  if (v4 && (char v5 = *((_BYTE *)v3[3] + 1664), v4, (v5 & 4) != 0))
  {
    _LSDatabaseGetLog();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 136446210;
      unint64_t v9 = "void _LSReleaseLocalDatabase(LSSessionKey)";
      _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_INFO,  "Ignoring call to %{public}s because the database was pushed by another process.",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    LSSession::setDatabase((LSSession *)v3, 0LL);
  }

  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseGetNoServerLock()
{
  if (_LSDatabaseGetNoServerLock::once != -1) {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_88);
  }
  return _LSDatabaseGetNoServerLock::result;
}

_LSChangeObserver *_LSContextAddChangeObserver(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS____LSChangeObserver);
  uint64_t v8 = *(unsigned int *)(*(void *)a1 + 1648LL);
  uint64_t v9 = *(unsigned int *)(*(void *)a1 + 1652LL);
  uint64_t v10 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)v5);
  unint64_t v11 = v10;
  unint64_t v12 = v8 | (v9 << 32);
  if ((v9 & 1) != 0)
  {
    if ((v10 & 0x100000000LL) != 0) {
      goto LABEL_9;
    }
  }

  else if ((v10 & 0x100000000LL) == 0 && (_DWORD)v8 == (_DWORD)v10)
  {
    goto LABEL_9;
  }

  _LSDefaultLog();
  BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
  {
    id v26 = (id)_LSSessionKeyCopyDescription(v12);
    uint64_t v27 = (void *)_LSSessionKeyCopyDescription(v11);
    *(_DWORD *)__int128 buf = 138412802;
    id v34 = v26;
    __int16 v35 = 2112;
    id v36 = v5;
    __int16 v37 = 2112;
    uint64_t v38 = v27;
    _os_log_fault_impl( &dword_183E58000,  v13,  OS_LOG_TYPE_FAULT,  "Adding change observer for context with session key %@ but service domain %@ implied session key %@",  buf,  0x20u);
  }

LABEL_9:
  [(id)__LSDefaultsGetSharedInstance() databaseUpdateNotificationNameForSessionKey:v12];
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = MEMORY[0x186E2A7B8](v6);
  id v16 = v7->block;
  v7->blocuint64_t k = (id)v15;

  v7->uid = v8;
  _LSGetDispatchTokenQueue();
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = MEMORY[0x1895F87A8];
  v30[0] = MEMORY[0x1895F87A8];
  v30[1] = 3221225472LL;
  void v30[2] = ___LSContextAddChangeObserver_block_invoke;
  v30[3] = &unk_189D74BF8;
  uint64_t v19 = v7;
  id v31 = v19;
  id v20 = v5;
  id v32 = v20;
  LaunchServices::notifyd::NotifyToken::RegisterDispatch(v14, v17, v30, (unsigned int *)buf);
  LaunchServices::notifyd::NotifyToken::operator=( (LaunchServices::notifyd::NotifyToken *)&v19->notifyToken,  (LaunchServices::notifyd::NotifyToken *)buf);
  LaunchServices::notifyd::NotifyToken::~NotifyToken((LaunchServices::notifyd::NotifyToken *)buf);

  _LSGetDispatchTokenQueue();
  uint64_t v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
  block[0] = v18;
  block[1] = 3221225472LL;
  block[2] = ___LSContextAddChangeObserver_block_invoke_3;
  block[3] = &unk_189D741C8;
  std::vector<unsigned int>::pointer v22 = v19;
  id v29 = v22;
  dispatch_barrier_async(v21, block);

  int64_t v23 = v29;
  unint64_t v24 = v22;

  return v24;
}

void sub_183EEC42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetDispatchTokenQueue(void)
{
  return (id)_LSGetDispatchTokenQueue(void)::result;
}

void sub_183EEC594( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183EEC660( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void _LSContextRemoveChangeObserver(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    _LSGetDispatchTokenQueue();
    LSSessionKey v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
    v3[0] = MEMORY[0x1895F87A8];
    v3[1] = 3221225472LL;
    _OWORD v3[2] = ___LSContextRemoveChangeObserver_block_invoke;
    v3[3] = &unk_189D74BF8;
    id v4 = v1;
    id v5 = v4;
    dispatch_barrier_async(v2, v3);
  }
}

void _LSContextObserveChange(void **a1)
{
  if (_LSDatabaseGetNoServerLock::once == -1)
  {
    if (!a1) {
      return;
    }
  }

  else
  {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_88);
    if (!a1) {
      return;
    }
  }

  if (*a1)
  {
    LSSessionKey v2 = (pthread_mutex_t *)_LSDatabaseGetNoServerLock::result;
    *((_BYTE *)*a1 + 1664) |= 4u;
    if (v2)
    {
      pthread_mutex_lock(v2);
      _LSSetLocalDatabase(*a1);
      _LSSetCurrentProcessMayMapDatabase(1);
      pthread_mutex_unlock(v2);
    }

    else
    {
      _LSSetLocalDatabase(*a1);
      _LSSetCurrentProcessMayMapDatabase(1);
    }
  }

void _LSContextReleaseObservedChange(LSSessionKey **a1)
{
  if (_LSDatabaseGetNoServerLock::once == -1)
  {
    if (!a1) {
      return;
    }
  }

  else
  {
    dispatch_once(&_LSDatabaseGetNoServerLock::once, &__block_literal_global_88);
    if (!a1) {
      return;
    }
  }

  if (*a1)
  {
    LSSessionKey v2 = (pthread_mutex_t *)_LSDatabaseGetNoServerLock::result;
    if (_LSDatabaseGetNoServerLock::result)
    {
      pthread_mutex_lock((pthread_mutex_t *)_LSDatabaseGetNoServerLock::result);
      LSSessionKey v3 = (*a1)[206];
      _LSReleaseLocalDatabaseEvenIfForced(v3);
      uint64_t v4 = _LSGetAuditTokenForSelf();
      int MayMapDatabase = _LSAuditTokenMayMapDatabase(v4);
      _LSSetCurrentProcessMayMapDatabase(MayMapDatabase);
      pthread_mutex_unlock(v2);
    }

    else
    {
      LSSessionKey v6 = (*a1)[206];
      _LSReleaseLocalDatabaseEvenIfForced(v6);
      uint64_t v7 = _LSGetAuditTokenForSelf();
      int v8 = _LSAuditTokenMayMapDatabase(v7);
      _LSSetCurrentProcessMayMapDatabase(v8);
    }
  }

uint64_t _LSReleaseLocalDatabaseEvenIfForced(LSSessionKey a1)
{
  LSSessionKey v2 = a1;
  LSSessionKey v3 = _LSGetSession(v2);
  LSSession::setDatabase((LSSession *)v3, 0LL);
  return os_unfair_recursive_lock_unlock();
}

uint64_t _LSDatabaseSentinelGet()
{
  uint64_t v0 = sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (v0) {
    return 1LL;
  }
  [(id)__LSDefaultsGetSharedInstance() dbSentinelFileURL];
  LSSessionKey v2 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = _LSDatabaseRecoveryFileExists(v2);

  return v1;
}

void sub_183EEC9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseSentinelIncrement()
{
  uint64_t v0 = sentinelCount;
  if (sentinelCount == -1)
  {
    _LSDatabaseGetLog();
    uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseSentinelIncrement_cold_1();
    }

    abort();
  }

  ++sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (!v0)
  {
    [(id)__LSDefaultsGetSharedInstance() dbSentinelFileURL];
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    _LSDatabaseCreateRecoveryFile(v2);
  }

void sub_183EECA64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t _LSDatabaseSentinelDecrement()
{
  if (!sentinelCount)
  {
    _LSDatabaseGetLog();
    uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseSentinelDecrement_cold_1();
    }

    abort();
  }

  --sentinelCount;
  return pthread_mutex_unlock(&sentinelLock);
}

void _LSDatabaseSentinelFlush()
{
  uint64_t v0 = sentinelCount;
  pthread_mutex_unlock(&sentinelLock);
  if (!v0)
  {
    [(id)__LSDefaultsGetSharedInstance() dbSentinelFileURL];
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    _LSDatabaseDeleteRecoveryFile(v1);
  }

void sub_183EECB4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t _LSDatabaseGetSyncInterrupted()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v1 = _LSDatabaseRecoveryFileExists(v0);

  return v1;
}

void sub_183EECB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseSetSyncInterrupted()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _LSDatabaseCreateRecoveryFile(v0);
}

void sub_183EECBE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void _LSDatabaseClearSyncInterrupted()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _LSDatabaseDeleteRecoveryFile(v0);
}

void sub_183EECC2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id _LSDatabaseGetMobileInstallSyncupGroup()
{
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && _LSDatabaseGetMobileInstallSyncupGroup::onceToken != -1)
  {
    dispatch_once(&_LSDatabaseGetMobileInstallSyncupGroup::onceToken, &__block_literal_global_89);
  }

  return (id)_LSDatabaseGetMobileInstallSyncupGroup::syncupGroup;
}

id _LSDatabaseGetSeedingGroup()
{
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && _LSDatabaseGetSeedingGroup::once != -1)
  {
    dispatch_once(&_LSDatabaseGetSeedingGroup::once, &__block_literal_global_90);
  }

  return (id)_LSDatabaseGetSeedingGroup::seedingGroup;
}

id _LSDatabaseGetInstallingGroup()
{
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && _LSDatabaseGetInstallingGroup::once != -1)
  {
    dispatch_once(&_LSDatabaseGetInstallingGroup::once, &__block_literal_global_91);
  }

  return (id)_LSDatabaseGetInstallingGroup::installingGroup;
}

void *_LSDatabaseGetRegisterInstallResultsLock()
{
  return &_LSDatabaseGetRegisterInstallResultsLock::lock;
}

void _LSArmSaveTimerWithObserver(char a1, void *a2)
{
  id v4 = a2;
  [(id)__LSDefaultsGetSharedInstance() databaseSaveInterval];
  _LSArmSaveTimerWithTimeout(a1, v4, v3);
}

void sub_183EECE24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void _LSArmSaveTimerWithTimeout(char a1, void *a2, double a3)
{
  id v5 = a2;
  if ([(id)__LSDefaultsGetSharedInstance() isServer]
    && ([(id)__LSDefaultsGetSharedInstance() isInSyncBubble] & 1) == 0)
  {
    os_unfair_recursive_lock_lock_with_options();
    LSSessionKey v6 = (LSSessionKey)_LSServer_SelfSessionKey();
    uint64_t v7 = (int64x2_t *)_LSGetSession(v6);
    int v8 = v7;
    v7->i8[0] |= a1;
    if (v5) {
      LSSession::addSaveObserver(v7, v5);
    }
    if ((v8[1].i8[4] & 1) == 0)
    {
      _LSServer_DatabaseExecutionContext();
      uint64_t v9 = (id *)objc_claimAutoreleasedReturnValue();
      uint64_t v10 = MEMORY[0x1895F87A8];
      v16[0] = MEMORY[0x1895F87A8];
      v16[1] = 3221225472LL;
      _OWORD v16[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke;
      v16[3] = &__block_descriptor_40_e5_v8__0l;
      void v16[4] = v8;
      unint64_t v11 = (void *)MEMORY[0x186E2A7B8](v16);
      -[LSDBExecutionContext maintenanceQueue](v9);
      unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13[0] = v10;
      v13[1] = 3221225472LL;
      void v13[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_279;
      v13[3] = &unk_189D72D30;
      uint64_t v14 = v9;
      id v15 = v11;
      _LSDispatchCoalescedAfterDelay(&v8->u8[8], v12, v13, a3);
    }

    os_unfair_recursive_lock_unlock();
  }
}

void sub_183EECFDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void _LSArmSaveTimer(char a1)
{
}

void _LSSaveImmediately(char a1)
{
}

void _LSResetServer()
{
  if ([(id)__LSDefaultsGetSharedInstance() hasServer]
    && ([(id)__LSDefaultsGetSharedInstance() isServer] & 1) == 0)
  {
    int v8 = (void *)MEMORY[0x186E2A59C]();
    +[_LSDService synchronousXPCProxyWithErrorHandler:]( (uint64_t)&OBJC_CLASS____LSDModifyService,  __block_literal_global_94_0);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v9 resetServerStoreWithCompletionHandler:&__block_literal_global_97];

    objc_autoreleasePoolPop(v8);
  }

  else
  {
    id v15 = 0LL;
    CFTypeRef v0 = _LSCreateEmptyStore(&v15);
    id v1 = v15;
    if (v0)
    {
      _LSGetStoreNode();
      id v2 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v3 = _LSServer_SelfSessionKey();
      id v13 = v1;
      id v4 = _LSDatabaseCreate(v2, v3, v0, &v13);
      id v5 = v13;

      uint64_t v14 = (uint64_t)v4;
      if (v4)
      {
        if ([(id)__LSDefaultsGetSharedInstance() isServer])
        {
          _LSServer_DatabaseExecutionContext();
          LSSessionKey v6 = (void *)objc_claimAutoreleasedReturnValue();
          -[LSDBExecutionContext setServerDatabase:]((uint64_t)v6, v4);
        }

        else
        {
          _LSSetLocalDatabase(v4);
        }

        _LSDatabaseClean((id *)&v14);
        int v12 = [(id)__LSDefaultsGetSharedInstance() isServer];
        id v11 = (id)v14;
        if (v12) {
          _LSDatabaseCommit(v14);
        }
      }

      else
      {
        _LSDatabaseGetLog();
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          _LSResetServer_cold_2();
        }

        id v11 = 0LL;
      }

      CFRelease(v0);
    }

    else
    {
      _LSDatabaseGetLog();
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        _LSResetServer_cold_1();
      }

      id v5 = v1;
    }
  }

void sub_183EED200(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_183EED2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EED318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSGetStoreNode(void)
{
  return (id)_LSGetStoreNode(void)::result;
}

void _LSDatabaseDisplayHeader(CSStore2::AttributedStringWriter *a1, void *a2, _BYTE *a3)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  if (a3) {
    *a3 = 1;
  }
  CSStore2::AttributedStringWriter::string(a1, @"Checking data integrity...");
  if (_CSStoreValidate())
  {
    id v45 = v5;
    _CSStoreEnumerateUnits();
    uint64_t v44 = v45;
    _CSStoreEnumerateUnits();
    LSSessionKey v6 = v44;
    __int128 v43 = v6;
    _CSStoreEnumerateUnits();
    CSStore2::AttributedStringWriter::string(a1, @"...done.");
    __int16 v7 = _LSGetStatus();
    if ((v7 & 0x80) != 0) {
      CSStore2::AttributedStringWriter::withTextColor();
    }
    if ((v7 & 0x100) != 0) {
      CSStore2::AttributedStringWriter::withTextColor();
    }
    if ((v7 & 0x200) != 0) {
      CSStore2::AttributedStringWriter::withTextColor();
    }
    *(void *)&double v8 = _LSDatabaseGetHeader(v46).n128_u64[0];
    if ((v47 & 1) != 0) {
      uint64_t v9 = @"are";
    }
    else {
      uint64_t v9 = @"are NOT";
    }
    CSStore2::AttributedStringWriter::format(a1, @"Status", @"Preferences %@ loaded.", v8, v9);
    _LSDatabaseGetSeededSystemVersion();
    uint64_t v10 = (NSString *)objc_claimAutoreleasedReturnValue();
    uint64_t v41 = v10;
    if (v10) {
      CSStore2::AttributedStringWriter::string(a1, @"Seeded System Version", v10);
    }
    _LSDatabaseGetSeededModelCode();
    id v11 = (NSString *)objc_claimAutoreleasedReturnValue();
    uint64_t v42 = v11;
    if (v11) {
      CSStore2::AttributedStringWriter::string(a1, @"Seeded Model Code", v11);
    }
    _LSDatabaseGetCacheGUID();
    int v12 = (void *)objc_claimAutoreleasedReturnValue();
    id v13 = v12;
    if (v12)
    {
      [v12 UUIDString];
      uint64_t v14 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a1, @"CacheGUID", v14);
    }

    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }

    *(void *)&double v15 = _LSDatabaseGetHeader(v46).n128_u64[0];
    if (v48)
    {
      [MEMORY[0x189607968] numberWithUnsignedLongLong:v15];
      id v16 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(a1, @"CacheSequenceNum", v16);
    }

    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }

    unsigned int v17 = v6;
    _LSDatabaseGetHeader(v46);
    if (v49)
    {
      [MEMORY[0x189603F50] dateWithTimeIntervalSince1970:(double)v49];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();

      if (v18)
      {
        [v18 timeIntervalSinceReferenceDate];
        CSStore2::AttributedStringWriter::timestamp(a1, @"Date Initialized", v19);
      }
    }

    else
    {

      uint64_t v18 = 0LL;
    }

    [v17[205] pathWithError:0];
    id v20 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v20)
    {
      id v21 = v17[205];
      [v21 URL];
      std::vector<unsigned int>::pointer v22 = (NSURL *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::link(a1, v22, v20);
      int64_t v23 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a1, @"Path", v23);
    }

    else
    {
      CSStore2::AttributedStringWriter::withWarningColors();
    }

    [v17 description];
    unint64_t v24 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a1, @"DB Object", v24);

    int64_t v25 = (__CFBundle *)_LSGetBundle();
    id v26 = v25;
    uint64_t v27 = (CFStringRef *)MEMORY[0x189604E18];
    if (v25)
    {
      id v28 = (NSURL *)CFBundleCopyBundleURL(v25);
      CFBundleGetValueForInfoDictionaryKey(v26, *v27);
      id v29 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSURL path](v28, "path");
      unsigned int v30 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::link(a1, v28, v30);
      id v31 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v29) {
        CSStore2::AttributedStringWriter::format( a1,  @"DB Bundle",  @"%@ (v %@)",  v31,  v29,  v41,  v42);
      }
      else {
        CSStore2::AttributedStringWriter::string(a1, @"DB Bundle", v31);
      }
    }

    [v5[1] description];
    id v32 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a1, @"Store Object", v32);

    [MEMORY[0x1896077F8] bundleForClass:_CSStoreGetXPCClass()];
    int64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    id v34 = v33;
    if (v33)
    {
      [v33 bundleURL];
      __int16 v35 = (NSURL *)objc_claimAutoreleasedReturnValue();
      [v34 objectForInfoDictionaryKey:*v27];
      id v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSURL path](v35, "path");
      __int16 v37 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::link(a1, v35, v37);
      uint64_t v38 = (NSString *)objc_claimAutoreleasedReturnValue();
      if (v36) {
        CSStore2::AttributedStringWriter::format(a1, @"Store Bundle", @"%@ (v %@)", v38, v36);
      }
      else {
        CSStore2::AttributedStringWriter::string(a1, @"Store Bundle", v38);
      }
    }

    uint64_t v39 = (NSAttributedString *)_CSStoreCopyDebugDescriptionOfBytesInRange();
    CSStore2::AttributedStringWriter::attributedString(a1, v39);

    __int128 v40 = (NSAttributedString *)_CSStoreCopyMemoryStatistics();
    CSStore2::AttributedStringWriter::attributedString(a1, v40);
  }

  else
  {
    CSStore2::AttributedStringWriter::string(a1, @"Data integrity check failed.");
    if (a3) {
      *a3 = 0;
    }
  }
}

void sub_183EEDA8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  _Unwind_Resume(a1);
}

double ___ZL14_LSGetSessionsv_block_invoke()
{
  CFTypeRef v0 = operator new(0x28uLL);
  double result = 0.0;
  *CFTypeRef v0 = 0u;
  v0[1] = 0u;
  *((_DWORD *)v0 + _Block_object_dispose(va, 8) = 1065353216;
  _LSGetSessions(void)::sessions = (uint64_t)v0;
  return result;
}

void ___ZL35_LSSessionInitMemoryWarningListenerv_block_invoke()
{
  dispatch_source_t v0 = dispatch_source_create(MEMORY[0x1895F8B50], 0LL, 6uLL, 0LL);
  id v1 = (void *)_LSSessionInitMemoryWarningListener(void)::memPressureSource;
  _LSSessionInitMemoryWarningListener(void)::memPressureSource = (uint64_t)v0;

  dispatch_source_set_event_handler( (dispatch_source_t)_LSSessionInitMemoryWarningListener(void)::memPressureSource,  &__block_literal_global_162_0);
  dispatch_resume((dispatch_object_t)_LSSessionInitMemoryWarningListener(void)::memPressureSource);
}

void ___ZL35_LSSessionInitMemoryWarningListenerv_block_invoke_2()
{
  dispatch_source_t v0 = (void *)MEMORY[0x186E2A59C]();
  os_unfair_recursive_lock_lock_with_options();
  for (uint64_t i = *(void **)(_LSGetSessions() + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v2 = i[3];
    if (v2)
    {
      id v3 = *(id *)(v2 + 24);
      id v4 = v3;
      if (v3) {
        _LSSchemaClearLocalizedCaches((uint64_t)v3 + 16);
      }
    }
  }

  os_unfair_recursive_lock_unlock();
  objc_autoreleasePoolPop(v0);
}

void sub_183EEE0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit( char **a1)
{
  id v3 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  id v4 = *a1;
  id v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 3;
  if (v6 < (v3 - *a1) >> 3)
  {
    uint64_t v19 = result;
    if (v5 == v4)
    {
      id v11 = 0LL;
      uint64_t v9 = 8 * v6;
    }

    else
    {
      __int16 v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>(result, v6);
      id v4 = *a1;
      double v8 = a1[1];
      uint64_t v9 = (uint64_t)&v7[8 * v6];
      id v11 = &v7[8 * v10];
      uint64_t v17 = v9;
      uint64_t v18 = v11;
      if (v8 != v4)
      {
        int v12 = &v7[8 * v6];
        do
        {
          uint64_t v13 = *((void *)v8 - 1);
          v8 -= 8;
          *(void *)double v8 = 0LL;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }

        while (v8 != v4);
        uint64_t v14 = *a1;
        id v4 = a1[1];
        uint64_t v9 = v17;
        id v11 = v18;
        goto LABEL_9;
      }
    }

    uint64_t v14 = v4;
    int v12 = (char *)v9;
LABEL_9:
    *a1 = v12;
    a1[1] = (char *)v9;
    double v15 = a1[2];
    a1[2] = v11;
    uint64_t v17 = (uint64_t)v4;
    uint64_t v18 = v15;
    v16[0] = v14;
    v16[1] = v14;
    return std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)v16);
  }

  return result;
}

void ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0(uint64_t a1)
{
}

void _LSSetCrashReporterMessage(NSString *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = strdup(-[NSString UTF8String](v1, "UTF8String"));
    _LSDefaultLog();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      _LSSetCrashReporterMessage();
    }
  }

  else
  {
    id v3 = 0LL;
  }

  uint64_t v5 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  while (1)
  {
    unint64_t v6 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr);
    if (v6 != v5) {
      break;
    }
    if (!__stxr((unint64_t)v3, (unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr))
    {
      int v7 = 1;
      goto LABEL_11;
    }
  }

  int v7 = 0;
  __clrex();
LABEL_11:
  if (v7) {
    double v8 = (void *)v5;
  }
  else {
    double v8 = v3;
  }
  free(v8);
  qword_18C49A7B0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

void sub_183EEE288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15_LSLoggingQueuev_block_invoke_0()
{
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.launchservices.logging", v2);
  id v1 = (void *)_LSLoggingQueue(void)::logQueue;
  _LSLoggingQueue(void)::logQueue = (uint64_t)v0;
}

BOOL _LSSchemaConfigureTable(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  v12[1] = *MEMORY[0x1895F89C0];
  int TableWithName = _CSStoreGetTableWithName();
  int v8 = TableWithName;
  if (TableWithName)
  {
    *a3 = TableWithName;
  }

  else if (a4)
  {
    id v11 = @"TableName";
    v12[0] = a2;
    [MEMORY[0x189603F68] dictionaryWithObjects:v12 forKeys:&v11 count:1];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -9499LL, (uint64_t)"_LSSchemaConfigureTable", 430LL, v9);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v8 != 0;
}

void sub_183EEE3CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL16_LSDatabaseCleanPU8__strongP11_LSDatabase_block_invoke(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v11 = *a3;
  int v12 = *((_DWORD *)a3 + 4);
  uint64_t v10 = 0LL;
  _LSAliasGetPath(*(void **)(a1 + 32), SHIDWORD(v11));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    unint64_t v6 = -[FSNode initWithPath:flags:error:]( objc_alloc(&OBJC_CLASS___FSNode),  "initWithPath:flags:error:",  v5,  0LL,  0LL);
    int v7 = v6;
    if (v6) {
      BOOL v8 = -[FSNode getVolumeIdentifier:error:](v6, "getVolumeIdentifier:error:", &v10, 0LL);
    }
    else {
      BOOL v8 = 0;
    }
  }

  else
  {
    BOOL v8 = 0;
  }

  *(void *)((char *)&v11 + 4) = v10;
  BYTE2(v11) = v8;
  return _LSContainerSet(*(void **)(a1 + 32), a2, (uint64_t)&v11);
}

void sub_183EEE4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c14_ZTS9LSContext(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c14_ZTS9LSContext(uint64_t a1)
{
}

void LSCrashMessage::LSCrashMessage(LSCrashMessage *this, NSString *a2)
{
  uint64_t v2 = a2;
  id v3 = (dispatch_queue_s *)_LSLoggingQueue(void)::logQueue;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_189D741C8;
  unint64_t v6 = v2;
  id v4 = v2;
  dispatch_sync(v3, block);
}

void LSCrashMessage::~LSCrashMessage(LSCrashMessage *this)
{
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___ZL18_LSSetCrashMessageP8NSString_block_invoke_0;
  block[3] = &unk_189D741C8;
  id v2 = 0LL;
  dispatch_sync((dispatch_queue_t)_LSLoggingQueue(void)::logQueue, block);
}

void ___ZL52_LSDatabaseRegisterCanonicalNamesFromStringLocalizerP11_LSDatabaseP18_LSStringLocalizer_block_invoke( uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!LaunchServices::CanonicalString::Find(*(LaunchServices::CanonicalString **)(a1 + 32), v7, v10))
  {
    if (LaunchServices::CanonicalString::Add(*(void **)(a1 + 32), v7, v8))
    {
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    }

    else
    {
      _LSDatabaseGetLog();
      __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138543874;
        uint64_t v13 = v7;
        __int16 v14 = 2114;
        id v15 = v8;
        __int16 v16 = 2114;
        id v17 = v9;
        _os_log_error_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_ERROR,  "Failed to add canonical string %{public}@, localizations %{public}@, missingLocalizations %{public}@",  (uint8_t *)&v12,  0x20u);
      }
    }
  }
}

void sub_183EEE7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__12(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

uint64_t ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke( uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = result;
  int v5 = a3[24];
  if (v5)
  {
    unint64_t v6 = *(void **)(*(void *)(result + 40) + 8LL);
    int v7 = (char *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v10 = (char *)v6[6];
      uint64_t v11 = (v7 - v10) >> 2;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        id v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        uint64_t v10 = (char *)v6[6];
        int v7 = (char *)v6[7];
        int v5 = a3[24];
      }

      else
      {
        id v15 = 0LL;
      }

      __int16 v16 = &v15[4 * v11];
      id v17 = &v15[4 * v14];
      *(_DWORD *)__int16 v16 = v5;
      id v9 = v16 + 4;
      while (v7 != v10)
      {
        int v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }

      void v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10) {
        operator delete(v10);
      }
    }

    else
    {
      *(_DWORD *)int v7 = v5;
      id v9 = v7 + 4;
    }

    v6[7] = v9;
    __n128 result = _CSStoreWriteToUnit();
  }

  int v19 = a3[34];
  if (v19)
  {
    id v20 = *(void **)(*(void *)(v4 + 48) + 8LL);
    id v21 = (char *)v20[7];
    unint64_t v22 = v20[8];
    if ((unint64_t)v21 >= v22)
    {
      unint64_t v24 = (char *)v20[6];
      uint64_t v25 = (v21 - v24) >> 2;
      unint64_t v26 = v25 + 1;
      uint64_t v27 = v22 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        id v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v20 + 8), v28);
        unint64_t v24 = (char *)v20[6];
        id v21 = (char *)v20[7];
        int v19 = a3[34];
      }

      else
      {
        id v29 = 0LL;
      }

      unsigned int v30 = &v29[4 * v25];
      id v31 = &v29[4 * v28];
      *(_DWORD *)unsigned int v30 = v19;
      int64_t v23 = v30 + 4;
      while (v21 != v24)
      {
        int v32 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }

      v20[6] = v30;
      v20[7] = v23;
      v20[8] = v31;
      if (v24) {
        operator delete(v24);
      }
    }

    else
    {
      *(_DWORD *)id v21 = v19;
      int64_t v23 = v21 + 4;
    }

    v20[7] = v23;
    __n128 result = _CSStoreWriteToUnit();
  }

  int v33 = a3[123];
  if (v33)
  {
    id v34 = *(void **)(*(void *)(v4 + 48) + 8LL);
    __int16 v35 = (char *)v34[7];
    unint64_t v36 = v34[8];
    if ((unint64_t)v35 < v36)
    {
      *(_DWORD *)__int16 v35 = v33;
      __int16 v37 = v35 + 4;
LABEL_55:
      v34[7] = v37;
      return _CSStoreWriteToUnit();
    }

    uint64_t v38 = (char *)v34[6];
    uint64_t v39 = (v35 - v38) >> 2;
    unint64_t v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 62))
    {
      uint64_t v41 = v36 - (void)v38;
      if (v41 >> 1 > v40) {
        unint64_t v40 = v41 >> 1;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        __int128 v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v34 + 8), v42);
        uint64_t v38 = (char *)v34[6];
        __int16 v35 = (char *)v34[7];
        int v33 = a3[123];
      }

      else
      {
        __int128 v43 = 0LL;
      }

      uint64_t v44 = &v43[4 * v39];
      id v45 = &v43[4 * v42];
      *(_DWORD *)uint64_t v44 = v33;
      __int16 v37 = v44 + 4;
      while (v35 != v38)
      {
        int v46 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }

      v34[6] = v44;
      v34[7] = v37;
      v34[8] = v45;
      if (v38) {
        operator delete(v38);
      }
      goto LABEL_55;
    }

LABEL_56:
    abort();
  }

  return result;
}

  return v19;
}

uint64_t ___ZL41_LSSystemContentDatabaseSanitizeForExportP11_LSDatabase_block_invoke_2( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(a3 + 96);
  if (v5)
  {
    unint64_t v6 = *(void **)(*(void *)(result + 40) + 8LL);
    int v7 = (char *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v10 = (char *)v6[6];
      uint64_t v11 = (v7 - v10) >> 2;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        id v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        uint64_t v10 = (char *)v6[6];
        int v7 = (char *)v6[7];
        int v5 = *(_DWORD *)(a3 + 96);
      }

      else
      {
        id v15 = 0LL;
      }

      __int16 v16 = &v15[4 * v11];
      id v17 = &v15[4 * v14];
      *(_DWORD *)__int16 v16 = v5;
      id v9 = v16 + 4;
      while (v7 != v10)
      {
        int v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }

      void v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10) {
        operator delete(v10);
      }
    }

    else
    {
      *(_DWORD *)int v7 = v5;
      id v9 = v7 + 4;
    }

    v6[7] = v9;
    __n128 result = _CSStoreWriteToUnit();
  }

  int v19 = *(_DWORD *)(a3 + 136);
  if (v19)
  {
    id v20 = *(void **)(*(void *)(v4 + 48) + 8LL);
    id v21 = (char *)v20[7];
    unint64_t v22 = v20[8];
    if ((unint64_t)v21 < v22)
    {
      *(_DWORD *)id v21 = v19;
      int64_t v23 = v21 + 4;
LABEL_37:
      v20[7] = v23;
      return _CSStoreWriteToUnit();
    }

    unint64_t v24 = (char *)v20[6];
    uint64_t v25 = (v21 - v24) >> 2;
    unint64_t v26 = v25 + 1;
    if (!((unint64_t)(v25 + 1) >> 62))
    {
      uint64_t v27 = v22 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        id v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v20 + 8), v28);
        unint64_t v24 = (char *)v20[6];
        id v21 = (char *)v20[7];
        int v19 = *(_DWORD *)(a3 + 136);
      }

      else
      {
        id v29 = 0LL;
      }

      unsigned int v30 = &v29[4 * v25];
      id v31 = &v29[4 * v28];
      *(_DWORD *)unsigned int v30 = v19;
      int64_t v23 = v30 + 4;
      while (v21 != v24)
      {
        int v32 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }

      v20[6] = v30;
      v20[7] = v23;
      v20[8] = v31;
      if (v24) {
        operator delete(v24);
      }
      goto LABEL_37;
    }

LABEL_38:
    abort();
  }

  return result;
}

      p_cpusubtype += 5;
      if (!--cputype) {
        goto LABEL_39;
      }
    }
  }

  if (v40.magic + 17958194 >= 2)
  {
    unint64_t v14 = -805638658;
    goto LABEL_42;
  }

  CFDictionaryAddValue(v4, @"LSExecutableFormat", @"LSExecutableMachOFormat");
  appendSliceForCPUTypeSubtype(v9, v40.cputype, v40.cpusubtype);
  __int16 v16 = &v40;
  if (machHeaderSize(&v40) <= (unint64_t)v12 || (__int16 v16 = (mach_header *)mallocMachHeader(v7, 0LL)) != 0LL)
  {
    addUUID(v16, v4);
    goto LABEL_44;
  }

      uint64_t v25 = 0;
      goto LABEL_39;
    }

    uint64_t v25 = 0;
  }

  else
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0LL;
  }

        if (a10)
        {
          [*a10 description];
          uint64_t v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }

        else
        {
          uint64_t v27 = @"untracked error";
        }

        goto LABEL_41;
      }
    }

    else
    {
      CFStringGetTypeID();
    }

    Value = 0LL;
    if (v21) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }

id _LSDatabaseCreateSnapshotAgainstAccessContext(void *a1, uint64_t a2, void *a3)
{
  uint64_t v27 = 0LL;
  unint64_t v28 = &v27;
  uint64_t v29 = 0x3032000000LL;
  unsigned int v30 = __Block_byref_object_copy__261;
  id v31 = __Block_byref_object_dispose__262;
  id v32 = 0LL;
  uint64_t v21 = 0LL;
  unint64_t v22 = &v21;
  uint64_t v23 = 0x3032000000LL;
  unint64_t v24 = __Block_byref_object_copy__261;
  uint64_t v25 = __Block_byref_object_dispose__262;
  id v26 = 0LL;
  int v5 = a1;
  if (v5)
  {
    uint64_t v6 = v5[1];
    uint64_t v7 = v5[207];
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  v16[0] = MEMORY[0x1895F87A8];
  v16[1] = 3221225472LL;
  void v16[2] = ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke;
  v16[3] = &unk_189D75498;
  uint64_t v20 = v6;
  int v18 = &v21;
  unint64_t v8 = v5;
  id v17 = v8;
  int v19 = &v27;
  id v9 = (void (**)(void))MEMORY[0x186E2A7B8](v16);
  if (a2)
  {
    if (v7 && v7 != a2)
    {
      [MEMORY[0x1896077D8] currentHandler];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( NSString,  "stringWithUTF8String:",  "_LSDatabase *_LSDatabaseCreateSnapshotAgainstAccessContext(_LSDatabase *__strong, CSStoreAccessContextRef, NSErr or *__autoreleasing *)");
      unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
      [v13 handleFailureInFunction:v14 file:@"LSDatabase.mm" lineNumber:2812 description:@"provided a snapshot queue but it was not equal to the queue in the db to snapshot"];
    }

    id v15 = v9;
    _CSStoreAccessContextAccessForRead();
  }

  else
  {
    if (v7) {
      _CSStoreAccessContextAssertReading();
    }
    v9[2](v9);
  }

  if (!v28[5])
  {
    _LSDatabaseGetLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      _LSDatabaseCreateSnapshotAgainstAccessContext();
    }

    if (a3) {
      *a3 = (id) v22[5];
    }
  }

  id v11 = (id)v28[5];

  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);

  return v11;
}

void sub_183EEEFC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v32 - 144), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__261(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__262(uint64_t a1)
{
}

void ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke( void *a1)
{
  if (a1[7])
  {
    MutableCFSetRef Copy = CSStoreCreateMutableCopy();
    if (MutableCopy)
    {
      id v3 = (const void *)MutableCopy;
      uint64_t v4 = a1[4];
      uint64_t v5 = *(void *)(v4 + 1648);
      id v6 = *(id *)(v4 + 1640);
      uint64_t v7 = (const void *)a1[7];
      uint64_t v8 = *(void *)(a1[5] + 8LL);
      id obj = *(id *)(v8 + 40);
      id v9 = _LSDatabaseCreateWithAccessContext(v6, v5, v7, 0LL, &obj);
      objc_storeStrong((id *)(v8 + 40), obj);
      uint64_t v10 = *(void *)(a1[6] + 8LL);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      CFRelease(v3);
    }
  }

  else
  {
    uint64_t v12 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -50LL,  (uint64_t)"_LSDatabaseCreateSnapshotAgainstAccessContext_block_invoke",  2806LL,  0LL);
    uint64_t v13 = *(void *)(a1[5] + 8LL);
    unint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

void sub_183EEF154(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL45_LSDatabaseCreateSnapshotAgainstAccessContextP11_LSDatabaseP22__CSStoreAccessContextPU15__autoreleasingP7NSError_block_invoke_2( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  id v2 = a2;
  _LSDatabaseGetLog();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    id v4 = v2;
    id v5 = objc_alloc(NSString);
    [v4 domain];
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v7 = [v4 code];
    [v4 userInfo];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    id v9 = (void *)[v5 initWithFormat:@"(Error domain %@ code %llu, ui: %@)", v6, v7, v8];

    *(_DWORD *)__int128 buf = 136315394;
    id v11 = "LSCheckDatabaseAvailableWithServer_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_error_impl(&dword_183E58000, v3, OS_LOG_TYPE_ERROR, "%s: Error on proxy: %@", buf, 0x16u);
  }
}

void sub_183EEF2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL34LSCheckDatabaseAvailableWithServerP17_LSDServiceDomain_block_invoke_272( uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = 1;
  return result;
}

uint64_t ___ZL31_LSDatabaseNotificationRegister12LSSessionKey_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  _LSDatabaseGetLog();
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)_LSSessionKeyCopyDescription(*(void *)(a1 + 40));
    int v9 = 138543618;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    __int16 v12 = v4;
    _os_log_impl( &dword_183E58000,  v2,  OS_LOG_TYPE_DEFAULT,  "NotifyToken::RegisterDispatch(%{public}@) fired for session key %@",  (uint8_t *)&v9,  0x16u);
  }

  LSSessionKey v5 = *(LSSessionKey *)(a1 + 40);
  _LSReleaseLocalDatabase(v5);
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v6 = *(LSSessionKey *)(a1 + 40);
  uint64_t v7 = _LSGetSession(v6);
  LaunchServices::notifyd::NotifyToken::cancel((LaunchServices::notifyd::NotifyToken *)(v7 + 12));
  return os_unfair_recursive_lock_unlock();
}

void sub_183EEF418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30_LSClearCrashMessageAfterDelayi_block_invoke()
{
  uint64_t v0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
  while (1)
  {
    unint64_t v1 = __ldxr((unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr);
    if (v1 != v0) {
      break;
    }
    if (!__stxr(0LL, (unint64_t *)&_LSSetCrashReporterMessage(NSString *)::messagePtr))
    {
      int v2 = 1;
      goto LABEL_6;
    }
  }

  int v2 = 0;
  __clrex();
LABEL_6:
  if (v2) {
    uint64_t v3 = (void *)v0;
  }
  else {
    uint64_t v3 = 0LL;
  }
  free(v3);
  qword_18C49A7B0 = _LSSetCrashReporterMessage(NSString *)::messagePtr;
}

uint64_t ___ZL42getIsCurrentThreadInLSContextInitReferencev_block_invoke()
{
  return pthread_key_create( (pthread_key_t *)&getIsCurrentThreadInLSContextInitReference(void)::key,  (void (__cdecl *)(void *))MEMORY[0x1895FB398]);
}

void ___ZL24_LSGetDispatchTokenQueuev_block_invoke()
{
  int v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("LS database changed notification queue", v2);
  unint64_t v1 = (void *)_LSGetDispatchTokenQueue(void)::result;
  _LSGetDispatchTokenQueue(void)::__n128 result = (uint64_t)v0;
}

void LSSession::addSaveObserver(int64x2_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  unint64_t v5 = a1[3].u64[0];
  LSSessionKey v6 = (uint64_t *)a1[2].i64[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[2].i64[0];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    else {
      unint64_t v12 = v11;
    }
    unint64_t v24 = a1 + 3;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<os_eligibility_answer_t>>( (uint64_t)a1[3].i64,  v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = (uint64_t *)&v13[8 * v9];
    id v15 = &v13[8 * v12];
    uint64_t v23 = v15;
    *uint64_t v14 = v4;
    uint64_t v7 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    id v17 = (void *)a1[2].i64[0];
    __int16 v16 = (void *)a1[2].i64[1];
    if (v16 == v17)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }

    else
    {
      do
      {
        uint64_t v18 = *--v16;
        *__int16 v16 = 0LL;
        *--uint64_t v14 = v18;
      }

      while (v16 != v17);
      int64x2_t v19 = a1[2];
      uint64_t v7 = (void *)v22.i64[1];
      id v15 = v23;
    }

    a1[2].i64[0] = (uint64_t)v14;
    a1[2].i64[1] = (uint64_t)v7;
    int64x2_t v22 = v19;
    uint64_t v20 = a1[3].i64[0];
    a1[3].i64[0] = (uint64_t)v15;
    uint64_t v23 = (char *)v20;
    uint64_t v21 = v19.i64[0];
    std::__split_buffer<LSApplicationRecord * {__strong}>::~__split_buffer((uint64_t)&v21);
  }

  else
  {
    uint64_t *v6 = v4;
    uint64_t v7 = v6 + 1;
  }

  a1[2].i64[1] = (uint64_t)v7;
}

void sub_183EEF614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  unsigned __int8 v52 = 0;
  memset(&v54[1], 0, 11);
  __int128 v50 = 0uLL;
  uint64_t v51 = 0LL;
  os_unfair_recursive_lock_lock_with_options();
  if (*(void *)(*(void *)(a1 + 32) + 24LL)) {
    id v2 = *(id *)(*(void *)(a1 + 32) + 24LL);
  }
  else {
    id v2 = 0LL;
  }
  id v3 = *(char **)(a1 + 32);
  unsigned __int8 v52 = *v3;
  char v4 = v3[11];
  unint64_t v5 = *(void ***)(v3 + 1);
  LOWORD(v54[2]) = *(_WORD *)(v3 + 9);
  v54[1] = v5;
  BYTE2(v54[2]) = v4;
  if (*v3) {
    char *v3 = 0;
  }
  __int128 v7 = *((_OWORD *)v3 + 2);
  LSSessionKey v6 = v3 + 32;
  *(_OWORD *)__int128 buf = v7;
  *(void *)&uint8_t buf[16] = *((void *)v6 + 2);
  *(void *)LSSessionKey v6 = 0LL;
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 2) = 0LL;
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::shrink_to_fit((char **)v6);
  std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::__vdeallocate((void **)&v50);
  __int128 v50 = *(_OWORD *)buf;
  uint64_t v51 = *(void *)&buf[16];
  memset(buf, 0, sizeof(buf));
  v54[0] = (void **)buf;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](v54);
  uint64_t v8 = os_unfair_recursive_lock_unlock();
  if (v2)
  {
    uint64_t v9 = (void *)MEMORY[0x186E2A59C](v8);
    uint64_t v10 = v2;
    uint64_t v11 = v10;
    int v12 = (v52 >> 1) & 1 | v52;
    if ((v52 >> 1) & 1 | v52 & 1)
    {
      uint64_t v13 = v10;
      _LSDatabaseGetHeader(buf);
      if ((v58 & 0x1000000) != 0)
      {
        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification( DarwinNotifyCenter,  @"com.apple.LaunchServices.ApplicationsChanged",  0LL,  0LL,  1u);
      }

      _LSDatabaseGetHeader(buf);
      if ((v58 & 0x2000000) != 0)
      {
        id v15 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v15, @"com.apple.LaunchServices.DocumentTypesChanged", 0LL, 0LL, 1u);
      }

      _LSDatabaseGetHeader(buf);
      if ((v58 & 0x4000000) != 0)
      {
        __int16 v16 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification(v16, @"com.apple.LaunchServices.URLTypesChanged", 0LL, 0LL, 1u);
      }

      _LSDatabaseGetHeader(buf);
      if ((v58 & 0x8000000) != 0)
      {
        id v17 = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification( v17,  @"com.apple.LaunchServices.TypeDeclarationsChanged",  0LL,  0LL,  1u);
      }

      _LSServer_DatabaseExecutionContext();
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(void *)__int128 buf = MEMORY[0x1895F87A8];
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = ___ZL34_LSDatabasePostChangeNotificationsP11_LSDatabase_block_invoke;
      int64_t v56 = &unk_189D75590;
      int64x2_t v19 = v13;
      __int16 v57 = v19;
      -[LSDBExecutionContext performAsyncWrite:]((uint64_t)v18, buf);

      uint64_t v20 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotificationWithOptions( v20,  @"com.apple.LaunchServices.DatabaseChange",  0LL,  0LL,  0LL);
    }

    if ((v12 & 4) != 0)
    {
      *(_DWORD *)__int128 buf = -1163005939;
      int v21 = v11[412];
      if (_LSGetConsoleOwnerUID((uid_t *)buf))
      {
        if (*(_DWORD *)buf != v21) {
          goto LABEL_23;
        }
      }

      else if (v21)
      {
        goto LABEL_23;
      }

      _LSSetKernelPackageExtensions();
    }

LABEL_45:
  v54[0] = (void **)&v50;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100](v54);
}

  [v19 objectForKeyedSubscript:@"__PayloadOptions"];
  id v36 = (void *)objc_claimAutoreleasedReturnValue();
  __int16 v37 = v36 == 0LL;

  if (v37)
  {
    [MEMORY[0x189603FC8] dictionary];
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v39) {
      goto LABEL_56;
    }
  }

  else
  {
    [v19 objectForKeyedSubscript:@"__PayloadOptions"];
    int v38 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v39 = (void *)[v38 mutableCopy];

    if (!v39) {
      goto LABEL_56;
    }
  }

  [v19 setObject:v39 forKeyedSubscript:@"__PayloadOptions"];
  if (v50)
  {
    [v39 objectForKeyedSubscript:@"UIApplicationLaunchOptionsSourceApplicationKey"];
    unint64_t v40 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v41 = v40 == 0LL;

    if (!v41)
    {
      [v50 _xpcConnection];
      int v42 = (void *)objc_claimAutoreleasedReturnValue();
      __int128 v43 = _LSCheckEntitlementForXPCConnection( v42,  @"com.apple.private.launchservices.canspecifysourceapplication") == 0;

      if (!v43) {
        goto LABEL_56;
      }
      [v39 removeObjectForKey:@"UIApplicationLaunchOptionsSourceApplicationKey"];
    }

    [v50 _xpcConnection];
    id v44 = (void *)objc_claimAutoreleasedReturnValue();
    id v45 = (void *)_LSCopyBundleIdentifierForXPCConnection(v44, 0);

    if (v45) {
      [v39 setObject:v45 forKeyedSubscript:@"UIApplicationLaunchOptionsSourceApplicationKey"];
    }
  }

                id v31 = (const __CFString *)CFDictionaryGetValue( (CFDictionaryRef)ValueAtIndex,  @"_LSBundleLibraryDelegate");
                uint64_t v32 = CFStringGetTypeID();
                if (v31 && v32 && CFGetTypeID(v31) != v32) {
                  id v31 = 0LL;
                }
                LODWORD(v60) = _LSDatabaseCreateStringForCFString(v7, v31, 0);
                if (!(_DWORD)v60) {
                  goto LABEL_61;
                }
                if (v49)
                {
                  int v33 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, v49);
                  id v34 = CFStringGetTypeID();
                  if (v33 && (!v34 || CFGetTypeID(v33) == v34))
                  {
                    __int16 v35 = DWORD2(v56);
                    CFIndex Length = CFStringGetLength(v33);
                    if (Length > CFStringGetLength(@"com.apple."))
                    {
                      v63.CFIndex length = CFStringGetLength(@"com.apple.");
                      v63.id location = 0LL;
                      if (CFStringCompareWithOptions(v33, @"com.apple.", v63, 1uLL) == kCFCompareEqualTo)
                      {
                        __int16 v37 = v35 | 4;
                        goto LABEL_60;
                      }
                    }

void sub_183EEFCF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  if (cf) {
    CFRelease(cf);
  }

  a14 = &a9;
  std::vector<LSApplicationRecord * {__strong}>::__destroy_vector::operator()[abi:nn180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

void ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_279( uint64_t a1)
{
  v2[0] = MEMORY[0x1895F87A8];
  v2[1] = 3221225472LL;
  v2[2] = ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_2;
  v2[3] = &unk_189D73FA8;
  unint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  -[LSDBExecutionContext syncRead:](v1, v2);
}

void sub_183EEFE8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t ___ZL26_LSArmSaveTimerWithTimeouthdU13block_pointerFvbP11_LSDatabaseP7NSErrorE_block_invoke_2( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void std::vector<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *),std::allocator<void({block_pointer} {__strong})(BOOL,_LSDatabase *,NSError *)>>::__vdeallocate( void **a1)
{
  unint64_t v1 = (char *)*a1;
  if (*a1)
  {
    id v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }

      while (v3 != v1);
      char v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void ___ZL34_LSDatabasePostChangeNotificationsP11_LSDatabase_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  id v6 = a3;
  id v22 = 0LL;
  int64x2_t v19 = 0LL;
  id v20 = 0LL;
  char v21 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  __int128 v7 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = (_LSDatabase **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v7, 0LL);

  if (!v8)
  {
    _LSDefaultLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      __int16 v16 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v17 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v19, v16, 0LL);

      if (v17) {
        id v18 = 0LL;
      }
      else {
        id v18 = v22;
      }
      *(_DWORD *)__int128 buf = 136315394;
      unint64_t v24 = "_LSDatabasePostChangeNotifications_block_invoke";
      __int16 v25 = 2112;
      id v26 = v18;
      _os_log_error_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_ERROR,  "could not connect to database in %s: %@",  buf,  0x16u);
    }

    goto LABEL_6;
  }

  uint64_t v9 = *v8;
  if (*v8 != *(_LSDatabase **)(a1 + 32))
  {
    _LSDefaultLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_DEFAULT,  "database was reset, not clearing change notification flags.",  buf,  2u);
    }

void sub_183EF0160( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZL16_LSDatabaseRemapP11_LSDatabaseU13block_pointerFvbP7NSErrorP8NSStringE_block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  os_unfair_recursive_lock_lock_with_options();
  LSSessionKey v2 = (LSSessionKey)_LSServer_SelfSessionKey();
  id v3 = _LSGetSession(v2);
  if (!*((void *)v3 + 3))
  {
    os_unfair_recursive_lock_unlock();
    goto LABEL_9;
  }

  char v4 = (uint64_t *)(v3 + 24);
  _LSDatabaseGetHeader(buf);
  uint64_t v5 = v28;
  LODWORD(v4) = -[_LSDatabase isSeeded](*v4);
  os_unfair_recursive_lock_unlock();
  if (!(_DWORD)v4 || *(void *)(a1 + 48) != v5)
  {
LABEL_9:
    gSkippedRemap = 1;
    _LSDatabaseGetLog();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136446210;
      *(void *)&uint8_t buf[4] = "_LSDatabaseRemap_block_invoke";
      _os_log_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_DEFAULT,  "%{public}s Skipping database remap because there are unsaved local changes",  buf,  0xCu);
    }

void sub_183EF0598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL15_LSGetStoreNodev_block_invoke()
{
  dispatch_queue_t v0 = (void *)MEMORY[0x186E2A59C]();
  [(id)__LSDefaultsGetSharedInstance() databaseStoreFileURL];
  unint64_t v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    LSSessionKey v2 = -[FSNode initWithURL:flags:error:](objc_alloc(&OBJC_CLASS___FSNode), "initWithURL:flags:error:", v1, 0LL, 0LL);
    id v3 = (void *)_LSGetStoreNode(void)::result;
    _LSGetStoreNode(void)::__n128 result = (uint64_t)v2;
  }

  objc_autoreleasePoolPop(v0);
}

void sub_183EF0690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:nn180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    id v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    id v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void *std::__hash_table<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,std::__unordered_map_hasher<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyHasher,LSSessionKeyComparator,true>,std::__unordered_map_equal<LSSessionKey,std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>,LSSessionKeyComparator,LSSessionKeyHasher,true>,std::allocator<std::__hash_value_type<LSSessionKey,LSQuickSessionAvailabilityState>>>::__emplace_unique_key_args<LSSessionKey,std::piecewise_construct_t const&,std::tuple<LSSessionKey&&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  if (*((_BYTE *)a2 + 4)) {
    unint64_t v7 = 1LL;
  }
  else {
    unint64_t v7 = *a2;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    id v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *(void *)a2;
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v7)
          {
            uint64_t v14 = v11[2];
            if ((v14 & 0x100000000LL) != 0)
            {
              if ((v12 & 0x100000000LL) != 0) {
                return v11;
              }
            }

            else if ((v12 & 0x100000000LL) == 0 && (_DWORD)v14 == (_DWORD)v12)
            {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= v8) {
                v13 %= v8;
              }
            }

            else
            {
              v13 &= v8 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v11 = operator new(0x30uLL);
  void *v11 = 0LL;
  v11[1] = v7;
  uint64_t v15 = **a4;
  void v11[4] = 0LL;
  v11[5] = 0LL;
  v11[2] = v15;
  void v11[3] = 0LL;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1LL;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v22 = *(void *)a1;
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *v11 = *v23;
LABEL_46:
    *int v23 = v11;
    goto LABEL_47;
  }

  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v24 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }

    else
    {
      v24 &= v8 - 1;
    }

    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_46;
  }

void sub_183EF097C(_Unwind_Exception *a1)
{
}

void OUTLINED_FUNCTION_4_3(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void OUTLINED_FUNCTION_8_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void OUTLINED_FUNCTION_10_0(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a3 = a1;
  *(void *)(a3 + 4) = a4;
  *(_WORD *)(a3 + 12) = 2048;
  *(void *)(a3 + 14) = v4;
}

void OUTLINED_FUNCTION_11_0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_183EF0A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF0CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF0EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF1044( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_183EF11C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL47dispatchEnumerateAndRegisterWithDiagnosticFramet_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_UNEXPECTEDLY__,  v33,  v34,  v35,  v36);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_STORE_FAILED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_WAS_CORRUPT__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_DID_NOT_EXIST__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_ALLOC_FAILED_DURING_STORE_CREATION__( __int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_STORE_CREATION_FAILED_UNEXPECTEDLY__( __int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_CREATION_FROM_FRESH_FAILED__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_THE_DATABASE_WAS_CREATED_FRESH__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

uint64_t __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_UNEXPECTEDLY__(__int16 a1)
{
  return _LSServer_LSEnumerateAndRegisterAllBundles(0LL, a1);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }

  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)v28, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }

    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }

    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  uint64_t v29 = a1 + 16;
  *(void *)uint64_t i = 0LL;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(a3 + 16) = 0LL;
  char v30 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1LL;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }

    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }

  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_41:
    void *v25 = i;
    goto LABEL_42;
  }

  *(void *)uint64_t i = *v17;
  *uint64_t v17 = i;
  *(void *)(v24 + 8 * v3) = v17;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }

    else
    {
      v26 &= v11 - 1;
    }

    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }

void sub_183EF15D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::equal_to<std::string>::operator()[abi:nn180100]( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }

  while (v9 == v11 && v14);
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]( uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69LL
          * (v6 ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69LL * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297LL * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273LL * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273LL * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64LL;
      }

      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69LL * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69LL
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297LL
                  * ((0x9DDFEA08EB382D69LL
                    * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69LL * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }

    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }

  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }

  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100]( _DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }

    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69LL * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69LL * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }

  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100]( void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273LL * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (v5 ^ (v4 - 0x3C5A37A36834CED9LL * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100]( void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9LL * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127LL * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1LL
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:nn180100]( uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_183EF1B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseContextStartAccessing(const unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (LaunchServices::DatabaseContext *)objc_claimAutoreleasedReturnValue();
  uint64_t started = _LSDatabaseContextStartAccessingWithDomain(v5, a2, a3);

  return started;
}

void sub_183EF1C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDatabaseContextStopAccessing(LaunchServices::DatabaseContext *a1)
{
  PerThreadStateReference = (LaunchServices::DatabaseContext *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  LaunchServices::DatabaseContext::getLog(PerThreadStateReference);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    _LSDatabaseContextStopAccessing_cold_1((uint64_t)PerThreadStateReference, v2);
  }

  uint64_t v3 = *((void *)PerThreadStateReference + 4);
  if (v3 <= 0)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    [NSString stringWithUTF8String:"void _LSDatabaseContextStopAccessing()"];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    [v7 handleFailureInFunction:v8 file:@"LSDatabaseContext.mm" lineNumber:220 description:@"Called +stopAccessing when not accessing the database. This is a bug in the Launch Services client."];

    uint64_t v3 = *((void *)PerThreadStateReference + 4);
  }

  uint64_t v4 = v3 - 1;
  *((void *)PerThreadStateReference + 4) = v4;
  if (!v4)
  {
    if (*(void *)PerThreadStateReference)
    {
      if (*((_BYTE *)PerThreadStateReference + 16)) {
        _LSContextDestroy(*(void ***)PerThreadStateReference);
      }
    }

    uint64_t v5 = (void *)*((void *)PerThreadStateReference + 1);
    *(void *)PerThreadStateReference = 0LL;
    *((void *)PerThreadStateReference + 1) = 0LL;

    *((_BYTE *)PerThreadStateReference + 16) = 0;
    uint64_t v6 = (void *)*((void *)PerThreadStateReference + 3);
    *((void *)PerThreadStateReference + 3) = 0LL;
  }

void sub_183EF1DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDatabaseContextStartAccessingWithDomain( LaunchServices::DatabaseContext *a1, uint64_t a2, void *a3)
{
  v34[1] = *MEMORY[0x1895F89C0];
  PerThreadStateReference = (LaunchServices::DatabaseContext *)LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  LaunchServices::DatabaseContext::getLog(PerThreadStateReference);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    _LSDatabaseContextStartAccessingWithDomain_cold_1((uint64_t)PerThreadStateReference, a2, v7);
  }

  uint64_t v8 = *((void *)PerThreadStateReference + 4);
  if (v8 == 0x7FFFFFFFFFFFFFFFLL)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSDatabaseContextStartAccessingWithDomain(_LSDServiceDomain *const __strong _Nonnull, LSDatabaseContextAcces sOptions, NSError *__autoreleasing * _Nullable)");
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
    [v27 handleFailureInFunction:v28 file:@"LSDatabaseContext.mm" lineNumber:164 description:@"Called +startAccessingReturningError: a ludicrous number of times without calling +stopAccessing. This is likely a bug in the Launch Services client."];

    uint64_t v8 = *((void *)PerThreadStateReference + 4);
  }

  if (v8 < 1)
  {
    int v15 = -[_LSDServiceDomain resolvedDomainUID]((uint64_t)a1);
    int v16 = [(id)__LSDefaultsGetSharedInstance() proxyUIDForCurrentEffectiveUID];
    if (v15
      && v16 != v15
      && v16
      && (uint64_t v17 = _LSGetAuditTokenForSelf(),
          !_LSCheckEntitlementForAuditToken(v17, @"com.apple.private.xpc.launchd.per-user-lookup")))
    {
      if (a3)
      {
        uint64_t v29 = *MEMORY[0x189607490];
        uint64_t v30 = @"This process is not privileged enough to access XPC services on another user account.";
        [MEMORY[0x189603F68] dictionaryWithObjects:&v30 forKeys:&v29 count:1];
        unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  13LL,  (uint64_t)"_LSDatabaseContextStartAccessingWithDomain",  187LL,  v24);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

    else
    {
      if (LaunchServices::Database::Context::_get(PerThreadStateReference, (_LSDServiceDomain *)a1, a2))
      {
        uint64_t result = 1LL;
        *((void *)PerThreadStateReference + 4) = 1LL;
        return result;
      }

      if (a3)
      {
        +[_LSDServiceDomain defaultServiceDomain]();
        uint64_t v20 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
        uint64_t v21 = LaunchServices::Database::Context::_get(PerThreadStateReference, v20, 0LL);

        if (v21) {
          id v22 = 0LL;
        }
        else {
          id v22 = *((id *)PerThreadStateReference + 3);
        }
        *a3 = v22;
      }

      if (*(void *)PerThreadStateReference && *((_BYTE *)PerThreadStateReference + 16)) {
        _LSContextDestroy(*(void ***)PerThreadStateReference);
      }
      uint64_t v25 = (void *)*((void *)PerThreadStateReference + 1);
      *(void *)PerThreadStateReference = 0LL;
      *((void *)PerThreadStateReference + 1) = 0LL;

      *((_BYTE *)PerThreadStateReference + 16) = 0;
      uint64_t v26 = (void *)*((void *)PerThreadStateReference + 3);
      *((void *)PerThreadStateReference + 3) = 0LL;
    }

    return 0LL;
  }

  if ((a2 & 2) != 0)
  {
    if (a3)
    {
      uint64_t v33 = *MEMORY[0x189607490];
      v34[0] = @"LSDatabaseContextAccessOptionAlwaysUpdate cannot be specified while the database is already being accessed.";
      [MEMORY[0x189603F68] dictionaryWithObjects:v34 forKeys:&v33 count:1];
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  16LL,  (uint64_t)"_LSDatabaseContextStartAccessingWithDomain",  171LL,  v19);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }

    return 0LL;
  }

  uint64_t v9 = -[_LSDServiceDomain resolvedSessionKey]((uint64_t)a1);
  if (*(void *)PerThreadStateReference)
  {
    uint64_t v10 = v9;
    uint64_t SessionKey = _LSDatabaseGetSessionKey(**(void **)PerThreadStateReference);
    if ((v10 & 0x100000000LL) != 0)
    {
      if ((SessionKey & 0x100000000LL) != 0) {
        goto LABEL_36;
      }
    }

    else
    {
      BOOL v12 = (SessionKey & 0x100000000LL) == 0 && (_DWORD)v10 == (_DWORD)SessionKey;
      char v13 = v12;
      if (!v12 && ((SessionKey | v10) & 0x100000000LL) == 0)
      {
        int v14 = [(id)__LSDefaultsGetSharedInstance() proxyUIDForUID:SessionKey];
        goto LABEL_31;
      }

      if ((v13 & 1) != 0)
      {
LABEL_36:
        ++*((void *)PerThreadStateReference + 4);
        return 1LL;
      }
    }
  }

void sub_183EF22A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::DatabaseContext::getLog(LaunchServices::DatabaseContext *this)
{
  return (id)LaunchServices::DatabaseContext::getLog(void)::result;
}

id uidPointerToDomain(const unsigned int *a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)-[_LSDServiceDomain initWithUID:](objc_alloc(&OBJC_CLASS____LSDServiceDomain), *a1);
  }

  else
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v1;
}

void _LSDatabaseContextAccessWithDomainUsingBlock( LaunchServices::DatabaseContext *a1, uint64_t a2, uint64_t a3)
{
  id v7 = 0LL;
  uint64_t started = _LSDatabaseContextStartAccessingWithDomain(a1, a2, &v7);
  id v5 = v7;
  uint64_t v6 = (LaunchServices::DatabaseContext *)(*(uint64_t (**)(uint64_t, uint64_t, id))(a3 + 16))(a3, started, v5);
  if ((_DWORD)started) {
    _LSDatabaseContextStopAccessing(v6);
  }
}

void sub_183EF23D4(_Unwind_Exception *a1)
{
  if ((v2 & 1) != 0) {
    objc_end_catch();
  }

  _Unwind_Resume(a1);
}

void _LSDatabaseContextAccessUsingBlock(const unsigned int *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (LaunchServices::DatabaseContext *)objc_claimAutoreleasedReturnValue();
  _LSDatabaseContextAccessWithDomainUsingBlock(v5, a2, a3);
}

void sub_183EF2458( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void _LSDatabaseContextAccessContextUsingBlock(LaunchServices::DatabaseContext *a1, uint64_t a2)
{
  PerThreadStateReference = LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  if ((uint64_t)PerThreadStateReference[4] >= 1)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSDatabaseContextAccessContextUsingBlock(LSContext * _Nonnull, void (^const __strong _Nonnull)())");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    [v9 handleFailureInFunction:v10 file:@"LSDatabaseContext.mm" lineNumber:251 description:@"Already accessing a database context when asked to access one explicitly. The results of this operation are undefined."];
  }

  uint64_t v11 = (void **)a1;
  id v12 = 0LL;
  char v13 = 0;
  id v14 = 0LL;
  LaunchServices::Database::Context::operator=((uint64_t)PerThreadStateReference, (uint64_t)&v11);
  if (v11 && v13) {
    _LSContextDestroy(v11);
  }
  id v5 = v12;
  uint64_t v11 = 0LL;
  id v12 = 0LL;

  char v13 = 0;
  id v6 = v14;
  id v14 = 0LL;

  PerThreadStateReference[4] = 1LL;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  PerThreadStateReference[4] = 0LL;
  if (*PerThreadStateReference && *((_BYTE *)PerThreadStateReference + 16)) {
    _LSContextDestroy((void **)*PerThreadStateReference);
  }
  id v7 = (void *)PerThreadStateReference[1];
  void *PerThreadStateReference = 0LL;
  PerThreadStateReference[1] = 0LL;

  *((_BYTE *)PerThreadStateReference + 16) = 0;
  uint64_t v8 = (void *)PerThreadStateReference[3];
  PerThreadStateReference[3] = 0LL;
}

void sub_183EF25B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::Database::Context::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)a1;
  if (v4 && *(_BYTE *)(a1 + 16)) {
    _LSContextDestroy(v4);
  }
  id v5 = *(void **)(a1 + 8);
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;

  id v6 = *(void **)(a1 + 24);
  *(_BYTE *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0LL;

  if (*(void *)a2)
  {
    *(void *)a1 = a1 + 8;
    if (*(_BYTE *)(a2 + 16))
    {
      id v7 = (id *)(a2 + 8);
    }

    else
    {
      id v7 = *(id **)a2;
      if (!*(void *)a2)
      {
LABEL_9:
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        goto LABEL_10;
      }
    }

    objc_storeStrong((id *)(a1 + 8), *v7);
    goto LABEL_9;
  }

void *_LSDatabaseContextSetDetachProxyObjects(LaunchServices::DatabaseContext *a1)
{
  char v1 = a1 ^ 1;
  uint64_t result = LaunchServices::DatabaseContext::getPerThreadStateReference(a1);
  *((_BYTE *)result + 40) = v1;
  return result;
}

void sub_183EF2814( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
}

void sub_183EF28F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id getXPCObjectForNodeAndStore(FSNode *a1, const __CSStore *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v12 = 0LL;
  LODWORD(a1) = -[FSNode getFileSystemRepresentation:error:](a1, "getFileSystemRepresentation:error:", string, &v12);
  id v4 = v12;
  if ((_DWORD)a1)
  {
    xpc_dictionary_set_string(v3, "path", string);
  }

  else
  {
    _LSDefaultLog();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      getXPCObjectForNodeAndStore((uint64_t)v4, v5, v6);
    }
  }

  CFTypeRef cf = 0LL;
  _CSStoreCreateXPCRepresentation();
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    xpc_dictionary_set_value(v3, "store", v7);
  }

  else
  {
    _LSDefaultLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      getXPCObjectForNodeAndStore((id *)&cf, v8);
    }
  }

  pid_t v9 = getpid();
  xpc_dictionary_set_uint64(v3, "insecureProcessID", v9);
  if (cf) {
    CFRelease(cf);
  }

  return v3;
}

void sub_183EF2A88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

void sub_183EF2B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF2C0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EF2CC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183EF2FE8(_Unwind_Exception *a1)
{
  if (v2) {
    CFRelease(v2);
  }

  _Unwind_Resume(a1);
}

void sub_183EF3110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id systemIfExistsElseDefaultServiceDomain(void)
{
  if (xpc_user_sessions_enabled() && _os_feature_enabled_impl())
  {
    +[_LSDServiceDomain systemSessionDomain]();
    dispatch_queue_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    dispatch_queue_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v0;
}

void sub_183EF31B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EF3210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF3268( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t ___ZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEv_block_invoke()
{
  return pthread_key_create( (pthread_key_t *)&LaunchServices::DatabaseContext::getPerThreadStateReference(void)::key,  (void (__cdecl *)(void *))_ZZZN14LaunchServices15DatabaseContextL26getPerThreadStateReferenceEvEUb_EN3__08__invokeEPv);
}

void ___ZN14LaunchServices15DatabaseContextL6getLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "db-spi");
  char v1 = (void *)LaunchServices::DatabaseContext::getLog(void)::result;
  LaunchServices::DatabaseContext::getLog(void)::uint64_t result = (uint64_t)v0;
}

void *_LSContextCreateVisualizer(id *a1)
{
  v95[3] = *(_DWORD **)MEMORY[0x1895F89C0];
  unsigned __int8 v52 = (void *)[objc_alloc(MEMORY[0x18960DD78]) initWithStore:*((void *)*a1 + 1)];
  char v2 = (uint64_t *)operator new(8uLL);
  uint64_t *v2 = (uint64_t)*a1;
  xpc_object_t v3 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:v2 length:8 deallocator:&__block_literal_global_21];
  [v52 userInfo];
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 setObject:v3 forKeyedSubscript:@"Context"];

  uint64_t v82 = 0LL;
  unint64_t v83 = &v82;
  uint64_t v84 = 0x4812000000LL;
  uint64_t v85 = __Block_byref_object_copy__13;
  uint64_t v86 = __Block_byref_object_dispose__13;
  unsigned int v87 = "";
  std::stringbuf::string_type __p = 0LL;
  uint64_t v89 = 0LL;
  unint64_t v90 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v75 = &v74;
  uint64_t v76 = 0x5812000000LL;
  int v77 = __Block_byref_object_copy__11;
  uint64_t v78 = __Block_byref_object_dispose__12;
  memset(v79, 0, sizeof(v79));
  uint64_t v80 = 0LL;
  int v81 = 1065353216;
  int CatalogTable = _CSStoreGetCatalogTable();
  int v6 = CatalogTable;
  id v7 = v89;
  if ((unint64_t)v89 >= v90)
  {
    pid_t v9 = (char *)__p;
    uint64_t v10 = (v89 - (_BYTE *)__p) >> 2;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v90 - (void)__p;
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)&v90, v13);
      pid_t v9 = (char *)__p;
      id v7 = v89;
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    int v15 = &v14[4 * v10];
    int v16 = &v14[4 * v13];
    *(_DWORD *)int v15 = v6;
    uint64_t v8 = v15 + 4;
    while (v7 != v9)
    {
      int v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }

    std::stringbuf::string_type __p = v15;
    uint64_t v89 = v8;
    unint64_t v90 = (unint64_t)v16;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v89 = CatalogTable;
    uint64_t v8 = v7 + 4;
  }

  uint64_t v89 = v8;
  uint64_t v68 = MEMORY[0x1895F87A8];
  uint64_t v69 = 3221225472LL;
  id v70 = ___LSContextCreateVisualizer_block_invoke_13;
  int v71 = &unk_189D75798;
  id v72 = &v82;
  uint64_t v73 = &v74;
  _CSStoreEnumerateTables();
  memset(v66, 0, sizeof(v66));
  int v67 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( (uint64_t)v66,  0x80uLL);
  LODWORD(v95[0]) = _CSStoreGetCatalogTable();
  *(void *)&__int128 v91 = v95;
  uint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  (unsigned int *)v95,  (uint64_t)&std::piecewise_construct,  (_DWORD **)&v91);
  v18[3] = 0LL;
  void v18[4] = LaunchServices::DatabaseVisualization::writeTableDescription;
  void v18[5] = 0LL;
  for (uint64_t i = 120LL; i != 1576; i += 104LL)
  {
    uint64_t v20 = *v2;
    _LSBindingMapGetVisualizationFunctions(&v91);
    v95[0] = (_DWORD *)(v20 + 16 + i);
    uint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
    *(_OWORD *)(v21 + 3) = v91;
    v21[5] = v92;
  }

  _LSBundleGetVisualizationFunctions((id (**)(void **, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*v2 + 20);
  id v22 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v22 + 3) = v91;
  id v22[5] = v92;
  _LSAliasGetVisualizationFunctions((id (**)(void **, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*v2 + 1600);
  uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v23 + 3) = v91;
  v23[5] = v92;
  _UTTypeGetVisualizationFunctions((id (**)(LaunchServices::UTIs *, LSContext *))&v91);
  v95[0] = (_DWORD *)(*v2 + 32);
  unint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v24 + 3) = v91;
  id v24[5] = v92;
  _LSPlistGetVisualizationFunctions(&v91);
  v95[0] = (_DWORD *)(*v2 + 1616);
  uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v25 + 3) = v91;
  v25[5] = v92;
  _LSClaimGetVisualizationFunctions((unsigned int *(**)(LaunchServices::LocalizedString **, LSContext *))&v91);
  v95[0] = (_DWORD *)(*v2 + 24);
  uint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v26 + 3) = v91;
  v26[5] = v92;
  LSHandlerPref::GetVisualizationFunctions((id (**)(LSHandlerPref **, LSContext *, _LSDatabase *))&v91);
  v95[0] = (_DWORD *)(*v2 + 1592);
  uint64_t v27 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v27 + 3) = v91;
  v27[5] = v92;
  _LSContainerGetVisualizationFunctions((int *(**)(void **, LSContext *))&v91);
  v95[0] = (_DWORD *)(*v2 + 1596);
  uint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v28 + 3) = v91;
  v28[5] = v92;
  _LSExtensionPointGetVisualizationFunctions((id (**)(LaunchServices::ExtensionPoints *, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*v2 + 1608);
  uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v29 + 3) = v91;
  v29[5] = v92;
  _LSPluginGetVisualizationFunctions((unsigned int *(**)(LaunchServices::Plugins *, LSContext *, int))&v91);
  v95[0] = (_DWORD *)(*v2 + 1604);
  uint64_t v30 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v30 + 3) = v91;
  v30[5] = v92;
  _LSBindingListGetVisualizationFunctions(&v91);
  v95[0] = (_DWORD *)(*v2 + 1612);
  uint64_t v31 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v31 + 3) = v91;
  v31[5] = v92;
  LaunchServices::LocalizedString::GetVisualizationFunctions((id (**)(LaunchServices::LocalizedString **, LSContext *, _LSDatabase *))&v91);
  v95[0] = (_DWORD *)(*v2 + 1620);
  uint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v32 + 3) = v91;
  v32[5] = v92;
  LaunchServices::CanonicalString::GetVisualizationFunctions((id (**)(LaunchServices::CanonicalString **, LSContext *, _LSDatabase *))&v91);
  v95[0] = (_DWORD *)(*v2 + 1624);
  uint64_t v33 = std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>( (uint64_t)v66,  v95[0],  (uint64_t)&std::piecewise_construct,  v95);
  *(_OWORD *)(v33 + 3) = v91;
  v33[5] = v92;
  _LSDefaultLog();
  uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);

  if (v35)
  {
    *(void *)&__int128 v91 = MEMORY[0x1895F87A8];
    *((void *)&v91 + 1) = 3321888768LL;
    uint64_t v92 = ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke;
    v93 = &__block_descriptor_72_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE_e35_v40__0I8____CFString__12r_v20I28_32l;
    std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map((uint64_t)v94, (uint64_t)v66);
    _CSStoreEnumerateTables();
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v94);
  }

  uint64_t v36 = (unsigned int *)v83[6];
  for (uint64_t j = (unsigned int *)v83[7]; v36 != j; ++v36)
  {
    unsigned int v65 = *v36;
    unint64_t v38 = std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>( v66,  &v65);
    if (v38)
    {
      uint64_t v40 = v38[3];
      uint64_t v39 = v38[4];
      uint64_t v41 = v38[5];
      unsigned int v42 = v65;
      if (v42 == _CSStoreGetCatalogTable()
        || (_LSBindingMapGetVisualizationFunctions(&v91), v39 == *((void *)&v91 + 1)))
      {
        int v47 = 0LL;
      }

      else
      {
        *(void *)&__int128 v91 = &v65;
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned int,NSString * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,NSString * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( (uint64_t)(v75 + 6),  &v65,  (uint64_t)&std::piecewise_construct,  (_DWORD **)&v91)[3];
        id v44 = v43;
        if (v43)
        {
          id v45 = (void *)NSString;
          [v43 lowercaseString];
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue();
          [v45 stringWithFormat:@"%@ id", v46];
          int v47 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }

        else
        {
          int v47 = @"id";
        }
      }

      id v49 = objc_alloc_init(MEMORY[0x18960DD80]);
      __int128 v50 = v49;
      if (v40)
      {
        v61[0] = MEMORY[0x1895F87A8];
        v61[1] = 3221225472LL;
        v61[2] = ___LSContextCreateVisualizer_block_invoke_20;
        v61[3] = &__block_descriptor_72_e39___NSString_24__0___CSVisualizer_8I16I20l;
        v61[4] = v40;
        v61[5] = v39;
        v61[6] = v41;
        char v62 = 1;
        id v63 = v2;
        [v49 setGetSummary:v61];
      }

      if (v39)
      {
        v53[0] = MEMORY[0x1895F87A8];
        v53[1] = 3221225472LL;
        void v53[2] = ___LSContextCreateVisualizer_block_invoke_2;
        v53[3] = &unk_189D757E0;
        __int16 v55 = v2;
        std::vector<unsigned int> v54 = v47;
        uint64_t v56 = v40;
        uint64_t v57 = v39;
        uint64_t v58 = v41;
        char v59 = 1;
        *(_DWORD *)uint64_t v60 = *(_DWORD *)v64;
        *(_DWORD *)&v60[3] = *(_DWORD *)&v64[3];
        [v50 setGetDescription:v53];
      }

      [v52 setFunctions:v50 forTable:v65];
    }

    else
    {
      _LSDefaultLog();
      int v47 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v47, OS_LOG_TYPE_DEBUG))
      {
        id v48 = (void *)_CSStoreCopyTableName();
        _LSContextCreateVisualizer_cold_1(v48, (uint8_t *)v95, (_DWORD **)((char *)v95 + 4), (os_log_s *)v47);
      }
    }
  }

  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v66);
  _Block_object_dispose(&v74, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table((uint64_t)&v79[8]);
  _Block_object_dispose(&v82, 8);
  if (__p)
  {
    uint64_t v89 = (char *)__p;
    operator delete(__p);
  }

  return v52;
}

void sub_183EF3C98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a65 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__13(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  char v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

uint64_t __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::__hash_table( a1 + 48,  (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__12(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::~__hash_table(a1 + 48);
}

void sub_183EF40F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  LaunchServices::DumpWriter::~DumpWriter((id *)va);
  _Unwind_Resume(a1);
}

void _LSServer_BeginProvidingVisualizationArchives()
{
  if ([(id)__LSDefaultsGetSharedInstance() isAppleInternal])
  {
    if (_LSServer_BeginProvidingVisualizationArchives::onceToken != -1) {
      dispatch_once(&_LSServer_BeginProvidingVisualizationArchives::onceToken, &__block_literal_global_35);
    }
    os_log_t v0 = (void *)MEMORY[0x18960DD70];
    [(id)__LSDefaultsGetSharedInstance() serviceNameForConnectionType:9];
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "beginProvidingVisualizationArchivesWithMachServiceName:queue:creatingVisualizersWithBlock:");
  }

void sub_183EF41EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EF430C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
}

{
}

void sub_183EF44B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  CFRelease(v5);
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);

  _Unwind_Resume(a1);
}

uint64_t _LSDisplayHumanReadableData( uint64_t *a1, FILE *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v12 = a3;
  id v28 = a4;
  id v30 = a5;
  int CatalogTable = _CSStoreGetCatalogTable();
  else {
    BOOL v14 = 0;
  }
  if (!v14 || (a6 & 0x12) != 0) {
    goto LABEL_8;
  }
  unint64_t v24 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x189607928]);
  if (!v24) {
    goto LABEL_8;
  }
  LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v35, (_LSDatabase *)*a1, v24);
  LOBYTE(v34.__begin_) = 0;
  _LSDatabaseDisplayHeader((CSStore2::AttributedStringWriter *)v35, (void *)*a1, &v34);
  BOOL v25 = LOBYTE(v34.__begin_) || _LSGetNSErrorFromOSStatusImpl(-10817, a7, (uint64_t)"_LSDisplayHumanReadableData", 267LL);
  -[NSMutableAttributedString cs_writeToFileHandle:](v24, "cs_writeToFileHandle:", a2);
  fputc(10, a2);
  LaunchServices::DumpWriter::~DumpWriter(v35);

  if (!v25)
  {
    uint64_t v22 = 0LL;
  }

  else
  {
LABEL_8:
    if ((a6 & 2) != 0) {
      Visualizer = (void *)[objc_alloc(MEMORY[0x18960DD78]) initWithStore:*(void *)(*a1 + 8) useStandardTableFunctions:0];
    }
    else {
      Visualizer = _LSContextCreateVisualizer((id *)a1);
    }
    int v17 = Visualizer;
    if (!Visualizer)
    {
      [MEMORY[0x1896077D8] currentHandler];
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSDisplayHumanReadableData(LSContext * _Nonnull, FILE * _Nonnull, NSSet<NSString *> *__strong _Nullable, N SSet<NSString *> *__strong _Nullable, NSPredicate *__strong _Nullable, _LSDisplayDataOptions, NSError *__autorel easing * _Nullable)");
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      [v26 handleFailureInFunction:v27 file:@"LSDatabaseVisualization.mm" lineNumber:289 description:@"Failed to create database visualizer."];
    }

    [MEMORY[0x189607968] numberWithUnsignedInt:a6];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    [v17 userInfo];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    [v19 setObject:v18 forKeyedSubscript:@"Options"];

    v35[0] = 0LL;
    v35[1] = v35;
    v35[2] = (id)0x2020000000LL;
    char v36 = 1;
    if ((a6 & 0x10) != 0) {
      fputc(91, a2);
    }
    LaunchServices::DatabaseVisualization::getTablesToDisplay(a1, v12, a6, &v34);
    std::vector<unsigned int>::pointer begin = v34.__begin_;
    std::vector<unsigned int>::pointer end = v34.__end_;
    if (v34.__begin_ != v34.__end_)
    {
      do
      {
        id v31 = v17;
        id v32 = v28;
        id v33 = v30;
        _CSStoreEnumerateUnits();

        ++begin;
      }

      while (begin != end);
      std::vector<unsigned int>::pointer begin = v34.__begin_;
    }

    if (begin)
    {
      v34.__end_ = begin;
      operator delete(begin);
    }

    if ((a6 & 0x10) != 0) {
      fputc(93, a2);
    }
    _Block_object_dispose(v35, 8);

    uint64_t v22 = 1LL;
  }

  return v22;
}

void sub_183EF48B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, uint64_t a26, char a27)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DatabaseVisualization::shouldDumpTable(uint64_t *a1, void *a2, int a3, char a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (v7)
  {
    if ([v7 containsObject:@"*"])
    {
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v10 = (void *)_CSStoreCopyTableName();
      uint64_t v9 = [v8 containsObject:v10];
    }

    goto LABEL_9;
  }

  if (_CSStoreGetStringTable() == a3 || *(_DWORD *)(*a1 + 1612) == a3 || *(_DWORD *)(*a1 + 40) == a3)
  {
LABEL_7:
    uint64_t v9 = 0LL;
    goto LABEL_9;
  }

  int ArrayTable = _CSStoreGetArrayTable();
  if ((a4 & 1) != 0 || ArrayTable == a3)
  {
    if (ArrayTable == a3) {
      goto LABEL_7;
    }
    uint64_t v13 = *a1;
  }

  else
  {
    uint64_t v13 = *a1;
    if (*(_DWORD *)(*a1 + 1600) == a3) {
      goto LABEL_7;
    }
  }

  BOOL v14 = (_DWORD *)(v13 + 16);
  if (v14[400] == a3 || v14[401] == a3 || v14[402] == a3) {
    goto LABEL_7;
  }
  uint64_t v15 = 30LL;
  do
  {
    int v16 = v14[v15];
    uint64_t v9 = v16 != a3;
    if (v16 == a3) {
      break;
    }
    BOOL v17 = v15 == 368;
    v15 += 26LL;
  }

  while (!v17);
LABEL_9:

  return v9;
}

void sub_183EF4B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::DatabaseVisualization::getTablesToDisplay( uint64_t *a1@<X0>, void *a2@<X1>, char a3@<W2>, std::vector<unsigned int> *a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  id v6 = a2;
  uint64_t v7 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v26 = (const std::vector<unsigned int> *)&v25;
  uint64_t v27 = 0x4812000000LL;
  id v28 = __Block_byref_object_copy__13;
  uint64_t v29 = __Block_byref_object_dispose__13;
  id v30 = "";
  std::stringbuf::string_type __p = 0LL;
  id v32 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v8 = *a1 + 16;
  int v9 = *(_DWORD *)(*a1 + 1596);
  v34[0] = *(_DWORD *)(*a1 + 20);
  v34[1] = v9;
  uint64_t v35 = *(void *)(v8 + 1588);
  int v36 = *(_DWORD *)(v8 + 1576);
  do
  {
    int v10 = v34[v7];
    if (LaunchServices::DatabaseVisualization::shouldDumpTable(a1, v6, v10, a3))
    {
      unint64_t v11 = v26;
      std::vector<unsigned int>::pointer end = (char *)v26[2].__end_;
      value = v26[2].__end_cap_.__value_;
      if (end >= (char *)value)
      {
        std::vector<unsigned int>::pointer begin = v26[2].__begin_;
        uint64_t v16 = (end - (char *)begin) >> 2;
        unint64_t v17 = v16 + 1;
        uint64_t v18 = (char *)value - (char *)begin;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>( (uint64_t)&v26[2].__end_cap_,  v19);
          std::vector<unsigned int>::pointer begin = v11[2].__begin_;
          std::vector<unsigned int>::pointer end = (char *)v11[2].__end_;
        }

        else
        {
          uint64_t v20 = 0LL;
        }

        uint64_t v21 = (int *)&v20[4 * v16];
        int *v21 = v10;
        BOOL v14 = (unsigned int *)(v21 + 1);
        while (end != (char *)begin)
        {
          int v22 = *((_DWORD *)end - 1);
          end -= 4;
          *--uint64_t v21 = v22;
        }

        v11[2].__begin_ = (std::vector<unsigned int>::pointer)v21;
        v11[2].__end_ = v14;
        v11[2].__end_cap_.__value_ = (unsigned int *)&v20[4 * v19];
        if (begin) {
          operator delete(begin);
        }
      }

      else
      {
        *(_DWORD *)std::vector<unsigned int>::pointer end = v10;
        BOOL v14 = (unsigned int *)(end + 4);
      }

      v11[2].__end_ = v14;
    }

    ++v7;
  }

  while (v7 != 5);
  id v23 = v6;
  _CSStoreEnumerateTables();
  std::vector<LSBundleClass>::vector(a4, v26 + 2);

  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    id v32 = __p;
    operator delete(__p);
  }
}

void sub_183EF4DB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *__p, uint64_t a26)
{
  _Block_object_dispose(&a19, 8);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_183EF5390( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *__p, uint64_t a34)
{
  _Unwind_Resume(a1);
}

BOOL _LSDisplayMachineReadableData(id *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11 = a3;
  id v12 = a4;
  if ((a5 & 2) != 0) {
    Visualizer = (void *)[objc_alloc(MEMORY[0x18960DD78]) initWithStore:*((void *)*a1 + 1) useStandardTableFunctions:0];
  }
  else {
    Visualizer = _LSContextCreateVisualizer(a1);
  }
  BOOL v14 = Visualizer;
  if (!Visualizer)
  {
    [MEMORY[0x1896077D8] currentHandler];
    int v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "BOOL _LSDisplayMachineReadableData(LSContext * _Nonnull, FILE * _Nonnull, NSSet<NSString *> *__strong _Nullable, N SPredicate *__strong _Nullable, _LSDisplayDataOptions, NSError *__autoreleasing * _Nullable)");
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    [v22 handleFailureInFunction:v23 file:@"LSDatabaseVisualization.mm" lineNumber:326 description:@"Failed to create database visualizer."];
  }

  [MEMORY[0x189607968] numberWithUnsignedInt:a5];
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
  [v14 userInfo];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
  [v16 setObject:v15 forKeyedSubscript:@"Options"];

  unint64_t v17 = (void *)[objc_alloc(MEMORY[0x18960DD70]) initWithVisualizer:v14 fileHandle:a2 closeWhenDone:0 error:a6];
  uint64_t v18 = v17;
  if (v17)
  {
    [v17 setUnitDescriptionPredicate:v12];
    LaunchServices::DatabaseVisualization::getTablesToDisplay((uint64_t *)a1, v11, a5, &v24);
    std::vector<unsigned int>::pointer begin = v24.__begin_;
    std::vector<unsigned int>::pointer end = v24.__end_;
    if (v24.__begin_ != v24.__end_)
    {
      do
        [v18 writeAllUnitsInTable:*begin++ block:0];
      while (begin != end);
      std::vector<unsigned int>::pointer begin = v24.__begin_;
    }

    if (begin)
    {
      v24.__end_ = begin;
      operator delete(begin);
    }

    [v18 finishWriting];
  }

  return v18 != 0LL;
}

void sub_183EF56BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

BOOL _LSDisplayHumanReadableCopyOfMachineReadableData( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return _LSGetNSErrorFromOSStatusImpl(-4, a7, (uint64_t)"_LSDisplayHumanReadableCopyOfMachineReadableData", 511LL);
}

uint64_t LaunchServices::DatabaseVisualization::writeTableDescription( void **this, LSContext *a2, int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  id v6 = (char *)*this + 16;
  if (*v6 == a3)
  {
    _LSDatabaseDisplayHeader(a4, *this, 0LL);
  }

  else
  {
    if (*((_DWORD *)*this + 10) != a3)
    {
      uint64_t v7 = 30LL;
      while (v6[v7] != a3)
      {
        v7 += 26LL;
        if (v7 == 394) {
          return 0LL;
        }
      }
    }

    int v9 = (NSAttributedString *)_CSMapCopyDebugDescription();
    CSStore2::AttributedStringWriter::attributedString(a4, v9);
  }

  return 1LL;
}

void sub_183EF582C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke( uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6 = a2;
  if (!std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::find<unsigned int>( (void *)(a1 + 32),  &v6))
  {
    _LSDefaultLog();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      ___ZN14LaunchServices21DatabaseVisualizationL14getAllHandlersEP9LSContext_block_invoke_cold_1(a3, v4, v5);
    }
  }

uint64_t __copy_helper_block_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE( uint64_t a1, uint64_t a2)
{
  return std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map(a1 + 32, a2 + 32);
}

uint64_t __destroy_helper_block_ea8_32c130_ZTSNSt3__113unordered_mapIj38_LSDatabaseTableVisualizationFunctionsNS_4hashIjEENS_8equal_toIjEENS_9allocatorINS_4pairIKjS1_EEEEEE( uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 32);
}

uint64_t std::unordered_map<unsigned int,_LSDatabaseTableVisualizationFunctions>::unordered_map( uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,_LSDatabaseTableVisualizationFunctions>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,_LSDatabaseTableVisualizationFunctions> const&>( a1,  i + 4,  (_OWORD *)i + 1);
  return a1;
}

void sub_183EF5914(_Unwind_Exception *a1)
{
}

void ___ZN14LaunchServices21DatabaseVisualizationL18getTablesToDisplayEP9LSContextP5NSSetIP8NSStringEj_block_invoke( uint64_t a1, int a2)
{
  uint64_t v5 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL);
  id v4 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 56LL);
  while (v5 != v4)
  {
    if (*v5 == a2) {
      goto LABEL_6;
    }
    ++v5;
  }

  uint64_t v5 = *(_DWORD **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 56LL);
LABEL_6:
  if (v4 == v5
    && LaunchServices::DatabaseVisualization::shouldDumpTable( *(uint64_t **)(a1 + 48),  *(void **)(a1 + 32),  a2,  *(_DWORD *)(a1 + 56)))
  {
    unsigned int v6 = *(void **)(*(void *)(a1 + 40) + 8LL);
    uint64_t v7 = (int *)v6[7];
    unint64_t v8 = v6[8];
    if ((unint64_t)v7 >= v8)
    {
      int v10 = (int *)v6[6];
      uint64_t v11 = v7 - v10;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v6 + 8), v14);
        int v10 = (int *)v6[6];
        uint64_t v7 = (int *)v6[7];
      }

      else
      {
        uint64_t v15 = 0LL;
      }

      uint64_t v16 = (int *)&v15[4 * v11];
      unint64_t v17 = &v15[4 * v14];
      *uint64_t v16 = a2;
      int v9 = v16 + 1;
      while (v7 != v10)
      {
        int v18 = *--v7;
        *--uint64_t v16 = v18;
      }

      void v6[6] = v16;
      v6[7] = v9;
      v6[8] = v17;
      if (v10) {
        operator delete(v10);
      }
    }

    else
    {
      *uint64_t v7 = a2;
      int v9 = v7 + 1;
    }

    v6[7] = v9;
  }

__n128 __Block_byref_object_copy__54(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
  char v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void ___ZN14LaunchServices21DatabaseVisualizationL20writeUnitDescriptionEP7__sFILEjjP18NSAttributedStringP5NSSetIP8NSStringEP11NSPredicatejPb_block_invoke( uint64_t a1, void *a2, NSUInteger a3, NSUInteger a4, void *a5, NSUInteger a6, NSUInteger a7, _BYTE *a8)
{
  id v29 = a2;
  id v15 = a5;
  if ([*(id *)(a1 + 32) containsObject:v29])
  {
    v30.id location = a3;
    v30.CFIndex length = a4;
    v31.id location = a6;
    v31.CFIndex length = a7;
    NSRange v16 = NSUnionRange(v30, v31);
    unint64_t v17 = *(void **)(*(void *)(a1 + 40) + 8LL);
    int v18 = (NSRange *)v17[7];
    unint64_t v19 = v17[8];
    if ((unint64_t)v18 >= v19)
    {
      uint64_t v21 = (NSRange *)v17[6];
      uint64_t v22 = v18 - v21;
      unint64_t v23 = v22 + 1;
      uint64_t v24 = v19 - (void)v21;
      if (v24 >> 3 > v23) {
        unint64_t v23 = v24 >> 3;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        uint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<unsigned int,NSUUID * {__strong}>>>( (uint64_t)(v17 + 8),  v25);
        uint64_t v21 = (NSRange *)v17[6];
        int v18 = (NSRange *)v17[7];
      }

      else
      {
        uint64_t v26 = 0LL;
      }

      uint64_t v27 = (NSRange *)&v26[16 * v22];
      id v28 = &v26[16 * v25];
      NSRange *v27 = v16;
      uint64_t v20 = v27 + 1;
      if (v18 != v21)
      {
        do
        {
          v27[-1] = v18[-1];
          --v27;
          --v18;
        }

        while (v18 != v21);
        uint64_t v21 = (NSRange *)v17[6];
      }

      v17[6] = v27;
      v17[7] = v20;
      v17[8] = v28;
      if (v21) {
        operator delete(v21);
      }
    }

    else
    {
      NSRange *v18 = v16;
      uint64_t v20 = v18 + 1;
    }

    v17[7] = v20;
    if (*(void *)(a1 + 48) == 1LL) {
      *a8 = 1;
    }
  }
}

void sub_183EF5C0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices21DatabaseVisualizationL34getPropertyListFromUnitDescriptionEjjP18NSAttributedStringP5NSSetIP8NSStringE_block_invoke( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  id v14 = a2;
  id v11 = a5;
  unint64_t v12 = *(void **)(a1 + 32);
  if (!v12 || [v12 containsObject:v14])
  {
    [v11 string];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:v14];
  }
}

void sub_183EF5CC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,NSString * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,NSString * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,NSString * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>( uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }

    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      id v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7) {
              return v11;
            }
          }

          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }

            else
            {
              v12 &= v8 - 1;
            }

            if (v12 != v4) {
              break;
            }
          }

          id v11 = (void *)*v11;
        }

        while (v11);
      }
    }
  }

  uint64_t v13 = (void *)(a1 + 16);
  id v11 = operator new(0x20uLL);
  void *v11 = 0LL;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1LL;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }

    else
    {
      unint64_t v4 = ((_DWORD)v8 - 1) & v7;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v11 = *v21;
LABEL_38:
    void *v21 = v11;
    goto LABEL_39;
  }

  void *v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8LL);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }

    else
    {
      v22 &= v8 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_183EF5F20(_Unwind_Exception *a1)
{
}

void sub_183EF5FEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_183EF612C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF6408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF6500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF6578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF6650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF6AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF6D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF7258( _Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183EF7430( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_183EF75E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EF76E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183EF775C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EF7920(_Unwind_Exception *a1)
{
  unint64_t v7 = v3;

  _Unwind_Resume(a1);
}

void sub_183EF7B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF7DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EF7FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initTCCAccessPreflightWithAuditToken( const __CFString *a1, audit_token_t *a2, const __CFDictionary *a3)
{
  unsigned int v6 = (void *)TCCLibrary(void)::frameworkLibrary;
  if (!TCCLibrary(void)::frameworkLibrary)
  {
    unsigned int v6 = dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
    TCCLibrary(void)::frameworkLibrary = (uint64_t)v6;
  }

  softLinkTCCAccessPreflightWithAuditToken = (uint64_t (*)(const __CFString *, audit_token_t *__struct_ptr, const __CFDictionary *))dlsym(v6, "TCCAccessPreflightWithAuditToken");
  __int128 v7 = *(_OWORD *)&a2->val[4];
  v9[0] = *(_OWORD *)a2->val;
  v9[1] = v7;
  return softLinkTCCAccessPreflightWithAuditToken(a1, (audit_token_t *)v9, a3);
}

uint64_t initkTCCServiceUserTracking(void)
{
  os_log_t v0 = (void *)TCCLibrary(void)::frameworkLibrary;
  if (!TCCLibrary(void)::frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/TCC.framework/TCC", 2);
    TCCLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "kTCCServiceUserTracking");
  constantkTCCServiceUserTracking = result;
  getkTCCServiceUserTracking = kTCCServiceUserTrackingFunction;
  return result;
}

uint64_t kTCCServiceUserTrackingFunction(void)
{
  return constantkTCCServiceUserTracking;
}

Class initUMUserManager(void)
{
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/UserManagement.framewor k/UserManagement",  2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

{
  Class result;
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/UserManagement.framewor k/UserManagement",  2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

{
  Class result;
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/UserManagement.framewor k/UserManagement",  2);
  }
  Class result = objc_getClass("UMUserManager");
  classUMUserManager = (uint64_t)result;
  getUMUserManagerClass = (uint64_t (*)(void))UMUserManagerFunction;
  return result;
}

id UMUserManagerFunction(void)
{
  return (id)classUMUserManager;
}

{
  return (id)classUMUserManager;
}

  ;
}

{
  return (id)classUMUserManager;
}

uint64_t __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_PRIVATE_SYMBOLS__()
{
  if (__LSDefaultsGetSharedInstance_onceToken != -1) {
    dispatch_once(&__LSDefaultsGetSharedInstance_onceToken, &__block_literal_global_22);
  }
  uint64_t result = [(id)__LSDefaultsGetSharedInstance_sharedInstance issueSandboxExceptionsIfMayNotMapDatabase];
  if ((_DWORD)result)
  {
    _LSGetAuditTokenForSelf();
    return sandbox_check_by_audit_token();
  }

  return result;
}

_LSDefaults *_LSDefaultsBaseSystemContainerURL()
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  os_log_t v0 = getenv("LS_DATABASE_DIR");
  if (v0) {
    return (_LSDefaults *)(id)[objc_alloc(MEMORY[0x189604030]) initFileURLWithFileSystemRepresentation:v0 isDirectory:1 relativeToURL:0];
  }
  char v17 = 0;
  uint64_t v14 = 1LL;
  uint64_t v1 = container_system_path_for_identifier();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    os_log_t v0 = &v17;
    __strlcpy_chk();
    free(v2);
    return (_LSDefaults *)(id)[objc_alloc(MEMORY[0x189604030]) initFileURLWithFileSystemRepresentation:v0 isDirectory:1 relativeToURL:0];
  }

  uint64_t error_description = container_get_error_description();
  _LSDefaultLog();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    _LSDefaultsBaseSystemContainerURL_cold_1(&v14, error_description, v5);
  }

  uint64_t v6 = objc_msgSend( NSString,  "stringWithFormat:",  @"Error getting container url (%s)! Cannot continue.",  error_description);
  __int128 v7 = (void *)MEMORY[0x189603F70];
  uint64_t v8 = *MEMORY[0x189603A58];
  float v15 = @"LSContainerErrorNumber";
  [MEMORY[0x189607968] numberWithUnsignedLongLong:v14];
  uint8x8_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  BOOL v16 = v9;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  int v10 = (void *)objc_claimAutoreleasedReturnValue();
  [v7 exceptionWithName:v8 reason:v6 userInfo:v10];
  id v11 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v11);
  return -[_LSDefaults init](v12, v13);
}

uint64_t emitSandboxExceptionAndMaybeAbortForSneakyURLUsage()
{
  os_log_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    emitSandboxExceptionAndMaybeAbortForSneakyURLUsage_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
  }

  return __LAUNCH_SERVICES_IS_GENERATING_A_SANDBOX_EXCEPTION_BECAUSE_THIS_PROCESS_IS_USING_PRIVATE_SYMBOLS__();
}

void OUTLINED_FUNCTION_3_5( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void OUTLINED_FUNCTION_4_4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_183EFA2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFA440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFA510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFA690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFA7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFAA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFAAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFAC78(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_183EFB1F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFB460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFB644( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EFBA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPerUserEntropyURL(void)
{
  os_log_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  [v0 URLByAppendingPathComponent:@"com.apple.LaunchServices.DeviceIdentifierEntropy" isDirectory:0];
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_183EFBB30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFBF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFC12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFC234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFC638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFC7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initUMUserPersona(void)
{
  if (!UserManagementLibrary(void)::frameworkLibrary) {
    UserManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/UserManagement.framewor k/UserManagement",  2);
  }
  Class result = objc_getClass("UMUserPersona");
  classUMUserPersona = (uint64_t)result;
  getUMUserPersonaClass = (uint64_t (*)(void))UMUserPersonaFunction;
  return result;
}

id UMUserPersonaFunction(void)
{
  return (id)classUMUserPersona;
}

uint64_t initMKBDeviceUnlockedSinceBoot(void)
{
  os_log_t v0 = (void *)MobileKeyBagLibrary(void)::frameworkLibrary;
  if (!MobileKeyBagLibrary(void)::frameworkLibrary)
  {
    os_log_t v0 = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
    MobileKeyBagLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  softLinkMKBDeviceUnlockedSinceBoot = (uint64_t (*)(void))dlsym(v0, "MKBDeviceUnlockedSinceBoot");
  return softLinkMKBDeviceUnlockedSinceBoot();
}

id LaunchServices::_LSLazyLoadObjectForKeyWithLock(void *a1, void *a2, os_unfair_lock_s *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = v7;
  id v10 = v8;
  id v11 = a4;
  os_unfair_lock_lock(a3);
  [v9 objectForKey:v10];
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    v11[2](v11);
    unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v9 setObject:v12 forKey:v10];
  }

  os_unfair_lock_unlock(a3);

  return v12;
}

void sub_183EFCDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFD3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFD498( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void sub_183EFD52C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EFD61C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_183EFD698( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EFD788( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_183EFD804( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EFD8F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_183EFD970( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EFDA64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EFDB40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_183EFDBE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
}

void sub_183EFDCC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_183EFDDE0(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183EFE0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFE1B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EFE4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFE6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFE830( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183EFEADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFEC24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_183EFECF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183EFEF60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFF120( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_183EFF230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183EFF3C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initMobileInstallationCopyDiskUsageForLaunchServices(const void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = (void *)MobileInstallationLibrary(void)::frameworkLibrary;
  if (!MobileInstallationLibrary(void)::frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", 2);
    MobileInstallationLibrary(void)::frameworkLibrary = (uint64_t)v4;
  }

  softLinkMobileInstallationCopyDiskUsageForLaunchServices = (uint64_t (*)(const void *, const __CFDictionary *))dlsym(v4, "MobileInstallationCopyDiskUsageForLaunchServices");
  return softLinkMobileInstallationCopyDiskUsageForLaunchServices(a1, a2);
}

uint64_t _LSDispatchCoalescedAfterDelay(unsigned __int8 *a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (v7) {
      goto LABEL_3;
    }
  }

  else
  {
    [MEMORY[0x1896077D8] currentHandler];
    char v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInte rval, __strong dispatch_block_t _Nonnull)");
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
    [v17 handleFailureInFunction:v18, @"LSDispatchUtils.mm", 30, @"Invalid parameter not satisfying: %@", @"ioCoalescingFlag != NULL" file lineNumber description];

    if (v7) {
      goto LABEL_3;
    }
  }

  [MEMORY[0x1896077D8] currentHandler];
  size_t v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterv al, __strong dispatch_block_t _Nonnull)");
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
  [v19 handleFailureInFunction:v20, @"LSDispatchUtils.mm", 31, @"Invalid parameter not satisfying: %@", @"inQueue != NULL" file lineNumber description];

LABEL_3:
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000LL)
  {
    [MEMORY[0x1896077D8] currentHandler];
    SEL v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInte rval, __strong dispatch_block_t _Nonnull)");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 handleFailureInFunction:v14, @"LSDispatchUtils.mm", 32, @"Invalid parameter not satisfying: %@", @"!isinf( inMaxDelay) && !isnan( inMaxDelay)" file lineNumber description];

    if (v8) {
      goto LABEL_5;
    }
  }

  else if (v8)
  {
    goto LABEL_5;
  }

  [MEMORY[0x1896077D8] currentHandler];
  float v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "Boolean _LSDispatchCoalescedAfterDelay(volatile int32_t * _Nonnull, __strong dispatch_queue_t _Nonnull, NSTimeInterv al, __strong dispatch_block_t _Nonnull)");
  BOOL v16 = (void *)objc_claimAutoreleasedReturnValue();
  [v15 handleFailureInFunction:v16, @"LSDispatchUtils.mm", 33, @"Invalid parameter not satisfying: %@", @"inBlock != NULL" file lineNumber description];

  do
LABEL_5:
    signed __int8 v9 = __ldaxr(a1);
  while (__stlxr(v9 | 0x80, a1));
  if (v9 < 0)
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    MEMORY[0x186E2AFD4]();
    dispatch_time_t v10 = dispatch_time(0LL, (uint64_t)(a4 * 1000000000.0));
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 3221225472LL;
    block[2] = ___LSDispatchCoalescedAfterDelay_block_invoke;
    block[3] = &unk_189D75DC8;
    id v22 = v8;
    unint64_t v23 = a1;
    dispatch_after(v10, v7, block);

    uint64_t v11 = 1LL;
  }

  return v11;
}

void sub_183EFF70C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(void *a1, void *a2, double a3)
{
  uint64_t v37 = a1;
  id v5 = a2;
  unint64_t v38 = (void (**)(void, void))v5;
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS____LSDispatchWithTimeoutResult);
  if ((*(uint64_t *)&a3 <= -1 || ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000LL) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&a3 - 1LL) >= 0xFFFFFFFFFFFFFLL)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(NSTimeInterval, __strong dispatch_queue_t _Nullable, __strong _LSDispatchWithTimeoutWorkBlock _Nonnull)");
    id v28 = (void *)objc_claimAutoreleasedReturnValue();
    [v27 handleFailureInFunction:v28, @"LSDispatchUtils.mm", 113, @"Invalid parameter not satisfying: %@", @"!isnan( timeout) && !isinf( timeout) && timeout > 0.0" file lineNumber description];

    if (v5) {
      goto LABEL_9;
    }
  }

  else if (v5)
  {
    goto LABEL_9;
  }

  [MEMORY[0x1896077D8] currentHandler];
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "_LSDispatchWithTimeoutResult *_LSDispatchWithTimeout(NSTimeInterval, __strong dispatch_queue_t _Nullable, __strong _ LSDispatchWithTimeoutWorkBlock _Nonnull)");
  NSRange v30 = (void *)objc_claimAutoreleasedReturnValue();
  [v29 handleFailureInFunction:v30, @"LSDispatchUtils.mm", 114, @"Invalid parameter not satisfying: %@", @"workBlock != nil" file lineNumber description];

LABEL_9:
  signed __int8 v9 = (void *)MEMORY[0x186E2A59C]();
  id v10 = objc_alloc_init(MEMORY[0x189607910]);
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0LL);
  unint64_t v12 = v6;
  id v13 = v10;
  uint64_t v14 = v11;
  if (v12)
  {
    if (v13) {
      goto LABEL_11;
    }
LABEL_25:
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *_ _strong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
    std::vector<unsigned int> v34 = (void *)objc_claimAutoreleasedReturnValue();
    [v33 handleFailureInFunction:v34, @"LSDispatchUtils.mm", 69, @"Invalid parameter not satisfying: %@", @"lock != nil" file lineNumber description];

    if (v14) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }

  [MEMORY[0x1896077D8] currentHandler];
  NSRange v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__s trong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
  id v32 = (void *)objc_claimAutoreleasedReturnValue();
  [v31 handleFailureInFunction:v32, @"LSDispatchUtils.mm", 68, @"Invalid parameter not satisfying: %@", @"resultStruct != nil" file lineNumber description];

  if (!v13) {
    goto LABEL_25;
  }
LABEL_11:
  if (v14) {
    goto LABEL_12;
  }
LABEL_26:
  [MEMORY[0x1896077D8] currentHandler];
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "_LSDispatchWithTimeoutCompletionHandler _LSGetDispatchWithTimeoutCompletionHandler(_LSDispatchWithTimeoutResult *__s trong, __strong id<NSLocking>, __strong dispatch_semaphore_t)");
  int v36 = (void *)objc_claimAutoreleasedReturnValue();
  [v35 handleFailureInFunction:v36, @"LSDispatchUtils.mm", 70, @"Invalid parameter not satisfying: %@", @"sem != NULL" file lineNumber description];

LABEL_12:
  uint64_t v15 = MEMORY[0x1895F87A8];
  v42[0] = MEMORY[0x1895F87A8];
  v42[1] = 3221225472LL;
  v42[2] = ___ZL42_LSGetDispatchWithTimeoutCompletionHandlerP28_LSDispatchWithTimeoutResultPU19objcproto9NSLocking11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
  v42[3] = &unk_189D75E90;
  id v16 = v13;
  id v43 = v16;
  char v17 = v12;
  id v44 = v17;
  uint64_t v18 = v14;
  id v45 = v18;
  size_t v19 = (void *)MEMORY[0x186E2A7B8](v42);
  uint64_t v20 = (void *)[v19 copy];

  uint64_t v21 = (void *)MEMORY[0x186E2A7B8](v20);
  if (v37)
  {
    block[0] = v15;
    block[1] = 3221225472LL;
    block[2] = ___LSDispatchWithTimeout_block_invoke;
    block[3] = &unk_189D75DF0;
    uint64_t v40 = v38;
    id v41 = v21;
    dispatch_async(v37, block);

    id v22 = v37;
  }

  else
  {
    id v22 = 0LL;
    ((void (**)(void, void *))v38)[2](v38, v21);
  }

  dispatch_time_t v23 = dispatch_time(0LL, (uint64_t)(a3 * 1000000000.0));
  if (dispatch_semaphore_wait(v18, v23))
  {
    [v16 lock];
    -[_LSDispatchWithTimeoutResult result](v17, "result");
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
      -[_LSDispatchWithTimeoutResult error](v17, "error");
      unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (v25) {
        goto LABEL_19;
      }
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 60LL, (uint64_t)"_LSDispatchWithTimeout", 147LL, 0LL);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[_LSDispatchWithTimeoutResult setError:](v17, "setError:", v24);
    }

LABEL_19:
    [v16 unlock];
  }

  objc_autoreleasePoolPop(v9);
  return v17;
}

void sub_183EFFCC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id _LSLazyLoadObjectOnQueue(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v20 = 0LL;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x3032000000LL;
  dispatch_time_t v23 = __Block_byref_object_copy__15;
  uint64_t v24 = __Block_byref_object_dispose__15;
  id v25 = 0LL;
  if (!a1)
  {
    [MEMORY[0x1896077D8] currentHandler];
    dispatch_semaphore_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "id _LSLazyLoadObjectOnQueue(__strong id volatile *, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGen erator __strong)");
    unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 handleFailureInFunction:v12, @"LSDispatchUtils.mm", 164, @"Invalid parameter not satisfying: %@", @"ioAddress != NULL" file lineNumber description];

    if (v5) {
      goto LABEL_3;
    }
LABEL_8:
    [MEMORY[0x1896077D8] currentHandler];
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "id _LSLazyLoadObjectOnQueue(__strong id volatile *, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGen erator __strong)");
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 handleFailureInFunction:v14, @"LSDispatchUtils.mm", 165, @"Invalid parameter not satisfying: %@", @"inQueue != NULL" file lineNumber description];

    goto LABEL_3;
  }

  if (!v5) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v7 = MEMORY[0x1895F87A8];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___LSLazyLoadObjectOnQueue_block_invoke;
  block[3] = &unk_189D75E18;
  void block[4] = &v20;
  block[5] = a1;
  dispatch_sync(v5, block);
  id v8 = (void *)v21[5];
  if (v6 && !v8)
  {
    v15[0] = v7;
    v15[1] = 3221225472LL;
    v15[2] = ___LSLazyLoadObjectOnQueue_block_invoke_2;
    v15[3] = &unk_189D75E40;
    uint64_t v18 = a1;
    id v16 = v6;
    char v17 = &v20;
    dispatch_barrier_sync(v5, v15);

    id v8 = (void *)v21[5];
  }

  id v9 = v8;
  _Block_object_dispose(&v20, 8);

  return v9;
}

void sub_183EFFFB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

id _LSLazyLoadObjectForKey(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v32 = 0LL;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x3032000000LL;
  uint64_t v35 = __Block_byref_object_copy__15;
  int v36 = __Block_byref_object_dispose__15;
  id v37 = 0LL;
  if (v7)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_9:
    [MEMORY[0x1896077D8] currentHandler];
    size_t v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
    [v19 handleFailureInFunction:v20, @"LSDispatchUtils.mm", 195, @"Invalid parameter not satisfying: %@", @"inKey != nil" file lineNumber description];

    if (v9) {
      goto LABEL_4;
    }
LABEL_10:
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    [v21 handleFailureInFunction:v22, @"LSDispatchUtils.mm", 196, @"Invalid parameter not satisfying: %@", @"inQueue != NULL" file lineNumber description];

    goto LABEL_4;
  }

  [MEMORY[0x1896077D8] currentHandler];
  char v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "id _LSLazyLoadObjectForKey(NSMutableDictionary *__strong _Nonnull, __strong id _Nonnull, __strong dispatch_queue_t _ Nonnull, NS_NOESCAPE _LSLazyLoadGenerator __strong)");
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  [v17 handleFailureInFunction:v18, @"LSDispatchUtils.mm", 194, @"Invalid parameter not satisfying: %@", @"ioDictionary != nil" file lineNumber description];

  if (!v8) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v9) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v11 = MEMORY[0x1895F87A8];
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___LSLazyLoadObjectForKey_block_invoke;
  block[3] = &unk_189D74C20;
  NSRange v31 = &v32;
  id v12 = v7;
  id v29 = v12;
  id v13 = v8;
  id v30 = v13;
  dispatch_sync(v9, block);
  uint64_t v14 = (void *)v33[5];
  if (v10 && !v14)
  {
    v23[0] = v11;
    v23[1] = 3221225472LL;
    id v23[2] = ___LSLazyLoadObjectForKey_block_invoke_2;
    v23[3] = &unk_189D75E68;
    id v24 = v12;
    id v25 = v13;
    id v26 = v10;
    uint64_t v27 = &v32;
    dispatch_barrier_sync(v9, v23);

    uint64_t v14 = (void *)v33[5];
  }

  id v15 = v14;

  _Block_object_dispose(&v32, 8);
  return v15;
}

void sub_183F00388( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30)
{
  int v36 = v34;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_183F00498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL42_LSGetDispatchWithTimeoutCompletionHandlerP28_LSDispatchWithTimeoutResultPU19objcproto9NSLocking11objc_objectPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke( uint64_t a1, void *a2, void *a3)
{
  unint64_t v8 = a2;
  uint64_t v5 = a3;
  [*(id *)(a1 + 32) lock];
  [*(id *)(a1 + 40) result];
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
  }

  else
  {
    [*(id *)(a1 + 40) error];
    id v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      if (!(v8 | v5))
      {
        uint64_t v5 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10810LL,  (uint64_t)"_LSGetDispatchWithTimeoutCompletionHandler_block_invoke",  84LL,  0LL);
      }

      [*(id *)(a1 + 40) setResult:v8];
      [*(id *)(a1 + 40) setError:v5];
    }
  }

  [*(id *)(a1 + 32) unlock];
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_183F0058C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F005C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F00658( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183F0072C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183F00844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F00A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F00AEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F00BF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183F00D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183F00DF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183F00EE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183F01024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_60:
          uint64_t v34 = 0LL;
          goto LABEL_55;
        }

        if (a5 && *a5 == 10)
        {
          [v12 nameWithError:0];
          id v37 = (_LSDatabase *)objc_claimAutoreleasedReturnValue();
          if (!v14)
          {
            [v12 URL];
            id v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "ls_preferredLocalizations");
            size_t v19 = (void *)objc_claimAutoreleasedReturnValue();
          }

          NSRange v31 = (LaunchServices::CanonicalString *)LaunchServices::CanonicalString::Find(*v38, v37, v29);
          if (v31)
          {
            uint64_t LocalizedString = LaunchServices::CanonicalString::getLocalizedString(v31);
            LaunchServices::LocalizedString::localizeUnsafely(LocalizedString, *v38, v19);
            char v17 = (id)objc_claimAutoreleasedReturnValue();

            if (v17) {
              goto LABEL_42;
            }
          }

          else
          {
LABEL_39:
          }
        }

        if ([v12 canIssueIO])
        {
          _LSBundleGetDisplayNameForNodeWithUnregisteredBundleType((void **)v38, v12, v28, 0LL);
          char v17 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_42;
        }

        if (a8)
        {
          id v44 = *MEMORY[0x189607490];
          v45[0] = @"node had unregistered bundle type but can't issue IO to localize its name";
          [MEMORY[0x189603F68] dictionaryWithObjects:v45 forKeys:&v44 count:1];
          int v36 = (void *)objc_claimAutoreleasedReturnValue();
          _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  5LL,  (uint64_t)"+[_LSDisplayNameConstructor(ConstructForAnyFile) displayNameConstructorWithContextIfNeeded:bundle:b undleClass:node:preferredLocalizations:error:]",  444LL,  v36);
          *a8 = (id)objc_claimAutoreleasedReturnValue();
        }

LABEL_59:
        char v17 = 0LL;
        goto LABEL_60;
      }

void sub_183F01554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDNCGetBundleClass(id *a1, void *a2, int a3, _DWORD *a4, void *a5)
{
  id v9 = a2;
  if (!a3)
  {
    int v12 = _LSGetBundleClassForNode(0LL, v9);
    goto LABEL_5;
  }

  +[_LSDServiceDomain defaultServiceDomain]();
  id v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v10, 0LL);

  if (v11)
  {
    int v12 = _LSGetBundleClassForNode(v11, v9);
LABEL_5:
    *a4 = v12;
    uint64_t v13 = 1LL;
    goto LABEL_6;
  }

  if (a5)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    id v15 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)a1, v15, 0LL);

    if (v16) {
      id v17 = 0LL;
    }
    else {
      id v17 = a1[3];
    }
    uint64_t v13 = 0LL;
    *a5 = v17;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

void sub_183F016F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::Database::Context::error(id *this)
{
  uint64_t v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)this, v2, 0LL);

  if (v3) {
    id v4 = 0LL;
  }
  else {
    id v4 = this[3];
  }
  return v4;
}

void sub_183F01784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F01D84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

id XNSDictionaryObjectForKeyOfClass(NSDictionary *a1, objc_object *a2, objc_class *a3)
{
  uint64_t v4 = -[NSDictionary objectForKey:](a1, "objectForKey:", a2);
  uint64_t v5 = (void *)v4;
  if (a3 && v4 && (objc_opt_isKindOfClass() & 1) == 0)
  {

    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_183F01ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F01FB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F020A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
}

void sub_183F021C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose((const void *)(v20 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void _LSDNCWithCharacters(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  unint64_t v5 = -[__CFString length](v3, "length");
  CharactersPtr = CFStringGetCharactersPtr(v3);
  if (CharactersPtr)
  {
    v4[2](v4, CharactersPtr, v5);
  }

  else if (v5 > 0xFF)
  {
    std::stringbuf::string_type __p = 0LL;
    id v9 = 0LL;
    uint64_t v10 = 0LL;
    std::vector<unsigned short>::__vallocate[abi:nn180100](&__p, v5);
    id v7 = (char *)v9;
    bzero(v9, 2 * v5);
    id v9 = &v7[2 * v5];
    -[__CFString getCharacters:range:](v3, "getCharacters:range:", __p, 0LL, v5);
    v4[2](v4, (const UniChar *)__p, v5);
    if (__p)
    {
      id v9 = __p;
      operator delete(__p);
    }
  }

  else
  {
    -[__CFString getCharacters:range:](v3, "getCharacters:range:", &__p, 0LL, v5);
    v4[2](v4, (const UniChar *)&__p, v5);
  }
}

void sub_183F02324( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_183F02588( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }

  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }

LABEL_5:
  return v17;
}

  return v12;
}

  _LSBindingListBufferInit((uint64_t)v10, v121);
  LSVersionNumber v119 = 0u;
  memset(v120, 0, sizeof(v120));
  LSVersionNumber v117 = 0u;
  LSVersionNumber v118 = 0u;
  *(_OWORD *)LSVersionNumber v116 = 0u;
  if (!v9 || (uint64_t v13 = CFGetTypeID(v9), v13 != CFDictionaryGetTypeID()))
  {
    uint64_t active = 0LL;
    goto LABEL_127;
  }

  v116[2] = v5;
  CFTypeID TypeID = CFStringGetTypeID();
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIdentifier");
  uint64_t v16 = Value;
  if (!Value || CFGetTypeID(Value) != TypeID || !_UTTypeIdentifierIsDeclarable(v16)) {
    goto LABEL_109;
  }
  v116[3] = _LSDatabaseCreateStringForCFString(v10, v16, 1);
  if ((v116[2] & 0x20) != 0) {
    _CSStringMakeConst();
  }
  for (uint64_t i = 0LL; i != 48; i += 16LL)
  {
    uint64_t v18 = *(__CFString **)((char *)&off_189D79890 + i);
    CFIndex Length = CFStringGetLength(v18);
    if (CFStringGetLength(v16) > Length)
    {
      v131.id location = 0LL;
      v131.CFIndex length = Length;
      if (CFStringCompareWithOptions(v16, v18, v131, 1uLL) == kCFCompareEqualTo) {
        v116[2] |= *(_DWORD *)((char *)&off_189D79890 + i + 8);
      }
    }
  }

  uint64_t v20 = CFNumberGetTypeID();
  uint64_t v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeVersion");
  uint64_t v22 = v21;
  if (v21 && CFGetTypeID(v21) == v20)
  {
    LODWORD(valuePtr[0]) = 0;
    CFNumberGetValue(v22, kCFNumberSInt32Type, valuePtr);
    LODWORD(v117) = valuePtr[0];
    v116[2] |= 0x100u;
    if ((v5 & 0x20) == 0) {
      goto LABEL_26;
    }
  }

  else
  {
    LODWORD(v117) = 0;
    if ((v5 & 0x20) == 0) {
      goto LABEL_26;
    }
  }

  dispatch_time_t v23 = CFBooleanGetTypeID();
  id v24 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIsWildcard");
  id v25 = v24;
  if (v24 && CFGetTypeID(v24) == v23 && CFBooleanGetValue(v25)) {
    v116[2] |= 0x200u;
  }
LABEL_26:
  id v26 = CFArrayGetTypeID();
  uint64_t v27 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIconFiles");
  id v28 = v27;
  if (v27 && CFGetTypeID(v27) == v26)
  {
    CFIndex Count = CFArrayGetCount(v28);
    if (Count >= 1)
    {
      id v30 = 0LL;
      NSRange v31 = 1LL;
      do
      {
        uint64_t v32 = CFStringGetTypeID();
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v28, v31 - 1);
        uint64_t v34 = ValueAtIndex;
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v32)
        {
          unsigned int StringForCFString = _LSDatabaseCreateStringForCFString(v10, v34, 0);
          int v36 = &v116[v30++];
          void v36[7] = StringForCFString;
        }

        if (v31 >= Count) {
          break;
        }
        ++v31;
      }

      while (v30 < 8);
    }
  }

  else
  {
    id v37 = CFStringGetTypeID();
    unint64_t v38 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIconFile");
    uint64_t v39 = v38;
    if (v38 && CFGetTypeID(v38) == v37) {
      HIDWORD(v117) = _LSDatabaseCreateStringForCFString(v10, v39, 0);
    }
  }

  uint64_t v40 = CFStringGetTypeID();
  id v41 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIconName");
  unsigned int v42 = v41;
  if (v41 && CFGetTypeID(v41) == v40) {
    HIDWORD(v119) = _LSDatabaseCreateStringForCFString(v10, v42, 0);
  }
  id v43 = CFStringGetTypeID();
  id v44 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeGlyphName");
  id v45 = v44;
  if (v44 && CFGetTypeID(v44) == v43) {
    *(_DWORD *)__int128 v120 = _LSDatabaseCreateStringForCFString(v10, v45, 0);
  }
  uint64_t v46 = CFDictionaryGetTypeID();
  int v47 = (void *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeIcons");
  id v48 = v47;
  if (v47)
  {
    if (CFGetTypeID(v47) == v46) {
      id v49 = v48;
    }
    else {
      id v49 = 0LL;
    }
  }

  else
  {
    id v49 = 0LL;
  }

  *(_DWORD *)&v120[4] = _LSPlistAdd((uint64_t)v10, v49);
  __int128 v50 = CFStringGetTypeID();
  uint64_t v51 = (void *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTTypeDescription");
  unsigned __int8 v52 = v51;
  if (v51 && CFGetTypeID(v51) == v50)
  {
    id v53 = v52;
    [v105 objectForKeyedSubscript:v53];
    std::vector<unsigned int> v54 = (void *)objc_claimAutoreleasedReturnValue();
    DWORD2(v117) = LaunchServices::LocalizedString::Add(v10, v54, v53);
  }

  DWORD1(v117) = v3;
  __int16 v55 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"_LSBundleLibraryDelegate");
  uint64_t v56 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, @"UTKEXTIdentifier");
  if (v56) {
    v116[2] |= 0x80u;
  }
  *(_DWORD *)&v120[8] = _LSDatabaseCreateStringForCFString(v10, v55, 0);
  *(_DWORD *)&v120[12] = _LSDatabaseCreateStringForCFString(v10, v56, 0);
  if (*(_DWORD *)&v120[8])
  {
    uint64_t v57 = CFStringGetTypeID();
    uint64_t v58 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v9, (const void *)*MEMORY[0x189604E00]);
    char v59 = v58;
    if (v58 && CFGetTypeID(v58) == v57)
    {
      uint64_t v60 = v116[2];
      uint64_t v61 = CFStringGetLength(v59);
      if (v61 > CFStringGetLength(@"com.apple."))
      {
        v132.CFIndex length = CFStringGetLength(@"com.apple.");
        v132.id location = 0LL;
        if (CFStringCompareWithOptions(v59, @"com.apple.", v132, 1uLL) == kCFCompareEqualTo)
        {
          char v62 = v60 | 4;
LABEL_63:
          v116[2] = v62;
          goto LABEL_64;
        }
      }
    }

    else
    {
      uint64_t v60 = v116[2];
    }

    char v62 = v60 & 0xFFFFFFFB;
    goto LABEL_63;
  }

void sub_183F0276C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F028EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F02B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F02CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F02E18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_183F03154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F03484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0363C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F037D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F038F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F039B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F03A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F03B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F03BD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL32_LSDNCReplaceForbiddenCharactersP8NSStringj_block_invoke( uint64_t result, CFStringInlineBuffer *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0LL;
    CFIndex v7 = 0LL;
    uint64_t v8 = 64LL;
    do
    {
      else {
        uint64_t v9 = v7;
      }
      if (v7 < 0 || (CFIndex v10 = a2->rangeToBuffer.length, v10 <= v7))
      {
        UniChar v12 = 0;
      }

      else
      {
        directUniCharBuffer = a2->directUniCharBuffer;
        if (directUniCharBuffer)
        {
          UniChar v12 = directUniCharBuffer[v7 + a2->rangeToBuffer.location];
        }

        else
        {
          directCStringBuffer = a2->directCStringBuffer;
          if (directCStringBuffer)
          {
            UniChar v12 = directCStringBuffer[a2->rangeToBuffer.location + v7];
          }

          else
          {
            if (a2->bufferedRangeEnd <= v7 || (CFIndex bufferedRangeStart = a2->bufferedRangeStart, bufferedRangeStart > v7))
            {
              uint64_t v19 = -v9;
              uint64_t v20 = v9 + v6;
              CFIndex v21 = v8 - v9;
              CFIndex v22 = v7 + v19;
              CFIndex length = v22 + 64;
              if (v22 + 64 >= v10) {
                CFIndex length = a2->rangeToBuffer.length;
              }
              a2->CFIndex bufferedRangeStart = v22;
              a2->bufferedRangeEnd = length;
              if (v10 >= v21) {
                CFIndex v10 = v21;
              }
              v24.CFIndex length = v10 + v20;
              v24.id location = v22 + a2->rangeToBuffer.location;
              CFStringGetCharacters(a2->theString, v24, a2->buffer);
              CFIndex bufferedRangeStart = a2->bufferedRangeStart;
            }

            UniChar v12 = a2->buffer[v7 - bufferedRangeStart];
          }
        }
      }

      Class result = _LSDNCCharacterSetContainsCharacterFromInlineBuffer(*(NSCharacterSet **)(v5 + 32), v12, a2, v7);
      if ((_DWORD)result)
      {
        uint64_t v13 = *(void **)(*(void *)(*(void *)(v5 + 48) + 8LL) + 40LL);
        if (!v13)
        {
          uint64_t v14 = [*(id *)(v5 + 40) mutableCopy];
          uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8LL);
          uint64_t v16 = *(void **)(v15 + 40);
          *(void *)(v15 + 40) = v14;

          uint64_t v13 = *(void **)(*(void *)(*(void *)(v5 + 48) + 8LL) + 40LL);
        }

        Class result = objc_msgSend( v13,  "replaceCharactersInRange:withCharacters:length:",  v7,  1,  &_LSDisplayNameConstructorForbiddenCharacterSubstitute,  1);
      }

      ++v7;
      --v6;
      ++v8;
    }

    while (a3 != v7);
  }

  return result;
}

void ___ZL28_LSDNCGetForbiddenCharactersj_block_invoke()
{
  id v6 = objc_alloc_init(MEMORY[0x189607930]);
  objc_msgSend(v6, "addCharactersInRange:", 0, 1);
  [MEMORY[0x189607810] illegalCharacterSet];
  os_log_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  [v6 formUnionWithCharacterSet:v0];

  uint64_t v1 = [v6 copy];
  std::vector<int>::size_type v2 = (void *)_LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines;
  _LSDNCGetForbiddenCharacters::forbiddenWithoutNewlines = v1;

  [MEMORY[0x189607810] newlineCharacterSet];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  [v6 formUnionWithCharacterSet:v3];

  uint64_t v4 = [v6 copy];
  uint64_t v5 = (void *)_LSDNCGetForbiddenCharacters::forbiddenWithNewlines;
  _LSDNCGetForbiddenCharacters::forbiddenWithNewlines = v4;
}

void sub_183F03E68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__vallocate[abi:nn180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    abort();
  }
  Class result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a2);
}

void ___ZL30_LSDNCGetBiDiControlCharactersv_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x189607930]);
  uint64_t v1 = 0LL;
  id v4 = v0;
  do
  {
    objc_msgSend(v0, "addCharactersInRange:", (unsigned __int16)_LSBiDiControlCharacters[v1++], 1);
    id v0 = v4;
  }

  while (v1 != 12);
  uint64_t v2 = [v4 copy];
  uint64_t v3 = (void *)_LSDNCGetBiDiControlCharacters(void)::result;
  _LSDNCGetBiDiControlCharacters(void)::Class result = v2;
}

void sub_183F03F68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZL34_LSDNCBalanceBiDiControlCharactersP8NSString_block_invoke( uint64_t a1, UniChar *buffer, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = 0LL;
    int64_t v7 = 0LL;
    uint64_t v8 = 64LL;
    do
    {
      else {
        uint64_t v9 = v7;
      }
      if (v7 < 0) {
        goto LABEL_35;
      }
      int64_t v10 = *((void *)buffer + 20);
      if (v10 <= v7) {
        goto LABEL_35;
      }
      uint64_t v11 = *((void *)buffer + 17);
      if (v11)
      {
        UniChar v12 = *(_WORD *)(v11 + 2 * (v7 + *((void *)buffer + 19)));
      }

      else
      {
        uint64_t v13 = *((void *)buffer + 18);
        if (v13)
        {
          UniChar v12 = *(char *)(v13 + *((void *)buffer + 19) + v7);
        }

        else
        {
          if (*((void *)buffer + 22) <= v7 || (int64_t v14 = *((void *)buffer + 21), v14 > v7))
          {
            uint64_t v15 = -v9;
            uint64_t v16 = v9 + v6;
            uint64_t v17 = v8 - v9;
            int64_t v18 = v7 + v15;
            int64_t v19 = v18 + 64;
            if (v18 + 64 >= v10) {
              int64_t v19 = *((void *)buffer + 20);
            }
            *((void *)buffer + 21) = v18;
            *((void *)buffer + 22) = v19;
            if (v10 >= v17) {
              int64_t v10 = v17;
            }
            v25.CFIndex length = v10 + v16;
            v25.id location = v18 + *((void *)buffer + 19);
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v25, buffer);
            int64_t v14 = *((void *)buffer + 21);
          }

          UniChar v12 = buffer[v7 - v14];
        }
      }

      if (v12 > 0x2065u)
      {
        if (v12 - 8294 < 3)
        {
          uint64_t v21 = *(void *)(a1 + 40);
LABEL_28:
          CFIndex v22 = (void *)(*(void *)(v21 + 8) + 24LL);
          uint64_t v23 = -1LL;
          goto LABEL_34;
        }

        if (v12 == 8297)
        {
          uint64_t v24 = *(void *)(a1 + 40);
LABEL_33:
          CFIndex v22 = (void *)(*(void *)(v24 + 8) + 24LL);
          uint64_t v23 = 1LL;
LABEL_34:
          *v22 += v23;
        }
      }

      else
      {
        if (v12 - 8234 < 2 || v12 - 8237 < 2)
        {
          uint64_t v21 = *(void *)(a1 + 32);
          goto LABEL_28;
        }

        if (v12 == 8236)
        {
          uint64_t v24 = *(void *)(a1 + 32);
          goto LABEL_33;
        }
      }

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }

    this->__end_ = end;
  }

  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }

    else
    {
      int64_t v14 = 0LL;
    }

    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }

    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin) {
      operator delete(begin);
    }
  }

id LaunchServices::DMFSupport::getLog(LaunchServices::DMFSupport *this)
{
  return (id)LaunchServices::DMFSupport::getLog(void)::result;
}

id _LSGetDMFPolicyNoCache(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  uint64_t v17 = 0LL;
  int v18 = &v17;
  uint64_t v19 = 0x3032000000LL;
  uint64_t v20 = __Block_byref_object_copy__17;
  uint64_t v21 = __Block_byref_object_dispose__17;
  id v22 = &unk_189DA8158;
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x3032000000LL;
  int64_t v14 = __Block_byref_object_copy__17;
  uint64_t v15 = __Block_byref_object_dispose__17;
  id v16 = 0LL;
  if (v3)
  {
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 3221225472LL;
    v7[2] = ___LSGetDMFPolicyNoCache_block_invoke;
    void v7[3] = &unk_189D76030;
    id v8 = v3;
    uint64_t v9 = &v11;
    unint64_t v10 = &v17;
    LaunchServices::DMFSupport::getPolicyWithCompletionHandler((uint64_t)v8, 0, v7);
  }

  if (a2) {
    *a2 = (id) v12[5];
  }
  id v5 = (id)v18[5];
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
  return v5;
}

void sub_183F047A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void LaunchServices::DMFSupport::getPolicyWithCompletionHandler(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  [MEMORY[0x189604010] setWithObject:a1];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  _OWORD v8[2] = ___ZN14LaunchServices10DMFSupportL30getPolicyWithCompletionHandlerEP8NSStringhU13block_pointerFvP8NSNumberP7NSErrorE_block_invoke;
  void v8[3] = &unk_189D76080;
  id v7 = v5;
  id v9 = v7;
  LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(v6, a2, v8);
}

void sub_183F048A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void _LSGetDMFPolicyWithCompletionHandler(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  void v5[2] = ___LSGetDMFPolicyWithCompletionHandler_block_invoke;
  v5[3] = &unk_189D76058;
  id v6 = v3;
  id v4 = v3;
  LaunchServices::DMFSupport::getPolicyWithCompletionHandler(a1, 3u, v5);
}

void sub_183F04A04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F04A64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(void *a1, unsigned int a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  id v37 = a3;
  if (!v5)
  {
    uint64_t v50 = *MEMORY[0x189607490];
    uint64_t v51 = @"bundleIDs";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v51 forKeys:&v50 count:1];
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"getPoliciesWithCompletionHandler", 314LL, v6);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    v37[2](v37, 0LL, v15);
LABEL_35:

    goto LABEL_36;
  }

  id v6 = objc_alloc_init(MEMORY[0x189603FC8]);
  if ((a2 & 1) != 0)
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    id v7 = v5;
    uint64_t v9 = [v7 countByEnumeratingWithState:&v46 objects:v57 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v47;
      do
      {
        for (uint64_t i = 0LL; i != v9; ++i)
        {
          if (*(void *)v47 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(LaunchServices::DMFSupport **)(*((void *)&v46 + 1) + 8 * i);
          LaunchServices::DMFSupport::getCachedPolicy(v12, v8);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
          if (v13) {
            [v6 setObject:v13 forKeyedSubscript:v12];
          }
        }

        uint64_t v9 = [v7 countByEnumeratingWithState:&v46 objects:v57 count:16];
      }

      while (v9);
    }
  }

  uint64_t v14 = [v6 count];
  if (v14 != [v5 count])
  {
    LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)(a2 & 1));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
    {
      v43[0] = MEMORY[0x1895F87A8];
      v43[1] = 3221225472LL;
      v43[2] = ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke;
      v43[3] = &unk_189D761C0;
      char v45 = a2 & 1;
      id v44 = v37;
      id v16 = (LaunchServices::DMFSupport *)MEMORY[0x186E2A7B8](v43);
      LaunchServices::DMFSupport::getLog(v16);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = [v5 count];
        *(_DWORD *)__int128 buf = 134283777;
        uint64_t v54 = v18;
        __int16 v55 = 1024;
        int v56 = (a2 >> 1) & 1;
        _os_log_impl( &dword_183E58000,  v17,  OS_LOG_TYPE_INFO,  "requesting DMF policies for %{private}zu identifiers, async? %d",  buf,  0x12u);
      }

      [v5 allObjects];
      if ((a2 & 2) != 0)
      {
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
        [v15 requestPoliciesForBundleIdentifiers:v20 completionHandler:v16];
      }

      else
      {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue();
        id v42 = 0LL;
        [v15 requestPoliciesForBundleIdentifiers:v19 withError:&v42];
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
        id v21 = v42;

        (*((void (**)(LaunchServices::DMFSupport *, void *, id))v16 + 2))(v16, v20, v21);
      }
    }

    else
    {
      LaunchServices::DMFSupport::getLog(0LL);
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        LaunchServices::DMFSupport::getPoliciesWithCompletionHandler(v22, v23, v24, v25, v26, v27, v28, v29);
      }

      __int128 v40 = 0u;
      __int128 v41 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      id v30 = v5;
      uint64_t v31 = [v30 countByEnumeratingWithState:&v38 objects:v52 count:16];
      if (v31)
      {
        uint64_t v32 = *(void *)v39;
        do
        {
          for (uint64_t j = 0LL; j != v31; ++j)
          {
            if (*(void *)v39 != v32) {
              objc_enumerationMutation(v30);
            }
            uint64_t v34 = *(void *)(*((void *)&v38 + 1) + 8 * j);
            [v6 objectForKeyedSubscript:v34];
            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
            BOOL v36 = v35 == 0LL;

            if (v36) {
              [v6 setObject:&unk_189DA8158 forKeyedSubscript:v34];
            }
          }

          uint64_t v31 = [v30 countByEnumeratingWithState:&v38 objects:v52 count:16];
        }

        while (v31);
      }

      ((void (**)(id, id, void *))v37)[2](v37, v6, 0LL);
    }

    goto LABEL_35;
  }

  ((void (**)(id, id, void *))v37)[2](v37, v6, 0LL);
LABEL_36:
}

void sub_183F04ED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25)
{
  _Unwind_Resume(a1);
}

id _LSGetDMFNotificationCenter()
{
  return LaunchServices::DMFSupport::getNotificationCenter((LaunchServices::DMFSupport *)1);
}

id LaunchServices::DMFSupport::getNotificationCenter(LaunchServices::DMFSupport *this)
{
  int v1 = (int)this;
  os_unfair_lock_lock(&LaunchServices::DMFSupport::getNotificationCenter(BOOL)::lock);
  uint64_t v2 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
  if (LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v1 == 0;
  }
  if (!v3)
  {
    id v4 = LaunchServices::DMFSupport::getMonitor((LaunchServices::DMFSupport *)1);
    id v5 = objc_alloc_init(MEMORY[0x189607958]);
    id v6 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
    LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center = (uint64_t)v5;

    uint64_t v2 = (void *)LaunchServices::DMFSupport::getNotificationCenter(BOOL)::center;
  }

  id v7 = v2;
  os_unfair_lock_unlock(&LaunchServices::DMFSupport::getNotificationCenter(BOOL)::lock);
  return v7;
}

void ___ZN14LaunchServices10DMFSupportL6getLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "dmfsupport");
  int v1 = (void *)LaunchServices::DMFSupport::getLog(void)::result;
  LaunchServices::DMFSupport::getLog(void)::Class result = (uint64_t)v0;
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke(LaunchServices::DMFSupport *a1)
{
  uint64_t v1 = [objc_alloc((Class)LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass(a1)) initWithPolicyChangeHandler:&__block_literal_global_13];
  uint64_t v2 = (void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor;
  LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor = v1;

  LaunchServices::DMFSupport::reloadAllPolicies((void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor);
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke_2(LaunchServices::DMFSupport *a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  LaunchServices::DMFSupport::getLog(a1);
  uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    BOOL v3 = "getMonitor_block_invoke_2";
    _os_log_impl(&dword_183E58000, v1, OS_LOG_TYPE_DEFAULT, "%s: DMF policies changed.", (uint8_t *)&v2, 0xCu);
  }

  LaunchServices::DMFSupport::reloadAllPolicies((void *)LaunchServices::DMFSupport::getMonitor(BOOL)::cachingMonitor);
}

void LaunchServices::DMFSupport::reloadAllPolicies(void *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  [MEMORY[0x189603FE0] set];
  int v2 = (void *)objc_claimAutoreleasedReturnValue();
  id v20 = 0LL;
  uint64_t v17 = 0LL;
  id v18 = 0LL;
  char v19 = 0;
  +[_LSDServiceDomain defaultServiceDomain]();
  BOOL v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = (void **)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v3, 0LL);

  if (v4)
  {
    int StringForCFString = _LSDatabaseGetStringForCFString(*v4, @"Hidden", 0);
    *(void *)&__int128 buf = MEMORY[0x1895F87A8];
    *((void *)&buf + 1) = 3221225472LL;
    id v22 = ___ZN14LaunchServices10DMFSupportL15getAllBundleIDsEv_block_invoke;
    uint64_t v23 = &unk_189D76170;
    int v26 = StringForCFString;
    uint64_t v25 = v4;
    uint64_t v24 = v2;
    _LSEnumerateViableBundlesOfClass(v4, 2LL, &buf);
    id v7 = v24;
  }

  else
  {
    LaunchServices::DMFSupport::getLog(v5);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v17, v14, 0LL);

      if (v15) {
        id v16 = 0LL;
      }
      else {
        id v16 = v20;
      }
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v16;
      _os_log_error_impl( &dword_183E58000,  v7,  OS_LOG_TYPE_ERROR,  "Failed to get database context: %{public}@",  (uint8_t *)&buf,  0xCu);
    }
  }

  [v2 allObjects];
  id v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17 && v19) {
    _LSContextDestroy(v17);
  }
  id v9 = v18;
  uint64_t v17 = 0LL;
  id v18 = 0LL;

  char v19 = 0;
  id v10 = v20;
  id v20 = 0LL;

  LaunchServices::DMFSupport::getLog(v11);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = [v8 count];
    LODWORD(buf) = 134283521;
    *(void *)((char *)&buf + 4) = v13;
    _os_log_impl( &dword_183E58000,  v12,  OS_LOG_TYPE_INFO,  "reloading all DMF policies for %{private}zu identifiers",  (uint8_t *)&buf,  0xCu);
  }

  [v1 requestPoliciesForBundleIdentifiers:v8 completionHandler:&__block_literal_global_18];
}

void sub_183F053E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL10getMonitorEb_block_invoke_14(LaunchServices::DMFSupport *a1)
{
  uint64_t v1 = [objc_alloc((Class)LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass(a1)) initWithPolicyChangeHandler:0];
  int v2 = (void *)LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor;
  LaunchServices::DMFSupport::getMonitor(BOOL)::nonCachingMonitor = v1;
}

Class LaunchServices::DMFSupport::initDMFApplicationPolicyMonitor(LaunchServices::DMFSupport *this)
{
  if (!LaunchServices::DMFSupport::DeviceManagementLibrary(void)::frameworkLibrary) {
    LaunchServices::DMFSupport::DeviceManagementLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFram eworks/DeviceManagement.fra mework/DeviceManagement",  2);
  }
  Class result = objc_getClass("DMFApplicationPolicyMonitor");
  LaunchServices::DMFSupport::classDMFApplicationPolicyMonitor = (uint64_t)result;
  LaunchServices::DMFSupport::getDMFApplicationPolicyMonitorClass = (uint64_t (*)(LaunchServices::DMFSupport *__hidden))LaunchServices::DMFSupport::DMFApplicationPolicyMonitorFunction;
  return result;
}

id LaunchServices::DMFSupport::DMFApplicationPolicyMonitorFunction(LaunchServices::DMFSupport *this)
{
  return (id)LaunchServices::DMFSupport::classDMFApplicationPolicyMonitor;
}

void ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  LaunchServices::DMFSupport::getLog(v5);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  id v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_2();
    }

    LaunchServices::DMFSupport::addKnownPoliciesToCache(v4, 1);
  }

  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ___ZN14LaunchServices10DMFSupportL17reloadAllPoliciesEP27DMFApplicationPolicyMonitor_block_invoke_cold_1();
    }
  }
}

void sub_183F055BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::DMFSupport::addKnownPoliciesToCache(void *a1, int a2)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  id v39 = a1;
  BOOL v3 = (void *)[v39 mutableCopy];
  uint64_t v4 = MEMORY[0x1895F87A8];
  v42[0] = MEMORY[0x1895F87A8];
  v42[1] = 3221225472LL;
  v42[2] = ___ZN14LaunchServices10DMFSupportL23addKnownPoliciesToCacheEP12NSDictionaryIP8NSStringP8NSNumberEb_block_invoke;
  v42[3] = &unk_189D76198;
  id v5 = v3;
  id v43 = v5;
  [v39 enumerateKeysAndObjectsUsingBlock:v42];
  id v6 = v5;
  os_unfair_lock_lock(&LaunchServices::DMFSupport::allPoliciesLock);
  id v7 = (void *)[(id)LaunchServices::DMFSupport::allPolicies copy];
  id v8 = v7;
  if (a2)
  {
    uint64_t v9 = [v6 copy];
    id v10 = (void *)LaunchServices::DMFSupport::allPolicies;
    LaunchServices::DMFSupport::allPolicies = v9;
  }

  else
  {
    uint64_t v11 = (void *)[v7 mutableCopy];
    uint64_t v12 = v11;
    if (v11) {
      id v13 = v11;
    }
    else {
      id v13 = objc_alloc_init(MEMORY[0x189603FC8]);
    }
    id v10 = v13;

    [v10 addEntriesFromDictionary:v6];
    uint64_t v14 = [v10 copy];
    uint64_t v15 = (void *)LaunchServices::DMFSupport::allPolicies;
    LaunchServices::DMFSupport::allPolicies = v14;
  }

  os_unfair_lock_unlock(&LaunchServices::DMFSupport::allPoliciesLock);
  id v16 = v8;
  id v41 = v6;
  LaunchServices::DMFSupport::getNotificationCenter(0LL);
  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue();
  if (v40)
  {
    objc_msgSend(MEMORY[0x189603FE0], "set", v6, v5);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
    v56[0] = v4;
    v56[1] = 3221225472LL;
    v56[2] = ___ZN14LaunchServices10DMFSupportL16postNotificationEP12NSDictionaryIP8NSStringP8NSNumberES7__block_invoke;
    void v56[3] = &unk_189D74AD0;
    id v18 = v41;
    id v57 = v18;
    id v19 = v17;
    id v58 = v19;
    [v16 enumerateKeysAndObjectsUsingBlock:v56];
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    id v20 = v18;
    uint64_t v21 = [v20 countByEnumeratingWithState:&v52 objects:v60 count:16];
    if (v21)
    {
      uint64_t v22 = *(void *)v53;
      do
      {
        for (uint64_t i = 0LL; i != v21; ++i)
        {
          if (*(void *)v53 != v22) {
            objc_enumerationMutation(v20);
          }
          uint64_t v24 = *(void *)(*((void *)&v52 + 1) + 8 * i);
          [v16 objectForKeyedSubscript:v24];
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue();
          BOOL v26 = v25 == 0LL;

          if (v26) {
            [v19 addObject:v24];
          }
        }

        uint64_t v21 = [v20 countByEnumeratingWithState:&v52 objects:v60 count:16];
      }

      while (v21);
    }

    if ([v19 count])
    {
      [MEMORY[0x189603FA8] array];
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      id v51 = 0LL;
      __int128 v48 = 0LL;
      id v49 = 0LL;
      char v50 = 0;
      +[_LSDServiceDomain defaultServiceDomain]();
      uint64_t v28 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v29 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v48, v28, 0LL);

      if (v29)
      {
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        __int128 v44 = 0u;
        __int128 v45 = 0u;
        id v31 = v19;
        uint64_t v32 = [v31 countByEnumeratingWithState:&v44 objects:v59 count:16];
        if (v32)
        {
          uint64_t v33 = *(void *)v45;
          do
          {
            for (uint64_t j = 0LL; j != v32; ++j)
            {
              if (*(void *)v45 != v33) {
                objc_enumerationMutation(v31);
              }
              +[LSApplicationProxy applicationProxyForIdentifier:withContext:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForIdentifier:withContext:",  *(void *)(*((void *)&v44 + 1) + 8 * j),  v29);
              uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue();
              if (v35) {
                [v27 addObject:v35];
              }
            }

            uint64_t v32 = [v31 countByEnumeratingWithState:&v44 objects:v59 count:16];
          }

          while (v32);
        }
      }

      LaunchServices::DMFSupport::getLog(v30);
      BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
        LaunchServices::DMFSupport::addKnownPoliciesToCache();
      }

      [v40 postNotificationName:@"com.apple.launchservices.private._LSDMFPolicyDidChangeNotification" object:v27];
      if (v48 && v50) {
        _LSContextDestroy(v48);
      }
      id v37 = v49;
      __int128 v48 = 0LL;
      id v49 = 0LL;

      char v50 = 0;
      id v38 = v51;
      id v51 = 0LL;
    }

    else
    {
      LaunchServices::DMFSupport::getLog(0LL);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_DEBUG)) {
        LaunchServices::DMFSupport::addKnownPoliciesToCache();
      }
    }
  }

  else
  {
    LaunchServices::DMFSupport::getLog(0LL);
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEBUG)) {
      LaunchServices::DMFSupport::addKnownPoliciesToCache();
    }
  }
}

void sub_183F05A9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, void *a30)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL15getAllBundleIDsEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(a3 + 169) & 4) == 0)
  {
    int v4 = *(_DWORD *)(a3 + 332);
    if (!v4 || v4 != *(_DWORD *)(a1 + 48))
    {
      id v5 = (id)_CSStringCopyCFString();
      if (v5) {
        [*(id *)(a1 + 32) addObject:v5];
      }
    }
  }

void sub_183F05C7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZN14LaunchServices10DMFSupportL23addKnownPoliciesToCacheEP12NSDictionaryIP8NSStringP8NSNumberEb_block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_183F05CE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL16postNotificationEP12NSDictionaryIP8NSStringP8NSNumberES7__block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  [*(id *)(a1 + 32) objectForKeyedSubscript:v8];
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  id v7 = v6;
  if (!v6 || ([v6 isEqualToNumber:v5] & 1) == 0) {
    [*(id *)(a1 + 40) addObject:v8];
  }
}

void sub_183F05D80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL30getPolicyWithCompletionHandlerEP8NSStringhU13block_pointerFvP8NSNumberP7NSErrorE_block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  [a2 allValues];
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  [v6 firstObject];
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v7, v8);
}

void sub_183F05E1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  LaunchServices::DMFSupport::getLog(v6);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_2();
    }

    if (*(_BYTE *)(a1 + 40)) {
      LaunchServices::DMFSupport::addKnownPoliciesToCache(v5, 0);
    }
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ___ZN14LaunchServices10DMFSupportL32getPoliciesWithCompletionHandlerEP5NSSetIP8NSStringEhU13block_pointerFvP12NSDictionaryIS3_P8NSNumberEP7NSErrorE_block_invoke_cold_1();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_183F05F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_183F0615C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F062C4(_Unwind_Exception *a1)
{
  int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_183F065CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_183F06700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F067E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0693C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F06A48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F06CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F06D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F06DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F06E58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F06EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F06FB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0740C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F074F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F075E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F076D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F077BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F078A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07C58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F07E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F08018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F081A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F08330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F08424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F08510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getFailableNumericFromBaseProperties<unsigned long long>( void *a1, void *a2, const char *a3, void *a4, void *a5)
{
  v21[1] = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v10 = a2;
  NSStringFromSelector(a3);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = [v10 objectForKey:v11];
  uint64_t v14 = (void *)v13;
  if (v12) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (v13)
    {
LABEL_9:
      *a4 = [v14 unsignedLongLongValue];
      uint64_t v17 = 1LL;
      goto LABEL_13;
    }
  }

  else
  {
    char isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0) {
      goto LABEL_9;
    }
  }

  [v9 askedForMissingSelector:a3];
  if (!a5)
  {
    uint64_t v17 = 0LL;
    goto LABEL_14;
  }

  uint64_t v20 = *MEMORY[0x189607490];
  v21[0] = v11;
  [MEMORY[0x189603F68] dictionaryWithObjects:v21 forKeys:&v20 count:1];
  id v18 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 5LL, (uint64_t)"getFailableNumericFromBaseProperties", 284LL, v18);
  uint64_t v17 = 0LL;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = v18;
LABEL_13:

LABEL_14:
  return v17;
}

void sub_183F086DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F087EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F088D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F089C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F08AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getFailableNumericFromBaseProperties<double>( void *a1, void *a2, const char *a3, void *a4, void *a5)
{
  v22[1] = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v10 = a2;
  NSStringFromSelector(a3);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = [v10 objectForKey:v11];
  uint64_t v14 = (void *)v13;
  if (v12) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15)
  {
    if (v13)
    {
LABEL_9:
      [v14 doubleValue];
      *a4 = v17;
      uint64_t v18 = 1LL;
      goto LABEL_13;
    }
  }

  else
  {
    char isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0) {
      goto LABEL_9;
    }
  }

  [v9 askedForMissingSelector:a3];
  if (!a5)
  {
    uint64_t v18 = 0LL;
    goto LABEL_14;
  }

  uint64_t v21 = *MEMORY[0x189607490];
  v22[0] = v11;
  [MEMORY[0x189603F68] dictionaryWithObjects:v22 forKeys:&v21 count:1];
  id v19 = (void *)objc_claimAutoreleasedReturnValue();
  _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 5LL, (uint64_t)"getFailableNumericFromBaseProperties", 284LL, v19);
  uint64_t v18 = 0LL;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = v19;
LABEL_13:

LABEL_14:
  return v18;
}

void sub_183F08C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F08F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F09164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0927C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F09368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F09454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F09624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t categorizeSelector(objc_selector *a1)
{
  uint64_t v14 = (const char *)a1;
  os_unfair_lock_lock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  uint64_t v1 = (_OWORD *)categorizeSelector(objc_selector *)::categoryCache;
  if (!categorizeSelector(objc_selector *)::categoryCache)
  {
    uint64_t v1 = operator new(0x28uLL);
    _OWORD *v1 = 0u;
    v1[1] = 0u;
    *((_DWORD *)v1 + _Block_object_dispose(va, 8) = 1065353216;
    categorizeSelector(objc_selector *)::categoryCache = (uint64_t)v1;
  }

  int v2 = std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>( v1,  &v14);
  if (!v2)
  {
    uint64_t v3 = categorizeSelector(objc_selector *)::categoryCache;
    SEL aSelector = v14;
    if (_lock_categorizeSelectorWithRuntime(objc_selector *)::onceToken != -1) {
      dispatch_once(&_lock_categorizeSelectorWithRuntime(objc_selector *)::onceToken, &__block_literal_global_224);
    }
    if (std::__hash_table<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::__unordered_map_hasher<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::hash<_opaque_pthread_t *>,std::equal_to<_opaque_pthread_t *>,true>,std::__unordered_map_equal<_opaque_pthread_t *,std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>,std::equal_to<_opaque_pthread_t *>,std::hash<_opaque_pthread_t *>,true>,std::allocator<std::__hash_value_type<_opaque_pthread_t *,std::shared_ptr<LaunchServices::PerThreadContext>>>>::find<_opaque_pthread_t *>( (void *)_lock_categorizeSelectorWithRuntime(objc_selector *)::knownExceptions,  &aSelector))
    {
      uint64_t v4 = 5LL;
    }

    else
    {
      NSStringFromSelector(aSelector);
      id v5 = (void *)objc_claimAutoreleasedReturnValue();
      id v6 = (objc_class *)objc_opt_class();
      InstanceMethod = class_getInstanceMethod(v6, aSelector);
      id v8 = method_copyReturnType(InstanceMethod);
      unsigned int NumberOfArguments = method_getNumberOfArguments(InstanceMethod);
      if (!strcmp(v8, "B") && NumberOfArguments == 2)
      {
        uint64_t v4 = 0LL;
      }

      else if (!strcmp(v8, "@") {
             && NumberOfArguments == 3
      }
             && ([v5 hasSuffix:@"WithError:"] & 1) != 0)
      {
        uint64_t v4 = 1LL;
      }

      else
      {
        uint64_t v4 = 6LL;
        if (!strcmp(v8, "B") && NumberOfArguments == 4)
        {
          if ([v5 hasSuffix:@":error:"])
          {
            uint64_t v12 = method_copyArgumentType(InstanceMethod, 2u);
            if (!strcmp(v12, "^I"))
            {
              uint64_t v4 = 2LL;
            }

            else if (!strcmp(v12, "^Q"))
            {
              uint64_t v4 = 3LL;
            }

            else if (!strcmp(v12, "^d"))
            {
              uint64_t v4 = 4LL;
            }

            else
            {
              uint64_t v4 = 6LL;
            }

            if (v12) {
              free(v12);
            }
          }

          else
          {
            uint64_t v4 = 6LL;
          }
        }
      }

      if (v8) {
        free(v8);
      }
    }

    v13[0] = v14;
    v13[1] = v4;
    int v2 = std::__hash_table<std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,FSSelectorCategory>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector *,FSSelectorCategory>>( v3,  v13,  v13);
  }

  uint64_t v10 = v2[3];
  os_unfair_lock_unlock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  return v10;
}

void sub_183F09884(_Unwind_Exception *a1)
{
  if (v2) {
    free(v2);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&categorizeSelector(objc_selector *)::categoryCacheMutex);
  _Unwind_Resume(a1);
}

void sub_183F099D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F09D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F09E70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_183F09ED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F09FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::__unordered_map_hasher<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::hash<objc_selector *>,std::equal_to<objc_selector *>,true>,std::__unordered_map_equal<objc_selector *,std::__hash_value_type<objc_selector *,FSSelectorCategory>,std::equal_to<objc_selector *>,std::hash<objc_selector *>,true>,std::allocator<std::__hash_value_type<objc_selector *,FSSelectorCategory>>>::__emplace_unique_key_args<objc_selector *,std::pair<objc_selector *,FSSelectorCategory>>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  uint64_t v14 = a3[1];
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1LL;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }

    else
    {
      v23 &= v9 - 1;
    }

    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }

void sub_183F0A268(_Unwind_Exception *a1)
{
}

uint64_t ___ZL35_lock_categorizeSelectorWithRuntimeP13objc_selector_block_invoke()
{
  v2[5] = *MEMORY[0x1895F89C0];
  os_log_t v0 = operator new(0x28uLL);
  v2[0] = sel_canIssueIO;
  v2[1] = sel_URL;
  v2[2] = sel_getResourceValue_forKey_options_error_;
  v2[3] = sel_getHFSType_creator_error_;
  void v2[4] = sel_childNodeWithRelativePathExists_;
  uint64_t result = std::unordered_set<objc_selector *>::unordered_set((uint64_t)v0, v2, 5LL);
  _lock_categorizeSelectorWithRuntime(objc_selector *)::knownExceptions = (uint64_t)v0;
  return result;
}

void sub_183F0A31C(_Unwind_Exception *a1)
{
}

uint64_t std::unordered_set<objc_selector *>::unordered_set(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<objc_selector *,std::hash<objc_selector *>,std::equal_to<objc_selector *>,std::allocator<objc_selector *>>::__emplace_unique_key_args<objc_selector *,objc_selector * const&>( a1,  a2,  a2);
      ++a2;
      v5 -= 8LL;
    }

    while (v5);
  }

  return a1;
}

void sub_183F0A390(_Unwind_Exception *a1)
{
}

void *std::__hash_table<objc_selector *,std::hash<objc_selector *>,std::equal_to<objc_selector *>,std::allocator<objc_selector *>>::__emplace_unique_key_args<objc_selector *,objc_selector * const&>( uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69LL * ((8 * *a2 + 8LL) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69LL * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69LL * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }

    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }

    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }

        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }

          else
          {
            v13 &= v9 - 1;
          }

          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0LL;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }

    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }

  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }

  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_183F0A5E0(_Unwind_Exception *a1)
{
}

void OUTLINED_FUNCTION_0_5(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_183F0B490( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
}

id pendingSaveTokenInterface(void)
{
  return (id)pendingSaveTokenInterface(void)::result;
}

void sub_183F0B63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0B6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0B82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0B9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0BD94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20, uint64_t a21, void *a22, uint64_t a23, CFTypeRef a24, uint64_t a25, CFTypeRef cf, char a27)
{
  if (cf) {
    CFRelease(cf);
  }

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

LABEL_2:
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  v7,  (uint64_t)"-[_LSDModifyClient registerItemInfo:alias:diskImageAlias:bundleURL:installationPlist:completionHandler:]_block_invoke",  499LL,  0LL);
    unint64_t v8 = (_DWORD *)objc_claimAutoreleasedReturnValue();
LABEL_3:
    unint64_t v9 = (unsigned int *)&v27 + 1;
    if (!*(_BYTE *)(a1 + 120)) {
      unint64_t v9 = (unsigned int *)&v27;
    }
    uint8x8_t v10 = *v9;
    _LSDefaultLog();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      [*(id *)(a1 + 64) filePathURL];
      uint64_t v12 = (id)objc_claimAutoreleasedReturnValue();
      unint64_t v13 = *(int *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL);
      float v14 = *(unsigned int *)(*(void *)(a1 + 88) + 28LL);
      [*(id *)(a1 + 72) XPCConnection];
      float v15 = (void *)objc_claimAutoreleasedReturnValue();
      BOOL v16 = [v15 processIdentifier];
      *(_DWORD *)__int128 buf = 138413314;
      uint64_t v29 = v12;
      id v30 = 2048;
      id v31 = v13;
      uint64_t v32 = 2048;
      uint64_t v33 = v14;
      uint64_t v34 = 2048;
      uint64_t v35 = v10;
      BOOL v36 = 1024;
      id v37 = v16;
      _os_log_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_DEFAULT,  "registered %@ (status %ld, old id 0x%llx) as unit 0x%llx on behalf of pid %d",  buf,  0x30u);
    }

    unint64_t v17 = (*(uint64_t (**)(void, BOOL, uint64_t, void, BOOL, _DWORD *))(*(void *)(a1 + 96) + 16LL))( *(void *)(a1 + 96),  *(_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) == 0,  v10,  *(void *)(a1 + 112),  v25 != 0,  v8);
    MEMORY[0x186E2AFE0](v17);
    goto LABEL_8;
  }

  if (v7 != -10675) {
    goto LABEL_20;
  }
  if ((*(_BYTE *)(*(void *)(a1 + 32) + 16LL) & 2) != 0)
  {
    unint64_t v7 = -10675;
    goto LABEL_2;
  }

  _LSInstallLog();
  unint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = *(void **)(a1 + 64);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v29 = v24;
    _os_log_impl(&dword_183E58000, v23, OS_LOG_TYPE_DEFAULT, "Retrying registration of %@ with trusted bit", buf, 0xCu);
  }

  unint64_t v8 = (_DWORD *)[*(id *)(a1 + 32) mutableCopy];
  v8[4] |= 2u;
  [*(id *)(a1 + 72) registerItemInfo:v8 alias:*(void *)(a1 + 40) diskImageAlias:*(void *)(a1 + 80) bundleURL:*(void *)(a1 + 64) installationPlist:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 96)];
LABEL_8:

  if (cf) {
    CFRelease(cf);
  }
}

void sub_183F0C1A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }

  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_112c30_ZTS10CFReleaserIPK9__CFArrayE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 112);
  *(void *)(a1 + 112) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_ea8_112c30_ZTS10CFReleaserIPK9__CFArrayE(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 112);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 112) = 0LL;
}

void sub_183F0C55C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0C638( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F0C7E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_183F0CA48(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183F0CB48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_183F0CD50(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

void sub_183F0CF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183F0D24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0D374( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F0D52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0D62C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F0D7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0D9C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_183F0DB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0DD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0DE94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F0DFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0E1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0E364( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_183F0E508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0E6A0(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_183F0E80C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F0E93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0EA04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_183F0EBC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void sub_183F0ED5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0EF7C(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_183F0F098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_183F0F198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F0F224(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_183F0F694( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_183F0F9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_183F0FB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F0FCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F10048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F10184( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F10214( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F10348( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_183F10AD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, id a50)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a41);
  _Block_object_dispose(&a45, 8);

  _Unwind_Resume(a1);
}

void sub_183F10CE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F10E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F10F58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_183F1121C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F11340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F11540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F117A8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183F119B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F11B70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_183F11FC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, id a35)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v40 - 168), 8);

  _Unwind_Resume(a1);
}

void sub_183F12220( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a9);
  _Unwind_Resume(a1);
}

void sub_183F125CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id a29)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose((const void *)(v33 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_183F12884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

void sub_183F129D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_183F12B2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_183F12CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F12EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSDoWithLock(os_unfair_lock_s *a1, void *a2)
{
  unint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  v3[2]();
  os_unfair_lock_unlock(a1);
}

void sub_183F12FC8(void *a1)
{
}

void sub_183F12FDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F132CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F13400( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F13568( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_183F1376C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  unint64_t v18 = v16;

  _Unwind_Resume(a1);
}

void sub_183F13834( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F13B54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30)
{
  id v37 = v35;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

LABEL_104:
  if (v125 && v127) {
    _LSContextDestroy(v125);
  }
  uint64_t v102 = v126;
  id v125 = 0LL;
  id v126 = 0LL;

  uint64_t v127 = 0;
  unsigned int v103 = v128;
  uint64_t v128 = 0LL;
}
}

void sub_183F14914( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, _Unwind_Exception *exception_objecta, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, char a36, int a37, __int16 a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    a67 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a36)
  {
    std::stringbuf::string_type __p = &a33;
    std::vector<std::tuple<NSString * {__strong},unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  }

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a38);

  _Unwind_Resume(a1);
}

void sub_183F14CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F14E08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_183F14EE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL25pendingSaveTokenInterfacev_block_invoke()
{
  uint64_t v0 = [MEMORY[0x189607B48] interfaceWithProtocol:&unk_18C688F28];
  uint64_t v1 = (void *)pendingSaveTokenInterface(void)::result;
  pendingSaveTokenInterface(void)::CFTypeRef result = v0;

  return [(id)pendingSaveTokenInterface(void)::result setClass:objc_opt_class() forSelector:sel_waitForResult_ argumentIndex:1 ofReply:1];
}

uint64_t std::__split_buffer<std::tuple<NSString * {__strong},unsigned int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::tuple<NSString * {__strong},unsigned int>>::__destroy_vector::operator()[abi:nn180100]( void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

__n128 __Block_byref_object_copy__284(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__285(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

void ___ZL23pluginsUnitIDsForBundleP9LSContextPK12LSBundleData_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = (char *)v4[7];
  unint64_t v6 = v4[8];
  if ((unint64_t)v5 >= v6)
  {
    unint64_t v8 = (char *)v4[6];
    uint64_t v9 = (v5 - v8) >> 2;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v4 + 8), v12);
      unint64_t v8 = (char *)v4[6];
      uint64_t v5 = (char *)v4[7];
    }

    else
    {
      unint64_t v13 = 0LL;
    }

    float v14 = &v13[4 * v9];
    float v15 = &v13[4 * v12];
    *(_DWORD *)float v14 = a3;
    unint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }

    v4[6] = v14;
    v4[7] = v7;
    _OWORD v4[8] = v15;
    if (v8) {
      operator delete(v8);
    }
  }

  else
  {
    *(_DWORD *)uint64_t v5 = a3;
    unint64_t v7 = v5 + 4;
  }

  v4[7] = v7;
}

id ___ZL45sendPersonaChangedNotificationsForIdentifiersP9LSContextP5NSSetIP8NSStringE_block_invoke( uint64_t a1, uint64_t a2)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue();
  [v2 detach];
  return v2;
}

void sub_183F15180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:nn180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>( std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (unsigned int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  unint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      abort();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      unint64_t v18 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>( (uint64_t)p_end_cap,  v17);
    }
    else {
      unint64_t v18 = 0LL;
    }
    uint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    id v30 = &v28[a5];
    do
    {
      unsigned int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4LL;
    }

    while (v29);
    __v.__end_ = v30;
    uint64_t v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }

  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    unint64_t v23 = (unsigned int *)*((void *)p_end_cap - 1);
LABEL_17:
    uint64_t v24 = &v5[a5];
    uint64_t v25 = &v23[-a5];
    BOOL v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      BOOL v26 = v23;
      do
      {
        unsigned int v27 = *v25++;
        *v26++ = v27;
      }

      while ((unint64_t)v25 < v12);
    }

    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    return v5;
  }

  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  unint64_t v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_183F15360( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer( std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  unint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    unint64_t v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--unint64_t v7 = v9;
    }

    while (v8 != v6);
  }

  __v->__begin_ = v7;
  std::vector<unsigned int>::pointer end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    unint64_t v7 = __v->__begin_;
  }

  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  unint64_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void sub_183F154F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F155A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F15648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F156EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F15874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F15BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F15CCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F15F50(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183F160AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F16228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F162FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F16484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F168AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*((_BYTE *)v9 + 168)) {
    LaunchServices::BindingEvaluator::~BindingEvaluator(v9);
  }
  _Unwind_Resume(a1);
}

void sub_183F16CA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  _Unwind_Resume(a1);
}

void sub_183F16EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F171E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

uint64_t std::remove_if[abi:nn180100]<std::__wrap_iter<LSBinding *>,BOOL({block_pointer} {__strong})(LSBinding const&)>( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  if (a1 != a2)
  {
    while ((v5[2](v5, a1) & 1) == 0)
    {
      a1 += 48LL;
      if (a1 == a2) {
        goto LABEL_11;
      }
    }
  }

  if (a1 == a2)
  {
LABEL_11:
    a1 = a2;
  }

  else
  {
    for (uint64_t i = a1 + 48; i != a2; i += 48LL)
    {
      if ((v5[2](v5, i) & 1) == 0)
      {
        __int128 v7 = *(_OWORD *)(i + 16);
        *(_OWORD *)a1 = *(_OWORD *)i;
        *(_OWORD *)(a1 + 16) = v7;
        uint64_t v8 = *(void *)(i + 32);
        *(void *)(i + 32) = 0LL;
        unsigned int v9 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v8;

        uint64_t v10 = *(void *)(i + 40);
        *(void *)(i + 40) = 0LL;
        std::__split_buffer<unsigned int>::pointer v11 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v10;

        a1 += 48LL;
      }
    }
  }

  return a1;
}

void sub_183F1737C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F173F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<LSBinding>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>( (uint64_t)&v7,  a3,  *(void *)(a1 + 8),  a2);
    std::vector<LSBinding>::__base_destruct_at_end[abi:nn180100](a1, v5);
  }

  return a2;
}

void sub_183F17964( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
  _Unwind_Resume(a1);
}

void sub_183F17C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F17D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F17DDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F17EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<LSBinding *,LSBinding *,LSBinding *>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    __int128 v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    *(_OWORD *)(a4 + 16) = v7;
    uint64_t v8 = *(void *)(v5 + 32);
    *(void *)(v5 + 32) = 0LL;
    unsigned int v9 = *(void **)(a4 + 32);
    *(void *)(a4 + 32) = v8;

    uint64_t v10 = *(void *)(v5 + 40);
    *(void *)(v5 + 40) = 0LL;
    std::__split_buffer<unsigned int>::pointer v11 = *(void **)(a4 + 40);
    *(void *)(a4 + 40) = v10;

    a4 += 48LL;
    v5 += 48LL;
  }

  while (v5 != v6);
  return v6;
}

void sub_183F186E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
}

void sub_183F187A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F18870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F18940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F18CAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_183F18F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F19418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1983C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v19 = v17;

  _Unwind_Resume(a1);
}

void sub_183F19A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F19C44(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_183F19D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F19D84( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F1A0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1A3F4(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_183F1A68C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void _LSServer_GetServerStoreForConnectionWithCompletionHandler(void *a1, void *a2)
{
  v27[1] = *MEMORY[0x1895F89C0];
  id v3 = a1;
  uint64_t v4 = a2;
  _LSAssertRunningInServer((uint64_t)"void _LSServer_GetServerStoreForConnectionWithCompletionHandler(NSXPCConnection *__s"
                                    "trong, void (^__strong)(__strong id, FSNode *__strong, NSError *__strong))");
  _LSServer_DatabaseExecutionContext();
  uint64_t v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  -[LSDBExecutionContext assertActiveForThisThread](v5);

  [v3 _xpcConnection];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  int MayMapDatabase = _LSXPCConnectionMayMapDatabase(v6);

  if (MayMapDatabase)
  {
    id v19 = 0LL;
    uint64_t v8 = (void *)_LSServer_CopyLocalDatabase(&v19);
    id v9 = v19;
    _LSDefaultLog();
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = -[_LSDatabase isSeeded]((uint64_t)v8);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v21 = v8;
      __int16 v22 = 1024;
      int v23 = v16;
      __int16 v24 = 2114;
      id v25 = v9;
      _os_log_error_impl( &dword_183E58000,  v10,  OS_LOG_TYPE_ERROR,  "_LSServer_CopyLocalDatabase returned db %@ (seeded? %d) error %{public}@",  buf,  0x1Cu);
    }

    std::__split_buffer<unsigned int>::pointer v11 = (void *)os_transaction_create();
    _LSServer_GetIOQueue();
    int64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1895F87A8];
    v17[1] = 3221225472LL;
    id v17[2] = ___LSServer_GetServerStoreForConnectionWithCompletionHandler_block_invoke;
    v17[3] = &unk_189D741C8;
    id v18 = v11;
    id v13 = v11;
    dispatch_async(v12, v17);

    if (v8)
    {
LABEL_7:
      uint64_t v14 = v8[1];
      _LSDatabaseGetNode((uint64_t)v8);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
      v4[2](v4, v14, v15, 0LL);
    }

    else
    {
      ((void (**)(id, uint64_t, void *, id))v4)[2](v4, 0LL, 0LL, v9);
    }
  }

  else
  {
    uint64_t v26 = *MEMORY[0x189607490];
    v27[0] = @"process may not map database";
    [MEMORY[0x189603F68] dictionaryWithObjects:v27 forKeys:&v26 count:1];
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -54LL,  (uint64_t)"_LSServer_GetServerStoreForConnectionWithCompletionHandler",  71LL,  v9);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(id, uint64_t, void *, void *))v4)[2](v4, 0LL, 0LL, v8);
  }
}

void sub_183F1B0A0(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_183F1B1E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F1C220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1C330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_IS_WAITING_FOR_THE_DATABASE_TO_FINISH_SEEDING__(void)
{
  uint64_t v0 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_183F1C408( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F1C484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F1C5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1C6B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1C7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1C874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1C98C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_183F1CC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1CEC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1D05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1D10C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::__split_buffer<unsigned int>::pointer v11 = v10;

  _Unwind_Resume(a1);
}

void sub_183F1D1E8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183F1D2A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F1D348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1D404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1D4DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1D5C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1D6AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1D778( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1D8D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _Unwind_Resume(a1);
}

void sub_183F1D994( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1DA48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1DC30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }

  _Unwind_Resume(a1);
}

void sub_183F1E060( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_183F1E198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1E85C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_183F1EA74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1EB54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
}

void sub_183F1EC3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
}

void sub_183F1ED88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F1EE14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F1F218( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a29);
  _Unwind_Resume(a1);
}

void sub_183F1F38C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F1F410( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1F52C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_183F1F6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F1F920(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_183F1FC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  id v13 = v12;

  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183F1FD14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F1FDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F20184( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void configureUIDForUserSession(NSXPCConnection *a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  xpc_connection_set_target_user_session_uid();
}

void sub_183F201D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void _LSDServiceStartAllServices()
{
  if (_LSDServiceStartAllServices::once != -1) {
    dispatch_once(&_LSDServiceStartAllServices::once, &__block_literal_global_20);
  }
}

void sub_183F2052C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F20790( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F20874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDServiceGetXPCConnection(void *a1, uint64_t a2)
{
  if ((void *)objc_opt_class() == a1)
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "NSXPCConnection *_LSDServiceGetXPCConnection(__unsafe_unretained Class _Nonnull, _LSDServiceDomain *const __strong _Nonnull)");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    [v9 handleFailureInFunction:v10, @"LSDService.mm", 406, @"Invalid parameter not satisfying: %@", @"self != [_LSDService class]" file lineNumber description];
  }

  if (_LSDServiceGetXPCConnection::once != -1) {
    dispatch_once(&_LSDServiceGetXPCConnection::once, &__block_literal_global_42);
  }
  -[_LSDServiceDomain connectionConfigurationStateForServiceClass:](a2, a1, (uint64_t)&v17);
  id v4 = v19;
  uint64_t v5 = (void *)_LSDServiceGetXPCConnection::serverConnections;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 3321888768LL;
  v11[2] = ___LSDServiceGetXPCConnection_block_invoke_2;
  void v11[3] = &unk_189D76A18;
  id v13 = a1;
  __int128 v14 = v17;
  uint64_t v15 = v18;
  id v6 = v4;
  id v16 = v6;
  id v12 = v6;
  LaunchServices::_LSLazyLoadObjectForKeyWithLock( v5,  v6,  (os_unfair_lock_s *)&_LSDServiceGetXPCConnection::serverConnectionsLock,  v11);
  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_183F20A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F20BF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_183F20D08(_Unwind_Exception *a1)
{
}

id __copy_helper_block_ea8_48c41_ZTS35ServiceConnectionConfigurationState(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v3;
  id result = *(id *)(a2 + 72);
  *(void *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_ea8_48c41_ZTS35ServiceConnectionConfigurationState(uint64_t a1)
{
}

void (**_LSDServiceGetXPCProxyForServiceClass( void *a1, uint64_t a2, int a3, void (**a4)(void, void)))(void, void)
{
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  __int128 v7 = v6;
  if (v6)
  {
    if (a3) {
      [v6 synchronousRemoteObjectProxyWithErrorHandler:a4];
    }
    else {
      [v6 remoteObjectProxyWithErrorHandler:a4];
    }
    a4 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
  }

  else if (a4)
  {
    _LSDefaultLog();
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      _LSDServiceGetXPCProxyForServiceClass_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    }

    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607670],  -10822LL,  (uint64_t)"_LSDServiceGetXPCProxyForServiceClass",  481LL,  0LL);
    id v16 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(void, void *))a4)[2](a4, v16);

    a4 = 0LL;
  }

  return a4;
}

void sub_183F20E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F20EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F20F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F20FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F21028(_Unwind_Exception *a1)
{
}

void sub_183F21080(_Unwind_Exception *a1)
{
}

void sub_183F210E8(_Unwind_Exception *a1)
{
}

void sub_183F212A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  _Unwind_Resume(a1);
}

void sub_183F21390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

objc_object *_LSDServiceReplaceObject(objc_object *a1)
{
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (-[objc_object isMemberOfClass:](v1, "isMemberOfClass:", objc_opt_class()) & 1) == 0)
  {
    id v2 = objc_alloc(MEMORY[0x189604030]);
    -[objc_object absoluteString](v1, "absoluteString");
    __int128 v3 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = [v2 initWithString:v3];

    id v1 = (objc_object *)v4;
  }

  return v1;
}

void sub_183F21448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F214F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

dispatch_block_t _LSServer_MakeServiceFloorBlock(void *a1)
{
  qos_class_t v2 = qos_class_self();
  if (v2 <= QOS_CLASS_DEFAULT) {
    dispatch_qos_class_t v3 = QOS_CLASS_DEFAULT;
  }
  else {
    dispatch_qos_class_t v3 = v2;
  }
  return dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ASSIGN_CURRENT, v3, 0, a1);
}

void sub_183F215F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F21808(_Unwind_Exception *exception_object)
{
}

void OUTLINED_FUNCTION_2_3(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

LaunchServices::DumpWriter *LaunchServices::DumpWriter::DumpWriter( LaunchServices::DumpWriter *this, _LSDatabase *a2, NSMutableAttributedString *a3)
{
  uint64_t v5 = a2;
  CSStore2::AttributedStringWriter::AttributedStringWriter(this, v5->store, a3);
  *(void *)this = off_189D76AA8;
  *((void *)this + 32) = v5;
  return this;
}

void sub_183F21A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *LaunchServices::DumpWriter::DumpWriter( LaunchServices::DumpWriter *this, NSMutableAttributedString *a2)
{
  id result = (void *)CSStore2::AttributedStringWriter::AttributedStringWriter(this, 0LL, a2);
  *id result = off_189D76AA8;
  result[32] = 0LL;
  return result;
}

void LaunchServices::DumpWriter::~DumpWriter(id *this)
{
  *this = off_189D76AA8;

  CSStore2::AttributedStringWriter::~AttributedStringWriter((CSStore2::AttributedStringWriter *)this);
}

{
  void *v2;
  *this = off_189D76AA8;

  CSStore2::AttributedStringWriter::~AttributedStringWriter((CSStore2::AttributedStringWriter *)this);
  operator delete(v2);
}

void LaunchServices::DumpWriter::platform(LaunchServices::DumpWriter *this, NSString *a2, uint64_t a3)
{
  uint64_t v9 = a2;
  if ((_DWORD)a3)
  {
    if ((_DWORD)a3 != 6)
    {
      if (dyld_is_simulator_platform())
      {
        uint64_t v5 = (__CFString *)objc_msgSend( objc_alloc(NSString),  "initWithFormat:",  @"simulator (%llu)",  dyld_get_base_platform());
        if (v5) {
          goto LABEL_10;
        }
      }

      else if (dyld_get_active_platform() == (_DWORD)a3)
      {
        uint64_t v5 = @"native";
        goto LABEL_10;
      }

      __int128 v7 = v9;
      [MEMORY[0x189607968] numberWithUnsignedInt:a3];
      uint64_t v8 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(this, v7, v8);
      goto LABEL_11;
    }

    uint64_t v5 = @"Mac Catalyst";
  }

  else
  {
    uint64_t v5 = @"#";
  }

void sub_183F21CE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices10DumpWriter8platformEP8NSStringj_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::string( *(CSStore2::AttributedStringWriter **)(a1 + 48),  *(NSString **)(a1 + 32),  *(NSString **)(a1 + 40));
}

void LaunchServices::DumpWriter::directoryClass(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if (a3 < 9 && ((0x1FDu >> a3) & 1) != 0)
  {
    uint64_t v5 = off_189D76AE0[(char)a3];
  }

  else
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Other (%llu)", a3);
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  [MEMORY[0x189607968] numberWithUnsignedChar:a3];
  id v6 = (void *)objc_claimAutoreleasedReturnValue();
  id v7 = v4;
  uint64_t v8 = v5;
  CSStore2::AttributedStringWriter::withAppliedAttribute();
}

void sub_183F21E5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices10DumpWriter14directoryClassEP8NSString16LSDirectoryClass_block_invoke( uint64_t a1)
{
  return CSStore2::AttributedStringWriter::string( *(CSStore2::AttributedStringWriter **)(a1 + 48),  *(NSString **)(a1 + 32),  *(NSString **)(a1 + 40));
}

void LaunchServices::DumpWriter::version( LaunchServices::DumpWriter *this, NSString *a2, LSVersionNumber *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a2;
  __int128 v6 = *(_OWORD *)&a3->_opaque[16];
  v13[0] = *(_OWORD *)a3->_opaque;
  v13[1] = v6;
  memset(v12, 0, sizeof(v12));
  if (_LSVersionNumberCompare(v13, v12))
  {
    __int128 v7 = *(_OWORD *)&a3->_opaque[16];
    v11[0] = *(_OWORD *)a3->_opaque;
    v11[1] = v7;
    _LSVersionNumberGetStringRepresentation(v11);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:a3 length:32 freeWhenDone:0];
    [v9 description];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::format(this, v5, @"%@ (%@)", v8, v10);
  }

  else
  {
    CSStore2::AttributedStringWriter::string(this, v5, &stru_189D7B4C8.isa);
  }
}

void sub_183F21FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSSetDatabaseIsSeeded(int a1)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  int v12 = 0;
  qos_class_t v2 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v3 = MEMORY[0x1895F87A8];
  v8[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
  v8[1] = (void (*)(void, void))3221225472LL;
  _OWORD v8[2] = (void (*)(void, void))___LSSetDatabaseIsSeeded_block_invoke;
  void v8[3] = (void (*)(void, void))&unk_189D731E8;
  void v8[4] = (void (*)(void, void))&v9;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, v8);
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v3;
  v7[1] = 3221225472LL;
  v7[2] = ___LSSetDatabaseIsSeeded_block_invoke_2;
  void v7[3] = &unk_189D731C0;
  void v7[4] = &v9;
  [v4 setDatabaseIsSeeded:a1 != 0 completionHandler:v7];

  objc_autoreleasePoolPop(v2);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_183F223A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t _LSRegisterItemInfo( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  uint64_t v25 = 0LL;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000LL;
  int v28 = 0;
  id v16 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v17 = MEMORY[0x1895F87A8];
  v24[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
  v24[1] = (void (*)(void, void))3221225472LL;
  void v24[2] = (void (*)(void, void))___LSRegisterItemInfo_block_invoke;
  void v24[3] = (void (*)(void, void))&unk_189D731E8;
  void v24[4] = (void (*)(void, void))&v25;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, v24);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v17;
  v23[1] = 3221225472LL;
  id v23[2] = ___LSRegisterItemInfo_block_invoke_2;
  v23[3] = &unk_189D76B30;
  void v23[4] = &v25;
  v23[5] = a6;
  v23[6] = a7;
  v23[7] = a8;
  [v18 registerItemInfo:v13 alias:v14 diskImageAlias:v15 bundleURL:a4 installationPlist:a5 completionHandler:v23];

  objc_autoreleasePoolPop(v16);
  uint64_t v19 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v25, 8);

  return v19;
}

void sub_183F22578( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

uint64_t _LSRegisterExtensionPointClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0LL;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  int v18 = 0;
  uint64_t v8 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v9 = MEMORY[0x1895F87A8];
  v14[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
  v14[1] = (void (*)(void, void))3221225472LL;
  void v14[2] = (void (*)(void, void))___LSRegisterExtensionPointClient_block_invoke;
  v14[3] = (void (*)(void, void))&unk_189D731E8;
  v14[4] = (void (*)(void, void))&v15;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, v14);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v9;
  v13[1] = 3221225472LL;
  _OWORD v13[2] = ___LSRegisterExtensionPointClient_block_invoke_2;
  v13[3] = &unk_189D731C0;
  void v13[4] = &v15;
  [v10 registerExtensionPoint:a1 platform:a2 declaringURL:a4 withInfo:a3 completionHandler:v13];

  objc_autoreleasePoolPop(v8);
  uint64_t v11 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_183F227A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t _LSUnregisterExtensionPointClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0LL;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  int v18 = 0;
  uint64_t v8 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v9 = MEMORY[0x1895F87A8];
  v14[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
  v14[1] = (void (*)(void, void))3221225472LL;
  void v14[2] = (void (*)(void, void))___LSUnregisterExtensionPointClient_block_invoke;
  v14[3] = (void (*)(void, void))&unk_189D731E8;
  v14[4] = (void (*)(void, void))&v15;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, v14);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13[0] = v9;
  v13[1] = 3221225472LL;
  _OWORD v13[2] = ___LSUnregisterExtensionPointClient_block_invoke_2;
  v13[3] = &unk_189D731C0;
  void v13[4] = &v15;
  [v10 unregisterExtensionPoint:a1 platform:a2 withVersion:a3 parentBundleUnit:a4 completionHandler:v13];

  objc_autoreleasePoolPop(v8);
  uint64_t v11 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_183F22940( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t _LSSetContentTypeHandler(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v16 = 0LL;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  int v19 = 0;
  uint64_t v8 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v9 = MEMORY[0x1895F87A8];
  v15[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
  v15[1] = (void (*)(void, void))3221225472LL;
  v15[2] = (void (*)(void, void))___LSSetContentTypeHandler_block_invoke;
  v15[3] = (void (*)(void, void))&unk_189D731E8;
  void v15[4] = (void (*)(void, void))&v16;
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, v15);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v9;
  v14[1] = 3221225472LL;
  void v14[2] = ___LSSetContentTypeHandler_block_invoke_2;
  v14[3] = &unk_189D731C0;
  v14[4] = &v16;
  __int128 v11 = a4[1];
  v20[0] = *a4;
  v20[1] = v11;
  [v10 setHandler:a3 version:v20 roles:a2 forContentType:a1 completionHandler:v14];

  objc_autoreleasePoolPop(v8);
  uint64_t v12 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v16, 8);
  return v12;
}

void sub_183F22B14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t _LSSetSchemeHandler()
{
  return 0LL;
}

BOOL _LSCopyServerStore(void *a1, char a2, void **a3, void *a4, id *a5)
{
  uint64_t v111 = *MEMORY[0x1895F89C0];
  id v54 = a1;
  int v7 = 0;
  if (sLastCallToMapDatabaseFailed) {
    int v8 = 0;
  }
  else {
    int v8 = 100000;
  }
  useconds_t v50 = v8;
  id v49 = (void *)*MEMORY[0x189607688];
  uint64_t v51 = *MEMORY[0x189607460];
  uint64_t v52 = *MEMORY[0x189607670];
  *(void *)&__int128 v6 = 138478339LL;
  __int128 v48 = v6;
  while (1)
  {
    uint64_t v9 = (_LSDServiceDomain *)v54;
    uint64_t v91 = 0LL;
    uint64_t v92 = &v91;
    uint64_t v93 = 0x2020000000LL;
    char v94 = 0;
    uint64_t v85 = 0LL;
    uint64_t v86 = &v85;
    uint64_t v87 = 0x3032000000LL;
    unsigned int v88 = __Block_byref_object_copy__19;
    uint64_t v89 = __Block_byref_object_dispose__19;
    id v90 = 0LL;
    uint64_t v79 = 0LL;
    uint64_t v80 = &v79;
    uint64_t v81 = 0x3032000000LL;
    uint64_t v82 = __Block_byref_object_copy__19;
    unint64_t v83 = __Block_byref_object_dispose__19;
    id v84 = 0LL;
    uint64_t v73 = 0LL;
    uint64_t v74 = &v73;
    uint64_t v75 = 0x3032000000LL;
    uint64_t v76 = __Block_byref_object_copy__19;
    int v77 = __Block_byref_object_dispose__19;
    id v78 = 0LL;
    uint64_t v70 = 0LL;
    int v71 = &v70;
    uint64_t v72 = 0x2020000000LL;
    uint64_t v64 = 0LL;
    uint64_t v65 = &v64;
    uint64_t v66 = 0x3032000000LL;
    int v67 = __Block_byref_object_copy__19;
    uint64_t v68 = __Block_byref_object_dispose__19;
    id v69 = 0LL;
    uint64_t v10 = (void *)MEMORY[0x186E2A59C]();
    *(void *)uint64_t v101 = MEMORY[0x1895F87A8];
    uint64_t v102 = 3221225472LL;
    unsigned int v103 = ___LSCopyStoreFromServer_block_invoke;
    char v104 = &unk_189D76B58;
    __int128 v105 = &v85;
    uint64_t v106 = &v79;
    uint64_t v107 = &v73;
    uint64_t v108 = &v70;
    uint64_t v109 = &v64;
    id v110 = &v91;
    __int128 v11 = (void *)MEMORY[0x186E2A7B8](v101);
    uint64_t v12 = (void *)objc_opt_class();
    _LSDServiceGetXPCConnection(v12, (uint64_t)v9);
    id v13 = (void *)objc_claimAutoreleasedReturnValue();
    v62[0] = MEMORY[0x1895F87A8];
    v62[1] = 3221225472LL;
    v62[2] = ___LSCopyStoreFromServer_block_invoke_2;
    void v62[3] = &unk_189D73298;
    id v14 = v11;
    id v63 = v14;
    [v13 synchronousRemoteObjectProxyWithErrorHandler:v62];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();

    [v15 getServerStoreNonBlockingWithCompletionHandler:v14];
    uint64_t v16 = v74[5];
    if (!*((_BYTE *)v92 + 24) && (a2 & 1) == 0 && v16)
    {
      _LSDefaultLog();
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( &dword_183E58000,  v17,  OS_LOG_TYPE_DEFAULT,  "Database was seeding; client will retry and block. This is not an error.",
          buf,
          2u);
      }

      LSResetDatabaseKnownAvailable(v9);
      id v18 = objc_alloc(MEMORY[0x189607B30]);
      int v19 = (void *)[v18 initWithListenerEndpoint:v74[5]];
      LSDatabaseBlockingFetchInterface();
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue();
      [v19 setRemoteObjectInterface:v20];

      [v19 synchronousRemoteObjectProxyWithErrorHandler:&__block_literal_global_31];
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue();
      [v19 resume];
      *(void *)__int128 buf = MEMORY[0x1895F87A8];
      uint64_t v58 = 3221225472LL;
      char v59 = ___LSCopyStoreFromServer_block_invoke_54;
      uint64_t v60 = &unk_189D76BA0;
      id v61 = v14;
      __int16 v22 = (void *)MEMORY[0x186E2A7B8](buf);
      if (_LSCopyStoreFromServer_onceToken != -1) {
        dispatch_once(&_LSCopyStoreFromServer_onceToken, &__block_literal_global_58_0);
      }
      if (objc_msgSend(MEMORY[0x189607A40], "isMainThread", v48))
      {
        if (*((_BYTE *)v71 + 24)) {
          __LAUNCH_SERVICES_IS_WAITING_ON_THE_MAIN_QUEUE_DUE_TO_A_MANUAL_REBUILD__(v21, (uint64_t)v22);
        }
        else {
          __LAUNCH_SERVICES_WAS_ASKED_TO_PERFORM_BLOCKING_IO_ON_THE_MAIN_QUEUE__(v21, (uint64_t)v22);
        }
      }

      else if (*((_BYTE *)v71 + 24))
      {
        __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_DUE_TO_A_MANUAL_REBUILD_AND_MAY_BLOCK__(v21, (uint64_t)v22);
      }

      else
      {
        __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_AND_MAY_BLOCK__(v21, (uint64_t)v22);
      }

      [v19 invalidate];

      goto LABEL_23;
    }

    if ((a2 & 1) != 0 && v16)
    {
      uint64_t v23 = _LSMakeNSErrorImpl(v49, 36LL, (uint64_t)"_LSCopyStoreFromServer", 459LL, 0LL);
      int v19 = (void *)v65[5];
      v65[5] = v23;
LABEL_23:
    }

    objc_autoreleasePoolPop(v10);
    if (!*((_BYTE *)v92 + 24))
    {
      _LSDefaultLog();
      int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = v86[5];
        uint64_t v41 = v80[5];
        uint64_t v42 = v65[5];
        *(_DWORD *)uint64_t v95 = v48;
        uint64_t v96 = v40;
        __int16 v97 = 2113;
        uint64_t v98 = v41;
        __int16 v99 = 2114;
        uint64_t v100 = v42;
        _os_log_error_impl( &dword_183E58000,  v28,  OS_LOG_TYPE_ERROR,  "LaunchServices: store %{private}@ or url %{private}@ was nil: %{public}@",  v95,  0x20u);
      }

      id v26 = (id)v65[5];
      uint64_t v27 = 0LL;
      goto LABEL_32;
    }

    if (a4)
    {
      id v24 = (id)v86[5];
      _CSStoreSetMutable();
      *a4 = v24;
    }

    if (a3)
    {
      id v25 = (id)v80[5];
      id v26 = 0LL;
      uint64_t v27 = *a3;
      *a3 = v25;
LABEL_32:

      goto LABEL_34;
    }

    id v26 = 0LL;
LABEL_34:
    int v29 = *((unsigned __int8 *)v92 + 24);
    BOOL v30 = *((_BYTE *)v92 + 24) != 0;
    _Block_object_dispose(&v64, 8);

    _Block_object_dispose(&v70, 8);
    _Block_object_dispose(&v73, 8);

    _Block_object_dispose(&v79, 8);
    _Block_object_dispose(&v85, 8);

    _Block_object_dispose(&v91, 8);
    if (v30)
    {
      sLastCallToMapDatabaseFailed = 0;
      goto LABEL_70;
    }

    if (a5) {
      objc_storeStrong(a5, v26);
    }
    sLastCallToMapDatabaseFailed = 1;
    objc_msgSend(v26, "domain", v48);
    unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v31 isEqual:v52] && objc_msgSend(v26, "code") == -54)
    {
      BOOL v32 = _LSCurrentProcessMayMapDatabase() == 0;

      if (v32)
      {
        _LSDefaultLog();
        __int128 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          _LSCopyServerStore_cold_1();
        }
        goto LABEL_69;
      }
    }

    else
    {
    }

    if ((a2 & 1) != 0)
    {
      [v26 domain];
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue();
      if ([v33 isEqual:v49])
      {
        BOOL v34 = [v26 code] == 36;

        if (v34)
        {
          _LSDefaultLog();
          __int128 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
            _LSCopyServerStore_cold_4();
          }
          goto LABEL_69;
        }
      }

      else
      {
      }
    }

    if (!v7)
    {
      uint64_t v35 = _LSGetAuditTokenForSelf();
      BOOL v36 = (void *)objc_opt_class();
    }

    [v26 domain];
    id v37 = (void *)objc_claimAutoreleasedReturnValue();
    if ([v37 isEqual:v51])
    {
      BOOL v38 = [v26 code] == 4099;

      if (v38)
      {
        _LSDefaultLog();
        __int128 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          _LSCopyServerStore_cold_3();
        }
        goto LABEL_69;
      }
    }

    else
    {
    }

    _LSDefaultLog();
    id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v101 = 67109120;
      *(_DWORD *)&v101[4] = v7;
      _os_log_error_impl( &dword_183E58000,  v39,  OS_LOG_TYPE_ERROR,  "LaunchServices: Database mapping failed, retries = %d",  v101,  8u);
    }

    usleep(v50);
    if (++v7 == 10) {
      goto LABEL_71;
    }
  }

  _LSDefaultLog();
  __int128 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
    _LSCopyServerStore_cold_2();
  }
LABEL_69:

LABEL_70:
LABEL_71:

  return v29 != 0;
}

void sub_183F233D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void _LSSyncWithMobileInstallation()
{
  uint64_t v0 = (void *)MEMORY[0x186E2A59C]();
  +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, 0LL);
  id v1 = (void *)objc_claimAutoreleasedReturnValue();
  [v1 synchronizeWithMobileInstallation];

  objc_autoreleasePoolPop(v0);
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

uint64_t __LAUNCH_SERVICES_IS_WAITING_ON_THE_MAIN_QUEUE_DUE_TO_A_MANUAL_REBUILD__(void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

uint64_t __LAUNCH_SERVICES_WAS_ASKED_TO_PERFORM_BLOCKING_IO_ON_THE_MAIN_QUEUE__(void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

uint64_t __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_DUE_TO_A_MANUAL_REBUILD_AND_MAY_BLOCK__( void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

uint64_t __LAUNCH_SERVICES_IS_RESEEDING_ITS_DATABASE_AND_MAY_BLOCK__(void *a1, uint64_t a2)
{
  return [a1 getServerStoreBlockingWithCompletionHandler:a2];
}

id _LSCopyEntitlementValueForAuditToken(uint64_t a1, void *a2)
{
  qos_class_t v2 = 0LL;
  if (a1 && a2)
  {
    id v4 = (void *)MEMORY[0x186E2A59C]();
    id v5 = a2;
    if (![v5 UTF8String])
    {
      [MEMORY[0x1896077D8] currentHandler];
      int v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( NSString,  "stringWithUTF8String:",  "xpc_object_t _LSCopyEntitlementValueForAuditToken(const audit_token_t *, CFStringRef)");
      int v8 = (void *)objc_claimAutoreleasedReturnValue();
      [v7 handleFailureInFunction:v8, @"LSEntitlements.mm", 1020, @"Couldn't get C string from entitlement name '%@'", v5 file lineNumber description];
    }

    qos_class_t v2 = (void *)xpc_copy_entitlement_for_token();
    objc_autoreleasePoolPop(v4);
  }

  return v2;
}

void sub_183F237D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSGetBooleanValueForEntitlementValue(void *a1, BOOL value)
{
  id v3 = a1;
  Class Class = object_getClass(v3);
  if (Class == (Class)MEMORY[0x1895F9228])
  {
    value = xpc_BOOL_get_value(v3);
    goto LABEL_13;
  }

  if (Class == (Class)MEMORY[0x1895F9280])
  {
    uint64_t v6 = xpc_int64_get_value(v3);
LABEL_9:
    BOOL v5 = v6 == 0;
    goto LABEL_10;
  }

  if (Class == (Class)MEMORY[0x1895F92F0])
  {
    uint64_t v6 = xpc_uint64_get_value(v3);
    goto LABEL_9;
  }

  if (Class != (Class)MEMORY[0x1895F9258]) {
    goto LABEL_13;
  }
  BOOL v5 = (uint64_t)xpc_double_get_value(v3) == 0;
LABEL_10:
  value = !v5;
LABEL_13:

  return value;
}

void sub_183F238B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetAuditTokenForSelf()
{
  if (_LSGetAuditTokenForSelf::once != -1) {
    dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_117);
  }
  return _LSGetAuditTokenForSelf::result;
}

BOOL _LSCheckEntitlementForAuditTokenWithDefault(uint64_t a1, void *a2, BOOL a3)
{
  if (a1)
  {
    _LSCopyEntitlementValueForAuditToken(a1, a2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v5 = v4;
    if (v4) {
      a3 = _LSGetBooleanValueForEntitlementValue(v4, a3);
    }
  }

  return a3;
}

void sub_183F2394C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSCheckEntitlementForAuditToken(uint64_t a1, void *a2)
{
  return _LSCheckEntitlementForAuditTokenWithDefault(a1, a2, 0LL);
}

BOOL _LSCheckEntitlementForXPCConnectionQuiet(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, a2);
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = v5;
    if (v5) {
      BOOL v7 = _LSGetBooleanValueForEntitlementValue(v5, 0LL);
    }
    else {
      BOOL v7 = 0LL;
    }
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

void sub_183F239D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSCopyEntitlementValueForXPCConnection(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = 0LL;
  if (v3 && a2)
  {
    BOOL v5 = (void *)MEMORY[0x186E2A59C]();
    id v6 = a2;
    if (![v6 UTF8String])
    {
      [MEMORY[0x1896077D8] currentHandler];
      int v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend( NSString,  "stringWithUTF8String:",  "xpc_object_t _LSCopyEntitlementValueForXPCConnection(__strong xpc_connection_t, CFStringRef)");
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
      [v8 handleFailureInFunction:v9, @"LSEntitlements.mm", 1003, @"Couldn't get C string from entitlement name '%@'", v6 file lineNumber description];
    }

    id v4 = (void *)xpc_connection_copy_entitlement_value();
    objc_autoreleasePoolPop(v5);
  }

  return v4;
}

void sub_183F23ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementForXPCConnection(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
LABEL_7:
    uint64_t v5 = 0LL;
    goto LABEL_8;
  }

  if (!_LSCheckEntitlementForXPCConnectionQuiet(v3, a2))
  {
    _LSDefaultLog();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134218242;
      uint64_t pid = xpc_connection_get_pid(v4);
      __int16 v10 = 2114;
      __int128 v11 = a2;
      _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_DEFAULT,  "Connection from process %llu does not have the required entitlement %{public}@",  (uint8_t *)&v8,  0x16u);
    }

    goto LABEL_7;
  }

  uint64_t v5 = 1LL;
LABEL_8:

  return v5;
}

void sub_183F23C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckEntitlementForNSXPCConnection(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    [v3 valueForEntitlement:v4];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
      }

      else
      {
        objc_opt_class();
      }

      uint64_t v6 = 1LL;
LABEL_14:

      goto LABEL_15;
    }

void sub_183F23DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckMIAllowedSPIForXPCConnection(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  uint64_t v5 = 0LL;
  uint64_t v12 = 0LL;
  __int16 v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  char v15 = 0;
  if (v3 && a2)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, @"com.apple.private.mobileinstall.allowedSPI");
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v7 = v6;
    if (v6 && object_getClass(v6) == (Class)MEMORY[0x1895F9220])
    {
      pid_t v8 = (void *)MEMORY[0x186E2A59C]();
      uint64_t v9 = [a2 UTF8String];
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      _OWORD v11[2] = ___LSCheckMIAllowedSPIForXPCConnection_block_invoke;
      void v11[3] = &unk_189D76CB8;
      void v11[4] = &v12;
      v11[5] = v9;
      xpc_array_apply(v7, v11);
      objc_autoreleasePoolPop(v8);
    }

    uint64_t v5 = *((unsigned __int8 *)v13 + 24);
  }

  _Block_object_dispose(&v12, 8);

  return v5;
}

void sub_183F23EF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_183F23FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckOpenSensitiveURLForXPCConnection(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  uint64_t v5 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  if (v3 && a2)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, @"com.apple.springboard.opensensitiveurl");
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
    BOOL v7 = v6;
    if (v6)
    {
      if (object_getClass(v6) == (Class)MEMORY[0x1895F9220])
      {
        v10[0] = MEMORY[0x1895F87A8];
        v10[1] = 3221225472LL;
        v10[2] = ___LSCheckOpenSensitiveURLForXPCConnection_block_invoke;
        v10[3] = &unk_189D76CB8;
        void v10[4] = &v11;
        v10[5] = a2;
        xpc_array_apply(v7, v10);
      }

      else
      {
        BOOL v8 = _LSGetBooleanValueForEntitlementValue(v7, 0LL);
        *((_BYTE *)v12 + 24) = v8;
      }
    }

    uint64_t v5 = *((unsigned __int8 *)v12 + 24);
  }

  _Block_object_dispose(&v11, 8);

  return v5;
}

void sub_183F240B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

void sub_183F24164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCheckMachPortAccessForAuditToken(uint64_t a1, void *a2)
{
  BOOL v2 = 0LL;
  if (a1 && a2)
  {
    if (_LSGetAuditTokenForSelf::once != -1) {
      dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_117);
    }
    if (_LSGetAuditTokenForSelf::result == a1 && !_LSIsCurrentProcessSandboxed(0LL))
    {
      return 1LL;
    }

    else
    {
      uint64_t v5 = (void *)MEMORY[0x186E2A59C]();
      [a2 UTF8String];
      BOOL v2 = sandbox_check_by_audit_token() == 0;
      objc_autoreleasePoolPop(v5);
    }
  }

  return v2;
}

uint64_t _LSIsCurrentProcessSandboxed(_BYTE *a1)
{
  __int16 v3 = 0;
  if ([(id)__LSDefaultsGetSharedInstance() isServer])
  {
    __int16 v3 = 0;
    if (!a1) {
      return HIBYTE(v3);
    }
    goto LABEL_10;
  }

  if (_LSCheckCurrentProcessSandboxEveryTime(void)::result)
  {
    if (_LSGetAuditTokenForSelf::once != -1) {
      dispatch_once(&_LSGetAuditTokenForSelf::once, &__block_literal_global_117);
    }
    _LSIsAuditTokenSandboxed(_LSGetAuditTokenForSelf::result, (_BYTE *)&v3 + 1, (BOOL *)&v3);
    if (a1) {
LABEL_10:
    }
      *a1 = v3;
  }

  else
  {
    if (_LSIsCurrentProcessSandboxed::once != -1) {
      dispatch_once(&_LSIsCurrentProcessSandboxed::once, &__block_literal_global_118);
    }
    HIBYTE(v3) = _LSIsCurrentProcessSandboxed::sSandbox;
    LOBYTE(v3) = _LSIsCurrentProcessSandboxed::sAppSandbox;
    if (a1) {
      goto LABEL_10;
    }
  }

  return HIBYTE(v3);
}

uint64_t _LSCheckLSDServiceAccessForAuditToken(uint64_t a1, void *a2)
{
  id v4 = (void *)MEMORY[0x186E2A59C]();
  if (_LSCheckLSDServiceAccessForAuditToken::once != -1) {
    dispatch_once(&_LSCheckLSDServiceAccessForAuditToken::once, &__block_literal_global_32);
  }
  uint64_t v5 = 0LL;
  if (a1 && a2)
  {
    if (_LSCheckLSDServiceAccessForAuditToken::lsdServiceClass && !objc_msgSend(a2, "isSubclassOfClass:"))
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      objc_msgSend( (id)__LSDefaultsGetSharedInstance(),  "serviceNameForConnectionType:",  objc_msgSend(a2, "connectionType"));
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v5 = _LSCheckMachPortAccessForAuditToken(a1, v6);
    }
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_183F24434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetPIDFromToken(_OWORD *a1)
{
  pid_t pidp = 0;
  __int128 v1 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v1;
  audit_token_to_au32(&atoken, 0LL, 0LL, 0LL, 0LL, 0LL, &pidp, 0LL, 0LL);
  return pidp;
}

uint64_t _LSAuditTokenMayMapDatabase(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL v2 = 0;
    _LSIsAuditTokenSandboxed(result, 0LL, &v2);
    return !v2
        || _LSCheckEntitlementForAuditTokenWithDefault( v1,  @"com.apple.private.coreservices.canmaplsdatabase",  0LL);
  }

  return result;
}

void _LSSetCurrentProcessMayMapDatabase(int a1)
{
  if (_LSCurrentProcessMayMapDatabase::once != -1) {
    dispatch_once(&_LSCurrentProcessMayMapDatabase::once, &__block_literal_global_116);
  }
  atomic_load(mayMapDatabase);
  atomic_store(a1 != 0, mayMapDatabase);
}

void _LSIsAuditTokenSandboxed(uint64_t a1, _BYTE *a2, BOOL *a3)
{
  if (!a1) {
    return;
  }
  int v5 = sandbox_check_by_audit_token();
  if (v5 < 0)
  {
    if ([(id)__LSDefaultsGetSharedInstance() isServer])
    {
      int v6 = *__error();
      _LSDefaultLog();
      BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
        _LSIsAuditTokenSandboxed_cold_1(v6, v7);
      }
    }
  }

  else if (!v5)
  {
    if (a2) {
      *a2 = 0;
    }
    if (a3) {
      *a3 = 0;
    }
    return;
  }

  if (a2) {
    *a2 = 1;
  }
  if (a3) {
    *a3 = sandbox_container_path_for_audit_token() == 0;
  }
}

uint64_t _LSXPCConnectionMayMapDatabase(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    uint64_t MayMapDatabase = _LSAuditTokenMayMapDatabase((uint64_t)&v4);
  }

  else
  {
    uint64_t MayMapDatabase = 0LL;
  }

  return MayMapDatabase;
}

void sub_183F24744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_OWORD *_LSIsAuditTokenPlatformBinary(_OWORD *result)
{
  if (result)
  {
    pid_t pidp = 0;
    __int128 v1 = result[1];
    *(_OWORD *)atoken.val = *result;
    *(_OWORD *)&atoken.val[4] = v1;
    audit_token_to_au32(&atoken, 0LL, 0LL, 0LL, 0LL, 0LL, &pidp, 0LL, 0LL);
    else {
      return 0LL;
    }
  }

  return result;
}

_OWORD *_LSIsXPCConnectionPlatformBinary(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    BOOL v2 = _LSIsAuditTokenPlatformBinary(&v4);
  }

  else
  {
    BOOL v2 = 0LL;
  }

  return v2;
}

void sub_183F24908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTypeRef _LSCopyBundleIdentifierForAuditToken(_OWORD *a1, int a2)
{
  if (a1)
  {
    _LSCopyEntitlementValueForAuditToken((uint64_t)a1, @"application-identifier");
    __int128 v4 = (void *)objc_claimAutoreleasedReturnValue();
    int v5 = v4;
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1895F92E8])
    {
      [NSString stringWithUTF8String:xpc_string_get_string_ptr(v5)];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(void *)atoken.val = 0LL;
      _LSSplitApplicationIdentifier(v13, 0LL, (id *)&atoken);
      if (*(void *)atoken.val)
      {
        CFTypeRef v12 = *(id *)atoken.val;

LABEL_17:
        return v12;
      }
    }

    pid_t v6 = getpid();
    pid_t pidp = 0;
    __int128 v7 = a1[1];
    *(_OWORD *)atoken.val = *a1;
    *(_OWORD *)&atoken.val[4] = v7;
    audit_token_to_au32(&atoken, 0LL, 0LL, 0LL, 0LL, 0LL, &pidp, 0LL, 0LL);
    if (v6 == pidp
      && (CFBundleRef MainBundle = CFBundleGetMainBundle()) != 0LL
      && (Unique = (__CFBundle *)CFRetain(MainBundle)) != 0LL
      || (audit_token_t v10 = (const void *)_LSCopyBundleURLForAuditToken(a1, a2)) != 0LL
      && (Unique = (__CFBundle *)_CFBundleCreateUnique(), CFRelease(v10), Unique))
    {
      CFStringRef Identifier = CFBundleGetIdentifier(Unique);
      if (Identifier) {
        CFTypeRef v12 = CFRetain(Identifier);
      }
      else {
        CFTypeRef v12 = 0LL;
      }
      CFRelease(Unique);
    }

    else
    {
      CFTypeRef v12 = 0LL;
    }

    goto LABEL_17;
  }

  return 0LL;
}

void sub_183F24AA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

unint64_t _LSBundleIdentifierIsWebBrowser(unint64_t result)
{
  if (result)
  {
    id v1 = (const void *)result;
    return CFEqual((CFTypeRef)result, @"com.apple.mobilesafari") || CFEqual(v1, @"com.apple.Safari") != 0;
  }

  return result;
}

BOOL _LSAuditTokensAreEqual(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t _LSGetConsoleOwnerUID(uid_t *a1)
{
  if (lstat("/dev/console", &v3)) {
    return 0LL;
  }
  if (a1) {
    *a1 = v3.st_uid;
  }
  return 1LL;
}

CFURLRef _LSCopyExecutableURLForXPCConnection(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    xpc_connection_get_audit_token();
    CFURLRef v2 = _LSCopyExecutableURLForAuditToken();
  }

  else
  {
    CFURLRef v2 = 0LL;
  }

  return v2;
}

void sub_183F24C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyBundleURLForXPCConnection(void *a1, int a2)
{
  id v3 = a1;
  if (v3)
  {
    xpc_connection_get_audit_token();
    uint64_t v4 = _LSCopyBundleURLForAuditToken(&v6, a2);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_183F24C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSSplitApplicationIdentifier(void *a1, void **a2, id *a3)
{
  id v13 = a1;
  if (a2)
  {
    __int128 v6 = *a2;
    *a2 = 0LL;
  }

  if (a3) {
    objc_storeStrong(a3, a1);
  }
  if ((unint64_t)[v13 length] >= 0xC && objc_msgSend(v13, "rangeOfString:", @".") == 10)
  {
    uint64_t v8 = v7;
    if (a2)
    {
      uint64_t v9 = [v13 substringToIndex:10];
      audit_token_t v10 = *a2;
      *a2 = (void *)v9;
    }

    if (a3)
    {
      uint64_t v11 = [v13 substringFromIndex:v8 + 10];
      id v12 = *a3;
      *a3 = (id)v11;
    }
  }
}

void sub_183F24D60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

CFTypeRef _LSCopyBundleIdentifierForXPCConnection(void *a1, int a2)
{
  id v3 = a1;
  xpc_connection_get_audit_token();
  CFTypeRef v4 = _LSCopyBundleIdentifierForAuditToken(&v6, a2);

  return v4;
}

void sub_183F24DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *___ZL38_LSCheckCurrentProcessSandboxEveryTimev_block_invoke()
{
  id result = getenv("LS_PROCESS_WILL_BE_SANDBOXED");
  if (result)
  {
    id result = (const char *)atoi(result);
    _LSCheckCurrentProcessSandboxEveryTime(void)::id result = (_DWORD)result != 0;
  }

  return result;
}

void sub_183F24E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F24F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2507C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F25140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F25350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F25484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F25548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSEnumeratorFireErrorHandler(unsigned __int8 *a1, void *a2)
{
  v10[1] = *MEMORY[0x1895F89C0];
  id v3 = a2;
  CFTypeRef v4 = a1 + 16;
  do
    unsigned __int8 v5 = __ldaxr(v4);
  while (__stlxr(1u, v4));
  if ((v5 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_ERROR)) {
      _LSEnumeratorFireErrorHandler_cold_1();
    }
    [a1 errorHandler];
    __int128 v6 = (void (**)(void, void))objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      uint64_t v7 = (void *)MEMORY[0x186E2A59C]();
      if (!v3)
      {
        uint64_t v9 = *MEMORY[0x189607490];
        v10[0] = @"Fallback for nil error in enumerator error handler";
        [MEMORY[0x189603F68] dictionaryWithObjects:v10 forKeys:&v9 count:1];
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10810LL, (uint64_t)"_LSEnumeratorFireErrorHandler", 178LL, v8);
        id v3 = (id)objc_claimAutoreleasedReturnValue();
      }

      ((void (**)(void, id))v6)[2](v6, v3);
      objc_autoreleasePoolPop(v7);
    }
  }
}

void sub_183F2573C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F25828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSDBEnumeratorPrepareIfNeeded(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a1 + 80) & 2) == 0)
  {
    *(_BYTE *)(a1 + 80) |= 2u;
    if (*(void *)(a1 + 64))
    {
      [MEMORY[0x1896077D8] currentHandler];
      id v13 = (void *)objc_claimAutoreleasedReturnValue();
      [NSString stringWithUTF8String:"BOOL _LSDBEnumeratorPrepareIfNeeded(_LSDBEnumerator *const __strong _Nonnull)"];
      char v14 = (void *)objc_claimAutoreleasedReturnValue();
      [v13 handleFailureInFunction:v14 file:@"LSEnumerator.mm" lineNumber:226 description:@"Need to prepare after first iteration. This should not be possible."];
    }

    CFURLRef v2 = (void *)MEMORY[0x186E2A59C]();
    +[_LSDServiceDomain defaultServiceDomain]();
    id v3 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v3, 0LL);

    if (v4)
    {
      id v15 = 0LL;
      int v5 = [(id)a1 _prepareWithContext:v4 error:&v15];
      id v6 = v15;
      uint64_t v7 = (os_log_s *)_LSEnumeratorLog;
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG)) {
          _LSDBEnumeratorPrepareIfNeeded_cold_2(a1, v7);
        }
        *(_BYTE *)(a1 + 80) |= 4u;
      }

      else
      {
        if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_ERROR)) {
          _LSDBEnumeratorPrepareIfNeeded_cold_3();
        }
        _LSEnumeratorFireErrorHandler((unsigned __int8 *)a1, v6);
      }
    }

    else
    {
      uint64_t v8 = (os_log_s *)(id)_LSEnumeratorLog;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LaunchServices::Database::Context::error((id *)(a1 + 32));
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
        _LSDBEnumeratorPrepareIfNeeded_cold_1(a1, v9, (uint64_t)v16, v8);
      }

      +[_LSDServiceDomain defaultServiceDomain]();
      audit_token_t v10 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v10, 0LL);

      if (v11) {
        id v6 = 0LL;
      }
      else {
        id v6 = *(id *)(a1 + 56);
      }
      _LSEnumeratorFireErrorHandler((unsigned __int8 *)a1, v6);
    }

    objc_autoreleasePoolPop(v2);
  }

  return (*(unsigned __int8 *)(a1 + 80) >> 2) & 1;
}

void sub_183F25ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F25B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSDBEnumeratorGetNextObject(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v23 = 0LL;
  if ((*(_BYTE *)(a1 + 80) & 1) != 0) {
    goto LABEL_21;
  }
  +[_LSDServiceDomain defaultServiceDomain]();
  CFURLRef v2 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v2, 0LL);

  if (!v3)
  {
    +[_LSDServiceDomain defaultServiceDomain]();
    char v14 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)(a1 + 32), v14, 0LL);

    if (v15) {
      id v16 = 0LL;
    }
    else {
      id v16 = *(id *)(a1 + 56);
    }
    _LSEnumeratorFireErrorHandler((unsigned __int8 *)a1, v16);

LABEL_21:
    if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    {
      id v13 = 0LL;
    }

    else
    {
      *(_BYTE *)(a1 + 80) |= 1u;
      *(void *)(a1 + 64) = -1LL;
      uint64_t v17 = a1 + 32;
      if (*(void *)v17 && *(_BYTE *)(v17 + 16)) {
        _LSContextDestroy(*(void ***)v17);
      }
      id v18 = *(void **)(v17 + 8);
      *(void *)uint64_t v17 = 0LL;
      *(void *)(v17 + _Block_object_dispose(va, 8) = 0LL;

      *(_BYTE *)(v17 + 16) = 0;
      int v19 = *(void **)(v17 + 24);
      *(void *)(v17 + 24) = 0LL;

      id v13 = v23;
    }

    goto LABEL_27;
  }

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)&__int128 v4 = 138478083LL;
  __int128 v22 = v4;
  do
  {
    uint64_t v7 = (void *)MEMORY[0x186E2A59C]();
    uint64_t v8 = (os_log_s *)_LSEnumeratorLog;
    if (os_log_type_enabled((os_log_t)_LSEnumeratorLog, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = v22;
      uint64_t v25 = a1;
      __int16 v26 = 2048;
      uint64_t v27 = v6;
      _os_log_debug_impl(&dword_183E58000, v8, OS_LOG_TYPE_DEBUG, "Enumerator %{private}@ iteration %llu", buf, 0x16u);
    }

    int v9 = objc_msgSend((id)a1, "_getObject:atIndex:context:", &v23, v6, v3, v22);
    if (v23 && v5 && ((*(uint64_t (**)(uint64_t))(v5 + 16))(v5) & 1) == 0)
    {
      id v10 = v23;
      id v23 = 0LL;
    }

    objc_autoreleasePoolPop(v7);
    uint64_t v11 = v6 + 1;
    int v12 = (v6 != -1) & ~((uint64_t)((unint64_t)(v6 == -1) << 63) >> 63 != (v6 == -1));
    id v13 = v23;
    if (v23) {
      int v12 = 0;
    }
    ++v6;
  }

  while ((v12 & v9 & 1) != 0);
  *(void *)(a1 + 64) = v11;
  if (!v13) {
    goto LABEL_21;
  }
LABEL_27:
  id v20 = v13;

  return v20;
}

void sub_183F25E6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_183F25F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F26084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2610C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

uint64_t _LSGetOSStatusFromPOSIXErrorCode(uint64_t a1)
{
  int v1 = a1;
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1;
  if ((a1 - 107) <= 0x37)
  {
    if ((_DWORD)a1 == 125) {
      uint64_t v2 = 4294966686LL;
    }
    else {
      uint64_t v2 = 4294956486LL;
    }
    goto LABEL_6;
  }

  if ((int)a1 > 44)
  {
    if ((int)a1 > 68)
    {
      if ((_DWORD)a1 == 69)
      {
LABEL_21:
        uint64_t v2 = 4294967262LL;
        goto LABEL_6;
      }

      if ((_DWORD)a1 != 78)
      {
        if ((_DWORD)a1 == 80)
        {
LABEL_20:
          uint64_t v2 = 4294962296LL;
          goto LABEL_6;
        }

        goto LABEL_25;
      }
    }

    else if ((_DWORD)a1 != 45)
    {
      if ((_DWORD)a1 == 63)
      {
        uint64_t v2 = 4294967259LL;
        goto LABEL_6;
      }

      if ((_DWORD)a1 == 66)
      {
LABEL_16:
        uint64_t v2 = 4294967249LL;
        goto LABEL_6;
      }

void sub_183F26360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSErrorLog(void)
{
  return (id)_LSErrorLog(void)::result;
}

uint64_t _LSGetOSStatusFromNSError(void *a1)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v4 = 4294956486LL;
    goto LABEL_31;
  }

  [v1 domain];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = [v2 code];
  [v2 userInfo];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (![v3 isEqual:*MEMORY[0x189607670]])
  {
    if (![v3 isEqual:*MEMORY[0x189607688]])
    {
      if ((unint64_t)(v4 - 4096) > 0x80)
      {
        if (v4 == 4 && ([v3 isEqual:*MEMORY[0x189607460]] & 1) != 0)
        {
          uint64_t v4 = 4294967253LL;
          goto LABEL_22;
        }
      }

      else if ([v3 isEqual:*MEMORY[0x189607460]])
      {
        _LSErrorLog();
        uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          _LSGetOSStatusFromNSError_cold_2((uint64_t)v2, v6, v7, v8, v9, v10, v11, v12);
        }

        uint64_t v4 = 4294956474LL;
        goto LABEL_22;
      }

      uint64_t v13 = [v5 objectForKeyedSubscript:*MEMORY[0x189607798]];
      char v14 = (void *)v13;
      if (v13 && (void *)v13 != v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        uint64_t v4 = _LSGetOSStatusFromNSError(v14);
      }

      else
      {
        _LSErrorLog();
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          _LSGetOSStatusFromNSError_cold_3((uint64_t)v2, v15, v16, v17, v18, v19, v20, v21);
        }

        uint64_t v4 = 4294956486LL;
      }

      goto LABEL_22;
    }

    uint64_t v4 = _LSGetOSStatusFromPOSIXErrorCode(v4);
  }

void sub_183F266B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSNSErrorIsXPCConnectionInterrupted(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 domain];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue();
    else {
      BOOL v4 = 0LL;
    }
  }

  else
  {
    BOOL v4 = 0LL;
  }

  return v4;
}

void sub_183F26784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSRetryForConnectionInterrupted(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0LL;
  int v3 = 9;
  do
  {
    v1[2](v1);
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue();

    BOOL IsXPCConnectionInterrupted = _LSNSErrorIsXPCConnectionInterrupted(v4);
    BOOL v7 = v3-- != 0 && IsXPCConnectionInterrupted;
    uint64_t v2 = v4;
  }

  while (v7);

  return v4;
}

void sub_183F2680C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSMakeNSErrorImpl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  id v9 = a1;
  id v10 = a5;
  id v11 = objc_alloc_init(MEMORY[0x189603FC8]);
  uint64_t v12 = v11;
  if (v10) {
    [v11 addEntriesFromDictionary:v10];
  }
  [NSString stringWithUTF8String:a3];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
  [v12 setObject:v13 forKeyedSubscript:@"_LSFunction"];

  [MEMORY[0x189607968] numberWithInt:a4];
  char v14 = (void *)objc_claimAutoreleasedReturnValue();
  [v12 setObject:v14 forKeyedSubscript:@"_LSLine"];

  _LSErrorLog();
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    int v18 = 138544130;
    id v19 = v9;
    __int16 v20 = 2048;
    uint64_t v21 = a2;
    __int16 v22 = 2082;
    uint64_t v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    _os_log_debug_impl( &dword_183E58000,  v15,  OS_LOG_TYPE_DEBUG,  "Constructing NSError %{public}@/%li at %{public}s:%i",  (uint8_t *)&v18,  0x26u);
  }

  uint64_t v16 = (void *)[objc_alloc(MEMORY[0x189607870]) initWithDomain:v9 code:a2 userInfo:v12];
  return v16;
}

void sub_183F269CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL11_LSErrorLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "error");
  id v1 = (void *)_LSErrorLog(void)::result;
  _LSErrorLog(void)::id result = (uint64_t)v0;
}

  ;
}

void _LSParseLoadCommands()
{
  int v0 = MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  BOOL v4 = v3;
  uint64_t v6 = v5;
  int v7 = v0;
  uint64_t v41 = *MEMORY[0x1895F89C0];
  id v9 = v8;
  lseek(v7, 0LL, 0);
  else {
    uint64_t v10 = v6;
  }
  if (v6 <= 0) {
    size_t v11 = 0x2000LL;
  }
  else {
    size_t v11 = v10;
  }
  ssize_t v12 = read(v7, &v40, v11);
  if (v12 < 28)
  {
    int v15 = handleWeirdHeaderTypes((unsigned __int8 *)&v40, v12, v4, v9);
    if (v2 && !v15) {
      _BYTE *v2 = 1;
    }
    goto LABEL_53;
  }

  uint32_t magic = v40.magic;
  if ((int)v40.magic <= -805638659)
  {
    if (v40.magic != -1095041334 && v40.magic != -889275714)
    {
      int v14 = -822415874;
LABEL_42:
      if (v40.magic == v14)
      {
        CFDictionaryAddValue(v4, @"LSExecutableFormat", @"LSExecutableMachOFormat");
        appendSliceForCPUTypeSubtype(v9, bswap32(v40.cputype), bswap32(v40.cpusubtype));
        uint64_t v16 = &v40;
        goto LABEL_44;
      }

      handleWeirdHeaderTypes((unsigned __int8 *)&v40, v12, v4, v9);
      goto LABEL_53;
    }

    CFDictionaryAddValue(v4, @"LSExecutableFormat", @"LSExecutableMachOFormat");
    unsigned int v17 = bswap32(v40.cputype);
    if (magic == -1095041334) {
      uint64_t cputype = v17;
    }
    else {
      uint64_t cputype = v40.cputype;
    }
    if (!(_DWORD)cputype) {
      goto LABEL_53;
    }
    uint64_t v16 = 0LL;
    p_cpusubtype = (unsigned int *)&v40.cpusubtype;
    __int16 v20 = (unsigned int *)((char *)v39 + v12 + 12);
    while (1)
    {
      if (p_cpusubtype > v20)
      {
LABEL_39:
        if (!v16) {
          goto LABEL_53;
        }
LABEL_44:
        uint64_t v34 = 0LL;
        uint64_t v35 = &v34;
        uint64_t v36 = 0x2020000000LL;
        int v37 = 0;
        uint64_t v30 = 0LL;
        unsigned int v31 = &v30;
        uint64_t v32 = 0x2020000000LL;
        int v33 = 0;
        v28[0] = 0LL;
        v28[1] = v28;
        v28[2] = 0x2020000000LL;
        int v29 = 0;
        dyld_get_active_platform();
        dyld_get_image_versions();
        uint64_t v25 = *((unsigned int *)v31 + 6);
        if ((_DWORD)v25)
        {
          _LSMakeVersionNumberFromDYLDVersion(v25, v39);
          v38[0] = v39[0];
          v38[1] = v39[1];
          CFStringRef v26 = _LSVersionNumberCopyStringRepresentation(v38);
          if (v26)
          {
            CFDictionarySetValue(v4, @"LSExecutableSDKVersion", v26);
            CFRelease(v26);
          }
        }

        if (*((_DWORD *)v35 + 6))
        {
          CFNumberRef v27 = CFNumberCreate(0LL, kCFNumberSInt32Type, v35 + 3);
          if (v27)
          {
            CFDictionarySetValue(v4, @"LSExecutablePlatformKey", v27);
            CFRelease(v27);
          }
        }

        if (v16 != &v40) {
          free(v16);
        }
        _Block_object_dispose(v28, 8);
        _Block_object_dispose(&v30, 8);
        _Block_object_dispose(&v34, 8);
        goto LABEL_53;
      }

      unsigned int v21 = p_cpusubtype[2];
      if (magic == -889275714)
      {
        appendSliceForCPUTypeSubtype(v9, *p_cpusubtype, p_cpusubtype[1]);
      }

      else
      {
        appendSliceForCPUTypeSubtype(v9, bswap32(*p_cpusubtype), bswap32(p_cpusubtype[1]));
        unsigned int v21 = bswap32(v21);
      }

      __int16 v22 = (const mach_header *)mallocMachHeader(v7, v21);
      uint64_t v23 = (mach_header *)v22;
      if (v22)
      {
        if ((v22->magic & 0xFFFFFFFE) == 0xFEEDFACE) {
          addUUID(v22, v4);
        }
        if (v16)
        {
          if ((v16->magic & 0xFFFFFFFE) == 0xFEEDFACE)
          {
            __int16 v24 = v23;
            if (v16 == v23) {
              goto LABEL_38;
            }
          }

          else
          {
            __int16 v24 = v16;
            uint64_t v16 = v23;
          }

          free(v24);
        }

        else
        {
          uint64_t v16 = v23;
        }
      }

void sub_183F26EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void appendSliceForCPUTypeSubtype(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if (!v5) {
    goto LABEL_16;
  }
  if ((int)a2 > 16777222)
  {
    if (((a2 - 16777223) > 0xB || ((1 << (a2 - 7)) & 0x821) == 0) && (_DWORD)a2 != 33554444)
    {
LABEL_10:
      _LSDefaultLog();
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 134218240;
        uint64_t v10 = (int)a2;
        __int16 v11 = 2048;
        uint64_t v12 = (int)a3;
        _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_DEFAULT,  "LaunchServices: CPU type %lu (subtype %lu) not recognized",  (uint8_t *)&v9,  0x16u);
      }

      goto LABEL_16;
    }

void sub_183F270F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t machHeaderSize(const mach_header *a1)
{
  uint64_t result = 0LL;
  uint32_t magic = a1->magic;
  if ((int)a1->magic <= -17958195)
  {
    if (magic != -822415874)
    {
      if (magic == -805638658)
      {
        uint64_t sizeofcmds = bswap32(a1->sizeofcmds);
        return sizeofcmds + 32;
      }

      return result;
    }

    uint64_t v5 = bswap32(a1->sizeofcmds);
    return v5 + 28;
  }

  if (magic == -17958193)
  {
    uint64_t sizeofcmds = a1->sizeofcmds;
    return sizeofcmds + 32;
  }

  if (magic == -17958194)
  {
    uint64_t v5 = a1->sizeofcmds;
    return v5 + 28;
  }

  return result;
}

void *mallocMachHeader(int a1, off_t a2)
{
  if (pread(a1, &__buf, 0x1CuLL, a2) != 28) {
    return 0LL;
  }
  size_t v4 = machHeaderSize(&__buf);
  if (!v4) {
    return 0LL;
  }
  ssize_t v5 = v4;
  uint64_t v6 = malloc(v4);
  if (v6 && pread(a1, v6, v5, a2) < v5)
  {
    free(v6);
    return 0LL;
  }

  return v6;
}

void addUUID(const mach_header *a1, __CFDictionary *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t ncmds = a1->ncmds;
  uint64_t v5 = machHeaderSize(a1);
  if (a1->magic == -17958194)
  {
    uint64_t v6 = 28LL;
    if (!(_DWORD)ncmds) {
      return;
    }
  }

  else
  {
    if (a1->magic != -17958193) {
      return;
    }
    uint64_t v6 = 32LL;
    if (!(_DWORD)ncmds) {
      return;
    }
  }

  int v7 = (char *)a1 + v5;
  id v8 = (const unsigned __int8 *)a1 + v6;
  for (uint64_t i = ncmds - 1; ; --i)
  {
    uint64_t v10 = *((unsigned int *)v8 + 1);
    if (*(_DWORD *)v8 == 27) {
      break;
    }
    v8 += v10;
  }

  if (&v8[v10] < (const unsigned __int8 *)v7)
  {
    uuid_unparse_upper(v8 + 8, out);
    uint64_t v12 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    CFStringRef v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], out, 0x8000100u);
    if (v13)
    {
      CFStringRef v14 = v13;
      if (CFDictionaryContainsKey(a2, @"MachOUUIDs"))
      {
        Value = (const __CFArray *)CFDictionaryGetValue(a2, @"MachOUUIDs");
        if (!Value || (uint64_t v16 = Value, v17 = CFGetTypeID(Value), v17 != CFArrayGetTypeID()))
        {
LABEL_24:
          CFRelease(v14);
          return;
        }

        CFIndex Count = CFArrayGetCount(v16);
        MutableCFSetRef Copy = CFArrayCreateMutableCopy(v12, Count + 1, v16);
      }

      else
      {
        MutableCFSetRef Copy = CFArrayCreateMutable(v12, 1LL, MEMORY[0x189605228]);
      }

      __int16 v20 = MutableCopy;
      if (MutableCopy)
      {
        CFArrayAppendValue(MutableCopy, v14);
        CFDictionarySetValue(a2, @"MachOUUIDs", v20);
        CFRelease(v20);
      }

      goto LABEL_24;
    }
  }

uint64_t handleWeirdHeaderTypes(unsigned __int8 *a1, unint64_t a2, __CFDictionary *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = 0LL;
  if (a1 && a3)
  {
    if (a2 < 4)
    {
      if (a2 < 2) {
        goto LABEL_16;
      }
      int v9 = *a1;
    }

    else
    {
      int v9 = *a1;
      if (v9 == 74)
      {
        if (a1[1] == 111 && a1[2] == 121 && a1[3] == 33)
        {
          CFDictionaryAddValue(a3, @"LSExecutableFormat", @"LSExecutableCFMFormat");
          if (v7) {
            appendSliceForCPUTypeSubtype(v7, 18LL, 0LL);
          }
          goto LABEL_15;
        }

        goto LABEL_16;
      }
    }

    if (v9 == 35 && a1[1] == 33)
    {
      CFDictionaryAddValue(a3, @"LSExecutableFormat", @"LSExecutable#!Format");
LABEL_15:
      uint64_t v8 = 1LL;
      goto LABEL_17;
    }

void sub_183F274FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAddExecutableFormatInfo()
{
  int v0 = (void *)MEMORY[0x1895F8858]();
  uint64_t v2 = v1;
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v7 = v0;
  id v8 = v6;
  char v19 = 0;
  id v9 = objc_alloc_init(MEMORY[0x189603FA8]);
  int v10 = _LSGetBundleClassForHFSType(v4);
  if (v4 == 1095782476 || v10 != 2)
  {
    if ([v7 getFileSystemRepresentation:v20 error:0])
    {
      uint64_t v18 = 0LL;
      int v11 = open(v20, 0, 511LL);
      if (v11 < 0 || ((v12 = [v7 getLength:&v18 error:0], v18) ? (int v13 = v12) : (int v13 = 0), v13 != 1))
      {
        char v19 = 1;
        CFDictionaryAddValue(v2, @"_LSNoExecutableInfo", (const void *)*MEMORY[0x189604DE8]);
        if (v11 < 0) {
          goto LABEL_23;
        }
      }

      else
      {
        fcntl(v11, 48, 1LL);
        _LSParseLoadCommands();
        if (v18 >= 0x2000) {
          size_t v14 = 0x2000LL;
        }
        else {
          size_t v14 = v18;
        }
        if (pread(v11, __buf, v14, 0LL) >= 28)
        {
          id v15 = v8;
          if (v2
            && (Value = (const __CFString *)CFDictionaryGetValue(v2, @"DTPlatformName")) != 0LL
            && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(Value))
            && (CFStringCompare(Value, @"iphonesimulator", 1uLL) == kCFCompareEqualTo
             || CFStringCompare(Value, @"appletvsimulator", 1uLL) == kCFCompareEqualTo
             || CFStringCompare(Value, @"watchsimulator", 1uLL) == kCFCompareEqualTo))
          {

            CFDictionaryAddValue(v2, @"_LSRequiresIPhoneSimulator", (const void *)*MEMORY[0x189604DE8]);
          }

          else
          {
          }
        }
      }

      close(v11);
    }
  }

  else
  {
    CFDictionaryAddValue(v2, @"LSExecutableFormat", @"LSExecutableCFMFormat");
    appendSliceForCPUTypeSubtype(v9, 18LL, 0LL);
  }

void sub_183F277EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointAdd(void *a1, _DWORD *a2)
{
  id v3 = a1;
  int v4 = v3;
  if (!v3 || !*((void *)v3 + 1))
  {
LABEL_12:
    uint64_t v5 = 0LL;
    goto LABEL_13;
  }

  *a2 = (int)CFAbsoluteTimeGetCurrent();
  uint64_t v5 = CSStoreAllocUnitWithData();
  if (!(_DWORD)v5)
  {
    _LSDefaultLog();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( &dword_183E58000,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to allocate store unit with extension point data",  v9,  2u);
    }

    goto LABEL_12;
  }

  if (_LSBindableActivate(v4, v5))
  {
    _LSDefaultLog();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_DEFAULT,  "Failed to activate binding for extension point data, this extension point will not be found",  buf,  2u);
    }
  }

  _LSDatabaseCommit((uint64_t)v4);
LABEL_13:

  return v5;
}

void sub_183F27974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointComparePriority_BindableComparitor(void *a1, int a2, int a3)
{
  id v5 = a1;
  uint64_t v6 = (const LSExtensionPointData *)_LSGetExtensionPointData((uint64_t)v5, a2);
  id v7 = (_LSDatabase *)_LSGetExtensionPointData((uint64_t)v5, a3);
  uint64_t v8 = _LSExtensionPointComparePriority(v7, v6, (const LSExtensionPointData *)v7);

  return v8;
}

void sub_183F279F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSExtensionPointRemove(void *a1, int a2)
{
  id v5 = a1;
  if (v5 && a2 && v5[1])
  {
    uint64_t Unit = CSStoreGetUnit();
    if (Unit)
    {
      _LSBindableDeactivate(v5, a2);
      _CSStringRelease();
      _CSStringRelease();
      _LSPlistRemove((uint64_t)v5, *(_DWORD *)(Unit + 48));
      int v4 = *(_DWORD *)(Unit + 52);
      if (v4) {
        _LSAliasRemove(v5, v4);
      }
      CSStoreFreeUnit();
    }

    _LSDatabaseCommit((uint64_t)v5);
  }
}

void sub_183F27B10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t _LSGetExtensionPointData(uint64_t a1, int a2)
{
  if (a1 && a2) {
    return CSStoreGetUnit();
  }
  else {
    return 0LL;
  }
}

uint64_t _LSExtensionPointComparePriority( _LSDatabase *a1, const LSExtensionPointData *a2, const LSExtensionPointData *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a2 == a3) {
    return 0;
  }
  if (!a2) {
    return -1;
  }
  if (!a3) {
    return 1;
  }
  __int128 v3 = *(_OWORD *)&a2->var2._opaque[16];
  __int128 v13 = *(_OWORD *)a2->var2._opaque;
  __int128 v14 = v3;
  __int128 v4 = *(_OWORD *)&a3->var2._opaque[16];
  __int128 v11 = *(_OWORD *)a3->var2._opaque;
  __int128 v12 = v4;
  __int128 v5 = *(_OWORD *)&a2->var2._opaque[16];
  __int128 v17 = *(_OWORD *)a2->var2._opaque;
  __int128 v18 = v5;
  __int128 v15 = kLSVersionNumberNull;
  __int128 v16 = *(_OWORD *)algn_183FBF5B0;
  if (!_LSVersionNumberCompare(&v17, &v15)) {
    return -1;
  }
  __int128 v17 = v11;
  __int128 v18 = v12;
  __int128 v15 = kLSVersionNumberNull;
  __int128 v16 = *(_OWORD *)algn_183FBF5B0;
  if (!_LSVersionNumberCompare(&v17, &v15)) {
    return 1;
  }
  v10[0] = v13;
  v10[1] = v14;
  v9[0] = v11;
  v9[1] = v12;
  uint64_t v6 = _LSVersionNumberCompare(v10, v9);
  char v7 = v6 == 1;
  if (v6 == -1) {
    return -1;
  }
  return v7;
}

void _LSEnumerateExtensionPoints(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v13 = 0LL;
  __int128 v14 = &v13;
  uint64_t v15 = 0x5812000000LL;
  __int128 v16 = __Block_byref_object_copy__20;
  __int128 v17 = __Block_byref_object_dispose__20;
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0LL;
  int v20 = 1065353216;
  uint64_t v7 = MEMORY[0x1895F87A8];
  uint64_t v8 = 3221225472LL;
  id v9 = ___LSEnumerateExtensionPoints_block_invoke;
  int v10 = &unk_189D74458;
  id v4 = v3;
  id v11 = v4;
  __int128 v12 = &v13;
  _CSStringBindingEnumerateAllBindings();
  char v6 = 0;
  __int128 v5 = v14 + 8;
  do
  {
    __int128 v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    (*(void (**)(uint64_t, void, void, char *))(a2 + 16))(a2, *((unsigned int *)v5 + 6), v5[2], &v6);
  }

  while (!v6);

  _Block_object_dispose(&v13, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table((uint64_t)v18 + 8);
}

void sub_183F27DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(v8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0LL;
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0LL;
  uint64_t v5 = a2[8];
  id v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }

    else
    {
      v7 &= v8 - 1;
    }

    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0LL;
    v3[1] = 0LL;
  }

  return result;
}

uint64_t __Block_byref_object_dispose__20(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecordUpdateAvailability>>>::~__hash_table(a1 + 48);
}

void sub_183F27EE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

LABEL_84:
    __int128 v44 = *(void *)(v8 + 48);
    __int128 v45 = *(void **)(v44 + 8 * v12);
    if (v45)
    {
      os_log_s *v25 = *v45;
    }

    else
    {
      os_log_s *v25 = *(void *)(v8 + 64);
      *(void *)(v8 + 64) = v25;
      *(void *)(v44 + 8 * _LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_IT_DID_NOT_EXIST__,  v9,  v10,  v11, v12) = v8 + 64;
      if (!*v25)
      {
LABEL_93:
        ++*(void *)(v8 + 72);
        return;
      }

      __int128 v46 = *(void *)(*v25 + 8LL);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v46 >= v13) {
          v46 %= v13;
        }
      }

      else
      {
        v46 &= v13 - 1;
      }

      __int128 v45 = (void *)(*(void *)(v8 + 48) + 8 * v46);
    }

    *__int128 v45 = v25;
    goto LABEL_93;
  }

  return v17;
}

void sub_183F283C0(_Unwind_Exception *a1)
{
}

uint64_t _LSExtensionPointFindWithIdentifier( void *a1, const __CFString *a2, uint64_t a3, uint64_t a4, _DWORD *a5, void *a6)
{
  id v11 = a1;
  uint64_t StringForCFString = _LSDatabaseGetStringForCFString(v11, a2, 0);
  uint64_t v13 = _LSExtensionPointFindWithStringID(v11, StringForCFString, a3, a4, a5, a6);

  return v13;
}

void sub_183F2844C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointFindWithStringID( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, void *a6)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v19 = 0LL;
  int v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  int v22 = 0;
  uint64_t v15 = 0LL;
  __int128 v16 = &v15;
  uint64_t v17 = 0x2020000000LL;
  uint64_t v18 = 0LL;
  id v8 = a1;
  _LSDatabaseEnumeratingBindingMap();
  int v9 = *((_DWORD *)v20 + 6);
  if (!v9)
  {
    int v10 = (void *)_CSStringCopyCFString();
    _LSDefaultLog();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v24 = v10;
      _os_log_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_DEFAULT,  "Extension point %@ not in the binding map, scanning all extension points",  buf,  0xCu);
    }

    _CSStoreEnumerateUnits();
    int v9 = *((_DWORD *)v20 + 6);
    if (!v9) {
      goto LABEL_10;
    }
  }

  uint64_t v12 = v16[3];
  if (v12)
  {
    if (a5) {
      *a5 = v9;
    }
    uint64_t v13 = 0LL;
    if (a6) {
      *a6 = v12;
    }
  }

  else
  {
LABEL_10:
    uint64_t v13 = 4294956482LL;
  }

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);

  return v13;
}

void sub_183F2868C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

uint64_t _LSExtensionPointUnregisterUnderFrameworkURL(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v10 = 0LL;
  id v11 = &v10;
  uint64_t v12 = 0x4812000000LL;
  uint64_t v13 = __Block_byref_object_copy__3;
  __int128 v14 = __Block_byref_object_dispose__4;
  uint64_t v15 = "";
  std::stringbuf::string_type __p = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  id v5 = v3;
  id v6 = v4;
  _CSStoreEnumerateUnits();
  unint64_t v7 = (int *)v11[6];
  id v8 = (int *)v11[7];
  while (v7 != v8)
    _LSExtensionPointRemove(v5, *v7++);

  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }

  return 0LL;
}

void sub_183F289A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *__p, uint64_t a23)
{
  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void sub_183F28B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSExtensionPointGetVisualizationFunctions( id (**a1)(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::ExtensionPoints::getSummary;
  a1[1] = (id (*)(LaunchServices::ExtensionPoints *, LSContext *, int))LaunchServices::ExtensionPoints::display;
  a1[2] = 0LL;
}

id LaunchServices::ExtensionPoints::getSummary(LaunchServices::ExtensionPoints *this, LSContext *a2, int a3)
{
  id v3 = (void *)_LSGetExtensionPointData(*(void *)this, a3);
  if (v3)
  {
    id v3 = (void *)_CSStringCopyCFString();
    if (!v3) {
      id v3 = (void *)_CSStringCopyCFString();
    }
  }

  return v3;
}

BOOL LaunchServices::ExtensionPoints::display( LaunchServices::ExtensionPoints *this, LSContext *a2, int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  unint64_t v7 = (int *)_LSGetExtensionPointData(*(void *)this, a3);
  if (v7)
  {
    CSStore2::AttributedStringWriter::string(a4, @"Extension Point ID");
    LaunchServices::DumpWriter::platform(a4, @"Platform", v7[11]);
    int v8 = v7[15];
    int v9 = @"internal";
    if (v8 == 1) {
      int v9 = @"public";
    }
    if (v8 == 2) {
      uint64_t v10 = @"3rd party";
    }
    else {
      uint64_t v10 = (__CFString *)v9;
    }
    id v11 = v10;
    CSStore2::AttributedStringWriter::string(a4, @"Type", v11);

    CSStore2::AttributedStringWriter::string(a4, @"Name");
    int v12 = v7[14];
    if (v12)
    {
      CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 20LL), v7[14], 0LL);
      uint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      uint64_t v13 = @"no parent provided";
    }

    CSStore2::AttributedStringWriter::string(a4, @"Parent Bundle ID", &v13->isa);
    if (v12) {

    }
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1600LL), v7[13], 0LL);
    __int128 v14 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"declaringFramework", v14);

    int v15 = v7[16];
    __int128 v16 = @"deny";
    if (v15 == 2) {
      __int128 v16 = @"prompt-host-personality";
    }
    if (v15 == 1) {
      uint64_t v17 = @"prompt-container-personality";
    }
    else {
      uint64_t v17 = (__CFString *)v16;
    }
    uint64_t v18 = v17;
    CSStore2::AttributedStringWriter::string(a4, @"TCC Policy", v18);

    CSStore2::AttributedStringWriter::timestamp(a4, @"reg date", (double)*v7);
    CSStore2::AttributedStringWriter::beginFlags(a4, @"extension point flags");
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    CSStore2::AttributedStringWriter::childUnit(a4, @"SDKDict");
  }

  return v7 != 0LL;
}

void sub_183F28E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_7( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_183F296DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F297C0(_Unwind_Exception *exception_object)
{
}

void sub_183F29A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F29B4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_183F29CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F29DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F29E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F29EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F29F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F29F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSXPCConnectionCanSuppressCustomSchemePrompt(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  BOOL v5 = 0LL;
  if (v3 && a2)
  {
    _LSCopyEntitlementValueForXPCConnection(v3, @"com.apple.private.launchservices.suppresscustomschemeprompt");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = &v17;
      uint64_t v19 = 0x2020000000LL;
      char v20 = 0;
      v15[0] = 0LL;
      v15[1] = v15;
      v15[2] = 0x2020000000LL;
      char v16 = 0;
      uint64_t v7 = MEMORY[0x1895F87A8];
      v14[0] = MEMORY[0x1895F87A8];
      v14[1] = 3221225472LL;
      void v14[2] = ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke;
      v14[3] = &unk_189D76EF8;
      v14[4] = &v17;
      void v14[5] = v15;
      void v14[6] = a2;
      v14[7] = 0LL;
      int v8 = (void (**)(void, void))MEMORY[0x186E2A7B8](v14);
      if (object_getClass(v6) == (Class)MEMORY[0x1895F9220])
      {
        applier[0] = v7;
        applier[1] = 3221225472LL;
        applier[2] = ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke_2;
        applier[3] = &unk_189D76F20;
        id v11 = v8;
        int v12 = &v17;
        uint64_t v13 = v15;
        xpc_array_apply(v6, applier);
      }

      else if (object_getClass(v6) == (Class)MEMORY[0x1895F92E8])
      {
        ((void (**)(void, id))v8)[2](v8, v6);
      }

      BOOL v5 = *((_BYTE *)v18 + 24) != 0;

      _Block_object_dispose(v15, 8);
      _Block_object_dispose(&v17, 8);
    }

    else
    {
      BOOL v5 = 0LL;
    }
  }

  return v5;
}

void sub_183F2A130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v20 - 96), 8);

  _Unwind_Resume(a1);
}

void ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke( void *a1, void *a2)
{
  id v8 = a2;
  string_ptr = xpc_string_get_string_ptr(v8);
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], string_ptr, 0x8000100u);
  BOOL v5 = v4;
  if (v4)
  {
    if (CFEqual(v4, @"*"))
    {
      *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
    }

    else
    {
      id v6 = (const __CFString *)a1[6];
      if (v6 && CFStringCompare(v6, v5, 1uLL) == kCFCompareEqualTo) {
        *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
      }
      uint64_t v7 = (const __CFString *)a1[7];
      if (!v7 || !UTTypeEqual(v7, v5)) {
        goto LABEL_5;
      }
    }

    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
LABEL_5:
    CFRelease(v5);
  }
}

void sub_183F2A250( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL ___ZL44_LSCheckEntitlementValueForSchemeOrTypeMatchPU24objcproto13OS_xpc_object8NSObjectPK10__CFStringS4__block_invoke_2( void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1895F92E8]) {
    (*(void (**)(void))(a1[4] + 16LL))();
  }
  if (*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL)) {
    BOOL v5 = *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) == 0;
  }
  else {
    BOOL v5 = 1LL;
  }

  return v5;
}

void sub_183F2A2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2A35C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2A718(_Unwind_Exception *a1)
{
  id v4 = v1;

  _Unwind_Resume(a1);
}

void sub_183F2A9F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  int v22 = v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_183F2AC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2AFF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F2B170( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
}

void sub_183F2B248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2B328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2B454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL12getEPFromLSDP8NSStringjPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
}

void ___ZL12getEPFromLSDP8NSStringjPU15__autoreleasingP7NSError_block_invoke_2( uint64_t a1, void *a2, void *a3)
{
}

uint64_t LSInit(int a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (a1 == 1) {
    return 4294967292LL;
  }
  __int16 v2 = a1;
  if ((a1 & 0x400) == 0 || (uint64_t result = _LSValidateDatabase(0LL), !(_DWORD)result))
  {
    if ((v2 & 0x20) != 0)
    {
      gLogRegistrationErrors = 1;
      if ((v2 & 0x40) == 0)
      {
LABEL_7:
        if ((v2 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }
    }

    else if ((v2 & 0x40) == 0)
    {
      goto LABEL_7;
    }

    [(id)__LSDefaultsGetSharedInstance() setHasServer:0];
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_16;
      }
      goto LABEL_13;
    }

void sub_183F2B6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OSStatus LSRegisterURL(CFURLRef inURL, Boolean inUpdate)
{
  int v2 = inUpdate;
  id v4 = (void *)MEMORY[0x186E2A59C]();
  id v9 = 0LL;
  LOBYTE(inURL) = _LSRegisterBundleURL(0LL, inURL, (v2 != 0) | 0x8000000, 0LL, &v9);
  id v5 = v9;
  int v6 = v5;
  else {
    OSStatus v7 = _LSGetOSStatusFromNSError(v5);
  }

  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_183F2B774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetStatus()
{
  uint64_t v5 = 0LL;
  int v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  int v8 = 0;
  int v0 = (void *)MEMORY[0x186E2A59C]();
  +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDReadService, 0LL);
  id v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  _DWORD v4[2] = ___LSGetStatus_block_invoke;
  void v4[3] = &unk_189D76FB8;
  void v4[4] = &v5;
  [v1 getServerStatusWithCompletionHandler:v4];

  objc_autoreleasePoolPop(v0);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_183F2B840( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t _LSValidateDatabase(const char *a1)
{
  uint64_t v7 = 0LL;
  if (a1)
  {
    id v6 = 0LL;
    BOOL v1 = _LSContextInitWithPath(&v7, (uint64_t)a1, &v6);
    id v2 = v6;
    id v3 = v2;
    if (v1) {
      uint64_t v4 = 0LL;
    }
    else {
      uint64_t v4 = _LSGetOSStatusFromNSError(v2);
    }
  }

  else
  {
    uint64_t v4 = _LSContextInit(&v7);
  }

  if (!(_DWORD)v4)
  {
    else {
      uint64_t v4 = 4294957805LL;
    }
    _LSContextDestroy(&v7);
  }

  return v4;
}

void sub_183F2B938( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__CFSet *_LSCreatePackageExtensionsArray(const __CFAllocator *a1)
{
  v4.db = 0LL;
  if (_LSContextInit((id *)&v4.db))
  {
    id v2 = 0LL;
  }

  else
  {
    id v2 = _LSCreatePackageExtensionsArrayForContext(a1, &v4);
    _LSContextDestroy((void **)&v4.db);
  }

  return v2;
}

void sub_183F2B9B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

__CFSet *_LSCreatePackageExtensionsArrayForContext(const __CFAllocator *a1, LSContext *a2)
{
  uint64_t result = _LSCopyPackageExtensions(a2);
  if (result)
  {
    LSContext v4 = result;
    CFArrayRef v5 = XCFArrayCreateWithSet(a1, result, MEMORY[0x189605228]);
    CFRelease(v4);
    return v5;
  }

  return result;
}

uint64_t _LSUnregisterPluginsInDirectory(const __CFURL *a1)
{
  id v9 = 0LL;
  uint64_t v2 = _LSContextInit(&v9);
  if (!(_DWORD)v2)
  {
    if (a1 && (v3 = (const __CFArray *)_LSCopyPluginsWithURL((uint64_t)&v9, a1), (LSContext v4 = v3) != 0LL))
    {
      CFIndex Count = CFArrayGetCount(v3);
      if (Count < 1)
      {
        uint64_t v2 = 0LL;
      }

      else
      {
        CFIndex v6 = 0LL;
        uint64_t v2 = 0LL;
        do
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, v6);
          if (ValueAtIndex) {
            uint64_t v2 = _LSUnregisterPlugin(&v9, [ValueAtIndex unsignedLongLongValue]);
          }
          ++v6;
        }

        while (Count != v6);
      }

      CFRelease(v4);
    }

    else
    {
      uint64_t v2 = 0LL;
    }

    _LSContextDestroy(&v9);
  }

  return v2;
}

void sub_183F2BAF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t _LSSetDefaultWebBrowserWithBundleIdentifierAndVersion()
{
  return 4294967292LL;
}

CFDataRef _LSAdvertisementBytesKind(const __CFData *result)
{
  if (result)
  {
    BOOL v1 = result;
    if (CFDataGetLength(result) >= 7)
    {
      uint64_t v2 = (char *)&loc_183F2BB64 + 4 * byte_183FBF370[*CFDataGetBytePtr(v1) >> 6];
      __asm { BR              X10 }
    }

    return 0LL;
  }

  return result;
}

void sub_183F2BBCC()
{
}

void sub_183F2BBD4()
{
}

uint64_t _LSDebugAdvertismentValue(const __CFData *a1)
{
  return CFDataGetBytePtr(a1)[6];
}

CFStringRef _LSCreateDatabaseLookupStringFromHashedBytesForAdvertising(const __CFData *a1)
{
  if (!a1 || CFDataGetLength(a1) < 7) {
    return 0LL;
  }
  switch((unint64_t)_LSAdvertisementBytesKind(a1))
  {
    case 1uLL:
      uint64_t v2 = "ua-";
      return createDatabaseStringFromHashedBytes(v2, a1);
    case 2uLL:
      uint64_t v2 = "dns-";
      return createDatabaseStringFromHashedBytes(v2, a1);
    case 3uLL:
      int v3 = CFDataGetBytePtr(a1)[6];
      LSContext v4 = @"com.apple.NowPlaying";
      if (v3 != 1) {
        LSContext v4 = 0LL;
      }
      if (v3 == 2) {
        CFArrayRef v5 = @"com.apple.Siri";
      }
      else {
        CFArrayRef v5 = v4;
      }
      if (!v5) {
        return 0LL;
      }
      CFIndex v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      goto LABEL_20;
    case 4uLL:
      uint64_t v2 = "pv-";
      return createDatabaseStringFromHashedBytes(v2, a1);
    case 5uLL:
      int v8 = CFDataGetBytePtr(a1)[5] & 0xC0;
      if (v8 == 64)
      {
        CFIndex v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        CFArrayRef v5 = @"com.apple.private.handoff.pong";
      }

      else
      {
        if (v8 != 128) {
          return 0LL;
        }
        CFIndex v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
        CFArrayRef v5 = @"com.apple.private.handoff.ping";
      }

CFStringRef createDatabaseStringFromHashedBytes(char *a1, CFDataRef theData)
{
  BytePtr = CFDataGetBytePtr(theData);
  if (a1) {
    CFArrayRef v5 = a1;
  }
  else {
    CFArrayRef v5 = "";
  }
  std::string::basic_string[abi:nn180100]<0>(&v11, v5);
  for (uint64_t i = 0LL; i != 7; ++i)
  {
    std::string::push_back(&v11, a0123456789abcd[(unint64_t)BytePtr[i] >> 4]);
    std::string::push_back(&v11, a0123456789abcd[BytePtr[i] & 0xF]);
  }

  if ((v11.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v7 = &v11;
  }
  else {
    uint64_t v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    CFIndex size = v11.__r_.__value_.__s.__size_;
  }
  else {
    CFIndex size = v11.__r_.__value_.__l.__size_;
  }
  CFStringRef v9 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x189604DB0], (const UInt8 *)v7, size, 0x8000100u, 0);
  return v9;
}

void sub_183F2BE28( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFDataRef _LSCreateHashedBytesForAdvertisingFromString(uint64_t a1, CFStringRef theString)
{
  CFStringRef Copy = theString;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (a1 == 2 && theString)
  {
    LSContext v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    MutableCFStringRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, theString);
    Systeuint64_t m = CFLocaleGetSystem();
    CFStringLowercase(MutableCopy, System);
    CFStringRef Copy = CFStringCreateCopy(v4, MutableCopy);
    CFRelease(MutableCopy);
    if (!Copy) {
      return 0LL;
    }
  }

  else
  {
    if (!theString) {
      return 0LL;
    }
    CFRetain(theString);
  }

  if (CFStringGetCString(Copy, buffer, 1024LL, 0x8000100u) && (size_t v7 = strlen(buffer), v7 - 1 <= 0x7FFFFFFD))
  {
    memset(v18, 0, sizeof(v18));
    CC_SHA512(buffer, v7, (unsigned __int8 *)v18);
    for (uint64_t i = 7LL; i != 64; ++i)
    {
      CFStringRef v9 = (_BYTE *)((unint64_t)v18 | (i
                                                             - 7
                                                             * ((((i
      *v9 ^= *((_BYTE *)v18 + i);
    }

    switch(a1)
    {
      case 0LL:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        goto LABEL_32;
      case 1LL:
        char v11 = v18[0];
        char v12 = 0x80;
        goto LABEL_17;
      case 2LL:
        char v11 = v18[0];
        char v12 = 64;
LABEL_17:
        LOBYTE(v18[0]) = v12 & 0xC0 | v11 & 0x3F;
        goto LABEL_32;
      case 3LL:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        if (CFEqual(Copy, @"com.apple.Siri"))
        {
          char v13 = 2;
        }

        else if (CFEqual(Copy, @"com.apple.NowPlaying"))
        {
          char v13 = 1;
        }

        else if (CFEqual(Copy, @"com.apple.fetchsamplepayload"))
        {
          char v13 = -1;
        }

        else
        {
          char v13 = 0;
        }

        BYTE6(v18[0]) = v13;
        goto LABEL_32;
      case 4LL:
        LOBYTE(v18[0]) |= 0xC0u;
        goto LABEL_32;
      case 5LL:
        *(_DWORD *)((char *)v18 + 3) = 0;
        LODWORD(v18[0]) = 0;
        int v14 = rand();
        BYTE6(v18[0]) = v14 + v14 / 255;
        if (CFEqual(Copy, @"com.apple.private.handoff.ping"))
        {
          char v15 = BYTE5(v18[0]);
          char v16 = 0x80;
        }

        else
        {
          if (!CFEqual(Copy, @"com.apple.private.handoff.pong")) {
            goto LABEL_32;
          }
          char v15 = BYTE5(v18[0]);
          char v16 = 64;
        }

        BYTE5(v18[0]) = v16 & 0xC0 | v15 & 0x3F;
LABEL_32:
        CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], (const UInt8 *)v18, 7LL);
        break;
      default:
        goto LABEL_32;
    }
  }

  else
  {
    CFDataRef v10 = 0LL;
  }

  CFRelease(Copy);
  return v10;
}

uint64_t _LSCompareHashedBytesFromAdvertisingStrings(CFDataRef theData, const __CFData *a2)
{
  uint64_t result = -1LL;
  if (theData && a2)
  {
    if (CFDataGetLength(theData) < 7 || CFDataGetLength(a2) < 7)
    {
      return -1LL;
    }

    else
    {
      BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
      CFIndex v6 = (unsigned int *)CFDataGetBytePtr(a2);
      unsigned int v7 = bswap32(*BytePtr);
      unsigned int v8 = bswap32(*v6);
      if (v7 == v8
        && (unsigned int v7 = bswap32(*(unsigned int *)((char *)BytePtr + 3)),
            unsigned int v8 = bswap32(*(unsigned int *)((char *)v6 + 3)),
            v7 == v8))
      {
        return 0;
      }

      else if (v7 < v8)
      {
        return -1;
      }

      else
      {
        return 1;
      }
    }
  }

  return result;
}

CFStringRef _LSCopyAdvertisementStringForTeamIdentifierAndActivityType( const __CFAllocator *a1, const __CFString *a2, CFStringRef theString)
{
  if (!theString) {
    return 0LL;
  }
  v8.CFIndex length = CFStringGetLength(theString);
  v8.id location = 0LL;
  if (!CFStringFindWithOptions(theString, @".", v8, 0LL, 0LL)
    && (CFStringHasPrefix(theString, @"NS")
     || CFStringHasPrefix(theString, @"IN")
     || CFEqual(theString, @"TVUserActivityTypeBrowsingChannelGuide")))
  {
    return (CFStringRef)CFRetain(theString);
  }

  CFIndex v6 = &stru_189D7B4C8;
  if (a2)
  {
    if (!CFEqual(a2, @"0000000000")) {
      CFIndex v6 = a2;
    }
  }

  return CFStringCreateWithFormat(a1, 0LL, @"%@:%@", v6, theString);
}

uint64_t _LSCopyClaimedActivityIdentifiersAndDomains(void *a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  uint64_t v47 = 0LL;
  __int128 v48 = &v47;
  uint64_t v49 = 0x2020000000LL;
  int v50 = -10810;
  uint64_t v43 = 0LL;
  __int128 v44 = &v43;
  uint64_t v45 = 0x2020000000LL;
  uint64_t v46 = 0LL;
  uint64_t v39 = 0LL;
  mach_header v40 = &v39;
  uint64_t v41 = 0x2020000000LL;
  uint64_t v42 = 0LL;
  if (_LSCurrentProcessMayMapDatabase())
  {
    id v38 = 0LL;
    uint64_t v35 = 0LL;
    id v36 = 0LL;
    char v37 = 0;
    +[_LSDServiceDomain defaultServiceDomain]();
    LSContext v4 = (_LSDServiceDomain *)objc_claimAutoreleasedReturnValue();
    CFArrayRef v5 = (void *)LaunchServices::Database::Context::_get((LaunchServices::Database::Context *)&v35, v4, 0LL);

    if (v5)
    {
      CFIndex v6 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605258]);
      v44[3] = (uint64_t)Mutable;
      CFMutableSetRef v8 = CFSetCreateMutable(v6, 0LL, MEMORY[0x189605258]);
      v40[3] = (uint64_t)v8;
      if (v44[3] && v8)
      {
        v34[0] = MEMORY[0x1895F87A8];
        v34[1] = 3221225472LL;
        _DWORD v34[2] = ___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke;
        v34[3] = &unk_189D77008;
        v34[4] = &v43;
        v34[5] = &v39;
        v34[6] = v5;
        _LSEnumerateViableBundlesOfClass(v5, 2LL, v34);
        CFStringRef v9 = CFArrayCreateMutable(v6, 0LL, MEMORY[0x189605228]);
        if (v9)
        {
          for (uint64_t i = 0LL; i != 4; ++i)
          {
            CFStringRef v11 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v6, 0LL, off_189D77078[i]);
            if (v11)
            {
              CFArrayAppendValue(v9, v11);
              CFRelease(v11);
            }
          }

          CFArrayRef Copy = CFArrayCreateCopy(v6, v9);
          CFRelease(v9);
        }

        else
        {
          CFArrayRef Copy = 0LL;
        }

        __int128 v32 = 0u;
        __int128 v33 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        char v16 = Copy;
        uint64_t v17 = -[__CFArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v30,  v51,  16LL);
        if (v17)
        {
          uint64_t v18 = *(void *)v31;
          do
          {
            for (uint64_t j = 0LL; j != v17; ++j)
            {
              if (*(void *)v31 != v18) {
                objc_enumerationMutation(v16);
              }
              CFSetAddValue((CFMutableSetRef)v44[3], *(const void **)(*((void *)&v30 + 1) + 8 * j));
            }

            uint64_t v17 = -[__CFArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v30,  v51,  16LL);
          }

          while (v17);
        }
      }

      else
      {
        *((_DWORD *)v48 + 6) = -41;
      }
    }

    if (v35 && v37) {
      _LSContextDestroy(v35);
    }
    id v20 = v36;
    uint64_t v35 = 0LL;
    id v36 = 0LL;

    char v37 = 0;
    id v21 = v38;
    id v38 = 0LL;
  }

  else
  {
    char v13 = (void *)MEMORY[0x186E2A59C]();
    uint64_t v14 = MEMORY[0x1895F87A8];
    v29[0] = (void (*)(void, void))MEMORY[0x1895F87A8];
    v29[1] = (void (*)(void, void))3221225472LL;
    void v29[2] = (void (*)(void, void))___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke_2;
    v29[3] = (void (*)(void, void))&unk_189D72338;
    v29[4] = (void (*)(void, void))&v47;
    +[_LSDService synchronousXPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDReadService, v29);
    char v15 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v14;
    v28[1] = 3221225472LL;
    v28[2] = ___LSCopyClaimedActivityIdentifiersAndDomains_block_invoke_3;
    void v28[3] = &unk_189D77030;
    v28[4] = &v43;
    v28[5] = &v39;
    v28[6] = &v47;
    [v15 getAllUserActivityTypesAndDomainNamesWithCompletionHandler:v28];

    objc_autoreleasePoolPop(v13);
  }

  if (!*((_DWORD *)v48 + 6))
  {
    if (a1)
    {
      CFTypeRef v22 = (CFTypeRef)v44[3];
      if (v22) {
        CFTypeRef v22 = CFRetain(v22);
      }
      *a1 = v22;
    }

    if (a2)
    {
      CFTypeRef v23 = (CFTypeRef)v40[3];
      if (v23) {
        CFTypeRef v23 = CFRetain(v23);
      }
      *a2 = v23;
    }
  }

  __int16 v24 = (const void *)v44[3];
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = (const void *)v40[3];
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *((unsigned int *)v48 + 6);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  return v26;
}

void sub_183F2C6F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a37);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v47 - 248), 8);
  _Unwind_Resume(a1);
}

void sub_183F2C950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2C9D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F2CA9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t _LSCopyUserActivityDomainNamesForBundleID(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a1 || !_LSIsSWCAvailable()) {
    return 0LL;
  }
  id v2 = objc_alloc((Class)_LSSWCServiceSpecifierClass());
  _LSSWCServiceTypeActivityContinuation();
  int v3 = (void *)objc_claimAutoreleasedReturnValue();
  LSContext v4 = (void *)[v2 initWithServiceType:v3 applicationIdentifier:a1 domain:0];

  id v24 = 0LL;
  [(id)_LSSWCServiceDetailsClass() serviceDetailsWithServiceSpecifier:v4 error:&v24];
  CFArrayRef v5 = (void *)objc_claimAutoreleasedReturnValue();
  id v6 = v24;
  uint64_t v19 = v6;
  if (v5)
  {
    id v7 = objc_alloc_init(MEMORY[0x189603FA8]);
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v8 = v5;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v21;
      do
      {
        for (uint64_t i = 0LL; i != v9; ++i)
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v8);
          }
          char v12 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          if ([v12 isApproved])
          {
            [v12 serviceSpecifier];
            char v13 = (void *)objc_claimAutoreleasedReturnValue();
            [v13 domain];
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
            [v14 lowercaseString];
            char v15 = (void *)objc_claimAutoreleasedReturnValue();

            if ([v15 length]) {
              [v7 addObject:v15];
            }
          }
        }

        uint64_t v9 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
      }

      while (v9);
    }

    uint64_t v16 = [v7 copy];
  }

  else
  {
    uint64_t v17 = (uint64_t)v6;
    _LSDefaultLog();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR)) {
      _LSCopyUserActivityDomainNamesForBundleID_cold_1(v17, (os_log_s *)v7);
    }
    uint64_t v16 = 0LL;
  }

  return v16;
}

void sub_183F2CCDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

CFArrayRef _LSCopyActivityTypesClaimedHashedAdvertisingStrings( uint64_t a1, const __CFString *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  id v8 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605258]);
  if (a1)
  {
    uint64_t v10 = &stru_189D7B4C8;
    if (a2) {
      uint64_t v10 = a2;
    }
    CFStringRef v11 = CFStringCreateWithFormat(v8, 0LL, @"%@#%@:%@", @"NOTIFICATION", v10, a1);
    appendStringAndHashedBytesOfType(Mutable, 4LL, v11);
    CFRelease(v11);
  }

  if (a3)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a3, @"NSUserActivityTypes");
    if (Value)
    {
      char v13 = Value;
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v13) && CFArrayGetCount(v13) >= 1)
      {
        CFIndex v15 = 0LL;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, v15);
          if (ValueAtIndex)
          {
            uint64_t v17 = ValueAtIndex;
            CFTypeID v18 = CFStringGetTypeID();
            if (v18 == CFGetTypeID(v17))
            {
              uint64_t v19 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v8, a2, v17);
              if (v19)
              {
                __int128 v20 = v19;
                appendStringAndHashedBytesOfType(Mutable, 1LL, v19);
                CFRelease(v20);
              }
            }
          }

          ++v15;
        }

        while (v15 < CFArrayGetCount(v13));
      }
    }

    __int128 v21 = (const __CFArray *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x189604AA8]);
    if (v21)
    {
      __int128 v22 = v21;
      CFTypeID v23 = CFArrayGetTypeID();
      if (v23 == CFGetTypeID(v22))
      {
        CFIndex Count = CFArrayGetCount(v22);
        if (Count >= 1)
        {
          CFIndex v25 = Count;
          for (CFIndex i = 0LL; i != v25; ++i)
          {
            CFNumberRef v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, i);
            if (v27)
            {
              int v28 = v27;
              CFTypeID v29 = CFDictionaryGetTypeID();
              if (v29 == CFGetTypeID(v28))
              {
                __int128 v30 = (const __CFString *)CFDictionaryGetValue(v28, @"NSUbiquitousDocumentUserActivityType");
                if (v30)
                {
                  __int128 v31 = v30;
                  CFTypeID v32 = CFStringGetTypeID();
                  if (v32 == CFGetTypeID(v31))
                  {
                    __int128 v33 = _LSCopyAdvertisementStringForTeamIdentifierAndActivityType(v8, a2, v31);
                    if (v33)
                    {
                      uint64_t v34 = v33;
                      appendStringAndHashedBytesOfType(Mutable, 1LL, v33);
                      CFRelease(v34);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (a4 && _LSIsSWCAvailable())
  {
    uint64_t v35 = (void *)MEMORY[0x186E2A59C]();
    CFDictionaryGetValue(a4, @"com.apple.developer.associated-domains");
    id v36 = (void *)objc_claimAutoreleasedReturnValue();
    if (v36)
    {
      char v37 = (void *)_LSSWCServiceSpecifierClass();
      _LSSWCServiceTypeActivityContinuation();
      id v38 = (void *)objc_claimAutoreleasedReturnValue();
      [v37 serviceSpecifiersWithEntitlementValue:v36 serviceType:v38 error:0];
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue();

      __int128 v53 = 0u;
      __int128 v54 = 0u;
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      id v40 = v39;
      uint64_t v41 = [v40 countByEnumeratingWithState:&v51 objects:v55 count:16];
      if (v41)
      {
        uint64_t v42 = *(void *)v52;
        do
        {
          uint64_t v43 = 0LL;
          do
          {
            if (*(void *)v52 != v42) {
              objc_enumerationMutation(v40);
            }
            [*(id *)(*((void *)&v51 + 1) + 8 * v43) domain];
            __int128 v44 = (void *)objc_claimAutoreleasedReturnValue();
            [v44 lowercaseString];
            uint64_t v45 = (__CFString *)objc_claimAutoreleasedReturnValue();

            appendStringAndHashedBytesOfType(Mutable, 2LL, v45);
            ++v43;
          }

          while (v41 != v43);
          uint64_t v41 = [v40 countByEnumeratingWithState:&v51 objects:v55 count:16];
        }

        while (v41);
      }
    }

    objc_autoreleasePoolPop(v35);
  }

  if (!Mutable) {
    return 0LL;
  }
  if (CFSetGetCount(Mutable) < 1)
  {
    CFArrayRef v48 = 0LL;
  }

  else
  {
    if (CFSetGetCount(Mutable))
    {
      CFIndex v46 = CFSetGetCount(Mutable);
      uint64_t v47 = (const void **)malloc(8 * v46);
    }

    else
    {
      uint64_t v47 = (const void **)v56;
    }

    CFSetGetValues(Mutable, v47);
    CFIndex v49 = CFSetGetCount(Mutable);
    CFArrayRef v48 = CFArrayCreate(v8, v47, v49, MEMORY[0x189605228]);
  }

  CFRelease(Mutable);
  return v48;
}

void sub_183F2D1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void appendStringAndHashedBytesOfType(__CFSet *a1, uint64_t a2, CFStringRef theString)
{
  CFArrayRef v5 = _LSCreateHashedBytesForAdvertisingFromString(a2, theString);
  if (v5)
  {
    id v6 = v5;
    CFStringRef v7 = _LSCreateDatabaseLookupStringFromHashedBytesForAdvertising(v5);
    if (v7)
    {
      CFStringRef v8 = v7;
      CFSetAddValue(a1, theString);
      CFSetAddValue(a1, v8);
      CFRelease(v8);
    }

    CFRelease(v6);
  }

uint64_t _LSDatabaseCopyURLForUser(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v3 = [(id)__LSDefaultsGetSharedInstance() databaseStoreFileURLWithUID:a1];
  objc_autoreleasePoolPop(v2);
  return v3;
}

BOOL _LSDisplayData( FILE *a1, const char *a2, unsigned int *a3, void *a4, CFArrayRef theArray, void *a6, uint64_t a7, void *a8)
{
  char v12 = a4;
  if (a4) {
    char v12 = (void *)[objc_alloc(MEMORY[0x189604010]) initWithArray:a4];
  }
  if (theArray) {
    theArray = XCFSetCreateWithArray( (const __CFAllocator *)*MEMORY[0x189604DB0],  theArray,  (const CFSetCallBacks *)&kXCFCaseInsensitiveStringSetCallBacks);
  }
  id v16 = a6;
  if (!a2)
  {
    v36[0] = 0LL;
    if (a3)
    {
      uint64_t v24 = -[_LSDServiceDomain initWithUID:](objc_alloc(&OBJC_CLASS____LSDServiceDomain), *a3);
    }

    else
    {
      uint64_t v24 = +[_LSDServiceDomain defaultServiceDomain]();
    }

    uint64_t v26 = (void *)v24;
    id v40 = 0LL;
    int v27 = _LSContextInitWithOptions(v36, v24, 0LL, &v40);
    id v23 = v40;

    if (!v27) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }

  [NSString stringWithUTF8String:a2];
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue();
  [v17 lowercaseString];
  CFTypeID v18 = (void *)objc_claimAutoreleasedReturnValue();
  int v19 = [v18 hasSuffix:@".csstoredump"];

  if (!v19)
  {
    v36[0] = 0LL;
    id v41 = 0LL;
    BOOL v25 = _LSContextInitWithPath(v36, (uint64_t)a2, &v41);
    id v23 = v41;
    if (!v25)
    {
LABEL_13:
      BOOL v22 = 0LL;
      goto LABEL_20;
    }

void sub_183F2D66C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_189D76AA8;
  id result = *(id *)(a2 + 304);
  *(void *)(a1 + 304) = result;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void sub_183F2DC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2DF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL22initActivationObserverv_block_invoke()
{
  if (getkNotificationActivationStateChanged())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    BOOL v1 = (const __CFString *)getkNotificationActivationStateChanged();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  0LL,  (CFNotificationCallback)handleActivationStateChanged,  v1,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  }

  else
  {
    _LSDefaultLog();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZL22initActivationObserverv_block_invoke_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

uint64_t handleActivationStateChanged( __CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  return +[LSHRNSupport invalidateCache](&OBJC_CLASS___LSHRNSupport, "invalidateCache", a3, a4, a5);
}

uint64_t initkNotificationActivationStateChanged(void)
{
  int v0 = (void *)MobileActivationLibrary(void)::frameworkLibrary;
  if (!MobileActivationLibrary(void)::frameworkLibrary)
  {
    int v0 = dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
    MobileActivationLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "kNotificationActivationStateChanged");
  constantkNotificationActivationStateChanged = result;
  getkNotificationActivationStateChanged = kNotificationActivationStateChangedFunction;
  return result;
}

uint64_t kNotificationActivationStateChangedFunction(void)
{
  return constantkNotificationActivationStateChanged;
}

uint64_t (*initMAECopyActivationRecordWithError(uint64_t a1))()
{
  id v2 = (void *)MobileActivationLibrary(void)::frameworkLibrary;
  if (!MobileActivationLibrary(void)::frameworkLibrary)
  {
    id v2 = dlopen("/System/Library/PrivateFrameworks/MobileActivation.framework/MobileActivation", 2);
    MobileActivationLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }

  uint64_t v3 = (uint64_t (*)())dlsym(v2, "MAECopyActivationRecordWithError");
  softLinkMAECopyActivationRecordWithError = v3;
  if (v3)
  {
    ((void (*)(uint64_t))v3)(a1);
    uint64_t v3 = (uint64_t (*)())objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

uint64_t _LSValidateEntitlementsOfConnectionForVanillaInstall(void *a1, void *a2, void *a3)
{
  id v6 = a1;
  id v7 = a2;
  [v6 _xpcConnection];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = _LSCheckMIAllowedSPIForXPCConnection(v8, @"InstallForLaunchServices");

  if (!(_DWORD)v9)
  {
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  1LL,  (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall",  47LL,  &unk_189DA8488);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_15;
  }

  [v7 objectForKeyedSubscript:@"VerifyForMigrator"];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  char v11 = [v10 BOOLValue];
  if ((v11 & 1) != 0
    || ([v7 objectForKeyedSubscript:@"SkipBlacklist"],
        uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(),
        ([v3 BOOLValue] & 1) != 0))
  {
    [v6 _xpcConnection];
    char v12 = (void *)objc_claimAutoreleasedReturnValue();
    int v13 = _LSCheckMIAllowedSPIForXPCConnection(v12, @"InstallForDataMigrator");

    if ((v11 & 1) == 0) {
    if (!v13)
    }
    {
      _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  1LL,  (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall",  37LL,  &unk_189DA8438);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v9 = 0LL;
      goto LABEL_11;
    }
  }

  else
  {
  }

  uint64_t v14 = 0LL;
  uint64_t v9 = 1LL;
LABEL_11:
  [v7 objectForKeyedSubscript:@"AllowInstallLocalProvisioned"];
  CFIndex v15 = (void *)objc_claimAutoreleasedReturnValue();
  if ([v15 BOOLValue])
  {
    [v6 _xpcConnection];
    id v16 = (void *)objc_claimAutoreleasedReturnValue();
    int v17 = _LSCheckMIAllowedSPIForXPCConnection(v16, @"InstallLocalProvisioned");

    if (!v17)
    {
      uint64_t v18 = _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  1LL,  (uint64_t)"_LSValidateEntitlementsOfConnectionForVanillaInstall",  43LL,  &unk_189DA8460);

      uint64_t v9 = 0LL;
      uint64_t v14 = (void *)v18;
    }
  }

  else
  {
  }

BOOL _LSValidateEntitlementsOfConnectionForUninstall(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  int v5 = _LSCheckMIAllowedSPIForXPCConnection(v4, @"UninstallForLaunchServices");

  if (v5)
  {
    id v6 = 0LL;
  }

  else
  {
    _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  1LL,  (uint64_t)"_LSValidateEntitlementsOfConnectionForUninstall",  63LL,  &unk_189DA84B0);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    if (a3)
    {
      id v6 = v6;
      *a3 = v6;
    }
  }

  return v5 != 0;
}

id installationInterface()
{
  if (installationInterface_once != -1) {
    dispatch_once(&installationInterface_once, &__block_literal_global_37);
  }
  return (id)installationInterface_interface;
}

void __installationInterface_block_invoke()
{
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [MEMORY[0x189607B48] interfaceWithProtocol:&unk_18C682E98];
  BOOL v1 = (void *)installationInterface_interface;
  installationInterface_interface = v0;

  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedInstallOfArtifact_options_completion_ argumentIndex:0 ofReply:0];
  [(id)installationInterface_interface setClasses:v2 forSelector:sel_performShimmedInstallOfArtifact_options_completion_ argumentIndex:1 ofReply:0];
  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedInstallOfArtifact_options_completion_ argumentIndex:1 ofReply:1];
  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_ argumentIndex:0 ofReply:0];
  [(id)installationInterface_interface setClasses:v2 forSelector:sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_ argumentIndex:1 ofReply:0];
  [(id)installationInterface_interface setClass:objc_opt_class() forSelector:sel_performShimmedUninstallOfApplicationWithIdentifier_options_completion_ argumentIndex:1 ofReply:1];
}

void OUTLINED_FUNCTION_3_6( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_183F2F494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2F540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2F6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2F8C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21)
{
  _Unwind_Resume(a1);
}

void sub_183F2FA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F2FC94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F2FD9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS____LSInProcessSettingsStore;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_183F2FEC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_183F30018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F300BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F30224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F30354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F303D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F30490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F306C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F30B28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_183F30CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F30E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F31014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F31178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F31234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F312B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F313F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3151C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F315B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F316C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS____LSClientSettingsStore;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_183F31928( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void sub_183F31A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F31B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F31DB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_183F31EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F31F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F321FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_183F32378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3241C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F32644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  _Block_object_dispose((const void *)(v28 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_183F327A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F32848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ___ZL29pluginKitUserElectionStoreURLv_block_invoke()
{
  uint64_t v6 = 1LL;
  uint64_t v0 = container_create_or_lookup_path_for_current_user();
  if (v0)
  {
    BOOL v1 = (void *)v0;
    [MEMORY[0x189604030] fileURLWithFileSystemRepresentation:v0 isDirectory:1 relativeToURL:0];
    id v2 = (void *)objc_claimAutoreleasedReturnValue();
    free(v1);
  }

  else
  {
    _LSExtensionsLog();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      ___ZL29pluginKitUserElectionStoreURLv_block_invoke_cold_1(&v6, v3, v4);
    }

    objc_msgSend( MEMORY[0x189603F70],  "raise:format:",  *MEMORY[0x189603A58],  @"unable to locate user container: error %llu",  v6);
    id v2 = 0LL;
  }

  return v2;
}

void ___ZL29pluginKitUserElectionStoreURLv_block_invoke_223(uint64_t a1)
{
  v19[1] = *MEMORY[0x1895F89C0];
  uint64_t v18 = *MEMORY[0x189607500];
  v19[0] = &unk_189DA81A0;
  [MEMORY[0x189603F68] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  id v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (getUMUserManagerClass()
    && ([(id)getUMUserManagerClass() sharedManager],
        uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(),
        int v4 = [v3 isMultiUser],
        v3,
        v4))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    int v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    [MEMORY[0x189604030] fileURLWithPath:@"/var/db/PlugInKit-Annotations"];
    int v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  uint64_t v6 = v5;
  [v5 URLByAppendingPathComponent:@"com.apple.pluginkit/"];
  id v7 = (void *)objc_claimAutoreleasedReturnValue();
  [MEMORY[0x1896078A8] defaultManager];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  id v16 = 0LL;
  char v9 = [v8 createDirectoryAtURL:v7 withIntermediateDirectories:1 attributes:v2 error:&v16];
  id v10 = v16;

  if ((v9 & 1) == 0)
  {
    _LSExtensionsLog();
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      ___ZL29pluginKitUserElectionStoreURLv_block_invoke_223_cold_2();
    }
  }

  uint64_t v12 = [v7 URLByAppendingPathComponent:@"Annotations"];
  uint64_t v13 = (void *)pluginKitUserElectionStoreURL(void)::annotations;
  pluginKitUserElectionStoreURL(void)::annotations = v12;

  _LSExtensionsLog();
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    [(id)pluginKitUserElectionStoreURL(void)::annotations path];
    CFIndex v15 = (void *)objc_claimAutoreleasedReturnValue();
    ___ZL29pluginKitUserElectionStoreURLv_block_invoke_223_cold_1(v15, (uint64_t)v17);
  }
}

void sub_183F32BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_5_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_12_1(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

uint64_t LSDefaultAppCategoryForMask()
{
  uint64_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    LSDefaultAppCategoryForMask_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
  }

  return 0LL;
}

uint64_t LSDefaultAppCategoryMaskForCategory()
{
  uint64_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    LSDefaultAppCategoryMaskForCategory_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
  }

  return 0LL;
}

uint64_t LSDefaultAppCategoryGetFromName()
{
  return 0LL;
}

id installProgressInterface()
{
  if (installProgressInterface_onceToken != -1) {
    dispatch_once(&installProgressInterface_onceToken, &__block_literal_global_39);
  }
  return (id)installProgressInterface_interface;
}

void __installProgressInterface_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x189604010];
  uint64_t v1 = objc_opt_class();
  objc_msgSend(v0, "setWithObjects:", v1, objc_opt_class(), 0);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [MEMORY[0x189607B48] interfaceWithProtocol:&unk_18C68A920];
  uint64_t v3 = (void *)installProgressInterface_interface;
  installProgressInterface_interface = v2;

  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_createInstallProgressForApplication_withPhase_andPublishingString_reply_ argumentIndex:0 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_createInstallProgressForApplication_withPhase_andPublishingString_reply_ argumentIndex:2 ofReply:0];
  [(id)installProgressInterface_interface setClasses:v8 forSelector:sel_sendNotification_forApplications_withPlugins_ argumentIndex:1 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_sendNotification_forApplicationWithBundleIdentifier_completion_ argumentIndex:1 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_sendNotification_forApplicationWithBundleIdentifier_completion_ argumentIndex:0 ofReply:1];
  uint64_t v4 = (void *)installProgressInterface_interface;
  uint64_t v5 = (void *)MEMORY[0x189604010];
  uint64_t v6 = objc_opt_class();
  objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  [v4 setClasses:v7 forSelector:sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_ argumentIndex:0 ofReply:0];

  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_ argumentIndex:1 ofReply:0];
  [(id)installProgressInterface_interface setClass:objc_opt_class() forSelector:sel_setProgressProportionsByPhase_forInstallOfApplicationWithIdentifier_completion_ argumentIndex:0 ofReply:1];
}

id workspaceObserverInterface()
{
  if (workspaceObserverInterface_onceToken != -1) {
    dispatch_once(&workspaceObserverInterface_onceToken, &__block_literal_global_74_1);
  }
  return (id)workspaceObserverInterface_interface;
}

void __workspaceObserverInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x189607B48] interfaceWithProtocol:&unk_18C67E270];
  uint64_t v1 = (void *)workspaceObserverInterface_interface;
  workspaceObserverInterface_interface = v0;

  uint64_t v2 = (void *)MEMORY[0x189604010];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, v5, objc_opt_class(), 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidStart_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidChange_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidUpdateIcon_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsWillInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_pluginsDidInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsWillUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_pluginsWillUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_pluginsDidUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidFailToInstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidFailToUninstall_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationStateDidChange_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationIconDidChange_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsArePrioritized_arePaused_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsArePrioritized_arePaused_ argumentIndex:1 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidPause_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidResume_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidCancel_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationInstallsDidPrioritize_ argumentIndex:0 ofReply:0];
  [(id)workspaceObserverInterface_interface setClasses:v6 forSelector:sel_applicationsDidChangePersonas_ argumentIndex:0 ofReply:0];
}

void sub_183F3344C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::FeatureFlagPredicateEvaluation::Predicate::parse_dictionary( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v41[1] = *MEMORY[0x1895F89C0];
  id v5 = a1;
  if ((_NSIsNSDictionary() & 1) != 0)
  {
    uint64_t v32 = 0LL;
    __int128 v33 = &v32;
    uint64_t v34 = 0x4812000000LL;
    id v35 = __Block_byref_object_copy__24;
    id v36 = __Block_byref_object_dispose__24;
    char v37 = "";
    memset(v38, 0, sizeof(v38));
    BOOL v25 = 0LL;
    uint64_t v26 = &v25;
    uint64_t v27 = 0x4812000000LL;
    uint64_t v28 = __Block_byref_object_copy__24;
    uint64_t v29 = __Block_byref_object_dispose__24;
    uint64_t v30 = "";
    memset(v31, 0, sizeof(v31));
    int v19 = 0LL;
    __int128 v20 = &v19;
    uint64_t v21 = 0x3032000000LL;
    BOOL v22 = __Block_byref_object_copy__71;
    id v23 = __Block_byref_object_dispose__72;
    id v24 = 0LL;
    v18[0] = MEMORY[0x1895F87A8];
    v18[1] = 3221225472LL;
    _OWORD v18[2] = ___ZN14LaunchServices30FeatureFlagPredicateEvaluation9Predicate16parse_dictionaryEP12NSDictionaryPU15__autoreleasingP7NSError_block_invoke;
    v18[3] = &unk_189D77338;
    _OWORD v18[4] = &v19;
    void v18[5] = &v32;
    v18[6] = &v25;
    [v5 enumerateKeysAndObjectsUsingBlock:v18];
    id v6 = v20[5];
    if (v6)
    {
      if (a2) {
        *a2 = v6;
      }
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = 0;
    }

    else
    {
      id v8 = v33;
      uint64_t v9 = v33[8];
      __int128 v10 = *((_OWORD *)v33 + 3);
      v33[7] = 0LL;
      v8[8] = 0LL;
      v8[6] = 0LL;
      char v11 = v26;
      uint64_t v12 = v26[8];
      __int128 v13 = *((_OWORD *)v26 + 3);
      v26[7] = 0LL;
      v11[8] = 0LL;
      void v11[6] = 0LL;
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      *(_OWORD *)a3 = v10;
      *(void *)(a3 + 16) = v9;
      v16[0] = 0LL;
      v16[1] = 0LL;
      *(_OWORD *)(a3 + 24) = v13;
      *(void *)(a3 + 40) = v12;
      void v16[2] = 0LL;
      memset(v17, 0, sizeof(v17));
      *(_BYTE *)(a3 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = 1;
      id v39 = (void **)v17;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      id v39 = (void **)v16;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      id v39 = (void **)v14;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
      id v39 = (void **)v15;
      std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v39);
    }

    _Block_object_dispose(&v19, 8);

    _Block_object_dispose(&v25, 8);
    int v19 = (void **)v31;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v19);
    _Block_object_dispose(&v32, 8);
    BOOL v25 = (void **)v38;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v25);
  }

  else
  {
    if (a2)
    {
      uint64_t v40 = *MEMORY[0x189607490];
      v41[0] = @"Predicate was not a dictionary";
      [MEMORY[0x189603F68] dictionaryWithObjects:v41 forKeys:&v40 count:1];
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"parse_dictionary", 106LL, v7);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }

    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = 0;
  }
}

void sub_183F3372C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::DelayedInitable<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>( uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 48))
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void LaunchServices::DelayedInitable<LaunchServices::Predicate>::emplace(Args &&...) [T = LaunchServices::Predicat e, Args = <LaunchServices::Predicate>]");
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 handleFailureInFunction:v6 file:@"LSObjCPlusPlusHelpers.hpp" lineNumber:34 description:@"can't re-emplace a DelayedInitable"];
  }

  return std::optional<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,void>( a1,  a2);
}

void sub_183F33830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::FeatureFlagPredicateEvaluation::Predicate::evaluate(uint64_t **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *a1;
  id v5 = a1[1];
  while (v4 != v5)
  {
    else {
      uint64_t v6 = v4[3];
    }
    else {
      uint64_t v7 = (uint64_t *)*v4;
    }
    if (([v3 isFeature:v6 enabledInDomain:v7] & 1) == 0)
    {
      uint64_t v15 = 0LL;
      goto LABEL_26;
    }

    v4 += 6;
  }

  id v8 = a1[3];
  uint64_t v9 = a1[4];
  if (v8 == v9)
  {
    uint64_t v15 = 1LL;
  }

  else
  {
    __int128 v10 = v8 + 3;
    do
    {
      else {
        char v11 = (uint64_t *)*v10;
      }
      else {
        uint64_t v12 = *(v10 - 3);
      }
      int v13 = [v3 isFeature:v11 enabledInDomain:v12];
      if (v10 + 3 == v9) {
        int v14 = 1;
      }
      else {
        int v14 = v13;
      }
      v10 += 6;
    }

    while (v14 != 1);
    uint64_t v15 = v13 ^ 1u;
  }

void sub_183F33938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F339D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F33AA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

__n128 __Block_byref_object_copy__24(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0LL;
  a1[3].n128_u64[1] = 0LL;
  a1[4].n128_u64[0] = 0LL;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0LL;
  a2[3].n128_u64[1] = 0LL;
  a2[4].n128_u64[0] = 0LL;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v1);
}

uint64_t __Block_byref_object_copy__71(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__72(uint64_t a1)
{
}

void ___ZN14LaunchServices30FeatureFlagPredicateEvaluation9Predicate16parse_dictionaryEP12NSDictionaryPU15__autoreleasingP7NSError_block_invoke( void *a1, void *a2, void *a3, _BYTE *a4)
{
  v30[1] = *MEMORY[0x1895F89C0];
  uint64_t v7 = a2;
  id v8 = a3;
  if ((_NSIsNSString() & 1) == 0)
  {
    uint64_t v29 = *MEMORY[0x189607490];
    v30[0] = @"Predicate key not a feature flag";
    [MEMORY[0x189603F68] dictionaryWithObjects:v30 forKeys:&v29 count:1];
    char v11 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"parse_dictionary_block_invoke", 114LL, v11);
    uint64_t v13 = *(void *)(a1[4] + 8LL);
    int v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

LABEL_8:
    *a4 = 1;
    goto LABEL_13;
  }

  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    uint64_t v27 = *MEMORY[0x189607490];
    uint64_t v28 = @"bad requirement value";
    [MEMORY[0x189603F68] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"parse_dictionary_block_invoke", 119LL, v15);
    uint64_t v17 = *(void *)(a1[4] + 8LL);
    uint64_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    goto LABEL_8;
  }

  double v9 = LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::from_nsstring(v7, (uint64_t)v23);
  if (v24)
  {
    else {
      uint64_t v10 = a1[6];
    }
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::emplace_back<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>( (char **)(*(void *)(v10 + 8) + 48LL),  v23);
  }

  else
  {
    uint64_t v25 = *MEMORY[0x189607490];
    uint64_t v26 = @"Predicate key unparseable";
    objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1, v9);
    int v19 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v20 = _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"parse_dictionary_block_invoke", 125LL, v19);
    uint64_t v21 = *(void *)(a1[4] + 8LL);
    BOOL v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    *a4 = 1;
  }

  std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
LABEL_13:
}

void sub_183F33D8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::from_nsstring@<D0>( LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (const char *)-[LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier UTF8String]( this, "UTF8String");
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v6 = (char *)v4;
  size_t v7 = strlen(v4);
  id v8 = &v6[v7];
  double v9 = (char *)memchr(v6, 47, v7);
  uint64_t v10 = v9 ? v9 : &v6[v7];
  size_t v11 = v10 - v6;
  BOOL v12 = v10 == v6 || v11 == v7;
  if (v12 || v10 == v8 - 1)
  {
LABEL_13:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = 0;
  }

  else
  {
    LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::FeatureFlagSpecifier( &v14,  v6,  v11,  v10 + 1,  v8 - (v10 + 1));
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v15;
    double result = *(double *)&v16;
    *(_OWORD *)(a2 + 24) = v16;
    *(void *)(a2 + 40) = v17;
    *(_BYTE *)(a2 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = 1;
  }

  return result;
}

char *std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::emplace_back<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>( char **a1, __int128 *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555LL) {
      abort();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555LL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v30 = v4;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<LSBinding>>(v4, v14);
    }
    else {
      uint64_t v15 = 0LL;
    }
    __int128 v16 = &v15[48 * v11];
    __int128 v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 v16 = v17;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v18 = *(__int128 *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 3) = 0LL;
    uint64_t v20 = *a1;
    unint64_t v19 = (unint64_t)a1[1];
    if ((char *)v19 == *a1)
    {
      int64x2_t v24 = vdupq_n_s64(v19);
      uint64_t v21 = &v15[48 * v11];
    }

    else
    {
      uint64_t v21 = &v15[48 * v11];
      do
      {
        __int128 v22 = *(_OWORD *)(v19 - 48);
        *((void *)v21 - 4) = *(void *)(v19 - 32);
        *((_OWORD *)v21 - 3) = v22;
        *(void *)(v19 - 40) = 0LL;
        *(void *)(v19 - 32) = 0LL;
        *(void *)(v19 - 4_Block_object_dispose((const void *)(v28 - 160), 8) = 0LL;
        __int128 v23 = *(_OWORD *)(v19 - 24);
        *((void *)v21 - 1) = *(void *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *(void *)(v19 - 16) = 0LL;
        *(void *)(v19 - _Block_object_dispose((const void *)(v28 - 160), 8) = 0LL;
        *(void *)(v19 - 24) = 0LL;
        v19 -= 48LL;
      }

      while ((char *)v19 != v20);
      int64x2_t v24 = *(int64x2_t *)a1;
    }

    uint64_t v10 = v16 + 48;
    *a1 = v21;
    a1[1] = v16 + 48;
    int64x2_t v28 = v24;
    uint64_t v25 = a1[2];
    a1[2] = &v15[48 * v14];
    uint64_t v29 = v25;
    uint64_t v27 = v24.i64[0];
    std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::~__split_buffer((void **)&v27);
  }

  else
  {
    __int128 v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0LL;
    *((void *)a2 + 2) = 0LL;
    *(void *)a2 = 0LL;
    __int128 v9 = *(__int128 *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0LL;
    *((void *)a2 + 5) = 0LL;
    *((void *)a2 + 3) = 0LL;
    uint64_t v10 = (char *)(v7 + 48);
  }

  a1[1] = v10;
  return v10 - 48;
}

void std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100]( void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48LL;
        std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100]( (uint64_t)(v1 + 2),  v4);
      }

      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100]( uint64_t a1, uint64_t a2)
{
}

void *LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier::FeatureFlagSpecifier( void *__dst, void *__src, size_t __len, void *a4, size_t a5)
{
  if (__len > 0x7FFFFFFFFFFFFFF7LL) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v11 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v11 = __len | 7;
    }
    size_t v12 = v11 + 1;
    uint64_t v10 = operator new(v11 + 1);
    __dst[1] = __len;
    __dst[2] = v12 | 0x8000000000000000LL;
    *int __dst = v10;
    goto LABEL_8;
  }

  *((_BYTE *)__dst + 23) = __len;
  uint64_t v10 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v10, __src, __len);
  *((_BYTE *)v10 + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7LL) {
    abort();
  }
  if (a5 >= 0x17)
  {
    uint64_t v14 = (a5 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v14 = a5 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v13 = (char *)operator new(v14 + 1);
    _OWORD __dst[4] = a5;
    __dst[5] = v15 | 0x8000000000000000LL;
    __dst[3] = v13;
  }

  else
  {
    unint64_t v13 = (char *)(__dst + 3);
    *((_BYTE *)__dst + 47) = a5;
    if (!a5) {
      goto LABEL_17;
    }
  }

  memmove(v13, a4, a5);
LABEL_17:
  v13[a5] = 0;
  return __dst;
}

void sub_183F34240(_Unwind_Exception *exception_object)
{
}

void **std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::~__split_buffer( void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::clear[abi:nn180100]( void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::destroy[abi:nn180100]( v4,  i - 48);
  }

uint64_t std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier,false>::~__optional_destruct_base[abi:nn180100]( uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
  }

  return a1;
}

uint64_t std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,false>::~__optional_destruct_base[abi:nn180100]( uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    id v3 = (void **)(a1 + 24);
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v3);
    id v3 = (void **)a1;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v3);
  }

  return a1;
}

uint64_t std::optional<LaunchServices::FeatureFlagPredicateEvaluation::Predicate>::emplace[abi:nn180100]<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,void>( uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + _Block_object_dispose((const void *)(v28 - 160), 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose((const void *)(v28 - 160), 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = 1;
  return a1;
}

void std::__optional_destruct_base<LaunchServices::FeatureFlagPredicateEvaluation::Predicate,false>::reset[abi:nn180100]( uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = (void **)(a1 + 24);
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v2);
    uint64_t v2 = (void **)a1;
    std::vector<LaunchServices::FeatureFlagPredicateEvaluation::FeatureFlagSpecifier>::__destroy_vector::operator()[abi:nn180100](&v2);
    *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = 0;
  }

void sub_183F34444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F34AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F34C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_LSEmptyPropertyList *_LSLazyPropertyListGetSharedEmptyPropertyList()
{
  return +[_LSEmptyPropertyList sharedInstance](&OBJC_CLASS____LSEmptyPropertyList, "sharedInstance");
}

void sub_183F34DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F34E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F34F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F350D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F351B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F354B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F355D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3568C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F35720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F35860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F359C4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_183F35AB0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_183F35B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F35C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F35CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F35E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F35FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F360E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F36174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F36220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices13PropertyListsL27filterValueFromPropertyListEP11objc_objectP10objc_classS4__block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ((objc_opt_isKindOfClass() & 1) != 0) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_183F362AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t LaunchServices::LocalizedString::Create(void *a1, void *a2, uint64_t a3)
{
  v55[1] = *MEMORY[0x1895F89C0];
  id v39 = a1;
  id v5 = a2;
  id v6 = (id)a3;
  unsigned int v52 = 0;
  unint64_t v51 = 0LL;
  uint64_t v40 = v6;
  if (!v5 || (id v6 = (id)[v5 count], !v40))
  {
    if (!v6)
    {
      unsigned __int8 v7 = 0;
      goto LABEL_62;
    }
  }

  a3 = MEMORY[0x186E2A59C](v6);
  [v5 allKeys];
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue();
  __int128 v9 = v8;
  if (v8)
  {
    if ([v8 containsObject:@"LSDefaultLocalizedValue"])
    {
      id v38 = v9;
    }

    else
    {
      uint64_t v10 = [v9 arrayByAddingObject:@"LSDefaultLocalizedValue"];

      id v38 = (void *)v10;
    }
  }

  else
  {
    v55[0] = @"LSDefaultLocalizedValue";
    [MEMORY[0x189603F18] arrayWithObjects:v55 count:1];
    id v38 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_autoreleasePoolPop((void *)a3);
  size_t v11 = (void *)[objc_alloc(MEMORY[0x1896079B8]) initWithOptions:0];
  +[_LSStringLocalizer missingLocalizationPlaceholder]( &OBJC_CLASS____LSStringLocalizer,  "missingLocalizationPlaceholder");
  size_t v12 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v13 = 0LL;
  unsigned __int8 v7 = 0;
  if (!v38 || !v11) {
    goto LABEL_61;
  }
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  id obj = v38;
  uint64_t v14 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
  if (!v14) {
    goto LABEL_25;
  }
  uint64_t v15 = *(void *)v48;
  do
  {
    for (uint64_t i = 0LL; i != v14; ++i)
    {
      if (*(void *)v48 != v15) {
        objc_enumerationMutation(obj);
      }
      __int128 v17 = *(void **)(*((void *)&v47 + 1) + 8 * i);
      [v5 objectForKeyedSubscript:v17];
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      if ([v18 isEqual:v12])
      {
      }

      else if (v18)
      {
        goto LABEL_23;
      }

      else {
        id v18 = 0LL;
      }
LABEL_23:
      [v11 addPointer:v18];
    }

    uint64_t v14 = [obj countByEnumeratingWithState:&v47 objects:v54 count:16];
  }

  while (v14);
LABEL_25:

  id v19 = objc_alloc(MEMORY[0x189603FE0]);
  uint64_t v20 = (void *)objc_msgSend(v19, "initWithCapacity:", objc_msgSend(v11, "count"));
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  id v21 = v11;
  uint64_t v22 = [v21 countByEnumeratingWithState:&v43 objects:v53 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v44;
    do
    {
      for (uint64_t j = 0LL; j != v22; ++j)
      {
        if (*(void *)v44 != v23) {
          objc_enumerationMutation(v21);
        }
        uint64_t v25 = *(void **)(*((void *)&v43 + 1) + 8 * j);
        id v26 = v25;
        if (!v25)
        {
          [MEMORY[0x189603FE8] null];
          id v19 = (id)objc_claimAutoreleasedReturnValue();
          id v26 = v19;
        }

        [v20 addObject:v26];
        if (!v25) {
      }
        }

      uint64_t v22 = [v21 countByEnumeratingWithState:&v43 objects:v53 count:16];
    }

    while (v22);
  }

  __int16 v42 = 0;
  if ([v20 count] == 1 && objc_msgSend(obj, "count") && objc_msgSend(v21, "count"))
  {
    [obj objectAtIndexedSubscript:0];
    uint64_t v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
    int StringForCFString = _LSDatabaseCreateStringForCFString(v39, v27, 0);
    LODWORD(v51) = StringForCFString;

    int v29 = _LSDatabaseCreateStringForCFString(v39, (const __CFString *)[v21 pointerAtIndex:0], 0);
    HIDWORD(v51) = v29;
    LOBYTE(v52) = v52 | 2;
  }

  else
  {
    int StringForCFString = _LSDatabaseCreateStringArray(v39, obj, 0, (_BYTE *)&v42 + 1);
    LODWORD(v51) = StringForCFString;
    int v29 = _LSDatabaseCreateStringArrayWithNullValues(v39, v21, 0, &v42);
    HIDWORD(v51) = v29;
  }

  if ([obj count] == 1)
  {
    [obj objectAtIndexedSubscript:0];
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue();
    char v31 = [v30 isEqual:@"LSDefaultLocalizedValue"];
    LOBYTE(v52) = v52 & 0xFE | v31;
  }

  else
  {
    LOBYTE(v52) = v52 & 0xFE;
  }

  if (StringForCFString) {
    BOOL v32 = v29 == 0;
  }
  else {
    BOOL v32 = 1;
  }
  int v34 = !v32 && HIBYTE(v42) == 0;
  BOOL v35 = (_BYTE)v42 == 0;
  unint64_t v36 = v51;
  if ((v34 & v35) != 0) {
    unsigned __int8 v7 = v51;
  }
  else {
    unsigned __int8 v7 = 0;
  }
  if ((v34 & v35) != 0) {
    uint64_t v13 = v52 | 0x100000000LL;
  }
  else {
    uint64_t v13 = 0LL;
  }

  a3 = v36 >> 8;
LABEL_61:

  if ((v13 & 0x100000000LL) == 0) {
LABEL_62:
  }
    LaunchServices::LocalizedString::dispose((LaunchServices::LocalizedString *)&v51, v39);

  return v7 | (unint64_t)(a3 << 8);
}

void sub_183F367E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::dispose(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    _CSStringRelease();
    _CSStringRelease();
  }

  else
  {
    _LSDatabaseDisposeStringArray(v3, *(_DWORD *)this);
    _LSDatabaseDisposeStringArray(v4, *((_DWORD *)this + 1));
  }
}

void sub_183F36928( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t LaunchServices::LocalizedString::Add(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    [MEMORY[0x1896077D8] currentHandler];
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "static _LSLocalizedStringID LaunchServices::LocalizedString::Add(_LSDatabase *__strong _Nonnull, NSDictionary<NSSt ring *,NSString *> *__strong _Nonnull, NSString *__strong _Nullable)");
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v12 handleFailureInFunction:v13, @"LSLocalizedString.mm", 124, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }

  unint64_t v8 = LaunchServices::LocalizedString::Create(v5, v6, (uint64_t)v7);
  if ((v9 & 0xFF00000000LL) != 0)
  {
    unint64_t v14 = v8;
    int v15 = v9;
    uint64_t v10 = CSStoreAllocUnitWithData();
    if (!(_DWORD)v10) {
      LaunchServices::LocalizedString::dispose((LaunchServices::LocalizedString *)&v14, v5);
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_183F36A74(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void LaunchServices::LocalizedString::Remove(LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  id v3 = this;
  id v7 = (_LSDatabase *)v3;
  if (!v3)
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "static void LaunchServices::LocalizedString::Remove(_LSDatabase *__strong _Nonnull, _LSLocalizedStringID)");
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 handleFailureInFunction:v6, @"LSLocalizedString.mm", 143, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

    id v3 = 0LL;
  }

  uint64_t v4 = (LaunchServices::LocalizedString *)LaunchServices::LocalizedString::Get(v3, a2);
  if (v4)
  {
    LaunchServices::LocalizedString::dispose(v4, v7);
    CSStoreFreeUnit();
  }
}

void sub_183F36B9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

os_log_s *LaunchServices::LocalizedString::localizeUnsafely(uint64_t a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  id v5 = a2;
  prefArray = a3;
  int v29 = v5;
  if (!v5)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "NSString *LaunchServices::LocalizedString::localizeUnsafely(_LSDatabase *__strong _Nonnull, NSArray<NSString *> *_ _strong _Nullable) const");
    int64x2_t v24 = (void *)objc_claimAutoreleasedReturnValue();
    [v23 handleFailureInFunction:v24, @"LSLocalizedString.mm", 163, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }

  CFMachPortContext context = (void *)MEMORY[0x186E2A59C]();
  if ((*(_BYTE *)(a1 + 8) & 2) != 0)
  {
    uint64_t v19 = _CSStringCopyCFString();
    if ((*(_BYTE *)(a1 + 8) & 1) != 0) {
      uint64_t v20 = @"✴️";
    }
    else {
      uint64_t v20 = @"🔂";
    }
    uint64_t v13 = (os_log_s *)v19;
  }

  else
  {
    if (!*(_DWORD *)a1 || (uint64_t v28 = *(unsigned int *)(a1 + 4), !(_DWORD)v28))
    {
      uint64_t v13 = 0LL;
      goto LABEL_47;
    }

    if (!prefArray)
    {
      [(id)__LSDefaultsGetSharedInstance() preferredLocalizations];
      prefArray = (const __CFArray *)objc_claimAutoreleasedReturnValue();
    }

    _LSDatabaseGetStringArray(v5);
    id v6 = (const __CFArray *)objc_claimAutoreleasedReturnValue();
    CFArrayRef v7 = 0LL;
    if (prefArray && v6) {
      CFArrayRef v7 = CFBundleCopyLocalizationsForPreferences(v6, prefArray);
    }
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    unint64_t v8 = v7;
    uint64_t v27 = v8;
    uint64_t v9 = -[__CFArray countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v32,  v44,  16LL);
    if (v9)
    {
      uint64_t v10 = *(void *)v33;
      do
      {
        uint64_t v11 = 0LL;
        do
        {
          if (*(void *)v33 != v10) {
            objc_enumerationMutation(v8);
          }
          size_t v12 = *(const __CFArray **)(*((void *)&v32 + 1) + 8 * v11);
          if (-[__CFArray isEqual:](v12, "isEqual:", @"LSDefaultLocalizedValue"))
          {
            _LSDefaultLog();
            uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
              LaunchServices::LocalizedString::localizeUnsafely(&v30, v31, v13);
            }
          }

          else
          {
            unint64_t v14 = -[__CFArray indexOfObject:](v6, "indexOfObject:", v12);
            if (v14 == 0x7FFFFFFFFFFFFFFFLL || v14 >= -[__CFArray count](v6, "count"))
            {
              _LSDefaultLog();
              uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 138543618;
                unint64_t v37 = (unint64_t)v12;
                __int16 v38 = 2114;
                id v39 = v6;
                _os_log_debug_impl( &dword_183E58000,  v13,  OS_LOG_TYPE_DEBUG,  "Unexpected: localization %{public}@ was not found in bundle localizations list %{public}@",  buf,  0x16u);
              }
            }

            else
            {
              int ValueAtIndex = _CSArrayGetValueAtIndex();
              __int128 v16 = (os_log_s *)_CSStringCopyCFString();
              uint64_t v13 = v16;
              unint64_t v8 = v27;
              if (v16)
              {
                if (-[os_log_s length](v16, "length"))
                {

                  goto LABEL_41;
                }
              }

              else
              {
                if (!ValueAtIndex) {
                  goto LABEL_33;
                }
                _LSDefaultLog();
                __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)__int128 buf = 134218754;
                  unint64_t v37 = v14;
                  __int16 v38 = 2114;
                  id v39 = v12;
                  __int16 v40 = 2048;
                  uint64_t v41 = v28;
                  __int16 v42 = 2048;
                  uint64_t v43 = v28;
                  _os_log_debug_impl( &dword_183E58000,  v17,  OS_LOG_TYPE_DEBUG,  "Unexpected: could not get value #%lu (key %{public}@) from localized name array %llu(%llx)",  buf,  0x2Au);
                }
              }
            }
          }

          ++v11;
        }

        while (v9 != v11);
        uint64_t v18 = -[__CFArray countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v32,  v44,  16LL);
        uint64_t v9 = v18;
      }

      while (v18);
    }

void sub_183F37088( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

id LaunchServices::LocalizedString::getDefaultValueUnsafely( LaunchServices::LocalizedString *this, _LSDatabase *a2)
{
  id v3 = a2;
  if (!v3)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    [NSString stringWithUTF8String:"NSString *LaunchServices::LocalizedString::getDefaultValueUnsafely(_LSDatabase *__strong _Nonnull) const"];
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 handleFailureInFunction:v12, @"LSLocalizedString.mm", 265, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }

  uint64_t v4 = (void *)MEMORY[0x186E2A59C]();
  if ((*((_BYTE *)this + 8) & 2) != 0)
  {
    uint64_t v7 = _CSStringCopyCFString();
    if ((*((_BYTE *)this + 8) & 1) != 0) {
      id v6 = @"✴️";
    }
    else {
      id v6 = @"🔂";
    }
    id v5 = (void *)v7;
  }

  else
  {
    if (!*(_DWORD *)this
      || !*((_DWORD *)this + 1)
      || !_LSDatabaseGetStringForCFString(v3, @"LSDefaultLocalizedValue", 0))
    {
      id v5 = 0LL;
      goto LABEL_20;
    }

    uint64_t v13 = 0LL;
    unint64_t v14 = &v13;
    uint64_t v15 = 0x3812000000LL;
    __int128 v16 = __Block_byref_object_copy__25;
    __int128 v17 = __Block_byref_object_dispose__25;
    uint64_t v18 = 0LL;
    char v19 = 0;
    char v20 = 0;
    _CSArrayEnumerateAllValues();
    if (*((_BYTE *)v14 + 52))
    {
      _LSDatabaseGetNSStringFromArray(v3);
      id v5 = (void *)objc_claimAutoreleasedReturnValue();
      id v6 = @"🔴";
    }

    else
    {
      id v6 = 0LL;
      id v5 = 0LL;
    }

    _Block_object_dispose(&v13, 8);
  }

  if (v5) {
    BOOL v8 = v6 == 0LL;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8 && [(id)__LSDefaultsGetSharedInstance() markLocalizationsStoredInDatabase])
  {
    uint64_t v9 = [v5 stringByAppendingString:v6];

    id v5 = (void *)v9;
  }

void sub_183F3739C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(result + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(result + 4_Block_object_dispose((const void *)(v28 - 160), 8) = v2;
  return result;
}

uint64_t ___ZNK14LaunchServices15LocalizedString23getDefaultValueUnsafelyEP11_LSDatabase_block_invoke( uint64_t result, int a2, int a3, _BYTE *a4)
{
  if (*(_DWORD *)(result + 40) == a3)
  {
    uint64_t v4 = *(void *)(*(void *)(result + 32) + 8LL);
    *(_DWORD *)(v4 + 4_Block_object_dispose((const void *)(v28 - 160), 8) = a2;
    *(_BYTE *)(v4 + 52) = 1;
    *a4 = 1;
  }

  return result;
}

void LaunchServices::LocalizedString::GetVisualizationFunctions( id (**a1)(LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3)@<X8>)
{
  *a1 = LaunchServices::Localization::getSummaryOfLocalizedString;
  a1[1] = (id (*)(LaunchServices::LocalizedString **, LSContext *, _LSDatabase *))LaunchServices::Localization::displayLocalizedString;
  a1[2] = 0LL;
}

id LaunchServices::Localization::getSummaryOfLocalizedString( LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3)
{
  uint64_t v4 = (void *)LaunchServices::LocalizedString::Get(*this, a3);
  if (v4)
  {
    LaunchServices::LocalizedString::localizeUnsafely((uint64_t)v4, *this, 0LL);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v4;
}

BOOL LaunchServices::Localization::displayLocalizedString( LaunchServices::LocalizedString **this, LSContext *a2, _LSDatabase *a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  BOOL v8 = (LSContext *)LaunchServices::LocalizedString::Get(*this, a3);
  if (v8)
  {
    *(_WORD *)uint64_t v13 = 0;
    LaunchServices::Localization::getLocalizedValuesForDisplay( (_LSDatabase **)this,  v8,  (const LaunchServices::LocalizedString *)&v13[1],  v13,  v7);
    uint64_t v9 = (NSArray *)objc_claimAutoreleasedReturnValue();
    [MEMORY[0x189607968] numberWithBool:v13[1]];
    uint64_t v10 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(a4, @"default only", v10);

    [MEMORY[0x189607968] numberWithBool:v13[0]];
    uint64_t v11 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(a4, @"all values equal", v11);

    CSStore2::AttributedStringWriter::array(a4, v9);
  }

  return v8 != 0LL;
}

void sub_183F37560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::CanonicalString::Create(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v7 = a2;
  id v8 = a3;
  *a4 = 0;
  a4[16] = 0;
  if (!v15)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "static std::optional<CanonicalString> LaunchServices::CanonicalString::Create(_LSDatabase *__strong _Nonnull, NSSt ring *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 handleFailureInFunction:v12, @"LSLocalizedString.mm", 429, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

    if (v7) {
      goto LABEL_3;
    }
LABEL_11:
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "static std::optional<CanonicalString> LaunchServices::CanonicalString::Create(_LSDatabase *__strong _Nonnull, NSSt ring *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 handleFailureInFunction:v14, @"LSLocalizedString.mm", 430, @"Invalid parameter not satisfying: %@", @"canonical != nil" file lineNumber description];

    goto LABEL_3;
  }

  if (!v7) {
    goto LABEL_11;
  }
LABEL_3:
  __int128 v16 = 0uLL;
  if (v8 {
    && [v8 count]
  }
    && (LODWORD(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__,  v13,  v14,  v15, v16) = _LSDatabaseCreateStringForCFString(v15, v7, 0), (_DWORD)v16)
    && (unint64_t v9 = LaunchServices::LocalizedString::Create(v15, v8, (uint64_t)v7), (v10 & 0xFF00000000LL) != 0))
  {
    *(void *)((char *)&v16 + 4) = v9;
    HIDWORD(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__,  v13,  v14,  v15, v16) = v10;
    *(_OWORD *)a4 = v16;
    a4[16] = 1;
  }

  else
  {
    LaunchServices::CanonicalString::dispose((LaunchServices::CanonicalString *)&v16, v15);
  }
}

void sub_183F37738( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void LaunchServices::CanonicalString::dispose(LaunchServices::CanonicalString *this, _LSDatabase *a2)
{
  id v3 = a2;
  _CSStringRelease();
  LaunchServices::LocalizedString::dispose((LaunchServices::CanonicalString *)((char *)this + 4), v3);
}

void sub_183F377D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t LaunchServices::CanonicalString::Add(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_9:
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "static _LSCanonicalStringID LaunchServices::CanonicalString::Add(_LSDatabase *__strong _Nonnull, NSString *__stron g _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
    size_t v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 handleFailureInFunction:v12, @"LSLocalizedString.mm", 464, @"Invalid parameter not satisfying: %@", @"canonical != nil" file lineNumber description];

    if (v7) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v8 = 0LL;
    goto LABEL_11;
  }

  [MEMORY[0x1896077D8] currentHandler];
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend( NSString,  "stringWithUTF8String:",  "static _LSCanonicalStringID LaunchServices::CanonicalString::Add(_LSDatabase *__strong _Nonnull, NSString *__strong _Nonnull, NSDictionary<NSString *,NSString *> *__strong _Nonnull)");
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  [v9 handleFailureInFunction:v10, @"LSLocalizedString.mm", 463, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];

  if (!v6) {
    goto LABEL_9;
  }
LABEL_3:
  if (!v7) {
    goto LABEL_10;
  }
LABEL_4:
  if (![v7 count]) {
    goto LABEL_10;
  }
  LaunchServices::CanonicalString::Create(v5, v6, v7, &v15);
  if (!v16) {
    goto LABEL_10;
  }
  __int128 v14 = v15;
  uint64_t v8 = CSStoreAllocUnitWithData();
  if (!(_DWORD)v8) {
    LaunchServices::CanonicalString::dispose((LaunchServices::CanonicalString *)&v14, v5);
  }
LABEL_11:

  return v8;
}

void sub_183F3799C(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Get(LaunchServices::CanonicalString *this, _LSDatabase *a2)
{
  int v2 = this;
  if (!v2)
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "static const CanonicalString *LaunchServices::CanonicalString::Get(_LSDatabase *__strong _Nonnull, _LSCanonicalStringID)");
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    [v5 handleFailureInFunction:v6, @"LSLocalizedString.mm", 495, @"Invalid parameter not satisfying: %@", @"db != nil" file lineNumber description];
  }

  uint64_t Unit = CSStoreGetUnit();

  return Unit;
}

void sub_183F37ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t LaunchServices::CanonicalString::Find( LaunchServices::CanonicalString *this, _LSDatabase *a2, NSString *a3)
{
  uint64_t v4 = this;
  id v5 = a2;
  uint64_t v8 = 0LL;
  unint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  uint64_t v11 = 0LL;
  uint64_t v6 = v9[3];
  _Block_object_dispose(&v8, 8);

  return v6;
}

void sub_183F37BD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices15CanonicalString4FindEP11_LSDatabaseP8NSString_block_invoke( uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, _BYTE *a5)
{
  if (*a3 == *(_DWORD *)(result + 40))
  {
    *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a3;
    *a5 = 1;
  }

  return result;
}

uint64_t LaunchServices::CanonicalString::getLocalizedString(LaunchServices::CanonicalString *this)
{
  return (uint64_t)this + 4;
}

void LaunchServices::CanonicalString::GetVisualizationFunctions( id (**a1)(LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3)@<X8>)
{
  *a1 = LaunchServices::Localization::getSummaryOfCanonicalString;
  a1[1] = (id (*)(LaunchServices::CanonicalString **, LSContext *, _LSDatabase *))LaunchServices::Localization::displayCanonicalString;
  a1[2] = 0LL;
}

id LaunchServices::Localization::getSummaryOfCanonicalString( LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3)
{
  id v3 = (void *)LaunchServices::CanonicalString::Get(*this, a3);
  if (v3) {
    id v3 = (void *)_CSStringCopyCFString();
  }
  return v3;
}

BOOL LaunchServices::Localization::displayCanonicalString( LaunchServices::CanonicalString **this, LSContext *a2, _LSDatabase *a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v7 = LaunchServices::CanonicalString::Get(*this, a3);
  if (v7)
  {
    uint64_t v8 = (NSString *)_CSStringCopyCFString();
    CSStore2::AttributedStringWriter::string(a4, @"canonical", v8);
    LaunchServices::Localization::getLocalizedValuesForDisplay( (_LSDatabase **)this,  (LSContext *)(v7 + 4),  0LL,  0LL,  v9);
    uint64_t v10 = (NSArray *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::array(a4, @"localized", v10);
  }

  return v7 != 0;
}

void sub_183F37D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id LaunchServices::Localization::getLocalizedValuesForDisplay( _LSDatabase **this, LSContext *a2, const LaunchServices::LocalizedString *a3, BOOL *a4, BOOL *a5)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  id v35 = objc_alloc_init(MEMORY[0x189603FA8]);
  uint64_t v9 = MEMORY[0x186E2A59C]();
  +[_LSStringLocalizer missingLocalizationPlaceholder]( &OBJC_CLASS____LSStringLocalizer,  "missingLocalizationPlaceholder");
  CFMachPortContext context = (void *)v9;
  __int128 v32 = this;
  unint64_t v36 = (NSString *)objc_claimAutoreleasedReturnValue();
  LaunchServices::LocalizedString::getAllUnsafeLocalizations( (LaunchServices::LocalizedString *)a2,  *this,  v36,  (BOOL *)a3,  a4);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v11 = v10;
  if (!v10) {
    goto LABEL_34;
  }
  [v10 allValues];
  id obj = (id)objc_claimAutoreleasedReturnValue();
  size_t v12 = (void *)[objc_alloc(MEMORY[0x189607838]) initWithArray:obj];
  uint64_t v13 = v12;
  if (v12)
  {
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    id v14 = v12;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v43 objects:&v47 count:16];
    if (v15)
    {
      uint64_t v16 = 0LL;
      __int128 v17 = 0LL;
      uint64_t v18 = *(void *)v44;
      do
      {
        for (uint64_t i = 0LL; i != v15; ++i)
        {
          if (*(void *)v44 != v18) {
            objc_enumerationMutation(v14);
          }
          char v20 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          if ([v14 countForObject:v20] == 1)
          {
            id v21 = v20;

            ++v16;
            __int128 v17 = v21;
          }
        }

        uint64_t v15 = [v14 countByEnumeratingWithState:&v43 objects:&v47 count:16];
      }

      while (v15);

      if (v16 == 1 && [v14 count] != 1) {
        goto LABEL_18;
      }
    }

    else
    {

      __int128 v17 = 0LL;
    }
  }

  __int128 v17 = 0LL;
LABEL_18:

  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  [v11 allKeys];
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
  [v22 sortedArrayUsingSelector:sel_caseInsensitiveCompare_];
  id obja = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v23 = [obja countByEnumeratingWithState:&v39 objects:v54 count:16];
  if (v23)
  {
    uint64_t v24 = *(void *)v40;
    do
    {
      for (uint64_t j = 0LL; j != v23; ++j)
      {
        if (*(void *)v40 != v24) {
          objc_enumerationMutation(obja);
        }
        id v26 = *(void **)(*((void *)&v39 + 1) + 8 * j);
        [v11 objectForKeyedSubscript:v26];
        uint64_t v27 = (NSString *)objc_claimAutoreleasedReturnValue();
        uint64_t v28 = v27;
        if (v27)
        {
          if (-[NSString isEqual:](v27, "isEqual:", v17))
          {
            int v29 = (NSMutableAttributedString *)objc_alloc_init(MEMORY[0x189607928]);
            uint64_t v47 = 0LL;
            __int128 v48 = &v47;
            uint64_t v49 = 0x13812000000LL;
            __int128 v50 = __Block_byref_object_copy__34;
            unint64_t v51 = __Block_byref_object_dispose__35;
            uint64_t v52 = 256LL;
            LaunchServices::DumpWriter::DumpWriter((LaunchServices::DumpWriter *)v53, *v32, v29);
            CSStore2::AttributedStringWriter::setInsertsNewlines((CSStore2::AttributedStringWriter *)(v48 + 6));
            unint64_t v37 = v28;
            __int16 v38 = v36;
            CSStore2::AttributedStringWriter::withTextAndBackgroundColor();
            [v35 addObject:v29];

            _Block_object_dispose(&v47, 8);
            LaunchServices::DumpWriter::~DumpWriter(v53);
          }

          else
          {
            int v29 = (NSMutableAttributedString *)objc_msgSend( objc_alloc(MEMORY[0x189607940]),  "initWithCapacity:",  objc_msgSend(v26, "length") + -[NSString length](v28, "length") + 7);
            -[NSMutableAttributedString appendString:](v29, "appendString:", @"");
            -[NSMutableAttributedString appendString:](v29, "appendString:", v26);
            if (v28 == v36)
            {
              -[NSMutableAttributedString appendString:](v29, "appendString:", @" = ?");
            }

            else
            {
              -[NSMutableAttributedString appendString:](v29, "appendString:", @" = ");
              -[NSMutableAttributedString appendString:](v29, "appendString:", v28);
              -[NSMutableAttributedString appendString:](v29, "appendString:", @"");
            }

            [v35 addObject:v29];
          }
        }
      }

      uint64_t v23 = [obja countByEnumeratingWithState:&v39 objects:v54 count:16];
    }

    while (v23);
  }

LABEL_34:
  objc_autoreleasePoolPop(context);
  return v35;
}

void sub_183F38214( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = off_189D76AA8;
  id result = *(id *)(a2 + 304);
  *(void *)(a1 + 304) = result;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

{
}

uint64_t ___ZN14LaunchServices12LocalizationL28getLocalizedValuesForDisplayEP9LSContextPKNS_15LocalizedStringEPbS6__block_invoke( void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = (CSStore2::AttributedStringWriter *)(*(void *)(a1[7] + 8LL) + 48LL);
  if (v1 == v2) {
    return CSStore2::AttributedStringWriter::format(v4, 0LL, @"%@ = ?", v3);
  }
  else {
    return CSStore2::AttributedStringWriter::format(v4, 0LL, @"%@ = %@", v3, v1);
  }
}

uint64_t timeWorkBlock(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = mach_absolute_time();
  v1[2](v1);

  return mach_absolute_time() - v2;
}

void initAnalyticsSendEvent(void *a1, void *a2)
{
  id v6 = a1;
  id v3 = a2;
  uint64_t v4 = (void *)CoreAnalyticsLibrary_frameworkLibrary;
  if (!CoreAnalyticsLibrary_frameworkLibrary)
  {
    uint64_t v4 = dlopen("/System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics", 2);
    CoreAnalyticsLibrary_frameworkLibrary = (uint64_t)v4;
  }

  id v5 = (uint64_t (*)())dlsym(v4, "AnalyticsSendEvent");
  softLinkAnalyticsSendEvent = v5;
  if (v5) {
    ((void (*)(id, id))v5)(v6, v3);
  }
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void sub_183F38EA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_183F38F24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F3905C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3912C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F391C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke()
{
  uint64_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke_cold_1(v0);
  }

  uint64_t v1 = _LSGetMachTimebase();
  double result = 1.0e10 / ((double)v1 / (double)HIDWORD(v1));
  _LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcesses(void)::maxCacheTimeAbsolute = (unint64_t)result;
  return result;
}

void ___ZL78_LSGetDefaultPreferredLocalizationsWithFallbackForImproperlyLocalizedProcessesv_block_invoke_43( uint64_t a1, void *a2, void *a3)
{
}

id _LSExtensionsLog()
{
  if (_LSExtensionsLog_onceToken != -1) {
    dispatch_once(&_LSExtensionsLog_onceToken, &__block_literal_global_5);
  }
  return (id)_LSExtensionsLog_log;
}

id _LSInstallLog()
{
  if (_LSInstallLog_onceToken != -1) {
    dispatch_once(&_LSInstallLog_onceToken, &__block_literal_global_7);
  }
  return (id)_LSInstallLog_log;
}

id _LSProgressLog()
{
  if (_LSProgressLog_onceToken != -1) {
    dispatch_once(&_LSProgressLog_onceToken, &__block_literal_global_9_0);
  }
  return (id)_LSProgressLog_log;
}

id _LSPrivacyLog()
{
  if (_LSPrivacyLog_onceToken != -1) {
    dispatch_once(&_LSPrivacyLog_onceToken, &__block_literal_global_13_0);
  }
  return (id)_LSPrivacyLog_log;
}

id _LSDataSeparationLog()
{
  if (_LSDataSeparationLog_onceToken != -1) {
    dispatch_once(&_LSDataSeparationLog_onceToken, &__block_literal_global_15_0);
  }
  return (id)_LSDataSeparationLog_log;
}

id _LSDatabaseGetLog()
{
  if (_LSDatabaseGetLog_once != -1) {
    dispatch_once(&_LSDatabaseGetLog_once, &__block_literal_global_17_0);
  }
  return (id)_LSDatabaseGetLog_result;
}

id _LSOpenLog()
{
  if (_LSOpenLog_once != -1) {
    dispatch_once(&_LSOpenLog_once, &__block_literal_global_19);
  }
  return (id)_LSOpenLog_result;
}

id _LSRegistrationLog()
{
  if (_LSRegistrationLog_onceToken != -1) {
    dispatch_once(&_LSRegistrationLog_onceToken, &__block_literal_global_23);
  }
  return (id)_LSRegistrationLog_log;
}

id _LSPluginFaultLog()
{
  if (_LSPluginFaultLog_once != -1) {
    dispatch_once(&_LSPluginFaultLog_once, &__block_literal_global_33_0);
  }
  return (id)_LSPluginFaultLog_result;
}

id loggableURL(void *a1)
{
  id v1 = a1;
  int v2 = [v1 isFileURL];
  id v3 = (void *)NSString;
  if (v2)
  {
    id v4 = v1;
    uint64_t v5 = [v4 fileSystemRepresentation];

    [v3 stringWithUTF8String:v5];
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    [v1 scheme];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();

    [v3 stringWithFormat:@"%@:...", v7];
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

id _LSGetInboxURLForBundleIdentifier(void *a1)
{
  id v1 = a1;
  +[LSApplicationProxy applicationProxyForIdentifier:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForIdentifier:",  v1);
  int v2 = (void *)objc_claimAutoreleasedReturnValue();
  [v2 containerURL];
  id v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    [v3 path];
    id v4 = (void *)objc_claimAutoreleasedReturnValue();
    int v5 = [v4 isEqual:@"/var/mobile"];

    if (v5)
    {
      [NSString stringWithFormat:@"Library/Application Support/Containers/%@/Documents/Inbox/", v1];
      id v6 = (void *)objc_claimAutoreleasedReturnValue();
      [v3 URLByAppendingPathComponent:v6 isDirectory:1];
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      [v3 URLByAppendingPathComponent:@"Documents/Inbox/" isDirectory:1];
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

void sub_183F39BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSCopyOrMoveFileResource(void *a1, void *a2, void *a3, void *a4, char a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a6;
  _LSAssertRunningInServer((uint64_t)"void _LSCopyOrMoveFileResource(NSURL *__strong, NSFileHandle *__strong, NSString *__"
                                    "strong, NSURL *__strong, BOOL, void (^__strong)(NSURL *__strong, NSError *__strong))");
  if (!v15)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSCopyOrMoveFileResource(NSURL *__strong, NSFileHandle *__strong, NSString *__strong, NSURL *__strong, BOOL, void (^__strong)(NSURL *__strong, NSError *__strong))");
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue();
    [v22 handleFailureInFunction:v23, @"LSMobileDataTransitSupport.mm", 371, @"Invalid parameter not satisfying: %@", @"completionHandler != nil" file lineNumber description];
  }

  MEMORY[0x186E2AFD4]();
  uint64_t v16 = (void *)MEMORY[0x189607A40];
  v24[0] = MEMORY[0x1895F87A8];
  v24[1] = 3221225472LL;
  void v24[2] = ___LSCopyOrMoveFileResource_block_invoke;
  void v24[3] = &unk_189D776E0;
  id v17 = v11;
  id v25 = v17;
  char v30 = a5;
  id v18 = v12;
  id v26 = v18;
  id v19 = v14;
  id v27 = v19;
  id v20 = v13;
  id v28 = v20;
  id v21 = v15;
  id v29 = v21;
  [v16 detachNewThreadWithBlock:v24];
}

void sub_183F39DA8(_Unwind_Exception *a1)
{
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  uint64_t v10 = v1;

  _Unwind_Resume(a1);
}

LABEL_68:
    id v6 = (id *)operator new(0x10uLL);
    uint64_t v22 = v22;
    __int128 v44 = 0LL;
    __int128 v42 = 0LL;
    void *v6 = off_189D77740;
    v6[1] = v22;
    goto LABEL_34;
  }

  uint64_t v23 = v22;
  uint64_t v24 = v21;
  *(void *)__int128 buf = 0LL;
  int v71 = v24;
  id v25 = getFileProtectionValueForFileHandle(v24, buf);
  id v26 = *(id *)buf;
  id v27 = v26;
  if (!v25)
  {
    id v29 = v26;
LABEL_78:
    char v62 = v29;
    id v6 = 0LL;
    id v61 = v62;
    uint64_t v60 = v62;
    goto LABEL_79;
  }

  id v69 = (void *)v25;
  +[LSOpenStagingDirectoryManager sharedServerInstance]( &OBJC_CLASS___LSOpenStagingDirectoryManager,  "sharedServerInstance");
  id v28 = (void *)objc_claimAutoreleasedReturnValue();
  v86[0] = v27;
  [v28 stagingDirectoryForCloningFileHandle:v24 error:v86];
  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue();
  id v29 = v86[0];

  if (!v70)
  {

    goto LABEL_78;
  }

  [MEMORY[0x189607AB8] UUID];
  char v30 = (void *)objc_claimAutoreleasedReturnValue();
  [v30 UUIDString];
  char v31 = (void *)objc_claimAutoreleasedReturnValue();
  [v70 URLByAppendingPathComponent:v31];
  uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue();

  [MEMORY[0x1896078A8] defaultManager];
  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue();
  id v84 = *MEMORY[0x189603BD0];
  uint64_t v85 = v69;
  uint64_t v65 = v32;
  [MEMORY[0x189603F68] dictionaryWithObjects:&v85 forKeys:&v84 count:1];
  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v80 = v29;
  LODWORD(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_THE_DATABASE_WAS_CREATED_FRESH__,  v29,  v30,  v31, v32) = [v32 createDirectoryAtURL:v68 withIntermediateDirectories:0 attributes:v33 error:&v80];
  int v67 = v80;

  if ((_DWORD)v32)
  {
    [v23 lastPathComponent];
    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue();
    [v68 URLByAppendingPathComponent:v34];
    id v35 = (void *)objc_claimAutoreleasedReturnValue();

    uint64_t v64 = v68;
    unint64_t v36 = v35;
    id v63 = v71;
    LODWORD(v34) = [v63 fileDescriptor];
    uint64_t v66 = v36;
    if (fclonefileat((int)v34, -2, (const char *)[v66 fileSystemRepresentation], 1u))
    {
      unint64_t v37 = __error();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], *v37, (uint64_t)"stageResourceByCloningHandle", 233LL, 0LL);
      __int16 v38 = (id)objc_claimAutoreleasedReturnValue();
      id v6 = 0LL;
    }

    else
    {
      id v6 = (id *)operator new(0x18uLL);
      uint64_t v57 = v64;
      uint64_t v58 = v66;
      void *v6 = off_189D77710;
      v6[1] = v58;
      _DWORD v6[2] = v57;
      __int16 v38 = v67;
    }

    char v59 = v38;
    int v67 = v59;
  }

  else
  {
    id v6 = 0LL;
  }

  if (!v6)
  {
    id v29 = v67;
    goto LABEL_78;
  }

  uint64_t v60 = 0LL;
  id v61 = v67;
LABEL_79:

  __int128 v42 = v60;
LABEL_80:
  if (!v6)
  {
    id v19 = v22;
    goto LABEL_33;
  }

  __int128 v44 = 0LL;
LABEL_34:

  __int128 v45 = v44;
  __int128 v46 = v45;
  if (v6)
  {
    uint64_t v72 = v45;
    (*((void (**)(statfs *__return_ptr, id *, id *))*v6 + 2))(&v83, v6, &v72);
    uint64_t v47 = v72;

    __int128 v46 = v47;
  }

  else
  {
    *(void *)&v83.f_bCFIndex size = 0LL;
    LOBYTE(v83.f_blocks) = 1;
  }

  std::__optional_storage_base<NSString * {__strong},false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<NSString * {__strong},false>>( (uint64_t)&v73,  (uint64_t *)&v83);
  if (LOBYTE(v83.f_blocks)) {

  }
  if (!v6)
  {
LABEL_46:
    uint64_t v49 = v46;
    __int128 v50 = (void *)v49;
    unint64_t v51 = cf;
    if (cf != v49)
    {
      CFTypeRef cf = v49;
      uint64_t v49 = v51;
    }

    if (v49) {
      CFRelease(v49);
    }

    id v6 = 0LL;
    if (!*(_BYTE *)(a1 + 72)) {
      goto LABEL_51;
    }
    goto LABEL_3;
  }

  if (!v74)
  {
    (*((void (**)(id *))*v6 + 1))(v6);
    goto LABEL_46;
  }

  __int128 v48 = v6[1];

  else {
    uint64_t v7 = 1LL;
  }

  int v5 = v48;
LABEL_4:
  uint64_t v8 = *(const __CFURL **)(a1 + 48);
  uint64_t v9 = *(const __CFString **)(a1 + 56);
  if (v74) {
    uint64_t v10 = v73;
  }
  else {
    uint64_t v10 = 0LL;
  }
  id v11 = (const __CFString *)v10;
  id v12 = cf;
  CFTypeRef cf = 0LL;
  if (v12) {
    CFRelease(v12);
  }
  id v13 = MDTCreateCopierWithSandboxExtensionAndReturnError( (const __CFAllocator *)*MEMORY[0x189604DB0],  (const __CFURL *)v5,  v8,  v9,  v11,  (__CFMachPort *)v7,  (__CFMachPort *)_LSCopierCallback,  (__CFMachPort *)v4,  (CFErrorRef *)&cf);
  if (!v13)
  {
LABEL_51:
    -[_LSOpenCopierContext setError:](v4, "setError:", cf);
    id v13 = 0LL;
    id v17 = 1;
    goto LABEL_52;
  }

  Current = CFRunLoopGetCurrent();
  if (MDTCopierScheduleWithRunLoop((uint64_t)v13, Current, @"LSOpenCallbackWaitMode"))
  {
    if (MDTCopierStart((uint64_t)v13))
    {
      CFRunLoopRunInMode(@"LSOpenCallbackWaitMode", 1.0e99, 1u);
      MDTCopierInvalidate((uint64_t)v13);
      if (-[_LSOpenCopierContext callbackType](v4, "callbackType") == 2)
      {
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  89LL,  (uint64_t)"_LSCopyOrMoveFileResource_block_invoke",  442LL,  0LL);
        id v15 = (void *)objc_claimAutoreleasedReturnValue();
        -[_LSOpenCopierContext setError:](v4, "setError:", v15);
      }
    }

    uint64_t v16 = CFRunLoopGetCurrent();
    MDTCopierUnscheduleFromRunLoop((uint64_t)v13, v16, @"LSOpenCallbackWaitMode");
  }

  id v17 = 0;
LABEL_52:
  uint64_t v52 = *(void *)(a1 + 64);
  -[_LSOpenCopierContext destURL](v4, "destURL");
  __int128 v53 = (void *)objc_claimAutoreleasedReturnValue();
  -[_LSOpenCopierContext error](v4, "error");
  __int128 v54 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, void *))(v52 + 16))(v52, v53, v54);

  if (v74) {
  if (v6)
  }
    (*((void (**)(id *))*v6 + 1))(v6);

  if (cf) {
    CFRelease(cf);
  }
  if ((v17 & 1) == 0) {
    CFRelease(v13);
  }
  objc_autoreleasePoolPop(v2);
  return MEMORY[0x186E2AFE0]();
}

void sub_183F3A7DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20, char a21, CFTypeRef cf)
{
  if (a21) {
  if (cf)
  }
    CFRelease(cf);
  _Unwind_Resume(a1);
}

void _LSCopierCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  [v8 setCallbackType:a2];
  if ((_DWORD)a2 == 1) {
    goto LABEL_9;
  }
  if ((_DWORD)a2 == 2)
  {
LABEL_8:
    a3 = 0LL;
LABEL_9:
    [v8 setDestURL:a3];
    a4 = 0LL;
    goto LABEL_10;
  }

  if ((_DWORD)a2 != 3)
  {
    _LSDefaultLog();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      _LSCopierCallback(a2, v9);
    }

    goto LABEL_8;
  }

  [v8 setDestURL:0];
LABEL_10:
  [v8 setError:a4];
  Current = CFRunLoopGetCurrent();
  CFRunLoopStop(Current);
}

void sub_183F3AA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void copyProvidedResourceToStagingContainerRegularFile( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  v27[1] = *MEMORY[0x1895F89C0];
  id v7 = a1;
  id v8 = a2;
  *a4 = 0LL;
  +[LSOpenStagingDirectoryManager sharedServerInstance]( &OBJC_CLASS___LSOpenStagingDirectoryManager,  "sharedServerInstance");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue();
  [v9 mainDataVolumeStagingURLWithError:a3];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    [MEMORY[0x189607AB8] UUID];
    id v11 = (void *)objc_claimAutoreleasedReturnValue();
    [v11 UUIDString];
    id v12 = (void *)objc_claimAutoreleasedReturnValue();
    [v10 URLByAppendingPathComponent:v12 isDirectory:1];
    id v13 = (void *)objc_claimAutoreleasedReturnValue();

    getFileProtectionValueForFileHandle(v8, a3);
    id v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v14) {
      goto LABEL_13;
    }
    [MEMORY[0x1896078A8] defaultManager];
    id v15 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v26 = *MEMORY[0x189603BD0];
    v27[0] = v14;
    [MEMORY[0x189603F68] dictionaryWithObjects:v27 forKeys:&v26 count:1];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    int v17 = [v15 createDirectoryAtURL:v13 withIntermediateDirectories:0 attributes:v16 error:a3];

    if (!v17) {
      goto LABEL_13;
    }
    [v7 lastPathComponent];
    id v18 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 URLByAppendingPathComponent:v18];
    id v19 = (void *)objc_claimAutoreleasedReturnValue();

    id v20 = v19;
    int v21 = open((const char *)[v20 fileSystemRepresentation], 16777729, 420);
    if (v21 < 0 || fcopyfile([v8 fileDescriptor], v21, 0, 0xFu))
    {
      if (a3)
      {
        uint64_t v22 = __error();
        _LSMakeNSErrorImpl( (void *)*MEMORY[0x189607688],  *v22,  (uint64_t)"copyProvidedResourceToStagingContainerRegularFile",  277LL,  0LL);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }

      if (v21 < 0) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v23 = operator new(0x18uLL);
      id v24 = v13;
      id v25 = v20;
      *uint64_t v23 = off_189D77710;
      v23[1] = v25;
      id v23[2] = v24;
      *a4 = v23;
    }

    close(v21);
LABEL_12:

LABEL_13:
  }
}

void sub_183F3AD10(_Unwind_Exception *a1)
{
  void *v3 = 0LL;
  _Unwind_Resume(a1);
}

id getFileProtectionValueForFileHandle(void *a1, void *a2)
{
  id v3 = a1;
  v9[1] = 0LL;
  _OWORD v9[2] = 0LL;
  v9[0] = 0x4000000000000005LL;
  if (fgetattrlist([v3 fileDescriptor], v9, &v8, 8uLL, 1u))
  {
    if (a2)
    {
      id v4 = __error();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], *v4, (uint64_t)"getFileProtectionValueForFileHandle", 140LL, 0LL);
      id v5 = 0LL;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }

    else
    {
      id v5 = 0LL;
    }
  }

  else
  {
    switch(HIDWORD(v8))
    {
      case 1:
        id v6 = (id *)MEMORY[0x189603BB8];
        break;
      case 2:
        id v6 = (id *)MEMORY[0x189603BC0];
        break;
      case 3:
        id v6 = (id *)MEMORY[0x189603BC8];
        break;
      default:
        id v6 = (id *)MEMORY[0x189603BD8];
        break;
    }

    id v5 = *v6;
  }

  return v5;
}

void sub_183F3AEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::StagedFileResource::~StagedFileResource( _anonymous_namespace_::StagedFileResource *this)
{
  *(void *)this = off_189D77710;
  id v3 = (uint64_t *)((char *)this + 16);
  int v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    [MEMORY[0x1896078A8] defaultManager];
    id v4 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = *v3;
    id v9 = 0LL;
    char v6 = [v4 removeItemAtURL:v5 error:&v9];
    id v7 = v9;

    if ((v6 & 1) == 0)
    {
      _LSDefaultLog();
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    }
      }

    int v2 = (void *)*v3;
  }
}

{
  void *v1;
  operator delete(v1);
}

void sub_183F3AFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::StagedFileResource::sandboxExtensionForTransfer( uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5 = sandbox_extension_issue_file();
  if (!v5)
  {
    if (a2)
    {
      id v9 = (void *)*MEMORY[0x189607688];
      uint64_t v10 = __error();
      _LSMakeNSErrorImpl(v9, *v10, (uint64_t)"sandboxExtensionForContainer", 209LL, 0LL);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_6;
  }

  char v6 = (void *)v5;
  uint64_t v7 = [objc_alloc(NSString) initWithUTF8String:v5];
  free(v6);
  if (!v7)
  {
LABEL_6:
    char v8 = 0;
    *a3 = 0;
    goto LABEL_7;
  }

  *(void *)a3 = v7;
  char v8 = 1;
LABEL_7:
  a3[8] = v8;
}

uint64_t anonymous namespace'::StagedFileResource::shouldMoveToInbox( _anonymous_namespace_::StagedFileResource *this)
{
  return 1LL;
}

void anonymous namespace'::FileResource::~FileResource(id *this)
{
}

{

  operator delete(this);
}

void anonymous namespace'::FileResource::sandboxExtensionForTransfer(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 80), 8) = 1;
}

uint64_t anonymous namespace'::FileResource::shouldMoveToInbox(_anonymous_namespace_::FileResource *this)
{
  return 0LL;
}

void std::__optional_storage_base<NSString * {__strong},false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<NSString * {__strong},false>>( uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      uint64_t v3 = *a2;
      *a2 = 0LL;
      id v4 = *(id *)a1;
      *(void *)a1 = v3;
    }
  }

  else if (*(_BYTE *)(a1 + 8))
  {

    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0;
  }

  else
  {
    uint64_t v5 = *a2;
    *a2 = 0LL;
    *(void *)a1 = v5;
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 80), 8) = 1;
  }

BOOL _LSIsNewsWidgetBundleIdentifier(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1) {
    BOOL v3 = [v1 caseInsensitiveCompare:@"com.apple.news.widget"] == 0;
  }
  else {
    BOOL v3 = 0LL;
  }

  return v3;
}

void sub_183F3B218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3B2EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id makeStagingDirectoryURLInContainer(void *a1)
{
  _OWORD v40[2] = *MEMORY[0x1895F89C0];
  id v1 = a1;
  uint64_t v2 = *MEMORY[0x189607518];
  uint64_t v3 = *MEMORY[0x189603C50];
  v39[0] = *MEMORY[0x189607530];
  v39[1] = v3;
  v40[0] = v2;
  v40[1] = MEMORY[0x189604A88];
  [MEMORY[0x189603F68] dictionaryWithObjects:v40 forKeys:v39 count:2];
  id v4 = (void *)objc_claimAutoreleasedReturnValue();
  [v1 URLByAppendingPathComponent:@"OpenOperationStaging"];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
  [MEMORY[0x1896078A8] defaultManager];
  char v6 = (void *)objc_claimAutoreleasedReturnValue();
  id v32 = 0LL;
  int v7 = [v6 createDirectoryAtURL:v5 withIntermediateDirectories:0 attributes:v4 error:&v32];
  id v8 = v32;

  if (v7)
  {
    id v9 = v5;
    goto LABEL_24;
  }

  [v8 domain];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (![v10 isEqualToString:*MEMORY[0x189607460]])
  {

    goto LABEL_7;
  }

  BOOL v11 = [v8 code] == 516;

  if (!v11)
  {
LABEL_7:
    _LSDefaultLog();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      makeStagingDirectoryURLInContainer((uint64_t)v5, (uint64_t)v8, v12);
    }
  }

  [MEMORY[0x1896078A8] defaultManager];
  id v13 = (void *)objc_claimAutoreleasedReturnValue();
  id v31 = 0LL;
  [v13 URLForDirectory:99 inDomain:1 appropriateForURL:v5 create:1 error:&v31];
  id v14 = (void *)objc_claimAutoreleasedReturnValue();
  id v15 = v31;

  if (v14)
  {
    [MEMORY[0x1896078A8] defaultManager];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue();
    [v14 path];
    int v17 = (void *)objc_claimAutoreleasedReturnValue();
    id v30 = v15;
    char v18 = [v16 setAttributes:v4 ofItemAtPath:v17 error:&v30];
    id v19 = v30;

    if ((v18 & 1) == 0)
    {
      _LSDefaultLog();
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        makeStagingDirectoryURLInContainer();
      }
    }

    id v21 = v14;
    uint64_t v22 = (const char *)[v21 fileSystemRepresentation];
    id v23 = v5;
    if (renamex_np(v22, (const char *)[v23 fileSystemRepresentation], 2u))
    {
      int v24 = *__error();
      _LSDefaultLog();
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138543874;
        id v34 = v23;
        __int16 v35 = 2114;
        id v36 = v21;
        __int16 v37 = 1024;
        int v38 = v24;
        _os_log_error_impl( &dword_183E58000,  v25,  OS_LOG_TYPE_ERROR,  "could not swap old (%{public}@) and new (%{public}@) staging directories: %{darwin.errno}d",  buf,  0x1Cu);
      }

      id v9 = 0LL;
    }

    else
    {
      dispatch_get_global_queue(-32768LL, 0LL);
      uint64_t v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
      v28[0] = MEMORY[0x1895F87A8];
      v28[1] = 3221225472LL;
      v28[2] = ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke;
      void v28[3] = &unk_189D741C8;
      id v29 = (os_log_s *)v21;
      dispatch_async(v26, v28);

      id v9 = v23;
      id v25 = v29;
    }
  }

  else
  {
    _LSDefaultLog();
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      makeStagingDirectoryURLInContainer((uint64_t)v15, v25);
    }
    id v9 = 0LL;
    id v19 = v15;
  }

LABEL_24:
  return v9;
}

void sub_183F3B6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3BAF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (*((_BYTE *)v13 + 24)) {
    LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(v13);
  }

  _Unwind_Resume(a1);
}

LaunchServices::OpenStaging::StagingDirectoryInfo *std::optional<LaunchServices::OpenStaging::StagingDirectoryInfo>::emplace[abi:nn180100]<NSString * {__strong}&,FSNode * {__strong}&,long long &,void>( LaunchServices::OpenStaging::StagingDirectoryInfo *this, void **a2, void **a3, uint64_t *a4)
{
  if (*((_BYTE *)this + 24))
  {
    LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo(this);
    *((_BYTE *)this + 24) = 0;
  }

  id v8 = *a2;
  id v9 = *a3;
  uint64_t v10 = *a4;
  id v11 = v8;
  id v12 = v9;
  *(void *)this = v11;
  *((void *)this + 1) = v12;
  *((_DWORD *)this + 4) = v10;
  *((_BYTE *)this + 24) = 1;
  return this;
}

void sub_183F3BD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3BE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3C094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3C36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3C3D0()
{
}

void sub_183F3C4C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F3CA94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void *std::unordered_map<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>::insert_or_assign[abi:nn180100]<LaunchServices::OpenStaging::StagingDirectoryInfo>( uint64_t a1, unint64_t *a2, LaunchServices::OpenStaging::StagingDirectoryInfo *a3)
{
  id v4 = std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,LaunchServices::OpenStaging::StagingDirectoryInfo>( a1,  a2,  a2,  a3);
  uint64_t v5 = v4;
  if (!v6) {
    LaunchServices::OpenStaging::StagingDirectoryInfo::swap( (LaunchServices::OpenStaging::StagingDirectoryInfo *)(v4 + 3),  a3);
  }
  return v5;
}

void sub_183F3CC60(_Unwind_Exception *a1)
{
}

void sub_183F3CDCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3CEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3CFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = 0LL;
  char v4 = [v2 removeItemAtURL:v3 error:&v7];
  id v5 = v7;

  if ((v4 & 1) == 0)
  {
    _LSDefaultLog();
    char v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ___ZL34makeStagingDirectoryURLInContainerP5NSURLPU15__autoreleasingP7NSError_block_invoke_cold_1();
    }
  }
}

void sub_183F3D0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo( LaunchServices::OpenStaging::StagingDirectoryInfo *this)
{
  if (*((_DWORD *)this + 4) != -1) {
    sandbox_extension_release();
  }
}

void sub_183F3D148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,LaunchServices::OpenStaging::StagingDirectoryInfo>( uint64_t a1, unint64_t *a2, void *a3, LaunchServices::OpenStaging::StagingDirectoryInfo *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }

    id v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      id v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8) {
              return v12;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v4) {
              break;
            }
          }

          id v12 = (void *)*v12;
        }

        while (v12);
      }
    }
  }

  uint64_t v14 = a1 + 16;
  id v15 = operator new(0x30uLL);
  v25[0] = (uint64_t)v15;
  v25[1] = a1 + 16;
  *id v15 = 0LL;
  v15[1] = v8;
  v15[2] = *a3;
  void v15[4] = 0LL;
  *((_DWORD *)v15 + 10) = -1;
  void v15[3] = 0LL;
  LaunchServices::OpenStaging::StagingDirectoryInfo::swap( (LaunchServices::OpenStaging::StagingDirectoryInfo *)(v15 + 3),  a4);
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1LL;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,LSApplicationRecord * {__strong}>>>::__rehash<true>( a1,  v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }

    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }

  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }

      else
      {
        v23 &= v9 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  id v12 = (void *)v25[0];
  v25[0] = 0LL;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100]( v25,  0LL);
  return v12;
}

void sub_183F3D3C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void LaunchServices::OpenStaging::StagingDirectoryInfo::swap( LaunchServices::OpenStaging::StagingDirectoryInfo *this, LaunchServices::OpenStaging::StagingDirectoryInfo *a2)
{
  unint64_t v4 = *(void **)this;
  *(void *)this = 0LL;
  id v5 = *(void **)a2;
  *(void *)a2 = 0LL;
  char v6 = *(void **)this;
  *(void *)this = v5;

  id v7 = *(void **)a2;
  *(void *)a2 = v4;

  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = 0LL;
  uint64_t v9 = *((void *)a2 + 1);
  *((void *)a2 + 1) = 0LL;
  uint8x8_t v10 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v9;

  id v11 = (void *)*((void *)a2 + 1);
  *((void *)a2 + 1) = v8;

  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,void *>>>>::reset[abi:nn180100]( uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16)) {
      LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v2 + 24));
    }
    operator delete((void *)v2);
  }

void *std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::find<unsigned long long>( void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0LL;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }

  else
  {
    unint64_t v5 = (*(void *)&v2 - 1LL) & v3;
  }

  char v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0LL;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }

      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }

        else
        {
          v8 &= *(void *)&v2 - 1LL;
        }

        if (v8 != v5) {
          return 0LL;
        }
      }

      double result = (void *)*result;
    }

    while (result);
  }

  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::~__hash_table( uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,LaunchServices::OpenStaging::StagingDirectoryInfo>>>::__deallocate_node( uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      LaunchServices::OpenStaging::StagingDirectoryInfo::~StagingDirectoryInfo((LaunchServices::OpenStaging::StagingDirectoryInfo *)(v2 + 3));
      operator delete(v2);
      int8x8_t v2 = v3;
    }

    while (v3);
  }

uint64_t LaunchServices::notifyd::NotifyToken::_moveFrom( LaunchServices::notifyd::NotifyToken *this, LaunchServices::notifyd::NotifyToken *a2)
{
  do
    int v4 = __ldaxr((unsigned int *)this);
  while (__stlxr(0xFFFFFFFF, (unsigned int *)this));
  uint64_t result = notify_is_valid_token(v4);
  if ((_DWORD)result) {
    uint64_t result = notify_cancel(v4);
  }
  do
    unsigned int v6 = __ldaxr((unsigned int *)a2);
  while (__stlxr(0xFFFFFFFF, (unsigned int *)a2));
  atomic_store(v6, (unsigned int *)this);
  return result;
}

uint64_t LaunchServices::notifyd::NotifyToken::cancel(LaunchServices::notifyd::NotifyToken *this)
{
  do
    int v1 = __ldaxr((unsigned int *)this);
  while (__stlxr(0xFFFFFFFF, (unsigned int *)this));
  uint64_t result = notify_is_valid_token(v1);
  if ((_DWORD)result) {
    return notify_cancel(v1);
  }
  return result;
}

void LaunchServices::notifyd::NotifyToken::~NotifyToken(LaunchServices::notifyd::NotifyToken *this)
{
  int v2 = atomic_load((unsigned int *)this);
  if (notify_is_valid_token(v2))
  {
    int v3 = atomic_load((unsigned int *)this);
    notify_cancel(v3);
  }

LaunchServices::notifyd::NotifyToken *LaunchServices::notifyd::NotifyToken::operator=( LaunchServices::notifyd::NotifyToken *a1, LaunchServices::notifyd::NotifyToken *a2)
{
  return a1;
}

void LaunchServices::notifyd::NotifyToken::RegisterDispatch( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned int *a4@<X8>)
{
  id v7 = a1;
  unint64_t v8 = a2;
  id v9 = a3;
  *a4 = -1;
  uint8x8_t v10 = (void *)MEMORY[0x186E2A59C]();
  int out_token = -1;
  uint64_t v14 = MEMORY[0x1895F87A8];
  uint64_t v15 = 3221225472LL;
  float v16 = ___ZN14LaunchServices7notifyd11NotifyToken16RegisterDispatchEP8NSStringPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke;
  float v17 = &unk_189D77768;
  id v11 = v9;
  id v18 = v11;
  int v12 = (void *)MEMORY[0x186E2A7B8](&v14);
  id v13 = v7;

  objc_autoreleasePoolPop(v10);
}

void sub_183F3D7D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14LaunchServices7notifyd11NotifyToken16RegisterDispatchEP8NSStringPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvvE_block_invoke( uint64_t a1)
{
  int v2 = (void *)MEMORY[0x186E2A59C]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void LaunchServices::notifyd::NotifyToken::RegisterCheck( LaunchServices::notifyd::NotifyToken *this@<X0>, unsigned int *a2@<X8>)
{
  int v4 = this;
  *a2 = -1;
  unint64_t v5 = (void *)MEMORY[0x186E2A59C]();
  int out_token = -1;
  unsigned int v6 = v4;
  if (!notify_register_check( (const char *)-[LaunchServices::notifyd::NotifyToken UTF8String](v6, "UTF8String"),  &out_token)) {
    atomic_store(out_token, a2);
  }
  objc_autoreleasePoolPop(v5);
}

void sub_183F3D8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LaunchServices::notifyd::NotifyToken::Post(LaunchServices::notifyd::NotifyToken *this, NSString *a2)
{
  int v2 = this;
  int v3 = (void *)MEMORY[0x186E2A59C]();
  int v4 = v2;
  notify_post((const char *)-[LaunchServices::notifyd::NotifyToken UTF8String](v4, "UTF8String"));
  objc_autoreleasePoolPop(v3);
}

void sub_183F3D91C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t LaunchServices::notifyd::NotifyToken::getState(LaunchServices::notifyd::NotifyToken *this)
{
  int v1 = atomic_load((unsigned int *)this);
  if (notify_get_state(v1, &state64)) {
    return 0LL;
  }
  else {
    return state64;
  }
}

uint64_t LaunchServices::notifyd::NotifyToken::setState( LaunchServices::notifyd::NotifyToken *this, uint64_t a2)
{
  int v2 = atomic_load((unsigned int *)this);
  return notify_set_state(v2, a2);
}

void sub_183F3DA0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint8x8_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___LSObserver;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_183F3DB2C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
  __break(1u);
}

void sub_183F3DB58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F3DC54(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
  __break(1u);
}

void sub_183F3DC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3DD30(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
  __break(1u);
}

void sub_183F3DD5C(_Unwind_Exception *a1)
{
}

void sub_183F3DE08(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  objc_exception_rethrow();
  __break(1u);
}

void sub_183F3DE34(_Unwind_Exception *a1)
{
}

void sub_183F3E120( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v24);

  objc_destroyWeak((id *)(v27 - 96));
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)&a17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_183F3E32C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_183F3E430( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;
  *(void *)(result + 4_Block_object_dispose((const void *)(v1 - 80), 8) = v2;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void sub_183F3E5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3E6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3E7A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F3E8E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initBSServiceConnectionEndpoint(void)
{
  if (!BoardServicesLibrary(void)::frameworkLibrary) {
    BoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices",  2);
  }
  Class result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass Class = (uint64_t (*)(void))BSServiceConnectionEndpointFunction;
  return result;
}

{
  Class result;
  if (!BoardServicesLibrary(void)::frameworkLibrary) {
    BoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/BoardServices.framework/BoardServices",  2);
  }
  Class result = objc_getClass("BSServiceConnectionEndpoint");
  classBSServiceConnectionEndpoint = (uint64_t)result;
  getBSServiceConnectionEndpointClass Class = (uint64_t (*)(void))BSServiceConnectionEndpointFunction;
  return result;
}

id BSServiceConnectionEndpointFunction(void)
{
  return (id)classBSServiceConnectionEndpoint;
}

{
  return (id)classBSServiceConnectionEndpoint;
}

id LSDatabaseBlockingFetchInterface()
{
  if (LSDatabaseBlockingFetchInterface_onceToken != -1) {
    dispatch_once(&LSDatabaseBlockingFetchInterface_onceToken, &__block_literal_global_46);
  }
  return (id)LSDatabaseBlockingFetchInterface_result;
}

uint64_t __LSDatabaseBlockingFetchInterface_block_invoke()
{
  uint64_t v0 = [MEMORY[0x189607B48] interfaceWithProtocol:&unk_18C687870];
  int v1 = (void *)LSDatabaseBlockingFetchInterface_result;
  LSDatabaseBlockingFetchInterface_Class result = v0;

  [(id)LSDatabaseBlockingFetchInterface_result setClass:_CSStoreGetXPCClass() forSelector:sel_getServerStoreBlockingWithCompletionHandler_ argumentIndex:0 ofReply:1];
  uint64_t v2 = (void *)LSDatabaseBlockingFetchInterface_result;
  _FSNodeGetClasses();
  int v3 = (void *)objc_claimAutoreleasedReturnValue();
  [v2 setClasses:v3 forSelector:sel_getServerStoreBlockingWithCompletionHandler_ argumentIndex:1 ofReply:1];

  return [(id)LSDatabaseBlockingFetchInterface_result setClass:objc_opt_class() forSelector:sel_getServerStoreBlockingWithCompletionHandler_ argumentIndex:2 ofReply:1];
}

void sub_183F3EE4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void __LAUNCH_SERVICES_CLIENTS_ARE_WAITING_FOR_THE_DATABASE_TO_FINISH_SEEDING__()
{
  uint64_t v0 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
}

void __LAUNCH_SERVICES_CLIENTS_ARE_WAITING_FOR_A_MANUAL_DATABASE_REBUILD_TO_COMPLETE__()
{
  uint64_t v0 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue();
  dispatch_group_wait(v0, 0xFFFFFFFFFFFFFFFFLL);
}

id _LSOpenResourceOperationDelegateGetXPCInterface()
{
  if (_LSOpenResourceOperationDelegateGetXPCInterface::once != -1) {
    dispatch_once(&_LSOpenResourceOperationDelegateGetXPCInterface::once, &__block_literal_global_47);
  }
  return (id)_LSOpenResourceOperationDelegateGetXPCInterface::result;
}

void sub_183F3F240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3F2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F3F378( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F3F408( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F3F4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LAUNCH_SERVICES_IS_BEING_USED_SYNCHRONOUSLY_ON_THE_MAIN_THREAD_OF_THE_SHELL_APP_AND_WILL_DEADLOCK__()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  uint64_t v0 = getprogname();
  _LSDefaultLog();
  int v1 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
  {
    int v2 = 136446466;
    int v3 = v0;
    __int16 v4 = 2082;
    unint64_t v5 = v0;
    _os_log_fault_impl( &dword_183E58000,  v1,  OS_LOG_TYPE_FAULT,  "This Launch Services API is synchronous and makes an XPC call to %{public}s. It will always deadlock when used wit hin %{public}s. You must use asynchronous API instead to avoid a deadlock and subsequent panic. This is a bug in L aunch Services' client.",  (uint8_t *)&v2,  0x16u);
  }
}

void _LSFaultIfRunningOnMainThreadOfShellApp()
{
  if (pthread_main_np())
  {
    if ([(id)__LSDefaultsGetSharedInstance() isAppleInternal])
    {
      if (FrontBoardServicesLibrary(void)::frameworkLibrary
        || (FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardS ervices.framework/FrontBoardServices",  2)) != 0)
      {
        if ([(id)getFBSOpenApplicationServiceClass() currentProcessServicesDefaultShellEndpoint]) {
          __LAUNCH_SERVICES_IS_BEING_USED_SYNCHRONOUSLY_ON_THE_MAIN_THREAD_OF_THE_SHELL_APP_AND_WILL_DEADLOCK__();
        }
      }
    }
  }

void _LSServer_PerformOpenOperation( void *a1, void *a2, void *a3, char a4, __int128 *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v38 = a1;
  id v18 = a2;
  id v19 = a3;
  id v41 = a6;
  id v40 = a7;
  id v39 = a8;
  id v20 = a9;
  id v42 = a10;
  id v21 = a11;
  __int16 v37 = v20;
  id v34 = (void *)MEMORY[0x186E2A7B8]();
  MEMORY[0x186E2AFD4]();
  uint64_t v22 = MEMORY[0x1895F87A8];
  v58[0] = MEMORY[0x1895F87A8];
  v58[1] = 3221225472LL;
  v58[2] = ___LSServer_PerformOpenOperation_block_invoke;
  v58[3] = &unk_189D725B8;
  id v35 = v34;
  id v59 = v35;
  id v36 = (void *)MEMORY[0x186E2A7B8](v58);

  if (a5)
  {
    __int128 v23 = a5[1];
    __int128 v56 = *a5;
    __int128 v57 = v23;
  }

  else
  {
    if (v42)
    {
      int v24 = v38;
      [v42 auditToken];
      goto LABEL_6;
    }

    __int128 v56 = 0u;
    __int128 v57 = 0u;
  }

  int v24 = v38;
LABEL_6:
  v43[0] = v22;
  v43[1] = 3221225472LL;
  v43[2] = ___LSServer_PerformOpenOperation_block_invoke_72;
  v43[3] = &unk_189D778C8;
  id v25 = v19;
  id v44 = v25;
  id v26 = v24;
  id v45 = v26;
  id v27 = v39;
  id v46 = v27;
  id v28 = v42;
  id v47 = v28;
  char v55 = a4;
  __int128 v53 = v56;
  __int128 v54 = v57;
  id v29 = v36;
  id v52 = v29;
  id v30 = v18;
  id v48 = v30;
  id v31 = v41;
  id v49 = v31;
  id v32 = v40;
  id v50 = v32;
  id v33 = v37;
  id v51 = v33;
  _LSAsyncOpenContext(v43);
}

void sub_183F3F8C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_183F3FA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSAsyncOpenContext(void *a1)
{
  id v1 = a1;
  int v2 = (dispatch_queue_s *)_LSOpenOperationGetQueue(void)::result;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke;
  block[3] = &unk_189D767B0;
  id v5 = v1;
  id v3 = v1;
  dispatch_async(v2, block);
}

LABEL_65:
    +[LSAppLink _dispatchQueue](&OBJC_CLASS___LSAppLink, "_dispatchQueue", v52);
    id v51 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
    *(void *)&__int128 buf = v39;
    *((void *)&buf + 1) = 3221225472LL;
    *(void *)&int v77 = ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke;
    *((void *)&v77 + 1) = &unk_189D779D0;
    id v78 = v42;
    uint64_t v79 = v44;
    uint64_t v80 = v43;
    uint64_t v81 = v46;
    dispatch_async(v51, &buf);

    goto LABEL_66;
  }

  id v59 = v37;
LABEL_54:
  _LSDefaultLog();
  id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl( &dword_183E58000,  v47,  OS_LOG_TYPE_DEFAULT,  "Invalid LSOpenOperation request: %{public}@",  (uint8_t *)&buf,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
  if ((v7 & 1) == 0) {
LABEL_70:
  }
}

void sub_183F403AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, void *a24, void *a25, void *a26, void *a27, void *a28, void *a29, void *a30, char a31)
{
  if (a31) {
  _Unwind_Resume(a1);
  }
}

void _LSOpenOperationPerform( void *a1, void *a2, void *a3, int a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  uint64_t v217 = *MEMORY[0x1895F89C0];
  id v16 = a1;
  id v180 = a2;
  id v188 = a3;
  id v181 = a5;
  id v183 = a6;
  id v186 = a7;
  id v182 = a8;
  id v187 = a9;
  uint64_t v184 = v16;
  uint64_t v185 = a10;
  _LSAssertRunningInServer((uint64_t)"void _LSOpenOperationPerform(NSURL *__strong, NSFileHandle *__strong, NSString *__st"
                                    "rong, BOOL, NSString *__strong, NSDictionary<NSString *,id> *__strong, NSDictionary<"
                                    "NSString *,id> *__strong, __strong id<LSOpenResourceOperationDelegate>, NSXPCConnect"
                                    "ion *__strong, __strong _LSDOpenServiceCompletionHandler)");
  if (v16)
  {
    if ([v16 isFileURL])
    {
      v171 = +[LSApplicationProxy applicationProxyForIdentifier:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForIdentifier:",  v188);
      uint64_t v17 = objc_opt_class();
      uint64_t v18 = [v186 objectForKey:@"FileProviderString"];
      id v19 = (void *)v18;
      if (v17 && v18)
      {
        if ((objc_opt_isKindOfClass() & 1) != 0) {
          goto LABEL_35;
        }
      }

      else if (v18)
      {
        goto LABEL_35;
      }

      uint64_t v28 = objc_opt_class();
      uint64_t v29 = [v183 objectForKey:@"FileProviderString"];
      id v30 = (void *)v29;
      if (v28 && v29 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        id v19 = 0LL;
      }

      else
      {
        id v19 = v30;
      }

LABEL_228:
LABEL_145:
LABEL_146:

LABEL_150:
          if (v213 && v215) {
            _LSContextDestroy(v213);
          }
          id v127 = v214;
          v213 = 0LL;
          id v214 = 0LL;

          char v215 = 0;
          id v128 = v216;
          id v216 = 0LL;

          id v98 = v165;
LABEL_154:

          goto LABEL_155;
        }

        if (*(void *)&buf[24] && !*(_WORD *)(*(void *)&buf[24] + 12LL))
        {
          _LSDefaultLog();
          int v152 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v207 = 138478083;
            *(void *)&v207[4] = v96;
            *(_WORD *)&v207[12] = 2113;
            *(void *)&v207[14] = v165;
            _os_log_impl( &dword_183E58000,  v152,  OS_LOG_TYPE_INFO,  "App %{private}@'s claim for resource URL %{private}@ has a handler rank of None. Will skip weak default handler.",  v207,  0x16u);
          }

          goto LABEL_228;
        }
      }

      *(_DWORD *)uint64_t v207 = 0;
      *(void *)&v207[8] = 0LL;
      *(_DWORD *)&v207[16] = 0;
      id v208 = 0LL;
      id v209 = 0LL;
      *(void *)&v207[24] = 0LL;
      if (!_LSGetBindingForNodeOrSchemeOrUTI((int)v100, 0LL, 0LL, v164, 0, 14, 0LL, 12320, (uint64_t)v207)
        && (db = v100->db,
            [v175 bundleIdentifier],
            __int128 v155 = (__CFString *)objc_claimAutoreleasedReturnValue(),
            int StringForCFString = _LSDatabaseGetStringForCFString(db, v155, 0),
            v155,
            char v104 = v175,
            *(void *)&v207[8])
        && *(_DWORD *)(*(void *)&v207[8] + 12LL) == StringForCFString)
      {
        _LSDefaultLog();
        id v125 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
        {
          [v175 bundleIdentifier];
          char v157 = (void *)objc_claimAutoreleasedReturnValue();
          _LSOpenOperationPerform((uint64_t)v97, v157, v201, v125);
        }
      }

      else
      {
        MEMORY[0x186E2AFD4]();
        +[_LSDService XPCProxyWithErrorHandler:]((uint64_t)&OBJC_CLASS____LSDModifyService, __block_literal_global_119_0);
        id v125 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        [v104 bundleIdentifier];
        id v126 = (void *)objc_claimAutoreleasedReturnValue();
        memset(v206, 0, sizeof(v206));
        *(void *)uint64_t v201 = MEMORY[0x1895F87A8];
        uint64_t v202 = 3221225472LL;
        uint64_t v203 = ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_120;
        v204 = &unk_189D779A8;
        id v205 = v104;
        -[os_log_s setHandler:version:roles:forContentType:completionHandler:]( v125,  "setHandler:version:roles:forContentType:completionHandler:",  v126,  v206,  0xFFFFFFFFLL,  v164,  v201);
      }

      goto LABEL_145;
    }

    [v16 scheme];
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v24 = [v23 caseInsensitiveCompare:@"search"];

    if (v24)
    {
      [v16 scheme];
      id v25 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v26 = [v25 caseInsensitiveCompare:@"com-apple-audiounit"];

      if (!v26)
      {
        id v21 = (NSURL *)v16;
        _LSAudioUnitURLOpen(v21);
        v185[2](v185, 1LL, 0LL);
        int v20 = 0;
        LOBYTE(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__,  v13,  v14,  v15, v16) = 0;
        id v19 = 0LL;
        unsigned int v178 = 0;
        id v40 = v188;
        BOOL v41 = v188 != 0LL;
LABEL_168:
        char v22 = 1;
        goto LABEL_169;
      }

      +[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace");
      id v27 = (void *)objc_claimAutoreleasedReturnValue();
      if ((a4 & 1) != 0)
      {
        id v21 = (NSURL *)v16;
        LOBYTE(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__,  v13,  v14,  v15, v16) = 0;
      }

      else
      {
        uint64_t v42 = objc_opt_class();
        uint64_t v43 = [v186 objectForKey:@"NoOverrides"];
        id v44 = (void *)v43;
        if (v42 && v43 && (objc_opt_isKindOfClass() & 1) == 0)
        {

          id v44 = 0LL;
        }

        LOBYTE(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__,  v13,  v14,  v15, v16) = [v44 BOOLValue];

        if ((v16 & 1) != 0)
        {
          id v45 = 0LL;
        }

        else
        {
          uint64_t v106 = -[_LSURLOverride initWithOriginalURL:]( objc_alloc(&OBJC_CLASS____LSURLOverride),  "initWithOriginalURL:",  v184);
          -[_LSURLOverride overrideURL](v106, "overrideURL");
          id v45 = (void *)objc_claimAutoreleasedReturnValue();
        }

        uint64_t v107 = v184;
        if (v45) {
          uint64_t v107 = v45;
        }
        id v21 = v107;
      }

      if (!v188)
      {
        [v27 applicationForOpeningResource:v21];
        uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue();
        [v108 bundleIdentifier];
        id v188 = (id)objc_claimAutoreleasedReturnValue();
      }

      -[NSURL scheme](v21, "scheme");
      uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v109) {
        goto LABEL_126;
      }
      +[_LSCanOpenURLManager sharedManager](&OBJC_CLASS____LSCanOpenURLManager, "sharedManager");
      id v110 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v111 = [v110 schemeTypeOfScheme:v109];

      if (v111 != 1) {
        goto LABEL_126;
      }
      uint64_t v112 = objc_opt_class();
      uint64_t v113 = [v186 objectForKey:@"LSOpenSensitiveURLOption"];
      id v114 = (void *)v113;
      if (v112 && v113 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        id v114 = 0LL;
      }

      int v115 = [v114 BOOLValue];

      if (!v115
        || ([v187 _xpcConnection],
            LSVersionNumber v116 = (void *)objc_claimAutoreleasedReturnValue(),
            int v117 = _LSCheckOpenSensitiveURLForXPCConnection( v116,  (uint64_t)-[NSURL absoluteString](v21, "absoluteString")),  v116,  !v117))
      {
        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 1LL, (uint64_t)"_LSOpenOperationPerform", 551LL, 0LL);
        LSVersionNumber v118 = (void *)objc_claimAutoreleasedReturnValue();
        v185[2](v185, 0LL, v118);

        char v22 = 1;
      }

      else
      {
LABEL_126:
        char v22 = 0;
      }

      unsigned int v178 = 0;
      id v19 = 0LL;
      int v20 = 1;
    }

    else
    {
      uint64_t v31 = objc_opt_class();
      uint64_t v32 = [v186 objectForKey:@"LSOpenSensitiveURLOption"];
      id v33 = (void *)v32;
      if (v31 && v32 && (objc_opt_isKindOfClass() & 1) == 0)
      {

        id v33 = 0LL;
      }

      int v34 = [v33 BOOLValue];

      if (!v34
        || ([v187 _xpcConnection],
            id v35 = (void *)objc_claimAutoreleasedReturnValue(),
            int v36 = _LSCheckOpenSensitiveURLForXPCConnection(v35, [v16 absoluteString]),
            v35,
            !v36))
      {
        _LSDefaultLog();
        id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( &dword_183E58000,  v38,  OS_LOG_TYPE_DEFAULT,  "The 'search:' scheme requires the com.apple.springboard.opensensitiveurl entitlement",  buf,  2u);
        }

        _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 1LL, (uint64_t)"_LSOpenOperationPerform", 509LL, 0LL);
        id v39 = (void *)objc_claimAutoreleasedReturnValue();
        v185[2](v185, 0LL, v39);

        id v21 = 0LL;
        LOBYTE(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__,  v13,  v14,  v15, v16) = 0;
        id v19 = 0LL;
        unsigned int v178 = 0;
        id v40 = v188;
        BOOL v41 = v188 != 0LL;
        int v20 = 1;
        goto LABEL_168;
      }

      uint64_t v37 = [v16 host];

      id v21 = (NSURL *)v16;
      unsigned int v178 = 0;
      id v19 = 0LL;
      LOBYTE(_LSBundleDisplayNameContextEnumerate( __LAUNCH_SERVICES_IS_REBUILDING_THE_DATABASE_BECAUSE_A_RECOVERY_FILE_EXISTED__,  v13,  v14,  v15, v16) = 0;
      char v22 = 0;
      int v20 = 1;
      id v188 = (id)v37;
    }
  }

  else
  {
    unsigned int v178 = 0;
    id v19 = 0LL;
    int v20 = 0;
    id v21 = 0LL;
    char v22 = 0;
  }

LABEL_165:
  id v40 = v188;
  BOOL v41 = v188 != 0LL;
  if ((v22 & 1) == 0 && !v188)
  {
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 45LL, (uint64_t)"_LSOpenOperationPerform", 561LL, 0LL);
    id v132 = (void *)objc_claimAutoreleasedReturnValue();
    v185[2](v185, 0LL, v132);

    BOOL v41 = 0;
    id v40 = 0LL;
    goto LABEL_168;
  }

LABEL_169:
  uint64_t v189 = v40;
  _LSSchemeApprovalRememberForBouncebackCheck(v187, v40);
  if ((v22 & 1) != 0) {
    goto LABEL_214;
  }
  _LSGetOptionsDictionaryContainingSourceApplication(v187, 0LL, v21, 0, 0LL, 0LL, 0, v186);
  uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue();
  [MEMORY[0x189603FC8] dictionaryWithDictionary:v183];
  uint64_t v134 = (void *)objc_claimAutoreleasedReturnValue();
  if (v21) {
    [v133 setObject:v21 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadURL()];
  }
  if (v20)
  {
    uint64_t v135 = objc_opt_class();
    uint64_t v136 = [v133 objectForKey:@"ReferrerURL"];
    unint64_t v137 = (void *)v136;
    if (v135 && v136)
    {
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {

        unint64_t v137 = 0LL;
        goto LABEL_195;
      }
    }

    else if (!v136)
    {
LABEL_195:
      [v133 removeObjectForKey:@"NoOverrides"];
      if ([v134 count]) {
        [v133 setObject:v134 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadAnnotation()];
      }

      goto LABEL_201;
    }

    id v179 = v189;
    int v143 = @"com.apple.launchservices.receivereferrerrurl";
    char v144 = v143;
    if (v143) {
      BOOL v145 = v41;
    }
    else {
      BOOL v145 = 0;
    }
    if (v145)
    {
      *(void *)uint64_t v207 = 0LL;
      if (_LSContextInit((id *)v207))
      {
      }

      else
      {
        v213 = 0LL;
        memset(buf, 0, sizeof(buf));
        if (_LSBundleFindWithInfo((LSContext *)v207, 0LL, v179, 0, buf, 0, 128, v206, &v213))
        {
          char v176 = 0;
        }

        else
        {
          uint64_t v172 = *(void *)v207;
          unsigned int v169 = *((_DWORD *)v213 + 33);
          v177 = v144;
          _LSPlistGet(v172, v169);
          v170 = (NSData *)objc_claimAutoreleasedReturnValue();
          _LSPlistDataGetValueForKey(v170, (uint64_t)v177, 0LL);
          v173 = (void *)objc_claimAutoreleasedReturnValue();

          if (v173 && (objc_opt_respondsToSelector() & 1) != 0) {
            char v176 = [v173 BOOLValue];
          }
          else {
            char v176 = 0;
          }
        }

        _LSContextDestroy((void **)v207);

        if ((v176 & 1) != 0) {
          [v134 setObject:v137 forKeyedSubscript:@"ReferrerURL"];
        }
      }
    }

    else
    {
    }

    [v133 removeObjectForKey:@"ReferrerURL"];
    goto LABEL_195;
  }

  if (v19)
  {
    uint64_t v138 = objc_opt_class();
    uint64_t v139 = [v133 objectForKey:@"__PayloadOptions"];
    unint64_t v140 = (void *)v139;
    if (v138 && v139 && (objc_opt_isKindOfClass() & 1) == 0)
    {

      unint64_t v140 = 0LL;
    }

    uint64_t v141 = (void *)[v140 mutableCopy];

    [v141 setObject:v19 forKeyedSubscript:@"FileProviderString"];
    [MEMORY[0x189607968] numberWithBool:v178];
    uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue();
    [v141 setObject:v142 forKeyedSubscript:@"RequireOpenInPlace"];

    [v133 setObject:v141 forKeyedSubscript:@"__PayloadOptions"];
    [v133 setObject:MEMORY[0x189604A88] forKeyedSubscript:getFBSOpenApplicationOptionKeyDocumentOpen4LS()];
    [v134 removeObjectForKey:@"FileProviderString"];
    [v134 removeObjectForKey:@"RequireOpenInPlace"];
  }

  if ([v134 count]) {
    [v133 setObject:v134 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadAnnotation()];
  }
  [v133 setObject:MEMORY[0x189604A80] forKeyedSubscript:getFBSOpenApplicationOptionKeyActivateSuspended()];
LABEL_201:
  uint64_t v146 = objc_opt_class();
  uint64_t v147 = [v133 objectForKey:@"LSBlockUntilComplete"];
  uint64_t v148 = (void *)v147;
  if (v146 && v147)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {

      uint64_t v148 = 0LL;
LABEL_207:
      uint64_t v149 = 0LL;
      goto LABEL_208;
    }
  }

  else if (!v147)
  {
    goto LABEL_207;
  }

  uint64_t v149 = [v148 BOOLValue];
  [v133 removeObjectForKey:@"LSBlockUntilComplete"];
LABEL_208:

  uint64_t v150 = objc_alloc_init(&OBJC_CLASS____LSSpringBoardCall);
  -[_LSSpringBoardCall setBundleIdentifier:](v150, "setBundleIdentifier:", v189);
  -[_LSSpringBoardCall setLaunchOptions:](v150, "setLaunchOptions:", v133);
  if (v19) {
    int v151 = 1;
  }
  else {
    int v151 = v20;
  }
  if (v151 == 1) {
    -[_LSSpringBoardCall setClientXPCConnection:](v150, "setClientXPCConnection:", v187);
  }
  -[_LSSpringBoardCall setCallCompletionHandlerWhenFullyComplete:]( v150,  "setCallCompletionHandlerWhenFullyComplete:",  v149);
  -[_LSSpringBoardCall callWithCompletionHandler:](v150, "callWithCompletionHandler:", v185);

LABEL_214:
}

void sub_183F421E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, void *a21, void *a22, void *a23, void *a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)(v42 - 144));
  _Unwind_Resume(a1);
}

_BYTE *__copy_helper_block_ea8_96c48_ZTSNSt3__18optionalIU8__strongP12NSDictionaryEE( _BYTE *result, uint64_t a2)
{
  result[96] = 0;
  result[104] = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    int v2 = result;
    Class result = *(id *)(a2 + 96);
    *((void *)v2 + 12) = result;
    v2[104] = 1;
  }

  return result;
}

void __destroy_helper_block_ea8_96c48_ZTSNSt3__18optionalIU8__strongP12NSDictionaryEE(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104)) {
}
  }

void _LSServer_OpenApplication(void *a1, void *a2, void *a3, int a4, void *a5)
{
  if (a4) {
    unint64_t v5 = 0LL;
  }
  else {
    unint64_t v5 = 2LL;
  }
  _LSServer_OpenApplicationCommon(a1, 0LL, 0, 0LL, 0LL, a3, v5, a2, a5);
}

void _LSServer_OpenApplicationCommon( void *a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, unint64_t a7, void *a8, void *a9)
{
  v32[1] = *MEMORY[0x1895F89C0];
  id v16 = a1;
  id v17 = a2;
  id v28 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a8;
  id v21 = a9;
  char v22 = (void *)MEMORY[0x186E2A59C]();
  if ((a7 & 1) != 0) {
    _LSSchemeApprovalRememberForBouncebackCheck(v19, v16);
  }
  if (v16 && [v16 length])
  {
    if (!v17
      || FrontBoardServicesLibrary(void)::frameworkLibrary
      || (FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardSer vices.framework/FrontBoardServices",  2)) != 0)
    {
      _LSGetOptionsDictionaryContainingSourceApplication(v19, v17, 0LL, a3, v28, v18, 1, v20);
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue();
      uint64_t v24 = objc_alloc_init(&OBJC_CLASS____LSSpringBoardCall);
      -[_LSSpringBoardCall setBundleIdentifier:](v24, "setBundleIdentifier:", v16);
      -[_LSSpringBoardCall setLaunchOptions:](v24, "setLaunchOptions:", v23);
      if ((a7 & 2) == 0) {
        -[_LSSpringBoardCall setClientXPCConnection:](v24, "setClientXPCConnection:", v19);
      }
      -[_LSSpringBoardCall setCallCompletionHandlerWhenFullyComplete:]( v24,  "setCallCompletionHandlerWhenFullyComplete:",  (a7 >> 2) & 1);
      v29[0] = MEMORY[0x1895F87A8];
      v29[1] = 3221225472LL;
      void v29[2] = ___ZL31_LSServer_OpenApplicationCommonP8NSStringP8BSActionbP9LSAppLinkP19_LSAppLinkOpenStateP15NSXPCConnectionmP12NSDictionaryIS0_P11objc_objectEU13block_pointerFvbP7NSErrorE_block_invoke;
      v29[3] = &unk_189D725B8;
      id v30 = v21;
      -[_LSSpringBoardCall callWithCompletionHandler:](v24, "callWithCompletionHandler:", v29);
    }

    else if (v21)
    {
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607688], 45LL, (uint64_t)"_LSServer_OpenApplicationCommon", 1233LL, 0LL);
      id v27 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void, void *))v21 + 2))(v21, 0LL, v27);
    }
  }

  else if (v21)
  {
    uint64_t v31 = *MEMORY[0x189607490];
    v32[0] = @"invalid input parameters";
    [MEMORY[0x189603F68] dictionaryWithObjects:v32 forKeys:&v31 count:1];
    id v25 = (void *)objc_claimAutoreleasedReturnValue();
    _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -50LL, (uint64_t)"_LSServer_OpenApplicationCommon", 1228LL, v25);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void, void *))v21 + 2))(v21, 0LL, v26);
  }

  objc_autoreleasePoolPop(v22);
}

void sub_183F42B48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void _LSServer_OpenUserActivity( void *a1, void *a2, void *a3, char a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  unint64_t v16 = a1;
  unint64_t v17 = a2;
  id v18 = a3;
  id v19 = a5;
  id v20 = a6;
  id v21 = v18;
  id v46 = v20;
  id v22 = a7;
  id v23 = a8;
  id v24 = a9;
  id v45 = a10;
  if (!(v16 | v17))
  {
    id v32 = v22;
    [MEMORY[0x1896077D8] currentHandler];
    id v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSServer_OpenUserActivity(NSUUID *__strong, NSData *__strong, NSString *__strong, BOOL, NSString *__strong, LSAppLink *__strong, _LSAppLinkOpenState *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnection *__stro ng, __strong _LSDOpenServiceCompletionHandler)");
    int v34 = (void *)objc_claimAutoreleasedReturnValue();
    [v33 handleFailureInFunction:v34, @"LSOpenOperation.mm", 292, @"Invalid parameter not satisfying: %@", @"uuidOrNil != nil || activityDataOrNil != nil" file lineNumber description];

    id v22 = v32;
  }

  id v25 = v46;
  if (!v21)
  {
    id v35 = v22;
    [MEMORY[0x1896077D8] currentHandler];
    int v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSServer_OpenUserActivity(NSUUID *__strong, NSData *__strong, NSString *__strong, BOOL, NSString *__strong, LSAppLink *__strong, _LSAppLinkOpenState *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnection *__stro ng, __strong _LSDOpenServiceCompletionHandler)");
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue();
    [v36 handleFailureInFunction:v37, @"LSOpenOperation.mm", 293, @"Invalid parameter not satisfying: %@", @"activityType != nil" file lineNumber description];

    id v25 = v46;
    id v22 = v35;
    if (v19) {
      goto LABEL_5;
    }
LABEL_7:
    id v38 = v22;
    [MEMORY[0x1896077D8] currentHandler];
    id v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSServer_OpenUserActivity(NSUUID *__strong, NSData *__strong, NSString *__strong, BOOL, NSString *__strong, LSAppLink *__strong, _LSAppLinkOpenState *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnection *__stro ng, __strong _LSDOpenServiceCompletionHandler)");
    id v40 = (void *)objc_claimAutoreleasedReturnValue();
    [v39 handleFailureInFunction:v40, @"LSOpenOperation.mm", 294, @"Invalid parameter not satisfying: %@", @"bundleID != nil" file lineNumber description];

    id v25 = v46;
    id v22 = v38;
    goto LABEL_5;
  }

  if (!v19) {
    goto LABEL_7;
  }
LABEL_5:
  v47[0] = MEMORY[0x1895F87A8];
  v47[1] = 3221225472LL;
  _OWORD v47[2] = ___LSServer_OpenUserActivity_block_invoke;
  v47[3] = &unk_189D778F0;
  id v43 = (id)v16;
  id v48 = v43;
  id v42 = (id)v17;
  id v49 = v42;
  id v41 = v21;
  id v50 = v41;
  id v26 = v19;
  id v51 = v26;
  char v57 = a4;
  id v27 = v25;
  id v52 = v27;
  id v28 = v22;
  id v53 = v28;
  id v29 = v24;
  id v54 = v29;
  id v30 = v23;
  id v55 = v30;
  id v31 = v45;
  id v56 = v31;
  _LSAsyncOpenContext(v47);
}

void sub_183F42F38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_183F43394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class initFBSOpenApplicationService(void)
{
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardServices. framework/FrontBoardServices",  2);
  }
  Class result = objc_getClass("FBSOpenApplicationService");
  classFBSOpenApplicationService = (uint64_t)result;
  getFBSOpenApplicationServiceClass Class = (uint64_t (*)(void))FBSOpenApplicationServiceFunction;
  return result;
}

{
  Class result;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary) {
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardServices. framework/FrontBoardServices",  2);
  }
  Class result = objc_getClass("FBSOpenApplicationService");
  classFBSOpenApplicationService = (uint64_t)result;
  getFBSOpenApplicationServiceClass Class = (uint64_t (*)(void))FBSOpenApplicationServiceFunction;
  return result;
}

id FBSOpenApplicationServiceFunction(void)
{
  return (id)classFBSOpenApplicationService;
}

{
  return (id)classFBSOpenApplicationService;
}

void ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  int v2 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  _OWORD v3[2] = ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke_2;
  v3[3] = &unk_189D73FA8;
  id v4 = *(id *)(a1 + 32);
  -[LSDBExecutionContext syncRead:](v2, v3);
}

void sub_183F43558( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19_LSAsyncOpenContextU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void ___ZL24_LSOpenOperationGetQueuev_block_invoke()
{
  int v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = dispatch_queue_create("LS open operation queue", v2);
  id v1 = (void *)_LSOpenOperationGetQueue(void)::result;
  _LSOpenOperationGetQueue(void)::Class result = (uint64_t)v0;
}

void ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke( id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [a1[4] openResourceOperation:0 didFinishCopyingResource:v5];
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 3221225472LL;
    v7[2] = ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke_2;
    void v7[3] = &unk_189D77938;
    id v8 = a1[5];
    id v9 = v5;
    id v10 = a1[6];
    id v11 = a1[7];
    id v12 = a1[8];
    id v13 = a1[9];
    _LSAsyncOpenContext(v7);
  }

  else
  {
    (*((void (**)(void))a1[9] + 2))();
  }
}

void sub_183F436E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void ___ZL23_LSOpenOperationPerformP5NSURLP12NSFileHandleP8NSStringbS4_P12NSDictionaryIS4_P11objc_objectES9_PU42objcproto31LSOpenResourceOperationDelegate11objc_objectP15NSXPCConnectionU13block_pointerFvbP7NSErrorE_block_invoke_2( uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v4 setObject:*(void *)(a1 + 40) forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadURL()];
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    [v4 setObject:v2 forKeyedSubscript:getFBSOpenApplicationOptionKeyPayloadAnnotation()];
  }
  [v4 setObject:MEMORY[0x189604A80] forKeyedSubscript:getFBSOpenApplicationOptionKeyActivateSuspended()];
  [v4 setObject:MEMORY[0x189604A88] forKeyedSubscript:getFBSOpenApplicationOptionKeyDocumentOpen4LS()];
  id v3 = objc_alloc_init(&OBJC_CLASS____LSSpringBoardCall);
  -[_LSSpringBoardCall setBundleIdentifier:](v3, "setBundleIdentifier:", *(void *)(a1 + 64));
  -[_LSSpringBoardCall setLaunchOptions:](v3, "setLaunchOptions:", v4);
  -[_LSSpringBoardCall setClientXPCConnection:](v3, "setClientXPCConnection:", *(void *)(a1 + 32));
  -[_LSSpringBoardCall setCallCompletionHandlerWhenFullyComplete:]( v3,  "setCallCompletionHandlerWhenFullyComplete:",  0LL);
  -[_LSSpringBoardCall callWithCompletionHandler:](v3, "callWithCompletionHandler:", *(void *)(a1 + 72));
}

void sub_183F43854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id _LSGetOptionsDictionaryContainingSourceApplication( void *a1, void *a2, void *a3, unsigned int a4, void *a5, void *a6, int a7, void *a8)
{
  v51[1] = *MEMORY[0x1895F89C0];
  id v50 = a1;
  id v14 = a2;
  id v48 = a3;
  unint64_t v15 = a5;
  unint64_t v16 = a6;
  id v17 = a8;
  id v49 = v17;
  if (v17)
  {
    uint64_t v18 = [v17 mutableCopy];
  }

  else
  {
    uint64_t v18 = [MEMORY[0x189603FC8] dictionary];
  }

  id v19 = (void *)v18;
  if (v15 | v16)
  {
LABEL_9:
    if (!a7) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }

  uint64_t v20 = objc_opt_class();
  uint64_t v21 = [v19 objectForKey:@"_LSAppLinkOpenStateLaunchOptionKey"];
  id v22 = (void *)v21;
  if (!v20 || !v21 || (objc_opt_isKindOfClass() & 1) != 0)
  {
    unint64_t v16 = (unint64_t)v22;
    goto LABEL_9;
  }

  unint64_t v16 = 0LL;
  if (!a7) {
    goto LABEL_16;
  }
LABEL_10:
  if (v16)
  {
    [(id)v16 openConfiguration];
    id v23 = (void *)objc_claimAutoreleasedReturnValue();
    [v23 frontBoardOptions];
    id v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v24 && [v24 count])
    {
      [v19 addEntriesFromDictionary:v24];
      [v19 removeObjectForKey:getFBSOpenApplicationOptionKeyPayloadIsValid4LS()];
      LOBYTE(a7) = 0;
    }

    else
    {
      LOBYTE(a7) = 1;
    }
  }

void sub_183F43DF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  _LSDefaultLog();
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_cold_1();
  }

  MEMORY[0x186E2AFE0]();
}

void sub_183F43F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_120( uint64_t a1, int a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  id v5 = a3;
  if (a2)
  {
    _LSDefaultLog();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      [*(id *)(a1 + 32) bundleIdentifier];
      id v7 = (void *)objc_claimAutoreleasedReturnValue();
      int v8 = 138477827;
      id v9 = v7;
      _os_log_impl( &dword_183E58000,  v6,  OS_LOG_TYPE_DEFAULT,  "Set default handler to %{private}@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    _LSDefaultLog();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      ___ZL23_LSUpdateDefaultHandlerP18LSApplicationProxyP5NSURL_block_invoke_cold_1();
    }
  }

  MEMORY[0x186E2AFE0]();
}

void sub_183F440A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initFBSOpenApplicationOptionKeyPayloadIsValid4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadIsValid4LS");
  constantFBSOpenApplicationOptionKeyPayloadIsValid4LS = result;
  getFBSOpenApplicationOptionKeyPayloadIsValid4LS = FBSOpenApplicationOptionKeyPayloadIsValid4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPayloadIsValid4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPayloadIsValid4LS;
}

uint64_t initFBSOpenApplicationOptionKeyActions(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyActions");
  constantFBSOpenApplicationOptionKeyActions = result;
  getFBSOpenApplicationOptionKeyActions = FBSOpenApplicationOptionKeyActionsFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyActionsFunction(void)
{
  return constantFBSOpenApplicationOptionKeyActions;
}

uint64_t initFBSOpenApplicationOptionKeyAppLink4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyAppLink4LS");
  constantFBSOpenApplicationOptionKeyAppLink4LS = result;
  getFBSOpenApplicationOptionKeyAppLink4LS = FBSOpenApplicationOptionKeyAppLink4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyAppLink4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyAppLink4LS;
}

uint64_t initFBSOpenApplicationOptionKeyBrowserAppLinkState4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyBrowserAppLinkState4LS");
  constantFBSOpenApplicationOptionKeyBrowserAppLinkState4LS = result;
  getFBSOpenApplicationOptionKeyBrowserAppLinkState4LS = FBSOpenApplicationOptionKeyBrowserAppLinkState4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyBrowserAppLinkState4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyBrowserAppLinkState4LS;
}

uint64_t initFBSOpenApplicationOptionKeyPayloadAnnotation(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadAnnotation");
  constantFBSOpenApplicationOptionKeyPayloadAnnotation = result;
  getFBSOpenApplicationOptionKeyPayloadAnnotation = FBSOpenApplicationOptionKeyPayloadAnnotationFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyPayloadAnnotationFunction(void)
{
  return constantFBSOpenApplicationOptionKeyPayloadAnnotation;
}

uint64_t initFBSOpenApplicationOptionKeyActivateSuspended(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyActivateSuspended");
  constantFBSOpenApplicationOptionKeyActivateSuspended = result;
  getFBSOpenApplicationOptionKeyActivateSuspended = FBSOpenApplicationOptionKeyActivateSuspendedFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyActivateSuspendedFunction(void)
{
  return constantFBSOpenApplicationOptionKeyActivateSuspended;
}

uint64_t initFBSOpenApplicationOptionKeyDocumentOpen4LS(void)
{
  dispatch_queue_t v0 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    dispatch_queue_t v0 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v0;
  }

  uint64_t result = *(void *)dlsym(v0, "FBSOpenApplicationOptionKeyDocumentOpen4LS");
  constantFBSOpenApplicationOptionKeyDocumentOpen4LS = result;
  getFBSOpenApplicationOptionKeyDocumentOpen4LS = FBSOpenApplicationOptionKeyDocumentOpen4LSFunction;
  return result;
}

uint64_t FBSOpenApplicationOptionKeyDocumentOpen4LSFunction(void)
{
  return constantFBSOpenApplicationOptionKeyDocumentOpen4LS;
}

void ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke( uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____LSAppLinkOpenState);
  if (!v2)
  {
    [MEMORY[0x1896077D8] currentHandler];
    int v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "void _LSTryUniversalLink(NSURL *__strong, NSString *__strong, NSDictionary<NSString *,id> *__strong, NSXPCConnecti on *__strong, void (^__strong)(BOOL))_block_invoke");
    id v9 = (void *)objc_claimAutoreleasedReturnValue();
    [v8 handleFailureInFunction:v9 file:@"LSOpenOperation.mm" lineNumber:960 description:@"failed to create universal link state object"];
  }

  -[_LSAppLinkOpenState setURL:](v2, "setURL:", *(void *)(a1 + 32));
  -[_LSAppLinkOpenState setXPCConnection:](v2, "setXPCConnection:", *(void *)(a1 + 40));
  id v3 = *(void **)(a1 + 48);
  if (v3)
  {
    id v4 = (void *)[v3 mutableCopy];
    [v4 setObject:0 forKeyedSubscript:@"LSBlockUntilComplete"];
    [v4 setObject:0 forKeyedSubscript:@"ReferrerURL"];
    [v4 setObject:0 forKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
    id v5 = objc_alloc_init(&OBJC_CLASS____LSOpenConfiguration);
    -[_LSOpenConfiguration setFrontBoardOptions:](v5, "setFrontBoardOptions:", v4);
    [*(id *)(a1 + 48) objectForKeyedSubscript:@"ReferrerURL"];
    id v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[_LSOpenConfiguration setReferrerURL:](v5, "setReferrerURL:", v6);

    [*(id *)(a1 + 48) objectForKeyedSubscript:@"LSTargetBSServiceConnectionEndpointKey"];
    id v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[_LSOpenConfiguration setTargetConnectionEndpoint:](v5, "setTargetConnectionEndpoint:", v7);

    -[_LSAppLinkOpenState setOpenConfiguration:](v2, "setOpenConfiguration:", v5);
  }

  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  _OWORD v10[2] = ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_2;
  v10[3] = &unk_189D725B8;
  id v11 = *(id *)(a1 + 56);
  +[LSAppLink _openWithAppLink:state:completionHandler:]( &OBJC_CLASS___LSAppLink,  "_openWithAppLink:state:completionHandler:",  0LL,  v2,  v10);
}

void sub_183F445B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_2( uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    v2[0] = MEMORY[0x1895F87A8];
    v2[1] = 3221225472LL;
    v2[2] = ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_3;
    v2[3] = &unk_189D767B0;
    id v3 = *(id *)(a1 + 32);
    _LSAsyncOpenContext(v2);
  }

void sub_183F44698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t ___ZL19_LSTryUniversalLinkP5NSURLP8NSStringP12NSDictionaryIS2_P11objc_objectEP15NSXPCConnectionU13block_pointerFvbE_block_invoke_3( uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void ___ZL31_LSServer_OpenApplicationCommonP8NSStringP8BSActionbP9LSAppLinkP19_LSAppLinkOpenStateP15NSXPCConnectionmP12NSDictionaryIS0_P11objc_objectEU13block_pointerFvbP7NSErrorE_block_invoke( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 code];
    if (v6)
    {
      _LSDefaultLog();
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        softLinkFBSOpenApplicationErrorCodeToString(v6);
        int v8 = (void *)objc_claimAutoreleasedReturnValue();
        int v9 = 138412290;
        uint64_t v10 = v8;
        _os_log_impl( &dword_183E58000,  v7,  OS_LOG_TYPE_DEFAULT,  "application launch failed - received error %@",  (uint8_t *)&v9,  0xCu);
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_183F447C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initFBSOpenApplicationErrorCodeToString(uint64_t a1)
{
  id v2 = (void *)FrontBoardServicesLibrary(void)::frameworkLibrary;
  if (!FrontBoardServicesLibrary(void)::frameworkLibrary)
  {
    id v2 = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    FrontBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)v2;
  }

  softLinkFBSOpenApplicationErrorCodeToString = (uint64_t (*)(uint64_t))dlsym( v2,  "FBSOpenApplicationErrorCodeToString");
  return softLinkFBSOpenApplicationErrorCodeToString(a1);
}

Class initUIActivityContinuationAction(void)
{
  Class result = objc_getClass("UIActivityContinuationAction");
  classUIActivityContinuationAction = (uint64_t)result;
  getUIActivityContinuationActionClass Class = (uint64_t (*)(void))UIActivityContinuationActionFunction;
  return result;
}

id UIActivityContinuationActionFunction(void)
{
  return (id)classUIActivityContinuationAction;
}

uint64_t _LSPersistentIdentifierCompare(void *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  size_t v4 = [a1 length];
  uint64_t v5 = [a2 length];
  uint64_t v6 = 0LL;
  if (v4 >= 0x1C && v4 == v5)
  {
    id v7 = a1;
    int v8 = (const unsigned __int8 *)[v7 bytes];
    id v9 = a2;
    uint64_t v10 = (const unsigned __int8 *)[v9 bytes];
    uint64_t v11 = (LaunchServices::PersistentIdentifier *)memcmp(v8, v10, v4);
    if (!(_DWORD)v11)
    {
      LaunchServices::PersistentIdentifier::getLog(v11);
      unint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
        _LSPersistentIdentifierCompare_cold_1();
      }
      uint64_t v6 = 100LL;
      goto LABEL_13;
    }

    if (*v8 == *v10)
    {
      id v12 = v8 + 12;
      id v13 = v10 + 12;
      id v14 = (LaunchServices::PersistentIdentifier *)uuid_compare(v12, v10 + 12);
      int v15 = (int)v14;
      LaunchServices::PersistentIdentifier::getLog(v14);
      unint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (!v15)
      {
        if (v17) {
          _LSPersistentIdentifierCompare_cold_2();
        }
        uint64_t v6 = 200LL;
        goto LABEL_13;
      }

      if (v17)
      {
        int v24 = 134219266;
        id v25 = v7;
        __int16 v26 = 2048;
        id v27 = v9;
        __int16 v28 = 1040;
        int v29 = 16;
        __int16 v30 = 2096;
        id v31 = v12;
        __int16 v32 = 1040;
        int v33 = 16;
        __int16 v34 = 2096;
        id v35 = v13;
        uint64_t v18 = "Persistent identifiers %p and %p have different databases (%{uuid_t}.16P vs. %{uuid_t}.16P)";
        id v19 = v16;
        uint32_t v20 = 54;
LABEL_19:
        _os_log_debug_impl(&dword_183E58000, v19, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v24, v20);
      }
    }

    else
    {
      LaunchServices::PersistentIdentifier::getLog(v11);
      unint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        int v22 = *v8;
        int v23 = *v10;
        int v24 = 134218752;
        id v25 = v7;
        __int16 v26 = 2048;
        id v27 = v9;
        __int16 v28 = 1024;
        int v29 = v22;
        __int16 v30 = 1024;
        LODWORD(v31) = v23;
        uint64_t v18 = "Persistent identifiers %p and %p have different versions (%u vs. %u)";
        id v19 = v16;
        uint32_t v20 = 34;
        goto LABEL_19;
      }
    }

    uint64_t v6 = 0LL;
LABEL_13:
  }

  return v6;
}

id LaunchServices::PersistentIdentifier::getLog(LaunchServices::PersistentIdentifier *this)
{
  return (id)LaunchServices::PersistentIdentifier::getLog(void)::result;
}

__CFString *_LSPersistentIdentifierGetDebugDescription(void *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unint64_t v2 = [a1 length];
  if (v2 < 0x1C)
  {
    uint64_t v10 = 0LL;
  }

  else
  {
    unint64_t v3 = v2;
    id v4 = a1;
    uint64_t v5 = (unsigned __int8 *)[v4 bytes];
    uuid_unparse(v5 + 12, out);
    uint64_t v6 = (void *)objc_msgSend( objc_alloc(MEMORY[0x189607940]),  "initWithFormat:",  @"<LSPersistentIdentifier %p> { v = %u, t = 0x%llx, u = 0x%llx, db = %s",  v4,  *v5,  *((unsigned int *)v5 + 2),  *((unsigned int *)v5 + 1),  out);
    unint64_t v7 = v3 - 28;
    if (v7)
    {
      int v8 = (void *)[objc_alloc(MEMORY[0x189603F48]) initWithBytesNoCopy:v5 + 28 length:v7 freeWhenDone:0];
      [v8 description];
      id v9 = (void *)objc_claimAutoreleasedReturnValue();
      [v6 appendFormat:@", %@", v9];
    }

    [v6 appendString:@" }"];
    uint64_t v10 = (__CFString *)[v6 copy];
  }

  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = &stru_189D7B4C8;
  }
  id v12 = v11;

  return v12;
}

void sub_183F44C8C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

id _LSPersistentIdentifierGetKnowledgeUUIDInternal(void *a1)
{
  if ((unint64_t)[a1 length] <= 0x1B)
  {
    [MEMORY[0x1896077D8] currentHandler];
    id v4 = (void *)objc_claimAutoreleasedReturnValue();
    [NSString stringWithUTF8String:"NSUUID *_LSPersistentIdentifierGetKnowledgeUUIDInternal(const __strong LSPersistentIdentifier _Nonnull)"];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( v4,  "handleFailureInFunction:file:lineNumber:description:",  v5,  @"LSPersistentIdentifier.mm",  102,  @"persistent identifier of length %zu is too short to extract database UUID!",  objc_msgSend(a1, "length"));
  }

  uint64_t v2 = [a1 bytes];
  return (id)[objc_alloc(MEMORY[0x189607AB8]) initWithUUIDBytes:v2 + 12];
}

void sub_183F44D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPersistentIdentifierGetKnowledgeUUID4CoreDevice(void *a1)
{
  if ((unint64_t)[a1 length] < 0x1C)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    _LSPersistentIdentifierGetKnowledgeUUIDInternal(a1);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id _LSPersistentIdentifierGetSequenceNumber4CoreDevice(void *a1)
{
  if ((unint64_t)[a1 length] < 0x24)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    [MEMORY[0x189607968] numberWithUnsignedLongLong:_LSApplicationRecordPersistentIdentifierGetSequenceNumberInternal(a1)];
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

void ___ZN14LaunchServices20PersistentIdentifierL6getLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.launchservices", "record-pi");
  id v1 = (void *)LaunchServices::PersistentIdentifier::getLog(void)::result;
  LaunchServices::PersistentIdentifier::getLog(void)::Class result = (uint64_t)v0;
}

  ;
}

uint64_t _LSPlistAdd(uint64_t a1, void *a2)
{
  id v4 = (void *)MEMORY[0x186E2A59C]();
  uint64_t v5 = 0LL;
  if (a1 && a2)
  {
    if (_NSIsNSDictionary())
    {
      _LSPlistCompact(a2);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
      unint64_t v7 = v6;
      if (v6)
      {
        [v6 length];
        [v7 bytes];
        uint64_t v5 = CSStoreAllocUnitWithData();
      }

      else
      {
        uint64_t v5 = 0LL;
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }
  }

  objc_autoreleasePoolPop(v4);
  return v5;
}

void sub_183F44F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPlistRemove(uint64_t result, int a2)
{
  if (result)
  {
    if (a2) {
      return CSStoreFreeUnit();
    }
  }

  return result;
}

void _LSPlistGetVisualizationFunctions(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = LaunchServices::PropertyLists::display;
  a1[2] = 0LL;
}

BOOL LaunchServices::PropertyLists::display( LaunchServices::PropertyLists *this, LSContext *a2, uint64_t a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  int v8 = (void *)objc_claimAutoreleasedReturnValue();
  _LSPlistDataGetDictionary(v8, 0LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue();

  uint64_t v10 = (void *)[v9 mutableCopy];
  if (v10)
  {
    [v10 removeObjectForKey:*MEMORY[0x189604AA8]];
    uint64_t v11 = [v10 count];
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1616LL), a3, 0LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::format(a4, 0LL, @"%lu values (%@)", v11, v12);

    [v10 description];
    id v13 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (v13) {
      CSStore2::AttributedStringWriter::string(a4, v13);
    }
  }

  return v10 != 0LL;
}

void sub_183F450C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistCompact(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)MEMORY[0x186E2A59C]();
    BOOL v9 = 0;
    unint64_t v3 = (void *)_LSPlistCreateTransformed(a1, (uint64_t)_LSPlistCompactString, &v9);
    [MEMORY[0x1896079E8] dataWithPropertyList:v3 format:200 options:0 error:0];
    id v4 = (void *)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = v4;
    if (v4 && v9)
    {
      objc_msgSend(MEMORY[0x189603FB8], "dataWithCapacity:", objc_msgSend(v4, "length") + 4);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
      [v6 appendBytes:&_LSPlistCompactedMarker length:4];
      [v6 appendData:v5];
      uint64_t v7 = [v6 copy];

      uint64_t v5 = (void *)v7;
    }

    objc_autoreleasePoolPop(v2);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_183F451F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _LSPlistHintCopy(void *a1)
{
  return (id)[a1 copy];
}

void sub_183F452C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL36_LSPlistLookUpIndexOfCompactedStringP8NSString_block_invoke()
{
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  for (unint64_t i = 0LL; i != 256; ++i)
  {
    _LSPlistLookUpCompactedStringByIndex(i);
    id v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (v1)
    {
      [MEMORY[0x189607968] numberWithUnsignedInteger:i];
      uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue();
      [v5 setObject:v2 forKeyedSubscript:v1];
    }
  }

  uint64_t v3 = [v5 copy];
  id v4 = (void *)_LSPlistLookUpIndexOfCompactedString(NSString *)::indexes;
  _LSPlistLookUpIndexOfCompactedString(NSString *)::indexes = v3;
}

void sub_183F453E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZL24_LSPlistGetCommonStringsv_block_invoke()
{
  os_log_t v0 = (void *)MEMORY[0x186E2A59C]();
  [MEMORY[0x189603FA8] array];
  id v1 = (void *)objc_claimAutoreleasedReturnValue();
  [v1 addObject:@"UISupportedInterfaceOrientations"];
  [v1 addObject:@"com.apple.security.exception.mach-lookup.global-name"];
  [v1 addObject:@"UIInterfaceOrientationLandscapeRight"];
  [v1 addObject:@"UIInterfaceOrientationPortrait"];
  [v1 addObject:@"CFBundleInfoDictionaryVersion"];
  [v1 addObject:@"UIInterfaceOrientationLandscapeLeft"];
  [v1 addObject:@"CFBundleSupportedPlatforms"];
  [v1 addObject:@"CFBundleShortVersionString"];
  [v1 addObject:@"CFBundleDevelopmentRegion"];
  [v1 addObject:@"com.apple.private.security.container-required"];
  [v1 addObject:@"CFBundleNumericVersion"];
  [v1 addObject:@"BuildMachineOSBuild"];
  [v1 addObject:@"CFBundlePackageType"];
  [v1 addObject:@"com.apple.springboard.opensensitiveurl"];
  [v1 addObject:@"CFBundleExecutable"];
  [v1 addObject:@"CFBundleIdentifier"];
  [v1 addObject:@"UIRequiredDeviceCapabilities"];
  [v1 addObject:@"UIViewControllerBasedStatusBarAppearance"];
  [v1 addObject:@"DTPlatformVersion"];
  [v1 addObject:@"com.apple.security.exception.files.home-relative-path.read-write"];
  [v1 addObject:@"MinimumOSVersion"];
  [v1 addObject:@"com.apple.UIKit.vends-view-services"];
  [v1 addObject:@"CFBundleSignature"];
  [v1 addObject:@"CFBundleVersion"];
  [v1 addObject:@"DTPlatformBuild"];
  [v1 addObject:@"CanInheritApplicationStateFromOtherProcesses"];
  [v1 addObject:@"LSRequiresIPhoneOS"];
  [v1 addObject:@"DTPlatformName"];
  [v1 addObject:@"UIDeviceFamily"];
  [v1 addObject:@"com.apple.private.tcc.allow"];
  [v1 addObject:@"CFBundleDisplayName"];
  [v1 addObject:@"com.apple.private.coreservices.canmaplsdatabase"];
  [v1 addObject:@"com.apple.security.exception.shared-preference.read-write"];
  [v1 addObject:@"DTXcodeBuild"];
  [v1 addObject:@"UIViewServiceUsesNSXPCConnection"];
  [v1 addObject:@"UILaunchStoryboardName"];
  [v1 addObject:@"UIInterfaceOrientationPortraitUpsideDown"];
  [v1 addObject:@"com.apple.itunesstored.private"];
  [v1 addObject:@"com.apple.accounts.appleaccount.fullaccess"];
  [v1 addObject:@"com.apple.private.accounts.allaccounts"];
  [v1 addObject:@"CFBundleName"];
  [v1 addObject:@"DTCompiler"];
  [v1 addObject:@"DTSDKBuild"];
  [v1 addObject:@"keychain-access-groups"];
  [v1 addObject:@"CFBundlePrimaryIcon"];
  [v1 addObject:@"com.apple.locationd.effective_bundle"];
  [v1 addObject:@"com.apple.Contacts.database-allow"];
  [v1 addObject:@"DTSDKName"];
  [v1 addObject:@"com.apple.security.exception.files.absolute-path.read-write"];
  [v1 addObject:@"kTCCServiceAddressBook"];
  [v1 addObject:@"com.apple.CommCenter.fine-grained"];
  [v1 addObject:@"com.apple.coremedia.allow-protected-content-playback"];
  [v1 addObject:@"com.apple.springboard.openurlinbackground"];
  [v1 addObject:@"com.apple.private.canModifyAppLinkPermissions"];
  [v1 addObject:@"iPhoneOS"];
  [v1 addObject:@"com.apple.frontboard.launchapplications"];
  [v1 addObject:@"application-identifier"];
  [v1 addObject:@"SBMatchingApplicationGenres"];
  [v1 addObject:@"com.apple.private.tcc.allow.overridable"];
  [v1 addObject:@"UIBackgroundModes"];
  [v1 addObject:@"com.apple.security.exception.files.absolute-path.read-only"];
  [v1 addObject:@"com.apple.security.exception.files.home-relative-path.read-only"];
  [v1 addObject:@"com.apple.private.appleaccount.app-hidden-from-icloud-settings"];
  [v1 addObject:@"com.apple.telephonyutilities.callservicesdaemon.callprovidermanager"];
  [v1 addObject:@"DTXcode"];
  [v1 addObject:@"com.apple.QuartzCore.secure-mode"];
  [v1 addObject:@"platform-application"];
  [v1 addObject:@"com.apple.private.corerecents"];
  [v1 addObject:@"CFBundleIcons"];
  [v1 addObject:@"NSLocationWhenInUseUsageDescription"];
  [v1 addObject:@"kTCCServicePhotos"];
  [v1 addObject:@"com.apple.wifi.manager-access"];
  [v1 addObject:@"CFBundleURLTypes"];
  [v1 addObject:@"UIApplicationSystemWindowsSecureKey"];
  [v1 addObject:@"com.apple.telephonyutilities.callservicesd"];
  [v1 addObject:@"com.apple.private.MobileGestalt.AllowedProtectedKeys"];
  [v1 addObject:@"com.apple.private.canGetAppLinkInfo"];
  [v1 addObject:@"com.apple.managedconfiguration.profiled-access"];
  [v1 addObject:@"SBMachServices"];
  [v1 addObject:@"com.apple.coreaudio.allow-amr-decode"];
  [v1 addObject:@"com.apple.telephonyutilities.callservicesdaemon.callstatecontroller"];
  [v1 addObject:@"SBAppTags"];
  [v1 addObject:@"com.apple.authkit.client.internal"];
  [v1 addObject:@"kTCCServiceCamera"];
  [v1 addObject:@"com.apple.SystemConfiguration.SCPreferences-write-access"];
  [v1 addObject:@"UIRequiresFullScreen"];
  [v1 addObject:@"com.apple.private.suggestions.contacts"];
  [v1 addObject:@"com.apple.developer.icloud-services"];
  [v1 addObject:@"com.apple.authkit.client.private"];
  [v1 addObject:@"com.apple.developer.icloud-container-identifiers"];
  [v1 addObject:@"com.apple.coreduetd.allow"];
  [v1 addObject:@"com.apple.developer.ubiquity-kvstore-identifier"];
  [v1 addObject:@"com.apple.private.coreservices.canopenactivity"];
  [v1 addObject:@"com.apple.springboard.activateRemoteAlert"];
  [v1 addObject:@"NSUserActivityTypes"];
  [v1 addObject:@"kTCCServiceMediaLibrary"];
  [v1 addObject:@"com.apple.accounts.appleidauthentication.defaultaccess"];
  [v1 addObject:@"com.apple.developer.icloud-container-environment"];
  [v1 addObject:@"com.apple.private.assets.accessible-asset-types"];
  [v1 addObject:@"com.apple.private.imcore.imremoteurlconnection"];
  [v1 addObject:@"com.apple.springboard.launchapplications"];
  [v1 addObject:@"CAProcessCanAccessGPU"];
  [v1 addObject:@"kTCCServiceMicrophone"];
  [v1 addObject:@"_LSSupportsRemoval"];
  [v1 addObject:@"UIApplicationShortcutItems"];
  [v1 addObject:@"com.apple.private.suggestions"];
  [v1 addObject:@"com.apple.springboard.shortcutitems.customimage"];
  [v1 addObject:@"SBUninstallIconOverrideStringsFile"];
  [v1 addObject:@"kTCCServiceCalendar"];
  [v1 addObject:@"com.apple.private.persona.read"];
  [v1 addObject:@"com.apple.mobile.deleted.AllowFreeSpace"];
  [v1 addObject:@"com.apple.SystemConfiguration.SCDynamicStore-write-access"];
  [v1 addObject:@"com.apple.springboard.allowallcallurls"];
  [v1 addObject:@"com.apple.security.exception.shared-preference.read-only"];
  [v1 addObject:@"com.apple.security.application-groups"];
  [v1 addObject:@"SBIsLaunchableDuringSetup"];
  [v1 addObject:@"com.apple.private.webinspector.allow-remote-inspection"];
  [v1 addObject:@"com.apple.locationd.usage_oracle"];
  [v1 addObject:@"CFBundleAllowMixedLocalizations"];
  [v1 addObject:@"com.apple.private.game-center.bypass-authentication"];
  [v1 addObject:@"com.apple.avfoundation.allow-still-image-capture-shutter-sound-manipulation"];
  [v1 addObject:@"hidden"];
  [v1 addObject:@"com.apple.mobilemail.mailservices"];
  [v1 addObject:@"armv7"];
  [v1 addObject:@"com.apple.coretelephony.Identity.get"];
  [v1 addObject:@"com.apple.private.healthkit.medicaliddata"];
  [v1 addObject:@"com.apple.coreduetd.people"];
  [v1 addObject:@"com.apple.private.hsa-authentication-processing"];
  [v1 addObject:@"com.apple.private.mobileinstall.upgrade-enabled"];
  [v1 addObject:@"com.apple.private.corespotlight.internal"];
  [v1 addObject:@"com.apple.springboard.appbackgroundstyle"];
  [v1 addObject:@"com.apple.private.subscriptionservice.internal"];
  [v1 addObject:@"com.apple.private.bmk.allow"];
  [v1 addObject:@"com.apple.security.exception.iokit-user-client-class"];
  [v1 addObject:@"com.apple.private.lockdown.finegrained-get"];
  [v1 addObject:@"com.apple.private.mobileinstall.allowedSPI"];
  [v1 addObject:@"CoreSpotlightContinuation"];
  [v1 addObject:@"CoreSpotlightActions"];
  [v1 addObject:@"com.apple.accounts.facebook.defaultaccess"];
  [v1 addObject:@"com.apple.developer.pass-type-identifiers"];
  [v1 addObject:@"com.apple.locationd.authorizeapplications"];
  [v1 addObject:@"com.apple.private.network.socket-delegate"];
  [v1 addObject:@"com.apple.QuartzCore.global-capture"];
  [v1 addObject:@"com.apple.media.ringtones.read-only"];
  [v1 addObject:@"com.apple.managedconfiguration.profiled.configurationprofiles"];
  [v1 addObject:@"com.apple.coremedia.allow-mpeg4streaming"];
  [v1 addObject:@"com.apple.private.cloudkit.systemService"];
  [v1 addObject:@"com.apple.springboard.openurlswhenlocked"];
  [v1 addObject:@"SBIconVisibilitySetByAppPreference"];
  [v1 addObject:@"com.apple.private.launchservices.suppresscustomschemeprompt"];
  [v1 addObject:@"com.apple.private.corespotlight.search.internal"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.lsd.iconscache/Library/Caches/com.apple.IconsCache/"];
  [v1 addObject:@"com.apple.developer.healthkit"];
  [v1 addObject:@"CFBundleDocumentTypes"];
  [v1 addObject:@"aps-connection-initiate"];
  [v1 addObject:@"com.apple.private.communicationsfilter"];
  [v1 addObject:@"com.apple.private.social.facebook.like"];
  [v1 addObject:@"com.apple.keystore.device"];
  [v1 addObject:@"com.apple.springboard.activateawayviewplugins"];
  [v1 addObject:@"com.apple.springboard.statusbarstyleoverrides"];
  [v1 addObject:@"fairplay-client"];
  [v1 addObject:@"UIStatusBarStyle"];
  [v1 addObject:@"com.apple.security.system-groups"];
  [v1 addObject:@"com.apple.visualvoicemail.client"];
  [v1 addObject:@"UIMainStoryboardFile"];
  [v1 addObject:@"com.apple.certificates"];
  [v1 addObject:@"com.apple.videoconference.allow-conferencing"];
  [v1 addObject:@"com.apple.appstored.xpc.updates"];
  [v1 addObject:@"com.apple.private.externalaccessory.showallaccessories"];
  [v1 addObject:@"com.apple.private.librarian.container-proxy"];
  [v1 addObject:@"*.pass.com.apple.itunes.storecredit"];
  [v1 addObject:@"access-call-providers"];
  [v1 addObject:@"com.apple.hsa-authentication-server"];
  [v1 addObject:@"NSPrincipalClass"];
  [v1 addObject:@"UTExportedTypeDeclarations"];
  [v1 addObject:@"com.apple.assistant.dictation.prerecorded"];
  [v1 addObject:@"com.apple.private.game-center"];
  [v1 addObject:@"com.apple.safari.credit-cards"];
  [v1 addObject:@"com.apple.CoreRoutine.LocationOfInterest"];
  [v1 addObject:@"com.apple.developer.ubiquity-container-identifiers"];
  [v1 addObject:@"com.apple.private.allow-explicit-graphics-priority"];
  [v1 addObject:@"com.apple.seld.tsmmanager"];
  [v1 addObject:@"com.apple.springboard.wallpaperAnimationSuspension"];
  [v1 addObject:@"com.apple.icloud.fmfd.access"];
  [v1 addObject:@"com.apple.nanosystemsettings"];
  [v1 addObject:@"com.apple.backboardd.launchapplications"];
  [v1 addObject:@"SKRespectApplicationUserInterfaceLayoutDirection"];
  [v1 addObject:@"com.apple.nfcd.hwmanager"];
  [v1 addObject:@"com.apple.private.healthkit.authorization_bypass"];
  [v1 addObject:@"SBAppUsesLocalNotifications"];
  [v1 addObject:@"com.apple.private.ids.messaging.urgent-priority"];
  [v1 addObject:@"com.apple.private.ids.messaging"];
  [v1 addObject:@"com.apple.private.persona.write"];
  [v1 addObject:@"com.apple.security.temporary-exception.mach-lookup.global-name"];
  [v1 addObject:@"com.apple.companionappd.connect.allow"];
  [v1 addObject:@"com.apple.icloud.findmydeviced.access"];
  [v1 addObject:@"com.apple.mediastream.mstreamd-access"];
  [v1 addObject:@"com.apple.private.security.no-sandbox"];
  [v1 addObject:@"com.apple.private.hid.client.service-protected"];
  [v1 addObject:@"unboundedTaskCompletion"];
  [v1 addObject:@"com.apple.TextInput.rdt.me"];
  [v1 addObject:@"com.apple.identities"];
  [v1 addObject:@"com.apple.private.alloy.passbook.provisioning"];
  [v1 addObject:@"kTCCServiceReminders"];
  [v1 addObject:@"com.apple.backboardd.hostCanRequireTouchesFromHostedContent"];
  [v1 addObject:@"com.apple.launchservices.receivereferrerrurl"];
  [v1 addObject:@"com.apple.private.accounts.customaccesssinfo"];
  [v1 addObject:@"com.apple.radios.plist"];
  [v1 addObject:@"com.apple.locationd.prompt_behavior"];
  [v1 addObject:@"/Library/Preferences/com.apple.mobilephone.speeddial.plist"];
  [v1 addObject:@"com.apple.avfoundation.allow-shallow-depth-of-field-effect"];
  [v1 addObject:@"com.apple.excludes-extensions"];
  [v1 addObject:@"com.apple.private.ubiquity-additional-kvstore-identifiers"];
  [v1 addObject:@"UIStatusBarHidden"];
  [v1 addObject:@"com.apple.familycircle.agent"];
  [v1 addObject:@"com.apple.icloud.fmfd"];
  [v1 addObject:@"com.apple.mobile.keybagd.xpc"];
  [v1 addObject:@"com.apple.payment.all-access"];
  [v1 addObject:@"UIApplicationShortcutItemsVersion"];
  [v1 addObject:@"com.apple.bulletinboard.utilities"];
  [v1 addObject:@"com.apple.notificationcenter.widgetcontrollerhascontent"];
  [v1 addObject:@"com.apple.private.cloudkit.setEnvironment"];
  [v1 addObject:@"UIApplicationShortcutWidget"];
  [v1 addObject:@"com.apple.private.healthkit"];
  [v1 addObject:@"com.apple.cards.all-access"];
  [v1 addObject:@"com.apple.managedconfiguration.profiled"];
  [v1 addObject:@"com.apple.springboard.activateassistant"];
  [v1 addObject:@"com.apple.keystore.stash.access"];
  [v1 addObject:@"com.apple.routined.registration"];
  [v1 addObject:@"SBStarkCapable"];
  [v1 addObject:@"com.apple.mobilesafari"];
  [v1 addObject:@"/Media/PhotoData/"];
  [v1 addObject:@"UIBackgroundStyle"];
  [v1 addObject:@"/private/var/mobile/Library/Preferences/com.apple.restrictionspassword.plist"];
  [v1 addObject:@"DataProtectionClass"];
  [v1 addObject:@"SBIconVisibilityDefaultVisible"];
  [v1 addObject:@"UIStatusBarTintParameters"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationDetails.plist"];
  [v1 addObject:@"com.apple.intents.extension.discovery"];
  [v1 addObject:@"com.apple.private.healthkit.authorization_manager"];
  [v1 addObject:@"com.apple.passes.add-silently"];
  [v1 addObject:@"com.apple.private.tcc.manager"];
  [v1 addObject:@"com.apple.developer.extension-host.photo-editing"];
  [v1 addObject:@"com.apple.homekit.private-spi-access"];
  [v1 addObject:@"com.apple.nano.nanoregistry.pairunpairobliterate"];
  [v1 addObject:@"com.apple.private.suggestions.events"];
  [v1 addObject:@"com.apple.springboard.allowIconVisibilityChanges"];
  [v1 addObject:@"com.apple.private.ids.idquery-cache"];
  [v1 addObject:@"com.apple.private.ind.client"];
  [v1 addObject:@"continuous"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/MDMAppManagement.plist"];
  [v1 addObject:@"SBLaunchSuspendedAlways"];
  [v1 addObject:@"com.apple.private.can-load-any-content-blocker"];
  [v1 addObject:@"com.apple.springboard.setWantsLockButtonEvents"];
  [v1 addObject:@"com.apple.NPKCompanionAgent.client"];
  [v1 addObject:@"seatbelt-profiles"];
  [v1 addObject:@"/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/UserSettings.plist"];
  uint64_t v2 = (void *)[v1 copy];

  objc_autoreleasePoolPop(v0);
  if (v2)
  {
    uint64_t v3 = [objc_alloc(MEMORY[0x189603FF0]) initWithArray:v2];
    id v4 = (void *)_LSPlistGetCommonStrings(void)::result;
    _LSPlistGetCommonStrings(void)::Class result = v3;
  }

  if (!_LSPlistGetCommonStrings(void)::result)
  {
    _LSDefaultLog();
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      ___ZL24_LSPlistGetCommonStringsv_block_invoke_cold_1(v5);
    }

    id v6 = objc_alloc_init(MEMORY[0x189603FF0]);
    uint64_t v7 = (void *)_LSPlistGetCommonStrings(void)::result;
    _LSPlistGetCommonStrings(void)::Class result = (uint64_t)v6;
  }
}

void sub_183F464E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL36_LSPlistLookUpCompactedStringByIndexm_block_invoke()
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  [MEMORY[0x189603FA8] arrayWithCapacity:256];
  os_log_t v0 = (void *)objc_claimAutoreleasedReturnValue();
  for (unint64_t i = 0LL; i != 256; ++i)
  {
    uint64_t v2 = v8;
    unint64_t v3 = i;
    memset(v8, 0, sizeof(v8));
    do
    {
      *v2++ = _ZZZL36_LSPlistLookUpCompactedStringByIndexmEUb_E12characterSet[v3 & 0x3F];
      BOOL v4 = v3 > 0x3F;
      v3 >>= 6;
    }

    while (v4);
    [NSString stringWithUTF8String:v8];
    id v5 = (void *)objc_claimAutoreleasedReturnValue();
    [v0 addObject:v5];
  }

  uint64_t v6 = [v0 copy];
  uint64_t v7 = (void *)_LSPlistLookUpCompactedStringByIndex(unsigned long)::strings;
  _LSPlistLookUpCompactedStringByIndex(unsigned long)::strings = v6;
}

void sub_183F46608( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void ___ZL25_LSPlistCreateTransformedP12NSDictionaryIP8NSStringP11objc_objectEPFS1_S1_PbES6__block_invoke( uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  (*(void (**)(id, uint64_t))(a1 + 48))(v5, *(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();

  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v34 = 0LL;
  id v35 = &v34;
  uint64_t v36 = 0x2020000000LL;
  char v37 = 0;
  if (_NSIsNSArray())
  {
    uint64_t v30 = 0LL;
    id v31 = &v30;
    uint64_t v32 = 0x2020000000LL;
    char v33 = 0;
    uint64_t v10 = MEMORY[0x1895F87A8];
    uint64_t v23 = MEMORY[0x1895F87A8];
    uint64_t v24 = 3221225472LL;
    id v25 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke;
    __int16 v26 = &unk_189D77AC8;
    __int16 v28 = &v30;
    uint64_t v29 = v8;
    id v27 = &v34;
    [v6 enumerateObjectsUsingBlock:&v23];
    if (*((_BYTE *)v31 + 24))
    {
      uint64_t v16 = v10;
      uint64_t v17 = 3221225472LL;
      uint64_t v18 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_2;
      id v19 = &unk_189D77AF0;
      uint64_t v21 = &v34;
      uint64_t v22 = v8;
      id v11 = (id)objc_msgSend( objc_alloc(MEMORY[0x189603FA8]),  "initWithCapacity:",  objc_msgSend(v6, "count"));
      id v20 = v11;
      [v6 enumerateObjectsUsingBlock:&v16];
      uint64_t v12 = objc_msgSend(v11, "copy", v16, v17, v18, v19);
LABEL_7:
      id v14 = (id)v12;

      goto LABEL_9;
    }

    goto LABEL_8;
  }

  if (_NSIsNSDictionary())
  {
    uint64_t v30 = 0LL;
    id v31 = &v30;
    uint64_t v32 = 0x2020000000LL;
    char v33 = 0;
    uint64_t v13 = MEMORY[0x1895F87A8];
    uint64_t v23 = MEMORY[0x1895F87A8];
    uint64_t v24 = 3221225472LL;
    id v25 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_3;
    __int16 v26 = &unk_189D77B18;
    __int16 v28 = &v30;
    uint64_t v29 = v8;
    id v27 = &v34;
    [v6 enumerateKeysAndObjectsUsingBlock:&v23];
    if (*((_BYTE *)v31 + 24))
    {
      uint64_t v16 = v13;
      uint64_t v17 = 3221225472LL;
      uint64_t v18 = ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_4;
      id v19 = &unk_189D77AA0;
      uint64_t v21 = &v34;
      uint64_t v22 = v8;
      id v11 = (id)objc_msgSend( objc_alloc(MEMORY[0x189603FC8]),  "initWithCapacity:",  objc_msgSend(v6, "count"));
      id v20 = v11;
      [v6 enumerateKeysAndObjectsUsingBlock:&v16];
      uint64_t v12 = objc_msgSend(v11, "copy", v16, v17, v18, v19);
      goto LABEL_7;
    }

void sub_183F468F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 112), 8);

  _Unwind_Resume(a1);
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke( uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  if (_NSIsNSString())
  {
    (*(void (**)(void *, uint64_t))(a1 + 48))(a2, *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7 != a2)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      *a4 = 1;
    }
  }

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_2( uint64_t a1, void *a2)
{
  id v6 = a2;
  int v3 = _NSIsNSString();
  id v4 = v6;
  if (v3)
  {
    uint64_t v5 = (*(void (**)(id, uint64_t))(a1 + 48))(v6, *(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

    id v4 = (id)v5;
  }

  id v7 = v4;
  objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_183F46A48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_3( uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8 != a2
    || _NSIsNSString()
    && ((*(void (**)(void *, uint64_t))(a1 + 48))(a3, *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL),
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v9,
        v9 != a3))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

void ___ZL30_LSPlistCreateTransformedValueP11objc_objectPFP8NSStringS2_PbES3__block_invoke_4( uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  (*(void (**)(id, uint64_t))(a1 + 48))(v5, *(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  id v8 = (id)objc_claimAutoreleasedReturnValue();

  if (_NSIsNSString())
  {
    uint64_t v7 = (*(void (**)(id, uint64_t))(a1 + 48))(v6, *(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

    id v6 = (id)v7;
  }

  [*(id *)(a1 + 32) setObject:v6 forKey:v8];
}

void sub_183F46BBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _LSGetPluginNotificationAndIconCacheQueue()
{
  if (_LSGetPluginNotificationAndIconCacheQueue::once != -1) {
    dispatch_once(&_LSGetPluginNotificationAndIconCacheQueue::once, &__block_literal_global_50);
  }
  return (id)_LSGetPluginNotificationAndIconCacheQueue::result;
}

void LSPluginSendNotification(void *a1, uint64_t a2, const void *a3)
{
  id v5 = a1;
  if (CFDictionaryGetCount((CFDictionaryRef)a3) >= 1 && -[_LSDatabase isSeeded]((uint64_t)v5))
  {
    _LSDatabaseCommit((uint64_t)v5);
    CFRetain(a3);
    _LSGetPluginNotificationAndIconCacheQueue();
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 3221225472LL;
    v7[2] = __LSPluginSendNotification_block_invoke;
    void v7[3] = &__block_descriptor_48_e5_v8__0l;
    void v7[4] = a2;
    void v7[5] = a3;
    dispatch_async(v6, v7);
  }
}

void sub_183F46D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __LSPluginSendNotification_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (void *)MEMORY[0x186E2A59C]();
  _LSDefaultLog();
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( &dword_183E58000,  v3,  OS_LOG_TYPE_INFO,  "sending plugin notification %@ with %@",  (uint8_t *)&v7,  0x16u);
  }

  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotificationWithOptions( DistributedCenter,  *(CFNotificationName *)(a1 + 32),  0LL,  *(CFDictionaryRef *)(a1 + 40),  2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  objc_autoreleasePoolPop(v2);
}

void LSPluginAddInfoToPayloadDict(void *a1, __CFDictionary *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  id v8 = a1;
  __int16 v9 = v8;
  if (a5)
  {
    id v10 = v8;
    if (_LSGetPlugin((uint64_t)v10, a3))
    {
      uint64_t v11 = (void *)_CSStringCopyCFString();
      if (_LSIsNewsWidgetBundleIdentifier(v11))
      {
        +[LSApplicationRestrictionsManager sharedInstance]();
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue();
        BOOL v13 = -[LSApplicationRestrictionsManager isAppExtensionRestricted:]((BOOL)v12, v11);

        if (v13)
        {
          _LSDefaultLog();
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v27[0]) = 138412290;
            *(void *)((char *)v27 + 4) = v11;
            _os_log_impl( &dword_183E58000,  v14,  OS_LOG_TYPE_DEFAULT,  "plugin %@ is restricted for notifications",  (uint8_t *)v27,  0xCu);
          }

          goto LABEL_33;
        }
      }
    }
  }

  id v15 = v9;
  else {
    uint64_t v16 = 0LL;
  }

  id v17 = v15;
  uint64_t v18 = _LSGetPlugin((uint64_t)v17, a3);
  if (v18)
  {
    CFMutableSetRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    id v20 = (const void *)_CSStringCopyCFString();
    uint64_t v21 = (const void *)_CSStringCopyCFString();
    uint64_t v22 = (const void *)_CSStringCopyCFString();
    __int128 v23 = *(_OWORD *)(v18 + 44);
    v27[0] = *(_OWORD *)(v18 + 28);
    v27[1] = v23;
    CFStringRef v24 = _LSVersionNumberCopyStringRepresentation(v27);
    _LSAliasGetPath(v17, *(_DWORD *)v18);
    id v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v25) {
      CFDictionaryAddValue(Mutable, @"_LSBundlePath", v25);
    }

    if (v20)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x189604E00], v20);
      CFRelease(v20);
    }

    if (v21)
    {
      CFDictionaryAddValue(Mutable, @"NSExtensionIdentifier", v21);
      CFRelease(v21);
    }

    if (v22)
    {
      CFDictionaryAddValue(Mutable, @"LSEffectiveIdentifier", v22);
      CFRelease(v22);
    }

    if (v24)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x189604E18], v24);
      CFRelease(v24);
    }

    BOOL v26 = Mutable != 0LL;
    if (v16 && Mutable)
    {
      CFDictionaryAddValue(a2, v16, Mutable);
      BOOL v26 = 1;
    }

    else if (!v16)
    {
      goto LABEL_31;
    }
  }

  else
  {

    if (!v16) {
      goto LABEL_33;
    }
    CFMutableSetRef Mutable = 0LL;
    BOOL v26 = 0;
  }

  CFRelease(v16);
LABEL_31:
  if (v26) {
    CFRelease(Mutable);
  }
LABEL_33:
}

void sub_183F47140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginAdd(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3 && *((void *)v3 + 1))
  {
    *(_DWORD *)(a2 + 24) = (int)CFAbsoluteTimeGetCurrent();
    uint64_t v5 = CSStoreAllocUnitWithData();
    if ((_DWORD)v5
      && !_LSBindableActivate(v4, v5)
      && (!*(_DWORD *)(a2 + 168) || !_LSBindableActivate(v4, v5))
      && !_LSBindableActivate(v4, v5)
      && !_LSBindableActivate(v4, v5))
    {
      _LSBindableActivate(v4, v5);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_183F472F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginComparePriority_BindableComparitor()
{
  return 0LL;
}

void _LSPluginRemove(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    if (a2)
    {
      if (*((void *)v3 + 1))
      {
        uint64_t v5 = (int *)_LSGetPlugin((uint64_t)v3, a2);
        if (v5)
        {
          int v17 = v5[24];
          int v18 = *v5;
          unsigned int v11 = v5[26];
          unsigned int v12 = v5[28];
          int v13 = v5[32];
          int v14 = v5[23];
          int v15 = v5[34];
          int v16 = v5[33];
          int v9 = v5[40];
          int v10 = v5[36];
          int v19 = v5[42];
          int v6 = v5[55];
          _LSBindableDeactivate(v4, a2);
          if (v19) {
            _LSBindableDeactivate(v4, a2);
          }
          _LSBindableDeactivate(v4, a2);
          _LSBindableDeactivate(v4, a2);
          if (v6)
          {
            uint64_t v21 = MEMORY[0x1895F87A8];
            uint64_t v22 = 3221225472LL;
            __int128 v23 = ___LSPluginRemove_block_invoke;
            CFStringRef v24 = &unk_189D724C8;
            id v25 = v4;
            _CSArrayEnumerateAllValues();
            _CSArrayDispose();
          }

          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _CSStringRelease();
          _LSPlistRemove((uint64_t)v4, v16);
          _LSPlistRemove((uint64_t)v4, v15);
          _LSDatabaseDisposeStringArray(v4, v14);
          _LSPlistRemove((uint64_t)v4, v13);
          if (v18) {
            _LSAliasRemove(v4, v18);
          }
          if (v17) {
            _LSAliasRemove(v4, v17);
          }
          LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)v12);
          LaunchServices::LocalizedString::Remove((LaunchServices::LocalizedString *)v4, (_LSDatabase *)v11);
          _LSPlistRemove((uint64_t)v4, v10);
          CSStoreFreeUnit();
          if ((v9 & 4) != 0)
          {
            int v7 = (const __CFString *)_CSStringCopyCFString();
            if (v7)
            {
              int v20 = 0;
              uint64_t v8 = _LSPluginFindWithPlatformInfo(v4, 0LL, v7, 1, 0LL, 0, &v20, 0LL);
              if (v8 && (*(_DWORD *)(v8 + 160) & 0xC) == 8) {
                _CSStoreWriteToUnit();
              }
              CFRelease(v7);
            }
          }
        }
      }
    }
  }
}

void sub_183F476CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSGetPlugin(uint64_t a1, int a2)
{
  if (a1 && a2) {
    return CSStoreGetUnit();
  }
  else {
    return 0LL;
  }
}

uint64_t _LSPluginFindWithInfo( void *a1, const __CFString *a2, const __CFString *a3, char a4, void *a5, _DWORD *a6, void *a7)
{
  return _LSPluginFindWithPlatformInfo(a1, a2, a3, a4, a5, 0, a6, a7);
}

uint64_t _LSPluginUnregister(void *a1, int a2)
{
  id v3 = a1;
  int v4 = *(_DWORD *)(_LSGetPlugin((uint64_t)v3, a2) + 216);
  uint64_t v5 = (const void *)_CSStringCopyCFString();
  CFMutableSetRef Mutable = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  uint64_t v7 = _LSBundleGet(v3, v4);
  if (v7 && *(_DWORD *)(v7 + 460))
  {
    id v9 = v3;
    _CSArrayEnumerateAllValues();
  }

  if (v5) {
    CFRelease(v5);
  }
  LSPluginAddInfoToPayloadDict(v3, Mutable, a2, 0LL, 0);
  _LSPluginRemove(v3, a2);
  if (Mutable)
  {
    LSPluginSendNotification(v3, (uint64_t)@"com.apple.LaunchServices.pluginsunregistered", Mutable);
    CFRelease(Mutable);
  }

  return 0LL;
}

void sub_183F478BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginFindWithPlatformInfo( void *a1, const __CFString *a2, const __CFString *a3, char a4, void *a5, int a6, _DWORD *a7, void *a8)
{
  uint64_t v93 = *MEMORY[0x1895F89C0];
  id v13 = a1;
  id v14 = a5;
  uint64_t v58 = 0LL;
  id v59 = &v58;
  uint64_t v60 = 0x2020000000LL;
  int v61 = 0;
  uint64_t v54 = 0LL;
  id v55 = &v54;
  uint64_t v56 = 0x2020000000LL;
  uint64_t v57 = 0LL;
  uint64_t v50 = 0LL;
  id v51 = &v50;
  uint64_t v52 = 0x2020000000LL;
  int v53 = 0;
  uint64_t v46 = 0LL;
  uint64_t v47 = &v46;
  uint64_t v48 = 0x2020000000LL;
  uint64_t v49 = 0LL;
  v44[0] = 0LL;
  v44[1] = v44;
  v44[2] = 0x3032000000LL;
  v44[3] = __Block_byref_object_copy__28;
  uint64_t v44[4] = __Block_byref_object_dispose__28;
  id v45 = 0LL;
  if (!v13)
  {
    [MEMORY[0x1896077D8] currentHandler];
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend( NSString,  "stringWithUTF8String:",  "const LSPluginData *_LSPluginFindWithPlatformInfo(__strong LSDatabaseRef, CFStringRef, CFStringRef, LSPluginFindOp tions, FSNode *__strong, dyld_platform_t, LSPluginID *, NSError *__autoreleasing *)");
    char v33 = (void *)objc_claimAutoreleasedReturnValue();
    [v32 handleFailureInFunction:v33, @"LSPluginBundle.mm", 555, @"Invalid parameter not satisfying: %@", @"inDB != NULL" file lineNumber description];
  }

  if (a2 && (CFTypeID v15 = CFGetTypeID(a2), v15 == CFStringGetTypeID()))
  {
    CFIndex Length = CFStringGetLength(a2);
    XCFBufInitWithCFStringRange((uint64_t)v92, a2, 0LL, Length, 0);
  }

  else
  {
    XCFBufInit((uint64_t)v92);
  }

  if (a3 && (CFTypeID v17 = CFGetTypeID(a3), v17 == CFStringGetTypeID()))
  {
    CFIndex v18 = CFStringGetLength(a3);
    XCFBufInitWithCFStringRange((uint64_t)v91, a3, 0LL, v18, 0);
  }

  else
  {
    XCFBufInit((uint64_t)v91);
  }

  if (v14)
  {
    [v14 pathWithError:0];
    int v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    int v19 = 0LL;
  }

  uint64_t v43 = 0LL;
  int v42 = 0;
  if (DWORD2(v91[0])) {
    CSStringBindingFindStringAndBindings();
  }
  if (DWORD2(v92[0])) {
    CSStringBindingFindStringAndBindings();
  }
  if (v19)
  {
    int v40 = a6;
    id v36 = v13;
    BOOL v41 = (a4 & 4) != 0;
    char v37 = v19;
    id v38 = &v50;
    id v39 = &v46;
    _CSStoreEnumerateUnits();

    int v20 = &v36;
  }

  else
  {
    v63[3] = MEMORY[0x1895F87A8];
    v63[4] = 3221225472LL;
    v63[5] = ___LSPluginFindWithPlatformInfo_block_invoke_2;
    v63[6] = &unk_189D77BB0;
    id v21 = v13;
    int v85 = a6;
    __int128 v71 = v91[6];
    __int128 v72 = v91[7];
    __int128 v73 = v91[8];
    __int128 v74 = v91[9];
    __int128 v67 = v91[2];
    __int128 v68 = v91[3];
    __int128 v69 = v91[4];
    __int128 v70 = v91[5];
    __int128 v65 = v91[0];
    __int128 v66 = v91[1];
    __int128 v81 = v92[6];
    __int128 v82 = v92[7];
    __int128 v83 = v92[8];
    __int128 v84 = v92[9];
    __int128 v77 = v92[2];
    __int128 v78 = v92[3];
    __int128 v79 = v92[4];
    __int128 v80 = v92[5];
    __int128 v75 = v92[0];
    __int128 v76 = v92[1];
    int v86 = v42;
    int v87 = v43;
    BOOL v88 = (a4 & 2) != 0;
    v64[0] = v21;
    v64[1] = v44;
    BOOL v89 = (a4 & 4) != 0;
    char v90 = a4 & 1;
    v64[2] = &v58;
    v64[3] = &v54;
    v64[4] = &v50;
    v64[5] = &v46;
    _CSArrayEnumerateAllValues();
    int v20 = (id *)v64;
    if ((a4 & 1) != 0)
    {
      int v22 = *((_DWORD *)v59 + 6);
      if (v22)
      {
        uint64_t v23 = v55[3];
        if (v23)
        {
          *((_DWORD *)v51 + 6) = v22;
          v47[3] = v23;
        }
      }
    }
  }

  int v24 = *((_DWORD *)v51 + 6);
  if (v24)
  {
    if (a7) {
      *a7 = v24;
    }
  }

  else
  {
    id v25 = @"UNKNOWN";
    if (v19) {
      id v25 = v19;
    }
    if (a2) {
      id v25 = (__CFString *)a2;
    }
    if (a3) {
      id v25 = (__CFString *)a3;
    }
    BOOL v26 = v25;
    id v27 = v26;
    if (a8)
    {
      v62[0] = *MEMORY[0x189607490];
      v62[1] = @"SK";
      v63[0] = @"Unable to find this application extension record in the Launch Services database.";
      v63[1] = v26;
      v62[2] = @"IS";
      objc_msgSend( MEMORY[0x189607968],  "numberWithBool:",  objc_msgSend((id)__LSDefaultsGetSharedInstance(), "isServer"));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue();
      v63[2] = v28;
      [MEMORY[0x189603F68] dictionaryWithObjects:v63 forKeys:v62 count:3];
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue();
      _LSMakeNSErrorImpl((void *)*MEMORY[0x189607670], -10814LL, (uint64_t)"_LSPluginFindWithPlatformInfo", 691LL, v29);
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  XCFBufDestroy((uint64_t)v92);
  XCFBufDestroy((uint64_t)v91);
  uint64_t v30 = v47[3];

  _Block_object_dispose(v44, 8);
  _Block_object_dispose(&v46, 8);
  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v58, 8);

  return v30;
}

void sub_183F47F74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

uint64_t _LSPluginIsValid(void *a1, unsigned int a2, uint64_t a3, void *a4, char a5, const __CFString **a6)
{
  unsigned int v11 = a1;
  unsigned int v12 = a4;
  char v45 = 0;
  if (a3)
  {
    if (!*(_DWORD *)(a3 + 4))
    {
      if (a6) {
        *a6 = @"No container set for plugin";
      }
      _LSDefaultLog();
      int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl(&dword_183E58000, v20, OS_LOG_TYPE_DEFAULT, "ERROR: No container set for plugin", buf, 2u);
      }

      goto LABEL_23;
    }

    uint64_t v13 = _LSContainerGet();
    if (v13)
    {
      uint64_t v14 = _LSContainerCheckState(v11, *(unsigned int *)(a3 + 4), v13, &v45, 0LL);
      if ((_DWORD)v14)
      {
        objc_msgSend(NSString, "stringWithFormat:", @"_LSContainerCheckState() returned %i", v14);
        CFTypeID v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
        goto LABEL_21;
      }

      if (v45 != 1)
      {
        objc_msgSend(NSString, "stringWithFormat:", @"Container state is %i", v45);
        CFTypeID v15 = (os_log_s *)objc_claimAutoreleasedReturnValue();
LABEL_21:
        int v20 = v15;
        if (a6) {
          *a6 = (const __CFString *)v15;
        }
LABEL_23:

        goto LABEL_24;
      }

      int v21 = *(_DWORD *)(a3 + 160);
      CFTypeID v17 = (void *)_CSStringCopyCFString();
      if (_LSIsNewsWidgetBundleIdentifier(v17))
      {
        +[LSApplicationRestrictionsManager sharedInstance]();
        int v22 = (void *)objc_claimAutoreleasedReturnValue();
        BOOL v23 = -[LSApplicationRestrictionsManager isAppExtensionRestricted:]((BOOL)v22, v17);

        if (v23)
        {
          if (a6)
          {
            uint64_t v16 = 0LL;
            CFIndex v18 = 0LL;
            int v19 = @"News app extension is restricted";
            goto LABEL_14;
          }

LABEL_54:
          uint64_t v16 = 0LL;
          goto LABEL_25;
        }
      }

      else
      {
        if ((v21 & 8) != 0)
        {
          if (a6)
          {
            uint64_t v16 = 0LL;
            CFIndex v18 = 0LL;
            int v19 = @"Has override";
            goto LABEL_14;
          }

          goto LABEL_54;
        }

        if ((*(_BYTE *)(a3 + 156) & 2) != 0)
        {
          if (a6)
          {
            uint64_t v16 = 0LL;
            CFIndex v18 = 0LL;
            int v19 = @"Requires GC";
            goto LABEL_14;
          }

          goto LABEL_54;
        }

        if (v12)
        {
          _LSDatabaseGetNSStringFromString(v11);
          id v25 = (void *)objc_claimAutoreleasedReturnValue();
          _LSPlistGetDictionary(v11, *(_DWORD *)(a3 + 132), v26);
          id v27 = (void *)objc_claimAutoreleasedReturnValue();
          if (v25) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v17;
          }
          if ((((uint64_t (**)(id, void *, void *))v12)[2](v12, v28, v27) & 1) == 0)
          {
            if (a6) {
              *a6 = @"Rejected by filter block";
            }

            goto LABEL_54;
          }
        }

        uint64_t v30 = (unsigned int *)(a3 + 216);
        int v29 = *(_DWORD *)(a3 + 216);
        if (v29)
        {
          uint64_t v31 = _LSBundleGet(v11, v29);
          uint64_t v32 = v31;
          if (!v31)
          {
            _LSDefaultLog();
            uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
              _LSPluginIsValid_cold_1(a2, v30, v34);
            }

            objc_msgSend(NSString, "stringWithFormat:", @"Invalid parent app %llx", *v30);
            id v35 = (void *)objc_claimAutoreleasedReturnValue();
            id v36 = v35;
            if (a6) {
              *a6 = (const __CFString *)v35;
            }

            goto LABEL_54;
          }

          uint64_t v33 = *(void *)(v31 + 164);
          _LSDatabaseGetNSStringFromString(v11);
          CFIndex v18 = (void *)objc_claimAutoreleasedReturnValue();
          if (_LSBundleDataIsInUnsupportedLocation((uint64_t)v11, v32))
          {
            if (a6)
            {
              uint64_t v16 = 0LL;
              int v19 = @"Parent app is in an unsupported location";
              goto LABEL_14;
            }
          }

          else if ((v33 & 0x40000) != 0)
          {
            if (a6)
            {
              uint64_t v16 = 0LL;
              int v19 = @"Parent app is a placeholder";
              goto LABEL_14;
            }
          }

          else if ((a5 & 1) != 0 || (v33 & 0x400000000000LL) == 0)
          {
            uint64_t v37 = *(unsigned int *)(a3 + 20);
            if (!(_DWORD)v37 || (_DWORD)v37 == 3 || dyld_get_base_platform() == 3)
            {
              if ((v33 & 0x40000000000LL) != 0) {
                goto LABEL_41;
              }
              +[LSApplicationRestrictionsManager sharedInstance]();
              id v38 = (void *)objc_claimAutoreleasedReturnValue();
              [MEMORY[0x189607968] numberWithUnsignedLongLong:*(void *)(v32 + 400)];
              id v39 = (void *)objc_claimAutoreleasedReturnValue();
              if (-[LSApplicationRestrictionsManager isRatingAllowed:](v38, v39))
              {
                +[LSApplicationRestrictionsManager sharedInstance]();
                int v40 = (id *)objc_claimAutoreleasedReturnValue();
                unsigned int v41 = -[LSApplicationRestrictionsManager isApplicationRestricted:](v40, v18);

                if (!v41) {
                  goto LABEL_41;
                }
              }

              else
              {
              }

              if (a6)
              {
                uint64_t v16 = 0LL;
                int v19 = @"Blocked by ManagedConfiguration";
                goto LABEL_14;
              }
            }

            else
            {
              objc_msgSend( NSString,  "stringWithFormat:",  @"Plugin invalid plugin platform %d on platform %d",  v37,  3);
              int v42 = (void *)objc_claimAutoreleasedReturnValue();
              uint64_t v43 = v42;
              if (a6) {
                *a6 = (const __CFString *)v42;
              }
            }
          }

          else if (a6)
          {
            uint64_t v16 = 0LL;
            int v19 = @"Parent app has a parallel placeholder";
            goto LABEL_14;
          }

          uint64_t v16 = 0LL;
          goto LABEL_26;
        }
      }

      CFIndex v18 = 0LL;
LABEL_41:
      uint64_t v16 = 1LL;
      goto LABEL_26;
    }

    if (a6)
    {
      uint64_t v16 = 0LL;
      CFTypeID v17 = 0LL;
      CFIndex v18 = 0LL;
      int v19 = @"No container data for plugin";
      goto LABEL_14;
    }

                        goto LABEL_188;
                      }

                      goto LABEL_188;
                    }
                  }
                }

                else
                {
                  CFArrayGetTypeID();
                }

                __int128 v84 = 0;
                goto LABEL_168;
              }
            }

            else
            {
              CFStringGetTypeID();
            }

            __int128 v76 = DWORD2(v133);
            goto LABEL_119;
          }
        }

        else
        {
          _LSRegistrationLog();
          uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = CFArrayGetValueAtIndex(theArray, idx);
            LODWORD(v133) = 138477827;
            *(void *)((char *)&v133 + 4) = v32;
            _os_log_impl( &dword_183E58000,  v31,  OS_LOG_TYPE_ERROR,  "Unexpected value in document types array, not dictionary as expected, but %{private}@",  (uint8_t *)&v133,  0xCu);
          }
        }

void sub_183F48648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL _LSPluginCheckExtensionPoint(void *a1, unsigned int a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v7 = a1;
  int v8 = _LSExtensionPointFindWithStringID(v7, *(unsigned int *)(a3 + 172), *(unsigned int *)(a3 + 20), 0LL, 0LL, 0LL);
  id v14 = 0LL;
  BOOL v9 = _LSGetNSErrorFromOSStatusImpl(v8, &v14, (uint64_t)"_LSPluginCheckExtensionPoint", 1005LL);
  id v10 = v14;
  if (!v9)
  {
    if ((*(_BYTE *)(a3 + 156) & 1) != 0
      && [(id)__LSDefaultsGetSharedInstance() isAppleInternal])
    {
      _LSDefaultLog();
      unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        _LSDatabaseGetNSStringFromString(v7);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)__int128 buf = 138478339;
        uint64_t v16 = v13;
        __int16 v17 = 2048;
        uint64_t v18 = a2;
        __int16 v19 = 2112;
        id v20 = v10;
        _os_log_error_impl( &dword_183E58000,  v11,  OS_LOG_TYPE_ERROR,  "Plugin %{private}@ (0x%llx) has a bad extension point identifier specified in its Info.plist: %@",  buf,  0x20u);
      }
    }

    if (a4) {
      *a4 = v10;
    }
  }

  return v9;
}

void sub_183F48A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _LSPluginGetSDKDictionaryDataUnit(void *a1, int a2, uint64_t a3)
{
  id v5 = a1;
  int v6 = v5;
  if (a3 || (a3 = _LSGetPlugin((uint64_t)v5, a2)) != 0)
  {
    int v9 = 0;
    uint64_t v8 = 0LL;
    if (_LSExtensionPointFindWithStringID( v6,  *(unsigned int *)(a3 + 172),  *(unsigned int *)(a3 + 20),  0LL,  &v9,  &v8)) {
      a3 = 0LL;
    }
    else {
      a3 = *(unsigned int *)(v8 + 48);
    }
  }

  return a3;
}

void sub_183F48B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F48BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _LSPluginGetVisualizationFunctions( unsigned int *(**a1)(LaunchServices::Plugins *this, LSContext *a2, int a3)@<X8>)
{
  *a1 = LaunchServices::Plugins::getSummary;
  a1[1] = (unsigned int *(*)(LaunchServices::Plugins *, LSContext *, int))LaunchServices::Plugins::display;
  a1[2] = 0LL;
}

unsigned int *LaunchServices::Plugins::getSummary(LaunchServices::Plugins *this, LSContext *a2, int a3)
{
  int v4 = (unsigned int *)_LSGetPlugin(*(void *)this, a3);
  if (v4)
  {
    id v5 = (int *)v4;
    uint64_t v6 = LaunchServices::LocalizedString::Get(*(LaunchServices::LocalizedString **)this, (_LSDatabase *)v4[26]);
    if (!v6
      || (LaunchServices::LocalizedString::localizeUnsafely(v6, *(void **)this, 0LL),
          (int v4 = (unsigned int *)objc_claimAutoreleasedReturnValue()) == 0LL))
    {
      int v4 = (unsigned int *)_CSStringCopyCFString();
      if (!v4)
      {
        _LSAliasGetPath(*(void **)this, *v5);
        int v4 = (unsigned int *)objc_claimAutoreleasedReturnValue();
      }
    }
  }

  return v4;
}

BOOL LaunchServices::Plugins::display( LaunchServices::Plugins *this, LSContext *a2, unsigned int a3, CSStore2::AttributedStringWriter *a4, LaunchServices::DumpWriter *a5)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  uint64_t v8 = (unsigned int *)_LSGetPlugin(*(void *)this, a3);
  if (v8)
  {
    int v9 = *(void **)this;
    id v36 = 0LL;
    int IsValid = _LSPluginIsValid(v9, a3, (uint64_t)v8, 0LL, 0, (const __CFString **)&v36);
    unsigned int v11 = v36;
    unsigned int v12 = v11;
    if (!IsValid)
    {
      uint64_t v30 = MEMORY[0x1895F87A8];
      uint64_t v31 = 3221225472LL;
      uint64_t v32 = ___ZN14LaunchServices7PluginsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke;
      uint64_t v33 = &unk_189D72268;
      id v35 = a4;
      uint64_t v34 = v11;
      CSStore2::AttributedStringWriter::withWarningColors();
    }

    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1596LL), v8[1], 0LL);
    uint64_t v13 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"container", v13);

    uint64_t v14 = _LSContainerGet();
    CFTypeID v15 = (unsigned __int16 *)v14;
    if (v14)
    {
      _LSContainerStateGetDescription(*(char *)(v14 + 2));
      uint64_t v16 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, @"mount state", v16);
      [MEMORY[0x189607968] numberWithBool:(*v15 >> 1) & 1];
      __int16 v17 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(a4, @"isOnRootVolume", v17);

      [MEMORY[0x189607968] numberWithBool:(*v15 >> 4) & 1];
      uint64_t v18 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::number(a4, @"isSystemManaged", v18);
    }

    CSStore2::AttributedStringWriter::stringArray(a4, @"Mach-O UUIDs");
    LaunchServices::DumpWriter::platform(a4, @"platform", v8[5]);
    _LSSliceMaskWriteDescription(a4);
    _LSBundleBaseFlagsWriteDescription(a4);
    CSStore2::AttributedStringWriter::string(a4, @"identifier");
    CSStore2::AttributedStringWriter::string(a4, @"bundleID");
    CSStore2::AttributedStringWriter::string(a4, @"effectiveID");
    CSStore2::AttributedStringWriter::string(a4, @"teamID");
    CSStore2::AttributedStringWriter::string(a4, @"name");
    CSStore2::AttributedStringWriter::string(a4, @"displayName");
    CSStore2::AttributedStringWriter::childUnit(a4, @"localizedNames");
    CSStore2::AttributedStringWriter::childUnit(a4, @"localizedShortNames");
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 20LL), v8[54], 0LL);
    __int16 v19 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"parent", v19);

    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1600LL), *v8, 0LL);
    id v20 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"path", v20);

    LaunchServices::DumpWriter::directoryClass((uint64_t)a4, @"directory", *((unsigned __int8 *)v8 + 140));
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1600LL), v8[24], 0LL);
    uint64_t v21 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"dataContainer", v21);

    unsigned int v29 = 0;
    uint64_t v28 = 0LL;
    _LSExtensionPointFindWithStringID(*(void **)this, v8[43], v8[5], 0LL, &v29, &v28);
    CSStore2::AttributedStringWriter::link(a4, *(unsigned int *)(*(void *)this + 1608LL), v29, 0LL);
    int v22 = (NSString *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::string(a4, @"extension point ID", v22);

    CSStore2::AttributedStringWriter::string(a4, @"raw extension point ID");
    CSStore2::AttributedStringWriter::string(a4, @"extension point name");
    __int128 v23 = *(_OWORD *)(v8 + 11);
    *(_OWORD *)v40._opaque = *(_OWORD *)(v8 + 7);
    *(_OWORD *)&v40._opaque[16] = v23;
    LaunchServices::DumpWriter::version(a4, @"version", &v40);
    __int128 v24 = *(_OWORD *)(v8 + 19);
    *(_OWORD *)v39._opaque = *(_OWORD *)(v8 + 15);
    *(_OWORD *)&v39._opaque[16] = v24;
    LaunchServices::DumpWriter::version(a4, @"sdkVersion", &v39);
    CSStore2::AttributedStringWriter::string(a4, @"UUID");
    CSStore2::AttributedStringWriter::string(a4, @"CodeInfoID");
    CSStore2::AttributedStringWriter::string(a4, @"signerOrg");
    CSStore2::AttributedStringWriter::string(a4, @"signer identity");
    [MEMORY[0x189607968] numberWithUnsignedInt:v8[38]];
    id v25 = (NSNumber *)objc_claimAutoreleasedReturnValue();
    CSStore2::AttributedStringWriter::number(a4, @"code signature version", v25);

    CSStore2::AttributedStringWriter::beginFlags(a4, @"flags");
    int v37 = 255;
    char v38 = 1;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v37) = 0;
    char v38 = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v37) = 0;
    char v38 = 0;
    CSStore2::AttributedStringWriter::flag();
    LOBYTE(v37) = 0;
    char v38 = 0;
    CSStore2::AttributedStringWriter::flag();
    CSStore2::AttributedStringWriter::endFlags(a4);
    if (*((_BYTE *)v8 + 141))
    {
      _LSProfileValidationStateGetVisualizationDescription(*((unsigned __int8 *)v8 + 141));
      BOOL v26 = (NSString *)objc_claimAutoreleasedReturnValue();
      CSStore2::AttributedStringWriter::string(a4, @"validation", v26);
    }

    CSStore2::AttributedStringWriter::timestamp(a4, @"reg date", (double)(int)v8[6]);
    if (v8[33]) {
      CSStore2::AttributedStringWriter::childUnit(a4, @"entitlements");
    }
    if (v8[34]) {
      CSStore2::AttributedStringWriter::childUnit(a4, @"grpContainers");
    }
    if (v8[32]) {
      CSStore2::AttributedStringWriter::childUnit(a4, @"PKDict");
    }
    if (v8[43])
    {
      if (v29) {
        CSStore2::AttributedStringWriter::childUnit(a4, @"SDKData");
      }
      else {
        CSStore2::AttributedStringWriter::string(a4, @"SDKData", &stru_189D7B4C8);
      }
    }
  }

  return v8 != 0LL;
}

void sub_183F49330( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LaunchServices7PluginsL7displayEP9LSContextjjPNS_10DumpWriterE_block_invoke(uint64_t a1)
{
  return CSStore2::AttributedStringWriter::format( *(CSStore2::AttributedStringWriter **)(a1 + 40),  0LL,  @"** invalid plugin! %@**",  *(void *)(a1 + 32));
}

void OUTLINED_FUNCTION_0_8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void OUTLINED_FUNCTION_4_6(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose((const void *)(v1 - 80), 8) = a1;
}

  ;
}

void sub_183F49564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F49640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F497AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_183F49A88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F49B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F49CB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_183F4A06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

  ;
}

void sub_183F4A198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4A29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4A340( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F4A428(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183F4A718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  LaunchServices::Database::Context::~Context((LaunchServices::Database::Context *)va);
  _Unwind_Resume(a1);
}

void sub_183F4A9F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void sub_183F4AD4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_183F4AF24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183F4B78C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_183F4C934( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_183F4D6EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose((const void *)(v13 - 128), 8) = 0LL;
  *(void *)(result + 4_Block_object_dispose((const void *)(v13 - 128), 8) = v2;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void sub_183F4DC7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void __pluginQueryFault_block_invoke_0()
{
  os_log_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    __pluginQueryFault_block_invoke_cold_1_0(v0);
  }
}

void sub_183F4DFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4E2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4E3D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Block_object_dispose((const void *)(v16 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_183F4E498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4E64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4E73C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_183F4E7C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F4E958(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_183F4ED94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, id a32)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v35 - 168), 8);
  _Block_object_dispose((const void *)(v35 - 136), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void sub_183F4EF7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_183F4EFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4F24C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id getValueForKeyFromPlugin(NSString *a1, const LSPluginData *a2, _LSDatabase *a3)
{
  id v5 = a1;
  uint64_t v6 = a3;
  if (-[NSString isEqualToString:](v5, "isEqualToString:", @"NSExtensionIdentifier")
    || -[NSString isEqualToString:](v5, "isEqualToString:", @"NSExtensionPointName")
    || -[NSString isEqualToString:](v5, "isEqualToString:", @"NSExtensionPointIdentifier")
    || -[NSString isEqualToString:](v5, "isEqualToString:", @"com.apple.uuid"))
  {
    uint64_t v7 = (void *)_CSStringCopyCFString();
    goto LABEL_6;
  }

  if (!-[NSString isEqualToString:](v5, "isEqualToString:", @"NSExtensionContainingApp")) {
    goto LABEL_17;
  }
  unsigned int var8 = a2->var8;
  if (!var8) {
    goto LABEL_17;
  }
  if (!v6)
  {
    _LSDefaultLog();
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      getValueForKeyFromPlugin(v14, v15, v16, v17, v18, v19, v20, v21);
    }

    goto LABEL_17;
  }

  id v10 = (int *)_LSBundleGet(v6, var8);
  if (!v10 || !*v10)
  {
LABEL_17:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  unsigned int v11 = _LSAliasCopyResolvedNode(v6, *v10, 0LL, 0LL, 0LL);
  unsigned int v12 = v11;
  if (v11)
  {
    [v11 URL];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue();
    [v13 path];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue();
  }

  else
  {
    uint64_t v7 = 0LL;
  }

LABEL_6:
  return v7;
}

void sub_183F4F424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getValueForKeyFromPlist(NSString *a1, NSDictionary *a2)
{
  id v3 = a1;
  int v4 = a2;
  -[NSDictionary objectForKey:](v4, "objectForKey:", @"NSExtension");
  id v5 = (void *)objc_claimAutoreleasedReturnValue();
  [v5 objectForKey:@"NSExtensionAttributes"];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = v6;
  if (!v6 || ([v6 objectForKey:v3], (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    -[NSDictionary objectForKey:](v4, "objectForKey:", v3);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v8;
}

void sub_183F4F504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4F59C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F4F95C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, void *a41)
{
  _Unwind_Resume(a1);
}

void sub_183F4FAB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

id __copy_helper_block_ea8_48c14_ZTS9LSContext(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

void __destroy_helper_block_ea8_48c14_ZTS9LSContext(uint64_t a1)
{
}

void sub_183F4FB78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_183F4FC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183F4FD80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL16pluginQueryFaultv_block_invoke()
{
  os_log_t v0 = (os_log_s *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT)) {
    ___ZL16pluginQueryFaultv_block_invoke_cold_1(v0);
  }
}

void ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke()
{
  os_log_t v0 = (void *)misLibrary(void)::libLibrary;
  if (misLibrary(void)::libLibrary
    || (os_log_t v0 = dlopen("/usr/lib/libmis.dylib", 2), (misLibrary(void)::libLibrary = (uint64_t)v0) != 0))
  {
    getkMISMinSupportedSignatureVersion_ptr(void)::ptr = (uint64_t)dlsym(v0, "kMISMinSupportedSignatureVersion");
    uint64_t v1 = dlerror();
    _LSDefaultLog();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
      ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke_cold_2((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }

  else
  {
    int v9 = dlerror();
    _LSDefaultLog();
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
      ___ZL39getkMISMinSupportedSignatureVersion_ptrv_block_invoke_cold_1((uint64_t)v9, v2, v10, v11, v12, v13, v14, v15);
    }
  }
}

void sub_183F50114( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

uint64_t LSHandlerPref::Add(void *a1, int a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = CSStoreAllocUnit();
  if ((_DWORD)v6)
  {
    __int128 v25 = 0u;
    __int128 v24 = 0u;
    __int128 v23 = 0u;
    __int128 v22 = 0u;
    __int128 v21 = 0u;
    __int128 v20 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    _OWORD v10[2] = a2;
    v10[3] = v5[26 * a3 + 58];
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v11 = 0LL;
    for (uint64_t i = 10LL; i != 58; i += 8LL)
    {
      uint64_t v8 = &v10[i];
      *uint64_t v8 = kLSVersionNumberNull;
      v8[1] = *(_OWORD *)algn_183FBF5B0;
    }

    v10[0] = CSBindableKeyMapNextKey();
    v10[1] = 1;
    _CSStringRetain();
    _CSStringRetain();
    _CSStoreWriteToUnit();
    _LSBindableActivate(v5, v6 | 1);
  }

  return v6;
}

void sub_183F50610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LSHandlerPref::Remove(LSHandlerPref *this, _LSDatabase *a2)
{
  int v2 = (int)a2;
  uint64_t v5 = this;
  if (v5 && v2 && *((void *)v5 + 1))
  {
    uint64_t Unit = CSStoreGetUnit();
    CSMapRemoveValue();
    _CSStringRelease();
    _CSStringRelease();
    for (uint64_t i = 0LL; i != 24; i += 4LL)
      _CSStringRelease();
    CSStoreFreeUnit();
  }
}

void sub_183F50768( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t LSHandlerPref::Get(LSHandlerPref *this, _LSDatabase *a2)
{
  if (this && (_DWORD)a2) {
    return CSStoreGetUnit();
  }
  else {
    return 0LL;
  }
}

uint64_t LSHandlerPref::GetOrCreateTagForContentType(void *a1, const __CFString *a2, int a3, int *a4)
{
  id v7 = a1;
  uint64_t v8 = 0LL;
  if (v7 && a2 && a4)
  {
    *a4 = -1;
    if (_UTTypeIdentifierIsValid(a2))
    {
      if (_UTTypeIdentifierIsDynamic(a2))
      {
        FirstTag = (__CFString *)_UTDynamicGetFirstTag(a2, @"public.filename-extension");
        if (FirstTag)
        {
          int v10 = 1;
        }

        else
        {
          FirstTag = (__CFString *)_UTDynamicGetFirstTag(a2, @"public.mime-type");
          if (!FirstTag)
          {
            uint64_t v12 = 0LL;
            if (*a4 == -1)
            {
              uint64_t v8 = 0LL;
LABEL_18:

              goto LABEL_21;
            }