_BYTE *sub_1000D10A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000D10B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000D10B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000D10C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000D10C8(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for CloudStoreName()
{
}

unint64_t sub_1000D10E4()
{
  unint64_t result = qword_10032B148;
  if (!qword_10032B148)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032B150);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10032B148);
  }

  return result;
}

unint64_t sub_1000D112C()
{
  unint64_t result = qword_10032B158;
  if (!qword_10032B158)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027BC28, &unk_1002ED2D0);
    atomic_store(result, (unint64_t *)&qword_10032B158);
  }

  return result;
}

void sub_1000D1168()
{
}

void sub_1000D1170()
{
}

uint64_t sub_1000D1188(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t sub_1000D1210(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000D125C + 4 * byte_10027BAE3[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000D1290 + 4 * byte_10027BADE[v4]))();
}

uint64_t sub_1000D1290(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D1298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D12A0LL);
  }
  return result;
}

uint64_t sub_1000D12AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D12B4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000D12B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D12C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CloudStoreChangeReason()
{
}

unint64_t sub_1000D12DC()
{
  unint64_t result = qword_10032B160;
  if (!qword_10032B160)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027BD10, &unk_1002ED360);
    atomic_store(result, (unint64_t *)&qword_10032B160);
  }

  return result;
}

uint64_t sub_1000D1318()
{
  if ([v0 isProfileValidated])
  {
    char v1 = 0;
  }

  else
  {
    if (qword_100328AE8 != -1) {
      swift_once(&qword_100328AE8, sub_1000CFC24);
    }
    if (byte_10033E0AA == 1) {
      char v1 = sub_1000D1BD8(1) ^ 1;
    }
    else {
LABEL_8:
    }
      char v1 = 1;
  }

  return v1 & 1;
}

void sub_1000D139C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000C232C(0, v1, 0);
    uint64_t v3 = sub_1000D4B88(a1);
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1LL << *(_BYTE *)(a1 + 32))
      {
        uint64_t v6 = a1 + 64;
        uint64_t v12 = a1 + 64;
        while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v13 = v1;
          int v14 = v4;
          Swift::String v7 = String.lowercased()();
          unint64_t v9 = _swiftEmptyArrayStorage[2];
          unint64_t v8 = _swiftEmptyArrayStorage[3];
          if (v9 >= v8 >> 1) {
            sub_1000C232C(v8 > 1, v9 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v9 + 1;
          *(Swift::String *)&_swiftEmptyArrayStorage[2 * v9 + 4] = v7;
          uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
          uint64_t v6 = a1 + 64;
          if ((*(void *)(v12 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
            goto LABEL_20;
          }
          if (v14 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v11 = _HashTable.occupiedBucket(after:)(v5, v12, ~v10);
          uint64_t v1 = v13 - 1;
          if (v13 == 1) {
            return;
          }
          unint64_t v5 = v11;
          if ((v11 & 0x8000000000000000LL) == 0)
          {
            int v4 = *(_DWORD *)(a1 + 36);
            if (v11 < 1LL << *(_BYTE *)(a1 + 32)) {
              continue;
            }
          }

          goto LABEL_22;
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }

uint64_t sub_1000D1554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = sub_100086318();
  uint64_t v6 = v5;
  if (v4)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))( a2,  a1 + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL)),  v5);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return sub_10007D0AC(a2, v7, 1LL, v6);
}

unint64_t sub_1000D15C8(char a1)
{
  if (!a1) {
    return 0xD000000000000016LL;
  }
  if (a1 == 1) {
    return 0xD000000000000015LL;
  }
  return 0xD00000000000001BLL;
}

uint64_t sub_1000D16E4()
{
  uint64_t v59 = v1;
  uint64_t v60 = v2;
  uint64_t v3 = v0;
  uint64_t v52 = v4;
  uint64_t v5 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_100085FDC();
  uint64_t v9 = v8 - v7;
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_100085FDC();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_100086318();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_1000D4E18();
  __chkstk_darwin(v16);
  v18 = (char *)&v49 - v17;
  id v19 = [v0 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

  sub_1000D4D84();
  v51 = *(uint64_t (**)(void *, uint64_t))(v15 + 8);
  uint64_t v20 = v51(v0, v14);
  sub_10007CBC0(v20, &qword_100329310, &OBJC_CLASS___NSDictionary_ptr);
  (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v0, v18, v14);
  id v21 = sub_1000D1B5C((uint64_t)v0);
  if (v21)
  {
    v22 = v21;
    uint64_t v23 = v9;
    sub_1000AB058();
    v55[0] = v25;
    v55[1] = v24;
    uint64_t v26 = ((uint64_t (*)(void *, void *))_bridgeAnythingNonVerbatimToObjectiveC<A>(_:))( v55,  &type metadata for String);
    id v27 = objc_msgSend(v22, "__swift_objectForKeyedSubscript:", v26);
    swift_unknownObjectRelease(v26);
    if (v27)
    {
      _bridgeAnyObjectToAny(_:)(v55);
      swift_unknownObjectRelease(v27);
    }

    else
    {
      memset(v55, 0, sizeof(v55));
    }

    sub_1000D4B44((uint64_t)v55, (uint64_t)&v56, (uint64_t *)&unk_100328ED0);
    uint64_t v9 = v23;
    if (v58)
    {
      if ((sub_10009369C( (uint64_t)&v53,  (uint64_t)&v56,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
      {
        uint64_t v28 = v54;
        URL.init(string:)(v53, v54);
        swift_bridgeObjectRelease(v28);

        if (sub_10007D824(v13, 1LL, v14) != 1)
        {
          sub_1000D4F7C();
          uint64_t v46 = v52;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v52, v13, v14);
          uint64_t v47 = 0LL;
          return sub_1000D4FDC(v46, v47);
        }

        sub_100087418(v13, (uint64_t *)&unk_10032A1C0);
      }

      else
      {
      }
    }

    else
    {

      sub_100087418((uint64_t)&v56, (uint64_t *)&unk_100328ED0);
    }
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v29 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
  sub_10007961C(v29, v9);
  uint64_t v56 = 0LL;
  unint64_t v57 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(61LL);
  sub_100085F08(0xD00000000000003BLL, (uint64_t)"SKAdNetwork: Could not find value pingback URL for bundle: ");
  v55[0] = sub_1000D4AE4(v3);
  v55[1] = v30;
  uint64_t v31 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
  v32._countAndFlagsBits = String.init<A>(describing:)(v55, v31);
  String.append(_:)(v32);
  uint64_t v33 = sub_1000930DC();
  uint64_t v35 = v56;
  unint64_t v34 = v57;
  os_log_type_t v36 = static os_log_type_t.error.getter(v33);
  uint64_t v37 = sub_100085EE8(v34);
  v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = v36;
  if (os_log_type_enabled(v38, v36))
  {
    uint64_t v40 = sub_10007B9FC(22LL);
    uint64_t v41 = sub_10007B9FC(64LL);
    uint64_t v50 = v9;
    uint64_t v42 = v41;
    uint64_t v56 = v41;
    *(_DWORD *)uint64_t v40 = 136446466;
    v55[0] = sub_10007BA24(v41, v43, &v56);
    sub_1000D4F5C();
    *(_WORD *)(v40 + 12) = 2082;
    sub_1000930E4();
    v55[0] = sub_10007A488(v35, v34, &v56);
    sub_1000D4F5C();
    sub_100085E64(v34);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s%{public}s", (uint8_t *)v40, 0x16u);
    sub_100086030(v42, v44, (uint64_t)&type metadata for Any + 8);
    uint64_t v45 = v42;
    uint64_t v9 = v50;
    sub_10007B974(v45);
    sub_10007B974(v40);
    sub_1000930DC();
  }

  else
  {

    sub_100085E64(v34);
  }

  uint64_t v46 = v52;
  sub_10007A3CC(v9);
  sub_1000D4F7C();
  uint64_t v47 = 1LL;
  return sub_1000D4FDC(v46, v47);
}

id sub_1000D1B5C(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  URL._bridgeToObjectiveC()(v4);
  uint64_t v6 = v5;
  id v7 = [v3 initWithContentsOfURL:v5];

  uint64_t v8 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return v7;
}

uint64_t sub_1000D1BD8(char a1)
{
  double v5 = sub_1000D1CC4(9u, (uint64_t)v12);
  if (!v13)
  {
    sub_1000D4FF4(v2, (uint64_t *)&unk_100328ED0, v3, v4, v5);
    goto LABEL_11;
  }

  uint64_t v6 = sub_10007B1FC(&qword_10032A500);
  if ((sub_10009369C((uint64_t)&v11, (uint64_t)v12, (uint64_t)&type metadata for Any + 8, v6) & 1) == 0)
  {
LABEL_11:
    char v9 = 0;
    return v9 & 1;
  }

  if ((a1 & 1) != 0) {
    uint64_t v7 = 0x4F786F62646E6153LL;
  }
  else {
    uint64_t v7 = 0x6C616E7265747845LL;
  }
  if ((a1 & 1) != 0) {
    uint64_t v8 = 0xEF65646972726576LL;
  }
  else {
    uint64_t v8 = 0xEF79617765746147LL;
  }
  char v9 = sub_10012AC8C(v7, v8, v11);
  sub_10007B980();
  sub_10007BA44();
  return v9 & 1;
}

double sub_1000D1CC4@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  id v5 = [v2 entitlements];
  sub_1000E9A14(a1);
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v7 = sub_10007BA44();
  uint64_t v8 = sub_10007CBC0(v7, (unint64_t *)&qword_10032B170, &OBJC_CLASS___NSObject_ptr);
  id v9 = [v5 objectForKey:v6 ofClass:swift_getObjCClassFromMetadata(v8)];

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)((void *)a2);

    swift_unknownObjectRelease(v9);
  }

  else
  {

    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1000D1DC8()
{
  return sub_1000D1E0C(4u);
}

uint64_t sub_1000D1E04()
{
  return sub_1000D1E0C(5u);
}

uint64_t sub_1000D1E0C(unsigned __int8 a1)
{
  double v4 = sub_1000D1CC4(a1, (uint64_t)v7);
  if (v8)
  {
    uint64_t result = sub_10009369C( (uint64_t)&v6,  (uint64_t)v7,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
    if ((_DWORD)result) {
      return v6;
    }
  }

  else
  {
    sub_1000D4FF4(v1, (uint64_t *)&unk_100328ED0, v2, v3, v4);
    return 0LL;
  }

  return result;
}

void sub_1000D1E70()
{
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v159 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_1000D4F0C();
  object = (char *)(v6 - v7);
  __chkstk_darwin(v9);
  v156 = (char *)&v141 - v10;
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v11);
  sub_1000D4F0C();
  uint64_t v14 = v12 - v13;
  uint64_t v16 = __chkstk_darwin(v15);
  v155 = (char *)&v141 - v17;
  __chkstk_darwin(v16);
  v164 = (char *)&v141 - v18;
  uint64_t v19 = sub_100086318();
  uint64_t v157 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_1000D4F0C();
  uint64_t v151 = v20 - v21;
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v154 = (uint64_t)&v141 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  id v27 = (char *)&v141 - v26;
  __chkstk_darwin(v25);
  int v160 = v4;
  v152 = (char *)&v141 - v28;
  if ((_BYTE)v4)
  {
    else {
      uint64_t v29 = 0xD00000000000001BLL;
    }
    else {
      uint64_t v30 = (void *)0x80000001002A0C70LL;
    }
  }

  else
  {
    uint64_t v29 = 0xD000000000000016LL;
    uint64_t v30 = (void *)0x80000001002A0CD0LL;
  }

  sub_1000D2DB0(v29, v30, &v169);
  sub_100085EF0();
  if (!*((void *)&v170 + 1))
  {
    sub_100087418((uint64_t)&v169, (uint64_t *)&unk_100328ED0);
    goto LABEL_108;
  }

  uint64_t v31 = sub_10007B1FC(&qword_10032A580);
  uint64_t v161 = (uint64_t)&type metadata for Any + 8;
  uint64_t v142 = v14;
  v144 = v27;
  unint64_t v147 = (unint64_t)"SKExternalLinkAccount";
  uint64_t v153 = v0;
  uint64_t v158 = v19;
  v143 = object;
  v148 = v2;
  Swift::String v32 = (void *)v167;
  uint64_t v33 = *(void *)(v167 + 64);
  v162 = (void *)(v167 + 64);
  uint64_t v34 = 1LL << *(_BYTE *)(v167 + 32);
  uint64_t v35 = -1LL;
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  unint64_t v36 = v35 & v33;
  uint64_t v163 = (unint64_t)(v34 + 63) >> 6;
  swift_bridgeObjectRetain(v167);
  uint64_t v37 = 0LL;
  v38 = v32;
LABEL_14:
  unint64_t v39 = (unint64_t)v164;
  if (v36)
  {
LABEL_15:
    unint64_t v40 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    unint64_t v41 = v40 | (v37 << 6);
    goto LABEL_39;
  }

  while (1)
  {
    uint64_t v42 = v37 + 1;
    if (__OFADD__(v37, 1LL)) {
      goto LABEL_125;
    }
    if (v42 >= v163) {
      break;
    }
    unint64_t v43 = v162[v42];
    ++v37;
    if (v43) {
      goto LABEL_38;
    }
    uint64_t v37 = v42 + 1;
    sub_1000D4F50();
    if (v44 == v45) {
      break;
    }
    sub_1000D4F44();
    if (v43) {
      goto LABEL_38;
    }
    uint64_t v37 = v46 + 2;
    sub_1000D4F50();
    if (v44 == v45) {
      break;
    }
    sub_1000D4F44();
    if (v43) {
      goto LABEL_38;
    }
    uint64_t v37 = v47 + 3;
    sub_1000D4F50();
    if (v44 == v45) {
      break;
    }
    sub_1000D4F44();
    if (v43) {
      goto LABEL_38;
    }
    uint64_t v37 = v48 + 4;
    sub_1000D4F50();
    if (v44 == v45) {
      break;
    }
    sub_1000D4F44();
    if (v43) {
      goto LABEL_38;
    }
    uint64_t v50 = v49 + 5;
    if (v50 >= v163) {
      break;
    }
    unint64_t v43 = v162[v50];
    if (!v43)
    {
      while (1)
      {
        uint64_t v37 = v50 + 1;
        if (__OFADD__(v50, 1LL)) {
          goto LABEL_127;
        }
        sub_1000D4F50();
        if (v44 == v45) {
          goto LABEL_58;
        }
        sub_1000D4F44();
        uint64_t v50 = v51 + 1;
        if (v43) {
          goto LABEL_38;
        }
      }
    }

    uint64_t v37 = v50;
LABEL_38:
    unint64_t v36 = (v43 - 1) & v43;
    unint64_t v41 = __clz(__rbit64(v43)) + (v37 << 6);
LABEL_39:
    uint64_t v52 = (uint64_t *)(v32[6] + 16 * v41);
    uint64_t v53 = *v52;
    unint64_t v4 = v52[1];
    Swift::String v54 = String.lowercased()();
    object = (char *)v54._object;
    sub_1000930E4();
    swift_bridgeObjectRetain(v38);
    unint64_t v39 = sub_1000D4F24(v53, v4);
    LOBYTE(v53) = v55;
    sub_10007BA44();
    if ((v53 & 1) != 0)
    {
      sub_1000D4FFC();
      *(void *)&__int128 v167 = v38;
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      sub_1000D4E6C();
      v38 = (void *)v167;
      swift_bridgeObjectRelease(*(void *)(*(void *)(v167 + 48) + 16 * v39 + 8));
      sub_1000853B0((_OWORD *)(v38[7] + 32 * v39), &v169);
      _NativeDictionary._delete(at:)(v39, v38, &type metadata for String, v161, &protocol witness table for String);
      sub_1000AA47C();
    }

    else
    {
      __int128 v169 = 0u;
      __int128 v170 = 0u;
    }

    sub_1000930DC();
    if (*((void *)&v170 + 1))
    {
      sub_1000853B0(&v169, &v167);
      sub_1000D4FFC();
      v165 = v38;
      unint64_t v58 = sub_1000D4F24(v54._countAndFlagsBits, (uint64_t)v54._object);
      if (__OFADD__(v38[2], (v59 & 1) == 0))
      {
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        swift_once(&qword_100328B40, sub_1000F4208);
LABEL_96:
        uint64_t v104 = sub_100079604(v159, (uint64_t)qword_10033E1A8);
        sub_10007961C(v104, (uint64_t)v32);
        *(void *)&__int128 v169 = 0LL;
        *((void *)&v169 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(28LL);
        swift_bridgeObjectRelease(*((void *)&v169 + 1));
        *(void *)&__int128 v169 = 91LL;
        *((void *)&v169 + 1) = 0xE100000000000000LL;
        *(void *)&__int128 v167 = sub_1000D4FAC();
        *((void *)&v167 + 1) = v105;
        uint64_t v106 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
        v171._countAndFlagsBits = sub_1000D4DB0(v106);
        sub_1000D4E3C(v171);
        sub_100085EF0();
        sub_100085F08(v4 - 1, (uint64_t)"] No valid URLs for ");
        if ((_BYTE)v160)
        {
          else {
            unint64_t v107 = v4 + 6;
          }
          else {
            unint64_t v108 = (v39 - 32) | 0x8000000000000000LL;
          }
        }

        else
        {
          unint64_t v107 = v4 + 1;
          unint64_t v108 = v147 | 0x8000000000000000LL;
        }

        unint64_t v109 = v108;
        String.append(_:)(*(Swift::String *)&v107);
        sub_100085EF0();
        v110._countAndFlagsBits = 32LL;
        v110._object = (void *)0xE100000000000000LL;
        String.append(_:)(v110);
        v172._countAndFlagsBits = Array.description.getter(object, &type metadata for String);
        sub_1000D4E3C(v172);
        uint64_t v111 = sub_100085EF0();
        uint64_t v112 = *((void *)&v169 + 1);
        static os_log_type_t.default.getter(v111);
        uint64_t v113 = sub_1000D4CE4();
        v114 = v32;
        v115 = (os_log_s *)Logger.logObject.getter(v113);
        if (sub_1000D4D20(v115))
        {
          v116 = (_DWORD *)sub_10007B9FC(22LL);
          uint64_t v117 = sub_10007B9FC(64LL);
          *(void *)&__int128 v169 = v117;
          _DWORD *v116 = 136446466;
          *(void *)&__int128 v167 = sub_10007BA24(v117, v118, (uint64_t *)&v169);
          sub_1000D4C5C((uint64_t)&v167);
          uint64_t v119 = sub_1000D4C90();
          *(void *)&__int128 v167 = sub_1000D4DA4(v119, v120, (uint64_t *)&v169);
          sub_1000D4C5C((uint64_t)&v167);
          sub_100085E64(v112);
          sub_1000D4C7C((void *)&_mh_execute_header, v121, v122, "%{public}s%{public}s");
          sub_1000D4D10((uint64_t)&type metadata for Any);
          uint64_t v123 = v117;
          Swift::String v32 = v143;
          sub_10007B974(v123);
          sub_10007B974((uint64_t)v116);
          sub_100085EF0();
        }

        else
        {

          sub_100085E64(v112);
        }

        sub_10007A3CC((uint64_t)v32);
        sub_10007BA44();
        goto LABEL_108;
      }

      unint64_t v4 = v58;
      unint64_t v39 = v59;
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      if (sub_1000D4E6C())
      {
        unint64_t v60 = sub_100132130(v54._countAndFlagsBits, (uint64_t)v54._object);
        if ((v39 & 1) != (v61 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          return;
        }

        unint64_t v4 = v60;
      }

      v38 = v165;
      if ((v39 & 1) != 0)
      {
        v62 = (void *)(v165[7] + 32 * v4);
        sub_10007B1A0(v62);
        sub_1000853B0(&v167, v62);
        goto LABEL_56;
      }

      v165[(v4 >> 6) + 8] |= 1LL << v4;
      *(Swift::String *)(v38[6] + 16 * v4) = v54;
      sub_1000853B0(&v167, (_OWORD *)(v38[7] + 32 * v4));
      uint64_t v63 = v38[2];
      BOOL v45 = __OFADD__(v63, 1LL);
      uint64_t v64 = v63 + 1;
      if (v45) {
        goto LABEL_126;
      }
      v38[2] = v64;
      sub_10008600C();
LABEL_56:
      sub_100086004();
      sub_1000AA47C();
      goto LABEL_14;
    }

    sub_100087418((uint64_t)&v169, (uint64_t *)&unk_100328ED0);
    swift_bridgeObjectRetain(v38);
    unint64_t v4 = sub_1000D4F24(v54._countAndFlagsBits, (uint64_t)v54._object);
    char v57 = v56;
    sub_10007BA44();
    if ((v57 & 1) != 0)
    {
      sub_1000D4FFC();
      v165 = v38;
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      sub_1000D4E6C();
      v38 = v165;
      swift_bridgeObjectRelease(*(void *)(v165[6] + 16 * v4 + 8));
      sub_1000853B0((_OWORD *)(v38[7] + 32 * v4), &v167);
      _NativeDictionary._delete(at:)( v4,  v38,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      sub_1000AA47C();
    }

    else
    {
      __int128 v167 = 0u;
      __int128 v168 = 0u;
    }

    unint64_t v39 = (unint64_t)v164;
    sub_100086004();
    sub_100087418((uint64_t)&v167, (uint64_t *)&unk_100328ED0);
    if (v36) {
      goto LABEL_15;
    }
  }

double sub_1000D2DB0@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = sub_1000D4910();
  if (v11)
  {
    uint64_t v12 = v11;
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v12 valueForKey:v13];

    if (v14)
    {
      _bridgeAnyObjectToAny(_:)(v31);
      swift_unknownObjectRelease(v14);
    }

    else
    {
      memset(v31, 0, sizeof(v31));
    }

    sub_1000D4B44((uint64_t)v31, (uint64_t)&v32, (uint64_t *)&unk_100328ED0);
    if (*((void *)&v33 + 1))
    {
      sub_1000853B0(&v32, a3);
      return result;
    }
  }

  else
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
  }

  sub_100087418((uint64_t)&v32, (uint64_t *)&unk_100328ED0);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v16 = sub_100079604(v8, (uint64_t)qword_10033E1A8);
  sub_10007961C(v16, (uint64_t)v10);
  *(void *)&__int128 v32 = 0LL;
  *((void *)&v32 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  swift_bridgeObjectRelease(*((void *)&v32 + 1));
  *(void *)&__int128 v32 = 91LL;
  *((void *)&v32 + 1) = 0xE100000000000000LL;
  *(void *)&v31[0] = sub_1000D4AE4(v4);
  *((void *)&v31[0] + 1) = v17;
  uint64_t v18 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
  v19._countAndFlagsBits = String.init<A>(describing:)(v31, v18);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(object);
  v21._object = (void *)0x80000001002A0D10LL;
  v21._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = a1;
  v22._object = a2;
  String.append(_:)(v22);
  __int128 v23 = v32;
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  uint64_t v26 = swift_bridgeObjectRetain_n(*((void *)&v23 + 1), 2LL);
  id v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = v25;
  if (os_log_type_enabled(v27, v25))
  {
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v32 = v30;
    *(_DWORD *)uint64_t v29 = 136446466;
    *(void *)&v31[0] = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, (char *)v31 + 8, v29 + 4);
    *(_WORD *)(v29 + 12) = 2082;
    swift_bridgeObjectRetain(*((void *)&v23 + 1));
    *(void *)&v31[0] = sub_10007A488(v23, *((unint64_t *)&v23 + 1), (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, (char *)v31 + 8, v29 + 14);
    swift_bridgeObjectRelease_n(*((void *)&v23 + 1), 3LL);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s%{public}s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_bridgeObjectRelease(*((void *)&v23 + 1));
  }

  else
  {

    swift_bridgeObjectRelease_n(*((void *)&v23 + 1), 3LL);
  }

  sub_10007A3CC((uint64_t)v10);
  double result = 0.0;
  *a3 = 0u;
  a3[1] = 0u;
  return result;
}

uint64_t sub_1000D3118()
{
  uint64_t v46 = v0;
  uint64_t v47 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_100085FDC();
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_100085FDC();
  uint64_t v9 = v8 - v7;
  BOOL v10 = sub_1000D34B8(16LL);
  if (!v12)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_1000D4E78(v4, (uint64_t)qword_10033E1A8);
    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(67LL);
    sub_1000D4D44();
    v43[0] = sub_1000D4E34();
    v43[1] = v20;
    uint64_t v21 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
    v22._countAndFlagsBits = String.init<A>(describing:)(v43, v21);
    String.append(_:)(v22);
    sub_100086004();
    sub_1000D4F2C(64LL, 0x80000001002A0C20LL);
    uint64_t v24 = v44;
    unint64_t v23 = v45;
    static os_log_type_t.default.getter(v25);
    sub_100085EE8(v23);
    uint64_t v26 = (os_log_s *)sub_100093C38();
    if (sub_1000D4CA4(v26))
    {
      uint64_t v27 = sub_10007B9FC(22LL);
      uint64_t v28 = sub_10007B9FC(64LL);
      uint64_t v44 = v28;
      *(_DWORD *)uint64_t v27 = 136446466;
      v43[0] = sub_10007BA24(v28, v29, &v44);
      sub_1000D4C50((uint64_t)v43);
      *(_WORD *)(v27 + 12) = 2082;
      sub_10008600C();
      v43[0] = sub_10007A488(v24, v23, &v44);
      sub_1000D4C50((uint64_t)v43);
      sub_100085E64(v23);
      sub_1000D4C68((void *)&_mh_execute_header, v30, v31, "%{public}s%{public}s");
      sub_100086030(v28, v32, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v28);
      sub_10007B974(v27);
      sub_100086004();
    }

    else
    {

      sub_100085E64(v23);
    }

    sub_1000D4F3C();
    uint64_t v41 = sub_100086318();
    uint64_t v40 = v3;
    goto LABEL_18;
  }

  BOOL v13 = v10;
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  uint64_t v16 = sub_10007B1FC((uint64_t *)&unk_10032B180);
  uint64_t v17 = sub_1000CB734(v16);
  *(_OWORD *)(v17 + 16) = xmmword_10027A600;
  *(void *)(v17 + 32) = v14;
  *(void *)(v17 + 40) = v15;
  swift_bridgeObjectRetain(v15);
  sub_1000D1E70();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease(v17);
  if (v19)
  {
    sub_1000D1554(v19, v9);
    sub_10007B980();
  }

  else
  {
    uint64_t v33 = sub_100086318();
    sub_10007D0AC(v9, 1LL, 1LL, v33);
  }

  uint64_t v34 = sub_1000CB734(v16);
  *(_OWORD *)(v34 + 16) = xmmword_10027A600;
  *(void *)(v34 + 32) = v14;
  *(void *)(v34 + 40) = v15;
  sub_1000D1E70();
  uint64_t v36 = v35;
  sub_10007BA44();
  uint64_t v37 = sub_100086318();
  if (sub_10007D824(v9, 1LL, v37) == 1 && v36 == 0)
  {
    sub_100087418(v9, (uint64_t *)&unk_10032A1C0);
    uint64_t v40 = v3;
    uint64_t v41 = v37;
LABEL_18:
    sub_10007D0AC(v40, 1LL, 1LL, v41);
    return 0LL;
  }

  if (v13)
  {
    sub_1000D4B44(v9, v3, (uint64_t *)&unk_10032A1C0);
    return 2LL;
  }

  else
  {
    sub_10007B980();
    sub_100087418(v9, (uint64_t *)&unk_10032A1C0);
    uint64_t v39 = 1LL;
    sub_1000D4FDC(v3, 1LL);
  }

  return v39;
}

BOOL sub_1000D34B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v56 - v7;
  __chkstk_darwin(v6);
  BOOL v10 = (char *)&v56 - v9;
  uint64_t v58 = 0LL;
  uint64_t v62 = 0LL;
  int domain_answer = os_eligibility_get_domain_answer(a1, &v58, 0LL, 0LL, &v62);
  if (domain_answer)
  {
    int v12 = domain_answer;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v13 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
    sub_10007961C(v13, (uint64_t)v5);
    uint64_t v60 = 0LL;
    unint64_t v61 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(47LL);
    v14._countAndFlagsBits = 0xD000000000000029LL;
    v14._object = (void *)0x80000001002A0D30LL;
    String.append(_:)(v14);
    uint64_t v59 = a1;
    type metadata accessor for os_eligibility_domain_t(0LL);
    _print_unlocked<A, B>(_:_:)(&v59, &v60);
    v15._countAndFlagsBits = 8250LL;
    v15._object = (void *)0xE200000000000000LL;
    String.append(_:)(v15);
    LODWORD(v59) = v12;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v16._object;
    String.append(_:)(v16);
    uint64_t v18 = swift_bridgeObjectRelease(object);
    uint64_t v20 = v60;
    unint64_t v19 = v61;
    os_log_type_t v21 = static os_log_type_t.error.getter(v18);
    uint64_t v22 = swift_bridgeObjectRetain_n(v19, 2LL);
    unint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = v21;
    if (os_log_type_enabled(v23, v21))
    {
      uint64_t v25 = swift_slowAlloc(22LL, -1LL);
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      uint64_t v60 = v26;
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v59 = sub_10007A488(0LL, 0xE000000000000000LL, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v25 + 4);
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain(v19);
      uint64_t v59 = sub_10007A488(v20, v19, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v25 + 14);
      swift_bridgeObjectRelease_n(v19, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s%{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_bridgeObjectRelease(v19);
    }

    else
    {

      swift_bridgeObjectRelease_n(v19, 3LL);
    }

    uint64_t v42 = (uint64_t)v5;
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v27 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
    sub_10007961C(v27, (uint64_t)v10);
    uint64_t v60 = 0LL;
    unint64_t v61 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    v28._object = (void *)0x80000001002A0D60LL;
    v28._countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v28);
    uint64_t v59 = v58;
    type metadata accessor for os_eligibility_answer_t(0LL);
    _print_unlocked<A, B>(_:_:)(&v59, &v60);
    v29._countAndFlagsBits = 0x747865746E6F4320LL;
    v29._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v29);
    uint64_t v59 = v62;
    swift_unknownObjectRetain(v62);
    uint64_t v30 = sub_10007B1FC((uint64_t *)&unk_10032B1A0);
    v31._countAndFlagsBits = String.init<A>(describing:)(&v59, v30);
    uint64_t v32 = v31._object;
    String.append(_:)(v31);
    uint64_t v33 = swift_bridgeObjectRelease(v32);
    uint64_t v34 = v60;
    unint64_t v35 = v61;
    os_log_type_t v36 = static os_log_type_t.default.getter(v33);
    uint64_t v37 = swift_bridgeObjectRetain_n(v35, 2LL);
    v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = v36;
    if (os_log_type_enabled(v38, v36))
    {
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      uint64_t v41 = swift_slowAlloc(64LL, -1LL);
      uint64_t v60 = v41;
      *(_DWORD *)uint64_t v40 = 136446466;
      char v57 = v8;
      uint64_t v59 = sub_10007A488(0LL, 0xE000000000000000LL, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 4);
      *(_WORD *)(v40 + 12) = 2082;
      swift_bridgeObjectRetain(v35);
      uint64_t v59 = sub_10007A488(v34, v35, &v60);
      uint64_t v8 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 14);
      swift_bridgeObjectRelease_n(v35, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s%{public}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_bridgeObjectRelease(v35);
    }

    else
    {

      swift_bridgeObjectRelease_n(v35, 3LL);
    }

    sub_10007A3CC((uint64_t)v10);
    uint64_t v43 = v62;
    if (v62)
    {
      uint64_t v44 = (void *)swift_unknownObjectRetain(v62);
      string = xpc_dictionary_get_string(v44, "OS_ELIGIBILITY_CONTEXT_COUNTRY_BILLING");
      if (string)
      {
        String.init(utf8String:)(string);
        uint64_t v47 = v46;
        swift_unknownObjectRelease(v43);
        if (v47)
        {
          swift_unknownObjectRelease(v43);
          return v58 == 4;
        }
      }

      else
      {
        swift_unknownObjectRelease(v43);
      }
    }

    uint64_t v49 = sub_10007961C(v27, (uint64_t)v8);
    uint64_t v50 = static os_log_type_t.error.getter(v49);
    os_log_type_t v51 = v50;
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v53 = v51;
    if (os_log_type_enabled(v52, v51))
    {
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      uint64_t v55 = swift_slowAlloc(64LL, -1LL);
      uint64_t v60 = v55;
      *(_DWORD *)uint64_t v54 = 136446466;
      uint64_t v59 = sub_10007A488(0LL, 0xE000000000000000LL, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v54 + 4);
      *(_WORD *)(v54 + 12) = 2082;
      uint64_t v59 = sub_10007A488(0xD00000000000003FLL, 0x80000001002A0D80LL, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v54 + 14);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%{public}s%{public}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    uint64_t v42 = (uint64_t)v8;
  }

  sub_10007A3CC(v42);
  swift_unknownObjectRelease(v62);
  return 0LL;
}

void sub_1000D3C28()
{
  uint64_t v4 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_1000D4CF4();
  __chkstk_darwin(v6);
  sub_1000D4EDC();
  sub_1000D34B8(16LL);
  if (v7)
  {
    sub_1000D4EFC();
    sub_1000D4EEC();
    sub_1000D4FD0(38LL, v8, v9);
    if (v35[3])
    {
      sub_1000D4D50();
      uint64_t v10 = sub_10007B1FC(&qword_10032A500);
      if (sub_10009369C((uint64_t)v34, (uint64_t)v35, (uint64_t)&type metadata for Any + 8, v10))
      {
        if (*(void *)(v34[0] + 16LL))
        {
          sub_1000D4CB4((uint64_t)_swiftEmptyArrayStorage);
          do
          {
            sub_1000D4FA4();
            sub_1000D4EAC();
            if (v12) {
              sub_1000D4CCC(v11);
            }
            sub_1000D4F8C();
          }

          while (!v13);
        }

        sub_100085EF0();
        sub_1000D5024();
        sub_1000D4EA0();
        sub_1000930DC();
        sub_1000D4E08();
        sub_10007BA44();
        sub_100085EF0();
        sub_10007B1A0(v36);
      }

      else
      {
        sub_1000930DC();
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        sub_1000D4E8C(v4, (uint64_t)qword_10033E1A8);
        sub_1000D4E58();
        v34[0] = sub_1000D4E34();
        v34[1] = v25;
        uint64_t v26 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
        v38._countAndFlagsBits = sub_1000D4DB0(v26);
        sub_1000D4FC8(v38);
        sub_10007BA44();
        sub_100085F14();
        sub_1000D4F2C(38LL, v3 | 0x8000000000000000LL);
        sub_100085F08(0xD00000000000001ALL, (uint64_t)" is not a valid sequence: ");
        sub_1000D4D70();
        sub_1000D5014();
        sub_100085EE8(v2);
        uint64_t v27 = (os_log_s *)sub_1000935A4();
        if (sub_1000D4CA4(v27))
        {
          Swift::String v28 = (_DWORD *)sub_10007B9FC(22LL);
          uint64_t v29 = sub_10007B9FC(64LL);
          uint64_t v30 = sub_1000D4F6C(v29);
          *Swift::String v28 = 136446466;
          v34[0] = sub_10007BA24(v30, v31, v35);
          sub_1000D4C30();
          sub_1000D4D30();
          v34[0] = sub_1000D4DDC();
          sub_1000D4C30();
          sub_100085E64(v2);
          sub_1000D4C68((void *)&_mh_execute_header, v32, v33, "%{public}s%{public}s");
          sub_1000D4DCC();
          sub_10007B974(v4);
          sub_10007B974((uint64_t)v28);
          sub_10007BA44();
        }

        else
        {

          sub_100085E64(v2);
        }

        sub_1000D4F34();
        sub_1000D4F1C();
      }
    }

    else
    {
      uint64_t v24 = sub_1000930DC();
      sub_1000D5004(v24, (uint64_t *)&unk_100328ED0);
    }
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_1000D4E78(v4, (uint64_t)qword_10033E1A8);
    sub_1000D4E44();
    sub_1000D4D44();
    v35[0] = sub_1000D4E34();
    v35[1] = v14;
    uint64_t v15 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
    v37._countAndFlagsBits = sub_1000D4DBC(v15);
    sub_1000D4E3C(v37);
    sub_100085EF0();
    sub_100085F08(0xD000000000000041LL, (uint64_t)"] No billing country to check ExternalPurchaseSheet configuration");
    sub_1000D501C();
    sub_1000D4CE4();
    Swift::String v16 = (os_log_s *)sub_100093C38();
    if (sub_1000D4D20(v16))
    {
      uint64_t v17 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v18 = sub_10007B9FC(64LL);
      v36[0] = v18;
      *uint64_t v17 = 136446466;
      sub_10007BA24(v18, v19, v36);
      sub_1000D4C40();
      uint64_t v20 = sub_1000D4C90();
      v35[0] = sub_1000D4DA4(v20, v21, v36);
      sub_1000D4C40();
      sub_100085E64(v0);
      sub_1000D4C7C((void *)&_mh_execute_header, v22, v23, "%{public}s%{public}s");
      sub_1000D4D10((uint64_t)&type metadata for Any);
      sub_10007B974(v18);
      sub_10007B974((uint64_t)v17);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v0);
    }

    sub_1000D4F3C();
  }

  sub_100085E98();
}

void sub_1000D4040()
{
  uint64_t v4 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_1000D4CF4();
  __chkstk_darwin(v6);
  sub_1000D4EDC();
  sub_1000D34B8(37LL);
  if (v7)
  {
    sub_1000D4EFC();
    sub_1000D4EEC();
    sub_1000D4FD0(35LL, v8, v9);
    if (v35[3])
    {
      sub_1000D4D50();
      uint64_t v10 = sub_10007B1FC(&qword_10032A500);
      if ((sub_10009369C((uint64_t)v34, (uint64_t)v35, (uint64_t)&type metadata for Any + 8, v10) & 1) != 0)
      {
        if (*(void *)(v34[0] + 16LL))
        {
          sub_1000D4CB4((uint64_t)_swiftEmptyArrayStorage);
          do
          {
            sub_1000D4FA4();
            sub_1000D4EAC();
            if (v12) {
              sub_1000D4CCC(v11);
            }
            sub_1000D4F8C();
          }

          while (!v13);
        }

        sub_100085EF0();
        sub_1000D5024();
        sub_1000D4EA0();
        sub_1000930DC();
        sub_1000D4E08();
        sub_10007BA44();
        sub_100085EF0();
        sub_10007B1A0(v36);
      }

      else
      {
        sub_1000930DC();
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        sub_1000D4E8C(v4, (uint64_t)qword_10033E1A8);
        sub_1000D4E58();
        v34[0] = sub_1000D4E34();
        v34[1] = v25;
        uint64_t v26 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
        v38._countAndFlagsBits = sub_1000D4DB0(v26);
        sub_1000D4FC8(v38);
        sub_10007BA44();
        sub_100085F14();
        sub_1000D4F2C(35LL, v3 | 0x8000000000000000LL);
        sub_100085F08(0xD00000000000001ALL, (uint64_t)" is not a valid sequence: ");
        sub_1000D4D70();
        sub_1000D5014();
        sub_100085EE8(v2);
        uint64_t v27 = (os_log_s *)sub_1000935A4();
        if (sub_1000D4CA4(v27))
        {
          Swift::String v28 = (_DWORD *)sub_10007B9FC(22LL);
          uint64_t v29 = sub_10007B9FC(64LL);
          uint64_t v30 = sub_1000D4F6C(v29);
          *Swift::String v28 = 136446466;
          v34[0] = sub_10007BA24(v30, v31, v35);
          sub_1000D4C30();
          sub_1000D4D30();
          v34[0] = sub_1000D4DDC();
          sub_1000D4C30();
          sub_100085E64(v2);
          sub_1000D4C68((void *)&_mh_execute_header, v32, v33, "%{public}s%{public}s");
          sub_1000D4DCC();
          sub_10007B974(v4);
          sub_10007B974((uint64_t)v28);
          sub_10007BA44();
        }

        else
        {

          sub_100085E64(v2);
        }

        sub_1000D4F34();
        sub_1000D4F1C();
      }
    }

    else
    {
      uint64_t v24 = sub_1000930DC();
      sub_1000D5004(v24, (uint64_t *)&unk_100328ED0);
    }
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_1000D4E78(v4, (uint64_t)qword_10033E1A8);
    sub_1000D4E44();
    sub_1000D4D44();
    v35[0] = sub_1000D4E34();
    v35[1] = v14;
    uint64_t v15 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
    v37._countAndFlagsBits = sub_1000D4DBC(v15);
    sub_1000D4E3C(v37);
    sub_100085EF0();
    sub_100085F08(0xD000000000000041LL, (uint64_t)"] No billing country to check ExternalPurchaseSheet configuration");
    sub_1000D501C();
    sub_1000D4CE4();
    Swift::String v16 = (os_log_s *)sub_100093C38();
    if (sub_1000D4D20(v16))
    {
      uint64_t v17 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v18 = sub_10007B9FC(64LL);
      v36[0] = v18;
      *uint64_t v17 = 136446466;
      sub_10007BA24(v18, v19, v36);
      sub_1000D4C40();
      uint64_t v20 = sub_1000D4C90();
      v35[0] = sub_1000D4DA4(v20, v21, v36);
      sub_1000D4C40();
      sub_100085E64(v0);
      sub_1000D4C7C((void *)&_mh_execute_header, v22, v23, "%{public}s%{public}s");
      sub_1000D4D10((uint64_t)&type metadata for Any);
      sub_10007B974(v18);
      sub_10007B974((uint64_t)v17);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v0);
    }

    sub_1000D4F3C();
  }

  sub_100085E98();
}

void sub_1000D4458()
{
  uint64_t v4 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_1000D4CF4();
  __chkstk_darwin(v6);
  sub_1000D4EDC();
  sub_1000D34B8(17LL);
  if (v7)
  {
    sub_1000D4EFC();
    sub_1000D4EEC();
    sub_1000D2DB0(0xD000000000000012LL, v8, v9);
    if (v45)
    {
      sub_1000D4D50();
      uint64_t v10 = sub_10007B1FC(&qword_10032A500);
      if (sub_10009369C((uint64_t)v42, (uint64_t)&v43, (uint64_t)&type metadata for Any + 8, v10))
      {
        uint64_t v11 = v42[0];
        uint64_t v12 = *(void *)(v42[0] + 16);
        if (v12)
        {
          sub_1000D4CB4((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v13 = v43;
          uint64_t v14 = v11 + 40;
          do
          {
            uint64_t v15 = sub_1000D4FA4();
            uint64_t v17 = v16;
            uint64_t v43 = v13;
            unint64_t v19 = *(void *)(v13 + 16);
            unint64_t v18 = *(void *)(v13 + 24);
            if (v19 >= v18 >> 1)
            {
              sub_1000D4CCC(v18);
              uint64_t v13 = v43;
            }

            v14 += 16LL;
            *(void *)(v13 + 16) = v19 + 1;
            uint64_t v20 = v13 + 16 * v19;
            *(void *)(v20 + 32) = v15;
            *(void *)(v20 + 40) = v17;
            --v12;
          }

          while (v12);
        }

        goto LABEL_23;
      }

      sub_10007B1C0((uint64_t)v46, (uint64_t)&v43);
      uint64_t v32 = sub_10007B1FC(&qword_10032A580);
      if (sub_10009369C((uint64_t)v42, (uint64_t)&v43, (uint64_t)&type metadata for Any + 8, v32))
      {
        sub_1000D139C(v42[0]);
LABEL_23:
        sub_100085EF0();
        sub_1000D5024();
        sub_1000D4EA0();
        sub_1000930DC();
        sub_1000D4E08();
        sub_10007BA44();
        sub_100085EF0();
        sub_1000D4F1C();
        goto LABEL_26;
      }

      sub_1000930DC();
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      sub_1000D4E8C(v4, (uint64_t)qword_10033E1A8);
      uint64_t v43 = 0LL;
      unint64_t v44 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      sub_1000D4D44();
      v42[0] = sub_1000D4AE4(v1);
      v42[1] = v33;
      uint64_t v34 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
      v48._countAndFlagsBits = sub_1000D4DB0(v34);
      sub_1000D4FC8(v48);
      sub_10007BA44();
      sub_100085F14();
      sub_1000D4F2C(18LL, v3 | 0x8000000000000000LL);
      sub_100085F08(0xD00000000000001ALL, (uint64_t)" is not a valid sequence: ");
      sub_1000D4D70();
      sub_1000D5014();
      sub_100085EE8(v2);
      unint64_t v35 = (os_log_s *)sub_1000935A4();
      if (sub_1000D4CA4(v35))
      {
        os_log_type_t v36 = (_DWORD *)sub_10007B9FC(22LL);
        uint64_t v37 = sub_10007B9FC(64LL);
        uint64_t v38 = sub_1000D4F6C(v37);
        *os_log_type_t v36 = 136446466;
        v42[0] = sub_10007BA24(v38, v39, &v43);
        sub_1000D4C30();
        sub_1000D4D30();
        v42[0] = sub_1000D4DDC();
        sub_1000D4C30();
        sub_100085E64(v2);
        sub_1000D4C68((void *)&_mh_execute_header, v40, v41, "%{public}s%{public}s");
        sub_1000D4DCC();
        sub_10007B974(v4);
        sub_10007B974((uint64_t)v36);
        sub_10007BA44();
      }

      else
      {

        sub_100085E64(v2);
      }

      sub_1000D4F34();
      sub_1000D4F1C();
    }

    else
    {
      uint64_t v31 = sub_1000930DC();
      sub_1000D5004(v31, (uint64_t *)&unk_100328ED0);
    }
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_1000D4E78(v4, (uint64_t)qword_10033E1A8);
    v46[0] = 0LL;
    v46[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(63LL);
    sub_1000D4D44();
    uint64_t v43 = sub_1000D4AE4(v1);
    unint64_t v44 = v21;
    uint64_t v22 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
    v47._countAndFlagsBits = sub_1000D4DBC(v22);
    sub_1000D4E3C(v47);
    sub_100085EF0();
    sub_100085F08(0xD00000000000003CLL, (uint64_t)"] No billing country to check ExternalPurchase configuration");
    sub_1000D501C();
    sub_1000D4CE4();
    uint64_t v23 = (os_log_s *)sub_100093C38();
    if (sub_1000D4D20(v23))
    {
      uint64_t v24 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v25 = sub_10007B9FC(64LL);
      v46[0] = v25;
      *uint64_t v24 = 136446466;
      sub_10007BA24(v25, v26, v46);
      sub_1000D4C40();
      uint64_t v27 = sub_1000D4C90();
      uint64_t v43 = sub_1000D4DA4(v27, v28, v46);
      sub_1000D4C40();
      sub_100085E64(v0);
      sub_1000D4C7C((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s");
      sub_1000D4D10((uint64_t)&type metadata for Any);
      sub_10007B974(v25);
      sub_10007B974((uint64_t)v24);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v0);
    }

    sub_1000D4F3C();
  }

id sub_1000D4910()
{
  uint64_t v1 = sub_100086318();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_1000D4E18();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - v4;
  id v6 = [v0 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v6);

  sub_1000D4D84();
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t))(v2 + 8);
  uint64_t v8 = v7(v0, v1);
  sub_10007CBC0(v8, &qword_100329310, &OBJC_CLASS___NSDictionary_ptr);
  (*(void (**)(void *, char *, uint64_t))(v2 + 16))(v0, v5, v1);
  id v9 = sub_1000D1B5C((uint64_t)v0);
  v7(v5, v1);
  return v9;
}

uint64_t sub_1000D4A38()
{
  double v3 = sub_1000D1CC4(0xAu, (uint64_t)v6);
  if (v7)
  {
    if (sub_10009369C( (uint64_t)&v5,  (uint64_t)v6,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool)
      && (v5 & 1) != 0)
    {
      return 1LL;
    }
  }

  else
  {
    sub_1000D4FF4(v0, (uint64_t *)&unk_100328ED0, v1, v2, v3);
  }

  uint64_t result = sub_10006B548();
  if ((_DWORD)result)
  {
    if (qword_100328AE0 != -1) {
      swift_once(&qword_100328AE0, sub_1000CF8CC);
    }
    return byte_10033E0A9;
  }

  return result;
}

uint64_t sub_1000D4AE4(void *a1)
{
  id v1 = [a1 bundleIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1000D4B44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10007B1FC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D4B88(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 192LL;
  for (uint64_t i = 12LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1000D4C30()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 160, v1, v0);
}

uint64_t sub_1000D4C40()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 144, v1, v0);
}

uint64_t sub_1000D4C50(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v2, v1);
}

uint64_t sub_1000D4C5C(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v2, v1);
}

void sub_1000D4C68(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_1000D4C7C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000D4C90()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

BOOL sub_1000D4CA4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_1000D4CB4(uint64_t a1@<X8>)
{
  *(void *)(v2 - 144) = a1;
  sub_1000C232C(0, v1, 0);
}

void sub_1000D4CCC(unint64_t a1@<X8>)
{
}

uint64_t sub_1000D4CE4()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

  ;
}

uint64_t sub_1000D4D10@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 2LL, a1 + 8);
}

BOOL sub_1000D4D20(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000D4D30()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

void sub_1000D4D44()
{
  v0._countAndFlagsBits = 91LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1000D4D50()
{
  return sub_10007B1C0(v0 - 112, v0 - 144);
}

uint64_t sub_1000D4D70()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 112, v0 - 144);
}

uint64_t sub_1000D4D84()
{
  return URL.appendingPathComponent(_:isDirectory:)(0x696C702E6F666E49LL, 0xEA00000000007473LL, 0LL);
}

uint64_t sub_1000D4DA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(v4, v3, a3);
}

uint64_t sub_1000D4DB0(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 160, a1);
}

uint64_t sub_1000D4DBC(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 144, a1);
}

uint64_t sub_1000D4DCC()
{
  return swift_arrayDestroy(v1, 2LL, v0);
}

uint64_t sub_1000D4DDC()
{
  return sub_10007A488(v1, v0, (uint64_t *)(v2 - 144));
}

uint64_t sub_1000D4DEC(uint64_t a1)
{
  return swift_allocObject( a1,  ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
         + *(void *)(v1 + 72),
           *(unsigned __int8 *)(v1 + 80) | 7LL);
}

void sub_1000D4E08()
{
}

  ;
}

uint64_t sub_1000D4E34()
{
  return sub_1000D4AE4(v0);
}

void sub_1000D4E3C(Swift::String a1)
{
}

void sub_1000D4E44()
{
  *(void *)(v0 - 112) = 0LL;
  *(void *)(v0 - 104) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(68LL);
}

void sub_1000D4E58()
{
  *(void *)(v0 - 144) = 0LL;
  *(void *)(v0 - 136) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
}

BOOL sub_1000D4E6C()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t sub_1000D4E78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100079604(a1, a2);
  return sub_10007961C(v3, v2);
}

uint64_t sub_1000D4E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100079604(a1, a2);
  return sub_10007961C(v3, v2);
}

uint64_t sub_1000D4EA0()
{
  return String.lowercased()()._countAndFlagsBits;
}

void sub_1000D4EAC()
{
  *(void *)(v1 - 144) = v0;
}

uint64_t sub_1000D4EC8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return v2((char *)a1 + v3, v5, v4);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000D4F1C()
{
  return sub_10007B1A0((void *)(v0 - 112));
}

unint64_t sub_1000D4F24(uint64_t a1, uint64_t a2)
{
  return sub_100132130(a1, a2);
}

void sub_1000D4F2C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_1000D4F34()
{
  return sub_10007A3CC(v0);
}

uint64_t sub_1000D4F3C()
{
  return sub_10007A3CC(v0);
}

  ;
}

  ;
}

uint64_t sub_1000D4F5C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 144, v1, v0);
}

uint64_t sub_1000D4F6C(uint64_t result)
{
  *(void *)(v1 - 144) = result;
  return result;
}

uint64_t sub_1000D4F7C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 176))(v1, v0);
}

void sub_1000D4F8C()
{
  *(void *)(v0 + 16) = v4;
  uint64_t v5 = v0 + 16 * v2;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v3;
}

uint64_t sub_1000D4FA4()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t sub_1000D4FAC()
{
  return sub_1000D4AE4(*(void **)(v0 - 272));
}

uint64_t sub_1000D4FB8(uint64_t a1)
{
  return sub_10007B1C0(a1, v1 - 160);
}

uint64_t sub_1000D4FC0()
{
  return sub_10007B1A0((void *)(v0 - 128));
}

void sub_1000D4FC8(Swift::String a1)
{
}

double sub_1000D4FD0@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_1000D2DB0(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2, a3);
}

uint64_t sub_1000D4FDC(uint64_t a1, uint64_t a2)
{
  return sub_10007D0AC(a1, a2, 1LL, v2);
}

uint64_t sub_1000D4FE8(char a1, uint64_t a2)
{
  return sub_10013110C(a1, a2, 1, v2);
}

uint64_t sub_1000D4FF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_100087418((uint64_t)va, a2);
}

uint64_t sub_1000D4FFC()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000D5004(uint64_t a1, uint64_t *a2)
{
  return sub_100087418(v2 - 144, a2);
}

uint64_t sub_1000D500C(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000D5014()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1000D501C()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000D5024()
{
  return sub_1000BDA00(v0);
}

uint64_t sub_1000D502C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 312));
}

uint64_t sub_1000D5038(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LocalizerLookupStrategy(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000875A4();
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v2,  enum case for LocalizerLookupStrategy.default(_:),  v5);
  uint64_t v7 = AppleServicesLocalizer.string(forKey:with:using:)(a1, a2, 0LL, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  return v7;
}

id sub_1000D50F0(uint64_t a1, void *a2)
{
  uint64_t v6 = sub_100086318();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v10);
  sub_1000875A4();
  id v11 = [objc_allocWithZone(AMSPromise) init];
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  sub_10007D0AC(v3, 1LL, 1LL, v12);
  sub_1000D67E0((uint64_t)v9, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = (v13 + 48) & ~v13;
  unint64_t v15 = (v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = (void *)swift_allocObject(&unk_1002ED418, v15 + 8, v13 | 7);
  v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = v11;
  v16[5] = v2;
  sub_1000D67E0((uint64_t)v16 + v14, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
  *(void *)((char *)v16 + v15) = a2;
  id v17 = v11;
  id v18 = a2;
  sub_1000F9480(v3, (uint64_t)&unk_10032B1E8, (uint64_t)v16);
  swift_release(v19);
  return v17;
}

uint64_t sub_1000D524C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  v7[11] = v8;
  v7[12] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000D52AC, 0LL, 0LL);
}

uint64_t sub_1000D52AC()
{
  *(void *)(v0 + 104) = [*(id *)(v0 + 56) completionHandlerAdapter];
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B1F4);
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D5318;
  return sub_1000D5638(*(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_1000D5318(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 112);
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 128) = a1;
  }
  sub_100093420();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000D5388()
{
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = (void (*)(void *, id, void))v1[2];
  id v3 = *(id *)(v0 + 128);
  v2(v1, v3, 0LL);
  _Block_release(v1);

  swift_task_dealloc(*(void *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D53F4()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 96);
  uint64_t v3 = sub_100079604(*(void *)(v0 + 88), (uint64_t)qword_10033E1A8);
  sub_10007961C(v3, (uint64_t)v2);
  v21[0] = 0LL;
  v21[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(45LL);
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0xE000000000000000LL;
  v4._object = (void *)0x80000001002A0F80LL;
  v4._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v4);
  *(void *)(v0 + 32) = v1;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v5 = _print_unlocked<A, B>(_:_:)(v0 + 32, v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  static os_log_type_t.error.getter(v5);
  uint64_t v7 = sub_1000D67D0();
  uint64_t v8 = v2;
  id v9 = (os_log_s *)Logger.logObject.getter(v7);
  if (sub_1000D67C0(v9))
  {
    uint64_t v10 = sub_10007B9FC(22LL);
    uint64_t v11 = sub_10007B9FC(64LL);
    v21[0] = v11;
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v0 + 40) = sub_10007BA24(v11, v12, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v10 + 4);
    *(_WORD *)(v10 + 12) = 2082;
    uint64_t v13 = swift_bridgeObjectRetain(v6);
    *(void *)(v0 + 48) = sub_1000D4DA4(v13, v14, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v10 + 14);
    sub_1000B1FD4();
    sub_1000D67AC((void *)&_mh_execute_header, v15, v16, "%{public}s%{public}s");
    sub_1000D4D10((uint64_t)&type metadata for Any);
    sub_10007B974(v11);
    sub_10007B974(v10);

    sub_100085EF0();
  }

  else
  {
    sub_1000B1FD4();
  }

  uint64_t v17 = *(void *)(v0 + 120);
  id v18 = *(void (***)(void, void, void))(v0 + 104);
  sub_10007A3CC(*(void *)(v0 + 96));
  swift_errorRetain(v17);
  uint64_t v19 = (void *)_convertErrorToNSError(_:)(v17);
  ((void (**)(void, void, void *))v18)[2](v18, 0LL, v19);

  _Block_release(v18);
  swift_errorRelease(v17);
  swift_errorRelease(v17);
  swift_task_dealloc(*(void *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D5638(uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  uint64_t v4 = type metadata accessor for BagLanguageSource(0LL);
  v3[36] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[37] = v5;
  v3[38] = sub_10009BFAC(v5);
  uint64_t v6 = type metadata accessor for Bag(0LL);
  v3[39] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[40] = v7;
  v3[41] = sub_10009BFD0(v7);
  v3[42] = swift_task_alloc(v2);
  uint64_t v8 = type metadata accessor for JetPackPath(0LL);
  v3[43] = sub_10009BFAC(*(void *)(v8 - 8));
  uint64_t v9 = type metadata accessor for LocalizedStringsBundle(0LL);
  v3[44] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[45] = v10;
  v3[46] = sub_10009BFAC(v10);
  uint64_t v11 = type metadata accessor for InMemoryJetPackResourceBundle(0LL);
  v3[47] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[48] = v12;
  v3[49] = sub_10009BFAC(v12);
  uint64_t v13 = type metadata accessor for JetPackSigningPolicy(0LL);
  v3[50] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[51] = v14;
  v3[52] = sub_10009BFAC(v14);
  uint64_t v15 = type metadata accessor for InMemoryJetPackLoader(0LL);
  v3[53] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[54] = v16;
  v3[55] = sub_10009BFAC(v16);
  uint64_t v17 = sub_100086318();
  v3[56] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[57] = v18;
  v3[58] = sub_10009BFAC(v18);
  uint64_t v19 = type metadata accessor for JetPackAMSRemoteStreamSource(0LL);
  v3[59] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[60] = v20;
  v3[61] = sub_10009BFAC(v20);
  uint64_t v21 = type metadata accessor for SKLogger(0LL);
  v3[62] = v21;
  v3[63] = sub_10009BFD0(*(void *)(v21 - 8));
  v3[64] = swift_task_alloc(v2);
  sub_100093420();
  return swift_task_switch(v22, v23, v24);
}

uint64_t sub_1000D5790()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = (void *)v0[64];
  uint64_t v2 = v0[56];
  uint64_t v3 = sub_100079604(v0[62], (uint64_t)qword_10033E1A8);
  v0[65] = v3;
  sub_10007961C(v3, (uint64_t)v1);
  _StringGuts.grow(_:)(44LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v34[0] = 0xD00000000000002ALL;
  v34[1] = 0x80000001002A0FB0LL;
  unint64_t v4 = sub_1000D6744();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v4);
  String.append(_:)(v5);
  uint64_t v6 = sub_100085EF0();
  static os_log_type_t.default.getter(v6);
  uint64_t v7 = sub_1000D67D0();
  uint64_t v8 = v1;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v7);
  if (sub_1000D67C0(v9))
  {
    uint64_t v10 = sub_10007B9FC(22LL);
    uint64_t v11 = sub_10007B9FC(64LL);
    v34[0] = v11;
    *(_DWORD *)uint64_t v10 = 136446466;
    v0[31] = sub_10007BA24(v11, v12, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v10 + 4);
    *(_WORD *)(v10 + 12) = 2082;
    uint64_t v13 = swift_bridgeObjectRetain(0x80000001002A0FB0LL);
    v0[32] = sub_1000D4DA4(v13, v14, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v10 + 14);
    sub_1000B1FD4();
    sub_1000D67AC((void *)&_mh_execute_header, v15, v16, "%{public}s%{public}s");
    sub_1000D4D10((uint64_t)&type metadata for Any);
    sub_10007B974(v11);
    sub_10007B974(v10);

    sub_100085EF0();
  }

  else
  {
    sub_1000B1FD4();
  }

  uint64_t v17 = v0[61];
  uint64_t v33 = v0[60];
  uint64_t v18 = v0[58];
  uint64_t v32 = v0[59];
  uint64_t v20 = v0[56];
  uint64_t v19 = v0[57];
  uint64_t v21 = v0[51];
  uint64_t v22 = v0[52];
  uint64_t v31 = v0[50];
  uint64_t v23 = v0[33];
  sub_10007A3CC(v0[64]);
  sub_1000DF67C();
  uint64_t v25 = v24;
  v0[66] = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v23, v20);
  id v26 = [v25 configuration];
  sub_1000DF9D4();
  JetPackAMSRemoteStreamSource.init(url:urlSessionConfiguration:urlRequestEncoder:)(v18, v26, v27);
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))( v22,  enum case for JetPackSigningPolicy.required(_:),  v31);
  v0[5] = type metadata accessor for JetPackManagedKeyProvider(0LL);
  v0[6] = &protocol witness table for JetPackManagedKeyProvider;
  sub_10009D60C(v0 + 2);
  JetPackManagedKeyProvider.init()();
  InMemoryJetPackLoader.init(signingPolicy:keyProvider:)(v22, v0 + 2);
  v0[10] = v32;
  v0[11] = &protocol witness table for JetPackAMSRemoteStreamSource;
  uint64_t v28 = sub_10009D60C(v0 + 7);
  sub_1000D67E0((uint64_t)v28, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16));
  uint64_t v29 = (void *)swift_task_alloc(async function pointer to InMemoryJetPackLoader.bundle(from:)[1]);
  v0[67] = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1000D5AB4;
  return InMemoryJetPackLoader.bundle(from:)(v0[49], v0 + 7);
}

uint64_t sub_1000D5AB4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 536);
  *(void *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    sub_10007B1A0((void *)(v2 + 56));
  }
  sub_100093420();
  return sub_1000C5F5C(v4, v5, v6);
}

uint64_t sub_1000D5B18()
{
  uint64_t v1 = (void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 376);
  sub_10007961C(*(void *)(v0 + 520), *(void *)(v0 + 504));
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v48 = 0xD00000000000001FLL;
  unint64_t v49 = 0x80000001002A0FE0LL;
  uint64_t v3 = JetPackResourceBundle.version.getter(v2, &protocol witness table for InMemoryJetPackResourceBundle);
  if (v4)
  {
    unint64_t v5 = v4;
  }

  else
  {
    uint64_t v3 = 48LL;
    unint64_t v5 = 0xE100000000000000LL;
  }

  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v3);
  uint64_t v7 = swift_bridgeObjectRelease(v5);
  uint64_t v9 = v48;
  unint64_t v8 = v49;
  os_log_type_t v10 = static os_log_type_t.default.getter(v7);
  uint64_t v11 = swift_bridgeObjectRetain_n(v49, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  if (os_log_type_enabled(v12, v10))
  {
    uint64_t v13 = sub_10007B9FC(22LL);
    uint64_t v14 = sub_10007B9FC(64LL);
    uint64_t v48 = v14;
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    *(void *)(v0 + 232) = sub_10007BA24(v14, v16, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v13 + 4);
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain(v8);
    *(void *)(v0 + 240) = sub_10007A488(v9, v8, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v13 + 14);
    sub_1000C6DFC();
    _os_log_impl((void *)&_mh_execute_header, v12, v10, "%{public}s%{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v17 = v15;
    uint64_t v1 = (void *)(v0 + 96);
    sub_10007B974(v17);
    sub_10007B974(v13);

    swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_1000C6DFC();
  }

  uint64_t v18 = *(void *)(v0 + 544);
  uint64_t v20 = *(void *)(v0 + 384);
  uint64_t v19 = *(void *)(v0 + 392);
  uint64_t v21 = *(void *)(v0 + 376);
  uint64_t v22 = *(void *)(v0 + 344);
  sub_10007A3CC(*(void *)(v0 + 504));
  *(void *)(v0 + 120) = v21;
  *(void *)(v0 + 128) = &protocol witness table for InMemoryJetPackResourceBundle;
  uint64_t v23 = sub_10009D60C(v1);
  (*(void (**)(void *, uint64_t, uint64_t))(v20 + 16))(v23, v19, v21);
  JetPackPath.init(_:)(0x736A2E7865646E69LL, 0xEA00000000006E6FLL);
  LocalizedStringsBundle.init(resourceBundle:indexPath:)(v1, v22);
  if (v18)
  {
    uint64_t v25 = *(void *)(v0 + 480);
    uint64_t v24 = *(void *)(v0 + 488);
    uint64_t v26 = *(void *)(v0 + 472);
    uint64_t v27 = *(void *)(v0 + 432);
    uint64_t v28 = *(void *)(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 392);
    uint64_t v30 = *(void *)(v0 + 376);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
    sub_1000AAA04(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    uint64_t v44 = *(void *)(v0 + 336);
    uint64_t v46 = *(void *)(v0 + 328);
    swift_task_dealloc(*(void *)(v0 + 512));
    sub_1000939C0();
    sub_1000931C8();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    sub_1000AABB0();
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    sub_100093280();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v32 = *(void *)(v0 + 352);
    uint64_t v43 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 368);
    uint64_t v34 = *(void *)(v0 + 328);
    uint64_t v33 = *(void *)(v0 + 336);
    uint64_t v36 = *(void *)(v0 + 312);
    uint64_t v35 = *(void *)(v0 + 320);
    uint64_t v37 = *(void *)(v0 + 304);
    uint64_t v47 = *(void *)(v0 + 296);
    uint64_t v38 = *(void *)(v0 + 288);
    sub_1000DEA24();
    Bag.init(from:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v34, v33, v36);
    BagLanguageSource.init(bag:)(v34);
    type metadata accessor for AppleServicesLocalizer(0LL);
    *(void *)(v0 + 160) = v32;
    *(void *)(v0 + 168) = &protocol witness table for LocalizedStringsBundle;
    uint64_t v39 = sub_10009D60C((void *)(v0 + 136));
    (*(void (**)(void *, uint64_t, uint64_t))(v43 + 16))(v39, v45, v32);
    *(void *)(v0 + 200) = v38;
    *(void *)(v0 + 208) = &protocol witness table for BagLanguageSource;
    uint64_t v40 = sub_10009D60C((void *)(v0 + 176));
    (*(void (**)(void *, uint64_t, uint64_t))(v47 + 16))(v40, v37, v38);
    type metadata accessor for BaseObjectGraph(0LL);
    uint64_t v41 = BaseObjectGraph.__allocating_init(name:_:)( 0xD000000000000011LL,  0x80000001002A1000LL,  _swiftEmptyArrayStorage);
    *(void *)(v0 + 552) = v41;
    uint64_t v42 = (void *)swift_task_alloc(async function pointer to static AppleServicesLocalizer.fetch(contentsOf:for:asPartOf:)[1]);
    *(void *)(v0 + 560) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1000D5F8C;
    return static AppleServicesLocalizer.fetch(contentsOf:for:asPartOf:)(v0 + 136, v0 + 176, v41);
  }

uint64_t sub_1000D5F8C(uint64_t a1)
{
  unint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 560LL);
  *(void *)(*(void *)v2 + 568LL) = v1;
  swift_task_dealloc(v5);
  swift_release(v4[69]);
  if (!v1)
  {
    v4[72] = a1;
    sub_10007B1A0(v4 + 22);
    sub_10007B1A0(v4 + 17);
  }

  sub_100093420();
  return sub_1000C5F5C(v6, v7, v8);
}

uint64_t sub_1000D6020()
{
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v12 = *(void **)(v0 + 528);
  uint64_t v24 = *(void *)(v0 + 512);
  uint64_t v25 = *(void *)(v0 + 504);
  uint64_t v22 = *(void *)(v0 + 472);
  uint64_t v23 = *(void *)(v0 + 488);
  uint64_t v26 = *(void *)(v0 + 464);
  uint64_t v20 = *(void *)(v0 + 440);
  uint64_t v21 = *(void *)(v0 + 480);
  uint64_t v18 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 424);
  uint64_t v28 = *(void *)(v0 + 416);
  uint64_t v16 = *(void *)(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v14 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 384);
  uint64_t v13 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v29 = *(void *)(v0 + 344);
  uint64_t v30 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 296);
  uint64_t v9 = *(objc_class **)(v0 + 280);
  os_log_type_t v10 = (char *)objc_allocWithZone(v9);
  *(void *)&v10[OBJC_IVAR____TtC9storekitd19LocalizationJetPack_localizer] = v1;
  *(void *)(v0 + 216) = v10;
  *(void *)(v0 + 224) = v9;
  id v27 = objc_msgSendSuper2((objc_super *)(v0 + 216), "init");

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  sub_1000932D4();
  swift_task_dealloc(v26);
  sub_1000932CC();
  swift_task_dealloc(v28);
  sub_100093124();
  sub_1000931C8();
  swift_task_dealloc(v29);
  sub_1000939C0();
  swift_task_dealloc(v30);
  sub_100093280();
  return (*(uint64_t (**)(id))(v0 + 8))(v27);
}

uint64_t sub_1000D61E8()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v0 + 432);

  sub_1000AAA04(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1000C6730(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10007B1A0((void *)(v0 + 56));
  uint64_t v3 = sub_1000D6784();
  uint64_t v6 = v4;
  uint64_t v7 = *(void *)(v0 + 304);
  swift_task_dealloc(v3);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  sub_1000939C0();
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D62B4()
{
  uint64_t v16 = *(void *)(v0 + 472);
  uint64_t v17 = *(void *)(v0 + 488);
  uint64_t v14 = *(void *)(v0 + 440);
  uint64_t v15 = *(void *)(v0 + 480);
  uint64_t v12 = *(void *)(v0 + 432);
  uint64_t v13 = *(void *)(v0 + 424);
  uint64_t v9 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 296);

  sub_1000AAA04(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1000C6730(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  sub_10007B1A0((void *)(v0 + 176));
  sub_10007B1A0((void *)(v0 + 136));
  uint64_t v6 = sub_1000D6784();
  uint64_t v18 = v7;
  uint64_t v19 = *(void *)(v0 + 304);
  swift_task_dealloc(v6);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  sub_1000939C0();
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D654C()
{
}

uint64_t type metadata accessor for LocalizationJetPack()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd19LocalizationJetPack);
}

uint64_t sub_1000D65B4()
{
  uint64_t v1 = sub_100086318();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000D6648(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100086318() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v12 = (void *)swift_task_alloc(dword_10032B1E4);
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_1000D66FC;
  return sub_1000D524C(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000D66FC()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_1000D6744()
{
  unint64_t result = qword_10032A858;
  if (!qword_10032A858)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_10032A858);
  }

  return result;
}

uint64_t sub_1000D6784()
{
  return *(void *)(v0 + 512);
}

void sub_1000D67AC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

BOOL sub_1000D67C0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000D67D0()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000D67E0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_1000D67E8(id a1, void *a2, id a3)
{
  uint64_t v4 = v3;
  if ([v4 code] == a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)([v4 domain]);
    sub_1000CF044();
    if (a3 != a1 || v4 != a2) {
      sub_1000D75CC();
    }
    sub_100085EF0();
  }

  sub_1000C6594();
}

void sub_1000D6880()
{
  if ((objc_msgSend(v0, "ams_isUserCancelledError") & 1) == 0
    && (objc_msgSend(v0, "ak_isUserCancelError") & 1) == 0)
  {
    sub_1000D67E8((id)0xD00000000000001ELL, (void *)0x800000010029F840LL, (id)0x3E9);
    if ((v1 & 1) == 0)
    {
      uint64_t v2 = AMSErrorDomain;
      uint64_t v3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
      sub_1000D67E8(v3, v4, (id)6);
      char v6 = v5;
      sub_10007BA44();
      if ((v6 & 1) == 0)
      {
        uint64_t v7 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
        sub_1000D67E8(v7, v8, (id)0x1FC);
        char v10 = v9;
        sub_100085EF0();
        if ((v10 & 1) == 0)
        {
          uint64_t v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
          sub_1000D67E8(v11, v12, (id)0x38B);
          sub_100085EF0();
        }
      }
    }
  }

  sub_1000AB000();
}

unint64_t sub_1000D6960(void *a1)
{
  return (unint64_t)sub_1000D69B0(a1, (uint64_t)sub_1000D6880, (uint64_t (*)(id))sub_1000D6960) & 1;
}

unint64_t sub_1000D6988(void *a1)
{
  return (unint64_t)sub_1000D69B0(a1, (uint64_t)sub_1000D6D20, (uint64_t (*)(id))sub_1000D6988) & 1;
}

id sub_1000D69B0(void *a1, uint64_t a2, uint64_t (*a3)(id))
{
  id v6 = a1;
  if ((sub_1000D7660() & 1) == 0)
  {
    NSErrorUserInfoKey v7 = NSMultipleUnderlyingErrorsKey;
    NSErrorUserInfoKey v8 = NSUnderlyingErrorKey;
    do
    {
      id v9 = [v4 userInfo];
      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v9,  &type metadata for String,  (char *)&type metadata for Any + 8);

      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v13 = v12;
      if (*(void *)(v10 + 16) && (unint64_t v14 = sub_100132130(v11, v12), (v15 & 1) != 0))
      {
        sub_1000D7644(v14, v15, v16, v17, v18, v19, v20);
      }

      else
      {
        __int128 v62 = 0u;
        __int128 v63 = 0u;
      }

      swift_bridgeObjectRelease(v13);
      sub_10007B980();
      if (*((void *)&v63 + 1))
      {
        uint64_t v21 = sub_10007B1FC(&qword_10032B1F8);
        if ((sub_1000D75E4(v21, v22, v23, v21, v24, v25, v26, v27, v58, v59) & 1) != 0)
        {
          uint64_t v28 = v64;
          if ((unint64_t)v64 >> 62)
          {
            if (v64 < 0) {
              unint64_t v36 = v64;
            }
            else {
              unint64_t v36 = v64 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain_n(v64, 2LL);
            uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v36);
            sub_10007B980();
            if (v29)
            {
LABEL_12:
              uint64_t v59 = (uint64_t)v7;
              uint64_t v60 = a2;
              uint64_t v30 = 4LL;
              while (1)
              {
                id result = (v28 & 0xC000000000000001LL) != 0
                       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v30 - 4, v28)
                       : *(id *)(v28 + 8 * v30);
                uint64_t v32 = result;
                uint64_t v33 = v30 - 3;
                if (__OFADD__(v30 - 4, 1LL)) {
                  break;
                }
                char v34 = a3(result);
                if (v3)
                {

                  sub_1000D75C0();
                  return (id)(v57 & 1);
                }

                char v35 = v34;

                if ((v35 & 1) != 0)
                {

                  sub_1000D75C0();
                  goto LABEL_38;
                }

                ++v30;
                if (v33 == v29)
                {
                  sub_1000D75C0();
                  NSErrorUserInfoKey v7 = (NSErrorUserInfoKey)v59;
                  a2 = v60;
                  goto LABEL_27;
                }
              }

              __break(1u);
              return result;
            }
          }

          else
          {
            uint64_t v29 = *(void *)((v64 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            swift_bridgeObjectRetain(v64);
            if (v29) {
              goto LABEL_12;
            }
          }

          sub_1000D75C0();
LABEL_27:
          NSErrorUserInfoKey v8 = NSUnderlyingErrorKey;
        }
      }

      else
      {
        sub_10007B294((uint64_t)&v62);
      }

      id v37 = [v4 userInfo];
      uint64_t v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v37,  &type metadata for String,  (char *)&type metadata for Any + 8);

      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v41 = v40;
      if (*(void *)(v38 + 16) && (unint64_t v42 = sub_100132130(v39, v40), (v43 & 1) != 0))
      {
        sub_1000D7644(v42, v43, v44, v45, v46, v47, v48);
      }

      else
      {
        __int128 v62 = 0u;
        __int128 v63 = 0u;
      }

      sub_10007B980();

      swift_bridgeObjectRelease(v41);
      if (!*((void *)&v63 + 1))
      {
        sub_10007B294((uint64_t)&v62);
LABEL_41:
        char v57 = 0;
        return (id)(v57 & 1);
      }

      unint64_t v49 = sub_1000D756C();
      if ((sub_1000D75E4(v49, v50, v51, v49, v52, v53, v54, v55, v58, v59) & 1) == 0) {
        goto LABEL_41;
      }
      id v56 = (id)v64;
    }

    while ((sub_1000D7660() & 1) == 0);
  }

LABEL_38:
  char v57 = 1;
  return (id)(v57 & 1);
}

void sub_1000D6CAC(uint64_t a1, uint64_t a2)
{
  char v5 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)([v5 domain]);
  sub_1000CF044();
  if (v4 != a1 || v3 != a2) {
    sub_1000D75CC();
  }
  sub_100085EF0();
  sub_1000C6594();
}

void sub_1000D6D20()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKAppleIDAuthenticationErrorDomain);
  sub_1000D6CAC(v1, v2);
  char v4 = v3;
  sub_100085EF0();
  if ((v4 & 1) != 0) {
    [v0 code];
  }
  sub_1000AB000();
}

id sub_1000D6D80(char *a1)
{
  id v2 = v1;
  v182 = _swiftEmptyDictionarySingleton;
  if (a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"server-correlation-id");
    sub_1000D7654();
    uint64_t v4 = *(void *)&a1[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_serverCorrelationID + 8];
    if (v4)
    {
      uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_serverCorrelationID];
      v179 = &type metadata for String;
      *(void *)&__int128 v178 = v5;
      *((void *)&v178 + 1) = v4;
    }

    else
    {
      sub_1000D75A8();
    }

    id v6 = a1;
    swift_bridgeObjectRetain(v4);
    sub_1000D75B4((uint64_t)&v178);
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"client-environment-type");
    sub_1000D7654();
    uint64_t v7 = *(void *)&v6[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_environment + 8];
    if (v7)
    {
      uint64_t v8 = *(void *)&v6[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_environment];
      v179 = &type metadata for String;
      *(void *)&__int128 v178 = v8;
      *((void *)&v178 + 1) = v7;
    }

    else
    {
      sub_1000D75A8();
    }

    swift_bridgeObjectRetain(v7);
    sub_1000D75B4((uint64_t)&v178);
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"storefront-country-code");
    sub_1000D7654();
    uint64_t v9 = *(void *)&v6[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_storefrontCountryCode + 8];
    if (v9)
    {
      uint64_t v10 = *(void *)&v6[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_storefrontCountryCode];
      v179 = &type metadata for String;
      *(void *)&__int128 v178 = v10;
      *((void *)&v178 + 1) = v9;
    }

    else
    {
      sub_1000D75A8();
    }

    swift_bridgeObjectRetain(v9);
    sub_1000D75B4((uint64_t)&v178);
  }

  id v11 = sub_100093DE4((uint64_t)a1, "userInfo");
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for String,  (char *)&type metadata for Any + 8);

  uint64_t v13 = AMSErrorUserInfoKeyServerErrorCode;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorUserInfoKeyServerErrorCode);
  uint64_t v16 = v15;
  sub_10012A674(v14, v15, v12, &v178);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = swift_bridgeObjectRelease(v12);
  if (v179)
  {
    char v25 = swift_dynamicCast(&v180, &v178, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL);
    if ((v25 & 1) != 0)
    {
      char v26 = 0;
      uint64_t v27 = v180;
LABEL_15:
      char v181 = 0;
      goto LABEL_28;
    }

    uint64_t v180 = 0LL;
    char v28 = v25 ^ 1;
  }

  else
  {
    sub_1000D7680(v17, v18, v19, v20, v21, v22, v23, v24, v166, (uint64_t)v167, v168, v169, v170, (uint64_t)v171);
    uint64_t v180 = 0LL;
    char v28 = 1;
  }

  char v181 = v28;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorUserInfoKeyServerPayload);
  sub_10012A674(v29, v30, (uint64_t)v182, &v178);
  uint64_t v31 = sub_10007BA44();
  if (!v179)
  {
    sub_1000D7680(v31, v32, v33, v34, v35, v36, v37, v38, v166, (uint64_t)v167, v168, v169, v170, (uint64_t)v171);
LABEL_25:
    double v54 = sub_1000D75A8();
    goto LABEL_26;
  }

  uint64_t v39 = sub_10007B1FC(&qword_10032A580);
  if ((sub_1000D75F8( v39,  v40,  v41,  v39,  v42,  v43,  v44,  v45,  v166,  (uint64_t)v167,  v168,  v169,  v170,  (uint64_t)v171,  v172,  v173) & 1) == 0 || !v177)
  {
    goto LABEL_25;
  }

  sub_10012A674(0x546572756C696166LL, 0xEB00000000657079LL, v177, &v178);
  uint64_t v46 = sub_10007BA44();
  if (!v179)
  {
LABEL_26:
    sub_1000D7680(v46, v47, v48, v49, v50, v51, v52, v53, v166, (uint64_t)v167, v168, v169, v170, (uint64_t)v171, v54);
    goto LABEL_27;
  }

  if ((sub_1000D75F8( v46,  v47,  v48,  (uint64_t)&type metadata for Int,  v50,  v51,  v52,  v53,  v166,  (uint64_t)v167,  v168,  v169,  v170,  (uint64_t)v171,  v172,  v173) & 1) != 0)
  {
    char v26 = 0;
    uint64_t v27 = v177;
    uint64_t v180 = v177;
    goto LABEL_15;
  }

LABEL_27:
  uint64_t v27 = 0LL;
  uint64_t v180 = 0LL;
  char v26 = 1;
  char v181 = 1;
LABEL_28:
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v57 = v56;
  if ((v26 & 1) != 0)
  {
    sub_1000D75A8();
  }

  else
  {
    v179 = &type metadata for Int;
    *(void *)&__int128 v178 = v27;
  }

  sub_10012A9E0((uint64_t)&v178, v55, v57);
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSServerErrorDomain);
  sub_1000D6CAC(v58, v59);
  char v61 = v60;
  sub_10007BA44();
  if ((v61 & 1) == 0)
  {
    if ((sub_1000D6960(v2) & 1) != 0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      sub_1000D7634();
      id v67 = (id)sub_1000D7690();
      sub_1000D766C();
      if (v2)
      {
        uint64_t ErrorValue = swift_getErrorValue(v2, &v169, &v166);
        v179 = v167;
        char v76 = sub_1000D7688( ErrorValue,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v166,  (uint64_t)v167,  v168,  v169,  v170,  (uint64_t)v171);
        sub_1000D7620((uint64_t)v76);
      }

      else
      {
        double v85 = sub_1000D75A8();
      }

      sub_1000D760C(v77, v78, v79, v80, v81, v82, v83, v84, v166, (uint64_t)v167, v168, v169, v170, (uint64_t)v171, v85);
      sub_10008622C();
      uint64_t v140 = v139;
      uint64_t v141 = 907LL;
      goto LABEL_69;
    }

    uint64_t v86 = AMSErrorDomain;
    Swift::String v87 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
    Swift::String v89 = v88;
    sub_1000D67E8(v87, v88, (id)0x131);
    char v91 = v90;
    swift_bridgeObjectRelease(v89);
    if ((v91 & 1) != 0)
    {
      if ((v181 & 1) != 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
        sub_1000D7634();
        id v92 = (id)sub_1000D7690();
        sub_1000D766C();
        if (v2)
        {
          uint64_t v93 = swift_getErrorValue(v2, &v173, &v170);
          v179 = v171;
          uint64_t v101 = sub_1000D7688( v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v166,  (uint64_t)v167,  v168,  v169,  v170,  (uint64_t)v171);
          sub_1000D7620((uint64_t)v101);

LABEL_56:
          sub_1000D760C( v102,  v103,  v104,  v105,  v106,  v107,  v108,  v109,  v166,  (uint64_t)v167,  v168,  v169,  v170,  (uint64_t)v171,  v110);
          goto LABEL_57;
        }

    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

uint64_t sub_1000D750C(void *a1)
{
  id v1 = objc_msgSend(a1, "ams_message");
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_1000D756C()
{
  unint64_t result = qword_1003292F0;
  if (!qword_1003292F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003292F0);
  }

  return result;
}

double sub_1000D75A8()
{
  return 0.0;
}

void sub_1000D75B4(uint64_t a1)
{
}

uint64_t sub_1000D75C0()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000D75CC()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v1, v0, 0LL);
}

uint64_t sub_1000D75E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return swift_dynamicCast(v11 - 72, va, v10 + 8, a4, 6LL);
}

uint64_t sub_1000D75F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v18 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v16 + 8, a4, 6LL);
}

void sub_1000D760C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_1000D7620(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t sub_1000D7634()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_1000D7644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10007B1C0(*(void *)(v7 + 56) + 32 * a1, (uint64_t)va);
}

  ;
}

uint64_t sub_1000D7660()
{
  return v0();
}

void sub_1000D766C()
{
}

uint64_t sub_1000D7674()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000D7680( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return sub_10007B294((uint64_t)va);
}

void *sub_1000D7688( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return sub_10009D60C((uint64_t *)va);
}

uint64_t sub_1000D7690()
{
  return ASDErrorWithSafeUserInfo();
}

void PurchaseIntentRequest.Kind.hash(into:)(uint64_t a1, char a2)
{
}

void sub_1000D76BC(uint64_t a1)
{
}

id sub_1000D76C4(uint64_t a1, uint64_t a2)
{
  id v2 = [objc_allocWithZone(AMSURLParser) initWithBag:a2];
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  id v6 = [v2 typeForURL:v4];

  id v19 = 0LL;
  id v7 = [v6 resultWithError:&v19];

  id v8 = v19;
  if (v7)
  {
    id v9 = v19;
    id v8 = [v7 integerValue];
  }

  else
  {
    id v10 = v19;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11, v12, v13, v14, v15, v16, v17);
  }

  return v8;
}

Class sub_1000D77F4(uint64_t a1, uint64_t a2)
{
  Class isa = v2;
  uint64_t v6 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  __chkstk_darwin(v6);
  id v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B4064(a1, (uint64_t)v8);
  if (sub_10007D824((uint64_t)v8, 1LL, v9) == 1)
  {
    sub_1000B3FC4((uint64_t)v8);
    unint64_t v13 = sub_1000D7B68();
    uint64_t v14 = sub_100093030((uint64_t)&type metadata for URLParserHelper.ParserError, v13);
    *uint64_t v15 = 1;
    swift_willThrow(v14, v15, v16, v17, v18, v19, v20);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    if (a2)
    {
      swift_unknownObjectRetain(a2);
      id v21 = sub_1000D76C4((uint64_t)v12, a2);
      if (v2)
      {
        sub_1000D7CEC();
        swift_unknownObjectRelease(a2);
      }

      else
      {
        Swift::Int v31 = (Swift::Int)v21;
        sub_1000D7BA4();
        Class isa = NSNumber.init(integerLiteral:)(v31).super.super.isa;
        swift_unknownObjectRelease(a2);
        sub_1000D7CEC();
      }
    }

    else
    {
      unint64_t v22 = sub_1000D7B68();
      uint64_t v23 = sub_100093030((uint64_t)&type metadata for URLParserHelper.ParserError, v22);
      *uint64_t v24 = 1;
      swift_willThrow(v23, v24, v25, v26, v27, v28, v29);
      sub_1000D7CEC();
    }
  }

  return isa;
}

id sub_1000D7AC8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for objc_URLParserHelper();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000D7B18()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for objc_URLParserHelper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for objc_URLParserHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd20objc_URLParserHelper);
}

unint64_t sub_1000D7B68()
{
  unint64_t result = qword_10032B228;
  if (!qword_10032B228)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027BE5C, &type metadata for URLParserHelper.ParserError);
    atomic_store(result, (unint64_t *)&qword_10032B228);
  }

  return result;
}

unint64_t sub_1000D7BA4()
{
  unint64_t result = qword_100329340;
  if (!qword_100329340)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100329340);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for URLParserHelper.ParserError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000D7C2C + 4 * byte_10027BDA5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D7C60 + 4 * asc_10027BDA0[v4]))();
}

uint64_t sub_1000D7C60(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7C68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D7C70LL);
  }
  return result;
}

uint64_t sub_1000D7C7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D7C84LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000D7C88(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7C90(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for URLParserHelper.ParserError()
{
  return &type metadata for URLParserHelper.ParserError;
}

unint64_t sub_1000D7CB0()
{
  unint64_t result = qword_10032B230;
  if (!qword_10032B230)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027BE34, &type metadata for URLParserHelper.ParserError);
    atomic_store(result, (unint64_t *)&qword_10032B230);
  }

  return result;
}

uint64_t sub_1000D7CEC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000D7CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Client.Server(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  sub_100131120();
  uint64_t v14 = v13;
  unint64_t v15 = *(void *)(v13 + 16);
  unint64_t v16 = v15 + 1;
  if (v15 >= *(void *)(v13 + 24) >> 1)
  {
    sub_1000D8414();
    uint64_t v14 = v37;
  }

  *(void *)(v14 + 16) = v16;
  uint64_t v17 = v14 + 24 * v15;
  *(_BYTE *)(v17 + 32) = 1;
  *(void *)(v17 + 40) = 0xD000000000000011LL;
  *(void *)(v17 + 48) = 0x80000001002A1070LL;
  if (a5)
  {
    unint64_t v18 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain(a5);
    if (v16 >= v18 >> 1)
    {
      sub_1000D8414();
      uint64_t v14 = v38;
    }

    sub_1000D8420();
    *(_BYTE *)(v19 - 8) = 3;
  }

  else
  {
    sub_1000DE6D4();
    uint64_t v20 = sub_10007B1FC(&qword_10032A028);
    int v21 = sub_10007D824((uint64_t)v12, 2LL, v20);
    sub_1000D819C((uint64_t)v12);
    if (v21 != 1) {
      goto LABEL_12;
    }
    uint64_t v43 = *(void *)(a1 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
    unint64_t v22 = sub_1000D81D8();
    String.init<A>(_:radix:uppercase:)(&v43, 10LL, 0LL, &type metadata for UInt64, v22);
    a5 = v23;
    if (*(void *)(v14 + 16) >= *(void *)(v14 + 24) >> 1)
    {
      sub_1000D8414();
      uint64_t v14 = v41;
    }

    sub_1000D8420();
    *(_BYTE *)(v19 - 8) = 0;
  }

  *(void *)(v19 + 8) = a5;
LABEL_12:
  sub_1000DE6D4();
  uint64_t v24 = sub_10007B1FC(&qword_10032A028);
  int v25 = sub_10007D824((uint64_t)v10, 2LL, v24);
  if (v25)
  {
    if (v25 != 1)
    {
      if (*(_BYTE *)(a1 + OBJC_IVAR____TtC9storekitd6Client_isBeta)) {
        uint64_t v26 = 0x67696C6674736574LL;
      }
      else {
        uint64_t v26 = 0x786F62646E6173LL;
      }
      if (*(_BYTE *)(a1 + OBJC_IVAR____TtC9storekitd6Client_isBeta)) {
        unint64_t v27 = 0xEA00000000007468LL;
      }
      else {
        unint64_t v27 = 0xE700000000000000LL;
      }
      unint64_t v28 = *(void *)(v14 + 16);
      if (v28 >= *(void *)(v14 + 24) >> 1)
      {
        sub_1000D8414();
        uint64_t v14 = v39;
      }

      *(void *)(v14 + 16) = v28 + 1;
      uint64_t v29 = v14 + 24 * v28;
      *(_BYTE *)(v29 + 32) = 2;
      *(void *)(v29 + 40) = v26;
      *(void *)(v29 + 48) = v27;
    }
  }

  else
  {
    uint64_t v31 = *(void *)(a1 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
    uint64_t v30 = *(void *)(a1 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8);
    unint64_t v32 = *(void *)(v14 + 16);
    unint64_t v33 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain(v30);
    if (v32 >= v33 >> 1)
    {
      sub_1000D8414();
      uint64_t v14 = v40;
    }

    *(void *)(v14 + 16) = v32 + 1;
    uint64_t v34 = v14 + 24 * v32;
    *(_BYTE *)(v34 + 32) = 0;
    *(void *)(v34 + 40) = v31;
    *(void *)(v34 + 48) = v30;
    uint64_t v35 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8LL))(v10, v35);
  }

  return v14;
}

id sub_1000D802C()
{
  if (qword_100328C70 != -1) {
    swift_once(&qword_100328C70, sub_10012C0F4);
  }
  qword_10033E0C8 = qword_10033E2F8;
  return (id)qword_10033E2F8;
}

unint64_t sub_1000D8074(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002EA488, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000D80BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000D80E8 + 4 * byte_10027BEA0[a1]))( 7368801LL,  0xE300000000000000LL);
}

uint64_t sub_1000D80E8()
{
  return 0x747865746E6F63LL;
}

uint64_t sub_1000D8100()
{
  return 7761509LL;
}

uint64_t sub_1000D810C()
{
  return 0x6449796C696D6166LL;
}

void sub_1000D8124(char *a1)
{
}

void sub_1000D8130()
{
}

void sub_1000D8138(uint64_t a1)
{
}

void sub_1000D8140(uint64_t a1)
{
}

unint64_t sub_1000D8148@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000D8074(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D8174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D80BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000D819C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Client.Server(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000D81D8()
{
  unint64_t result = qword_10032B238;
  if (!qword_10032B238)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_10032B238);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ManageSubscriptionsEngagementDestination(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManageSubscriptionsEngagementDestination( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ManageSubscriptionsEngagementDestination()
{
  return &type metadata for ManageSubscriptionsEngagementDestination;
}

uint64_t storeEnumTagSinglePayload for ManageSubscriptionsEngagementDestination.QueryParameterName( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000D8314 + 4 * byte_10027BEA9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000D8348 + 4 * byte_10027BEA4[v4]))();
}

uint64_t sub_1000D8348(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D8350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D8358LL);
  }
  return result;
}

uint64_t sub_1000D8364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D836CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000D8370(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D8378(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ManageSubscriptionsEngagementDestination.QueryParameterName()
{
  return &type metadata for ManageSubscriptionsEngagementDestination.QueryParameterName;
}

unint64_t sub_1000D8398()
{
  unint64_t result = qword_10032B240;
  if (!qword_10032B240)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027BF7C,  &type metadata for ManageSubscriptionsEngagementDestination.QueryParameterName);
    atomic_store(result, (unint64_t *)&qword_10032B240);
  }

  return result;
}

unint64_t sub_1000D83D8()
{
  unint64_t result = qword_10032B248;
  if (!qword_10032B248)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027BF04,  &type metadata for ManageSubscriptionsEngagementDestination.QueryParameterName);
    atomic_store(result, (unint64_t *)&qword_10032B248);
  }

  return result;
}

void sub_1000D8414()
{
}

void sub_1000D8420()
{
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24 * v3 + 40) = v1;
}

uint64_t sub_1000D8434()
{
  id v1 = [objc_allocWithZone(AMSMetricsIdentifierStore) init];
  [v1 setAccount:v0];
  if (qword_100328AF8 != -1) {
    swift_once(&qword_100328AF8, sub_1000D84E8);
  }
  id v2 = [v1 identifierForKey:qword_10032B2A0];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

id sub_1000D84E8()
{
  id result = sub_1000D8570(0xD000000000000022LL, 0x80000001002A1090LL, 1);
  qword_10032B2A0 = (uint64_t)result;
  return result;
}

unint64_t sub_1000D8534()
{
  unint64_t result = qword_10032B2A8;
  if (!qword_10032B2A8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierKey);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10032B2A8);
  }

  return result;
}

id sub_1000D8570(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v7 = [(id)swift_getObjCClassFromMetadata(v3) keyWithName:v6 crossDeviceSync:a3 & 1];

  return v7;
}

id sub_1000D85D8(uint64_t a1)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032A028);
  if (sub_10007D824(v1, 2LL, v4))
  {
    sub_1000B6274(v1, type metadata accessor for Client.Server);
    return 0LL;
  }

  else
  {
    uint64_t v6 = sub_100086318();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v1, v6);
    id v7 = [(id)objc_opt_self(OctaneManager) sharedInstance];
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 storeKitErrorForCategory:a1 bundleID:v8];

    return [objc_allocWithZone(NSError) initWithOctaneSimulatedError:v9];
  }

uint64_t sub_1000D86F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v42 = a3;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v43 = a4;
  uint64_t v7 = sub_100086318();
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100085FDC();
  uint64_t v38 = v9 - v8;
  type metadata accessor for URL.DirectoryHint(0LL);
  sub_1000DB3E0();
  __chkstk_darwin(v10);
  sub_10007B9C4();
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v11);
  sub_1000D4F0C();
  uint64_t v14 = v12 - v13;
  uint64_t v16 = __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  int v21 = (char *)&v36 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v36 - v22;
  id v37 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v24 = [v37 defaultManager];
  id v25 = objc_msgSend(v24, "sk_octanePersistedDataURL");

  if (v25)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = 1LL;
  }

  sub_1000D4FDC((uint64_t)v18, v26);
  sub_10008521C((uint64_t)v18, (uint64_t)v21);
  uint64_t v27 = sub_1000AAFD0();
  if (sub_10007D824(v27, v28, v7) == 1)
  {
    sub_1000DB38C();
    uint64_t v29 = 1LL;
  }

  else
  {
    v44[0] = v39;
    v44[1] = v40;
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v4,  enum case for URL.DirectoryHint.isDirectory(_:),  v6);
    unint64_t v30 = sub_1000A9B34();
    URL.appending<A>(path:directoryHint:)(v44, v4, &type metadata for String, v30);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v7);
    uint64_t v29 = 0LL;
  }

  sub_1000D4FDC((uint64_t)v23, v29);
  if ((v42 & 1) != 0)
  {
    sub_1000B4064((uint64_t)v23, v14);
    if (sub_10007D824(v14, 1LL, v7) == 1)
    {
      sub_1000B3FC4(v14);
    }

    else
    {
      uint64_t v31 = v41;
      uint64_t v32 = v38;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v38, v14, v7);
      id v33 = [v37 defaultManager];
      int v34 = NSFileManager.fileExists(at:)();

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v7);
      if ((~v34 & 0x101) != 0)
      {
        sub_1000B3FC4((uint64_t)v23);
        return sub_1000D4FDC(v43, 1LL);
      }
    }
  }

  return sub_10008521C((uint64_t)v23, v43);
}

uint64_t sub_1000D8AD0@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  NSString v6 = [a1 bundleID];
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v8 = v7;
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
  }

  id v9 = [v3 configurationDirectoryForBundleID:v6 mustExist:a2 & 1];

  if (v9)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  uint64_t v11 = sub_100086318();
  return sub_10007D0AC(a3, v10, 1LL, v11);
}

uint64_t sub_1000D8B90@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000D4F0C();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v24 - v11;
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v3 configurationDirectoryForBundleID:v13 mustExist:0];

  if (v14)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v15 = sub_100086318();
    uint64_t v16 = v9;
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v15 = sub_100086318();
    uint64_t v16 = v9;
    uint64_t v17 = 1LL;
  }

  sub_1000862D0(v16, v17);
  sub_10008521C(v9, (uint64_t)v12);
  sub_100086318();
  if (sub_10007D824((uint64_t)v12, 1LL, v15) == 1)
  {
    sub_1000B3FC4((uint64_t)v12);
    uint64_t v18 = 1LL;
  }

  else
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"Configuration.storekit");
    uint64_t v21 = v20;
    v24[0] = v19;
    v24[1] = v20;
    unint64_t v22 = sub_1000A9B34();
    URL.appending<A>(component:directoryHint:)(v24, a1, &type metadata for String, v22);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8LL))(v12, v15);
    uint64_t v18 = 0LL;
  }

  return sub_1000862D0(a2, v18);
}

uint64_t sub_1000D8D30@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = [a1 bundleID];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v7 = v6;

  sub_1000D8B90(a2, a3);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_1000D8DA0(void *a1)
{
  id v2 = [a1 bundleID];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  id v5 = v4;

  id v6 = sub_1000F9360(v3, v5, 0);
  uint64_t v8 = v6;
  if (!v6) {
    return 0LL;
  }
  id v9 = [v6 localizedName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);

  return v7;
}

uint64_t sub_1000D8E80()
{
  uint64_t v3 = v0;
  uint64_t v4 = sub_100086318();
  sub_1000DB31C();
  __chkstk_darwin(v5);
  sub_1000DB354();
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_100085FDC();
  uint64_t v9 = v8 - v7;
  NSString v10 = sub_1000DB344();
  id v11 = [v3 configurationDirectoryForBundleID:v10 mustExist:1];

  if (v11)
  {
    sub_1000DB3D4();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v9, v1, v4);
    uint64_t v12 = 1LL;
    sub_1000DB394(v9, 0LL);
    uint64_t v13 = sub_1000AAFD0();
  }

  else
  {
    uint64_t v15 = sub_1000AAFD0();
    sub_1000DB394(v15, v16);
  }

  uint64_t v12 = 0LL;
LABEL_6:
  sub_1000DB38C();
  return v12;
}

uint64_t sub_1000D8FEC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000D4F0C();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - v11;
  NSString v13 = sub_1000DB344();
  id v14 = [v4 configurationDirectoryForBundleID:v13 mustExist:0];

  if (v14)
  {
    sub_1000DB3D4();

    uint64_t v15 = sub_100086318();
    uint64_t v16 = v9;
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v15 = sub_100086318();
    uint64_t v16 = v9;
    uint64_t v17 = 1LL;
  }

  sub_1000862D0(v16, v17);
  sub_10008521C(v9, (uint64_t)v12);
  sub_100086318();
  uint64_t v18 = sub_1000AAFD0();
  if (sub_10007D824(v18, v19, v15) == 1)
  {
    sub_1000DB38C();
    return 0LL;
  }

  else
  {
    uint64_t countAndFlagsBits = URL.path(percentEncoded:)(a3 & 1)._countAndFlagsBits;
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8LL))(v12, v15);
  }

  return countAndFlagsBits;
}

uint64_t sub_1000D91C4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000D8AD0(a1, 0, (uint64_t)v6);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  object = URL.path(percentEncoded:)(0)._object;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  NSString v14 = [a1 bundleID];
  if (!v14)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v16 = v15;
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
  }

  [v2 useConfigurationDirectory:v13 forBundleID:v14];

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void OctaneManager.saveConfigurationData(_:context:)(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v159 = a2;
  uint64_t v161 = a1;
  uint64_t v158 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v9);
  sub_1000862F4();
  uint64_t v156 = v10;
  sub_100086200();
  __chkstk_darwin(v11);
  uint64_t v150 = &v140[-v12];
  uint64_t v13 = sub_1000DB2E0();
  sub_1000DB31C();
  __chkstk_darwin(v14);
  sub_1000875A4();
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v15);
  sub_1000862F4();
  uint64_t v146 = v16;
  sub_100086200();
  __chkstk_darwin(v17);
  uint64_t v19 = &v140[-v18];
  sub_100086318();
  sub_1000DB3E0();
  __chkstk_darwin(v20);
  sub_1000862F4();
  id v151 = v21;
  sub_100086200();
  __chkstk_darwin(v22);
  sub_1000DB3F4();
  uint64_t v149 = v23;
  sub_100086200();
  __chkstk_darwin(v24);
  sub_1000DB3F4();
  uint64_t v152 = v25;
  sub_100086200();
  __chkstk_darwin(v26);
  sub_1000DB3F4();
  uint64_t v153 = v27;
  sub_100086200();
  __chkstk_darwin(v28);
  unint64_t v30 = &v140[-v29];
  uint64_t v154 = *(void (**)(uint64_t, void, uint64_t))(v5 + 104);
  v154(v4, enum case for URL.DirectoryHint.checkFileSystem(_:), v13);
  id v148 = v3;
  sub_1000D8D30(a3, v4, (uint64_t)v19);
  id v31 = v7;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v155 = v4;
  uint64_t v157 = v13;
  v32(v4, v13);
  if (sub_10007D824((uint64_t)v19, 1LL, (uint64_t)v31) == 1)
  {
    sub_1000B3FC4((uint64_t)v19);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v33 = sub_100079604(v158, (uint64_t)qword_10033E1A8);
    uint64_t v34 = v156;
    sub_10007961C(v33, v156);
    uint64_t v162 = 0LL;
    v163[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    sub_1000DB2EC();
    uint64_t v162 = 0xD00000000000001ELL;
    v163[0] = 0x80000001002A10C0LL;
    uint64_t v35 = sub_10008613C((uint64_t)[a3 bundleID]);
    id v37 = v36;

    v38._uint64_t countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    uint64_t v39 = swift_bridgeObjectRelease(v37);
    uint64_t v40 = v162;
    LOBYTE(v35) = static os_log_type_t.error.getter(v39);
    uint64_t v41 = sub_1000DB260();
    int v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = v35;
    if (os_log_type_enabled(v42, (os_log_type_t)v35))
    {
      uint64_t v44 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v45 = sub_10007B9FC(64LL);
      uint64_t v162 = v45;
      *(_DWORD *)uint64_t v44 = 136446466;
      id v164 = (id)sub_10007BA24(v45, v46, &v162);
      sub_1000D4C50((uint64_t)&v164);
      sub_1000DB2A0();
      id v164 = (id)sub_1000B20F4(v40, v47, &v162);
      sub_1000D4C50((uint64_t)&v164);
      sub_1000B1FD4();
      sub_100086038((void *)&_mh_execute_header, v42, v43, "%{public}s%{public}s", v44);
      sub_1000DB278((uint64_t)&type metadata for Any);
      sub_10007B974(v45);
      sub_10007B974((uint64_t)v44);
      sub_100085EF0();
    }

    else
    {

      sub_1000B1FD4();
    }

    sub_1000B6274(v34, type metadata accessor for SKLogger);
    goto LABEL_37;
  }

  uint64_t v145 = v32;
  uint64_t v48 = *(void (**)(_BYTE *, _BYTE *, id))(v6 + 32);
  uint64_t v156 = (uint64_t)v31;
  v48(v30, v19, v31);
  uint64_t v144 = a3;
  sub_1000D8DA0(a3);
  uint64_t v147 = v6;
  if (!v49)
  {
    uint64_t v62 = v6;
    uint64_t v60 = v161;
    unint64_t v51 = v159;
    sub_1000881FC(v161, v159);
    goto LABEL_18;
  }

  uint64_t v50 = v30;
  id v31 = (id)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  unint64_t v51 = v159;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v164 = 0LL;
  id v53 = [v31 JSONObjectWithData:isa options:1 error:&v164];

  id v54 = v164;
  if (v53)
  {
    _bridgeAnyObjectToAny(_:)(&v162);
    swift_unknownObjectRelease(v53);
    uint64_t v55 = sub_10007CB7C(0LL, (unint64_t *)&unk_10032C430, &OBJC_CLASS___NSMutableDictionary_ptr);
    if ((swift_dynamicCast(&v164, &v162, (char *)&type metadata for Any + 8, v55, 6LL) & 1) != 0)
    {
      id v56 = v164;
      NSString v57 = String._bridgeToObjectiveC()();
      sub_100085FB4();
      uint64_t v162 = 0x656D614E707061LL;
      v163[0] = 0xE700000000000000LL;
      uint64_t v58 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v162, &type metadata for String);
      objc_msgSend(v56, "__swift_setObject:forKeyedSubscript:", v57, v58);

      swift_unknownObjectRelease(v58);
      uint64_t v162 = 0LL;
      id v31 = [v31 dataWithJSONObject:v56 options:1 error:&v162];
      id v59 = (id)v162;
      unint64_t v30 = v50;
      if (!v31)
      {
        uint64_t v133 = v59;
        _convertNSErrorToError(_:)(v59);

        sub_100093D24();
        goto LABEL_36;
      }

      uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
      unint64_t v51 = v61;

      goto LABEL_17;
    }

    sub_100085FB4();
    uint64_t v64 = v160;
  }

  else
  {
    uint64_t v63 = v54;
    id v31 = (id)_convertNSErrorToError(_:)(v54);

    sub_100093D24();
    swift_errorRelease(v31);
    sub_100085FB4();
    uint64_t v64 = 0LL;
  }

  unint64_t v30 = v50;
  uint64_t v160 = v64;
  uint64_t v60 = v161;
  sub_1000881FC(v161, v51);
LABEL_17:
  uint64_t v62 = v147;
LABEL_18:
  id v65 = [(id)objc_opt_self(NSFileManager) defaultManager];
  __int16 v66 = sub_1000DB3A0();

  int v67 = v66 & 0x101;
  id v69 = sub_10009C324(v68, "defaultManager");
  URL._bridgeToObjectiveC()(v70);
  uint64_t v72 = v71;
  if (v67 != 1)
  {
    uint64_t v162 = 0LL;
    unsigned int v101 = sub_1000DB374(v69, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");

    id v102 = (id)v162;
    uint64_t v103 = v157;
    uint64_t v104 = v155;
    if (v101)
    {
      uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"Configuration.storekit");
      v163[0] = v105;
      v154(v104, enum case for URL.DirectoryHint.inferFromPath(_:), v103);
      unint64_t v106 = sub_1000A9B34();
      id v107 = v102;
      uint64_t v108 = (uint64_t)v151;
      URL.appending<A>(path:directoryHint:)(&v162, v104, &type metadata for String, v106);
      v145(v104, v103);
      sub_1000DB2EC();
      uint64_t v109 = v160;
      Data.write(to:options:)(v108, 1LL, v60, v51);
      if (!v109)
      {
        uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        v113(v108, v156);
        goto LABEL_31;
      }

      sub_1000DB258(v108);
      sub_10007F054(v60, v51);
    }

    else
    {
      id v110 = (id)v162;
      sub_1000DB26C();
      sub_100086064();
      sub_100093D24();
      sub_10007F054(v60, v51);
    }

id sub_1000DA104()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v16 = 0LL;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v16];

  if (v4) {
    return v16;
  }
  id v15 = v16;
  id v6 = v16;
  uint64_t v7 = _convertNSErrorToError(_:)(v15);

  swift_willThrow(v8, v9, v10, v11, v12, v13, v14);
  return (id)swift_errorRelease(v7);
}

void OctaneManager.saveConfigurationAssetData(_:fileName:context:)( uint64_t a1, char *a2, uint64_t a3, unint64_t a4, void *a5)
{
  id v6 = v5;
  uint64_t v85 = a3;
  unint64_t v86 = a4;
  uint64_t v87 = a1;
  Swift::String v88 = a2;
  uint64_t v90 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v8);
  Swift::String v89 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v10);
  uint64_t v83 = (uint64_t)&v81 - v11;
  uint64_t v12 = sub_1000DB2E0();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100085FDC();
  uint64_t v16 = v15 - v14;
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v17);
  sub_100085FDC();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = sub_100086318();
  uint64_t v92 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  sub_1000862F4();
  uint64_t v84 = v22;
  sub_100086200();
  __chkstk_darwin(v23);
  sub_1000DB3F4();
  uint64_t v93 = v24;
  sub_100086200();
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v81 - v27;
  sub_1000DB2C0(v26, enum case for URL.DirectoryHint.checkFileSystem(_:));
  id v91 = a5;
  uint64_t v29 = a5;
  id v82 = v6;
  unint64_t v30 = (os_log_s *)v6;
  sub_1000D8D30(v29, v16, v20);
  uint64_t v31 = *(void *)(v13 + 8);
  sub_1000DB2B4();
  if (sub_10007D824(v20, 1LL, v21) == 1)
  {
    sub_1000B3FC4(v20);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v32 = sub_100079604(v90, (uint64_t)qword_10033E1A8);
    uint64_t v33 = (uint64_t)v89;
    sub_1000DB384(v32);
    sub_1000DB308();
    sub_1000DB420();
    uint64_t v96 = 0xD00000000000001ELL;
    unint64_t v97 = 0x80000001002A10C0LL;
    sub_10008613C((uint64_t)[v91 bundleID]);
    sub_100086024();
    sub_10008611C();
    uint64_t v34 = sub_100085FB4();
    uint64_t v35 = v96;
    static os_log_type_t.error.getter(v34);
    sub_1000DB260();
    uint64_t v36 = (os_log_s *)sub_1000DB3CC();
    if (sub_1000D4D20(v36))
    {
      uint64_t v37 = sub_10007B9FC(22LL);
      uint64_t v38 = sub_10007B9FC(64LL);
      uint64_t v96 = v38;
      *(_DWORD *)uint64_t v37 = 136446466;
      uint64_t v95 = sub_10007BA24(v38, v39, &v96);
      sub_10007B9B4();
      *(_WORD *)(v37 + 12) = 2082;
      sub_100085FEC();
      uint64_t v95 = sub_1000B20F4(v35, v40, &v96);
      sub_10007B9B4();
      sub_1000B1FD4();
      sub_100086038((void *)&_mh_execute_header, v30, (os_log_type_t)v31, "%{public}s%{public}s", (uint8_t *)v37);
      sub_100086030(v38, v41, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v38);
      sub_10007B974(v37);
      sub_100085EF0();
    }

    else
    {

      sub_1000B1FD4();
    }

    sub_1000B6274(v33, type metadata accessor for SKLogger);
    goto LABEL_13;
  }

  int v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 32);
  Swift::String v89 = (char *)v21;
  uint64_t v43 = v42(v28, v20, v21);
  uint64_t v96 = 0x737465737341LL;
  unint64_t v97 = 0xE600000000000000LL;
  sub_1000DB2C0(v43, enum case for URL.DirectoryHint.isDirectory(_:));
  unint64_t v81 = sub_1000A9B34();
  URL.appending<A>(path:directoryHint:)(&v96, v16, &type metadata for String, v81);
  sub_1000DB2B4();
  sub_1000DB420();
  id v44 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v45);
  uint64_t v47 = v46;
  uint64_t v96 = 0LL;
  unsigned int v48 = sub_1000DB374(v44, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");

  id v50 = (id)v96;
  unint64_t v51 = v28;
  if (!v48)
  {
    id v60 = (id)v96;
    sub_1000DB26C();
    sub_100086064();
    id v94 = v50;
    sub_100093D24();
    uint64_t v57 = v93;
    uint64_t v58 = *(void (**)(uint64_t, char *))(v92 + 8);
    id v59 = v89;
    goto LABEL_12;
  }

  uint64_t v52 = v92;
  uint64_t v96 = v85;
  unint64_t v97 = v86;
  sub_1000DB2C0(v49, enum case for URL.DirectoryHint.inferFromPath(_:));
  id v53 = v50;
  uint64_t v54 = v84;
  uint64_t v55 = v93;
  URL.appending<A>(path:directoryHint:)(&v96, v16, &type metadata for String, v81);
  sub_1000DB2B4();
  id v56 = v94;
  Data.write(to:options:)(v54, 1LL, v87, v88);
  id v94 = v56;
  if (v56)
  {
    uint64_t v57 = v55;
    uint64_t v58 = *(void (**)(uint64_t, char *))(v52 + 8);
    id v59 = v89;
    v58(v54, v89);
LABEL_12:
    v58(v57, v59);
    v58((uint64_t)v51, v59);
    goto LABEL_13;
  }

  Swift::String v88 = v51;
  unint64_t v61 = v89;
  uint64_t v92 = *(void *)(v52 + 8);
  ((void (*)(uint64_t, char *))v92)(v54, v89);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v62 = sub_100079604(v90, (uint64_t)qword_10033E1A8);
  sub_1000DB384(v62);
  sub_1000DB308();
  uint64_t v63 = sub_1000DB420();
  uint64_t v96 = 0xD00000000000001ELL;
  unint64_t v97 = 0x80000001002A1100LL;
  id v64 = sub_1000DB36C(v63, "bundleID");
  sub_10008613C((uint64_t)v64);
  sub_100086024();
  sub_10008611C();
  uint64_t v65 = sub_100085FB4();
  uint64_t v90 = v96;
  id v66 = sub_1000DB36C(v65, "logKey");
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
  id v69 = v68;

  os_log_type_t v71 = static os_log_type_t.debug.getter(v70);
  sub_100085EE8((uint64_t)v69);
  sub_1000DB260();
  uint64_t v72 = (os_log_s *)sub_1000DB3CC();
  if (os_log_type_enabled(v72, v71))
  {
    uint64_t v73 = sub_10007B9FC(22LL);
    uint64_t v74 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v73 = 136446466;
    uint64_t v95 = v74;
    uint64_t v96 = 91LL;
    unint64_t v97 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v69);
    v75._uint64_t countAndFlagsBits = v67;
    v75._object = v69;
    String.append(_:)(v75);
    sub_100085F14();
    sub_100086004();
    unint64_t v76 = v97;
    uint64_t v96 = sub_10007A488(v96, v97, &v95);
    unint64_t v61 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v73 + 4);
    swift_bridgeObjectRelease_n(v69, 2LL);
    swift_bridgeObjectRelease(v76);
    *(_WORD *)(v73 + 12) = 2082;
    sub_100085FEC();
    uint64_t v96 = sub_1000B20F4(v90, v77, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v73 + 14);
    sub_1000B1FD4();
    sub_100086038((void *)&_mh_execute_header, v72, v71, "%{public}s%{public}s", (uint8_t *)v73);
    sub_100086030(v74, v78, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v74);
    sub_10007B974(v73);
    sub_100085EF0();
    sub_100086004();
  }

  else
  {

    sub_1000B1FD4();
    sub_100085E64((uint64_t)v69);
  }

  unint64_t v79 = v88;
  sub_1000B6274(v83, type metadata accessor for SKLogger);
  [v82 startServerIfNecessaryFor:v91];
  uint64_t v80 = (void (*)(char *, char *))v92;
  ((void (*)(uint64_t, char *))v92)(v93, v61);
  v80(v79, v61);
LABEL_13:
  sub_100086084();
}

unint64_t OctaneManager.configurationData(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_1000862F4();
  unint64_t v61 = (unint64_t *)v9;
  sub_100086200();
  __chkstk_darwin(v10);
  id v60 = (char *)&v56 - v11;
  uint64_t v12 = sub_1000DB2E0();
  sub_1000DB31C();
  __chkstk_darwin(v13);
  sub_1000875A4();
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v14);
  sub_10007B9C4();
  uint64_t v15 = (void *)sub_100086318();
  uint64_t v16 = *(v15 - 1);
  __chkstk_darwin(v15);
  uint64_t v58 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t v57 = *(void (**)(uint64_t, void, uint64_t))(v5 + 104);
  v57(v4, enum case for URL.DirectoryHint.checkFileSystem(_:), v12);
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  uint64_t v21 = v65;
  sub_1000D8B90(v4, v2);
  sub_1000DB3AC();
  if (sub_10007D824(v2, 1LL, (uint64_t)v15) == 1)
  {
    sub_1000B3FC4(v2);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v22 = sub_100079604(v62, (uint64_t)qword_10033E1A8);
    uint64_t v23 = (os_log_s *)v61;
    sub_10007961C(v22, (uint64_t)v61);
    sub_1000DB2F4();
    sub_1000DB3B8();
    sub_1000DB2CC(0xD000000000000022LL);
    uint64_t v24 = v66;
    static os_log_type_t.error.getter(v25);
    uint64_t v26 = sub_1000DB260();
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    if (sub_1000D4D20(v27))
    {
      uint64_t v28 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v29 = sub_10007B9FC(64LL);
      uint64_t v66 = v29;
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v68 = sub_10007BA24(v29, v30, &v66);
      sub_1000D4C50((uint64_t)&v68);
      sub_1000DB2A0();
      uint64_t v68 = sub_1000B20F4(v24, v31, &v66);
      sub_1000D4C50((uint64_t)&v68);
      sub_1000B1FD4();
      sub_100086038((void *)&_mh_execute_header, v23, (os_log_type_t)v4, "%{public}s%{public}s", v28);
      sub_1000DB278((uint64_t)&type metadata for Any);
      sub_10007B974(v29);
      sub_10007B974((uint64_t)v28);
      sub_100085EF0();
    }

    else
    {

      sub_1000B1FD4();
    }

    sub_1000B6274((uint64_t)v23, type metadata accessor for SKLogger);
    type metadata accessor for ASDError(0LL);
    uint64_t v68 = 513LL;
    unint64_t v34 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v45 = sub_1000B25DC();
    sub_1000DB288(v45);
    sub_100093D24();
  }

  else
  {
    unint64_t v61 = (unint64_t *)v16;
    uint64_t v32 = *(void (**)(char *, uint64_t, void *))(v16 + 32);
    uint64_t v65 = v15;
    v32(v20, v2, v15);
    id v33 = [(id)objc_opt_self(NSFileManager) defaultManager];
    unint64_t v34 = sub_1000DB3A0();

    if ((v34 & 1) != 0)
    {
      if ((v34 & 0x100) != 0)
      {
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"Configuration.storekit");
        unint64_t v67 = v49;
        v57(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v12);
        unint64_t v50 = sub_1000A9B34();
        uint64_t v51 = (uint64_t)v58;
        URL.appending<A>(path:directoryHint:)(&v66, v4, &type metadata for String, v50);
        sub_1000DB3AC();
        sub_1000DB3B8();
        sub_1000DB400(v51);
        if (v3)
        {
          unint64_t v34 = v61[1];
          uint64_t v52 = v51;
          id v53 = v65;
          ((void (*)(uint64_t, void *))v34)(v52, v65);
          ((void (*)(char *, void *))v34)(v20, v53);
          return v34;
        }

        sub_1000DB40C();
        uint64_t v55 = v51;
        uint64_t v54 = v65;
        ((void (*)(uint64_t, void *))v15)(v55, v65);
      }

      else
      {
        sub_1000DB400((uint64_t)v20);
        if (v3)
        {
          ((void (*)(char *, void *))v61[1])(v20, v65);
          return v34;
        }

        sub_1000DB40C();
        uint64_t v54 = v65;
      }

      ((void (*)(char *, void *))v15)(v20, v54);
      return v34;
    }

    id v59 = v20;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v35 = sub_100079604(v62, (uint64_t)qword_10033E1A8);
    uint64_t v36 = (uint64_t)v60;
    sub_1000DB384(v35);
    sub_1000DB2F4();
    sub_1000DB3B8();
    sub_1000DB2CC(0xD000000000000022LL);
    uint64_t v38 = v66;
    unint64_t v37 = v67;
    os_log_type_t v40 = static os_log_type_t.error.getter(v39);
    sub_100085EE8(v37);
    uint64_t v41 = (os_log_s *)sub_1000DB3CC();
    if (os_log_type_enabled(v41, v40))
    {
      uint64_t v42 = sub_10007B9FC(22LL);
      uint64_t v43 = sub_10007B9FC(64LL);
      uint64_t v66 = v43;
      *(_DWORD *)uint64_t v42 = 136446466;
      uint64_t v68 = sub_10007BA24(v43, v44, &v66);
      sub_1000DB32C();
      *(_WORD *)(v42 + 12) = 2082;
      swift_bridgeObjectRetain(v37);
      uint64_t v68 = sub_10007A488(v38, v37, &v66);
      sub_1000DB32C();
      sub_100085E64(v37);
      sub_100086038((void *)&_mh_execute_header, v41, v40, "%{public}s%{public}s", (uint8_t *)v42);
      sub_1000DB278((uint64_t)&type metadata for Any);
      sub_10007B974(v43);
      sub_10007B974(v42);
      sub_100086004();
    }

    else
    {

      sub_100085E64(v37);
    }

    uint64_t v46 = (uint64_t)v61;
    sub_1000B6274(v36, type metadata accessor for SKLogger);
    type metadata accessor for ASDError(0LL);
    uint64_t v68 = 513LL;
    unint64_t v34 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v47 = sub_1000B25DC();
    sub_1000DB288(v47);
    sub_100093D24();
    (*(void (**)(char *, void *))(v46 + 8))(v59, v65);
  }

  return v34;
}

uint64_t sub_1000DB258(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000DB260()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000DB26C()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_1000DB278@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 2LL, a1 + 8);
}

uint64_t sub_1000DB288(uint64_t a1)
{
  return _BridgedStoredNSError.init(_:userInfo:)(v3 - 72, v1, v2, a1);
}

uint64_t sub_1000DB2A0()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000DB2B4()
{
  return v1(v0, v2);
}

uint64_t sub_1000DB2C0(uint64_t a1, uint64_t a2)
{
  return v4(v2, a2, v3);
}

void sub_1000DB2CC(uint64_t a1@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 88) = (v1 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)(v2 - 120));
}

uint64_t sub_1000DB2E0()
{
  return type metadata accessor for URL.DirectoryHint(0LL);
}

uint64_t sub_1000DB2EC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 128));
}

void sub_1000DB2F4()
{
  *(void *)(v0 - 96) = 0LL;
  *(void *)(v0 - 88) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
}

void sub_1000DB308()
{
  *(void *)(v0 - 104) = 0LL;
  *(void *)(v0 - 96) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
}

  ;
}

uint64_t sub_1000DB32C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 72, v1, v0);
}

uint64_t sub_1000DB33C(uint64_t a1)
{
  return sub_10007F054(a1, *(void *)(v1 - 160));
}

NSString sub_1000DB344()
{
  return String._bridgeToObjectiveC()();
}

  ;
}

id sub_1000DB36C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

id sub_1000DB374(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, 1, 0);
}

uint64_t sub_1000DB384(uint64_t a1)
{
  return sub_10007961C(a1, v1);
}

uint64_t sub_1000DB38C()
{
  return sub_1000B3FC4(v0);
}

uint64_t sub_1000DB394(uint64_t a1, uint64_t a2)
{
  return sub_10007D0AC(a1, a2, 1LL, v2);
}

uint64_t sub_1000DB3A0()
{
  return NSFileManager.fileExists(at:)();
}

uint64_t sub_1000DB3AC()
{
  return v1(v0, v2);
}

uint64_t sub_1000DB3B8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 88));
}

id sub_1000DB3C0()
{
  return sub_1000DA104();
}

uint64_t sub_1000DB3CC()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000DB3D4()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

  ;
}

  ;
}

uint64_t sub_1000DB400(uint64_t a1)
{
  return Data.init(contentsOf:options:)(a1, 0LL);
}

  ;
}

uint64_t sub_1000DB420()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

uint64_t sub_1000DB428(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000DB48C()
{
  return sub_10009C714();
}

uint64_t sub_1000DB548()
{
  uint64_t v0 = sub_10009C714();
  return v1(v0);
}

uint64_t sub_1000DB5A4()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC9storekitd13DialogContext_dialogObserver));
}

uint64_t sub_1000DB600(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC9storekitd13DialogContext_dialogObserver);
  *(void *)(v1 + OBJC_IVAR____TtC9storekitd13DialogContext_dialogObserver) = a1;
  return swift_unknownObjectRelease(v2);
}

id sub_1000DB638()
{
  return *(id *)(v0 + OBJC_IVAR____TtC9storekitd13DialogContext_processInfo);
}

id sub_1000DB648(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = OBJC_IVAR____TtC9storekitd13DialogContext_dialogObserver;
  *(void *)&v5[OBJC_IVAR____TtC9storekitd13DialogContext_dialogObserver] = 0LL;
  uint64_t v10 = &v5[OBJC_IVAR____TtC9storekitd13DialogContext_bundleID];
  *(void *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  uint64_t v11 = &v5[OBJC_IVAR____TtC9storekitd13DialogContext_bundleURL];
  uint64_t v12 = sub_100086318();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a3, v12);
  uint64_t v14 = *(void *)&v5[v9];
  *(void *)&v5[v9] = a5;
  uint64_t v15 = v5;
  swift_unknownObjectRetain(a5);
  swift_unknownObjectRelease(v14);
  *(void *)&v15[OBJC_IVAR____TtC9storekitd13DialogContext_processInfo] = a4;
  id v16 = a4;

  v19.receiver = v15;
  v19.super_class = (Class)type metadata accessor for DialogContext(0LL);
  id v17 = objc_msgSendSuper2(&v19, "init");
  swift_unknownObjectRelease(a5);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  return v17;
}

uint64_t sub_1000DB810()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10007CB7C(0LL, (unint64_t *)&qword_100328EC8, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = _swiftEmptyArrayStorage;
  unint64_t v10 = sub_1000DE054();
  uint64_t v11 = sub_10007B1FC(&qword_10032B3C8);
  unint64_t v12 = sub_1000DE094();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000020LL,  0x80000001002A12F0LL,  v9,  v6,  v3,  0LL);
  qword_10032B2B0 = result;
  return result;
}

uint64_t sub_1000DB9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0LL;
  if (qword_100328B00 != -1) {
    swift_once(&qword_100328B00, sub_1000DB810);
  }
  uint64_t v5 = (void *)qword_10032B2B0;
  id v6 = (void *)sub_1000AA314((uint64_t)&unk_1002ED750, 48LL);
  v6[2] = v2;
  v6[3] = &v15;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = sub_1000AA314((uint64_t)&unk_1002ED778, 32LL);
  *(void *)(v7 + 16) = sub_1000DDFDC;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_100081848;
  uint64_t v14 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC27C;
  aBlock[3] = &unk_1002ED790;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v14;
  unint64_t v10 = v5;
  swift_retain(a2);
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v10, v8);

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v7, "", 85LL, 49LL, 30LL, 1LL);
  uint64_t result = swift_release(v7);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v12 = v15;
    swift_release(v6);
    return v12;
  }

  return result;
}

uint64_t sub_1000DBB20(uint64_t a1, void ***a2, uint64_t (*a3)(), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)qword_10032B2B8;
  uint64_t v12 = &off_100279000;
  if (qword_10032B2B8) {
    goto LABEL_12;
  }
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v13 = sub_100079604(v8, (uint64_t)qword_10033E1A8);
  uint64_t v14 = sub_10007961C(v13, (uint64_t)v10);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8LL))(v10, v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v15, v18))
  {
    objc_super v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)objc_super v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v18, "Connecting to UI service", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  sub_10007CB7C(0LL, &qword_10032B350, &OBJC_CLASS___NSXPCConnection_ptr);
  id v20 = sub_1000DBFA8(0xD000000000000019LL, 0x80000001002A12D0LL, 0LL);
  uint64_t v21 = (void *)qword_10032B2B8;
  qword_10032B2B8 = (uint64_t)v20;

  uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  id v23 = [v22 interfaceWithProtocol:&OBJC_PROTOCOL___SKDialogProtocol];
  id v24 = [v22 interfaceWithProtocol:&OBJC_PROTOCOL___PaymentSheetDelegate];
  [v23 setInterface:v24 forSelector:"handlePurchase:paymentSheetDelegate:resultHandler:" argumentIndex:1 ofReply:0];
  if (qword_10032B2B8)
  {
    [(id)qword_10032B2B8 setRemoteObjectInterface:v23];
    uint64_t v25 = (void *)qword_10032B2B8;
    if (qword_10032B2B8)
    {
      uint64_t v26 = swift_allocObject(&unk_1002ED7F0, 24LL, 7LL);
      *(void *)(v26 + 16) = a1;
      unint64_t v49 = sub_1000DE000;
      uint64_t v50 = v26;
      aBlock = _NSConcreteStackBlock;
      uint64_t v46 = 1107296256LL;
      unint64_t v47 = sub_1000DB428;
      unsigned int v48 = &unk_1002ED808;
      uint64_t v27 = _Block_copy(&aBlock);
      uint64_t v28 = v50;
      id v29 = v25;
      swift_release(v28);
      [v29 setInterruptionHandler:v27];
      _Block_release(v27);

      uint64_t v30 = (void *)qword_10032B2B8;
      if (qword_10032B2B8)
      {
        uint64_t v31 = swift_allocObject(&unk_1002ED840, 24LL, 7LL);
        *(void *)(v31 + 16) = a1;
        unint64_t v49 = sub_1000DE014;
        uint64_t v50 = v31;
        aBlock = _NSConcreteStackBlock;
        uint64_t v46 = 1107296256LL;
        unint64_t v47 = sub_1000DB428;
        unsigned int v48 = &unk_1002ED858;
        uint64_t v32 = _Block_copy(&aBlock);
        uint64_t v33 = v50;
        id v34 = v30;
        swift_release(v33);
        [v34 setInvalidationHandler:v32];
        _Block_release(v32);

        if (qword_10032B2B8)
        {
          id v35 = (id)qword_10032B2B8;
          [v35 resume];
        }
      }
    }
  }

  uint64_t v11 = (void *)qword_10032B2B8;
  uint64_t v12 = &off_100279000;
  if (qword_10032B2B8)
  {
LABEL_12:
    unint64_t v49 = a3;
    uint64_t v50 = a4;
    aBlock = _NSConcreteStackBlock;
    uint64_t v46 = *((void *)v12 + 59);
    unint64_t v47 = sub_1000DC508;
    unsigned int v48 = &unk_1002ED7B8;
    uint64_t v36 = _Block_copy(&aBlock);
    uint64_t v37 = v50;
    id v38 = v11;
    swift_retain(a4);
    swift_release(v37);
    id v39 = [v38 remoteObjectProxyWithErrorHandler:v36];
    _Block_release(v36);

    _bridgeAnyObjectToAny(_:)(v51);
    swift_unknownObjectRelease(v39);
    uint64_t v40 = sub_10007B1FC(&qword_10032B348);
    int v41 = swift_dynamicCast(&aBlock, v51, (char *)&type metadata for Any + 8, v40, 6LL);
    uint64_t v42 = aBlock;
    if (!v41) {
      uint64_t v42 = 0LL;
    }
  }

  else
  {
    uint64_t v42 = 0LL;
  }

  uint64_t v43 = *a2;
  *a2 = v42;
  return swift_unknownObjectRelease(v43);
}

id sub_1000DBFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v8 = [v6 initWithMachServiceName:v7 options:a3];

  return v8;
}

uint64_t sub_1000DC020(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v5 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
  uint64_t v6 = sub_10007961C(v5, (uint64_t)v4);
  NSString v7 = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v4, v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v7, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v10, "UI service interrupted", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  if (qword_100328B00 != -1) {
    swift_once(&qword_100328B00, sub_1000DB810);
  }
  uint64_t v12 = (void *)qword_10032B2B0;
  uint64_t v13 = swift_allocObject(&unk_1002ED908, 24LL, 7LL);
  *(void *)(v13 + 16) = a1;
  uint64_t v14 = swift_allocObject(&unk_1002ED930, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_1000DE474;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100085E50;
  uint64_t v20 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC27C;
  aBlock[3] = &unk_1002ED948;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v20;
  uint64_t v17 = v12;
  swift_retain(v14);
  swift_release(v16);
  dispatch_sync(v17, v15);

  _Block_release(v15);
  LOBYTE(sub_10012A9E0((uint64_t)va, v14, v15) = swift_isEscapingClosureAtFileLocation(v14, "", 85LL, 67LL, 42LL, 1LL);
  swift_release(v14);
  uint64_t result = swift_release(v13);
  return result;
}

uint64_t sub_1000DC27C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000DC29C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v5 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
  uint64_t v6 = sub_10007961C(v5, (uint64_t)v4);
  NSString v7 = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v4, v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v7, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v10, "UI service invalidated", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  if (qword_100328B00 != -1) {
    swift_once(&qword_100328B00, sub_1000DB810);
  }
  uint64_t v12 = (void *)qword_10032B2B0;
  uint64_t v13 = swift_allocObject(&unk_1002ED890, 24LL, 7LL);
  *(void *)(v13 + 16) = a1;
  uint64_t v14 = swift_allocObject(&unk_1002ED8B8, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_1000DE028;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100085E50;
  uint64_t v20 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000DC27C;
  aBlock[3] = &unk_1002ED8D0;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v20;
  uint64_t v17 = v12;
  swift_retain(v14);
  swift_release(v16);
  dispatch_sync(v17, v15);

  _Block_release(v15);
  LOBYTE(sub_10012A9E0((uint64_t)va, v14, v15) = swift_isEscapingClosureAtFileLocation(v14, "", 85LL, 74LL, 42LL, 1LL);
  swift_release(v14);
  uint64_t result = swift_release(v13);
  return result;
}

void sub_1000DC4F8()
{
  uint64_t v0 = (void *)qword_10032B2B8;
  qword_10032B2B8 = 0LL;
}

void sub_1000DC508(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_1000DC558(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return sub_1000AA254((uint64_t)sub_1000DC568);
}

uint64_t sub_1000DC568()
{
  id v1 = [*(id *)(v0 + 24) options];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (uint64_t *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC9storekitd13DialogContext_bundleID);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    swift_bridgeObjectRetain(v5);
    sub_1000DDD9C(v4, v5, v2);

    swift_bridgeObjectRelease(v5);
  }

  id v6 = [*(id *)(v0 + 24) options];
  if (v6)
  {
    NSString v7 = v6;
    [v6 setClientInfo:*(void *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC9storekitd13DialogContext_processInfo)];
  }

  uint64_t v8 = (int8x16_t *)swift_task_alloc(32LL);
  *(void *)(v0 + 40) = v8;
  v8[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 48) = v9;
  sub_10007CB7C(0LL, &qword_10032B330, &OBJC_CLASS___AMSAuthenticateResult_ptr);
  *uint64_t v9 = v0;
  v9[1] = sub_1000DC6B8;
  sub_100093420();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000DC6B8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (!v0) {
    swift_task_dealloc(*(void *)(v2 + 40));
  }
  sub_100093420();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000DC720()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_1000DC72C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DC760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a3;
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v5);
  NSString v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10007B1FC(&qword_10032B338);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v36 - v13;
  uint64_t v15 = *(void **)(a2 + OBJC_IVAR____TtC9storekitd13DialogContext_dialogObserver);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16((char *)v36 - v13, a1, v8);
  if (v15)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    swift_unknownObjectRetain(v15);
    v17(v14, v8);
LABEL_5:
    v16(v12, a1, v8);
    uint64_t v21 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v22 = (v21 + 16) & ~v21;
    uint64_t v23 = swift_allocObject(&unk_1002ED700, v22 + v10, v21 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v23 + v22, v12, v8);
    aBlock[4] = sub_1000DDF5C;
    uint64_t v40 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000DCDC4;
    aBlock[3] = &unk_1002ED718;
    id v24 = _Block_copy(aBlock);
    swift_release(v40);
    [v15 handleAuthenticateRequest:v38 resultHandler:v24];
    _Block_release(v24);
    return swift_unknownObjectRelease(v15);
  }

  uint64_t v37 = a1;
  v36[1] = type metadata accessor for DialogContext(0LL);
  v16(v12, (uint64_t)v14, v8);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v20 = swift_allocObject(&unk_1002ED6D8, v19 + v10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v19, v12, v8);
  uint64_t v15 = (void *)sub_1000DB9B0((uint64_t)sub_1000DDEC0, v20);
  swift_release(v20);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  if (v15)
  {
    a1 = v37;
    goto LABEL_5;
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v26 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
  uint64_t v27 = sub_10007961C(v26, (uint64_t)v7);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8LL))(v7, v29);
  os_log_type_t v31 = static os_log_type_t.error.getter(v30);
  if (os_log_type_enabled(v28, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v31, "Failed authenticate request. No dialog observer.", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  unint64_t v33 = sub_1000DDD60();
  uint64_t v34 = swift_allocError(&type metadata for DialogContext.DialogContextError, v33, 0LL, 0LL);
  *id v35 = 0;
  aBlock[0] = v34;
  return CheckedContinuation.resume(throwing:)(aBlock, v8);
}

uint64_t sub_1000DCACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v11 = sub_100079604(v8, (uint64_t)qword_10033E1A8);
  sub_10007961C(v11, (uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  uint64_t v12 = swift_errorRetain(a1);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.error.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v25 = a2;
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = swift_slowAlloc(8LL, -1LL);
    uint64_t v24 = v4;
    uint64_t v17 = (void *)v16;
    *(_DWORD *)uint64_t v15 = 138543362;
    uint64_t v18 = _convertErrorToNSError(_:)(a1);
    uint64_t v26 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 4);
    *uint64_t v17 = v18;
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed authenticate request %{public}@", v15, 0xCu);
    uint64_t v19 = sub_10007B1FC(&qword_10032B340);
    swift_arrayDestroy(v17, 1LL, v19);
    uint64_t v20 = v17;
    uint64_t v4 = v24;
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v26 = a1;
  swift_errorRetain(a1);
  uint64_t v21 = sub_10007B1FC(&qword_10032B338);
  return CheckedContinuation.resume(throwing:)(&v26, v21);
}

uint64_t sub_1000DCD24(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v9 = a2;
    swift_errorRetain(a2);
LABEL_3:
    uint64_t v2 = sub_10007B1FC(&qword_10032B338);
    return CheckedContinuation.resume(throwing:)(&v9, v2);
  }

  if (!a1)
  {
    unint64_t v6 = sub_1000DDD60();
    uint64_t v7 = swift_allocError(&type metadata for DialogContext.DialogContextError, v6, 0LL, 0LL);
    *uint64_t v8 = 1;
    uint64_t v9 = v7;
    goto LABEL_3;
  }

  uint64_t v9 = (uint64_t)a1;
  id v4 = a1;
  uint64_t v5 = sub_10007B1FC(&qword_10032B338);
  return CheckedContinuation.resume(returning:)(&v9, v5);
}

void sub_1000DCDC4(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_1000DCE4C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10032B304;
  id v7 = a1;
  a3;
  id v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_1000DE444;
  return sub_1000DC558((uint64_t)v7);
}

uint64_t sub_1000DCEC8(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  return sub_1000AA254((uint64_t)sub_1000DCED8);
}

uint64_t sub_1000DCED8()
{
  uint64_t v1 = v0 + 2;
  id v2 = [objc_allocWithZone(AMSSystemAlertDialogTask) initWithRequest:v0[16]];
  v0[17] = v2;
  id v3 = [v2 present];
  v0[18] = v3;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000DCFB0;
  uint64_t v4 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  v5[2] = sub_100099C24;
  v5[3] = &unk_1002ED6B0;
  v5[4] = v4;
  [v3 resultWithCompletion:v5];
  return swift_continuation_await(v1);
}

uint64_t sub_1000DCFB0()
{
  *(void *)(v0 + 152) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000DCFF0()
{
  uint64_t v1 = *(void **)(v0 + 144);

  uint64_t v2 = *(void *)(v0 + 120);
  return sub_1000DE488(v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000DD028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v8 = *(void **)(v7 + 144);
  uint64_t v9 = *(void **)(v7 + 136);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  return sub_10009C2E4(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_1000DD078(void *a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  id v8 = _Block_copy(aBlock);
  uint64_t v9 = (void *)sub_1000AA314(a5, 40LL);
  v9[2] = a3;
  v9[3] = v8;
  v9[4] = a1;
  id v10 = a3;
  id v11 = a1;
  uint64_t v12 = sub_10009C714();
  return sub_1000DE4BC(v12, v13);
}

uint64_t sub_1000DD0D4(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_10032B30C;
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc(v6);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_1000DD14C;
  return sub_1000DCEC8((uint64_t)v7);
}

uint64_t sub_1000DD14C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)*v2;
  uint64_t v12 = v5;
  id v7 = (void *)v5[2];
  uint64_t v6 = (void *)v5[3];
  id v8 = (void *)*v2;
  sub_1000DE51C(v5[5], &v12);

  uint64_t v9 = (uint64_t (**)(uint64_t, void, uint64_t))v5[4];
  if (v3)
  {
    id v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    sub_1000DE510((uint64_t)v9, v9[2]);

    _Block_release(v9);
  }

  else
  {
    sub_1000DE504((uint64_t)v9, v9[2]);
    _Block_release(v9);
  }

  return ((uint64_t (*)(void))v8[1])();
}

uint64_t sub_1000DD200(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10032B31C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000DD25C;
  return sub_1000DD330(a1, a2);
}

uint64_t sub_1000DD25C(uint64_t a1)
{
  uint64_t v4 = sub_100085FBC();
  if (!v1) {
    uint64_t v4 = a1;
  }
  return sub_1000DE488(v4, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000DD2A0(void *a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_10032B314;
  id v9 = a1;
  swift_unknownObjectRetain(a2);
  a4;
  id v10 = (void *)swift_task_alloc(v8);
  v4[6] = v10;
  *id v10 = v4;
  v10[1] = sub_1000DE47C;
  return sub_1000DD200((uint64_t)v9, a2);
}

uint64_t sub_1000DD330(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return sub_1000AA254((uint64_t)sub_1000DD344);
}

uint64_t sub_1000DD344()
{
  uint64_t v1 = sub_1000DDDE0(*(void **)(v0 + 136));
  if (!v1) {
    uint64_t v1 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void **)(v0 + 136);
  *(void *)(v0 + 128) = v1;
  *(void *)(v0 + 80) = 7368801LL;
  *(void *)(v0 + 88) = 0xE300000000000000LL;
  sub_1000DE494();
  uint64_t v21 = &type metadata for String;
  sub_1000DE4CC((uint64_t)"com.apple.AppStore", v10, v0 + 120, v14[0], v15, v16, v17, v18, v19, v20);
  *(void *)(v0 + 80) = 0x707041666572LL;
  *(void *)(v0 + 88) = 0xE600000000000000LL;
  sub_1000DE494();
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC9storekitd13DialogContext_bundleID);
  unint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC9storekitd13DialogContext_bundleID + 8);
  uint64_t v21 = &type metadata for String;
  uint64_t v19 = v6;
  unint64_t v20 = v5;
  swift_bridgeObjectRetain(v5);
  sub_10012AB2C((uint64_t)&v19, (uint64_t)v14);
  *(void *)(v0 + 80) = 0x6369706F74LL;
  *(void *)(v0 + 88) = 0xE500000000000000LL;
  sub_1000DE494();
  uint64_t v21 = &type metadata for String;
  sub_1000DE4CC((uint64_t)"xp_ase_appstore_ue", v11, v12, v14[0], v15, v16, v17, v18, v19, v20);
  sub_1000DDE48(*(void *)(v0 + 128), v4);
  id v7 = [objc_allocWithZone(AMSSystemEngagementTask) initWithRequest:v4];
  *(void *)(v0 + 160) = v7;
  [v7 setClientInfo:*(void *)(v3 + OBJC_IVAR____TtC9storekitd13DialogContext_processInfo)];
  [v7 setBag:v2];
  id v8 = [v7 present];
  *(void *)(v0 + 168) = v8;
  *(void *)(v0 + 56) = v13;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1000DD570;
  *(void *)(v0 + 112) = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000LL;
  *(void *)(v0 + 96) = sub_100099C24;
  *(void *)(v0 + 104) = &unk_1002ED698;
  [v8 resultWithCompletion:v0 + 80];
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_1000DD570()
{
  *(void *)(v0 + 176) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000DD5B0()
{
  uint64_t v1 = *(void **)(v0 + 168);

  uint64_t v2 = *(void *)(v0 + 120);
  return sub_1000DE488(v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000DD5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v8 = *(void **)(v7 + 168);
  id v9 = *(void **)(v7 + 160);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  return sub_10009C2E4(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_1000DD6AC(void *a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  v5[3] = a2;
  v5[4] = a5;
  v5[2] = a1;
  v5[5] = _Block_copy(aBlock);
  if (a3) {
    static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }
  else {
    uint64_t v10 = 0LL;
  }
  v5[6] = v10;
  uint64_t v11 = dword_10032B31C;
  id v12 = a1;
  swift_unknownObjectRetain(a2);
  a5;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  v5[7] = v13;
  *uint64_t v13 = v5;
  v13[1] = sub_1000DD75C;
  return sub_1000DD330((uint64_t)v12, a2);
}

uint64_t sub_1000DD75C()
{
  uint64_t v4 = v3[3];
  unint64_t v5 = (void *)v3[4];
  uint64_t v6 = (void *)v3[2];
  uint64_t v7 = *v2;
  sub_1000DE51C(v3[7], v8);

  swift_unknownObjectRelease(v4);
  uint64_t v9 = v3[5];
  swift_bridgeObjectRelease(v3[6]);
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_1000DE558();
    sub_1000DE510(v9, *(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 16));

    sub_1000DE53C();
  }

  else
  {
    sub_1000DE504(v9, *(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 16));
    sub_1000DE53C();
  }

  return sub_1000DE4A8(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_1000DD7F0()
{
  uint64_t v1 = type metadata accessor for SKLogger(0LL);
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = swift_task_alloc((*(void *)(*(void *)(v1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000DD83C()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = sub_100079604(*(void *)(v0 + 32), (uint64_t)qword_10033E1A8);
  uint64_t v3 = sub_10007961C(v2, v1);
  uint64_t v4 = static os_log_type_t.error.getter(v3);
  os_log_type_t v5 = v4;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v7 = v5;
  if (os_log_type_enabled(v6, v5))
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    v20[0] = v9;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + 16) = sub_10007A488(0LL, 0xE000000000000000LL, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4);
    *(_WORD *)(v8 + 12) = 2082;
    *(void *)(v0 + 24) = sub_10007A488(0xD00000000000002ELL, 0x80000001002A1240LL, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s%{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v9);
    sub_10007B974(v8);
  }

  uint64_t v10 = *(void *)(v0 + 40);
  sub_10007A3CC(v10);
  unint64_t v11 = sub_1000DDD60();
  uint64_t v12 = swift_allocError(&type metadata for DialogContext.DialogContextError, v11, 0LL, 0LL);
  *uint64_t v13 = 1;
  swift_willThrow(v12, v13, v14, v15, v16, v17, v18);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DDA3C(void *a1, int a2, void *a3, uint64_t a4, void *aBlock, uint64_t a6)
{
  uint64_t v10 = _Block_copy(aBlock);
  unint64_t v11 = (void *)sub_1000AA314(a6, 48LL);
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = v10;
  v11[5] = a1;
  id v12 = a3;
  swift_unknownObjectRetain(a4);
  id v13 = a1;
  uint64_t v14 = sub_10009C714();
  return sub_1000DE4BC(v14, v15);
}

void sub_1000DDAA4()
{
}

uint64_t sub_1000DDAD0(void *a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_10032B324;
  id v9 = a1;
  swift_unknownObjectRetain(a2);
  id v10 = a4;
  unint64_t v11 = (void *)swift_task_alloc(v8);
  v4[6] = v11;
  *unint64_t v11 = v4;
  v11[1] = sub_1000DDB50;
  return sub_1000DD7F0();
}

uint64_t sub_1000DDB50()
{
  uint64_t v4 = v3[3];
  os_log_type_t v5 = (void *)v3[4];
  uint64_t v6 = (void *)v3[2];
  uint64_t v7 = *v2;
  sub_1000DE51C(v3[6], v8);

  swift_unknownObjectRelease(v4);
  uint64_t v9 = v3[5];
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_1000DE558();
    sub_1000DE510(v9, *(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 16));

    sub_1000DE53C();
  }

  else
  {
    sub_1000DE504(v3[5], *(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 16));
    sub_1000DE53C();
  }

  return sub_1000DE4A8(*(uint64_t (**)(void))(v7 + 8));
}

id sub_1000DDBEC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DialogContext(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000DDC90()
{
  return type metadata accessor for DialogContext(0LL);
}

uint64_t type metadata accessor for DialogContext(uint64_t a1)
{
  uint64_t result = qword_10032B2F0;
  if (!qword_10032B2F0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DialogContext);
  }
  return result;
}

uint64_t sub_1000DDCD0(uint64_t a1)
{
  v4[0] = &unk_10027BFE8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_10027C000;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1000DDD60()
{
  unint64_t result = qword_10032B328;
  if (!qword_10032B328)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C0AC, &type metadata for DialogContext.DialogContextError);
    atomic_store(result, (unint64_t *)&qword_10032B328);
  }

  return result;
}

void sub_1000DDD9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setProxyAppBundleID:v4];
}

uint64_t sub_1000DDDE0(void *a1)
{
  id v1 = [a1 metricsOverlay];
  if (!v1) {
    return 0LL;
  }
  objc_super v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  return v3;
}

void sub_1000DDE48(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setMetricsOverlay:isa];
}

uint64_t sub_1000DDEB4(uint64_t a1)
{
  return sub_1000DC760(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000DDEC0(uint64_t a1)
{
  return sub_1000DCACC(a1, v1 + v3);
}

uint64_t sub_1000DDEF8()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032B338);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000DDF5C(void *a1, uint64_t a2)
{
  return sub_1000DCD24(a1, a2);
}

uint64_t sub_1000DDFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DDFB0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000DDFB8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000DDFDC()
{
  return sub_1000DBB20(*(void *)(v0 + 16), *(void ****)(v0 + 24), *(uint64_t (**)())(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000DDFE8()
{
  return sub_1000DE480(v0, 32LL);
}

uint64_t sub_1000DDFF4()
{
  return sub_1000DE480(v0, 24LL);
}

uint64_t sub_1000DE000()
{
  return sub_1000DC020(*(void *)(v0 + 16));
}

uint64_t sub_1000DE008()
{
  return sub_1000DE480(v0, 24LL);
}

uint64_t sub_1000DE014()
{
  return sub_1000DC29C(*(void *)(v0 + 16));
}

uint64_t sub_1000DE01C()
{
  return sub_1000DE480(v0, 24LL);
}

void sub_1000DE028()
{
}

uint64_t sub_1000DE030()
{
  return sub_1000DE480(v0, 32LL);
}

uint64_t sub_1000DE03C()
{
  return sub_1000DE480(v0, 24LL);
}

uint64_t sub_1000DE048()
{
  return sub_1000DE480(v0, 32LL);
}

unint64_t sub_1000DE054()
{
  unint64_t result = qword_10032B3C0;
  if (!qword_10032B3C0)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10032B3C0);
  }

  return result;
}

unint64_t sub_1000DE094()
{
  unint64_t result = qword_10032B3D0;
  if (!qword_10032B3D0)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032B3C8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10032B3D0);
  }

  return result;
}

uint64_t sub_1000DE0DC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B3DC);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10009C080(v1, (uint64_t)sub_100085E20);
  return sub_10009C06C(v2, v3, v4, v5, v6);
}

uint64_t sub_1000DE128()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000DE168()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = (void *)swift_task_alloc(dword_10032B3EC);
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100085E20;
  return ((uint64_t (*)(void *, uint64_t, uint64_t, void *, void *))((char *)&dword_10032B3E8 + dword_10032B3E8))( v2,  v3,  v4,  v5,  v6);
}

uint64_t sub_1000DE1EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000DE224()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B3FC);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10009C080(v1, (uint64_t)sub_100085E20);
  return sub_10009C06C(v2, v3, v4, v5, v6);
}

uint64_t sub_1000DE274()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B40C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_1000DE4E4(v1, (uint64_t)sub_1000848E0);
  return sub_100086014(v2, v3, v4, v5);
}

uint64_t sub_1000DE2C0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000DE2F0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B41C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_1000DE4E4(v1, (uint64_t)sub_100085E20);
  return sub_100086014(v2, v3, v4, v5);
}

uint64_t storeEnumTagSinglePayload for DialogContext.DialogContextError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000DE384 + 4 * byte_10027BFC5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DE3B8 + 4 * byte_10027BFC0[v4]))();
}

uint64_t sub_1000DE3B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DE3C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DE3C8LL);
  }
  return result;
}

uint64_t sub_1000DE3D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DE3DCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000DE3E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DE3E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogContext.DialogContextError()
{
  return &type metadata for DialogContext.DialogContextError;
}

unint64_t sub_1000DE408()
{
  unint64_t result = qword_10032B428;
  if (!qword_10032B428)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C084, &type metadata for DialogContext.DialogContextError);
    atomic_store(result, (unint64_t *)&qword_10032B428);
  }

  return result;
}

uint64_t sub_1000DE480(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7LL);
}

uint64_t sub_1000DE488(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000DE494()
{
  return AnyHashable.init<A>(_:)(v0, v1, v2);
}

uint64_t sub_1000DE4A8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000DE4BC(uint64_t a1, uint64_t a2)
{
  return sub_100121B88(a1, a2);
}

void sub_1000DE4CC( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  a9 = v10;
  a10 = (a1 - 32) | 0x8000000000000000LL;
  sub_10012AB2C((uint64_t)&a9, (uint64_t)&a4);
}

uint64_t sub_1000DE4E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000DE504@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, void)@<X8>)
{
  return a2(a1, v2, 0LL);
}

uint64_t sub_1000DE510@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X8>)
{
  return a2(a1, 0LL, v2);
}

uint64_t sub_1000DE51C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v2;
  return swift_task_dealloc(a1);
}

void sub_1000DE524()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_1000DE53C()
{
}

  ;
}

uint64_t sub_1000DE558()
{
  return swift_errorRelease(v0);
}

void sub_1000DE564()
{
}

uint64_t storeEnumTagSinglePayload for StoreKitFeatureFlag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000DE5B8 + 4 * byte_10027C0F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DE5EC + 4 * byte_10027C0F0[v4]))();
}

uint64_t sub_1000DE5EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DE5F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DE5FCLL);
  }
  return result;
}

uint64_t sub_1000DE608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DE610LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000DE614(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DE61C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StoreKitFeatureFlag()
{
  return &type metadata for StoreKitFeatureFlag;
}

unint64_t sub_1000DE63C()
{
  unint64_t result = qword_10032B430;
  if (!qword_10032B430)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C164, &type metadata for StoreKitFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_10032B430);
  }

  return result;
}

const char *sub_1000DE678()
{
  return "StoreKit";
}

const char *sub_1000DE68C(char a1)
{
  if ((a1 & 1) != 0) {
    return "UseStoreKitService";
  }
  else {
    return "UseStoreKitBag";
  }
}

const char *sub_1000DE6B8()
{
  return sub_1000DE68C(*v0);
}

void sub_1000DE6D4()
{
  uint64_t v6 = v5;
  uint64_t v7 = sub_100086318();
  uint64_t v38 = *(void *)(v7 - 8);
  sub_1000E9368();
  __chkstk_darwin(v8);
  sub_1000875A4();
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v9);
  sub_1000E9688();
  __chkstk_darwin(v10);
  sub_1000E95B8();
  sub_10007B1FC(&qword_10032B578);
  sub_100085E74();
  __chkstk_darwin(v11);
  sub_1000D4CF4();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - v16;
  sub_1000E9220(v0 + OBJC_IVAR____TtC9storekitd6Client_serverOverride, (uint64_t)&v37 - v16, &qword_10032B578);
  uint64_t v18 = sub_1000E95D8();
  sub_1000E9654((uint64_t)v17, 1LL, v18);
  if (!v19)
  {
    sub_1000E9158((uint64_t)v17, v6, type metadata accessor for Client.Server);
    goto LABEL_17;
  }

  uint64_t v37 = v6;
  sub_100085298((uint64_t)v17, &qword_10032B578);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC9storekitd6Client_isAppStoreSigned) == 1)
  {
    uint64_t v21 = sub_10007B1FC(&qword_10032A028);
    uint64_t v22 = v37;
    uint64_t v23 = 1LL;
LABEL_7:
    sub_1000E994C(v22, v23, v20, v21);
    goto LABEL_17;
  }

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC9storekitd6Client_isBeta) == 1)
  {
    uint64_t v21 = sub_10007B1FC(&qword_10032A028);
    uint64_t v22 = v37;
    uint64_t v23 = 2LL;
    goto LABEL_7;
  }

  id v24 = [(id)objc_opt_self(OctaneManager) sharedInstance];
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v24 configurationDirectoryForBundleID:v25 mustExist:1];

  if (v26)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v26);

    uint64_t v27 = 0LL;
    uint64_t v28 = v37;
  }

  else
  {
    uint64_t v28 = v37;
    uint64_t v27 = 1LL;
  }

  uint64_t v29 = 1LL;
  sub_10007D0AC(v3, v27, 1LL, v7);
  sub_1000E9220(v3, v4, (uint64_t *)&unk_10032A1C0);
  sub_1000E9654(v4, 1LL, v7);
  if (!v19)
  {
    uint64_t v30 = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v2, v4, v7);
    sub_1000E9900((uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16));
    uint64_t v31 = sub_10007B1FC(&qword_10032A028);
    sub_1000E994C((uint64_t)v15, 0LL, v32, v31);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v2, v7);
    uint64_t v29 = 0LL;
  }

  uint64_t v33 = sub_10007D0AC((uint64_t)v15, v29, 1LL, v18);
  sub_1000C65DC(v33, (uint64_t *)&unk_10032A1C0);
  sub_1000E98F8((uint64_t)v15, v34, &qword_10032B578);
  sub_1000E9654(v1, 1LL, v18);
  if (v19)
  {
    uint64_t v35 = sub_10007B1FC(&qword_10032A028);
    sub_1000E994C(v28, 2LL, v36, v35);
    sub_100085298(v1, &qword_10032B578);
  }

  else
  {
    sub_1000E9158(v1, v28, type metadata accessor for Client.Server);
  }

  sub_100085298((uint64_t)v15, &qword_10032B578);
LABEL_17:
  sub_100085E98();
}

void sub_1000DEA24()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032A028);
  int v2 = sub_10009C250(v1);
  if (v2)
  {
    if (v2 == 1)
    {
      if (qword_100328D48 != -1) {
        swift_once(&qword_100328D48, sub_10012D118);
      }
      uint64_t v3 = qword_10033E3D0;
    }

    else
    {
      if (qword_100328D50 != -1) {
        swift_once(&qword_100328D50, sub_10012D1C0);
      }
      uint64_t v3 = qword_10033E3D8;
    }

    swift_unknownObjectRetain(v3);
  }

  else
  {
    objc_allocWithZone((Class)type metadata accessor for Bag.XcodeBag(0LL));
    sub_10007BA3C();
    uint64_t v4 = sub_1000C6708();
    sub_10012EDC0(v4, v5);
    uint64_t v6 = sub_100086318();
    sub_10008614C(v6);
  }

  sub_1000AB000();
}

unint64_t sub_1000DEB28(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v8 = sub_1000E8484(a1, a2, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1000E87C8);
    char v10 = v22;
    goto LABEL_39;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    }
    unint64_t v8 = (unint64_t)sub_1000E87C8(v7, v5);
    char v10 = v9 & 1;
    goto LABEL_39;
  }

  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4) {
      goto LABEL_52;
    }
    unint64_t v8 = (BYTE1(a1) - 48);
    uint64_t v15 = v4 - 2;
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        unsigned int v17 = *v16 - 48;
        if (v17 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v17);
        unint64_t v8 = 10 * v8 + v17;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v16;
        if (!--v15) {
          goto LABEL_39;
        }
      }
    }

void sub_1000DED8C()
{
  uint64_t v2 = v1;
  uint64_t v98 = v3;
  int v97 = v4;
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100086318();
  uint64_t v99 = *(void *)(v8 - 8);
  sub_1000E9368();
  __chkstk_darwin(v9);
  sub_1000862F4();
  uint64_t v96 = v10;
  sub_100086200();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v20 = sub_1000E9830(v12, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v95[0]);
  type metadata accessor for Client.Server(v20);
  sub_100085E74();
  __chkstk_darwin(v21);
  sub_100085FDC();
  uint64_t v24 = v23 - v22;
  sub_10007B1FC(&qword_10032A3D0);
  sub_100085E74();
  __chkstk_darwin(v25);
  sub_10007B9C4();
  uint64_t v104 = &_swiftEmptyDictionarySingleton;
  uint64_t v26 = v1 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID;
  uint64_t v27 = *(void *)(v1 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  unint64_t v28 = *(void *)(v26 + 8);
  uint64_t v29 = off_100327EC0[0];
  sub_1000B220C();
  uint64_t v30 = sub_1000DF3B4(256LL, v27, v28);
  uint64_t v31 = static String._fromSubstring(_:)(v30);
  unint64_t v33 = v32;
  sub_10007B980();
  uint64_t v103 = &type metadata for String;
  uint64_t v101 = v31;
  unint64_t v102 = v33;
  sub_1000E9740();
  uint64_t v34 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion);
  unint64_t v35 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion + 8);
  uint64_t v36 = off_100327EC8[0];
  sub_10008618C();
  uint64_t v37 = sub_1000DF3B4(100LL, v34, v35);
  uint64_t v38 = static String._fromSubstring(_:)(v37);
  unint64_t v40 = v39;
  sub_10007B980();
  uint64_t v103 = &type metadata for String;
  uint64_t v101 = v38;
  unint64_t v102 = v40;
  sub_10012A958((uint64_t)&v101, v36);
  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd6Client_storeItemID))
  {
    uint64_t v101 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
    int v41 = off_100327E98[0];
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v103 = &type metadata for String;
    uint64_t v101 = v42;
    unint64_t v102 = v43;
    sub_1000E9484();
  }

  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd6Client_storeExternalVersionID))
  {
    uint64_t v101 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd6Client_storeExternalVersionID);
    uint64_t v44 = off_100327EA0[0];
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v103 = &type metadata for String;
    uint64_t v101 = v45;
    unint64_t v102 = v46;
    sub_1000E9484();
  }

  unint64_t v47 = off_100327EF0[0];
  unsigned int v48 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  unint64_t v49 = v47;
  v95[0] = v48;
  uint64_t v50 = sub_100086040((uint64_t)[v48 deviceGUID]);
  unint64_t v52 = v51;

  uint64_t v103 = &type metadata for String;
  uint64_t v101 = v50;
  unint64_t v102 = v52;
  sub_1000E9484();
  id v53 = off_1003280C0[0];
  sub_1000E9220(v2 + OBJC_IVAR____TtC9storekitd6Client_deviceVendorID, v0, &qword_10032A3D0);
  uint64_t v54 = sub_10009C6A8();
  LODWORD(v47) = sub_10007D824(v0, 1LL, v54);
  v53;
  if ((_DWORD)v47 == 1)
  {
    sub_100085298(v0, &qword_10032A3D0);
    sub_1000E9880();
  }

  else
  {
    uint64_t v55 = UUID.uuidString.getter();
    uint64_t v103 = &type metadata for String;
    uint64_t v101 = v55;
    unint64_t v102 = v56;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8LL))(v0, v54);
  }

  uint64_t v57 = v98;
  uint64_t v58 = v99;
  sub_1000E9740();
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC9storekitd6Client_isAlmond) & 1) != 0)
  {
    sub_1000DE6D4();
    uint64_t v59 = sub_10007B1FC(&qword_10032A028);
    uint64_t v61 = sub_1000E93C8(v24, v60, v59);
    if ((_DWORD)v61)
    {
      sub_1000E97FC(v61, type metadata accessor for Client.Server);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v24, v8);
      uint64_t v103 = &type metadata for String;
      uint64_t v101 = 49LL;
      unint64_t v102 = 0xE100000000000000LL;
      sub_1000E978C(off_100327F68[0]);
    }
  }

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9storekitd6Client_isBeta) == 1)
  {
    uint64_t v103 = &type metadata for Bool;
    LOBYTE(v101) = 1;
    sub_1000E978C(off_100327F70[0]);
  }

  sub_1000E9220(v57, (uint64_t)v7, (uint64_t *)&unk_10032A1C0);
  sub_1000E9654((uint64_t)v7, 1LL, v8);
  if (v62)
  {
    sub_100085298((uint64_t)v7, (uint64_t *)&unk_10032A1C0);
    sub_1000E9998(v63, &qword_10032B548, &OBJC_CLASS___ASFReceipt_ptr);
    uint64_t v64 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))( v96,  v2 + OBJC_IVAR____TtC9storekitd6Client_callerBundleURL,  v8);
    id v72 = sub_1000E54B4(v64, v65);
    if (!v72) {
      goto LABEL_27;
    }
  }

  else
  {
    uint64_t v66 = v95[1];
    uint64_t v67 = sub_1000E99B0();
    uint64_t v69 = v68(v67);
    sub_1000E9998(v69, &qword_10032B548, &OBJC_CLASS___ASFReceipt_ptr);
    uint64_t v70 = URL.path.getter();
    id v72 = sub_1000E6458(v70, v71);
    (*(void (**)(void *, uint64_t))(v58 + 8))(v66, v8);
    if (!v72) {
      goto LABEL_27;
    }
  }

  uint64_t v73 = off_100327E90[0];
  id v74 = v72;
  Swift::String v75 = v73;
  id v76 = sub_100093DE4((uint64_t)v75, "opaqueDSIDString");
  uint64_t v77 = sub_100086040((uint64_t)v76);
  unint64_t v79 = v78;

  uint64_t v103 = &type metadata for String;
  uint64_t v101 = v77;
  unint64_t v102 = v79;
  sub_10012A958((uint64_t)&v101, v75);
  if ((v97 & 1) != 0)
  {
    id v81 = sub_100093DE4(v80, "receiptType");
    uint64_t v82 = sub_100086040((uint64_t)v81);
    unint64_t v84 = v83;

    uint64_t v101 = v82;
    unint64_t v102 = v84;
    v100[0] = 0x65646F6358LL;
    v100[1] = 0xE500000000000000LL;
    unint64_t v85 = sub_1000A9B34();
    uint64_t v86 = StringProtocol.contains<A>(_:)(v100, &type metadata for String, &type metadata for String, v85, v85);
    sub_100086004();
    if ((v86 & 1) == 0)
    {
      uint64_t v87 = off_100328040[0];
      id v88 = sub_100093DE4((uint64_t)v87, "receiptDataString");
      uint64_t v89 = sub_100086040((uint64_t)v88);
      unint64_t v91 = v90;

      uint64_t v103 = &type metadata for String;
      uint64_t v101 = v89;
      unint64_t v102 = v91;
      sub_10012A958((uint64_t)&v101, v87);
      if ([v74 isDSIDless])
      {
        uint64_t v92 = off_100328050[0];
        sub_1000E9108(v95[0], (SEL *)&selRef_serialNumber);
        if (v94)
        {
          uint64_t v103 = &type metadata for String;
          uint64_t v101 = v93;
          unint64_t v102 = v94;
        }

        else
        {
          sub_1000E9880();
        }

        sub_10012A958((uint64_t)&v101, v92);
      }
    }
  }

LABEL_27:
  sub_100085E98();
}

uint64_t sub_1000DF3B4(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v3 = a2;
    }
    uint64_t v4 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v4 = 11LL;
    }
    uint64_t v5 = v4 | (v3 << 16);
    uint64_t v6 = String.index(_:offsetBy:limitedBy:)(15LL, result, v5, a2, a3);
    if ((v7 & 1) != 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v6;
    }
    String.subscript.getter(15LL, v8);
    sub_100085EF0();
    return sub_1000C6708();
  }

  return result;
}

id sub_1000DF468()
{
  uint64_t v5 = (char *)&v23[-1] - v4;
  id v6 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  id v7 = sub_1000DF87C();
  [v6 setAccountMediaType:v7];

  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8);
  sub_10008618C();
  sub_1000DDD9C(v9, v8, v6);
  sub_100085FB4();
  v10._uint64_t countAndFlagsBits = 0x6C7070612E6D6F63LL;
  v10._object = (void *)0xEA00000000002E65LL;
  if (String.hasPrefix(_:)(v10))
  {
    sub_10008618C();
    sub_1000E8F4C(v9, v8, v6);
    sub_100085FB4();
  }

  sub_1000E992C();
  sub_10007B1FC(&qword_10032A028);
  char v11 = sub_1000E97CC(v1, 2LL);
  sub_100085BC4(v1, type metadata accessor for Client.Server);
  uint64_t v12 = sub_1000E99B0();
  sub_100085BC4(v12, v13);
  if ((v11 & 1) != 0
    || (sub_1000E992C(),
        char v14 = sub_1000E97CC(v1, 1LL),
        sub_100085BC4(v1, type metadata accessor for Client.Server),
        sub_100085BC4((uint64_t)v5, type metadata accessor for Client.Server),
        (v14 & 1) != 0))
  {
    uint64_t v15 = (void *)(v0 + OBJC_IVAR____TtC9storekitd6Client_auditToken);
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC9storekitd6Client_auditToken + 32) & 1) == 0)
    {
      uint64_t v17 = v15[2];
      uint64_t v16 = v15[3];
      uint64_t v18 = *(void *)(v0 + OBJC_IVAR____TtC9storekitd6Client_auditToken + 8);
      v23[0] = *v15;
      v23[1] = v18;
      v23[2] = v17;
      void v23[3] = v16;
      uint64_t v19 = Data.init(bytes:count:)(v23, 32LL);
      sub_1000E8EEC(v19, v20, v6);
    }
  }

  return v6;
}

void sub_1000DF67C()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  id v2 = sub_1000DF468();
  sub_1000DEA24();
  uint64_t v4 = v3;
  id v5 = objc_msgSend(v1, "ams_configurationWithProcessInfo:bag:", v2, v3);

  swift_unknownObjectRelease(v4);
  uint64_t v6 = v0 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID;
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  uint64_t v8 = *(void *)(v6 + 8);
  sub_10007BA3C();
  sub_1000E8FC8(v7, v8, v5);
  uint64_t v9 = swift_bridgeObjectRelease(v8);
  sub_1000E9998(v9, (unint64_t *)&qword_10032A038, &OBJC_CLASS___AMSURLSession_ptr);
  sub_1000E0FD8((uint64_t)v5, 0LL, 0LL);
  sub_1000AB000();
}

uint64_t sub_1000DF738(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = v2 + *(int *)(v7 + 48);
  sub_1000E9934(a1, v2);
  sub_1000E9934(a2, v8);
  uint64_t v9 = sub_10007B1FC(&qword_10032A028);
  int v10 = sub_10007D824(v2, 2LL, v9);
  if (v10)
  {
    if (v10 == 1)
    {
      uint64_t v11 = sub_1000E94AC();
      if ((_DWORD)v11 == 1) {
        goto LABEL_10;
      }
LABEL_8:
      sub_100085298(v2, &qword_10032B538);
      return 0LL;
    }

    uint64_t v11 = sub_1000E94AC();
    if ((_DWORD)v11 != 2) {
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v12 = sub_10009C714();
    sub_1000E8F9C(v12, v13, v14);
    int v15 = sub_1000E94AC();
    uint64_t v16 = *(void (**)(uint64_t))(*(void *)(sub_100086318() - 8) + 8LL);
    if (v15)
    {
      sub_1000E98D4();
      goto LABEL_8;
    }

    uint64_t v18 = sub_1000E957C();
    v16(v18);
    uint64_t v11 = sub_1000E98D4();
  }

id sub_1000DF87C()
{
  uint64_t v2 = sub_10007B1FC(&qword_10032A028);
  int v3 = sub_10009C250(v2);
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v4 = (id *)&AMSAccountMediaTypeProduction;
      return *v4;
    }
  }

  else
  {
    uint64_t v5 = sub_100086318();
    sub_10008614C(v5);
  }

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC9storekitd6Client_isBeta)) {
    uint64_t v4 = (id *)&AMSAccountMediaTypeAppStoreBeta;
  }
  else {
    uint64_t v4 = (id *)&AMSAccountMediaTypeAppStoreSandbox;
  }
  return *v4;
}

void sub_1000DF90C()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032A028);
  uint64_t v2 = sub_10009C250(v1);
  if ((_DWORD)v2)
  {
    sub_1000E961C(v2, type metadata accessor for Client.Server);
    int v3 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
    id v4 = sub_1000DF87C();
    id v5 = objc_msgSend(v3, "ams_sharedAccountStoreForMediaType:", v4);

    id v6 = objc_msgSend(v5, "ams_activeiTunesAccount");
  }

  else
  {
    uint64_t v7 = sub_100086318();
    sub_10008614C(v7);
  }

  sub_1000AB000();
}

void sub_1000DF9D4()
{
  uint64_t v1 = v0;
  [objc_allocWithZone(AMSURLRequestEncoder) initWithBag:v0];
  swift_unknownObjectRelease(v1);
  sub_1000DF90C();
  int v3 = (void *)v2;
  sub_1000E98E0(v2, "setAccount:");

  id v4 = sub_1000DF468();
  sub_1000E98E0((uint64_t)v4, "setClientInfo:");

  sub_1000AB000();
}

void sub_1000DFA50()
{
  uint64_t v3 = sub_10007B1FC(&qword_10032A028);
  if (!sub_10009C250(v3))
  {
    uint64_t v4 = sub_100086318();
    sub_10008614C(v4);
  }

  sub_1000221B0();
}

void sub_1000DFAF0()
{
  uint64_t v2 = sub_10007B1FC(&qword_10032A028);
  if (!sub_1000E93C8(v0, v3, v2))
  {
    uint64_t v4 = sub_100086318();
    sub_10008614C(v4);
  }

  sub_1000221B0();
}

uint64_t sub_1000DFB64()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v0 = sub_100086224();
  sub_100079604(v0, (uint64_t)qword_10033E1A8);
  v4[0] = sub_1000F4060();
  v4[1] = v1;
  uint64_t v2 = sub_10007B1FC(&qword_10032B540);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t result = TaskLocal.init(wrappedValue:)(v4);
  qword_10033E0E8 = result;
  return result;
}

uint64_t sub_1000DFBF4()
{
  if (qword_100328B08 != -1) {
    swift_once(&qword_100328B08, sub_1000DFB64);
  }
  TaskLocal.get()(&v1);
  return v1;
}

void sub_1000DFC54()
{
}

uint64_t sub_1000DFC70()
{
  uint64_t v2 = sub_100086318();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1000E9510();
  sub_100085E74();
  __chkstk_darwin(v4);
  sub_1000E9848();
  sub_1000E8F9C(v0, v0, v5);
  uint64_t v6 = sub_10007B1FC(&qword_10032A028);
  int v8 = sub_1000E93C8(v0, v7, v6);
  if (v8)
  {
    if (v8 == 1) {
      return 0x69746375646F7250LL;
    }
    else {
      return 0x786F62646E6153LL;
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v0, v2);
    sub_1000E9708();
    uint64_t v14 = v10;
    sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v12._uint64_t countAndFlagsBits = sub_1000E977C(v11);
    String.append(_:)(v12);
    sub_100086004();
    sub_1000E9478();
    uint64_t v9 = v14;
    sub_1000E98EC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  return v9;
}

void sub_1000DFDAC()
{
  uint64_t v3 = sub_10007B1FC(&qword_10032A028);
  if (!sub_10009C250(v3))
  {
    uint64_t v4 = sub_100086318();
    sub_10008614C(v4);
  }

  sub_1000221B0();
}

void sub_1000DFE14(char a1)
{
}

void sub_1000DFE58()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_1000CEF64();
}

void sub_1000DFF2C()
{
}

uint64_t sub_1000DFFD8()
{
  uint64_t v0 = sub_10009C714();
  return v1(v0);
}

void sub_1000E0044()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v4);
  sub_10007B9C4();
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9storekitd6Client_hasMIDBasedSINF) == 1)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v5 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
    sub_1000E9638(v5, v6, type metadata accessor for SKLogger);
    v17[0] = 0LL;
    v17[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(76LL);
    v7._uint64_t countAndFlagsBits = 0xD000000000000037LL;
    v7._object = (void *)0x80000001002A17C0LL;
    String.append(_:)(v7);
    swift_bridgeObjectRetain(*(void *)(v2 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8));
    v8._uint64_t countAndFlagsBits = sub_1000E957C();
    String.append(_:)(v8);
    sub_100086004();
    v9._object = (void *)0x80000001002A1800LL;
    v9._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v9);
    static os_log_type_t.default.getter(v10);
    uint64_t v11 = swift_bridgeObjectRetain_n(0xE000000000000000LL, 2LL);
    Swift::String v12 = (os_log_s *)Logger.logObject.getter(v11);
    if (sub_1000E96FC(v12))
    {
      uint64_t v13 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v14 = sub_10007B9FC(64LL);
      v17[0] = v14;
      *uint64_t v13 = 136446466;
      sub_10007A488(0LL, 0xE000000000000000LL, v17);
      sub_10007CBC8();
      sub_1000E9804();
      sub_10007BA3C();
      sub_10007A488(0LL, 0xE000000000000000LL, v17);
      sub_10007CBC8();
      sub_100085E64(0xE000000000000000LL);
      sub_1000E94F8((void *)&_mh_execute_header, v12, v1, "%{public}s%{public}s");
      sub_100086030(v14, v15, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v14);
      sub_10007B974((uint64_t)v13);
      swift_bridgeObjectRelease(0xE000000000000000LL);
    }

    else
    {

      uint64_t v16 = sub_100085E64(0xE000000000000000LL);
    }

    sub_1000E961C(v16, type metadata accessor for SKLogger);
  }

  else
  {
    sub_1000E0280();
  }

  sub_100085E98();
}

void sub_1000E0280()
{
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v1);
  uint64_t v6 = (char *)&v43 - v5;
  __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v43 - v7;
  Swift::String v9 = (__CFString *)String._bridgeToObjectiveC()();
  uint64_t v10 = (__CFString *)String._bridgeToObjectiveC()();
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v9, v10, 0LL);

  if (AppBooleanValue)
  {
    if (qword_100328B40 != -1) {
      uint64_t v12 = swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v13 = sub_1000E99A8(v12, (uint64_t)qword_10033E1A8);
    sub_1000E9638(v13, v14, type metadata accessor for SKLogger);
    uint64_t v16 = static os_log_type_t.default.getter(v15);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = v16;
    if (os_log_type_enabled(v17, (os_log_type_t)v16))
    {
      uint64_t v19 = sub_10007B9FC(22LL);
      uint64_t v20 = sub_10007B9FC(64LL);
      uint64_t v44 = v20;
      *(_DWORD *)uint64_t v19 = 136446466;
      uint64_t v43 = sub_1000E94CC();
      sub_1000E95E0((uint64_t)&v43);
      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v43 = sub_1000E9544( 0xD00000000000004FLL,  (uint64_t)"[CanMakePayments] In-app purchase disabled because device is in store demo mode");
      sub_1000E95E0((uint64_t)&v43);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s%{public}s", (uint8_t *)v19, 0x16u);
      sub_100086030(v20, v21, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v20);
      sub_10007B974(v19);
    }

    uint64_t v22 = (uint64_t)v8;
    goto LABEL_21;
  }

  id v23 = [(id)objc_opt_self(MCProfileConnection) sharedConnection];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureInAppPurchasesAllowed);
    id v27 = sub_1000E900C(v25, v26, v24);
    if ((_DWORD)v27 == 2)
    {
      if (qword_100328B40 != -1) {
        id v27 = (id)swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v28 = sub_1000E99A8((uint64_t)v27, (uint64_t)qword_10033E1A8);
      sub_1000E8F9C(v28, (uint64_t)v6, type metadata accessor for SKLogger);
      uint64_t v30 = static os_log_type_t.default.getter(v29);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      if (sub_1000E96FC(v31))
      {
        unint64_t v32 = (_DWORD *)sub_10007B9FC(22LL);
        uint64_t v33 = sub_10007B9FC(64LL);
        uint64_t v44 = v33;
        *unint64_t v32 = 136446466;
        uint64_t v43 = sub_1000E94CC();
        sub_1000E93E0();
        sub_1000E9814();
        uint64_t v43 = sub_1000E9544( 0xD00000000000004ALL,  (uint64_t)"[CanMakePayments] In-app purchase disabled because of content restrictions");
        sub_1000E93E0();
        sub_1000E94F8((void *)&_mh_execute_header, v31, (os_log_type_t)v9, "%{public}s%{public}s");
        sub_100086030(v33, v34, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v33);
        sub_10007B974((uint64_t)v32);
      }

      uint64_t v22 = (uint64_t)v6;
    }

    else
    {
      id v35 = [v24 isOnDeviceAppInstallationAllowed];
      if ((_DWORD)v35)
      {

LABEL_22:
        sub_100085E98();
        return;
      }

      if (qword_100328B40 != -1) {
        id v35 = (id)swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v36 = sub_1000E99A8((uint64_t)v35, (uint64_t)qword_10033E1A8);
      sub_1000E8F9C(v36, (uint64_t)v3, type metadata accessor for SKLogger);
      uint64_t v38 = static os_log_type_t.default.getter(v37);
      unint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      if (sub_1000E96FC(v39))
      {
        unint64_t v40 = (_DWORD *)sub_10007B9FC(22LL);
        uint64_t v41 = sub_10007B9FC(64LL);
        uint64_t v44 = v41;
        *unint64_t v40 = 136446466;
        uint64_t v43 = sub_1000E94CC();
        sub_1000E93E0();
        sub_1000E9814();
        uint64_t v43 = sub_1000E9544( 0xD000000000000053LL,  (uint64_t)"[CanMakePayments] In-app purchase disabled because of app installation restrictions");
        sub_1000E93E0();
        sub_1000E94F8((void *)&_mh_execute_header, v39, (os_log_type_t)v9, "%{public}s%{public}s");
        sub_100086030(v41, v42, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v41);
        sub_10007B974((uint64_t)v40);
      }

      uint64_t v22 = (uint64_t)v3;
    }

uint64_t sub_1000E07B4()
{
  uint64_t v48 = v2;
  uint64_t v49 = v3;
  uint64_t v4 = type metadata accessor for Insecure.SHA1(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_1000860EC();
  v42[3] = v6;
  uint64_t v7 = sub_1000E9760();
  uint64_t v8 = type metadata accessor for Insecure.SHA1Digest(v7);
  __chkstk_darwin(v8);
  uint64_t v42[2] = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v10);
  sub_10007B1FC(&qword_10032A3D0);
  sub_100085E74();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10009C6A8();
  uint64_t v45 = *(void *)(v14 - 8);
  sub_1000E9368();
  __chkstk_darwin(v15);
  sub_1000860EC();
  uint64_t v44 = v16;
  type metadata accessor for Client.Server(0LL);
  sub_100085E74();
  __chkstk_darwin(v17);
  sub_1000E9374();
  uint64_t v18 = sub_10007B1FC(&qword_10032A028);
  int v19 = sub_10009C250(v18);
  uint64_t v43 = v14;
  if (v19)
  {
    sub_1000DF90C();
    if (!v20
      || (uint64_t v21 = v20, v22 = objc_msgSend(v20, "ams_DSID"), v21, !v22))
    {
      sub_1000E961C((uint64_t)v20, type metadata accessor for Client.Server);
      return sub_10009C714();
    }

    id v23 = [v22 stringValue];
    v42[1] = v5;
    id v24 = v23;

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    unint64_t v27 = v26;

    uint64_t v28 = v0;
    uint64_t v29 = v25;
    sub_100085BC4(v28, type metadata accessor for Client.Server);
    uint64_t v14 = v43;
  }

  else
  {
    uint64_t v31 = sub_100086318();
    sub_10008614C(v31);
    unint64_t v27 = 0xE500000000000000LL;
    uint64_t v29 = 0x65646F6358LL;
  }

  sub_1000E98F8(v1 + OBJC_IVAR____TtC9storekitd6Client_deviceVendorID, v30, &qword_10032A3D0);
  sub_1000E9654((uint64_t)v13, 1LL, v14);
  if (!v32)
  {
    uint64_t v33 = sub_1000C6708();
    v34(v33);
    uint64_t v46 = v29;
    unint64_t v47 = v27;
    sub_10007ACCC( &qword_10032B570,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v35);
    String.append(_:)(v36);
    sub_100085EF0();
    sub_10009C9F4(v46, v47);
    uint64_t v38 = v37;
    sub_10007ACCC( &qword_10032A2C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1,  (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
    uint64_t v39 = sub_1000E9824();
    dispatch thunk of HashFunction.init()(v39, v40);
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease(v27);
  sub_100085298((uint64_t)v13, &qword_10032A3D0);
  return sub_10009C714();
}

void sub_1000E0CEC(uint64_t a1@<X8>)
{
}

uint64_t sub_1000E0D3C()
{
  return sub_1000E95EC(OBJC_IVAR____TtC9storekitd6Client_hasEverHadIAPs);
}

uint64_t sub_1000E0D6C()
{
  return sub_1000E95EC(OBJC_IVAR____TtC9storekitd6Client_isAlmond);
}

uint64_t sub_1000E0D9C()
{
  return sub_1000E95EC(OBJC_IVAR____TtC9storekitd6Client_isAppStoreSigned);
}

uint64_t sub_1000E0DCC()
{
  return sub_1000E95EC(OBJC_IVAR____TtC9storekitd6Client_isBeta);
}

void sub_1000E0DEC()
{
}

uint64_t sub_1000E0E34()
{
  return sub_1000E95EC(OBJC_IVAR____TtC9storekitd6Client_hasMIDBasedSINF);
}

void sub_1000E0E7C()
{
}

id sub_1000E0EAC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  NSString v3 = String._bridgeToObjectiveC()();
  sub_100085EF0();
  return sub_1000E95F4(v3);
}

void sub_1000E0EDC()
{
}

void sub_1000E0F0C()
{
}

uint64_t sub_1000E0F38()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9storekitd6Client_storeExternalVersionID);
}

uint64_t sub_1000E0F68()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
}

void sub_1000E0FD8(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1000AB000();
}

id sub_1000E1040(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!v3) {
    return sub_1000E95F4(0LL);
  }
  NSString v4 = String._bridgeToObjectiveC()();
  sub_100085EF0();
  return sub_1000E95F4(v4);
}

void sub_1000E1080()
{
}

void sub_1000E108C(uint64_t *a1)
{
}

void sub_1000E10AC()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1000E9878();
  sub_1000E9368();
  __chkstk_darwin(v8);
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v9);
  sub_100085FDC();
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_1000D4CF4();
  __chkstk_darwin(v11);
  sub_1000E95B8();
  if (v5)
  {
    id v12 = v3;
    sub_1000E14B0();
    sub_100086004();
    uint64_t v13 = sub_1000E953C();
    sub_1000E9614(v2, 0LL, v14, v13);
  }

  else
  {
    uint64_t v15 = sub_1000E953C();
    sub_1000E9614(v2, 1LL, v16, v15);
    id v17 = v3;
  }

  uint64_t ObjectType = swift_getObjectType(v3);

  sub_1000E98F8(v2, v19, &qword_10032A3D8);
  sub_1000E1A28(v7, v1);
  sub_1000E993C();
  sub_1000C65DC(v20, &qword_10032A3D8);
  uint64_t v21 = sub_1000E9984();
  swift_deallocPartialClassInstance(v21, ObjectType, v22, v23);
  sub_100085E98();
}

void sub_1000E14B0()
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_10009C6A8();
  uint64_t v89 = *(void *)(v5 - 8);
  sub_1000E9368();
  __chkstk_darwin(v6);
  uint64_t v88 = (uint64_t)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v8);
  sub_1000E9670();
  uint64_t v87 = v9;
  uint64_t v10 = sub_1000E9760();
  type metadata accessor for ClientOverride.Server(v10);
  sub_100085E74();
  __chkstk_darwin(v11);
  sub_1000E9860();
  sub_10007B1FC(&qword_10032A3D0);
  sub_100085E74();
  __chkstk_darwin(v12);
  sub_1000E96A4();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v86 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v86 - v17;
  sub_1000DB394((uint64_t)&v86 - v17, 1LL);
  sub_10007B1FC(&qword_10032A028);
  sub_1000E9978(v2, 1LL);
  ClientOverride.init(requestAuditTokenData:requestBundleID:requestBundleVersion:server:storeItemID:storeExternalVersion:vendorID:)( 0LL,  0xF000000000000000LL,  0LL,  0LL,  0LL,  0LL,  v2,  0LL,  v4,  1,  0LL,  1,  (uint64_t)v18);
  uint64_t v19 = off_100327E48[0];
  sub_1000E93BC((uint64_t)v19);

  if (v93)
  {
    sub_1000E93A0(v20, v21, v22, (uint64_t)&type metadata for Data);
    sub_1000E97EC();
    if (v24) {
      unint64_t v25 = 0xF000000000000000LL;
    }
    else {
      unint64_t v25 = v23;
    }
  }

  else
  {
    sub_1000CB740(v20, (uint64_t *)&unk_100328ED0);
    uint64_t v1 = 0LL;
    unint64_t v25 = 0xF000000000000000LL;
  }

  sub_10009BE78(*v4, v4[1]);
  *uint64_t v4 = v1;
  v4[1] = v25;
  unint64_t v26 = off_100327E50[0];
  sub_1000E93BC((uint64_t)v26);

  if (v93)
  {
    sub_1000E93A0(v27, v28, v29, (uint64_t)&type metadata for String);
    sub_1000E97EC();
    if (v24) {
      uint64_t v31 = 0LL;
    }
    else {
      uint64_t v31 = v30;
    }
  }

  else
  {
    sub_1000CB740(v27, (uint64_t *)&unk_100328ED0);
    uint64_t v1 = 0LL;
    uint64_t v31 = 0LL;
  }

  swift_bridgeObjectRelease(v4[3]);
  void v4[2] = v1;
  v4[3] = v31;
  char v32 = off_100327E58[0];
  sub_1000E93BC((uint64_t)v32);

  if (v93)
  {
    sub_1000E93A0(v33, v34, v35, (uint64_t)&type metadata for String);
    sub_1000E97EC();
    if (v24) {
      uint64_t v37 = 0LL;
    }
    else {
      uint64_t v37 = v36;
    }
  }

  else
  {
    sub_1000CB740(v33, (uint64_t *)&unk_100328ED0);
    uint64_t v1 = 0LL;
    uint64_t v37 = 0LL;
  }

  swift_bridgeObjectRelease(v4[5]);
  void v4[4] = v1;
  v4[5] = v37;
  uint64_t v38 = off_100327E80[0];
  sub_1000E93BC((uint64_t)v38);

  if (v93)
  {
    int v42 = sub_1000E93A0(v39, v40, v41, (uint64_t)&type metadata for UInt64);
    if (v42) {
      uint64_t v43 = v90;
    }
    else {
      uint64_t v43 = 0LL;
    }
    char v44 = v42 ^ 1;
  }

  else
  {
    sub_1000CB740(v39, (uint64_t *)&unk_100328ED0);
    uint64_t v43 = 0LL;
    char v44 = 1;
  }

  uint64_t v45 = (int *)sub_1000E953C();
  uint64_t v46 = (char *)v4 + v45[9];
  *(void *)uint64_t v46 = v43;
  v46[8] = v44;
  unint64_t v47 = off_100327E78[0];
  sub_1000E93BC((uint64_t)v47);

  if (v93)
  {
    int v51 = sub_1000E93A0(v48, v49, v50, (uint64_t)&type metadata for UInt64);
    uint64_t v52 = v90;
    if (!v51) {
      uint64_t v52 = 0LL;
    }
    char v53 = v51 ^ 1;
  }

  else
  {
    sub_1000CB740(v48, (uint64_t *)&unk_100328ED0);
    uint64_t v52 = 0LL;
    char v53 = 1;
  }

  uint64_t v54 = (char *)v4 + v45[8];
  *(void *)uint64_t v54 = v52;
  v54[8] = v53;
  uint64_t v55 = off_100327E68[0];
  sub_1000E93BC((uint64_t)v55);

  if (!v93)
  {
    sub_1000CB740(v56, (uint64_t *)&unk_100328ED0);
    goto LABEL_33;
  }

  uint64_t v59 = sub_1000E93A0(v56, v57, v58, (uint64_t)&type metadata for Int);
  if ((v59 & 1) == 0)
  {
LABEL_33:
    uint64_t v63 = (char *)v4 + v45[7];
    sub_1000E97FC(v59, type metadata accessor for ClientOverride.Server);
    uint64_t v61 = (uint64_t)v63;
    uint64_t v62 = 1LL;
    goto LABEL_34;
  }

  if (v90 != 2)
  {
    if (v90 == 1)
    {
      uint64_t v60 = (char *)v4 + v45[7];
      sub_1000E97FC(v59, type metadata accessor for ClientOverride.Server);
      uint64_t v61 = (uint64_t)v60;
      uint64_t v62 = 2LL;
      goto LABEL_34;
    }

    goto LABEL_33;
  }

  unint64_t v85 = (char *)v4 + v45[7];
  sub_1000E97FC(v59, type metadata accessor for ClientOverride.Server);
  uint64_t v61 = (uint64_t)v85;
  uint64_t v62 = 3LL;
LABEL_34:
  sub_1000E9978(v61, v62);
  uint64_t v64 = off_100327E88[0];
  sub_1000E93BC((uint64_t)v64);

  if (v93)
  {
    uint64_t v68 = v91;
    UUID.init(uuidString:)(v90, v91);
    swift_bridgeObjectRelease(v68);
    sub_1000E9654((uint64_t)v16, 1LL, v5);
    if (!v24)
    {
      uint64_t v79 = v87;
      uint64_t v80 = sub_1000E99B0();
      sub_1000E9944(v80, v81);
      uint64_t v82 = (uint64_t)v4 + v45[10];
      sub_100085298(v82, &qword_10032A3D0);
      uint64_t v83 = v82;
      uint64_t v84 = v79;
LABEL_46:
      sub_1000E9944(v83, v84);
      uint64_t v77 = v82;
      uint64_t v78 = 0LL;
      goto LABEL_47;
    }

    uint64_t v69 = &qword_10032A3D0;
    uint64_t v70 = v16;
  }

  else
  {
    uint64_t v69 = (uint64_t *)&unk_100328ED0;
    uint64_t v70 = v92;
  }

  sub_100085298((uint64_t)v70, v69);
LABEL_41:
  uint64_t v71 = off_100327E88[0];
  sub_1000E93BC((uint64_t)v71);

  if (v93)
  {
    int v73 = swift_dynamicCast(v0, v92, (char *)&type metadata for Any + 8, v5, 6LL);
    sub_1000DB394(v0, v73 ^ 1u);
    sub_1000E9654(v0, 1LL, v5);
    if (!v24)
    {
      sub_1000E9944(v88, v0);
      uint64_t v82 = (uint64_t)v4 + v45[10];
      sub_100085298(v82, &qword_10032A3D0);
      uint64_t v83 = sub_1000E98C8();
      goto LABEL_46;
    }
  }

  else
  {
    sub_1000CB740(v72, (uint64_t *)&unk_100328ED0);
    sub_1000DB394(v0, 1LL);
  }

  sub_100085298(v0, &qword_10032A3D0);
  id v74 = (char *)v4 + v45[10];
  uint64_t v75 = sub_1000C6708();
  sub_100085298(v75, v76);
  uint64_t v77 = (uint64_t)v74;
  uint64_t v78 = 1LL;
LABEL_47:
  sub_1000DB394(v77, v78);
  sub_100085E98();
}

void sub_1000E1A28(void *a1, uint64_t a2)
{
  uint64_t v31 = v6;
  sub_100086200();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v16 = sub_1000E9830(v8, v9, v10, v11, v12, v13, v14, v15, v29);
  uint64_t v30 = type metadata accessor for URL(v16);
  uint64_t v17 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_1000E9688();
  __chkstk_darwin(v18);
  sub_1000E95B8();
  unsigned int v19 = [a1 processIdentifier];
  uint64_t v20 = sub_1000EAF94(a1);
  *(void *)&__int128 v35 = 0x5D746E65696C435BLL;
  *((void *)&v35 + 1) = 0xE900000000000020LL;
  if (v21)
  {
    unint64_t v22 = v21;
  }

  else
  {
    uint64_t v20 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
  }

  unint64_t v23 = v22;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease(v22);
  sub_1000E988C(91LL);
  unsigned int v39 = v19;
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  sub_1000E988C(93LL);
  sub_1000E98A8(v26, "auditToken");
  sub_1000E3CA8( 0x5D746E65696C435BuLL,  0xE900000000000020LL,  v36,  *((unint64_t *)&v36 + 1),  0x5D746E65696C435BLL,  0xE900000000000020LL,  v2);
  if (v33)
  {

    swift_bridgeObjectRelease(0xE900000000000020LL);
    sub_100085298(a2, &qword_10032A3D8);
  }

  else
  {
    swift_bridgeObjectRelease(0xE900000000000020LL);
    sub_1000E9220(a2, v32, &qword_10032A3D8);
    uint64_t v27 = (uint64_t)objc_msgSend(a1, "sk_allowClientOverride");
    if ((v27 & 1) == 0)
    {
      sub_100085298(v32, &qword_10032A3D8);
      uint64_t v28 = type metadata accessor for ClientOverride(0LL);
      uint64_t v27 = sub_10007D0AC(v32, 1LL, 1LL, v28);
    }

    sub_1000E98A8(v27, "auditToken");
    v37[0] = v35;
    v37[1] = v36;
    char v38 = 0;
    (*(void (**)(void *, uint64_t, uint64_t))(v17 + 16))(v3, v2, v30);
    sub_1000E9220(v32, v31, &qword_10032A3D8);
    sub_1000E227C((uint64_t)v37, v3, v31);
    sub_1000E993C();
    sub_100085298(a2, &qword_10032A3D8);
    sub_100085298(v32, &qword_10032A3D8);
    sub_1000E9750();
  }

  sub_100086084();
}

void sub_1000E1D7C()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_1000E9878();
  v39[8] = *(void *)(v5 - 8);
  v39[9] = v5;
  sub_1000E9368();
  __chkstk_darwin(v6);
  sub_100085FDC();
  uint64_t v9 = v8 - v7;
  v39[5] = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_1000860EC();
  v39[6] = v11;
  uint64_t v12 = sub_100086318();
  uint64_t v42 = v12;
  uint64_t v43 = *(void *)(v12 - 8);
  sub_1000E9368();
  __chkstk_darwin(v13);
  sub_1000862F4();
  v39[7] = v14;
  sub_100086200();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v39 - v16;
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  uint64_t v19 = __chkstk_darwin(v18);
  unint64_t v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  unint64_t v23 = (char *)v39 - v22;
  sub_1000E955C();
  sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v25 = v24;
  id v26 = v0;
  uint64_t v44 = v4;
  v39[4] = v25;
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v25);
  object = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(object);
  sub_1000E9478();
  v39[3] = v45[0];
  uint64_t v40 = v45[1];
  uint64_t v41 = v9;
  if (v2)
  {
    sub_1000E14B0();
    sub_100085EF0();
    uint64_t v30 = sub_1000E953C();
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v30 = sub_1000E953C();
    uint64_t v31 = 1LL;
  }

  sub_1000E9614((uint64_t)v23, v31, v29, v30);
  uint64_t ObjectType = swift_getObjectType(v26);

  sub_1000E9880();
  char v46 = 1;
  uint64_t v34 = v43;
  uint64_t v33 = v44;
  __int128 v35 = *(void (**)(uint64_t))(v43 + 16);
  uint64_t v36 = sub_1000E957C();
  v35(v36);
  sub_1000E9220((uint64_t)v23, (uint64_t)v21, &qword_10032A3D8);
  sub_1000E227C((uint64_t)v45, v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v40);
  sub_1000E97AC(v33, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
  sub_100085298((uint64_t)v23, &qword_10032A3D8);
  sub_1000E95C8();
  swift_deallocPartialClassInstance(v26, ObjectType, v37, v38);
  sub_100085E98();
}

void sub_1000E227C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v214 = a1;
  type metadata accessor for Client.Server(0LL);
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_1000862F4();
  sub_1000E9390();
  __chkstk_darwin(v8);
  sub_1000E9670();
  uint64_t v199 = v9;
  uint64_t v228 = sub_100086318();
  uint64_t v230 = *(void *)(v228 - 8);
  sub_1000E9368();
  __chkstk_darwin(v10);
  sub_1000862F4();
  sub_1000E9390();
  __chkstk_darwin(v11);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v12);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v13);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v14);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v15);
  sub_1000DB3F4();
  uint64_t v217 = v16;
  sub_100086200();
  __chkstk_darwin(v17);
  sub_1000E9670();
  uint64_t v232 = v18;
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v19);
  sub_1000862F4();
  sub_1000E9390();
  __chkstk_darwin(v20);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v21);
  sub_1000E9670();
  uint64_t v220 = v22;
  uint64_t v23 = sub_1000E9760();
  uint64_t v219 = type metadata accessor for ClientOverride(v23);
  sub_100085E74();
  __chkstk_darwin(v24);
  sub_1000862F4();
  uint64_t v221 = v25;
  sub_100086200();
  __chkstk_darwin(v26);
  sub_1000E9670();
  uint64_t v212 = v27;
  uint64_t v28 = sub_1000E9760();
  uint64_t v29 = type metadata accessor for Logger(v28);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_1000862F4();
  sub_1000E9390();
  __chkstk_darwin(v31);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v32);
  sub_1000DB3F4();
  uint64_t v215 = v33;
  sub_100086200();
  __chkstk_darwin(v34);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v35);
  sub_1000DB3F4();
  CFDictionaryRef v222 = v36;
  sub_100086200();
  __chkstk_darwin(v37);
  unsigned int v39 = (char *)&v198 - v38;
  uint64_t v40 = type metadata accessor for SKLogger(0LL);
  sub_100085E74();
  __chkstk_darwin(v41);
  sub_1000E96C0();
  __chkstk_darwin(v42);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v43);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v44);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v45);
  sub_1000DB3F4();
  sub_1000E9390();
  __chkstk_darwin(v46);
  sub_1000E95B8();
  uint64_t v233 = 0x5D746E65696C435BLL;
  unint64_t v234 = 0xEA00000000002820LL;
  v229 = a2;
  v47._uint64_t countAndFlagsBits = URL.lastPathComponent.getter();
  object = v47._object;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(object);
  sub_1000E988C(41LL);
  uint64_t v49 = v234;
  uint64_t v216 = v233;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v224 = sub_100079604(v40, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v224, v4, type metadata accessor for SKLogger);
  uint64_t v50 = sub_1000E9824();
  v225 = v51;
  v51(v50);
  uint64_t v52 = sub_1000E9608();
  char v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = ((uint64_t (*)(void))static os_log_type_t.info.getter)();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v226 = a3;
  uint64_t v227 = v49;
  uint64_t v231 = v29;
  uint64_t v198 = v3;
  if (v55)
  {
    uint64_t v56 = (uint8_t *)sub_10007B9FC(12LL);
    uint64_t v57 = sub_10007B9FC(32LL);
    uint64_t v233 = v57;
    *(_DWORD *)uint64_t v56 = 136446210;
    sub_1000AA78C();
    uint64_t v58 = sub_1000E94BC();
    uint64_t v59 = sub_1000E9918(v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v60, v56 + 4);
    sub_100085E64(v49);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "%{public}s  Initializing client", v56, 0xCu);
    swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v57);
    uint64_t v61 = (uint64_t)v56;
    uint64_t v29 = v231;
    a3 = v226;
    sub_10007B974(v61);
  }

  else
  {

    sub_1000E95FC();
  }

  v223 = *(void (**)(char *, uint64_t))(v30 + 8);
  v223(v39, v29);
  uint64_t v62 = v228;
  uint64_t v63 = v221;
  uint64_t v200 = v30;
  uint64_t v64 = v220;
  sub_1000E9220(a3, v220, &qword_10032A3D8);
  int v65 = sub_10007D824(v64, 1LL, v219);
  uint64_t v66 = v229;
  if (v65 == 1)
  {
    sub_100085298(v64, &qword_10032A3D8);
  }

  else
  {
    uint64_t v68 = v64;
    uint64_t v69 = v212;
    sub_1000E9158(v68, v212, type metadata accessor for ClientOverride);
    sub_1000E8F9C(v224, v208, type metadata accessor for SKLogger);
    uint64_t v70 = sub_1000E98C8();
    v225(v70);
    sub_1000E8F9C(v69, v63, type metadata accessor for ClientOverride);
    uint64_t v71 = v227;
    uint64_t v72 = sub_1000E9608();
    int v73 = (void *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.info.getter(v73);
    if (sub_1000E979C(v74))
    {
      uint64_t v75 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v76 = sub_10007B9FC(64LL);
      uint64_t v233 = v76;
      *uint64_t v75 = 136446466;
      sub_1000AA78C();
      uint64_t v77 = sub_1000E94BC();
      sub_1000E990C(v77);
      uint64_t v78 = v63;
      uint64_t v80 = v79 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, v79 + 8, v75 + 1);
      sub_100085E64(v71);
      sub_1000E9804();
      uint64_t v81 = ClientOverride.description.getter();
      uint64_t v236 = sub_1000E967C(v81, v82);
      sub_1000E98A0((uint64_t)&v236, v80);
      sub_10007B980();
      uint64_t v83 = v78;
      uint64_t v62 = v228;
      sub_100085BC4(v83, type metadata accessor for ClientOverride);
      sub_1000E9640((void *)&_mh_execute_header, v84, v85, "%{public}s Overrides %{public}s");
      sub_100086030(v76, v86, (uint64_t)&type metadata for Any + 8);
      uint64_t v87 = v76;
      uint64_t v66 = v229;
      sub_10007B974(v87);
      sub_10007B974((uint64_t)v75);

      v223((char *)v222, v231);
      uint64_t v88 = v212;
    }

    else
    {

      sub_100085BC4(v63, type metadata accessor for ClientOverride);
      sub_1000E95FC();
      v223((char *)v222, v29);
      uint64_t v88 = v69;
    }

    sub_100085BC4(v88, type metadata accessor for ClientOverride);
  }

  char v90 = URL.hasDirectoryPath.getter(v67);
  if ((v90 & 1) != 0)
  {
    uint64_t v91 = v232;
    uint64_t v92 = sub_1000E99B0();
    sub_1000E9554(v92, v93);
  }

  else
  {
    URL._bridgeToObjectiveC()(v89);
    _CFBundleCopyBundleURLForExecutableURL(v94);
    sub_1000E993C();
    if (!v66)
    {
      __break(1u);
      goto LABEL_51;
    }

    uint64_t v91 = v232;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v66);
  }

  uint64_t v95 = v217;
  sub_1000E9554(v217, v91);
  id v96 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  uint64_t v97 = v218;
  id v98 = sub_1000E80D4(v95, 0);
  if (v97)
  {
    swift_errorRelease(v97);
  }

  else
  {
    id v100 = v98;
    os_log_type_t v122 = v98;
    if (v98)
    {
LABEL_31:
      id v126 = v100;
      uint64_t v127 = v204;
      sub_1000E9220(v226, v204, &qword_10032A3D8);
      sub_1000E9894();
      uint64_t v128 = sub_1000E552C(v214, v122, v127);
      unint64_t v129 = (const __CFDictionary *)v122;
      id v152 = v128;
      CFDictionaryRef v222 = (CFDictionaryRef)v122;
LABEL_37:
      uint64_t v153 = v227;
      sub_1000E9494(v224, type metadata accessor for SKLogger, (uint64_t)v235);
      uint64_t v154 = v207;
      uint64_t v155 = v231;
      ((void (*)(char *, const __CFDictionary *, uint64_t))v225)(v207, v129, v231);
      id v156 = v152;
      sub_1000E9608();
      uint64_t v157 = (char *)v156;
      uint64_t v158 = (os_log_s *)Logger.logObject.getter(v157);
      os_log_type_t v159 = static os_log_type_t.default.getter(v158);
      int v160 = v159;
      if (os_log_type_enabled(v158, v159))
      {
        uint64_t v161 = sub_10007B9FC(42LL);
        v223 = (void (*)(char *, uint64_t))sub_10007B9FC(128LL);
        uint64_t v233 = (uint64_t)v223;
        *(_DWORD *)uint64_t v161 = 136446978;
        LODWORD(v221) = v160;
        sub_1000AA78C();
        uint64_t v162 = sub_1000E94BC();
        sub_1000E990C(v162);
        sub_1000E93D0();
        sub_100085E64(v153);
        *(_WORD *)(v161 + 12) = 2082;
        uint64_t v62 = v161 + 14;
        uint64_t v163 = v199;
        sub_1000DE6D4();
        uint64_t v164 = sub_1000DFC70();
        unint64_t v166 = v165;
        sub_100085BC4(v163, type metadata accessor for Client.Server);
        uint64_t v167 = sub_10007A488(v164, v166, &v233);
        sub_1000E9588(v167);

        swift_bridgeObjectRelease(v166);
        *(_WORD *)(v161 + 22) = 2082;
        uint64_t v168 = *(void *)&v157[OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8];
        sub_1000B220C();
        uint64_t v236 = sub_1000E97B4();
        sub_1000E93D0();

        swift_bridgeObjectRelease(v168);
        *(_WORD *)(v161 + 32) = 2082;
        uint64_t v169 = *(void *)&v157[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
        sub_1000B220C();
        uint64_t v236 = sub_1000E97B4();
        sub_1000E93D0();

        swift_bridgeObjectRelease(v169);
        _os_log_impl( (void *)&_mh_execute_header,  v158,  (os_log_type_t)v221,  "%{public}s Initialized with server %{public}s bundle ID %{public}s and request bundle ID %{public}s]",  (uint8_t *)v161,  0x2Au);
        uint64_t v170 = (uint64_t)v223;
        swift_arrayDestroy(v223, 4LL, (char *)&type metadata for Any + 8);
        sub_10007B974(v170);
        sub_10007B974(v161);

        v223 = *(void (**)(char *, uint64_t))(v200 + 8);
        v223(v207, v231);
      }

      else
      {

        sub_1000E95FC();
        v223(v154, v155);
      }

      uint64_t v171 = v205;
      uint64_t v172 = v206;
      sub_1000DE6D4();
      uint64_t v173 = sub_10007B1FC(&qword_10032A028);
      if (sub_10007D824(v171, 2LL, v173))
      {
        uint64_t v174 = sub_1000E9738();
        sub_1000E97C4(v174, &qword_10032A3D8);
        sub_1000E9624();

        sub_1000E9668(v232);
        sub_100085BC4(v171, type metadata accessor for Client.Server);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v230 + 32))(v202, v171, v62);
        sub_1000E9494(v224, type metadata accessor for SKLogger, (uint64_t)&v226);
        sub_1000E94DC(v172);
        uint64_t v175 = v227;
        uint64_t v176 = swift_bridgeObjectRetain(v227);
        uint64_t v177 = (os_log_s *)Logger.logObject.getter(v176);
        os_log_type_t v178 = static os_log_type_t.default.getter(v177);
        if (os_log_type_enabled(v177, v178))
        {
          v179 = (uint8_t *)sub_10007B9FC(12LL);
          uint64_t v180 = sub_10007B9FC(32LL);
          uint64_t v233 = v180;
          *(_DWORD *)v179 = 136446210;
          v225 = (void (*)(uint64_t))(v179 + 4);
          swift_bridgeObjectRetain(v175);
          uint64_t v181 = sub_10007A488(v216, v175, &v233);
          uint64_t v182 = sub_1000E9918(v181);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v182, v183, v225);
          sub_100085E64(v175);
          _os_log_impl((void *)&_mh_execute_header, v177, v178, "%{public}s StoreKit testing enabled.", v179, 0xCu);
          swift_arrayDestroy(v180, 1LL, (char *)&type metadata for Any + 8);
          sub_10007B974(v180);
          sub_10007B974((uint64_t)v179);

          sub_1000E93F0(v206);
        }

        else
        {

          swift_bridgeObjectRelease_n(v175, 2LL);
          sub_1000E93F0(v172);
        }

        id v193 = [(id)objc_opt_self(OctaneManager) sharedInstance];
        uint64_t v194 = v202;
        URL.path.getter(v193);
        NSString v195 = String._bridgeToObjectiveC()();
        sub_10007B980();
        NSString v196 = String._bridgeToObjectiveC()();
        [v193 useConfigurationDirectory:v195 forBundleID:v196];

        sub_1000E97C4(v197, &qword_10032A3D8);
        sub_1000E9624();
        sub_1000E9668(v194);

        sub_1000E9668(v232);
      }

void sub_1000E34EC()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (objc_class *)sub_1000CEFA8();
  sub_1000E9878();
  sub_1000E9368();
  __chkstk_darwin(v7);
  sub_1000E9438(v8, v19);
  sub_100085E74();
  __chkstk_darwin(v9);
  sub_1000E9860();
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_1000875A4();
  sub_1000E955C();
  uint64_t v11 = v0;
  v12._uint64_t countAndFlagsBits = v5;
  v12._object = v3;
  String.append(_:)(v12);
  sub_1000E9478();
  uint64_t v13 = v20[1];
  id v14 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  sub_1000930E4();
  sub_1000E81D0(v5, (uint64_t)v3, 0);
  sub_1000E993C();
  sub_1000E9880();
  char v21 = 1;
  uint64_t v15 = sub_1000E953C();
  sub_1000E9614(v1, 1LL, v16, v15);
  id v17 = objc_allocWithZone(v6);
  sub_1000E552C((uint64_t)v20, v14, v1);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v3);
  uint64_t ObjectType = swift_getObjectType(v11);
  sub_1000E96E8(ObjectType, *v11);
  sub_100085E98();
}

void sub_1000E38A0()
{
  uint64_t v3 = v1;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_1000CEFA8();
  sub_1000E9878();
  sub_1000E9368();
  __chkstk_darwin(v8);
  sub_1000E9438(v9, v31);
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_1000860EC();
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v11);
  sub_10007B9C4();
  uint64_t v12 = sub_100086318();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1000E96A4();
  __chkstk_darwin(v14);
  sub_1000E9670();
  uint64_t v16 = v15;
  unint64_t v34 = v5;
  uint64_t v35 = v7;
  unint64_t v36 = v7;
  unint64_t v37 = v5;
  unint64_t v17 = sub_1000E91B8();
  id v18 = v3;
  unint64_t v19 = static AuditToken.decode<A>(data:)((uint64_t)&v36, (uint64_t)&type metadata for Data, v17);
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  uint64_t v32 = v0;
  uint64_t v33 = v12;
  unint64_t v25 = v24;
  sub_1000E3CA8(v19, v24, v20, v22, 0x5D746E65696C435BLL, 0xE800000000000000LL, v16);
  uint64_t ObjectType = swift_getObjectType(v18);

  unint64_t v36 = v19;
  unint64_t v37 = v25;
  uint64_t v38 = v21;
  unint64_t v39 = v23;
  char v40 = 0;
  (*(void (**)(void *, uint64_t, uint64_t))(v13 + 16))(v2, v16, v33);
  uint64_t v27 = sub_1000E953C();
  sub_1000E9614(v32, 1LL, v28, v27);
  sub_1000E227C((uint64_t)&v36, v2, v32);
  sub_10007F054(v35, v34);
  sub_1000E97AC(v16, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
  sub_1000E95C8();
  swift_deallocPartialClassInstance(v18, ObjectType, v29, v30);
  sub_100085E98();
}

void sub_1000E3CA8( unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v93 = a7;
  unint64_t v99 = a6;
  uint64_t v90 = a5;
  unint64_t v96 = a2;
  unint64_t v97 = a4;
  unint64_t v95 = a1;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v100 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v89 = (char *)&v82 - v12;
  uint64_t v98 = type metadata accessor for SKLogger(0LL);
  uint64_t v13 = __chkstk_darwin(v98);
  uint64_t v92 = (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v88 = (uint64_t)&v82 - v15;
  uint64_t v16 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v91 = (uint64_t)&v82 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v24 = (char *)&v82 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v82 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v82 - v28;
  uint64_t v30 = type metadata accessor for URL(0LL);
  sub_10007D0AC((uint64_t)v29, 1LL, 1LL, v30);
  sub_1000E9220((uint64_t)v29, (uint64_t)v27, (uint64_t *)&unk_10032A1C0);
  if (sub_10007D824((uint64_t)v27, 1LL, v30) == 1)
  {
    uint64_t v83 = v19;
    uint64_t v84 = v24;
    uint64_t v94 = v9;
    uint64_t v86 = v29;
    uint64_t v87 = v8;
    unsigned int v31 = v97;
    unint64_t v85 = HIDWORD(v97);
    unsigned int v32 = v95;
    unsigned int v33 = v96;
    unint64_t v34 = HIDWORD(v96);
    unint64_t v35 = HIDWORD(v95);
    sub_100085298((uint64_t)v27, (uint64_t *)&unk_10032A1C0);
    unint64_t v36 = (char *)swift_slowAlloc(4096LL, -1LL);
    audittoken.val[0] = v32;
    audittoken.val[1] = v35;
    audittoken.val[2] = v33;
    audittoken.val[3] = v34;
    *(void *)&audittoken.val[4] = a3;
    audittoken.val[6] = v31;
    audittoken.val[7] = v85;
    if (proc_pidpath_audittoken(&audittoken, v36, 0x1000u) < 1)
    {
      id v100 = v36;
      uint64_t v29 = v86;
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v62 = sub_100079604(v98, (uint64_t)qword_10033E1A8);
      uint64_t v63 = v88;
      sub_1000E8F9C(v62, v88, type metadata accessor for SKLogger);
      uint64_t v64 = v94;
      int v65 = v89;
      uint64_t v66 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v89, v63, v87);
      unint64_t v67 = v99;
      uint64_t v68 = swift_bridgeObjectRetain_n(v99, 2LL);
      uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
      os_log_type_t v70 = static os_log_type_t.default.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v72 = swift_slowAlloc(32LL, -1LL);
        uint64_t v102 = v72;
        *(_DWORD *)uint64_t v71 = 136446210;
        swift_bridgeObjectRetain(v67);
        uint64_t v101 = sub_10007A488(v90, v67, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v71 + 4);
        swift_bridgeObjectRelease_n(v67, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "%{public}s Cannot find process path", v71, 0xCu);
        swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1LL, -1LL);
        swift_slowDealloc(v71, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v64 + 8))(v89, v87);
      }

      else
      {

        swift_bridgeObjectRelease_n(v67, 2LL);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
      }

      int v73 = v100;
      unint64_t v74 = sub_1000E9070();
      uint64_t v75 = swift_allocError(&unk_1002EDD58, v74, 0LL, 0LL);
      *uint64_t v76 = 1;
      swift_willThrow(v75, v76, v77, v78, v79, v80, v81);
      swift_slowDealloc(v73, -1LL, -1LL);
      goto LABEL_19;
    }

    unint64_t v37 = v36;
    uint64_t v38 = String.init(cString:)(v36);
    uint64_t v40 = v39;
    uint64_t v41 = v91;
    sub_10007D0AC(v91, 1LL, 1LL, v30);
    uint64_t v42 = String.utf8CString.getter(v38, v40);
    swift_bridgeObjectRelease(v40);
    uint64_t v43 = (uint64_t)v84;
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)(v42 + 32, 0LL, v41);
    sub_100085298(v41, (uint64_t *)&unk_10032A1C0);
    uint64_t v29 = v86;
    sub_100085298((uint64_t)v86, (uint64_t *)&unk_10032A1C0);
    swift_release(v42);
    sub_10007D0AC(v43, 0LL, 1LL, v30);
    sub_1000E91F4(v43, (uint64_t)v29, (uint64_t *)&unk_10032A1C0);
    swift_slowDealloc(v37, -1LL, -1LL);
    uint64_t v8 = v87;
    uint64_t v9 = v94;
    unint64_t v19 = v83;
  }

  else
  {
    sub_100085298((uint64_t)v27, (uint64_t *)&unk_10032A1C0);
  }

  sub_1000E9220((uint64_t)v29, (uint64_t)v19, (uint64_t *)&unk_10032A1C0);
  int v44 = sub_10007D824((uint64_t)v19, 1LL, v30);
  uint64_t v45 = v100;
  if (v44 != 1)
  {
    sub_100085298((uint64_t)v29, (uint64_t *)&unk_10032A1C0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v93, v19, v30);
    return;
  }

  sub_100085298((uint64_t)v19, (uint64_t *)&unk_10032A1C0);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v46 = sub_100079604(v98, (uint64_t)qword_10033E1A8);
  uint64_t v47 = v92;
  sub_1000E8F9C(v46, v92, type metadata accessor for SKLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v45, v47, v8);
  unint64_t v48 = v99;
  uint64_t v49 = swift_bridgeObjectRetain_n(v99, 2LL);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v53 = swift_slowAlloc(32LL, -1LL);
    *(void *)audittoken.val = v53;
    uint64_t v94 = v9;
    *(_DWORD *)uint64_t v52 = 136446210;
    swift_bridgeObjectRetain(v48);
    uint64_t v102 = sub_10007A488(v90, v48, (uint64_t *)&audittoken);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &audittoken, v52 + 4);
    swift_bridgeObjectRelease_n(v48, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%{public}s Cannot find bundle URL", v52, 0xCu);
    swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v100, v8);
  }

  else
  {

    swift_bridgeObjectRelease_n(v48, 2LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v45, v8);
  }

  unint64_t v54 = sub_1000E9070();
  uint64_t v55 = swift_allocError(&unk_1002EDD58, v54, 0LL, 0LL);
  *uint64_t v56 = 1;
  swift_willThrow(v55, v56, v57, v58, v59, v60, v61);
LABEL_19:
  sub_100085298((uint64_t)v29, (uint64_t *)&unk_10032A1C0);
}

id sub_1000E4500(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v157 = a4;
  uint64_t v155 = a2;
  uint64_t v151 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v4);
  uint64_t v7 = type metadata accessor for ClientOverride.Server(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v146 = (uint64_t)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v145 = (uint64_t)&v142 - v11;
  __chkstk_darwin(v10);
  uint64_t v144 = (uint64_t)&v142 - v12;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v158 = *(void *)(v13 - 8);
  uint64_t v159 = v13;
  __chkstk_darwin(v13);
  uint64_t v147 = (char *)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10007B1FC(&qword_10032A3D0);
  __chkstk_darwin(v15);
  id v152 = (char *)&v142 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10007B1FC(&qword_10032A3D8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v148 = (char *)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v143 = (uint64_t)&v142 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v149 = (uint64_t)&v142 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v150 = (char *)&v142 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v153 = (uint64_t)&v142 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v142 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  unsigned int v33 = (char *)&v142 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  unint64_t v36 = (char *)&v142 - v35;
  __chkstk_darwin(v34);
  uint64_t v165 = (uint64_t)&v142 - v37;
  uint64_t v38 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v142 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!kCFBundleIdentifierKey)
  {
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleIdentifierKey);
  uint64_t v43 = v42;
  int v44 = v5;
  sub_10012A674(v41, v43, a3, &v163);
  swift_bridgeObjectRelease(v43);
  if (v164)
  {
    uint64_t v45 = a3;
    if ((swift_dynamicCast(&v161, &v163, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v47 = v161;
      uint64_t v46 = v162;
      unint64_t v48 = (void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
      *unint64_t v48 = v161;
      v48[1] = v46;
      swift_bridgeObjectRetain(v46);
      sub_1000E5430(v47, v46, (uint64_t)v36);
      swift_bridgeObjectRelease(v46);
      sub_1000E9220(v157, (uint64_t)v33, &qword_10032A3D8);
      uint64_t v49 = type metadata accessor for ClientOverride(0LL);
      int v50 = sub_10007D824((uint64_t)v36, 1LL, v49);
      uint64_t v154 = v49;
      if (v50 == 1)
      {
        uint64_t v51 = v165;
        sub_1000E91F4((uint64_t)v33, v165, &qword_10032A3D8);
        uint64_t v49 = v154;
        sub_100085298((uint64_t)v36, &qword_10032A3D8);
      }

      else
      {
        sub_100085298((uint64_t)v33, &qword_10032A3D8);
        uint64_t v51 = v165;
        sub_1000E9158((uint64_t)v36, v165, type metadata accessor for ClientOverride);
        sub_10007D0AC(v51, 0LL, 1LL, v49);
      }

      sub_1000E9220(v51, (uint64_t)v30, &qword_10032A3D8);
      int v70 = sub_10007D824((uint64_t)v30, 1LL, v49);
      uint64_t v71 = v155;
      uint64_t v72 = v159;
      if (v70 == 1)
      {
        sub_100085298((uint64_t)v30, &qword_10032A3D8);
      }

      else
      {
        uint64_t v74 = *((void *)v30 + 2);
        uint64_t v73 = *((void *)v30 + 3);
        swift_bridgeObjectRetain(v73);
        sub_100085BC4((uint64_t)v30, type metadata accessor for ClientOverride);
        if (v73) {
          goto LABEL_18;
        }
      }

      uint64_t v74 = *v48;
      uint64_t v73 = v48[1];
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRelease(0LL);
LABEL_18:
      uint64_t v75 = v151;
      uint64_t v76 = (void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
      *uint64_t v76 = v74;
      v76[1] = v73;
      sub_1000E91F4(v75, (uint64_t)v44 + OBJC_IVAR____TtC9storekitd6Client_auditToken, &qword_10032B550);
      uint64_t v77 = (uint64_t)v44 + OBJC_IVAR____TtC9storekitd6Client_callerBundleURL;
      uint64_t v78 = *(void (**)(char *, void *, uint64_t))(v158 + 16);
      v78((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_callerBundleURL, v71, v72);
      *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_isClip) = 0;
      uint64_t v79 = (void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_signerOrganization);
      void *v79 = 0LL;
      v79[1] = 0LL;
      *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_isAlmond) = 0;
      *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_iOSTargetPlatform) = 2;
      uint64_t v80 = v153;
      sub_1000E9220(v165, v153, &qword_10032A3D8);
      if (sub_10007D824(v80, 1LL, v154) == 1)
      {
        sub_100085298(v80, &qword_10032A3D8);
      }

      else
      {
        uint64_t v81 = v80;
        uint64_t v83 = *(void *)(v80 + 32);
        unint64_t v82 = *(void *)(v80 + 40);
        swift_bridgeObjectRetain(v82);
        sub_100085BC4(v81, type metadata accessor for ClientOverride);
        if (v82)
        {
          uint64_t v84 = (char *)v44 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion;
          *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion) = v83;
          uint64_t v85 = (uint64_t)v152;
          uint64_t v86 = (uint64_t)v150;
          goto LABEL_28;
        }
      }

      uint64_t v85 = (uint64_t)v152;
      if (!kCFBundleVersionKey)
      {
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }

      uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleVersionKey);
      uint64_t v89 = v88;
      sub_10012A674(v87, v88, v45, &v163);
      swift_bridgeObjectRelease(v89);
      uint64_t v86 = (uint64_t)v150;
      if (v164)
      {
        if ((swift_dynamicCast(&v161, &v163, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          unint64_t v82 = v162;
          uint64_t v84 = (char *)v44 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion;
          *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion) = v161;
          goto LABEL_28;
        }
      }

      else
      {
        sub_100085298((uint64_t)&v163, (uint64_t *)&unk_100328ED0);
      }

      uint64_t v84 = (char *)v44 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion;
      *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion) = 3157553LL;
      unint64_t v82 = 0xE300000000000000LL;
LABEL_28:
      *((void *)v84 + 1) = v82;
      if (_kCFBundleDisplayNameKey)
      {
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(_kCFBundleDisplayNameKey);
        uint64_t v92 = v91;
        sub_10012A674(v90, v91, v45, &v163);
        swift_bridgeObjectRelease(v92);
        if (v164)
        {
          char v93 = swift_dynamicCast(&v161, &v163, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
          uint64_t v94 = v154;
          if ((v93 & 1) != 0)
          {
            swift_bridgeObjectRelease(v45);
LABEL_36:
            unint64_t v99 = v162;
            id v100 = (char *)v44 + OBJC_IVAR____TtC9storekitd6Client_localizedName;
            *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_localizedName) = v161;
            uint64_t v101 = (uint64_t)v148;
            goto LABEL_40;
          }
        }

        else
        {
          sub_100085298((uint64_t)&v163, (uint64_t *)&unk_100328ED0);
        }

        if (kCFBundleNameKey)
        {
          uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleNameKey);
          uint64_t v97 = v96;
          sub_10012A674(v95, v96, v45, &v163);
          swift_bridgeObjectRelease(v97);
          swift_bridgeObjectRelease(v45);
          if (v164)
          {
            char v98 = swift_dynamicCast(&v161, &v163, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
            uint64_t v94 = v154;
            if ((v98 & 1) != 0) {
              goto LABEL_36;
            }
            uint64_t v101 = (uint64_t)v148;
          }

          else
          {
            sub_100085298((uint64_t)&v163, (uint64_t *)&unk_100328ED0);
            uint64_t v101 = (uint64_t)v148;
            uint64_t v94 = v154;
          }

          uint64_t v102 = URL.lastPathComponent.getter();
          id v100 = (char *)v44 + OBJC_IVAR____TtC9storekitd6Client_localizedName;
          *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_localizedName) = v102;
LABEL_40:
          *((void *)v100 + 1) = v99;
          sub_1000E9220(v165, v86, &qword_10032A3D8);
          if (sub_10007D824(v86, 1LL, v94) == 1)
          {
            sub_100085298(v86, &qword_10032A3D8);
            uint64_t v103 = type metadata accessor for UUID(0LL);
            sub_10007D0AC(v85, 1LL, 1LL, v103);
          }

          else
          {
            sub_1000E9220(v86 + *(int *)(v94 + 40), v85, &qword_10032A3D0);
            sub_100085BC4(v86, type metadata accessor for ClientOverride);
          }

          uint64_t v104 = v94;
          sub_1000E91F4(v85, (uint64_t)v44 + OBJC_IVAR____TtC9storekitd6Client_deviceVendorID, &qword_10032A3D0);
          *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_hasEverHadIAPs) = 1;
          id v105 = [(id)objc_opt_self(NSFileManager) defaultManager];
          sub_1000C67E0(v77, 1);
          char v107 = v106;

          *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_isAppStoreSigned) = v107 & 1;
          *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_isBeta) = 0;
          *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_isThirdPartyDistributed) = 1;
          uint64_t v108 = (void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_vendorName);
          *uint64_t v108 = 0LL;
          v108[1] = 0LL;
          *((_BYTE *)v44 + OBJC_IVAR____TtC9storekitd6Client_hasMIDBasedSINF) = 0;
          uint64_t v109 = v149;
          sub_1000E9220(v165, v149, &qword_10032A3D8);
          uint64_t v110 = v109 + *(int *)(v104 + 36);
          uint64_t v111 = *(void *)v110;
          char v112 = *(_BYTE *)(v110 + 8);
          sub_100085BC4(v109, type metadata accessor for ClientOverride);
          if ((v112 & 1) == 0)
          {
            uint64_t v135 = v143;
            sub_1000E9220(v165, v143, &qword_10032A3D8);
            uint64_t v136 = v154;
            if (sub_10007D824(v135, 1LL, v154) == 1)
            {
              uint64_t v109 = v135;
LABEL_44:
              sub_100085298(v109, &qword_10032A3D8);
              goto LABEL_46;
            }

            uint64_t v139 = v135 + *(int *)(v136 + 32);
            unint64_t v125 = *(void *)v139;
            uint64_t v140 = v135;
            char v141 = *(_BYTE *)(v139 + 8);
            sub_100085BC4(v140, type metadata accessor for ClientOverride);
            if ((v141 & 1) == 0)
            {
              *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_storeItemID) = v111;
LABEL_51:
              *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_storeExternalVersionID) = v125;
              sub_1000E91F4(v165, v101, &qword_10032A3D8);
              uint64_t v126 = v154;
              if (sub_10007D824(v101, 1LL, v154) != 1)
              {
                uint64_t v129 = v145;
                sub_1000E8F9C(v101 + *(int *)(v126 + 28), v145, type metadata accessor for ClientOverride.Server);
                sub_100085BC4(v101, type metadata accessor for ClientOverride);
                uint64_t v130 = v129;
                uint64_t v131 = v144;
                sub_1000E9158(v130, v144, type metadata accessor for ClientOverride.Server);
                uint64_t v132 = v146;
                sub_1000E9158(v131, v146, type metadata accessor for ClientOverride.Server);
                uint64_t v133 = sub_10007B1FC(&qword_10032A028);
                uint64_t v134 = (char *)&loc_1000E51C4 + *((int *)qword_1000E5420 + sub_10007D824(v132, 3LL, v133));
                __asm { BR              X10 }
              }

              sub_100085298(v101, &qword_10032A3D8);
              uint64_t v127 = (uint64_t)v44 + OBJC_IVAR____TtC9storekitd6Client_serverOverride;
              uint64_t v128 = type metadata accessor for Client.Server(0LL);
              sub_10007D0AC(v127, 1LL, 1LL, v128);

              uint64_t v137 = v159;
              v160.receiver = v44;
              v160.super_class = ObjectType;
              id v61 = objc_msgSendSuper2(&v160, "init");
              sub_100085298(v157, &qword_10032A3D8);
              (*(void (**)(void *, uint64_t))(v158 + 8))(v71, v137);
              return v61;
            }
          }

void sub_1000E5430(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_100328B10 != -1) {
    swift_once(&qword_100328B10, sub_1000E686C);
  }
  uint64_t v6 = (os_unfair_lock_s *)(qword_10032B438 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_10032B438 + 16));
  sub_1000E6938(a1, a2, a3);
  sub_1000E9404(v6);
}

id sub_1000E54B4@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  uint64_t v3 = v2;
  URL._bridgeToObjectiveC()(a2);
  uint64_t v6 = v5;
  id v7 = [(id)swift_getObjCClassFromMetadata(v3) receiptFromBundleAtURL:v5];

  uint64_t v8 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a1, v8);
  return v7;
}

char *sub_1000E552C(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v183 = a3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v4);
  uint64_t v7 = type metadata accessor for ClientOverride.Server(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v173 = (uint64_t)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v171 = (uint64_t)&v165 - v11;
  __chkstk_darwin(v10);
  uint64_t v170 = (uint64_t)&v165 - v12;
  uint64_t v13 = sub_10007B1FC(&qword_10032A3D0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v175 = (char *)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v176 = (uint64_t)&v165 - v17;
  __chkstk_darwin(v16);
  uint64_t v177 = (char *)&v165 - v18;
  uint64_t v19 = sub_10007B1FC(&qword_10032A3D8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v180 = (char *)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v181 = (char *)&v165 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v179 = (char *)&v165 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v168 = (uint64_t)&v165 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v178 = (uint64_t)&v165 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v174 = (uint64_t)&v165 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v165 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v165 - v36;
  __chkstk_darwin(v35);
  uint64_t v184 = (uint64_t)&v165 - v38;
  uint64_t v39 = type metadata accessor for URL(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v165 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000E91F4(a1, (uint64_t)v4 + OBJC_IVAR____TtC9storekitd6Client_auditToken, &qword_10032B550);
  uint64_t v43 = v4;
  id v44 = [a2 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v44);

  uint64_t v45 = (char *)v43 + OBJC_IVAR____TtC9storekitd6Client_callerBundleURL;
  uint64_t v46 = *(void (**)(void, void, void))(v40 + 32);
  uint64_t v172 = v42;
  uint64_t v167 = v46;
  v46((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_callerBundleURL, v42, v39);
  id v47 = a2;
  sub_1000E90AC(v47, (SEL *)&selRef_bundleIdentifier);
  if (!v49)
  {
    unint64_t v56 = sub_1000E9070();
    uint64_t v57 = swift_allocError(&unk_1002EDD58, v56, 0LL, 0LL);
    *os_log_type_t v58 = 0;
    swift_willThrow(v57, v58, v59, v60, v61, v62, v63);

    sub_100085298(v183, &qword_10032A3D8);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v39);

    swift_deallocPartialClassInstance( v43,  ObjectType,  *(unsigned int *)((swift_isaMask & *v43) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v43) + 0x34LL));
    return v34;
  }

  uint64_t v50 = v48;
  uint64_t v51 = v49;
  uint64_t v165 = v39;
  uint64_t v52 = (void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  *uint64_t v52 = v48;
  v52[1] = v49;
  swift_bridgeObjectRetain(v49);
  uint64_t v166 = v50;
  uint64_t v169 = v51;
  sub_1000E5430(v50, v51, (uint64_t)v37);
  sub_1000E9220(v183, (uint64_t)v34, &qword_10032A3D8);
  uint64_t v53 = (int *)type metadata accessor for ClientOverride(0LL);
  if (sub_10007D824((uint64_t)v37, 1LL, (uint64_t)v53) == 1)
  {
    uint64_t v54 = (uint64_t)v34;
    uint64_t v55 = v184;
    sub_1000E91F4(v54, v184, &qword_10032A3D8);
    sub_100085298((uint64_t)v37, &qword_10032A3D8);
  }

  else
  {
    sub_100085298((uint64_t)v34, &qword_10032A3D8);
    uint64_t v55 = v184;
    sub_1000E9158((uint64_t)v37, v184, type metadata accessor for ClientOverride);
    sub_10007D0AC(v55, 0LL, 1LL, (uint64_t)v53);
  }

  uint64_t v64 = (uint64_t)v177;
  uint64_t v65 = v55;
  uint64_t v66 = v174;
  uint64_t v67 = (uint64_t)v175;
  sub_1000E9220(v65, v174, &qword_10032A3D8);
  int v68 = sub_10007D824(v66, 1LL, (uint64_t)v53);
  uint64_t v69 = v176;
  if (v68 == 1)
  {
    sub_100085298(v66, &qword_10032A3D8);
    uint64_t v70 = type metadata accessor for UUID(0LL);
    sub_10007D0AC(v69, 1LL, 1LL, v70);
LABEL_9:
    id v72 = [v47 deviceIdentifierForVendor];
    if (v72)
    {
      uint64_t v73 = v72;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v74 = 0LL;
    }

    else
    {
      uint64_t v74 = 1LL;
    }

    uint64_t v75 = type metadata accessor for UUID(0LL);
    sub_10007D0AC(v67, v74, 1LL, v75);
    sub_1000E91F4(v67, v64, &qword_10032A3D0);
    sub_100085298(v69, &qword_10032A3D0);
    goto LABEL_14;
  }

  sub_1000E9220(v66 + v53[10], v176, &qword_10032A3D0);
  sub_100085BC4(v66, type metadata accessor for ClientOverride);
  uint64_t v71 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 32LL))(v64, v69, v71);
  sub_10007D0AC(v64, 0LL, 1LL, v71);
LABEL_14:
  sub_1000E91F4(v64, (uint64_t)v43 + OBJC_IVAR____TtC9storekitd6Client_deviceVendorID, &qword_10032A3D0);
  unsigned __int8 v76 = objc_msgSend(v47, "sk_isAlmond");
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_isAlmond) = v76;
  id v77 = v47;
  char v78 = sub_1000D1318();

  uint64_t v79 = OBJC_IVAR____TtC9storekitd6Client_isAppStoreSigned;
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_isAppStoreSigned) = v78 & 1;
  unsigned __int8 v80 = [v77 isBeta];
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_isBeta) = v80;
  id v81 = [v77 iTunesMetadata];
  id v82 = [v81 distributorInfo];

  LOBYTE(v81) = [v82 distributorIsThirdParty];
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_isThirdPartyDistributed) = (_BYTE)v81;
  id v83 = [v77 localizedName];
  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
  uint64_t v86 = v85;

  uint64_t v87 = (void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_localizedName);
  *uint64_t v87 = v84;
  v87[1] = v86;
  unsigned __int8 v88 = [v77 applicationHasMIDBasedSINF];
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_hasMIDBasedSINF) = v88;
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_iOSTargetPlatform) = 2;
  id v89 = v77;
  sub_1000E90AC(v89, (SEL *)&selRef_signerOrganization);
  uint64_t v90 = (void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_signerOrganization);
  *uint64_t v90 = v91;
  v90[1] = v92;
  sub_1000E90AC([v89 iTunesMetadata], (SEL *)&selRef_artistName);
  char v93 = (void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_vendorName);
  void *v93 = v94;
  v93[1] = v95;
  uint64_t v96 = v178;
  sub_1000E9220(v184, v178, &qword_10032A3D8);
  uint64_t v97 = v96 + v53[9];
  uint64_t v98 = *(void *)v97;
  char v99 = *(_BYTE *)(v97 + 8);
  sub_100085BC4(v96, type metadata accessor for ClientOverride);
  if ((v99 & 1) != 0) {
    goto LABEL_17;
  }
  uint64_t v96 = v168;
  sub_1000E9220(v184, v168, &qword_10032A3D8);
  if (sub_10007D824(v96, 1LL, (uint64_t)v53) == 1)
  {
LABEL_15:
    sub_100085298(v96, &qword_10032A3D8);
  }

  else
  {
    uint64_t v120 = v96 + v53[8];
    id v107 = *(id *)v120;
    char v121 = *(_BYTE *)(v120 + 8);
    sub_100085BC4(v96, type metadata accessor for ClientOverride);
    if ((v121 & 1) == 0)
    {
      *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_storeItemID) = v98;
      goto LABEL_28;
    }
  }

id sub_1000E6458(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithContentsOfFile:v5];

  return v6;
}

void sub_1000E65F0()
{
}

uint64_t sub_1000E66E0()
{
  return type metadata accessor for Client(0LL);
}

uint64_t type metadata accessor for Client(uint64_t a1)
{
  return sub_1000D0BD8(a1, (uint64_t *)&unk_10032B488, (uint64_t)&nominal type descriptor for Client);
}

void sub_1000E66FC(uint64_t a1)
{
  v8[0] = "!";
  v8[1] = &unk_10027C220;
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000E6810(319LL, &qword_10032B498, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v8[3] = *(void *)(v4 - 8) + 64LL;
      v8[4] = &unk_10027C238;
      v8[5] = &unk_10027C238;
      v8[6] = &unk_10027C238;
      v8[7] = &unk_10027C238;
      v8[8] = &unk_10027C238;
      v8[9] = &unk_10027C238;
      v8[10] = &unk_10027C220;
      v8[11] = &unk_10027C238;
      v8[12] = &unk_10027C250;
      v8[13] = &unk_10027C220;
      v8[14] = &unk_10027C220;
      sub_1000E6810(319LL, &qword_10032B4A0, type metadata accessor for Client.Server);
      if (v7 <= 0x3F)
      {
        v8[15] = *(void *)(v6 - 8) + 64LL;
        v8[16] = &unk_10027C268;
        v8[17] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[18] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[19] = &unk_10027C268;
        swift_updateClassMetadata2(a1, 256LL, 20LL, v8, a1 + 80);
      }
    }
  }

void sub_1000E6810(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

  sub_1000221B0();
}

uint64_t type metadata accessor for Client.Server(uint64_t a1)
{
  return sub_1000D0BD8(a1, (uint64_t *)&unk_10032B518, (uint64_t)&nominal type descriptor for Client.Server);
}

uint64_t sub_1000E686C()
{
  uint64_t v0 = sub_10007B1FC(&qword_10032B588);
  uint64_t result = swift_allocObject(v0, 20LL, 7LL);
  *(_DWORD *)(result + 16) = 0;
  qword_10032B438 = result;
  return result;
}

void sub_1000E68A0()
{
  qword_10032B440 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t sub_1000E68B4@<X0>(void *a1@<X8>)
{
  if (qword_100328B18 != -1) {
    swift_once(&qword_100328B18, sub_1000E68A0);
  }
  swift_beginAccess(&qword_10032B440, v4, 0LL, 0LL);
  uint64_t v2 = qword_10032B440;
  *a1 = qword_10032B440;
  return swift_bridgeObjectRetain(v2);
}

void sub_1000E6938(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v56 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v56);
  uint64_t v59 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10007B1FC(&qword_10032B560);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v58 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v52 - v12;
  uint64_t v14 = sub_10007B1FC(&qword_10032B568);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v61 = v17;
  uint64_t v62 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for ClientOverride(0LL);
  __chkstk_darwin(v21);
  uint64_t v60 = (uint64_t)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = a3;
  sub_10007D0AC(a3, 1LL, 1LL, v21);
  if (qword_100328B18 != -1) {
    swift_once(&qword_100328B18, sub_1000E68A0);
  }
  swift_beginAccess(&qword_10032B440, &v63, 32LL, 0LL);
  uint64_t v23 = qword_10032B440;
  swift_bridgeObjectRetain(a2);
  sub_10012A7F4(a1, a2, v23, (uint64_t)v13);
  swift_endAccess(&v63);
  swift_bridgeObjectRelease(a2);
  uint64_t v24 = sub_10007B1FC(&qword_10032BD40);
  if (sub_10007D824((uint64_t)v13, 1LL, v24) == 1)
  {
    sub_100085298((uint64_t)v13, &qword_10032B560);
  }

  else
  {
    uint64_t v53 = (void *)a2;
    uint64_t v54 = a1;
    uint64_t v55 = v4;
    uint64_t v25 = &v13[*(int *)(v24 + 48)];
    uint64_t v26 = &v16[*(int *)(v14 + 48)];
    sub_1000E9158((uint64_t)v13, (uint64_t)v16, type metadata accessor for ClientOverride);
    uint64_t v27 = (uint64_t)v20;
    uint64_t v28 = v62;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    uint64_t v30 = v25;
    uint64_t v31 = v61;
    v29(v26, v30, v61);
    uint64_t v32 = &v16[*(int *)(v14 + 48)];
    uint64_t v33 = (uint64_t)v16;
    uint64_t v34 = v60;
    sub_1000E9158(v33, v60, type metadata accessor for ClientOverride);
    uint64_t v35 = ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v27, v32, v31);
    if (Date.timeIntervalSinceNow.getter(v35) <= 0.0)
    {
      uint64_t v57 = v27;
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v37 = sub_100079604(v56, (uint64_t)qword_10033E1A8);
      sub_1000E8F9C(v37, v59, type metadata accessor for SKLogger);
      uint64_t v63 = 0LL;
      unint64_t v64 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(38LL);
      swift_bridgeObjectRelease(v64);
      uint64_t v63 = 0xD000000000000028LL;
      unint64_t v64 = 0x80000001002A1790LL;
      uint64_t v39 = (uint64_t)v53;
      v38._uint64_t countAndFlagsBits = v54;
      v38._object = v53;
      String.append(_:)(v38);
      uint64_t v41 = v63;
      unint64_t v40 = v64;
      os_log_type_t v43 = static os_log_type_t.default.getter(v42);
      uint64_t v44 = swift_bridgeObjectRetain_n(v40, 2LL);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = v43;
      if (os_log_type_enabled(v45, v43))
      {
        uint64_t v47 = swift_slowAlloc(22LL, -1LL);
        uint64_t v48 = swift_slowAlloc(64LL, -1LL);
        uint64_t v63 = v48;
        *(_DWORD *)uint64_t v47 = 136446466;
        uint64_t v65 = sub_10007A488(0LL, 0xE000000000000000LL, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v47 + 4);
        *(_WORD *)(v47 + 12) = 2082;
        swift_bridgeObjectRetain(v40);
        uint64_t v65 = sub_10007A488(v41, v40, &v63);
        uint64_t v39 = (uint64_t)v53;
        uint64_t v31 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v47 + 14);
        swift_bridgeObjectRelease_n(v40, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "%{public}s%{public}s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy(v48, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v49 = v48;
        uint64_t v34 = v60;
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_bridgeObjectRelease(v40);
      }

      else
      {

        swift_bridgeObjectRelease_n(v40, 3LL);
      }

      uint64_t v50 = v62;
      sub_100085BC4(v59, type metadata accessor for SKLogger);
      swift_beginAccess(&qword_10032B440, &v63, 33LL, 0LL);
      uint64_t v51 = v58;
      sub_100132E38(v54, v39, v58);
      swift_endAccess(&v63);
      sub_100085298(v51, &qword_10032B560);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v57, v31);
      sub_100085BC4(v34, type metadata accessor for ClientOverride);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v31);
      uint64_t v36 = v57;
      sub_100085298(v57, &qword_10032A3D8);
      sub_1000E9158(v34, v36, type metadata accessor for ClientOverride);
      sub_10007D0AC(v36, 0LL, 1LL, v21);
    }
  }

void sub_1000E6EF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_100328B10 != -1) {
    swift_once(&qword_100328B10, sub_1000E686C);
  }
  uint64_t v8 = (os_unfair_lock_s *)(qword_10032B438 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_10032B438 + 16));
  sub_1000E6F80(a1, a2, a3, a4);
  sub_1000E9404(v8);
}

uint64_t sub_1000E6F80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v9 = sub_10007B1FC(&qword_10032B560);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v15 = sub_100079604(v12, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v15, (uint64_t)v14, type metadata accessor for SKLogger);
  uint64_t v45 = 0LL;
  unint64_t v46 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  swift_bridgeObjectRelease(v46);
  uint64_t v45 = 0xD00000000000001ALL;
  unint64_t v46 = 0x80000001002A1940LL;
  uint64_t v44 = a1;
  v16._uint64_t countAndFlagsBits = ClientOverride.description.getter();
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._uint64_t countAndFlagsBits = 0x20726F6620LL;
  v18._object = (void *)0xE500000000000000LL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = a2;
  v19._object = a3;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = 0x206C69746E7520LL;
  v20._object = (void *)0xE700000000000000LL;
  String.append(_:)(v20);
  uint64_t v21 = type metadata accessor for Date(0LL);
  sub_10007ACCC( &qword_10032B580,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v42 = v21;
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
  uint64_t v24 = v23._object;
  String.append(_:)(v23);
  uint64_t v25 = swift_bridgeObjectRelease(v24);
  unint64_t v26 = v46;
  uint64_t v41 = v45;
  os_log_type_t v27 = static os_log_type_t.default.getter(v25);
  uint64_t v28 = swift_bridgeObjectRetain_n(v26, 2LL);
  os_log_type_t v43 = v14;
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = v27;
  if (os_log_type_enabled(v29, v27))
  {
    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = v4;
    uint64_t v32 = v31;
    uint64_t v33 = swift_slowAlloc(64LL, -1LL);
    uint64_t v45 = v33;
    *(_DWORD *)uint64_t v32 = 136446466;
    uint64_t v39 = a2;
    uint64_t v47 = sub_10007A488(0LL, 0xE000000000000000LL, &v45);
    uint64_t v38 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 4);
    *(_WORD *)(v32 + 12) = 2082;
    swift_bridgeObjectRetain(v26);
    uint64_t v47 = sub_10007A488(v41, v26, &v45);
    a4 = v38;
    a2 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v32 + 14);
    swift_bridgeObjectRelease_n(v26, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_bridgeObjectRelease(v26);
  }

  else
  {

    swift_bridgeObjectRelease_n(v26, 3LL);
  }

  sub_100085BC4((uint64_t)v43, type metadata accessor for SKLogger);
  uint64_t v34 = v44;
  if (qword_100328B18 != -1) {
    swift_once(&qword_100328B18, sub_1000E68A0);
  }
  uint64_t v35 = sub_10007B1FC(&qword_10032BD40);
  uint64_t v36 = &v11[*(int *)(v35 + 48)];
  sub_1000E8F9C(v34, (uint64_t)v11, type metadata accessor for ClientOverride);
  (*(void (**)(char *, uint64_t))(*(void *)(v42 - 8) + 16LL))(v36, a4);
  sub_10007D0AC((uint64_t)v11, 0LL, 1LL, v35);
  swift_beginAccess(&qword_10032B440, &v45, 33LL, 0LL);
  swift_bridgeObjectRetain(a3);
  sub_10012ABA4((uint64_t)v11, a2, (uint64_t)a3);
  return swift_endAccess(&v45);
}

void sub_1000E73CC(uint64_t a1, void *a2)
{
  if (qword_100328B10 != -1) {
    swift_once(&qword_100328B10, sub_1000E686C);
  }
  uint64_t v4 = (os_unfair_lock_s *)(qword_10032B438 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_10032B438 + 16));
  sub_1000E7450(a1, a2);
  os_unfair_lock_unlock(v4);
}

void sub_1000E7450(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_10007B1FC(&qword_10032B560);
  __chkstk_darwin(v5);
  uint64_t v27 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v10 = sub_100079604(v7, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v10, (uint64_t)v9, type metadata accessor for SKLogger);
  uint64_t v28 = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease(v29);
  uint64_t v28 = 0xD000000000000026LL;
  unint64_t v29 = 0x80000001002A1960LL;
  v11._uint64_t countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  uint64_t v12 = v28;
  unint64_t v13 = v29;
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  uint64_t v16 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v15))
  {
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v25 = a1;
    uint64_t v19 = v18;
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    uint64_t v28 = v24;
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v26 = v2;
    uint64_t v30 = sub_10007A488(0LL, 0xE000000000000000LL, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v19 + 4);
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain(v13);
    uint64_t v30 = sub_10007A488(v12, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v19 + 14);
    swift_bridgeObjectRelease_n(v13, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v17, v15, "%{public}s%{public}s", (uint8_t *)v19, 0x16u);
    uint64_t v20 = v24;
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    uint64_t v21 = v19;
    a1 = v25;
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_bridgeObjectRelease(v13);
  }

  else
  {

    swift_bridgeObjectRelease_n(v13, 3LL);
  }

  sub_100085BC4((uint64_t)v9, type metadata accessor for SKLogger);
  if (qword_100328B18 != -1) {
    swift_once(&qword_100328B18, sub_1000E68A0);
  }
  swift_beginAccess(&qword_10032B440, &v28, 33LL, 0LL);
  uint64_t v22 = v27;
  sub_100132E38(a1, (uint64_t)a2, v27);
  swift_endAccess(&v28);
  sub_100085298(v22, &qword_10032B560);
}

uint64_t sub_1000E779C(unsigned __int8 a1)
{
  if ((a1 & 0xFC) != 0) {
    unsigned __int8 v1 = 0;
  }
  else {
    unsigned __int8 v1 = a1;
  }
  int v3 = (a1 & 0xF) == 0 || a1 > 3u;
  return v1 | (v3 << 8);
}

void sub_1000E77C8()
{
}

void sub_1000E77D0(int a1)
{
}

void sub_1000E77D8(uint64_t a1)
{
}

uint64_t sub_1000E77E0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000E779C(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

void sub_1000E7810(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

void type metadata accessor for Client.iOSTargetPlatform()
{
}

void type metadata accessor for Client.objc_ClientType()
{
}

uint64_t *sub_1000E78BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = sub_10007B1FC(&qword_10032A028);
    if (sub_10007D824((uint64_t)a2, 2LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      sub_10007D0AC((uint64_t)a1, 0LL, 2LL, v7);
    }
  }

  return a1;
}

uint64_t sub_1000E7980(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032A028);
  uint64_t result = sub_10007D824(a1, 2LL, v2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *sub_1000E79E0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032A028);
  if (sub_10007D824((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    sub_10007D0AC((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_1000E7A80(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032A028);
  int v7 = sub_10007D824((uint64_t)a1, 2LL, v6);
  int v8 = sub_10007D824((uint64_t)a2, 2LL, v6);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 24LL))(a1, a2, v11);
      return a1;
    }

    sub_100085298((uint64_t)a1, &qword_10032A028);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
  sub_10007D0AC((uint64_t)a1, 0LL, 2LL, v6);
  return a1;
}

void *sub_1000E7B78(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032A028);
  if (sub_10007D824((uint64_t)a2, 2LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    sub_10007D0AC((uint64_t)a1, 0LL, 2LL, v6);
  }

  return a1;
}

void *sub_1000E7C18(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032A028);
  int v7 = sub_10007D824((uint64_t)a1, 2LL, v6);
  int v8 = sub_10007D824((uint64_t)a2, 2LL, v6);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 40LL))(a1, a2, v11);
      return a1;
    }

    sub_100085298((uint64_t)a1, &qword_10032A028);
    goto LABEL_6;
  }

  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, a2, v9);
  sub_10007D0AC((uint64_t)a1, 0LL, 2LL, v6);
  return a1;
}

uint64_t sub_1000E7D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E7D1C);
}

void sub_1000E7D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032A028);
  sub_10007D824(a1, a2, v4);
  sub_1000221B0();
}

uint64_t sub_1000E7D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E7D6C);
}

uint64_t sub_1000E7D6C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_10007B1FC(&qword_10032A028);
  return sub_10007D0AC(a1, v5, a3, v6);
}

uint64_t sub_1000E7DBC(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032A028);
  return sub_10007D824(a1, 2LL, v2);
}

uint64_t sub_1000E7DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032A028);
  return sub_10007D0AC(a1, a2, 2LL, v4);
}

uint64_t sub_1000E7E2C(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 2LL);
    return 0LL;
  }

  return result;
}

unint64_t sub_1000E7E84()
{
  unint64_t result = qword_10032B528;
  if (!qword_10032B528)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C360, &unk_1002EDCA8);
    atomic_store(result, (unint64_t *)&qword_10032B528);
  }

  return result;
}

unint64_t sub_1000E7EC4()
{
  unint64_t result = qword_10032B530;
  if (!qword_10032B530)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C3C8, &unk_1002EDC88);
    atomic_store(result, (unint64_t *)&qword_10032B530);
  }

  return result;
}

uint64_t sub_1000E7F00()
{
  uint64_t v2 = sub_100086318();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1000E9510();
  sub_100085E74();
  __chkstk_darwin(v4);
  sub_1000E96C0();
  __chkstk_darwin(v5);
  int v7 = (char *)v15 - v6;
  sub_1000E992C();
  sub_1000E9934((uint64_t)v7, v1);
  uint64_t v8 = sub_10007B1FC(&qword_10032A028);
  if (!sub_1000E93C8(v1, v9, v8))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v1, v2);
    sub_1000E9708();
    v15[0] = v10;
    v15[1] = v11;
    sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v13._uint64_t countAndFlagsBits = sub_1000E977C(v12);
    String.append(_:)(v13);
    sub_100085FB4();
    sub_1000E9478();
    sub_1000E98EC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }

  sub_100085BC4((uint64_t)v7, type metadata accessor for Client.Server);
  return sub_1000E98C8();
}

void sub_1000E8068()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032A028);
  uint64_t v2 = sub_10009C250(v1);
  if ((_DWORD)v2)
  {
    sub_1000E961C(v2, type metadata accessor for Client.Server);
  }

  else
  {
    uint64_t v3 = sub_100086318();
    sub_10008614C(v3);
  }

  sub_1000221B0();
}

id sub_1000E80D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  int v7 = v6;
  id v24 = 0LL;
  id v8 = [v3 initWithURL:v6 allowPlaceholder:a2 & 1 error:&v24];

  id v9 = v24;
  if (v8)
  {
    uint64_t v10 = sub_100086318();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL);
    id v12 = v9;
    v11(a1, v10);
  }

  else
  {
    id v13 = v24;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v14, v15, v16, v17, v18, v19, v20);
    sub_100086318();
    uint64_t v21 = sub_1000E98B4();
    v22(v21);
  }

  return v8;
}

id sub_1000E81D0(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v19 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v19];

  id v8 = v19;
  if (v7)
  {
    id v9 = v19;
  }

  else
  {
    id v10 = v19;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11, v12, v13, v14, v15, v16, v17);
  }

  return v7;
}

id sub_1000E82A8(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v21 = 0LL;
  id v6 = [v2 initWithURL:v4 error:&v21];

  id v7 = v21;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    id v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    id v10 = v7;
    v9(a1, v8);
  }

  else
  {
    id v11 = v21;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12, v13, v14, v15, v16, v17, v18);
    uint64_t v19 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL))(a1, v19);
  }

  return v6;
}

void sub_1000E83B0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    uint64_t v4 = sub_10007B1FC(&qword_100328EC0);
    uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
    size_t v6 = j__malloc_size(v5);
    v5[2] = a1;
    v5[3] = 2 * v6 - 64;
  }

  sub_1000221B0();
}

void *sub_1000E8410(uint64_t a1, void *(*a2)(uint64_t *__return_ptr))
{
  unint64_t result = a2(&v4);
  if (!v2) {
    return (void *)v4;
  }
  return result;
}

uint64_t sub_1000E8440(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _typeName(_:qualified:)(v1, 0LL);
}

unsigned __int8 *sub_1000E8464(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1000E8564(a1, a2);
}

uint64_t sub_1000E8478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8484(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1000E8564);
}

uint64_t sub_1000E8484( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v7 = String.init<A>(_:)( &v19,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v19 = v7;
    uint64_t v20 = v8 & 0xFFFFFFFFFFFFFFLL;
    id v9 = &v19;
    goto LABEL_7;
  }

  uint64_t v11 = sub_1000E957C();
  uint64_t v7 = sub_1000E8A2C(v11, v12);
  unint64_t v14 = v13;
  sub_100086004();
  unint64_t v8 = v14;
  if ((v14 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    id v9 = (uint64_t *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v17 = sub_1000E957C();
    id v9 = (uint64_t *)_StringObject.sharedUTF8.getter(v17, v18);
  }

unsigned __int8 *sub_1000E8564(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000E9420();
        if (v20 ^ v21 | v19) {
          unsigned __int8 v25 = v28;
        }
        if (v20 ^ v21 | v19) {
          unsigned __int8 v26 = 65;
        }
        if (!(v20 ^ v21 | v19)) {
          unsigned __int8 v27 = 58;
        }
        if (v22)
        {
          uint64_t v13 = 0LL;
          unint64_t v29 = (unsigned __int8 *)(v22 + 1);
          do
          {
            unsigned int v30 = *v29;
            if (v30 < 0x30 || v30 >= v27)
            {
              if (v30 < 0x41 || v30 >= v26)
              {
                uint64_t v17 = 0LL;
                if (v30 < 0x61 || v30 >= v25) {
                  return (unsigned __int8 *)v17;
                }
                char v31 = -87;
              }

              else
              {
                char v31 = -55;
              }
            }

            else
            {
              char v31 = -48;
            }

            uint64_t v32 = v13 * v23;
            uint64_t v13 = v32 + (v30 + v31);
            ++v29;
            --v24;
          }

          while (v24);
          return (unsigned __int8 *)v13;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_1000E9420();
        if (v34 ^ v35 | v33) {
          unsigned __int8 v39 = v42;
        }
        if (v34 ^ v35 | v33) {
          unsigned __int8 v40 = 65;
        }
        if (!(v34 ^ v35 | v33)) {
          unsigned __int8 v41 = 58;
        }
        if (v36)
        {
          uint64_t v43 = 0LL;
          do
          {
            unsigned int v44 = *v36;
            if (v44 < 0x30 || v44 >= v41)
            {
              if (v44 < 0x41 || v44 >= v40)
              {
                uint64_t v17 = 0LL;
                if (v44 < 0x61 || v44 >= v39) {
                  return (unsigned __int8 *)v17;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            uint64_t v46 = v43 * v37;
            uint64_t v43 = v46 + (v44 + v45);
            ++v36;
            --v38;
          }

          while (v38);
          return (unsigned __int8 *)(v46 + (v44 + v45));
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000E9420();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          uint64_t v13 = 0LL;
          for (uint64_t i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0LL;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }

              else
              {
                char v16 = -55;
              }
            }

            else
            {
              char v16 = -48;
            }

            uint64_t v18 = v13 * v7;
            uint64_t v13 = v18 - (v15 + v16);
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unsigned __int8 *sub_1000E87C8(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000E9420();
        if (v22 ^ v23 | v21) {
          unsigned __int8 v27 = v30;
        }
        if (v22 ^ v23 | v21) {
          unsigned __int8 v28 = 65;
        }
        if (!(v22 ^ v23 | v21)) {
          unsigned __int8 v29 = 58;
        }
        if (v24)
        {
          unint64_t v13 = 0LL;
          char v31 = (unsigned __int8 *)(v24 + 1);
          do
          {
            unsigned int v32 = *v31;
            if (v32 < 0x30 || v32 >= v29)
            {
              if (v32 < 0x41 || v32 >= v28)
              {
                uint64_t v17 = 0LL;
                if (v32 < 0x61 || v32 >= v27) {
                  return (unsigned __int8 *)v17;
                }
                char v33 = -87;
              }

              else
              {
                char v33 = -55;
              }
            }

            else
            {
              char v33 = -48;
            }

            if (!is_mul_ok(v13, v25)) {
              return 0LL;
            }
            unint64_t v34 = v13 * v25;
            unsigned __int8 v35 = v32 + v33;
            BOOL v20 = __CFADD__(v34, v35);
            unint64_t v13 = v34 + v35;
            if (v20) {
              return 0LL;
            }
            ++v31;
            --v26;
          }

          while (v26);
          return (unsigned __int8 *)v13;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_1000E9420();
        if (v37 ^ v38 | v36) {
          unsigned __int8 v42 = v45;
        }
        if (v37 ^ v38 | v36) {
          unsigned __int8 v43 = 65;
        }
        if (!(v37 ^ v38 | v36)) {
          unsigned __int8 v44 = 58;
        }
        if (v39)
        {
          unint64_t v46 = 0LL;
          do
          {
            unsigned int v47 = *v39;
            if (v47 < 0x30 || v47 >= v44)
            {
              if (v47 < 0x41 || v47 >= v43)
              {
                uint64_t v17 = 0LL;
                if (v47 < 0x61 || v47 >= v42) {
                  return (unsigned __int8 *)v17;
                }
                char v48 = -87;
              }

              else
              {
                char v48 = -55;
              }
            }

            else
            {
              char v48 = -48;
            }

            if (!is_mul_ok(v46, v40)) {
              return 0LL;
            }
            unint64_t v49 = v46 * v40;
            unsigned __int8 v50 = v47 + v48;
            BOOL v20 = __CFADD__(v49, v50);
            unint64_t v46 = v49 + v50;
            if (v20) {
              return 0LL;
            }
            ++v39;
            --v41;
          }

          while (v41);
          return (unsigned __int8 *)v46;
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000E9420();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          unint64_t v13 = 0LL;
          for (uint64_t i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0LL;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }

              else
              {
                char v16 = -55;
              }
            }

            else
            {
              char v16 = -48;
            }

            if (!is_mul_ok(v13, v7)) {
              return 0LL;
            }
            unint64_t v18 = v13 * v7;
            unsigned __int8 v19 = v15 + v16;
            BOOL v20 = v18 >= v19;
            unint64_t v13 = v18 - v19;
            if (!v20) {
              return 0LL;
            }
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000E8A2C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_1000E8A88((uint64_t)sub_1000E8A84, 0LL, a1, a2);
  unint64_t v4 = v3;
  uint64_t v7 = sub_1000E8ABC(v2, v5, v6, v3);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t sub_1000E8A88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3;
  }
  uint64_t v5 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return String.subscript.getter(15LL, v5 | (v4 << 16));
}

uint64_t sub_1000E8ABC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_1000E8C00(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      sub_1000E83B0(v12, 0LL);
      unint64_t v8 = (unint64_t)v13;
      unint64_t v5 = sub_1000E8CEC((unint64_t)v16, (uint64_t)(v13 + 4), v9, a1, a2, v5, a4);
      uint64_t v14 = v16[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v14);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v15 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v15;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_1000E8C00( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    unint64_t result = sub_10009CFDC(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    unint64_t result = sub_10009CFDC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_1000E8CEC( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      unint64_t result = sub_10009CFDC(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
      }

      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
      }
    }

    if ((v12 & 0xC) == v15)
    {
      unint64_t result = sub_10009CFDC(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_31;
      }
    }

    else if ((a7 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_27;
    }

    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_1000E8EEC(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10007F054(a1, a2);
  [a3 setAuditTokenData:isa];
}

void sub_1000E8F4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setBundleIdentifier:v4];
}

void sub_1000E8F90(void *a1)
{
}

void sub_1000E8F9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1000861D4(a1, a2, a3);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1000221B0();
}

void sub_1000E8FC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "set_sourceApplicationBundleIdentifier:", v4);
}

id sub_1000E900C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [a3 effectiveBoolValueForSetting:v5];

  return v6;
}

void sub_1000E9064(void *a1)
{
}

unint64_t sub_1000E9070()
{
  unint64_t result = qword_10032B558;
  if (!qword_10032B558)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C464, &unk_1002EDD58);
    atomic_store(result, (unint64_t *)&qword_10032B558);
  }

  return result;
}

void sub_1000E90AC(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }

  sub_1000C6708();
  sub_1000AB000();
}

void sub_1000E9108(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    id v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  sub_10009C714();
  sub_1000AB000();
}

void sub_1000E9158(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1000861D4(a1, a2, a3);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_1000221B0();
}

void sub_1000E9184(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }

  sub_1000221B0();
}

unint64_t sub_1000E91B8()
{
  unint64_t result = qword_10032B590;
  if (!qword_10032B590)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10032B590);
  }

  return result;
}

void sub_1000E91F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1000E976C(a1, a2, a3);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_1000221B0();
}

void sub_1000E9220(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1000E976C(a1, a2, a3);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1000221B0();
}

uint64_t sub_1000E924C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000E9298 + 4 * byte_10027C1D5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E92CC + 4 * byte_10027C1D0[v4]))();
}

uint64_t sub_1000E92CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E92D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E92DCLL);
  }
  return result;
}

uint64_t sub_1000E92E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E92F0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000E92F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E92FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Client.ClientError()
{
}

unint64_t sub_1000E9318()
{
  unint64_t result = qword_10032B598;
  if (!qword_10032B598)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C43C, &unk_1002EDD58);
    atomic_store(result, (unint64_t *)&qword_10032B598);
  }

  return result;
}

  ;
}

void sub_1000E9374()
{
}

void sub_1000E9390()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_1000E93A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 128, v5 - 112, v4 + 8, a4, 6LL);
}

uint64_t sub_1000E93B4()
{
  return swift_errorRelease(v0);
}

void sub_1000E93BC(uint64_t a1)
{
}

uint64_t sub_1000E93C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007D824(a1, 2LL, a3);
}

uint64_t sub_1000E93D0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 72, v1, v0);
}

uint64_t sub_1000E93E0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v1, v0);
}

uint64_t sub_1000E93F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 - 184))(a1, *(void *)(v1 - 120));
}

uint64_t sub_1000E93FC()
{
  return swift_errorRetain(v0);
}

void sub_1000E9404(os_unfair_lock_t lock)
{
}

uint64_t sub_1000E9418(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

uint64_t sub_1000E9438@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return type metadata accessor for SKLogger(0LL);
}

void sub_1000E9458(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
}

void sub_1000E9478()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

void sub_1000E9484()
{
}

void sub_1000E9494(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_1000E94A0@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_1000E94AC()
{
  return sub_10007D824(v0, 2LL, v1);
}

uint64_t sub_1000E94BC()
{
  return sub_10007A488(*(void *)(v1 - 240), v0, (uint64_t *)(v1 - 104));
}

uint64_t sub_1000E94CC()
{
  return sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)(v0 - 88));
}

uint64_t sub_1000E94DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 - 168))(a1, v1, *(void *)(v2 - 120));
}

uint64_t sub_1000E94EC()
{
  return sub_10007F054(v1, v0);
}

void sub_1000E94F8(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1000E9504(uint64_t a1, unint64_t a2)
{
  return sub_10007A488(a1, a2, (uint64_t *)(v2 - 144));
}

uint64_t sub_1000E9510()
{
  return type metadata accessor for Client.Server(0LL);
}

uint64_t sub_1000E952C()
{
  return swift_getErrorValue(v0, v1 - 160, v1 - 184);
}

uint64_t sub_1000E953C()
{
  return type metadata accessor for ClientOverride(0LL);
}

uint64_t sub_1000E9544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000E9554(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

void sub_1000E955C()
{
  *(void *)(v0 - 128) = 0x5D746E65696C435BLL;
  *(void *)(v0 - 120) = 0xEA00000000002820LL;
}

uint64_t sub_1000E957C()
{
  return v0;
}

uint64_t sub_1000E9588(uint64_t a1)
{
  *(void *)(v3 - 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 72, v1, v2);
}

uint64_t sub_1000E95A0()
{
  return sub_10007A488(0x746E65696C43LL, 0xE600000000000000LL, (uint64_t *)(v0 - 104));
}

  ;
}

  ;
}

uint64_t sub_1000E95D8()
{
  return type metadata accessor for Client.Server(0LL);
}

uint64_t sub_1000E95E0(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v2, v1);
}

uint64_t sub_1000E95EC@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(v1 + a1);
}

id sub_1000E95F4(id a1)
{
  return a1;
}

uint64_t sub_1000E95FC()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000E9608()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1000E9614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007D0AC(a1, a2, 1LL, a4);
}

void sub_1000E961C(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000E9624()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 128) + 8LL))(v0, v1);
}

void sub_1000E9638(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_1000E9640(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000E9654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007D824(a1, a2, a3);
}

uint64_t sub_1000E9668(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

uint64_t sub_1000E967C(uint64_t a1, unint64_t a2)
{
  return sub_10007A488(a1, a2, (uint64_t *)(v2 - 104));
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000E96DC()
{
  return Error.localizedDescription.getter(*(void *)(v0 - 176), *(void *)(v0 - 168));
}

uint64_t sub_1000E96E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_deallocPartialClassInstance( v3,  a1,  *(unsigned int *)((v2 & a2) + 0x30),  *(unsigned __int16 *)((v2 & a2) + 0x34));
}

BOOL sub_1000E96FC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

  ;
}

uint64_t sub_1000E9724(uint64_t a1)
{
  *(void *)(v3 - 152) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 152, v2, v1);
}

uint64_t sub_1000E9738()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 152));
}

void sub_1000E9740()
{
}

uint64_t sub_1000E9750()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000E9760()
{
  return 0LL;
}

uint64_t sub_1000E976C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007B1FC(a3);
}

uint64_t sub_1000E977C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

void sub_1000E978C(void *a1)
{
}

BOOL sub_1000E979C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000E97AC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000E97B4()
{
  return sub_10007A488(v0, v1, (uint64_t *)(v2 - 104));
}

void sub_1000E97C4(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000E97CC(uint64_t a1, uint64_t a2)
{
  return sub_1000DF738(v3, v2);
}

  ;
}

void sub_1000E97FC(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_1000E9804()
{
  *(_WORD *)(v0 + 12) = 2082;
}

void sub_1000E9814()
{
  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_1000E9824()
{
  return v0;
}

uint64_t sub_1000E9830( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 184) = (char *)&a9 - v9;
  return 0LL;
}

  ;
}

  ;
}

uint64_t sub_1000E9878()
{
  return type metadata accessor for Logger(0LL);
}

double sub_1000E9880()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  return result;
}

void sub_1000E988C(uint64_t a1)
{
  unint64_t v1 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

id sub_1000E9894()
{
  return objc_allocWithZone(*(Class *)(v0 - 264));
}

uint64_t sub_1000E98A0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

id sub_1000E98A8(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000E98B4()
{
  return v0;
}

uint64_t sub_1000E98C8()
{
  return v0;
}

uint64_t sub_1000E98D4()
{
  return v2(v0, v1);
}

id sub_1000E98E0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000E98EC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1000E98F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000E9900@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_1000E990C(uint64_t result)
{
  *(void *)(v1 - 72) = result;
  return result;
}

uint64_t sub_1000E9918(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return v1 - 72;
}

void sub_1000E992C()
{
}

void sub_1000E9934(uint64_t a1, uint64_t a2)
{
}

void sub_1000E993C()
{
}

uint64_t sub_1000E9944(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_1000E994C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007D0AC(a1, a2, 2LL, a4);
}

uint64_t sub_1000E9954()
{
  return sub_10007F054(*(void *)(v1 - 208), v0);
}

uint64_t sub_1000E9960()
{
  return sub_1000881FC(v1, v0);
}

uint64_t sub_1000E996C(uint64_t a1, uint64_t a2)
{
  return sub_10009D034(a1, a2);
}

uint64_t sub_1000E9978(uint64_t a1, uint64_t a2)
{
  return sub_10007D0AC(a1, a2, 3LL, v2);
}

uint64_t sub_1000E9984()
{
  return v0;
}

void sub_1000E9998(uint64_t a1, unint64_t *a2, void *a3)
{
}

void sub_1000E99A0(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000E99A8(uint64_t a1, uint64_t a2)
{
  return sub_100079604(v2, a2);
}

uint64_t sub_1000E99B0()
{
  return v0;
}

BOOL sub_1000E99BC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000E99C4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x4F786F62646E6153LL;
  }
  else {
    return 0x6C616E7265747845LL;
  }
}

uint64_t sub_1000E9A14(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000E9A50 + 4 * byte_10027C4A4[a1]))( 0xD00000000000001ELL,  0x800000010029CD60LL);
}

uint64_t sub_1000E9A50()
{
  return v0 + 11;
}

unint64_t sub_1000E9AD8()
{
  return 0xD00000000000001ALL;
}

_UNKNOWN **sub_1000E9B24(char a1)
{
  return off_1002EDE88[a1];
}

unint64_t sub_1000E9B38(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002EA5A8, v2);
  sub_100085EF0();
  if (v3 >= 0xC) {
    return 12LL;
  }
  else {
    return v3;
  }
}

void sub_1000E9B7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1000E9B88()
{
}

uint64_t sub_1000E9B90(uint64_t a1)
{
  return sub_1000CCE70(a1, *v1);
}

void sub_1000E9B98(uint64_t a1)
{
}

unint64_t sub_1000E9BA0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000E9B38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E9BCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E9A14(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000E9C24()
{
  double v3 = sub_1000E9C8C(1u, (uint64_t)v6);
  if (v7)
  {
    uint64_t result = sub_10009369C( (uint64_t)&v5,  (uint64_t)v6,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
    if ((_DWORD)result) {
      return v5;
    }
  }

  else
  {
    sub_1000D4FF4(v0, (uint64_t *)&unk_100328ED0, v1, v2, v3);
    return 0LL;
  }

  return result;
}

double sub_1000E9C8C@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v7 = [v2 valueForEntitlement:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)((void *)a2);
    swift_unknownObjectRelease(v7);
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1000E9D48()
{
  if (v2)
  {
    sub_1000853B0(&v1, &v3);
  }

  else
  {
    sub_1000E9C8C(0, (uint64_t)&v3);
    sub_100087418((uint64_t)&v1, (uint64_t *)&unk_100328ED0);
  }

  if (v4)
  {
    uint64_t result = sub_10009369C( (uint64_t)&v1,  (uint64_t)&v3,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
    if ((_DWORD)result) {
      return v1;
    }
  }

  else
  {
    sub_100087418((uint64_t)&v3, (uint64_t *)&unk_100328ED0);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000E9E18()
{
  if (v4)
  {
    sub_1000853B0(&v3, &v5);
  }

  else
  {
    sub_1000E9C8C(3u, (uint64_t)&v1);
    if (v2)
    {
      sub_1000853B0(&v1, &v5);
    }

    else
    {
      sub_1000E9C8C(0, (uint64_t)&v5);
      sub_100087418((uint64_t)&v1, (uint64_t *)&unk_100328ED0);
    }

    sub_100087418((uint64_t)&v3, (uint64_t *)&unk_100328ED0);
  }

  if (v6)
  {
    uint64_t result = sub_10009369C( (uint64_t)&v3,  (uint64_t)&v5,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
    if ((_DWORD)result) {
      return v3;
    }
  }

  else
  {
    sub_100087418((uint64_t)&v5, (uint64_t *)&unk_100328ED0);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000E9EEC(char a1)
{
  double v5 = sub_1000E9C8C(9u, (uint64_t)v13);
  if (!v14)
  {
    sub_1000D4FF4(v2, (uint64_t *)&unk_100328ED0, v3, v4, v5);
    goto LABEL_11;
  }

  uint64_t v6 = sub_10007B1FC(&qword_10032A500);
  if ((sub_10009369C((uint64_t)&v12, (uint64_t)v13, (uint64_t)&type metadata for Any + 8, v6) & 1) == 0)
  {
LABEL_11:
    char v10 = 0;
    return v10 & 1;
  }

  id v7 = v12;
  if ((a1 & 1) != 0) {
    uint64_t v8 = 0x4F786F62646E6153LL;
  }
  else {
    uint64_t v8 = 0x6C616E7265747845LL;
  }
  if ((a1 & 1) != 0) {
    uint64_t v9 = 0xEF65646972726576LL;
  }
  else {
    uint64_t v9 = 0xEF79617765746147LL;
  }
  char v10 = sub_10012AC8C(v8, v9, v12);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000E9FE0(int a1)
{
  uint64_t v70 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v70);
  sub_1000D4F0C();
  uint64_t v4 = v2 - v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v64 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)&v64 - v9;
  int v71 = a1;
  uint64_t v11 = sub_1000E9B24(a1);
  id v72 = v11[2];
  if (v72)
  {
    uint64_t v65 = v10;
    uint64_t v66 = v4;
    uint64_t v13 = 0LL;
    uint64_t v69 = (void *)0x80000001002A1B20LL;
    *(void *)&__int128 v12 = 136446466LL;
    __int128 v68 = v12;
    uint64_t v67 = (char *)&type metadata for Any + 8;
    while (1)
    {
      unsigned __int8 v14 = *((_BYTE *)v11 + v13 + 32);
      sub_1000E9C8C(v14, (uint64_t)&v74);
      if (!v76) {
        break;
      }
      uint64_t v15 = sub_1000EB2A0();
      if ((v73 & 1) != 0)
      {
        sub_10009C494();
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        uint64_t v52 = sub_100079604(v70, (uint64_t)qword_10033E1A8);
        uint64_t v53 = (uint64_t)v65;
        sub_10007961C(v52, (uint64_t)v65);
        sub_1000EB1E0();
        sub_1000EB1A8();
        LODWORD(v73) = sub_10009C324(v54, "processIdentifier");
        v78._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        sub_1000EB294(v78);
        sub_100085EF0();
        v55._uint64_t countAndFlagsBits = 0x6C7469746E45205DLL;
        v55._object = (void *)0xEF20726F66206465LL;
        String.append(_:)(v55);
        LOBYTE(v73) = v71;
        sub_1000EB21C();
        v56._uint64_t countAndFlagsBits = 8250LL;
        v56._object = (void *)0xE200000000000000LL;
        String.append(_:)(v56);
        LOBYTE(v73) = v14;
        uint64_t v4 = v53;
        uint64_t v57 = sub_1000EB21C();
        static os_log_type_t.default.getter(v57);
        uint64_t v58 = sub_1000EB278();
        uint64_t v59 = (void *)Logger.logObject.getter(v58);
        if (os_log_type_enabled((os_log_t)v59, (os_log_type_t)&protocol witness table for DefaultStringInterpolation))
        {
          uint64_t v60 = (_DWORD *)sub_10007B9FC(22LL);
          uint64_t v61 = sub_10007B9FC(64LL);
          uint64_t v74 = v61;
          *uint64_t v60 = v68;
          uint64_t v73 = sub_1000EB1BC();
          sub_1000EB198();
          sub_1000EB1F4();
          uint64_t v73 = sub_1000EB248();
          sub_1000EB198();
          sub_1000B1FD4();
          sub_1000EB1CC((void *)&_mh_execute_header, v62, v63, "%{public}s%{public}s");
          sub_1000EB258((uint64_t)&type metadata for Any);
          sub_10007B974(v61);
          sub_10007B974((uint64_t)v60);
          sub_100085EF0();
        }

        else
        {

          sub_1000B1FD4();
        }

        uint64_t v50 = 1LL;
        goto LABEL_23;
      }

uint64_t sub_1000EA6D8()
{
  return sub_1000EA6E0(0xBu);
}

uint64_t sub_1000EA6E0(unsigned __int8 a1)
{
  double v4 = sub_1000E9C8C(a1, (uint64_t)v7);
  if (v8)
  {
    uint64_t result = sub_10009369C( (uint64_t)&v6,  (uint64_t)v7,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
    if ((_DWORD)result) {
      return v6;
    }
  }

  else
  {
    sub_1000D4FF4(v1, (uint64_t *)&unk_100328ED0, v2, v3, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000EA774()
{
  if ((sub_1000EA6E0(0xAu) & 1) != 0) {
    return 1LL;
  }
  uint64_t result = sub_10006B548();
  if ((_DWORD)result)
  {
    if (qword_100328AE0 != -1) {
      swift_once(&qword_100328AE0, sub_1000CF8CC);
    }
    return byte_10033E0A9;
  }

  return result;
}

void sub_1000EA7DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  __chkstk_darwin(v2);
  sub_1000D4F0C();
  uint64_t v5 = v3 - v4;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  __int128 v12 = (char *)&v55 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  Swift::String v56 = (char *)&v55 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_1000D4F0C();
  uint64_t v21 = (char *)(v19 - v20);
  uint64_t v23 = __chkstk_darwin(v22);
  Swift::String v25 = (char *)&v55 - v24;
  __chkstk_darwin(v23);
  uint64_t v58 = (char *)&v55 - v26;
  sub_1000EAFA0(v1, (SEL *)&selRef_sk_executablePath);
  if (!v27)
  {
    sub_1000EAFA0(v1, (SEL *)&selRef_sk_processName);
    return;
  }

  uint64_t v28 = v27;
  uint64_t v57 = v18;
  uint64_t v29 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  CFURLRef v30 = CFURLCreateWithFileSystemPath(0LL, v29, kCFURLPOSIXPathStyle, 0);

  if (!v30)
  {
    uint64_t v32 = sub_1000EB208();
    goto LABEL_11;
  }

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
  v31(v16, v25, v17);
  sub_1000EB230((uint64_t)v16);
  uint64_t v32 = sub_10007D824((uint64_t)v16, 1LL, v17);
  if ((_DWORD)v32 == 1)
  {
LABEL_11:
    sub_1000EB240(v32, (uint64_t *)&unk_10032A1C0);
    id v42 = objc_msgSend(v1, "sk_processName");
    if (v42)
    {
      uint64_t v43 = v42;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    }

    return;
  }

  uint64_t v33 = v31;
  v31(v58, v16, v17);
  uint64_t v34 = (uint64_t)v56;
  sub_1000EB208();
  sub_1000B4064(v34, (uint64_t)v12);
  int v35 = sub_10007D824((uint64_t)v12, 1LL, v17);
  sub_100087418((uint64_t)v12, (uint64_t *)&unk_10032A1C0);
  if (v35 == 1)
  {
    URL._bridgeToObjectiveC()(v36);
    uint64_t v38 = v37;
    uint64_t v39 = (void *)_CFBundleCopyBundleURLForExecutableURL(v37);

    if (!v39)
    {
      __break(1u);
      return;
    }

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v39);

    sub_1000EB240(v40, (uint64_t *)&unk_10032A1C0);
    sub_1000EB230((uint64_t)v9);
    sub_10008521C((uint64_t)v9, v34);
  }

  sub_1000B4064(v34, v5);
  if (sub_10007D824(v5, 1LL, v17) == 1)
  {
    sub_100087418(v5, (uint64_t *)&unk_10032A1C0);
    uint64_t v41 = v57;
  }

  else
  {
    v33(v21, (char *)v5, v17);
    URL._bridgeToObjectiveC()(v44);
    unint64_t v46 = v45;
    uint64_t v47 = CFBundleCreate(0LL, v45);

    uint64_t v41 = v57;
    if (v47)
    {
      uint64_t v48 = (id)CFBundleGetIdentifier(v47);
      if (v48)
      {
        uint64_t v49 = (__CFString *)v48;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        sub_1000EB288();

        uint64_t v50 = *(uint64_t (**)(char *, uint64_t))(v41 + 8);
        uint64_t v51 = v50(v21, v17);
        sub_1000EB240(v51, (uint64_t *)&unk_10032A1C0);
        v50(v58, v17);
        return;
      }

      sub_1000EB268();
    }

    else
    {
      sub_1000EB268();
    }
  }

  id v52 = objc_msgSend(v1, "sk_processName");
  if (v52)
  {
    uint64_t v53 = v52;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    sub_1000EB288();
  }

  else
  {
  }

  sub_1000EB240(v54, (uint64_t *)&unk_10032A1C0);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v58, v17);
}

uint64_t sub_1000EAC1C()
{
  return sub_1000EAC40(4096LL, v0, (int (*)(uint64_t, uint64_t, uint64_t))&_proc_pidpath);
}

uint64_t sub_1000EAC40(uint64_t a1, id a2, int (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = sub_1000EAFFC((uint64_t)&v10);
  uint64_t v6 = sub_10007B9FC((int)a1);
  if ((a1 & 0x80000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
  }

  else
  {
    uint64_t v7 = v6;
    if (a3(v5, v6, a1) < 1) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = String.init(cString:)(v7);
    }
    sub_10007B974(v7);
    return v8;
  }

  return result;
}

id sub_1000EAD70(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    sub_100085EF0();
  }

  else
  {
    NSString v7 = 0LL;
  }

  return v7;
}

uint64_t sub_1000EADD4()
{
  return sub_1000EAC40(32LL, v0, (int (*)(uint64_t, uint64_t, uint64_t))&proc_name);
}

uint64_t sub_1000EAE50()
{
  return Data.init(bytes:count:)(&v2, 32LL);
}

uint64_t sub_1000EAF04()
{
  uint64_t v1 = sub_1000EAFA0(v0, (SEL *)&selRef_sk_clientID);
  if (v2)
  {
    if (v1 == 0xD000000000000023LL && v2 == 0x80000001002A1AA0LL) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, 0xD000000000000023LL, 0x80000001002A1AA0LL, 0LL);
    }
    sub_100085EF0();
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_1000EAF94(void *a1)
{
  return sub_1000EAFA0(a1, (SEL *)&selRef_sk_processName);
}

uint64_t sub_1000EAFA0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  char v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_1000EAFFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t _s11EntitlementOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 11) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }

uint64_t _s11EntitlementOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_1000EB0D8 + 4 * byte_10027C4B5[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1000EB10C + 4 * byte_10027C4B0[v4]))();
}

uint64_t sub_1000EB10C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EB114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000EB11CLL);
  }
  return result;
}

uint64_t sub_1000EB128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000EB130LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_1000EB134(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EB13C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11EntitlementOMa()
{
  return &_s11EntitlementON;
}

unint64_t sub_1000EB15C()
{
  unint64_t result = qword_10032B5A0;
  if (!qword_10032B5A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C548, &_s11EntitlementON);
    atomic_store(result, (unint64_t *)&qword_10032B5A0);
  }

  return result;
}

uint64_t sub_1000EB198()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v1, v0);
}

void sub_1000EB1A8()
{
  uint64_t v1 = *(void *)(v0 - 104);
  *(void *)(v0 - 112) = *(void *)(v0 - 112);
  *(void *)(v0 - 104) = v1;
  v2._uint64_t countAndFlagsBits = 91LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
}

uint64_t sub_1000EB1BC()
{
  return sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)(v0 - 112));
}

void sub_1000EB1CC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_1000EB1E0()
{
  *(void *)(v0 - 112) = 0LL;
  *(void *)(v0 - 104) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
}

uint64_t sub_1000EB1F4()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000EB208()
{
  return sub_10007D0AC(v1, 1LL, 1LL, v0);
}

uint64_t sub_1000EB21C()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 120, v0 - 112);
}

uint64_t sub_1000EB230(uint64_t a1)
{
  return sub_10007D0AC(a1, 0LL, 1LL, v1);
}

uint64_t sub_1000EB240(uint64_t a1, uint64_t *a2)
{
  return sub_100087418(v2, a2);
}

uint64_t sub_1000EB248()
{
  return sub_10007A488(v1, v0, (uint64_t *)(v2 - 112));
}

uint64_t sub_1000EB258@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 2LL, a1 + 8);
}

uint64_t sub_1000EB268()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_1000EB278()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void sub_1000EB288()
{
}

void sub_1000EB294(Swift::String a1)
{
}

uint64_t sub_1000EB2A0()
{
  return v0 - 120;
}

uint64_t sub_1000EB2AC()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

id sub_1000EB2B8(uint64_t a1)
{
  int v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC9storekitd30SQLiteSequentialValueTransform_components] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  sub_100085FEC();
  return objc_msgSendSuper2(&v5, "init");
}

void sub_1000EB36C()
{
}

uint64_t type metadata accessor for SQLiteSequentialValueTransform()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd30SQLiteSequentialValueTransform);
}

uint64_t sub_1000EB3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd30SQLiteSequentialValueTransform_components);
  if (!((unint64_t)v6 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a2);
    uint64_t result = sub_100085FEC();
    if (v7) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease(v6);
    return a1;
  }

  if (v6 < 0) {
    uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd30SQLiteSequentialValueTransform_components);
  }
  else {
    uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a2);
  sub_100085FEC();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v13);
  uint64_t v7 = result;
  if (!result) {
    goto LABEL_9;
  }
LABEL_3:
  if (v7 >= 1)
  {
    uint64_t v9 = 0LL;
    do
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        int v3 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v6);
      }
      else {
        sub_1000EB6E0(v6 + 8 * v9);
      }
      ++v9;
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      id v11 = [v3 transformSQLWithRoot:v10];

      a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v4 = v12;
      swift_unknownObjectRelease(v3);
    }

    while (v7 != v9);
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EB590(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd30SQLiteSequentialValueTransform_components);
  if (!((unint64_t)v6 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(*(void *)(v2
                                                + OBJC_IVAR____TtC9storekitd30SQLiteSequentialValueTransform_components));
    if (v7) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease(v6);
  }

  if (v6 < 0) {
    uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd30SQLiteSequentialValueTransform_components);
  }
  else {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v6);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v10);
  uint64_t v7 = result;
  if (!result) {
    return swift_bridgeObjectRelease(v6);
  }
LABEL_3:
  if (v7 >= 1)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001LL) != 0) {
        int v3 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      }
      else {
        sub_1000EB6E0(v6 + 8 * i);
      }
      [v3 applyTransformBinding:a1 atIndex:a2];
      swift_unknownObjectRelease(v3);
    }

    return swift_bridgeObjectRelease(v6);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EB6E0@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectRetain(*(void *)(a1 + 32));
}

Class sub_1000EB6EC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10007CB7C(0LL, (unint64_t *)&qword_10032B170, &OBJC_CLASS___NSObject_ptr);
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  return v5.super.isa;
}

uint64_t sub_1000EB770()
{
  return v0;
}

uint64_t sub_1000EB7B0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000EB7C8()
{
  return type metadata accessor for MessageActor(0LL);
}

uint64_t type metadata accessor for MessageActor(uint64_t a1)
{
  uint64_t result = qword_10032B620;
  if (!qword_10032B620) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessageActor);
  }
  return result;
}

uint64_t sub_1000EB808(uint64_t a1)
{
  v4[1] = &unk_10027C5F8;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_1000EB888(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for StoreKitMessageAnalyticsEvent(0LL);
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_100085FDC();
  uint64_t v10 = (void *)(v9 - v8);
  if (a3)
  {
    *uint64_t v10 = a2;
    id v11 = a3;
    sub_1000DE6D4();
    *(void *)((char *)v10 + *(int *)(v6 + _Block_release(*(const void **)(v0 + 24)) = a1;
    sub_10009C7F8( *(void *)&v11[OBJC_IVAR____TtC9storekitd6Client_requestBundleID],  *(void *)&v11[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8]);
    uint64_t v13 = v12;
    unint64_t v15 = v14;
    Swift::String v16 = Data.base64EncodedString(options:)(0LL);
    sub_10007F054(v13, v15);
    *(Swift::String *)((char *)v10 + *(int *)(v6 + 2swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC9storekitd13DialogContext_bundleID + 8)) = v16;
    sub_1000EF110((uint64_t)v10);

    sub_100085BC4((uint64_t)v10, type metadata accessor for StoreKitMessageAnalyticsEvent);
  }

void sub_1000EB9F0()
{
  uint64_t v1 = v0;
  v179 = v2;
  uint64_t v181 = v3;
  NSDictionary v5 = v4;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000860EC();
  uint64_t v178 = v7;
  type metadata accessor for Client.Server(0LL);
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_1000860EC();
  uint64_t v10 = v9;
  uint64_t v11 = sub_1000EF3D4();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v174 = v11;
  uint64_t v175 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v176 = v14;
  uint64_t v177 = (uint64_t)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  sub_1000EF514(v15, v16, v17, v18, v19, v20, v21, v22, v163);
  os_log_type_t v23 = sub_100086224();
  sub_100085E74();
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v163 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v25);
  CFURLRef v30 = (char *)&v163 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = (char *)&v163 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (char *)&v163 - v35;
  if (qword_100328B40 != -1) {
    uint64_t v34 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  sub_1000E99A8(v34, (uint64_t)qword_10033E1A8);
  unint64_t v37 = sub_10009C7DC();
  uint64_t v38 = v37;
  uint64_t v182 = (void *)v39;
  if (!v5)
  {
    if (qword_100328B20 != -1) {
      unint64_t v37 = swift_once(&qword_100328B20, sub_1000EE934);
    }
    uint64_t v46 = sub_1000E99A8(v37, (uint64_t)qword_10033E178);
    sub_100085BA4(v46, (uint64_t)v27, type metadata accessor for SKLogger);
    static os_log_type_t.error.getter(v47);
    uint64_t v48 = sub_100085EE8((uint64_t)v182);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    if (sub_1000EF4C0(v49))
    {
      uint64_t v50 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v51 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v50 = 136446466;
      sub_1000EF3A8(v51);
      v52._uint64_t countAndFlagsBits = v38;
      v52._object = v33;
      String.append(_:)(v52);
      sub_100085F14();
      sub_100086144();
      uint64_t v183 = sub_10008620C(v183, v53, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v50 + 4);
      sub_10007D974((uint64_t)v33);
      sub_10007B980();
      sub_1000EF470();
      uint64_t v183 = sub_1000EF460(v54 + 10, (uint64_t)"Missing message type to display message.");
      sub_100086194((uint64_t)&v183, (uint64_t)&v184);
      sub_100086038((void *)&_mh_execute_header, v10, v23, "%{public}s%{public}s", v50);
      sub_100086030(v51, v55, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v51);
      sub_10007B974((uint64_t)v50);
      sub_100086144();
    }

    else
    {

      sub_100085E64((uint64_t)v182);
    }

    uint64_t v100 = (uint64_t)v27;
    goto LABEL_34;
  }

  uint64_t v180 = v37;
  id v40 = v5;
  sub_1000DF90C();
  id v42 = v41;
  Class v43 = (Class)objc_msgSend(v41, "ams_DSID");

  sub_1000E8068();
  if ((v44 & 1) != 0)
  {
    sub_10007CB7C(0LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
    Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;

    Class v43 = isa;
    goto LABEL_11;
  }

  if (!v43)
  {
    if (qword_100328B20 != -1) {
      uint64_t v44 = swift_once(&qword_100328B20, sub_1000EE934);
    }
    uint64_t v128 = sub_1000E99A8(v44, (uint64_t)qword_10033E178);
    sub_1000EF50C(v128, v129, type metadata accessor for SKLogger);
    static os_log_type_t.error.getter(v130);
    uint64_t v131 = sub_100085EE8((uint64_t)v182);
    uint64_t v132 = (os_log_s *)Logger.logObject.getter(v131);
    if (sub_1000EF4C0(v132))
    {
      uint64_t v133 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v134 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v133 = 136446466;
      sub_1000EF3A8(v134);
      sub_1000EF42C();
      sub_100085F14();
      sub_100086144();
      uint64_t v136 = sub_10008620C(v183, v135, v185);
      uint64_t v137 = sub_1000EF488(v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v137, v138, v133 + 4);
      sub_10007D974((uint64_t)v33);
      sub_10007B980();
      sub_1000EF470();
      uint64_t v140 = sub_1000EF460(v139 + 5, (uint64_t)"Missing account to display message.");
      uint64_t v141 = sub_1000EF528(v140);
      sub_100086194(v141, v142);
      sub_100086038((void *)&_mh_execute_header, v10, v23, "%{public}s%{public}s", v133);
      sub_100086030(v134, v143, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v134);
      sub_10007B974((uint64_t)v133);

      sub_100086144();
    }

    else
    {

      sub_100085E64((uint64_t)v182);
    }

    uint64_t v100 = (uint64_t)v30;
LABEL_34:
    sub_100085BC4(v100, type metadata accessor for SKLogger);
    goto LABEL_35;
  }

uint64_t sub_1000EC5E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a8;
  v8[6] = v14;
  v8[3] = a6;
  v8[4] = a7;
  v8[2] = a5;
  uint64_t v9 = type metadata accessor for MessageServerResponse(0LL);
  v8[7] = v9;
  v8[8] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = (*(void *)(*(void *)(sub_10007B1FC(&qword_10032B6E8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[9] = swift_task_alloc(v10);
  uint64_t v11 = swift_task_alloc(v10);
  v8[10] = v11;
  uint64_t v12 = (void *)swift_task_alloc(dword_100329F2C);
  v8[11] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_1000EC6A4;
  return sub_100087610(v11);
}

uint64_t sub_1000EC6A4()
{
  return sub_100092F20();
}

uint64_t sub_1000EC6E0()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 56);
  sub_100085384(*(void *)(v0 + 80), v1, &qword_10032B6E8);
  if (sub_10007D824(v1, 1LL, v2) == 1)
  {
    sub_100085298(*(void *)(v0 + 80), &qword_10032B6E8);
    sub_100085298(*(void *)(v0 + 72), &qword_10032B6E8);
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = *(void *)(v0 + 56);
    sub_100085264(*(void *)(v0 + 72), v4, type metadata accessor for MessageServerResponse);
    uint64_t v6 = *(void *)(v4 + *(int *)(v5 + 24));
    uint64_t v7 = (void *)swift_task_alloc(dword_10032B6F4);
    *(void *)(v0 + 96) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000EC7E0;
    return sub_1000EC870( *(void *)(v0 + 64),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  v6,  *(void *)(v0 + 40),  *(void *)(v0 + 48));
  }

uint64_t sub_1000EC7E0()
{
  return sub_100092F20();
}

uint64_t sub_1000EC81C()
{
  return sub_10009C2E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000EC870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[11] = a6;
  v7[12] = v6;
  v7[9] = a4;
  v7[10] = a5;
  v7[7] = a2;
  v7[8] = a3;
  v7[6] = a1;
  v7[13] = swift_getObjectType(v6);
  uint64_t v8 = sub_100086318();
  v7[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[15] = v9;
  v7[16] = sub_10009BFAC(v9);
  v7[17] = sub_100086224();
  v7[18] = sub_100093010();
  v7[19] = sub_100093010();
  v7[20] = sub_100093010();
  uint64_t v10 = sub_10007D96C();
  v7[21] = v10;
  v7[22] = sub_10009BFAC(*(void *)(v10 - 8));
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000EC910(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 168);
  uint64_t v4 = *(void *)(v2 + 176);
  sub_1000EF4A0(*(void *)(v2 + 48), a2, type metadata accessor for MessageServerResponse.MessageItem);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v3);
  uint64_t v6 = *(uint64_t **)(v2 + 176);
  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(void, uint64_t *, void))(*(void *)(v2 + 120) + 32LL))( *(void *)(v2 + 128),  v6,  *(void *)(v2 + 112));
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v13 = *(void *)(v2 + 128);
    uint64_t v14 = *(void *)(v2 + 112);
    uint64_t v15 = *(void *)(v2 + 120);
    uint64_t v16 = *(void **)(v2 + 96);
    uint64_t v17 = *(void *)(v2 + 72);
    uint64_t v18 = *(void *)(v2 + 56);
    sub_100079604(*(void *)(v2 + 136), (uint64_t)qword_10033E1A8);
    sub_10009C7DC();
    BOOL v19 = sub_1000EE9AC();
    sub_10007B980();
    URL._bridgeToObjectiveC()(v20);
    uint64_t v22 = v21;
    [v16 _showMessage:v21 forClient:v18 messageType:v17 useItmsUI:v19];

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    goto LABEL_7;
  }

  uint64_t v7 = *(void **)(v2 + 64);
  uint64_t v9 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v10 = v6[2];
  uint64_t v11 = v6[3];
  if (!v7)
  {
    id v24 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
    if (v24)
    {
      uint64_t v12 = v24;
      uint64_t v58 = v8;
      uint64_t v7 = *(void **)(v2 + 64);
      goto LABEL_10;
    }

    sub_100085FB4();
    sub_10007BA44();
    if (qword_100328B20 != -1) {
      swift_once(&qword_100328B20, sub_1000EE934);
    }
    uint64_t v39 = *(void *)(v2 + 88);
    uint64_t v40 = sub_100079604(*(void *)(v2 + 136), (uint64_t)qword_10033E178);
    sub_1000EF4A0(v40, v41, type metadata accessor for SKLogger);
    os_log_type_t v43 = static os_log_type_t.error.getter(v42);
    uint64_t v44 = sub_100085EE8(v39);
    unsigned __int8 v45 = (os_log_s *)Logger.logObject.getter(v44);
    BOOL v46 = os_log_type_enabled(v45, v43);
    uint64_t v47 = *(void **)(v2 + 88);
    if (v46)
    {
      uint64_t v48 = *(void *)(v2 + 80);
      uint64_t v49 = sub_10007B9FC(22LL);
      uint64_t v50 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v49 = 136446466;
      sub_1000B2110();
      uint64_t v59 = v51;
      uint64_t v60 = v52;
      uint64_t v61 = v53;
      swift_bridgeObjectRetain(v47);
      v54._uint64_t countAndFlagsBits = v48;
      v54._object = v47;
      String.append(_:)(v54);
      sub_100085F14();
      swift_bridgeObjectRelease(v47);
      *(void *)(v2 + 16) = sub_10008620C(v60, v55, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 16, v2 + 24, v49 + 4);
      sub_10007B980();
      sub_10007D974((uint64_t)v47);
      *(_WORD *)(v49 + 12) = 2082;
      sub_1000862B8();
      *(void *)(v2 + 24) = sub_10007A488(0xD000000000000043LL, v56, &v59);
      sub_100086194(v2 + 24, v2 + 32);
      sub_100086038((void *)&_mh_execute_header, v45, v43, "%{public}s%{public}s", (uint8_t *)v49);
      sub_100086030(v50, v57, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v50);
      sub_10007B974(v49);
    }

    else
    {
      sub_10007D974(*(void *)(v2 + 88));
    }

    sub_100085BC4(*(void *)(v2 + 144), type metadata accessor for SKLogger);
LABEL_7:
    sub_1000EF418();
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  uint64_t v58 = v6[1];
  uint64_t v12 = *(void **)(v2 + 64);
LABEL_10:
  *(void *)(v2 + 184) = v12;
  uint64_t v25 = *(void **)(v2 + 56);
  uint64_t v26 = qword_100328B40;
  id v27 = v7;
  id v28 = v25;
  id v29 = v12;
  if (v26 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  *(void *)(v2 + 192) = sub_100079604(*(void *)(v2 + 136), (uint64_t)qword_10033E1A8);
  unint64_t v30 = sub_10009C7DC();
  uint64_t v32 = v31;
  if (qword_100328B20 != -1) {
    swift_once(&qword_100328B20, sub_1000EE934);
  }
  uint64_t v33 = *(void *)(v2 + 160);
  uint64_t v34 = *(void *)(v2 + 72);
  uint64_t v35 = *(void **)(v2 + 56);
  uint64_t v36 = sub_100079604(*(void *)(v2 + 136), (uint64_t)qword_10033E178);
  sub_100085BA4(v36, v33, type metadata accessor for SKLogger);
  id v37 = objc_allocWithZone((Class)type metadata accessor for SubscriptionOfferRemoteAlert(0LL));
  *(void *)(v2 + 200) = sub_1000F5C14(v35, v9, v58, v10, v11, v29, v34, v30, v32, 0LL, 0LL, v33);
  uint64_t v38 = (void *)swift_task_alloc(dword_10032B9BC);
  *(void *)(v2 + 208) = v38;
  void *v38 = v2;
  v38[1] = sub_1000ECD98;
  return sub_1000F5708();
}

uint64_t sub_1000ECD98()
{
  return sub_100092F20();
}

uint64_t sub_1000ECDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 88);
  sub_1000EF4A0(*(void *)(v2 + 192), a2, type metadata accessor for SKLogger);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  uint64_t v6 = sub_100085EE8(v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = v5;
  if (os_log_type_enabled(v7, v5))
  {
    uint64_t v9 = *(void **)(v2 + 200);
    id v24 = *(void **)(v2 + 184);
    uint64_t v11 = *(void *)(v2 + 80);
    uint64_t v10 = *(void **)(v2 + 88);
    uint64_t v12 = sub_10007B9FC(22LL);
    uint64_t v13 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v12 = 136446466;
    sub_1000B2110();
    uint64_t v25 = v14;
    uint64_t v26 = v15;
    uint64_t v27 = v16;
    swift_bridgeObjectRetain(v10);
    v17._uint64_t countAndFlagsBits = v11;
    v17._object = v10;
    String.append(_:)(v17);
    sub_100085F14();
    swift_bridgeObjectRelease(v10);
    *(void *)(v2 + 32) = sub_10008620C(v26, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 32, v2 + 40, v12 + 4);
    sub_10007B980();
    sub_10007D974((uint64_t)v10);
    *(_WORD *)(v12 + 12) = 2082;
    sub_1000862B8();
    *(void *)(v2 + 40) = sub_10007A488(0xD000000000000026LL, v19, &v25);
    sub_100086194(v2 + 40, v2 + 48);
    sub_100086038((void *)&_mh_execute_header, v7, v8, "%{public}s%{public}s", (uint8_t *)v12);
    sub_100086030(v13, v20, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v13);
    sub_10007B974(v12);
  }

  else
  {
    uint64_t v21 = *(void **)(v2 + 200);
    uint64_t v22 = *(void **)(v2 + 184);
    sub_10007D974(*(void *)(v2 + 88));
  }

  sub_100085BC4(*(void *)(v2 + 152), type metadata accessor for SKLogger);
  sub_1000EF418();
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1000ED058()
{
  uint64_t v133 = v0;
  uint64_t v135 = v1;
  uint64_t v3 = v2;
  os_log_type_t v5 = v4;
  uint64_t v142 = v6;
  sub_100086224();
  sub_100085E74();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v141 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v128 - v11);
  uint64_t v12 = __chkstk_darwin(v10);
  sub_1000EF514(v12, v13, v14, v15, v16, v17, v18, v19, v128);
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v20);
  sub_1000860EC();
  uint64_t v136 = v21;
  uint64_t v22 = sub_10007D96C();
  sub_100085E74();
  __chkstk_darwin(v23);
  sub_1000860EC();
  uint64_t v130 = v24;
  uint64_t v129 = sub_1000EF5B0();
  uint64_t v131 = *(void *)(v129 - 8);
  uint64_t v25 = *(void *)(v131 + 64);
  uint64_t v26 = __chkstk_darwin(v129);
  uint64_t v132 = (uint64_t)&v128 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  id v28 = (unint64_t *)((char *)&v128 - v27);
  type metadata accessor for Client.Server(0LL);
  sub_100085E74();
  __chkstk_darwin(v29);
  sub_100085FDC();
  uint64_t v32 = v31 - v30;
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v128 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_100086318();
  uint64_t v139 = *(void (***)(void, char *, uint64_t))(v36 - 8);
  __chkstk_darwin(v36);
  sub_1000860EC();
  uint64_t v140 = v38;
  if (qword_100328B40 != -1) {
    uint64_t v37 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  sub_1000EF3DC(v37, (uint64_t)qword_10033E1A8);
  unint64_t v39 = sub_10009C7DC();
  uint64_t v143 = v40;
  sub_100085384(v3, (uint64_t)v35, (uint64_t *)&unk_10032A1C0);
  int v41 = sub_10007D824((uint64_t)v35, 1LL, v36);
  unint64_t v138 = v39;
  if (v41 == 1)
  {
    sub_100085298((uint64_t)v35, (uint64_t *)&unk_10032A1C0);
    if (qword_100328B20 != -1) {
      uint64_t v42 = swift_once(&qword_100328B20, sub_1000EE934);
    }
    uint64_t v43 = sub_1000EF3DC(v42, (uint64_t)qword_10033E178);
    os_log_type_t v44 = v141;
    sub_1000EF5A8(v43, v45, type metadata accessor for SKLogger);
    sub_1000EF440();
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease(v146);
    uint64_t v145 = 0xD000000000000027LL;
    unint64_t v146 = 0x80000001002A1D90LL;
    id v144 = [v5 type];
    v147._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    sub_1000EF580(v147);
    sub_100085EF0();
    sub_100086128();
    uint64_t v46 = *(void *)&v142[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
    uint64_t v47 = *(os_log_s **)&v142[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
    sub_10007BA3C();
    sub_1000EF3E4();
    sub_10007BA44();
    sub_1000EF570();
    uint64_t v48 = v143;
    sub_100085EE8(v143);
    sub_100085EE8(v46);
    uint64_t v49 = (os_log_s *)sub_10009C414();
    if (sub_1000EF3C4(v49))
    {
      uint64_t v50 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v51 = sub_10007B9FC(64LL);
      sub_1000EF2C0(v51, 4.8752e-34);
      sub_1000EF384();
      sub_100085F14();
      sub_1000AABA8();
      uint64_t v53 = sub_10008620C(v145, v52, (uint64_t *)&v144);
      sub_1000EF2E0(v53);
      sub_10007D974(v48);
      sub_10007B980();
      sub_1000EF370();
      uint64_t v145 = sub_1000EB248();
      sub_100086194((uint64_t)&v145, (uint64_t)v35);
      sub_100085E64(v46);
      sub_100086038((void *)&_mh_execute_header, v47, v44, "%{public}s%{public}s", v50);
      sub_100086030(v51, v54, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v51);
      sub_10007B974((uint64_t)v50);
      sub_100085EF0();
      sub_1000AABA8();
    }

    else
    {

      sub_100085E64(v46);
      sub_100085E64(v48);
    }

    sub_100085BC4((uint64_t)v141, type metadata accessor for SKLogger);
  }

  else
  {
    uint64_t v141 = v5;
    uint64_t v55 = v139;
    unint64_t v56 = v140;
    ((void (**)(char *, char *, uint64_t))v139)[4](v140, v35, v36);
    uint64_t v57 = (uint64_t)v142;
    sub_1000DE6D4();
    uint64_t v58 = sub_10007B1FC(&qword_10032A028);
    int v59 = sub_10007D824(v32, 2LL, v58);
    uint64_t v128 = v36;
    if (v59)
    {
      sub_100085BC4(v32, type metadata accessor for Client.Server);
      if (qword_100328B20 != -1) {
        uint64_t v60 = swift_once(&qword_100328B20, sub_1000EE934);
      }
      uint64_t v61 = sub_1000EF3DC(v60, (uint64_t)qword_10033E178);
      os_log_type_t v62 = v137;
      sub_1000EF5A8(v61, v63, type metadata accessor for SKLogger);
      sub_1000EF440();
      _StringGuts.grow(_:)(60LL);
      sub_1000862B8();
      v64._uint64_t countAndFlagsBits = 0xD000000000000017LL;
      String.append(_:)(v64);
      id v144 = [v141 type];
      v148._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      sub_1000EF580(v148);
      sub_100085EF0();
      sub_100085F08(0xD000000000000021LL, (uint64_t)" is unsupported in this context: ");
      uint64_t v65 = *(void *)(v57 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
      uint64_t v66 = *(os_log_s **)(v57 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8);
      sub_10007BA3C();
      sub_1000EF3E4();
      sub_10007BA44();
      sub_1000EF570();
      uint64_t v67 = v143;
      sub_100085EE8(v143);
      sub_100085EE8(v65);
      __int128 v68 = (os_log_s *)sub_10009C414();
      if (sub_1000EF3C4(v68))
      {
        os_log_type_t v69 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v70 = sub_10007B9FC(64LL);
        sub_1000EF2C0(v70, 4.8752e-34);
        sub_1000EF384();
        sub_100085F14();
        sub_1000AABA8();
        uint64_t v72 = sub_10008620C(v145, v71, (uint64_t *)&v144);
        sub_1000EF2E0(v72);
        sub_10007D974(v67);
        sub_10007B980();
        sub_1000EF370();
        uint64_t v145 = sub_1000EB248();
        sub_100086194((uint64_t)&v145, v57);
        sub_100085E64(v65);
        sub_100086038((void *)&_mh_execute_header, v66, v62, "%{public}s%{public}s", v69);
        sub_100086030(v70, v73, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v70);
        sub_10007B974((uint64_t)v69);
        sub_100085EF0();
        sub_1000AABA8();
      }

      else
      {

        sub_100085E64(v65);
        sub_100085E64(v67);
      }

      uint64_t v113 = v128;
      uint64_t v114 = v139;
      sub_100085BC4((uint64_t)v137, type metadata accessor for SKLogger);
      ((void (*)(char *, uint64_t))v114[1])(v140, v113);
    }

    else
    {
      uint64_t v137 = (uint64_t (*)(uint64_t, uint64_t))v55[1];
      uint64_t v74 = v137(v32, v36);
      uint64_t v75 = v135;
      if (v135)
      {
        uint64_t v76 = v55[2];
        uint64_t v77 = v130;
        v76(v130, v56, v36);
        swift_storeEnumTagMultiPayload(v77, v22, 0LL);
        uint64_t v78 = v129;
        uint64_t v134 = (uint64_t)v28 + *(int *)(v129 + 36);
        uint64_t v79 = (void *)v57;
        uint64_t v80 = qword_100328B20;
        uint64_t v139 = v75;
        uint64_t v81 = v79;
        uint64_t v142 = v141;
        uint64_t v82 = v143;
        uint64_t v83 = swift_bridgeObjectRetain(v143);
        if (v80 != -1) {
          uint64_t v83 = swift_once(&qword_100328B20, sub_1000EE934);
        }
        uint64_t v84 = sub_1000EF3DC(v83, (uint64_t)qword_10033E178);
        sub_100085BA4(v84, v134, type metadata accessor for SKLogger);
        uint64_t v85 = v139;
        void v28[2] = (unint64_t)v81;
        v28[3] = (unint64_t)v85;
        sub_100085264( v77,  (uint64_t)v28 + *(int *)(v78 + 32),  type metadata accessor for MessageServerResponse.MessageItem);
        int v86 = v142;
        v28[4] = (unint64_t)v142;
        *id v28 = v138;
        v28[1] = v82;
        uint64_t v87 = sub_1000AAD2C();
        sub_1000875FC(v136, v88, v89, v87);
        uint64_t v141 = v81;
        uint64_t v90 = v132;
        sub_100085BA4((uint64_t)v28, v132, type metadata accessor for ConsultMessageListenerTask);
        uint64_t v91 = *(unsigned __int8 *)(v131 + 80);
        uint64_t v92 = (v91 + 32) & ~v91;
        unint64_t v93 = (v25 + v92 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v94 = (v93 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v95 = (v94 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v96 = (v95 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v97 = (v96 + 15) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v98 = swift_allocObject(&unk_1002EDF38, v97 + 16, v91 | 7);
        *(void *)(v98 + 16) = 0LL;
        *(void *)(v98 + 24) = 0LL;
        sub_100085264(v90, v98 + v92, type metadata accessor for ConsultMessageListenerTask);
        id v99 = v133;
        *(void *)(v98 + v93) = v133;
        id v100 = v141;
        *(void *)(v98 + v94) = v141;
        unint64_t v102 = v138;
        uint64_t v101 = v139;
        *(void *)(v98 + v95) = v139;
        *(void *)(v98 + v96) = v86;
        uint64_t v103 = (unint64_t *)(v98 + v97);
        uint64_t v104 = v143;
        unint64_t *v103 = v102;
        v103[1] = v104;
        id v105 = v101;
        id v106 = v100;
        uint64_t v107 = v86;
        id v108 = v99;
        sub_1000F9480(v136, (uint64_t)&unk_10032B700, v98);
        uint64_t v110 = v109;

        swift_release(v110);
        sub_100085BC4((uint64_t)v28, type metadata accessor for ConsultMessageListenerTask);
        unint64_t v111 = v140;
        uint64_t v112 = v128;
      }

      else
      {
        if (qword_100328B20 != -1) {
          uint64_t v74 = swift_once(&qword_100328B20, sub_1000EE934);
        }
        uint64_t v115 = sub_1000EF3DC(v74, (uint64_t)qword_10033E178);
        os_log_type_t v116 = v134;
        sub_1000EF5A8(v115, v117, type metadata accessor for SKLogger);
        sub_1000EF440();
        _StringGuts.grow(_:)(53LL);
        sub_100085F08(0xD000000000000033LL, (uint64_t)"Missing connection to consult message listener for ");
        uint64_t v118 = *(void *)(v57 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
        char v119 = *(os_log_s **)(v57 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8);
        sub_10007BA3C();
        sub_1000EF3E4();
        sub_10007BA44();
        sub_1000EF570();
        uint64_t v120 = v143;
        sub_100085EE8(v143);
        sub_100085EE8(v118);
        id v121 = (os_log_s *)sub_10009C414();
        if (sub_1000EF3C4(v121))
        {
          id v122 = (uint8_t *)sub_10007B9FC(22LL);
          uint64_t v123 = sub_10007B9FC(64LL);
          sub_1000EF2C0(v123, 4.8752e-34);
          sub_1000EF384();
          sub_100085F14();
          sub_1000AABA8();
          uint64_t v125 = sub_10008620C(v145, v124, (uint64_t *)&v144);
          sub_1000EF2E0(v125);
          sub_10007D974(v120);
          sub_10007B980();
          sub_1000EF370();
          uint64_t v145 = sub_1000EB248();
          sub_100086194((uint64_t)&v145, v57);
          sub_100085E64(v118);
          sub_100086038((void *)&_mh_execute_header, v119, v116, "%{public}s%{public}s", v122);
          sub_100086030(v123, v126, (uint64_t)&type metadata for Any + 8);
          sub_10007B974(v123);
          sub_10007B974((uint64_t)v122);
          sub_100085EF0();
          sub_1000AABA8();
        }

        else
        {

          sub_100085E64(v118);
          sub_100085E64(v120);
        }

        uint64_t v127 = v128;
        sub_100085BC4(v134, type metadata accessor for SKLogger);
        unint64_t v111 = v140;
        uint64_t v112 = v127;
      }

      v137((uint64_t)v111, v112);
    }
  }

  sub_100085E98();
}

uint64_t sub_1000EDAA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = v14;
  v8[7] = v15;
  v8[4] = a7;
  v8[5] = a8;
  v8[2] = a5;
  v8[3] = a6;
  uint64_t v9 = sub_10007B1FC(&qword_10032B708);
  uint64_t v10 = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v8[8] = v10;
  uint64_t v11 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  v8[9] = v11;
  v8[10] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)swift_task_alloc(dword_100329934);
  v8[11] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_1000EDB58;
  return sub_10007CD34(v10);
}

uint64_t sub_1000EDB58()
{
  return sub_100092F20();
}

uint64_t sub_1000EDB94()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = sub_10007D824(v1, 1LL, *(void *)(v0 + 72));
  if ((_DWORD)v2 == 1)
  {
    sub_10009C740(v2, &qword_10032B708);
    sub_1000EF564();
    sub_1000939C0();
    return sub_10009C2E4(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 32);
    sub_100085264(v1, *(void *)(v0 + 80), type metadata accessor for MessageServerResponse.MessageItem);
    id v6 = sub_100093DE4(v5, "type");
    uint64_t v7 = (void *)swift_task_alloc(dword_10032B6F4);
    *(void *)(v0 + 96) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000EDC58;
    return sub_1000EC870( *(void *)(v0 + 80),  *(void *)(v0 + 24),  v4,  (uint64_t)v6,  *(void *)(v0 + 48),  *(void *)(v0 + 56));
  }

uint64_t sub_1000EDC58()
{
  return sub_100092F20();
}

uint64_t sub_1000EDC94()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000EDDDC()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  id v6 = v5;
  uint64_t ObjectType = swift_getObjectType(v2);
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000EF3D4();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v82 = v11;
  uint64_t v83 = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v72 - v15;
  uint64_t v17 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v18);
  sub_1000EF4A8();
  if (v6 && v4)
  {
    uint64_t v77 = v10;
    uint64_t v80 = v2;
    uint64_t v19 = qword_100328B40;
    id v84 = v6;
    uint64_t v20 = v4;
    if (v19 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v78 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v79 = ObjectType;
    sub_100079604(v17, (uint64_t)qword_10033E1A8);
    unint64_t v81 = sub_10009C7DC();
    uint64_t v22 = v21;
    if (qword_100328B20 != -1) {
      swift_once(&qword_100328B20, sub_1000EE934);
    }
    uint64_t v75 = sub_100079604(v17, (uint64_t)qword_10033E178);
    sub_1000EF50C(v75, v23, type metadata accessor for SKLogger);
    uint64_t v86 = 0LL;
    unint64_t v87 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(v87);
    uint64_t v86 = 0xD000000000000023LL;
    unint64_t v87 = 0x80000001002A1C90LL;
    id v85 = [v84 type];
    v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v24);
    sub_100085EF0();
    sub_100086128();
    id v76 = v20;
    uint64_t v25 = *(void *)&v20[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
    uint64_t v26 = *(void **)&v20[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
    sub_10008600C();
    v27._uint64_t countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    sub_100086004();
    uint64_t v28 = v86;
    unint64_t v29 = v87;
    uint64_t v30 = sub_10007BA3C();
    LOBYTE(v26) = static os_log_type_t.default.getter(v30);
    sub_100085EE8((uint64_t)v22);
    uint64_t v31 = sub_100085EE8(v29);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = v26;
    if (os_log_type_enabled(v32, (os_log_type_t)v26))
    {
      uint64_t v34 = sub_10007B9FC(22LL);
      uint64_t v74 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v34 = 136446466;
      uint64_t v72 = v34 + 4;
      sub_1000B2110();
      id v85 = v35;
      uint64_t v86 = v36;
      unint64_t v87 = v37;
      sub_10007BA3C();
      uint64_t v73 = v28;
      unint64_t v38 = (unint64_t)v22;
      v39._uint64_t countAndFlagsBits = v81;
      v39._object = v22;
      String.append(_:)(v39);
      sub_100085F14();
      swift_bridgeObjectRelease(v22);
      uint64_t v86 = sub_10008620C(v86, v40, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v72);
      sub_10007D974((uint64_t)v22);
      sub_10007B980();
      *(_WORD *)(v34 + 12) = 2082;
      swift_bridgeObjectRetain(v29);
      uint64_t v86 = sub_10007A488(v73, v29, (uint64_t *)&v85);
      sub_100086194((uint64_t)&v86, (uint64_t)&v87);
      sub_100085E64(v29);
      sub_100086038((void *)&_mh_execute_header, v32, v33, "%{public}s%{public}s", (uint8_t *)v34);
      uint64_t v41 = v74;
      sub_100086030(v74, v42, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v41);
      sub_10007B974(v34);
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v22);
    }

    else
    {

      sub_100085E64(v29);
      sub_100085E64((uint64_t)v22);
      unint64_t v38 = (unint64_t)v22;
    }

    sub_100085BC4(v1, type metadata accessor for SKLogger);
    id v43 = v76;
    id v76 = v43;
    id v44 = sub_100093DE4((uint64_t)v43, "status");
    id v45 = [v44 integerValue];

    id v47 = sub_100093DE4(v46, "type");
    *(void *)uint64_t v16 = v43;
    *((void *)v16 + 1) = v45;
    *((void *)v16 + 2) = v47;
    v16[24] = 0;
    uint64_t v48 = v82;
    *((void *)v16 + 4) = v81;
    *((void *)v16 + 5) = v38;
    sub_100085BA4(v75, (uint64_t)&v16[*(int *)(v48 + 32)], type metadata accessor for SKLogger);
    uint64_t v49 = *(int *)(v48 + 36);
    uint64_t v50 = (void *)objc_opt_self(&OBJC_CLASS___StoreKitMessagesManager);
    swift_bridgeObjectRetain(v38);
    *(void *)&v16[v49] = [v50 sharedManager];
    uint64_t v51 = sub_1000AAD2C();
    uint64_t v52 = (uint64_t)v77;
    sub_1000875FC((uint64_t)v77, v53, v54, v51);
    uint64_t v55 = (uint64_t)v78;
    sub_1000EF4A0((uint64_t)v16, v56, type metadata accessor for MessageServerRequest);
    sub_1000EF53C();
    unint64_t v57 = v38;
    unint64_t v58 = ((unint64_t)v45 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v61 = (v60 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v63 = swift_allocObject(&unk_1002EDF10, v61 + 8, v62);
    *(void *)(v63 + 16) = 0LL;
    *(void *)(v63 + 24) = 0LL;
    sub_100085264(v55, (uint64_t)v45 + v63, type metadata accessor for MessageServerRequest);
    uint64_t v65 = v80;
    unint64_t v64 = v81;
    *(void *)(v63 + v58) = v80;
    id v66 = v76;
    *(void *)(v63 + v59) = v76;
    uint64_t v67 = (unint64_t *)(v63 + v60);
    unint64_t *v67 = v64;
    v67[1] = v57;
    *(void *)(v63 + v61) = v79;
    id v68 = v66;
    id v69 = v65;
    sub_1000F9480(v52, (uint64_t)&unk_10032B6E0, v63);
    uint64_t v71 = v70;

    swift_release(v71);
    sub_100085BC4((uint64_t)v16, type metadata accessor for MessageServerRequest);
  }

  sub_100085E98();
}

uint64_t sub_1000EE340( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  v8[9] = v9;
  v8[10] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for MessageServerResponse(0LL);
  v8[11] = v10;
  v8[12] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = (*(void *)(*(void *)(sub_10007B1FC(&qword_10032B6E8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[13] = swift_task_alloc(v11);
  uint64_t v12 = swift_task_alloc(v11);
  v8[14] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_100329F2C);
  v8[15] = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_1000EE41C;
  return sub_100087610(v12);
}

uint64_t sub_1000EE41C()
{
  return sub_100092F20();
}

uint64_t sub_1000EE450()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 88);
  sub_100085384(*(void *)(v0 + 112), v1, &qword_10032B6E8);
  if (sub_10007D824(v1, 1LL, v2) == 1)
  {
    sub_100085298(*(void *)(v0 + 112), &qword_10032B6E8);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 88);
    sub_100085264(*(void *)(v0 + 104), v4, type metadata accessor for MessageServerResponse);
    if ((*(_BYTE *)(v4 + *(int *)(v5 + 20)) & 1) == 0)
    {
      uint64_t v34 = *(void *)(*(void *)(v0 + 96) + *(int *)(*(void *)(v0 + 88) + 24LL));
      id v35 = (void *)swift_task_alloc(dword_10032B6F4);
      *(void *)(v0 + 128) = v35;
      *id v35 = v0;
      v35[1] = sub_1000EE838;
      return sub_1000EC870( *(void *)(v0 + 96),  *(void *)(v0 + 48),  0LL,  v34,  *(void *)(v0 + 56),  *(void *)(v0 + 64));
    }

    if (qword_100328B20 != -1) {
      swift_once(&qword_100328B20, sub_1000EE934);
    }
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v11 = sub_100079604(*(void *)(v0 + 72), (uint64_t)qword_10033E178);
    sub_100085BA4(v11, v8, type metadata accessor for SKLogger);
    uint64_t v40 = 0LL;
    uint64_t v41 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(78LL);
    sub_1000862B8();
    v12._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v12);
    *(void *)(v0 + 16) = *(void *)(v6 + *(int *)(v7 + 24));
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v13);
    sub_100085EF0();
    sub_100086128();
    uint64_t v14 = *(void *)(v10 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
    uint64_t v15 = *(void **)(v10 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8);
    sub_10008618C();
    v16._uint64_t countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    sub_100085FB4();
    sub_1000862B8();
    String.append(_:)(v17);
    uint64_t v18 = v41;
    LOBYTE(sub_10012A9E0((uint64_t)va, v14, v15) = static os_log_type_t.default.getter(v19);
    sub_100085EE8(v9);
    uint64_t v20 = sub_100085EE8(v41);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = v15;
    BOOL v23 = os_log_type_enabled(v21, (os_log_type_t)v15);
    Swift::String v24 = *(void **)(v0 + 64);
    if (v23)
    {
      uint64_t v25 = *(void *)(v0 + 56);
      uint64_t v38 = v40;
      uint64_t v26 = sub_10007B9FC(22LL);
      uint64_t v27 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v26 = 136446466;
      sub_1000B2110();
      uint64_t v39 = v28;
      uint64_t v40 = v29;
      uint64_t v41 = v30;
      swift_bridgeObjectRetain(v24);
      v31._uint64_t countAndFlagsBits = v25;
      v31._object = v24;
      String.append(_:)(v31);
      sub_100085F14();
      sub_1000AABA8();
      *(void *)(v0 + 24) = sub_10008620C(v40, v32, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v26 + 4);
      sub_10007B980();
      sub_10007D974((uint64_t)v24);
      *(_WORD *)(v26 + 12) = 2082;
      sub_100085FEC();
      *(void *)(v0 + 32) = sub_10007A488(v38, v18, &v39);
      sub_100086194(v0 + 32, v0 + 40);
      sub_100085E64(v18);
      sub_100086038((void *)&_mh_execute_header, v21, v22, "%{public}s%{public}s", (uint8_t *)v26);
      sub_100086030(v27, v33, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v27);
      sub_10007B974(v26);

      sub_100085EF0();
    }

    else
    {
      sub_10007D974(*(void *)(v0 + 64));
      sub_100085E64(v41);
    }

    uint64_t v37 = *(void *)(v0 + 96);
    sub_100085BC4(*(void *)(v0 + 80), type metadata accessor for SKLogger);
    sub_100085BC4(v37, type metadata accessor for MessageServerResponse);
  }

  sub_10009C740(v3, &qword_10032B6E8);
  sub_1000EF4FC();
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EE838()
{
  return sub_100092F20();
}

uint64_t sub_1000EE86C()
{
  return sub_10009C2E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000EE934()
{
  uint64_t v0 = sub_100086224();
  sub_1000B40F4(v0, qword_10033E178);
  sub_100079604(v0, (uint64_t)qword_10033E178);
  sub_1000862B8();
  return Logger.init(subsystem:category:)(v2, v1, 0xD000000000000010LL, 0x80000001002A1F40LL);
}

BOOL sub_1000EE9AC()
{
  uint64_t v1 = v0;
  uint64_t v10 = sub_100086318();
  __chkstk_darwin(v10);
  sub_100085FDC();
  uint64_t v2 = sub_1000E9878();
  __chkstk_darwin(v2);
  sub_100085FDC();
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v3);
  sub_1000EF4A8();
  sub_1000E8068();
  if ((v4 & 1) != 0) {
    return 0LL;
  }
  sub_1000DEA24();
  uint64_t v7 = v6;
  id v8 = sub_1000D76C4(v1, v6);
  swift_unknownObjectRelease(v7);
  return v8 == (id)1;
}

uint64_t sub_1000EED10()
{
  uint64_t v4 = sub_1000EF3D4();
  sub_1000EF338();
  sub_1000AAB68();

  swift_bridgeObjectRelease(*(void *)(v1 + v2 + 40));
  uint64_t v5 = sub_1000E9878();
  sub_1000EF3F0(v5);

  sub_1000EF58C();
  sub_1000EF578();
  sub_1000AA5B8(v1 + v3);
  return sub_1000EF2A8(v1, ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v0);
}

uint64_t sub_1000EED94()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B6DC);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000874DC;
  sub_1000EF450();
  sub_1000AA63C();
  return sub_1000EE340(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000EEE5C()
{
  uint64_t v1 = sub_1000EF5B0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_1000AAB68();
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));

  uint64_t v6 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v7 = sub_10007D96C();
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(v6 + 8));
    swift_bridgeObjectRelease(*(void *)(v6 + 24));
  }

  else
  {
    uint64_t v8 = sub_100086318();
    sub_1000EF404(v8);
  }

  unint64_t v9 = (((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = sub_1000E9878();
  sub_10008614C(v12);
  sub_1000EF58C();
  sub_1000EF578();

  sub_1000AA5B8(v0 + v11);
  return sub_1000EF2A8(v0, v11 + 16, v3 | 7);
}

uint64_t sub_1000EEF68()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B6FC);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100087508;
  sub_1000EF450();
  sub_1000AA63C();
  return sub_1000EDAA8(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000EEFFC()
{
  uint64_t v4 = sub_1000EF3D4();
  sub_1000EF338();
  unint64_t v5 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000AAB68();

  swift_bridgeObjectRelease(*(void *)(v1 + v2 + 40));
  uint64_t v6 = sub_1000E9878();
  sub_1000EF3F0(v6);

  sub_1000EF58C();
  sub_1000EF578();

  sub_1000AA5B8(v1 + v5);
  return sub_1000EF2A8(v1, v5 + 16, v0);
}

uint64_t sub_1000EF088()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032B714);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100087508;
  sub_1000EF450();
  sub_1000AA63C();
  return sub_1000EC5E4(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000EF110(uint64_t a1)
{
  v10[3] = type metadata accessor for StoreKitMessageAnalyticsEvent(0LL);
  v10[4] = &off_1002EC398;
  uint64_t v2 = sub_10009D60C(v10);
  sub_100085BA4(a1, (uint64_t)v2, type metadata accessor for StoreKitMessageAnalyticsEvent);
  NSString v3 = String._bridgeToObjectiveC()();
  sub_1000C4990((uint64_t)v10, (uint64_t)v9);
  uint64_t v4 = swift_allocObject(&unk_1002EDF88, 56LL, 7LL);
  sub_10009D8A4(v9, v4 + 16);
  v7[4] = sub_1000EF248;
  uint64_t v8 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_1000EB6EC;
  v7[3] = &unk_1002EDFA0;
  uint64_t v5 = _Block_copy(v7);
  swift_release(v8);
  AnalyticsSendEventLazy(v3, v5);
  _Block_release(v5);

  return sub_10007B1A0(v10);
}

uint64_t sub_1000EF224()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000EF248()
{
}

uint64_t sub_1000EF250(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EF260(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000EF268(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {

    swift_bridgeObjectRelease(a3);
  }

uint64_t sub_1000EF2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000EF2C0(uint64_t a1, float a2)
{
  *uint64_t v2 = a2;
  *(void *)(v4 - 112) = a1;
  *(void *)(v4 - 104) = 91LL;
  *(void *)(v4 - 96) = 0xE100000000000000LL;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1000EF2E0(uint64_t a1)
{
  *(void *)(v3 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v2 + 8, v1);
}

  ;
}

  ;
}

uint64_t sub_1000EF370()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

void sub_1000EF384()
{
  v2._uint64_t countAndFlagsBits = *(void *)(v1 - 160);
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1000EF398()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1, v0);
}

uint64_t sub_1000EF3A8(uint64_t a1)
{
  *(void *)(v1 - 112) = 91LL;
  *(void *)(v1 - 104) = 0xE100000000000000LL;
  *(void *)(v1 - 96) = a1;
  return swift_bridgeObjectRetain(*(void *)(v1 - 120));
}

BOOL sub_1000EF3C4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000EF3D4()
{
  return type metadata accessor for MessageServerRequest(0LL);
}

uint64_t sub_1000EF3DC(uint64_t a1, uint64_t a2)
{
  return sub_100079604(v2, a2);
}

void sub_1000EF3E4()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000EF3F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000EF404(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000EF418()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

void sub_1000EF42C()
{
  v2._uint64_t countAndFlagsBits = *(void *)(v1 - 136);
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_1000EF440()
{
  *(void *)(v0 - 104) = 0LL;
  *(void *)(v0 - 96) = 0xE000000000000000LL;
}

  ;
}

uint64_t sub_1000EF460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 96));
}

void sub_1000EF470()
{
  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_1000EF488(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

void sub_1000EF4A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

  ;
}

BOOL sub_1000EF4C0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

  ;
}

uint64_t sub_1000EF4EC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000EF4FC()
{
  return swift_task_dealloc(*(void *)(v0 + 112));
}

void sub_1000EF50C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_1000EF514( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 192) = (char *)&a9 - v9;
}

uint64_t sub_1000EF528(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

  ;
}

  ;
}

uint64_t sub_1000EF564()
{
  return swift_task_dealloc(*(void *)(v0 + 80));
}

uint64_t sub_1000EF570()
{
  return static os_log_type_t.error.getter();
}

void sub_1000EF578()
{
}

void sub_1000EF580(Swift::String a1)
{
}

void sub_1000EF58C()
{
}

uint64_t sub_1000EF594(uint64_t result)
{
  *(void *)(v1 - 112) = 91LL;
  *(void *)(v1 - 104) = 0xE100000000000000LL;
  *(void *)(v1 - 96) = result;
  return result;
}

void sub_1000EF5A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_1000EF5B0()
{
  return type metadata accessor for ConsultMessageListenerTask(0LL);
}

void sub_1000EF5B8()
{
  qword_10033E190 = (uint64_t)&off_1002EA6E8;
}

void sub_1000EF5CC()
{
  qword_10033E198 = (uint64_t)&off_1002EA758;
}

void sub_1000EF5E0()
{
  qword_10033E1A0 = (uint64_t)&off_1002EA798;
}

uint64_t sub_1000EF5F4()
{
  v1[47] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[48] = v2;
  v1[49] = *(void *)(v2 - 8);
  v1[50] = sub_100093010();
  v1[51] = sub_100093010();
  v1[52] = sub_100093010();
  v1[53] = sub_100093010();
  v1[54] = type metadata accessor for SKLogger(0LL);
  v1[55] = sub_100093010();
  v1[56] = sub_100093010();
  v1[57] = sub_100093010();
  v1[58] = sub_100093010();
  uint64_t v3 = type metadata accessor for URL(0LL);
  v1[59] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[60] = v4;
  v1[61] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  v1[62] = sub_100093010();
  v1[63] = sub_100093010();
  v1[64] = sub_100093010();
  v1[65] = sub_100093010();
  v1[66] = sub_100093010();
  v1[67] = sub_100093010();
  return sub_100092F20();
}

uint64_t sub_1000EF714()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[66];
  v0[29] = 0LL;
  v0[30] = 0LL;
  sub_1000F3D34(v1);
  sub_1000F3D34(v2);
  if (qword_100328D48 != -1) {
    swift_once(&qword_100328D48, sub_10012D118);
  }
  uint64_t v3 = v0 + 2;
  uint64_t v4 = (void *)v0[47];
  uint64_t v5 = qword_10033E3D0;
  v0[68] = qword_10033E3D0;
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  id v8 = objc_allocWithZone(&OBJC_CLASS___AMSLookup);
  swift_unknownObjectRetain_n(v5, 2LL);
  swift_bridgeObjectRetain(v7);
  id v9 = sub_1000F36FC(v5, 0xD000000000000013LL, 0x80000001002A1F60LL, v6, v7);
  v0[69] = v9;
  id v10 = sub_1000DF468();
  v0[70] = v10;
  [v10 setAccountMediaType:AMSAccountMediaTypeProduction];
  [v9 setClientInfo:v10];
  sub_1000F3AE0(1768844655LL, 0xE400000000000000LL, v9);
  uint64_t v11 = sub_10007B1FC((uint64_t *)&unk_10032B180);
  uint64_t v12 = swift_allocObject(v11, 48LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_10027A600;
  uint64_t v13 = v4[1];
  v0[71] = v13;
  uint64_t v14 = v4[2];
  v0[72] = v14;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v14;
  swift_bridgeObjectRetain(v14);
  id v15 = sub_1000F3B24(0LL, v12, v9);
  v0[73] = v15;
  v0[7] = v0 + 35;
  v0[2] = v0;
  v0[3] = sub_1000EF914;
  uint64_t v16 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  Swift::String v17 = v0 + 10;
  v17[1] = 0x40000000LL;
  uint64_t v17[2] = sub_1000AF6CC;
  v17[3] = &unk_1002EDFE0;
  v17[4] = v16;
  [v15 resultWithCompletion:v17];
  return swift_continuation_await(v3);
}

uint64_t sub_1000EF914()
{
  *(void *)(*(void *)v0 + 592LL) = *(void *)(*(void *)v0 + 48LL);
  return sub_100092F20();
}

uint64_t sub_1000EF96C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 376) + 56LL);
  strcpy((char *)(v0 + 216), "askToBuyItem");
  uint64_t v2 = *(void **)(v0 + 280);
  *(_BYTE *)(v0 + 229) = 0;
  *(_WORD *)(v0 + 230) = -5120;
  AnyHashable.init<A>(_:)(v0 + 216, &type metadata for String, &protocol witness table for String);
  uint64_t v437 = v1;
  sub_10012A6B0(v0 + 120, v1, (_OWORD *)(v0 + 160));
  sub_100087388(v0 + 120);
  if (*(void *)(v0 + 184))
  {
    uint64_t v3 = sub_10007B1FC(&qword_10032A580);
    if ((swift_dynamicCast(v0 + 312, v0 + 160, (char *)&type metadata for Any + 8, v3, 6LL) & 1) != 0)
    {
      uint64_t v4 = *(void *)(v0 + 376);
      swift_bridgeObjectRelease(*(void *)(v0 + 312));
      uint64_t v5 = *(_BYTE *)(v4 + 64) & 1;
      goto LABEL_6;
    }
  }

  else
  {
    sub_100087418(v0 + 160, (uint64_t *)&unk_100328ED0);
  }

  uint64_t v5 = 0LL;
LABEL_6:
  uint64_t v420 = v0 + 352;
  id v6 = [v2 allItems];
  uint64_t v7 = sub_10007CB7C(0LL, &qword_10032B728, &OBJC_CLASS___AMSLookupItem_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  uint64_t v431 = v0 + 376;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v261 = v8;
    }
    else {
      uint64_t v261 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v261);
    sub_10007B980();
  }

  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  v440 = v2;
  if (!v9)
  {
    sub_10007B980();
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    Swift::String v17 = *(os_log_s **)(v0 + 456);
    uint64_t v18 = *(void *)(v0 + 392);
    sub_1000F3CCC(*(void *)(v0 + 432), (uint64_t)qword_10033E1A8);
    sub_1000F3CB4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32));
    sub_1000F3CFC();
    sub_100093C38();
    os_log_type_t v19 = sub_1000F3DA4();
    if (os_log_type_enabled(v17, v19))
    {
      unint64_t v375 = *(void *)(v0 + 576);
      uint64_t v390 = *(void *)(v0 + 568);
      sub_1000F3DB4();
      uint64_t v5 = *(void *)(v0 + 376);
      uint64_t v20 = sub_10007B9FC(32LL);
      uint64_t type = sub_10007B9FC(96LL);
      v445[0] = type;
      *(_DWORD *)uint64_t v20 = 136446722;
      *(void *)(v0 + 352) = sub_1000F3CA0((uint64_t)&unk_10027C630);
      sub_1000F3D94(v420, v0 + 360);
      *(_WORD *)(v20 + 12) = 2082;
      uint64_t v22 = *(void *)(v5 + 40);
      unint64_t v21 = *(void *)(v5 + 48);
      swift_bridgeObjectRetain(v21);
      *(void *)(v0 + 360) = sub_10007A488(v22, v21, v445);
      sub_1000F3D94(v0 + 360, v0 + 368);
      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v20 + 22) = 2082;
      swift_bridgeObjectRetain(v375);
      *(void *)(v0 + 368) = sub_10007A488(v390, v375, v445);
      sub_1000F3D94(v0 + 368, v431);
      sub_10007BA44();
      sub_1000F3BFC(v5);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v19,  "[%{public}s][%{public}s]: Lookup for %{public}s completed without an item",  (uint8_t *)v20,  0x20u);
      sub_1000F3D1C(type, v23, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(type);
      sub_10007B974(v20);

      uint64_t v24 = sub_1000F3DC0();
    }

    else
    {
      uint64_t v48 = *(void *)(v0 + 416);
      uint64_t v49 = *(void *)(v0 + 384);
      uint64_t v50 = *(void *)(v0 + 392);
      sub_1000F3BFC(*(void *)(v0 + 376));

      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      uint64_t v24 = v48;
      uint64_t v25 = v49;
    }

    v26(v24, v25);
    uint64_t v51 = v440;
    static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
    id v52 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v53 = sub_1000F3CE0();
    sub_1000F3D80((uint64_t)v53, v54, v55, v56, v57, v58, v59);
    unint64_t v60 = off_100328000;
    goto LABEL_36;
  }

  if ((v8 & 0xC000000000000001LL) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v8);
  }

  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_56;
    }

    id v10 = *(id *)(v8 + 32);
  }

  uint64_t v11 = v10;
  sub_10007B980();
  id v12 = [v11 itemDictionary];
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  id v14 = [v11 productPageURL];
  uint64_t v431 = v13;
  if (v14)
  {
    id v15 = v14;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = 1LL;
  }

  uint64_t v27 = *(void *)(v0 + 536);
  uint64_t v28 = *(void *)(v0 + 520);
  uint64_t v29 = *(void *)(v0 + 472);
  sub_100087418(v27, (uint64_t *)&unk_10032A1C0);
  sub_10007D0AC(v28, v16, 1LL, v29);
  sub_10008521C(v28, v27);
  uint64_t v30 = sub_1000F3994(v11);
  if (!v31)
  {

    sub_1000F3D8C();
    goto LABEL_43;
  }

  uint64_t v32 = v31;
  if ((v5 & 1) != 0) {
    goto LABEL_32;
  }
  if (qword_100328B28 != -1) {
    uint64_t v30 = swift_once(&qword_100328B28, sub_1000EF5B8);
  }
  uint64_t v33 = sub_1000F3D64(v30, v31, (void *)qword_10033E190);
  if ((v33 & 1) == 0)
  {
    if (qword_100328B30 != -1) {
      uint64_t v33 = swift_once(&qword_100328B30, sub_1000EF5CC);
    }
    if ((sub_1000F3D64(v33, v34, (void *)qword_10033E198) & 1) == 0)
    {
LABEL_32:
      sub_100086144();
      sub_10007BA44();
      uint64_t v45 = sub_1000F1F2C((os_log_s *)v11);
      uint64_t v47 = v46;

      sub_1000F3D8C();
      *(void *)(v0 + 232) = v45;
      *(void *)(v0 + 240) = v47;
      goto LABEL_43;
    }
  }

  uint64_t v35 = *(void *)(v0 + 512);
  uint64_t v36 = *(void *)(v0 + 472);
  sub_1000F3C5C(*(void *)(v0 + 536), v35, (uint64_t *)&unk_10032A1C0);
  if (sub_10007D824(v35, 1LL, v36) != 1)
  {
    uint64_t v428 = *(void *)(v0 + 528);
    uint64_t v155 = *(void *)(v0 + 504);
    uint64_t v156 = *(void *)(v0 + 512);
    uint64_t v157 = *(void *)(v0 + 480);
    uint64_t v158 = *(void *)(v0 + 488);
    uint64_t v159 = *(void *)(v0 + 472);
    sub_100086144();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 32))(v158, v156, v159);
    sub_1000F0DF4(v158, v437, v155);

    sub_1000F3D8C();
    (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v158, v159);
    sub_100087418(v428, (uint64_t *)&unk_10032A1C0);
    sub_10007D0AC(v155, 0LL, 1LL, v159);
    sub_10008521C(v155, v428);
LABEL_43:
    uint64_t v5 = v0 + 232;
    if (qword_100328B40 == -1)
    {
LABEL_44:
      uint64_t v161 = *(void *)(v0 + 392);
      uint64_t v160 = *(void *)(v0 + 400);
      uint64_t v162 = *(void *)(v0 + 376);
      sub_1000F3CCC(*(void *)(v0 + 432), (uint64_t)qword_10033E1A8);
      sub_1000F3CB4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v161 + 32));
      uint64_t v163 = *(void *)(v0 + 232);
      uint64_t v164 = *(void *)(v0 + 240);
      sub_1000F3B98(v162);
      sub_1000930E4();
      uint64_t v165 = (os_log_s *)sub_100093C38();
      os_log_type_t v166 = static os_log_type_t.default.getter(v165);
      if (sub_1000B4208(v166))
      {
        uint64_t v367 = v163;
        unint64_t v167 = *(void *)(v0 + 576);
        uint64_t v351 = *(void *)(v0 + 568);
        sub_1000F3DB4();
        uint64_t v424 = *(void *)(v0 + 384);
        uint64_t v429 = v168;
        uint64_t v443 = v5;
        uint64_t v169 = *(void *)(v0 + 376);
        uint64_t v170 = sub_10007B9FC(38LL);
        uint64_t v383 = sub_10007B9FC(96LL);
        v445[0] = v383;
        *(_DWORD *)uint64_t v170 = 136446978;
        *(void *)(v0 + 288) = sub_1000F3CA0((uint64_t)&unk_10027C630);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v170 + 4);
        *(_WORD *)(v170 + 12) = 2082;
        sub_1000AA78C();
        *(void *)(v0 + 296) = sub_1000F3D0C();
        sub_1000F3D70(v0 + 296, v0 + 304);
        sub_100086144();
        *(_WORD *)(v170 + 22) = 2082;
        swift_bridgeObjectRetain(v167);
        *(void *)(v0 + 304) = sub_10007A488(v351, v167, v445);
        sub_1000F3D70(v0 + 304, v0 + 312);
        swift_bridgeObjectRelease(v167);
        uint64_t v171 = v169;
        uint64_t v5 = v443;
        sub_1000F3BFC(v171);
        *(_WORD *)(v170 + 32) = 1024;
        *(_DWORD *)(v0 + 600) = sub_1000F3000(v367, v164) & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 604, v170 + 34);
        sub_1000930DC();
        _os_log_impl( (void *)&_mh_execute_header,  v165,  (os_log_type_t)v160,  "[%{public}s][%{public}s]: Lookup for %{public}s completed. App Store: %{BOOL}d",  (uint8_t *)v170,  0x26u);
        sub_1000F3D1C(v383, v172, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v383);
        sub_10007B974(v170);

        (*(void (**)(uint64_t, uint64_t))(v413 + 8))(v429, v424);
      }

      else
      {
        sub_1000F3BFC(*(void *)(v0 + 376));
        sub_1000930DC();

        uint64_t v173 = sub_1000F3D24();
        v175(v173, v174);
      }

      v270 = *(void **)(v0 + 584);
      v286 = *(void **)(v0 + 560);
      v302 = *(void **)(v0 + 552);
      uint64_t v318 = *(void *)(v0 + 544);
      uint64_t v176 = *(void *)(v0 + 536);
      uint64_t v177 = *(void *)(v0 + 528);
      uint64_t v178 = *(void *)(v0 + 504);
      uint64_t v334 = *(void *)(v0 + 520);
      uint64_t v352 = *(void *)(v0 + 512);
      uint64_t v179 = *(void *)(v0 + 496);
      uint64_t v368 = *(void *)(v0 + 488);
      uint64_t v384 = *(void *)(v0 + 464);
      uint64_t v397 = *(void *)(v0 + 456);
      uint64_t typeg = *(void *)(v0 + 448);
      uint64_t v417 = *(void *)(v0 + 440);
      uint64_t v425 = *(void *)(v0 + 424);
      uint64_t v430 = *(void *)(v0 + 416);
      uint64_t v436 = *(void *)(v0 + 408);
      uint64_t v444 = *(void *)(v0 + 400);
      uint64_t v180 = *(void *)(v0 + 376);
      swift_beginAccess(v5, v0 + 192, 0LL, 0LL);
      uint64_t v181 = *(void *)(v0 + 232);
      uint64_t v182 = *(void *)(v0 + 240);
      sub_1000F3C5C(v176, v178, (uint64_t *)&unk_10032A1C0);
      char v183 = *(_BYTE *)(v180 + 64);
      sub_1000F3C5C(v177, v179, (uint64_t *)&unk_10032A1C0);
      id v184 = objc_allocWithZone((Class)&OBJC_CLASS___SKProductLookupResponse);
      swift_bridgeObjectRetain(v437);
      id v185 = sub_1000F3798(v431, v181, v182, v178, v183, v437, v179);

      swift_unknownObjectRelease(v318);
      sub_100087418(v177, (uint64_t *)&unk_10032A1C0);
      sub_100087418(v176, (uint64_t *)&unk_10032A1C0);
      swift_task_dealloc(v176);
      sub_1000AABB0();
      uint64_t v186 = swift_task_dealloc(v334);
      sub_100093AD0( v186,  v187,  v188,  v189,  v190,  v191,  v192,  v193,  (uint64_t)v270,  (uint64_t)v286,  (uint64_t)v302,  v318,  v334,  v352);
      swift_task_dealloc(v178);
      uint64_t v194 = swift_task_dealloc(v179);
      uint64_t v202 = sub_100093AF8(v194, v195, v196, v197, v198, v199, v200, v201, v271, v287, v303, v319, v335, v353, v368);
      uint64_t v210 = sub_1000CB828( v202,  v203,  v204,  v205,  v206,  v207,  v208,  v209,  v272,  v288,  v304,  v320,  v336,  v354,  v369,  v384);
      uint64_t v218 = sub_1000CB8F8( v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v273,  v289,  v305,  v321,  v337,  v355,  v370,  v385,  v397);
      uint64_t v226 = sub_1000CB8F0( v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225,  v274,  v290,  v306,  v322,  v338,  v356,  v371,  v386,  v398,  typeg);
      uint64_t v234 = sub_1000F3D54( v226,  v227,  v228,  v229,  v230,  v231,  v232,  v233,  v275,  v291,  v307,  v323,  v339,  v357,  v372,  v387,  v399,  typeh,  v417);
      uint64_t v242 = sub_1000F3D9C( v234,  v235,  v236,  v237,  v238,  v239,  v240,  v241,  v276,  v292,  v308,  v324,  v340,  v358,  v373,  v388,  v400,  typei,  v418,  v425);
      sub_1000F3D78( v242,  v243,  v244,  v245,  v246,  v247,  v248,  v249,  v277,  v293,  v309,  v325,  v341,  v359,  v374,  v389,  v401,  typej,  v419,  v426,  v430);
      swift_task_dealloc(v436);
      swift_task_dealloc(v444);
      return (*(uint64_t (**)(id))(v0 + 8))(v185);
    }

LABEL_56:
    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_44;
  }

  sub_100087418(*(void *)(v0 + 512), (uint64_t *)&unk_10032A1C0);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v37 = *(void *)(v0 + 392);
  sub_1000F3CCC(*(void *)(v0 + 432), (uint64_t)qword_10033E1A8);
  sub_1000F3CB4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32));
  sub_1000F3CFC();
  sub_1000F3CFC();
  sub_1000F3CFC();
  sub_1000F3CFC();
  sub_1000AA78C();
  uint64_t v5 = sub_100093C38();
  os_log_type_t v38 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled((os_log_t)v5, v38))
  {
    uint64_t v310 = v0 + 336;
    unint64_t v326 = *(void *)(v0 + 576);
    uint64_t v342 = *(void *)(v0 + 568);
    sub_1000F3DB4();
    uint64_t v39 = *(void *)(v0 + 376);
    v391 = (os_log_s *)v5;
    uint64_t v5 = sub_10007B9FC(42LL);
    uint64_t typea = sub_10007B9FC(128LL);
    v445[0] = typea;
    *(_DWORD *)uint64_t v5 = 136446978;
    *(void *)(v0 + 320) = sub_1000F3CA0((uint64_t)&unk_10027C630);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v5 + 4);
    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v278 = v5 + 14;
    uint64_t v40 = *(void *)(v39 + 40);
    unint64_t v41 = *(void *)(v39 + 48);
    sub_1000930E4();
    *(void *)(v0 + 328) = sub_10007A488(v40, v41, v445);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v5 + 14);
    sub_1000930DC();
    sub_1000F3CC4();
    sub_1000F3CC4();
    *(_WORD *)(v5 + 22) = 2082;
    uint64_t v294 = v5 + 24;
    sub_1000930E4();
    *(void *)(v0 + 336) = sub_10007A488(v342, v326, v445);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v5 + 24);
    sub_1000930DC();
    sub_1000F3CC4();
    sub_1000F3CC4();
    *(_WORD *)(v5 + 32) = 2080;
    sub_1000AA78C();
    *(void *)(v0 + 344) = sub_1000F3D0C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v420, v5 + 34);
    swift_bridgeObjectRelease_n(v32, 3LL);
    sub_1000F3DAC( (void *)&_mh_execute_header,  v391,  v38,  "[%{public}s][%{public}s]: Lookup for %{public}s (%s) is missing a URL",  (uint8_t *)v5);
    swift_arrayDestroy(typea, 4LL, (char *)&type metadata for Any + 8);
    sub_10007B974(typea);
    sub_10007B974(v5);

    uint64_t v42 = sub_1000F3DC0();
  }

  else
  {
    uint64_t v250 = *(void *)(v0 + 424);
    uint64_t v251 = *(void *)(v0 + 384);
    uint64_t v252 = *(void *)(v0 + 392);
    sub_1000F3CC4();
    sub_1000F3CC4();
    sub_1000F3CC4();
    sub_1000F3CC4();
    swift_bridgeObjectRelease_n(v32, 2LL);

    id v44 = *(void (**)(uint64_t, uint64_t))(v252 + 8);
    uint64_t v42 = v250;
    uint64_t v43 = v251;
  }

  v44(v42, v43);
  uint64_t v51 = v440;
  unint64_t v60 = off_100328000;
  static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
  id v253 = objc_allocWithZone(&OBJC_CLASS___NSError);
  id v254 = sub_1000F3CE0();
  sub_1000F3D80((uint64_t)v254, v255, v256, v257, v258, v259, v260);

LABEL_36:
  swift_errorRetain(v5);
  sub_10007BA44();
  sub_10007B980();
  if (v60[360] != (__CFString *)-1LL) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  unint64_t v61 = *(os_log_s **)(v0 + 448);
  uint64_t v62 = *(void *)(v0 + 408);
  uint64_t v63 = *(void *)(v0 + 392);
  sub_1000F3CCC(*(void *)(v0 + 432), (uint64_t)qword_10033E1A8);
  sub_1000F3CB4(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32));
  sub_1000F3CFC();
  swift_errorRetain(v5);
  sub_100093C38();
  os_log_type_t v64 = sub_1000F3DA4();
  if (sub_1000B4208(v64))
  {
    os_log_type_t v432 = v62;
    unint64_t v65 = *(void *)(v0 + 576);
    uint64_t v376 = *(void *)(v0 + 568);
    uint64_t v441 = *(void *)(v0 + 408);
    uint64_t v434 = *(void *)(v0 + 392);
    uint64_t v66 = *(void *)(v0 + 376);
    uint64_t v438 = *(void *)(v0 + 384);
    uint64_t v67 = sub_10007B9FC(42LL);
    typeb = (void *)sub_10007B9FC(8LL);
    uint64_t v421 = sub_10007B9FC(96LL);
    v445[0] = v421;
    *(_DWORD *)uint64_t v67 = 136446978;
    *(void *)(v0 + 272) = sub_1000F3CA0((uint64_t)&unk_10027C630);
    sub_1000E98A0(v0 + 272, v0 + 280);
    *(_WORD *)(v67 + 12) = 2082;
    uint64_t v68 = *(void *)(v66 + 40);
    unint64_t v69 = *(void *)(v66 + 48);
    swift_bridgeObjectRetain(v69);
    *(void *)(v0 + 264) = sub_10007A488(v68, v69, v445);
    sub_1000E98A0(v0 + 264, v0 + 272);
    swift_bridgeObjectRelease(v69);
    *(_WORD *)(v67 + 22) = 2082;
    swift_bridgeObjectRetain(v65);
    *(void *)(v0 + 256) = sub_10007A488(v376, v65, v445);
    sub_1000F3D70(v0 + 256, v0 + 264);
    swift_bridgeObjectRelease(v65);
    sub_1000F3CC4();
    *(_WORD *)(v67 + 32) = 2112;
    uint64_t v70 = _convertErrorToNSError(_:)(v5);
    *(void *)(v0 + 248) = v70;
    sub_1000C6390(v0 + 248, v0 + 256);
    void *typeb = v70;
    uint64_t v71 = v5;
    swift_errorRelease(v5);
    sub_1000F3DAC( (void *)&_mh_execute_header,  v61,  v432,  "[%{public}s][%{public}s]: Lookup for %{public}s completed with error: %@",  (uint8_t *)v67);
    uint64_t v72 = sub_10007B1FC(&qword_10032B340);
    swift_arrayDestroy(typeb, 1LL, v72);
    sub_10007B974((uint64_t)typeb);
    sub_1000F3D1C(v421, v73, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v421);
    sub_10007B974(v67);

    uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v434 + 8))(v441, v438);
  }

  else
  {
    sub_1000F3D44();
    swift_errorRelease(v5);

    uint64_t v81 = sub_1000F3D24();
    uint64_t v74 = v82(v81);
    uint64_t v71 = v5;
  }

  uint64_t v83 = *(void **)(v0 + 584);
  id v84 = *(void **)(v0 + 560);
  id v85 = *(void **)(v0 + 552);
  uint64_t v86 = *(void *)(v0 + 544);
  uint64_t v87 = *(void *)(v0 + 536);
  uint64_t v88 = *(void *)(v0 + 528);
  uint64_t v89 = *(void *)(v0 + 520);
  uint64_t v343 = *(void *)(v0 + 512);
  uint64_t v360 = *(void *)(v0 + 504);
  uint64_t v377 = *(void *)(v0 + 496);
  uint64_t v392 = *(void *)(v0 + 488);
  uint64_t typec = *(void *)(v0 + 464);
  uint64_t v414 = *(void *)(v0 + 456);
  uint64_t v422 = *(void *)(v0 + 448);
  uint64_t v427 = *(void *)(v0 + 440);
  uint64_t v433 = *(void *)(v0 + 424);
  uint64_t v435 = *(void *)(v0 + 416);
  uint64_t v439 = *(void *)(v0 + 408);
  uint64_t v442 = *(void *)(v0 + 400);
  swift_willThrow(v74, v75, v76, v77, v78, v79, v80);

  swift_unknownObjectRelease(v86);
  swift_errorRelease(v71);
  sub_1000F3D04(v88);
  sub_1000F3D04(v87);
  swift_task_dealloc(v87);
  sub_1000AABB0();
  uint64_t v90 = swift_task_dealloc(v89);
  uint64_t v98 = sub_100093AD0(v90, v91, v92, v93, v94, v95, v96, v97, v262, v278, v294, v310, v326, v343);
  uint64_t v106 = sub_100093AF8(v98, v99, v100, v101, v102, v103, v104, v105, v263, v279, v295, v311, v327, v344, v360);
  uint64_t v114 = sub_1000CB828(v106, v107, v108, v109, v110, v111, v112, v113, v264, v280, v296, v312, v328, v345, v361, v377);
  uint64_t v122 = sub_1000CB8F8( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v265,  v281,  v297,  v313,  v329,  v346,  v362,  v378,  v392);
  uint64_t v130 = sub_1000CB8F0( v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v266,  v282,  v298,  v314,  v330,  v347,  v363,  v379,  v393,  typec);
  uint64_t v138 = sub_1000F3D54( v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v267,  v283,  v299,  v315,  v331,  v348,  v364,  v380,  v394,  typed,  v414);
  uint64_t v146 = sub_1000F3D9C( v138,  v139,  v140,  v141,  v142,  v143,  v144,  v145,  v268,  v284,  v300,  v316,  v332,  v349,  v365,  v381,  v395,  typee,  v415,  v422);
  sub_1000F3D78( v146,  v147,  v148,  v149,  v150,  v151,  v152,  v153,  v269,  v285,  v301,  v317,  v333,  v350,  v366,  v382,  v396,  typef,  v416,  v423,  v427);
  swift_task_dealloc(v433);
  swift_task_dealloc(v435);
  swift_task_dealloc(v439);
  swift_task_dealloc(v442);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F0A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(v7 + 592);
  swift_errorRetain(v8);
  swift_bridgeObjectRelease(0LL);
  sub_10007B980();
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v9 = *(void *)(v7 + 448);
  id v10 = *(os_log_s **)(v7 + 408);
  uint64_t v11 = *(void *)(v7 + 384);
  uint64_t v12 = *(void *)(v7 + 392);
  uint64_t v13 = *(void *)(v7 + 376);
  sub_1000F3CCC(*(void *)(v7 + 432), (uint64_t)qword_10033E1A8);
  (*(void (**)(os_log_s *, uint64_t, uint64_t))(v12 + 32))(v10, v9, v11);
  sub_1000F3B98(v13);
  uint64_t v14 = swift_errorRetain(v8);
  id v15 = v10;
  Logger.logObject.getter(v14);
  os_log_type_t v16 = sub_1000F3DA4();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = *(void *)(v7 + 576);
    uint64_t v140 = *(void *)(v7 + 568);
    sub_1000F3DB4();
    uint64_t v18 = *(void *)(v7 + 376);
    uint64_t v185 = *(void *)(v7 + 384);
    uint64_t v188 = v19;
    uint64_t v20 = sub_10007B9FC(42LL);
    uint64_t v149 = (void *)sub_10007B9FC(8LL);
    uint64_t v176 = sub_10007B9FC(96LL);
    v190[0] = v176;
    *(_DWORD *)uint64_t v20 = 136446978;
    *(void *)(v7 + 272) = sub_1000F3CA0((uint64_t)&unk_10027C630);
    sub_1000E98A0(v7 + 272, v7 + 280);
    *(_WORD *)(v20 + 12) = 2082;
    uint64_t v21 = *(void *)(v18 + 40);
    unint64_t v22 = *(void *)(v18 + 48);
    sub_1000AA78C();
    *(void *)(v7 + 264) = sub_10007A488(v21, v22, v190);
    sub_1000C6390(v7 + 264, v7 + 272);
    sub_100086144();
    *(_WORD *)(v20 + 22) = 2082;
    swift_bridgeObjectRetain(v17);
    *(void *)(v7 + 256) = sub_10007A488(v140, v17, v190);
    sub_1000C6390(v7 + 256, v7 + 264);
    swift_bridgeObjectRelease(v17);
    sub_1000F3BFC(v18);
    *(_WORD *)(v20 + 32) = 2112;
    uint64_t v23 = _convertErrorToNSError(_:)(v8);
    *(void *)(v7 + 248) = v23;
    sub_1000C6390(v7 + 248, v7 + 256);
    *uint64_t v149 = v23;
    sub_1000F3D5C();
    sub_1000F3DAC( (void *)&_mh_execute_header,  v15,  v16,  "[%{public}s][%{public}s]: Lookup for %{public}s completed with error: %@",  (uint8_t *)v20);
    uint64_t v24 = sub_10007B1FC(&qword_10032B340);
    swift_arrayDestroy(v149, 1LL, v24);
    sub_10007B974((uint64_t)v149);
    sub_1000F3D1C(v176, v25, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v176);
    sub_10007B974(v20);

    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v181 + 8))(v188, v185);
  }

  else
  {
    sub_1000F3D44();
    sub_1000F3D5C();

    uint64_t v33 = sub_1000F3D24();
    uint64_t v26 = v35(v33, v34);
  }

  uint64_t v36 = *(void **)(v7 + 584);
  uint64_t v37 = *(void **)(v7 + 560);
  os_log_type_t v38 = *(void **)(v7 + 552);
  uint64_t v39 = *(void *)(v7 + 544);
  uint64_t v40 = *(void *)(v7 + 536);
  uint64_t v41 = *(void *)(v7 + 528);
  uint64_t v42 = *(void *)(v7 + 520);
  uint64_t v116 = *(void *)(v7 + 512);
  uint64_t v124 = *(void *)(v7 + 504);
  uint64_t v132 = *(void *)(v7 + 496);
  uint64_t v141 = *(void *)(v7 + 488);
  uint64_t v150 = *(void *)(v7 + 464);
  uint64_t v158 = *(void *)(v7 + 456);
  uint64_t v165 = *(void *)(v7 + 448);
  uint64_t v171 = *(void *)(v7 + 440);
  uint64_t v177 = *(void *)(v7 + 424);
  uint64_t v182 = *(void *)(v7 + 416);
  uint64_t v186 = *(void *)(v7 + 408);
  uint64_t v189 = *(void *)(v7 + 400);
  swift_willThrow(v26, v27, v28, v29, v30, v31, v32);

  swift_unknownObjectRelease(v39);
  sub_1000F3D5C();
  sub_1000F3D04(v41);
  sub_1000F3D04(v40);
  swift_task_dealloc(v40);
  sub_1000AABB0();
  swift_task_dealloc(v42);
  swift_task_dealloc(v116);
  swift_task_dealloc(v124);
  swift_task_dealloc(v132);
  uint64_t v43 = swift_task_dealloc(v141);
  uint64_t v51 = sub_100093AD0(v43, v44, v45, v46, v47, v48, v49, v50, v108, v116, v124, v132, v141, v150);
  uint64_t v59 = sub_100093AF8(v51, v52, v53, v54, v55, v56, v57, v58, v109, v117, v125, v133, v142, v151, v158);
  uint64_t v67 = sub_1000CB828(v59, v60, v61, v62, v63, v64, v65, v66, v110, v118, v126, v134, v143, v152, v159, v165);
  uint64_t v75 = sub_1000CB8F8(v67, v68, v69, v70, v71, v72, v73, v74, v111, v119, v127, v135, v144, v153, v160, v166, v171);
  uint64_t v83 = sub_1000CB8F0( v75,  v76,  v77,  v78,  v79,  v80,  v81,  v82,  v112,  v120,  v128,  v136,  v145,  v154,  v161,  v167,  v172,  v177);
  uint64_t v91 = sub_1000F3D54( v83,  v84,  v85,  v86,  v87,  v88,  v89,  v90,  v113,  v121,  v129,  v137,  v146,  v155,  v162,  v168,  v173,  v178,  v182);
  uint64_t v99 = sub_1000F3D9C( v91,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v114,  v122,  v130,  v138,  v147,  v156,  v163,  v169,  v174,  v179,  v183,  v186);
  sub_1000F3D78( v99,  v100,  v101,  v102,  v103,  v104,  v105,  v106,  v115,  v123,  v131,  v139,  v148,  v157,  v164,  v170,  v175,  v180,  v184,  v187,  v189);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000F0DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v172 = a3;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v173 = *(void *)(v6 - 8);
  uint64_t v174 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v165 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v162 = (char *)&v154 - v9;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v185 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  id v15 = (char *)&v154 - v14;
  uint64_t v192 = type metadata accessor for SKLogger(0LL);
  uint64_t v16 = __chkstk_darwin(v192);
  uint64_t v176 = (uint64_t)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v189 = (uint64_t)&v154 - v19;
  __chkstk_darwin(v18);
  uint64_t v160 = (uint64_t)&v154 - v20;
  uint64_t v21 = sub_10007B1FC(&qword_10032B730);
  __chkstk_darwin(v21);
  uint64_t v169 = (uint64_t)&v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v168 = *(void *)(v170 - 8);
  uint64_t v23 = __chkstk_darwin(v170);
  uint64_t v167 = (char *)&v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v166 = (char *)&v154 - v25;
  uint64_t v26 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v164 = (char *)&v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v161 = (char *)&v154 - v29;
  uint64_t v30 = sub_10007B1FC(&qword_10032A590);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v163 = (uint64_t)&v154 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v175 = (uint64_t)&v154 - v33;
  uint64_t v171 = a1;
  uint64_t v34 = a1;
  uint64_t v35 = v3;
  URLComponents.init(url:resolvingAgainstBaseURL:)(v34, 1LL);
  uint64_t v36 = *(void *)(a2 + 64);
  uint64_t v186 = a2 + 64;
  uint64_t v37 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v38 = -1LL;
  if (v37 < 64) {
    uint64_t v38 = ~(-1LL << v37);
  }
  unint64_t v39 = v38 & v36;
  int64_t v187 = (unint64_t)(v37 + 63) >> 6;
  uint64_t v193 = &v211;
  uint64_t v40 = v208;
  uint64_t v41 = &v205[5];
  uint64_t v180 = &v204;
  uint64_t v181 = &v198;
  __n128 v42 = swift_bridgeObjectRetain(a2);
  uint64_t v43 = 0LL;
  uint64_t v177 = _swiftEmptyArrayStorage;
  v42.n128_u64[0] = 136446722LL;
  __n128 v182 = v42;
  unint64_t v179 = (unint64_t)&unk_10027C630;
  unint64_t v159 = 0x800000010027C630LL;
  uint64_t v158 = (char *)&type metadata for Any + 8;
  uint64_t v183 = a2;
  uint64_t v184 = v10;
  uint64_t v178 = v35;
  uint64_t v188 = v15;
  uint64_t v190 = &v205[5];
  uint64_t v191 = v208;
  while (2)
  {
    uint64_t v44 = v185;
    if (v39)
    {
LABEL_5:
      unint64_t v194 = (v39 - 1) & v39;
      uint64_t v195 = v43;
      unint64_t v45 = __clz(__rbit64(v39)) | ((void)v43 << 6);
      goto LABEL_20;
    }

    while (1)
    {
      int64_t v46 = (int64_t)(v43 + 1);
      if (__OFADD__(v43, 1LL))
      {
        __break(1u);
        goto LABEL_82;
      }

      if (v46 >= v187) {
        goto LABEL_67;
      }
      unint64_t v47 = *(void *)(v186 + 8 * v46);
      int64_t v48 = (int64_t)(v43 + 1);
      if (!v47)
      {
        int64_t v48 = (int64_t)(v43 + 2);
        unint64_t v47 = *(void *)(v186 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = (int64_t)(v43 + 3);
          unint64_t v47 = *(void *)(v186 + 8 * v48);
          if (!v47)
          {
            uint64_t v49 = v43 + 4;
            if ((uint64_t)(v43 + 4) < v187)
            {
              unint64_t v47 = *(void *)(v186 + 8LL * (void)v49);
              if (v47)
              {
                int64_t v48 = (int64_t)(v43 + 4);
                goto LABEL_19;
              }

              while (1)
              {
                int64_t v48 = (int64_t)(v49 + 1);
                if (__OFADD__(v49, 1LL)) {
                  break;
                }
                if (v48 >= v187) {
                  goto LABEL_67;
                }
                unint64_t v47 = *(void *)(v186 + 8 * v48);
                ++v49;
                if (v47) {
                  goto LABEL_19;
                }
              }

LABEL_82:
              __break(1u);
LABEL_83:
              swift_once(&qword_100328B40, sub_1000F4208);
LABEL_77:
              uint64_t v127 = sub_100079604(v192, (uint64_t)qword_10033E1A8);
              sub_10007961C(v127, v176);
              *(void *)&v209[0] = 0LL;
              *((void *)&v209[0] + 1) = 0xE000000000000000LL;
              _StringGuts.grow(_:)(39LL);
              uint64_t v128 = swift_bridgeObjectRelease(*((void *)&v209[0] + 1));
              strcpy((char *)v209, "Original URL: ");
              HIBYTE(v209[0]) = -18;
              v129._uint64_t countAndFlagsBits = URL.absoluteString.getter(v128);
              object = v129._object;
              String.append(_:)(v129);
              swift_bridgeObjectRelease(object);
              v131._uint64_t countAndFlagsBits = 0x3A736D6172617020LL;
              v131._object = (void *)0xE900000000000020LL;
              String.append(_:)(v131);
              v132._uint64_t countAndFlagsBits = Dictionary.description.getter( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
              uint64_t v133 = v132._object;
              String.append(_:)(v132);
              swift_bridgeObjectRelease(v133);
              v134._uint64_t countAndFlagsBits = 0x4C52552077654E0ALL;
              v134._object = (void *)0xEA0000000000203ALL;
              String.append(_:)(v134);
              uint64_t v135 = v165;
              URL.absoluteURL.getter();
              unint64_t v136 = sub_1000D6744();
              uint64_t v137 = v174;
              v138._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v174, v136);
              uint64_t v139 = v138._object;
              String.append(_:)(v138);
              swift_bridgeObjectRelease(v139);
              uint64_t v140 = (*(uint64_t (**)(char *, uint64_t))(v173 + 8))(v135, v137);
              __int128 v141 = v209[0];
              uint64_t v142 = *(void *)(v178 + 40);
              uint64_t v143 = *(void **)(v178 + 48);
              os_log_type_t v144 = static os_log_type_t.debug.getter(v140);
              swift_bridgeObjectRetain_n(v143, 2LL);
              uint64_t v145 = swift_bridgeObjectRetain_n(*((void *)&v141 + 1), 2LL);
              uint64_t v146 = (os_log_s *)Logger.logObject.getter(v145);
              os_log_type_t v147 = v144;
              if (os_log_type_enabled(v146, v144))
              {
                uint64_t v148 = swift_slowAlloc(22LL, -1LL);
                uint64_t v149 = swift_slowAlloc(64LL, -1LL);
                uint64_t v195 = (char *)&type metadata for Any + 8;
                uint64_t v150 = v149;
                *(void *)&v206[0] = v149;
                *(_DWORD *)uint64_t v148 = 136446466;
                unint64_t v194 = v141;
                *(void *)&v209[0] = 91LL;
                *((void *)&v209[0] + 1) = 0xE100000000000000LL;
                swift_bridgeObjectRetain(v143);
                v151._uint64_t countAndFlagsBits = v142;
                v151._object = v143;
                String.append(_:)(v151);
                v152._uint64_t countAndFlagsBits = 8285LL;
                v152._object = (void *)0xE200000000000000LL;
                String.append(_:)(v152);
                swift_bridgeObjectRelease(v143);
                uint64_t v153 = *((void *)&v209[0] + 1);
                *(void *)&v209[0] = sub_10007A488( *(uint64_t *)&v209[0],  *((unint64_t *)&v209[0] + 1),  (uint64_t *)v206);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v209, (char *)v209 + 8, v148 + 4);
                swift_bridgeObjectRelease_n(v143, 2LL);
                swift_bridgeObjectRelease(v153);
                *(_WORD *)(v148 + 12) = 2082;
                swift_bridgeObjectRetain(*((void *)&v141 + 1));
                *(void *)&v209[0] = sub_10007A488(v194, *((unint64_t *)&v141 + 1), (uint64_t *)v206);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(v209, (char *)v209 + 8, v148 + 14);
                swift_bridgeObjectRelease_n(*((void *)&v141 + 1), 3LL);
                _os_log_impl((void *)&_mh_execute_header, v146, v147, "%{public}s%{public}s", (uint8_t *)v148, 0x16u);
                swift_arrayDestroy(v150, 2LL, v195);
                swift_slowDealloc(v150, -1LL, -1LL);
                swift_slowDealloc(v148, -1LL, -1LL);
                swift_bridgeObjectRelease(*((void *)&v141 + 1));
              }

              else
              {

                swift_bridgeObjectRelease_n(*((void *)&v141 + 1), 3LL);
                swift_bridgeObjectRelease_n(v143, 2LL);
              }

              sub_10007A3CC(v176);
              return sub_100087418(v175, &qword_10032A590);
            }

LABEL_67:
            swift_release(a2);
            uint64_t v115 = v163;
            sub_1000F3C5C(v175, v163, &qword_10032A590);
            uint64_t v116 = type metadata accessor for URLComponents(0LL);
            int v117 = sub_10007D824(v115, 1LL, v116);
            uint64_t v119 = v173;
            uint64_t v118 = v174;
            uint64_t v120 = (uint64_t)v164;
            if (v117 == 1)
            {
              swift_bridgeObjectRelease(v177);
              uint64_t v121 = &qword_10032A590;
              uint64_t v122 = v115;
            }

            else
            {
              URLComponents.url.getter();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8LL))(v115, v116);
              if (sub_10007D824(v120, 1LL, v118) != 1)
              {
                uint64_t v125 = (uint64_t)v161;
                uint64_t v126 = v177;
                URL.appending(queryItems:)(v177);
                swift_bridgeObjectRelease(v126);
                (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v120, v118);
                uint64_t v123 = 0LL;
                uint64_t v124 = v162;
LABEL_73:
                sub_10007D0AC(v125, v123, 1LL, v118);
                (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v124, v171, v118);
                if (sub_10007D824(v125, 1LL, v118) == 1)
                {
                  (*(void (**)(uint64_t, char *, uint64_t))(v119 + 32))(v172, v124, v118);
                  sub_100087418(v125, (uint64_t *)&unk_10032A1C0);
                }

                else
                {
                  (*(void (**)(char *, uint64_t))(v119 + 8))(v124, v118);
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 32))(v172, v125, v118);
                }

                if (qword_100328B40 == -1) {
                  goto LABEL_77;
                }
                goto LABEL_83;
              }

              swift_bridgeObjectRelease(v177);
              uint64_t v121 = (uint64_t *)&unk_10032A1C0;
              uint64_t v122 = v120;
            }

            sub_100087418(v122, v121);
            uint64_t v123 = 1LL;
            uint64_t v125 = (uint64_t)v161;
            uint64_t v124 = v162;
            goto LABEL_73;
          }
        }
      }

uint64_t sub_1000F1F2C(os_log_s *a1)
{
  uint64_t v2 = v1;
  uint64_t v142 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v142 - 8);
  uint64_t v5 = __chkstk_darwin(v142);
  uint64_t v7 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  __int128 v141 = (char *)&v125 - v8;
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v125 - v13;
  uint64_t v143 = a1;
  uint64_t v16 = sub_1000F3994(a1);
  if (!v15) {
    return v16;
  }
  uint64_t v17 = v15;
  Swift::String v134 = v14;
  uint64_t v136 = v9;
  uint64_t v18 = sub_10007B1FC((uint64_t *)&unk_10032A690);
  uint64_t inited = swift_initStackObject(v18, v150);
  __int128 v133 = xmmword_10027A600;
  *(_OWORD *)(inited + 16) = xmmword_10027A600;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSExtensionPointName);
  *(void *)(inited + 40) = v20;
  *(void *)(inited + 48) = 0xD00000000000001FLL;
  *(void *)(inited + 56) = 0x80000001002A1FB0LL;
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSExtension);
  sub_10012181C(v21);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v21);
  v147[0] = 0LL;
  id v25 = sub_1000F39F4(v24, (uint64_t)v147, v22);
  id v26 = v147[0];
  uint64_t v27 = (char *)&type metadata for Any;
  if (!v25)
  {
    id v81 = v147[0];
    swift_bridgeObjectRelease(v17);
    uint64_t v82 = _convertNSErrorToError(_:)(v26);

    swift_willThrow(v83, v84, v85, v86, v87, v88, v89);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v90 = sub_100079604(v136, (uint64_t)qword_10033E1A8);
    sub_10007961C(v90, (uint64_t)v12);
    uint64_t v91 = v142;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v12, v142);
    sub_1000F3B98((uint64_t)v2);
    uint64_t v92 = swift_errorRetain(v82);
    uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
    os_log_type_t v94 = static os_log_type_t.info.getter(v93);
    if (os_log_type_enabled(v93, v94))
    {
      uint64_t v95 = swift_slowAlloc(32LL, -1LL);
      uint64_t v143 = v93;
      uint64_t v96 = v95;
      uint64_t v140 = (void *)swift_slowAlloc(8LL, -1LL);
      id v144 = (id)swift_slowAlloc(64LL, -1LL);
      v147[0] = v144;
      *(_DWORD *)uint64_t v96 = 136446722;
      uint64_t v129 = v4;
      *(void *)&__int128 v148 = sub_10007A488(0xD000000000000011LL, 0x800000010027C630LL, (uint64_t *)v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v96 + 4);
      *(_WORD *)(v96 + 12) = 2082;
      uint64_t v97 = v91;
      uint64_t v98 = v2[5];
      unint64_t v99 = v2[6];
      swift_bridgeObjectRetain(v99);
      uint64_t v100 = v98;
      uint64_t v91 = v97;
      *(void *)&__int128 v148 = sub_10007A488(v100, v99, (uint64_t *)v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v96 + 14);
      swift_bridgeObjectRelease(v99);
      sub_1000F3BFC((uint64_t)v2);
      *(_WORD *)(v96 + 22) = 2112;
      uint64_t v101 = _convertErrorToNSError(_:)(v82);
      *(void *)&__int128 v148 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v96 + 24);
      uint64_t v102 = v140;
      void *v140 = v101;
      uint64_t v4 = v129;
      swift_errorRelease(v82);
      uint64_t v103 = v143;
      _os_log_impl( (void *)&_mh_execute_header,  v143,  v94,  "[%{public}s][%{public}s]: Error retriving extension list: %@",  (uint8_t *)v96,  0x20u);
      uint64_t v104 = sub_10007B1FC(&qword_10032B340);
      swift_arrayDestroy(v102, 1LL, v104);
      swift_slowDealloc(v102, -1LL, -1LL);
      id v105 = v144;
      swift_arrayDestroy(v144, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v105, -1LL, -1LL);
      swift_slowDealloc(v96, -1LL, -1LL);

      swift_errorRelease(v82);
    }

    else
    {
      sub_1000F3BFC((uint64_t)v2);
      swift_errorRelease(v82);
      swift_errorRelease(v82);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v91);
    uint64_t v108 = v141;
    goto LABEL_119;
  }

  uint64_t v28 = v25;
  uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v25, (char *)&type metadata for Any + 8);
  id v30 = v26;

  uint64_t v31 = sub_1000F35E4(v29);
  swift_bridgeObjectRelease(v29);
  if (v31) {
    uint64_t v32 = (uint64_t)v31;
  }
  else {
    uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if (!((unint64_t)v32 >> 62))
  {
    uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v33) {
      goto LABEL_8;
    }
LABEL_116:
    swift_bridgeObjectRelease(v17);
    uint64_t v80 = v32;
LABEL_117:
    swift_bridgeObjectRelease(v80);
LABEL_118:
    uint64_t v108 = v141;
    uint64_t v91 = v142;
    goto LABEL_119;
  }

LABEL_112:
  if (v32 < 0) {
    uint64_t v110 = v32;
  }
  else {
    uint64_t v110 = v32 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v32);
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v110);
  swift_bridgeObjectRelease(v32);
  if (!v33) {
    goto LABEL_116;
  }
LABEL_8:
  unint64_t v34 = 0LL;
  uint64_t v140 = (void *)(v32 & 0xC000000000000001LL);
  uint64_t v132 = v32 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v137 = v32;
  uint64_t v131 = v32 + 32;
  unint64_t v127 = (unint64_t)"ensionSupportedItemKinds";
  BOOL v36 = v16 == 0xD000000000000015LL && v17 == 0x80000001002A2000LL;
  BOOL v130 = v36;
  BOOL v38 = v16 == 0x6572617774666F73LL && v17 == 0xED00006E4F646441LL;
  BOOL v126 = v38;
  unint64_t v139 = 0x80000001002A1FD0LL;
  Swift::String v138 = v27 + 8;
  unint64_t v128 = 0x80000001002A2020LL;
  uint64_t v135 = v33;
  while (1)
  {
    if (v140)
    {
      id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v137);
    }

    else
    {
      if (v34 >= *(void *)(v132 + 16)) {
        goto LABEL_111;
      }
      id v39 = *(id *)(v131 + 8 * v34);
    }

    uint64_t v40 = v39;
    if (__OFADD__(v34++, 1LL))
    {
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }

    uint64_t v42 = sub_1000F3A78(v39);
    if (!v42) {
      __break(1u);
    }
    uint64_t v43 = v42;
    *(void *)&__int128 v145 = 0xD000000000000028LL;
    *((void *)&v145 + 1) = v139;
    AnyHashable.init<A>(_:)(&v145, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v43 + 16) && (unint64_t v44 = sub_100132100((uint64_t)v147), (v45 & 1) != 0))
    {
      sub_10007B1C0(*(void *)(v43 + 56) + 32 * v44, (uint64_t)&v145);
    }

    else
    {
      __int128 v146 = 0u;
      __int128 v145 = 0u;
    }

    swift_bridgeObjectRelease(v43);
    sub_100087388((uint64_t)v147);
    id v144 = v40;
    if (*((void *)&v146 + 1))
    {
      sub_1000853B0(&v145, &v148);
      sub_10007B1C0((uint64_t)&v148, (uint64_t)v147);
      uint64_t v46 = sub_10007B1FC(&qword_10032A500);
      if (swift_dynamicCast(&v145, v147, v27 + 8, v46, 0LL))
      {
        uint64_t v32 = v145;
      }

      else if (swift_dynamicCast(&v145, v147, v27 + 8, &type metadata for String, 0LL))
      {
        __int128 v47 = v145;
        uint64_t v48 = sub_10007B1FC((uint64_t *)&unk_10032B180);
        uint64_t v32 = swift_allocObject(v48, 48LL, 7LL);
        *(_OWORD *)(v32 + 16) = v133;
        *(_OWORD *)(v32 + 32) = v47;
      }

      else
      {
        uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
      }

      sub_10007B1A0(v147);
      uint64_t v49 = *(char **)(v32 + 16);
      if (v49)
      {
        uint64_t v50 = *(void *)(v32 + 32);
        uint64_t v51 = *(void *)(v32 + 40);
        BOOL v52 = v50 == v16 && v17 == v51;
        if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, v16, v17, 0LL) & 1) != 0)
        {
LABEL_102:
          swift_bridgeObjectRelease(v137);
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease(v17);
          id v106 = v144;
          id v107 = [v144 identifier];
          if (!v107)
          {

            sub_10007B1A0(&v148);
            goto LABEL_118;
          }

          goto LABEL_107;
        }

        uint64_t v33 = v135;
        if (v49 == (char *)1)
        {
          swift_bridgeObjectRelease(v32);
          uint64_t v27 = (char *)&type metadata for Any;
        }

        else
        {
          uint64_t v53 = *(void *)(v32 + 48);
          uint64_t v54 = *(void *)(v32 + 56);
          BOOL v55 = v53 == v16 && v17 == v54;
          if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)(v53, v54, v16, v17, 0LL) & 1) != 0) {
            goto LABEL_102;
          }
          if (v49 != (char *)2)
          {
            uint64_t v56 = (uint64_t *)(v32 + 72);
            uint64_t v57 = 2LL;
            do
            {
              uint64_t v27 = (char *)(v57 + 1);
              if (__OFADD__(v57, 1LL)) {
                goto LABEL_110;
              }
              uint64_t v58 = *(v56 - 1);
              uint64_t v59 = *v56;
              BOOL v60 = v58 == v16 && v17 == v59;
              if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v16, v17, 0LL) & 1) != 0) {
                goto LABEL_102;
              }
              v56 += 2;
              ++v57;
            }

            while (v27 != v49);
          }

          swift_bridgeObjectRelease(v32);
          uint64_t v27 = (char *)&type metadata for Any;
          uint64_t v33 = v135;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v32);
      }

      sub_10007B1A0(&v148);
    }

    else
    {
      sub_100087418((uint64_t)&v145, (uint64_t *)&unk_100328ED0);
    }

    id v61 = -[os_log_s itemDictionary](v143, "itemDictionary", v125);
    uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v61, &type metadata for AnyHashable, v138);

    *(void *)&__int128 v145 = 0x6D614E726566666FLL;
    *((void *)&v145 + 1) = 0xE900000000000065LL;
    AnyHashable.init<A>(_:)(&v145, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v32 + 16))
    {
      unint64_t v62 = sub_100132100((uint64_t)v147);
      id v63 = v144;
      if ((v64 & 1) != 0)
      {
        sub_10007B1C0(*(void *)(v32 + 56) + 32 * v62, (uint64_t)&v148);
      }

      else
      {
        __int128 v148 = 0u;
        __int128 v149 = 0u;
      }
    }

    else
    {
      __int128 v148 = 0u;
      __int128 v149 = 0u;
      id v63 = v144;
    }

    swift_bridgeObjectRelease(v32);
    sub_100087388((uint64_t)v147);
    if (*((void *)&v149 + 1)) {
      break;
    }

    sub_100087418((uint64_t)&v148, (uint64_t *)&unk_100328ED0);
LABEL_96:
    if (v34 == v33)
    {
      swift_bridgeObjectRelease(v17);
      uint64_t v80 = v137;
      goto LABEL_117;
    }
  }

  if ((swift_dynamicCast(&v145, &v148, v27 + 8, &type metadata for String, 6LL) & 1) == 0)
  {

    goto LABEL_96;
  }

  uint64_t v65 = *((void *)&v145 + 1);
  if (!v130)
  {
    int v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000015LL, v127 | 0x8000000000000000LL, 0LL);
    if (((v66 | v126) & 1) == 0
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0x6572617774666F73LL, 0xED00006E4F646441LL, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease(v65);

      goto LABEL_95;
    }
  }

  uint64_t result = sub_1000F3A78(v63);
  if (!result)
  {
    __break(1u);
    return result;
  }

  uint64_t v32 = result;
  *(void *)&__int128 v145 = 0xD00000000000002CLL;
  *((void *)&v145 + 1) = v128;
  AnyHashable.init<A>(_:)(&v145, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v32 + 16) && (unint64_t v68 = sub_100132100((uint64_t)v147), (v69 & 1) != 0))
  {
    sub_10007B1C0(*(void *)(v32 + 56) + 32 * v68, (uint64_t)&v145);
  }

  else
  {
    __int128 v146 = 0u;
    __int128 v145 = 0u;
  }

  swift_bridgeObjectRelease(v32);
  sub_100087388((uint64_t)v147);
  if (!*((void *)&v146 + 1))
  {
    swift_bridgeObjectRelease(v65);

    sub_100087418((uint64_t)&v145, (uint64_t *)&unk_100328ED0);
LABEL_95:
    uint64_t v33 = v135;
    goto LABEL_96;
  }

  sub_1000853B0(&v145, &v148);
  sub_10007B1C0((uint64_t)&v148, (uint64_t)v147);
  uint64_t v70 = sub_10007B1FC(&qword_10032A500);
  int v71 = swift_dynamicCast(&v145, v147, v27 + 8, v70, 0LL);
  uint64_t v129 = v4;
  uint64_t v125 = v2;
  if (v71)
  {
    uint64_t v32 = v145;
  }

  else if (swift_dynamicCast(&v145, v147, v27 + 8, &type metadata for String, 0LL))
  {
    unint64_t v73 = *((void *)&v145 + 1);
    unint64_t v72 = v145;
    uint64_t v74 = sub_10007B1FC((uint64_t *)&unk_10032B180);
    uint64_t v32 = swift_allocObject(v74, 48LL, 7LL);
    *(_OWORD *)(v32 + 16) = v133;
    *(_OWORD *)(v32 + 32) = __PAIR128__(v73, v72);
    id v63 = v144;
    uint64_t v27 = (char *)&type metadata for Any;
  }

  else
  {
    uint64_t v32 = (uint64_t)_swiftEmptyArrayStorage;
  }

  sub_10007B1A0(v147);
  uint64_t v75 = *(void *)(v32 + 16);
  if (!v75)
  {
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v65);
LABEL_93:
    sub_10007B1A0(&v148);

    uint64_t v4 = v129;
    uint64_t v2 = v125;
    goto LABEL_95;
  }

  swift_bridgeObjectRetain(v32);
  uint64_t v76 = (void *)(v32 + 40);
  while (1)
  {
    uint64_t v78 = *(v76 - 1);
    uint64_t v77 = (void *)*v76;
    swift_bridgeObjectRetain(*v76);
    v79._uint64_t countAndFlagsBits = v78;
    v79._object = v77;
    if (String.hasPrefix(_:)(v79)) {
      break;
    }
    v76 += 2;
    swift_bridgeObjectRelease(v77);
    if (!--v75)
    {
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease_n(v32, 2LL);
      uint64_t v27 = (char *)&type metadata for Any;
      id v63 = v144;
      goto LABEL_93;
    }
  }

  swift_bridgeObjectRelease(v137);
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease_n(v32, 2LL);
  id v106 = v144;
  id v107 = [v144 identifier];
  if (v107)
  {
LABEL_107:
    uint64_t v109 = v107;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);

    sub_10007B1A0(&v148);
    return v16;
  }

  sub_10007B1A0(&v148);
  uint64_t v91 = v142;
  uint64_t v4 = v129;
  uint64_t v108 = v141;
  uint64_t v2 = v125;
LABEL_119:
  uint64_t v111 = v136;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v112 = sub_100079604(v111, (uint64_t)qword_10033E1A8);
  uint64_t v113 = (uint64_t)v134;
  sub_10007961C(v112, (uint64_t)v134);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v108, v113, v91);
  uint64_t v114 = sub_1000F3B98((uint64_t)v2);
  uint64_t v115 = (os_log_s *)Logger.logObject.getter(v114);
  uint64_t v116 = v91;
  os_log_type_t v117 = static os_log_type_t.default.getter(v115);
  if (os_log_type_enabled(v115, v117))
  {
    uint64_t v118 = swift_slowAlloc(32LL, -1LL);
    uint64_t v119 = (void *)swift_slowAlloc(96LL, -1LL);
    v147[0] = v119;
    *(_DWORD *)uint64_t v118 = 136446722;
    *(void *)&__int128 v148 = sub_10007A488(0xD000000000000011LL, 0x800000010027C630LL, (uint64_t *)v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v118 + 4);
    *(_WORD *)(v118 + 12) = 2082;
    uint64_t v120 = v4;
    uint64_t v121 = v2[5];
    unint64_t v122 = v2[6];
    swift_bridgeObjectRetain(v122);
    *(void *)&__int128 v148 = sub_10007A488(v121, v122, (uint64_t *)v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v118 + 14);
    swift_bridgeObjectRelease(v122);
    *(_WORD *)(v118 + 22) = 2080;
    uint64_t v123 = v2[1];
    unint64_t v124 = v2[2];
    swift_bridgeObjectRetain(v124);
    *(void *)&__int128 v148 = sub_10007A488(v123, v124, (uint64_t *)v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, (char *)&v148 + 8, v118 + 24);
    swift_bridgeObjectRelease(v124);
    sub_1000F3BFC((uint64_t)v2);
    _os_log_impl( (void *)&_mh_execute_header,  v115,  v117,  "[%{public}s][%{public}s]: No extension found for %s",  (uint8_t *)v118,  0x20u);
    swift_arrayDestroy(v119, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v119, -1LL, -1LL);
    swift_slowDealloc(v118, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v120 + 8))(v141, v142);
  }

  else
  {
    sub_1000F3BFC((uint64_t)v2);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v108, v116);
  }

  return 0LL;
}

uint64_t sub_1000F3000(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a1 == 0xD000000000000027LL && a2 == 0x80000001002A2050LL) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000027LL, 0x80000001002A2050LL, 0LL);
}

uint64_t sub_1000F3054@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v44 = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = &v39[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = sub_1000F3478(a3);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = v44;
    URLQueryItem.init(name:value:)(a1, a2, v16, v17);
    swift_bridgeObjectRelease(v18);
    uint64_t v20 = type metadata accessor for URLQueryItem(0LL);
    return sub_10007D0AC(v19, 0LL, 1LL, v20);
  }

  else
  {
    uint64_t v43 = a1;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v22 = sub_100079604(v13, (uint64_t)qword_10033E1A8);
    sub_10007961C(v22, (uint64_t)v15);
    uint64_t v23 = v10;
    uint64_t v24 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
    id v25 = v12;
    uint64_t v26 = v9;
    v24(v12, v15, v9);
    sub_10007B1C0(a3, (uint64_t)v48);
    sub_1000F3B98(v4);
    swift_bridgeObjectRetain(a2);
    sub_1000F3B98(v4);
    uint64_t v27 = swift_bridgeObjectRetain(a2);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v31 = swift_slowAlloc(42LL, -1LL);
      uint64_t v41 = swift_slowAlloc(128LL, -1LL);
      uint64_t v47 = v41;
      *(_DWORD *)uint64_t v31 = 136446978;
      uint64_t v42 = v23;
      uint64_t v45 = sub_10007A488(0xD000000000000011LL, 0x800000010027C630LL, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v31 + 4);
      *(_WORD *)(v31 + 12) = 2082;
      int v40 = v30;
      uint64_t v32 = *(void *)(v5 + 40);
      unint64_t v33 = *(void *)(v5 + 48);
      swift_bridgeObjectRetain(v33);
      uint64_t v45 = sub_10007A488(v32, v33, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v31 + 14);
      swift_bridgeObjectRelease(v33);
      sub_1000F3BFC(v5);
      sub_1000F3BFC(v5);
      *(_WORD *)(v31 + 22) = 2080;
      sub_10007B1C0((uint64_t)v48, (uint64_t)&v45);
      uint64_t v34 = String.init<A>(describing:)(&v45, (char *)&type metadata for Any + 8);
      unint64_t v36 = v35;
      uint64_t v45 = sub_10007A488(v34, v35, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v31 + 24);
      swift_bridgeObjectRelease(v36);
      sub_10007B1A0(v48);
      *(_WORD *)(v31 + 32) = 2080;
      swift_bridgeObjectRetain(a2);
      uint64_t v45 = sub_10007A488(v43, a2, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v31 + 34);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v40,  "[%{public}s][%{public}s]: Unhandled value: %s for key: %s",  (uint8_t *)v31,  0x2Au);
      uint64_t v37 = v41;
      swift_arrayDestroy(v41, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);

      (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v25, v26);
    }

    else
    {
      sub_1000F3BFC(v5);
      sub_1000F3BFC(v5);
      sub_10007B1A0(v48);

      swift_bridgeObjectRelease_n(a2, 2LL);
      (*(void (**)(_BYTE *, uint64_t))(v23 + 8))(v12, v26);
    }

    uint64_t v38 = type metadata accessor for URLQueryItem(0LL);
    return sub_10007D0AC(v44, 1LL, 1LL, v38);
  }

uint64_t sub_1000F3478(uint64_t a1)
{
  if (swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for String, 0LL))
  {
    uint64_t v1 = *(void *)&v4;
    goto LABEL_10;
  }

  if (swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for Int, 0LL))
  {
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
LABEL_9:
    uint64_t v1 = v2;
    goto LABEL_10;
  }

  if (swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for Double, 0LL))
  {
    uint64_t v2 = Double.description.getter(v4);
    goto LABEL_9;
  }

  if (swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for Float, 0LL))
  {
    uint64_t v2 = Float.description.getter(*(float *)&v4);
    goto LABEL_9;
  }

  if (swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 0LL))
  {
    if (LOBYTE(v4)) {
      uint64_t v1 = 1702195828LL;
    }
    else {
      uint64_t v1 = 0x65736C6166LL;
    }
  }

  else
  {
    uint64_t v1 = 0LL;
  }

void *sub_1000F35E4(uint64_t a1)
{
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v11;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_10007B1C0(i, (uint64_t)v10);
    uint64_t v4 = sub_10007CB7C(0LL, &qword_10032B738, &OBJC_CLASS___NSExtension_ptr);
    id v5 = v9;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v6 = v11[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
    uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
    specialized ContiguousArray._endMutation()(v7);
    if (!--v2) {
      return v11;
    }
  }

  id v9 = 0LL;
  swift_release(v11);

  return 0LL;
}

id sub_1000F36FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  id v11 = [v5 initWithBag:a1 caller:v9 keyProfile:v10];

  swift_unknownObjectRelease(a1);
  return v11;
}

id sub_1000F3798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (a1)
  {
    v15.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    if (a3)
    {
LABEL_3:
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a3);
      goto LABEL_6;
    }
  }

  else
  {
    v15.super.Class isa = 0LL;
    if (a3) {
      goto LABEL_3;
    }
  }

  NSString v16 = 0LL;
LABEL_6:
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v19 = 0LL;
  if (sub_10007D824(a4, 1LL, v17) != 1)
  {
    URL._bridgeToObjectiveC()(v18);
    uint64_t v19 = v20;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(a4, v17);
  }

  if (a6)
  {
    v21.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a6);
  }

  else
  {
    v21.super.Class isa = 0LL;
  }

  if (sub_10007D824(a7, 1LL, v17) == 1)
  {
    uint64_t v23 = 0LL;
  }

  else
  {
    URL._bridgeToObjectiveC()(v22);
    uint64_t v23 = v24;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(a7, v17);
  }

  id v25 = [v8 initWithResult:v15.super.isa extensionID:v16 productURL:v19 isEntitled:a5 & 1 parameters:v21.super.isa deepLinkURL:v23];

  return v25;
}

uint64_t sub_1000F3948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

unint64_t sub_1000F3970(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1000F3994(void *a1)
{
  id v1 = [a1 itemKind];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

id sub_1000F39F4(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v7 = [a3 extensionsWithMatchingAttributes:isa error:a2];

  return v7;
}

uint64_t sub_1000F3A78(void *a1)
{
  id v1 = [a1 infoDictionary];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  return v3;
}

void sub_1000F3AE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setPlatform:v4];
}

id sub_1000F3B24(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v7 = [a3 performLookupWithBundleIdentifiers:a1 itemIdentifiers:isa];

  return v7;
}

uint64_t sub_1000F3B98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v6 = *(id *)a1;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1000F3BFC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);

  return a1;
}

uint64_t sub_1000F3C5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10007B1FC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000F3CA0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007A488(0xD000000000000011LL, a1 | 0x8000000000000000LL, (uint64_t *)(v1 - 88));
}

uint64_t sub_1000F3CB4@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1, v3);
}

uint64_t sub_1000F3CC4()
{
  return sub_1000F3BFC(v0);
}

uint64_t sub_1000F3CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100079604(a1, a2);
  return sub_10007961C(v3, v2);
}

id sub_1000F3CE0()
{
  return sub_10011947C(v0, v1, 512LL, 0LL);
}

uint64_t sub_1000F3CFC()
{
  return sub_1000F3B98(v0);
}

uint64_t sub_1000F3D04(uint64_t a1)
{
  return sub_100087418(a1, v1);
}

uint64_t sub_1000F3D0C()
{
  return sub_10007A488(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000F3D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 3LL, a3);
}

uint64_t sub_1000F3D24()
{
  return v0;
}

uint64_t sub_1000F3D34(uint64_t a1)
{
  return sub_10007D0AC(a1, 1LL, 1LL, v1);
}

uint64_t sub_1000F3D44()
{
  return sub_1000F3BFC(*(void *)(v0 + 376));
}

uint64_t sub_1000F3D54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_task_dealloc(a19);
}

uint64_t sub_1000F3D5C()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000F3D64(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10012AC8C(v3, v4, a3);
}

uint64_t sub_1000F3D70(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000F3D78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_task_dealloc(a21);
}

uint64_t sub_1000F3D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1000F3D8C()
{
}

uint64_t sub_1000F3D94(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000F3D9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_task_dealloc(a20);
}

uint64_t sub_1000F3DA4()
{
  return static os_log_type_t.error.getter();
}

void sub_1000F3DAC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t sub_1000F3DC0()
{
  return *(void *)(v0 - 104);
}

uint64_t sub_1000F3DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000F3E10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1000F3E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F3E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F3ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F3F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000F3F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F3F60);
}

uint64_t sub_1000F3F60()
{
  uint64_t v2 = sub_1000F4340();
  return sub_10007D824(v1, v0, v2);
}

uint64_t sub_1000F3F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F3F94);
}

uint64_t sub_1000F3F94()
{
  uint64_t v2 = sub_1000F4340();
  return sub_10007D0AC(v1, v0, v0, v2);
}

uint64_t type metadata accessor for SKLogger(uint64_t a1)
{
  uint64_t result = qword_10032B798;
  if (!qword_10032B798) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SKLogger);
  }
  return result;
}

uint64_t sub_1000F3FF8(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_1000F4060()
{
  v18[0] = _swiftEmptyArrayStorage;
  uint64_t v0 = 8LL;
  sub_1000C232C(0, 8LL, 0);
  uint64_t v1 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v16 = 0LL;
    swift_stdlib_random(&v16, 8LL);
    v16 >>= 60;
    unint64_t v2 = sub_1000F4304();
    uint64_t v3 = String.init<A>(_:radix:uppercase:)(&v16, 16LL, 0LL, &type metadata for Int, v2);
    uint64_t v5 = v4;
    v18[0] = v1;
    unint64_t v7 = v1[2];
    unint64_t v6 = v1[3];
    if (v7 >= v6 >> 1)
    {
      sub_1000C232C(v6 > 1, v7 + 1, 1);
      uint64_t v1 = (void *)v18[0];
    }

    v1[2] = v7 + 1;
    uint64_t v8 = &v1[2 * v7];
    v8[4] = v3;
    v8[5] = v5;
    --v0;
  }

  while (v0);
  swift_retain(v1);
  unint64_t v9 = 0LL;
  unint64_t v10 = v7 + 1;
  id v11 = v1 + 5;
  unint64_t v12 = 0xE000000000000000LL;
  do
  {
    uint64_t v13 = *v11;
    v18[0] = *(v11 - 1);
    v18[1] = v13;
    unint64_t v16 = v9;
    unint64_t v17 = v12;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v12);
    unint64_t v16 = String.init<A>(_:)( &v16,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
    unint64_t v17 = v14;
    String.append<A>(contentsOf:)(v18, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v13);
    unint64_t v9 = v16;
    unint64_t v12 = v17;
    v11 += 2;
    --v10;
  }

  while (v10);
  swift_release_n(v1, 2LL);
  return v9;
}

uint64_t sub_1000F4208()
{
  uint64_t v0 = type metadata accessor for SKLogger(0LL);
  sub_1000B40F4(v0, qword_10033E1A8);
  sub_100079604(v0, (uint64_t)qword_10033E1A8);
  return Logger.init(subsystem:category:)( 0xD000000000000012LL,  0x800000010029D3C0LL,  0x746C7561666544LL,  0xE700000000000000LL);
}

uint64_t sub_1000F427C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  String.append(_:)(*(Swift::String *)&a1);
  v2._uint64_t countAndFlagsBits = 8285LL;
  v2._object = (void *)0xE200000000000000LL;
  String.append(_:)(v2);
  return 91LL;
}

uint64_t ProductResponse.serverCorrelationID.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

unint64_t sub_1000F4304()
{
  unint64_t result = qword_10032B7D0;
  if (!qword_10032B7D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10032B7D0);
  }

  return result;
}

uint64_t sub_1000F4340()
{
  return type metadata accessor for Logger(0LL);
}

void sub_1000F435C()
{
}

void sub_1000F438C()
{
}

void sub_1000F43F4()
{
}

id sub_1000F4424(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  NSString v3 = String._bridgeToObjectiveC()();
  sub_100085EF0();
  return v3;
}

void sub_1000F4458()
{
}

id sub_1000F447C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v9 = v8;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v9);
  uint64_t v19 = &v9[OBJC_IVAR___IntroOfferEligibilityCheck_groupID];
  *(void *)uint64_t v19 = a1;
  *((void *)v19 + 1) = a2;
  uint64_t v20 = &v9[OBJC_IVAR___IntroOfferEligibilityCheck_bundleID];
  *(void *)uint64_t v20 = a3;
  *((void *)v20 + 1) = a4;
  NSDictionary v21 = &v9[OBJC_IVAR___IntroOfferEligibilityCheck_storefrontID];
  *(void *)NSDictionary v21 = a5;
  *((void *)v21 + 1) = a6;
  if (a8)
  {
    uint64_t v22 = v9;
  }

  else
  {
    uint64_t v23 = qword_100328B40;
    uint64_t v24 = v9;
    if (v23 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v25 = type metadata accessor for SKLogger(0LL);
    sub_100079604(v25, (uint64_t)qword_10033E1A8);
    a7 = sub_1000F4060();
    a8 = v26;
  }

  uint64_t v27 = (unint64_t *)&v9[OBJC_IVAR___IntroOfferEligibilityCheck_logKey];
  *uint64_t v27 = a7;
  v27[1] = a8;

  v29.receiver = v9;
  v29.super_class = ObjectType;
  return objc_msgSendSuper2(&v29, "init");
}

uint64_t sub_1000F4658(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  unint64_t v9 = (char *)&v152 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v152 - v11;
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v152 - v13;
  if (!a1) {
    return -1LL;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"lastTransactions");
  sub_10012A674(v15, v16, a1, &v177);
  sub_10007BA44();
  if (!v178)
  {
    sub_1000F56CC();
    return -1LL;
  }

  uint64_t v17 = sub_10007B1FC(&qword_10032A588);
  uint64_t v18 = v175;
  uint64_t v19 = v175[2];
  if (!v19)
  {
    swift_bridgeObjectRelease(v175);
    return -1LL;
  }

  uint64_t v170 = v6;
  uint64_t v171 = v14;
  uint64_t v173 = v1;
  uint64_t v163 = v12;
  uint64_t v169 = v3;
  uint64_t v153 = v9;
  uint64_t v20 = 0LL;
  uint64_t v175 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v21 = v18[v20 + 4];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"status");
    uint64_t v24 = v23;
    if (*(void *)(v21 + 16))
    {
      uint64_t v25 = v22;
      sub_10007BA3C();
      unint64_t v26 = sub_100132130(v25, v24);
      if ((v27 & 1) != 0) {
        sub_1000F569C(v26, *(void *)(v21 + 56));
      }
      else {
        sub_1000E9880();
      }
    }

    else
    {
      sub_1000E9880();
      sub_10007BA3C();
    }

    swift_bridgeObjectRelease(v24);
    if (!v178)
    {
      sub_1000F56CC();
LABEL_24:
      sub_10007BA44();
      goto LABEL_25;
    }

    if ((sub_10009369C( (uint64_t)&v174,  (uint64_t)&v177,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for UInt8) & 1) == 0) {
      goto LABEL_24;
    }
    if (v174 != 1 && v174 != 4) {
      goto LABEL_24;
    }
    objc_super v29 = v175;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000C23A0(0, v29[2] + 1LL, 1);
      objc_super v29 = v175;
    }

    unint64_t v31 = v29[2];
    unint64_t v30 = v29[3];
    if (v31 >= v30 >> 1)
    {
      sub_1000C23A0(v30 > 1, v31 + 1, 1);
      objc_super v29 = v175;
    }

    v29[2] = v31 + 1;
    v29[v31 + 4] = v21;
LABEL_25:
    ++v20;
  }

  while (v19 != v20);
  swift_bridgeObjectRelease(v18);
  uint64_t v32 = v175;
  uint64_t v33 = v173;
  uint64_t v34 = *(void **)(v173 + OBJC_IVAR___IntroOfferEligibilityCheck_storefrontID + 8);
  uint64_t v162 = *(void *)(v173 + OBJC_IVAR___IntroOfferEligibilityCheck_storefrontID);
  unint64_t v35 = &off_100279000;
  uint64_t v36 = v169;
  uint64_t v168 = v175;
  uint64_t v172 = v34;
  if (!v34)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v37 = sub_100079604(v36, (uint64_t)qword_10033E1A8);
    uint64_t v38 = sub_10007961C(v37, (uint64_t)v171);
    uint64_t v39 = *(void *)(v33 + OBJC_IVAR___IntroOfferEligibilityCheck_logKey);
    int v40 = *(void **)(v33 + OBJC_IVAR___IntroOfferEligibilityCheck_logKey + 8);
    os_log_type_t v41 = static os_log_type_t.info.getter(v38);
    uint64_t v42 = sub_100085EE8((uint64_t)v40);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = v41;
    if (os_log_type_enabled(v43, v41))
    {
      uint64_t v45 = sub_10007B9FC(22LL);
      uint64_t v46 = sub_10007B9FC(64LL);
      uint64_t v175 = (void *)v46;
      *(_DWORD *)uint64_t v45 = 136446466;
      *(void *)&__int128 v177 = 91LL;
      *((void *)&v177 + 1) = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v40);
      v47._uint64_t countAndFlagsBits = v39;
      v47._object = v40;
      String.append(_:)(v47);
      sub_100085F14();
      swift_bridgeObjectRelease(v40);
      *(void *)&__int128 v177 = sub_1000F568C();
      uint64_t v32 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, (char *)&v177 + 8, v45 + 4);
      sub_10007D974((uint64_t)v40);
      sub_10007B980();
      *(_WORD *)(v45 + 12) = 2082;
      sub_1000F56F0();
      uint64_t v49 = sub_10007A488(v48 | 8, 0x80000001002A21F0LL, (uint64_t *)&v175);
      uint64_t v50 = sub_1000F56FC(v49);
      unint64_t v35 = &off_100279000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, (char *)&v177 + 8, v45 + 14);
      sub_100086038((void *)&_mh_execute_header, v43, v44, "%{public}s%{public}s", (uint8_t *)v45);
      sub_100086030(v46, v51, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v46);
      sub_10007B974(v45);
    }

    else
    {

      sub_10007D974((uint64_t)v40);
      unint64_t v35 = &off_100279000;
    }

    sub_10007A3CC((uint64_t)v171);
    uint64_t v33 = v173;
  }

  uint64_t v52 = v32[2];
  if (!v52)
  {
LABEL_84:
    swift_release(v32);
    return -1LL;
  }

  uint64_t v53 = 0LL;
  uint64_t v166 = (uint64_t *)(v33 + OBJC_IVAR___IntroOfferEligibilityCheck_logKey);
  uint64_t v54 = @"signedTransactionInfo";
  uint64_t v155 = (char *)&v177 + 8;
  uint64_t v161 = @"inAppOwnershipType";
  uint64_t v173 = (uint64_t)&type metadata for Any + 8;
  uint64_t v154 = @"PURCHASED";
  *((void *)&v55 + 1) = 1LL;
  __int128 v167 = xmmword_10027C680;
  *(void *)&__int128 v55 = *((void *)v35 + 58);
  __int128 v160 = v55;
  unint64_t v156 = 0x80000001002A20F0LL;
  uint64_t v158 = (void *)0x80000001002A2190LL;
  uint64_t v157 = (void *)0x80000001002A21C0LL;
  uint64_t v164 = @"signedTransactionInfo";
  uint64_t v165 = v52;
  while (1)
  {
    uint64_t v56 = v32[v53 + 4];
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    uint64_t v59 = v58;
    if (*(void *)(v56 + 16))
    {
      uint64_t v60 = v57;
      swift_bridgeObjectRetain(v56);
      unint64_t v61 = sub_100132130(v60, v59);
      if ((v62 & 1) != 0) {
        sub_1000F569C(v61, *(void *)(v56 + 56));
      }
      else {
        sub_1000E9880();
      }
      sub_100085EF0();
      uint64_t v63 = v56;
    }

    else
    {
      sub_1000E9880();
      uint64_t v63 = v59;
    }

    swift_bridgeObjectRelease(v63);
    if (v178) {
      break;
    }
    sub_1000F56CC();
LABEL_83:
    if (v52 == ++v53) {
      goto LABEL_84;
    }
  }

  NSString v64 = String._bridgeToObjectiveC()();
  sub_100085EF0();
  id v65 = sub_100025C04(v64, 0LL);

  if (!v65) {
    goto LABEL_83;
  }
  uint64_t v66 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v65,  &type metadata for String,  (char *)&type metadata for Any + 8);

  uint64_t v67 = swift_allocObject(&unk_1002EE008, 32LL, 7LL);
  *(_OWORD *)(v67 + 16) = v167;
  uint64_t v171 = (char *)v67;
  if (v172)
  {
    uint64_t v68 = v67;
    uint64_t v69 = sub_1000F56DC(v67);
    if (!v70 || (Swift::Bool v71 = String.hasPrefix(_:)(*(Swift::String *)&v69), sub_100085EF0(), !v71))
    {
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v76 = sub_100079604(v36, (uint64_t)qword_10033E1A8);
      sub_10007961C(v76, (uint64_t)v163);
      sub_1000F56A8();
      sub_1000F56F0();
      v78._uint64_t countAndFlagsBits = v77 + 3;
      v78._object = v158;
      String.append(_:)(v78);
      uint64_t v79 = sub_1000F56DC(v68);
      unint64_t v81 = v80;
      sub_10009C494();
      if (v81) {
        uint64_t v82 = v79;
      }
      else {
        uint64_t v82 = 7104878LL;
      }
      if (v81) {
        unint64_t v83 = v81;
      }
      else {
        unint64_t v83 = 0xE300000000000000LL;
      }
      unint64_t v84 = v83;
      String.append(_:)(*(Swift::String *)&v82);
      sub_100085EF0();
      v85._uint64_t countAndFlagsBits = 0xD000000000000025LL;
      v85._object = v157;
      String.append(_:)(v85);
      v86._uint64_t countAndFlagsBits = v162;
      v86._object = v172;
      String.append(_:)(v86);
      sub_1000F56E4();
      unint64_t v87 = *((void *)&v177 + 1);
      uint64_t v159 = v177;
      uint64_t v88 = *v166;
      uint64_t v89 = (void *)v166[1];
      os_log_type_t v91 = static os_log_type_t.info.getter(v90);
      sub_100085EE8((uint64_t)v89);
      uint64_t v92 = sub_100085EE8(v87);
      uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
      os_log_type_t v94 = v91;
      if (os_log_type_enabled(v93, v91))
      {
        uint64_t v95 = sub_10007B9FC(22LL);
        uint64_t v96 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v95 = sub_1000F56BC(v96).n128_u32[0];
        sub_10009C6BC();
        swift_bridgeObjectRetain(v89);
        v97._uint64_t countAndFlagsBits = v88;
        v97._object = v89;
        String.append(_:)(v97);
        sub_100085F14();
        swift_bridgeObjectRelease(v89);
        uint64_t v98 = sub_1000F568C();
        uint64_t v99 = sub_1000F56FC(v98);
        uint64_t v100 = v155;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v155, v95 + 4);
        sub_10007D974((uint64_t)v89);
        sub_10007B980();
        *(_WORD *)(v95 + 12) = 2082;
        swift_bridgeObjectRetain(v87);
        uint64_t v101 = sub_10007A488(v159, v87, (uint64_t *)&v175);
        uint64_t v102 = sub_1000F56FC(v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v102, v100, v95 + 14);
        sub_100085E64(v87);
        sub_100086038((void *)&_mh_execute_header, v93, v94, "%{public}s%{public}s", (uint8_t *)v95);
        sub_100086030(v96, v103, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v96);
        uint64_t v104 = v95;
        uint64_t v36 = v169;
        sub_10007B974(v104);
        sub_100085EF0();
      }

      else
      {

        sub_100085E64(v87);
        sub_10007D974((uint64_t)v89);
      }

      uint64_t v54 = v164;
      uint64_t v52 = v165;
      sub_10007A3CC((uint64_t)v163);
      sub_1000F56D4();
      uint64_t v32 = v168;
      goto LABEL_83;
    }
  }

  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
  if (*(void *)(v66 + 16) && (unint64_t v74 = sub_100132130(v72, v73), (v75 & 1) != 0)) {
    sub_1000F569C(v74, *(void *)(v66 + 56));
  }
  else {
    sub_1000E9880();
  }
  sub_100085EF0();
  if (!v178)
  {
    sub_1000F56CC();
    goto LABEL_76;
  }

  if ((sub_10009369C( (uint64_t)&v175,  (uint64_t)&v177,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_76:
    sub_10009C494();
    NSString v106 = 0LL;
LABEL_77:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v114 = sub_100079604(v36, (uint64_t)qword_10033E1A8);
    uint64_t v115 = sub_10007961C(v114, (uint64_t)v170);
    uint64_t v117 = *v166;
    uint64_t v116 = (void *)v166[1];
    os_log_type_t v118 = static os_log_type_t.info.getter(v115);
    uint64_t v119 = sub_100085EE8((uint64_t)v116);
    uint64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
    os_log_type_t v121 = v118;
    if (os_log_type_enabled(v120, v118))
    {
      uint64_t v122 = sub_10007B9FC(22LL);
      uint64_t v123 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v122 = sub_1000F56BC(v123).n128_u32[0];
      sub_10009C6BC();
      swift_bridgeObjectRetain(v116);
      v124._uint64_t countAndFlagsBits = v117;
      v124._object = v116;
      String.append(_:)(v124);
      sub_100085F14();
      swift_bridgeObjectRelease(v116);
      *(void *)(v122 + 4) = sub_1000F568C();
      sub_10007D974((uint64_t)v116);
      sub_10007B980();
      *(_WORD *)(v122 + 12) = 2082;
      sub_1000F56F0();
      *(void *)(v122 + 14) = sub_10007A488(v125 + 32, v156, (uint64_t *)&v175);
      sub_100086038((void *)&_mh_execute_header, v120, v121, "%{public}s%{public}s", (uint8_t *)v122);
      sub_100086030(v123, v126, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v123);
      sub_10007B974(v122);
    }

    else
    {

      sub_10007D974((uint64_t)v116);
    }

    uint64_t v32 = v168;
    uint64_t v54 = v164;
    uint64_t v52 = v165;
    sub_10007A3CC((uint64_t)v170);
    sub_1000F56D4();
    uint64_t v36 = v169;
    goto LABEL_83;
  }

  uint64_t v105 = v176;
  swift_bridgeObjectRetain(v176);
  sub_10009C714();
  NSString v106 = String._bridgeToObjectiveC()();
  sub_10007D974(v105);
  uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
  uint64_t v109 = v108;
  uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
  if (v107 != v110 || v109 != v111)
  {
    char v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v107, v109, v110, v111, 0LL);
    sub_10007B980();
    sub_10007BA44();
    if ((v113 & 1) != 0) {
      goto LABEL_87;
    }
    sub_10009C494();
    goto LABEL_77;
  }

  sub_10007D974(v109);
LABEL_87:
  swift_release(v32);
  if (v172)
  {
    sub_1000F56D4();
    sub_10009C494();
    goto LABEL_89;
  }

  uint64_t v128 = (uint64_t)v171;
  uint64_t v129 = sub_1000F56DC((uint64_t)v171);
  uint64_t v131 = v130;
  sub_10009C494();
  if (v131)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v132 = sub_100079604(v36, (uint64_t)qword_10033E1A8);
    uint64_t v133 = (uint64_t)v153;
    sub_10007961C(v132, (uint64_t)v153);
    sub_1000F56A8();
    sub_1000F56F0();
    v135._uint64_t countAndFlagsBits = v134 + 42;
    v135._object = (void *)0x80000001002A2140LL;
    String.append(_:)(v135);
    v136._uint64_t countAndFlagsBits = v129;
    v136._object = v131;
    String.append(_:)(v136);
    sub_10007BA44();
    sub_1000F56E4();
    __int128 v137 = v177;
    uint64_t v139 = *v166;
    Swift::String v138 = (void *)v166[1];
    os_log_type_t v141 = static os_log_type_t.default.getter(v140);
    sub_100085EE8((uint64_t)v138);
    uint64_t v142 = sub_100085EE8(*((uint64_t *)&v137 + 1));
    uint64_t v143 = (os_log_s *)Logger.logObject.getter(v142);
    os_log_type_t v144 = v141;
    if (os_log_type_enabled(v143, v141))
    {
      uint64_t v145 = sub_10007B9FC(22LL);
      uint64_t v146 = sub_10007B9FC(64LL);
      uint64_t v173 = v137;
      uint64_t v147 = v146;
      *(_DWORD *)uint64_t v145 = sub_1000F56BC(v146).n128_u32[0];
      *(void *)&__int128 v177 = 91LL;
      *((void *)&v177 + 1) = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v138);
      v148._uint64_t countAndFlagsBits = v139;
      v148._object = v138;
      String.append(_:)(v148);
      sub_100085F14();
      sub_10009C494();
      *(void *)&__int128 v177 = sub_1000F568C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, (char *)&v177 + 8, v145 + 4);
      sub_10007D974((uint64_t)v138);
      sub_10007B980();
      *(_WORD *)(v145 + 12) = 2082;
      sub_10007BA3C();
      uint64_t v149 = sub_10007A488(v173, *((unint64_t *)&v137 + 1), (uint64_t *)&v175);
      uint64_t v150 = sub_1000F56FC(v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v150, (char *)&v177 + 8, v145 + 14);
      sub_100085E64(*((uint64_t *)&v137 + 1));
      sub_100086038((void *)&_mh_execute_header, v143, v144, "%{public}s%{public}s", (uint8_t *)v145);
      sub_100086030(v147, v151, (uint64_t)&type metadata for Any + 8);
      uint64_t v133 = (uint64_t)v153;
      sub_10007B974(v147);
      sub_10007B974(v145);

      sub_10007BA44();
    }

    else
    {

      sub_100085E64(*((uint64_t *)&v137 + 1));
      sub_10007D974((uint64_t)v138);
    }

    sub_10007A3CC(v133);
    sub_1000F56D4();
  }

  else
  {
    swift_release(v128);
LABEL_89:
  }

  return 0LL;
}

uint64_t sub_1000F5400(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v2;
  if (v3 == 1)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"storefrontId");
    uint64_t v10 = v9;
    sub_10012A674(v8, v9, a2, &v16);
    swift_bridgeObjectRelease(v10);
    if (v17)
    {
      if (swift_dynamicCast( v15,  &v16,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
      {
        uint64_t v5 = v15[0];
        uint64_t v11 = v15[1];
LABEL_7:
        swift_beginAccess(v4, &v16, 1LL, 0LL);
        uint64_t v12 = *(void *)(a1 + 16);
        uint64_t v13 = *(void *)(a1 + 24);
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v11;
        swift_bridgeObjectRetain(v11);
        sub_1000F5664(v12, v13);
        goto LABEL_8;
      }
    }

    else
    {
      sub_10007B294((uint64_t)&v16);
    }

    uint64_t v5 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_7;
  }

void sub_1000F5588()
{
}

uint64_t type metadata accessor for IntroOfferEligibilityCheck()
{
  return objc_opt_self(&OBJC_CLASS___IntroOfferEligibilityCheck);
}

uint64_t sub_1000F5638()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1 != 1) {
    swift_bridgeObjectRelease(v1);
  }
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000F5664(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1000F5678(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000F568C()
{
  return sub_10007A488(*(void *)(v0 - 128), *(void *)(v0 - 120), (uint64_t *)(v0 - 144));
}

uint64_t sub_1000F569C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007B1C0(a2 + 32 * a1, v2 - 128);
}

void sub_1000F56A8()
{
  *(void *)(v0 - 128) = 0LL;
  *(void *)(v0 - 120) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(83LL);
}

__n128 sub_1000F56BC(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return *(__n128 *)(v1 - 288);
}

uint64_t sub_1000F56CC()
{
  return sub_10007B294(v0 - 128);
}

uint64_t sub_1000F56D4()
{
  return swift_release(*(void *)(v0 - 176));
}

uint64_t sub_1000F56DC(uint64_t a1)
{
  return sub_1000F5400(a1, v1);
}

void sub_1000F56E4()
{
  v0._uint64_t countAndFlagsBits = 11815LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

  ;
}

uint64_t sub_1000F56FC(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_1000F5708()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_1000F5720, 0LL, 0LL);
}

uint64_t sub_1000F5720(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(*(void *)(v1 + 24) + OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_logKey);
  uint64_t v4 = *v2;
  uint64_t v3 = (void *)v2[1];
  os_log_type_t v5 = static os_log_type_t.error.getter(a1);
  uint64_t v6 = swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = v5;
  if (os_log_type_enabled(v7, v5))
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v9 = 136446466;
    v14[0] = v10;
    v14[1] = 91LL;
    v14[2] = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v3);
    v11._uint64_t countAndFlagsBits = v4;
    v11._object = v3;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = 8285LL;
    v12._object = (void *)0xE200000000000000LL;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v3);
    *(void *)(v1 + 16) = sub_10007A488(91LL, 0xE100000000000000LL, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 4);
    swift_bridgeObjectRelease(0xE100000000000000LL);
    sub_1000CB958();
    *(_WORD *)(v9 + 12) = 2082;
    *(void *)(v1 + 16) = sub_10007A488(0xD00000000000003DLL, 0x80000001002A2340LL, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s%{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v10);
    sub_10007B974(v9);
  }

  else
  {
    sub_1000CB958();
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000F58FC()
{
  uint64_t v1 = sub_10007B1FC(qword_10032B9C0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10007B1FC(&qword_10032B9B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10007B1FC(&qword_10032B9A8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v1);
  static AsyncStream.makeStream(of:bufferingPolicy:)(v12, v8, &type metadata for ()[8], v4, &type metadata for ()[8]);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v0 + OBJC_IVAR____TtC9storekitdP33_CC0A652C8FC4D059DA9F2A360195F4AA33SubscriptionOfferRemoteAlertActor_stream,  v12,  v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v0 + OBJC_IVAR____TtC9storekitdP33_CC0A652C8FC4D059DA9F2A360195F4AA33SubscriptionOfferRemoteAlertActor_continuation,  v8,  v5);
  return v0;
}

uint64_t sub_1000F5A7C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9storekitdP33_CC0A652C8FC4D059DA9F2A360195F4AA33SubscriptionOfferRemoteAlertActor_stream;
  uint64_t v2 = sub_10007B1FC(&qword_10032B9A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0
     + OBJC_IVAR____TtC9storekitdP33_CC0A652C8FC4D059DA9F2A360195F4AA33SubscriptionOfferRemoteAlertActor_continuation;
  uint64_t v4 = sub_10007B1FC(&qword_10032B9B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000F5AF8()
{
  return type metadata accessor for SubscriptionOfferRemoteAlertActor(0LL);
}

uint64_t type metadata accessor for SubscriptionOfferRemoteAlertActor(uint64_t a1)
{
  return sub_1000D0BD8( a1,  (uint64_t *)&unk_10032B858,  (uint64_t)&nominal type descriptor for SubscriptionOfferRemoteAlertActor);
}

void sub_1000F5B14(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000F5BC8( 319LL,  (unint64_t *)&unk_10032B870,  (uint64_t (*)(void, char *))&type metadata accessor for AsyncStream.Continuation);
    if (v5 <= 0x3F)
    {
      v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 3LL, v6, a1 + 80);
    }
  }

void sub_1000F5BC8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, char *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0LL, &type metadata for ()[8]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }

id sub_1000F5C14( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v12);
  uint64_t v19 = OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_alertActor;
  uint64_t v20 = type metadata accessor for SubscriptionOfferRemoteAlertActor(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  uint64_t v21 = v12;
  *(void *)&v12[v19] = sub_1000F58FC();
  *(void *)&v21[OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_client] = a1;
  uint64_t v22 = &v21[OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_offer];
  *(void *)uint64_t v22 = a2;
  *((void *)v22 + 1) = a3;
  *((void *)v22 + 2) = a4;
  *((void *)v22 + 3) = a5;
  *(void *)&v21[OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_connection] = a6;
  *(void *)&v21[OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_messageType] = a7;
  uint64_t v23 = &v21[OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_logKey];
  *(void *)uint64_t v23 = a8;
  *((void *)v23 + 1) = a9;
  uint64_t v24 = &v21[OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_sceneID];
  *(void *)uint64_t v24 = a10;
  *((void *)v24 + 1) = a11;
  sub_10007961C(a12, (uint64_t)&v21[OBJC_IVAR____TtC9storekitd28SubscriptionOfferRemoteAlert_logger]);
  id v25 = a1;
  id v26 = a6;

  v32.receiver = v21;
  v32.super_class = ObjectType;
  id v27 = objc_msgSendSuper2(&v32, "init");

  sub_10007A3CC(a12);
  return v27;
}

void sub_1000F5D98()
{
}

uint64_t sub_1000F5E60()
{
  return type metadata accessor for SubscriptionOfferRemoteAlert(0LL);
}

uint64_t type metadata accessor for SubscriptionOfferRemoteAlert(uint64_t a1)
{
  return sub_1000D0BD8( a1,  (uint64_t *)&unk_10032B998,  (uint64_t)&nominal type descriptor for SubscriptionOfferRemoteAlert);
}

uint64_t sub_1000F5E7C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = " ";
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[4] = &unk_10027C748;
  v4[5] = &unk_10027C760;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubscriptionOfferRemoteAlert.Offer()
{
  return &type metadata for SubscriptionOfferRemoteAlert.Offer;
}

uint64_t sub_1000F5F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_1000F5F48(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10027C830;
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000F5FBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v10 = *v11;
    uint64_t v12 = v11[1];
    v10[1] = v12;
    swift_bridgeObjectRetain(v12);
  }

  return v4;
}

uint64_t sub_1000F6078(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  return swift_bridgeObjectRelease(*(void *)(((a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1000F60B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  os_log_type_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = v8[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_1000F6120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  os_log_type_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1000F6194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t sub_1000F61F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  os_log_type_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1000F625C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFE)
    {
      unint64_t v13 = *(void *)(((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8LL) + 8);
      if (v13 >= 0xFFFFFFFF) {
        LODWORD(v13) = -1;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return sub_10007D824(a1, v6, v4);
    }
  }

  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = a2 - v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1000F62D8 + 4 * byte_10027C7B0[v11]))();
  }

void sub_1000F6360(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0;
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
  }

  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v10 = ~v6 + a2;
      bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
      *a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t sub_1000F644C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFE)
    {
      int v8 = (void *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
      if (a2 > 0x7FFFFFFE)
      {
        *int v8 = 0LL;
        v8[1] = 0LL;
        *(_DWORD *)int v8 = a2 - 0x7FFFFFFF;
      }

      else
      {
        v8[1] = a2;
      }
    }

    else
    {
      return sub_10007D0AC(v5, a2, a3, a4);
    }
  }

  return result;
}

uint64_t type metadata accessor for InAppEngagementQueryParameter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100086574(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InAppEngagementQueryParameter);
}

uint64_t sub_1000F64F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v49 = a3;
  swift_bridgeObjectRetain(a2);
  sub_100093E1C(a1, a2);
  int v8 = v7;
  if ((v9 & 1) != 0)
  {
    *(void *)&__int128 v47 = v7;
    uint64_t v30 = sub_10007B1FC(&qword_100329B90);
    return swift_willThrowTypedImpl(&v47, v30, &protocol self-conformance witness table for Error);
  }

  else if (v7)
  {
    uint64_t v40 = v4;
    uint64_t v10 = 3LL;
    swift_bridgeObjectRetain(v7);
    uint64_t v11 = &byte_1002EA8B8;
    do
    {
      int v13 = *v11++;
      int v12 = v13;
      unint64_t v14 = 0xD000000000000017LL;
      if (v13 == 1)
      {
        unint64_t v14 = 0xD000000000000012LL;
        unint64_t v15 = 0x800000010029EB10LL;
      }

      else
      {
        unint64_t v15 = 0x80000001002A2380LL;
      }

      if (v12) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = 0x614464656E676973LL;
      }
      if (v12) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = 0xEA00000000006574LL;
      }
      swift_bridgeObjectRetain(v8);
      unint64_t v18 = sub_100132130(v16, v17);
      char v20 = v19;
      sub_10007B980();
      if ((v20 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        *(void *)&__int128 v44 = v8;
        Swift::Int v22 = v8[3];
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22);
        swift_bridgeObjectRelease(*(void *)(v8[6] + 16 * v18 + 8));
        sub_1000853B0((_OWORD *)(v8[7] + 32 * v18), &v47);
        _NativeDictionary._delete(at:)( v18,  v8,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      else
      {
        __int128 v47 = 0u;
        v48[0] = 0u;
      }

      swift_bridgeObjectRelease(v17);
      sub_100087418((uint64_t)&v47, (uint64_t *)&unk_100328ED0);
      --v10;
    }

    while (v10);
    swift_bridgeObjectRetain_n(v8, 2LL);
    uint64_t v23 = sub_1000F70D0((uint64_t)v8);
    sub_10007B980();
    *(void *)&__int128 v47 = v23;
    sub_1000F7068((uint64_t *)&v47);
    if (!v40)
    {
      sub_10007B980();
      uint64_t v24 = v47;
      sub_10007B980();
      unint64_t v25 = 0LL;
      unint64_t v26 = *(void *)(v24 + 16);
      while (1)
      {
        if (v25 == v26)
        {
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          unint64_t v25 = v26;
          __int128 v44 = 0u;
        }

        else
        {
          if (v25 >= *(void *)(v24 + 16))
          {
            __break(1u);
            break;
          }

          sub_1000F71B0(v24 + 32 + 48 * v25++, (uint64_t)&v44);
        }

        sub_1000F71F8((uint64_t)&v44, (uint64_t)&v47);
        if (!*((void *)&v47 + 1))
        {
          swift_release(v24);
          return sub_1000F80D0((uint64_t)v8);
        }

        swift_bridgeObjectRelease(*((void *)&v47 + 1));
        sub_1000853B0(v48, v43);
        uint64_t v27 = sub_10007B1FC(&qword_10032BA50);
        if ((swift_dynamicCast(v41, v43, (char *)&type metadata for Any + 8, v27, 6LL) & 1) != 0)
        {
          sub_10009D8A4(v41, (uint64_t)&v44);
          uint64_t v28 = *((void *)&v45 + 1);
          uint64_t v29 = v46;
          sub_100085B44(&v44, *((uint64_t *)&v45 + 1));
          dispatch thunk of Hashable.hash(into:)(v49, v28, v29);
          sub_10007B1A0(&v44);
        }

        else
        {
          uint64_t v42 = 0LL;
          memset(v41, 0, sizeof(v41));
          sub_100087418((uint64_t)v41, &qword_10032BA58);
        }
      }
    }

    uint64_t result = swift_release(v47);
    __break(1u);
  }

  else
  {
    unint64_t v32 = sub_1000F7020();
    uint64_t v33 = sub_100093030((uint64_t)&type metadata for AnalyticsUtilityError, v32);
    *uint64_t v34 = 0;
    swift_willThrow(v33, v34, v35, v36, v37, v38, v39);
    return sub_1000F80D0(0LL);
  }

  return result;
}

void *sub_1000F68A0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = (void *)a2;
  sub_1000881FC(a1, a2);
  sub_100093EF8(a1, (unint64_t)v4);
  uint64_t v7 = v6;
  if ((v8 & 1) != 0)
  {
    uint64_t v28 = (void *)v6;
    uint64_t v15 = sub_10007B1FC(&qword_100329B90);
    swift_willThrowTypedImpl(&v28, v15, &protocol self-conformance witness table for Error);
  }

  else if (v6)
  {
    uint64_t v9 = *(void *)(v6 + 16);
    if (v9)
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v6);
      sub_1000C23D4(0, v9, 0);
      uint64_t v4 = _swiftEmptyArrayStorage;
      for (uint64_t i = (uint64_t *)(v7 + 32); ; ++i)
      {
        uint64_t v11 = *i;
        uint64_t v26 = v11;
        swift_bridgeObjectRetain(v11);
        sub_1000F6A7C(&v26, &v25, &v27);
        if (v3) {
          break;
        }
        uint64_t v3 = 0LL;
        swift_bridgeObjectRelease(v11);
        Swift::Int v12 = v27;
        uint64_t v28 = v4;
        unint64_t v14 = v4[2];
        unint64_t v13 = v4[3];
        if (v14 >= v13 >> 1)
        {
          sub_1000C23D4(v13 > 1, v14 + 1, 1);
          uint64_t v4 = v28;
        }

        void v4[2] = v14 + 1;
        v4[v14 + 4] = v12;
        if (!--v9)
        {
          sub_1000F705C(v7, 0);
          sub_1000F80D0(v7);
          return v4;
        }
      }

      swift_release(v4);
      swift_bridgeObjectRelease(v11);
      sub_1000F705C(v7, 0);
      sub_1000F80D0(v7);
    }

    else
    {
      sub_1000F80D0(v6);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    unint64_t v16 = sub_1000F7020();
    uint64_t v17 = sub_100093030((uint64_t)&type metadata for AnalyticsUtilityError, v16);
    _BYTE *v18 = 1;
    swift_willThrow(v17, v18, v19, v20, v21, v22, v23);
    sub_1000F80D0(0LL);
  }

  return v4;
}

Swift::Int sub_1000F6A7C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, Swift::Int *a3@<X8>)
{
  uint64_t v6 = *a1;
  Hasher.init()(__src);
  Swift::UInt v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"status");
  uint64_t v12 = v7;
  AnyHashable.init<A>(_:)(&v11, &type metadata for String, &protocol witness table for String);
  sub_10012A6B0((uint64_t)v13, v6, &v14);
  sub_100087388((uint64_t)v13);
  if (v15)
  {
  }

  else
  {
    sub_100087418((uint64_t)&v14, (uint64_t *)&unk_100328ED0);
  }

  Swift::UInt v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"signedRenewalInfo");
  uint64_t v12 = v8;
  AnyHashable.init<A>(_:)(&v11, &type metadata for String, &protocol witness table for String);
  sub_10012A6B0((uint64_t)v13, v6, &v14);
  sub_100087388((uint64_t)v13);
  if (v15)
  {
    if ((swift_dynamicCast(&v11, &v14, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v9 = v12;
      sub_1000F64F4(v11, v12, (uint64_t)__src);
      Swift::Int result = swift_bridgeObjectRelease(v9);
      if (v3)
      {
        *a2 = v3;
        return result;
      }
    }
  }

  else
  {
    sub_100087418((uint64_t)&v14, (uint64_t *)&unk_100328ED0);
  }

  memcpy(__dst, __src, sizeof(__dst));
  Swift::Int result = Hasher.finalize()();
  *a3 = result;
  return result;
}

uint64_t sub_1000F6C2C(uint64_t a1, void *a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  sub_1000F6C68(v3, v4, a2);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease(v5);
  return v7;
}

void sub_1000F6C68(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::Int v6 = sub_1000F6CE4(a1, a2);
  char v8 = v7;
  NSNotFound.getter();
  if ((v8 & 1) != 0)
  {
    if (a3)
    {
      swift_errorRetain(v6);
      uint64_t v9 = (void *)_convertErrorToNSError(_:)(v6);
      id v10 = v9;
      *a3 = v9;
      sub_1000F80D8();
    }

    sub_1000F80D8();
  }

  sub_1000AB000();
}

Swift::Int sub_1000F6CE4(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher.finalize()();
  swift_bridgeObjectRelease(a2);
  return v4;
}

uint64_t sub_1000F6D74(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_1000F6D80(uint64_t a1, unint64_t a2)
{
  return v6;
}

Class sub_1000F6DE8(void *a1, void *a2)
{
  id v4 = a1;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v7 = v6;

  sub_1000F6E88(v5, v7, a2);
  uint64_t v9 = v8;
  sub_10007F054(v5, v7);
  if (v9)
  {
    sub_1000D7BA4();
    sub_1000C4E08();
    v10.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    v10.super.Class isa = 0LL;
  }

  return v10.super.isa;
}

void sub_1000F6E88(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = sub_1000F6D80(a1, a2);
  uint64_t v7 = v6;
  if ((v8 & 1) != 0)
  {
    if (a3)
    {
      uint64_t v9 = (void *)_convertErrorToNSError(_:)(v6);
      id v10 = v9;
      *a3 = v9;
    }

    sub_1000F705C(v7, 1);
  }

  sub_1000AB000();
}

uint64_t sub_1000F6EF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (uint64_t)sub_1000F68A0(a1, a2);
  if (v4)
  {
    *a3 = v4;
  }

  else
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(result + 16);
    if (v9)
    {
      uint64_t v15 = a4;
      specialized ContiguousArray.reserveCapacity(_:)(v9);
      uint64_t v10 = 0LL;
      do
      {
        uint64_t v11 = v10 + 1;
        id v12 = [objc_allocWithZone(NSNumber) initWithInteger:*(uint64_t *)(v8 + 8 * v10 + 32) >> 9];
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v13 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        uint64_t v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
        specialized ContiguousArray._endMutation()(v14);
        uint64_t v10 = v11;
      }

      while (v9 != v11);
      swift_bridgeObjectRelease(v8);
      a4 = v15;
    }

    else
    {
      swift_bridgeObjectRelease(result);
    }

    uint64_t result = sub_1000BDAA8((uint64_t)_swiftEmptyArrayStorage);
    *a4 = result;
  }

  return result;
}

unint64_t sub_1000F7020()
{
  unint64_t result = qword_10032BA48;
  if (!qword_10032BA48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C900, &type metadata for AnalyticsUtilityError);
    atomic_store(result, (unint64_t *)&qword_10032BA48);
  }

  return result;
}

uint64_t sub_1000F705C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

void sub_1000F7068(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000A96B8(v2);
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1000F7240(v5);
  *a1 = v2;
}

void *sub_1000F70D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10007B1FC(&qword_10032AB88);
  uint64_t v4 = swift_allocObject(v3, 48 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size((const void *)v4);
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = 2 * ((uint64_t)(v5 - 32) / 48);
  uint64_t v6 = sub_1000F7D78(&v9, (_OWORD *)(v4 + 32), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10009BEFC(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return (void *)v4;
}

uint64_t sub_1000F71B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032A6A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F71F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032A2A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_1000F7240(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_1000F79B8(0LL, v3, 1LL, v2);
      }
      return;
    }

LABEL_148:
    __break(1u);
    goto LABEL_149;
  }

  Swift::Int v5 = v4;
  uint64_t v120 = v1;
  sub_1000A86FC(v3 / 2);
  uint64_t v110 = v6;
  uint64_t v111 = v3;
  uint64_t v115 = v7;
  if (v3 > 0)
  {
    Swift::Int v109 = v5;
    Swift::Int v8 = 0LL;
    uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
    while (1)
    {
      Swift::Int v10 = v8++;
      if (v8 < v3)
      {
        uint64_t v11 = *v2;
        sub_1000F71B0(*v2 + 48 * v8, (uint64_t)&v118);
        uint64_t v12 = v11;
        sub_1000F71B0(v11 + 48 * v10, (uint64_t)&v116);
        if (v118 == v116 && v119 == v117) {
          int v14 = 0;
        }
        else {
          int v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v118, v119, v116, v117, 1LL);
        }
        sub_100087418((uint64_t)&v116, &qword_10032A6A8);
        sub_100087418((uint64_t)&v118, &qword_10032A6A8);
        Swift::Int v8 = v10 + 2;
        if (v10 + 2 < v3)
        {
          uint64_t v112 = v11;
          uint64_t v15 = v11 + 48 * v10 + 48;
          while (1)
          {
            sub_1000F71B0(v15 + 48, (uint64_t)&v118);
            sub_1000F71B0(v15, (uint64_t)&v116);
            BOOL v16 = v118 == v116 && v119 == v117;
            int v17 = v16 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v118, v119, v116, v117, 1LL);
            sub_100087418((uint64_t)&v116, &qword_10032A6A8);
            sub_100087418((uint64_t)&v118, &qword_10032A6A8);
            if (((v14 ^ v17) & 1) != 0) {
              break;
            }
            ++v8;
            v15 += 48LL;
            if (v8 >= v3)
            {
              Swift::Int v8 = v3;
              break;
            }
          }

          uint64_t v12 = v112;
          if ((v14 & 1) == 0) {
            goto LABEL_32;
          }
LABEL_25:
          if (v8 < v10) {
            goto LABEL_150;
          }
          if (v10 < v8)
          {
            unint64_t v18 = (__int128 *)(v12 + 48 * v8 - 48);
            uint64_t v19 = (__int128 *)(v12 + 48 * v10);
            Swift::Int v20 = v8;
            Swift::Int v21 = v10;
            do
            {
              if (v21 != --v20)
              {
                if (!v12) {
                  goto LABEL_156;
                }
                __int128 v22 = *v19;
                __int128 v23 = v19[1];
                __int128 v24 = v19[2];
                __int128 v26 = v18[1];
                __int128 v25 = v18[2];
                *uint64_t v19 = *v18;
                v19[1] = v26;
                v19[2] = v25;
                v18[1] = v23;
                void v18[2] = v24;
                __int128 *v18 = v22;
              }

              ++v21;
              v18 -= 3;
              v19 += 3;
            }

            while (v21 < v20);
          }

          goto LABEL_32;
        }

        if ((v14 & 1) != 0) {
          goto LABEL_25;
        }
      }

LABEL_87:
          if ((v69 & 1) != 0) {
            goto LABEL_137;
          }
          uint64_t v77 = &v44[16 * v46];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v57 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v57) {
            goto LABEL_139;
          }
          if (v80 < v68) {
            goto LABEL_104;
          }
LABEL_95:
          unint64_t v85 = v46 - 1;
          if (v46 - 1 >= v43)
          {
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
            goto LABEL_142;
          }

          uint64_t v86 = *v2;
          if (!*v2) {
            goto LABEL_155;
          }
          unint64_t v87 = (unint64_t *)v9;
          uint64_t v88 = v2;
          uint64_t v89 = &v44[16 * v85];
          uint64_t v90 = *(void *)v89;
          os_log_type_t v91 = v44;
          unint64_t v92 = v46;
          uint64_t v93 = &v44[16 * v46];
          uint64_t v94 = *((void *)v93 + 1);
          uint64_t v95 = v120;
          sub_1000F7AF8( (char *)(v86 + 48LL * *(void *)v89),  (char *)(v86 + 48LL * *(void *)v93),  v86 + 48 * v94,  v115);
          uint64_t v120 = v95;
          if (v95)
          {
            uint64_t v99 = (uint64_t)v87;
LABEL_110:
            swift_bridgeObjectRelease(v99);
            if (v111 >= -1)
            {
              *(void *)(v110 + 16) = 0LL;
              swift_bridgeObjectRelease(v110);
              return;
            }

LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
            goto LABEL_152;
          }

          if (v94 < v90) {
            goto LABEL_128;
          }
          if (v92 > v87[2]) {
            goto LABEL_129;
          }
          *(void *)uint64_t v89 = v90;
          *(void *)&v91[16 * v85 + 8] = v94;
          unint64_t v96 = v87[2];
          if (v92 >= v96) {
            goto LABEL_130;
          }
          uint64_t v9 = (char *)v87;
          unint64_t v43 = v96 - 1;
          memmove(v93, v93 + 16, 16 * (v96 - 1 - v92));
          __int128 v44 = v91;
          v87[2] = v96 - 1;
          uint64_t v2 = v88;
          Swift::Int v8 = v114;
          if (v96 <= 2) {
            goto LABEL_104;
          }
        }
      }

      unint64_t v43 = 1LL;
LABEL_104:
      Swift::Int v3 = v2[1];
      if (v8 >= v3) {
        goto LABEL_113;
      }
    }
  }

  uint64_t v9 = (char *)&_swiftEmptyArrayStorage;
  unint64_t v43 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_113:
  uint64_t v100 = v9;
  if (v43 >= 2)
  {
    uint64_t v101 = *v2;
    while (1)
    {
      unint64_t v102 = v43 - 2;
      if (v43 < 2) {
        break;
      }
      if (!v101) {
        goto LABEL_157;
      }
      uint64_t v99 = (uint64_t)v100;
      uint64_t v103 = v100[2 * v102 + 4];
      uint64_t v104 = v100[2 * v43 + 3];
      uint64_t v105 = v120;
      sub_1000F7AF8((char *)(v101 + 48 * v103), (char *)(v101 + 48LL * v100[2 * v43 + 2]), v101 + 48 * v104, v115);
      uint64_t v120 = v105;
      if (v105) {
        goto LABEL_110;
      }
      if (v104 < v103) {
        goto LABEL_143;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0)
      {
        sub_1000A945C(v99);
        uint64_t v99 = v108;
      }

      if (v102 >= *(void *)(v99 + 16)) {
        goto LABEL_144;
      }
      NSString v106 = (void *)(v99 + 32 + 16 * v102);
      *NSString v106 = v103;
      v106[1] = v104;
      unint64_t v107 = *(void *)(v99 + 16);
      if (v43 > v107) {
        goto LABEL_145;
      }
      memmove((void *)(v99 + 32 + 16 * (v43 - 1)), (const void *)(v99 + 32 + 16 * v43), 16 * (v107 - v43));
      uint64_t v100 = (void *)v99;
      *(void *)(v99 + 16) = v107 - 1;
      unint64_t v43 = v107 - 1;
      if (v107 <= 2) {
        goto LABEL_124;
      }
    }

LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }

LABEL_124:
  swift_bridgeObjectRelease(v100);
  if (v111 < -1) {
    goto LABEL_153;
  }
  *(void *)(v110 + 16) = 0LL;
  swift_bridgeObjectRelease(v110);
}

uint64_t sub_1000F79B8(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    uint64_t v7 = result;
    uint64_t v8 = 48 * a3;
    while (2)
    {
      uint64_t v9 = v7;
      uint64_t v10 = v8;
      while (1)
      {
        uint64_t v11 = *a4 + v10;
        sub_1000F71B0(v11, (uint64_t)&v21);
        sub_1000F71B0(v11 - 48, (uint64_t)&v19);
        if (v21 == v19 && v22 == v20) {
          break;
        }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v19, v20, 1LL);
        sub_100087418((uint64_t)&v19, &qword_10032A6A8);
        unint64_t result = sub_100087418((uint64_t)&v21, &qword_10032A6A8);
        if ((v13 & 1) != 0)
        {
          if (!*a4)
          {
            __break(1u);
            return result;
          }

          int v14 = (__int128 *)(*a4 + v10);
          __int128 v16 = v14[1];
          __int128 v15 = v14[2];
          __int128 v17 = *v14;
          __int128 v18 = *(v14 - 2);
          *int v14 = *(v14 - 3);
          v14[1] = v18;
          v14[2] = *(v14 - 1);
          *(v14 - 3) = v17;
          *(v14 - 2) = v16;
          *(v14 - 1) = v15;
          v10 -= 48LL;
          if (v5 != ++v9) {
            continue;
          }
        }

        goto LABEL_13;
      }

      sub_100087418((uint64_t)&v19, &qword_10032A6A8);
      unint64_t result = sub_100087418((uint64_t)&v21, &qword_10032A6A8);
LABEL_13:
      ++v5;
      v8 += 48LL;
      if (v5 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_1000F7AF8(char *a1, char *a2, unint64_t a3, char *a4)
{
  Swift::Int v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 48;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 48;
  if (v9 < v11)
  {
    sub_100131A28(a1, (a2 - a1) / 48, a4);
    uint64_t v12 = &v4[48 * v9];
    if ((unint64_t)v6 >= a3 || v8 < 48)
    {
      uint64_t v6 = v7;
      goto LABEL_54;
    }

    while (1)
    {
      sub_1000F71B0((uint64_t)v6, (uint64_t)&v33);
      sub_1000F71B0((uint64_t)v4, (uint64_t)&v31);
      BOOL v13 = v33 == v31 && v34 == v32;
      if (v13)
      {
        sub_100087418((uint64_t)&v31, &qword_10032A6A8);
        sub_100087418((uint64_t)&v33, &qword_10032A6A8);
      }

      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v31, v32, 1LL);
        sub_100087418((uint64_t)&v31, &qword_10032A6A8);
        sub_100087418((uint64_t)&v33, &qword_10032A6A8);
        if ((v14 & 1) != 0)
        {
          BOOL v13 = v7 == v6;
          __int128 v15 = v6;
          v6 += 48;
          if (v13 && v7 < v6) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }

      BOOL v13 = v7 == v4;
      __int128 v15 = v4;
      v4 += 48;
      if (v13 && v7 < v4) {
        goto LABEL_21;
      }
LABEL_20:
      __int128 v18 = *(_OWORD *)v15;
      __int128 v19 = *((_OWORD *)v15 + 2);
      *((_OWORD *)v7 + 1) = *((_OWORD *)v15 + 1);
      *((_OWORD *)v7 + 2) = v19;
      *(_OWORD *)uint64_t v7 = v18;
LABEL_21:
      v7 += 48;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
      {
        uint64_t v6 = v7;
        goto LABEL_54;
      }
    }
  }

  sub_100131A28(a2, (uint64_t)(a3 - (void)a2) / 48, a4);
  uint64_t v12 = &v4[48 * v11];
  if (v7 < v6 && v10 >= 48)
  {
    uint64_t v21 = (char *)(a3 - 48);
    uint64_t v35 = v4;
    do
    {
      sub_1000F71B0((uint64_t)(v12 - 48), (uint64_t)&v33);
      uint64_t v22 = v6 - 48;
      sub_1000F71B0((uint64_t)(v6 - 48), (uint64_t)&v31);
      if (v33 == v31 && v34 == v32) {
        char v24 = 0;
      }
      else {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v31, v32, 1LL);
      }
      __int128 v25 = v21 + 48;
      sub_100087418((uint64_t)&v31, &qword_10032A6A8);
      sub_100087418((uint64_t)&v33, &qword_10032A6A8);
      if ((v24 & 1) != 0)
      {
        BOOL v26 = v25 != v6 || v21 >= v6;
        v6 -= 48;
      }

      else
      {
        BOOL v26 = v25 != v12 || v21 >= v12;
        uint64_t v22 = v12 - 48;
        v12 -= 48;
      }

      Swift::Int v4 = v35;
      if (v26)
      {
        __int128 v27 = *(_OWORD *)v22;
        __int128 v28 = *((_OWORD *)v22 + 2);
        *((_OWORD *)v21 + 1) = *((_OWORD *)v22 + 1);
        *((_OWORD *)v21 + 2) = v28;
        *(_OWORD *)uint64_t v21 = v27;
      }

      v21 -= 48;
    }

    while (v12 > v4 && v6 > v7);
  }

void *sub_1000F7D78(void *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1LL << -(char)v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0LL;
    uint64_t v12 = 0LL;
LABEL_37:
    *unint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v12;
  }

  if (!a3)
  {
    int64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_37;
  }

  if (a3 < 0) {
    goto LABEL_39;
  }
  uint64_t v10 = a2;
  uint64_t v23 = -1LL << *(_BYTE *)(a4 + 32);
  char v24 = result;
  int64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  int64_t v25 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    __int128 v18 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_10007B1C0(*(void *)(a4 + 56) + 32 * v14, (uint64_t)&v27);
    *(void *)&__int128 v26 = v20;
    *((void *)&v26 + 1) = v19;
    __int128 v22 = v27;
    __int128 v21 = v28;
    __int128 v30 = v27;
    __int128 v31 = v28;
    __int128 v29 = v26;
    *uint64_t v10 = v26;
    v10[1] = v22;
    v10[2] = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain(v19);
      uint64_t v12 = a3;
      goto LABEL_36;
    }

    v10 += 3;
    unint64_t result = (void *)swift_bridgeObjectRetain(v19);
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      int64_t v17 = v11 + 2;
      ++v11;
      if (v15 + 1 >= v25) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v11 = v15 + 1;
      if (v15 + 2 >= v25) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v5 + 8 * (v15 + 2));
      if (v16)
      {
        v15 += 2LL;
      }

      else
      {
        int64_t v11 = v15 + 2;
        if (v15 + 3 >= v25) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v5 + 8 * (v15 + 3));
        if (!v16)
        {
          int64_t v17 = v15 + 4;
          int64_t v11 = v15 + 3;
          if (v15 + 4 < v25)
          {
            unint64_t v16 = *(void *)(v5 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                int64_t v15 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_40;
                }
                if (v15 >= v25)
                {
                  int64_t v11 = v25 - 1;
                  goto LABEL_35;
                }

                unint64_t v16 = *(void *)(v5 + 8 * v15);
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }

uint64_t storeEnumTagSinglePayload for AnalyticsUtilityError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000F8010 + 4 * byte_10027C865[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F8044 + 4 * byte_10027C860[v4]))();
}

uint64_t sub_1000F8044(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F804C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F8054LL);
  }
  return result;
}

uint64_t sub_1000F8060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F8068LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000F806C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F8074(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsUtilityError()
{
  return &type metadata for AnalyticsUtilityError;
}

unint64_t sub_1000F8094()
{
  unint64_t result = qword_10032BA60;
  if (!qword_10032BA60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C8D8, &type metadata for AnalyticsUtilityError);
    atomic_store(result, (unint64_t *)&qword_10032BA60);
  }

  return result;
}

uint64_t sub_1000F80D0(uint64_t a1)
{
  return sub_1000F705C(a1, 0);
}

uint64_t sub_1000F80D8()
{
  return sub_1000F6D74(v0, 1);
}

void sub_1000F80E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032B180);
  uint64_t v6 = swift_allocObject(v5, 48LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_10027A600;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100086004();
  [v2 initWithKeyPath:isa];

  sub_1000AB000();
}

id sub_1000F818C(uint64_t a1)
{
  int v3 = (objc_class *)sub_1000CEFA8();
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032BAA0);
  uint64_t v5 = swift_allocObject(v4, 56LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_10027A600;
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = 0LL;
  *(_BYTE *)(v5 + 48) = 1;
  uint64_t v6 = (char *)sub_1000F8E18();
  *(void *)&v6[OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath] = v5;
  v10.receiver = v6;
  v10.super_class = v3;
  id v7 = objc_msgSendSuper2(&v10, "init");
  uint64_t v8 = sub_1000CEFA8();
  sub_1000F8E48(v1, v8);
  return v7;
}

id sub_1000F8254(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000CEFA8();
  uint64_t v5 = (objc_class *)v4;
  int64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __int128 v18 = (objc_class *)v4;
    uint64_t v19 = v1;
    __int128 v21 = _swiftEmptyArrayStorage;
    sub_1000C2408(0LL, v6, 0);
    id v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v9 = *v8;
      __int128 v21 = v7;
      unint64_t v12 = v7[2];
      unint64_t v11 = v7[3];
      swift_bridgeObjectRetain(v9);
      if (v12 >= v11 >> 1)
      {
        sub_1000C2408((void *)(v11 > 1), v12 + 1, 1);
        id v7 = v21;
      }

      v8 += 2;
      v7[2] = v12 + 1;
      unint64_t v13 = &v7[3 * v12];
      v13[4] = v10;
      v13[5] = v9;
      *((_BYTE *)v13 + 48) = 0;
      --v6;
    }

    while (v6);
    sub_100086004();
    uint64_t v5 = v18;
    uint64_t v2 = v19;
  }

  else
  {
    sub_100086004();
    id v7 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (char *)sub_1000F8E18();
  *(void *)&v14[OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath] = v7;
  v20.receiver = v14;
  v20.super_class = v5;
  id v15 = objc_msgSendSuper2(&v20, "init");
  uint64_t ObjectType = swift_getObjectType(v2);
  sub_1000F8E48(v2, ObjectType);
  return v15;
}

void sub_1000F83C4()
{
  id v1 = objc_allocWithZone(v0);
  sub_100085FEC();
  uint64_t v2 = sub_1000F8E20();
  sub_1000F80E4(v2, v3);
  sub_1000AB000();
}

id sub_1000F845C()
{
  id v1 = (objc_class *)sub_1000CEFA8();
  sub_1000F8E54(*(void *)(v0 + OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath));
  sub_100085FEC();
  uint64_t v2 = sub_1000F8E20();
  sub_1000F8C54(v2, v3, 0);
  uint64_t v4 = (char *)objc_allocWithZone(v1);
  *(void *)&v4[OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath] = v14;
  v13.receiver = v4;
  v13.super_class = v1;
  return sub_1000F8E2C((int)v4, "init", v5, v6, v7, v8, v9, v10, v12, v13);
}

void sub_1000F8544(uint64_t a1)
{
  uint64_t v4 = sub_1000F8E34();
  sub_1000F8E54(v4);
  sub_1000F8C54(a1, 0LL, 1);
  int v5 = (char *)sub_1000F8E18();
  *(void *)&v5[*(void *)(v2 + 2672)] = v14;
  v13.receiver = v5;
  v13.super_class = v1;
  sub_1000F8E2C((int)v5, "init", v6, v7, v8, v9, v10, v11, v12, v13);
  sub_100008600();
}

void sub_1000F85DC(uint64_t a1)
{
  uint64_t v4 = sub_1000F8E34();
  uint64_t v6 = *(void *)(a1 + v5);
  sub_1000F8E54(v4);
  sub_100085FEC();
  sub_1000F8D24(v6);
  int v7 = (char *)sub_1000F8E18();
  *(void *)&v7[*(void *)(v2 + 2672)] = v16;
  v15.receiver = v7;
  v15.super_class = v1;
  sub_1000F8E2C((int)v7, "init", v8, v9, v10, v11, v12, v13, v14, v15);
  sub_100008600();
}

void sub_1000F8688()
{
}

uint64_t type metadata accessor for SQLiteExtractJSONTransform()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd26SQLiteExtractJSONTransform);
}

uint64_t sub_1000F86F0()
{
  if (*(void *)(*(void *)(v0 + OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath) + 16LL))
  {
    v1._uint64_t countAndFlagsBits = sub_1000F8E20();
    String.append(_:)(v1);
    v2._uint64_t countAndFlagsBits = 0x293F203E3E2D20LL;
    v2._object = (void *)0xE700000000000000LL;
    String.append(_:)(v2);
  }

  else
  {
    sub_100085FEC();
  }

  return sub_1000F8E20();
}

uint64_t sub_1000F87F4()
{
  uint64_t result = 36LL;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = (_BYTE *)(v2 + 48);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      if ((*v4 & 1) != 0)
      {
        v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        object = v6._object;
        String.append(_:)(v6);
        swift_bridgeObjectRelease(object);
        v8._uint64_t countAndFlagsBits = 93LL;
        v8._object = (void *)0xE100000000000000LL;
        String.append(_:)(v8);
        v9._uint64_t countAndFlagsBits = 91LL;
        v9._object = (void *)0xE100000000000000LL;
        String.append(_:)(v9);
      }

      else
      {
        int v10 = (void *)*((void *)v4 - 1);
        swift_bridgeObjectRetain(v10);
        v11._uint64_t countAndFlagsBits = v5;
        v11._object = v10;
        String.append(_:)(v11);
        v12._uint64_t countAndFlagsBits = 46LL;
        v12._object = (void *)0xE100000000000000LL;
        String.append(_:)(v12);
        sub_1000F8ACC(v5, (uint64_t)v10, 0);
      }

      swift_bridgeObjectRelease(0xE100000000000000LL);
      v4 += 24;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v2);
    return 36LL;
  }

  return result;
}

void sub_1000F893C(id a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      uint64_t v7 = *(void *)(v3 + 32);
      if ((*(_BYTE *)(v3 + 48) & 1) != 0)
      {
        [a1 bindInt64:v7 atPosition:*a2];
      }

      else
      {
        uint64_t v11 = *(void *)(v3 + 40);
        swift_bridgeObjectRetain(v11);
        NSString v12 = String._bridgeToObjectiveC()();
        [a1 bindStringCopy:v12 atPosition:*a2];
        sub_1000F8ACC(v7, v11, 0);
      }
    }

    else
    {
      sub_1000F87F4();
      uint64_t v9 = v8;
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      [a1 bindStringCopy:v10 atPosition:*a2];
    }

    if (__OFADD__(*a2, 1)) {
      __break(1u);
    }
    else {
      ++*a2;
    }
  }

uint64_t sub_1000F8AAC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for SQLiteExtractJSONTransform.JSONKeyPathComponent(uint64_t a1)
{
  return sub_1000F8ACC(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1000F8ACC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void _s9storekitd26SQLiteExtractJSONTransformC20JSONKeyPathComponentOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000F8AAC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000AB000();
}

uint64_t assignWithCopy for SQLiteExtractJSONTransform.JSONKeyPathComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000F8AAC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000F8ACC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SQLiteExtractJSONTransform.JSONKeyPathComponent(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000F8ACC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteExtractJSONTransform.JSONKeyPathComponent( uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteExtractJSONTransform.JSONKeyPathComponent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000F8C38(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteExtractJSONTransform.JSONKeyPathComponent()
{
  return &type metadata for SQLiteExtractJSONTransform.JSONKeyPathComponent;
}

void sub_1000F8C54(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (unint64_t v10 = *(void *)(v7 + 24) >> 1, v10 <= v8))
  {
    sub_1001311CC(isUniquelyReferenced_nonNull_native, v8 + 1, 1, v7);
    uint64_t v7 = v11;
    unint64_t v10 = *(void *)(v11 + 24) >> 1;
  }

  uint64_t v12 = *(void *)(v7 + 16);
  uint64_t v13 = v10 - v12;
  if (!v13) {
    goto LABEL_10;
  }
  if (v13 < 1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v14 = v7 + 24 * v12;
  *(void *)(v14 + 32) = a1;
  *(void *)(v14 + 40) = a2;
  *(_BYTE *)(v14 + 48) = a3 & 1;
  ++*(void *)(v7 + 16);
  if (v13 != 1) {
    sub_1000F8E00(0LL, 0LL, 0xFFu);
  }
  *unsigned int v3 = v7;
}

void sub_1000F8D24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_1001311CC(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  uint64_t v10 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  sub_100131EEC(a1 + 32, v2, v3 + 24 * v10 + 32);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease(a1);
    *Swift::String v1 = v3;
    return;
  }

  uint64_t v11 = *(void *)(v3 + 16);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *(void *)(v3 + 16) = v13;
    goto LABEL_14;
  }

uint64_t sub_1000F8E00(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1000F8ACC(result, a2, a3 & 1);
  }
  return result;
}

id sub_1000F8E18()
{
  return objc_allocWithZone(v0);
}

uint64_t sub_1000F8E20()
{
  return v0;
}

id sub_1000F8E2C( int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  return objc_msgSendSuper2(&a10, a2);
}

uint64_t sub_1000F8E34()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9storekitd26SQLiteExtractJSONTransform_keyPath);
}

uint64_t sub_1000F8E48(uint64_t a1, uint64_t a2)
{
  return swift_deallocPartialClassInstance(a1, a2, 16LL, 7LL);
}

uint64_t sub_1000F8E54(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

void sub_1000F8E60(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_1000E9A14(a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1000E9A14(a2);
  if (v3 == v6 && v5 == v7) {
    sub_10011BDFC();
  }
  else {
    sub_10011B22C(v3, v7, v6);
  }
  sub_100085EF0();
  sub_10007B980();
  sub_1000AB000();
}

void sub_1000F8EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7) {
    sub_10011BDFC();
  }
  else {
    sub_10011B22C(v3, v7, v6);
  }
  sub_100085EF0();
  sub_10007B980();
  sub_1000AB000();
}

void sub_1000F8F28(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000F8F68(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F8FC0 + 4 * byte_10027C98C[a2]))(0x747865746E6F63LL);
}

void sub_1000F8FC0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x747865746E6F63LL && v2 == 0xE700000000000000LL) {
    sub_10011BDFC();
  }
  else {
    sub_10011B22C(a1, a2, 0x747865746E6F63LL);
  }
  sub_100085EF0();
  sub_10007B980();
  sub_1000AB000();
}

void sub_1000F9028(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000F909C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000F910C + 4 * byte_10027C994[a2]))(0x6D61466E656B6F74LL);
}

void sub_1000F910C(uint64_t a1)
{
  if (a1 != 0x6D61466E656B6F74LL || v1 != 0xED00006449796C69LL) {
    _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D61466E656B6F74LL, 0xED00006449796C69LL, 0LL);
  }
  sub_10007B980();
  sub_100085EF0();
  sub_1000AB000();
}

void sub_1000F91A0(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x7079546E656B6F74LL;
  }
  else {
    uint64_t v3 = 0xD000000000000015LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010029CC90LL;
  }
  else {
    unint64_t v4 = 0xE900000000000065LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x7079546E656B6F74LL;
  }
  else {
    uint64_t v5 = 0xD000000000000015LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE900000000000065LL;
  }
  else {
    unint64_t v6 = 0x800000010029CC90LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_10011BDFC();
  }
  else {
    sub_10011B22C(v3, a2, v5);
  }
  sub_100085EF0();
  sub_10007B980();
  sub_1000AB000();
}

void sub_1000F9228(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0xD000000000000012LL;
  }
  else {
    uint64_t v3 = 0xD000000000000015LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010029CC90LL;
  }
  else {
    unint64_t v4 = 0x800000010029CCB0LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0xD000000000000012LL;
  }
  else {
    uint64_t v5 = 0xD000000000000015LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x800000010029CCB0LL;
  }
  else {
    unint64_t v6 = 0x800000010029CC90LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_10011BDFC();
  }
  else {
    sub_10011B22C(v3, a2, v5);
  }
  sub_100085EF0();
  sub_10007B980();
  sub_1000AB000();
}

void sub_1000F92AC(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0xD00000000000001CLL;
  }
  else {
    uint64_t v3 = 0xD000000000000017LL;
  }
  if (v2) {
    unint64_t v4 = 0x800000010029CC50LL;
  }
  else {
    unint64_t v4 = 0x800000010029CC70LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0xD00000000000001CLL;
  }
  else {
    uint64_t v5 = 0xD000000000000017LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0x800000010029CC70LL;
  }
  else {
    unint64_t v6 = 0x800000010029CC50LL;
  }
  if (v3 == v5 && v4 == v6) {
    sub_10011BDFC();
  }
  else {
    sub_10011B22C(v3, a2, v5);
  }
  sub_100085EF0();
  sub_10007B980();
  sub_1000AB000();
}

BOOL sub_1000F9330(char a1, char a2)
{
  return qword_10027C9A8[a1] == qword_10027C9A8[a2];
}

BOOL sub_1000F9354(int a1, int a2)
{
  return a1 == a2;
}

id sub_1000F9360(uint64_t a1, void *a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v17 = 0LL;
  id v7 =  [(id)swift_getObjCClassFromMetadata(v3) bundleRecordWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v17];

  id v8 = v17;
  if (!v7)
  {
    sub_10011C298();

    swift_willThrow(v9, v10, v11, v12, v13, v14, v15);
  }

  return v7;
}

void sub_1000F943C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  unint64_t v4 = (void *)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  sub_10011BBDC(v4);
}

void sub_1000F9480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000AAD2C();
  uint64_t v8 = sub_10011C214(v7);
  if (v9)
  {
    sub_10009C740(v8, (uint64_t *)&unk_10032BAB0);
    uint64_t v10 = 7168LL;
  }

  else
  {
    TaskPriority.rawValue.getter(v8);
    sub_10011BB54();
    uint64_t v10 = v3 | 0x1C00LL;
  }

  if (*(void *)(a3 + 16))
  {
    sub_10011C200();
    sub_100086320();
    sub_1000861C4();
    sub_100086214();
  }

  else
  {
    a1 = 0LL;
    uint64_t v3 = 0LL;
  }

  uint64_t v11 = sub_1000AA314((uint64_t)&unk_1002EEA60, 32LL);
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  if (v3 | a1)
  {
    v13[0] = 0LL;
    v13[1] = 0LL;
    uint64_t v12 = v13;
    v13[2] = a1;
    v13[3] = v3;
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  swift_task_create(v10, v12, &type metadata for ()[8], &unk_10032BDB8, v11);
  sub_10008606C();
}

void sub_1000F9554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000AAD2C();
  uint64_t v8 = sub_10011C214(v7);
  if (v9)
  {
    sub_10009C740(v8, (uint64_t *)&unk_10032BAB0);
    uint64_t v10 = 7168LL;
  }

  else
  {
    TaskPriority.rawValue.getter(v8);
    sub_10011BB54();
    uint64_t v10 = v3 | 0x1C00LL;
  }

  if (*(void *)(a3 + 16))
  {
    sub_10011C200();
    sub_100086320();
    sub_1000861C4();
    sub_100086214();
  }

  else
  {
    a1 = 0LL;
    uint64_t v3 = 0LL;
  }

  uint64_t v11 = sub_1000AA314((uint64_t)&unk_1002EE980, 32LL);
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  uint64_t v12 = sub_10007B1FC(&qword_10032BCD0);
  if (v3 | a1)
  {
    v14[0] = 0LL;
    v14[1] = 0LL;
    uint64_t v13 = v14;
    v14[2] = a1;
    uint64_t v14[3] = v3;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  swift_task_create(v10, v13, v12, &unk_100329BD0, v11);
  sub_10008606C();
}

uint64_t sub_1000F9630(uint64_t a1)
{
  uint64_t v3 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10007B1FC(&qword_10032BD40);
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v71 = (uint64_t)&v60 - v11;
  __chkstk_darwin(v10);
  uint64_t v70 = (uint64_t)&v60 - v12;
  uint64_t v69 = sub_10007B1FC(&qword_10032BD48);
  uint64_t v13 = __chkstk_darwin(v69);
  uint64_t v15 = (uint64_t *)((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v68 = (uint64_t *)((char *)&v60 - v17);
  __chkstk_darwin(v16);
  BOOL v67 = (char *)&v60 - v18;
  uint64_t v19 = type metadata accessor for ClientOverrideRequest(0LL);
  uint64_t v66 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  __int128 v21 = (uint64_t *)((char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  if (!v22) {
    return (uint64_t)v23;
  }
  uint64_t v82 = v9;
  uint64_t v60 = v1;
  uint64_t v83 = _swiftEmptyArrayStorage;
  sub_1000C2424(0, v22, 0);
  uint64_t result = sub_10011AA68(a1);
  if ((result & 0x8000000000000000LL) == 0 && result < 1LL << *(_BYTE *)(a1 + 32))
  {
    uint64_t v26 = a1 + 64;
    NSString v64 = v21;
    uint64_t v65 = a1;
    uint64_t v62 = v5;
    uint64_t v63 = a1 + 64;
    uint64_t v61 = v15;
    while ((*(void *)(v26 + 8 * ((unint64_t)result >> 6)) & (1LL << result)) != 0)
    {
      if ((_DWORD)v25 != *(_DWORD *)(a1 + 36)) {
        goto LABEL_22;
      }
      uint64_t v76 = 1LL << result;
      unint64_t v77 = (unint64_t)result >> 6;
      uint64_t v74 = v22;
      uint64_t v75 = v25;
      uint64_t v27 = v69;
      __int128 v28 = v67;
      uint64_t v29 = (uint64_t)&v67[*(int *)(v69 + 48)];
      uint64_t v30 = *(void *)(a1 + 56);
      __int128 v31 = (uint64_t *)(*(void *)(a1 + 48) + 16 * result);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      uint64_t v34 = *(void *)(v72 + 72);
      uint64_t v81 = result;
      sub_1000E9220(v30 + v34 * result, v29, &qword_10032BD40);
      *__int128 v28 = v33;
      v28[1] = v32;
      uint64_t v35 = (uint64_t)v68;
      *uint64_t v68 = v33;
      *(void *)(v35 + 8) = v32;
      sub_1000E9220(v29, v35 + *(int *)(v27 + 48), &qword_10032BD40);
      sub_1000E91F4(v35, (uint64_t)v15, &qword_10032BD48);
      swift_bridgeObjectRetain_n(v32, 2LL);
      sub_100085298((uint64_t)v28, &qword_10032BD48);
      uint64_t v80 = *v15;
      uint64_t v36 = (uint64_t)v82;
      uint64_t v78 = v15[1];
      uint64_t v37 = (uint64_t)v15 + *(int *)(v27 + 48);
      uint64_t v38 = v73;
      uint64_t v39 = *(int *)(v73 + 48);
      uint64_t v40 = v37 + v39;
      uint64_t v41 = v70;
      uint64_t v42 = v70 + v39;
      sub_1000E8F9C(v37, v70, type metadata accessor for ClientOverride);
      uint64_t v43 = type metadata accessor for Date(0LL);
      uint64_t v79 = *(void *)(v43 - 8);
      __int128 v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16);
      v44(v42, v40, v43);
      uint64_t v45 = v71;
      uint64_t v46 = v71 + *(int *)(v38 + 48);
      sub_1000E8F9C(v41, v71, type metadata accessor for ClientOverride);
      v44(v46, v42, v43);
      sub_1000E9158(v45, (uint64_t)v5, type metadata accessor for ClientOverride);
      uint64_t v47 = type metadata accessor for ClientOverride(0LL);
      uint64_t v48 = (uint64_t)v5;
      uint64_t v49 = v78;
      sub_10007D0AC(v48, 0LL, 1LL, v47);
      uint64_t v50 = v36 + *(int *)(v38 + 48);
      sub_1000E8F9C(v41, v36, type metadata accessor for ClientOverride);
      v44(v50, v42, v43);
      uint64_t v51 = qword_100328B40;
      swift_bridgeObjectRetain(v49);
      if (v51 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v52 = type metadata accessor for SKLogger(0LL);
      sub_100079604(v52, (uint64_t)qword_10033E1A8);
      unint64_t v53 = sub_1000F4060();
      uint64_t v55 = v54;
      sub_100085298(v41, &qword_10032BD40);
      uint64_t v56 = v64;
      uint64_t v57 = v49;
      uint64_t v5 = v62;
      ClientOverrideRequest.init(bundleID:clientOverride:until:logKey:)(v80, v57, (uint64_t)v62, v50, v53, v55, v64);
      sub_100085BC4((uint64_t)v82, type metadata accessor for ClientOverride);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v46, v43);
      uint64_t v15 = v61;
      sub_100085298((uint64_t)v61, &qword_10032BD48);
      uint64_t v23 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000C2424(0, v23[2] + 1LL, 1);
        uint64_t v23 = v83;
      }

      uint64_t v26 = v63;
      unint64_t v59 = v23[2];
      unint64_t v58 = v23[3];
      if (v59 >= v58 >> 1)
      {
        sub_1000C2424(v58 > 1, v59 + 1, 1);
        uint64_t v23 = v83;
      }

      v23[2] = v59 + 1;
      sub_1000E9158( (uint64_t)v56,  (uint64_t)v23 + ((*(unsigned __int8 *)(v66 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))
      + *(void *)(v66 + 72) * v59,
        type metadata accessor for ClientOverrideRequest);
      a1 = v65;
      uint64_t result = v81;
      if (v81 >= -(-1LL << *(_BYTE *)(v65 + 32))) {
        goto LABEL_23;
      }
      if ((*(void *)(v26 + 8 * v77) & v76) == 0) {
        goto LABEL_24;
      }
      if ((_DWORD)v75 != *(_DWORD *)(v65 + 36)) {
        goto LABEL_25;
      }
      uint64_t result = _HashTable.occupiedBucket(after:)();
      uint64_t v22 = v74 - 1;
      if (v74 == 1) {
        return (uint64_t)v23;
      }
      if ((result & 0x8000000000000000LL) == 0)
      {
        uint64_t v25 = *(unsigned int *)(a1 + 36);
        if (result < 1LL << *(_BYTE *)(a1 + 32)) {
          continue;
        }
      }

      goto LABEL_26;
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

uint64_t sub_1000F9BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000E9220(a1, (uint64_t)v12, (uint64_t *)&unk_10032BAB0);
  uint64_t v13 = (void *)swift_allocObject(&unk_1002EE9F8, 64LL, 7LL);
  v13[2] = 0LL;
  uint64_t v14 = v13 + 2;
  v13[3] = 0LL;
  void v13[4] = a4;
  v13[5] = a5;
  v13[6] = a2;
  v13[7] = a3;
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  uint64_t v16 = sub_10007D824((uint64_t)v12, 1LL, v15);
  if ((_DWORD)v16 == 1)
  {
    sub_100085298((uint64_t)v12, (uint64_t *)&unk_10032BAB0);
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 7168LL;
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v16);
    (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8LL))(v12, v15);
    uint64_t v19 = v20 | 0x1C00LL;
    uint64_t v21 = *v14;
    if (*v14)
    {
      uint64_t v22 = v13[3];
      uint64_t ObjectType = swift_getObjectType(*v14);
      swift_unknownObjectRetain(v21);
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v22);
      uint64_t v18 = v24;
      swift_unknownObjectRelease(v21);
    }

    else
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
    }
  }

  uint64_t v25 = swift_allocObject(&unk_1002EEA20, 32LL, 7LL);
  *(void *)(v25 + 16) = &unk_10032BD58;
  *(void *)(v25 + 24) = v13;
  if (v18 | v17)
  {
    v29[0] = 0LL;
    v29[1] = 0LL;
    uint64_t v26 = v29;
    v29[2] = v17;
    v29[3] = v18;
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  uint64_t v27 = swift_task_create(v19, v26, &type metadata for ()[8], &unk_100329BD8, v25);
  sub_100085298(a1, (uint64_t *)&unk_10032BAB0);
  return v27;
}

uint64_t sub_1000F9DE4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  v7[6] = a7;
  uint64_t v10 = (int *)((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc(a4[1]);
  v7[7] = v8;
  *uint64_t v8 = v7;
  v8[1] = sub_1000F9E58;
  return ((uint64_t (*)(void *, void *))v10)(v7 + 2, v7 + 4);
}

uint64_t sub_1000F9E58()
{
  return sub_100092F20();
}

uint64_t sub_1000F9E9C()
{
  uint64_t v1 = *(void (**)(void *, uint64_t *))(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  v5[0] = v2;
  v5[1] = v3;
  uint64_t v6 = 0LL;
  sub_1000881FC(v2, v3);
  v1(v5, &v6);
  sub_10011C198(v2);
  sub_10011C198(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F9F0C()
{
  uint64_t v1 = *(void (**)(__int128 *, uint64_t *))(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 32);
  __int128 v4 = xmmword_10027C9D0;
  uint64_t v5 = v2;
  sub_10011C0C4();
  v1(&v4, &v5);
  sub_10011B038();
  sub_10011B038();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000F9F6C(void *(*a1)(uint64_t *__return_ptr), uint64_t a2, os_unfair_lock_s *a3)
{
  __int128 v4 = a3 + 4;
  os_unfair_lock_lock(a3 + 4);
  sub_10011AA40(v5, a1, &v6);
  os_unfair_lock_unlock(v4);
}

void sub_1000F9FDC(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v118 = a3;
  uint64_t v123 = a2;
  id v120 = a1;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SKLogger(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v113 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unsigned __int8 v20 = (char *)&v113 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v119 = (char *)&v113 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v113 - v23;
  uint64_t v25 = swift_allocObject(&unk_1002EE9A8, 24LL, 7LL);
  *(void *)(v25 + 16) = a4;
  uint64_t v26 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v122 = a4;
  uint64_t v27 = _Block_copy(a4);
  uint64_t v28 = PropertyListDecoder.init()(v27);
  unint64_t v29 = sub_1000FBEE0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v125,  &type metadata for ExternalGatewaySheetRequest,  v120,  v123,  &type metadata for ExternalGatewaySheetRequest,  v29);
  uint64_t v121 = v25;
  uint64_t v119 = v14;
  id v120 = v24;
  uint64_t v115 = v17;
  Swift::Int v114 = v20;
  Swift::Int v113 = v7;
  swift_release(v28);
  __int128 v129 = v125;
  __int128 v130 = v126;
  __int128 v131 = v127;
  uint64_t v132 = v128;
  uint64_t v30 = *((void *)&v125 + 1);
  uint64_t v31 = qword_100328B40;
  uint64_t v123 = (void *)v126;
  swift_bridgeObjectRetain_n(v126, 5LL);
  if (v31 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v117 = sub_100079604(v11, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v117, (uint64_t)v120, type metadata accessor for SKLogger);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  uint64_t v34 = swift_bridgeObjectRetain_n(v123, 2LL);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = v33;
  BOOL v37 = os_log_type_enabled(v35, v33);
  uint64_t v38 = (uint64_t)v10;
  uint64_t v116 = v30;
  if (v37)
  {
    uint64_t v39 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    v124[0] = v40;
    *(_DWORD *)uint64_t v39 = 136446466;
    uint64_t v41 = v123;
    *(void *)&__int128 v125 = 91LL;
    *((void *)&v125 + 1) = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v123);
    v42._uint64_t countAndFlagsBits = v30;
    v42._object = v41;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = 8285LL;
    v43._object = (void *)0xE200000000000000LL;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v41);
    uint64_t v44 = *((void *)&v125 + 1);
    *(void *)&__int128 v125 = sub_10007A488(v125, *((unint64_t *)&v125 + 1), v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 8, v39 + 4);
    swift_bridgeObjectRelease_n(v41, 2LL);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v39 + 12) = 2082;
    *(void *)&__int128 v125 = sub_10007A488(0xD000000000000021LL, 0x80000001002A2440LL, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 8, v39 + 14);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s%{public}s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_bridgeObjectRelease(v41);
  }

  else
  {

    swift_bridgeObjectRelease_n(v123, 3LL);
  }

  uint64_t v45 = BYTE1(v129);
  sub_100085BC4((uint64_t)v120, type metadata accessor for SKLogger);
  id v46 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  uint64_t v47 = (uint64_t)v119;
  if (!v46)
  {
    swift_bridgeObjectRelease(v123);
    sub_1000C4DC0(&v129);
LABEL_11:
    uint64_t v52 = v123;
    swift_bridgeObjectRelease_n(v123, 2LL);
    sub_1000E8F9C(v117, v47, type metadata accessor for SKLogger);
    *(void *)&__int128 v125 = 0LL;
    *((void *)&v125 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    v53._uint64_t countAndFlagsBits = 0xD000000000000020LL;
    v53._object = (void *)0x80000001002A2470LL;
    String.append(_:)(v53);
    LOBYTE(v124[0]) = v45;
    uint64_t v54 = _print_unlocked<A, B>(_:_:)(v124, &v125);
    __int128 v55 = v125;
    os_log_type_t v56 = static os_log_type_t.error.getter(v54);
    swift_bridgeObjectRetain_n(v52, 2LL);
    uint64_t v57 = swift_bridgeObjectRetain_n(*((void *)&v55 + 1), 2LL);
    unint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
    os_log_type_t v59 = v56;
    if (os_log_type_enabled(v58, v56))
    {
      uint64_t v60 = swift_slowAlloc(22LL, -1LL);
      uint64_t v61 = swift_slowAlloc(64LL, -1LL);
      v124[0] = v61;
      *(_DWORD *)uint64_t v60 = 136446466;
      uint64_t v62 = v123;
      *(void *)&__int128 v125 = 91LL;
      *((void *)&v125 + 1) = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v123);
      v63._uint64_t countAndFlagsBits = v116;
      v63._object = v62;
      String.append(_:)(v63);
      v64._uint64_t countAndFlagsBits = 8285LL;
      v64._object = (void *)0xE200000000000000LL;
      String.append(_:)(v64);
      swift_bridgeObjectRelease(v62);
      uint64_t v65 = *((void *)&v125 + 1);
      *(void *)&__int128 v125 = sub_10007A488(v125, *((unint64_t *)&v125 + 1), v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 8, v60 + 4);
      swift_bridgeObjectRelease_n(v62, 2LL);
      swift_bridgeObjectRelease(v65);
      *(_WORD *)(v60 + 12) = 2082;
      swift_bridgeObjectRetain(*((void *)&v55 + 1));
      *(void *)&__int128 v125 = sub_10007A488(v55, *((unint64_t *)&v55 + 1), v124);
      uint64_t v47 = (uint64_t)v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 8, v60 + 14);
      swift_bridgeObjectRelease_n(*((void *)&v55 + 1), 3LL);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "%{public}s%{public}s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_bridgeObjectRelease(*((void *)&v55 + 1));
      swift_bridgeObjectRelease(v62);
    }

    else
    {

      swift_bridgeObjectRelease_n(*((void *)&v55 + 1), 3LL);
      swift_bridgeObjectRelease_n(v123, 3LL);
    }

    uint64_t v66 = v121;
    sub_100085BC4(v47, type metadata accessor for SKLogger);
    unint64_t v67 = sub_10009BB88();
    uint64_t v68 = swift_allocError(&type metadata for StoreKitInternalError, v67, 0LL, 0LL);
    *uint64_t v69 = 3;
    uint64_t v70 = (void *)_convertErrorToNSError(_:)(v68);
    uint64_t v71 = v122;
    ((void (**)(void, void, void *))v122)[2](v122, 0LL, v70);

    swift_errorRelease(v68);
    swift_release(v66);
    goto LABEL_15;
  }

  uint64_t v48 = v46;
  char v49 = sub_1000E9FE0(v45);
  swift_bridgeObjectRelease(v123);
  if ((v49 & 1) == 0)
  {
    sub_1000C4DC0(&v129);

    goto LABEL_11;
  }

  type metadata accessor for Client(0LL);
  uint64_t v50 = type metadata accessor for ClientOverride(0LL);
  sub_10007D0AC(v38, 1LL, 1LL, v50);
  id v51 = v48;
  sub_1000E1A28(v51, v38);
  uint64_t v73 = v72;
  id v120 = v51;
  uint64_t v74 = v123;
  swift_bridgeObjectRelease(v123);
  uint64_t v75 = (uint64_t)v114;
  sub_1000E8F9C(v117, (uint64_t)v114, type metadata accessor for SKLogger);
  *(void *)&__int128 v125 = 0LL;
  *((void *)&v125 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease(*((void *)&v125 + 1));
  *(void *)&__int128 v125 = 0xD000000000000022LL;
  *((void *)&v125 + 1) = 0x80000001002A24D0LL;
  v124[0] = v45;
  v76._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v76._object;
  String.append(_:)(v76);
  swift_bridgeObjectRelease(object);
  v78._uint64_t countAndFlagsBits = 0x20726F6620LL;
  v78._object = (void *)0xE500000000000000LL;
  String.append(_:)(v78);
  uint64_t v119 = v73;
  uint64_t v79 = (uint64_t *)&v73[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
  uint64_t v80 = *v79;
  uint64_t v81 = (void *)v79[1];
  swift_bridgeObjectRetain(v81);
  v82._uint64_t countAndFlagsBits = v80;
  v82._object = v81;
  String.append(_:)(v82);
  uint64_t v83 = swift_bridgeObjectRelease(v81);
  __int128 v84 = v125;
  os_log_type_t v85 = static os_log_type_t.debug.getter(v83);
  swift_bridgeObjectRetain_n(v74, 2LL);
  uint64_t v86 = swift_bridgeObjectRetain_n(*((void *)&v84 + 1), 2LL);
  unint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
  os_log_type_t v88 = v85;
  if (os_log_type_enabled(v87, v85))
  {
    uint64_t v89 = swift_slowAlloc(22LL, -1LL);
    uint64_t v90 = swift_slowAlloc(64LL, -1LL);
    v124[0] = v90;
    *(_DWORD *)uint64_t v89 = 136446466;
    os_log_type_t v91 = v123;
    uint64_t v117 = v84;
    *(void *)&__int128 v125 = 91LL;
    *((void *)&v125 + 1) = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v123);
    v92._uint64_t countAndFlagsBits = v116;
    v92._object = v91;
    String.append(_:)(v92);
    v93._uint64_t countAndFlagsBits = 8285LL;
    v93._object = (void *)0xE200000000000000LL;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(v91);
    uint64_t v94 = *((void *)&v125 + 1);
    *(void *)&__int128 v125 = sub_10007A488(v125, *((unint64_t *)&v125 + 1), v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 8, v89 + 4);
    swift_bridgeObjectRelease_n(v91, 2LL);
    swift_bridgeObjectRelease(v94);
    *(_WORD *)(v89 + 12) = 2082;
    swift_bridgeObjectRetain(*((void *)&v84 + 1));
    *(void *)&__int128 v125 = sub_10007A488(v117, *((unint64_t *)&v84 + 1), v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 8, v89 + 14);
    swift_bridgeObjectRelease_n(*((void *)&v84 + 1), 3LL);
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "%{public}s%{public}s", (uint8_t *)v89, 0x16u);
    swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1LL, -1LL);
    uint64_t v95 = v89;
    uint64_t v75 = (uint64_t)v114;
    swift_slowDealloc(v95, -1LL, -1LL);
    swift_bridgeObjectRelease(*((void *)&v84 + 1));
    swift_bridgeObjectRelease(v91);
  }

  else
  {

    swift_bridgeObjectRelease_n(*((void *)&v84 + 1), 3LL);
    swift_bridgeObjectRelease_n(v123, 3LL);
  }

  uint64_t v96 = v116;
  uint64_t v97 = (uint64_t)v113;
  sub_100085BC4(v75, type metadata accessor for SKLogger);
  uint64_t v98 = *v79;
  uint64_t v99 = v79[1];
  swift_bridgeObjectRetain(v99);
  sub_1000FBF1C((uint64_t)&v129, v98, v99);
  swift_bridgeObjectRelease(v99);
  *(void *)&__int128 v125 = 0LL;
  *((void *)&v125 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(*((void *)&v125 + 1));
  *(void *)&__int128 v125 = 0xD000000000000017LL;
  *((void *)&v125 + 1) = 0x80000001002A2500LL;
  v100._uint64_t countAndFlagsBits = v96;
  uint64_t v101 = v123;
  v100._object = v123;
  String.append(_:)(v100);
  swift_bridgeObjectRelease(v101);
  __int128 v102 = v125;
  id v103 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v103)
  {
    uint64_t v104 = v103;
    sub_100119624(v102, *((uint64_t *)&v102 + 1), v103);

    uint64_t v105 = type metadata accessor for TaskPriority(0LL);
    sub_10007D0AC(v97, 1LL, 1LL, v105);
    uint64_t v106 = swift_allocObject(&unk_1002EE9D0, 128LL, 7LL);
    *(void *)(v106 + 16) = 0LL;
    *(void *)(v106 + 24) = 0LL;
    __int128 v107 = v130;
    *(_OWORD *)(v106 + 32) = v129;
    *(_OWORD *)(v106 + 48) = v107;
    *(_OWORD *)(v106 + 64) = v131;
    uint64_t v108 = v119;
    *(void *)(v106 + 80) = v132;
    *(void *)(v106 + 88) = v108;
    uint64_t v109 = v121;
    *(void *)(v106 + 96) = sub_10011A8CC;
    *(void *)(v106 + 104) = v109;
    *(_OWORD *)(v106 + 112) = v102;
    id v110 = v108;
    swift_retain(v109);
    sub_1000F9480(v97, (uint64_t)&unk_10032BCD8, v106);
    uint64_t v112 = v111;
    swift_release(v109);

    swift_release(v112);
    uint64_t v71 = v122;
LABEL_15:
    _Block_release(v71);
    return;
  }

  _Block_release(v122);
  __break(1u);
}

void StoreKitServiceConnection.externalGatewaySheet(with:reply:)()
{
  uint64_t v139 = v1;
  os_log_type_t v141 = v4;
  uint64_t v142 = v5;
  uint64_t v7 = v6;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_10011B378();
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v9);
  sub_100085FDC();
  uint64_t v12 = (void *)(v11 - v10);
  uint64_t v13 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v14);
  sub_1000862F4();
  id v140 = (id)v15;
  sub_100086200();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v132 - v18;
  __chkstk_darwin(v17);
  sub_10011BF0C();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v132 - v22;
  __chkstk_darwin(v21);
  sub_1000D4EDC();
  uint64_t v24 = sub_10011B960();
  sub_100093D7C(v24);
  sub_10011B9A4();
  sub_1000FBEE0();
  sub_10011B910();
  if (v7)
  {
    sub_10009C5EC();
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v25 = sub_100079604(v13, (uint64_t)qword_10033E1A8);
    sub_1000E9638(v25, v26, type metadata accessor for SKLogger);
    *(void *)&__int128 v148 = 0LL;
    *((void *)&v148 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    sub_100085F08(0xD00000000000002BLL, (uint64_t)"Error decoding ExternalGatewaySheetRequest ");
    uint64_t v139 = v7;
    *(void *)&__int128 v144 = v7;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v27 = _print_unlocked<A, B>(_:_:)(&v144, &v148);
    __int128 v28 = v148;
    os_log_type_t v29 = static os_log_type_t.error.getter(v27);
    sub_100085EE8(*((uint64_t *)&v28 + 1));
    uint64_t v30 = (os_log_s *)sub_1000935A4();
    os_log_type_t v31 = v29;
    if (sub_1000B22A4(v30))
    {
      uint64_t v32 = sub_10007B9FC(22LL);
      uint64_t v33 = sub_10007B9FC(64LL);
      *(void *)&__int128 v148 = v33;
      *(_DWORD *)uint64_t v32 = 136446466;
      uint64_t v35 = sub_10007BA24(v33, v34, (uint64_t *)&v148);
      uint64_t v36 = sub_10011C130(v35);
      sub_1000C6004(v36, v37);
      *(_WORD *)(v32 + 12) = 2082;
      sub_10008600C();
      *(void *)&__int128 v144 = sub_10011BF68(v28, v38, (uint64_t *)&v148);
      sub_1000C6004((uint64_t)&v144, (uint64_t)&v144);
      sub_100085E64(*((uint64_t *)&v28 + 1));
      sub_100086038((void *)&_mh_execute_header, v30, v31, "%{public}s%{public}s", (uint8_t *)v32);
      sub_100086030(v33, v39, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v33);
      sub_10007B974(v32);
      sub_100086004();
    }

    else
    {

      uint64_t v40 = sub_100085E64(*((uint64_t *)&v28 + 1));
    }

    sub_1000E961C(v40, type metadata accessor for SKLogger);
    uint64_t v56 = v139;
    uint64_t v57 = (void *)sub_10011B30C();
    id v58 = sub_10011B058(v57, "toASDErrorWithMetadata:");
    sub_10011B508();
    ((void (*)(void, void, void))v141)(0LL, 0LL, *((void *)&v28 + 1));

    uint64_t v59 = v56;
    goto LABEL_22;
  }

  id v140 = (id)v0;
  __int128 v137 = v12;
  Swift::String v136 = v19;
  uint64_t v134 = v3;
  Swift::String v138 = v23;
  uint64_t v133 = v2;
  sub_10009C5EC();
  __int128 v148 = v144;
  __int128 v149 = v145;
  __int128 v150 = v146;
  uint64_t v151 = v147;
  uint64_t v42 = *((void *)&v144 + 1);
  uint64_t v41 = v145;
  uint64_t v43 = qword_100328B40;
  swift_bridgeObjectRetain_n(v145, 5LL);
  if (v43 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v44 = sub_100079604(v13, (uint64_t)qword_10033E1A8);
  sub_10011B040(v44, v45, type metadata accessor for SKLogger);
  os_log_type_t v47 = static os_log_type_t.default.getter(v46);
  uint64_t v48 = sub_100085EE8(v41);
  char v49 = (os_log_s *)Logger.logObject.getter(v48);
  BOOL v50 = sub_10011B23C(v49);
  uint64_t v135 = v42;
  if (v50)
  {
    id v51 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v52 = sub_10007B9FC(64LL);
    v143[0] = v52;
    *(_DWORD *)id v51 = 136446466;
    *(void *)&__int128 v144 = 91LL;
    *((void *)&v144 + 1) = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v42);
    sub_100085F14();
    sub_100085FB4();
    *(void *)&__int128 v144 = sub_10008620C(v144, v53, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, (char *)&v144 + 8, v51 + 4);
    sub_10007D974(v41);
    sub_10007B980();
    sub_10011BA90();
    *(void *)&__int128 v144 = sub_1000AB050(33LL, 0x80000001002A2440LL, v143);
    sub_100086194((uint64_t)&v144, (uint64_t)&v144 + 8);
    sub_100086038((void *)&_mh_execute_header, v49, v47, "%{public}s%{public}s", v51);
    sub_100086030(v52, v54, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v52);
    sub_10007B974((uint64_t)v51);
    sub_100085FB4();
  }

  else
  {

    uint64_t v55 = sub_100085E64(v41);
  }

  uint64_t v60 = BYTE1(v148);
  sub_10011B354(v55, type metadata accessor for SKLogger);
  id v61 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  uint64_t v62 = (uint64_t)v137;
  if (!v61)
  {
    sub_100085FB4();
    sub_10011C35C();
LABEL_18:
    sub_10007D974(v41);
    sub_1000E9638(v44, v71, type metadata accessor for SKLogger);
    sub_10011B75C();
    _StringGuts.grow(_:)(34LL);
    sub_100085F08(0xD000000000000020LL, (uint64_t)"Client is not entitled for mode ");
    LOBYTE(v143[0]) = v60;
    uint64_t v72 = sub_10011C350();
    __int128 v73 = v144;
    static os_log_type_t.error.getter(v72);
    sub_100085EE8(v41);
    sub_100085EE8(*((uint64_t *)&v73 + 1));
    uint64_t v74 = (void *)sub_10009C5AC();
    if (sub_10011B3E0((os_log_s *)v74))
    {
      uint64_t v75 = sub_10007B9FC(22LL);
      uint64_t v76 = sub_10007B9FC(64LL);
      v143[0] = v76;
      *(_DWORD *)uint64_t v75 = 136446466;
      *(void *)&__int128 v144 = 91LL;
      *((void *)&v144 + 1) = 0xE100000000000000LL;
      sub_10008618C();
      id v140 = (id)v73;
      sub_10009C32C(v135);
      sub_100085F14();
      sub_100085FB4();
      *(void *)&__int128 v144 = sub_10008620C(v144, v77, v143);
      sub_1000B21CC((uint64_t)&v144, (uint64_t)&v144 + 8);
      sub_10007D974(v41);
      sub_10007B980();
      *(_WORD *)(v75 + 12) = 2082;
      sub_100085FEC();
      *(void *)&__int128 v144 = sub_1000B20F4((uint64_t)v140, v78, v143);
      sub_100086194((uint64_t)&v144, (uint64_t)&v144 + 8);
      sub_100085E64(*((uint64_t *)&v73 + 1));
      sub_10011C1A0();
      sub_100086038(v79, v80, v81, v82, (uint8_t *)v75);
      sub_100086030(v76, v83, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v76);
      sub_10007B974(v75);
      sub_100085EF0();
      sub_100085FB4();
    }

    else
    {

      sub_100085E64(*((uint64_t *)&v73 + 1));
      uint64_t v84 = sub_100085E64(v41);
    }

    sub_10011BD24(v84, type metadata accessor for SKLogger);
    unint64_t v85 = sub_10009BB88();
    uint64_t v86 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v85);
    uint64_t v88 = sub_10011C31C(v87, 3);
    v141(v88);
    uint64_t v59 = v86;
LABEL_22:
    swift_errorRelease(v59);
LABEL_23:
    sub_100085E98();
    return;
  }

  Swift::String v63 = v61;
  char v64 = sub_1000E9FE0(v60);
  sub_100085FB4();
  if ((v64 & 1) == 0)
  {
    sub_10011C35C();

    goto LABEL_18;
  }

  uint64_t v65 = v44;
  sub_1000E66E0();
  uint64_t v66 = sub_1000E953C();
  id v69 = sub_10011BD60(v62, v67, v68, v66);
  sub_1000E1A28(v69, v62);
  uint64_t v89 = v70;
  sub_100085FB4();
  sub_10011C128(v65, v90, type metadata accessor for SKLogger);
  sub_10011B75C();
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease(*((void *)&v144 + 1));
  sub_1000AB058();
  *(void *)&__int128 v144 = v92;
  *((void *)&v144 + 1) = v91;
  v143[0] = v60;
  v93._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v93);
  sub_100085EF0();
  v94._uint64_t countAndFlagsBits = 0x20726F6620LL;
  v94._object = (void *)0xE500000000000000LL;
  String.append(_:)(v94);
  __int128 v137 = v89;
  uint64_t v95 = (uint64_t *)&v89[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
  uint64_t v96 = *(void *)&v89[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
  sub_10007BA3C();
  sub_100093624(v96);
  uint64_t v97 = sub_10007BA44();
  __int128 v98 = v144;
  static os_log_type_t.debug.getter(v97);
  sub_100085EE8(v41);
  sub_100085EE8(*((uint64_t *)&v98 + 1));
  uint64_t v99 = (void *)sub_1000DB3CC();
  if (sub_10011B3E0((os_log_s *)v99))
  {
    uint64_t v100 = sub_10007B9FC(22LL);
    uint64_t v101 = sub_10007B9FC(64LL);
    id v140 = v69;
    uint64_t v102 = v101;
    v143[0] = v101;
    *(_DWORD *)uint64_t v100 = 136446466;
    sub_10011C2F8(v100 + 4);
    sub_10008618C();
    Swift::String v136 = (char *)v98;
    uint64_t v103 = v135;
    sub_10009C32C(v135);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v105 = sub_10008620C(v144, v104, v143);
    uint64_t v106 = sub_10011C130(v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v107, v134);
    sub_10007D974(v41);
    sub_10007B980();
    *(_WORD *)(v100 + 12) = 2082;
    sub_100085FEC();
    *(void *)&__int128 v144 = sub_1000B20F4((uint64_t)v136, v108, v143);
    sub_100086194((uint64_t)&v144, (uint64_t)&v144);
    sub_100085E64(*((uint64_t *)&v98 + 1));
    sub_10011C1A0();
    uint64_t v109 = v103;
    sub_100086038(v110, v111, v112, v113, (uint8_t *)v100);
    sub_100086030(v102, v114, (uint64_t)&type metadata for Any + 8);
    uint64_t v115 = v102;
    id v69 = v140;
    sub_10007B974(v115);
    sub_10007B974(v100);
    sub_100085EF0();
    sub_100085FB4();

    uint64_t v117 = v142;
  }

  else
  {

    sub_100085E64(*((uint64_t *)&v98 + 1));
    uint64_t v116 = sub_100085E64(v41);
    uint64_t v117 = v142;
    uint64_t v109 = v135;
  }

  uint64_t v118 = v133;
  sub_1000E97FC(v116, type metadata accessor for SKLogger);
  uint64_t v119 = *v95;
  uint64_t v120 = v95[1];
  sub_10007BA3C();
  sub_1000FBF1C((uint64_t)&v148, v119, v120);
  sub_10007BA44();
  sub_10011B75C();
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(*((void *)&v144 + 1));
  *(void *)&__int128 v144 = 0xD000000000000017LL;
  *((void *)&v144 + 1) = 0x80000001002A2500LL;
  sub_10009C32C(v109);
  sub_100085FB4();
  __int128 v121 = v144;
  id v122 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v122)
  {
    uint64_t v123 = v122;
    uint64_t v124 = sub_10009C714();
    sub_100119624(v124, v125, v123);

    uint64_t v126 = sub_1000AAD2C();
    sub_1000875FC(v118, v127, v128, v126);
    uint64_t v129 = sub_1000AA314((uint64_t)&unk_1002EE2A0, 128LL);
    *(void *)(v129 + 16) = 0LL;
    *(void *)(v129 + 24) = 0LL;
    __int128 v130 = v149;
    *(_OWORD *)(v129 + 32) = v148;
    *(_OWORD *)(v129 + 48) = v130;
    *(_OWORD *)(v129 + 64) = v150;
    __int128 v131 = v137;
    *(void *)(v129 + 80) = v151;
    *(void *)(v129 + 88) = v131;
    *(void *)(v129 + 96) = v141;
    *(void *)(v129 + 104) = v117;
    *(_OWORD *)(v129 + 112) = v121;
    v131;
    swift_retain(v117);
    sub_1000F9480(v118, (uint64_t)&unk_10032BAE0, v129);
    sub_100086064();
    sub_10009C5EC();

    goto LABEL_23;
  }

  __break(1u);
}

unint64_t sub_1000FBEE0()
{
  unint64_t result = qword_10032BAC0;
  if (!qword_10032BAC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ExternalGatewaySheetRequest,  &type metadata for ExternalGatewaySheetRequest);
    atomic_store(result, (unint64_t *)&qword_10032BAC0);
  }

  return result;
}

void sub_1000FBF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SKLogger(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v60 - v10;
  uint64_t v12 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10007B1FC((uint64_t *)&unk_10032C440);
  uint64_t inited = swift_initStackObject(v15, v65);
  *(_OWORD *)(inited + 16) = xmmword_10027A330;
  *(void *)(inited + 32) = 0x6449656C646E7562LL;
  *(void *)(inited + 40) = 0xE800000000000000LL;
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD00000000000001ALL;
  *(void *)(inited + 120) = &type metadata for Int;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 1);
  *(void *)(inited + 88) = 0x80000001002A3690LL;
  *(void *)(inited + 96) = v17;
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  uint64_t v62 = 0LL;
  id v21 = [v19 dataWithJSONObject:isa options:0 error:&v62];

  id v22 = (id)v62;
  if (v21)
  {
    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v25 = v24;

    static String.Encoding.utf8.getter();
    uint64_t v26 = String.init(data:encoding:)(v23, v25, v14);
    if (v27)
    {
      uint64_t v28 = v26;
      unint64_t v29 = v27;
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v30 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
      sub_1000E8F9C(v30, (uint64_t)v11, type metadata accessor for SKLogger);
      os_log_type_t v32 = static os_log_type_t.default.getter(v31);
      uint64_t v33 = swift_bridgeObjectRetain_n(v29, 2LL);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = v32;
      if (os_log_type_enabled(v34, v32))
      {
        uint64_t v36 = swift_slowAlloc(22LL, -1LL);
        uint64_t v61 = swift_slowAlloc(64LL, -1LL);
        uint64_t v62 = v61;
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v64 = sub_10007A488(0LL, 0xE000000000000000LL, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v36 + 4);
        *(_WORD *)(v36 + 12) = 2082;
        swift_bridgeObjectRetain(v29);
        uint64_t v64 = sub_10007A488(v28, v29, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v36 + 14);
        swift_bridgeObjectRelease_n(v29, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s%{public}s", (uint8_t *)v36, 0x16u);
        uint64_t v37 = v61;
        swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v29, 2LL);
      }

      sub_10007F054(v23, v25);
      swift_bridgeObjectRelease(v29);
      goto LABEL_17;
    }

    sub_10007F054(v23, v25);
  }

  else
  {
    uint64_t v38 = v22;
    uint64_t v39 = _convertNSErrorToError(_:)(v22);

    swift_willThrow(v40, v41, v42, v43, v44, v45, v46);
    swift_errorRelease(v39);
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v47 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v47, (uint64_t)v9, type metadata accessor for SKLogger);
  uint64_t v49 = *(void *)(a1 + 8);
  uint64_t v48 = *(void **)(a1 + 16);
  os_log_type_t v51 = static os_log_type_t.error.getter(v50);
  uint64_t v52 = swift_bridgeObjectRetain_n(v48, 2LL);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = v51;
  if (os_log_type_enabled(v53, v51))
  {
    uint64_t v55 = swift_slowAlloc(22LL, -1LL);
    uint64_t v56 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v55 = 136446466;
    uint64_t v62 = 91LL;
    unint64_t v63 = 0xE100000000000000LL;
    uint64_t v64 = v56;
    swift_bridgeObjectRetain(v48);
    v57._uint64_t countAndFlagsBits = v49;
    v57._object = v48;
    String.append(_:)(v57);
    v58._uint64_t countAndFlagsBits = 8285LL;
    v58._object = (void *)0xE200000000000000LL;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v48);
    unint64_t v59 = v63;
    uint64_t v62 = sub_10007A488(v62, v63, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v55 + 4);
    swift_bridgeObjectRelease_n(v48, 2LL);
    swift_bridgeObjectRelease(v59);
    *(_WORD *)(v55 + 12) = 2082;
    uint64_t v62 = sub_10007A488(0xD000000000000032LL, 0x80000001002A36B0LL, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v55 + 14);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "%{public}s%{public}s", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v48, 2LL);
  }

  uint64_t v11 = v9;
LABEL_17:
  sub_100085BC4((uint64_t)v11, type metadata accessor for SKLogger);
}

uint64_t sub_1000FC550( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[26] = a8;
  v8[27] = v19;
  v8[24] = a6;
  v8[25] = a7;
  v8[22] = a4;
  v8[23] = a5;
  uint64_t v10 = type metadata accessor for SKLogger(0LL);
  v8[28] = v10;
  v8[29] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  v8[30] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(type metadata accessor for ExternalGatewaySheet(0LL) - 8);
  v8[31] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v8[32] = v13;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v8[33] = swift_task_alloc(v14);
  uint64_t v15 = swift_task_alloc(v14);
  uint64_t v17 = *(void *)(a4 + 8);
  uint64_t v16 = *(void *)(a4 + 16);
  v8[34] = v15;
  v8[35] = v17;
  v8[36] = v16;
  swift_bridgeObjectRetain(v16);
  return swift_task_switch(sub_1000FC62C, 0LL, 0LL);
}

uint64_t sub_1000FC62C()
{
  uint64_t v1 = (void *)v0[23];
  sub_1000C49D4((void *)v0[22]);
  id v2 = v1;
  uint64_t v3 = (void *)sub_100093010();
  v0[37] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000FC688;
  return sub_100134514(v0[34], v0[22], v0[23]);
}

uint64_t sub_1000FC688()
{
  v0[38] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v0[36]);
    sub_100093420();
    return sub_1000AA908(v5, v6, v7);
  }

  else
  {
    uint64_t v9 = (void *)swift_task_alloc(dword_10032AB0C);
    v0[39] = (uint64_t)v9;
    *uint64_t v9 = v2;
    v9[1] = sub_1000FC714;
    return sub_1000B6F64((uint64_t)(v0 + 12), v0[22], v0[23], v0[35], v0[36]);
  }

uint64_t sub_1000FC714()
{
  *(void *)(v1 + 320) = v0;
  swift_task_dealloc(v3);
  sub_100085EF0();
  if (!v0) {
    *(_BYTE *)(v1 + 352) = *(_BYTE *)(*(void *)(v1 + 176) + 32LL);
  }
  sub_100093420();
  return sub_10009C2D4();
}

id sub_1000FC778(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(v3 + 352) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v3 + 264);
    uint64_t v5 = *(void *)(v3 + 272);
    uint64_t v6 = *(void *)(v3 + 248);
    uint64_t v7 = *(void *)(v3 + 256);
    uint64_t v8 = *(void *)(v3 + 240);
    uint64_t v32 = v8;
    uint64_t v9 = *(__int128 **)(v3 + 176);
    uint64_t v10 = *(void **)(v3 + 184);
    int v33 = *((unsigned __int8 *)v9 + 1);
    uint64_t v11 = sub_1000AAD2C();
    sub_1000875FC(v8, v12, v13, v11);
    sub_10011B714(v5, v14, type metadata accessor for ExternalGatewaySheet);
    sub_10011C1D0(v3 + 96, v15, &qword_10032BDC0);
    uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v17 = (v16 + 40) & ~v16;
    unint64_t v18 = (v7 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v19 = (v18 + 47) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v20 = (void *)swift_allocObject(&unk_1002EEA88, v19 + 56, v16 | 7);
    uint64_t v20[2] = 0LL;
    v20[3] = 0LL;
    void v20[4] = v10;
    sub_1000E9158(v4, (uint64_t)v20 + v17, type metadata accessor for ExternalGatewaySheet);
    sub_1000E91F4(v3 + 16, (uint64_t)v20 + v18, &qword_10032BDC0);
    id v21 = (char *)v20 + v19;
    __int128 v23 = v9[1];
    __int128 v22 = v9[2];
    __int128 v24 = *v9;
    *((void *)v21 + 6) = *((void *)v9 + 6);
    *((_OWORD *)v21 + 1) = v23;
    *((_OWORD *)v21 + 2) = v22;
    *(_OWORD *)id v21 = v24;
    sub_1000C49D4(v9);
    id v25 = v10;
    uint64_t v2 = (void *)sub_100121E34(v32, (uint64_t)&unk_10032BDD0, (uint64_t)v20);
    *(void *)(v3 + 328) = v2;
    if ((v33 & 0xFFFFFFFD) != 0)
    {
      uint64_t v26 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
      *(void *)(v3 + 336) = v26;
      uint64_t v27 = sub_10007B1FC(&qword_100329B90);
      *uint64_t v26 = v3;
      v26[1] = sub_1000FC9C4;
      return (id)Task.value.getter( v27,  v2,  &type metadata for ()[8],  v27,  &protocol self-conformance witness table for Error);
    }

    a1 = sub_10009C5EC();
  }

  sub_10011C36C(a1, a2, &qword_10032BDC0);
  if (*(void *)(v3 + 80))
  {
    sub_10011B918();
    sub_10011C014();
  }

  else
  {
    sub_10011C388(v29, &qword_10032BDC0);
  }

  sub_10011BB24();
  uint64_t v30 = sub_100085FB4();
  sub_1000C65BC(v30, &qword_10032BDC0);
  sub_10011C390(v31, type metadata accessor for ExternalGatewaySheet);
  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    sub_10011B0BC(result);

    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    return (id)sub_1000B2064(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000FC9C4()
{
  *(void *)(v1 + 344) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

id sub_1000FCA10()
{
  uint64_t v2 = swift_release(*(void *)(v1 + 328));
  sub_10011C36C(v2, v3, &qword_10032BDC0);
  if (*(void *)(v1 + 80))
  {
    sub_10011B918();
    sub_10011C014();
  }

  else
  {
    sub_10011C388(v4, &qword_10032BDC0);
  }

  sub_10011BB24();
  uint64_t v5 = sub_100085FB4();
  sub_1000C65BC(v5, &qword_10032BDC0);
  sub_10011C390(v6, type metadata accessor for ExternalGatewaySheet);
  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    sub_10011B0BC(result);

    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    return (id)sub_1000AA724(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

#error "1000FCC10: call analysis failed (funcsize=153)"
#error "1000FCEA8: call analysis failed (funcsize=156)"
id sub_1000FCFF8( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22,  uint64_t a23,  uint64_t a24,  uint64_t a25,  uint64_t a26,  uint64_t a27,  uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  os_log_s *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  id result;
  sub_10009C150();
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = (void *)(v28 + 160);
  uint64_t v32 = swift_release(*(void *)(v28 + 328));
  sub_10009C740(v32, &qword_10032BDC0);
  sub_1000E961C(v33, type metadata accessor for ExternalGatewaySheet);
  uint64_t v34 = *(void *)(v28 + 344);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  os_log_type_t v35 = *(void *)(v28 + 288);
  uint64_t v36 = sub_100079604(*(void *)(v28 + 224), (uint64_t)qword_10033E1A8);
  sub_10011B714(v36, v37, type metadata accessor for SKLogger);
  sub_10011B5C0();
  uint64_t v38 = a17;
  *(void *)(v28 + 136) = a16;
  *(void *)(v28 + 144) = v38;
  sub_10011BDE4(35LL, 0x80000001002A3660LL);
  *(void *)(v28 + 160) = v34;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v39 = _print_unlocked<A, B>(_:_:)(v28 + 160, v28 + 136);
  uint64_t v40 = *(void *)(v28 + 136);
  uint64_t v41 = *(void *)(v28 + 144);
  uint64_t v42 = static os_log_type_t.error.getter(v39);
  sub_100085EE8(v35);
  sub_100085EE8(v41);
  uint64_t v43 = (os_log_s *)sub_10009C414();
  uint64_t v44 = sub_10011B3E0(v43);
  uint64_t v45 = *(void *)(v28 + 288);
  if (v44)
  {
    uint64_t v31 = *(void **)(v28 + 280);
    uint64_t v46 = sub_10007B9FC(22LL);
    uint64_t v47 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v46 = 136446466;
    sub_10011B3E8();
    sub_1000AB094((uint64_t)v31);
    sub_100085F14();
    sub_100093460();
    *(void *)(v28 + 152) = sub_10008620C(a16, v48, &a15);
    sub_1000C6390(v28 + 152, v28 + 160);
    sub_10007B980();
    sub_10007D974(v45);
    *(_WORD *)(v46 + 12) = 2082;
    sub_10008618C();
    *(void *)(v28 + 168) = sub_1000C6228(v40, v49, &a15);
    sub_100086194(v28 + 168, v28 + 176);
    sub_100085E64(v41);
    sub_100086038((void *)&_mh_execute_header, v43, v42, "%{public}s%{public}s", (uint8_t *)v46);
    sub_100086030(v47, v50, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v47);
    sub_10007B974(v46);

    sub_100085FB4();
  }

  else
  {
    sub_10007D974(*(void *)(v28 + 288));
    sub_100085E64(v41);
  }

  os_log_type_t v51 = *(void **)(v28 + 200);
  sub_100085BC4(*(void *)(v28 + 232), type metadata accessor for SKLogger);
  uint64_t v52 = (void *)sub_10011C338();
  uint64_t v53 = sub_10011B058(v52, "toASDErrorWithMetadata:");
  sub_10011BC14();
  sub_10011B950();

  sub_10011C340();
  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    sub_10011B0BC(result);

    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    return (id)sub_100093840(*(uint64_t (**)(void))(v28 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000FD2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a5;
  v7[4] = a6;
  v7[2] = a4;
  uint64_t v9 = type metadata accessor for URL(0LL);
  void v7[5] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[6] = v10;
  uint64_t v11 = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a7 + 24);
  v7[7] = v11;
  v7[8] = v12;
  return swift_task_switch(sub_1000FD338, 0LL, 0LL);
}

uint64_t sub_1000FD338()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = (char *)v0[2];
  uint64_t v3 = *(void *)&v2[OBJC_IVAR____TtC9storekitd6Client_callerBundleID];
  uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8];
  (*(void (**)(uint64_t, char *, void))(v0[6] + 16LL))( v1,  &v2[OBJC_IVAR____TtC9storekitd6Client_callerBundleURL],  v0[5]);
  sub_10008618C();
  sub_1000DF468();
  id v5 = objc_allocWithZone((Class)sub_10011BDD8());
  id v6 = sub_1000DB648(v3, v4, v1, v2, 0LL);
  v0[9] = v6;
  uint64_t v7 = (void *)swift_task_alloc(dword_10032C534);
  v0[10] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000FD404;
  uint64_t v8 = sub_1000C6298(v0[4]);
  return sub_10013573C(v8, v9, (uint64_t)v6);
}

uint64_t sub_1000FD404()
{
  *(void *)(v1 + 88) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000FD450()
{
  uint64_t v0 = (uint64_t (*)(void))sub_100093CFC();
  return sub_10008751C(v0);
}

uint64_t sub_1000FD478()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000FD4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0LL;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  NSString v6 = String._bridgeToObjectiveC()();
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

void sub_1000FD528(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v145 = (void *)a2;
  uint64_t v136 = a1;
  uint64_t v134 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  uint64_t v5 = __chkstk_darwin(v134);
  uint64_t v133 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v132 = (uint64_t)&v130 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v130 - v9;
  uint64_t v11 = type metadata accessor for SKLogger(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  os_log_type_t v141 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v135 = (uint64_t)&v130 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v138 = (uint64_t)&v130 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v139 = (uint64_t)&v130 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v140 = (uint64_t)&v130 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v142 = (uint64_t)&v130 - v23;
  __chkstk_darwin(v22);
  id v25 = (char *)&v130 - v24;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v26 = sub_100079604(v11, (uint64_t)qword_10033E1A8);
  unint64_t v27 = sub_1000F4060();
  uint64_t v29 = v28;
  uint64_t v146 = v26;
  sub_1000E8F9C(v26, (uint64_t)v25, type metadata accessor for SKLogger);
  uint64_t v30 = swift_bridgeObjectRetain(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter(v30);
  uint64_t v32 = swift_bridgeObjectRetain_n(v29, 2LL);
  int v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = v31;
  BOOL v35 = os_log_type_enabled(v33, v31);
  uint64_t v36 = &off_100279000;
  __int128 v137 = v10;
  uint64_t v143 = v27;
  __int128 v144 = a4;
  if (v35)
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    v147[0] = v38;
    *(_DWORD *)uint64_t v37 = 136446466;
    uint64_t v148 = 91LL;
    v149[0] = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v29);
    v39._uint64_t countAndFlagsBits = v27;
    v39._object = v29;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 8285LL;
    v40._object = (void *)0xE200000000000000LL;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v29);
    uint64_t v41 = v149[0];
    uint64_t v148 = sub_10007A488(v148, v149[0], v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v37 + 4);
    swift_bridgeObjectRelease_n(v29, 2LL);
    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v37 + 12) = 2082;
    uint64_t v148 = sub_10007A488(0xD00000000000002CLL, 0x80000001002A2520LL, v147);
    a4 = v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v37 + 14);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s%{public}s", (uint8_t *)v37, 0x16u);
    uint64_t v36 = &off_100279000;
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_bridgeObjectRelease(v29);
  }

  else
  {

    swift_bridgeObjectRelease_n(v29, 3LL);
  }

  sub_100085BC4((uint64_t)v25, type metadata accessor for SKLogger);
  id v42 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  uint64_t v43 = v145;
  if (v42)
  {
    uint64_t v44 = v42;
    if (!v145)
    {
      sub_10007CB7C(0LL, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
      [v44 auditToken];
      id v45 = sub_1000FF744(v148, v149[0], (void *)v149[1], v149[2]);
      goto LABEL_10;
    }

    swift_bridgeObjectRetain(v145);
    if ((sub_1000E9EEC(0) & 1) != 0)
    {
      sub_10007CB7C(0LL, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
      id v45 = sub_1000F9360(v136, v43, 0);
LABEL_10:
      id v150 = v45;
      sub_1000E8F9C(v146, v139, type metadata accessor for SKLogger);
      uint64_t v148 = 0LL;
      v149[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(36LL);
      swift_bridgeObjectRelease(v149[0]);
      uint64_t v148 = 0xD000000000000022LL;
      v149[0] = 0x80000001002A25C0LL;
      sub_1001196FC(&v150);
      v147[0] = v46;
      v147[1] = v47;
      uint64_t v48 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
      v49._uint64_t countAndFlagsBits = String.init<A>(describing:)(v147, v48);
      object = v49._object;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(object);
      uint64_t v52 = v148;
      unint64_t v51 = v149[0];
      uint64_t v53 = swift_bridgeObjectRetain(v29);
      os_log_type_t v54 = static os_log_type_t.default.getter(v53);
      swift_bridgeObjectRetain_n(v29, 2LL);
      uint64_t v55 = swift_bridgeObjectRetain_n(v51, 2LL);
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      BOOL v57 = os_log_type_enabled(v56, v54);
      id v131 = v44;
      if (v57)
      {
        uint64_t v58 = swift_slowAlloc(22LL, -1LL);
        uint64_t v59 = swift_slowAlloc(64LL, -1LL);
        __int128 v145 = (void *)v52;
        uint64_t v60 = v59;
        v147[0] = v59;
        *(_DWORD *)uint64_t v58 = *((void *)v36 + 58);
        uint64_t v148 = 91LL;
        v149[0] = 0xE100000000000000LL;
        swift_bridgeObjectRetain(v29);
        v61._uint64_t countAndFlagsBits = v143;
        v61._object = v29;
        String.append(_:)(v61);
        v62._uint64_t countAndFlagsBits = 8285LL;
        v62._object = (void *)0xE200000000000000LL;
        String.append(_:)(v62);
        swift_bridgeObjectRelease(v29);
        uint64_t v63 = v149[0];
        uint64_t v148 = sub_10007A488(v148, v149[0], v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v58 + 4);
        swift_bridgeObjectRelease_n(v29, 2LL);
        swift_bridgeObjectRelease(v63);
        *(_WORD *)(v58 + 12) = 2082;
        swift_bridgeObjectRetain(v51);
        uint64_t v148 = sub_10007A488((uint64_t)v145, v51, v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v58 + 14);
        swift_bridgeObjectRelease_n(v51, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v56, v54, "%{public}s%{public}s", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy(v60, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v29);
      }

      else
      {

        swift_bridgeObjectRelease_n(v51, 3LL);
        swift_bridgeObjectRelease_n(v29, 3LL);
      }

      a4 = v144;
      uint64_t v85 = (uint64_t)v137;
      sub_100085BC4(v139, type metadata accessor for SKLogger);
      id v86 = v150;
      uint64_t v87 = sub_1000D3118();
      uint64_t v89 = v88;

      if (v87 == 2)
      {
        uint64_t v90 = v132;
        sub_1000E9220(v85, v132, (uint64_t *)&unk_10032A1C0);
        id v91 = objc_allocWithZone((Class)&OBJC_CLASS___ExternalPurchaseLinkResponse);
        id v92 = sub_100119520(v90, v89);
        sub_1000E8F9C(v146, v138, type metadata accessor for SKLogger);
        uint64_t v148 = 0LL;
        v149[0] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(47LL);
        swift_bridgeObjectRelease(v149[0]);
        uint64_t v148 = 0xD000000000000021LL;
        v149[0] = 0x80000001002A2630LL;
        id v93 = [v92 single];
        if (v93)
        {
          Swift::String v94 = v93;
          uint64_t v95 = (uint64_t)v133;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v93);

          uint64_t v96 = 0LL;
        }

        else
        {
          uint64_t v96 = 1LL;
          uint64_t v95 = (uint64_t)v133;
        }

        uint64_t v108 = type metadata accessor for URL(0LL);
        sub_10007D0AC(v95, v96, 1LL, v108);
        v109._uint64_t countAndFlagsBits = String.init<A>(describing:)(v95, v134);
        id v110 = v109._object;
        String.append(_:)(v109);
        swift_bridgeObjectRelease(v110);
        v111._uint64_t countAndFlagsBits = 0x3A69746C756D202CLL;
        v111._object = (void *)0xE900000000000020LL;
        String.append(_:)(v111);
        v147[0] = sub_100119714(v92);
        uint64_t v112 = sub_10007B1FC(&qword_10032BB00);
        v113._uint64_t countAndFlagsBits = String.init<A>(describing:)(v147, v112);
        uint64_t v114 = v113._object;
        String.append(_:)(v113);
        swift_bridgeObjectRelease(v114);
        v115._uint64_t countAndFlagsBits = 93LL;
        v115._object = (void *)0xE100000000000000LL;
        String.append(_:)(v115);
        unint64_t v116 = v149[0];
        uint64_t v146 = v148;
        os_log_type_t v118 = static os_log_type_t.default.getter(v117);
        swift_bridgeObjectRetain_n(v29, 2LL);
        uint64_t v119 = swift_bridgeObjectRetain_n(v116, 2LL);
        uint64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
        os_log_type_t v121 = v118;
        if (os_log_type_enabled(v120, v118))
        {
          uint64_t v122 = swift_slowAlloc(22LL, -1LL);
          uint64_t v123 = swift_slowAlloc(64LL, -1LL);
          v147[0] = v123;
          *(_DWORD *)uint64_t v122 = 136446466;
          uint64_t v148 = 91LL;
          v149[0] = 0xE100000000000000LL;
          swift_bridgeObjectRetain(v29);
          v124._uint64_t countAndFlagsBits = v143;
          v124._object = v29;
          String.append(_:)(v124);
          v125._uint64_t countAndFlagsBits = 8285LL;
          v125._object = (void *)0xE200000000000000LL;
          String.append(_:)(v125);
          swift_bridgeObjectRelease(v29);
          uint64_t v126 = v149[0];
          uint64_t v148 = sub_10007A488(v148, v149[0], v147);
          uint64_t v85 = (uint64_t)v137;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v122 + 4);
          swift_bridgeObjectRelease_n(v29, 2LL);
          swift_bridgeObjectRelease(v126);
          *(_WORD *)(v122 + 12) = 2082;
          swift_bridgeObjectRetain(v116);
          uint64_t v148 = sub_10007A488(v146, v116, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v122 + 14);
          swift_bridgeObjectRelease_n(v116, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "%{public}s%{public}s", (uint8_t *)v122, 0x16u);
          swift_arrayDestroy(v123, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v127 = v123;
          a4 = v144;
          swift_slowDealloc(v127, -1LL, -1LL);
          swift_slowDealloc(v122, -1LL, -1LL);
          swift_bridgeObjectRelease(v116);
          swift_bridgeObjectRelease(v29);
        }

        else
        {

          swift_bridgeObjectRelease_n(v116, 3LL);
          swift_bridgeObjectRelease_n(v29, 3LL);
        }

        sub_100085BC4(v138, type metadata accessor for SKLogger);
        uint64_t v128 = (void (*)(void *, id))a4[2];
        id v129 = v92;
        v128(a4, v129);
      }

      else
      {
        swift_bridgeObjectRelease(v89);
        sub_1000E8F9C(v146, v135, type metadata accessor for SKLogger);
        os_log_type_t v98 = static os_log_type_t.default.getter(v97);
        uint64_t v99 = swift_bridgeObjectRetain_n(v29, 2LL);
        uint64_t v100 = (os_log_s *)Logger.logObject.getter(v99);
        os_log_type_t v101 = v98;
        if (os_log_type_enabled(v100, v98))
        {
          uint64_t v102 = swift_slowAlloc(22LL, -1LL);
          uint64_t v103 = swift_slowAlloc(64LL, -1LL);
          v147[0] = v103;
          *(_DWORD *)uint64_t v102 = 136446466;
          uint64_t v148 = 91LL;
          v149[0] = 0xE100000000000000LL;
          swift_bridgeObjectRetain(v29);
          v104._uint64_t countAndFlagsBits = v143;
          v104._object = v29;
          String.append(_:)(v104);
          v105._uint64_t countAndFlagsBits = 8285LL;
          v105._object = (void *)0xE200000000000000LL;
          String.append(_:)(v105);
          swift_bridgeObjectRelease(v29);
          uint64_t v106 = v149[0];
          uint64_t v148 = sub_10007A488(v148, v149[0], v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v102 + 4);
          swift_bridgeObjectRelease_n(v29, 2LL);
          swift_bridgeObjectRelease(v106);
          *(_WORD *)(v102 + 12) = 2082;
          uint64_t v148 = sub_10007A488(0xD000000000000033LL, 0x80000001002A25F0LL, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v102 + 14);
          _os_log_impl((void *)&_mh_execute_header, v100, v101, "%{public}s%{public}s", (uint8_t *)v102, 0x16u);
          swift_arrayDestroy(v103, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v103, -1LL, -1LL);
          swift_slowDealloc(v102, -1LL, -1LL);
          swift_bridgeObjectRelease(v29);
        }

        else
        {

          swift_bridgeObjectRelease_n(v29, 3LL);
        }

        id v107 = v131;
        sub_100085BC4(v135, type metadata accessor for SKLogger);
        ((void (*)(void *, void))a4[2])(a4, 0LL);
      }

      sub_100085298(v85, (uint64_t *)&unk_10032A1C0);

      goto LABEL_35;
    }

    swift_bridgeObjectRelease(v43);
    sub_1000E8F9C(v146, v140, type metadata accessor for SKLogger);
    os_log_type_t v76 = static os_log_type_t.error.getter(v75);
    uint64_t v77 = swift_bridgeObjectRetain_n(v29, 2LL);
    uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
    os_log_type_t v79 = v76;
    if (os_log_type_enabled(v78, v76))
    {
      uint64_t v80 = swift_slowAlloc(22LL, -1LL);
      uint64_t v81 = swift_slowAlloc(64LL, -1LL);
      v147[0] = v81;
      *(_DWORD *)uint64_t v80 = *((void *)v36 + 58);
      uint64_t v148 = 91LL;
      v149[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v29);
      v82._uint64_t countAndFlagsBits = v143;
      v82._object = v29;
      String.append(_:)(v82);
      v83._uint64_t countAndFlagsBits = 8285LL;
      v83._object = (void *)0xE200000000000000LL;
      String.append(_:)(v83);
      swift_bridgeObjectRelease(v29);
      uint64_t v84 = v149[0];
      uint64_t v148 = sub_10007A488(v148, v149[0], v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v80 + 4);
      swift_bridgeObjectRelease_n(v29, 2LL);
      swift_bridgeObjectRelease(v84);
      *(_WORD *)(v80 + 12) = 2082;
      uint64_t v148 = sub_10007A488(0xD00000000000003ALL, 0x80000001002A2550LL, v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v80 + 14);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "%{public}s%{public}s", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy(v81, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v81, -1LL, -1LL);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_bridgeObjectRelease(v29);
    }

    else
    {

      swift_bridgeObjectRelease_n(v29, 3LL);
    }

    sub_100085BC4(v140, type metadata accessor for SKLogger);
    ((void (*)(void *, void))a4[2])(a4, 0LL);
  }

  else
  {
    uint64_t v64 = v142;
    sub_1000E8F9C(v146, v142, type metadata accessor for SKLogger);
    os_log_type_t v66 = static os_log_type_t.error.getter(v65);
    uint64_t v67 = swift_bridgeObjectRetain_n(v29, 2LL);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v69 = v66;
    if (os_log_type_enabled(v68, v66))
    {
      uint64_t v70 = swift_slowAlloc(22LL, -1LL);
      uint64_t v71 = swift_slowAlloc(64LL, -1LL);
      v147[0] = v71;
      *(_DWORD *)uint64_t v70 = *((void *)v36 + 58);
      uint64_t v148 = 91LL;
      v149[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v29);
      v72._uint64_t countAndFlagsBits = v143;
      v72._object = v29;
      String.append(_:)(v72);
      v73._uint64_t countAndFlagsBits = 8285LL;
      v73._object = (void *)0xE200000000000000LL;
      String.append(_:)(v73);
      swift_bridgeObjectRelease(v29);
      uint64_t v74 = v149[0];
      uint64_t v148 = sub_10007A488(v148, v149[0], v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v70 + 4);
      swift_bridgeObjectRelease_n(v29, 2LL);
      swift_bridgeObjectRelease(v74);
      *(_WORD *)(v70 + 12) = 2082;
      uint64_t v148 = sub_10007A488(0xD00000000000003ALL, 0x80000001002A2550LL, v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v149, v70 + 14);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%{public}s%{public}s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v64 = v142;
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_bridgeObjectRelease(v29);
    }

    else
    {

      swift_bridgeObjectRelease_n(v29, 3LL);
    }

    sub_100085BC4(v64, type metadata accessor for SKLogger);
    ((void (*)(void *, void))a4[2])(a4, 0LL);
  }

void StoreKitServiceConnection.externalPurchaseLinkURLs(forBundleID:reply:)()
{
  uint64_t v1 = v0;
  uint64_t v148 = v2;
  __int128 v149 = v3;
  uint64_t v140 = v4;
  uint64_t v138 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_1000862F4();
  uint64_t v137 = v6;
  sub_100086200();
  __chkstk_darwin(v7);
  sub_1000DB3F4();
  uint64_t v136 = v8;
  sub_100086200();
  __chkstk_darwin(v9);
  sub_1000E9670();
  uint64_t v141 = v10;
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v11);
  __int128 v145 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v13);
  uint64_t v146 = (uint64_t)&v136 - v14;
  sub_100086200();
  __chkstk_darwin(v15);
  uint64_t v139 = (uint64_t)&v136 - v16;
  sub_100086200();
  __chkstk_darwin(v17);
  sub_1000DB3F4();
  uint64_t v142 = v18;
  sub_100086200();
  __chkstk_darwin(v19);
  uint64_t v143 = (uint64_t)&v136 - v20;
  sub_100086200();
  __chkstk_darwin(v21);
  uint64_t v144 = (uint64_t)&v136 - v22;
  sub_100086200();
  uint64_t v24 = __chkstk_darwin(v23);
  if (qword_100328B40 != -1) {
    uint64_t v24 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  id v25 = (void *)sub_10011BBF8(v24, (uint64_t)qword_10033E1A8);
  unint64_t v26 = sub_1000F4060();
  uint64_t v28 = v27;
  id v150 = v25;
  sub_10011BBD4((uint64_t)v25, v27, type metadata accessor for SKLogger);
  uint64_t v29 = sub_100093528();
  os_log_type_t v30 = static os_log_type_t.default.getter(v29);
  sub_100085EE8(v28);
  os_log_type_t v31 = (os_log_s *)sub_10011BAB0();
  os_log_type_t v32 = v30;
  BOOL v33 = sub_100093764(v31);
  unint64_t v147 = v26;
  if (v33)
  {
    os_log_type_t v34 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v35 = sub_10007B9FC(64LL);
    v151[0] = v35;
    *(_DWORD *)os_log_type_t v34 = 136446466;
    uint64_t v28 = (uint64_t)(v34 + 4);
    uint64_t v152 = 91LL;
    v153[0] = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v26);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v37 = sub_10008620C(v152, v36, v151);
    uint64_t v38 = sub_10011BC1C(v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, v40);
    sub_10007D974((uint64_t)(v34 + 4));
    sub_10007B980();
    sub_100093898();
    uint64_t v152 = sub_10011C054(0xD00000000000002CLL, (uint64_t)"externalPurchaseLinkURLs(forBundleID:reply:)");
    sub_100086194((uint64_t)&v152, (uint64_t)&v152);
    sub_100086038((void *)&_mh_execute_header, v31, v32, "%{public}s%{public}s", v34);
    sub_100086030(v35, v41, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v35);
    sub_10007B974((uint64_t)v34);
    sub_100093460();
  }

  else
  {

    uint64_t v42 = sub_100085E64(v28);
  }

  sub_10011BA88(v42, type metadata accessor for SKLogger);
  id v43 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v43)
  {
    id v45 = v43;
    uint64_t v46 = v148;
    if (!v148)
    {
      sub_10007CB7C(0LL, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
      [v45 auditToken];
      id v47 = sub_1000FF744(v152, v153[0], (void *)v153[1], v153[2]);
      goto LABEL_10;
    }

    sub_100085FEC();
    if ((sub_1000E9EEC(0) & 1) != 0)
    {
      sub_10007CB7C(0LL, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
      id v47 = sub_1000F9360(v140, v46, 0);
LABEL_10:
      uint64_t v148 = v45;
      id v154 = v47;
      sub_10011BB10((uint64_t)v150, v48, type metadata accessor for SKLogger);
      sub_10011BEB4();
      _StringGuts.grow(_:)(36LL);
      swift_bridgeObjectRelease(v153[0]);
      uint64_t v152 = 0xD000000000000022LL;
      v153[0] = 0x80000001002A25C0LL;
      sub_1001196FC(&v154);
      v151[0] = v49;
      v151[1] = v50;
      uint64_t v51 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
      v52._uint64_t countAndFlagsBits = sub_10011C27C(v51);
      String.append(_:)(v52);
      sub_100085EF0();
      os_log_type_t v54 = (char *)v152;
      uint64_t v53 = v153[0];
      uint64_t v55 = sub_100093528();
      os_log_type_t v56 = static os_log_type_t.default.getter(v55);
      sub_100085EE8(v28);
      sub_100085EE8(v53);
      BOOL v57 = (os_log_s *)sub_100093C38();
      os_log_type_t v58 = v56;
      if (sub_100093764(v57))
      {
        uint64_t v59 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v60 = sub_10007B9FC(64LL);
        v151[0] = v60;
        *(_DWORD *)uint64_t v59 = 136446466;
        __int128 v145 = v54;
        os_log_type_t v54 = (char *)&type metadata for Any;
        uint64_t v28 = (uint64_t)(v59 + 4);
        uint64_t v152 = 91LL;
        v153[0] = 0xE100000000000000LL;
        sub_10008618C();
        uint64_t v146 = v1;
        sub_10009C32C(v147);
        sub_100085F14();
        sub_100085FB4();
        uint64_t v62 = sub_10008620C(v152, v61, v151);
        uint64_t v63 = sub_10011BC1C(v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v63, v64, v65);
        sub_10007D974((uint64_t)(v59 + 4));
        sub_10007B980();
        sub_100093CA4();
        sub_100085FEC();
        uint64_t v152 = sub_1000B20F4((uint64_t)v145, v66, v151);
        sub_100086194((uint64_t)&v152, (uint64_t)&v152);
        sub_100085E64(v53);
        sub_100086038((void *)&_mh_execute_header, v57, v58, "%{public}s%{public}s", v59);
        sub_100086030(v60, v67, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v60);
        sub_10007B974((uint64_t)v59);
        sub_100085EF0();
        sub_100093460();
      }

      else
      {

        sub_100085E64(v53);
        sub_100085E64(v28);
      }

      sub_100085BC4(v143, type metadata accessor for SKLogger);
      id v91 = v154;
      uint64_t v92 = v141;
      uint64_t v93 = sub_1000D3118();
      uint64_t v95 = v94;

      if (v93 == 2)
      {
        uint64_t v96 = v136;
        sub_1000E9220(v92, v136, (uint64_t *)&unk_10032A1C0);
        id v97 = objc_allocWithZone((Class)&OBJC_CLASS___ExternalPurchaseLinkResponse);
        id v98 = sub_100119520(v96, (uint64_t)v95);
        sub_1000E8F9C((uint64_t)v150, v142, type metadata accessor for SKLogger);
        sub_10011BEB4();
        _StringGuts.grow(_:)(47LL);
        swift_bridgeObjectRelease(v153[0]);
        uint64_t v152 = 0xD000000000000021LL;
        v153[0] = 0x80000001002A2630LL;
        id v99 = [v98 single];
        if (v99)
        {
          uint64_t v100 = v99;
          uint64_t v101 = v28;
          uint64_t v102 = v137;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v99);

          uint64_t v103 = 0LL;
        }

        else
        {
          uint64_t v101 = v28;
          uint64_t v103 = 1LL;
          uint64_t v102 = v137;
        }

        uint64_t v113 = sub_100086318();
        sub_10007D0AC(v102, v103, 1LL, v113);
        v114._uint64_t countAndFlagsBits = String.init<A>(describing:)(v102, v138);
        String.append(_:)(v114);
        sub_10007BA44();
        v115._uint64_t countAndFlagsBits = 0x3A69746C756D202CLL;
        v115._object = (void *)0xE900000000000020LL;
        String.append(_:)(v115);
        id v150 = v98;
        v151[0] = sub_100119714(v98);
        uint64_t v116 = sub_10007B1FC(&qword_10032BB00);
        v117._uint64_t countAndFlagsBits = sub_10011C27C(v116);
        String.append(_:)(v117);
        sub_10007BA44();
        v118._uint64_t countAndFlagsBits = 93LL;
        v118._object = (void *)0xE100000000000000LL;
        String.append(_:)(v118);
        uint64_t v119 = v153[0];
        uint64_t v146 = v152;
        os_log_type_t v121 = static os_log_type_t.default.getter(v120);
        sub_100085EE8(v101);
        uint64_t v122 = sub_100085EE8(v119);
        uint64_t v123 = (os_log_s *)Logger.logObject.getter(v122);
        os_log_type_t v124 = v121;
        if (sub_10011B3E0(v123))
        {
          Swift::String v125 = (uint8_t *)sub_10007B9FC(22LL);
          uint64_t v126 = sub_10007B9FC(64LL);
          v151[0] = v126;
          *(_DWORD *)Swift::String v125 = 136446466;
          uint64_t v152 = 91LL;
          v153[0] = 0xE100000000000000LL;
          sub_100085FEC();
          sub_1000935BC(v147);
          sub_100085F14();
          sub_100085EF0();
          uint64_t v128 = sub_10008620C(v152, v127, v151);
          uint64_t v129 = sub_10011BC38(v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v129, v130, v131);
          sub_10007D974(v101);
          sub_10007B980();
          sub_100093898();
          sub_10007BA3C();
          uint64_t v152 = sub_10007A488(v146, v119, v151);
          sub_100086194((uint64_t)&v152, (uint64_t)&v152);
          sub_100085E64(v119);
          sub_100086038((void *)&_mh_execute_header, v123, v124, "%{public}s%{public}s", v125);
          sub_100086030(v126, v132, (uint64_t)&type metadata for Any + 8);
          uint64_t v133 = v126;
          uint64_t v92 = v141;
          sub_10007B974(v133);
          sub_10007B974((uint64_t)v125);
          sub_10007BA44();
          sub_100085EF0();
        }

        else
        {

          sub_100085E64(v119);
          sub_100085E64(v101);
        }

        uint64_t v112 = v148;
        sub_100085BC4(v142, type metadata accessor for SKLogger);
        id v134 = v150;
        id v135 = v150;
        v149(v134);
      }

      else
      {
        sub_100085EF0();
        sub_10011B040((uint64_t)v150, v104, type metadata accessor for SKLogger);
        static os_log_type_t.default.getter(v105);
        uint64_t v106 = sub_100085EE8(v28);
        id v107 = (os_log_s *)Logger.logObject.getter(v106);
        if (sub_10011B330(v107))
        {
          uint64_t v108 = (uint8_t *)sub_10007B9FC(22LL);
          uint64_t v109 = sub_10007B9FC(64LL);
          v151[0] = v109;
          *(_DWORD *)uint64_t v108 = 136446466;
          uint64_t v152 = 91LL;
          v153[0] = 0xE100000000000000LL;
          sub_1000AA78C();
          sub_100086114(v147);
          sub_100085F14();
          sub_100086144();
          uint64_t v152 = sub_10008620C(v152, v110, v151);
          sub_10011B1D8((uint64_t)&v152);
          sub_10007D974(v28);
          sub_10007B980();
          sub_10011B73C();
          uint64_t v152 = sub_10011C054(0xD000000000000033LL, (uint64_t)"Not eligible for ExternalPurchaseLink in storefront");
          sub_100086194((uint64_t)&v152, (uint64_t)v153);
          sub_100086038((void *)&_mh_execute_header, v95, (os_log_type_t)v54, "%{public}s%{public}s", v108);
          sub_100086030(v109, v111, (uint64_t)&type metadata for Any + 8);
          sub_10007B974(v109);
          sub_10007B974((uint64_t)v108);
          uint64_t v92 = v141;
          swift_bridgeObjectRelease(v28);
        }

        else
        {

          sub_100085E64(v28);
        }

        uint64_t v112 = v148;
        sub_100085BC4(v139, type metadata accessor for SKLogger);
        sub_10011B510();
      }

      sub_100085298(v92, (uint64_t *)&unk_10032A1C0);
      goto LABEL_36;
    }

    sub_100085EF0();
    sub_10011B040((uint64_t)v150, v81, type metadata accessor for SKLogger);
    os_log_type_t v83 = static os_log_type_t.error.getter(v82);
    uint64_t v84 = sub_100085EE8(v28);
    uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
    os_log_type_t v86 = v83;
    if (sub_1000B22A4(v85))
    {
      uint64_t v87 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v88 = sub_10007B9FC(64LL);
      v151[0] = v88;
      *(_DWORD *)uint64_t v87 = 136446466;
      uint64_t v148 = v45;
      uint64_t v152 = 91LL;
      v153[0] = 0xE100000000000000LL;
      sub_1000AA78C();
      sub_100086114(v147);
      sub_100085F14();
      sub_100086144();
      uint64_t v152 = sub_10008620C(v152, v89, v151);
      sub_10011B1D8((uint64_t)&v152);
      sub_10007D974(v28);
      sub_10007B980();
      sub_10011BAA0();
      uint64_t v152 = sub_1000AB050(58LL, 0x80000001002A2550LL, v151);
      sub_100086194((uint64_t)&v152, (uint64_t)v153);
      sub_100086038((void *)&_mh_execute_header, v85, v86, "%{public}s%{public}s", v87);
      sub_100086030(v88, v90, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v88);
      sub_10007B974((uint64_t)v87);
      id v45 = v148;
      swift_bridgeObjectRelease(v28);
    }

    else
    {

      sub_100085E64(v28);
    }

    sub_100085BC4(v144, type metadata accessor for SKLogger);
    sub_10011B510();
  }

  else
  {
    sub_10011BBD4((uint64_t)v150, v44, type metadata accessor for SKLogger);
    os_log_type_t v69 = static os_log_type_t.error.getter(v68);
    sub_100085EE8(v28);
    uint64_t v70 = (os_log_s *)sub_10011BAB0();
    os_log_type_t v71 = v69;
    if (sub_1000B22A4(v70))
    {
      Swift::String v72 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v73 = v28;
      uint64_t v74 = sub_10007B9FC(64LL);
      v151[0] = v74;
      *(_DWORD *)Swift::String v72 = 136446466;
      uint64_t v152 = 91LL;
      v153[0] = 0xE100000000000000LL;
      sub_10007BA3C();
      sub_100093624(v147);
      sub_100085F14();
      sub_10007BA44();
      uint64_t v152 = sub_10008620C(v152, v75, v151);
      sub_10011C3C4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v77, v78);
      sub_10007D974(v73);
      sub_10007B980();
      sub_10011BAA0();
      uint64_t v152 = sub_1000AB050(58LL, 0x80000001002A2550LL, v151);
      sub_100086194((uint64_t)&v152, (uint64_t)v153);
      sub_100086038((void *)&_mh_execute_header, v70, v71, "%{public}s%{public}s", v72);
      sub_100086030(v74, v79, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v74);
      sub_10007B974((uint64_t)v72);
      sub_10007BA44();
    }

    else
    {

      uint64_t v80 = sub_100085E64(v28);
    }

    sub_10011BA88(v80, type metadata accessor for SKLogger);
    sub_10011B510();
  }

id sub_1000FF744(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v17 = 0LL;
  v16[0] = a1;
  v16[1] = a2;
  v16[2] = a3;
  v16[3] = a4;
  id v6 = [(id)swift_getObjCClassFromMetadata(v4) bundleRecordForAuditToken:v16 error:&v17];
  id v7 = v17;
  if (!v6)
  {
    sub_10011C298();

    swift_willThrow(v8, v9, v10, v11, v12, v13, v14);
  }

  return v6;
}

void sub_1000FF84C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (**a6)(void, void))
{
  uint64_t v132 = a3;
  uint64_t v128 = a1;
  uint64_t v129 = a2;
  uint64_t v8 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v8);
  uint64_t v122 = (uint64_t)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  uint64_t v119 = *(void *)(v126 - 8);
  uint64_t v10 = __chkstk_darwin(v126);
  uint64_t v121 = (uint64_t)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v127 = (uint64_t *)((char *)&v118 - v13);
  uint64_t v120 = v14;
  __chkstk_darwin(v12);
  uint64_t v130 = (uint64_t)&v118 - v15;
  uint64_t v16 = type metadata accessor for SKLogger(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v136 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v131 = (uint64_t)&v118 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v123 = (uint64_t)&v118 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v125 = (uint64_t)&v118 - v24;
  __chkstk_darwin(v23);
  unint64_t v26 = (char *)&v118 - v25;
  uint64_t v134 = swift_allocObject(&unk_1002EE930, 24LL, 7LL);
  *(void *)(v134 + 16) = a6;
  _Block_copy(a6);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v27 = sub_100079604(v16, (uint64_t)qword_10033E1A8);
  unint64_t v28 = sub_1000F4060();
  os_log_type_t v30 = v29;
  id v135 = (void (**)(void, void))v27;
  sub_1000E8F9C(v27, (uint64_t)v26, type metadata accessor for SKLogger);
  uint64_t v31 = swift_bridgeObjectRetain(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter(v31);
  uint64_t v33 = swift_bridgeObjectRetain_n(v30, 2LL);
  os_log_type_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = v32;
  BOOL v36 = os_log_type_enabled(v34, v32);
  uint64_t v133 = v28;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    os_log_type_t v124 = a4;
    uint64_t v39 = v38;
    *(_DWORD *)uint64_t v37 = 136446466;
    uint64_t v137 = 91LL;
    unint64_t v138 = 0xE100000000000000LL;
    v139[0] = v38;
    swift_bridgeObjectRetain(v30);
    v40._uint64_t countAndFlagsBits = v28;
    v40._object = v30;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = 8285LL;
    v41._object = (void *)0xE200000000000000LL;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v30);
    unint64_t v42 = v138;
    uint64_t v137 = sub_10007A488(v137, v138, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v37 + 4);
    swift_bridgeObjectRelease_n(v30, 2LL);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v37 + 12) = 2082;
    uint64_t v137 = sub_10007A488(0xD00000000000001FLL, 0x80000001002A3120LL, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v37 + 14);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s%{public}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v43 = v39;
    a4 = v124;
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_bridgeObjectRelease(v30);
  }

  else
  {

    swift_bridgeObjectRelease_n(v30, 3LL);
  }

  sub_100085BC4((uint64_t)v26, type metadata accessor for SKLogger);
  uint64_t v44 = (char *)[(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v44) {
    goto LABEL_11;
  }
  id v45 = v44;
  if ((sub_1000E9EEC(0) & 1) == 0)
  {

LABEL_11:
    uint64_t v52 = (uint64_t)v136;
    sub_1000E8F9C((uint64_t)v135, (uint64_t)v136, type metadata accessor for SKLogger);
    os_log_type_t v54 = static os_log_type_t.error.getter(v53);
    uint64_t v55 = swift_bridgeObjectRetain_n(v30, 2LL);
    os_log_type_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = v54;
    if (os_log_type_enabled(v56, v54))
    {
      uint64_t v58 = swift_slowAlloc(22LL, -1LL);
      uint64_t v59 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v58 = 136446466;
      uint64_t v137 = 91LL;
      unint64_t v138 = 0xE100000000000000LL;
      v139[0] = v59;
      swift_bridgeObjectRetain(v30);
      v60._uint64_t countAndFlagsBits = v133;
      v60._object = v30;
      String.append(_:)(v60);
      v61._uint64_t countAndFlagsBits = 8285LL;
      v61._object = (void *)0xE200000000000000LL;
      String.append(_:)(v61);
      swift_bridgeObjectRelease(v30);
      unint64_t v62 = v138;
      uint64_t v137 = sub_10007A488(v137, v138, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v58 + 4);
      swift_bridgeObjectRelease_n(v30, 2LL);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v58 + 12) = 2082;
      uint64_t v137 = sub_10007A488(0xD00000000000003DLL, 0x80000001002A3140LL, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v58 + 14);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%{public}s%{public}s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v52 = (uint64_t)v136;
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_bridgeObjectRelease(v30);
    }

    else
    {

      swift_bridgeObjectRelease_n(v30, 3LL);
    }

    sub_100085BC4(v52, type metadata accessor for SKLogger);
    unint64_t v63 = sub_10009BB88();
    uint64_t v64 = swift_allocError(&type metadata for StoreKitInternalError, v63, 0LL, 0LL);
    *uint64_t v65 = 3;
    uint64_t v66 = (void *)_convertErrorToNSError(_:)(v64);
    ((void (**)(void, void *))a6)[2](a6, v66);

    swift_errorRelease(v64);
    uint64_t v67 = v134;
    goto LABEL_15;
  }

  id v46 = [(id)objc_opt_self(ActiveAccountObserver) activeAccount];
  if (v46)
  {
    uint64_t v47 = (uint64_t)v46;
    uint64_t v48 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    uint64_t v49 = JSONDecoder.init()();
    sub_10007ACCC( (unint64_t *)&qword_10032A088,  type metadata accessor for ExternalPurchaseTokenV2Response,  (uint64_t)&unk_10027B264);
    uint64_t v50 = v127;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v127, v126, v128, v129, v126, v51);
    uint64_t v136 = (char *)v47;
    swift_release(v49);
    sub_1000E9158((uint64_t)v50, v130, type metadata accessor for ExternalPurchaseTokenV2Response);
    sub_1000E8F9C((uint64_t)v135, v123, type metadata accessor for SKLogger);
    uint64_t v137 = 0LL;
    unint64_t v138 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease(v138);
    uint64_t v137 = 0xD00000000000001ELL;
    unint64_t v138 = 0x80000001002A31F0LL;
    v83._uint64_t countAndFlagsBits = v132;
    os_log_type_t v124 = a4;
    v83._object = a4;
    String.append(_:)(v83);
    uint64_t v85 = v137;
    unint64_t v84 = v138;
    uint64_t v86 = swift_bridgeObjectRetain(v30);
    os_log_type_t v87 = static os_log_type_t.debug.getter(v86);
    swift_bridgeObjectRetain_n(v30, 2LL);
    uint64_t v88 = swift_bridgeObjectRetain_n(v84, 2LL);
    uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    if (os_log_type_enabled(v89, v87))
    {
      uint64_t v90 = swift_slowAlloc(22LL, -1LL);
      uint64_t v91 = swift_slowAlloc(64LL, -1LL);
      id v135 = a6;
      uint64_t v92 = v91;
      *(_DWORD *)uint64_t v90 = 136446466;
      uint64_t v137 = 91LL;
      unint64_t v138 = 0xE100000000000000LL;
      v139[0] = v91;
      swift_bridgeObjectRetain(v30);
      uint64_t v131 = v85;
      v93._uint64_t countAndFlagsBits = v133;
      v93._object = v30;
      String.append(_:)(v93);
      v94._uint64_t countAndFlagsBits = 8285LL;
      v94._object = (void *)0xE200000000000000LL;
      String.append(_:)(v94);
      swift_bridgeObjectRelease(v30);
      unint64_t v95 = v138;
      uint64_t v137 = sub_10007A488(v137, v138, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v90 + 4);
      swift_bridgeObjectRelease_n(v30, 2LL);
      swift_bridgeObjectRelease(v95);
      *(_WORD *)(v90 + 12) = 2082;
      swift_bridgeObjectRetain(v84);
      uint64_t v137 = sub_10007A488(v131, v84, v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v90 + 14);
      swift_bridgeObjectRelease_n(v84, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v89, v87, "%{public}s%{public}s", (uint8_t *)v90, 0x16u);
      swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v96 = v92;
      a6 = v135;
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_bridgeObjectRelease(v84);
      swift_bridgeObjectRelease(v30);
    }

    else
    {

      swift_bridgeObjectRelease_n(v84, 3LL);
      swift_bridgeObjectRelease_n(v30, 3LL);
    }

    sub_100085BC4(v123, type metadata accessor for SKLogger);
    uint64_t v101 = type metadata accessor for TaskPriority(0LL);
    uint64_t v102 = v122;
    sub_10007D0AC(v122, 1LL, 1LL, v101);
    uint64_t v103 = v121;
    sub_1000E8F9C(v130, v121, type metadata accessor for ExternalPurchaseTokenV2Response);
    uint64_t v104 = *(unsigned __int8 *)(v119 + 80);
    uint64_t v105 = (v104 + 48) & ~v104;
    unint64_t v106 = (v120 + v105 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v107 = (v106 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v108 = (v107 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v109 = (void *)swift_allocObject(&unk_1002EE958, v108 + 16, v104 | 7);
    v109[2] = 0LL;
    v109[3] = 0LL;
    v109[4] = v133;
    v109[5] = v30;
    sub_1000E9158(v103, (uint64_t)v109 + v105, type metadata accessor for ExternalPurchaseTokenV2Response);
    uint64_t v110 = (void *)((char *)v109 + v106);
    uint64_t v111 = (uint64_t)v124;
    *uint64_t v110 = v132;
    v110[1] = v111;
    uint64_t v112 = v136;
    *(void *)((char *)v109 + v107) = v136;
    uint64_t v113 = (void *)((char *)v109 + v108);
    uint64_t v114 = v134;
    *uint64_t v113 = sub_100085E1C;
    v113[1] = v114;
    swift_bridgeObjectRetain(v111);
    id v115 = v112;
    swift_retain(v114);
    sub_1000F9480(v102, (uint64_t)&unk_10032BCB8, (uint64_t)v109);
    uint64_t v117 = v116;

    swift_release(v117);
    sub_100085BC4(v130, type metadata accessor for ExternalPurchaseTokenV2Response);
    uint64_t v67 = v114;
LABEL_15:
    swift_release(v67);
    goto LABEL_16;
  }

  uint64_t v68 = v125;
  sub_1000E8F9C((uint64_t)v135, v125, type metadata accessor for SKLogger);
  uint64_t v137 = 0LL;
  unint64_t v138 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(49LL);
  swift_bridgeObjectRelease(v138);
  uint64_t v137 = 0xD00000000000002FLL;
  unint64_t v138 = 0x80000001002A3180LL;
  v69._uint64_t countAndFlagsBits = v132;
  v69._object = a4;
  String.append(_:)(v69);
  uint64_t v71 = v137;
  unint64_t v70 = v138;
  os_log_type_t v73 = static os_log_type_t.error.getter(v72);
  swift_bridgeObjectRetain_n(v30, 2LL);
  uint64_t v74 = swift_bridgeObjectRetain_n(v70, 2LL);
  uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
  os_log_type_t v76 = v73;
  if (os_log_type_enabled(v75, v73))
  {
    uint64_t v77 = swift_slowAlloc(22LL, -1LL);
    id v135 = (void (**)(void, void))v71;
    uint64_t v78 = v77;
    uint64_t v79 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v78 = 136446466;
    uint64_t v136 = v45;
    uint64_t v137 = 91LL;
    unint64_t v138 = 0xE100000000000000LL;
    v139[0] = v79;
    swift_bridgeObjectRetain(v30);
    v80._uint64_t countAndFlagsBits = v133;
    v80._object = v30;
    String.append(_:)(v80);
    v81._uint64_t countAndFlagsBits = 8285LL;
    v81._object = (void *)0xE200000000000000LL;
    String.append(_:)(v81);
    swift_bridgeObjectRelease(v30);
    unint64_t v82 = v138;
    uint64_t v137 = sub_10007A488(v137, v138, v139);
    id v45 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v78 + 4);
    swift_bridgeObjectRelease_n(v30, 2LL);
    swift_bridgeObjectRelease(v82);
    *(_WORD *)(v78 + 12) = 2082;
    swift_bridgeObjectRetain(v70);
    uint64_t v137 = sub_10007A488((uint64_t)v135, v70, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v78 + 14);
    swift_bridgeObjectRelease_n(v70, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "%{public}s%{public}s", (uint8_t *)v78, 0x16u);
    swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1LL, -1LL);
    swift_slowDealloc(v78, -1LL, -1LL);
    swift_bridgeObjectRelease(v70);
    uint64_t v68 = v125;
    swift_bridgeObjectRelease(v30);
  }

  else
  {

    swift_bridgeObjectRelease_n(v70, 3LL);
    swift_bridgeObjectRelease_n(v30, 3LL);
  }

  sub_100085BC4(v68, type metadata accessor for SKLogger);
  unint64_t v97 = sub_10009BB88();
  uint64_t v98 = swift_allocError(&type metadata for StoreKitInternalError, v97, 0LL, 0LL);
  *id v99 = 9;
  uint64_t v100 = (void *)_convertErrorToNSError(_:)(v98);
  ((void (**)(void, void *))a6)[2](a6, v100);

  swift_errorRelease(v98);
  swift_release(v134);

LABEL_16:
  _Block_release(a6);
}

uint64_t sub_100100864( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 112) = v12;
  *(_OWORD *)(v8 + 96) = v11;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a6;
  *(void *)(v8 + 56) = a4;
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  *(void *)(v8 + 120) = v9;
  *(void *)(v8 + 128) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001008D8, 0LL, 0LL);
}

uint64_t sub_1001008D8()
{
  uint64_t v1 = (void *)sub_100093010();
  v0[17] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100100930;
  uint64_t v2 = sub_1000C6298(v0[9]);
  return sub_1000BB750(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100100930()
{
  *(void *)(v1 + 144) = v0;
  swift_task_dealloc(v2);
  sub_100085EF0();
  sub_100093420();
  return sub_1000AA908(v3, v4, v5);
}

uint64_t sub_100100984()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001009B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v29 = *(void *)(v26 + 144);
  uint64_t v30 = *(void *)(v26 + 80);
  uint64_t v31 = *(void *)(v26 + 64);
  uint64_t v32 = sub_100079604(*(void *)(v26 + 120), (uint64_t)qword_10033E1A8);
  sub_10011BB10(v32, v33, type metadata accessor for SKLogger);
  a14 = 0LL;
  a15 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  unint64_t v34 = a15;
  *(void *)(v26 + 16) = a14;
  *(void *)(v26 + 24) = v34;
  v35._object = (void *)0x80000001002A3210LL;
  v35._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v35);
  sub_1000AB094(v30);
  sub_1000862C4();
  *(void *)(v26 + 32) = v29;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v36 = sub_10011C2D8();
  uint64_t v38 = *(void *)(v26 + 16);
  uint64_t v37 = *(void *)(v26 + 24);
  os_log_type_t v39 = static os_log_type_t.error.getter(v36);
  sub_100085EE8(v31);
  sub_100085EE8(v37);
  Swift::String v40 = (os_log_s *)sub_100093C38();
  os_log_type_t v41 = v39;
  BOOL v42 = sub_1000B22A4(v40);
  uint64_t v43 = *(void *)(v26 + 64);
  if (v42)
  {
    uint64_t v44 = *(void *)(v26 + 56);
    uint64_t v52 = v38;
    uint64_t v45 = sub_10007B9FC(22LL);
    uint64_t v53 = sub_10007B9FC(64LL);
    a13 = v53;
    *(_DWORD *)uint64_t v45 = 136446466;
    a14 = 91LL;
    a15 = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v44);
    sub_100085F14();
    sub_100085FB4();
    *(void *)(v26 + 40) = sub_10008620C(a14, v46, &a13);
    sub_1000E98A0(v26 + 40, v26 + 48);
    sub_10007B980();
    sub_10007D974(v43);
    *(_WORD *)(v45 + 12) = 2082;
    sub_100085FEC();
    *(void *)(v26 + 48) = sub_1000B20F4(v52, v47, &a13);
    sub_100086194(v26 + 48, v26 + 56);
    sub_100085E64(v37);
    sub_100086038((void *)&_mh_execute_header, v40, v41, "%{public}s%{public}s", (uint8_t *)v45);
    sub_100086030(v53, v48, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v53);
    sub_10007B974(v45);

    sub_100085EF0();
  }

  else
  {
    sub_10007D974(*(void *)(v26 + 64));
    sub_100085E64(v37);
  }

  uint64_t v49 = *(void *)(v26 + 144);
  uint64_t v50 = *(void (**)(uint64_t))(v26 + 104);
  sub_100085BC4(*(void *)(v26 + 128), type metadata accessor for SKLogger);
  sub_10011C0C4();
  v50(v49);
  sub_10011B038();
  sub_10011B038();
  swift_task_dealloc(*(void *)(v26 + 128));
  return sub_1000AA2C4(*(uint64_t (**)(void))(v26 + 8));
}

void sub_100100D08(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v79 = a1;
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v9);
  __int128 v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SKLogger(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v82 = (uint64_t)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v17 = swift_allocObject(&unk_1002EE8E0, 24LL, 7LL);
  *(void *)(v17 + 16) = a3;
  uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___NSUUID);
  _Block_copy(a3);
  id v19 = objc_msgSend(v18, "lib_shortLogKey");
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v21 = v20;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v80 = sub_100079604(v12, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v80, (uint64_t)v16, type metadata accessor for SKLogger);
  uint64_t v22 = swift_bridgeObjectRetain(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  uint64_t v24 = swift_bridgeObjectRetain_n(v21, 2LL);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = v23;
  if (os_log_type_enabled(v25, v23))
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v75 = v17;
    uint64_t v28 = v27;
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v74 = v6;
    uint64_t v83 = 91LL;
    unint64_t v84 = 0xE100000000000000LL;
    uint64_t v85 = v29;
    swift_bridgeObjectRetain(v21);
    os_log_type_t v73 = v11;
    v30._uint64_t countAndFlagsBits = v81;
    v30._object = v21;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 8285LL;
    v31._object = (void *)0xE200000000000000LL;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v21);
    unint64_t v32 = v84;
    uint64_t v83 = sub_10007A488(v83, v84, &v85);
    uint64_t v6 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v28 + 4);
    swift_bridgeObjectRelease_n(v21, 2LL);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v83 = sub_10007A488(0xD000000000000032LL, 0x80000001002A2660LL, &v85);
    __int128 v11 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v28 + 14);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s%{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v33 = v28;
    uint64_t v17 = v75;
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_bridgeObjectRelease(v21);
  }

  else
  {

    swift_bridgeObjectRelease_n(v21, 3LL);
  }

  sub_100085BC4((uint64_t)v16, type metadata accessor for SKLogger);
  id v34 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v34)
  {
    Swift::String v35 = v34;
    type metadata accessor for Client(0LL);
    uint64_t v36 = type metadata accessor for ClientOverride(0LL);
    sub_10007D0AC((uint64_t)v11, 1LL, 1LL, v36);
    id v37 = v35;
    sub_1000E1A28(v37, (uint64_t)v11);
    os_log_type_t v54 = v53;
    uint64_t v55 = *(void *)&v53[OBJC_IVAR____TtC9storekitd6Client_callerBundleID];
    uint64_t v56 = *(void *)&v53[OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8];
    uint64_t v57 = (uint64_t)v78;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))( v78,  &v53[OBJC_IVAR____TtC9storekitd6Client_callerBundleURL],  v77);
    swift_bridgeObjectRetain(v56);
    id v58 = sub_1000DF468();
    id v59 = objc_allocWithZone((Class)type metadata accessor for DialogContext(0LL));
    id v60 = sub_1000DB648(v55, v56, v57, v58, 0LL);
    uint64_t v61 = type metadata accessor for TaskPriority(0LL);
    sub_10007D0AC((uint64_t)v6, 1LL, 1LL, v61);
    unint64_t v62 = (void *)swift_allocObject(&unk_1002EE908, 88LL, 7LL);
    v62[2] = 0LL;
    v62[3] = 0LL;
    unint64_t v63 = v79;
    v62[4] = v54;
    v62[5] = v63;
    uint64_t v64 = v81;
    v62[6] = v60;
    v62[7] = v64;
    v62[8] = v21;
    v62[9] = sub_10011A5C8;
    v62[10] = v17;
    id v65 = v54;
    id v66 = v63;
    id v67 = v60;
    swift_bridgeObjectRetain(v21);
    id v68 = v65;
    id v69 = v66;
    id v70 = v67;
    swift_retain(v17);
    sub_100084100((uint64_t)v6);
    uint64_t v72 = v71;

    swift_bridgeObjectRelease(v21);
    swift_release(v72);
    sub_100085298((uint64_t)v6, (uint64_t *)&unk_10032BAB0);
  }

  else
  {
    sub_1000E8F9C(v80, v82, type metadata accessor for SKLogger);
    os_log_type_t v39 = static os_log_type_t.error.getter(v38);
    uint64_t v40 = swift_bridgeObjectRetain_n(v21, 2LL);
    os_log_type_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    if (os_log_type_enabled(v41, v39))
    {
      uint64_t v42 = swift_slowAlloc(22LL, -1LL);
      uint64_t v43 = v17;
      uint64_t v44 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v42 = 136446466;
      uint64_t v83 = 91LL;
      unint64_t v84 = 0xE100000000000000LL;
      uint64_t v85 = v44;
      swift_bridgeObjectRetain(v21);
      v45._uint64_t countAndFlagsBits = v81;
      v45._object = v21;
      String.append(_:)(v45);
      v46._uint64_t countAndFlagsBits = 8285LL;
      v46._object = (void *)0xE200000000000000LL;
      String.append(_:)(v46);
      swift_bridgeObjectRelease(v21);
      unint64_t v47 = v84;
      uint64_t v83 = sub_10007A488(v83, v84, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v42 + 4);
      swift_bridgeObjectRelease_n(v21, 2LL);
      swift_bridgeObjectRelease(v47);
      *(_WORD *)(v42 + 12) = 2082;
      uint64_t v83 = sub_10007A488(0xD00000000000003DLL, 0x80000001002A26A0LL, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v42 + 14);
      _os_log_impl((void *)&_mh_execute_header, v41, v39, "%{public}s%{public}s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v48 = v44;
      uint64_t v17 = v43;
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_bridgeObjectRelease(v21);
    }

    else
    {

      swift_bridgeObjectRelease_n(v21, 3LL);
    }

    sub_100085BC4(v82, type metadata accessor for SKLogger);
    unint64_t v49 = sub_10009BB88();
    uint64_t v50 = swift_allocError(&type metadata for StoreKitInternalError, v49, 0LL, 0LL);
    *uint64_t v51 = 1;
    uint64_t v52 = (void *)_convertErrorToNSError(_:)(v50);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v52);

    swift_errorRelease(v50);
  }

  swift_release(v17);
  _Block_release(a3);
}

void StoreKitServiceConnection.checkPaymentAccountBindingEligibility(with:reply:)()
{
  id v68 = v3;
  uint64_t v69 = v4;
  uint64_t v6 = v5;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100086318();
  uint64_t v11 = sub_10011C178(v10);
  __chkstk_darwin(v11);
  sub_10011BCAC(v12, v62);
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v16);
  sub_10011B108();
  __chkstk_darwin(v17);
  sub_1000D4EDC();
  id v18 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  sub_10011C270(v19);
  if (qword_100328B40 != -1) {
    uint64_t v20 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v67 = sub_10011C364(v20, (uint64_t)qword_10033E1A8);
  sub_1000E9638(v67, v21, type metadata accessor for SKLogger);
  uint64_t v22 = sub_10008618C();
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  sub_100085EE8(v1);
  uint64_t v24 = (os_log_s *)sub_1000935A4();
  if (sub_10011B8BC(v24))
  {
    uint64_t v25 = sub_10007B9FC(22LL);
    uint64_t v65 = v2;
    os_log_type_t v26 = (uint8_t *)v25;
    uint64_t v27 = sub_10007B9FC(64LL);
    uint64_t v64 = v6;
    uint64_t v28 = v27;
    *(_DWORD *)os_log_type_t v26 = 136446466;
    id v66 = v9;
    uint64_t v71 = 91LL;
    unint64_t v72 = 0xE100000000000000LL;
    uint64_t v73 = v27;
    sub_10008618C();
    unint64_t v63 = v15;
    sub_10009C32C(v70);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v30 = sub_10008620C(v71, v29, &v73);
    sub_10011B71C(v30);
    sub_10007D974(v1);
    sub_10007B980();
    sub_100093898();
    sub_10011B894();
    uint64_t v71 = sub_1000AB050(50LL, v31, v32);
    uint64_t v15 = v63;
    sub_100086194((uint64_t)&v71, (uint64_t)&v71);
    sub_100086038((void *)&_mh_execute_header, v24, v23, "%{public}s%{public}s", v26);
    sub_100086030(v28, v33, (uint64_t)&type metadata for Any + 8);
    uint64_t v34 = v28;
    uint64_t v6 = v64;
    sub_10007B974(v34);
    sub_10007B974((uint64_t)v26);
    sub_100085FB4();
  }

  else
  {

    uint64_t v35 = sub_100085E64(v1);
  }

  sub_1000E961C(v35, type metadata accessor for SKLogger);
  id v36 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v36)
  {
    uint64_t v0 = v36;
    sub_1000E66E0();
    uint64_t v38 = sub_1000E953C();
    id v39 = sub_10011B5D4(v38);
    sub_10011B984(v39);
    if (!v15)
    {
      uint64_t v51 = *(void **)(v40 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8);
      sub_10011BB3C(v40, OBJC_IVAR____TtC9storekitd6Client_callerBundleURL);
      sub_1000930E4();
      sub_1000DF468();
      id v52 = objc_allocWithZone((Class)sub_10011BDD8());
      sub_10011B76C();
      uint64_t v53 = sub_1000AAD2C();
      sub_1000875FC((uint64_t)v9, v54, v55, v53);
      uint64_t v56 = (void *)sub_1000AA314((uint64_t)&unk_1002EE2C8, 88LL);
      id v57 = sub_10011B6F0(v56);
      id v58 = v6;
      sub_10011C024();
      sub_10008618C();
      id v59 = v57;
      id v60 = v51;
      id v61 = sub_10011C024();
      sub_10011C1E4();
      sub_10011C110();
      sub_10011BC14();
      sub_100085FB4();

      sub_1000AAEC8();
      sub_100085298((uint64_t)v9, (uint64_t *)&unk_10032BAB0);
      goto LABEL_14;
    }

    sub_1000E93B4();
  }

  sub_10011B714(v67, v37, type metadata accessor for SKLogger);
  static os_log_type_t.error.getter(v41);
  sub_100085EE8(v1);
  uint64_t v42 = (os_log_s *)sub_10009C414();
  if (sub_10011B330(v42))
  {
    uint64_t v43 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v44 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v43 = 136446466;
    uint64_t v71 = 91LL;
    unint64_t v72 = 0xE100000000000000LL;
    uint64_t v73 = v44;
    sub_10008618C();
    sub_10009C32C(v70);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v71 = sub_10008620C(v71, v45, &v73);
    sub_10011B1D8((uint64_t)&v71);
    sub_10007D974(v1);
    sub_10007B980();
    sub_10011B73C();
    uint64_t v71 = sub_1000E9544(0xD00000000000003DLL, (uint64_t)"Could not create client for account binding eligibility check");
    sub_100086194((uint64_t)&v71, (uint64_t)&v72);
    sub_100086038((void *)&_mh_execute_header, (os_log_s *)v0, v23, "%{public}s%{public}s", v43);
    sub_100086030(v44, v46, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v44);
    sub_10007B974((uint64_t)v43);
    sub_100085FB4();
  }

  else
  {

    uint64_t v47 = sub_100085E64(v1);
  }

  sub_1000CB900(v47, type metadata accessor for SKLogger);
  unint64_t v48 = sub_10009BB88();
  uint64_t v49 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v48);
  sub_10011BB7C(v49, v50);
  v68(0LL, v0);
  sub_10011B038();
LABEL_14:
  sub_100085E98();
}

uint64_t sub_100101A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  uint64_t v7 = (void *)swift_task_alloc(dword_10032AD7C);
  v6[9] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_100101A58;
  return sub_1000CBFB4();
}

uint64_t sub_100101A58(char a1)
{
  *(void *)(v2 + 80) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(_BYTE *)(v2 + 89) = a1 & 1;
  }
  sub_100093420();
  return sub_10009C2D4();
}

uint64_t sub_100101AB4()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100101AE4()
{
  if ((sub_10011BA58(v1, (uint64_t)v0, v5, (uint64_t)&unk_1002EED98) & 1) != 0
    && (uint64_t v6 = *(void *)(v2 + 32), v6 != 1)
    && (uint64_t v1 = *(void *)(v2 + 16), sub_10011AA2C(v1, *(void *)(v2 + 24), v6), v1 == 4000029))
  {
    sub_10011B944();
    unint64_t v7 = sub_10011ADCC();
    sub_100093030((uint64_t)&type metadata for StoreKitServerError, v7);
    sub_10011C06C(v8, 25);
    sub_10011B038();
    uint64_t v9 = *(_BYTE **)(v2 + 40);
  }

  else
  {
    sub_10011BCD4();
    sub_10011C1C4();
    if (sub_10011BA58((uint64_t)v0, v1, v10, (uint64_t)&unk_1002EEE28) && !*v0)
    {
      sub_10011B944();
      unint64_t v14 = sub_10009BB88();
      sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v14);
      sub_10011C06C(v15, 8);
      sub_10011B038();
      uint64_t v9 = *(_BYTE **)(v2 + 48);
    }

    else
    {
      sub_10011BF38();
      uint64_t v11 = (void *)sub_100093C54();
      id v12 = sub_10011B058(v11, "toASDErrorWithMetadata:");
      sub_100093C5C();
      v4(0LL, v3);

      uint64_t v9 = v0;
    }
  }

  swift_errorRelease(v9);
  return sub_1000AA724(*(uint64_t (**)(void))(v2 + 8));
}

void sub_100101C2C(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

void sub_100101C84(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v79 = a1;
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v4);
  id v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SKLogger(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v82 = (uint64_t)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v17 = swift_allocObject(&unk_1002EE890, 24LL, 7LL);
  *(void *)(v17 + 16) = a3;
  id v18 = (void *)objc_opt_self(&OBJC_CLASS___NSUUID);
  _Block_copy(a3);
  id v19 = objc_msgSend(v18, "lib_shortLogKey");
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v21 = v20;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v80 = sub_100079604(v12, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v80, (uint64_t)v16, type metadata accessor for SKLogger);
  uint64_t v22 = swift_bridgeObjectRetain(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  uint64_t v24 = swift_bridgeObjectRetain_n(v21, 2LL);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = v23;
  if (os_log_type_enabled(v25, v23))
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v75 = v17;
    uint64_t v28 = v27;
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v74 = v6;
    uint64_t v83 = 91LL;
    unint64_t v84 = 0xE100000000000000LL;
    uint64_t v85 = v29;
    swift_bridgeObjectRetain(v21);
    uint64_t v73 = v11;
    v30._uint64_t countAndFlagsBits = v81;
    v30._object = v21;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 8285LL;
    v31._object = (void *)0xE200000000000000LL;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v21);
    unint64_t v32 = v84;
    uint64_t v83 = sub_10007A488(v83, v84, &v85);
    id v6 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v28 + 4);
    swift_bridgeObjectRelease_n(v21, 2LL);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v83 = sub_10007A488(0xD00000000000001FLL, 0x80000001002A26E0LL, &v85);
    uint64_t v11 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v28 + 14);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s%{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v33 = v28;
    uint64_t v17 = v75;
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_bridgeObjectRelease(v21);
  }

  else
  {

    swift_bridgeObjectRelease_n(v21, 3LL);
  }

  sub_100085BC4((uint64_t)v16, type metadata accessor for SKLogger);
  id v34 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v34)
  {
    uint64_t v35 = v34;
    type metadata accessor for Client(0LL);
    uint64_t v36 = type metadata accessor for ClientOverride(0LL);
    sub_10007D0AC((uint64_t)v11, 1LL, 1LL, v36);
    id v37 = v35;
    sub_1000E1A28(v37, (uint64_t)v11);
    uint64_t v54 = v53;
    uint64_t v55 = *(void *)&v53[OBJC_IVAR____TtC9storekitd6Client_callerBundleID];
    uint64_t v56 = *(void *)&v53[OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8];
    uint64_t v57 = (uint64_t)v78;
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))( v78,  &v53[OBJC_IVAR____TtC9storekitd6Client_callerBundleURL],  v77);
    swift_bridgeObjectRetain(v56);
    id v58 = sub_1000DF468();
    id v59 = objc_allocWithZone((Class)type metadata accessor for DialogContext(0LL));
    id v60 = sub_1000DB648(v55, v56, v57, v58, 0LL);
    uint64_t v61 = type metadata accessor for TaskPriority(0LL);
    sub_10007D0AC((uint64_t)v6, 1LL, 1LL, v61);
    uint64_t v62 = (void *)swift_allocObject(&unk_1002EE8B8, 88LL, 7LL);
    v62[2] = 0LL;
    v62[3] = 0LL;
    unint64_t v63 = v79;
    v62[4] = v54;
    v62[5] = v63;
    uint64_t v64 = v81;
    v62[6] = v60;
    v62[7] = v64;
    v62[8] = v21;
    v62[9] = sub_100085E1C;
    v62[10] = v17;
    id v65 = v54;
    id v66 = v63;
    id v67 = v60;
    swift_bridgeObjectRetain(v21);
    id v68 = v65;
    id v69 = v66;
    id v70 = v67;
    swift_retain(v17);
    sub_100084100((uint64_t)v6);
    uint64_t v72 = v71;

    swift_bridgeObjectRelease(v21);
    swift_release(v72);
    sub_100085298((uint64_t)v6, (uint64_t *)&unk_10032BAB0);
  }

  else
  {
    sub_1000E8F9C(v80, v82, type metadata accessor for SKLogger);
    os_log_type_t v39 = static os_log_type_t.error.getter(v38);
    uint64_t v40 = swift_bridgeObjectRetain_n(v21, 2LL);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    if (os_log_type_enabled(v41, v39))
    {
      uint64_t v42 = swift_slowAlloc(22LL, -1LL);
      uint64_t v43 = v17;
      uint64_t v44 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v42 = 136446466;
      uint64_t v83 = 91LL;
      unint64_t v84 = 0xE100000000000000LL;
      uint64_t v85 = v44;
      swift_bridgeObjectRetain(v21);
      v45._uint64_t countAndFlagsBits = v81;
      v45._object = v21;
      String.append(_:)(v45);
      v46._uint64_t countAndFlagsBits = 8285LL;
      v46._object = (void *)0xE200000000000000LL;
      String.append(_:)(v46);
      swift_bridgeObjectRelease(v21);
      unint64_t v47 = v84;
      uint64_t v83 = sub_10007A488(v83, v84, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v42 + 4);
      swift_bridgeObjectRelease_n(v21, 2LL);
      swift_bridgeObjectRelease(v47);
      *(_WORD *)(v42 + 12) = 2082;
      uint64_t v83 = sub_10007A488(0xD00000000000002BLL, 0x80000001002A2700LL, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v42 + 14);
      _os_log_impl((void *)&_mh_execute_header, v41, v39, "%{public}s%{public}s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v48 = v44;
      uint64_t v17 = v43;
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_bridgeObjectRelease(v21);
    }

    else
    {

      swift_bridgeObjectRelease_n(v21, 3LL);
    }

    sub_100085BC4(v82, type metadata accessor for SKLogger);
    unint64_t v49 = sub_10009BB88();
    uint64_t v50 = swift_allocError(&type metadata for StoreKitInternalError, v49, 0LL, 0LL);
    *uint64_t v51 = 1;
    id v52 = (void *)_convertErrorToNSError(_:)(v50);
    ((void (**)(void, void *))a3)[2](a3, v52);

    swift_errorRelease(v50);
  }

  swift_release(v17);
  _Block_release(a3);
}

void StoreKitServiceConnection.bindPaymentAccount(with:reply:)()
{
  id v68 = v3;
  uint64_t v69 = v4;
  id v6 = v5;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100086318();
  uint64_t v11 = sub_10011C178(v10);
  __chkstk_darwin(v11);
  sub_10011BCAC(v12, v62);
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v16);
  sub_10011B108();
  __chkstk_darwin(v17);
  sub_1000D4EDC();
  id v18 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  sub_10011C270(v19);
  if (qword_100328B40 != -1) {
    uint64_t v20 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v67 = sub_10011C364(v20, (uint64_t)qword_10033E1A8);
  sub_1000E9638(v67, v21, type metadata accessor for SKLogger);
  uint64_t v22 = sub_10008618C();
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  sub_100085EE8(v1);
  uint64_t v24 = (os_log_s *)sub_1000935A4();
  if (sub_10011B8BC(v24))
  {
    uint64_t v25 = sub_10007B9FC(22LL);
    uint64_t v65 = v2;
    os_log_type_t v26 = (uint8_t *)v25;
    uint64_t v27 = sub_10007B9FC(64LL);
    uint64_t v64 = v6;
    uint64_t v28 = v27;
    *(_DWORD *)os_log_type_t v26 = 136446466;
    id v66 = v9;
    uint64_t v71 = 91LL;
    unint64_t v72 = 0xE100000000000000LL;
    uint64_t v73 = v27;
    sub_10008618C();
    unint64_t v63 = v15;
    sub_10009C32C(v70);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v30 = sub_10008620C(v71, v29, &v73);
    sub_10011B71C(v30);
    sub_10007D974(v1);
    sub_10007B980();
    sub_100093898();
    sub_10011B894();
    uint64_t v71 = sub_1000AB050(31LL, v31, v32);
    uint64_t v15 = v63;
    sub_100086194((uint64_t)&v71, (uint64_t)&v71);
    sub_100086038((void *)&_mh_execute_header, v24, v23, "%{public}s%{public}s", v26);
    sub_100086030(v28, v33, (uint64_t)&type metadata for Any + 8);
    uint64_t v34 = v28;
    id v6 = v64;
    sub_10007B974(v34);
    sub_10007B974((uint64_t)v26);
    sub_100085FB4();
  }

  else
  {

    uint64_t v35 = sub_100085E64(v1);
  }

  sub_1000E961C(v35, type metadata accessor for SKLogger);
  id v36 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v36)
  {
    uint64_t v0 = v36;
    sub_1000E66E0();
    uint64_t v38 = sub_1000E953C();
    id v39 = sub_10011B5D4(v38);
    sub_10011B984(v39);
    if (!v15)
    {
      uint64_t v51 = *(void **)(v40 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8);
      sub_10011BB3C(v40, OBJC_IVAR____TtC9storekitd6Client_callerBundleURL);
      sub_1000930E4();
      sub_1000DF468();
      id v52 = objc_allocWithZone((Class)sub_10011BDD8());
      sub_10011B76C();
      uint64_t v53 = sub_1000AAD2C();
      sub_1000875FC((uint64_t)v9, v54, v55, v53);
      uint64_t v56 = (void *)sub_1000AA314((uint64_t)&unk_1002EE2F0, 88LL);
      id v57 = sub_10011B6F0(v56);
      id v58 = v6;
      sub_10011C024();
      sub_10008618C();
      id v59 = v57;
      id v60 = v51;
      id v61 = sub_10011C024();
      sub_10011C1E4();
      sub_10011C110();
      sub_10011BC14();
      sub_100085FB4();

      sub_1000AAEC8();
      sub_100085298((uint64_t)v9, (uint64_t *)&unk_10032BAB0);
      goto LABEL_14;
    }

    sub_1000E93B4();
  }

  sub_10011B714(v67, v37, type metadata accessor for SKLogger);
  static os_log_type_t.error.getter(v41);
  sub_100085EE8(v1);
  uint64_t v42 = (os_log_s *)sub_10009C414();
  if (sub_10011B330(v42))
  {
    uint64_t v43 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v44 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v43 = 136446466;
    uint64_t v71 = 91LL;
    unint64_t v72 = 0xE100000000000000LL;
    uint64_t v73 = v44;
    sub_10008618C();
    sub_10009C32C(v70);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v71 = sub_10008620C(v71, v45, &v73);
    sub_10011B1D8((uint64_t)&v71);
    sub_10007D974(v1);
    sub_10007B980();
    sub_10011B73C();
    uint64_t v71 = sub_1000E9544(0xD00000000000002BLL, (uint64_t)"Could not create client for account binding");
    sub_100086194((uint64_t)&v71, (uint64_t)&v72);
    sub_100086038((void *)&_mh_execute_header, (os_log_s *)v0, v23, "%{public}s%{public}s", v43);
    sub_100086030(v44, v46, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v44);
    sub_10007B974((uint64_t)v43);
    sub_100085FB4();
  }

  else
  {

    uint64_t v47 = sub_100085E64(v1);
  }

  sub_1000CB900(v47, type metadata accessor for SKLogger);
  unint64_t v48 = sub_10009BB88();
  uint64_t v49 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v48);
  sub_10011BB7C(v49, v50);
  v68();
  sub_10011B038();
LABEL_14:
  sub_100085E98();
}

uint64_t sub_10010297C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  uint64_t v7 = (void *)swift_task_alloc(dword_10032A014);
  v6[9] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1001029C8;
  return sub_100088974();
}

uint64_t sub_1001029C8()
{
  *(void *)(v1 + 80) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100102A14()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100102A3C()
{
  if ((sub_10011BA58(v1, (uint64_t)v0, v4, (uint64_t)&unk_1002EED98) & 1) != 0
    && (uint64_t v5 = *(void *)(v2 + 32), v5 != 1)
    && (uint64_t v1 = *(void *)(v2 + 16), sub_10011AA2C(v1, *(void *)(v2 + 24), v5), v1 == 4000029))
  {
    sub_10011B944();
    unint64_t v6 = sub_10011ADCC();
    sub_100093030((uint64_t)&type metadata for StoreKitServerError, v6);
    sub_10011B9EC(v7, 25);
    sub_10011B038();
    uint64_t v8 = *(_BYTE **)(v2 + 40);
  }

  else
  {
    sub_10011BCD4();
    sub_10011C1C4();
    if (sub_10011BA58((uint64_t)v0, v1, v9, (uint64_t)&unk_1002EEE28) && !*v0)
    {
      sub_10011B944();
      unint64_t v13 = sub_10009BB88();
      sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v13);
      sub_10011B9EC(v14, 8);
      sub_10011B038();
      uint64_t v8 = *(_BYTE **)(v2 + 48);
    }

    else
    {
      sub_10011BF38();
      uint64_t v10 = (void *)sub_100093C54();
      id v11 = sub_10011B058(v10, "toASDErrorWithMetadata:");
      sub_100093C5C();
      sub_10011BFFC();

      uint64_t v8 = v0;
    }
  }

  swift_errorRelease(v8);
  return sub_1000AA724(*(uint64_t (**)(void))(v2 + 8));
}

void sub_100102B7C(void *a1, uint64_t a2, const void *a3)
{
  id v39 = a1;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = swift_allocObject(&unk_1002EE818, 24LL, 7LL);
  *(void *)(v38 + 16) = a3;
  id v11 = (void *)objc_opt_self(&OBJC_CLASS___NSUUID);
  _Block_copy(a3);
  id v12 = objc_msgSend(v11, "lib_shortLogKey");
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v16 = sub_100079604(v8, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v16, (uint64_t)v10, type metadata accessor for SKLogger);
  uint64_t v17 = swift_bridgeObjectRetain(v15);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  uint64_t v19 = swift_bridgeObjectRetain_n(v15, 2LL);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = v18;
  if (os_log_type_enabled(v20, v18))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = swift_slowAlloc(64LL, -1LL);
    id v36 = v7;
    uint64_t v24 = v23;
    v40[0] = v23;
    *(_DWORD *)uint64_t v22 = 136446466;
    uint64_t v37 = a3;
    *(void *)&v41[0] = 91LL;
    *((void *)&v41[0] + 1) = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v15);
    uint64_t v35 = a2;
    v25._uint64_t countAndFlagsBits = v13;
    v25._object = v15;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = 8285LL;
    v26._object = (void *)0xE200000000000000LL;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v15);
    uint64_t v27 = *((void *)&v41[0] + 1);
    *(void *)&v41[0] = sub_10007A488(*(uint64_t *)&v41[0], *((unint64_t *)&v41[0] + 1), v40);
    a3 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, (char *)v41 + 8, v22 + 4);
    swift_bridgeObjectRelease_n(v15, 2LL);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 12) = 2082;
    *(void *)&v41[0] = sub_10007A488(0xD000000000000031LL, 0x80000001002A2730LL, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, (char *)v41 + 8, v22 + 14);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s%{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v28 = v24;
    uint64_t v7 = v36;
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_bridgeObjectRelease(v15);
  }

  else
  {

    swift_bridgeObjectRelease_n(v15, 3LL);
  }

  sub_100085BC4((uint64_t)v10, type metadata accessor for SKLogger);
  sub_1001032E8(v39, v13, v15, (uint64_t *)v41);
  swift_bridgeObjectRelease(v15);
  uint64_t v29 = type metadata accessor for TaskPriority(0LL);
  sub_10007D0AC((uint64_t)v7, 1LL, 1LL, v29);
  uint64_t v30 = swift_allocObject(&unk_1002EE840, 32LL, 7LL);
  uint64_t v31 = v38;
  *(void *)(v30 + 16) = sub_10011A560;
  *(void *)(v30 + 24) = v31;
  uint64_t v32 = swift_allocObject(&unk_1002EE868, 56LL, 7LL);
  __int128 v33 = v41[1];
  *(_OWORD *)(v32 + 16) = v41[0];
  *(_OWORD *)(v32 + 32) = v33;
  *(void *)(v32 + 48) = v42;
  swift_retain(v31);
  uint64_t v34 = sub_1000F9BF8((uint64_t)v7, (uint64_t)sub_100119824, v30, (uint64_t)&unk_10032BC90, v32);
  swift_release(v31);
  swift_release(v34);
  _Block_release(a3);
}

void StoreKitServiceConnection.manageSubscriptionsEngagementRequest(with:reply:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_10011B378();
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_100085FDC();
  id v8 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v9 = sub_100086040((uint64_t)v8);
  id v11 = v10;

  if (qword_100328B40 != -1) {
    uint64_t v12 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v13 = sub_10011BBF8(v12, (uint64_t)qword_10033E1A8);
  sub_10011B8C4(v13, v14, type metadata accessor for SKLogger);
  uint64_t v15 = sub_1000B220C();
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  sub_100085EE8((uint64_t)v11);
  uint64_t v17 = (os_log_s *)sub_10009C5AC();
  if (sub_10011B23C(v17))
  {
    uint64_t v41 = v3;
    os_log_type_t v18 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v19 = sub_10007B9FC(64LL);
    v42[0] = v19;
    *(_DWORD *)os_log_type_t v18 = 136446466;
    sub_1000B2110();
    *(void *)&v43[0] = v20;
    *((void *)&v43[0] + 1) = v21;
    sub_1000B220C();
    v22._uint64_t countAndFlagsBits = v9;
    v22._object = v11;
    String.append(_:)(v22);
    sub_100085F14();
    sub_10009C494();
    *(void *)&v43[0] = sub_10008620C(*(uint64_t *)&v43[0], v23, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, (char *)v43 + 8, v18 + 4);
    sub_10007D974((uint64_t)v11);
    sub_10007B980();
    sub_10011BAA0();
    sub_1000862B8();
    uint64_t v25 = sub_1000AB050(49LL, v24, v42);
    uint64_t v26 = sub_10011BFA8(v25);
    sub_100086194(v26, (uint64_t)v43 + 8);
    sub_100086038((void *)&_mh_execute_header, v17, v16, "%{public}s%{public}s", v18);
    sub_100086030(v19, v27, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v19);
    uint64_t v28 = (uint64_t)v18;
    uint64_t v3 = v41;
    sub_10007B974(v28);
    sub_10009C494();
  }

  else
  {

    uint64_t v29 = sub_100085E64((uint64_t)v11);
  }

  sub_10011BD24(v29, type metadata accessor for SKLogger);
  sub_10011C3C4();
  sub_1001032E8(v30, v31, v32, v33);
  swift_bridgeObjectRelease(v11);
  uint64_t v34 = sub_1000AAD2C();
  sub_1000875FC(v1, v35, v36, v34);
  uint64_t v37 = sub_1000AA314((uint64_t)&unk_1002EE318, 32LL);
  *(void *)(v37 + 16) = v5;
  *(void *)(v37 + 24) = v3;
  uint64_t v38 = sub_1000AA314((uint64_t)&unk_1002EE340, 56LL);
  __int128 v39 = v43[1];
  *(_OWORD *)(v38 + 16) = v43[0];
  *(_OWORD *)(v38 + 32) = v39;
  *(void *)(v38 + 48) = v44;
  swift_retain(v3);
  uint64_t v40 = sub_1000F9BF8(v1, (uint64_t)sub_100119824, v37, (uint64_t)&unk_10032BB30, v38);
  swift_release(v40);
  sub_100085E98();
}

void sub_1001032E8(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v14)
  {
    uint64_t v15 = v14;
    type metadata accessor for Client(0LL);
    uint64_t v16 = type metadata accessor for ClientOverride(0LL);
    sub_10007D0AC((uint64_t)v13, 1LL, 1LL, v16);
    id v17 = v15;
    sub_1000E1A28(v17, (uint64_t)v13);
    if (!v4)
    {
      uint64_t v37 = v18;
      uint64_t v38 = sub_10011A7A4(a1);
      uint64_t v40 = v39;
      swift_bridgeObjectRetain(a3);

      *a4 = v38;
      a4[1] = v40;
      uint64_t v41 = v43;
      a4[2] = v37;
      a4[3] = v41;
      a4[4] = (uint64_t)a3;
      return;
    }

    swift_errorRelease(v4);
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v19 = sub_100079604(v8, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v19, (uint64_t)v10, type metadata accessor for SKLogger);
  os_log_type_t v21 = static os_log_type_t.error.getter(v20);
  uint64_t v22 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  if (os_log_type_enabled(v23, v21))
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v25 = swift_slowAlloc(64LL, -1LL);
    uint64_t v46 = v25;
    *(_DWORD *)uint64_t v24 = 136446466;
    uint64_t v44 = 91LL;
    unint64_t v45 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(a3);
    v26._uint64_t countAndFlagsBits = v43;
    v26._object = a3;
    String.append(_:)(v26);
    v27._uint64_t countAndFlagsBits = 8285LL;
    v27._object = (void *)0xE200000000000000LL;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(a3);
    unint64_t v28 = v45;
    uint64_t v44 = sub_10007A488(v44, v45, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v24 + 4);
    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v24 + 12) = 2082;
    uint64_t v44 = sub_10007A488(0xD000000000000021LL, 0x80000001002A3630LL, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v24 + 14);
    _os_log_impl((void *)&_mh_execute_header, v23, v21, "%{public}s%{public}s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  sub_100085BC4((uint64_t)v10, type metadata accessor for SKLogger);
  unint64_t v29 = sub_10009BB88();
  uint64_t v30 = swift_allocError(&type metadata for StoreKitInternalError, v29, 0LL, 0LL);
  *uint64_t v31 = 1;
  swift_willThrow(v30, v31, v32, v33, v34, v35, v36);
}

uint64_t sub_100103680(uint64_t a1, __int128 *a2, uint64_t a3)
{
  *(void *)(v3 + 48) = a1;
  *(void *)(v3 + 56) = a2;
  __int128 v4 = *a2;
  uint64_t v5 = (void *)*((void *)a2 + 2);
  *(void *)(v3 + 64) = a3;
  *(void *)(v3 + 72) = v5;
  __int128 v6 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v6;
  sub_10011ABC8(v3 + 16);
  id v7 = v5;
  sub_10011ABC8(v3 + 32);
  uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_10032BD70 + dword_10032BD70);
  uint64_t v8 = (void *)swift_task_alloc(unk_10032BD74);
  *(void *)(v3 + 80) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100103718;
  return v10();
}

uint64_t sub_100103718()
{
  uint64_t v2 = v1[10];
  v1[11] = v3;
  v1[12] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v1[13] = v0;
    __int128 v4 = (void *)v1[9];
    sub_10011ABF0((uint64_t)(v1 + 2));

    sub_10011C378();
  }

  sub_100093420();
  return sub_10009C2D4();
}

uint64_t sub_100103790()
{
  uint64_t v1 = *(void *)(v0 + 96);
  sub_100118490(*(void **)(v0 + 88));
  __int128 v4 = *(void **)(v0 + 88);
  if (v1)
  {

    *(void *)(v0 + 104) = v1;
    uint64_t v5 = *(void **)(v0 + 72);
    sub_10011ABF0(v0 + 16);

    sub_10011C378();
    sub_100093420();
    return swift_task_switch(v6, v7, v8);
  }

  else
  {
    uint64_t v10 = v2;
    uint64_t v11 = v3;
    uint64_t v12 = *(void **)(v0 + 72);
    uint64_t v13 = *(void **)(v0 + 48);

    sub_10011ABF0(v0 + 16);
    sub_10011C378();
    *uint64_t v13 = v10;
    v13[1] = v11;
    id v14 = (uint64_t (*)(void))sub_100093CFC();
    return v14();
  }

uint64_t sub_100103858()
{
  **(void **)(v0 + 64) = *(void *)(v0 + 104);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10010387C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1) {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v6 = 0LL;
  }
  if (a3 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v8 = isa;
  (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v6);
}

void sub_100103904(uint64_t a1, uint64_t a2, void (**a3)(void, void *))
{
  uint64_t v41 = a3;
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  Class v8 = (char *)&v39 - v7;
  id v9 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v11 = v10;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v12 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v12, (uint64_t)v8, type metadata accessor for SKLogger);
  uint64_t v13 = swift_bridgeObjectRetain(v11);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  uint64_t v15 = swift_bridgeObjectRetain_n(v11, 2LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = v14;
  if (os_log_type_enabled(v16, v14))
  {
    uint64_t v18 = swift_slowAlloc(22LL, -1LL);
    uint64_t v19 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v42 = v19;
    uint64_t v43 = 91LL;
    unint64_t v44 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v11);
    uint64_t v39 = v6;
    v20._uint64_t countAndFlagsBits = v40;
    v20._object = v11;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 8285LL;
    v21._object = (void *)0xE200000000000000LL;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v11);
    unint64_t v22 = v44;
    uint64_t v43 = sub_10007A488(v43, v44, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v18 + 4);
    swift_bridgeObjectRelease_n(v11, 2LL);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 2082;
    uint64_t v43 = sub_10007A488(0xD000000000000027LL, 0x80000001002A2770LL, &v42);
    uint64_t v6 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v18 + 14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s%{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_bridgeObjectRelease(v11);
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 3LL);
  }

  sub_100085BC4((uint64_t)v8, type metadata accessor for SKLogger);
  sub_1000E8F9C(v12, (uint64_t)v6, type metadata accessor for SKLogger);
  uint64_t v43 = 0LL;
  unint64_t v44 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  uint64_t v23 = swift_bridgeObjectRelease(v44);
  os_log_type_t v24 = static os_log_type_t.fault.getter(v23);
  uint64_t v25 = swift_bridgeObjectRetain_n(v11, 2LL);
  Swift::String v26 = (os_log_s *)Logger.logObject.getter(v25);
  if (os_log_type_enabled(v26, v24))
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v28 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v27 = 136446466;
    uint64_t v42 = v28;
    uint64_t v43 = 91LL;
    unint64_t v44 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v11);
    v29._uint64_t countAndFlagsBits = v40;
    v29._object = v11;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 8285LL;
    v30._object = (void *)0xE200000000000000LL;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v11);
    unint64_t v31 = v44;
    uint64_t v43 = sub_10007A488(v43, v44, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v27 + 4);
    swift_bridgeObjectRelease_n(v11, 2LL);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v27 + 12) = 2082;
    uint64_t v43 = sub_10007A488(0xD00000000000004FLL, 0x80000001002A27A0LL, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v27 + 14);
    _os_log_impl((void *)&_mh_execute_header, v26, v24, "%{public}s%{public}s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_bridgeObjectRelease(v11);
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 3LL);
  }

  sub_100085BC4((uint64_t)v6, type metadata accessor for SKLogger);
  type metadata accessor for ASDError(0LL);
  uint64_t v33 = v32;
  uint64_t v42 = 909LL;
  unint64_t v34 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
  sub_10007ACCC( (unint64_t *)&qword_100328DE8,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10027950C);
  _BridgedStoredNSError.init(_:userInfo:)(&v42, v34, v33, v35);
  uint64_t v36 = (void *)v43;
  uint64_t v37 = (void *)_convertErrorToNSError(_:)(v43);
  uint64_t v38 = v41;
  v41[2](v41, v37);

  _Block_release(v38);
}

void StoreKitServiceConnection.presentManageSubscriptions(with:reply:)()
{
  uint64_t v1 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v2);
  sub_10011B108();
  __chkstk_darwin(v3);
  sub_10011BEEC();
  id v4 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v5 = sub_100086040((uint64_t)v4);
  sub_10011B968(v5);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v6 = sub_100079604(v1, (uint64_t)qword_10033E1A8);
  sub_10011B8C4(v6, v7, type metadata accessor for SKLogger);
  uint64_t v8 = sub_10008618C();
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  sub_100085EE8(v0);
  uint64_t v10 = (os_log_s *)sub_10009C5AC();
  if (sub_10011B23C(v10))
  {
    uint64_t v11 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v12 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v30 = v12;
    uint64_t v31 = 91LL;
    unint64_t v32 = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v29);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v14 = sub_10008620C(v31, v13, &v30);
    sub_10011B35C(v14);
    sub_10007D974(v0);
    sub_10007B980();
    sub_10011BA90();
    sub_10011B884();
    uint64_t v31 = sub_1000AB050(39LL, v15, v16);
    sub_100086194((uint64_t)&v31, (uint64_t)&v31);
    sub_100086038((void *)&_mh_execute_header, v10, v9, "%{public}s%{public}s", v11);
    sub_100086030(v12, v17, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v12);
    sub_10007B974((uint64_t)v11);
    sub_100085FB4();
  }

  else
  {

    sub_100085E64(v0);
  }

  sub_10011BD18();
  sub_10011B8E8();
  sub_10011B598();
  uint64_t v18 = sub_1000DB3B8();
  os_log_type_t v19 = static os_log_type_t.fault.getter(v18);
  sub_100085EE8(v0);
  Swift::String v20 = (os_log_s *)sub_10009C414();
  if (sub_10011B23C(v20))
  {
    Swift::String v21 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v22 = sub_10007B9FC(64LL);
    *(_DWORD *)Swift::String v21 = 136446466;
    uint64_t v30 = v22;
    uint64_t v31 = 91LL;
    unint64_t v32 = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v29);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v24 = sub_10008620C(v31, v23, &v30);
    sub_10011B314(v24);
    sub_10007D974(v0);
    sub_10007B980();
    sub_100093CA4();
    uint64_t v31 = sub_10011B140( 0xD00000000000004FLL,  (uint64_t)"presentManageSubscriptions(with:reply:) is unsupported on the current platform.");
    sub_100086194((uint64_t)&v31, (uint64_t)&v31);
    sub_100086038((void *)&_mh_execute_header, v20, v19, "%{public}s%{public}s", v21);
    sub_100086030(v22, v25, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v22);
    sub_10007B974((uint64_t)v21);
    sub_100085FB4();
  }

  else
  {

    uint64_t v26 = sub_100085E64(v0);
  }

  sub_1000CB900(v26, type metadata accessor for SKLogger);
  sub_10008622C();
  uint64_t v30 = 909LL;
  sub_100084308((uint64_t)_swiftEmptyArrayStorage);
  sub_10011C380((unint64_t *)&qword_100328DE8, v27, (uint64_t)&unk_10027950C);
  sub_10011B400(v28);
  sub_10011B584();

  sub_100085E98();
}

void sub_1001041E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(void, void *))
{
  uint64_t v43 = a5;
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  id v11 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v13 = v12;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v14 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v14, (uint64_t)v10, type metadata accessor for SKLogger);
  uint64_t v15 = swift_bridgeObjectRetain(v13);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  uint64_t v17 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = v16;
  if (os_log_type_enabled(v18, v16))
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v20 = 136446466;
    uint64_t v44 = v21;
    uint64_t v45 = 91LL;
    unint64_t v46 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v13);
    uint64_t v41 = v8;
    v22._uint64_t countAndFlagsBits = v42;
    v22._object = v13;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = 8285LL;
    v23._object = (void *)0xE200000000000000LL;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v13);
    unint64_t v24 = v46;
    uint64_t v45 = sub_10007A488(v45, v46, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v20 + 4);
    swift_bridgeObjectRelease_n(v13, 2LL);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v20 + 12) = 2082;
    uint64_t v45 = sub_10007A488(0xD00000000000003ALL, 0x80000001002A27F0LL, &v44);
    uint64_t v8 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v20 + 14);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s%{public}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_bridgeObjectRelease(v13);
  }

  else
  {

    swift_bridgeObjectRelease_n(v13, 3LL);
  }

  sub_100085BC4((uint64_t)v10, type metadata accessor for SKLogger);
  sub_1000E8F9C(v14, (uint64_t)v8, type metadata accessor for SKLogger);
  uint64_t v45 = 0LL;
  unint64_t v46 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  uint64_t v25 = swift_bridgeObjectRelease(v46);
  os_log_type_t v26 = static os_log_type_t.fault.getter(v25);
  uint64_t v27 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  if (os_log_type_enabled(v28, v26))
  {
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v29 = 136446466;
    uint64_t v44 = v30;
    uint64_t v45 = 91LL;
    unint64_t v46 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v13);
    v31._uint64_t countAndFlagsBits = v42;
    v31._object = v13;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 8285LL;
    v32._object = (void *)0xE200000000000000LL;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v13);
    unint64_t v33 = v46;
    uint64_t v45 = sub_10007A488(v45, v46, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 4);
    swift_bridgeObjectRelease_n(v13, 2LL);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v29 + 12) = 2082;
    uint64_t v45 = sub_10007A488(0xD000000000000062LL, 0x80000001002A2830LL, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v29 + 14);
    _os_log_impl((void *)&_mh_execute_header, v28, v26, "%{public}s%{public}s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_bridgeObjectRelease(v13);
  }

  else
  {

    swift_bridgeObjectRelease_n(v13, 3LL);
  }

  sub_100085BC4((uint64_t)v8, type metadata accessor for SKLogger);
  type metadata accessor for ASDError(0LL);
  uint64_t v35 = v34;
  uint64_t v44 = 909LL;
  unint64_t v36 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
  sub_10007ACCC( (unint64_t *)&qword_100328DE8,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10027950C);
  _BridgedStoredNSError.init(_:userInfo:)(&v44, v36, v35, v37);
  uint64_t v38 = (void *)v45;
  uint64_t v39 = (void *)_convertErrorToNSError(_:)(v45);
  uint64_t v40 = v43;
  v43[2](v43, v39);

  _Block_release(v40);
}

void StoreKitServiceConnection.presentRefundRequestSheet(forTransactionID:sceneID:reply:)()
{
  uint64_t v1 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v2);
  sub_10011B108();
  __chkstk_darwin(v3);
  sub_10011BEEC();
  id v4 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v5 = sub_100086040((uint64_t)v4);
  sub_10011B968(v5);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v6 = sub_100079604(v1, (uint64_t)qword_10033E1A8);
  sub_10011B8C4(v6, v7, type metadata accessor for SKLogger);
  uint64_t v8 = sub_10008618C();
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  sub_100085EE8(v0);
  uint64_t v10 = (os_log_s *)sub_10009C5AC();
  if (sub_10011B23C(v10))
  {
    id v11 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v12 = sub_10007B9FC(64LL);
    *(_DWORD *)id v11 = 136446466;
    uint64_t v30 = v12;
    uint64_t v31 = 91LL;
    unint64_t v32 = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v29);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v14 = sub_10008620C(v31, v13, &v30);
    sub_10011B35C(v14);
    sub_10007D974(v0);
    sub_10007B980();
    sub_10011BA90();
    sub_10011B884();
    uint64_t v31 = sub_1000AB050(58LL, v15, v16);
    sub_100086194((uint64_t)&v31, (uint64_t)&v31);
    sub_100086038((void *)&_mh_execute_header, v10, v9, "%{public}s%{public}s", v11);
    sub_100086030(v12, v17, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v12);
    sub_10007B974((uint64_t)v11);
    sub_100085FB4();
  }

  else
  {

    sub_100085E64(v0);
  }

  sub_10011BD18();
  sub_10011B8E8();
  sub_10011B598();
  uint64_t v18 = sub_1000DB3B8();
  os_log_type_t v19 = static os_log_type_t.fault.getter(v18);
  sub_100085EE8(v0);
  uint64_t v20 = (os_log_s *)sub_10009C414();
  if (sub_10011B23C(v20))
  {
    uint64_t v21 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v22 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v21 = 136446466;
    uint64_t v30 = v22;
    uint64_t v31 = 91LL;
    unint64_t v32 = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v29);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v24 = sub_10008620C(v31, v23, &v30);
    sub_10011B314(v24);
    sub_10007D974(v0);
    sub_10007B980();
    sub_100093CA4();
    uint64_t v31 = sub_10011B140( 0xD000000000000062LL,  (uint64_t)"presentRefundRequestSheet(forTransactionID:sceneID:reply:) is unsupported on the current platform.");
    sub_100086194((uint64_t)&v31, (uint64_t)&v31);
    sub_100086038((void *)&_mh_execute_header, v20, v19, "%{public}s%{public}s", v21);
    sub_100086030(v22, v25, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v22);
    sub_10007B974((uint64_t)v21);
    sub_100085FB4();
  }

  else
  {

    uint64_t v26 = sub_100085E64(v0);
  }

  sub_1000CB900(v26, type metadata accessor for SKLogger);
  sub_10008622C();
  uint64_t v30 = 909LL;
  sub_100084308((uint64_t)_swiftEmptyArrayStorage);
  sub_10011C380((unint64_t *)&qword_100328DE8, v27, (uint64_t)&unk_10027950C);
  sub_10011B400(v28);
  sub_10011B584();

  sub_100085E98();
}

void sub_100104B58(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void *))
{
  uint64_t v42 = a4;
  uint64_t v4 = type metadata accessor for SKLogger(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v40 - v8;
  id v10 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v12 = v11;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v13 = sub_100079604(v4, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v13, (uint64_t)v9, type metadata accessor for SKLogger);
  uint64_t v14 = swift_bridgeObjectRetain(v12);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  uint64_t v16 = swift_bridgeObjectRetain_n(v12, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = v15;
  if (os_log_type_enabled(v17, v15))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v43 = v20;
    uint64_t v44 = 91LL;
    unint64_t v45 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v12);
    uint64_t v40 = v7;
    v21._uint64_t countAndFlagsBits = v41;
    v21._object = v12;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = 8285LL;
    v22._object = (void *)0xE200000000000000LL;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v12);
    unint64_t v23 = v45;
    uint64_t v44 = sub_10007A488(v44, v45, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v19 + 4);
    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v19 + 12) = 2082;
    uint64_t v44 = sub_10007A488(0xD00000000000002ELL, 0x80000001002A28A0LL, &v43);
    uint64_t v7 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v19 + 14);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s%{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_bridgeObjectRelease(v12);
  }

  else
  {

    swift_bridgeObjectRelease_n(v12, 3LL);
  }

  sub_100085BC4((uint64_t)v9, type metadata accessor for SKLogger);
  sub_1000E8F9C(v13, (uint64_t)v7, type metadata accessor for SKLogger);
  uint64_t v44 = 0LL;
  unint64_t v45 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  uint64_t v24 = swift_bridgeObjectRelease(v45);
  os_log_type_t v25 = static os_log_type_t.fault.getter(v24);
  uint64_t v26 = swift_bridgeObjectRetain_n(v12, 2LL);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  if (os_log_type_enabled(v27, v25))
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v43 = v29;
    uint64_t v44 = 91LL;
    unint64_t v45 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v12);
    v30._uint64_t countAndFlagsBits = v41;
    v30._object = v12;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 8285LL;
    v31._object = (void *)0xE200000000000000LL;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v12);
    unint64_t v32 = v45;
    uint64_t v44 = sub_10007A488(v44, v45, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v28 + 4);
    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v44 = sub_10007A488(0xD000000000000056LL, 0x80000001002A28D0LL, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v28 + 14);
    _os_log_impl((void *)&_mh_execute_header, v27, v25, "%{public}s%{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_bridgeObjectRelease(v12);
  }

  else
  {

    swift_bridgeObjectRelease_n(v12, 3LL);
  }

  sub_100085BC4((uint64_t)v7, type metadata accessor for SKLogger);
  type metadata accessor for ASDError(0LL);
  uint64_t v34 = v33;
  uint64_t v43 = 909LL;
  unint64_t v35 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
  sub_10007ACCC( (unint64_t *)&qword_100328DE8,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10027950C);
  _BridgedStoredNSError.init(_:userInfo:)(&v43, v35, v34, v36);
  uint64_t v37 = (void *)v44;
  uint64_t v38 = (void *)_convertErrorToNSError(_:)(v44);
  uint64_t v39 = v42;
  v42[2](v42, v38);

  _Block_release(v39);
}

void StoreKitServiceConnection.presentCodeRedemptionSheet(withSceneID:reply:)()
{
  uint64_t v1 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v2);
  sub_10011B108();
  __chkstk_darwin(v3);
  sub_10011BEEC();
  id v4 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v5 = sub_100086040((uint64_t)v4);
  sub_10011B968(v5);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v6 = sub_100079604(v1, (uint64_t)qword_10033E1A8);
  sub_10011B8C4(v6, v7, type metadata accessor for SKLogger);
  uint64_t v8 = sub_10008618C();
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  sub_100085EE8(v0);
  id v10 = (os_log_s *)sub_10009C5AC();
  if (sub_10011B23C(v10))
  {
    id v11 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v12 = sub_10007B9FC(64LL);
    *(_DWORD *)id v11 = 136446466;
    uint64_t v30 = v12;
    uint64_t v31 = 91LL;
    unint64_t v32 = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v29);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v14 = sub_10008620C(v31, v13, &v30);
    sub_10011B35C(v14);
    sub_10007D974(v0);
    sub_10007B980();
    sub_10011BA90();
    sub_10011B884();
    uint64_t v31 = sub_1000AB050(46LL, v15, v16);
    sub_100086194((uint64_t)&v31, (uint64_t)&v31);
    sub_100086038((void *)&_mh_execute_header, v10, v9, "%{public}s%{public}s", v11);
    sub_100086030(v12, v17, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v12);
    sub_10007B974((uint64_t)v11);
    sub_100085FB4();
  }

  else
  {

    sub_100085E64(v0);
  }

  sub_10011BD18();
  sub_10011B8E8();
  sub_10011B598();
  uint64_t v18 = sub_1000DB3B8();
  os_log_type_t v19 = static os_log_type_t.fault.getter(v18);
  sub_100085EE8(v0);
  uint64_t v20 = (os_log_s *)sub_10009C414();
  if (sub_10011B23C(v20))
  {
    Swift::String v21 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v22 = sub_10007B9FC(64LL);
    *(_DWORD *)Swift::String v21 = 136446466;
    uint64_t v30 = v22;
    uint64_t v31 = 91LL;
    unint64_t v32 = 0xE100000000000000LL;
    sub_10008618C();
    sub_10009C32C(v29);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v24 = sub_10008620C(v31, v23, &v30);
    sub_10011B314(v24);
    sub_10007D974(v0);
    sub_10007B980();
    sub_100093CA4();
    uint64_t v31 = sub_10011B140( 0xD000000000000056LL,  (uint64_t)"presentCodeRedemptionSheet(withSceneID:reply:) is unsupported on the current platform.");
    sub_100086194((uint64_t)&v31, (uint64_t)&v31);
    sub_100086038((void *)&_mh_execute_header, v20, v19, "%{public}s%{public}s", v21);
    sub_100086030(v22, v25, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v22);
    sub_10007B974((uint64_t)v21);
    sub_100085FB4();
  }

  else
  {

    uint64_t v26 = sub_100085E64(v0);
  }

  sub_1000CB900(v26, type metadata accessor for SKLogger);
  sub_10008622C();
  uint64_t v30 = 909LL;
  sub_100084308((uint64_t)_swiftEmptyArrayStorage);
  sub_10011C380((unint64_t *)&qword_100328DE8, v27, (uint64_t)&unk_10027950C);
  sub_10011B400(v28);
  sub_10011B584();

  sub_100085E98();
}

void sub_100105438(void *a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  id v130 = a1;
  id v131 = a2;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v125 = (uint64_t)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = type metadata accessor for AcknowledgeMessageTask(0LL);
  uint64_t v119 = *(void *)(v116 - 8);
  uint64_t v7 = __chkstk_darwin(v116);
  uint64_t v120 = v8;
  uint64_t v121 = (uint64_t)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v122 = (uint64_t)&v111 - v9;
  uint64_t v10 = sub_10007B1FC(&qword_10032A3D8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v123 = (uint64_t)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v126 = (uint64_t *)((char *)&v111 - v14);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v111 - v15;
  uint64_t v127 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v115 = *(void *)(v127 - 8);
  uint64_t v17 = __chkstk_darwin(v127);
  uint64_t v118 = (uint64_t)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  Swift::String v21 = (uint64_t *)((char *)&v111 - v20);
  uint64_t v117 = v22;
  __chkstk_darwin(v19);
  uint64_t v132 = (uint64_t)&v111 - v23;
  uint64_t v24 = type metadata accessor for SKLogger(0LL);
  uint64_t v112 = *(void *)(v24 - 8);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v114 = (uint64_t)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v133 = (uint64_t)&v111 - v28;
  uint64_t v113 = v29;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v111 - v30;
  uint64_t v32 = swift_allocObject(&unk_1002EE7C8, 24LL, 7LL);
  *(void *)(v32 + 16) = a4;
  uint64_t v129 = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v33 = sub_100079604(v24, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v33, (uint64_t)v31, type metadata accessor for SKLogger);
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  os_log_type_t v36 = v35;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v35);
  BOOL v38 = os_log_type_enabled(v37, v36);
  uint64_t v128 = v32;
  if (v38)
  {
    uint64_t v39 = swift_slowAlloc(22LL, -1LL);
    uint64_t v40 = swift_slowAlloc(64LL, -1LL);
    uint64_t v135 = v40;
    *(_DWORD *)uint64_t v39 = 136446466;
    os_log_type_t v124 = v16;
    uint64_t v134 = sub_10007A488(0LL, 0xE000000000000000LL, &v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v39 + 4);
    *(_WORD *)(v39 + 12) = 2082;
    uint64_t v134 = sub_10007A488(0xD00000000000001FLL, 0x80000001002A2930LL, &v135);
    uint64_t v16 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v39 + 14);
    _os_log_impl((void *)&_mh_execute_header, v37, v36, "%{public}s%{public}s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v31, type metadata accessor for SKLogger);
  if (qword_100328B20 != -1) {
    swift_once(&qword_100328B20, sub_1000EE934);
  }
  uint64_t v41 = sub_100079604(v24, (uint64_t)qword_10033E178);
  sub_1000E8F9C(v41, v133, type metadata accessor for SKLogger);
  static AcknowledgeMessageRequest.decode(encodedRequest:)((uint64_t)v130, (uint64_t)v131, v21);
  sub_1000E9158((uint64_t)v21, v132, type metadata accessor for AcknowledgeMessageRequest);
  id v42 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v42)
  {
    id v43 = v42;
    unsigned __int8 v44 = objc_msgSend(v42, "sk_allowClientOverride");
    uint64_t v45 = v127;
    if ((v44 & 1) != 0)
    {
      sub_1000E9220(v132 + *(int *)(v127 + 28), (uint64_t)v16, &qword_10032A3D8);
    }

    else
    {
      uint64_t v59 = type metadata accessor for ClientOverride(0LL);
      sub_10007D0AC((uint64_t)v16, 1LL, 1LL, v59);
    }

    id v60 = v126;
    sub_1000E9220((uint64_t)v16, (uint64_t)v126, &qword_10032A3D8);
    uint64_t v61 = type metadata accessor for ClientOverride(0LL);
    if (sub_10007D824((uint64_t)v60, 1LL, v61) == 1)
    {
      sub_100085298((uint64_t)v60, &qword_10032A3D8);
LABEL_16:
      type metadata accessor for Client(0LL);
      uint64_t v63 = v123;
      sub_1000E9220((uint64_t)v16, v123, &qword_10032A3D8);
      sub_1000E1A28(v43, v63);
LABEL_25:
      id v131 = v43;
      os_log_type_t v124 = v16;
      id v91 = v64;
      id v130 = v91;
      uint64_t v92 = v132;
      uint64_t v93 = v122;
      sub_1000E8F9C(v132, v122, type metadata accessor for AcknowledgeMessageRequest);
      uint64_t v94 = v116;
      *(void *)(v93 + *(int *)(v116 + 20)) = v91;
      sub_1000E8F9C(v41, v93 + *(int *)(v94 + 24), type metadata accessor for SKLogger);
      uint64_t v95 = type metadata accessor for TaskPriority(0LL);
      sub_10007D0AC(v125, 1LL, 1LL, v95);
      uint64_t v96 = v121;
      sub_1000E8F9C(v93, v121, type metadata accessor for AcknowledgeMessageTask);
      uint64_t v97 = v114;
      sub_1000E8F9C(v133, v114, type metadata accessor for SKLogger);
      uint64_t v98 = v118;
      sub_1000E8F9C(v92, v118, type metadata accessor for AcknowledgeMessageRequest);
      uint64_t v99 = *(unsigned __int8 *)(v119 + 80);
      uint64_t v100 = (v99 + 32) & ~v99;
      unint64_t v101 = (v120 + v100 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v102 = *(unsigned __int8 *)(v112 + 80);
      uint64_t v103 = (v102 + v101 + 16) & ~v102;
      uint64_t v104 = *(unsigned __int8 *)(v115 + 80);
      uint64_t v105 = (v113 + v104 + v103) & ~v104;
      uint64_t v106 = swift_allocObject(&unk_1002EE7F0, v105 + v117, v99 | v102 | v104 | 7);
      *(void *)(v106 + 16) = 0LL;
      *(void *)(v106 + 24) = 0LL;
      sub_1000E9158(v96, v106 + v100, type metadata accessor for AcknowledgeMessageTask);
      unint64_t v107 = (void *)(v106 + v101);
      uint64_t v81 = v128;
      *unint64_t v107 = sub_100085E1C;
      v107[1] = v81;
      sub_1000E9158(v97, v106 + v103, type metadata accessor for SKLogger);
      sub_1000E9158(v98, v106 + v105, type metadata accessor for AcknowledgeMessageRequest);
      id v108 = v130;
      swift_retain(v81);
      sub_1000F9480(v125, (uint64_t)&unk_10032BC88, v106);
      uint64_t v110 = v109;

      swift_release(v110);
      sub_100085BC4(v93, type metadata accessor for AcknowledgeMessageTask);
      sub_100085298((uint64_t)v124, &qword_10032A3D8);
      sub_100085BC4(v132, type metadata accessor for AcknowledgeMessageRequest);
      uint64_t v80 = v129;
      goto LABEL_26;
    }

    unint64_t v62 = v60[1];
    sub_1001198EC(*v60, v62);
    sub_100085BC4((uint64_t)v60, type metadata accessor for ClientOverride);
    if (v62 >> 60 == 15) {
      goto LABEL_16;
    }
    id v90 = objc_allocWithZone((Class)type metadata accessor for Client(0LL));
    sub_1000E38A0();
    if (v64) {
      goto LABEL_25;
    }
    uint64_t v65 = (uint64_t *)(v132 + *(int *)(v45 + 32));
    uint64_t v67 = *v65;
    id v66 = (void *)v65[1];
    uint64_t v68 = swift_bridgeObjectRetain(v66);
    os_log_type_t v69 = static os_log_type_t.error.getter(v68);
    uint64_t v70 = swift_bridgeObjectRetain_n(v66, 2LL);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = v69;
    if (os_log_type_enabled(v71, v69))
    {
      uint64_t v73 = swift_slowAlloc(22LL, -1LL);
      uint64_t v74 = swift_slowAlloc(64LL, -1LL);
      id v131 = v43;
      uint64_t v75 = v74;
      *(_DWORD *)uint64_t v73 = 136446466;
      uint64_t v134 = v74;
      uint64_t v135 = 91LL;
      v136[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v66);
      v76._uint64_t countAndFlagsBits = v67;
      v76._object = v66;
      String.append(_:)(v76);
      v77._uint64_t countAndFlagsBits = 8285LL;
      v77._object = (void *)0xE200000000000000LL;
      String.append(_:)(v77);
      swift_bridgeObjectRelease(v66);
      unint64_t v78 = v136[0];
      uint64_t v135 = sub_10007A488(v135, v136[0], &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v73 + 4);
      swift_bridgeObjectRelease_n(v66, 2LL);
      swift_bridgeObjectRelease(v78);
      *(_WORD *)(v73 + 12) = 2082;
      uint64_t v135 = sub_10007A488(0xD00000000000002BLL, 0x80000001002A29C0LL, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v73 + 14);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "%{public}s%{public}s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v79 = v75;
      id v43 = v131;
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_bridgeObjectRelease(v66);
    }

    else
    {

      swift_bridgeObjectRelease_n(v66, 3LL);
    }

    uint64_t v81 = v128;
    uint64_t v80 = v129;
    unint64_t v86 = sub_10009BB88();
    uint64_t v87 = swift_allocError(&type metadata for StoreKitInternalError, v86, 0LL, 0LL);
    *uint64_t v88 = 1;
    uint64_t v89 = (void *)_convertErrorToNSError(_:)(v87);
    ((void (**)(void, void *))v80)[2](v80, v89);

    swift_errorRelease(v87);
    sub_100085298((uint64_t)v16, &qword_10032A3D8);
  }

  else
  {
    unint64_t v46 = (uint64_t *)(v132 + *(int *)(v127 + 32));
    uint64_t v48 = *v46;
    uint64_t v47 = (void *)v46[1];
    uint64_t v49 = swift_bridgeObjectRetain(v47);
    os_log_type_t v50 = static os_log_type_t.error.getter(v49);
    uint64_t v51 = swift_bridgeObjectRetain_n(v47, 2LL);
    id v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = v50;
    if (os_log_type_enabled(v52, v50))
    {
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      uint64_t v55 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v54 = 136446466;
      uint64_t v134 = v55;
      uint64_t v135 = 91LL;
      v136[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v47);
      v56._uint64_t countAndFlagsBits = v48;
      v56._object = v47;
      String.append(_:)(v56);
      v57._uint64_t countAndFlagsBits = 8285LL;
      v57._object = (void *)0xE200000000000000LL;
      String.append(_:)(v57);
      swift_bridgeObjectRelease(v47);
      unint64_t v58 = v136[0];
      uint64_t v135 = sub_10007A488(v135, v136[0], &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v54 + 4);
      swift_bridgeObjectRelease_n(v47, 2LL);
      swift_bridgeObjectRelease(v58);
      *(_WORD *)(v54 + 12) = 2082;
      uint64_t v135 = sub_10007A488(0xD000000000000033LL, 0x80000001002A2980LL, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v54 + 14);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%{public}s%{public}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_bridgeObjectRelease(v47);
    }

    else
    {

      swift_bridgeObjectRelease_n(v47, 3LL);
    }

    uint64_t v81 = v128;
    uint64_t v80 = v129;
    unint64_t v82 = sub_10009BB88();
    uint64_t v83 = swift_allocError(&type metadata for StoreKitInternalError, v82, 0LL, 0LL);
    *unint64_t v84 = 1;
    uint64_t v85 = (void *)_convertErrorToNSError(_:)(v83);
    ((void (**)(void, void *))v80)[2](v80, v85);

    swift_errorRelease(v83);
  }

  sub_100085BC4(v132, type metadata accessor for AcknowledgeMessageRequest);
LABEL_26:
  sub_100085BC4(v133, type metadata accessor for SKLogger);
  swift_release(v81);
  _Block_release(v80);
}

void StoreKitServiceConnection.acknowledgeMessage(with:reply:)()
{
  uint64_t v141 = v2;
  uint64_t v142 = v3;
  id v144 = v4;
  id v145 = v5;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v6);
  uint64_t v8 = sub_10011BAB8(v7, v127);
  uint64_t v131 = type metadata accessor for AcknowledgeMessageTask(v8);
  uint64_t v134 = *(void *)(v131 - 8);
  sub_10011B904();
  __chkstk_darwin(v9);
  sub_10011B254();
  uint64_t v135 = v11;
  uint64_t v136 = v10;
  sub_10011B8F8();
  __chkstk_darwin(v12);
  sub_1000E9670();
  uint64_t v137 = v13;
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v14);
  uint64_t v138 = (uint64_t)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v16);
  sub_1000DB3F4();
  uint64_t v146 = (char *)v17;
  sub_100086200();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v127 - v19;
  uint64_t v140 = sub_10011BD80();
  uint64_t v130 = *(void *)(v140 - 8);
  sub_10011B904();
  __chkstk_darwin(v21);
  sub_10011B254();
  uint64_t v133 = v22;
  sub_10011B8F8();
  __chkstk_darwin(v23);
  sub_1000E9670();
  uint64_t v143 = v24;
  uint64_t v132 = v25;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v127 - v27;
  uint64_t v29 = sub_100086224();
  uint64_t v127 = *(void *)(v29 - 8);
  sub_10011B904();
  __chkstk_darwin(v30);
  sub_10011B254();
  uint64_t v129 = v31;
  sub_10011B8F8();
  __chkstk_darwin(v32);
  sub_10011BEFC();
  uint64_t v128 = v33;
  __chkstk_darwin(v34);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v35 = sub_100079604(v29, (uint64_t)qword_10033E1A8);
  sub_10011B040(v35, v36, type metadata accessor for SKLogger);
  static os_log_type_t.default.getter(v37);
  BOOL v38 = (os_log_s *)sub_10011BA40();
  os_log_type_t v39 = v0;
  BOOL v40 = sub_10009396C(v38);
  uint64_t v147 = v1;
  if (v40)
  {
    uint64_t v41 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v42 = sub_10007B9FC(64LL);
    uint64_t v149 = v42;
    *(_DWORD *)uint64_t v41 = 136446466;
    uint64_t v44 = sub_10007BA24(v42, v43, &v149);
    sub_10011C264(v44);
    uint64_t v45 = v20;
    unint64_t v46 = v28;
    uint64_t v48 = v47 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, v47 + 8, v41 + 4);
    sub_10011C11C();
    uint64_t v49 = sub_1000AB050(31LL, 0x80000001002A2930LL, &v149);
    uint64_t v50 = sub_10011BFA8(v49);
    uint64_t v51 = v48;
    uint64_t v28 = v46;
    uint64_t v20 = v45;
    LOBYTE(v1) = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v51, v41 + 14);
    sub_100086038((void *)&_mh_execute_header, v38, v39, "%{public}s%{public}s", v41);
    sub_100086030(v42, v52, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v42);
    sub_10007B974((uint64_t)v41);
  }

  sub_10011B354(v53, type metadata accessor for SKLogger);
  uint64_t v54 = (uint64_t)v146;
  uint64_t v55 = v143;
  if (qword_100328B20 != -1) {
    swift_once(&qword_100328B20, sub_1000EE934);
  }
  uint64_t v56 = sub_100079604(v29, (uint64_t)qword_10033E178);
  sub_10011BD10(v56, v57, type metadata accessor for SKLogger);
  static AcknowledgeMessageRequest.decode(encodedRequest:)((uint64_t)v144, (uint64_t)v145, v55);
  sub_1000E9158((uint64_t)v55, (uint64_t)v28, type metadata accessor for AcknowledgeMessageRequest);
  id v58 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v58)
  {
    uint64_t v59 = v58;
    if (objc_msgSend(v58, "sk_allowClientOverride"))
    {
      sub_1000E9220((uint64_t)&v28[*(int *)(v140 + 28)], (uint64_t)v20, &qword_10032A3D8);
    }

    else
    {
      uint64_t v72 = sub_1000E953C();
      sub_1000875FC((uint64_t)v20, v73, v74, v72);
    }

    sub_1000E9220((uint64_t)v20, v54, &qword_10032A3D8);
    uint64_t v75 = sub_1000E953C();
    uint64_t v76 = sub_10007D824(v54, 1LL, v75);
    if ((_DWORD)v76 == 1)
    {
      sub_10011BF58(v76, &qword_10032A3D8);
LABEL_16:
      sub_1000E66E0();
      uint64_t v81 = v138;
      sub_1000E9220((uint64_t)v20, v138, &qword_10032A3D8);
      sub_1000E1A28(v59, v81);
LABEL_26:
      id v145 = v59;
      id v101 = v82;
      id v144 = v101;
      uint64_t v102 = v137;
      sub_1000E8F9C((uint64_t)v28, v137, type metadata accessor for AcknowledgeMessageRequest);
      uint64_t v103 = v131;
      *(void *)(v102 + *(int *)(v131 + 20)) = v101;
      sub_1000E8F9C(v56, v102 + *(int *)(v103 + 24), type metadata accessor for SKLogger);
      uint64_t v104 = sub_1000AAD2C();
      sub_1000875FC(v139, v105, v106, v104);
      sub_10011B040(v102, v107, type metadata accessor for AcknowledgeMessageTask);
      uint64_t v108 = v129;
      sub_1000E8F9C(v147, v129, type metadata accessor for SKLogger);
      uint64_t v109 = v133;
      sub_10011C1AC((uint64_t)v28);
      sub_10011C0DC();
      uint64_t v146 = v28;
      unint64_t v112 = (v135 + (v111 & ~v110) + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v113 = *(unsigned __int8 *)(v127 + 80);
      uint64_t v114 = (v113 + v112 + 16) & ~v113;
      uint64_t v115 = *(unsigned __int8 *)(v130 + 80);
      uint64_t v116 = (v128 + v115 + v114) & ~v115;
      uint64_t v117 = swift_allocObject(&unk_1002EE368, v116 + v132, v110 | v113 | v115 | 7);
      uint64_t v118 = sub_10011C2EC(v117);
      sub_1000E9158(v118, v119, type metadata accessor for AcknowledgeMessageTask);
      uint64_t v120 = (void *)(v117 + v112);
      uint64_t v121 = v142;
      *uint64_t v120 = v141;
      v120[1] = v121;
      uint64_t v122 = v108;
      uint64_t v99 = v147;
      sub_1000E9158(v122, v117 + v114, type metadata accessor for SKLogger);
      sub_1000E9158(v109, v117 + v116, type metadata accessor for AcknowledgeMessageRequest);
      id v123 = v144;
      swift_retain(v121);
      sub_1000F9480(v139, (uint64_t)&unk_10032BB50, v117);
      uint64_t v125 = v124;

      swift_release(v125);
      sub_100085BC4(v102, type metadata accessor for AcknowledgeMessageTask);
      sub_10011C0D4(v126, &qword_10032A3D8);
      sub_100085BC4((uint64_t)v146, type metadata accessor for AcknowledgeMessageRequest);
      goto LABEL_24;
    }

    unint64_t v77 = *(void *)(v54 + 8);
    uint64_t v78 = sub_10009C714();
    uint64_t v80 = sub_1001198EC(v78, v79);
    sub_10011BD24(v80, type metadata accessor for ClientOverride);
    if (v77 >> 60 == 15) {
      goto LABEL_16;
    }
    id v100 = objc_allocWithZone((Class)sub_1000E66E0());
    sub_10009C714();
    sub_1000E38A0();
    if (v82) {
      goto LABEL_26;
    }
    uint64_t v83 = v59;
    uint64_t v84 = *(void *)&v28[*(int *)(v140 + 32) + 8];
    uint64_t v85 = sub_100085FEC();
    static os_log_type_t.error.getter(v85);
    sub_100085EE8(v84);
    unint64_t v86 = (os_log_s *)sub_100093B00();
    if (sub_1000E96FC(v86))
    {
      uint64_t v87 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v88 = sub_10007B9FC(64LL);
      id v145 = v20;
      uint64_t v146 = v28;
      uint64_t v89 = v88;
      *(_DWORD *)uint64_t v87 = 136446466;
      uint64_t v148 = v88;
      uint64_t v149 = 91LL;
      v150[0] = 0xE100000000000000LL;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v149 = sub_10008620C(v149, v90, &v148);
      sub_1000E98A0((uint64_t)&v149, (uint64_t)v150);
      sub_10007D974(v84);
      sub_10007B980();
      sub_10011BE58();
      uint64_t v149 = sub_10011B048(v91 + 12, (uint64_t)"Could not get client to acknowledge message");
      sub_100086194((uint64_t)&v149, (uint64_t)v150);
      sub_100086038((void *)&_mh_execute_header, v86, (os_log_type_t)v1, "%{public}s%{public}s", v87);
      sub_100086030(v89, v92, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v89);
      sub_10007B974((uint64_t)v87);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v84);
    }

    unint64_t v96 = sub_10009BB88();
    sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v96);
    sub_10011B9EC(v97, 1);
    sub_10011B038();

    sub_10011C0D4(v98, &qword_10032A3D8);
  }

  else
  {
    uint64_t v60 = *(void *)&v28[*(int *)(v140 + 32) + 8];
    uint64_t v61 = sub_100085FEC();
    static os_log_type_t.error.getter(v61);
    sub_100085EE8(v60);
    unint64_t v62 = (os_log_s *)sub_100093B00();
    if (sub_1000E96FC(v62))
    {
      uint64_t v63 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v64 = sub_10007B9FC(64LL);
      uint64_t v146 = v28;
      uint64_t v65 = v64;
      sub_10011B8A4(4.8752e-34);
      uint64_t v148 = v66;
      uint64_t v149 = v67;
      v150[0] = v68;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v149 = sub_10008620C(v149, v69, &v148);
      sub_1000E98A0((uint64_t)&v149, (uint64_t)v150);
      sub_10007D974(v60);
      sub_10007B980();
      sub_10011BE58();
      uint64_t v149 = sub_10011B048(v70 + 20, (uint64_t)"Could not get XPC connection to acknowledge message");
      sub_100086194((uint64_t)&v149, (uint64_t)v150);
      sub_100086038((void *)&_mh_execute_header, v62, (os_log_type_t)v1, "%{public}s%{public}s", v63);
      sub_100086030(v65, v71, (uint64_t)(v20 + 8));
      sub_10007B974(v65);
      sub_10007B974((uint64_t)v63);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v60);
    }

    unint64_t v93 = sub_10009BB88();
    sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v93);
    sub_10011B9EC(v94, 1);
    uint64_t v95 = sub_10011B038();
  }

  sub_1000CB900(v95, type metadata accessor for AcknowledgeMessageRequest);
  uint64_t v99 = v147;
LABEL_24:
  sub_100085BC4(v99, type metadata accessor for SKLogger);
  sub_100085E98();
}

uint64_t sub_100106DE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[8] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[9] = v10;
  v8[10] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)swift_task_alloc(dword_10032A904);
  v8[11] = v11;
  *uint64_t v11 = v8;
  v11[1] = sub_100106E60;
  return sub_1000B5ADC();
}

uint64_t sub_100106E60()
{
  *(void *)(v1 + 96) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100106EAC()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100106EDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  uint64_t v30 = *(void *)(v26 + 72);
  uint64_t v29 = *(void *)(v26 + 80);
  uint64_t v32 = *(void *)(v26 + 56);
  uint64_t v31 = *(void *)(v26 + 64);
  uint64_t v33 = *(void *)(v26 + 48);
  a14 = 0LL;
  a15 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(a15);
  a14 = 0xD00000000000001FLL;
  a15 = 0x80000001002A3400LL;
  uint64_t v34 = (void *)sub_100093C54();
  sub_100086040((uint64_t)[v34 description]);

  sub_10011C1EC();
  sub_10009C494();

  uint64_t v35 = a15;
  uint64_t v58 = a14;
  uint64_t v36 = sub_10011BD80();
  uint64_t v37 = (uint64_t *)(v32 + *(int *)(v36 + 32));
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  static os_log_type_t.error.getter(v36);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v33, v31);
  sub_100085EE8(v39);
  sub_100085EE8(v35);
  BOOL v40 = (void *)sub_100093C38();
  if (sub_10011B3E0((os_log_s *)v40))
  {
    uint64_t v55 = *(void *)(v26 + 72);
    uint64_t v56 = *(void *)(v26 + 64);
    uint64_t v57 = *(void *)(v26 + 80);
    uint64_t v41 = sub_10007B9FC(22LL);
    uint64_t v42 = (void *)sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v41 = 136446466;
    a13 = v42;
    a14 = 91LL;
    a15 = 0xE100000000000000LL;
    sub_1000AABA0();
    sub_1000AAB84(v38);
    sub_100085F14();
    sub_1000AABA8();
    *(void *)(v26 + 16) = sub_10008620C(a14, v43, (uint64_t *)&a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v26 + 16, v26 + 24, v41 + 4);
    sub_10007B980();
    sub_10007D974(v39);
    *(_WORD *)(v41 + 12) = 2082;
    sub_100085FEC();
    *(void *)(v26 + 24) = sub_1000B20F4(v58, v44, (uint64_t *)&a13);
    sub_100086194(v26 + 24, v26 + 32);
    sub_100085E64(v35);
    sub_10011C1A0();
    sub_100086038(v45, v46, v47, v48, (uint8_t *)v41);
    sub_100086030((uint64_t)v42, v49, (uint64_t)&type metadata for Any + 8);
    sub_10007B974((uint64_t)v42);
    sub_10007B974(v41);

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
  }

  else
  {
    uint64_t v51 = *(void *)(v26 + 72);
    uint64_t v50 = *(void *)(v26 + 80);
    uint64_t v42 = *(void **)(v26 + 64);
    sub_10007D974(v39);
    sub_10007D974(v35);

    (*(void (**)(uint64_t, void *))(v51 + 8))(v50, v42);
  }

  sub_100085EF0();
  uint64_t v52 = (void *)sub_100093C54();
  id v53 = sub_10011B058(v52, "toASDErrorWithMetadata:");
  sub_100093C5C();
  sub_10011BFFC();

  sub_10011B038();
  swift_task_dealloc(*(void *)(v26 + 80));
  return sub_1000AA2C4(*(uint64_t (**)(void))(v26 + 8));
}

void sub_10010717C(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v44[-v7];
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v9 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v9, (uint64_t)v8, type metadata accessor for SKLogger);
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  os_log_type_t v12 = v11;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(64LL, -1LL);
    uint64_t v46 = v16;
    *(_DWORD *)uint64_t v15 = 136446466;
    uint64_t v45 = sub_10007A488(0LL, 0xE000000000000000LL, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v15 + 4);
    *(_WORD *)(v15 + 12) = 2082;
    uint64_t v45 = sub_10007A488(0xD000000000000017LL, 0x80000001002A29F0LL, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v15 + 14);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s%{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v8, type metadata accessor for SKLogger);
  id v17 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v17)
  {
    uint64_t v18 = v17;
    if (objc_msgSend(v17, "sk_allowClientOverride"))
    {
      uint64_t v19 = type metadata accessor for Client(0LL);
      uint64_t v20 = v19;
      if (qword_100328B10 != -1) {
        uint64_t v19 = swift_once(&qword_100328B10, sub_1000E686C);
      }
      __chkstk_darwin(v19);
      *(void *)&v44[-16] = v20;
      sub_1000F9F6C((void *(*)(uint64_t *__return_ptr))sub_10011AF84, (uint64_t)&v44[-32], v21);
      uint64_t v23 = v22;
      uint64_t v24 = sub_1000F9630(v22);
      swift_bridgeObjectRelease(v23);
      uint64_t v25 = type metadata accessor for PropertyListEncoder(0LL);
      swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      uint64_t v26 = PropertyListEncoder.init()();
      uint64_t v46 = v24;
      uint64_t v27 = sub_10007B1FC(&qword_10032BB58);
      unint64_t v28 = sub_100119918();
      uint64_t v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v46, v27, v28);
      unint64_t v31 = v30;
      swift_bridgeObjectRelease(v24);
      sub_1000881FC(v29, v31);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      ((void (**)(void, Class, void))a2)[2](a2, isa, 0LL);

      sub_10007F054(v29, v31);
      sub_10007F054(v29, v31);
      swift_release(v26);
      goto LABEL_14;
    }
  }

  sub_1000E8F9C(v9, (uint64_t)v6, type metadata accessor for SKLogger);
  uint64_t v33 = static os_log_type_t.error.getter(v32);
  os_log_type_t v34 = v33;
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v36 = v34;
  if (os_log_type_enabled(v35, v34))
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v46 = v38;
    *(_DWORD *)uint64_t v37 = 136446466;
    uint64_t v45 = sub_10007A488(0LL, 0xE000000000000000LL, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v37 + 4);
    *(_WORD *)(v37 + 12) = 2082;
    uint64_t v45 = sub_10007A488(0xD000000000000030LL, 0x80000001002A2A10LL, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v37 + 14);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s%{public}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v6, type metadata accessor for SKLogger);
  unint64_t v39 = sub_10009BB88();
  uint64_t v40 = swift_allocError(&type metadata for StoreKitInternalError, v39, 0LL, 0LL);
  *uint64_t v41 = 3;
  uint64_t v42 = (void *)_convertErrorToNSError(_:)(v40);
  ((void (**)(void, void, void *))a2)[2](a2, 0LL, v42);

  swift_errorRelease(v40);
LABEL_14:
  _Block_release(a2);
}

void StoreKitServiceConnection.clientOverrides(reply:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_1000D4F0C();
  __chkstk_darwin(v6);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v7 = sub_100079604(v4, (uint64_t)qword_10033E1A8);
  sub_10011B040(v7, v8, type metadata accessor for SKLogger);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v12 = v10;
  if (sub_10011B3E0(v11))
  {
    uint64_t v13 = sub_10007B9FC(22LL);
    uint64_t v53 = v7;
    uint64_t v14 = sub_10007B9FC(64LL);
    uint64_t v55 = v14;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v54 = sub_10007BA24(v14, v15, &v55);
    sub_1000B21CC((uint64_t)&v54, (uint64_t)&v55);
    *(_WORD *)(v13 + 12) = 2082;
    sub_10011B894();
    uint64_t v54 = sub_1000AB050(23LL, v16, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v13 + 14);
    sub_100086038((void *)&_mh_execute_header, v11, (os_log_type_t)v12, "%{public}s%{public}s", (uint8_t *)v13);
    sub_100086030(v14, v18, (uint64_t)&type metadata for Any + 8);
    uint64_t v19 = v14;
    uint64_t v7 = v53;
    sub_10007B974(v19);
    sub_10007B974(v13);
  }

  sub_10011B354(v20, type metadata accessor for SKLogger);
  id v21 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v21)
  {
    uint64_t v23 = v21;
    if (objc_msgSend(v21, "sk_allowClientOverride"))
    {
      uint64_t v53 = v1;
      uint64_t v24 = sub_1000E66E0();
      uint64_t v25 = v24;
      if (qword_100328B10 != -1) {
        uint64_t v24 = swift_once(&qword_100328B10, sub_1000E686C);
      }
      __chkstk_darwin(v24);
      *(&v52 - 2) = v25;
      sub_1000F9F6C((void *(*)(uint64_t *__return_ptr))sub_100119900, (uint64_t)(&v52 - 4), v26);
      uint64_t v28 = sub_1000F9630(v27);
      sub_100085EF0();
      uint64_t v29 = sub_10011BF78();
      sub_100093D7C(v29);
      uint64_t v30 = sub_10011BFF4();
      uint64_t v55 = v28;
      uint64_t v31 = sub_10007B1FC(&qword_10032BB58);
      unint64_t v32 = sub_100119918();
      uint64_t v33 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v55, v31, v32);
      unint64_t v35 = v34;
      sub_100086144();
      sub_1000881FC(v33, v35);
      ((void (*)(uint64_t, unint64_t, void))v3)(v33, v35, 0LL);

      sub_10011BD2C();
      sub_10011BD2C();
      swift_release(v30);
      goto LABEL_14;
    }
  }

  sub_10011BB10(v7, v22, type metadata accessor for SKLogger);
  uint64_t v37 = static os_log_type_t.error.getter(v36);
  uint64_t v38 = (os_log_s *)sub_100093C38();
  os_log_type_t v39 = v37;
  if (sub_1000B22A4(v38))
  {
    uint64_t v40 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v41 = sub_10007B9FC(64LL);
    uint64_t v55 = v41;
    *(_DWORD *)uint64_t v40 = 136446466;
    uint64_t v37 = (uint64_t)(v40 + 4);
    uint64_t v43 = sub_10007BA24(v41, v42, &v55);
    uint64_t v44 = sub_10011BE10(v43);
    sub_1000C6390(v44, v45);
    sub_10011BE70();
    uint64_t v54 = sub_1000E9544(0xD000000000000030LL, (uint64_t)"Client is not entitled to query client overrides");
    sub_1000C6390((uint64_t)&v54, v12);
    sub_100086038((void *)&_mh_execute_header, v38, v39, "%{public}s%{public}s", v40);
    sub_100086030(v41, v46, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v41);
    sub_10007B974((uint64_t)v40);
  }

  sub_10011C390(v47, type metadata accessor for SKLogger);
  unint64_t v48 = sub_10009BB88();
  uint64_t v49 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v48);
  uint64_t v51 = sub_10011BDBC(v49, v50);
  v3(v51);
  swift_errorRelease(v37);
LABEL_14:
  sub_100085E98();
}

void sub_100107BB8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  Class isa = 0LL;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

void sub_100107C38(uint64_t a1, uint64_t *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v5 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v5);
  uint64_t v68 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = type metadata accessor for ClientOverride(0LL);
  __chkstk_darwin(v67);
  uint64_t v66 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = (int *)type metadata accessor for ClientOverrideRequest(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v64 - v12);
  uint64_t v14 = type metadata accessor for SKLogger(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v69 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v71 = (char *)&v64 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v64 - v19;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v70 = sub_100079604(v14, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v70, (uint64_t)v20, type metadata accessor for SKLogger);
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  os_log_type_t v23 = v22;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v25 = v23;
  if (os_log_type_enabled(v24, v23))
  {
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v65 = a4;
    uint64_t v27 = v26;
    uint64_t v28 = swift_slowAlloc(64LL, -1LL);
    uint64_t v75 = v28;
    *(_DWORD *)uint64_t v27 = 136446466;
    uint64_t v74 = sub_10007A488(0LL, 0xE000000000000000LL, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v27 + 4);
    *(_WORD *)(v27 + 12) = 2082;
    uint64_t v74 = sub_10007A488(0xD00000000000001ELL, 0x80000001002A2A50LL, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v27 + 14);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s%{public}s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v27;
    a4 = v65;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v20, type metadata accessor for SKLogger);
  uint64_t v30 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  uint64_t v32 = PropertyListDecoder.init()(v31);
  sub_10007ACCC( &qword_10032BB70,  type metadata accessor for ClientOverrideRequest,  (uint64_t)&protocol conformance descriptor for ClientOverrideRequest);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v11, v8, v72, v73, v8, v33);
  swift_release(v32);
  sub_1000E9158((uint64_t)v11, (uint64_t)v13, type metadata accessor for ClientOverrideRequest);
  id v34 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v34)
  {
    unint64_t v35 = v34;
    if (objc_msgSend(v34, "sk_allowClientOverride"))
    {
      uint64_t v36 = v68;
      sub_1000E9220((uint64_t)v13 + v8[5], v68, &qword_10032A3D8);
      if (sub_10007D824(v36, 1LL, v67) == 1)
      {
        sub_100085298(v36, &qword_10032A3D8);
        type metadata accessor for Client(0LL);
        uint64_t v37 = *v13;
        uint64_t v38 = (void *)v13[1];
        swift_bridgeObjectRetain(v38);
        sub_1000E73CC(v37, v38);
        swift_bridgeObjectRelease(v38);
      }

      else
      {
        uint64_t v58 = v66;
        sub_1000E9158(v36, v66, type metadata accessor for ClientOverride);
        type metadata accessor for Client(0LL);
        uint64_t v59 = *v13;
        uint64_t v60 = (void *)v13[1];
        uint64_t v61 = v13;
        unint64_t v62 = (char *)v13 + v8[7];
        swift_bridgeObjectRetain(v60);
        uint64_t v63 = (uint64_t)v62;
        uint64_t v13 = v61;
        sub_1000E6EF4(v58, v59, v60, v63);
        swift_bridgeObjectRelease(v60);
        sub_100085BC4(v58, type metadata accessor for ClientOverride);
      }

      a4[2](a4, 0LL);

      uint64_t v57 = (uint64_t)v13;
      goto LABEL_16;
    }
  }

  sub_1000E8F9C(v70, v69, type metadata accessor for SKLogger);
  uint64_t v39 = v8[6];
  uint64_t v73 = v13;
  uint64_t v40 = (uint64_t *)((char *)v13 + v39);
  uint64_t v42 = *v40;
  uint64_t v41 = (void *)v40[1];
  uint64_t v43 = swift_bridgeObjectRetain(v41);
  os_log_type_t v44 = static os_log_type_t.error.getter(v43);
  uint64_t v45 = swift_bridgeObjectRetain_n(v41, 2LL);
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  os_log_type_t v47 = v44;
  if (os_log_type_enabled(v46, v44))
  {
    uint64_t v48 = swift_slowAlloc(22LL, -1LL);
    uint64_t v49 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v48 = 136446466;
    uint64_t v74 = v49;
    uint64_t v75 = 91LL;
    v76[0] = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v41);
    v50._uint64_t countAndFlagsBits = v42;
    v50._object = v41;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = 8285LL;
    v51._object = (void *)0xE200000000000000LL;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(v41);
    unint64_t v52 = v76[0];
    uint64_t v75 = sub_10007A488(v75, v76[0], &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v48 + 4);
    swift_bridgeObjectRelease_n(v41, 2LL);
    swift_bridgeObjectRelease(v52);
    *(_WORD *)(v48 + 12) = 2082;
    uint64_t v75 = sub_10007A488(0xD00000000000002ALL, 0x80000001002A2AA0LL, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v48 + 14);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "%{public}s%{public}s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_bridgeObjectRelease(v41);
  }

  else
  {

    swift_bridgeObjectRelease_n(v41, 3LL);
  }

  sub_100085BC4(v69, type metadata accessor for SKLogger);
  unint64_t v53 = sub_10009BB88();
  uint64_t v54 = swift_allocError(&type metadata for StoreKitInternalError, v53, 0LL, 0LL);
  *uint64_t v55 = 3;
  uint64_t v56 = (void *)_convertErrorToNSError(_:)(v54);
  ((void (**)(void, void *))a4)[2](a4, v56);

  swift_errorRelease(v54);
  uint64_t v57 = (uint64_t)v73;
LABEL_16:
  sub_100085BC4(v57, type metadata accessor for ClientOverrideRequest);
  _Block_release(a4);
}

void StoreKitServiceConnection.setClientOverride(with:reply:)()
{
  uint64_t v92 = v1;
  unint64_t v93 = v0;
  uint64_t v3 = v2;
  uint64_t v94 = v4;
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_1000860EC();
  uint64_t v88 = v6;
  uint64_t v87 = sub_1000E953C();
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_1000860EC();
  uint64_t v86 = v8;
  uint64_t v9 = (int *)type metadata accessor for ClientOverrideRequest(0LL);
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_1000D4F0C();
  uint64_t v13 = v11 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v85 - v15);
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v17);
  sub_1000862F4();
  uint64_t v91 = v18;
  sub_100086200();
  __chkstk_darwin(v19);
  sub_1000DB3F4();
  uint64_t v89 = v20;
  sub_100086200();
  __chkstk_darwin(v21);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v22 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v90 = sub_10011BBF8(v22, (uint64_t)qword_10033E1A8);
  sub_10011B040(v90, v23, type metadata accessor for SKLogger);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  unsigned __int8 v26 = v25;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v25);
  uint64_t v28 = v26;
  uint64_t v29 = &off_100279000;
  if (sub_10011C02C(v27))
  {
    uint64_t v29 = (char **__ptr32 *)sub_10007B9FC(22LL);
    uint64_t v30 = sub_10007B9FC(64LL);
    uint64_t v85 = v3;
    uint64_t v31 = v30;
    uint64_t v96 = v30;
    *uint64_t v29 = (char **__ptr32)136446466;
    uint64_t v33 = sub_10007BA24(v30, v32, &v96);
    sub_10011BE90(v33);
    uint64_t v34 = sub_10011C0F8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v35, v29 + 1);
    *((_WORD *)v29 + 6) = 2082;
    sub_10011B884();
    uint64_t v95 = sub_1000AB050(30LL, v36, v37);
    uint64_t v38 = sub_10011C0F8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, (char *)v29 + 14);
    sub_100086038((void *)&_mh_execute_header, v27, (os_log_type_t)v28, "%{public}s%{public}s", (uint8_t *)v29);
    sub_100086030(v31, v40, (uint64_t)&type metadata for Any + 8);
    uint64_t v41 = v31;
    uint64_t v3 = v85;
    sub_10007B974(v41);
    sub_10007B974((uint64_t)v29);
  }

  sub_10011B354(v42, type metadata accessor for SKLogger);
  uint64_t v43 = sub_10011B960();
  sub_100093D7C(v43);
  sub_10011B9A4();
  sub_10007ACCC( &qword_10032BB70,  type metadata accessor for ClientOverrideRequest,  (uint64_t)&protocol conformance descriptor for ClientOverrideRequest);
  sub_10011B910();
  sub_10009C5EC();
  if (!v3)
  {
    sub_1000E9158(v13, (uint64_t)v16, type metadata accessor for ClientOverrideRequest);
    id v55 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
    if (v55)
    {
      uint64_t v57 = v55;
      if (objc_msgSend(v55, "sk_allowClientOverride"))
      {
        uint64_t v58 = v88;
        sub_1000E9220((uint64_t)v16 + v9[5], v88, &qword_10032A3D8);
        uint64_t v59 = sub_10007D824(v58, 1LL, v87);
        if ((_DWORD)v59 == 1)
        {
          sub_10009C740(v59, &qword_10032A3D8);
          sub_1000E66E0();
          uint64_t v60 = *v16;
          uint64_t v61 = (void *)v16[1];
          sub_10008600C();
          sub_1000E73CC(v60, v61);
          sub_100086004();
        }

        else
        {
          uint64_t v81 = v86;
          sub_1000E9158(v58, v86, type metadata accessor for ClientOverride);
          sub_1000E66E0();
          uint64_t v82 = *v16;
          uint64_t v83 = (void *)v16[1];
          uint64_t v84 = (uint64_t)v16 + v9[7];
          sub_10008618C();
          sub_1000E6EF4(v81, v82, v83, v84);
          sub_100085FB4();
          sub_100085BC4(v81, type metadata accessor for ClientOverride);
        }

        sub_10011B7D4((uint64_t (*)(void))v93);

        uint64_t v80 = (uint64_t)v16;
LABEL_21:
        sub_100085BC4(v80, type metadata accessor for ClientOverrideRequest);
        goto LABEL_22;
      }
    }

    sub_10011B040(v90, v56, type metadata accessor for SKLogger);
    uint64_t v65 = v9[6];
    uint64_t v94 = v16;
    uint64_t v66 = *(uint64_t *)((char *)v16 + v65 + 8);
    uint64_t v67 = sub_100085FEC();
    static os_log_type_t.error.getter(v67);
    uint64_t v68 = sub_100085EE8(v66);
    uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
    if (sub_1000E96FC(v69))
    {
      uint64_t v70 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v71 = sub_10007B9FC(64LL);
      sub_10011B8A4(4.8752e-34);
      uint64_t v95 = v72;
      uint64_t v96 = v73;
      v97[0] = v74;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v96 = sub_10008620C(v96, v75, &v95);
      sub_1000E98A0((uint64_t)&v96, (uint64_t)v97);
      sub_10007D974(v66);
      sub_10007B980();
      sub_10011BAA0();
      uint64_t v96 = sub_10011B130(0xD00000000000002ALL, (uint64_t)"Client is not entitled to override clients");
      sub_100086194((uint64_t)&v96, (uint64_t)v97);
      sub_100086038((void *)&_mh_execute_header, v69, (os_log_type_t)v13, "%{public}s%{public}s", v70);
      sub_100086030(v71, v76, v28 + 8);
      sub_10007B974(v71);
      sub_10007B974((uint64_t)v70);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v66);
    }

    sub_100085BC4(v89, type metadata accessor for SKLogger);
    unint64_t v77 = sub_10009BB88();
    uint64_t v78 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v77);
    sub_10011B994(v78, v79);
    sub_10011B038();
    uint64_t v80 = (uint64_t)v94;
    goto LABEL_21;
  }

  sub_10011B8C4(v90, v44, type metadata accessor for SKLogger);
  sub_10011BC7C();
  sub_100085F08(0xD000000000000025LL, (uint64_t)"Error decoding ClientOverrideRequest ");
  uint64_t v95 = v3;
  sub_10007B1FC(&qword_100329B90);
  sub_10011B420();
  uint64_t v45 = sub_10011C2E4();
  sub_100085EE8((uint64_t)v29);
  uint64_t v46 = (os_log_s *)sub_10009C5AC();
  if (sub_1000E96FC(v46))
  {
    uint64_t v45 = sub_10007B9FC(22LL);
    uint64_t v47 = sub_10007B9FC(64LL);
    uint64_t v96 = v47;
    *(_DWORD *)uint64_t v45 = 136446466;
    uint64_t v49 = sub_10007BA24(v47, v48, &v96);
    uint64_t v50 = sub_10011C144(v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v51, v45 + 4);
    *(_WORD *)(v45 + 12) = 2082;
    sub_100085FEC();
    uint64_t v95 = sub_1000B20F4((uint64_t)v27, v52, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v9, v45 + 14);
    sub_100085E64((uint64_t)v29);
    sub_100086038((void *)&_mh_execute_header, v46, (os_log_type_t)v13, "%{public}s%{public}s", (uint8_t *)v45);
    sub_100086030(v47, v53, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v47);
    sub_10007B974(v45);
    sub_100085EF0();
  }

  else
  {

    uint64_t v54 = sub_100085E64((uint64_t)v29);
  }

  unint64_t v62 = v93;
  sub_10011BD24(v54, type metadata accessor for SKLogger);
  uint64_t v63 = (void *)sub_10011B30C();
  id v64 = sub_10011B058(v63, "toASDErrorWithMetadata:");
  sub_10011B508();
  v62(v45);

  sub_1000E93B4();
LABEL_22:
  sub_100085E98();
}

void sub_100108CA4(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v64 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SKLogger(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v67 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v60 - v13;
  uint64_t v15 = swift_allocObject(&unk_1002EE778, 24LL, 7LL);
  *(void *)(v15 + 16) = a3;
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___NSUUID);
  _Block_copy(a3);
  id v17 = objc_msgSend(v16, "lib_shortLogKey");
  uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v19 = v18;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v65 = sub_100079604(v10, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v65, (uint64_t)v14, type metadata accessor for SKLogger);
  uint64_t v20 = swift_bridgeObjectRetain(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  uint64_t v22 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = v21;
  if (os_log_type_enabled(v23, v21))
  {
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    unint64_t v62 = a1;
    uint64_t v26 = v25;
    uint64_t v27 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v26 = 136446466;
    uint64_t v63 = v15;
    uint64_t v68 = 91LL;
    unint64_t v69 = 0xE100000000000000LL;
    uint64_t v70 = v27;
    swift_bridgeObjectRetain(v19);
    uint64_t v61 = v9;
    v28._uint64_t countAndFlagsBits = v66;
    v28._object = v19;
    String.append(_:)(v28);
    v29._uint64_t countAndFlagsBits = 8285LL;
    v29._object = (void *)0xE200000000000000LL;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v19);
    unint64_t v30 = v69;
    uint64_t v68 = sub_10007A488(v68, v69, &v70);
    uint64_t v15 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v26 + 4);
    swift_bridgeObjectRelease_n(v19, 2LL);
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v26 + 12) = 2082;
    uint64_t v68 = sub_10007A488(0xD000000000000013LL, 0x80000001002A2AD0LL, &v70);
    uint64_t v9 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v26 + 14);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s%{public}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v27, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v31 = v26;
    a1 = v62;
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_bridgeObjectRelease(v19);
  }

  else
  {

    swift_bridgeObjectRelease_n(v19, 3LL);
  }

  sub_100085BC4((uint64_t)v14, type metadata accessor for SKLogger);
  id v32 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v32)
  {
    uint64_t v33 = v32;
    type metadata accessor for Client(0LL);
    uint64_t v34 = type metadata accessor for ClientOverride(0LL);
    sub_10007D0AC((uint64_t)v9, 1LL, 1LL, v34);
    id v35 = v33;
    sub_1000E1A28(v35, (uint64_t)v9);
    uint64_t v50 = v49;
    uint64_t v51 = type metadata accessor for TaskPriority(0LL);
    uint64_t v52 = v64;
    sub_10007D0AC(v64, 1LL, 1LL, v51);
    uint64_t v53 = (void *)swift_allocObject(&unk_1002EE7A0, 80LL, 7LL);
    v53[2] = 0LL;
    v53[3] = 0LL;
    v53[4] = v50;
    v53[5] = a1;
    v53[6] = v66;
    v53[7] = v19;
    v53[8] = sub_10011A288;
    v53[9] = v15;
    id v54 = v50;
    id v55 = a1;
    swift_bridgeObjectRetain(v19);
    id v56 = v54;
    id v57 = v55;
    swift_retain(v15);
    sub_100084100(v52);
    uint64_t v59 = v58;

    swift_bridgeObjectRelease(v19);
    swift_release(v59);
    sub_100085298(v52, (uint64_t *)&unk_10032BAB0);
  }

  else
  {
    sub_1000E8F9C(v65, v67, type metadata accessor for SKLogger);
    os_log_type_t v37 = static os_log_type_t.error.getter(v36);
    uint64_t v38 = swift_bridgeObjectRetain_n(v19, 2LL);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    if (os_log_type_enabled(v39, v37))
    {
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      uint64_t v41 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v40 = 136446466;
      uint64_t v68 = 91LL;
      unint64_t v69 = 0xE100000000000000LL;
      uint64_t v70 = v41;
      swift_bridgeObjectRetain(v19);
      v42._uint64_t countAndFlagsBits = v66;
      v42._object = v19;
      String.append(_:)(v42);
      v43._uint64_t countAndFlagsBits = 8285LL;
      v43._object = (void *)0xE200000000000000LL;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v19);
      unint64_t v44 = v69;
      uint64_t v68 = sub_10007A488(v68, v69, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v40 + 4);
      swift_bridgeObjectRelease_n(v19, 2LL);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v40 + 12) = 2082;
      uint64_t v68 = sub_10007A488(0xD000000000000036LL, 0x80000001002A2AF0LL, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v40 + 14);
      _os_log_impl((void *)&_mh_execute_header, v39, v37, "%{public}s%{public}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_bridgeObjectRelease(v19);
    }

    else
    {

      swift_bridgeObjectRelease_n(v19, 3LL);
    }

    sub_100085BC4(v67, type metadata accessor for SKLogger);
    unint64_t v45 = sub_10009BB88();
    uint64_t v46 = swift_allocError(&type metadata for StoreKitInternalError, v45, 0LL, 0LL);
    *uint64_t v47 = 1;
    uint64_t v48 = (void *)_convertErrorToNSError(_:)(v46);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v48);

    swift_errorRelease(v46);
  }

  swift_release(v15);
  _Block_release(a3);
}

void StoreKitServiceConnection.policy(with:reply:)()
{
  uint64_t v3 = v2;
  uint64_t v66 = v4;
  uint64_t v64 = v5;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_100085FDC();
  uint64_t v9 = v8 - v7;
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v13);
  sub_1000D4F0C();
  sub_10011BF0C();
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v60 - v15;
  id v17 = objc_msgSend((id)objc_opt_self(NSUUID), "lib_shortLogKey");
  uint64_t v18 = sub_100086040((uint64_t)v17);
  sub_10011B968(v18);
  if (qword_100328B40 != -1) {
    uint64_t v19 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v65 = sub_10011BBF8(v19, (uint64_t)qword_10033E1A8);
  sub_10011BD38(v65, v20, type metadata accessor for SKLogger);
  uint64_t v21 = sub_10008618C();
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  sub_100085EE8(v0);
  uint64_t v23 = (os_log_s *)sub_10011C0CC();
  os_log_type_t v24 = v22;
  if (sub_100093764(v23))
  {
    uint64_t v25 = sub_10007B9FC(22LL);
    uint64_t v63 = v1;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v26 = 136446466;
    uint64_t v62 = v9;
    uint64_t v68 = 91LL;
    unint64_t v69 = 0xE100000000000000LL;
    uint64_t v70 = v27;
    sub_10008618C();
    uint64_t v61 = v12;
    sub_10009C32C(v67);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v68 = sub_10008620C(v68, v28, &v70);
    uint64_t v9 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v26 + 4);
    sub_10007D974(v0);
    sub_10007B980();
    sub_100093CA4();
    sub_10011B894();
    uint64_t v68 = sub_1000AB050(19LL, v29, v30);
    uint64_t v12 = v61;
    sub_100086194((uint64_t)&v68, (uint64_t)&v69);
    sub_100086038((void *)&_mh_execute_header, v23, v24, "%{public}s%{public}s", v26);
    sub_100086030(v27, v31, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v27);
    sub_10007B974((uint64_t)v26);
    sub_100085FB4();
  }

  else
  {

    uint64_t v32 = sub_100085E64(v0);
  }

  sub_10011C288(v32, type metadata accessor for SKLogger);
  uint64_t v33 = (os_log_s *)[(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v33)
  {
    uint64_t v23 = v33;
    sub_1000E66E0();
    uint64_t v35 = sub_1000E953C();
    id v36 = sub_10011B5D4(v35);
    sub_10011B984(v36);
    if (!v12)
    {
      uint64_t v49 = v37;
      uint64_t v50 = sub_1000AAD2C();
      sub_1000875FC(v9, v51, v52, v50);
      uint64_t v53 = (void *)sub_1000AA314((uint64_t)&unk_1002EE390, 80LL);
      v53[2] = 0LL;
      v53[3] = 0LL;
      id v54 = v64;
      v53[4] = v49;
      v53[5] = v54;
      v53[6] = v67;
      v53[7] = v0;
      v53[8] = v66;
      v53[9] = v3;
      id v55 = v49;
      id v56 = v54;
      sub_10008618C();
      id v57 = v55;
      id v58 = v56;
      swift_retain(v3);
      sub_100084100(v9);
      sub_10011BC14();
      sub_100085FB4();

      uint64_t v59 = sub_1000AAEC8();
      sub_10011C0D4(v59, (uint64_t *)&unk_10032BAB0);
      goto LABEL_14;
    }

    sub_1000E93B4();
  }

  sub_10011BBD4(v65, v34, type metadata accessor for SKLogger);
  static os_log_type_t.error.getter(v38);
  sub_100085EE8(v0);
  uint64_t v39 = (os_log_s *)sub_10011BAB0();
  if (sub_10011B330(v39))
  {
    uint64_t v40 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v41 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v40 = 136446466;
    uint64_t v68 = 91LL;
    unint64_t v69 = 0xE100000000000000LL;
    uint64_t v70 = v41;
    sub_10008618C();
    sub_10009C32C(v67);
    sub_100085F14();
    sub_100085FB4();
    uint64_t v68 = sub_10008620C(v68, v42, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v40 + 4);
    sub_10007D974(v0);
    sub_10007B980();
    sub_10011B73C();
    uint64_t v68 = sub_1000E9544(0xD000000000000036LL, (uint64_t)"No client to fetch terms of service and privacy policy");
    sub_100086194((uint64_t)&v68, (uint64_t)&v69);
    sub_100086038((void *)&_mh_execute_header, v23, (os_log_type_t)v16, "%{public}s%{public}s", v40);
    sub_100086030(v41, v43, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v41);
    sub_10007B974((uint64_t)v40);
    sub_100085FB4();
  }

  else
  {

    uint64_t v44 = sub_100085E64(v0);
  }

  sub_10011BA88(v44, type metadata accessor for SKLogger);
  unint64_t v45 = sub_10009BB88();
  uint64_t v46 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v45);
  uint64_t v48 = sub_10011B7DC(v46, v47);
  v66(v48);
  sub_10011B038();
LABEL_14:
  sub_100085E98();
}

uint64_t sub_1001098C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v18;
  uint64_t v13 = type metadata accessor for URLError.Code(0LL);
  v8[8] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URLError(0LL);
  v8[9] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[10] = v15;
  v8[11] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (void *)swift_task_alloc(dword_10032AD14);
  v8[12] = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_100109980;
  return sub_1000C7D40(a4, a5, a6, a7);
}

uint64_t sub_100109980()
{
  if (!v1) {
    *(void *)(v2 + 112) = v0;
  }
  sub_100093420();
  return sub_10009C2D4();
}

uint64_t sub_1001099C4()
{
  id v2 = *(id *)(v1 + 112);
  sub_10011BA64();

  sub_10011C244();
  sub_1000939C0();
  return sub_1000AA42C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100109A10()
{
  uint64_t v5 = *(void *)(v1 + 104);
  *(void *)(v1 + 40) = v5;
  swift_errorRetain(v5);
  sub_10007B1FC(&qword_100329B90);
  uint64_t v6 = sub_10009C714();
  if ((swift_dynamicCast(v6, v7, v8, v9, 0LL) & 1) != 0)
  {
    sub_10011B038();
    uint64_t v10 = *(void *)(v1 + 32);
    if (v10 != 1) {
      sub_10011AA2C(*(void *)(v1 + 16), *(void *)(v1 + 24), v10);
    }
    uint64_t v11 = *(void *)(v1 + 80);
    uint64_t v12 = *(void *)(v1 + 64);
    uint64_t v13 = *(void *)(v1 + 72);
    uint64_t v14 = *(void (**)(void, void *))(v1 + 48);
    uint64_t v15 = swift_errorRelease(*(void *)(v1 + 40));
    ((void (*)(uint64_t))static URLError.Code.badServerResponse.getter)(v15);
    unint64_t v16 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
    sub_10007ACCC( &qword_10032AD68,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError,  (uint64_t)&protocol conformance descriptor for URLError);
    uint64_t v18 = _BridgedStoredNSError.init(_:userInfo:)(v12, v16, v13, v17);
    uint64_t v19 = (void *)((uint64_t (*)(uint64_t))URLError._nsError.getter)(v18);
    sub_1000C6730(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    v14(0LL, v19);
  }

  else
  {
    swift_errorRelease(*(void *)(v1 + 40));
    [(id)sub_100093C54() code];
    sub_100086064();
    if ((unint64_t)(v1 - 163) < 2)
    {
      sub_10011B3C8();
      ((void (*)(void))static URLError.Code.resourceUnavailable.getter)();
    }

    else
    {
      switch(v1)
      {
        case -39LL:
          sub_10011B3C8();
          ((void (*)(void))static URLError.Code.timedOut.getter)();
          break;
        case 160LL:
          sub_10011B3C8();
          ((void (*)(void))static URLError.Code.badURL.getter)();
          break;
        case 162LL:
          sub_10011B3C8();
          ((void (*)(void))static URLError.Code.cannotParseResponse.getter)();
          break;
        default:
          uint64_t v25 = *(void *)(v1 + 104);
          uint64_t v26 = *(void (**)(void, uint64_t))(v1 + 48);
          sub_10011C0C4();
          v26(0LL, v25);
          sub_10011B038();
          sub_10011B038();
          goto LABEL_14;
      }
    }

    unint64_t v20 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
    sub_10007ACCC( &qword_10032AD68,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError,  (uint64_t)&protocol conformance descriptor for URLError);
    uint64_t v22 = _BridgedStoredNSError.init(_:userInfo:)(v1 + 40, v20, v2, v21);
    uint64_t v23 = (void *)((uint64_t (*)(uint64_t))URLError._nsError.getter)(v22);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
    v4(0LL, v23);
    sub_10011B038();
  }

void sub_100109C50(int a1, int a2, int a3, void *a4)
{
  uint64_t v7 = sub_10011BCE8(a1, a2, a3, a4);
  _Block_copy(v7);
  id v8 = v5;
  id v9 = v6;
  v4(v8, v9, v7);
  _Block_release(v7);
}

void sub_100109CB4(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v98 = a3;
  uint64_t v107 = a1;
  id v108 = a2;
  uint64_t v6 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v6);
  uint64_t v99 = (uint64_t)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10007B1FC(&qword_10032A3D8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v100 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v111 = (uint64_t)&v95 - v11;
  uint64_t v109 = type metadata accessor for ProductRequest(0LL);
  uint64_t v96 = *(void *)(v109 - 8);
  uint64_t v12 = *(void *)(v96 + 64);
  uint64_t v13 = __chkstk_darwin(v109);
  uint64_t v97 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = (uint64_t *)((char *)&v95 - v15);
  __chkstk_darwin(v14);
  uint64_t v103 = (uint64_t)&v95 - v17;
  uint64_t v18 = type metadata accessor for SKLogger(0LL);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v102 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v101 = (uint64_t)&v95 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v105 = (char *)&v95 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v95 - v25;
  uint64_t v27 = swift_allocObject(&unk_1002EE728, 24LL, 7LL);
  *(void *)(v27 + 16) = a5;
  _Block_copy(a5);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v104 = sub_100079604(v18, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v104, (uint64_t)v26, type metadata accessor for SKLogger);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  os_log_type_t v30 = v29;
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v32 = v30;
  BOOL v33 = os_log_type_enabled(v31, v30);
  uint64_t v110 = (void (**)(const void *, void *))a5;
  uint64_t v106 = v27;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc(22LL, -1LL);
    uint64_t v35 = swift_slowAlloc(64LL, -1LL);
    uint64_t v113 = v35;
    *(_DWORD *)uint64_t v34 = 136446466;
    uint64_t v112 = sub_10007A488(0LL, 0xE000000000000000LL, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v34 + 4);
    *(_WORD *)(v34 + 12) = 2082;
    uint64_t v112 = sub_10007A488(0xD00000000000001ELL, 0x80000001002A2B30LL, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v34 + 14);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s%{public}s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v26, type metadata accessor for SKLogger);
  uint64_t v36 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  uint64_t v38 = PropertyListDecoder.init()(v37);
  sub_10007ACCC( &qword_10032BB88,  type metadata accessor for ProductRequest,  (uint64_t)&protocol conformance descriptor for ProductRequest);
  uint64_t v39 = v109;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v16, v109, v107, v108, v109, v40);
  swift_release(v38);
  uint64_t v41 = v111;
  uint64_t v42 = (uint64_t)v16;
  uint64_t v43 = v103;
  sub_1000E9158(v42, v103, type metadata accessor for ProductRequest);
  id v44 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v44)
  {
    sub_1000E8F9C(v104, v101, type metadata accessor for SKLogger);
    uint64_t v46 = (uint64_t *)(v43 + *(int *)(v39 + 32));
    uint64_t v48 = *v46;
    uint64_t v47 = (void *)v46[1];
    uint64_t v49 = swift_bridgeObjectRetain(v47);
    os_log_type_t v50 = static os_log_type_t.error.getter(v49);
    uint64_t v51 = swift_bridgeObjectRetain_n(v47, 2LL);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = v50;
    if (os_log_type_enabled(v52, v50))
    {
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      uint64_t v55 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v54 = 136446466;
      uint64_t v112 = v55;
      uint64_t v113 = 91LL;
      v114[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v47);
      v56._uint64_t countAndFlagsBits = v48;
      v56._object = v47;
      String.append(_:)(v56);
      v57._uint64_t countAndFlagsBits = 8285LL;
      v57._object = (void *)0xE200000000000000LL;
      String.append(_:)(v57);
      swift_bridgeObjectRelease(v47);
      unint64_t v58 = v114[0];
      uint64_t v113 = sub_10007A488(v113, v114[0], &v112);
      uint64_t v43 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v54 + 4);
      swift_bridgeObjectRelease_n(v47, 2LL);
      swift_bridgeObjectRelease(v58);
      *(_WORD *)(v54 + 12) = 2082;
      uint64_t v113 = sub_10007A488(0xD000000000000034LL, 0x80000001002A2B70LL, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v54 + 14);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%{public}s%{public}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_bridgeObjectRelease(v47);
    }

    else
    {

      swift_bridgeObjectRelease_n(v47, 3LL);
    }

    uint64_t v90 = v110;
    uint64_t v83 = v106;
    sub_100085BC4(v101, type metadata accessor for SKLogger);
    unint64_t v91 = sub_10009BB88();
    uint64_t v92 = swift_allocError(&type metadata for StoreKitInternalError, v91, 0LL, 0LL);
    _BYTE *v93 = 1;
    uint64_t v94 = (void *)_convertErrorToNSError(_:)(v92);
    v90[2](v90, v94);

    swift_errorRelease(v92);
    sub_100085BC4(v43, type metadata accessor for ProductRequest);
    goto LABEL_15;
  }

  unint64_t v45 = v44;
  if (objc_msgSend(v44, "sk_allowClientOverride"))
  {
    sub_1000E9220(v43, v41, &qword_10032A3D8);
  }

  else
  {
    uint64_t v59 = type metadata accessor for ClientOverride(0LL);
    sub_10007D0AC(v41, 1LL, 1LL, v59);
  }

  type metadata accessor for Client(0LL);
  uint64_t v60 = v100;
  sub_1000E9220(v41, v100, &qword_10032A3D8);
  id v61 = v45;
  sub_1000E1A28(v61, v60);
  id v108 = v61;
  uint64_t v107 = v62;
  uint64_t v113 = 0LL;
  v114[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  swift_bridgeObjectRelease(v114[0]);
  uint64_t v113 = 0x53746375646F7250LL;
  v114[0] = 0xEF5F656369767265LL;
  uint64_t v63 = (uint64_t *)(v43 + *(int *)(v39 + 32));
  uint64_t v64 = *v63;
  uint64_t v65 = (void *)v63[1];
  swift_bridgeObjectRetain(v65);
  v66._uint64_t countAndFlagsBits = v64;
  v66._object = v65;
  String.append(_:)(v66);
  swift_bridgeObjectRelease(v65);
  uint64_t v67 = v113;
  uint64_t v68 = v114[0];
  id v69 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v69)
  {
    uint64_t v70 = v69;
    sub_100119624(v67, v68, v69);

    uint64_t v71 = type metadata accessor for TaskPriority(0LL);
    uint64_t v72 = v99;
    sub_10007D0AC(v99, 1LL, 1LL, v71);
    uint64_t v73 = v67;
    uint64_t v74 = v97;
    sub_1000E8F9C(v43, v97, type metadata accessor for ProductRequest);
    uint64_t v75 = *(unsigned __int8 *)(v96 + 80);
    uint64_t v76 = (v75 + 32) & ~v75;
    unint64_t v77 = (v12 + v76 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v79 = (v78 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v80 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v81 = swift_allocObject(&unk_1002EE750, v80 + 16, v75 | 7);
    *(void *)(v81 + 16) = 0LL;
    *(void *)(v81 + 24) = 0LL;
    sub_1000E9158(v74, v81 + v76, type metadata accessor for ProductRequest);
    uint64_t v83 = v106;
    uint64_t v82 = v107;
    *(void *)(v81 + v77) = v107;
    uint64_t v84 = v98;
    *(void *)(v81 + v78) = v98;
    uint64_t v85 = (void *)(v81 + v79);
    *uint64_t v85 = sub_100085E1C;
    v85[1] = v83;
    uint64_t v86 = (uint64_t *)(v81 + v80);
    *uint64_t v86 = v73;
    v86[1] = v68;
    id v87 = v82;
    swift_unknownObjectRetain(v84);
    swift_retain(v83);
    sub_100084100(v72);
    uint64_t v89 = v88;

    swift_release(v89);
    sub_100085298(v72, (uint64_t *)&unk_10032BAB0);
    sub_100085298(v111, &qword_10032A3D8);
    sub_100085BC4(v103, type metadata accessor for ProductRequest);
    uint64_t v90 = v110;
LABEL_15:
    swift_release(v83);
    _Block_release(v90);
    return;
  }

  _Block_release(v110);
  __break(1u);
}

void StoreKitServiceConnection.products(with:receiver:reply:)()
{
  uint64_t v135 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v137 = v7;
  id v138 = v8;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v9);
  sub_10011B378();
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v10);
  uint64_t v130 = (uint64_t)v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v122 - v13;
  uint64_t v139 = sub_1000AA460();
  uint64_t v124 = *(void *)(v139 - 8);
  sub_10011B904();
  __chkstk_darwin(v15);
  sub_10011B254();
  uint64_t v126 = v16;
  sub_10011B8F8();
  __chkstk_darwin(v17);
  sub_1000E9670();
  uint64_t v136 = v18;
  uint64_t v125 = v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v122 - v21;
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v23);
  sub_1000862F4();
  uint64_t v133 = v24;
  sub_100086200();
  __chkstk_darwin(v25);
  uint64_t v131 = (uint64_t)v122 - v26;
  sub_100086200();
  __chkstk_darwin(v27);
  uint64_t v129 = (char *)v122 - v28;
  sub_100086200();
  __chkstk_darwin(v29);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v30 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v132 = sub_10011BBF8(v30, (uint64_t)qword_10033E1A8);
  sub_10011B040(v132, v31, type metadata accessor for SKLogger);
  static os_log_type_t.default.getter(v32);
  BOOL v33 = (os_log_s *)sub_10011BA40();
  os_log_type_t v34 = v0;
  BOOL v35 = sub_10009396C(v33);
  uint64_t v36 = &off_100279000;
  uint64_t v134 = v4;
  uint64_t v127 = v6;
  uint64_t v128 = v1;
  if (v35)
  {
    uint64_t v36 = (char **__ptr32 *)sub_10007B9FC(22LL);
    uint64_t v37 = sub_10007B9FC(64LL);
    uint64_t v141 = v37;
    *uint64_t v36 = (char **__ptr32)136446466;
    uint64_t v6 = v14;
    uint64_t v39 = sub_10007BA24(v37, v38, &v141);
    sub_10011C264(v39);
    uint64_t v41 = v40 + 8;
    sub_1000E98A0((uint64_t)&v140, v40 + 8);
    *((_WORD *)v36 + 6) = 2082;
    uint64_t v42 = sub_1000AB050(30LL, 0x80000001002A2B30LL, &v141);
    uint64_t v43 = sub_10011BFA8(v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, v41, (char *)v36 + 14);
    sub_100086038((void *)&_mh_execute_header, v33, v34, "%{public}s%{public}s", (uint8_t *)v36);
    sub_100086030(v37, v44, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v37);
    sub_10007B974((uint64_t)v36);
  }

  sub_10011B354(v45, type metadata accessor for SKLogger);
  uint64_t v46 = sub_10011B960();
  sub_100093D7C(v46);
  sub_10011B9A4();
  sub_10007ACCC( &qword_10032BB88,  type metadata accessor for ProductRequest,  (uint64_t)&protocol conformance descriptor for ProductRequest);
  uint64_t v47 = v136;
  uint64_t v48 = v139;
  sub_10011B910();
  sub_10009C5EC();
  if (v36)
  {
    sub_10011BBD4(v132, v49, type metadata accessor for SKLogger);
    sub_10011B74C();
    _StringGuts.grow(_:)(32LL);
    sub_1000862B8();
    sub_1000D4F2C(30LL, v50);
    uint64_t v140 = (uint64_t)v36;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v51 = sub_10011B8D8();
    uint64_t v53 = v141;
    uint64_t v52 = v142;
    uint64_t v54 = static os_log_type_t.error.getter(v51);
    sub_100085EE8(v52);
    uint64_t v55 = (os_log_s *)sub_10011BAB0();
    if (sub_1000E96FC(v55))
    {
      uint64_t v54 = sub_10007B9FC(22LL);
      uint64_t v56 = sub_10007B9FC(64LL);
      uint64_t v141 = v56;
      *(_DWORD *)uint64_t v54 = 136446466;
      uint64_t v140 = sub_10007BA24(v56, v57, &v141);
      sub_1000E98A0((uint64_t)&v140, (uint64_t)(v6 + 8));
      *(_WORD *)(v54 + 12) = 2082;
      sub_100085FEC();
      uint64_t v140 = sub_1000B20F4(v53, v58, &v141);
      sub_10011C3C4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v60, v61);
      sub_100085E64(v52);
      sub_100086038((void *)&_mh_execute_header, v55, (os_log_type_t)v48, "%{public}s%{public}s", (uint8_t *)v54);
      sub_100086030(v56, v62, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v56);
      sub_10007B974(v54);
      sub_100085EF0();
    }

    else
    {

      uint64_t v63 = sub_100085E64(v52);
    }

    sub_10011BA88(v63, type metadata accessor for SKLogger);
    uint64_t v67 = (void *)sub_10011B30C();
    id v68 = sub_10011B058(v67, "toASDErrorWithMetadata:");
    sub_10011B508();
    ((void (*)(uint64_t))v134)(v54);

    sub_1000E93B4();
    goto LABEL_21;
  }

  sub_1000E9158(v47, (uint64_t)v22, type metadata accessor for ProductRequest);
  id v64 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v64)
  {
    sub_10011B040(v132, v65, type metadata accessor for SKLogger);
    id v69 = (uint64_t *)&v22[*(int *)(v48 + 32)];
    uint64_t v71 = *v69;
    uint64_t v70 = v69[1];
    uint64_t v72 = sub_10007BA3C();
    os_log_type_t v73 = static os_log_type_t.error.getter(v72);
    uint64_t v74 = sub_100085EE8(v70);
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = v73;
    if (sub_1000B22A4(v75))
    {
      uint64_t v77 = sub_10007B9FC(22LL);
      uint64_t v78 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v77 = 136446466;
      uint64_t v22 = (char *)(v77 + 4);
      uint64_t v140 = v78;
      uint64_t v141 = 91LL;
      unint64_t v142 = 0xE100000000000000LL;
      sub_10007BA3C();
      sub_100093624(v71);
      sub_100085F14();
      sub_10007BA44();
      uint64_t v80 = sub_10008620C(v141, v79, &v140);
      sub_10011BE90(v80);
      uint64_t v82 = v81 + 8;
      sub_10011BA48((uint64_t)&v141);
      sub_10007D974(v70);
      sub_10007B980();
      *(_WORD *)(v77 + 12) = 2082;
      uint64_t v141 = sub_10011B048(0xD000000000000034LL, (uint64_t)"Could not get current connection for product request");
      sub_100086194((uint64_t)&v141, v82);
      sub_100086038((void *)&_mh_execute_header, v75, v76, "%{public}s%{public}s", (uint8_t *)v77);
      sub_100086030(v78, v83, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v78);
      sub_10007B974(v77);
      sub_10007BA44();
    }

    else
    {

      sub_100085E64(v70);
    }

    uint64_t v118 = v134;
    sub_100085BC4(v131, type metadata accessor for SKLogger);
    unint64_t v119 = sub_10009BB88();
    uint64_t v120 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v119);
    sub_10011BB7C(v120, v121);
    v118();
    sub_10011B038();
    uint64_t v117 = (uint64_t)v22;
    goto LABEL_20;
  }

  Swift::String v66 = v64;
  if (objc_msgSend(v64, "sk_allowClientOverride"))
  {
    sub_1000E9220((uint64_t)v22, (uint64_t)v14, &qword_10032A3D8);
  }

  else
  {
    uint64_t v84 = sub_1000E953C();
    sub_1000875FC((uint64_t)v14, v85, v86, v84);
  }

  sub_1000E66E0();
  uint64_t v87 = v130;
  sub_1000E9220((uint64_t)v14, v130, &qword_10032A3D8);
  id v88 = v66;
  sub_1000E1A28(v88, v87);
  id v123 = v22;
  v122[1] = v14;
  uint64_t v90 = v89;
  id v138 = v88;
  sub_10011B74C();
  _StringGuts.grow(_:)(17LL);
  swift_bridgeObjectRelease(v142);
  uint64_t v141 = 0x53746375646F7250LL;
  unint64_t v142 = 0xEF5F656369767265LL;
  uint64_t v91 = *(void *)&v22[*(int *)(v48 + 32)];
  sub_10008618C();
  sub_10009C32C(v91);
  sub_100085FB4();
  uint64_t v92 = v141;
  uint64_t v93 = v142;
  id v94 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v94)
  {
    uint64_t v95 = v94;
    sub_100119624(v92, v93, v94);

    uint64_t v96 = sub_1000AAD2C();
    uint64_t v139 = v92;
    uint64_t v97 = v128;
    sub_1000875FC(v128, v98, v99, v96);
    sub_10011B040((uint64_t)v22, v100, type metadata accessor for ProductRequest);
    sub_10011C0DC();
    unint64_t v103 = (v125 + (v102 & ~v101) + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v104 = (v103 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v105 = (v104 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v106 = (v105 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v107 = swift_allocObject(&unk_1002EE3B8, v106 + 16, v101 | 7);
    uint64_t v108 = sub_10011C2EC(v107);
    sub_1000E9158(v108, v109, type metadata accessor for ProductRequest);
    *(void *)(v107 + v103) = v90;
    uint64_t v110 = v127;
    *(void *)(v107 + v104) = v127;
    uint64_t v111 = (void (**)(void))(v107 + v105);
    uint64_t v112 = v135;
    *uint64_t v111 = v134;
    v111[1] = v112;
    uint64_t v113 = (uint64_t *)(v107 + v106);
    *uint64_t v113 = v139;
    v113[1] = v93;
    id v114 = v90;
    swift_unknownObjectRetain(v110);
    sub_10011C1E4();
    sub_10011C20C(v97);
    sub_10011C1F8();

    uint64_t v115 = sub_1000AAEC8();
    sub_1000C65BC(v115, (uint64_t *)&unk_10032BAB0);
    sub_10011C1B8(v116, &qword_10032A3D8);
    uint64_t v117 = (uint64_t)v123;
LABEL_20:
    sub_100085BC4(v117, type metadata accessor for ProductRequest);
LABEL_21:
    sub_100085E98();
    return;
  }

  __break(1u);
}

uint64_t sub_10010B4D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[14] = v14;
  v8[15] = v15;
  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[9] = a4;
  uint64_t v9 = sub_10007B1FC(&qword_10032BD20);
  v8[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[17] = v10;
  v8[18] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10007B1FC(&qword_10032BD28);
  v8[19] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  void v8[20] = v12;
  v8[21] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10010B574, 0LL, 0LL);
}

uint64_t sub_10010B574()
{
  if (qword_100328A88 != -1) {
    swift_once(&qword_100328A88, sub_10009FE6C);
  }
  *(void *)(v0 + 176) = qword_10033E078;
  return sub_100092F20();
}

uint64_t sub_10010B5D0()
{
  return sub_100092F20();
}

uint64_t sub_10010B604()
{
  uint64_t v1 = (void *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(void *)(v0 + 184) = v1;
  uint64_t v2 = sub_10011B9AC(v1);
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v2);
}

uint64_t sub_10010B668()
{
  if (!v1) {
    *(void *)(v0 + 192) = 0LL;
  }
  sub_100093420();
  return sub_1000AA908(v3, v4, v5);
}

id sub_10010B6B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v5 = sub_10011BF78();
    sub_100093D7C(v5);
    sub_10011BFF4();
    *(void *)(v0 + 40) = v1;
    *(void *)(v0 + 48) = v3;
    *(void *)(v0 + 56) = v2;
    unint64_t v6 = sub_10011A9F0();
    dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 40, &type metadata for ProductResponse, v6);
    if (!v4)
    {
      uint64_t v20 = *(void **)(v0 + 88);
      sub_1000930DC();
      sub_100085FB4();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v20 receivedResponse:isa];

      sub_10011BD2C();
      sub_10009C5EC();
      uint64_t v22 = (void *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(void *)(v0 + 200) = v22;
      uint64_t v23 = sub_10011B9AC(v22);
      return (id)_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v23);
    }

    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v24 = v3;
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v11 = *(void (***)(void, void))(v0 + 136);
    sub_10009C5EC();
    v11[1](v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_1000930DC();
    swift_bridgeObjectRelease(v24);
    uint64_t v13 = (void *)sub_10011B30C();
    id v14 = sub_10011B058(v13, "toASDErrorWithMetadata:");
    sub_10011C290();
    sub_10011BFFC();

    sub_1000E93B4();
  }

  else
  {
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v16 = *(void (**)(void))(v0 + 96);
    uint64_t v17 = *(void **)(v0 + 88);
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8LL))(*(void *)(v0 + 144), *(void *)(v0 + 128));
    [v17 receivedResponse:0];
    v16(0LL);
    sub_1000C6730(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  }

  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    uint64_t v19 = result;
    sub_10011B418(*(void *)(v0 + 112), *(void *)(v0 + 120));

    sub_1000931C8();
    sub_100093280();
    return (id)sub_1000B2064(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10010B8BC()
{
  if (!v1) {
    *(void *)(v0 + 192) = 0LL;
  }
  sub_100093420();
  return sub_1000AA908(v3, v4, v5);
}

id sub_10010B908()
{
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  (*(void (**)(void, void))(*(void *)(v0 + 136) + 8LL))(*(void *)(v0 + 144), *(void *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = (void *)sub_100093C54();
  id v6 = sub_10011B058(v5, "toASDErrorWithMetadata:");
  sub_100093C5C();
  sub_10011BFFC();

  sub_10011B038();
  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    uint64_t v8 = result;
    sub_10011B418(*(void *)(v0 + 112), *(void *)(v0 + 120));

    sub_1000931C8();
    sub_100093280();
    return (id)sub_1000AA724(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10010BA84(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v118 = a1;
  uint64_t v119 = a2;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v116 = (uint64_t)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v7);
  uint64_t v117 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v108 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v108 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v108 - v19;
  uint64_t v21 = swift_allocObject(&unk_1002EE6D8, 24LL, 7LL);
  *(void *)(v21 + 16) = a4;
  uint64_t v120 = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v22 = sub_100079604(v9, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v22, (uint64_t)v20, type metadata accessor for SKLogger);
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  os_log_type_t v25 = v24;
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v24);
  if (os_log_type_enabled(v26, v25))
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v115 = v15;
    uint64_t v28 = v27;
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    uint64_t v114 = (uint64_t)v18;
    uint64_t v113 = v12;
    uint64_t v30 = v29;
    *(void *)&__int128 v126 = v29;
    *(_DWORD *)uint64_t v28 = 136446466;
    *(void *)&__int128 v122 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v28 + 4);
    *(_WORD *)(v28 + 12) = 2082;
    *(void *)&__int128 v122 = sub_10007A488(0xD000000000000032LL, 0x80000001002A2BE0LL, (uint64_t *)&v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v28 + 14);
    _os_log_impl((void *)&_mh_execute_header, v26, v25, "%{public}s%{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v31 = v30;
    uint64_t v12 = v113;
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v32 = v28;
    uint64_t v15 = v115;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v20, type metadata accessor for SKLogger);
  uint64_t v33 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  uint64_t v34 = JSONDecoder.init()();
  unint64_t v35 = sub_100119A3C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v122,  &type metadata for ProductPageLookupRequest.ParameterRequest,  v118,  v119,  &type metadata for ProductPageLookupRequest.ParameterRequest,  v35);
  swift_release(v34);
  uint64_t v118 = v22;
  uint64_t v119 = v21;
  __int128 v126 = v122;
  __int128 v127 = v123;
  __int128 v128 = v124;
  uint64_t v36 = v125;
  uint64_t v37 = v122;
  uint64_t v129 = v125;
  uint64_t v38 = (void *)*((void *)&v123 + 1);
  uint64_t v112 = v123;
  uint64_t v39 = (void *)*((void *)&v122 + 1);
  uint64_t v40 = *((void *)&v124 + 1);
  uint64_t v110 = v124;
  uint64_t v41 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  swift_bridgeObjectRetain_n(v39, 3LL);
  swift_bridgeObjectRetain_n(v38, 2LL);
  swift_bridgeObjectRetain_n(v36, 2LL);
  swift_bridgeObjectRetain(v40);
  id v42 = [v41 currentConnection];
  uint64_t v114 = v37;
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v113 = v36;
    uint64_t v111 = v40;
    type metadata accessor for Client(0LL);
    uint64_t v44 = type metadata accessor for ClientOverride(0LL);
    uint64_t v45 = (uint64_t)v117;
    sub_10007D0AC((uint64_t)v117, 1LL, 1LL, v44);
    uint64_t v46 = v43;
    sub_1000E1A28(v46, v45);
    uint64_t v63 = v62;
    swift_bridgeObjectRelease(v39);
    sub_1000E8F9C(v118, (uint64_t)v15, type metadata accessor for SKLogger);
    *(void *)&__int128 v122 = 0LL;
    *((void *)&v122 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(54LL);
    v64._object = (void *)0x80000001002A2C70LL;
    v64._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = v112;
    v65._object = v38;
    String.append(_:)(v65);
    uint64_t v118 = (uint64_t)v38;
    swift_bridgeObjectRelease(v38);
    v66._uint64_t countAndFlagsBits = 0x6C7469746E45202ELL;
    v66._object = (void *)0xEC000000203A6465LL;
    String.append(_:)(v66);
    uint64_t v67 = &selRef_setQueryItems_;
    uint64_t v117 = v46;
    unsigned int v68 = objc_msgSend(v46, "sk_allowClientOverride");
    BOOL v69 = v68 == 0;
    if (v68) {
      uint64_t v70 = 1702195828LL;
    }
    else {
      uint64_t v70 = 0x65736C6166LL;
    }
    if (v69) {
      unint64_t v71 = 0xE500000000000000LL;
    }
    else {
      unint64_t v71 = 0xE400000000000000LL;
    }
    unint64_t v72 = v71;
    String.append(_:)(*(Swift::String *)&v70);
    swift_bridgeObjectRelease(v71);
    v73._uint64_t countAndFlagsBits = 0x656D61726150202ELL;
    v73._object = (void *)0xEE00203A73726574LL;
    String.append(_:)(v73);
    uint64_t v74 = v113;
    v75._uint64_t countAndFlagsBits = Dictionary.description.getter( v113,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    object = v75._object;
    String.append(_:)(v75);
    swift_bridgeObjectRelease(v74);
    uint64_t v77 = swift_bridgeObjectRelease(object);
    unint64_t v78 = *((void *)&v122 + 1);
    uint64_t v109 = v122;
    os_log_type_t v79 = static os_log_type_t.default.getter(v77);
    swift_bridgeObjectRetain_n(v39, 2LL);
    uint64_t v80 = swift_bridgeObjectRetain_n(v78, 2LL);
    uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
    if (os_log_type_enabled(v81, v79))
    {
      uint64_t v82 = swift_slowAlloc(22LL, -1LL);
      uint64_t v108 = v63;
      uint64_t v83 = v82;
      uint64_t v84 = swift_slowAlloc(64LL, -1LL);
      v121[0] = v84;
      *(_DWORD *)uint64_t v83 = 136446466;
      *(void *)&__int128 v122 = 91LL;
      *((void *)&v122 + 1) = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v39);
      uint64_t v115 = v15;
      v85._uint64_t countAndFlagsBits = v114;
      v85._object = v39;
      String.append(_:)(v85);
      v86._uint64_t countAndFlagsBits = 8285LL;
      v86._object = (void *)0xE200000000000000LL;
      String.append(_:)(v86);
      swift_bridgeObjectRelease(v39);
      uint64_t v87 = *((void *)&v122 + 1);
      *(void *)&__int128 v122 = sub_10007A488(v122, *((unint64_t *)&v122 + 1), v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v83 + 4);
      swift_bridgeObjectRelease_n(v39, 2LL);
      swift_bridgeObjectRelease(v87);
      *(_WORD *)(v83 + 12) = 2082;
      swift_bridgeObjectRetain(v78);
      *(void *)&__int128 v122 = sub_10007A488(v109, v78, v121);
      uint64_t v15 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v83 + 14);
      swift_bridgeObjectRelease_n(v78, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v81, v79, "%{public}s%{public}s", (uint8_t *)v83, 0x16u);
      swift_arrayDestroy(v84, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v88 = v84;
      uint64_t v67 = &selRef_setQueryItems_;
      swift_slowDealloc(v88, -1LL, -1LL);
      uint64_t v89 = v83;
      uint64_t v63 = v108;
      uint64_t v90 = v114;
      swift_slowDealloc(v89, -1LL, -1LL);
      swift_bridgeObjectRelease(v78);
      swift_bridgeObjectRelease(v39);
    }

    else
    {

      swift_bridgeObjectRelease_n(v78, 3LL);
      swift_bridgeObjectRelease_n(v39, 3LL);
      uint64_t v90 = v114;
    }

    sub_100085BC4((uint64_t)v15, type metadata accessor for SKLogger);
    id v91 = v63;
    id v92 = v117;
    unsigned __int8 v93 = [v117 v67[97]];
    uint64_t v94 = type metadata accessor for TaskPriority(0LL);
    uint64_t v95 = v116;
    sub_10007D0AC(v116, 1LL, 1LL, v94);
    uint64_t v96 = swift_allocObject(&unk_1002EE700, 176LL, 7LL);
    __int128 v97 = v127;
    *(_OWORD *)(v96 + 104) = v126;
    *(void *)(v96 + 16) = 0LL;
    *(void *)(v96 + 24) = 0LL;
    uint64_t v98 = v112;
    *(void *)(v96 + 32) = v91;
    *(void *)(v96 + 40) = v98;
    uint64_t v99 = v118;
    uint64_t v100 = v110;
    *(void *)(v96 + 48) = v118;
    *(void *)(v96 + 56) = v100;
    uint64_t v101 = v111;
    *(void *)(v96 + 64) = v111;
    *(void *)(v96 + 72) = v90;
    uint64_t v102 = v113;
    *(void *)(v96 + 80) = v39;
    *(void *)(v96 + 88) = v102;
    *(_BYTE *)(v96 + 96) = v93;
    *(_OWORD *)(v96 + 120) = v97;
    *(_OWORD *)(v96 + 136) = v128;
    *(void *)(v96 + 152) = v129;
    *(void *)(v96 + 160) = sub_10011AF80;
    uint64_t v103 = v119;
    *(void *)(v96 + 168) = v119;
    id v104 = v91;
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v102);
    swift_retain(v103);
    sub_100084100(v95);
    uint64_t v106 = v105;

    uint64_t v107 = v102;
    uint64_t v52 = v103;
    swift_bridgeObjectRelease(v107);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v101);
    swift_bridgeObjectRelease(v99);

    swift_release(v106);
    sub_100085298(v95, (uint64_t *)&unk_10032BAB0);
  }

  else
  {
    sub_100119A78(&v126);
    swift_bridgeObjectRelease_n(v38, 2LL);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease_n(v39, 2LL);
    swift_bridgeObjectRelease_n(v36, 2LL);
    sub_1000E8F9C(v118, (uint64_t)v12, type metadata accessor for SKLogger);
    os_log_type_t v48 = static os_log_type_t.error.getter(v47);
    uint64_t v49 = swift_bridgeObjectRetain_n(v39, 2LL);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    BOOL v51 = os_log_type_enabled(v50, v48);
    uint64_t v52 = v119;
    if (v51)
    {
      uint64_t v53 = swift_slowAlloc(22LL, -1LL);
      uint64_t v54 = swift_slowAlloc(64LL, -1LL);
      v121[0] = v54;
      *(_DWORD *)uint64_t v53 = 136446466;
      *(void *)&__int128 v122 = 91LL;
      *((void *)&v122 + 1) = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v39);
      v55._uint64_t countAndFlagsBits = v114;
      v55._object = v39;
      String.append(_:)(v55);
      v56._uint64_t countAndFlagsBits = 8285LL;
      v56._object = (void *)0xE200000000000000LL;
      String.append(_:)(v56);
      swift_bridgeObjectRelease(v39);
      uint64_t v57 = *((void *)&v122 + 1);
      *(void *)&__int128 v122 = sub_10007A488(v122, *((unint64_t *)&v122 + 1), v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v53 + 4);
      swift_bridgeObjectRelease_n(v39, 2LL);
      swift_bridgeObjectRelease(v57);
      *(_WORD *)(v53 + 12) = 2082;
      *(void *)&__int128 v122 = sub_10007A488(0xD000000000000029LL, 0x80000001002A2C40LL, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, (char *)&v122 + 8, v53 + 14);
      _os_log_impl((void *)&_mh_execute_header, v50, v48, "%{public}s%{public}s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_bridgeObjectRelease(v39);
    }

    else
    {

      swift_bridgeObjectRelease_n(v39, 3LL);
    }

    sub_100085BC4((uint64_t)v12, type metadata accessor for SKLogger);
    unint64_t v58 = sub_10009BB88();
    uint64_t v59 = swift_allocError(&type metadata for StoreKitInternalError, v58, 0LL, 0LL);
    *uint64_t v60 = 1;
    uint64_t v61 = (void *)_convertErrorToNSError(_:)(v59);
    ((void (**)(void, void, void *))v120)[2](v120, 0LL, v61);

    swift_errorRelease(v59);
  }

  swift_release(v52);
  _Block_release(v120);
}

void StoreKitServiceConnection.lookupProduct(withParametersProductRequest:reply:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v111 = v4;
  uint64_t v112 = v5;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000860EC();
  uint64_t v106 = v7;
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_1000860EC();
  uint64_t v108 = v9;
  uint64_t v10 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v11);
  sub_1000D4F0C();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v109 = (uint64_t)v99 - v16;
  sub_100086200();
  __chkstk_darwin(v17);
  sub_1000DB3F4();
  uint64_t v107 = v18;
  sub_100086200();
  __chkstk_darwin(v19);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v20 = sub_100079604(v10, (uint64_t)qword_10033E1A8);
  sub_10011B040(v20, v21, type metadata accessor for SKLogger);
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  os_log_type_t v24 = v23;
  os_log_type_t v25 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v26 = v24;
  BOOL v27 = sub_10009396C(v25);
  uint64_t v28 = (char *)&type metadata for Any;
  uint64_t v110 = v3;
  if (v27)
  {
    uint64_t v29 = sub_10007B9FC(22LL);
    uint64_t v30 = sub_10007B9FC(64LL);
    uint64_t v105 = v14;
    uint64_t v31 = v20;
    uint64_t v32 = v1;
    uint64_t v33 = v30;
    *(void *)&__int128 v118 = v30;
    *(_DWORD *)uint64_t v29 = 136446466;
    *(void *)&__int128 v114 = sub_10007BA24(v30, v34, (uint64_t *)&v118);
    sub_1000E98A0((uint64_t)&v114, (uint64_t)&v114 + 8);
    *(_WORD *)(v29 + 12) = 2082;
    uint64_t v28 = (char *)(v29 + 14);
    sub_10011B248();
    *(void *)&__int128 v114 = sub_10011C044(v35 + 28, (uint64_t)"lookupProduct(withParametersProductRequest:reply:)");
    sub_10011C3A4((uint64_t)&v114, (uint64_t)&v114 + 8);
    sub_100086038((void *)&_mh_execute_header, v25, v26, "%{public}s%{public}s", (uint8_t *)v29);
    sub_100086030(v33, v36, (uint64_t)&type metadata for Any + 8);
    uint64_t v37 = v33;
    uint64_t v1 = v32;
    uint64_t v20 = v31;
    sub_10007B974(v37);
    sub_10007B974(v29);
  }

  sub_10011B354(v38, type metadata accessor for SKLogger);
  uint64_t v39 = type metadata accessor for JSONDecoder(0LL);
  sub_100093D7C(v39);
  JSONDecoder.init()();
  unint64_t v40 = sub_100119A3C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v114,  &type metadata for ProductPageLookupRequest.ParameterRequest,  v111,  v112,  &type metadata for ProductPageLookupRequest.ParameterRequest,  v40);
  sub_10009C5EC();
  uint64_t v41 = (os_log_s *)v20;
  __int128 v118 = v114;
  __int128 v119 = v115;
  __int128 v120 = v116;
  uint64_t v42 = v117;
  uint64_t v121 = v117;
  __int128 v43 = v115;
  uint64_t v44 = *((void *)&v114 + 1);
  uint64_t v112 = v114;
  uint64_t v45 = *((void *)&v116 + 1);
  uint64_t v104 = v116;
  uint64_t v46 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  swift_bridgeObjectRetain_n(v44, 3LL);
  sub_100085EE8(*((uint64_t *)&v43 + 1));
  sub_100085EE8(v42);
  sub_10008600C();
  if ([v46 currentConnection])
  {
    uint64_t v105 = v42;
    uint64_t v111 = *((void *)&v43 + 1);
    uint64_t v103 = v43;
    sub_1000E66E0();
    uint64_t v47 = sub_1000E953C();
    uint64_t v48 = v108;
    id v51 = sub_10011BD60(v108, v49, v50, v47);
    sub_1000E1A28(v51, v48);
    id v101 = v65;
    uint64_t v108 = v45;
    uint64_t v109 = v1;
    sub_1000930DC();
    sub_10011BD10((uint64_t)v41, v66, type metadata accessor for SKLogger);
    sub_10011B75C();
    _StringGuts.grow(_:)(54LL);
    sub_1000862B8();
    sub_1000D4F2C(22LL, v67);
    sub_1000935BC(v103);
    sub_100085EF0();
    v68._uint64_t countAndFlagsBits = 0x6C7469746E45202ELL;
    v68._object = (void *)0xEC000000203A6465LL;
    String.append(_:)(v68);
    id v102 = v51;
    else {
      uint64_t v71 = 0x65736C6166LL;
    }
    sub_100093624(v71);
    sub_10007BA44();
    sub_10011B560();
    unint64_t v72 = v28 + 8;
    uint64_t v73 = v105;
    v74._uint64_t countAndFlagsBits = Dictionary.description.getter( v105,  &type metadata for AnyHashable,  v28 + 8,  &protocol witness table for AnyHashable);
    String.append(_:)(v74);
    sub_1000AABA8();
    uint64_t v75 = sub_10007BA44();
    __int128 v76 = v114;
    os_log_type_t v77 = static os_log_type_t.default.getter(v75);
    sub_100085EE8(v44);
    sub_100085EE8(*((uint64_t *)&v76 + 1));
    unint64_t v78 = (os_log_s *)sub_100093B00();
    if (sub_10011B8CC(v78))
    {
      os_log_type_t v79 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v80 = sub_10007B9FC(64LL);
      v113[0] = v80;
      *(_DWORD *)os_log_type_t v79 = 136446466;
      sub_10011C2F8((uint64_t)(v79 + 4));
      sub_1000930E4();
      uint64_t v100 = v72;
      sub_10009C350(v112);
      sub_100085F14();
      sub_1000930DC();
      *(void *)&__int128 v114 = sub_10008620C(v114, v81, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, (char *)&v114 + 8, v99[1]);
      sub_10007D974(v44);
      sub_10007B980();
      sub_100093CA4();
      sub_10008600C();
      *(void *)&__int128 v114 = sub_10011BF68(v76, v82, v113);
      sub_100086194((uint64_t)&v114, (uint64_t)&v114 + 8);
      sub_100085E64(*((uint64_t *)&v76 + 1));
      sub_100086038((void *)&_mh_execute_header, v78, v77, "%{public}s%{public}s", v79);
      swift_arrayDestroy(v80, 2LL, v100);
      sub_10007B974(v80);
      sub_10007B974((uint64_t)v79);
      sub_100086004();
      sub_1000930DC();
    }

    else
    {

      sub_100085E64(*((uint64_t *)&v76 + 1));
      sub_100085E64(v44);
    }

    sub_100085BC4(v107, type metadata accessor for SKLogger);
    id v83 = v101;
    uint64_t v84 = v102;
    unsigned __int8 v85 = sub_100085E6C((uint64_t)v83, "sk_allowClientOverride");
    uint64_t v86 = sub_1000AAD2C();
    uint64_t v87 = v106;
    sub_1000875FC(v106, v88, v89, v86);
    uint64_t v90 = sub_1000AA314((uint64_t)&unk_1002EE3E0, 176LL);
    __int128 v91 = v119;
    *(_OWORD *)(v90 + 104) = v118;
    *(void *)(v90 + 16) = 0LL;
    *(void *)(v90 + 24) = 0LL;
    uint64_t v92 = v103;
    *(void *)(v90 + 32) = v83;
    *(void *)(v90 + 40) = v92;
    uint64_t v93 = v104;
    *(void *)(v90 + 48) = v111;
    *(void *)(v90 + 56) = v93;
    uint64_t v94 = v112;
    *(void *)(v90 + 64) = v108;
    *(void *)(v90 + 72) = v94;
    *(void *)(v90 + 80) = v44;
    *(void *)(v90 + 88) = v73;
    *(_BYTE *)(v90 + 96) = v85;
    *(_OWORD *)(v90 + 120) = v91;
    *(_OWORD *)(v90 + 136) = v120;
    uint64_t v96 = v109;
    uint64_t v95 = v110;
    *(void *)(v90 + 152) = v121;
    *(void *)(v90 + 160) = v95;
    *(void *)(v90 + 168) = v96;
    id v97 = v83;
    sub_100085FEC();
    sub_1000B220C();
    sub_1000930E4();
    sub_1000AABA0();
    swift_retain(v96);
    sub_10011C20C(v87);

    sub_1000AABA8();
    sub_1000930DC();
    sub_10009C494();
    sub_100085EF0();

    uint64_t v98 = sub_1000AAEC8();
    sub_10011C2C4(v98, (uint64_t *)&unk_10032BAB0);
  }

  else
  {
    sub_100119A78(&v118);
    sub_10007D974(*((uint64_t *)&v43 + 1));
    sub_100086004();
    sub_10007D974(v44);
    sub_10007D974(v42);
    sub_10011B040((uint64_t)v41, v52, type metadata accessor for SKLogger);
    static os_log_type_t.error.getter(v53);
    uint64_t v54 = sub_100085EE8(v44);
    Swift::String v55 = (os_log_s *)Logger.logObject.getter(v54);
    if (sub_10011B330(v55))
    {
      Swift::String v56 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v57 = sub_10007B9FC(64LL);
      v113[0] = v57;
      *(_DWORD *)Swift::String v56 = 136446466;
      *(void *)&__int128 v114 = 91LL;
      *((void *)&v114 + 1) = 0xE100000000000000LL;
      sub_1000930E4();
      sub_10009C350(v112);
      sub_100085F14();
      sub_1000930DC();
      *(void *)&__int128 v114 = sub_10008620C(v114, v58, v113);
      sub_10011B1D8((uint64_t)&v114);
      sub_10007D974(v44);
      sub_10007B980();
      sub_10011B73C();
      sub_10011B248();
      *(void *)&__int128 v114 = sub_10007A488(v59 + 19, 0x80000001002A2C40LL, v113);
      sub_100086194((uint64_t)&v114, (uint64_t)&v114 + 8);
      sub_100086038((void *)&_mh_execute_header, v41, (os_log_type_t)v45, "%{public}s%{public}s", v56);
      sub_100086030(v57, v60, (uint64_t)(v28 + 8));
      sub_10007B974(v57);
      sub_10007B974((uint64_t)v56);
      sub_1000930DC();
    }

    else
    {

      sub_100085E64(v44);
    }

    sub_100085BC4(v109, type metadata accessor for SKLogger);
    unint64_t v61 = sub_10009BB88();
    uint64_t v62 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v61);
    uint64_t v64 = sub_10011B7DC(v62, v63);
    v110(v64);
    swift_errorRelease(v41);
  }

  sub_100085E98();
}

uint64_t sub_10010D1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[7] = a5;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  v7[10] = v8;
  v7[11] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)swift_task_alloc(dword_10032B724);
  v7[12] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_10010D26C;
  return sub_1000EF5F4();
}

uint64_t sub_10010D26C()
{
  if (v1)
  {
    uint64_t v3 = (void *)v2[7];
    v2[15] = *v3;
    v2[16] = v3[1];
  }

  else
  {
    v2[14] = v0;
  }

  sub_100093420();
  return sub_10009C2D4();
}

uint64_t sub_10010D2C4()
{
  sub_10011BFA0();
  return sub_1000AA42C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_10010D304( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v29 = *(void *)(v26 + 128);
  uint64_t v30 = *(void *)(v26 + 104);
  uint64_t v31 = sub_100079604(*(void *)(v26 + 80), (uint64_t)qword_10033E1A8);
  sub_10011BB10(v31, v32, type metadata accessor for SKLogger);
  sub_10011B5AC();
  unint64_t v33 = a15;
  *(void *)(v26 + 16) = a14;
  *(void *)(v26 + 24) = v33;
  v34._uint64_t countAndFlagsBits = sub_10011BBB8();
  String.append(_:)(v34);
  *(void *)(v26 + 32) = v30;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v35 = sub_10011C2D8();
  uint64_t v37 = *(void *)(v26 + 16);
  uint64_t v36 = *(void *)(v26 + 24);
  uint64_t v38 = (void *)static os_log_type_t.error.getter(v35);
  sub_100085EE8(v29);
  sub_100085EE8(v36);
  uint64_t v39 = (os_log_s *)sub_100093C38();
  os_log_type_t v40 = v38;
  BOOL v41 = sub_1000B22A4(v39);
  uint64_t v42 = *(void *)(v26 + 128);
  if (v41)
  {
    uint64_t v43 = *(void *)(v26 + 120);
    uint64_t v52 = v37;
    uint64_t v44 = sub_10007B9FC(22LL);
    uint64_t v45 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v44 = 136446466;
    a13 = v45;
    a14 = 91LL;
    a15 = 0xE100000000000000LL;
    sub_1000AABA0();
    sub_1000AAB84(v43);
    sub_100085F14();
    sub_1000AABA8();
    *(void *)(v26 + 40) = sub_10008620C(a14, v46, &a13);
    uint64_t v38 = (void *)(v26 + 48);
    sub_1000C6004(v26 + 40, v26 + 48);
    sub_10007B980();
    sub_10007D974(v42);
    *(_WORD *)(v44 + 12) = 2082;
    sub_100085FEC();
    *(void *)(v26 + 48) = sub_1000B20F4(v52, v47, &a13);
    sub_100086194(v26 + 48, v26 + 56);
    sub_100085E64(v36);
    sub_100086038((void *)&_mh_execute_header, v39, v40, "%{public}s%{public}s", (uint8_t *)v44);
    sub_100086030(v45, v48, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v45);
    sub_10007B974(v44);

    sub_100085EF0();
  }

  else
  {
    sub_10007D974(*(void *)(v26 + 128));
    sub_100085E64(v36);
  }

  sub_100085BC4(*(void *)(v26 + 88), type metadata accessor for SKLogger);
  uint64_t v49 = (void *)sub_100093C54();
  id v50 = sub_10011B058(v49, "toASDErrorWithMetadata:");
  sub_100093C5C();
  sub_10011C238();

  sub_10011B038();
  sub_10011BFA0();
  return sub_1000AA2C4(*(uint64_t (**)(void))(v26 + 8));
}

void sub_10010D57C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    _convertErrorToNSError(_:)(a2);
  }
  uint64_t v2 = sub_10009C714();
  uint64_t v5 = v3;
  v4(v2);
  sub_10011BBDC(v5);
}

void sub_10010D5C8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v147 = a1;
  id v148 = a2;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v7 = &v131[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_10007B1FC(&qword_10032A3D8);
  __chkstk_darwin(v8);
  unint64_t v142 = &v131[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v149 = (char *)type metadata accessor for ProductPageLookupRequest.URLRequest(0LL);
  uint64_t v136 = *((void *)v149 - 1);
  uint64_t v10 = __chkstk_darwin(v149);
  id v138 = &v131[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = &v131[-v13];
  uint64_t v137 = v15;
  __chkstk_darwin(v12);
  uint64_t v17 = &v131[-v16];
  uint64_t v18 = type metadata accessor for SKLogger(0LL);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v143 = &v131[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v141 = &v131[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v139 = &v131[-v24];
  uint64_t v25 = __chkstk_darwin(v23);
  id v144 = &v131[-v26];
  __chkstk_darwin(v25);
  uint64_t v28 = &v131[-v27];
  uint64_t v29 = swift_allocObject(&unk_1002EE688, 24LL, 7LL);
  *(void *)(v29 + 16) = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v146 = sub_100079604(v18, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v146, (uint64_t)v28, type metadata accessor for SKLogger);
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  os_log_type_t v32 = v31;
  unint64_t v33 = (os_log_s *)Logger.logObject.getter(v31);
  BOOL v34 = os_log_type_enabled(v33, v32);
  uint64_t v145 = v29;
  uint64_t v140 = v7;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc(22LL, -1LL);
    uint64_t v36 = swift_slowAlloc(64LL, -1LL);
    uint64_t v150 = v36;
    *(_DWORD *)uint64_t v35 = 136446466;
    uint64_t v152 = sub_10007A488(0LL, 0xE000000000000000LL, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v35 + 4);
    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v152 = sub_10007A488(0xD00000000000002BLL, 0x80000001002A2C90LL, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v35 + 14);
    _os_log_impl((void *)&_mh_execute_header, v33, v32, "%{public}s%{public}s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v28, type metadata accessor for SKLogger);
  uint64_t v37 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  uint64_t v38 = JSONDecoder.init()();
  sub_10007ACCC( &qword_10032BBB8,  type metadata accessor for ProductPageLookupRequest.URLRequest,  (uint64_t)&protocol conformance descriptor for ProductPageLookupRequest.URLRequest);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v14, v149, v147, v148, v149, v39);
  swift_release(v38);
  sub_1000E9158((uint64_t)v14, (uint64_t)v17, type metadata accessor for ProductPageLookupRequest.URLRequest);
  id v40 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v40)
  {
    sub_1000E8F9C(v146, (uint64_t)v143, type metadata accessor for SKLogger);
    uint64_t v46 = *((void *)v17 + 2);
    uint64_t v45 = (void *)*((void *)v17 + 3);
    uint64_t v47 = swift_bridgeObjectRetain(v45);
    os_log_type_t v48 = static os_log_type_t.error.getter(v47);
    uint64_t v49 = swift_bridgeObjectRetain_n(v45, 2LL);
    id v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = v48;
    if (os_log_type_enabled(v50, v48))
    {
      uint64_t v52 = swift_slowAlloc(22LL, -1LL);
      uint64_t v53 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v52 = 136446466;
      uint64_t v150 = 91LL;
      unint64_t v151 = 0xE100000000000000LL;
      uint64_t v152 = v53;
      swift_bridgeObjectRetain(v45);
      v54._uint64_t countAndFlagsBits = v46;
      v54._object = v45;
      String.append(_:)(v54);
      v55._uint64_t countAndFlagsBits = 8285LL;
      v55._object = (void *)0xE200000000000000LL;
      String.append(_:)(v55);
      swift_bridgeObjectRelease(v45);
      unint64_t v56 = v151;
      uint64_t v150 = sub_10007A488(v150, v151, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v52 + 4);
      swift_bridgeObjectRelease_n(v45, 2LL);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v52 + 12) = 2082;
      uint64_t v150 = sub_10007A488(0xD000000000000029LL, 0x80000001002A2C40LL, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v52 + 14);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "%{public}s%{public}s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_bridgeObjectRelease(v45);
    }

    else
    {

      swift_bridgeObjectRelease_n(v45, 3LL);
    }

    uint64_t v57 = (void (*)(uint64_t, uint64_t))v145;
    sub_100085BC4((uint64_t)v143, type metadata accessor for SKLogger);
    unint64_t v58 = sub_10009BB88();
    uint64_t v59 = swift_allocError(&type metadata for StoreKitInternalError, v58, 0LL, 0LL);
    *uint64_t v60 = 1;
    unint64_t v61 = (void *)_convertErrorToNSError(_:)(v59);
    (*((void (**)(_BYTE *, void, void *))a4 + 2))(a4, 0LL, v61);

    swift_errorRelease(v59);
    uint64_t v62 = (uint64_t)v17;
    goto LABEL_11;
  }

  BOOL v41 = v40;
  type metadata accessor for Client(0LL);
  uint64_t v42 = type metadata accessor for ClientOverride(0LL);
  uint64_t v43 = v142;
  sub_10007D0AC((uint64_t)v142, 1LL, 1LL, v42);
  id v44 = v41;
  sub_1000E1A28(v44, (uint64_t)v43);
  uint64_t v64 = v63;
  unsigned __int8 v65 = objc_msgSend(v44, "sk_allowClientOverride");
  id v148 = v44;
  if ((v65 & 1) == 0)
  {
    sub_1000E8F9C(v146, (uint64_t)v141, type metadata accessor for SKLogger);
    uint64_t v90 = v17;
    uint64_t v91 = *((void *)v17 + 2);
    uint64_t v149 = v90;
    uint64_t v92 = (void *)*((void *)v90 + 3);
    uint64_t v93 = swift_bridgeObjectRetain(v92);
    os_log_type_t v94 = static os_log_type_t.error.getter(v93);
    uint64_t v95 = swift_bridgeObjectRetain_n(v92, 2LL);
    uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
    os_log_type_t v97 = v94;
    if (os_log_type_enabled(v96, v94))
    {
      uint64_t v98 = swift_slowAlloc(22LL, -1LL);
      uint64_t v99 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v98 = 136446466;
      uint64_t v150 = 91LL;
      unint64_t v151 = 0xE100000000000000LL;
      uint64_t v152 = v99;
      swift_bridgeObjectRetain(v92);
      v100._uint64_t countAndFlagsBits = v91;
      v100._object = v92;
      String.append(_:)(v100);
      v101._uint64_t countAndFlagsBits = 8285LL;
      v101._object = (void *)0xE200000000000000LL;
      String.append(_:)(v101);
      swift_bridgeObjectRelease(v92);
      unint64_t v102 = v151;
      uint64_t v150 = sub_10007A488(v150, v151, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v98 + 4);
      swift_bridgeObjectRelease_n(v92, 2LL);
      swift_bridgeObjectRelease(v102);
      *(_WORD *)(v98 + 12) = 2082;
      uint64_t v150 = sub_10007A488(0xD00000000000002DLL, 0x80000001002A2CF0LL, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v98 + 14);
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "%{public}s%{public}s", (uint8_t *)v98, 0x16u);
      swift_arrayDestroy(v99, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1LL, -1LL);
      swift_slowDealloc(v98, -1LL, -1LL);
      swift_bridgeObjectRelease(v92);
    }

    else
    {

      swift_bridgeObjectRelease_n(v92, 3LL);
    }

    uint64_t v57 = (void (*)(uint64_t, uint64_t))v145;
    sub_100085BC4((uint64_t)v141, type metadata accessor for SKLogger);
    uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
    uint64_t v127 = v126;
    id v128 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v129 = sub_10011947C(v125, v127, 512LL, 0LL);
    uint64_t v130 = (void *)_convertErrorToNSError(_:)(v129);
    (*((void (**)(_BYTE *, void, void *))a4 + 2))(a4, 0LL, v130);

    uint64_t v62 = (uint64_t)v149;
LABEL_11:
    sub_100085BC4(v62, type metadata accessor for ProductPageLookupRequest.URLRequest);
    goto LABEL_12;
  }

  uint64_t v143 = a4;
  uint64_t v66 = *(void *)v17;
  uint64_t v67 = (_BYTE *)*((void *)v17 + 1);
  Swift::String v68 = (_BYTE *)*((void *)v17 + 5);
  uint64_t v133 = *((void *)v17 + 4);
  uint64_t v134 = v66;
  uint64_t v69 = (char *)*((void *)v17 + 3);
  uint64_t v147 = *((void *)v17 + 2);
  id v135 = v64;
  id v144 = v67;
  swift_bridgeObjectRetain(v67);
  unint64_t v142 = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v69);
  uint64_t v141 = (_BYTE *)ProductPageLookupRequest.URLRequest.parameters.getter();
  unsigned int v132 = objc_msgSend(v44, "sk_allowClientOverride");
  uint64_t v70 = v139;
  sub_1000E8F9C(v146, (uint64_t)v139, type metadata accessor for SKLogger);
  uint64_t v150 = 0LL;
  unint64_t v151 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(44LL);
  uint64_t v71 = swift_bridgeObjectRelease(v151);
  uint64_t v150 = 0xD00000000000001ALL;
  unint64_t v151 = 0x80000001002A2D20LL;
  v72._uint64_t countAndFlagsBits = URL.absoluteString.getter(v71);
  object = v72._object;
  String.append(_:)(v72);
  swift_bridgeObjectRelease(object);
  v74._uint64_t countAndFlagsBits = 0x656D61726150202ELL;
  v74._object = (void *)0xEE00203A73726574LL;
  String.append(_:)(v74);
  uint64_t v75 = ProductPageLookupRequest.URLRequest.parameters.getter();
  v76._uint64_t countAndFlagsBits = Dictionary.description.getter( v75,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  os_log_type_t v77 = v76._object;
  String.append(_:)(v76);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v77);
  uint64_t v79 = v150;
  unint64_t v78 = v151;
  uint64_t v80 = swift_bridgeObjectRetain(v69);
  LOBYTE(v75) = static os_log_type_t.default.getter(v80);
  swift_bridgeObjectRetain_n(v69, 2LL);
  uint64_t v81 = swift_bridgeObjectRetain_n(v78, 2LL);
  uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
  os_log_type_t v83 = v75;
  if (os_log_type_enabled(v82, (os_log_type_t)v75))
  {
    uint64_t v84 = swift_slowAlloc(22LL, -1LL);
    uint64_t v146 = v79;
    uint64_t v85 = v84;
    uint64_t v86 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v85 = 136446466;
    uint64_t v149 = (char *)&type metadata for Any + 8;
    uint64_t v150 = 91LL;
    unint64_t v151 = 0xE100000000000000LL;
    uint64_t v152 = v86;
    swift_bridgeObjectRetain(v69);
    v87._uint64_t countAndFlagsBits = v147;
    v87._object = v69;
    String.append(_:)(v87);
    v88._uint64_t countAndFlagsBits = 8285LL;
    v88._object = (void *)0xE200000000000000LL;
    String.append(_:)(v88);
    swift_bridgeObjectRelease(v69);
    unint64_t v89 = v151;
    uint64_t v150 = sub_10007A488(v150, v151, &v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v85 + 4);
    swift_bridgeObjectRelease_n(v69, 2LL);
    swift_bridgeObjectRelease(v89);
    *(_WORD *)(v85 + 12) = 2082;
    swift_bridgeObjectRetain(v78);
    uint64_t v150 = sub_10007A488(v146, v78, &v152);
    uint64_t v70 = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v85 + 14);
    swift_bridgeObjectRelease_n(v78, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "%{public}s%{public}s", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy(v86, 2LL, v149);
    swift_slowDealloc(v86, -1LL, -1LL);
    swift_slowDealloc(v85, -1LL, -1LL);
    swift_bridgeObjectRelease(v78);
    swift_bridgeObjectRelease(v69);
  }

  else
  {

    swift_bridgeObjectRelease_n(v78, 3LL);
    swift_bridgeObjectRelease_n(v69, 3LL);
  }

  uint64_t v57 = (void (*)(uint64_t, uint64_t))v145;
  uint64_t v103 = (uint64_t)v140;
  uint64_t v105 = v136;
  uint64_t v104 = v137;
  sub_100085BC4((uint64_t)v70, type metadata accessor for SKLogger);
  uint64_t v106 = type metadata accessor for TaskPriority(0LL);
  sub_10007D0AC(v103, 1LL, 1LL, v106);
  uint64_t v107 = v138;
  sub_1000E8F9C((uint64_t)v17, (uint64_t)v138, type metadata accessor for ProductPageLookupRequest.URLRequest);
  uint64_t v108 = *(unsigned __int8 *)(v105 + 80);
  uint64_t v109 = (v108 + 97) & ~v108;
  unint64_t v110 = (v104 + v109 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v111 = swift_allocObject(&unk_1002EE6B0, v110 + 16, v108 | 7);
  *(void *)(v111 + 16) = 0LL;
  *(void *)(v111 + 24) = 0LL;
  uint64_t v112 = v134;
  uint64_t v113 = v135;
  *(void *)(v111 + 32) = v135;
  *(void *)(v111 + 40) = v112;
  __int128 v114 = v144;
  uint64_t v115 = v133;
  *(void *)(v111 + 48) = v144;
  *(void *)(v111 + 56) = v115;
  __int128 v116 = v142;
  uint64_t v117 = v147;
  *(void *)(v111 + 64) = v142;
  *(void *)(v111 + 72) = v117;
  *(void *)(v111 + 80) = v69;
  uint64_t v149 = v69;
  __int128 v118 = v141;
  *(void *)(v111 + 88) = v141;
  *(_BYTE *)(v111 + 96) = v132;
  sub_1000E9158((uint64_t)v107, v111 + v109, type metadata accessor for ProductPageLookupRequest.URLRequest);
  __int128 v119 = (void (**)(uint64_t, uint64_t))(v111 + v110);
  *__int128 v119 = sub_10011AF80;
  v119[1] = v57;
  id v120 = v113;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRetain(v116);
  uint64_t v121 = v149;
  swift_bridgeObjectRetain(v149);
  swift_bridgeObjectRetain(v118);
  swift_retain(v57);
  uint64_t v122 = (uint64_t)v140;
  sub_100084100((uint64_t)v140);
  uint64_t v124 = v123;

  swift_bridgeObjectRelease(v118);
  swift_bridgeObjectRelease(v121);
  swift_bridgeObjectRelease(v116);
  swift_bridgeObjectRelease(v114);

  swift_release(v124);
  sub_100085298(v122, (uint64_t *)&unk_10032BAB0);
  sub_100085BC4((uint64_t)v17, type metadata accessor for ProductPageLookupRequest.URLRequest);
  a4 = v143;
LABEL_12:
  swift_release(v57);
  _Block_release(a4);
}

void StoreKitServiceConnection.lookupProduct(withURLProductRequest:reply:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v159 = v5;
  uint64_t v160 = v6;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_10011BC90(v8, v144);
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v9);
  uint64_t v11 = sub_10011BAB8(v10, v144);
  uint64_t v162 = (char *)type metadata accessor for ProductPageLookupRequest.URLRequest(v11);
  uint64_t v148 = *((void *)v162 - 1);
  sub_10011B904();
  __chkstk_darwin(v12);
  uint64_t v150 = (char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10011B8F8();
  __chkstk_darwin(v14);
  sub_10011BED4();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v144 - v16;
  os_log_type_t v18 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v19);
  sub_1000862F4();
  id v161 = v20;
  sub_100086200();
  __chkstk_darwin(v21);
  uint64_t v155 = (char *)&v144 - v22;
  sub_100086200();
  __chkstk_darwin(v23);
  uint64_t v153 = (char *)&v144 - v24;
  sub_100086200();
  __chkstk_darwin(v25);
  unint64_t v151 = (char *)&v144 - v26;
  sub_100086200();
  __chkstk_darwin(v27);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v28 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v158 = sub_10011BE08(v28, (uint64_t)qword_10033E1A8);
  sub_10011B040(v158, v29, type metadata accessor for SKLogger);
  static os_log_type_t.default.getter(v30);
  uint64_t v31 = (os_log_s *)sub_10011BA40();
  os_log_type_t v32 = v18;
  BOOL v33 = sub_10011C02C(v31);
  unint64_t v156 = v4;
  uint64_t v157 = v2;
  if (v33)
  {
    uint64_t v34 = sub_10007B9FC(22LL);
    uint64_t v35 = sub_10007B9FC(64LL);
    uint64_t v163 = v35;
    *(_DWORD *)uint64_t v34 = 136446466;
    uint64_t v165 = sub_10007BA24(v35, v36, &v163);
    uint64_t v2 = v166;
    sub_1000E98A0((uint64_t)&v165, (uint64_t)v166);
    *(_WORD *)(v34 + 12) = 2082;
    uint64_t v17 = (char *)(v34 + 14);
    uint64_t v165 = sub_10011B048(0xD00000000000002BLL, (uint64_t)"lookupProduct(withURLProductRequest:reply:)");
    sub_10011C3B0((uint64_t)&v165, (uint64_t)v166);
    sub_100086038((void *)&_mh_execute_header, v31, v32, "%{public}s%{public}s", (uint8_t *)v34);
    sub_100086030(v35, v37, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v35);
    sub_10007B974(v34);
  }

  sub_10011B354(v38, type metadata accessor for SKLogger);
  uint64_t v39 = type metadata accessor for JSONDecoder(0LL);
  sub_100093D7C(v39);
  JSONDecoder.init()();
  sub_10007ACCC( &qword_10032BBB8,  type metadata accessor for ProductPageLookupRequest.URLRequest,  (uint64_t)&protocol conformance descriptor for ProductPageLookupRequest.URLRequest);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v0, v162, v159, v160, v162, v40);
  sub_10009C5EC();
  sub_1000E9158((uint64_t)v0, (uint64_t)v17, type metadata accessor for ProductPageLookupRequest.URLRequest);
  if ([(id)objc_opt_self(NSXPCConnection) currentConnection])
  {
    sub_1000E66E0();
    uint64_t v42 = sub_1000E953C();
    os_log_type_t v43 = v154;
    id v46 = sub_10011BD60(v154, v44, v45, v42);
    sub_10011C1D8(v46);
    uint64_t v69 = (void *)v68;
    if (sub_100085E6C(v68, "sk_allowClientOverride"))
    {
      uint64_t v72 = *(void *)v17;
      uint64_t v73 = *((void *)v17 + 1);
      Swift::String v74 = (char *)*((void *)v17 + 5);
      uint64_t v146 = *((void *)v17 + 4);
      uint64_t v147 = v72;
      uint64_t v75 = *((void *)v17 + 3);
      uint64_t v160 = *((void *)v17 + 2);
      uint64_t v153 = v69;
      uint64_t v159 = v73;
      swift_bridgeObjectRetain(v73);
      uint64_t v155 = v74;
      sub_10008600C();
      sub_1000AA78C();
      uint64_t v154 = ProductPageLookupRequest.URLRequest.parameters.getter();
      id v161 = v46;
      unsigned int v145 = sub_100085E6C(v154, "sk_allowClientOverride");
      sub_10011BD38(v158, v76, type metadata accessor for SKLogger);
      uint64_t v163 = 0LL;
      unint64_t v164 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(44LL);
      swift_bridgeObjectRelease(v164);
      sub_1000AB058();
      uint64_t v163 = 0xD00000000000001ALL;
      unint64_t v164 = v77;
      v78._uint64_t countAndFlagsBits = URL.absoluteString.getter();
      String.append(_:)(v78);
      sub_100085EF0();
      sub_10011B560();
      uint64_t v79 = ProductPageLookupRequest.URLRequest.parameters.getter();
      v80._uint64_t countAndFlagsBits = Dictionary.description.getter( v79,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
      String.append(_:)(v80);
      sub_10007BA44();
      sub_100085FB4();
      uint64_t v82 = v163;
      uint64_t v81 = v164;
      uint64_t v83 = sub_1000AA78C();
      os_log_type_t v84 = static os_log_type_t.default.getter(v83);
      sub_100085EE8(v75);
      sub_100085EE8(v81);
      uint64_t v85 = (os_log_s *)sub_10011C0CC();
      os_log_type_t v86 = v84;
      if (sub_10009396C(v85))
      {
        uint64_t v87 = sub_10007B9FC(22LL);
        uint64_t v158 = v82;
        Swift::String v88 = (uint8_t *)v87;
        uint64_t v89 = sub_10007B9FC(64LL);
        *(_DWORD *)Swift::String v88 = 136446466;
        uint64_t v162 = (char *)&type metadata for Any + 8;
        uint64_t v17 = (char *)(v88 + 4);
        uint64_t v163 = 91LL;
        unint64_t v164 = 0xE100000000000000LL;
        uint64_t v165 = v89;
        sub_1000AA78C();
        sub_100086114(v160);
        sub_100085F14();
        sub_100086144();
        uint64_t v163 = sub_10008620C(v163, v90, &v165);
        sub_10011C3B0((uint64_t)&v163, (uint64_t)&v164);
        sub_10007D974(v75);
        sub_10007B980();
        sub_100093898();
        sub_10008618C();
        uint64_t v92 = sub_1000C6228(v158, v91, &v165);
        uint64_t v93 = sub_10011BFA8(v92);
        sub_100086194(v93, (uint64_t)&v164);
        sub_100085E64(v81);
        sub_100086038((void *)&_mh_execute_header, v85, v86, "%{public}s%{public}s", v88);
        swift_arrayDestroy(v89, 2LL, v162);
        sub_10007B974(v89);
        sub_10007B974((uint64_t)v88);
        sub_100085FB4();
        uint64_t v94 = v75;
        sub_100086144();
      }

      else
      {

        sub_100085E64(v81);
        uint64_t v94 = v75;
        uint64_t v95 = sub_100085E64(v75);
      }

      uint64_t v115 = v152;
      uint64_t v117 = v148;
      uint64_t v116 = v149;
      sub_10011C288(v95, type metadata accessor for SKLogger);
      uint64_t v118 = sub_1000AAD2C();
      sub_1000875FC(v115, v119, v120, v118);
      uint64_t v121 = (uint64_t)v150;
      sub_10011B8C4((uint64_t)v17, v122, type metadata accessor for ProductPageLookupRequest.URLRequest);
      uint64_t v123 = *(unsigned __int8 *)(v117 + 80);
      uint64_t v124 = (v123 + 97) & ~v123;
      unint64_t v125 = (v116 + v124 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v126 = swift_allocObject(&unk_1002EE408, v125 + 16, v123 | 7);
      *(void *)(v126 + 16) = 0LL;
      *(void *)(v126 + 24) = 0LL;
      id v128 = v153;
      uint64_t v127 = v154;
      uint64_t v129 = v147;
      *(void *)(v126 + 32) = v153;
      *(void *)(v126 + 40) = v129;
      uint64_t v130 = v159;
      uint64_t v131 = v146;
      *(void *)(v126 + 48) = v159;
      *(void *)(v126 + 56) = v131;
      uint64_t v132 = v160;
      *(void *)(v126 + 64) = v155;
      *(void *)(v126 + 72) = v132;
      *(void *)(v126 + 80) = v94;
      *(void *)(v126 + 88) = v127;
      *(_BYTE *)(v126 + 96) = v145;
      sub_1000E9158(v121, v126 + v124, type metadata accessor for ProductPageLookupRequest.URLRequest);
      uint64_t v133 = (void *)(v126 + v125);
      uint64_t v134 = v157;
      *uint64_t v133 = v156;
      v133[1] = v134;
      id v135 = v128;
      swift_bridgeObjectRetain(v130);
      sub_1000AABA0();
      sub_1000930E4();
      sub_100085FEC();
      swift_retain(v134);
      sub_10011C20C(v152);
      uint64_t v137 = v136;
      sub_10011C1F8();
      sub_100085EF0();
      sub_1000930DC();
      sub_1000AABA8();
      sub_10007B980();

      uint64_t v138 = swift_release(v137);
      sub_10011C2C4(v138, (uint64_t *)&unk_10032BAB0);
      uint64_t v67 = (uint64_t)v17;
    }

    else
    {
      sub_10011B040(v158, v71, type metadata accessor for SKLogger);
      uint64_t v96 = v17;
      uint64_t v97 = *((void *)v17 + 2);
      uint64_t v162 = v96;
      uint64_t v98 = *((void *)v96 + 3);
      uint64_t v99 = sub_100085FEC();
      static os_log_type_t.error.getter(v99);
      uint64_t v100 = sub_100085EE8(v98);
      Swift::String v101 = (os_log_s *)Logger.logObject.getter(v100);
      if (sub_1000E96FC(v101))
      {
        unint64_t v102 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v103 = sub_10007B9FC(64LL);
        id v161 = v46;
        uint64_t v104 = v103;
        *(_DWORD *)unint64_t v102 = 136446466;
        uint64_t v163 = 91LL;
        unint64_t v164 = 0xE100000000000000LL;
        uint64_t v165 = v103;
        sub_100085FEC();
        sub_1000935BC(v97);
        sub_100085F14();
        sub_100085EF0();
        uint64_t v106 = sub_10008620C(v163, v105, &v165);
        sub_10011C264(v106);
        uint64_t v107 = sub_10011C18C();
        sub_1000C6004(v107, v108);
        sub_10007D974(v98);
        sub_10007B980();
        sub_10011BE28();
        uint64_t v163 = sub_10011B140(v109 + 19, (uint64_t)"Rejecting unentitled request to load product.");
        uint64_t v110 = sub_10011C18C();
        sub_100086194(v110, v111);
        sub_100086038((void *)&_mh_execute_header, v101, v43, "%{public}s%{public}s", v102);
        sub_100086030(v104, v112, (uint64_t)&type metadata for Any + 8);
        uint64_t v113 = v104;
        id v46 = v161;
        sub_10007B974(v113);
        sub_10007B974((uint64_t)v102);
        sub_100085EF0();
      }

      else
      {

        uint64_t v114 = sub_100085E64(v98);
      }

      uint64_t v139 = (void (*)(void, id))v156;
      sub_10011C0E8(v114, type metadata accessor for SKLogger);
      static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
      id v140 = objc_allocWithZone(&OBJC_CLASS___NSError);
      uint64_t v141 = sub_10009C714();
      id v143 = sub_10011947C(v141, v142, 512LL, 0LL);
      v139(0LL, v143);

      uint64_t v67 = (uint64_t)v162;
    }
  }

  else
  {
    sub_10011B040(v158, v41, type metadata accessor for SKLogger);
    uint64_t v47 = *((void *)v17 + 3);
    uint64_t v48 = sub_100085FEC();
    static os_log_type_t.error.getter(v48);
    uint64_t v49 = sub_100085EE8(v47);
    id v50 = (os_log_s *)Logger.logObject.getter(v49);
    if (sub_1000E96FC(v50))
    {
      os_log_type_t v51 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v52 = sub_10007B9FC(64LL);
      sub_10011B8A4(4.8752e-34);
      uint64_t v163 = v53;
      unint64_t v164 = v55;
      uint64_t v165 = v54;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v163 = sub_10008620C(v163, v56, &v165);
      uint64_t v57 = v17;
      uint64_t v17 = (char *)&type metadata for Any;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164, v57);
      sub_10007D974(v47);
      sub_10007B980();
      sub_10011BE28();
      uint64_t v59 = sub_10011B140(v58 + 15, (uint64_t)"No client to fetch perform product lookup");
      uint64_t v60 = sub_10011BFA8(v59);
      sub_100086194(v60, (uint64_t)&v164);
      sub_100086038((void *)&_mh_execute_header, v50, (os_log_type_t)v2, "%{public}s%{public}s", v51);
      sub_100086030(v52, v61, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v52);
      sub_10007B974((uint64_t)v51);
      sub_100085EF0();
    }

    else
    {

      uint64_t v62 = sub_100085E64(v47);
    }

    sub_10011C0F0(v62, type metadata accessor for SKLogger);
    unint64_t v63 = sub_10009BB88();
    uint64_t v64 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v63);
    uint64_t v66 = sub_10011B7DC(v64, v65);
    v156(v66);
    sub_10011B038();
    uint64_t v67 = (uint64_t)v17;
  }

  sub_100085BC4(v67, type metadata accessor for ProductPageLookupRequest.URLRequest);
  sub_100085E98();
}

uint64_t sub_10010F130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[7] = a5;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  v7[10] = v8;
  v7[11] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)swift_task_alloc(dword_10032B724);
  v7[12] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_10010F1A4;
  return sub_1000EF5F4();
}

uint64_t sub_10010F1A4()
{
  if (!v1) {
    *(void *)(v2 + 112) = v0;
  }
  sub_100093420();
  return sub_10009C2D4();
}

#error "10010F360: call analysis failed (funcsize=146)"
void __cdecl -[StoreKitServiceConnection lookupProductWithURLProductRequest:reply:]( StoreKitServiceConnection *self,  SEL a2,  id a3,  id a4)
{
  sub_1001179A8((int)self, (int)a2, (int)a3, a4);
}

void sub_10010F460(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v85 = a1;
  uint64_t v86 = a2;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v81 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = type metadata accessor for PurchaseIntentRequest.Add(0LL);
  uint64_t v79 = *(void *)(v87 - 8);
  uint64_t v7 = *(void *)(v79 + 64);
  uint64_t v8 = __chkstk_darwin(v87);
  uint64_t v80 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v78 - v10);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v78 - v12;
  uint64_t v14 = type metadata accessor for SKLogger(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v82 = (uint64_t)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v89 = (char *)&v78 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v78 - v19;
  uint64_t v84 = swift_allocObject(&unk_1002EE638, 24LL, 7LL);
  *(void *)(v84 + 16) = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v83 = sub_100079604(v14, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v83, (uint64_t)v20, type metadata accessor for SKLogger);
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  os_log_type_t v23 = v22;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v25 = v23;
  BOOL v26 = os_log_type_enabled(v24, v23);
  Swift::String v88 = (void (**)(const void *, void *))a4;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v28 = swift_slowAlloc(64LL, -1LL);
    uint64_t v91 = v28;
    *(_DWORD *)uint64_t v27 = 136446466;
    uint64_t v90 = sub_10007A488(0LL, 0xE000000000000000LL, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v27 + 4);
    *(_WORD *)(v27 + 12) = 2082;
    uint64_t v90 = sub_10007A488(0xD00000000000001ELL, 0x80000001002A2D40LL, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v27 + 14);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s%{public}s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v20, type metadata accessor for SKLogger);
  uint64_t v29 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  uint64_t v31 = PropertyListDecoder.init()(v30);
  sub_10007ACCC( &qword_10032BBD0,  type metadata accessor for PurchaseIntentRequest.Add,  (uint64_t)&protocol conformance descriptor for PurchaseIntentRequest.Add);
  uint64_t v32 = v87;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v11, v87, v85, v86, v87, v33);
  swift_release(v31);
  sub_1000E9158((uint64_t)v11, (uint64_t)v13, type metadata accessor for PurchaseIntentRequest.Add);
  id v34 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v34) {
    goto LABEL_10;
  }
  uint64_t v35 = v34;
  if ((objc_msgSend(v34, "sk_allowClientOverride") & 1) == 0)
  {

LABEL_10:
    uint64_t v60 = v82;
    sub_1000E8F9C(v83, v82, type metadata accessor for SKLogger);
    uint64_t v61 = (uint64_t *)&v13[*(int *)(v32 + 24)];
    uint64_t v62 = *v61;
    unint64_t v63 = (void *)v61[1];
    uint64_t v64 = swift_bridgeObjectRetain(v63);
    os_log_type_t v65 = static os_log_type_t.error.getter(v64);
    uint64_t v66 = swift_bridgeObjectRetain_n(v63, 2LL);
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = v65;
    if (os_log_type_enabled(v67, v65))
    {
      uint64_t v69 = swift_slowAlloc(22LL, -1LL);
      uint64_t v70 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v69 = 136446466;
      uint64_t v90 = v70;
      uint64_t v91 = 91LL;
      v92[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v63);
      v71._uint64_t countAndFlagsBits = v62;
      v71._object = v63;
      String.append(_:)(v71);
      v72._uint64_t countAndFlagsBits = 8285LL;
      v72._object = (void *)0xE200000000000000LL;
      String.append(_:)(v72);
      swift_bridgeObjectRelease(v63);
      unint64_t v73 = v92[0];
      uint64_t v91 = sub_10007A488(v91, v92[0], &v90);
      uint64_t v60 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v69 + 4);
      swift_bridgeObjectRelease_n(v63, 2LL);
      swift_bridgeObjectRelease(v73);
      *(_WORD *)(v69 + 12) = 2082;
      uint64_t v91 = sub_10007A488(0xD00000000000002ELL, 0x80000001002A2D90LL, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v69 + 14);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "%{public}s%{public}s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v70, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_bridgeObjectRelease(v63);
    }

    else
    {

      swift_bridgeObjectRelease_n(v63, 3LL);
    }

    uint64_t v59 = v88;
    uint64_t v54 = v84;
    sub_100085BC4(v60, type metadata accessor for SKLogger);
    unint64_t v74 = sub_10009BB88();
    uint64_t v75 = swift_allocError(&type metadata for StoreKitInternalError, v74, 0LL, 0LL);
    *uint64_t v76 = 3;
    unint64_t v77 = (void *)_convertErrorToNSError(_:)(v75);
    v59[2](v59, v77);

    swift_errorRelease(v75);
    sub_100085BC4((uint64_t)v13, type metadata accessor for PurchaseIntentRequest.Add);
    goto LABEL_14;
  }

  uint64_t v91 = 0LL;
  v92[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(v92[0]);
  uint64_t v91 = 0xD000000000000016LL;
  v92[0] = 0x80000001002A2DC0LL;
  uint64_t v36 = (uint64_t *)&v13[*(int *)(v32 + 24)];
  uint64_t v37 = *v36;
  uint64_t v38 = (void *)v36[1];
  swift_bridgeObjectRetain(v38);
  v39._uint64_t countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v38);
  uint64_t v40 = v91;
  uint64_t v41 = v92[0];
  id v42 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v42)
  {
    os_log_type_t v43 = v42;
    sub_100119624(v40, v41, v42);

    uint64_t v44 = type metadata accessor for TaskPriority(0LL);
    uint64_t v45 = v81;
    sub_10007D0AC(v81, 1LL, 1LL, v44);
    uint64_t v89 = (char *)v41;
    uint64_t v46 = v40;
    uint64_t v47 = v80;
    sub_1000E8F9C((uint64_t)v13, v80, type metadata accessor for PurchaseIntentRequest.Add);
    uint64_t v48 = *(unsigned __int8 *)(v79 + 80);
    uint64_t v49 = (v48 + 32) & ~v48;
    unint64_t v50 = (v7 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v51 = (v50 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v52 = swift_allocObject(&unk_1002EE660, v51 + 16, v48 | 7);
    *(void *)(v52 + 16) = 0LL;
    *(void *)(v52 + 24) = 0LL;
    sub_1000E9158(v47, v52 + v49, type metadata accessor for PurchaseIntentRequest.Add);
    uint64_t v53 = (void *)(v52 + v50);
    uint64_t v54 = v84;
    *uint64_t v53 = sub_100085E1C;
    v53[1] = v54;
    unint64_t v55 = (uint64_t *)(v52 + v51);
    uint64_t v56 = v89;
    *unint64_t v55 = v46;
    v55[1] = (uint64_t)v56;
    swift_retain(v54);
    sub_100084100(v45);
    uint64_t v58 = v57;

    swift_release(v58);
    sub_100085298(v45, (uint64_t *)&unk_10032BAB0);
    sub_100085BC4((uint64_t)v13, type metadata accessor for PurchaseIntentRequest.Add);
    uint64_t v59 = v88;
LABEL_14:
    swift_release(v54);
    _Block_release(v59);
    return;
  }

  _Block_release(v88);
  __break(1u);
}

void StoreKitServiceConnection.addPurchaseIntent(with:reply:)()
{
  uint64_t v108 = v2;
  uint64_t v109 = v3;
  uint64_t v110 = v4;
  uint64_t v111 = v5;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000860EC();
  uint64_t v105 = v7;
  uint64_t v112 = sub_10011BD88();
  v102[1] = *(void *)(v112 - 8);
  sub_10011B904();
  __chkstk_darwin(v8);
  sub_10011B254();
  uint64_t v104 = v9;
  sub_10011B8F8();
  __chkstk_darwin(v10);
  sub_10011BEFC();
  uint64_t v103 = v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v102 - v13;
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v15);
  sub_1000D4F0C();
  uint64_t v18 = v16 - v17;
  __chkstk_darwin(v19);
  sub_10011BF0C();
  __chkstk_darwin(v20);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v21 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v107 = sub_10011BBF8(v21, (uint64_t)qword_10033E1A8);
  sub_10011B040(v107, v22, type metadata accessor for SKLogger);
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  os_log_type_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  if (sub_10011C2A4(v25))
  {
    uint64_t v26 = sub_10007B9FC(22LL);
    uint64_t v106 = v18;
    uint64_t v27 = v26;
    uint64_t v24 = sub_10007B9FC(64LL);
    uint64_t v114 = v24;
    *(_DWORD *)uint64_t v27 = 136446466;
    uint64_t v29 = sub_10007BA24(v24, v28, &v114);
    sub_10011BE90(v29);
    uint64_t v30 = v14;
    uint64_t v32 = v31 + 8;
    sub_1000E98A0((uint64_t)&v113, v31 + 8);
    *(_WORD *)(v27 + 12) = 2082;
    sub_10011B248();
    uint64_t v113 = sub_10011B140(v33 + 8, (uint64_t)"addPurchaseIntent(with:reply:)");
    uint64_t v34 = v32;
    uint64_t v14 = v30;
    sub_10011C3A4((uint64_t)&v113, v34);
    sub_100086038((void *)&_mh_execute_header, v25, (os_log_type_t)v0, "%{public}s%{public}s", (uint8_t *)v27);
    sub_100086030(v24, v35, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v24);
    uint64_t v36 = v27;
    uint64_t v18 = v106;
    sub_10007B974(v36);
  }

  sub_10011B354(v37, type metadata accessor for SKLogger);
  uint64_t v38 = sub_10011B960();
  sub_100093D7C(v38);
  sub_10011B9A4();
  sub_10007ACCC( &qword_10032BBD0,  type metadata accessor for PurchaseIntentRequest.Add,  (uint64_t)&protocol conformance descriptor for PurchaseIntentRequest.Add);
  uint64_t v39 = v112;
  sub_10011B910();
  sub_10009C5EC();
  if (v0)
  {
    sub_10011B8C4(v107, v40, type metadata accessor for SKLogger);
    uint64_t v114 = 0LL;
    unint64_t v115 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    sub_10011B248();
    sub_100085F08(v41 + 18, (uint64_t)"Error decoding AddPurchaseIntentRequest ");
    uint64_t v113 = v0;
    sub_10007B1FC(&qword_100329B90);
    sub_10011B420();
    uint64_t v42 = sub_10011C2E4();
    sub_100085EE8(v24);
    os_log_type_t v43 = (os_log_s *)sub_10009C5AC();
    if (sub_1000E96FC(v43))
    {
      uint64_t v42 = sub_10007B9FC(22LL);
      uint64_t v44 = sub_10007B9FC(64LL);
      uint64_t v106 = v18;
      uint64_t v45 = v44;
      uint64_t v114 = v44;
      *(_DWORD *)uint64_t v42 = 136446466;
      uint64_t v113 = sub_10007BA24(v44, v46, &v114);
      uint64_t v47 = (uint64_t)v25 + 8;
      sub_1000E98A0((uint64_t)&v113, v47);
      *(_WORD *)(v42 + 12) = 2082;
      sub_100085FEC();
      uint64_t v113 = sub_1000B20F4((uint64_t)v14, v48, &v114);
      sub_1000E98A0((uint64_t)&v113, v47);
      sub_100085E64(v24);
      sub_100086038((void *)&_mh_execute_header, v43, v1, "%{public}s%{public}s", (uint8_t *)v42);
      sub_100086030(v45, v49, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v45);
      sub_10007B974(v42);
      sub_100085EF0();
    }

    else
    {

      uint64_t v50 = sub_100085E64(v24);
    }

    sub_10011BD24(v50, type metadata accessor for SKLogger);
    uint64_t v84 = (void *)sub_10011B30C();
    id v85 = sub_10011B058(v84, "toASDErrorWithMetadata:");
    sub_10011B508();
    v108(v42);

    sub_1000E93B4();
    goto LABEL_20;
  }

  uint64_t v51 = sub_10011C2CC();
  sub_1000E9158(v51, v52, v53);
  id v54 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v54) {
    goto LABEL_15;
  }
  uint64_t v56 = v54;
  if (!objc_msgSend(v54, "sk_allowClientOverride"))
  {

LABEL_15:
    sub_10011BBD4(v107, v55, type metadata accessor for SKLogger);
    uint64_t v86 = *(void *)&v14[*(int *)(v39 + 24) + 8];
    uint64_t v87 = sub_100085FEC();
    static os_log_type_t.error.getter(v87);
    sub_100085EE8(v86);
    Swift::String v88 = (os_log_s *)sub_10011BAB0();
    if (sub_1000E96FC(v88))
    {
      uint64_t v89 = sub_10007B9FC(22LL);
      uint64_t v90 = sub_10007B9FC(64LL);
      uint64_t v112 = (uint64_t)v14;
      uint64_t v113 = v90;
      uint64_t v91 = v90;
      sub_10011C0AC(4.8752e-34);
      uint64_t v114 = v92;
      unint64_t v115 = v93;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v114 = sub_10008620C(v114, v94, &v113);
      sub_10011BA48((uint64_t)&v114);
      sub_10007D974(v86);
      sub_10007B980();
      *(_WORD *)(v89 + 12) = 2082;
      sub_10011B248();
      uint64_t v114 = sub_10011B130(v95 + 24, (uint64_t)"Client is not entitled to add purchase intents");
      sub_100086194((uint64_t)&v114, (uint64_t)&v115);
      sub_100086038((void *)&_mh_execute_header, v88, v1, "%{public}s%{public}s", (uint8_t *)v89);
      sub_100086030(v91, v96, (uint64_t)&type metadata for Any + 8);
      uint64_t v97 = v91;
      uint64_t v14 = (char *)v112;
      sub_10007B974(v97);
      sub_10007B974(v89);
      sub_100085EF0();
    }

    else
    {

      uint64_t v98 = sub_100085E64(v86);
    }

    sub_10011BA88(v98, type metadata accessor for SKLogger);
    unint64_t v99 = sub_10009BB88();
    uint64_t v100 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v99);
    sub_10011B994(v100, v101);
    sub_10011B038();
    uint64_t v83 = (uint64_t)v14;
    goto LABEL_19;
  }

  sub_10011BC68();
  swift_bridgeObjectRelease(v115);
  sub_1000AB058();
  uint64_t v114 = 0xD000000000000016LL;
  unint64_t v115 = v57;
  uint64_t v58 = (uint64_t *)&v14[*(int *)(v39 + 24)];
  uint64_t v59 = *v58;
  uint64_t v60 = (void *)v58[1];
  sub_10008600C();
  v61._uint64_t countAndFlagsBits = v59;
  v61._object = v60;
  String.append(_:)(v61);
  sub_100086004();
  uint64_t v62 = v114;
  uint64_t v63 = v115;
  id v64 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v64)
  {
    os_log_type_t v65 = v64;
    sub_100119624(v62, v63, v64);

    uint64_t v66 = sub_1000AAD2C();
    uint64_t v67 = v105;
    sub_1000875FC(v105, v68, v69, v66);
    uint64_t v70 = v104;
    sub_10011BD38((uint64_t)v14, v71, type metadata accessor for PurchaseIntentRequest.Add);
    sub_10011C0DC();
    Swift::String v72 = v14;
    uint64_t v75 = v74 & ~v73;
    unint64_t v76 = (v103 + v75 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v78 = swift_allocObject(&unk_1002EE430, v77 + 16, v73 | 7);
    *(void *)(v78 + 16) = 0LL;
    *(void *)(v78 + 24) = 0LL;
    sub_1000E9158(v70, v78 + v75, type metadata accessor for PurchaseIntentRequest.Add);
    uint64_t v79 = (void (**)(uint64_t))(v78 + v76);
    uint64_t v80 = v109;
    uint8_t *v79 = v108;
    v79[1] = v80;
    uint64_t v81 = (uint64_t *)(v78 + v77);
    *uint64_t v81 = v62;
    v81[1] = v63;
    swift_retain(v80);
    sub_100084100(v67);
    sub_100086064();
    uint64_t v82 = sub_10009C5EC();
    sub_10011C0D4(v82, (uint64_t *)&unk_10032BAB0);
    uint64_t v83 = (uint64_t)v72;
LABEL_19:
    sub_100085BC4(v83, type metadata accessor for PurchaseIntentRequest.Add);
LABEL_20:
    sub_100085E98();
    return;
  }

  __break(1u);
}

uint64_t sub_100110614( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a7;
  v8[18] = a8;
  v8[15] = a5;
  v8[16] = a6;
  v8[14] = a4;
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  v8[19] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v8[20] = swift_task_alloc(v10);
  v8[21] = swift_task_alloc(v10);
  return swift_task_switch(sub_100110688, 0LL, 0LL);
}

uint64_t sub_100110688()
{
  uint64_t v35 = v1;
  uint64_t v36 = v2;
  uint64_t v34 = v0;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = sub_100079604(*(void *)(v0 + 152), (uint64_t)qword_10033E1A8);
  *(void *)(v0 + 176) = v4;
  sub_10011B714(v4, v5, type metadata accessor for SKLogger);
  sub_10011BEC4();
  _StringGuts.grow(_:)(38LL);
  uint64_t v6 = v33;
  *(void *)(v0 + 64) = v32;
  *(void *)(v0 + 72) = v6;
  sub_10011BDE4(36LL, 0x80000001002A3390LL);
  uint64_t v7 = sub_10011BD88();
  *(void *)(v0 + 184) = v7;
  uint64_t v8 = _print_unlocked<A, B>(_:_:)(v3, v0 + 64);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v11 = *(int *)(v7 + 24);
  *(_DWORD *)(v0 + 232) = v11;
  uint64_t v12 = (uint64_t *)(v3 + v11);
  uint64_t v13 = *(void *)(v3 + v11 + 8);
  uint64_t v30 = *(void *)(v3 + v11);
  os_log_type_t v14 = static os_log_type_t.default.getter(v8);
  sub_100085EE8(v13);
  sub_100085EE8(v9);
  uint64_t v15 = (os_log_s *)sub_10009C414();
  if (os_log_type_enabled(v15, v14))
  {
    uint64_t v28 = v10;
    uint64_t v16 = sub_10007B9FC(22LL);
    uint64_t v29 = sub_10007B9FC(64LL);
    sub_10011BAF0(4.8752e-34);
    sub_1000AABA0();
    sub_1000AAB84(v30);
    sub_100085F14();
    sub_1000AABA8();
    *(void *)(v0 + 96) = sub_10008620C(v32, v17, &v31);
    ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v0 + 96, v0 + 104);
    sub_10007B980();
    sub_10007D974(v13);
    *(_WORD *)(v16 + 12) = 2082;
    sub_10008618C();
    *(void *)(v0 + 104) = sub_1000C6228(v28, v18, &v31);
    sub_100086194(v0 + 104, v0 + 112);
    sub_100085E64(v9);
    sub_100086038((void *)&_mh_execute_header, v15, v14, "%{public}s%{public}s", (uint8_t *)v16);
    sub_100086030(v29, v19, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v29);
    sub_10007B974(v16);

    sub_100085FB4();
  }

  else
  {
    sub_10007D974(v13);
    sub_100085E64(v9);
  }

  uint64_t v20 = *(void *)(v0 + 112);
  sub_100085BC4(*(void *)(v0 + 168), type metadata accessor for SKLogger);
  uint64_t v21 = *v12;
  *(void *)(v0 + 192) = *v12;
  uint64_t v22 = v12[1];
  *(void *)(v0 + 200) = v22;
  char v23 = *(_BYTE *)(v20 + *(int *)(v7 + 20));
  uint64_t v24 = dword_10032A824;
  sub_10007BA3C();
  os_log_type_t v25 = (void *)swift_task_alloc(v24);
  *(void *)(v0 + 208) = v25;
  *os_log_type_t v25 = v0;
  v25[1] = sub_100110940;
  uint64_t v26 = sub_1000C6298(*(void *)(v0 + 112));
  return sub_1000AB0A8(v26, v23, v21, v22);
}

uint64_t sub_100110940()
{
  return sub_100092F20();
}

id sub_100110974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 112);
  if (*(_BYTE *)(v3 + *(int *)(*(void *)(v2 + 184) + 28LL)) == 1)
  {
    uint64_t v4 = (uint64_t *)(v3 + *(int *)(v2 + 232));
    sub_10011B040(*(void *)(v2 + 176), a2, type metadata accessor for SKLogger);
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    uint64_t v9 = sub_100085EE8(v5);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    if (sub_10011B8CC(v10))
    {
      uint64_t v11 = sub_10007B9FC(22LL);
      uint64_t v12 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v11 = 136446466;
      sub_1000B2110();
      uint64_t v31 = v13;
      uint64_t v32 = v14;
      uint64_t v33 = v15;
      sub_1000930E4();
      sub_10009C350(v6);
      sub_100085F14();
      sub_1000930DC();
      *(void *)(v2 + 80) = sub_10008620C(v32, v16, &v31);
      sub_1000B21CC(v2 + 80, v2 + 88);
      sub_10007B980();
      sub_10007D974(v5);
      *(_WORD *)(v11 + 12) = 2082;
      sub_1000862B8();
      *(void *)(v2 + 88) = sub_1000AB050(25LL, v17, &v31);
      sub_100086194(v2 + 88, v2 + 96);
      sub_100086038((void *)&_mh_execute_header, v10, v8, "%{public}s%{public}s", (uint8_t *)v11);
      sub_100086030(v12, v18, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v12);
      sub_10007B974(v11);
    }

    else
    {
      sub_10007D974(v5);
    }

    uint64_t v22 = *(void *)(v2 + 112);
    sub_100085BC4(*(void *)(v2 + 160), type metadata accessor for SKLogger);
    uint64_t v23 = sub_10007B1FC((uint64_t *)&unk_10032B180);
    uint64_t inited = swift_initStackObject(v23, v2 + 16);
    *(void *)(v2 + 216) = inited;
    *(_OWORD *)(inited + 16) = xmmword_10027A600;
    uint64_t v25 = *(void *)(v22 + 24);
    *(void *)(inited + 32) = *(void *)(v22 + 16);
    *(void *)(inited + 40) = v25;
    uint64_t v26 = dword_10032A7E4;
    swift_bridgeObjectRetain(v25);
    uint64_t v27 = (void *)swift_task_alloc(v26);
    *(void *)(v2 + 224) = v27;
    *uint64_t v27 = v2;
    v27[1] = sub_100110BFC;
    sub_10011BF1C();
    return (id)sub_1000AC590(v28, v29, v30);
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 200));
    sub_10011B7D4(*(uint64_t (**)(void))(v2 + 120));
    id result = [(id)objc_opt_self(TransactionStore) globalStore];
    if (result)
    {
      uint64_t v20 = result;
      sub_10011B418(*(void *)(v2 + 136), *(void *)(v2 + 144));

      sub_1000931C8();
      sub_100093280();
      sub_10011BF1C();
      __asm { BR              X0 }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100110BFC()
{
  return sub_1000AA908(v2, v3, v4);
}

id sub_100110C44()
{
  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    uint64_t v2 = result;
    sub_10011B418(*(void *)(v0 + 136), *(void *)(v0 + 144));

    sub_1000931C8();
    sub_100093280();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100110CCC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v108 = a1;
  uint64_t v109 = (char *)a2;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10007B1FC(&qword_10032A3D8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v102 = (uint64_t)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v98 - v11;
  uint64_t v110 = type metadata accessor for PurchaseIntentRequest.Remove(0LL);
  uint64_t v98 = *(void *)(v110 - 8);
  uint64_t v13 = __chkstk_darwin(v110);
  uint64_t v100 = (uint64_t)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (uint64_t *)((char *)&v98 - v16);
  uint64_t v99 = v18;
  __chkstk_darwin(v15);
  uint64_t v104 = (uint64_t)&v98 - v19;
  uint64_t v20 = type metadata accessor for SKLogger(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  Swift::String v101 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v103 = (uint64_t)&v98 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v106 = (char *)&v98 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v98 - v27;
  uint64_t v107 = swift_allocObject(&unk_1002EE5E8, 24LL, 7LL);
  *(void *)(v107 + 16) = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v105 = sub_100079604(v20, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v105, (uint64_t)v28, type metadata accessor for SKLogger);
  uint64_t v30 = static os_log_type_t.default.getter(v29);
  os_log_type_t v31 = v30;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v33 = v31;
  BOOL v34 = os_log_type_enabled(v32, v31);
  uint64_t v111 = (void (**)(const void *, void *))a4;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc(22LL, -1LL);
    uint64_t v36 = v12;
    uint64_t v37 = swift_slowAlloc(64LL, -1LL);
    uint64_t v113 = v37;
    *(_DWORD *)uint64_t v35 = 136446466;
    uint64_t v112 = sub_10007A488(0LL, 0xE000000000000000LL, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 4);
    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v112 = sub_10007A488(0xD000000000000021LL, 0x80000001002A2DE0LL, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v35 + 14);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s%{public}s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v38 = v37;
    uint64_t v12 = v36;
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v28, type metadata accessor for SKLogger);
  uint64_t v39 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  uint64_t v41 = PropertyListDecoder.init()(v40);
  sub_10007ACCC( &qword_10032BBE8,  type metadata accessor for PurchaseIntentRequest.Remove,  (uint64_t)&protocol conformance descriptor for PurchaseIntentRequest.Remove);
  uint64_t v42 = v110;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v17, v110, v108, v109, v110, v43);
  swift_release(v41);
  uint64_t v44 = (uint64_t)v17;
  uint64_t v45 = v104;
  sub_1000E9158(v44, v104, type metadata accessor for PurchaseIntentRequest.Remove);
  id v46 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v46)
  {
    sub_1000E8F9C(v105, v103, type metadata accessor for SKLogger);
    uint64_t v49 = (uint64_t *)(v45 + *(int *)(v42 + 24));
    uint64_t v51 = *v49;
    uint64_t v50 = (void *)v49[1];
    uint64_t v52 = swift_bridgeObjectRetain(v50);
    os_log_type_t v53 = static os_log_type_t.error.getter(v52);
    uint64_t v54 = swift_bridgeObjectRetain_n(v50, 2LL);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = v53;
    if (os_log_type_enabled(v55, v53))
    {
      uint64_t v57 = swift_slowAlloc(22LL, -1LL);
      uint64_t v58 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v57 = 136446466;
      uint64_t v112 = v58;
      uint64_t v113 = 91LL;
      v114[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v50);
      v59._uint64_t countAndFlagsBits = v51;
      v59._object = v50;
      String.append(_:)(v59);
      v60._uint64_t countAndFlagsBits = 8285LL;
      v60._object = (void *)0xE200000000000000LL;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v50);
      unint64_t v61 = v114[0];
      uint64_t v113 = sub_10007A488(v113, v114[0], &v112);
      uint64_t v45 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v57 + 4);
      swift_bridgeObjectRelease_n(v50, 2LL);
      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v57 + 12) = 2082;
      uint64_t v113 = sub_10007A488(0xD00000000000003ELL, 0x80000001002A2E40LL, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v57 + 14);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "%{public}s%{public}s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_bridgeObjectRelease(v50);
    }

    else
    {

      swift_bridgeObjectRelease_n(v50, 3LL);
    }

    unint64_t v93 = v111;
    uint64_t v87 = v107;
    sub_100085BC4(v103, type metadata accessor for SKLogger);
    unint64_t v94 = sub_10009BB88();
    uint64_t v95 = swift_allocError(&type metadata for StoreKitInternalError, v94, 0LL, 0LL);
    *uint64_t v96 = 1;
    uint64_t v97 = (void *)_convertErrorToNSError(_:)(v95);
    v93[2](v93, v97);

    swift_errorRelease(v95);
    sub_100085BC4(v45, type metadata accessor for PurchaseIntentRequest.Remove);
    goto LABEL_15;
  }

  uint64_t v47 = v46;
  unsigned __int8 v48 = objc_msgSend(v46, "sk_allowClientOverride");
  if ((v48 & 1) != 0)
  {
    sub_1000E9220(v45, (uint64_t)v12, &qword_10032A3D8);
  }

  else
  {
    uint64_t v62 = type metadata accessor for ClientOverride(0LL);
    sub_10007D0AC((uint64_t)v12, 1LL, 1LL, v62);
  }

  type metadata accessor for Client(0LL);
  uint64_t v109 = v12;
  uint64_t v63 = v102;
  sub_1000E9220((uint64_t)v12, v102, &qword_10032A3D8);
  id v64 = v47;
  sub_1000E1A28(v64, v63);
  uint64_t v106 = v65;
  id v108 = v64;
  uint64_t v113 = 0LL;
  v114[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(v114[0]);
  uint64_t v113 = 0xD000000000000016LL;
  v114[0] = 0x80000001002A2DC0LL;
  uint64_t v66 = (uint64_t *)(v45 + *(int *)(v42 + 24));
  uint64_t v67 = *v66;
  uint64_t v68 = (void *)v66[1];
  swift_bridgeObjectRetain(v68);
  v69._uint64_t countAndFlagsBits = v67;
  v69._object = v68;
  String.append(_:)(v69);
  swift_bridgeObjectRelease(v68);
  uint64_t v70 = v113;
  uint64_t v71 = v114[0];
  id v72 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v72)
  {
    uint64_t v73 = v72;
    sub_100119624(v70, v71, v72);

    uint64_t v74 = type metadata accessor for TaskPriority(0LL);
    sub_10007D0AC((uint64_t)v7, 1LL, 1LL, v74);
    uint64_t v110 = v71;
    uint64_t v75 = v70;
    uint64_t v76 = v100;
    sub_1000E8F9C(v45, v100, type metadata accessor for PurchaseIntentRequest.Remove);
    uint64_t v77 = *(unsigned __int8 *)(v98 + 80);
    uint64_t v78 = (v77 + 32) & ~v77;
    uint64_t v79 = v78 + v99;
    uint64_t v80 = (uint64_t)v7;
    unint64_t v81 = (v78 + v99) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v82 = (v81 + 31) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v84 = swift_allocObject(&unk_1002EE610, v83 + 16, v77 | 7);
    unint64_t v85 = v81 + v84;
    *(void *)(v84 + 16) = 0LL;
    *(void *)(v84 + 24) = 0LL;
    sub_1000E9158(v76, v84 + v78, type metadata accessor for PurchaseIntentRequest.Remove);
    *(_BYTE *)(v84 + v79) = v48;
    uint64_t v86 = v106;
    uint64_t v87 = v107;
    *(void *)(v85 + 8) = sub_100085E1C;
    *(void *)(v85 + 16) = v87;
    *(void *)(v84 + v82) = v86;
    Swift::String v88 = (uint64_t *)(v84 + v83);
    uint64_t v89 = v110;
    *Swift::String v88 = v75;
    v88[1] = v89;
    swift_retain(v87);
    id v90 = v86;
    sub_100084100(v80);
    uint64_t v92 = v91;

    swift_release(v92);
    sub_100085298(v80, (uint64_t *)&unk_10032BAB0);
    sub_100085298((uint64_t)v109, &qword_10032A3D8);
    sub_100085BC4(v104, type metadata accessor for PurchaseIntentRequest.Remove);
    unint64_t v93 = v111;
LABEL_15:
    swift_release(v87);
    _Block_release(v93);
    return;
  }

  _Block_release(v111);
  __break(1u);
}

void StoreKitServiceConnection.clearPurchaseIntents(with:reply:)()
{
  uint64_t v3 = v2;
  uint64_t v131 = v4;
  id v133 = v5;
  uint64_t v134 = v6;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_10011B378();
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_1000862F4();
  uint64_t v126 = v9;
  sub_100086200();
  __chkstk_darwin(v10);
  sub_10011BEFC();
  uint64_t v135 = sub_10011BD78();
  uint64_t v122 = *(void *)(v135 - 8);
  sub_10011B904();
  __chkstk_darwin(v11);
  sub_10011B254();
  uint64_t v124 = v12;
  sub_10011B8F8();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v122 - v15;
  uint64_t v123 = v17;
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v122 - v18;
  unsigned __int8 v20 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v21);
  uint64_t v130 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v23);
  uint64_t v127 = (char *)&v122 - v24;
  sub_100086200();
  __chkstk_darwin(v25);
  id v128 = (char *)&v122 - v26;
  sub_100086200();
  __chkstk_darwin(v27);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v28 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v129 = sub_10011BE08(v28, (uint64_t)qword_10033E1A8);
  sub_10011B040(v129, v29, type metadata accessor for SKLogger);
  static os_log_type_t.default.getter(v30);
  os_log_type_t v31 = (os_log_s *)sub_10011BA40();
  uint64_t v32 = v20;
  BOOL v33 = sub_100093764(v31);
  BOOL v34 = (uint8_t *)&off_100279000;
  uint64_t v132 = v3;
  uint64_t v125 = v1;
  if (v33)
  {
    BOOL v34 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v35 = sub_10007B9FC(64LL);
    uint64_t v137 = v35;
    *(_DWORD *)BOOL v34 = 136446466;
    uint64_t v37 = sub_10007BA24(v35, v36, &v137);
    sub_10011BE90(v37);
    uint64_t v38 = sub_10011C0F8();
    sub_1000C6390(v38, v39);
    sub_10011C11C();
    sub_10011B248();
    uint64_t v136 = sub_10011B140(v40 + 11, (uint64_t)"clearPurchaseIntents(with:reply:)");
    uint64_t v41 = sub_10011C0F8();
    sub_1000C6390(v41, v42);
    sub_100086038((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "%{public}s%{public}s", v34);
    sub_100086030(v35, v43, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v35);
    sub_10007B974((uint64_t)v34);
  }

  sub_10011B354(v44, type metadata accessor for SKLogger);
  uint64_t v45 = sub_10011B960();
  sub_100093D7C(v45);
  sub_10011B9A4();
  sub_10007ACCC( &qword_10032BBE8,  type metadata accessor for PurchaseIntentRequest.Remove,  (uint64_t)&protocol conformance descriptor for PurchaseIntentRequest.Remove);
  uint64_t v46 = v135;
  sub_10011B910();
  sub_10009C5EC();
  if (v34)
  {
    sub_10011BBD4(v129, v47, type metadata accessor for SKLogger);
    uint64_t v137 = 0LL;
    v138[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    sub_10011B248();
    sub_100085F08(v48 + 20, (uint64_t)"Error decoding ClearPurchaseIntentRequest ");
    uint64_t v136 = (uint64_t)v34;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v49 = sub_10011B420();
    uint64_t v51 = v137;
    uint64_t v50 = (void *)v138[0];
    os_log_type_t v52 = static os_log_type_t.error.getter(v49);
    sub_100085EE8((uint64_t)v50);
    os_log_type_t v53 = (os_log_s *)sub_10011BAB0();
    if (sub_1000B22A4(v53))
    {
      uint64_t v54 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v55 = sub_10007B9FC(64LL);
      uint64_t v137 = v55;
      *(_DWORD *)uint64_t v54 = 136446466;
      uint64_t v57 = sub_10007BA24(v55, v56, &v137);
      uint64_t v58 = sub_10011C144(v57);
      sub_1000C6390(v58, v59);
      sub_10011BE70();
      sub_10008600C();
      uint64_t v136 = sub_10011BF68(v51, v60, &v137);
      sub_1000C6390((uint64_t)&v136, v32);
      sub_100085E64((uint64_t)v50);
      sub_100086038((void *)&_mh_execute_header, v53, v52, "%{public}s%{public}s", v54);
      sub_100086030(v55, v61, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v55);
      sub_10007B974((uint64_t)v54);
      sub_100086004();
    }

    else
    {

      uint64_t v62 = sub_100085E64((uint64_t)v50);
    }

    Swift::String v69 = v131;
    sub_10011BA88(v62, type metadata accessor for SKLogger);
    uint64_t v70 = (void *)sub_10011B30C();
    id v71 = sub_10011B058(v70, "toASDErrorWithMetadata:");
    sub_10011B508();
    v69(v50);

    sub_1000E93B4();
    goto LABEL_21;
  }

  sub_1000E9158((uint64_t)v16, (uint64_t)v19, type metadata accessor for PurchaseIntentRequest.Remove);
  uint64_t v63 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  id v64 = objc_msgSend(v63, "currentConnection", v122);
  if (!v64)
  {
    sub_10011B040(v129, v65, type metadata accessor for SKLogger);
    uint64_t v72 = *(int *)(v46 + 24);
    uint64_t v135 = (uint64_t)v19;
    uint64_t v73 = *(void *)&v19[v72 + 8];
    uint64_t v74 = sub_100085FEC();
    os_log_type_t v75 = static os_log_type_t.error.getter(v74);
    uint64_t v76 = sub_100085EE8(v73);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = v75;
    if (sub_1000B22A4(v77))
    {
      uint64_t v79 = sub_10007B9FC(22LL);
      uint64_t v80 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v79 = 136446466;
      uint64_t v136 = v80;
      uint64_t v137 = 91LL;
      v138[0] = 0xE100000000000000LL;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v137 = sub_10008620C(v137, v81, &v136);
      sub_1000E98A0((uint64_t)&v137, (uint64_t)v138);
      sub_10007D974(v73);
      sub_10007B980();
      *(_WORD *)(v79 + 12) = 2082;
      sub_10011B248();
      uint64_t v137 = sub_10011B130(v82 + 40, (uint64_t)"Could not get current connection for clearing purchase intents");
      sub_100086194((uint64_t)&v137, (uint64_t)v138);
      sub_100086038((void *)&_mh_execute_header, v77, v78, "%{public}s%{public}s", (uint8_t *)v79);
      sub_100086030(v80, v83, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v80);
      sub_10007B974(v79);
      sub_100085EF0();
    }

    else
    {

      uint64_t v84 = sub_100085E64(v73);
    }

    uint64_t v118 = (void (*)(void))v131;
    sub_10011C0F0(v84, type metadata accessor for SKLogger);
    unint64_t v119 = sub_10009BB88();
    uint64_t v120 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v119);
    sub_10011BB7C(v120, v121);
    v118();
    sub_10011B038();
    uint64_t v117 = v135;
    goto LABEL_20;
  }

  uint64_t v66 = v64;
  unsigned int v68 = objc_msgSend(v64, "sk_allowClientOverride");
  if (v68)
  {
    sub_10011C1D0((uint64_t)v19, v67, &qword_10032A3D8);
  }

  else
  {
    uint64_t v85 = sub_1000E953C();
    sub_1000875FC(v0, v86, v87, v85);
  }

  uint64_t v88 = v126;
  sub_1000E66E0();
  uint64_t v134 = v0;
  sub_1000E9220(v0, v88, &qword_10032A3D8);
  id v89 = v66;
  sub_1000E1A28(v89, v88);
  LODWORD(v129) = v68;
  uint64_t v130 = v90;
  id v133 = v89;
  sub_10011BC68();
  swift_bridgeObjectRelease(v138[0]);
  sub_1000AB058();
  uint64_t v137 = 0xD000000000000016LL;
  v138[0] = v91;
  uint64_t v92 = *(void *)&v19[*(int *)(v46 + 24)];
  sub_10008618C();
  sub_10009C32C(v92);
  sub_100085FB4();
  uint64_t v93 = v137;
  uint64_t v94 = v138[0];
  id v95 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v95)
  {
    uint64_t v96 = v95;
    sub_100119624(v93, v94, v95);

    uint64_t v97 = sub_1000AAD2C();
    uint64_t v98 = v125;
    sub_1000875FC(v125, v99, v100, v97);
    sub_10011B040((uint64_t)v19, v101, type metadata accessor for PurchaseIntentRequest.Remove);
    sub_10011C0DC();
    uint64_t v104 = (v103 & ~v102) + v123;
    unint64_t v105 = ((v104 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v106 = (v105 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v107 = swift_allocObject(&unk_1002EE458, v106 + 16, v102 | 7);
    uint64_t v135 = (uint64_t)v19;
    uint64_t v108 = v107;
    unint64_t v109 = (v104 & 0xFFFFFFFFFFFFFFF8LL) + v107;
    uint64_t v110 = sub_10011C2EC(v107);
    sub_1000E9158(v110, v111, type metadata accessor for PurchaseIntentRequest.Remove);
    *(_BYTE *)(v108 + v104) = v129;
    uint64_t v112 = v132;
    *(void *)(v109 + 8) = v131;
    *(void *)(v109 + 16) = v112;
    uint64_t v113 = v130;
    *(void *)(v108 + v105) = v130;
    uint64_t v114 = (uint64_t *)(v108 + v106);
    uint64_t *v114 = v93;
    v114[1] = v94;
    swift_retain(v112);
    id v115 = v113;
    sub_100084100(v98);
    sub_10011C1F8();

    uint64_t v116 = sub_1000AAEC8();
    sub_1000C65DC(v116, (uint64_t *)&unk_10032BAB0);
    sub_100085298(v134, &qword_10032A3D8);
    uint64_t v117 = v135;
LABEL_20:
    sub_100085BC4(v117, type metadata accessor for PurchaseIntentRequest.Remove);
LABEL_21:
    sub_100085E98();
    return;
  }

  __break(1u);
}

uint64_t sub_1001124E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 96) = v12;
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(_BYTE *)(v8 + 176) = a5;
  *(void *)(v8 + 64) = a4;
  *(void *)(v8 + 72) = a6;
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  *(void *)(v8 + 112) = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 120) = swift_task_alloc(v10);
  *(void *)(v8 + 128) = swift_task_alloc(v10);
  *(void *)(v8 + 136) = swift_task_alloc(v10);
  return swift_task_switch(sub_10011256C, 0LL, 0LL);
}

uint64_t sub_10011256C()
{
  uint64_t v1 = (uint64_t *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = (int *)sub_10011BD78();
  if ((*(_BYTE *)(v2 + v3[5]) & 1) != 0)
  {
    if (qword_100328B40 != -1)
    {
      swift_once(&qword_100328B40, sub_1000F4208);
      uint64_t v2 = *v1;
    }

    uint64_t v4 = sub_100079604(*(void *)(v0 + 112), (uint64_t)qword_10033E1A8);
    sub_10011B040(v4, v5, type metadata accessor for SKLogger);
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v87 = 0x676E697261656C43LL;
    unint64_t v88 = 0xE900000000000020LL;
    uint64_t v6 = (uint64_t *)(v2 + v3[7]);
    if (v6[1])
    {
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v7 = 7105633LL;
    }

    uint64_t v37 = *(void *)(v0 + 88);
    uint64_t v38 = *(void *)(v0 + 64);
    swift_bridgeObjectRetain(v8);
    sub_10009C32C(v7);
    sub_100085FB4();
    sub_1000862B8();
    sub_1000D4F2C(22LL, v39);
    uint64_t v40 = *(void *)(v37 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
    sub_100093528();
    sub_1000AB094(v40);
    uint64_t v41 = sub_100093460();
    unint64_t v42 = v88;
    uint64_t v80 = v87;
    uint64_t v43 = (uint64_t *)(v38 + v3[6]);
    uint64_t v44 = v43[1];
    uint64_t v85 = *v43;
    *(void *)(v0 + 160) = v44;
    static os_log_type_t.default.getter(v41);
    sub_100085EE8(v44);
    sub_100085EE8(v42);
    uint64_t v45 = (void *)sub_100093C38();
    if (sub_10011B3E0((os_log_s *)v45))
    {
      uint64_t v46 = sub_10007B9FC(22LL);
      uint64_t v77 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v46 = 136446466;
      sub_10011BA74();
      sub_1000AA78C();
      sub_100086114(v85);
      sub_100085F14();
      sub_100086144();
      *(void *)(v0 + 16) = sub_10008620C(v87, v47, &v86);
      sub_1000AB080(v0 + 16, v0 + 24, v48, v46 + 12, v49, v50, v51, v52, v46 + 4);
      sub_10007B980();
      sub_10007D974(v44);
      *(_WORD *)(v46 + 12) = 2082;
      sub_1000AABA0();
      *(void *)(v0 + 24) = sub_10007A488(v80, v42, &v86);
      sub_100086194(v0 + 24, v0 + 32);
      sub_100085E64(v42);
      sub_10011C1A0();
      sub_100086038(v53, v54, v55, v56, (uint8_t *)v46);
      sub_100086030(v77, v57, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v77);
      sub_10007B974(v46);

      sub_1000AABA8();
    }

    else
    {
      sub_10007D974(v44);
      sub_100085E64(v42);
    }

    sub_100085BC4(*(void *)(v0 + 120), type metadata accessor for SKLogger);
    uint64_t v58 = dword_10032A7B4;
    sub_1000AA78C();
    uint64_t v59 = (void *)swift_task_alloc(v58);
    *(void *)(v0 + 168) = v59;
    *uint64_t v59 = v0;
    v59[1] = sub_100112CF8;
    sub_1000B217C();
    return sub_1000AECF0(v60, v61, v62, v63, v64, v65);
  }

  else
  {
    if (*(_BYTE *)(v0 + 176) != 1)
    {
      if (qword_100328B40 != -1)
      {
        swift_once(&qword_100328B40, sub_1000F4208);
        uint64_t v2 = *v1;
      }

      uint64_t v23 = sub_100079604(*(void *)(v0 + 112), (uint64_t)qword_10033E1A8);
      sub_10011B040(v23, v24, type metadata accessor for SKLogger);
      uint64_t v25 = (uint64_t *)(v2 + v3[6]);
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      os_log_type_t v29 = static os_log_type_t.error.getter(v28);
      uint64_t v30 = sub_100085EE8(v27);
      os_log_type_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      if (sub_1000B22A4(v31))
      {
        uint64_t v32 = sub_10007B9FC(22LL);
        uint64_t v33 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v32 = 136446466;
        sub_10011BA74();
        sub_100093528();
        sub_1000AB094(v26);
        sub_100085F14();
        sub_100093460();
        *(void *)(v0 + 32) = sub_10008620C(v87, v34, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 4);
        sub_10007B980();
        sub_10007D974(v27);
        *(_WORD *)(v32 + 12) = 2082;
        sub_10011B248();
        *(void *)(v0 + 40) = sub_10011C034( v35 + 30,  (uint64_t)"Client is not entitled to clear all purchase intents",  v75,  v76,  v78,  v79,  v81,  v82,  v32 + 4,  v0 + 48);
        sub_100086194(v0 + 40, v84);
        sub_100086038((void *)&_mh_execute_header, v31, v29, "%{public}s%{public}s", (uint8_t *)v32);
        sub_100086030(v33, v36, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v33);
        sub_10007B974(v32);
      }

      else
      {
        sub_10007D974(v27);
      }

      sub_100085BC4(*(void *)(v0 + 128), type metadata accessor for SKLogger);
      unint64_t v71 = sub_10009BB88();
      uint64_t v72 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v71);
      sub_10011B994(v72, v73);
      sub_10011B038();
      sub_10011C104();
      sub_1000939C0();
      sub_1000931C8();
      sub_1000B217C();
      __asm { BR              X0 }
    }

    uint64_t v83 = (uint64_t *)(v0 + 48);
    if (qword_100328B40 != -1)
    {
      swift_once(&qword_100328B40, sub_1000F4208);
      uint64_t v2 = *v1;
    }

    uint64_t v9 = sub_100079604(*(void *)(v0 + 112), (uint64_t)qword_10033E1A8);
    sub_10011B040(v9, v10, type metadata accessor for SKLogger);
    uint64_t v11 = (uint64_t *)(v2 + v3[6]);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    *(void *)(v0 + 144) = v13;
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    uint64_t v16 = sub_100085EE8(v13);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    if (sub_100093764(v17))
    {
      uint64_t v18 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v19 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v18 = 136446466;
      sub_10011BA74();
      sub_1000930E4();
      sub_10009C350(v12);
      sub_100085F14();
      sub_1000930DC();
      *uint64_t v83 = sub_10008620C(v87, v20, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v83, v0 + 56, v18 + 4);
      sub_10007B980();
      sub_10007D974(v13);
      sub_100093CA4();
      sub_10011B248();
      *(void *)(v0 + 56) = sub_10011C034( v21 + 7,  (uint64_t)"Clearing all purchase intents",  v75,  v76,  v78,  v79,  v81,  v82,  (uint64_t)(v18 + 4),  (uint64_t)v83);
      sub_100086194(v0 + 56, v0 + 64);
      sub_100086038((void *)&_mh_execute_header, v17, v15, "%{public}s%{public}s", v18);
      sub_100086030(v19, v22, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v19);
      sub_10007B974((uint64_t)v18);
    }

    else
    {
      sub_10007D974(v13);
    }

    sub_100085BC4(*(void *)(v0 + 136), type metadata accessor for SKLogger);
    sub_1000930E4();
    uint64_t v67 = (void *)sub_100093010();
    *(void *)(v0 + 152) = v67;
    void *v67 = v0;
    v67[1] = sub_100112C50;
    sub_1000B217C();
    return sub_1000AF744(v68, v69, v70);
  }

uint64_t sub_100112C50()
{
  return sub_100092F20();
}

id sub_100112C88()
{
  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    uint64_t v2 = result;
    sub_10011B418(*(void *)(v0 + 96), *(void *)(v0 + 104));

    sub_10011C104();
    sub_1000939C0();
    sub_1000931C8();
    return (id)sub_1000AA42C(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100112CF8()
{
  return sub_100092F20();
}

void sub_100112D3C(uint64_t a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v121 = a1;
  id v122 = a2;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v113 = (uint64_t)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10007B1FC(&qword_10032A3D8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v114 = (uint64_t)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v110 - v10;
  uint64_t v123 = type metadata accessor for PurchaseIntentRequest.Query(0LL);
  uint64_t v111 = *(void *)(v123 - 8);
  uint64_t v12 = *(void *)(v111 + 64);
  uint64_t v13 = __chkstk_darwin(v123);
  uint64_t v112 = (uint64_t)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v110 - v15);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v110 - v17;
  uint64_t v19 = type metadata accessor for SKLogger(0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v116 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v115 = (uint64_t)&v110 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v117 = (uint64_t)&v110 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v119 = (char *)&v110 - v27;
  __chkstk_darwin(v26);
  os_log_type_t v29 = (char *)&v110 - v28;
  uint64_t v120 = swift_allocObject(&unk_1002EE598, 24LL, 7LL);
  *(void *)(v120 + 16) = a4;
  uint64_t v124 = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v118 = sub_100079604(v19, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v118, (uint64_t)v29, type metadata accessor for SKLogger);
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  os_log_type_t v32 = v31;
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v31);
  if (os_log_type_enabled(v33, v32))
  {
    uint64_t v34 = swift_slowAlloc(22LL, -1LL);
    uint64_t v35 = swift_slowAlloc(64LL, -1LL);
    uint64_t v110 = v12;
    uint64_t v36 = v35;
    uint64_t v126 = v35;
    *(_DWORD *)uint64_t v34 = 136446466;
    uint64_t v125 = sub_10007A488(0LL, 0xE000000000000000LL, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v34 + 4);
    *(_WORD *)(v34 + 12) = 2082;
    uint64_t v125 = sub_10007A488(0xD00000000000001CLL, 0x80000001002A2EC0LL, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v34 + 14);
    _os_log_impl((void *)&_mh_execute_header, v33, v32, "%{public}s%{public}s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v37 = v36;
    uint64_t v12 = v110;
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v29, type metadata accessor for SKLogger);
  uint64_t v38 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  uint64_t v40 = PropertyListDecoder.init()(v39);
  sub_10007ACCC( &qword_10032BC00,  type metadata accessor for PurchaseIntentRequest.Query,  (uint64_t)&protocol conformance descriptor for PurchaseIntentRequest.Query);
  uint64_t v41 = (int *)v123;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v16, v123, v121, v122, v123, v42);
  swift_release(v40);
  sub_1000E9158((uint64_t)v16, (uint64_t)v18, type metadata accessor for PurchaseIntentRequest.Query);
  id v43 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v43)
  {
    sub_1000E8F9C(v118, v117, type metadata accessor for SKLogger);
    uint64_t v47 = (uint64_t *)&v18[v41[7]];
    uint64_t v49 = *v47;
    uint64_t v48 = (void *)v47[1];
    uint64_t v50 = swift_bridgeObjectRetain(v48);
    os_log_type_t v51 = static os_log_type_t.error.getter(v50);
    uint64_t v52 = swift_bridgeObjectRetain_n(v48, 2LL);
    os_log_type_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = v51;
    if (os_log_type_enabled(v53, v51))
    {
      uint64_t v55 = swift_slowAlloc(22LL, -1LL);
      uint64_t v56 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v55 = 136446466;
      uint64_t v125 = v56;
      uint64_t v126 = 91LL;
      v127[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v48);
      v57._uint64_t countAndFlagsBits = v49;
      v57._object = v48;
      String.append(_:)(v57);
      v58._uint64_t countAndFlagsBits = 8285LL;
      v58._object = (void *)0xE200000000000000LL;
      String.append(_:)(v58);
      swift_bridgeObjectRelease(v48);
      unint64_t v59 = v127[0];
      uint64_t v126 = sub_10007A488(v126, v127[0], &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v55 + 4);
      swift_bridgeObjectRelease_n(v48, 2LL);
      swift_bridgeObjectRelease(v59);
      *(_WORD *)(v55 + 12) = 2082;
      uint64_t v126 = sub_10007A488(0xD00000000000003CLL, 0x80000001002A2F10LL, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v55 + 14);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%{public}s%{public}s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_bridgeObjectRelease(v48);
    }

    else
    {

      swift_bridgeObjectRelease_n(v48, 3LL);
    }

    uint64_t v60 = v120;
    sub_100085BC4(v117, type metadata accessor for SKLogger);
    unint64_t v61 = sub_10009BB88();
    uint64_t v62 = swift_allocError(&type metadata for StoreKitInternalError, v61, 0LL, 0LL);
    *uint64_t v63 = 1;
    uint64_t v64 = (void *)_convertErrorToNSError(_:)(v62);
    uint64_t v65 = v124;
    ((void (**)(void, void, void *))v124)[2](v124, 0LL, v64);

    swift_errorRelease(v62);
    goto LABEL_23;
  }

  uint64_t v44 = v43;
  char v45 = v18[v41[6]];
  unsigned __int8 v46 = objc_msgSend(v43, "sk_allowClientOverride");
  if ((v45 & 1) == 0)
  {
    id v122 = v44;
    if ((v46 & 1) != 0)
    {
      unint64_t v119 = 0LL;
      uint64_t v121 = 0LL;
      goto LABEL_19;
    }

    sub_1000E8F9C(v118, v115, type metadata accessor for SKLogger);
    uint64_t v68 = (uint64_t *)&v18[v41[7]];
    uint64_t v70 = *v68;
    uint64_t v69 = (void *)v68[1];
    uint64_t v71 = swift_bridgeObjectRetain(v69);
    os_log_type_t v72 = static os_log_type_t.error.getter(v71);
    uint64_t v73 = swift_bridgeObjectRetain_n(v69, 2LL);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = v72;
    if (os_log_type_enabled(v74, v72))
    {
      uint64_t v76 = swift_slowAlloc(22LL, -1LL);
      uint64_t v77 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v76 = 136446466;
      uint64_t v125 = v77;
      uint64_t v126 = 91LL;
      v127[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v69);
      v78._uint64_t countAndFlagsBits = v70;
      v78._object = v69;
      String.append(_:)(v78);
      v79._uint64_t countAndFlagsBits = 8285LL;
      v79._object = (void *)0xE200000000000000LL;
      String.append(_:)(v79);
      swift_bridgeObjectRelease(v69);
      unint64_t v80 = v127[0];
      uint64_t v126 = sub_10007A488(v126, v127[0], &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v76 + 4);
      swift_bridgeObjectRelease_n(v69, 2LL);
      swift_bridgeObjectRelease(v80);
      *(_WORD *)(v76 + 12) = 2082;
      uint64_t v126 = sub_10007A488(0xD000000000000036LL, 0x80000001002A2F90LL, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v76 + 14);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "%{public}s%{public}s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy(v77, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1LL, -1LL);
      swift_slowDealloc(v76, -1LL, -1LL);
      swift_bridgeObjectRelease(v69);
    }

    else
    {

      swift_bridgeObjectRelease_n(v69, 3LL);
    }

    uint64_t v60 = v120;
    sub_100085BC4(v115, type metadata accessor for SKLogger);
    unint64_t v106 = sub_10009BB88();
    uint64_t v107 = swift_allocError(&type metadata for StoreKitInternalError, v106, 0LL, 0LL);
    *uint64_t v108 = 3;
    unint64_t v109 = (void *)_convertErrorToNSError(_:)(v107);
    uint64_t v65 = v124;
    ((void (**)(void, void, void *))v124)[2](v124, 0LL, v109);

    swift_errorRelease(v107);
LABEL_23:
    sub_100085BC4((uint64_t)v18, type metadata accessor for PurchaseIntentRequest.Query);
    goto LABEL_24;
  }

  if ((v46 & 1) != 0)
  {
    sub_1000E9220((uint64_t)&v18[v41[5]], (uint64_t)v11, &qword_10032A3D8);
  }

  else
  {
    uint64_t v66 = type metadata accessor for ClientOverride(0LL);
    sub_10007D0AC((uint64_t)v11, 1LL, 1LL, v66);
  }

  type metadata accessor for Client(0LL);
  uint64_t v67 = v114;
  sub_1000E9220((uint64_t)v11, v114, &qword_10032A3D8);
  sub_1000E1A28(v44, v67);
  uint64_t v82 = v81;
  id v122 = v44;
  sub_100085298((uint64_t)v11, &qword_10032A3D8);
  uint64_t v83 = *(void *)&v82[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
  unint64_t v119 = *(char **)&v82[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
  uint64_t v121 = v83;
  swift_bridgeObjectRetain(v83);

LABEL_19:
  uint64_t v126 = 0LL;
  v127[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(v127[0]);
  uint64_t v126 = 0xD000000000000016LL;
  v127[0] = 0x80000001002A2DC0LL;
  uint64_t v84 = (uint64_t *)&v18[v41[7]];
  uint64_t v85 = *v84;
  uint64_t v86 = (void *)v84[1];
  swift_bridgeObjectRetain(v86);
  v87._uint64_t countAndFlagsBits = v85;
  v87._object = v86;
  String.append(_:)(v87);
  swift_bridgeObjectRelease(v86);
  uint64_t v88 = v126;
  uint64_t v89 = v127[0];
  id v90 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v90)
  {
    uint64_t v91 = v90;
    sub_100119624(v88, v89, v90);

    uint64_t v92 = type metadata accessor for TaskPriority(0LL);
    uint64_t v93 = v113;
    sub_10007D0AC(v113, 1LL, 1LL, v92);
    uint64_t v94 = v112;
    sub_1000E8F9C((uint64_t)v18, v112, type metadata accessor for PurchaseIntentRequest.Query);
    uint64_t v95 = *(unsigned __int8 *)(v111 + 80);
    uint64_t v96 = (v95 + 48) & ~v95;
    unint64_t v97 = (v12 + v96 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v98 = (uint64_t)v18;
    unint64_t v99 = (v97 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v100 = (void *)swift_allocObject(&unk_1002EE5C0, v99 + 16, v95 | 7);
    void v100[2] = 0LL;
    v100[3] = 0LL;
    uint64_t v101 = v121;
    v100[4] = v119;
    v100[5] = v101;
    sub_1000E9158(v94, (uint64_t)v100 + v96, type metadata accessor for PurchaseIntentRequest.Query);
    uint64_t v102 = (void *)((char *)v100 + v97);
    uint64_t v60 = v120;
    void *v102 = sub_10011AFE8;
    v102[1] = v60;
    uint64_t v103 = (void *)((char *)v100 + v99);
    uint64_t *v103 = v88;
    v103[1] = v89;
    swift_retain(v60);
    sub_100084100(v93);
    uint64_t v105 = v104;

    swift_release(v105);
    sub_100085298(v93, (uint64_t *)&unk_10032BAB0);
    sub_100085BC4(v98, type metadata accessor for PurchaseIntentRequest.Query);
    uint64_t v65 = v124;
LABEL_24:
    swift_release(v60);
    _Block_release(v65);
    return;
  }

  _Block_release(v124);
  swift_bridgeObjectRelease(v121);
  __break(1u);
}

void StoreKitServiceConnection.purchaseIntents(with:reply:)()
{
  uint64_t v2 = v1;
  uint64_t v153 = v3;
  uint64_t v155 = v4;
  uint64_t v156 = v5;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000860EC();
  uint64_t v147 = v7;
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_1000862F4();
  uint64_t v148 = v9;
  sub_100086200();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v142 - v11;
  uint64_t v157 = sub_10011BD90();
  uint64_t v144 = *(void *)(v157 - 8);
  sub_10011B904();
  __chkstk_darwin(v13);
  uint64_t v146 = (char *)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10011B8F8();
  __chkstk_darwin(v15);
  sub_10011BED4();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v142 - v17;
  uint64_t v19 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v20);
  sub_1000862F4();
  id v158 = v21;
  sub_100086200();
  __chkstk_darwin(v22);
  unint64_t v151 = (char *)&v142 - v23;
  sub_100086200();
  __chkstk_darwin(v24);
  uint64_t v150 = (char *)&v142 - v25;
  sub_100086200();
  __chkstk_darwin(v26);
  uint64_t v149 = (char *)&v142 - v27;
  sub_100086200();
  __chkstk_darwin(v28);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v29 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v152 = sub_10011BE08(v29, (uint64_t)qword_10033E1A8);
  sub_10011B040(v152, v30, type metadata accessor for SKLogger);
  static os_log_type_t.default.getter(v31);
  os_log_type_t v32 = (os_log_s *)sub_10011BA40();
  BOOL v33 = sub_10011B8CC(v32);
  uint64_t v34 = &off_100279000;
  uint64_t v154 = v2;
  if (v33)
  {
    uint64_t v35 = sub_10007B9FC(22LL);
    id v143 = v12;
    uint64_t v36 = v35;
    uint64_t v37 = v18;
    uint64_t v38 = sub_10007B9FC(64LL);
    uint64_t v160 = v38;
    *(_DWORD *)uint64_t v36 = 136446466;
    uint64_t v40 = sub_10007BA24(v38, v39, &v160);
    sub_10011C264(v40);
    uint64_t v41 = sub_10011C18C();
    sub_1000F3D94(v41, v42);
    *(_WORD *)(v36 + 12) = 2082;
    sub_10011B248();
    uint64_t v159 = sub_10011B130(v43 + 6, (uint64_t)"purchaseIntents(with:reply:)");
    uint64_t v44 = sub_10011C18C();
    sub_1000F3D94(v44, v45);
    sub_100086038((void *)&_mh_execute_header, v32, (os_log_type_t)v19, "%{public}s%{public}s", (uint8_t *)v36);
    sub_100086030(v38, v46, (uint64_t)&type metadata for Any + 8);
    uint64_t v47 = v38;
    uint64_t v18 = v37;
    uint64_t v34 = &off_100279000;
    sub_10007B974(v47);
    uint64_t v48 = v36;
    uint64_t v12 = v143;
    sub_10007B974(v48);
  }

  sub_10011B354(v49, type metadata accessor for SKLogger);
  uint64_t v50 = sub_10011B960();
  sub_100093D7C(v50);
  sub_10011B9A4();
  sub_10007ACCC( &qword_10032BC00,  type metadata accessor for PurchaseIntentRequest.Query,  (uint64_t)&protocol conformance descriptor for PurchaseIntentRequest.Query);
  os_log_type_t v51 = (int *)v157;
  sub_10011B910();
  sub_10009C5EC();
  if (v19)
  {
    sub_10011BD10(v152, v52, type metadata accessor for SKLogger);
    sub_10011B74C();
    _StringGuts.grow(_:)(39LL);
    sub_100085F08(0xD000000000000025LL, (uint64_t)"Error decoding PurchaseIntentRequest ");
    uint64_t v159 = v19;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v53 = sub_10011B8D8();
    uint64_t v55 = v160;
    uint64_t v54 = v161[0];
    uint64_t v56 = static os_log_type_t.error.getter(v53);
    sub_100085EE8(v54);
    Swift::String v57 = (os_log_s *)sub_100093B00();
    os_log_type_t v58 = v56;
    if (sub_1000B22E8(v57))
    {
      uint64_t v56 = sub_10007B9FC(22LL);
      uint64_t v59 = sub_10007B9FC(64LL);
      uint64_t v160 = v59;
      *(_DWORD *)uint64_t v56 = *((void *)v34 + 58);
      uint64_t v159 = sub_10007BA24(v59, v60, &v160);
      uint64_t v61 = (uint64_t)(v18 + 8);
      sub_1000F3D94((uint64_t)&v159, v61);
      *(_WORD *)(v56 + 12) = 2082;
      sub_100085FEC();
      uint64_t v159 = sub_1000B20F4(v55, v62, &v160);
      sub_1000F3D94((uint64_t)&v159, v61);
      sub_100085E64(v54);
      sub_100086038((void *)&_mh_execute_header, v57, v58, "%{public}s%{public}s", (uint8_t *)v56);
      sub_100086030(v59, v63, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v59);
      sub_10007B974(v56);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v54);
    }

    uint64_t v70 = v153;
    sub_100085BC4((uint64_t)v158, type metadata accessor for SKLogger);
    uint64_t v71 = (void *)sub_10011B30C();
    id v72 = sub_10011B058(v71, "toASDErrorWithMetadata:");
    sub_10011B508();
    v70(0LL, 0xF000000000000000LL, v56);

    sub_1000E93B4();
    goto LABEL_30;
  }

  sub_1000E9158(v0, (uint64_t)v18, type metadata accessor for PurchaseIntentRequest.Query);
  id v64 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (!v64)
  {
    sub_10011B040(v152, v65, type metadata accessor for SKLogger);
    uint64_t v73 = *(void *)&v18[v51[7] + 8];
    uint64_t v74 = sub_100085FEC();
    os_log_type_t v75 = static os_log_type_t.error.getter(v74);
    uint64_t v76 = sub_100085EE8(v73);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = v75;
    if (sub_1000B22A4(v77))
    {
      uint64_t v79 = sub_10007B9FC(22LL);
      uint64_t v80 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v79 = *((void *)v34 + 58);
      uint64_t v159 = v80;
      uint64_t v160 = 91LL;
      v161[0] = 0xE100000000000000LL;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v160 = sub_10008620C(v160, v81, &v159);
      sub_1000E98A0((uint64_t)&v160, (uint64_t)v161);
      sub_10007D974(v73);
      sub_10007B980();
      *(_WORD *)(v79 + 12) = 2082;
      sub_10011B248();
      uint64_t v160 = sub_10011B048(v82 + 38, (uint64_t)"Could not get current connection for purchase intent request");
      sub_100086194((uint64_t)&v160, (uint64_t)v161);
      sub_100086038((void *)&_mh_execute_header, v77, v78, "%{public}s%{public}s", (uint8_t *)v79);
      sub_100086030(v80, v83, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v80);
      sub_10007B974(v79);
      sub_100085EF0();
    }

    else
    {

      uint64_t v84 = sub_100085E64(v73);
    }

    sub_10011C0F0(v84, type metadata accessor for SKLogger);
    unint64_t v85 = sub_10009BB88();
    uint64_t v86 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v85);
    sub_10011B7F4(v86, v87);
    sub_10011B038();
    goto LABEL_28;
  }

  id v66 = v64;
  char v67 = v18[v51[6]];
  unsigned int v68 = objc_msgSend(v64, "sk_allowClientOverride");
  if ((v67 & 1) == 0)
  {
    if ((v68 & 1) != 0)
    {
      uint64_t v155 = 0LL;
      uint64_t v156 = 0LL;
      goto LABEL_24;
    }

    sub_10011B040(v152, v69, type metadata accessor for SKLogger);
    uint64_t v92 = *(void *)&v18[v51[7] + 8];
    uint64_t v93 = sub_100085FEC();
    static os_log_type_t.error.getter(v93);
    uint64_t v94 = sub_100085EE8(v92);
    uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
    if (sub_1000E96FC(v95))
    {
      uint64_t v96 = sub_10007B9FC(22LL);
      uint64_t v97 = sub_10007B9FC(64LL);
      id v158 = v66;
      uint64_t v159 = v97;
      uint64_t v98 = v97;
      *(_DWORD *)uint64_t v96 = *((void *)v34 + 58);
      sub_1000B2110();
      uint64_t v160 = v99;
      v161[0] = v100;
      sub_100085FEC();
      sub_10011B124();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v160 = sub_10008620C(v160, v101, &v159);
      sub_1000E98A0((uint64_t)&v160, (uint64_t)v161);
      sub_10007D974(v92);
      sub_10007B980();
      *(_WORD *)(v96 + 12) = 2082;
      sub_10011B248();
      uint64_t v160 = sub_10011B048(v102 + 32, (uint64_t)"Client is not entitled to request all purchase intents");
      sub_100086194((uint64_t)&v160, (uint64_t)v161);
      sub_100086038((void *)&_mh_execute_header, v95, (os_log_type_t)v51, "%{public}s%{public}s", (uint8_t *)v96);
      sub_100086030(v98, v103, (uint64_t)&type metadata for Any + 8);
      uint64_t v104 = v98;
      id v66 = v158;
      sub_10007B974(v104);
      sub_10007B974(v96);
      sub_100085EF0();
    }

    else
    {

      uint64_t v105 = sub_100085E64(v92);
    }

    uint64_t v137 = (void (*)(uint64_t))v153;
    sub_10011C0E8(v105, type metadata accessor for SKLogger);
    unint64_t v138 = sub_10009BB88();
    uint64_t v139 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v138);
    uint64_t v141 = sub_10011BDBC(v139, v140);
    v137(v141);
    sub_10011B038();

LABEL_28:
    uint64_t v136 = (uint64_t)v18;
    goto LABEL_29;
  }

  if (v68)
  {
    sub_1000E9220((uint64_t)&v18[v51[5]], (uint64_t)v12, &qword_10032A3D8);
  }

  else
  {
    uint64_t v88 = sub_1000E953C();
    sub_1000875FC((uint64_t)v12, v89, v90, v88);
  }

  sub_1000E66E0();
  uint64_t v91 = v148;
  sub_1000E9220((uint64_t)v12, v148, &qword_10032A3D8);
  sub_1000E1A28(v66, v91);
  uint64_t v107 = (char *)v106;
  sub_10011BF58(v106, &qword_10032A3D8);
  uint64_t v108 = *(void *)&v107[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
  uint64_t v155 = *(void *)&v107[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
  uint64_t v156 = v108;
  swift_bridgeObjectRetain(v108);

LABEL_24:
  id v158 = v66;
  sub_10011B74C();
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(v161[0]);
  sub_1000AB058();
  uint64_t v160 = 0xD000000000000016LL;
  v161[0] = v109;
  uint64_t v110 = (uint64_t *)&v18[v51[7]];
  uint64_t v111 = *v110;
  uint64_t v112 = (void *)v110[1];
  sub_10008600C();
  v113._uint64_t countAndFlagsBits = v111;
  v113._object = v112;
  String.append(_:)(v113);
  sub_100086004();
  uint64_t v114 = v160;
  uint64_t v115 = v161[0];
  id v116 = [(id)objc_opt_self(TransactionStore) globalStore];
  if (v116)
  {
    uint64_t v117 = v116;
    uint64_t v118 = sub_10009C714();
    sub_100119624(v118, v119, v117);

    uint64_t v120 = sub_1000AAD2C();
    uint64_t v121 = v147;
    sub_1000875FC(v147, v122, v123, v120);
    uint64_t v124 = (uint64_t)v146;
    sub_10011C1AC((uint64_t)v18);
    uint64_t v125 = *(unsigned __int8 *)(v144 + 80);
    uint64_t v126 = (v125 + 48) & ~v125;
    unint64_t v127 = (v145 + v126 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    id v128 = v18;
    unint64_t v129 = (v127 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v130 = (void *)swift_allocObject(&unk_1002EE480, v129 + 16, v125 | 7);
    v130[2] = 0LL;
    v130[3] = 0LL;
    uint64_t v131 = v156;
    v130[4] = v155;
    v130[5] = v131;
    sub_1000E9158(v124, (uint64_t)v130 + v126, type metadata accessor for PurchaseIntentRequest.Query);
    uint64_t v132 = (void *)((char *)v130 + v127);
    uint64_t v133 = v154;
    *uint64_t v132 = v153;
    v132[1] = v133;
    uint64_t v134 = (void *)((char *)v130 + v129);
    *uint64_t v134 = v114;
    v134[1] = v115;
    swift_retain(v133);
    sub_100084100(v121);

    uint64_t v135 = sub_1000C6388();
    sub_1000C65DC(v135, (uint64_t *)&unk_10032BAB0);
    uint64_t v136 = (uint64_t)v128;
LABEL_29:
    sub_100085BC4(v136, type metadata accessor for PurchaseIntentRequest.Query);
LABEL_30:
    sub_100085E98();
    return;
  }

  swift_bridgeObjectRelease(v156);
  __break(1u);
}

uint64_t sub_10011499C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = v12;
  v8[16] = v13;
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  v8[17] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[18] = swift_task_alloc(v10);
  v8[19] = swift_task_alloc(v10);
  return swift_task_switch(sub_100114A18, 0LL, 0LL);
}

uint64_t sub_100114A18()
{
  uint64_t v38 = v1;
  uint64_t v39 = v2;
  uint64_t v37 = v0;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = sub_100079604(*(void *)(v0 + 136), (uint64_t)qword_10033E1A8);
  *(void *)(v0 + 160) = v6;
  sub_10011B8C4(v6, v7, type metadata accessor for SKLogger);
  sub_10011B5AC();
  swift_bridgeObjectRelease(v36);
  uint64_t v35 = 0x676E697972657551LL;
  unint64_t v36 = 0xE900000000000020LL;
  if (!v4) {
    uint64_t v3 = 7105633LL;
  }
  sub_100085FEC();
  sub_10009C350(v3);
  sub_1000930DC();
  sub_1000862B8();
  sub_1000D4F2C(17LL, v8);
  uint64_t v10 = v35;
  uint64_t v9 = v36;
  uint64_t v11 = sub_10011BD90();
  uint64_t v12 = *(int *)(v11 + 28);
  *(_DWORD *)(v0 + 192) = v12;
  uint64_t v13 = (uint64_t *)(v5 + v12);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *(void *)(v0 + 168) = v14;
  os_log_type_t v16 = static os_log_type_t.default.getter(v11);
  sub_100085EE8(v14);
  sub_100085EE8(v9);
  uint64_t v17 = (os_log_s *)sub_10009C5AC();
  if (sub_10011C02C(v17))
  {
    uint64_t v32 = v10;
    uint64_t v18 = sub_10007B9FC(22LL);
    uint64_t v33 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v34 = v33;
    uint64_t v35 = 91LL;
    unint64_t v36 = 0xE100000000000000LL;
    sub_10007BA3C();
    sub_100093624(v15);
    sub_100085F14();
    sub_10007BA44();
    *(void *)(v0 + 64) = sub_10008620C(91LL, v19, &v34);
    sub_1000AB080(v0 + 64, v0 + 72, v20, v18 + 12, v21, v22, v23, v24, v18 + 4);
    sub_10007B980();
    sub_10007D974(v14);
    *(_WORD *)(v18 + 12) = 2082;
    sub_1000930E4();
    *(void *)(v0 + 72) = sub_10011C3BC(v32, v25, &v34);
    sub_100086194(v0 + 72, v0 + 80);
    sub_100085E64(v9);
    sub_100086038((void *)&_mh_execute_header, v17, v16, "%{public}s%{public}s", (uint8_t *)v18);
    sub_100086030(v33, v26, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v33);
    sub_10007B974(v18);

    sub_1000930DC();
  }

  else
  {
    sub_10007D974(v14);
    sub_100085E64(v9);
  }

  sub_100085BC4(*(void *)(v0 + 152), type metadata accessor for SKLogger);
  sub_10007BA3C();
  uint64_t v27 = (void *)sub_100093010();
  *(void *)(v0 + 176) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_100114CD8;
  uint64_t v28 = sub_1000C6298(*(void *)(v0 + 80));
  return sub_1000AEA20(v28, v29, v30, v15, v14);
}

uint64_t sub_100114CD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = a1;
  swift_task_dealloc(v2);
  sub_10007B980();
  sub_100093420();
  return sub_100092F20();
}

id sub_100114D2C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = sub_10011BF78();
  sub_100093D7C(v2);
  sub_10011BFF4();
  *(void *)(v0 + 32) = v1;
  uint64_t v3 = sub_10007B1FC(&qword_10032BD00);
  unint64_t v4 = sub_10011A974();
  dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 32, v3, v4);
  swift_bridgeObjectRelease(*(void *)(v0 + 184));
  uint64_t v5 = sub_10011C2CC();
  sub_1000881FC(v5, v6);
  sub_10011C004();
  sub_10011B9D0();
  sub_10011B9D0();
  sub_1000C6388();
  id result = [(id)objc_opt_self(TransactionStore) globalStore];
  if (result)
  {
    uint64_t v8 = result;
    sub_10011B418(*(void *)(v0 + 120), *(void *)(v0 + 128));

    sub_1000931C8();
    sub_100093280();
    return (id)sub_100093840(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100115058(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v43 = a1;
  uint64_t v6 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = swift_allocObject(&unk_1002EE548, 24LL, 7LL);
  *(void *)(v15 + 16) = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v44 = sub_100079604(v9, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v44, (uint64_t)v14, type metadata accessor for SKLogger);
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  os_log_type_t v18 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v20 = v18;
  if (os_log_type_enabled(v19, v18))
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = v15;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc(64LL, -1LL);
    uint64_t v46 = v23;
    *(_DWORD *)uint64_t v22 = 136446466;
    uint64_t v45 = sub_10007A488(0LL, 0xE000000000000000LL, &v46);
    uint64_t v41 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v22 + 4);
    *(_WORD *)(v22 + 12) = 2082;
    uint64_t v45 = sub_10007A488(0xD000000000000024LL, 0x80000001002A2FD0LL, &v46);
    a2 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v22 + 14);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s%{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v24 = v22;
    uint64_t v15 = v42;
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v14, type metadata accessor for SKLogger);
  id v25 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v25)
  {
    uint64_t v26 = v25;
    if (objc_msgSend(v25, "sk_allowClientOverride"))
    {
      uint64_t v27 = type metadata accessor for TaskPriority(0LL);
      sub_10007D0AC((uint64_t)v8, 1LL, 1LL, v27);
      uint64_t v28 = (void *)swift_allocObject(&unk_1002EE570, 64LL, 7LL);
      void v28[2] = 0LL;
      v28[3] = 0LL;
      v28[4] = v43;
      v28[5] = a2;
      v28[6] = sub_100084930;
      v28[7] = v15;
      swift_bridgeObjectRetain(a2);
      swift_retain(v15);
      sub_100084100((uint64_t)v8);
      uint64_t v30 = v29;

      swift_release(v30);
      sub_100085298((uint64_t)v8, (uint64_t *)&unk_10032BAB0);
      goto LABEL_12;
    }
  }

  sub_1000E8F9C(v44, (uint64_t)v12, type metadata accessor for SKLogger);
  uint64_t v32 = static os_log_type_t.error.getter(v31);
  os_log_type_t v33 = v32;
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v32);
  if (os_log_type_enabled(v34, v33))
  {
    uint64_t v35 = swift_slowAlloc(22LL, -1LL);
    uint64_t v36 = swift_slowAlloc(64LL, -1LL);
    uint64_t v46 = v36;
    *(_DWORD *)uint64_t v35 = 136446466;
    uint64_t v45 = sub_10007A488(0LL, 0xE000000000000000LL, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v35 + 4);
    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v45 = sub_10007A488(0xD000000000000039LL, 0x80000001002A3000LL, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v35 + 14);
    _os_log_impl((void *)&_mh_execute_header, v34, v33, "%{public}s%{public}s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v12, type metadata accessor for SKLogger);
  unint64_t v37 = sub_10009BB88();
  uint64_t v38 = swift_allocError(&type metadata for StoreKitInternalError, v37, 0LL, 0LL);
  *uint64_t v39 = 3;
  uint64_t v40 = (void *)_convertErrorToNSError(_:)(v38);
  ((void (**)(void, void *))a4)[2](a4, v40);

  swift_errorRelease(v38);
LABEL_12:
  swift_release(v15);
  _Block_release(a4);
}

void StoreKitServiceConnection.setAppInstallSheetBundleID(_:reply:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v48 = v6;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_100085FDC();
  uint64_t v10 = v9 - v8;
  os_log_type_t v11 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v12);
  sub_1000D4F0C();
  __chkstk_darwin(v13);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v14 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v49 = sub_10011BE08(v14, (uint64_t)qword_10033E1A8);
  sub_10011B040(v49, v15, type metadata accessor for SKLogger);
  static os_log_type_t.default.getter(v16);
  uint64_t v17 = (os_log_s *)sub_10011BA40();
  if (sub_10011B8CC(v17))
  {
    uint64_t v47 = v1;
    uint64_t v18 = sub_10007B9FC(22LL);
    uint64_t v46 = v5;
    uint64_t v19 = sub_10007B9FC(64LL);
    uint64_t v51 = v19;
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v50 = sub_10007BA24(v19, v20, &v51);
    sub_1000C6390((uint64_t)&v50, (uint64_t)&v51);
    *(_WORD *)(v18 + 12) = 2082;
    sub_10011B894();
    uint64_t v50 = sub_1000AB050(36LL, v21, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v18 + 14);
    sub_100086038((void *)&_mh_execute_header, v17, v11, "%{public}s%{public}s", (uint8_t *)v18);
    sub_100086030(v19, v23, (uint64_t)&type metadata for Any + 8);
    uint64_t v24 = v19;
    uint64_t v5 = v46;
    sub_10007B974(v24);
    uint64_t v25 = v18;
    uint64_t v1 = v47;
    sub_10007B974(v25);
  }

  sub_10011B354(v26, type metadata accessor for SKLogger);
  id v27 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v27)
  {
    uint64_t v29 = v27;
    if (objc_msgSend(v27, "sk_allowClientOverride"))
    {
      uint64_t v30 = sub_1000AAD2C();
      sub_1000875FC(v10, v31, v32, v30);
      os_log_type_t v33 = (void *)sub_1000AA314((uint64_t)&unk_1002EE4A8, 64LL);
      v33[2] = 0LL;
      v33[3] = 0LL;
      v33[4] = v48;
      v33[5] = v5;
      v33[6] = v3;
      v33[7] = v1;
      sub_100093528();
      swift_retain(v1);
      sub_100084100(v10);

      uint64_t v34 = sub_1000C6388();
      sub_10011C2C4(v34, (uint64_t *)&unk_10032BAB0);
      goto LABEL_12;
    }
  }

  sub_10011BD38(v49, v28, type metadata accessor for SKLogger);
  static os_log_type_t.error.getter(v35);
  uint64_t v36 = (os_log_s *)sub_10011C0CC();
  if (sub_10011C2A4(v36))
  {
    unint64_t v37 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v38 = v3;
    uint64_t v39 = sub_10007B9FC(64LL);
    uint64_t v51 = v39;
    *(_DWORD *)unint64_t v37 = 136446466;
    uint64_t v50 = sub_10007BA24(v39, v40, &v51);
    sub_1000C6390((uint64_t)&v50, (uint64_t)&v51);
    sub_10011BE70();
    uint64_t v50 = sub_1000E9544(0xD000000000000039LL, (uint64_t)"Client is not entitled to set app install sheet bundle ID");
    sub_1000C6390((uint64_t)&v50, (uint64_t)&v51);
    sub_100086038((void *)&_mh_execute_header, v36, v11, "%{public}s%{public}s", v37);
    sub_100086030(v39, v41, (uint64_t)&type metadata for Any + 8);
    uint64_t v42 = v39;
    uint64_t v3 = v38;
    sub_10007B974(v42);
    sub_10007B974((uint64_t)v37);
  }

  sub_10011C288(v43, type metadata accessor for SKLogger);
  unint64_t v44 = sub_10009BB88();
  sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v44);
  *uint64_t v45 = 3;
  v3();
  sub_10011B038();
LABEL_12:
  sub_100085E98();
}

uint64_t sub_100115958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  void v7[5] = a5;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  v7[8] = v8;
  v7[9] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001159B8, 0LL, 0LL);
}

uint64_t sub_1001159B8()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = sub_100079604(v0[8], (uint64_t)qword_10033E1A8);
  sub_10011B714(v1, v2, type metadata accessor for SKLogger);
  _StringGuts.grow(_:)(40LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  v20[0] = 0xD000000000000025LL;
  v20[1] = 0x80000001002A3290LL;
  sub_10008618C();
  sub_10011C1EC();
  sub_10009C494();
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  sub_100085EE8(0x80000001002A3290LL);
  uint64_t v6 = (os_log_s *)sub_10009C414();
  if (sub_10009396C(v6))
  {
    uint64_t v7 = sub_10007B9FC(22LL);
    uint64_t v8 = sub_10007B9FC(64LL);
    v20[0] = v8;
    uint64_t v9 = v8;
    *(_DWORD *)uint64_t v7 = 136446466;
    v0[2] = sub_10007BA24(v8, v10, v20);
    sub_1000E98A0((uint64_t)(v0 + 2), (uint64_t)(v0 + 3));
    *(_WORD *)(v7 + 12) = 2082;
    sub_10008618C();
    v0[3] = sub_1000C6228(0xD000000000000025LL, v11, v20);
    sub_1000C6390((uint64_t)(v0 + 3), (uint64_t)(v0 + 4));
    sub_100085E64(0x80000001002A3290LL);
    sub_100086038((void *)&_mh_execute_header, v6, v5, "%{public}s%{public}s", (uint8_t *)v7);
    sub_100086030(v9, v12, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v9);
    sub_10007B974(v7);

    sub_100085FB4();
  }

  else
  {
    sub_100085E64(0x80000001002A3290LL);
  }

  sub_100085BC4(v0[9], type metadata accessor for SKLogger);
  sub_1000F4060();
  v0[10] = v13;
  uint64_t v14 = (void *)swift_task_alloc(dword_10032A81C);
  v0[11] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100115C18;
  sub_1000C6298(v0[4]);
  sub_10011BF1C();
  return sub_1000AFD28(v15, v16, v17, v18);
}

uint64_t sub_100115C18()
{
  return sub_100092F20();
}

uint64_t sub_100115C50()
{
  return sub_1000AA42C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100115C90( void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  if (a3)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    a3 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  _Block_copy(v8);
  id v11 = a1;
  a5(v9, a3, v11, v8);
  _Block_release(v8);

  return swift_bridgeObjectRelease(a3);
}

void sub_100115D20(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v90 = a1;
  uint64_t v91 = a2;
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v5);
  uint64_t v83 = (uint64_t)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10007B1FC(&qword_10032A3D8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v84 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  id v11 = (char *)&v80 - v10;
  uint64_t v92 = type metadata accessor for StorefrontRequest(0LL);
  uint64_t v81 = *(void *)(v92 - 8);
  uint64_t v12 = *(void *)(v81 + 64);
  uint64_t v13 = __chkstk_darwin(v92);
  uint64_t v82 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v89 = (uint64_t *)((char *)&v80 - v15);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v80 - v16;
  uint64_t v18 = type metadata accessor for SKLogger(0LL);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v86 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v85 = (uint64_t)&v80 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v80 - v24;
  uint64_t v88 = swift_allocObject(&unk_1002EE4F8, 24LL, 7LL);
  *(void *)(v88 + 16) = a4;
  uint64_t v93 = a4;
  _Block_copy(a4);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v87 = sub_100079604(v18, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v87, (uint64_t)v25, type metadata accessor for SKLogger);
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  os_log_type_t v28 = v27;
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v30 = v28;
  if (os_log_type_enabled(v29, v28))
  {
    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v80 = v12;
    uint64_t v33 = v32;
    uint64_t v95 = v32;
    *(_DWORD *)uint64_t v31 = 136446466;
    uint64_t v94 = sub_10007A488(0LL, 0xE000000000000000LL, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v31 + 4);
    *(_WORD *)(v31 + 12) = 2082;
    uint64_t v94 = sub_10007A488(0xD000000000000014LL, 0x80000001002A3040LL, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v31 + 14);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v12 = v80;
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  sub_100085BC4((uint64_t)v25, type metadata accessor for SKLogger);
  uint64_t v34 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  uint64_t v36 = PropertyListDecoder.init()(v35);
  sub_10007ACCC( &qword_10032BC28,  type metadata accessor for StorefrontRequest,  (uint64_t)&protocol conformance descriptor for StorefrontRequest);
  unint64_t v37 = v89;
  uint64_t v38 = v92;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v89, v92, v90, v91, v92, v39);
  swift_release(v36);
  sub_1000E9158((uint64_t)v37, (uint64_t)v17, type metadata accessor for StorefrontRequest);
  id v40 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v40)
  {
    uint64_t v41 = v40;
    if (objc_msgSend(v40, "sk_allowClientOverride"))
    {
      sub_1000E9220((uint64_t)v17, (uint64_t)v11, &qword_10032A3D8);
    }

    else
    {
      uint64_t v56 = type metadata accessor for ClientOverride(0LL);
      sub_10007D0AC((uint64_t)v11, 1LL, 1LL, v56);
    }

    uint64_t v57 = (uint64_t)v84;
    type metadata accessor for Client(0LL);
    sub_1000E9220((uint64_t)v11, v57, &qword_10032A3D8);
    id v58 = v41;
    sub_1000E1A28(v58, v57);
    uint64_t v59 = (uint64_t)v11;
    uint64_t v61 = v60;
    uint64_t v62 = type metadata accessor for TaskPriority(0LL);
    uint64_t v63 = v83;
    sub_10007D0AC(v83, 1LL, 1LL, v62);
    uint64_t v64 = v82;
    sub_1000E8F9C((uint64_t)v17, v82, type metadata accessor for StorefrontRequest);
    uint64_t v65 = *(unsigned __int8 *)(v81 + 80);
    uint64_t v66 = (v65 + 32) & ~v65;
    unint64_t v67 = (v12 + v66 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v68 = (v67 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v69 = swift_allocObject(&unk_1002EE520, v68 + 16, v65 | 7);
    *(void *)(v69 + 16) = 0LL;
    *(void *)(v69 + 24) = 0LL;
    sub_1000E9158(v64, v69 + v66, type metadata accessor for StorefrontRequest);
    *(void *)(v69 + v67) = v61;
    uint64_t v70 = (void (**)(uint64_t, unint64_t, uint64_t))(v69 + v68);
    uint64_t v71 = v88;
    *uint64_t v70 = sub_100119CE0;
    v70[1] = (void (*)(uint64_t, unint64_t, uint64_t))v71;
    id v72 = v61;
    swift_retain(v71);
    sub_100084100(v63);
    uint64_t v74 = v73;

    swift_release(v74);
    sub_100085298(v63, (uint64_t *)&unk_10032BAB0);
    sub_100085298(v59, &qword_10032A3D8);
    uint64_t v75 = (uint64_t)v17;
  }

  else
  {
    sub_1000E8F9C(v87, v85, type metadata accessor for SKLogger);
    uint64_t v42 = (uint64_t *)&v17[*(int *)(v38 + 20)];
    uint64_t v44 = *v42;
    uint64_t v43 = (void *)v42[1];
    uint64_t v45 = swift_bridgeObjectRetain(v43);
    os_log_type_t v46 = static os_log_type_t.error.getter(v45);
    uint64_t v47 = swift_bridgeObjectRetain_n(v43, 2LL);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = v46;
    if (os_log_type_enabled(v48, v46))
    {
      uint64_t v50 = swift_slowAlloc(22LL, -1LL);
      uint64_t v51 = swift_slowAlloc(64LL, -1LL);
      uint64_t v92 = (uint64_t)v17;
      uint64_t v52 = v51;
      *(_DWORD *)uint64_t v50 = 136446466;
      uint64_t v94 = v51;
      uint64_t v95 = 91LL;
      v96[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v43);
      v53._uint64_t countAndFlagsBits = v44;
      v53._object = v43;
      String.append(_:)(v53);
      v54._uint64_t countAndFlagsBits = 8285LL;
      v54._object = (void *)0xE200000000000000LL;
      String.append(_:)(v54);
      swift_bridgeObjectRelease(v43);
      unint64_t v55 = v96[0];
      uint64_t v95 = sub_10007A488(v95, v96[0], &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v50 + 4);
      swift_bridgeObjectRelease_n(v43, 2LL);
      swift_bridgeObjectRelease(v55);
      *(_WORD *)(v50 + 12) = 2082;
      uint64_t v95 = sub_10007A488(0xD000000000000037LL, 0x80000001002A3060LL, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v50 + 14);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "%{public}s%{public}s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v17 = (char *)v92;
      swift_slowDealloc(v52, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_bridgeObjectRelease(v43);
    }

    else
    {

      swift_bridgeObjectRelease_n(v43, 3LL);
    }

    uint64_t v71 = v88;
    sub_100085BC4(v85, type metadata accessor for SKLogger);
    unint64_t v76 = sub_10009BB88();
    uint64_t v77 = swift_allocError(&type metadata for StoreKitInternalError, v76, 0LL, 0LL);
    _BYTE *v78 = 1;
    uint64_t v79 = (void *)_convertErrorToNSError(_:)(v77);
    ((void (**)(void, void, void *))v93)[2](v93, 0LL, v79);

    swift_errorRelease(v77);
    uint64_t v75 = (uint64_t)v17;
  }

  sub_100085BC4(v75, type metadata accessor for StorefrontRequest);
  swift_release(v71);
  _Block_release(v93);
}

void StoreKitServiceConnection.storefront(_:reply:)()
{
  uint64_t v117 = v0;
  uint64_t v2 = v1;
  uint64_t v119 = v3;
  uint64_t v120 = v4;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v5);
  sub_10011BC90(v6, v109[0]);
  sub_10007B1FC(&qword_10032A3D8);
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_1000862F4();
  uint64_t v113 = v8;
  sub_100086200();
  __chkstk_darwin(v9);
  id v11 = (char *)v109 - v10;
  uint64_t v121 = (void *)sub_10011BD98();
  v109[0] = *(v121 - 1);
  uint64_t v12 = *(void *)(v109[0] + 64);
  uint64_t v13 = __chkstk_darwin(v121);
  v109[1] = (uint64_t)v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  sub_1000E9670();
  uint64_t v118 = v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v109 - v16;
  uint64_t v18 = (uint8_t *)sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v19);
  id v116 = (char *)v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100086200();
  __chkstk_darwin(v21);
  uint64_t v112 = (char *)v109 - v22;
  sub_100086200();
  __chkstk_darwin(v23);
  uint64_t v114 = (char *)v109 - v24;
  sub_100086200();
  __chkstk_darwin(v25);
  sub_10011B0F8();
  if (qword_100328B40 != -1) {
    uint64_t v26 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v115 = sub_10011BE08(v26, (uint64_t)qword_10033E1A8);
  sub_10011B040(v115, v27, type metadata accessor for SKLogger);
  static os_log_type_t.default.getter(v28);
  uint64_t v29 = (os_log_s *)sub_10011BA40();
  os_log_type_t v30 = v18;
  if (sub_10009396C(v29))
  {
    uint64_t v18 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v31 = sub_10007B9FC(64LL);
    uint64_t v111 = v11;
    uint64_t v32 = v31;
    v123[0] = v31;
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v34 = sub_10007BA24(v31, v33, v123);
    sub_10011BE90(v34);
    sub_1000B21CC((uint64_t)&v122, v35 + 8);
    sub_10011C11C();
    sub_10011B884();
    uint64_t v38 = sub_1000AB050(20LL, v36, v37);
    uint64_t v39 = sub_10011BE80(v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, v40, v18 + 14);
    sub_100086038((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s", v18);
    sub_100086030(v32, v41, (uint64_t)&type metadata for Any + 8);
    uint64_t v42 = v32;
    id v11 = v111;
    sub_10007B974(v42);
    sub_10007B974((uint64_t)v18);
  }

  sub_10011B354(v43, type metadata accessor for SKLogger);
  uint64_t v44 = sub_10011B960();
  sub_100093D7C(v44);
  sub_10011B9A4();
  sub_10007ACCC( &qword_10032BC28,  type metadata accessor for StorefrontRequest,  (uint64_t)&protocol conformance descriptor for StorefrontRequest);
  uint64_t v45 = v118;
  os_log_type_t v46 = v121;
  sub_10011B910();
  sub_10009C5EC();
  if (v18)
  {
    sub_10011C128(v115, v47, type metadata accessor for SKLogger);
    sub_10011BC7C();
    sub_100085F08(0xD000000000000025LL, (uint64_t)"Error decoding PurchaseIntentRequest ");
    uint64_t v122 = (uint64_t)v18;
    sub_10007B1FC(&qword_100329B90);
    sub_10011B420();
    uint64_t v48 = sub_10011C2E4();
    sub_100085EE8(v12);
    os_log_type_t v49 = (os_log_s *)sub_1000DB3CC();
    if (sub_1000E96FC(v49))
    {
      uint64_t v48 = sub_10007B9FC(22LL);
      uint64_t v50 = sub_10007B9FC(64LL);
      v123[0] = v50;
      *(_DWORD *)uint64_t v48 = 136446466;
      uint64_t v122 = sub_10007BA24(v50, v51, v123);
      sub_1000E98A0((uint64_t)&v122, (uint64_t)v29 + 8);
      *(_WORD *)(v48 + 12) = 2082;
      sub_100085FEC();
      uint64_t v122 = sub_1000B20F4((uint64_t)v11, v52, v123);
      sub_10011C3C4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54, v55);
      sub_100085E64(v12);
      sub_100086038((void *)&_mh_execute_header, v49, (os_log_type_t)0x14u, "%{public}s%{public}s", (uint8_t *)v48);
      sub_100086030(v50, v56, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v50);
      sub_10007B974(v48);
      sub_100085EF0();
    }

    else
    {

      uint64_t v57 = sub_100085E64(v12);
    }

    sub_1000E97FC(v57, type metadata accessor for SKLogger);
    uint64_t v61 = (void *)sub_10011B30C();
    id v62 = sub_10011B058(v61, "toASDErrorWithMetadata:");
    sub_10011B508();
    v2(0LL, 0xF000000000000000LL, v48);

    sub_1000E93B4();
  }

  else
  {
    sub_1000E9158(v45, (uint64_t)v17, type metadata accessor for StorefrontRequest);
    id v58 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
    if (v58)
    {
      uint64_t v60 = v58;
      if (objc_msgSend(v58, "sk_allowClientOverride"))
      {
        sub_1000E9220((uint64_t)v17, (uint64_t)v11, &qword_10032A3D8);
      }

      else
      {
        uint64_t v82 = sub_1000E953C();
        sub_1000875FC((uint64_t)v11, v83, v84, v82);
      }

      sub_1000E66E0();
      sub_10011C1D0((uint64_t)v11, v85, &qword_10032A3D8);
      id v86 = v60;
      sub_10011C1D8(v86);
      uint64_t v88 = v87;
      uint64_t v89 = sub_1000AAD2C();
      uint64_t v121 = v86;
      uint64_t v90 = v110;
      sub_1000875FC(v110, v91, v92, v89);
      sub_10011B040((uint64_t)v17, v93, type metadata accessor for StorefrontRequest);
      sub_10011C0DC();
      unint64_t v96 = (v12 + (v95 & ~v94) + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v97 = (v96 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v98 = swift_allocObject(&unk_1002EE4D0, v97 + 16, v94 | 7);
      uint64_t v99 = sub_10011C2EC(v98);
      sub_1000E9158(v99, v100, type metadata accessor for StorefrontRequest);
      *(void *)(v98 + v96) = v88;
      uint64_t v101 = (void *)(v98 + v97);
      uint64_t v102 = v117;
      *uint64_t v101 = v2;
      v101[1] = v102;
      id v103 = v88;
      swift_retain(v102);
      sub_100084100(v90);

      sub_1000C6388();
      sub_100085298(v90, (uint64_t *)&unk_10032BAB0);
      sub_10011BF58(v104, &qword_10032A3D8);
      uint64_t v105 = (uint64_t)v17;
    }

    else
    {
      sub_10011B040(v115, v59, type metadata accessor for SKLogger);
      uint64_t v63 = (uint64_t *)&v17[*((int *)v46 + 5)];
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      uint64_t v66 = sub_100085FEC();
      static os_log_type_t.error.getter(v66);
      uint64_t v67 = sub_100085EE8(v64);
      unint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
      if (sub_1000E96FC(v68))
      {
        uint64_t v69 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v70 = sub_10007B9FC(64LL);
        sub_10011C0AC(4.8752e-34);
        uint64_t v122 = v71;
        v123[0] = v72;
        v123[1] = v73;
        sub_100085FEC();
        sub_10011B124();
        sub_100085F14();
        sub_100085EF0();
        uint64_t v75 = sub_10008620C(v123[0], v74, &v122);
        uint64_t v76 = sub_10011B9FC(v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v77, v78);
        sub_10007D974(v64);
        sub_10007B980();
        sub_10011BE40();
        v123[0] = sub_10011B130(v79 + 35, (uint64_t)"Could not get current connection for storefront request");
        sub_100086194((uint64_t)v123, v65);
        sub_100086038((void *)&_mh_execute_header, v68, (os_log_type_t)0x14u, "%{public}s%{public}s", v69);
        sub_100086030(v70, v80, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v70);
        sub_10007B974((uint64_t)v69);
        sub_100085EF0();
      }

      else
      {

        uint64_t v81 = sub_100085E64(v64);
      }

      sub_10011B354(v81, type metadata accessor for SKLogger);
      unint64_t v106 = sub_10009BB88();
      uint64_t v107 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v106);
      sub_10011B814(v107, v108);
      sub_10011B038();
      uint64_t v105 = (uint64_t)v17;
    }

    sub_100085BC4(v105, type metadata accessor for StorefrontRequest);
  }

  sub_100085E98();
}

uint64_t sub_100117368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  v7[13] = v8;
  v7[14] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for StorefrontInternal(0LL);
  v7[15] = v9;
  v7[16] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10007B1FC(&qword_10032BCE0);
  v7[17] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[18] = swift_task_alloc(v11);
  v7[19] = swift_task_alloc(v11);
  return swift_task_switch(sub_100117424, 0LL, 0LL);
}

uint64_t sub_100117424()
{
  if (qword_100328B08 != -1) {
    swift_once(&qword_100328B08, sub_1000DFB64);
  }
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(int *)(sub_10011BD98() + 20);
  *(_DWORD *)(v0 + 184) = v3;
  uint64_t v4 = (void *)(v1 + v3);
  uint64_t v5 = v4[1];
  *(void *)(v0 + 16) = *v4;
  *(void *)(v0 + 24) = v5;
  uint64_t v6 = sub_1000B2348();
  *(void *)(v0 + 160) = v6;
  *(void *)(v6 + 16) = v2;
  uint64_t v7 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
  sub_100085FEC();
  uint64_t v8 = (void *)swift_task_alloc(v7);
  *(void *)(v0 + 168) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10011752C;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)( *(void *)(v0 + 152),  v0 + 16,  &unk_10032BCF0,  v6,  0LL,  0LL,  0xD000000000000029LL,  0x80000001002A3240LL);
}

uint64_t sub_10011752C()
{
  *(void *)(v1 + 176) = v0;
  swift_task_dealloc(v3);
  sub_1000931C8();
  sub_10011BF98();
  sub_100093420();
  return sub_10009C2D4();
}

uint64_t sub_100117574( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  sub_1000E9220(*(void *)(v28 + 152), *(void *)(v28 + 144), &qword_10032BCE0);
  if (sub_10011BA30() == 1)
  {
    uint64_t v31 = *(void (**)(void, unint64_t, uint64_t))(v28 + 88);
    sub_100085298(*(void *)(v28 + 144), &qword_10032BCE0);
    unint64_t v32 = sub_10009BB88();
    uint64_t v33 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v32);
    *uint64_t v34 = 7;
    v31(0LL, 0xF000000000000000LL, v33);
    uint64_t v35 = sub_10011B038();
  }

  else
  {
    uint64_t v36 = *(void *)(v28 + 176);
    sub_1000E9158(*(void *)(v28 + 144), *(void *)(v28 + 128), type metadata accessor for StorefrontInternal);
    uint64_t v37 = sub_10011BF78();
    sub_100093D7C(v37);
    sub_10011BFF4();
    sub_10007ACCC( &qword_10032BCF8,  type metadata accessor for StorefrontInternal,  (uint64_t)&protocol conformance descriptor for StorefrontInternal);
    uint64_t v38 = sub_10011C2CC();
    uint64_t v41 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v38, v39, v40);
    if (v36)
    {
      sub_1000C6388();
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v43 = (uint64_t *)(*(void *)(v28 + 72) + *(int *)(v28 + 184));
      uint64_t v44 = sub_100079604(*(void *)(v28 + 104), (uint64_t)qword_10033E1A8);
      sub_10011B714(v44, v45, type metadata accessor for SKLogger);
      a15 = 0LL;
      a16 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(28LL);
      unint64_t v46 = a16;
      *(void *)(v28 + 32) = a15;
      *(void *)(v28 + 40) = v46;
      v47._uint64_t countAndFlagsBits = sub_10011BBB8();
      String.append(_:)(v47);
      *(void *)(v28 + 48) = v36;
      sub_10007B1FC(&qword_100329B90);
      uint64_t v48 = _print_unlocked<A, B>(_:_:)(v28 + 48, v28 + 32);
      uint64_t v50 = *(void *)(v28 + 32);
      os_log_type_t v49 = *(void **)(v28 + 40);
      uint64_t v51 = v43[1];
      uint64_t v66 = *v43;
      os_log_type_t v52 = static os_log_type_t.error.getter(v48);
      sub_100085EE8(v51);
      sub_100085EE8((uint64_t)v49);
      uint64_t v53 = (os_log_s *)sub_10009C414();
      if (sub_10011B3E0(v53))
      {
        uint64_t v64 = v50;
        uint64_t v54 = sub_10007B9FC(22LL);
        uint64_t v65 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v54 = 136446466;
        sub_1000B2110();
        a14 = v55;
        a15 = v56;
        a16 = v57;
        sub_1000AABA0();
        sub_1000AAB84(v66);
        sub_100085F14();
        sub_1000AABA8();
        *(void *)(v28 + 56) = sub_10008620C(a15, v58, &a14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 56, v28 + 64, v54 + 4);
        sub_10007B980();
        sub_10007D974(v51);
        *(_WORD *)(v54 + 12) = 2082;
        sub_10008618C();
        *(void *)(v28 + 64) = sub_1000C6228(v64, v59, &a14);
        sub_100086194(v28 + 64, v28 + 72);
        sub_100085E64((uint64_t)v49);
        sub_100086038((void *)&_mh_execute_header, v53, v52, "%{public}s%{public}s", (uint8_t *)v54);
        sub_100086030(v65, v60, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v65);
        sub_10007B974(v54);

        sub_100085FB4();
      }

      else
      {
        sub_10007D974(v51);
        sub_100085E64((uint64_t)v49);
      }

      sub_100085BC4(*(void *)(v28 + 112), type metadata accessor for SKLogger);
      uint64_t v61 = (void *)sub_10011B30C();
      id v62 = sub_10011B058(v61, "toASDErrorWithMetadata:");
      sub_10011C290();
      sub_10011BF88();
      sub_1000E93B4();
    }

    else
    {
      sub_1000881FC(v41, v42);
      sub_10011C004();
      sub_10011B9D0();
      sub_1000C6388();
      sub_10011B9D0();
    }

    sub_100085BC4(*(void *)(v28 + 128), type metadata accessor for StorefrontInternal);
  }

  sub_10009C740(v35, &qword_10032BCE0);
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  return sub_100093840(*(uint64_t (**)(void))(v28 + 8));
}

uint64_t sub_10011792C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_10032C2F4);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A87D4;
  return sub_100121F5C(a1, a2);
}

void sub_1001179A8(int a1, int a2, int a3, void *a4)
{
  uint64_t v7 = sub_10011BCE8(a1, a2, a3, a4);
  id v8 = v5;
  id v12 = v6;
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v11 = v10;

  _Block_copy(v7);
  v4(v9, v11, v12, v7);
  _Block_release(v7);
  sub_10011C198(v9);
}

uint64_t sub_100117A34()
{
  *(void *)(v1 + 208) = v0;
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  *(void *)(v1 + 216) = v2;
  unint64_t v3 = (*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v1 + 224) = swift_task_alloc(v3);
  *(void *)(v1 + 232) = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  *(void *)(v1 + 240) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v1 + 248) = v5;
  *(void *)(v1 + 256) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = (*(void *)(*(void *)(sub_10007B1FC((uint64_t *)&unk_10032A1C0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v1 + 264) = swift_task_alloc(v6);
  *(void *)(v1 + 272) = swift_task_alloc(v6);
  unint64_t v7 = (*(void *)(*(void *)(sub_10007B1FC(&qword_10032A590) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v1 + 280) = swift_task_alloc(v7);
  *(void *)(v1 + 288) = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for URL(0LL);
  *(void *)(v1 + 296) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v1 + 304) = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v1 + 312) = swift_task_alloc(v10);
  *(void *)(v1 + 320) = swift_task_alloc(v10);
  __int128 v11 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 136) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 152) = v11;
  *(void *)(v1 + 168) = *(void *)(v0 + 32);
  return swift_task_switch(sub_100117B7C, 0LL, 0LL);
}

uint64_t sub_100117B7C()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v1 + 32);
  __int128 v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 32) = v3;
  *(void *)(v0 + 48) = v2;
  sub_10011850C();
  sub_1000DF90C();
  *(void *)(v0 + 328) = v4;
  sub_1001188A0(v4);
  uint64_t v5 = sub_1000B2348();
  *(void *)(v0 + 336) = v5;
  *(void *)(v5 + 16) = v0 + 136;
  uint64_t v6 = sub_1000B2348();
  *(void *)(v0 + 344) = v6;
  *(void *)(v6 + 16) = v0 + 136;
  __int128 v7 = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 72) = v7;
  *(void *)(v0 + 88) = *(void *)(v0 + 168);
  uint64_t v8 = (void *)swift_task_alloc(dword_10032BD94);
  *(void *)(v0 + 352) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100117CBC;
  return sub_100118E70(*(void *)(v0 + 320), dword_10032BD88, v5, (uint64_t)sub_10011ADC4, v6);
}

uint64_t sub_100117CBC()
{
  *(void *)(v0 + 360) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {
    swift_task_dealloc(*(void *)(v0 + 344));
    sub_1000939C0();
  }

  sub_100093420();
  return sub_1000AA908(v4, v5, v6);
}

uint64_t sub_100117D14()
{
  sub_1000939C0();
  sub_1000931C8();
  sub_10011BF48(*(void *)(v0 + 320));
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  return sub_10011B460(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100117D88()
{
  uint64_t v76 = v1;
  uint64_t v77 = v2;
  uint64_t v75 = v0;
  URLComponents.init(url:resolvingAgainstBaseURL:)(*(void *)(v0 + 320), 1LL);
  if (!sub_10011BA30())
  {
    __int128 v3 = *(_OWORD *)(v0 + 152);
    *(_OWORD *)(v0 + 96) = *(_OWORD *)(v0 + 136);
    *(_OWORD *)(v0 + 112) = v3;
    *(void *)(v0 + 128) = *(void *)(v0 + 168);
    uint64_t v4 = sub_100119010();
    URLComponents.queryItems.setter(v4);
  }

  id v5 = [objc_allocWithZone(AMSEngagementRequest) init];
  int v6 = sub_10011BA30();
  uint64_t v7 = *(void *)(v0 + 296);
  if (v6)
  {
    sub_10007D0AC(*(void *)(v0 + 272), 1LL, 1LL, *(void *)(v0 + 296));
LABEL_6:
    uint64_t v14 = 0LL;
    goto LABEL_7;
  }

  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v9 = *(void *)(v0 + 256);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 16))(v9, *(void *)(v0 + 288), v11);
  ((void (*)(uint64_t))URLComponents.url.getter)(v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  uint64_t v48 = *(void *)(v0 + 296);
  uint64_t v49 = *(void *)(v0 + 304);
  uint64_t v50 = *(void *)(v0 + 272);
  URL._bridgeToObjectiveC()(v13);
  uint64_t v14 = v51;
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v48);
LABEL_7:
  uint64_t v15 = *(void **)(v0 + 328);
  uint64_t v17 = *(void *)(v0 + 280);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 240);
  [v5 setURL:v14];

  [v5 setAccount:v15];
  sub_1000E9220(v16, v17, &qword_10032A590);
  LODWORD(v16) = sub_10007D824(v17, 1LL, v18);
  sub_100085298(v17, &qword_10032A590);
  id v71 = v5;
  if ((_DWORD)v16 == 1)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v19 = sub_100079604(*(void *)(v0 + 216), (uint64_t)qword_10033E1A8);
    sub_10011BB10(v19, v20, type metadata accessor for SKLogger);
    sub_10011BEC4();
    _StringGuts.grow(_:)(88LL);
    sub_10011B9DC( 0xD000000000000046LL,  (uint64_t)"Failed to initialize URL components for in-app engagement destination ");
    sub_1000D4F2C(20LL, 0x80000001002A3460LL);
    v21._uint64_t countAndFlagsBits = 0x6162206874697720LL;
    v21._object = (void *)0xEE00204C52552067LL;
    String.append(_:)(v21);
    sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v78._uint64_t countAndFlagsBits = sub_10011BFB4(v22);
    sub_10011C398(v78);
    uint64_t v23 = sub_100085EF0();
    uint64_t v24 = v74;
    uint64_t v69 = v73;
    uint64_t v25 = *(void *)(v0 + 160);
    uint64_t v26 = *(void *)(v0 + 168);
    os_log_type_t v27 = static os_log_type_t.error.getter(v23);
    sub_100085EE8(v26);
    sub_100085EE8(v74);
    uint64_t v28 = (os_log_s *)sub_100093C38();
    if (sub_10011C02C(v28))
    {
      uint64_t v70 = v15;
      uint64_t v29 = sub_10007B9FC(22LL);
      uint64_t v68 = sub_10007B9FC(64LL);
      sub_10011BAF0(4.8752e-34);
      sub_10008618C();
      sub_10009C32C(v25);
      sub_100085F14();
      sub_100085FB4();
      *(void *)(v0 + 176) = sub_10008620C(v73, v30, &v72);
      sub_1000AB080(v0 + 176, v0 + 184, v31, v29 + 12, v32, v33, v34, v35, v67);
      sub_10007B980();
      sub_10007D974(v26);
      *(_WORD *)(v29 + 12) = 2082;
      sub_1000930E4();
      *(void *)(v0 + 184) = sub_10011C3BC(v69, v36, &v72);
      sub_100086194(v0 + 184, v0 + 192);
      sub_100085E64(v24);
      sub_100086038((void *)&_mh_execute_header, v28, v27, "%{public}s%{public}s", (uint8_t *)v29);
      sub_100086030(v68, v37, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v68);
      sub_10007B974(v29);

      sub_1000930DC();
    }

    else
    {
      sub_10007D974(v26);
      sub_100085E64(v74);
    }

    uint64_t v47 = *(void *)(v0 + 232);
LABEL_25:
    sub_100085BC4(v47, type metadata accessor for SKLogger);
    goto LABEL_26;
  }

  id v38 = [v5 URL];
  if (!v38)
  {
    sub_1000875FC(*(void *)(v0 + 264), v39, v40, *(void *)(v0 + 296));
    goto LABEL_19;
  }

  uint64_t v41 = v38;
  uint64_t v43 = *(void *)(v0 + 304);
  uint64_t v42 = *(void *)(v0 + 312);
  uint64_t v44 = *(void *)(v0 + 296);
  uint64_t v45 = *(void *)(v0 + 264);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v38);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v45, v42, v44);
  sub_10007D0AC(v45, 0LL, 1LL, v44);
  if (sub_10011BD54(v45) == 1)
  {
LABEL_19:
    sub_100085298(*(void *)(v0 + 264), (uint64_t *)&unk_10032A1C0);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v52 = sub_100079604(*(void *)(v0 + 216), (uint64_t)qword_10033E1A8);
    sub_10011BB10(v52, v53, type metadata accessor for SKLogger);
    sub_10011BEC4();
    _StringGuts.grow(_:)(77LL);
    sub_10011B9DC(0xD000000000000026LL, (uint64_t)"Failed to add query items to base URL ");
    sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v79._uint64_t countAndFlagsBits = sub_10011BFB4(v54);
    sub_10011C398(v79);
    sub_100085EF0();
    sub_10011B9DC(0xD000000000000023LL, (uint64_t)" for in-app engagement destination ");
    sub_1000D4F2C(20LL, 0x80000001002A3460LL);
    uint64_t v56 = v73;
    uint64_t v55 = v74;
    os_log_type_t v58 = static os_log_type_t.error.getter(v57);
    sub_100085EE8(v74);
    uint64_t v59 = (os_log_s *)sub_100093C38();
    if (sub_1000B22E8(v59))
    {
      uint64_t v60 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v61 = sub_10007B9FC(64LL);
      uint64_t v73 = v61;
      *(_DWORD *)uint64_t v60 = 136446466;
      *(void *)(v0 + 192) = sub_10007BA24(v61, v62, &v73);
      sub_1000C6004(v0 + 192, v0 + 200);
      sub_10011C11C();
      sub_1000930E4();
      *(void *)(v0 + 200) = sub_10011C3BC(v56, v63, &v73);
      sub_1000C6004(v0 + 200, v0 + 208);
      sub_100085E64(v55);
      sub_100086038((void *)&_mh_execute_header, v59, v58, "%{public}s%{public}s", v60);
      sub_100086030(v61, v64, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v61);
      sub_10007B974((uint64_t)v60);

      sub_1000930DC();
    }

    else
    {
      sub_100085E64(v74);
    }

    uint64_t v47 = *(void *)(v0 + 224);
    goto LABEL_25;
  }

  sub_10009C740(v46, (uint64_t *)&unk_10032A1C0);
LABEL_26:
  uint64_t v65 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 304) + 8LL))( *(void *)(v0 + 320),  *(void *)(v0 + 296));
  sub_10011C388(v65, &qword_10032A590);
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  return (*(uint64_t (**)(id))(v0 + 8))(v71);
}

void sub_100118490(void *a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  uint64_t v7 = *((void *)v1 + 4);
  __int128 v3 = v1[1];
  __int128 v8 = *v1;
  __int128 v9 = v3;
  uint64_t v10 = *((void *)v1 + 4);
  sub_10011DEA4((void (*)(id *))sub_10011AC68, a1, &v4);
}

id sub_10011850C()
{
  uint64_t v1 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v1);
  __int128 v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = *(void *)(v0 + 24);
  __int128 v5 = *(void **)(v0 + 32);
  sub_10007CB7C(0LL, &qword_10032A4D0, off_1002E5C40);
  id result = sub_1000D85D8(6LL);
  if (result)
  {
    uint64_t v7 = result;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v8 = sub_100079604(v1, (uint64_t)qword_10033E1A8);
    sub_1000E8F9C(v8, (uint64_t)v3, type metadata accessor for SKLogger);
    uint64_t v40 = 0LL;
    unint64_t v41 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(68LL);
    v9._uint64_t countAndFlagsBits = 0xD00000000000003ELL;
    v9._object = (void *)0x80000001002A35F0LL;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001002A3460LL;
    v10._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = 8250LL;
    v11._object = (void *)0xE200000000000000LL;
    String.append(_:)(v11);
    id v12 = [v7 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    uint64_t v17 = swift_bridgeObjectRelease(v15);
    uint64_t v19 = v40;
    unint64_t v18 = v41;
    os_log_type_t v20 = static os_log_type_t.default.getter(v17);
    swift_bridgeObjectRetain_n(v5, 2LL);
    uint64_t v21 = swift_bridgeObjectRetain_n(v18, 2LL);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    if (os_log_type_enabled(v22, v20))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v38 = v19;
      uint64_t v24 = v23;
      uint64_t v39 = swift_slowAlloc(64LL, -1LL);
      uint64_t v42 = v39;
      *(_DWORD *)uint64_t v24 = 136446466;
      uint64_t v37 = v24 + 4;
      uint64_t v40 = 91LL;
      unint64_t v41 = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v5);
      v25._uint64_t countAndFlagsBits = v4;
      v25._object = v5;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = 8285LL;
      v26._object = (void *)0xE200000000000000LL;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(v5);
      unint64_t v27 = v41;
      uint64_t v40 = sub_10007A488(v40, v41, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v37);
      swift_bridgeObjectRelease_n(v5, 2LL);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v24 + 12) = 2082;
      swift_bridgeObjectRetain(v18);
      uint64_t v40 = sub_10007A488(v38, v18, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v24 + 14);
      swift_bridgeObjectRelease_n(v18, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v22, v20, "%{public}s%{public}s", (uint8_t *)v24, 0x16u);
      uint64_t v28 = v39;
      swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_bridgeObjectRelease(v18);
    }

    else
    {

      swift_bridgeObjectRelease_n(v18, 3LL);
      swift_bridgeObjectRelease_n(v5, 2LL);
    }

    sub_100085BC4((uint64_t)v3, type metadata accessor for SKLogger);
    return (id)swift_willThrow(v29, v30, v31, v32, v33, v34, v35);
  }

  return result;
}

void sub_1001188A0(void *a1)
{
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v3);
  __int128 v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Client.Server(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v1 + 24);
  Swift::String v9 = *(void **)(v1 + 32);
  id v11 = objc_msgSend(a1, "ams_DSID");

  if (!v11)
  {
    sub_1000DE6D4();
    uint64_t v12 = sub_10007B1FC(&qword_10032A028);
    if (sub_10007D824((uint64_t)v8, 2LL, v12))
    {
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v13 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
      sub_1000E8F9C(v13, (uint64_t)v5, type metadata accessor for SKLogger);
      uint64_t v33 = 0LL;
      unint64_t v34 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(113LL);
      v14._uint64_t countAndFlagsBits = 0xD000000000000034LL;
      v14._object = (void *)0x80000001002A3570LL;
      String.append(_:)(v14);
      v15._object = (void *)0x80000001002A3460LL;
      v15._uint64_t countAndFlagsBits = 0xD000000000000014LL;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
      v16._object = (void *)0x80000001002A35B0LL;
      String.append(_:)(v16);
      unint64_t v17 = v34;
      uint64_t v32 = v33;
      os_log_type_t v19 = static os_log_type_t.default.getter(v18);
      swift_bridgeObjectRetain_n(v9, 2LL);
      uint64_t v20 = swift_bridgeObjectRetain_n(v17, 2LL);
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = v19;
      if (os_log_type_enabled(v21, v19))
      {
        uint64_t v23 = swift_slowAlloc(22LL, -1LL);
        uint64_t v31 = swift_slowAlloc(64LL, -1LL);
        uint64_t v35 = v31;
        *(_DWORD *)uint64_t v23 = 136446466;
        uint64_t v30 = v23 + 4;
        uint64_t v33 = 91LL;
        unint64_t v34 = 0xE100000000000000LL;
        swift_bridgeObjectRetain(v9);
        v24._uint64_t countAndFlagsBits = v10;
        v24._object = v9;
        String.append(_:)(v24);
        v25._uint64_t countAndFlagsBits = 8285LL;
        v25._object = (void *)0xE200000000000000LL;
        String.append(_:)(v25);
        swift_bridgeObjectRelease(v9);
        unint64_t v26 = v34;
        uint64_t v33 = sub_10007A488(v33, v34, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v30);
        swift_bridgeObjectRelease_n(v9, 2LL);
        swift_bridgeObjectRelease(v26);
        *(_WORD *)(v23 + 12) = 2082;
        swift_bridgeObjectRetain(v17);
        uint64_t v33 = sub_10007A488(v32, v17, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v23 + 14);
        swift_bridgeObjectRelease_n(v17, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s%{public}s", (uint8_t *)v23, 0x16u);
        uint64_t v27 = v31;
        swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1LL, -1LL);
        swift_slowDealloc(v23, -1LL, -1LL);
        swift_bridgeObjectRelease(v17);
      }

      else
      {

        swift_bridgeObjectRelease_n(v17, 3LL);
        swift_bridgeObjectRelease_n(v9, 2LL);
      }

      sub_100085BC4((uint64_t)v5, type metadata accessor for SKLogger);
    }

    else
    {
      uint64_t v28 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v8, v28);
    }
  }

uint64_t sub_100118C64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v3;
  return swift_task_switch(sub_100118C80, 0LL, 0LL);
}

uint64_t sub_100118C80()
{
  uint64_t v2 = v1;
  if (qword_100328AF0 != -1) {
    swift_once(&qword_100328AF0, sub_1000D802C);
  }
  uint64_t v3 = v0 + 2;
  id v4 = (id)qword_10033E0C8;
  id v5 = [v2 URLForKey:v4];
  v0[19] = v5;
  swift_unknownObjectRelease(v2);

  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100118D94;
  uint64_t v6 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v7 = v0 + 10;
  v7[1] = 0x40000000LL;
  v7[2] = sub_100118E1C;
  v7[3] = &unk_1002EEA38;
  v7[4] = v6;
  [v5 valueWithCompletion:v7];
  return swift_continuation_await(v3);
}

uint64_t sub_100118D94()
{
  *(void *)(v0 + 160) = *(void *)(v0 + 48);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100118DDC()
{
  uint64_t v1 = *(void **)(v0 + 120);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v2 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000C5EB8(v2);
}

uint64_t sub_100118E1C(uint64_t result, void *a2, char a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4) {
    return sub_100121AC4(v4, a4);
  }
  if (a2) {
    return sub_100121B28(v4, (uint64_t)a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_100118E70(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[4] = a4;
  v5[5] = a5;
  Swift::String v9 = (int *)((char *)a2 + *a2);
  uint64_t v7 = (void *)swift_task_alloc(a2[1]);
  v5[6] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100118EE4;
  return ((uint64_t (*)(uint64_t, void *))v9)(a1, v5 + 2);
}

uint64_t sub_100118EE4()
{
  if (!v0) {
    return sub_10008751C(*(uint64_t (**)(void))(v1 + 8));
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100118F28()
{
  uint64_t v1 = *(void (**)(uint64_t *))(v0 + 32);
  uint64_t v14 = *(void *)(v0 + 16);
  uint64_t v2 = v14;
  v1(&v14);
  *(void *)(v0 + 24) = v2;
  sub_10011C0C4();
  uint64_t v3 = sub_10007B1FC(&qword_100329B90);
  if (_getErrorEmbeddedNSError<A>(_:)(v0 + 24, v3, &protocol self-conformance witness table for Error))
  {
    sub_10011B038();
  }

  else
  {
    sub_100093030(v3, (uint64_t)&protocol self-conformance witness table for Error);
    *uint64_t v4 = *(void *)(v0 + 24);
  }

  id v5 = (void *)sub_10011B30C();
  sub_1000E93B4();
  sub_10011B058(v5, "toASDErrorWithMetadata:");

  swift_willThrow(v6, v7, v8, v9, v10, v11, v12);
  swift_errorRelease(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100119010()
{
  uint64_t v1 = type metadata accessor for URLQueryItem(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = (void *)v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  id v7 = v4;
  swift_bridgeObjectRetain(v6);
  uint64_t v8 = sub_1000D7CFC((uint64_t)v7, v5, v6, v2, v3);
  swift_bridgeObjectRelease(v6);

  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    sub_1000C2348(0, v9, 0);
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease(v8);
  return _swiftEmptyArrayStorage;
}

void sub_100119224()
{
  uint64_t v1 = v0;
  Swift::Int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_100085FDC();
  uint64_t v11 = *(void *)(v5 + 24);
  uint64_t v10 = *(void *)(v5 + 32);
  if (qword_100328B40 != -1) {
    uint64_t v9 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v12 = sub_10011C364(v9, (uint64_t)qword_10033E1A8);
  sub_1000E9638(v12, v13, type metadata accessor for SKLogger);
  uint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(v3);
  sub_10009C32C(v1);
  sub_1000862B8();
  sub_1000D4F2C(20LL, v14);
  sub_1000862C4();
  uint64_t v32 = v7;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v15 = _print_unlocked<A, B>(_:_:)(&v32, &v33);
  uint64_t v17 = v33;
  uint64_t v16 = v34;
  os_log_type_t v18 = static os_log_type_t.error.getter(v15);
  sub_100085EE8(v10);
  sub_100085EE8(v16);
  os_log_type_t v19 = (os_log_s *)sub_1000935A4();
  os_log_type_t v20 = v18;
  if (sub_100093764(v19))
  {
    uint64_t v21 = sub_10007B9FC(22LL);
    uint64_t v22 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v21 = 136446466;
    uint64_t v32 = v22;
    sub_1000B2110();
    uint64_t v33 = v23;
    unint64_t v34 = v24;
    sub_10007BA3C();
    sub_100093624(v11);
    sub_100085F14();
    sub_10007BA44();
    uint64_t v26 = sub_10008620C(v33, v25, &v32);
    uint64_t v27 = sub_10011BE10(v26);
    sub_1000F3D94(v27, v28);
    sub_10007D974(v10);
    sub_10007B980();
    *(_WORD *)(v21 + 12) = 2082;
    sub_10008600C();
    uint64_t v33 = sub_10011BF68(v17, v29, &v32);
    sub_100086194((uint64_t)&v33, v11);
    sub_100085E64(v16);
    sub_100086038((void *)&_mh_execute_header, v19, v20, "%{public}s%{public}s", (uint8_t *)v21);
    sub_100086030(v22, v30, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v22);
    sub_10007B974(v21);
    sub_100086004();
  }

  else
  {

    sub_100085E64(v16);
    uint64_t v31 = sub_10007D974(v10);
  }

  sub_1000E961C(v31, type metadata accessor for SKLogger);
  sub_100085E98();
}

id sub_10011947C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  sub_100085FB4();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100086004();
  }

  else
  {
    v8.super.Class isa = 0LL;
  }

  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

id sub_100119520(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  NSDictionary v8 = 0LL;
  if (sub_10007D824(a1, 1LL, v6) != 1)
  {
    URL._bridgeToObjectiveC()(v7);
    NSDictionary v8 = v9;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  }

  if (a2)
  {
    v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    v10.super.Class isa = 0LL;
  }

  id v11 = [v3 initWithSingle:v8 multi:v10.super.isa];

  return v11;
}

uint64_t sub_1001195E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10011BC54(a1, a2);
  Swift::Int v3 = (void *)sub_1000AA6CC(v2);
  uint64_t v4 = sub_10011C2B0(v3);
  return sub_10011BB18(v4, v5);
}

void sub_100119624(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 takeKeepAliveTransaction:v4];
}

uint64_t sub_10011966C()
{
  uint64_t v1 = swift_task_alloc(dword_10032BADC);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  sub_10011AFEC();
  return sub_10011B4B4(v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_1001196B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 releaseKeepAliveTransaction:v4];
}

void sub_1001196FC(id *a1)
{
}

uint64_t sub_100119714(void *a1)
{
  id v1 = [a1 multi];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_100119774()
{
  uint64_t v0 = swift_task_alloc(dword_10032BB0C);
  id v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B0D4(v1);
  return sub_10011B7AC(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1001197BC()
{
  uint64_t v0 = swift_task_alloc(dword_10032BB1C);
  id v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B0D4(v1);
  return sub_10011B7C0(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100119800()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10011982C()
{
  uint64_t v1 = swift_task_alloc(dword_10032BB2C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  uint64_t v3 = sub_10011BC00();
  return sub_10011B974(v3, v4, v5);
}

uint64_t sub_10011987C()
{
  uint64_t v0 = swift_task_alloc(dword_10032BB44);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B698(v1);
  return sub_10011B66C(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1001198EC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000881FC(result, a2);
  }
  return result;
}

uint64_t sub_100119900@<X0>(void *a1@<X8>)
{
  return sub_1000E68B4(a1);
}

unint64_t sub_100119918()
{
  unint64_t result = qword_10032BB60;
  if (!qword_10032BB60)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032BB58);
    sub_10007ACCC( &qword_10032BB68,  type metadata accessor for ClientOverrideRequest,  (uint64_t)&protocol conformance descriptor for ClientOverrideRequest);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10032BB60);
  }

  return result;
}

uint64_t sub_100119998()
{
  uint64_t v1 = swift_task_alloc(dword_10032BB7C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  sub_10011AFEC();
  return sub_10011B4EC(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1001199E8()
{
  uint64_t v1 = swift_task_alloc(dword_10032BB94);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  sub_10011AFEC();
  return sub_10011B498(v3, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t sub_100119A3C()
{
  unint64_t result = qword_10032BBA0;
  if (!qword_10032BBA0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ProductPageLookupRequest.ParameterRequest,  &type metadata for ProductPageLookupRequest.ParameterRequest);
    atomic_store(result, &qword_10032BBA0);
  }

  return result;
}

void *sub_100119A78(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100119ACC()
{
  uint64_t v0 = swift_task_alloc(dword_10032BBAC);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B010(v1);
  return sub_10011B63C(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100119B10()
{
  uint64_t v0 = swift_task_alloc(dword_10032BBC4);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B85C(v1);
  return sub_10011B5F4(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100119B5C()
{
  uint64_t v0 = swift_task_alloc(dword_10032BBDC);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B6C4(v1);
  return sub_10011B654(v2, v3, v4, v5, v6, v7, v8, v9);
}

#error "100119BE4: call analysis failed (funcsize=17)"
uint64_t sub_100119BF4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sub_1000EF4D0();
  sub_10011BD90();
  sub_10011B1E4();
  uint64_t v1 = swift_task_alloc(dword_10032BC0C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  sub_10011AFEC();
  return sub_10011B4D0(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100119C48()
{
  return sub_10011AAF4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100119C54()
{
  uint64_t v0 = swift_task_alloc(dword_10032BC1C);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B010(v1);
  return sub_10011B624(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_100119C98()
{
  uint64_t v0 = swift_task_alloc(dword_10032BC34);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B834(v1);
  return sub_10011B60C(v2, v3, v4, v5, v6, v7, v8);
}

void sub_100119CE0(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

uint64_t sub_100119CEC()
{
  uint64_t v4 = sub_1000E953C();
  if (!sub_10011B1A0(v4))
  {
    sub_10011BDF0();
    if (!(!v8 & v7)) {
      sub_10011C348(v5, v6);
    }
    sub_10011BF98();
    sub_10011C250();
    uint64_t v9 = sub_10007B1FC(&qword_10032A028);
    if (!sub_10011B550(v9))
    {
      uint64_t v10 = sub_100086318();
      sub_1000EF3F0(v10);
    }

    uint64_t v11 = sub_10011BA20();
  }

  sub_10011C094();
  sub_1000AA5B8(v1 + v2 + *(int *)(v0 + 20));
  sub_1000EF578();
  sub_10011B9F4(v1 + v3);
  uint64_t v12 = sub_10011BBE8();
  return sub_1000C5F74(v12, v13, v14);
}

uint64_t sub_100119D98()
{
  return sub_10011AAF4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100119DA8()
{
  uint64_t v1 = sub_10011BD90();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  sub_1000AAB68();
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  uint64_t v5 = sub_1000B2290();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v0 + v3, v5);
  unint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 20));
  uint64_t v7 = sub_1000E953C();
  if (!sub_1000AAA30(v7))
  {
    sub_10011BDF0();
    if (!(!v10 & v9)) {
      sub_10007F054(*v6, v8);
    }
    sub_10011C330();
    swift_bridgeObjectRelease(v6[5]);
    uint64_t v11 = sub_10007B1FC(&qword_10032A028);
    if (!sub_1000AACF0(v11))
    {
      uint64_t v12 = sub_100086318();
      sub_1000AAB40(v12);
    }

    uint64_t v13 = sub_10009C6A8();
  }

  unint64_t v14 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000AA5B8(v0 + v3 + *(int *)(v1 + 28));
  sub_10011B9F4(v0 + v14);
  sub_1000AA5B8(v0 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v15 = sub_10011BBE8();
  return sub_1000EF2A8(v15, v16, v17);
}

uint64_t sub_100119EB8()
{
  uint64_t v4 = v1 + v2;
  uint64_t v5 = sub_1000E953C();
  if (!sub_10011B1A0(v5))
  {
    sub_10011BDF0();
    if (!(!v9 & v8)) {
      sub_10011C348(v6, v7);
    }
    sub_10011BF98();
    sub_10011C250();
    uint64_t v10 = sub_10007B1FC(&qword_10032A028);
    if (!sub_10011B550(v10))
    {
      uint64_t v11 = sub_100086318();
      sub_1000EF3F0(v11);
    }

    uint64_t v12 = sub_10011BA20();
  }

  unint64_t v13 = (v2 + v3) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (((v13 + 31) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = v13 + v1;
  sub_1000AA5B8(v4 + *(int *)(v0 + 24));
  sub_1000AA5B8(v4 + *(int *)(v0 + 28));
  swift_release(*(void *)(v15 + 16));
  sub_1000EF578();
  sub_1000AA5B8(v1 + v14);
  uint64_t v16 = sub_10011BBE8();
  return sub_1000EF2A8(v16, v17, v18);
}

uint64_t sub_100119F90()
{
  uint64_t v3 = sub_10011BD88();
  sub_10011C07C();
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = ((v4 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000AAB68();
  uint64_t v7 = v1 + v2;
  swift_bridgeObjectRelease(*(void *)(v1 + v2 + 8));
  swift_bridgeObjectRelease(*(void *)(v1 + v2 + 24));
  swift_bridgeObjectRelease(*(void *)(v1 + v2 + 40));
  swift_bridgeObjectRelease(*(void *)(v1 + v2 + 56));
  uint64_t v8 = type metadata accessor for PurchaseIntentInternal(0LL);
  uint64_t v9 = sub_1000B2290();
  sub_1000AAB40(v9);
  sub_1000AA5B8(v7 + *(int *)(v8 + 36));
  sub_1000AA5B8(v7 + *(int *)(v3 + 24));
  sub_10011B9F4(v1 + v5);
  sub_1000AA5B8(v1 + v6);
  return sub_1000EF2A8(v1, v6 + 16, v0);
}

uint64_t sub_10011A04C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10011A074()
{
  uint64_t v1 = sub_10011BF70();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 97) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000AAB68();
  sub_10011BBCC();
  sub_10011C064();
  sub_10011C314();
  sub_10011C30C();
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  uint64_t v7 = (void *)(v0 + v4);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  uint64_t v8 = (char *)v7 + *(int *)(v1 + 28);
  uint64_t v9 = sub_100086318();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  sub_10011B9F4(v0 + v6);
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10011A13C()
{
  return swift_deallocObject(v0, 176LL, 7LL);
}

uint64_t sub_10011A1A0()
{
  uint64_t v4 = v1 + v2;
  uint64_t v5 = sub_1000E953C();
  if (!sub_10011B1A0(v5))
  {
    sub_10011BDF0();
    if (!(!v9 & v8)) {
      sub_10011C348(v6, v7);
    }
    sub_10011BF98();
    sub_10011C250();
    uint64_t v10 = sub_10007B1FC(&qword_10032A028);
    if (!sub_10011B550(v10))
    {
      uint64_t v11 = sub_100086318();
      sub_1000EF3F0(v11);
    }

    uint64_t v12 = sub_10011BA20();
  }

  sub_10011C094();
  unint64_t v13 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  j__swift_bridgeObjectRelease(*(void *)(v4 + v0[5]));
  swift_bridgeObjectRelease(*(void *)(v4 + v0[7]));
  sub_1000AA5B8(v4 + v0[8]);
  sub_1000EF578();
  swift_unknownObjectRelease(*(void *)(v1 + v3));
  sub_10011B9F4(v1 + v13);
  sub_1000AA5B8(v1 + ((v13 + 23) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v14 = sub_10011BBE8();
  return sub_1000EF2A8(v14, v15, v16);
}

void sub_10011A288(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10011A2A4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10011A2E4()
{
  uint64_t v1 = sub_10011BF80();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v35 + 32) & ~v35;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(sub_100086224() - 8);
  uint64_t v34 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v6 = (v4 + v34 + 16) & ~v34;
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = sub_10011BD80();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v32 = *(void *)(v9 + 64);
  uint64_t v33 = (v6 + v7 + v10) & ~v10;
  sub_1000AAB68();
  uint64_t v11 = v0 + v3;
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 40));
  uint64_t v12 = (uint64_t *)(v0 + v3 + *(int *)(v8 + 28));
  uint64_t v13 = sub_1000E953C();
  if (!sub_10011BD54((uint64_t)v12))
  {
    sub_10011BDF0();
    if (!(!v16 & v15)) {
      sub_10007F054(*v12, v14);
    }
    swift_bridgeObjectRelease(v12[3]);
    swift_bridgeObjectRelease(v12[5]);
    uint64_t v17 = sub_10007B1FC(&qword_10032A028);
    if (!sub_1000AACF0(v17))
    {
      uint64_t v18 = sub_100086318();
      sub_1000AAB40(v18);
    }

    uint64_t v19 = (uint64_t)v12 + *(int *)(v13 + 40);
    uint64_t v20 = sub_10009C6A8();
    if (!sub_10007D824(v19, 1LL, v20))
    {
      uint64_t v21 = sub_10011C2CC();
      v22(v21);
    }
  }

  sub_1000AA5B8(v11 + *(int *)(v8 + 32));

  uint64_t v23 = v11 + *(int *)(v1 + 24);
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL);
  v25(v23, v24);
  sub_10011B9F4(v0 + v4);
  v25(v0 + v6, v24);
  swift_bridgeObjectRelease(*(void *)(v0 + v33 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v33 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + v33 + 40));
  uint64_t v26 = (uint64_t *)(v0 + v33 + *(int *)(v8 + 28));
  if (!sub_10011BD54((uint64_t)v26))
  {
    sub_10011BDF0();
    if (!(!v16 & v15)) {
      sub_10007F054(*v26, v27);
    }
    sub_10011C330();
    swift_bridgeObjectRelease(v26[5]);
    uint64_t v28 = sub_10007B1FC(&qword_10032A028);
    if (!sub_10011B550(v28))
    {
      uint64_t v29 = sub_100086318();
      sub_1000EF3F0(v29);
    }

    uint64_t v30 = sub_10009C6A8();
  }

  sub_1000AA5B8(v0 + v33 + *(int *)(v8 + 32));
  return swift_deallocObject(v0, v33 + v32, v35 | v34 | v10 | 7);
}

void sub_10011A560(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

uint64_t sub_10011A568(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void))(v2 + 16))(*a2, *a1, a1[1]);
}

uint64_t sub_10011A598()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10011A5C8(char a1, uint64_t a2)
{
}

uint64_t sub_10011A5D4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  sub_10011C314();
  swift_release(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10011A614()
{
  uint64_t v3 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  sub_10011C07C();
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = ((((v4 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000AAB68();
  swift_bridgeObjectRelease(*(void *)(v1 + 40));
  swift_bridgeObjectRelease(*(void *)(v1 + v2 + 16));
  uint64_t v7 = sub_1000B2290();
  sub_1000EF3F0(v7);
  swift_bridgeObjectRelease(*(void *)(v1 + v2 + *(int *)(v3 + 28)));
  sub_1000AA5B8(v1 + v5);
  sub_1000EF578();
  sub_10011B9F4(v1 + v6);
  return sub_1000EF2A8(v1, v6 + 16, v0);
}

uint64_t sub_10011A6B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ExternalPurchaseTokenV2Response(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[3];
  uint64_t v15 = v1[2];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (uint64_t)v1 + v4;
  uint64_t v9 = (void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = swift_task_alloc(dword_10032BCB4);
  uint64_t v13 = (void *)sub_1000AA6CC(v12);
  *uint64_t v13 = v2;
  v13[1] = sub_1000AA214;
  return sub_100100864(a1, v15, v5, v6, v7, v8, v10, v11);
}

uint64_t sub_10011A7A4(void *a1)
{
  id v1 = [a1 familyID];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10011A804(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = (void *)sub_10011BC54(a1, a2);
  *(void *)(v2 + 24) = v3;
  uint64_t v4 = sub_10011C2B0(v3);
  return sub_10011BB18(v4, v5);
}

uint64_t sub_10011A848()
{
  uint64_t v1 = *v0;
  uint64_t v5 = v1;
  uint64_t v2 = *(_BYTE **)(v1 + 16);
  sub_1000DE51C(*(void *)(v1 + 24), &v5);
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  uint64_t v3 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000C5EB8(v3);
}

uint64_t sub_10011A888()
{
  uint64_t v0 = sub_10011BF60();
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10008609C(v1);
  return sub_100086014(v2, v3, v4, v5);
}

void sub_10011A8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10011A8D8()
{
  swift_release(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  return swift_deallocObject(v0, 128LL, 7LL);
}

uint64_t sub_10011A920(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = swift_task_alloc(dword_10032BCEC);
  uint64_t v6 = (void *)sub_1000AA6CC(v5);
  *uint64_t v6 = v2;
  v6[1] = sub_1000AA214;
  return sub_10011792C(a1, v4);
}

unint64_t sub_10011A974()
{
  unint64_t result = qword_10032BD08;
  if (!qword_10032BD08)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032BD00);
    sub_10007ACCC( (unint64_t *)&unk_10032BD10,  type metadata accessor for PurchaseIntentInternal,  (uint64_t)&protocol conformance descriptor for PurchaseIntentInternal);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10032BD08);
  }

  return result;
}

unint64_t sub_10011A9F0()
{
  unint64_t result = qword_10032BD30;
  if (!qword_10032BD30)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ProductResponse,  &type metadata for ProductResponse);
    atomic_store(result, (unint64_t *)&qword_10032BD30);
  }

  return result;
}

uint64_t sub_10011AA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

void *sub_10011AA40@<X0>( uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr)@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_1000E8410(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_10011AA68(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10011AAE8()
{
  return sub_10011AAF4((void (*)(void))&_swift_release);
}

uint64_t sub_10011AAF4(void (*a1)(void))
{
  return swift_deallocObject(v1, 64LL, 7LL);
}

uint64_t sub_10011AB30()
{
  uint64_t v0 = swift_task_alloc(dword_10032BD54);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B010(v1);
  return sub_1000F9DE4(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10011AB84()
{
  uint64_t v0 = sub_10011BF60();
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10008609C(v1);
  return sub_100086014(v2, v3, v4, v5);
}

uint64_t sub_10011ABC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011ABF0(uint64_t a1)
{
  return a1;
}

void sub_10011AC18()
{
}

void sub_10011AC68()
{
}

uint64_t sub_10011AC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 32) = v5;
  *(void *)(v3 + 48) = *(void *)(a2 + 32);
  *(void *)(v3 + 56) = a3;
  uint64_t v6 = (void *)swift_task_alloc(dword_10032BDA4);
  *(void *)(v3 + 64) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10011ACD8;
  return sub_100118C64(a1, v3 + 16);
}

uint64_t sub_10011ACD8()
{
  uint64_t v3 = *v2;
  sub_1000DE51C(*(void *)(v0 + 64), v4);
  if (v1) {
    **(void **)(v0 + 56) = v1;
  }
  return sub_1000C5EB8(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_10011AD20()
{
  uint64_t v1 = sub_10011BF60();
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000A9C68;
  uint64_t v3 = sub_10011BC00();
  return sub_100086014(v3, v4, v5, v6);
}

void sub_10011AD74()
{
}

void sub_10011ADC4()
{
}

unint64_t sub_10011ADCC()
{
  unint64_t result = qword_10032BDB0;
  if (!qword_10032BDB0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StoreKitServerError,  &type metadata for StoreKitServerError);
    atomic_store(result, (unint64_t *)&qword_10032BDB0);
  }

  return result;
}

uint64_t sub_10011AE08()
{
  uint64_t v1 = (int *)type metadata accessor for ExternalGatewaySheet(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000AAB68();
  sub_10011BBCC();
  uint64_t v6 = v0 + v4;

  uint64_t v7 = sub_100086318();
  sub_1000AA5B8(v6 + v1[8]);
  sub_1000AA5B8(v6 + v1[11]);
  if (*(void *)(v0 + v5 + 24)) {
    sub_10007B1A0((void *)(v0 + v5));
  }
  unint64_t v8 = (v5 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = v8 + 56;
  unint64_t v10 = v0 + v8;
  swift_bridgeObjectRelease(*(void *)(v0 + v8 + 16));
  sub_10011C330();
  swift_bridgeObjectRelease(*(void *)(v10 + 48));
  return sub_1000C5F74(v0, v9, v3 | 7);
}

uint64_t sub_10011AEE8()
{
  uint64_t v0 = swift_task_alloc(dword_10032BDCC);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_10011B010(v1);
  return sub_1000FD2CC(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_10011AF84@<X0>(void *a1@<X8>)
{
  return sub_100119900(a1);
}

  ;
}

uint64_t sub_10011B010(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10011B038()
{
  return swift_errorRelease(v0);
}

void sub_10011B040(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_10011B048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 120));
}

id sub_10011B058(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0);
}

  ;
}

void sub_10011B0BC(void *a1)
{
}

uint64_t sub_10011B0D4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

  ;
}

void sub_10011B124()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_10011B130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 112));
}

uint64_t sub_10011B140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 104));
}

  ;
}

uint64_t sub_10011B1A0(uint64_t a1)
{
  return sub_10007D824(v1, 1LL, a1);
}

uint64_t sub_10011B1B4()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 96);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 104) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10011B1D8(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v2, v1);
}

  ;
}

uint64_t sub_10011B22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

BOOL sub_10011B23C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10011B2AC()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

  ;
}

uint64_t sub_10011B30C()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_10011B314(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v2 + 8, v1);
}

BOOL sub_10011B330(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10011B340()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

void sub_10011B354(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_10011B35C(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v1 + 8, v2);
}

  ;
}

  ;
}

  ;
}

BOOL sub_10011B3E0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10011B3E8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10011B400(uint64_t a1)
{
  return _BridgedStoredNSError.init(_:userInfo:)(v3 - 104, v2, v1, a1);
}

void sub_10011B418(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10011B420()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 112, v0 - 104);
}

  ;
}

uint64_t sub_10011B460(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10011B47C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1001124E4(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10011B498( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10010B4D4(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10011B4B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000FC550(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10011B4D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10011499C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10011B4EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1001098C0(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_10011B508()
{
}

uint64_t sub_10011B510()
{
  return (*(uint64_t (**)(void))(v0 - 168))(0LL);
}

uint64_t sub_10011B520( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a1 = v12;
  a1[1] = v9;
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v10;
  return a9;
}

uint64_t sub_10011B550(uint64_t a1)
{
  return sub_10007D824(v1, 3LL, a1);
}

void sub_10011B560()
{
  v0._uint64_t countAndFlagsBits = 0x656D61726150202ELL;
  v0._object = (void *)0xEE00203A73726574LL;
  String.append(_:)(v0);
}

uint64_t sub_10011B584()
{
  return (*(uint64_t (**)(void))(v0 - 112))(*(void *)(v0 - 96));
}

void sub_10011B598()
{
  *(void *)(v0 - 96) = 0LL;
  *(void *)(v0 - 88) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
}

void sub_10011B5AC()
{
}

void sub_10011B5C0()
{
}

id sub_10011B5D4(uint64_t a1)
{
  return v1;
}

uint64_t sub_10011B5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10010F130(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10011B60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100117368(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10011B624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100115958(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10011B63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10010D1F8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10011B654( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100110614(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10011B66C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100106DE8(a1, a2, a3, a4, a5, a6, a7, a8);
}

  ;
}

uint64_t sub_10011B698(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10011B6C4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

id sub_10011B6F0(void *a1)
{
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = v2;
  a1[5] = v4;
  uint64_t v7 = *(void *)(v5 - 128);
  uint64_t v6 = *(void *)(v5 - 120);
  a1[6] = v1;
  a1[7] = v6;
  uint64_t v8 = *(void *)(v5 - 136);
  a1[8] = v3;
  a1[9] = v8;
  a1[10] = v7;
  return v2;
}

void sub_10011B714(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_10011B71C(uint64_t a1)
{
  *(void *)(v3 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 104, v1 + 8, v2);
}

void sub_10011B73C()
{
  *(_WORD *)(v0 + 12) = 2082;
}

void sub_10011B74C()
{
  *(void *)(v0 - 112) = 0LL;
  *(void *)(v0 - 104) = 0xE000000000000000LL;
}

void sub_10011B75C()
{
  *(void *)(v0 - 200) = 0LL;
  *(void *)(v0 - 192) = 0xE000000000000000LL;
}

id sub_10011B76C()
{
  return sub_1000DB648(v1, v2, v3, v0, 0LL);
}

uint64_t sub_10011B78C()
{
  return type metadata accessor for AcknowledgeMessageRequest(0LL);
}

uint64_t sub_10011B7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100101A0C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10011B7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10010297C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10011B7D4@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1(0LL);
}

uint64_t sub_10011B7DC(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return 0LL;
}

uint64_t sub_10011B7F4(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return (*(uint64_t (**)(void, unint64_t, uint64_t))(v2 - 168))(0LL, 0xF000000000000000LL, a1);
}

uint64_t sub_10011B814(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return v2(0LL, 0xF000000000000000LL, a1);
}

uint64_t sub_10011B834(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10011B85C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

  ;
}

void sub_10011B8A4(float a1)
{
  *uint64_t v1 = a1;
}

BOOL sub_10011B8BC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_10011B8C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

BOOL sub_10011B8CC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10011B8D8()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 120, v0 - 112);
}

void sub_10011B8E8()
{
}

  ;
}

  ;
}

uint64_t sub_10011B910()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t sub_10011B918()
{
  uint64_t v3 = *(void *)(v1 + 88);
  sub_100085B44(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
}

uint64_t sub_10011B944()
{
  return swift_errorRelease(*(void *)(v0 + 80));
}

uint64_t sub_10011B950()
{
  return v1(0LL, 0LL, v0);
}

uint64_t sub_10011B960()
{
  return type metadata accessor for PropertyListDecoder(0LL);
}

void sub_10011B968(uint64_t a1)
{
  *(void *)(v2 - 120) = a1;
}

uint64_t sub_10011B974(uint64_t a1, __int128 *a2, uint64_t a3)
{
  return sub_100103680(a1, a2, a3);
}

void sub_10011B984(void *a1)
{
}

uint64_t sub_10011B994(uint64_t a1, _BYTE *a2)
{
  *a2 = 3;
  return v2();
}

uint64_t sub_10011B9A4()
{
  return PropertyListDecoder.init()();
}

uint64_t sub_10011B9AC(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10011B9D0()
{
  return sub_10007F054(v0, v1);
}

void sub_10011B9DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10011B9EC@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return v2();
}

uint64_t sub_10011B9F4@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 + 8));
}

uint64_t sub_10011B9FC(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10011BA20()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_10011BA30()
{
  return sub_10007D824(v1, 1LL, v0);
}

uint64_t sub_10011BA40()
{
  return Logger.logObject.getter();
}

uint64_t sub_10011BA48(uint64_t a1)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t sub_10011BA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, v4, a4, 0LL);
}

uint64_t sub_10011BA64()
{
  return v1(v0, 0LL);
}

  ;
}

void sub_10011BA88(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_10011BA90()
{
  *(_WORD *)(v0 + 12) = 2082;
}

void sub_10011BAA0()
{
  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_10011BAB0()
{
  return Logger.logObject.getter();
}

uint64_t sub_10011BAB8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return 0LL;
}

uint64_t sub_10011BAD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 152) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, a10, v13);
}

void sub_10011BAF0(float a1)
{
  *uint64_t v1 = a1;
}

void sub_10011BB10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_10011BB18(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10011BB24()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v0 + 192))(v2, v1, 0LL);
}

uint64_t sub_10011BB3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(v2 - 168) + 16LL))( *(void *)(v2 - 152),  a1 + a2,  *(void *)(v2 - 160));
}

uint64_t sub_10011BB54()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

void sub_10011BB6C()
{
  *(void *)(v1 - 8) = *v0;
}

void sub_10011BB7C(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

  ;
}

void sub_10011BBA0(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  String.append(_:)(v1);
}

unint64_t sub_10011BBB8()
{
  return 0xD00000000000001ALL;
}

void sub_10011BBCC()
{
}

void sub_10011BBD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_10011BBDC(id a1)
{
}

uint64_t sub_10011BBE8()
{
  return v0;
}

uint64_t sub_10011BBF8(uint64_t a1, uint64_t a2)
{
  return sub_100079604(v2, a2);
}

uint64_t sub_10011BC00()
{
  return v0;
}

void sub_10011BC14()
{
}

uint64_t sub_10011BC1C(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_10011BC38(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_10011BC54(uint64_t a1, uint64_t a2)
{
  return swift_task_alloc(*(unsigned int *)(a2 + 4));
}

void sub_10011BC68()
{
  *(void *)(v0 - 104) = 0LL;
  *(void *)(v0 - 96) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
}

void sub_10011BC7C()
{
  *(void *)(v0 - 104) = 0LL;
  *(void *)(v0 - 96) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
}

void sub_10011BC90(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

void sub_10011BCAC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10011BCC8( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_10007A488(a11, v11, a3);
}

uint64_t sub_10011BCD4()
{
  return swift_errorRelease(*(void *)(v0 + 40));
}

void *sub_10011BCE8(int a1, int a2, int a3, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_10011BCFC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 40) = v1;
  return swift_errorRetain(v1);
}

void sub_10011BD10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_10011BD18()
{
}

void sub_10011BD24(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_10011BD2C()
{
  return sub_10007F054(v0, v1);
}

void sub_10011BD38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_10011BD40()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_10011BD54(uint64_t a1)
{
  return sub_10007D824(a1, 1LL, v1);
}

id sub_10011BD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return v4;
}

uint64_t sub_10011BD78()
{
  return type metadata accessor for PurchaseIntentRequest.Remove(0LL);
}

uint64_t sub_10011BD80()
{
  return type metadata accessor for AcknowledgeMessageRequest(0LL);
}

uint64_t sub_10011BD88()
{
  return type metadata accessor for PurchaseIntentRequest.Add(0LL);
}

uint64_t sub_10011BD90()
{
  return type metadata accessor for PurchaseIntentRequest.Query(0LL);
}

uint64_t sub_10011BD98()
{
  return type metadata accessor for StorefrontRequest(0LL);
}

  ;
}

uint64_t sub_10011BDBC(uint64_t a1, _BYTE *a2)
{
  *a2 = 3;
  return 0LL;
}

uint64_t sub_10011BDD8()
{
  return type metadata accessor for DialogContext(0LL);
}

void sub_10011BDE4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

  ;
}

  ;
}

uint64_t sub_10011BE08(uint64_t a1, uint64_t a2)
{
  return sub_100079604(v2, a2);
}

uint64_t sub_10011BE10(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_10011BE28()
{
  *(_WORD *)(v0 + 12) = 2082;
}

void sub_10011BE40()
{
  *(_WORD *)(v0 + 12) = 2082;
}

void sub_10011BE58()
{
  *(_WORD *)(v0 + 12) = 2082;
}

void sub_10011BE70()
{
  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_10011BE80(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_10011BE90(uint64_t result)
{
  *(void *)(v1 - 112) = result;
  return result;
}

uint64_t sub_10011BE9C(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  *(void *)(v1 - 112) = 91LL;
  *(void *)(v1 - 104) = 0xE100000000000000LL;
  return result;
}

void sub_10011BEB4()
{
  *(void *)(v0 - 128) = 0LL;
  *(void *)(v0 - 120) = 0xE000000000000000LL;
}

  ;
}

void sub_10011BED4()
{
  *(void *)(v1 - 232) = v0;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10011BF38()
{
  return swift_errorRelease(*(void *)(v0 + 48));
}

uint64_t sub_10011BF48(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

void sub_10011BF58(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10011BF60()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10011BF68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(a1, v3, a3);
}

uint64_t sub_10011BF70()
{
  return type metadata accessor for ProductPageLookupRequest.URLRequest(0LL);
}

uint64_t sub_10011BF78()
{
  return type metadata accessor for PropertyListEncoder(0LL);
}

uint64_t sub_10011BF80()
{
  return type metadata accessor for AcknowledgeMessageTask(0LL);
}

uint64_t sub_10011BF88()
{
  return v1(0LL, 0xF000000000000000LL, v0);
}

uint64_t sub_10011BF98()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_10011BFA0()
{
  return swift_task_dealloc(*(void *)(v0 + 88));
}

uint64_t sub_10011BFA8(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_10011BFB4(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

  ;
}

  ;
}

uint64_t sub_10011BFF4()
{
  return PropertyListEncoder.init()();
}

uint64_t sub_10011BFFC()
{
  return v1(v0);
}

uint64_t sub_10011C004()
{
  return v0(v1, v2, 0LL);
}

uint64_t sub_10011C014()
{
  return sub_10007B1A0(v0);
}

id sub_10011C024()
{
  return v0;
}

BOOL sub_10011C02C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10011C034@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

uint64_t sub_10011C044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 144));
}

uint64_t sub_10011C054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)(v2 - 152));
}

uint64_t sub_10011C064()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 48));
}

uint64_t sub_10011C06C@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return v3(0LL, v2);
}

  ;
}

  ;
}

void sub_10011C0AC(float a1)
{
  *os_log_type_t v1 = a1;
}

uint64_t sub_10011C0C4()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10011C0CC()
{
  return Logger.logObject.getter();
}

void sub_10011C0D4(uint64_t a1, uint64_t *a2)
{
}

  ;
}

void sub_10011C0E8(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_10011C0F0(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_10011C0F8()
{
  return v0 - 112;
}

uint64_t sub_10011C104()
{
  return swift_task_dealloc(*(void *)(v0 + 136));
}

void sub_10011C110()
{
}

void sub_10011C11C()
{
  *(_WORD *)(v0 + 12) = 2082;
}

void sub_10011C128(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_10011C130(uint64_t a1)
{
  *(void *)(v1 - 200) = a1;
  return v1 - 200;
}

uint64_t sub_10011C144(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_10011C158(uint64_t result)
{
  *(void *)(v1 - 112) = result;
  return result;
}

void sub_10011C16C()
{
}

uint64_t sub_10011C178(uint64_t result)
{
  *(void *)(v1 - 168) = *(void *)(result - 8);
  *(void *)(v1 - 160) = result;
  return result;
}

uint64_t sub_10011C18C()
{
  return v0 - 120;
}

uint64_t sub_10011C198(uint64_t a1)
{
  return sub_10007F054(a1, v1);
}

  ;
}

void sub_10011C1AC(uint64_t a1)
{
}

void sub_10011C1B8(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10011C1C4()
{
  *(void *)(v0 + 48) = v1;
  return swift_errorRetain(v1);
}

void sub_10011C1D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10011C1D8(void *a1)
{
}

uint64_t sub_10011C1E4()
{
  return swift_retain(v0);
}

void sub_10011C1EC()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_10011C1F8()
{
}

uint64_t sub_10011C200()
{
  return swift_getObjectType(v0);
}

void sub_10011C20C(uint64_t a1)
{
}

uint64_t sub_10011C214(uint64_t a1)
{
  return sub_10007D824(v1, 1LL, a1);
}

uint64_t sub_10011C238()
{
  return v1(0LL, v0);
}

uint64_t sub_10011C244()
{
  return swift_task_dealloc(*(void *)(v0 + 88));
}

uint64_t sub_10011C250()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

id sub_10011C258()
{
  return *(id *)(v0 + 112);
}

uint64_t sub_10011C264(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

void sub_10011C270(uint64_t a1)
{
  *(void *)(v2 - 120) = a1;
}

uint64_t sub_10011C27C(uint64_t a1)
{
  return String.init<A>(describing:)(v1 - 152, a1);
}

void sub_10011C288(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_10011C290()
{
}

uint64_t sub_10011C298()
{
  return _convertNSErrorToError(_:)(v0);
}

BOOL sub_10011C2A4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10011C2B0(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_10011C2C4(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10011C2CC()
{
  return v0;
}

uint64_t sub_10011C2D8()
{
  return _print_unlocked<A, B>(_:_:)(v1, v0);
}

uint64_t sub_10011C2E4()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10011C2EC(uint64_t a1)
{
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return v1;
}

void sub_10011C2F8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  *(void *)(v2 - 200) = 91LL;
  *(void *)(v2 - 192) = 0xE100000000000000LL;
}

uint64_t sub_10011C30C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 80));
}

uint64_t sub_10011C314()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 64));
}

uint64_t sub_10011C31C@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return 0LL;
}

uint64_t sub_10011C330()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t sub_10011C338()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_10011C340()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10011C348(uint64_t a1, unint64_t a2)
{
  return sub_10007F054(*v2, a2);
}

uint64_t sub_10011C350()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 216, v0 - 200);
}

void *sub_10011C35C()
{
  return sub_1000C4DC0((void *)(v0 - 144));
}

uint64_t sub_10011C364(uint64_t a1, uint64_t a2)
{
  return sub_100079604(v2, a2);
}

void sub_10011C36C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10011C378()
{
  return sub_10011ABF0(v0);
}

void sub_10011C380(unint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void sub_10011C388(uint64_t a1, uint64_t *a2)
{
}

void sub_10011C390(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_10011C398(Swift::String a1)
{
}

uint64_t sub_10011C3A4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10011C3B0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10011C3BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(a1, v3, a3);
}

  ;
}

void sub_10011C3D0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v97 = a1;
  uint64_t v4 = sub_10007B1FC(&qword_10032A3D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v98 = *(void *)(v7 - 8);
  uint64_t v99 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v96 = (char *)&v95 - v12;
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v95 - v13;
  uint64_t v15 = type metadata accessor for SKLogger(0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v95 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v95 - v22;
  xpc_type_t type = xpc_get_type(v2);
  if ((xpc_type_t)XPC_TYPE_NULL.getter() == type)
  {
    id v37 = [objc_allocWithZone(NSNull) init];
    a2[3] = sub_10011D868();
    *a2 = v37;
    return;
  }

  uint64_t v100 = a2;
  if ((xpc_type_t)XPC_TYPE_INT64.getter() == type)
  {
    xpc_int64_get_value(v2);
    uint64_t v38 = &type metadata for Int64;
LABEL_19:
    sub_10011D948((uint64_t)v38);
    *uint64_t v40 = v39;
    return;
  }

  if ((xpc_type_t)XPC_TYPE_UINT64.getter() == type)
  {
    xpc_uint64_get_value(v2);
    uint64_t v38 = &type metadata for UInt64;
    goto LABEL_19;
  }

  if ((xpc_type_t)XPC_TYPE_BOOL.getter() == type)
  {
    xpc_BOOL_get_value(v2);
    sub_10011D948((uint64_t)&type metadata for Bool);
    *uint64_t v42 = v41;
    return;
  }

  if ((xpc_type_t)XPC_TYPE_DOUBLE.getter() == type)
  {
    xpc_double_get_value(v2);
    sub_10011D948((uint64_t)&type metadata for Double);
    *uint64_t v43 = v44;
    return;
  }

  if ((xpc_type_t)XPC_TYPE_STRING.getter() == type)
  {
    uint64_t v45 = v2;
    string_ptr = xpc_string_get_string_ptr(v2);
    if (!string_ptr)
    {
      if (qword_100328B40 != -1) {
        string_ptr = (const char *)swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v60 = sub_100093D50((uint64_t)string_ptr, (uint64_t)qword_10033E1A8);
      sub_10007961C(v60, (uint64_t)v23);
      uint64_t v61 = v98;
      uint64_t v62 = v99;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v14, v23, v99);
      uint64_t v63 = sub_10011D954();
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = sub_10007B9FC(12LL);
        uint64_t v67 = sub_10007B9FC(32LL);
        uint64_t v102 = v67;
        sub_10011D934(4.8149e-34);
        static String._unconditionallyBridgeFromObjectiveC(_:)([v45 description]);
        sub_10011D974();
        uint64_t v68 = sub_10011D91C();
        sub_10011D900(v68);
        sub_10011D92C((uint64_t)v45);
        sub_10009C494();
        sub_10011D968((void *)&_mh_execute_header, v64, v65, "Failed to get string pointer of XPC object: %s");
        sub_10011D960(v67, v69, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v67);
        sub_10007B974(v66);

        (*(void (**)(char *, uint64_t))(v98 + 8))(v14, v99);
      }

      else
      {

        sub_10011D92C((uint64_t)v45);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v62);
      }

      goto LABEL_36;
    }

    String.init(cString:)(string_ptr);
    uint64_t v47 = &type metadata for String;
    goto LABEL_24;
  }

  if ((xpc_type_t)XPC_TYPE_UUID.getter() == type)
  {
    id v51 = [objc_allocWithZone(NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(v2)];
    id v52 = [v51 UUIDString];
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    uint64_t v55 = v54;

    UUID.init(uuidString:)(v53, v55);
    swift_bridgeObjectRelease(v55);
    uint64_t v56 = type metadata accessor for UUID(0LL);
    if (sub_10007D824((uint64_t)v6, 1LL, v56) != 1)
    {
      uint64_t v70 = v100;
      v100[3] = v56;
      id v71 = sub_10009D60C(v70);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v56 - 8) + 32LL))(v71, v6, v56);

      return;
    }

    sub_100087418((uint64_t)v6, &qword_10032A3D0);
    goto LABEL_36;
  }

  if ((xpc_type_t)XPC_TYPE_DATE.getter() == type)
  {
    double value_absolute = xpc_date_get_value_absolute(v2);
    uint64_t v58 = type metadata accessor for Date(0LL);
    uint64_t v59 = v100;
    v100[3] = v58;
    sub_10009D60C(v59);
    Date.init(timeIntervalSinceReferenceDate:)(value_absolute);
    return;
  }

  if ((xpc_type_t)XPC_TYPE_DATA.getter() == type)
  {
    uint64_t v72 = v2;
    bytes_ptr = xpc_data_get_bytes_ptr(v2);
    if (!bytes_ptr)
    {
      if (qword_100328B40 != -1) {
        bytes_ptr = (const void *)swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v84 = sub_100093D50((uint64_t)bytes_ptr, (uint64_t)qword_10033E1A8);
      sub_10007961C(v84, (uint64_t)v21);
      uint64_t v86 = v98;
      uint64_t v85 = v99;
      uint64_t v87 = v96;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v96, v21, v99);
      uint64_t v88 = sub_10011D954();
      uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
      os_log_type_t v90 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v89, v90))
      {
        uint64_t v91 = sub_10007B9FC(12LL);
        uint64_t v92 = sub_10007B9FC(32LL);
        uint64_t v102 = v92;
        sub_10011D934(4.8149e-34);
        static String._unconditionallyBridgeFromObjectiveC(_:)([v72 description]);
        sub_10011D974();
        uint64_t v93 = sub_10011D91C();
        sub_10011D900(v93);
        sub_10011D92C((uint64_t)v72);
        sub_10009C494();
        sub_10011D968((void *)&_mh_execute_header, v89, v90, "Failed to get data pointer of XPC object: %s");
        sub_10011D960(v92, v94, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v92);
        sub_10007B974(v91);

        (*(void (**)(char *, uint64_t))(v98 + 8))(v87, v99);
      }

      else
      {

        sub_10011D92C((uint64_t)v72);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v85);
      }

      goto LABEL_36;
    }

    uint64_t v74 = bytes_ptr;
    size_t length = xpc_data_get_length(v2);
    Data.init(bytes:count:)(v74, length);
    uint64_t v47 = &type metadata for Data;
LABEL_24:
    sub_10011D948((uint64_t)v47);
    *uint64_t v50 = v48;
    v50[1] = v49;
    return;
  }

  if ((xpc_type_t)XPC_TYPE_ARRAY.getter() != type)
  {
    uint64_t v25 = XPC_TYPE_DICTIONARY.getter();
    if ((xpc_type_t)v25 != type)
    {
      if (qword_100328B40 != -1) {
        uint64_t v25 = swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v26 = sub_100093D50(v25, (uint64_t)qword_10033E1A8);
      sub_10007961C(v26, (uint64_t)v18);
      uint64_t v27 = v98;
      uint64_t v28 = v99;
      uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v98 + 32))(v10, v18, v99);
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)sub_10007B9FC(12LL);
        uint64_t v33 = sub_10007B9FC(32LL);
        uint64_t v102 = v33;
        *(_DWORD *)uint64_t v32 = 136315138;
        uint64_t v34 = OpaquePointer.debugDescription.getter(type);
        uint64_t v101 = sub_10007A488(v34, v35, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v32 + 4);
        sub_10009C494();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unsupported XPC object type %s", v32, 0xCu);
        sub_10011D960(v33, v36, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v33);
        sub_10007B974((uint64_t)v32);
      }

      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
      uint64_t v77 = v100;
      __int128 v76 = 0uLL;
      goto LABEL_37;
    }

    uint64_t v81 = sub_10011D4D0(v2);
    if (v81)
    {
      size_t v79 = v81;
      uint64_t v80 = (uint64_t *)&unk_10032A580;
      goto LABEL_42;
    }

BOOL sub_10011CC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = String.init(cString:)(a1);
  unint64_t v13 = v12;
  uint64_t ObjectType = swift_getObjectType(a2);
  sub_10011C3D0(&v25, ObjectType);
  uint64_t v15 = v26;
  if (v26)
  {
    sub_1000853B0(&v25, v27);
    sub_10007B1C0((uint64_t)v27, (uint64_t)&v25);
    sub_10012A9E0((uint64_t)&v25, v11, v13);
    sub_10007B1A0(v27);
  }

  else
  {
    sub_100087418((uint64_t)&v25, (uint64_t *)&unk_100328ED0);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v16 = sub_100079604(v8, (uint64_t)qword_10033E1A8);
    sub_10007961C(v16, (uint64_t)v10);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    uint64_t v17 = swift_bridgeObjectRetain(v13);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v27[0] = v21;
      uint64_t v24 = v4;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v23 = v20 + 4;
      swift_bridgeObjectRetain(v13);
      *(void *)&__int128 v25 = sub_10007A488(v11, v13, (uint64_t *)v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 8, v23);
      swift_bridgeObjectRelease_n(v13, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Failed to get value in XPC dictionary for key: %s",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
    }

    else
    {

      swift_bridgeObjectRelease_n(v13, 2LL);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }

  return v15 != 0;
}

uint64_t sub_10011CEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a3);
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease(a3);
  return v6 & 1;
}

size_t sub_10011CF40(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v50 = type metadata accessor for SKLogger(0LL);
  uint64_t v9 = __chkstk_darwin(v50);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v48 - v12;
  xpc_type_t type = xpc_get_type(a1);
  if (type != (xpc_type_t)XPC_TYPE_ARRAY.getter())
  {
    if (qword_100328B40 == -1)
    {
LABEL_3:
      uint64_t v15 = sub_100079604(v50, (uint64_t)qword_10033E1A8);
      sub_10007961C(v15, (uint64_t)v13);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v13, v2);
      uint64_t v16 = swift_unknownObjectRetain_n(a1, 2LL);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v49 = (char *)swift_slowAlloc(32LL, -1LL);
        v53[0] = (uint64_t)v49;
        *(_DWORD *)os_log_type_t v19 = 136315138;
        *(void *)&__int128 v48 = v19 + 4;
        id v20 = [a1 description];
        uint64_t v50 = v2;
        id v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        unint64_t v24 = v23;

        *(void *)&__int128 v51 = sub_10007A488(v22, v24, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, (char *)&v51 + 8, v48);
        swift_unknownObjectRelease_n(a1, 2LL);
        swift_bridgeObjectRelease(v24);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "XPC object %s is not of type array", v19, 0xCu);
        uint64_t v25 = (uint64_t)v49;
        swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v50);
      }

      else
      {

        swift_unknownObjectRelease_n(a1, 2LL);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      }

      return 0LL;
    }

uint64_t sub_10011D4D0(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_type_t type = xpc_get_type(a1);
  if (type != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v10 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
    sub_10007961C(v10, (uint64_t)v8);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    uint64_t v11 = swift_unknownObjectRetain_n(a1, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v29 = v2;
      unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v28;
      *(_DWORD *)unint64_t v14 = 136315138;
      __int128 v27 = v14 + 4;
      id v15 = [a1 description];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      unint64_t v18 = v17;

      unint64_t v32 = (void *)sub_10007A488(v16, v18, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v27);
      swift_unknownObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "XPC object %s is not of type dictionary", v14, 0xCu);
      uint64_t v19 = v28;
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v29);
    }

    else
    {

      swift_unknownObjectRelease_n(a1, 2LL);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    return 0LL;
  }

  unint64_t v32 = &_swiftEmptyDictionarySingleton;
  uint64_t v20 = swift_allocObject(&unk_1002EEAB0, 24LL, 7LL);
  *(void *)(v20 + 16) = &v32;
  uint64_t v21 = swift_allocObject(&unk_1002EEAD8, 32LL, 7LL);
  *(void *)(v21 + 16) = sub_10011D8B0;
  *(void *)(v21 + 24) = v20;
  aBlock[4] = (uint64_t)sub_10011D8C4;
  uint64_t v31 = v21;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10011CEF0;
  aBlock[3] = (uint64_t)&unk_1002EEAF0;
  uint64_t v22 = _Block_copy(aBlock);
  uint64_t v23 = v31;
  swift_retain(v21);
  swift_release(v23);
  xpc_dictionary_apply(a1, v22);
  _Block_release(v22);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v21, "", 97LL, 22LL, 37LL, 1LL);
  uint64_t result = swift_release(v21);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v26 = v32;
    swift_release(v20);
    return (uint64_t)v26;
  }

  __break(1u);
  return result;
}

unint64_t sub_10011D868()
{
  unint64_t result = qword_10032BDE8;
  if (!qword_10032BDE8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNull);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10032BDE8);
  }

  return result;
}

uint64_t sub_10011D8A4()
{
  return sub_1000DE480(v0, 24LL);
}

BOOL sub_10011D8B0(uint64_t a1, uint64_t a2)
{
  return sub_10011CC28(a1, a2);
}

uint64_t sub_10011D8B8()
{
  return sub_1000DE480(v0, 32LL);
}

uint64_t sub_10011D8C4()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10011D8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10011D8F8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10011D900(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 - 112, v1 - 104, *(void *)(v1 - 144));
}

uint64_t sub_10011D91C()
{
  return sub_10007A488(v1, v0, (uint64_t *)(v2 - 104));
}

uint64_t sub_10011D92C(uint64_t a1)
{
  return swift_unknownObjectRelease_n(a1, 2LL);
}

void sub_10011D934(float a1)
{
  *uint64_t v1 = a1;
  *(void *)(v2 - 144) = v1 + 1;
}

void sub_10011D948(uint64_t a1@<X8>)
{
  *(void *)(*(void *)(v1 - 120) + 24LL) = a1;
}

uint64_t sub_10011D954()
{
  return swift_unknownObjectRetain_n(v0, 2LL);
}

uint64_t sub_10011D960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 1LL, a3);
}

void sub_10011D968(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void sub_10011D974()
{
}

id sub_10011D980(uint64_t a1)
{
  return sub_10011DAE0(a1, 0xD000000000000013LL, 0x80000001002A37A0LL, (uint64_t)sub_10011D9AC, &qword_10033E1C0);
}

uint64_t sub_10011D9AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  if (v1 != 1 || *(_BYTE *)(a1 + 48) != 2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain(v4);
  LazyJWS.init(rawValue:)(v3, v4, (uint64_t)v9);
  sub_10011DDD0((uint64_t)v9, (uint64_t)__src);
  if (!__src[3]) {
    return 0LL;
  }
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v5 = LazyJWS.payloadJSONString.getter();
  uint64_t v7 = v6;
  sub_10011DE18(v9);
  if (v7) {
    return v5;
  }
  else {
    return 0LL;
  }
}

id sub_10011DA6C()
{
  return sub_10011DD6C(&qword_100328B48, (id *)&qword_10033E1C0);
}

id sub_10011DAB4(uint64_t a1)
{
  return sub_10011DAE0(a1, 0xD000000000000019LL, 0x80000001002A3780LL, (uint64_t)sub_10011DB4C, &qword_10033E1C8);
}

id sub_10011DAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = objc_allocWithZone((Class)type metadata accessor for SQLiteFunction());
  id result = sub_10007DE90(a2, a3, 1, 0, 1LL, 0, a4, 0LL);
  *a5 = result;
  return result;
}

id sub_10011DB4C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0LL;
  }
  if (v5 != 1 || *(_BYTE *)(a1 + 48) != 3) {
    return 0LL;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  sub_1000881FC(v10, v9);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = sub_100026EC4(isa, 0LL);

  if (!v7)
  {
    sub_10007F030(v10, v9, 3);
    return v7;
  }

  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  id v31 = 0LL;
  id v13 = [v12 dataWithJSONObject:v7 options:0 error:&v31];

  id v14 = v31;
  if (!v13)
  {
    uint64_t v21 = v14;
    uint64_t v22 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v23, v24, v25, v26, v27, v28, v29);
    sub_10007F030(v10, v9, 3);
    swift_errorRelease(v22);
    return 0LL;
  }

  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
  unint64_t v17 = v16;

  static String.Encoding.utf8.getter(v18);
  uint64_t v19 = String.init(data:encoding:)(v15, v17, v4);
  if (v20) {
    id v7 = (id)v19;
  }
  else {
    id v7 = 0LL;
  }
  swift_bridgeObjectRetain(v20);
  sub_10007F030(v10, v9, 3);
  sub_10007F054(v15, v17);
  swift_bridgeObjectRelease();
  return v7;
}

id sub_10011DD50()
{
  return sub_10011DD6C(&qword_100328B50, (id *)&qword_10033E1C8);
}

id sub_10011DD6C(void *a1, id *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return *a2;
}

uint64_t sub_10011DDD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032BDF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10011DE18(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10011DE68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a12);
  }

  return result;
}

void sub_10011DEA4(void (*a1)(id *)@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  id v33 = 0LL;
  id v6 =  [(id)objc_opt_self(NSKeyedArchiver) archivedDataWithRootObject:a2 requiringSecureCoding:1 error:&v33];
  id v7 = v33;
  if (v6)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v10 = v9;

    *a3 = v8;
    a3[1] = v10;
  }

  else
  {
    uint64_t v11 = v7;
    uint64_t v12 = (void *)_convertNSErrorToError(_:)(v7);

    swift_willThrow(v13, v14, v15, v16, v17, v18, v19);
    id v33 = v12;
    a1(&v33);
    unint64_t v32 = v12;
    swift_errorRetain(v12);
    uint64_t v20 = sub_10007B1FC(&qword_100329B90);
    uint64_t v21 = _getErrorEmbeddedNSError<A>(_:)(&v32, v20, &protocol self-conformance witness table for Error);
    if (v21)
    {
      uint64_t v22 = v21;
      swift_errorRelease(v12);
    }

    else
    {
      uint64_t v22 = swift_allocError(v20, &protocol self-conformance witness table for Error, 0LL, 0LL);
      *uint64_t v23 = v32;
    }

    uint64_t v24 = (void *)_convertErrorToNSError(_:)(v22);
    swift_errorRelease(v22);
    [v24 toASDErrorWithMetadata:0];

    swift_willThrow(v25, v26, v27, v28, v29, v30, v31);
    swift_errorRelease(v33);
  }

uint64_t sub_10011E05C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x786F62646E6173LL;
  }
  else {
    return 0x67696C6674736574LL;
  }
}

uint64_t sub_10011E098@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10011E05C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_10011E0C8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10007CB7C(0LL, &qword_10032BEA0, &OBJC_CLASS___AMSPaymentSheetRequest_ptr);
  uint64_t v5 = v2;
  uint64_t v6 = NSCoder.decodeObject<A>(of:forKey:)(v4, 0x74736575716572LL, 0xE700000000000000LL, v4);
  if (!v6) {
    goto LABEL_5;
  }
  id v7 = (void *)v6;
  uint64_t v8 = sub_10007CB7C(0LL, &qword_10032BEA8, &OBJC_CLASS___AMSPurchaseInfo_ptr);
  uint64_t v9 = NSCoder.decodeObject<A>(of:forKey:)(v8, 0x6573616863727570LL, 0xEC0000006F666E49LL, v8);
  if (!v9)
  {

LABEL_5:
    uint64_t v16 = type metadata accessor for PaymentSheetRequest();
    swift_deallocPartialClassInstance(v5, v16, 25LL, 7LL);
    return 0LL;
  }

  uint64_t v10 = (void *)v9;
  *(void *)&v5[OBJC_IVAR___PaymentSheetRequest_request] = v7;
  *(void *)&v5[OBJC_IVAR___PaymentSheetRequest_purchaseInfo] = v9;
  id v11 = v7;
  id v12 = v10;
  NSString v13 = sub_10011E44C();
  unsigned __int8 v14 = [a1 decodeBoolForKey:v13];

  v5[OBJC_IVAR___PaymentSheetRequest_sandbox] = v14;
  v18.receiver = v5;
  v18.super_class = (Class)type metadata accessor for PaymentSheetRequest();
  id v15 = objc_msgSendSuper2(&v18, "init");

  return v15;
}

void sub_10011E268(void *a1)
{
  NSString v3 = String._bridgeToObjectiveC()();
  sub_10011E464();

  NSString v4 = String._bridgeToObjectiveC()();
  sub_10011E464();

  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___PaymentSheetRequest_sandbox);
  id v6 = sub_10011E44C();
  [a1 encodeBool:v5 forKey:v6];
}

void sub_10011E38C()
{
}

id sub_10011E3C4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaymentSheetRequest();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PaymentSheetRequest()
{
  return objc_opt_self(&OBJC_CLASS___PaymentSheetRequest);
}

NSString sub_10011E44C()
{
  return String._bridgeToObjectiveC()();
}

id sub_10011E464()
{
  return objc_msgSend(v0, *(SEL *)(v3 + 2496), v1, v2);
}

void sub_10011E47C(unsigned __int8 a1)
{
}

void sub_10011E4BC()
{
}

void sub_10011E4D8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_100121220();
}

unint64_t sub_10011E514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 1) {
    return 0xD000000000000018LL;
  }
  v10[6] = v3;
  v10[7] = v4;
  strcpy((char *)v10, "Server code ");
  BYTE5(v10[1]) = 0;
  HIWORD(v10[1]) = -5120;
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  unint64_t result = v10[0];
  if (a3)
  {
    sub_1000935BC(a2);
    v9._uint64_t countAndFlagsBits = 41LL;
    v9._object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);
    sub_1000935BC(40LL);
    sub_100085EF0();
    return v10[0];
  }

  return result;
}

unint64_t sub_10011E600()
{
  return sub_10011E514(*v0, v0[1], v0[2]);
}

uint64_t sub_10011E60C()
{
  unint64_t v0 = sub_1000A9B34();
  uint64_t v7 = sub_100121124(v0, (uint64_t)&type metadata for String, v1, v2, v3, v4, v5, v6, 0xD000000000000010LL);
  if ((v7 & 1) != 0)
  {
    sub_100085EF0();
    return 0LL;
  }

  else
  {
    char v15 = sub_100121124(v7, (uint64_t)&type metadata for String, v8, v9, v10, v11, v12, v13, 0xD000000000000019LL);
    sub_100085EF0();
    if ((v15 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void sub_10011E6C4(void *a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v5);
  *(void *)&v5[OBJC_IVAR____TtC9storekitd7Request_dialogContext] = 0LL;
  uint64_t v12 = OBJC_IVAR____TtC9storekitd7Request_logKey;
  uint64_t v13 = qword_100328B40;
  unsigned __int8 v14 = v5;
  if (v13 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  char v15 = (unint64_t *)&v14[v12];
  uint64_t v16 = type metadata accessor for SKLogger(0LL);
  sub_100079604(v16, (uint64_t)qword_10033E1A8);
  *char v15 = sub_1000F4060();
  v15[1] = v17;
  v14[OBJC_IVAR____TtC9storekitd7Request_useBiometrics] = 0;
  *(void *)&v14[OBJC_IVAR____TtC9storekitd7Request_client] = a1;
  *(void *)&v14[OBJC_IVAR____TtC9storekitd7Request_bagKey] = a2;
  *(void *)&v14[OBJC_IVAR____TtC9storekitd7Request_parameters] = a5;
  *(void *)&v14[OBJC_IVAR____TtC9storekitd7Request_method] = a3;
  v14[OBJC_IVAR____TtC9storekitd7Request_accountRequirement] = a4;
  id v18 = a1;
  id v19 = a2;

  v20.receiver = v14;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, "init");

  sub_100121220();
}

uint64_t sub_10011E808(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[26] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[27] = v4;
  v2[28] = sub_10009BFD0(v4);
  v2[29] = sub_100093010();
  v2[30] = sub_100093010();
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  v2[31] = v5;
  v2[32] = sub_10009BFD0(*(void *)(v5 - 8));
  v2[33] = sub_100093010();
  v2[34] = sub_100093010();
  v2[35] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10011E890()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = *(void **)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void **)(v0 + 200);
  uint64_t v7 = sub_100079604(*(void *)(v0 + 248), (uint64_t)qword_10033E1A8);
  *(void *)(v0 + 288) = v7;
  uint64_t v68 = v7;
  sub_10009362C(v7);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(void *)(v0 + 296) = v8;
  v8(v3, v2, v4);
  id v9 = v1;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = *(void **)(v0 + 200);
    id v63 = v9;
    uint64_t v65 = *(void *)(v0 + 192);
    uint64_t v13 = sub_10007B9FC(22LL);
    uint64_t v67 = sub_10007B9FC(64LL);
    uint64_t v70 = v67;
    *(_DWORD *)uint64_t v13 = 136446467;
    uint64_t v14 = sub_10007BA3C();
    *(void *)(v0 + 176) = sub_100121194(v14, v15, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v13 + 4);
    sub_10007BA44();

    *(_WORD *)(v13 + 12) = 2081;
    if (v65)
    {
      uint64_t v16 = v9;
      id v17 = [v9 description];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v20 = v19;
    }

    else
    {
      unint64_t v20 = 0xEA0000000000746ELL;
      uint64_t v18 = 0x756F636361206F6ELL;
      uint64_t v16 = v63;
    }

    uint64_t v22 = (os_log_s *)(v13 + 14);
    uint64_t v62 = *(void *)(v0 + 216);
    id v64 = *(id *)(v0 + 208);
    uint64_t v66 = *(void *)(v0 + 240);
    *(void *)(v0 + 184) = sub_10007A488(v18, v20, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v13 + 14);
    swift_bridgeObjectRelease(v20);

    sub_100086038( (void *)&_mh_execute_header,  v10,  v11,  "[%{public}s] Starting authentication request for %{private}s",  (uint8_t *)v13);
    sub_100086030(v67, v25, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v67);
    sub_10007B974(v13);

    uint64_t v24 = *(void (**)(uint64_t, id))(v62 + 8);
    v24(v66, v64);
    id v9 = v16;
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v22 = *(os_log_s **)(v0 + 208);
    uint64_t v23 = *(void *)(v0 + 216);

    uint64_t v24 = *(void (**)(uint64_t, id))(v23 + 8);
    v24(v21, v22);
  }

  *(void *)(v0 + 304) = v24;
  uint64_t v26 = *(void *)(v0 + 200);
  uint64_t v27 = *(void **)(v26 + OBJC_IVAR____TtC9storekitd7Request_dialogContext);
  *(void *)(v0 + 312) = v27;
  if (v27)
  {
    uint64_t v28 = v0 + 16;
    uint64_t v29 = *(void **)(v0 + 192);
    id v30 = objc_allocWithZone(&OBJC_CLASS___AMSAuthenticateOptions);
    swift_unknownObjectRetain(v27);
    id v31 = [v30 init];
    *(void *)(v0 + 320) = v31;
    id v32 = sub_1000DF468();
    sub_100121228((uint64_t)v32, "setClientInfo:");

    [v31 setAuthenticationType:0];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v26
                                                                           + OBJC_IVAR____TtC9storekitd7Request_bagKey));
    sub_1001209C0(v33, v34, v31);
    *(void *)(v0 + 328) = OBJC_IVAR____TtC9storekitd7Request_logKey;
    sub_100085FEC();
    NSString v35 = String._bridgeToObjectiveC()();
    uint64_t v36 = sub_100085EF0();
    sub_100121228(v36, "setLogKey:");

    sub_100120A10();
    id v37 = v9;
    id v38 = v31;
    id v39 = sub_10011F358(v29, v31);
    *(void *)(v0 + 336) = v39;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_10011EE50;
    uint64_t v40 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v41 = (void *)(v0 + 80);
    v41[1] = 0x40000000LL;
    _OWORD v41[2] = sub_100099C24;
    v41[3] = &unk_1002EEC70;
    v41[4] = v40;
    sub_1001211F0(v27, "handleAuthenticateRequest:completionHandler:", (uint64_t)v39);
    return swift_continuation_await(v28);
  }

  else
  {
    sub_10009362C(v68);
    uint64_t v44 = *(void *)(v26 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v43 = *(void *)(v26 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v45 = sub_100085FEC();
    static os_log_type_t.error.getter(v45);
    uint64_t v46 = sub_1000D67D0();
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    if (sub_1000934F0(v47))
    {
      __int128 v48 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v49 = sub_10007B9FC(64LL);
      *(_DWORD *)__int128 v48 = 136446466;
      uint64_t v69 = v49;
      uint64_t v70 = 91LL;
      unint64_t v71 = 0xE100000000000000LL;
      sub_100085FEC();
      sub_1000935BC(v44);
      sub_100085F14();
      sub_100085EF0();
      unint64_t v50 = v71;
      uint64_t v52 = sub_10008620C(v70, v51, &v69);
      sub_100120FC4(v52);
      sub_10007B980();
      sub_10007D974(v43);
      sub_100093898();
      *(void *)(v0 + 128) = sub_1000AB050(53LL, 0x80000001002A3AF0LL, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v50);
      sub_100086038((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}s%{public}s", v48);
      sub_100086030(v49, v53, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v49);
      sub_10007B974((uint64_t)v48);

      sub_100085EF0();
    }

    else
    {
      sub_100085E64(v43);
    }

    sub_10007A3CC(*(void *)(v0 + 264));
    unint64_t v54 = sub_100092AC4();
    uint64_t v55 = sub_100093030((uint64_t)&unk_1002EEE28, v54);
    sub_100121058(v55, v56, v57, v58, v59, v60, v61);
    sub_100121160();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10011EE50()
{
  *(void *)(v0 + 344) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10011EE90( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  uint64_t v92 = v27;
  uint64_t v93 = v28;
  uint64_t v91 = v26;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 296);
  uint64_t v30 = *(void *)(v26 + 272);
  uint64_t v31 = *(void *)(v26 + 232);
  uint64_t v33 = *(void **)(v26 + 200);
  uint64_t v32 = *(void *)(v26 + 208);
  uint64_t v34 = *(void **)(v26 + 120);
  sub_10009362C(*(void *)(v26 + 288));
  v29(v31, v30, v32);
  id v35 = v33;
  id v89 = v34;
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v37 = static os_log_type_t.default.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v83 = *(void *)(v26 + 232);
    uint64_t v86 = *(void *)(v26 + 304);
    id v38 = *(void **)(v26 + 200);
    uint64_t v80 = *(void *)(v26 + 208);
    uint64_t v39 = sub_10007B9FC(22LL);
    uint64_t v40 = (void *)sub_10007B9FC(8LL);
    uint64_t v76 = sub_10007B9FC(32LL);
    uint64_t v90 = v76;
    *(_DWORD *)uint64_t v39 = 136446467;
    uint64_t v41 = sub_10007BA3C();
    *(void *)(v26 + 160) = sub_100121194(v41, v42, &v90);
    sub_10012113C();
    sub_10007BA44();

    *(_WORD *)(v39 + 12) = 2113;
    id v51 = sub_1001211C0(v43, v44, v45, v46, v47, v48, v49, v50, v72, v76, v80, v83, v86, v89);
    *(void *)(v26 + 168) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v26 + 176, v39 + 14);
    *uint64_t v40 = v51;

    sub_100086038( (void *)&_mh_execute_header,  v36,  v37,  "[%{public}s] Finished authenticating request for %{private}@",  (uint8_t *)v39);
    uint64_t v52 = sub_10007B1FC(&qword_10032B340);
    swift_arrayDestroy(v40, 1LL, v52);
    sub_10007B974((uint64_t)v40);
    sub_100121174((uint64_t)&type metadata for Any, v73, v77);
    sub_10007B974(v39 + 14);
    sub_10007B974(v39);

    int v61 = sub_1001211F8(v53, v54, v55, v56, v57, v58, v59, v60, v74, v78, v81, v84, v87);
  }

  else
  {

    int v61 = sub_100121234();
  }

  uint64_t v69 = *(void **)(v26 + 336);
  uint64_t v70 = *(void **)(v26 + 320);
  id v82 =  sub_1001211C0( v61,  v62,  v63,  v64,  v65,  v66,  v67,  v68,  v72,  v75,  v79,  *(void *)(v26 + 232),  *(void *)(v26 + 224),  v89);

  sub_1000931C0();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  swift_task_dealloc(v85);
  swift_task_dealloc(v88);
  return (*(uint64_t (**)(id))(v26 + 8))(v82);
}

#error "10011F274: call analysis failed (funcsize=158)"
id sub_10011F358(void *a1, void *a2)
{
  uint64_t v2;
  id v5;
  uint64_t v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithAccount:a1 options:a2];

  return v5;
}

uint64_t sub_10011F3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100121154(a1, a2, a3);
  v3[24] = v4;
  v3[25] = sub_10009BFD0(*(void *)(v4 - 8));
  v3[26] = sub_100093010();
  v3[27] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

#error "10011F4D0: call analysis failed (funcsize=183)"
uint64_t sub_10011F710()
{
  sub_10009C3BC();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10011F74C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  a22 = v24;
  sub_10009362C(*(void *)(v24 + 224));
  uint64_t v29 = sub_10007BA3C();
  static os_log_type_t.default.getter(v29);
  uint64_t v30 = sub_100120FA4();
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  if (sub_1001210E4(v31))
  {
    uint64_t v45 = *(void *)(v24 + 240);
    uint64_t v32 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v33 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v32 = 136446466;
    a11 = v33;
    a12 = 91LL;
    a13 = 0xE100000000000000LL;
    sub_10007BA3C();
    sub_1001210B4();
    sub_100085F14();
    sub_10007BA44();
    uint64_t v35 = sub_10008620C(a12, v34, &a11);
    sub_100121024(v35);
    sub_10007B980();
    sub_1000CF020();
    sub_1000861F0();
    sub_1000C6444();
    uint64_t v38 = sub_1000AB050(38LL, v36, v37);
    sub_100121084(v38);
    sub_100086038((void *)&_mh_execute_header, v25, v26, "%{public}s%{public}s", v32);
    sub_100086030(v33, v39, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v33);
    sub_10007B974((uint64_t)v32);

    sub_10007BA44();
    uint64_t v40 = v45;
  }

  else
  {
    uint64_t v41 = *(void *)(v24 + 240);
    sub_10007BA30();

    uint64_t v40 = v41;
  }

  swift_unknownObjectRelease(v40);
  sub_100121104();
  sub_1000939C0();
  sub_100093280();
  sub_100093124();
  uint64_t v42 = sub_1001211E0();
  return sub_100120F6C(v42, v43);
}

uint64_t sub_10011F8B8(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  void v5[4] = a3;
  v5[5] = a5;
  void v5[2] = a1;
  v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  uint64_t v10 = dword_10032BFCC;
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  a5;
  uint64_t v14 = (void *)swift_task_alloc(v10);
  v5[7] = v14;
  *uint64_t v14 = v5;
  v14[1] = sub_100120F4C;
  return sub_10011F3B0((uint64_t)v14, v15, (uint64_t)v13);
}

uint64_t sub_10011F950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100121154(a1, a2, a3);
  v3[24] = v4;
  v3[25] = sub_10009BFD0(*(void *)(v4 - 8));
  v3[26] = sub_100093010();
  v3[27] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

#error "10011FA70: call analysis failed (funcsize=183)"
uint64_t sub_10011FCB0()
{
  sub_10009C3BC();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10011FCEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  a22 = v24;
  sub_10009362C(*(void *)(v24 + 224));
  uint64_t v29 = sub_10007BA3C();
  static os_log_type_t.default.getter(v29);
  uint64_t v30 = sub_100120FA4();
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  if (sub_1001210E4(v31))
  {
    uint64_t v45 = *(void *)(v24 + 240);
    uint64_t v32 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v33 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v32 = 136446466;
    a11 = v33;
    a12 = 91LL;
    a13 = 0xE100000000000000LL;
    sub_10007BA3C();
    sub_1001210B4();
    sub_100085F14();
    sub_10007BA44();
    uint64_t v35 = sub_10008620C(a12, v34, &a11);
    sub_100121024(v35);
    sub_10007B980();
    sub_1000CF020();
    sub_1000861F0();
    sub_1000C6444();
    uint64_t v38 = sub_1000AB050(30LL, v36, v37);
    sub_100121084(v38);
    sub_100086038((void *)&_mh_execute_header, v25, v26, "%{public}s%{public}s", v32);
    sub_100086030(v33, v39, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v33);
    sub_10007B974((uint64_t)v32);

    sub_10007BA44();
    uint64_t v40 = v45;
  }

  else
  {
    uint64_t v41 = *(void *)(v24 + 240);
    sub_10007BA30();

    uint64_t v40 = v41;
  }

  swift_unknownObjectRelease(v40);
  sub_100121104();
  sub_1000939C0();
  sub_100093280();
  sub_100093124();
  uint64_t v42 = sub_1001211E0();
  return sub_100120F6C(v42, v43);
}

uint64_t sub_10011FE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10009C2E4(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_10011FE98(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  void v5[4] = a3;
  v5[5] = a5;
  void v5[2] = a1;
  v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  uint64_t v10 = dword_10032BFB4;
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  a5;
  uint64_t v14 = (void *)swift_task_alloc(v10);
  v5[7] = v14;
  *uint64_t v14 = v5;
  v14[1] = sub_10011FF30;
  return sub_10011F950((uint64_t)v14, v15, (uint64_t)v13);
}

uint64_t sub_10011FF30(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 56);
  uint64_t v7 = *(void **)(*v2 + 32);
  uint64_t v6 = *(void **)(*v2 + 40);
  id v9 = *(void **)(*v2 + 16);
  uint64_t v8 = *(void **)(*v2 + 24);
  uint64_t v10 = *v2;
  swift_task_dealloc(v5);

  id v11 = *(void (***)(void, void, void))(v10 + 48);
  if (v3)
  {
    id v12 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v11)[2](v11, 0LL, v12);

    _Block_release(v11);
  }

  else
  {
    ((void (**)(void, void *, void))v11)[2](v11, a1, 0LL);
    _Block_release(v11);
  }

  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_10012000C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100121154(a1, a2, a3);
  v3[24] = v4;
  v3[25] = sub_10009BFD0(*(void *)(v4 - 8));
  v3[26] = sub_100093010();
  v3[27] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

#error "10012012C: call analysis failed (funcsize=198)"
uint64_t sub_1001203A8()
{
  uint64_t v0;
  uint64_t v1;
  sub_10009C134();
  *(void *)(v0 + 256) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1001203E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  a22 = v24;
  uint64_t v28 = v24[28];
  uint64_t v29 = (os_log_s *)v24[26];
  swift_unknownObjectRelease(v24[31]);
  sub_10007961C(v28, (uint64_t)v29);
  uint64_t v30 = sub_10007BA3C();
  static os_log_type_t.default.getter(v30);
  uint64_t v31 = sub_100120FA4();
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  if (sub_1001210E4(v32))
  {
    uint64_t v46 = v24[30];
    uint64_t v33 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v34 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v33 = 136446466;
    a11 = v34;
    a12 = 91LL;
    a13 = 0xE100000000000000LL;
    sub_10007BA3C();
    sub_1001210B4();
    sub_100085F14();
    sub_10007BA44();
    uint64_t v36 = sub_10008620C(a12, v35, &a11);
    sub_100121024(v36);
    sub_10007B980();
    sub_1000CF020();
    sub_1000861F0();
    sub_1000C6444();
    uint64_t v39 = sub_1000AB050(34LL, v37, v38);
    sub_100121084(v39);
    sub_100086038((void *)&_mh_execute_header, v29, v25, "%{public}s%{public}s", v33);
    sub_100086030(v34, v40, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v34);
    sub_10007B974((uint64_t)v33);

    sub_10007BA44();
    uint64_t v41 = v46;
  }

  else
  {
    uint64_t v42 = v24[30];
    sub_10007BA30();

    uint64_t v41 = v42;
  }

  swift_unknownObjectRelease(v41);
  sub_100121104();
  sub_1000939C0();
  sub_100093280();
  sub_100093124();
  uint64_t v43 = sub_1001211E0();
  return sub_100120F6C(v43, v44);
}

uint64_t sub_100120554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(v7 + 240);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease(v8);
  sub_1000931C0();
  sub_1001210C0();
  sub_1000931C8();
  sub_100093280();
  return sub_10009C2E4(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_1001205B4(void *a1, int a2, void *a3, void *a4, void *a5, void *aBlock, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = (void *)swift_allocObject(a7, 56LL, 7LL);
  void v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = v14;
  v15[6] = a1;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a1;
  return sub_100121B88(a8, (uint64_t)v15);
}

void sub_100120640()
{
}

uint64_t sub_10012066C(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  void v5[4] = a3;
  v5[5] = a5;
  void v5[2] = a1;
  v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  uint64_t v10 = dword_10032BF94;
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  a5;
  uint64_t v14 = (void *)swift_task_alloc(v10);
  v5[7] = v14;
  *uint64_t v14 = v5;
  v14[1] = sub_100120F4C;
  return sub_10012000C((uint64_t)v14, v15, (uint64_t)v13);
}

uint64_t type metadata accessor for Request()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd7Request);
}

uint64_t sub_10012079C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001207E8 + 4 * byte_10027CA45[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10012081C + 4 * byte_10027CA40[v4]))();
}

uint64_t sub_10012081C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100120824(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10012082CLL);
  }
  return result;
}

uint64_t sub_100120838(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100120840LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100120844(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012084C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Request.AccountRequirement()
{
}

unint64_t sub_100120868()
{
  unint64_t result = qword_10032BF78;
  if (!qword_10032BF78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027CAD4, &unk_1002EEBA0);
    atomic_store(result, (unint64_t *)&qword_10032BF78);
  }

  return result;
}

uint64_t sub_1001208A8()
{
  __int16 v1 = (void *)sub_100121240();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100120FDC(v1, (uint64_t)sub_100120F54);
  return sub_100121044(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1001208F0()
{
  __int16 v1 = (void *)sub_100121240();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100120FDC(v1, (uint64_t)sub_1000D66FC);
  return sub_100121044(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100120938()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10012097C()
{
  __int16 v1 = (void *)sub_100121240();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100120FDC(v1, (uint64_t)sub_100120F54);
  return sub_100121044(v2, v3, v4, v5, v6, v7);
}

void sub_1001209C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setDebugReason:v5];
}

unint64_t sub_100120A10()
{
  unint64_t result = qword_10032BFE0;
  if (!qword_10032BFE0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSAuthenticateRequest);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10032BFE0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for Request.ResponseFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100120A98 + 4 * byte_10027CA4F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100120ACC + 4 * byte_10027CA4A[v4]))();
}

uint64_t sub_100120ACC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100120AD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100120ADCLL);
  }
  return result;
}

uint64_t sub_100120AE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100120AF0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100120AF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100120AFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Request.ResponseFormat()
{
  return &type metadata for Request.ResponseFormat;
}

unint64_t sub_100120B1C(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100120B3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if ((int)v4 - 1 < 0)
  {
    *(void *)(a1 + 16) = v3;
    swift_bridgeObjectRetain(v3);
  }

  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }

  return a1;
}

void *sub_100120B98(void *a1, void *a2)
{
  unint64_t v4 = a1[2];
  LODWORD(sub_1000E9458(v1, v2, v5) = -1;
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  else {
    uint64_t v6 = a1[2];
  }
  int v7 = v6 - 1;
  if (a2[2] < 0xFFFFFFFFuLL) {
    uint64_t v5 = a2[2];
  }
  int v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v12 = a2[2];
      a1[2] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v4);
      return a1;
    }

    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_11;
  }

  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    __int128 v10 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v10;
    return a1;
  }

  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

__n128 sub_100120C54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100120C68(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = *(void *)(a2 + 16);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = *(void *)(a2 + 16);
    }
    if ((int)v7 - 1 < 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v6;
      swift_bridgeObjectRelease(v4);
      return a1;
    }

    swift_bridgeObjectRelease(v4);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t sub_100120CE4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100120D40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_100120DA0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_100120DC4(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    result[1] = 0LL;
    result[2] = 0LL;
    *__n128 result = a2 - 0x7FFFFFFF;
  }

  else if (a2)
  {
    result[2] = a2;
  }

  return result;
}

void type metadata accessor for Request.ResponseError()
{
}

uint64_t sub_100120E00(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100120E4C + 4 * byte_10027CA59[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100120E80 + 4 * byte_10027CA54[v4]))();
}

uint64_t sub_100120E80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100120E88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100120E90LL);
  }
  return result;
}

uint64_t sub_100120E9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100120EA4LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_100120EA8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100120EB0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Request.RequestError()
{
}

unint64_t sub_100120ECC()
{
  unint64_t result = qword_10032BFF0;
  if (!qword_10032BFF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027CB68, &unk_1002EEE28);
    atomic_store(result, (unint64_t *)&qword_10032BFF0);
  }

  return result;
}

unint64_t sub_100120F0C()
{
  unint64_t result = qword_10032BFF8;
  if (!qword_10032BFF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027CBF8, &type metadata for Request.ResponseFormat);
    atomic_store(result, (unint64_t *)&qword_10032BFF8);
  }

  return result;
}

uint64_t sub_100120F6C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100120F88()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100120FA4()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_100120FB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  return sub_10007A488(a13, a14, &a12);
}

uint64_t sub_100120FC4(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1 + 144, v2);
}

uint64_t sub_100120FDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100121004(float a1)
{
  *uint64_t v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_100121024(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v2 + 4);
}

uint64_t sub_100121044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_100121058(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a2 = 3;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10012106C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 + 128) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, v13, v11);
}

uint64_t sub_100121084(uint64_t a1)
{
  *(void *)(v3 + 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v3 + 16, v1);
}

uint64_t sub_10012109C(uint64_t a1)
{
  *(void *)(v2 + 168) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2 + 176, v1);
}

void sub_1001210B4()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1001210C0()
{
  return swift_task_dealloc(*(void *)(v0 + 216));
}

uint64_t sub_1001210CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 160) = a1;
  return a10;
}

BOOL sub_1001210E4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

BOOL sub_1001210F4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100121104()
{
  return sub_10007A3CC(*(void *)(v0 + 208));
}

void sub_100121114( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  v15._uint64_t countAndFlagsBits = v14;
  v15._object = v13;
  String.append(_:)(v15);
}

uint64_t sub_100121124( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return StringProtocol.contains<A>(_:)(&a9, a2, a2, v9, v9);
}

uint64_t sub_10012113C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v1 + 8, v0 + 4);
}

uint64_t sub_100121154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 176) = a3;
  *(void *)(v4 + 184) = v3;
  return type metadata accessor for SKLogger(0LL);
}

uint64_t sub_100121160()
{
  return swift_task_dealloc(*(void *)(v0 + 280));
}

uint64_t sub_100121174@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a3, 1LL, a1 + 8);
}

uint64_t sub_100121188()
{
  return sub_10007A3CC(*(void *)(v0 + 216));
}

uint64_t sub_100121194(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(v4, v3, a3);
}

  ;
}

uint64_t sub_1001211B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v4[2] = a2;
  void v4[3] = v2;
  void v4[4] = a1;
  return swift_unknownObjectRetain(v3);
}

id sub_1001211C0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  return [a14 *(SEL *)(v14 + 4080)];
}

  ;
}

uint64_t sub_1001211E0()
{
  return v0;
}

id sub_1001211F0(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, v3);
}

uint64_t sub_1001211F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t))
{
  return a13(a12, a11);
}

uint64_t sub_100121204()
{
  return sub_10007A3CC(*(void *)(v0 + 200));
}

void sub_10012120C()
{
  *(void *)(v0 + 56) = v0 + 120;
}

  ;
}

id sub_100121228(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100121234()
{
  return v2(v0, v1);
}

uint64_t sub_100121240()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_100121248(void *a1)
{
  if (a1[2])
  {
    sub_10007B1FC(&qword_10032C2A0);
    uint64_t v2 = (void *)sub_10012A0AC();
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }

  sub_100129FFC();
  unint64_t v5 = v4 & v3;
  sub_10012A474();
  sub_100085FEC();
  swift_retain(v2);
  uint64_t v6 = 0LL;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v8 = v7 | (v6 << 6);
  while (1)
  {
    uint64_t v22 = (uint64_t *)(a1[6] + 16 * v8);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    sub_10007B1C0(a1[7] + 32 * v8, (uint64_t)v45);
    *(void *)&__int128 v44 = v24;
    *((void *)&v44 + 1) = v23;
    uint64_t v42[2] = v44;
    v43[0] = v45[0];
    v43[1] = v45[1];
    *(void *)&v42[0] = v24;
    *((void *)&v42[0] + 1) = v23;
    sub_10009C738();
    sub_10012A2FC( (uint64_t)&v34,  (uint64_t)v42,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for AnyHashable);
    sub_1000853B0(v43, v37);
    __int128 v38 = v34;
    __int128 v39 = v35;
    uint64_t v40 = v36;
    sub_1000853B0(v37, v41);
    __int128 v34 = v38;
    __int128 v35 = v39;
    uint64_t v36 = v40;
    sub_1000853B0(v41, v42);
    sub_1000853B0(v42, &v38);
    AnyHashable._rawHashValue(seed:)(v2[5]);
    sub_10012A060();
    if (v25)
    {
      sub_10012A3E8();
      while (++v28 != v29 || (v27 & 1) == 0)
      {
        BOOL v30 = v28 == v29;
        if (v28 == v29) {
          uint64_t v28 = 0LL;
        }
        v27 |= v30;
        if (v2[v28 + 8] != -1LL)
        {
          sub_10012A3D4();
          goto LABEL_36;
        }
      }

      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    sub_10012A3FC();
LABEL_36:
    sub_100129FBC(v26);
    *(_OWORD *)uint64_t v31 = v34;
    *(_OWORD *)(v31 + 16) = v35;
    *(void *)(v31 + 32) = v36;
    sub_1000853B0(&v38, (_OWORD *)(v2[7] + 32 * v32));
    ++v2[2];
    if (v5) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_40;
    }
    sub_10012A450();
    if (v10 == v11) {
      goto LABEL_38;
    }
    if (!*(void *)(v33 + 8 * v9))
    {
      sub_10012A0A0();
      if (v10 == v11) {
        goto LABEL_38;
      }
      sub_10012A21C();
      if (!v12)
      {
        sub_10012A0A0();
        if (v10 == v11) {
          goto LABEL_38;
        }
        sub_10012A21C();
        if (!v13)
        {
          sub_10012A0A0();
          if (v10 == v11) {
            goto LABEL_38;
          }
          sub_10012A21C();
          if (!v14)
          {
            sub_10012A450();
            if (v10 == v11)
            {
LABEL_38:
              sub_10012A294();
              sub_10012A324();
              return;
            }

            if (!*(void *)(v33 + 8 * v15)) {
              break;
            }
          }
        }
      }
    }

void sub_10012150C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_10007B1FC(&qword_10032A2B0);
    uint64_t v2 = (void *)sub_10012A0AC();
  }

  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v45 = v1 + 64;
  uint64_t v3 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  uint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v44 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v51;
  unint64_t v7 = &v53;
  sub_100085FEC();
  uint64_t v8 = 0LL;
  uint64_t v9 = (char *)&type metadata for Any + 8;
  char v10 = &type metadata for String;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        uint64_t v47 = (v5 - 1) & v5;
      }

      else
      {
        int64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_37;
        }
        if (v11 >= v44)
        {
LABEL_34:
          sub_10009BEFC(v1);
          return;
        }

        if (!*(void *)(v45 + 8 * v11))
        {
          sub_10012A388();
          if (v12 == v13) {
            goto LABEL_34;
          }
          sub_10012A37C();
          if (!v14)
          {
            sub_10012A388();
            if (v12 == v13) {
              goto LABEL_34;
            }
            sub_10012A37C();
            if (!v15)
            {
              sub_10012A388();
              if (v12 == v13) {
                goto LABEL_34;
              }
              sub_10012A37C();
              if (!v17)
              {
                int64_t v18 = v16 + 4;
                if (v18 >= v44) {
                  goto LABEL_34;
                }
                if (!*(void *)(v45 + 8 * v18))
                {
                  while (!__OFADD__(v18, 1LL))
                  {
                    sub_10012A388();
                    if (v12 == v13) {
                      goto LABEL_34;
                    }
                    sub_10012A37C();
                    int64_t v18 = v19 + 1;
                    if (v20) {
                      goto LABEL_28;
                    }
                  }

                  goto LABEL_38;
                }
              }
            }
          }
        }

void sub_10012181C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10007B1FC(&qword_10032C2A0);
    uint64_t v1 = (void *)sub_10012A0AC();
  }

  else
  {
    uint64_t v1 = _swiftEmptyDictionarySingleton;
  }

  sub_100129FFC();
  uint64_t v4 = v3 & v2;
  sub_10012A474();
  sub_100085FEC();
  swift_retain(v1);
  uint64_t v5 = 0LL;
  if (!v4) {
    goto LABEL_6;
  }
LABEL_5:
  v4 &= v4 - 1;
  while (1)
  {
    uint64_t v18 = sub_10012A43C();
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)&v41[0] = v22;
    *((void *)&v41[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    sub_10009C738();
    sub_10012A2FC( (uint64_t)&v33,  (uint64_t)v41,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for AnyHashable);
    v32[0] = v21;
    v32[1] = v20;
    sub_10012A2FC((uint64_t)v36, (uint64_t)v32, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Any + 8);
    __int128 v37 = v33;
    __int128 v38 = v34;
    uint64_t v39 = v35;
    sub_1000853B0(v36, v40);
    __int128 v33 = v37;
    __int128 v34 = v38;
    uint64_t v35 = v39;
    sub_1000853B0(v40, v41);
    sub_1000853B0(v41, &v37);
    AnyHashable._rawHashValue(seed:)(v1[5]);
    sub_10012A060();
    if (v23)
    {
      sub_10012A3E8();
      while (++v26 != v27 || (v25 & 1) == 0)
      {
        BOOL v28 = v26 == v27;
        if (v26 == v27) {
          uint64_t v26 = 0LL;
        }
        v25 |= v28;
        if (v1[v26 + 8] != -1LL)
        {
          sub_10012A3D4();
          goto LABEL_36;
        }
      }

      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }

    sub_10012A3FC();
LABEL_36:
    sub_100129FBC(v24);
    *(_OWORD *)uint64_t v29 = v33;
    *(_OWORD *)(v29 + 16) = v34;
    *(void *)(v29 + 32) = v35;
    sub_1000853B0(&v37, (_OWORD *)(v1[7] + 32 * v30));
    ++v1[2];
    if (v4) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_40;
    }
    sub_10012A450();
    if (v7 == v8) {
      goto LABEL_38;
    }
    if (!*(void *)(v31 + 8 * v6))
    {
      sub_10012A0A0();
      if (v7 == v8) {
        goto LABEL_38;
      }
      sub_10012A21C();
      if (!v9)
      {
        sub_10012A0A0();
        if (v7 == v8) {
          goto LABEL_38;
        }
        sub_10012A21C();
        if (!v10)
        {
          sub_10012A0A0();
          if (v7 == v8) {
            goto LABEL_38;
          }
          sub_10012A21C();
          if (!v11)
          {
            sub_10012A450();
            if (v7 == v8)
            {
LABEL_38:
              sub_10012A294();
              sub_10012A324();
              return;
            }

            if (!*(void *)(v31 + 8 * v12)) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_100121AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_100329B90);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_100121B18(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 4_swift_stdlib_reportUnimplementedInitializer("storekitd.Request", 17LL, "init()", 6LL, 0LL) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_100121B28(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 40LL);
  *(void *)uint64_t v3 = a2;
  *(_BYTE *)(v3 + 8) = a3;
  return swift_continuation_throwingResume();
}

uint64_t sub_100121B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_100129DD8((uint64_t)&v4, *(void *)(*(void *)(a1 + 64) + 40LL), &qword_10032AB28);
  return swift_continuation_throwingResume(a1);
}

uint64_t sub_100121B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_10007D0AC((uint64_t)v6, 1LL, 1LL, v7);
  char v8 = (void *)sub_1000AA314((uint64_t)&unk_1002EF0C0, 48LL);
  v8[2] = 0LL;
  v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)sub_1000AA314((uint64_t)&unk_1002EF0E8, 48LL);
  __int128 v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = &unk_10032C2C0;
  v9[5] = v8;
  uint64_t v10 = sub_10012938C((uint64_t)v6, (uint64_t)&unk_10032C2D0, (uint64_t)v9);
  return swift_release(v10);
}

void sub_100121C5C(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_100121AC8(v4, (uint64_t)a4);
    sub_1000221B0();
  }

  else if (a2)
  {
    sub_100121B28(v4, (uint64_t)a2, a3);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100121CB0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t sub_100121CD4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

id sub_100121D10(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  sub_10007BA44();
  uint64_t v6 = sub_100085B44(a3, a3[3]);
  uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)(v6);
  id v8 = [(id)swift_getObjCClassFromMetadata(v3) predicateWithProperty:v5 equalToValue:v7];
  swift_unknownObjectRelease(v7);

  sub_10007B1A0(a3);
  return v8;
}

void sub_100121DA0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
}

void sub_100121DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100121DE4(uint64_t a1, void (*a2)(void))
{
}

void sub_100121E00(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_100121E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10007D824(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100085298(a1, (uint64_t *)&unk_10032BAB0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  if (v15 | v13)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    void v18[2] = v13;
    v18[3] = v15;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create(v8, v16, &type metadata for ()[8], a2, a3);
}

uint64_t sub_100121F5C(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  void v2[9] = a2;
  uint64_t v3 = sub_1000E95D8();
  v2[10] = sub_10009344C(v3);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100121F94()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032A028);
  int v2 = sub_10009C250(v1);
  if (v2)
  {
    if (v2 == 1)
    {
      if (qword_100328B58 != -1) {
        swift_once(&qword_100328B58, sub_10012268C);
      }
      uint64_t v3 = qword_10033E1D0;
      v0[11] = qword_10033E1D0;
      char v4 = sub_1001220D0;
    }

    else
    {
      if (qword_100328B58 != -1) {
        swift_once(&qword_100328B58, sub_10012268C);
      }
      uint64_t v3 = qword_10033E1D0;
      v0[12] = qword_10033E1D0;
      char v4 = sub_100122144;
    }

    return sub_1000AA908((uint64_t)v4, v3, 0LL);
  }

  else
  {
    if (qword_100328B58 != -1) {
      swift_once(&qword_100328B58, sub_10012268C);
    }
    NSString v5 = (uint64_t *)(v0[9] + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_10032C064);
    v0[13] = (uint64_t)v8;
    *uint64_t v8 = v0;
    v8[1] = (uint64_t *)sub_100122190;
    return sub_1001233CC(v0[8], v7, v6);
  }

uint64_t sub_1001220D0()
{
  return sub_1000AA908(v1, v2, v3);
}

uint64_t sub_10012211C()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100122144()
{
  return sub_1000AA908(v1, v2, v3);
}

uint64_t sub_100122190()
{
  return sub_100092F20();
}

uint64_t sub_1001221C4()
{
  uint64_t v1 = sub_100086318();
  sub_1000AAF98(*(void *)(v1 - 8));
  swift_task_dealloc(*(void *)(v0 + 80));
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100122200()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032BCE0);
  *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_100129EB0(v1);
  uint64_t v2 = sub_100129EC8();
  sub_10012A36C(v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_10032C2F4);
  *(void *)(v0 + 32) = v3;
  uint64_t v4 = sub_1000AB03C(v3);
  return sub_10012A19C(v4, v5);
}

uint64_t sub_10012225C()
{
  return sub_100092F20();
}

uint64_t sub_100122298()
{
  uint64_t v2 = sub_100129EF8();
  sub_10012A410(v2);
  if (v3)
  {
    sub_100085298(v0, &qword_10032BCE0);
  }

  else
  {
    sub_100085FEC();
    sub_100085BC4(v0, type metadata accessor for StorefrontInternal);
  }

  swift_task_dealloc(*(void *)(v1 + 24));
  sub_100093280();
  uint64_t v4 = sub_1000AAFB8();
  return sub_10012A090(v4, v5, v6);
}

uint64_t sub_100122334(void *a1, void *aBlock)
{
  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  uint64_t v4 = dword_10032C344;
  a1;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100129E14;
  return sub_100122200();
}

uint64_t sub_10012239C()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032BCE0);
  *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_100129EB0(v1);
  uint64_t v2 = sub_100129EC8();
  sub_10012A36C(v2);
  char v3 = (void *)swift_task_alloc(dword_10032C2F4);
  *(void *)(v0 + 32) = v3;
  uint64_t v4 = sub_1000AB03C(v3);
  return sub_10012A19C(v4, v5);
}

uint64_t sub_1001223F8()
{
  return sub_100092F20();
}

uint64_t sub_100122434()
{
  uint64_t v2 = sub_100129EF8();
  sub_10012A410(v2);
  if (v3)
  {
    sub_100085298(v0, &qword_10032BCE0);
  }

  else
  {
    sub_100085FEC();
    sub_100085BC4(v0, type metadata accessor for StorefrontInternal);
  }

  swift_task_dealloc(*(void *)(v1 + 24));
  sub_100093280();
  uint64_t v4 = sub_1000AAFB8();
  return sub_10012A090(v4, v5, v6);
}

uint64_t sub_1001224D0(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  uint64_t v8 = _Block_copy(aBlock);
  unsigned __int8 v9 = (void *)sub_1000AA314(a5, 40LL);
  __int128 v9[2] = a3;
  v9[3] = v8;
  v9[4] = a1;
  id v10 = a3;
  uint64_t v11 = sub_10009C714();
  return sub_100121B88(v11, v12);
}

id sub_100122534(uint64_t a1)
{
  return sub_100129228(a1, type metadata accessor for objc_StoreFrontManager);
}

uint64_t sub_100122540(void *a1, void *aBlock)
{
  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  uint64_t v4 = dword_10032C2EC;
  a1;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1001225A8;
  return sub_10012239C();
}

uint64_t sub_1001225A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc(v5);

  if (a2)
  {
    sub_10009C714();
    NSString v8 = String._bridgeToObjectiveC()();
    sub_10007B980();
  }

  else
  {
    NSString v8 = 0LL;
  }

  unsigned __int8 v9 = *(const void **)(v4 + 24);
  uint64_t v10 = sub_1000AAFB8();
  v11(v10);

  _Block_release(v9);
  return sub_1000AA42C(*(uint64_t (**)(void))(v7 + 8));
}

id sub_100122660(uint64_t a1)
{
  return sub_100129294(a1, type metadata accessor for objc_StoreFrontManager);
}

uint64_t type metadata accessor for objc_StoreFrontManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd22objc_StoreFrontManager);
}

void sub_10012268C()
{
  uint64_t v0 = type metadata accessor for StorefrontManager(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  qword_10033E1D0 = sub_1001226C4();
  sub_1000221B0();
}

uint64_t sub_1001226C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Client.Server(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10007B1FC(&qword_10032BCE0);
  __chkstk_darwin(v8);
  uint64_t v61 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = sub_10007B1FC(&qword_10032C2F8);
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  int v67 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10007B1FC(&qword_10032C300);
  uint64_t v64 = *(void *)(v11 - 8);
  uint64_t v65 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v62 = v13;
  int v63 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v69 = (char *)&v58 - v14;
  uint64_t v15 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v1);
  uint64_t v18 = v1 + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront;
  uint64_t v19 = type metadata accessor for StorefrontInternal(0LL);
  sub_10007D0AC(v18, 1LL, 1LL, v19);
  sub_10007D0AC(v1 + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, 1LL, 1LL, v19);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v20 = sub_100079604(v15, (uint64_t)qword_10033E1A8);
  sub_1001296C8(v20, (uint64_t)v17, type metadata accessor for SKLogger);
  type metadata accessor for Client(0LL);
  uint64_t v21 = sub_1000DFBF4();
  char v23 = v22;
  os_log_type_t v24 = static os_log_type_t.default.getter(v21);
  uint64_t v25 = swift_bridgeObjectRetain_n(v23, 2LL);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = v24;
  if (os_log_type_enabled(v26, v24))
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = (void *)swift_slowAlloc(64LL, -1LL);
    uint64_t v60 = v4;
    uint64_t v30 = v29;
    id v72 = v29;
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v59 = v28 + 4;
    uint64_t v70 = 91LL;
    v71[0] = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v23);
    v31._uint64_t countAndFlagsBits = v21;
    v31._object = v23;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 8285LL;
    v32._object = (void *)0xE200000000000000LL;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v23);
    unint64_t v33 = v71[0];
    uint64_t v70 = sub_10007A488(v70, v71[0], (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v59);
    swift_bridgeObjectRelease_n(v23, 2LL);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v70 = sub_10007A488(0xD00000000000001ELL, 0x80000001002A4150LL, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71, v28 + 14);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s%{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    __int128 v34 = v30;
    uint64_t v4 = v60;
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_bridgeObjectRelease(v23);
  }

  else
  {

    swift_bridgeObjectRelease_n(v23, 3LL);
  }

  sub_100085BC4((uint64_t)v17, type metadata accessor for SKLogger);
  id v72 = 0LL;
  __chkstk_darwin(v35);
  *(&v58 - 2) = (uint64_t)&v72;
  uint64_t v36 = v67;
  (*(void (**)(char *, void, uint64_t))(v66 + 104))( v67,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v68);
  __int128 v37 = v69;
  uint64_t result = AsyncStream.init(_:bufferingPolicy:_:)( &type metadata for String,  v36,  sub_100129AA8,  &v58 - 4,  &type metadata for String);
  id v39 = v72;
  if (v72)
  {
    *(void *)(v1 + 112) = v72;
    uint64_t v40 = (void *)objc_opt_self(&OBJC_CLASS___Environment);
    id v41 = v39;
    id v42 = [v40 sharedInstance];
    id v43 = [v42 userDatabase];

    id v44 = [objc_allocWithZone((Class)type metadata accessor for StorefrontStore()) initWithDatabase:v43];
    type metadata accessor for StorefrontManager(0LL);
    uint64_t v45 = sub_10007B1FC(&qword_10032A028);
    sub_10007D0AC((uint64_t)v7, 1LL, 2LL, v45);
    uint64_t v46 = v61;
    sub_100122E40(v44, (uint64_t)v7, v61);
    sub_100085BC4((uint64_t)v7, type metadata accessor for Client.Server);
    uint64_t v47 = v1 + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront;
    swift_beginAccess(v1 + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, &v70, 33LL, 0LL);
    sub_100129860(v46, v47);
    swift_endAccess(&v70);
    sub_10007D0AC((uint64_t)v7, 2LL, 2LL, v45);
    sub_100122E40(v44, (uint64_t)v7, v46);
    sub_100085BC4((uint64_t)v7, type metadata accessor for Client.Server);
    uint64_t v48 = v1 + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront;
    swift_beginAccess(v1 + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, &v70, 33LL, 0LL);
    sub_100129860(v46, v48);
    swift_endAccess(&v70);
    uint64_t v49 = type metadata accessor for TaskPriority(0LL);
    sub_10007D0AC((uint64_t)v4, 1LL, 1LL, v49);
    uint64_t v51 = v63;
    uint64_t v50 = v64;
    uint64_t v52 = v65;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v63, v37, v65);
    uint64_t v53 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v54 = (v53 + 40) & ~v53;
    uint64_t v55 = (char *)swift_allocObject(&unk_1002EF138, v54 + v62, v53 | 7);
    *((void *)v55 + 2) = 0LL;
    *((void *)v55 + 3) = 0LL;
    *((void *)v55 + 4) = v1;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v55[v54], v51, v52);
    swift_retain(v1);
    sub_1000F9480((uint64_t)v4, (uint64_t)&unk_10032C310, (uint64_t)v55);
    uint64_t v57 = v56;

    swift_release(v57);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v52);

    return v1;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100122DA4(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C270);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  id v8 = objc_allocWithZone((Class)type metadata accessor for BagNotificationListener(0LL));
  id v9 = sub_1001276AC((uint64_t)v6);
  uint64_t v10 = *a2;
  *a2 = v9;
}

uint64_t sub_100122E40@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Client.Server(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10007B1FC(&qword_10032BCE0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for StorefrontInternal(0LL);
  sub_10007D0AC((uint64_t)v12, 1LL, 1LL, v13);
  sub_1001296C8(a2, (uint64_t)v9, type metadata accessor for Client.Server);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  unint64_t v16 = (v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1002EF160, v16 + 8, v14 | 7);
  sub_1001297DC((uint64_t)v9, v17 + v15, type metadata accessor for Client.Server);
  *(void *)(v17 + vsub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v12;
  uint64_t v18 = swift_allocObject(&unk_1002EF188, 32LL, 7LL);
  *(void *)(v18 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_100129C54;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = sub_1000CEF04;
  uint64_t v23 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100121E00;
  aBlock[3] = &unk_1002EF1A0;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v23;
  swift_retain(v18);
  swift_release(v20);
  [a1 readUsingSession:v19];
  _Block_release(v19);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v18, "", 89LL, 89LL, 20LL, 1LL);
  uint64_t result = swift_release(v18);
  if ((a1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_100129DD8((uint64_t)v12, a3, &qword_10032BCE0);
    return swift_release(v17);
  }

  return result;
}

uint64_t sub_100123050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = sub_10007B1FC(&qword_10032C318);
  v5[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)swift_task_alloc(dword_10032C06C);
  v5[11] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_1001230C8;
  return sub_100124C10();
}

uint64_t sub_1001230C8()
{
  return sub_100092F20();
}

uint64_t sub_1001230FC()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032C300);
  AsyncStream.makeAsyncIterator()(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 96) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100123180;
  sub_100093420();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t sub_100123180()
{
  return sub_100092F20();
}

uint64_t sub_1001231B4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 104) = v1;
  if (v1)
  {
    if (qword_100328B08 != -1) {
      swift_once(&qword_100328B08, sub_1000DFB64);
    }
    *(void *)(v0 + 32) = v2;
    *(void *)(v0 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v1;
    uint64_t v3 = (void *)swift_task_alloc(async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1]);
    *(void *)(v0 + 112) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001232B4;
    return TaskLocal.withValue<A>(_:operation:isolation:file:line:)( v3,  v0 + 32,  &unk_10032C328,  *(void *)(v0 + 48),  0LL,  0LL,  0xD000000000000021LL,  0x80000001002A4170LL);
  }

  else
  {
    sub_1000AAF98(*(void *)(v0 + 72));
    sub_1000939C0();
    return sub_1000AA42C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1001232B4()
{
  return sub_100092F20();
}

uint64_t sub_1001232EC()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100123180;
  sub_100093420();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t sub_10012334C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032C06C);
  *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100123394;
  return sub_100124C10();
}

uint64_t sub_100123394()
{
  return sub_10008751C(v0[1]);
}

uint64_t sub_1001233CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[75] = a3;
  v3[74] = a2;
  v3[73] = a1;
  uint64_t v4 = sub_100086224();
  v3[76] = v4;
  v3[77] = sub_10009344C(v4);
  uint64_t v5 = sub_10007B1FC(&qword_10032AD70);
  v3[78] = sub_10009344C(v5);
  uint64_t v6 = type metadata accessor for Locale.Components(0LL);
  v3[79] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[80] = v7;
  v3[81] = sub_10009BFD0(v7);
  v3[82] = sub_100093010();
  uint64_t v8 = sub_10012A3CC();
  v3[83] = sub_10009344C(v8);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100123454()
{
  uint64_t v1 = sub_10009C714();
  id v3 = sub_10012EDC0(v1, v2);
  v0[84] = v3;
  if (qword_100328CE0 != -1) {
    id v3 = (id)swift_once(&qword_100328CE0, sub_10012C798);
  }
  id v4 = sub_1000936AC((uint64_t)v3, "stringForKey:");
  v0[85] = v4;
  v0[15] = v0 + 62;
  v0[10] = v0;
  v0[11] = sub_10012355C;
  v0[48] = swift_continuation_init(v0 + 10, 1LL);
  v0[44] = _NSConcreteStackBlock;
  v0[45] = 0x40000000LL;
  v0[46] = sub_100121C5C;
  v0[47] = &unk_1002EF028;
  sub_10009C2F4(v4, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_10012355C()
{
  *(void *)(v0 + 688) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10012359C()
{
  uint64_t v1 = *(void **)(v0 + 680);
  *(void *)(v0 + 696) = *(void *)(v0 + 496);

  if (qword_100328CD8 != -1) {
    swift_once(&qword_100328CD8, sub_10012C720);
  }
  *(void *)(v0 + 704) = [*(id *)(v0 + 672) stringForKey:qword_10033E360];
  *(void *)(v0 + 248) = v0 + 544;
  *(void *)(v0 + 208) = v0;
  *(void *)(v0 + 2sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_10012367C;
  uint64_t v2 = sub_100129F10();
  *(void *)(v0 + 424) = v2;
  *(void *)(v0 + 392) = _NSConcreteStackBlock;
  *(void *)(v0 + 400) = 0x40000000LL;
  *(void *)(v0 + 408) = sub_100121C5C;
  *(void *)(v0 + 4sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = &unk_1002EF040;
  sub_1000AAE8C(v2, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_10012367C()
{
  *(void *)(v0 + 712) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1001236BC()
{
  uint64_t v1 = *(void **)(v0 + 704);
  *(void *)(v0 + 720) = *(void *)(v0 + 544);

  if (qword_100328C50 != -1) {
    swift_once(&qword_100328C50, sub_10012BF10);
  }
  *(void *)(v0 + 728) = [*(id *)(v0 + 672) stringForKey:qword_10033E2D8];
  *(void *)(v0 + 184) = v0 + 528;
  *(void *)(v0 + 144) = v0;
  *(void *)(v0 + 152) = sub_10012379C;
  uint64_t v2 = sub_100129F10();
  *(void *)(v0 + 344) = v2;
  *(void *)(v0 + 312) = _NSConcreteStackBlock;
  *(void *)(v0 + 320) = 0x40000000LL;
  *(void *)(v0 + 328) = sub_100121C5C;
  *(void *)(v0 + 336) = &unk_1002EF058;
  sub_1000AAE8C(v2, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_10012379C()
{
  *(void *)(v0 + 736) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1001237DC()
{
  uint64_t v1 = *(void **)(v0 + 728);
  *(void *)(v0 + 744) = *(void *)(v0 + 528);

  if (qword_100328BB0 != -1) {
    swift_once(&qword_100328BB0, sub_10012B5A4);
  }
  id v2 = [*(id *)(v0 + 672) stringForKey:qword_10033E238];
  *(void *)(v0 + 752) = v2;
  *(void *)(v0 + 56) = v0 + 512;
  *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1001238C8;
  *(void *)(v0 + 304) = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 272) = _NSConcreteStackBlock;
  *(void *)(v0 + 280) = 0x40000000LL;
  *(void *)(v0 + 288) = sub_100121C5C;
  *(void *)(v0 + 296) = &unk_1002EF070;
  sub_10009C2F4(v2, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_1001238C8()
{
  *(void *)(v0 + 760) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100123908()
{
  Swift::String v32 = *(void **)(v0 + 720);
  uint64_t v30 = *(void **)(v0 + 744);
  Swift::String v31 = *(void **)(v0 + 696);
  unint64_t v33 = *(void **)(v0 + 672);
  uint64_t v1 = *(void *)(v0 + 656);
  uint64_t v25 = *(void *)(v0 + 640);
  uint64_t v26 = *(void *)(v0 + 648);
  uint64_t v27 = *(void *)(v0 + 632);
  uint64_t v28 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 624);
  id v3 = *(void **)(v0 + 512);
  uint64_t v29 = v3;

  uint64_t v4 = sub_10012A49C();
  uint64_t v6 = v5;
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v9 = v8;
  *(void *)(v0 + 464) = v4;
  *(void *)(v0 + 472) = v6;
  unint64_t v10 = sub_10012A184();
  sub_100129F94(v10, v11, v12, v13, v14, v15, (uint64_t)&type metadata for String);
  sub_10009C494();
  sub_10012A488();
  Locale.Currency.init(_:)(v7, v9);
  uint64_t v16 = type metadata accessor for Locale.Currency(0LL);
  sub_10007D0AC(v2, 0LL, 1LL, v16);
  Locale.Components.currency.setter(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v1, v27);
  Locale.init(components:)(v26);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v1, v27);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v19 = v18;

  uint64_t v20 = sub_1000AAFB8();
  StorefrontInternal.init(id:countryCode:locale:)(v20, v21, v17, v19, v28, v22);
  uint64_t v23 = sub_100129E90();
  sub_10012A1F4(v23);
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

#error "100123B54: call analysis failed (funcsize=148)"
#error "100123DD0: call analysis failed (funcsize=136)"
#error "10012401C: call analysis failed (funcsize=138)"
#error "100124270: call analysis failed (funcsize=145)"
uint64_t sub_100124454(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  void *ObjCClassFromMetadata;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t result;
  void aBlock[3];
  void *v24;
  void (*v25)();
  uint64_t v26;
  uint64_t v6 = type metadata accessor for Client.Server(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  sub_10007CB7C(0LL, &qword_10032A7B8, off_1002E5C70);
  sub_1000DFDAC();
  os_log_type_t v24 = &type metadata for Int8;
  LOBYTE(aBlock[0]) = v9;
  unint64_t v10 = sub_100121D10(0x745F746E65696C63LL, 0xEB00000000657079LL, aBlock);
  uint64_t v11 = type metadata accessor for StorefrontEntity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v11);
  uint64_t v13 = [a1 connection];
  uint64_t v14 = [ObjCClassFromMetadata queryOnConnection:v13 predicate:v10];

  sub_1001296C8(a2, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for Client.Server);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_1002EF1D8, v16 + v8, v15 | 7);
  *(void *)(v17 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = a1;
  *(void *)(v17 + 24) = a3;
  sub_1001297DC( (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v17 + v16,  type metadata accessor for Client.Server);
  uint64_t v18 = swift_allocObject(&unk_1002EF200, 32LL, 7LL);
  *(void *)(v18 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_100129D0C;
  *(void *)(v18 + 24) = v17;
  uint64_t v25 = sub_1000CEF04;
  uint64_t v26 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100121DBC;
  os_log_type_t v24 = &unk_1002EF218;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v26;
  uint64_t v21 = a1;
  swift_retain(v18);
  swift_release(v20);
  [v14 enumeratePersistentIDsUsingBlock:v19];

  _Block_release(v19);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v18, "", 89LL, 93LL, 42LL, 1LL);
  swift_release(v17);
  uint64_t result = swift_release(v18);
  return result;
}

void sub_1001246B8(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v9);
  uint64_t v10 = sub_10007B1FC(&qword_10032BCE0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v13 = [a4 connection];
  id v14 = [objc_allocWithZone((Class)type metadata accessor for StorefrontEntity()) initWithPersistentID:a1 onConnection:v13];

  id v15 = v14;
  sub_100124AC0(v15, v12);
  uint64_t v16 = type metadata accessor for StorefrontInternal(0LL);
  sub_10007D0AC((uint64_t)v12, 0LL, 1LL, v16);
  sub_100129860((uint64_t)v12, a5);
  *a3 = 1;
}

void sub_100124AC0(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Locale(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = sub_100129078();
  if (v2)
  {
  }

  else
  {
    Locale.init(identifier:)(v12);
    uint64_t v13 = sub_10012904C();
    uint64_t v15 = v14;
    uint64_t v18 = sub_10012901C();
    uint64_t v19 = v16;

    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    StorefrontInternal.init(id:countryCode:locale:)(v13, v15, v18, v19, (uint64_t)v9, a2);
  }

uint64_t sub_100124C10()
{
  v1[14] = v0;
  uint64_t v2 = sub_1000E95D8();
  v1[15] = sub_10009344C(v2);
  uint64_t v3 = sub_10007B1FC(&qword_10032BCE0);
  v1[16] = sub_100129EB0(v3);
  v1[17] = sub_100129EC8();
  v1[18] = sub_100129EC8();
  return sub_1000AA908((uint64_t)sub_100124C70, v0, 0LL);
}

uint64_t sub_100124C70()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v4 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v5 = OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront;
  v0[19] = OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront;
  uint64_t v6 = v4 + v5;
  sub_10012A084(v4 + v5, (uint64_t)(v0 + 2));
  sub_100129680(v6, v1);
  uint64_t v7 = OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront;
  v0[20] = OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront;
  uint64_t v8 = v4 + v7;
  uint64_t v9 = sub_10009C714();
  sub_10012A084(v9, v10);
  sub_100129680(v8, v2);
  uint64_t v11 = sub_10007B1FC(&qword_10032A028);
  v0[21] = v11;
  sub_10012A3C0(v3, v12, v13, v11);
  uint64_t v14 = (void *)swift_task_alloc(dword_10032C074);
  v0[22] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100124D48;
  return sub_100124F24(v0[16], v0[18], v0[15]);
}

uint64_t sub_100124D48()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = sub_10008750C(*(void *)(v0 + 176));
  sub_10011B354(v2, type metadata accessor for Client.Server);
  return sub_1000AA908((uint64_t)sub_100124D90, v1, 0LL);
}

uint64_t sub_100124D90()
{
  uint64_t v1 = v0[21];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14] + v0[19];
  sub_10012A34C(v4);
  sub_100129860(v2, v4);
  swift_endAccess(v0 + 8);
  sub_10007D0AC(v3, 2LL, 2LL, v1);
  uint64_t v5 = (void *)swift_task_alloc(dword_10032C074);
  v0[23] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100124E38;
  return sub_100124F24(v0[16], v0[17], v0[15]);
}

uint64_t sub_100124E38()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = sub_10008750C(*(void *)(v0 + 184));
  sub_10011B354(v2, type metadata accessor for Client.Server);
  return sub_1000AA908((uint64_t)sub_100124E80, v1, 0LL);
}

uint64_t sub_100124E80()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112) + *(void *)(v0 + 160);
  sub_100085298(*(void *)(v0 + 136), &qword_10032BCE0);
  sub_100085298(v1, &qword_10032BCE0);
  sub_10012A34C(v3);
  sub_100129860(v2, v3);
  swift_endAccess(v0 + 88);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100124F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  uint64_t v5 = sub_100086224();
  v4[20] = v5;
  v4[21] = sub_100129EB0(v5);
  v4[22] = sub_100129EC8();
  v4[23] = sub_100129EC8();
  _BYTE v4[24] = sub_100129EC8();
  uint64_t v6 = sub_10007B1FC(&qword_10032C298);
  v4[25] = v6;
  v4[26] = sub_10009344C(v6);
  uint64_t v7 = sub_10007B1FC(&qword_10032BCE0);
  v4[27] = sub_100129EB0(v7);
  v4[28] = sub_100129EC8();
  v4[29] = sub_100129EC8();
  v4[30] = sub_100129EC8();
  uint64_t v8 = sub_100129EF8();
  v4[31] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[32] = v9;
  v4[33] = *(void *)(v9 + 64);
  v4[34] = sub_100129EC8();
  v4[35] = sub_100129EC8();
  v4[36] = sub_100129EC8();
  uint64_t v10 = *(void *)(sub_1000E95D8() - 8);
  v4[37] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v4[38] = v11;
  v4[39] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return sub_1000AA908((uint64_t)sub_100125020, v3, 0LL);
}

uint64_t sub_100125020()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = sub_10007B1FC(&qword_10032A028);
  sub_10012A3C0(v1, v3, v4, v2);
  uint64_t v5 = sub_10009C714();
  uint64_t v7 = sub_1000DF738(v5, v6);
  char v8 = v7;
  sub_10011B354(v7, type metadata accessor for Client.Server);
  if ((v8 & 1) != 0)
  {
    if (qword_100328D48 != -1) {
      swift_once(&qword_100328D48, sub_10012D118);
    }
    uint64_t v9 = (void **)&AMSAccountMediaTypeProduction;
    uint64_t v10 = &qword_10033E3D0;
  }

  else
  {
    if (qword_100328D50 != -1) {
      swift_once(&qword_100328D50, sub_10012D1C0);
    }
    uint64_t v9 = (void **)&AMSAccountMediaTypeAppStoreSandbox;
    uint64_t v10 = &qword_10033E3D8;
  }

  uint64_t v11 = *v10;
  uint64_t v12 = *v9;
  v0[40] = *v10;
  v0[41] = (uint64_t)v12;
  sub_10012A494();
  id v13 = v12;
  uint64_t v14 = (void *)sub_100129EC8();
  v0[42] = (uint64_t)v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100125144;
  return sub_1001261BC(v0[30], v11, (uint64_t)v13);
}

uint64_t sub_100125144()
{
  return sub_100092F20();
}

uint64_t sub_100125180()
{
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 248);
  sub_10012A1C0();
  if (v3)
  {
    sub_100085298(v2, &qword_10032BCE0);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 288);
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v7 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 136);
    sub_1001297DC(v2, v4, type metadata accessor for StorefrontInternal);
    sub_1001296C8(v4, v5, type metadata accessor for StorefrontInternal);
    sub_10007D0AC(v5, 0LL, 1LL, v1);
    uint64_t v9 = v6 + *(int *)(v7 + 48);
    sub_100129680(v8, v6);
    sub_100129680(v5, v9);
    int v10 = sub_10007D824(v6, 1LL, v1);
    if (v10 == 1)
    {
      sub_100085298(*(void *)(v0 + 232), &qword_10032BCE0);
      sub_10012A1C0();
      if (!v3) {
        goto LABEL_11;
      }
      sub_100085298(*(void *)(v0 + 208), &qword_10032BCE0);
    }

    else
    {
      sub_100129680(*(void *)(v0 + 208), *(void *)(v0 + 224));
      sub_10012A1C0();
      if (v3)
      {
        sub_100085298(*(void *)(v0 + 232), &qword_10032BCE0);
        sub_10011B354(v11, type metadata accessor for StorefrontInternal);
LABEL_11:
        sub_100085298(*(void *)(v0 + 208), &qword_10032C298);
        goto LABEL_20;
      }

      uint64_t v12 = *(void *)(v0 + 280);
      uint64_t v14 = *(void *)(v0 + 224);
      uint64_t v13 = *(void *)(v0 + 232);
      uint64_t v15 = *(void *)(v0 + 208);
      uint64_t v16 = sub_1000AAFB8();
      sub_1001297DC(v16, v17, type metadata accessor for StorefrontInternal);
      char v18 = static StorefrontInternal.__derived_struct_equals(_:_:)(v14, v12);
      sub_100085BC4(v12, type metadata accessor for StorefrontInternal);
      sub_10012A304(v13);
      sub_100085BC4(v14, type metadata accessor for StorefrontInternal);
      sub_10012A304(v15);
      if ((v18 & 1) == 0)
      {
LABEL_20:
        aBlockb = (void *)(v0 + 16);
        uint64_t v263 = v0 + 96;
        uint64_t v55 = *(void *)(v0 + 248);
        uint64_t v56 = *(void *)(v0 + 216);
        sub_100129680(*(void *)(v0 + 136), v56);
        uint64_t v244 = v0 + 80;
        if (sub_10007D824(v56, 1LL, v55) == 1)
        {
          sub_100085298(*(void *)(v0 + 216), &qword_10032BCE0);
          if (qword_100328B40 != -1) {
            swift_once(&qword_100328B40, sub_1000F4208);
          }
          uint64_t v57 = *(void *)(v0 + 184);
          uint64_t v58 = sub_100079604(*(void *)(v0 + 160), (uint64_t)qword_10033E1A8);
          sub_1001296C8(v58, v57, type metadata accessor for SKLogger);
          sub_10012A208();
          sub_10012A2A4( v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v233,  v244,  v253,  v263,  v272,  v283,  (uint64_t)aBlockb,  v307,  v317,  *(uint64_t *)v318,  v319);
          v321._uint64_t countAndFlagsBits = sub_10012A3A0();
          sub_10012A2AC(v321);
          swift_bridgeObjectRelease();
          v67._uint64_t countAndFlagsBits = sub_10012A2C4();
          v67._object = (void *)0xEC000000206F7420LL;
          String.append(_:)(v67);
          int v68 = sub_10007BA3C();
          sub_100129F00( v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  v235,  v245,  v254,  v264,  v273,  v284,  (uint64_t)aBlocke,  v308,  v317,  v318[0]);
          sub_10007BA44();
          sub_10012A050();
          int v76 = sub_10007BA3C();
          sub_100129F00( v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v236,  v246,  v255,  v265,  v274,  v285,  (uint64_t)aBlockf,  v309,  v317,  v318[0]);
          sub_10007BA44();
          sub_10012A2B4();
          uint64_t v84 = v319;
          sub_1000E66E0();
          sub_100129F38();
          os_log_type_t v85 = sub_10012A45C();
          sub_100085EE8((uint64_t)type metadata accessor for StorefrontInternal);
          uint64_t v86 = sub_100085EE8(v319);
          uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
          if (os_log_type_enabled(v87, v85))
          {
            uint64_t v275 = *(void *)v318;
            uint64_t v88 = sub_10007B9FC(22LL);
            uint64_t v89 = sub_10007B9FC(64LL);
            *(_DWORD *)uint64_t v88 = 136446466;
            int v90 = sub_10012A0F0();
            sub_10012A2DC( v90,  v91,  v92,  v93,  v94,  v95,  v96,  v97,  v237,  v247,  v88 + 4,  (uint64_t)v266,  v275,  v0 + 112,  (uint64_t)aBlockc,  v310,  v317,  v318[0]);
            sub_100085F14();
            sub_10009C494();
            *uint64_t v266 = sub_10008620C(*(uint64_t *)v318, v98, &v317);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v266, v0 + 104, v256);
            sub_10007B980();
            sub_10007D974((uint64_t)type metadata accessor for StorefrontInternal);
            *(_WORD *)(v88 + 12) = 2082;
            uint64_t v99 = sub_100093528();
            *(void *)(v0 + 104) = sub_10012A284(v99, v100, v101, v102, v103, v104, v105, v106);
            sub_100086194(v0 + 104, v286);
            sub_100085E64(v84);
            sub_100086038((void *)&_mh_execute_header, v87, v85, "%{public}s%{public}s", (uint8_t *)v88);
            sub_100086030(v89, v107, (uint64_t)&type metadata for Any + 8);
            sub_10007B974(v89);
            sub_10007B974(v88);

            sub_10009C494();
            swift_bridgeObjectRelease();
          }

          else
          {
            sub_100085E64((uint64_t)type metadata accessor for StorefrontInternal);
            sub_100085E64(v319);
          }

          uint64_t v177 = *(void *)(v0 + 184);
          uint64_t v178 = type metadata accessor for SKLogger;
        }

        else
        {
          sub_1001297DC(*(void *)(v0 + 216), *(void *)(v0 + 272), type metadata accessor for StorefrontInternal);
          if (qword_100328B40 != -1) {
            swift_once(&qword_100328B40, sub_1000F4208);
          }
          uint64_t v108 = *(void *)(v0 + 192);
          uint64_t v109 = sub_100079604(*(void *)(v0 + 160), (uint64_t)qword_10033E1A8);
          sub_1001296C8(v109, v108, type metadata accessor for SKLogger);
          _StringGuts.grow(_:)(47LL);
          sub_10012A2A4( v110,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v233,  v244,  v253,  v263,  v272,  v0 + 112,  (uint64_t)aBlockb,  v307,  v317,  0LL,  0xE000000000000000LL);
          v322._uint64_t countAndFlagsBits = sub_10012A3A0();
          sub_10012A2AC(v322);
          swift_bridgeObjectRelease();
          v118._uint64_t countAndFlagsBits = sub_10012A2C4();
          v118._object = (void *)0xEE00206D6F726620LL;
          String.append(_:)(v118);
          int v119 = sub_10007BA3C();
          sub_100129F00( v119,  v120,  v121,  v122,  v123,  v124,  v125,  v126,  v238,  v248,  v257,  v267,  v276,  v287,  (uint64_t)aBlockg,  v311,  v317,  v318[0]);
          sub_10007BA44();
          sub_10012A050();
          int v127 = sub_10007BA3C();
          sub_100129F00( v127,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v239,  v249,  v258,  v268,  v277,  v288,  (uint64_t)aBlockh,  v312,  v317,  v318[0]);
          sub_10007BA44();
          v135._uint64_t countAndFlagsBits = 0x206F742029LL;
          v135._object = (void *)0xE500000000000000LL;
          String.append(_:)(v135);
          int v136 = sub_10007BA3C();
          sub_100129F00( v136,  v137,  v138,  v139,  v140,  v141,  v142,  v143,  v240,  v250,  v259,  v269,  v278,  v289,  (uint64_t)aBlocki,  v313,  v317,  v318[0]);
          sub_10007BA44();
          sub_10012A050();
          int v144 = sub_10007BA3C();
          sub_100129F00( v144,  v145,  v146,  v147,  v148,  v149,  v150,  v151,  v241,  v251,  v260,  v270,  v279,  v290,  (uint64_t)aBlockj,  v314,  v317,  v318[0]);
          sub_10007BA44();
          sub_10012A2B4();
          uint64_t v152 = v319;
          sub_1000E66E0();
          sub_100129F38();
          os_log_type_t v153 = sub_10012A45C();
          sub_100085EE8((uint64_t)type metadata accessor for StorefrontInternal);
          uint64_t v154 = sub_100085EE8(v319);
          uint64_t v155 = (os_log_s *)Logger.logObject.getter(v154);
          os_log_type_t v156 = v153;
          if (os_log_type_enabled(v155, v153))
          {
            uint64_t v280 = *(void *)v318;
            uint64_t v157 = (uint8_t *)sub_10007B9FC(22LL);
            uint64_t v158 = sub_10007B9FC(64LL);
            *(_DWORD *)uint64_t v157 = 136446466;
            int v159 = sub_10012A0F0();
            sub_10012A2DC( v159,  v160,  v161,  v162,  v163,  v164,  v165,  v166,  v237,  v247,  v0 + 120,  (uint64_t)v266,  v280,  v291,  (uint64_t)aBlockc,  v315,  v317,  v318[0]);
            sub_100085F14();
            sub_10009C494();
            *(void *)(v0 + 112) = sub_10008620C(*(uint64_t *)v318, v167, &v317);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v292, v256, v157 + 4);
            sub_10007B980();
            sub_10007D974((uint64_t)type metadata accessor for StorefrontInternal);
            sub_1000C5FF4();
            uint64_t v168 = sub_100093528();
            *(void *)(v0 + 120) = sub_10012A284(v168, v169, v170, v171, v172, v173, v174, v175);
            sub_100086194(v256, v0 + 128);
            sub_100085E64(v152);
            sub_100086038((void *)&_mh_execute_header, v155, v156, "%{public}s%{public}s", v157);
            sub_100086030(v158, v176, (uint64_t)&type metadata for Any + 8);
            sub_10007B974(v158);
            sub_10007B974((uint64_t)v157);

            sub_10009C494();
            swift_bridgeObjectRelease();
          }

          else
          {
            sub_100085E64((uint64_t)type metadata accessor for StorefrontInternal);
            sub_100085E64(v319);
          }

          uint64_t v179 = *(void *)(v0 + 272);
          sub_100085BC4(*(void *)(v0 + 192), type metadata accessor for SKLogger);
          uint64_t v178 = type metadata accessor for StorefrontInternal;
          uint64_t v177 = v179;
        }

        sub_100085BC4(v177, v178);
        uint64_t v180 = *(void *)(v0 + 312);
        uint64_t v181 = *(void *)(v0 + 288);
        uint64_t v182 = *(void *)(v0 + 296);
        uint64_t v183 = *(void *)(v0 + 280);
        uint64_t v281 = *(void *)(v0 + 264);
        uint64_t v293 = *(void *)(v0 + 304);
        uint64_t v184 = *(void *)(v0 + 256);
        uint64_t v185 = *(void *)(v0 + 144);
        id v186 = [(id)objc_opt_self(Environment) sharedInstance];
        id v187 = [v186 userDatabase];

        id v188 = [objc_allocWithZone((Class)type metadata accessor for StorefrontStore()) initWithDatabase:v187];
        sub_1001296C8(v185, v180, type metadata accessor for Client.Server);
        sub_1001296C8(v181, v183, type metadata accessor for StorefrontInternal);
        uint64_t v189 = *(unsigned __int8 *)(v182 + 80);
        uint64_t v190 = (v189 + 16) & ~v189;
        uint64_t v191 = *(unsigned __int8 *)(v184 + 80);
        uint64_t v192 = (v293 + v191 + v190) & ~v191;
        uint64_t v193 = swift_allocObject(&unk_1002EEFC0, v192 + v281, v189 | v191 | 7);
        sub_1001297DC(v180, v193 + v190, type metadata accessor for Client.Server);
        sub_1001297DC(v183, v193 + v192, type metadata accessor for StorefrontInternal);
        uint64_t v194 = sub_1000AA314((uint64_t)&unk_1002EEFE8, 32LL);
        *(void *)(v194 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_1001297FC;
        *(void *)(v194 + 24) = v193;
        *(void *)(v0 + 48) = sub_10011D8C4;
        *(void *)(v0 + 56) = v194;
        *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = _NSConcreteStackBlock;
        *(void *)(v0 + 24) = 1107296256LL;
        *(void *)(v0 + 32) = sub_100121CD4;
        *(void *)(v0 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = &unk_1002EF000;
        uint64_t v195 = _Block_copy(aBlockc);
        uint64_t v196 = *(void *)(v0 + 56);
        swift_retain(v194);
        swift_release(v196);
        sub_10009C2F4(v188, "modifyUsingTransaction:");
        _Block_release(v195);
        LOBYTE(v195) = swift_isEscapingClosureAtFileLocation(v194, "", 89LL, 151LL, 22LL, 1LL);
        swift_release(v194);
        if ((v195 & 1) != 0)
        {
          __break(1u);
        }

        else if (qword_100328B40 == -1)
        {
LABEL_35:
          uint64_t v197 = sub_100079604(*(void *)(v0 + 160), (uint64_t)qword_10033E1A8);
          sub_10012A30C(v197, v198, type metadata accessor for SKLogger);
          *(void *)uint64_t v318 = 0LL;
          uint64_t v319 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(46LL);
          sub_10012A2A4( v199,  v200,  v201,  v202,  v203,  v204,  v205,  v206,  v237,  v247,  v256,  (uint64_t)v266,  v281,  v293,  (uint64_t)v188,  v0,  v317,  *(uint64_t *)v318,  v319);
          v323._uint64_t countAndFlagsBits = sub_10012A1E0();
          sub_10012A2AC(v323);
          sub_10007BA44();
          uint64_t v208 = *(void *)v318;
          uint64_t v207 = v319;
          sub_1000E66E0();
          uint64_t v209 = sub_100129F38();
          uint64_t v211 = v210;
          os_log_type_t v212 = static os_log_type_t.default.getter(v209);
          sub_100085EE8((uint64_t)v211);
          sub_100085EE8(v207);
          uint64_t v213 = (os_log_s *)sub_1000935A4();
          os_log_type_t v214 = v212;
          if (os_log_type_enabled(v213, v212))
          {
            uint64_t v215 = sub_10007B9FC(22LL);
            uint64_t v216 = v208;
            uint64_t v217 = sub_10007B9FC(64LL);
            *(_DWORD *)uint64_t v215 = 136446466;
            sub_10011BA74();
            swift_bridgeObjectRetain(v211);
            v218._uint64_t countAndFlagsBits = v209;
            v218._object = v211;
            String.append(_:)(v218);
            sub_100085F14();
            sub_10009C494();
            *uint64_t v252 = sub_10008620C(*(uint64_t *)v318, v219, &v317);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v252, v316 + 88, v215 + 4);
            sub_10007B980();
            sub_10007D974((uint64_t)v211);
            *(_WORD *)(v215 + 12) = 2082;
            sub_10008618C();
            *(void *)(v316 + 88) = sub_10007A488(v216, v207, &v317);
            uint64_t v0 = v316;
            sub_100086194(v316 + 88, v271);
            sub_100085E64(v207);
            sub_100086038((void *)&_mh_execute_header, v213, v214, "%{public}s%{public}s", (uint8_t *)v215);
            sub_100086030(v217, v220, (uint64_t)&type metadata for Any + 8);
            sub_10007B974(v217);
            sub_10007B974(v215);

            sub_10009C494();
            sub_100085FB4();
          }

          else
          {
            sub_100085E64((uint64_t)v211);
            sub_100085E64(v207);
          }

          uint64_t v221 = *(void *)(v0 + 320);
          uint64_t v222 = *(void **)(v0 + 328);
          uint64_t v223 = *(void *)(v0 + 288);
          uint64_t v224 = *(void *)(v0 + 248);
          uint64_t v225 = *(void *)(v0 + 128);
          sub_100085BC4(*(void *)(v0 + 176), type metadata accessor for SKLogger);
          uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_1003281C0[0]);
          uint64_t v228 = String.utf8CString.getter(v226, v227);
          sub_1000930DC();
          notify_post((const char *)(v228 + 32));

          swift_unknownObjectRelease(v221);
          swift_release(v228);
          sub_1001297DC(v223, v225, type metadata accessor for StorefrontInternal);
          sub_10007D0AC(v225, 0LL, 1LL, v224);
          swift_release(v193);
          goto LABEL_39;
        }

        swift_once(&qword_100328B40, sub_1000F4208);
        goto LABEL_35;
      }
    }

    sub_100085BC4(*(void *)(v0 + 288), type metadata accessor for StorefrontInternal);
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v19 = sub_100079604(*(void *)(v0 + 160), (uint64_t)qword_10033E1A8);
  sub_10012A30C(v19, v20, type metadata accessor for SKLogger);
  sub_10012A208();
  sub_10012A2A4( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v233,  v242,  v253,  v261,  v272,  v283,  (uint64_t)aBlock,  v307,  v317,  *(uint64_t *)v318,  v319);
  v320._uint64_t countAndFlagsBits = sub_10012A1E0();
  sub_10012A2AC(v320);
  sub_10007BA44();
  uint64_t v29 = v319;
  aBlocka = *(void **)v318;
  sub_1000E66E0();
  uint64_t v30 = sub_100129F38();
  Swift::String v32 = v31;
  static os_log_type_t.default.getter(v30);
  sub_100085EE8((uint64_t)v32);
  sub_100085EE8(v319);
  unint64_t v33 = (os_log_s *)sub_1000935A4();
  BOOL v34 = sub_100093764(v33);
  uint64_t v35 = *(void *)(v0 + 320);
  uint64_t v36 = *(void **)(v0 + 328);
  if (v34)
  {
    __int128 v37 = (_DWORD *)sub_10007B9FC(22LL);
    uint64_t v262 = sub_10007B9FC(64LL);
    *__int128 v37 = 136446466;
    sub_10011BA74();
    sub_10008618C();
    v38._uint64_t countAndFlagsBits = v30;
    v38._object = v32;
    String.append(_:)(v38);
    sub_100085F14();
    sub_100085FB4();
    *(void *)(v0 + 72) = sub_10008620C(*(uint64_t *)v318, v39, &v317);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v37 + 1);
    sub_10007B980();
    sub_10007D974((uint64_t)v32);
    sub_100129ED0();
    uint64_t v41 = sub_100086308((uint64_t)aBlocka, v40, &v317);
    uint64_t v49 = sub_10012A3AC(v41, v42, v43, v44, v45, v46, v47, v48, v234, v243, (void *)(v0 + 64));
    sub_100086194((uint64_t)v49, v0 + 72);
    sub_100085E64(v29);
    sub_100129EE4((void *)&_mh_execute_header, v50, v51, "%{public}s%{public}s");
    sub_100086030(v262, v52, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v262);
    sub_10007B974((uint64_t)v37);

    sub_100085FB4();
    sub_10007BA44();
    swift_unknownObjectRelease(v35);
  }

  else
  {
    sub_100085E64((uint64_t)v32);
    sub_100085E64(v319);

    swift_unknownObjectRelease(v35);
  }

  sub_100085BC4(*(void *)(v0 + 168), type metadata accessor for SKLogger);
  uint64_t v53 = sub_1000AAFB8();
  sub_100129680(v53, v54);
LABEL_39:
  uint64_t v229 = *(void *)(v0 + 216);
  uint64_t v230 = *(void *)(v0 + 208);
  uint64_t v231 = *(void *)(v0 + 192);
  uint64_t v282 = *(void *)(v0 + 184);
  uint64_t v294 = *(void *)(v0 + 176);
  aBlockk = *(void **)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 312));
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  swift_task_dealloc(v229);
  swift_task_dealloc(v230);
  swift_task_dealloc(v231);
  swift_task_dealloc(v282);
  swift_task_dealloc(v294);
  swift_task_dealloc(aBlockk);
  return sub_100092F68(*(uint64_t (**)(void))(v0 + 8));
}

BOOL sub_100125F64(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032C440);
  uint64_t inited = swift_initStackObject(v5, &v19);
  *(_OWORD *)(inited + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027CCA0;
  *(void *)(inited + 32) = 0x745F746E65696C63LL;
  *(void *)(inited + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0xEB00000000657079LL;
  sub_1000DFDAC();
  *(_BYTE *)(inited + 48) = v7;
  *(void *)(inited + 72) = &type metadata for Int8;
  *(void *)(inited + 80) = 0x696669746E656469LL;
  *(void *)(inited + 88) = 0xEA00000000007265LL;
  uint64_t v8 = a3[1];
  *(void *)(inited + 96) = *a3;
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 120) = &type metadata for String;
  strcpy((char *)(inited + 128), "country_code");
  *(_BYTE *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  uint64_t v9 = a3[3];
  *(void *)(inited + 144) = a3[2];
  *(void *)(inited + 152) = v9;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 0xD000000000000011LL;
  *(void *)(inited + 184) = 0x80000001002A3E20LL;
  type metadata accessor for StorefrontInternal(0LL);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = Locale.identifier.getter(v10);
  *(void *)(inited + 2sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = &type metadata for String;
  *(void *)(inited + 192) = v11;
  *(void *)(inited + 200) = v12;
  uint64_t v13 = (void *)Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  type metadata accessor for StorefrontEntity();
  sub_100121248(v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  id v16 = sub_100126130(v15, [a1 connection]);
  id v17 = [v16 persistentID];

  return v17 != 0LL;
}

id sub_100126130(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v7 = [v5 initWithPropertyValues:isa onConnection:a2];

  return v7;
}

uint64_t sub_1001261BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[76] = a3;
  v3[75] = a2;
  v3[74] = a1;
  uint64_t v4 = sub_100086224();
  v3[77] = v4;
  v3[78] = sub_10009BFD0(*(void *)(v4 - 8));
  v3[79] = sub_100093010();
  uint64_t v5 = sub_10007B1FC(&qword_10032AD70);
  v3[80] = sub_10009344C(v5);
  uint64_t v6 = type metadata accessor for Locale.Components(0LL);
  v3[81] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[82] = v7;
  v3[83] = sub_10009BFD0(v7);
  v3[84] = sub_100093010();
  uint64_t v8 = sub_10012A3CC();
  v3[85] = sub_10009344C(v8);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100126250()
{
  id v2 =  objc_msgSend( (id)objc_opt_self(ACAccountStore),  "ams_sharedAccountStoreForMediaType:",  *(void *)(v0 + 608));
  *(void *)(v0 + 688) = v2;
  id v3 = objc_msgSend(v2, "ams_activeiTunesAccount");
  id v4 = v3;
  if (!v3)
  {
    id v5 = objc_msgSend(v2, "ams_localiTunesAccount");
    if (!v5)
    {
      id v4 = 0LL;
      goto LABEL_7;
    }

    id v4 = v5;
  }

  *(void *)(v0 + 696) = v4;
  id v6 = v3;
  *(void *)(v0 + 704) = sub_100129614(v4);
  *(void *)(v0 + 712) = v7;
  if (v7)
  {
    *(void *)(v0 + 248) = v0 + 552;
    *(void *)(v0 + 208) = v0;
    *(void *)(v0 + 2sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_1001265A4;
    uint64_t v8 = sub_100129F10();
    *(void *)(v0 + 304) = v8;
    *(void *)(v0 + 272) = _NSConcreteStackBlock;
    *(void *)(v0 + 280) = 0x40000000LL;
    *(void *)(v0 + 288) = sub_100127500;
    *(void *)(v0 + 296) = &unk_1002EEF50;
    sub_1000AAE8C(v8, "createSnapshotWithCompletion:");
    return swift_continuation_await(v0 + 208);
  }

uint64_t sub_1001265A4()
{
  *(void *)(v0 + 720) = v1;
  if (v1) {
    sub_10012A27C(v0);
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1001265E8(uint64_t a1)
{
  v1[91] = v1[69];
  if (qword_100328CD8 != -1) {
    a1 = swift_once(&qword_100328CD8, sub_10012C720);
  }
  id v2 = sub_1000936AC(a1, "stringForKey:");
  v1[92] = v2;
  v1[7] = v1 + 64;
  v1[2] = v1;
  v1[3] = sub_1001266C4;
  v1[53] = sub_100129F10();
  v1[49] = _NSConcreteStackBlock;
  v1[50] = 0x40000000LL;
  v1[51] = sub_100121C5C;
  v1[52] = &unk_1002EEF68;
  [v2 valueWithCompletion:v1 + 49];
  return sub_1000AA79C();
}

uint64_t sub_1001266C4()
{
  *(void *)(v0 + 744) = v1;
  if (v1) {
    sub_10012A27C(v0);
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100126708()
{
  uint64_t v1 = *(void **)(v0 + 736);
  *(void *)(v0 + 752) = *(void *)(v0 + 512);

  if (qword_100328C50 != -1) {
    swift_once(&qword_100328C50, sub_10012BF10);
  }
  *(void *)(v0 + 760) = [*(id *)(v0 + 728) stringForKey:qword_10033E2D8];
  *(void *)(v0 + 120) = v0 + 496;
  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 88) = sub_1001267E8;
  uint64_t v2 = sub_100129F10();
  *(void *)(v0 + 344) = v2;
  *(void *)(v0 + 312) = _NSConcreteStackBlock;
  *(void *)(v0 + 320) = 0x40000000LL;
  *(void *)(v0 + 328) = sub_100121C5C;
  *(void *)(v0 + 336) = &unk_1002EEF80;
  sub_1000AAE8C(v2, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_1001267E8()
{
  *(void *)(v0 + 768) = v1;
  if (v1) {
    sub_10012A27C(v0);
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10012682C()
{
  uint64_t v1 = *(void **)(v0 + 760);
  *(void *)(v0 + 776) = *(void *)(v0 + 496);

  if (qword_100328BB0 != -1) {
    swift_once(&qword_100328BB0, sub_10012B5A4);
  }
  *(void *)(v0 + 784) = [*(id *)(v0 + 728) stringForKey:qword_10033E238];
  *(void *)(v0 + 184) = v0 + 528;
  *(void *)(v0 + 144) = v0;
  *(void *)(v0 + 152) = sub_10012690C;
  uint64_t v2 = sub_100129F10();
  *(void *)(v0 + 384) = v2;
  *(void *)(v0 + 352) = _NSConcreteStackBlock;
  *(void *)(v0 + 360) = 0x40000000LL;
  *(void *)(v0 + 368) = sub_100121C5C;
  *(void *)(v0 + 376) = &unk_1002EEF98;
  sub_1000AAE8C(v2, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_10012690C()
{
  *(void *)(v0 + 792) = v1;
  if (v1) {
    sub_10012A27C(v0);
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100126950()
{
  uint64_t v1 = *(void **)(v0 + 776);
  uint64_t v27 = v1;
  uint64_t v28 = *(void **)(v0 + 752);
  uint64_t v34 = *(void *)(v0 + 712);
  Swift::String v32 = *(void **)(v0 + 728);
  uint64_t v33 = *(void *)(v0 + 704);
  uint64_t v29 = *(void **)(v0 + 688);
  uint64_t v30 = *(void **)(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v22 = *(void *)(v0 + 656);
  uint64_t v23 = *(void *)(v0 + 664);
  uint64_t v24 = *(void *)(v0 + 648);
  uint64_t v25 = *(void *)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 640);
  Swift::String v31 = *(void **)(v0 + 592);
  uint64_t v26 = *(void **)(v0 + 528);

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v6 = v5;
  uint64_t v7 = sub_10012A49C();
  uint64_t v9 = v8;
  *(void *)(v0 + 464) = v4;
  *(void *)(v0 + 472) = v6;
  unint64_t v10 = sub_10012A184();
  sub_100129F94(v10, v11, v12, v13, v14, v15, (uint64_t)&type metadata for String);
  sub_100086144();
  sub_10012A488();
  Locale.Currency.init(_:)(v7, v9);
  uint64_t v16 = type metadata accessor for Locale.Currency(0LL);
  sub_10012A1F4(v16);
  Locale.Components.currency.setter(v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v2, v24);
  Locale.init(components:)(v23);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v2, v24);
  uint64_t v17 = sub_10012A49C();
  uint64_t v19 = v18;

  StorefrontInternal.init(id:countryCode:locale:)(v33, v34, v17, v19, v25, v31);
  uint64_t v20 = sub_100129E38();
  sub_10007D0AC(v4, 0LL, 1LL, v20);
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100126B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 696);
  uint64_t v9 = *(void **)(v7 + 688);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  uint64_t v10 = *(void *)(v7 + 720);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v11 = sub_100079604(*(void *)(v7 + 616), (uint64_t)qword_10033E1A8);
  sub_10012A30C(v11, v12, type metadata accessor for SKLogger);
  uint64_t v42 = 0LL;
  unint64_t v43 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  *(void *)(v7 + 480) = 0LL;
  *(void *)(v7 + 488) = 0xE000000000000000LL;
  sub_10012A120((uint64_t)"Error fetching bag storefront ");
  *(void *)(v7 + 576) = v10;
  sub_10007B1FC(&qword_100329B90);
  sub_10012A434(v7 + 576);
  uint64_t v13 = *(void *)(v7 + 488);
  uint64_t v40 = *(void *)(v7 + 480);
  sub_1000E66E0();
  uint64_t v14 = sub_100129F38();
  uint64_t v15 = sub_10012A048();
  sub_100085EE8(v7 + 480);
  sub_100085EE8(v13);
  uint64_t v16 = (void *)sub_1000935A4();
  if (sub_100093764((os_log_s *)v16))
  {
    uint64_t v39 = v10;
    uint64_t v17 = (_DWORD *)sub_10007B9FC(22LL);
    uint64_t v38 = sub_10007B9FC(64LL);
    *uint64_t v17 = 136446466;
    uint64_t v15 = (uint64_t)(v17 + 1);
    uint64_t v41 = v38;
    uint64_t v42 = 91LL;
    unint64_t v43 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v7 + 480);
    sub_10009C350(v14);
    sub_100085F14();
    sub_1000930DC();
    *(void *)(v7 + 544) = sub_10008620C(v42, v18, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 + 544, v7 + 552, v17 + 1);
    sub_10007B980();
    sub_10007D974(v7 + 480);
    sub_100129ED0();
    uint64_t v20 = sub_100086308(v40, v19, &v41);
    uint64_t v28 = sub_10012A3AC(v20, v21, v22, v23, v24, v25, v26, v27, v37, v7 + 552, (void *)(v7 + 568));
    sub_100086194((uint64_t)v28, v7 + 576);
    sub_100085E64(v13);
    sub_100129EE4((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s");
    sub_100086030(v38, v31, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v38);
    sub_10007B974((uint64_t)v17);

    sub_1000930DC();
    sub_10007BA44();
    uint64_t v32 = v39;
  }

  else
  {
    sub_100085E64(v7 + 480);
    sub_100085E64(v13);

    uint64_t v32 = v10;
  }

  swift_errorRelease(v32);
  sub_100085BC4(*(void *)(v7 + 624), type metadata accessor for SKLogger);
  uint64_t v33 = sub_100129E38();
  sub_100129E74(v15, v34, v35, v33);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  return sub_100092F68(*(uint64_t (**)(void))(v7 + 8));
}

#error "100126E48: call analysis failed (funcsize=136)"
#error "100127090: call analysis failed (funcsize=150)"
#error "10012731C: call analysis failed (funcsize=149)"
uint64_t sub_100127500(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_100121AC8(v3, (uint64_t)a3);
  }
  if (a2) {
    return sub_100121B18(v3, (uint64_t)a2);
  }
  __break(1u);
  return result;
}

void sub_100127550()
{
  sub_10012A304(v0 + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront);
  sub_10012A304(v0 + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront);
  swift_defaultActor_destroy(v0);
  sub_1000221B0();
}

uint64_t sub_1001275A0()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001275B8()
{
  return type metadata accessor for StorefrontManager(0LL);
}

uint64_t type metadata accessor for StorefrontManager(uint64_t a1)
{
  return sub_1000D0BD8(a1, (uint64_t *)&unk_10032C050, (uint64_t)&nominal type descriptor for StorefrontManager);
}

void sub_1001275D4(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100127658(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

void sub_100127658(uint64_t a1)
{
  if (!qword_10032C080)
  {
    uint64_t v2 = type metadata accessor for StorefrontInternal(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10032C080);
    }
  }

id sub_1001276AC(uint64_t a1)
{
  unint64_t v3 = &v1[OBJC_IVAR____TtC9storekitdP33_AF6EE5E6A32790C1A1159F4A44E8152D23BagNotificationListener_continuation];
  uint64_t v4 = sub_10007B1FC(&qword_10032C270);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for BagNotificationListener(0LL);
  id v6 = objc_msgSendSuper2(&v11, "init");
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v8 = v6;
  id v9 = [v7 defaultCenter];
  [v9 addObserver:v8 selector:"bagChanged:" name:AMSBagInvalidatedNotification object:0];
  [v9 addObserver:v8 selector:"bagChanged:" name:@"AccountStorePrimaryAccountDidChange" object:0];
  [v9 addObserver:v8 selector:"bagChanged:" name:@"AccountStoreSandboxAccountDidChange" object:0];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v8;
}

id sub_100127800()
{
  uint64_t v1 = v0;
  sub_10007B1FC(&qword_10032C270);
  AsyncStream.Continuation.finish()();
  id v2 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v2 removeObserver:v1 name:AMSBagInvalidatedNotification object:0];
  [v2 removeObserver:v1 name:@"AccountStorePrimaryAccountDidChange" object:0];
  [v2 removeObserver:v1 name:@"AccountStoreSandboxAccountDidChange" object:0];

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for BagNotificationListener(0LL);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_100127950()
{
  return type metadata accessor for BagNotificationListener(0LL);
}

uint64_t type metadata accessor for BagNotificationListener(uint64_t a1)
{
  return sub_1000D0BD8(a1, (uint64_t *)&unk_10032C198, (uint64_t)&nominal type descriptor for BagNotificationListener);
}

uint64_t sub_10012796C(uint64_t a1)
{
  uint64_t v75 = sub_10007B1FC(&qword_10032C268);
  uint64_t v76 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  unint64_t v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v4);
  uint64_t v78 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SKLogger(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v77 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v71 - v9;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v11 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
  unint64_t v12 = sub_1000F4060();
  uint64_t v14 = v13;
  uint64_t v74 = v11;
  sub_1001296C8(v11, (uint64_t)v10, type metadata accessor for SKLogger);
  uint64_t v82 = 0LL;
  unint64_t v83 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(51LL);
  v15._uint64_t countAndFlagsBits = 0xD000000000000030LL;
  v15._object = (void *)0x80000001002A3F60LL;
  String.append(_:)(v15);
  uint64_t v79 = a1;
  uint64_t v16 = (void *)((uint64_t (*)(void))Notification.name.getter)();
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 34LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  uint64_t v23 = v82;
  unint64_t v22 = v83;
  swift_bridgeObjectRetain(v14);
  LOBYTE(v19) = static os_log_type_t.default.getter(v24);
  swift_bridgeObjectRetain_n(v14, 2LL);
  uint64_t v25 = swift_bridgeObjectRetain_n(v22, 2LL);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = v19;
  BOOL v28 = os_log_type_enabled(v26, (os_log_type_t)v19);
  unint64_t v80 = v12;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    uint64_t v72 = v23;
    uint64_t v30 = v29;
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    int v73 = v3;
    uint64_t v32 = v31;
    *(_DWORD *)uint64_t v30 = 136446466;
    uint64_t v81 = v31;
    uint64_t v82 = 91LL;
    unint64_t v83 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v14);
    v33._uint64_t countAndFlagsBits = v12;
    v33._object = v14;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = 8285LL;
    v34._object = (void *)0xE200000000000000LL;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    uint64_t v82 = sub_10007A488(v82, v83, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 4);
    swift_bridgeObjectRelease_n(v14, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2082;
    swift_bridgeObjectRetain(v22);
    uint64_t v82 = sub_10007A488(v72, v22, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 14);
    swift_bridgeObjectRelease_n(v22, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s%{public}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v35 = v32;
    unint64_t v3 = v73;
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {

    swift_bridgeObjectRelease_n(v22, 3LL);
    swift_bridgeObjectRelease_n(v14, 3LL);
  }

  sub_100085BC4((uint64_t)v10, type metadata accessor for SKLogger);
  uint64_t v36 = (void *)((uint64_t (*)(void))Notification.name.getter)();
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v39 = v38;
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"AccountStorePrimaryAccountDidChange");
  if (v37 == v40 && v39 == v41)
  {

    swift_bridgeObjectRelease_n(v39, 2LL);
    uint64_t v45 = v80;
    goto LABEL_19;
  }

  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v40, v41, 0LL);

  swift_bridgeObjectRelease();
  uint64_t v44 = swift_bridgeObjectRelease();
  uint64_t v45 = v80;
  if ((v43 & 1) != 0)
  {
LABEL_19:
    uint64_t v63 = type metadata accessor for TaskPriority(0LL);
    uint64_t v64 = v78;
    sub_10007D0AC(v78, 1LL, 1LL, v63);
    uint64_t v65 = (void *)swift_allocObject(&unk_1002EEF08, 48LL, 7LL);
    v65[2] = 0LL;
    v65[3] = 0LL;
    v65[4] = v45;
    v65[5] = v14;
    uint64_t v66 = &unk_10032C290;
LABEL_20:
    uint64_t v67 = sub_100121E34(v64, (uint64_t)v66, (uint64_t)v65);
    return swift_release(v67);
  }

  uint64_t v46 = (void *)Notification.name.getter(v44);
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  uint64_t v49 = v48;
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"AccountStoreSandboxAccountDidChange");
  if (v47 == v50 && v49 == v51)
  {

    swift_bridgeObjectRelease_n(v49, 2LL);
    goto LABEL_22;
  }

  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v50, v51, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v53 & 1) != 0)
  {
LABEL_22:
    uint64_t v69 = type metadata accessor for TaskPriority(0LL);
    uint64_t v64 = v78;
    sub_10007D0AC(v78, 1LL, 1LL, v69);
    uint64_t v65 = (void *)swift_allocObject(&unk_1002EEEE0, 48LL, 7LL);
    v65[2] = 0LL;
    v65[3] = 0LL;
    v65[4] = v45;
    v65[5] = v14;
    uint64_t v66 = &unk_10032C280;
    goto LABEL_20;
  }

  sub_1001296C8(v74, v77, type metadata accessor for SKLogger);
  swift_bridgeObjectRetain(v14);
  os_log_type_t v55 = static os_log_type_t.default.getter(v54);
  uint64_t v56 = swift_bridgeObjectRetain_n(v14, 2LL);
  uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
  os_log_type_t v58 = v55;
  if (os_log_type_enabled(v57, v55))
  {
    uint64_t v59 = swift_slowAlloc(22LL, -1LL);
    uint64_t v60 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v59 = 136446466;
    uint64_t v79 = v59 + 4;
    uint64_t v81 = v60;
    uint64_t v82 = 91LL;
    unint64_t v83 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v14);
    v61._uint64_t countAndFlagsBits = v45;
    v61._object = v14;
    String.append(_:)(v61);
    v62._uint64_t countAndFlagsBits = 8285LL;
    v62._object = (void *)0xE200000000000000LL;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    uint64_t v82 = sub_10007A488(v82, v83, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v79);
    swift_bridgeObjectRelease_n(v14, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 12) = 2082;
    uint64_t v82 = sub_10007A488(0xD00000000000002DLL, 0x80000001002A3FA0LL, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v59 + 14);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "%{public}s%{public}s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy(v60, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_bridgeObjectRelease();
  }

  else
  {

    swift_bridgeObjectRelease_n(v14, 3LL);
  }

  sub_100085BC4(v77, type metadata accessor for SKLogger);
  uint64_t v82 = v45;
  unint64_t v83 = (unint64_t)v14;
  uint64_t v70 = sub_10007B1FC(&qword_10032C270);
  AsyncStream.Continuation.yield(_:)(&v82, v70);
  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v3, v75);
}

uint64_t sub_100128120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  uint64_t v6 = type metadata accessor for SKLogger(0LL);
  v5[21] = v6;
  v5[22] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10012817C, 0LL, 0LL);
}

uint64_t sub_10012817C()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = v0[22];
  uint64_t v2 = (os_log_s *)v0[20];
  uint64_t v3 = sub_100079604(v0[21], (uint64_t)qword_10033E1A8);
  sub_1001296C8(v3, v1, type metadata accessor for SKLogger);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  uint64_t v6 = sub_100085EE8((uint64_t)v2);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  BOOL v8 = sub_1000C5F64(v7);
  uint64_t v9 = v0[20];
  if (v8)
  {
    uint64_t v10 = v0[19];
    uint64_t v11 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v12 = sub_10007B9FC(64LL);
    int v13 = sub_10012A028(4.8752e-34);
    sub_10012A2EC(v13, v14, v15, v16, v17, v18, v19, v20, (uint64_t)(v0 + 18), (uint64_t)(v0 + 17), v39, v40);
    sub_100085F14();
    sub_100086144();
    uint64_t v22 = sub_10008620C(v40, v21, &v39);
    sub_10012A1A8(v22, v23, v24, v25, v26, v27, v28, v29, v37, v38);
    sub_10007B980();
    sub_10007D974(v9);
    sub_1000C5FF4();
    v0[18] = sub_1000AB050(21LL, 0x80000001002A3FD0LL, &v39);
    sub_100086194(v10, (uint64_t)(v0 + 19));
    sub_100086038((void *)&_mh_execute_header, v2, v5, "%{public}s%{public}s", v11);
    sub_100086030(v12, v30, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v12);
    sub_10007B974((uint64_t)v11);
  }

  else
  {
    sub_10007D974(v0[20]);
  }

  sub_100085BC4(v0[22], type metadata accessor for SKLogger);
  if (qword_100328D48 != -1) {
    swift_once(&qword_100328D48, sub_10012D118);
  }
  uint64_t v31 = qword_100328CD8;
  uint64_t v32 = sub_10012A494();
  if (v31 != -1) {
    uint64_t v32 = swift_once(&qword_100328CD8, sub_10012C720);
  }
  id v33 = sub_1000936AC(v32, "stringForKey:");
  sub_10012A35C((uint64_t)v33);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1001283E8;
  uint64_t v34 = sub_100129F10();
  v0[10] = _NSConcreteStackBlock;
  uint64_t v35 = v0 + 10;
  v35[1] = 0x40000000LL;
  v35[2] = sub_100121C5C;
  v35[3] = &unk_1002EEF20;
  uint64_t v35[4] = v34;
  sub_1000C66D4(v34, "valueWithCompletion:");
  return sub_100129F78();
}

uint64_t sub_1001283E8()
{
  return sub_100092F20();
}

uint64_t sub_100128424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[19] = a4;
  v5[20] = a5;
  uint64_t v6 = type metadata accessor for SKLogger(0LL);
  v5[21] = v6;
  v5[22] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100128480, 0LL, 0LL);
}

uint64_t sub_100128480()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = v0[22];
  uint64_t v2 = (os_log_s *)v0[20];
  uint64_t v3 = sub_100079604(v0[21], (uint64_t)qword_10033E1A8);
  sub_1001296C8(v3, v1, type metadata accessor for SKLogger);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  uint64_t v6 = sub_100085EE8((uint64_t)v2);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  BOOL v8 = sub_1000C5F64(v7);
  uint64_t v9 = v0[20];
  if (v8)
  {
    uint64_t v10 = v0[19];
    uint64_t v11 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v12 = sub_10007B9FC(64LL);
    int v13 = sub_10012A028(4.8752e-34);
    sub_10012A2EC(v13, v14, v15, v16, v17, v18, v19, v20, (uint64_t)(v0 + 18), (uint64_t)(v0 + 17), v39, v40);
    sub_100085F14();
    sub_100086144();
    uint64_t v22 = sub_10008620C(v40, v21, &v39);
    sub_10012A1A8(v22, v23, v24, v25, v26, v27, v28, v29, v37, v38);
    sub_10007B980();
    sub_10007D974(v9);
    sub_1000C5FF4();
    v0[18] = sub_1000AB050(24LL, 0x80000001002A3FF0LL, &v39);
    sub_100086194(v10, (uint64_t)(v0 + 19));
    sub_100086038((void *)&_mh_execute_header, v2, v5, "%{public}s%{public}s", v11);
    sub_100086030(v12, v30, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v12);
    sub_10007B974((uint64_t)v11);
  }

  else
  {
    sub_10007D974(v0[20]);
  }

  sub_100085BC4(v0[22], type metadata accessor for SKLogger);
  if (qword_100328D50 != -1) {
    swift_once(&qword_100328D50, sub_10012D1C0);
  }
  uint64_t v31 = qword_100328CD8;
  uint64_t v32 = sub_10012A494();
  if (v31 != -1) {
    uint64_t v32 = swift_once(&qword_100328CD8, sub_10012C720);
  }
  id v33 = sub_1000936AC(v32, "stringForKey:");
  sub_10012A35C((uint64_t)v33);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1001286EC;
  uint64_t v34 = sub_100129F10();
  v0[10] = _NSConcreteStackBlock;
  uint64_t v35 = v0 + 10;
  v35[1] = 0x40000000LL;
  v35[2] = sub_100121C5C;
  v35[3] = &unk_1002EEF38;
  uint64_t v35[4] = v34;
  sub_1000C66D4(v34, "valueWithCompletion:");
  return sub_100129F78();
}

uint64_t sub_1001286EC()
{
  return sub_100092F20();
}

uint64_t sub_100128728()
{
  uint64_t v1 = *(void **)(v0 + 184);

  sub_1000939C0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100128768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v8 = *(void **)(v7 + 184);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  sub_1000939C0();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

void sub_10012884C()
{
}

void sub_100128898(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
  }

void sub_100128904()
{
  if (!qword_10032C1A8)
  {
    unint64_t v0 = type metadata accessor for AsyncStream.Continuation(0LL, &type metadata for String);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10032C1A8);
    }
  }

void sub_10012894C(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v2];

  id v3 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v3];
}

id sub_100128A0C()
{
  id v0 = [objc_allocWithZone((Class)SQLiteDatabaseStoreDescriptor) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setSchemaName:v1];

  uint64_t v2 = sub_10007CB7C(0LL, &qword_10032A7A0, off_1002E5C80);
  [v0 setSessionClass:swift_getObjCClassFromMetadata(v2)];
  uint64_t v3 = sub_10007CB7C(0LL, &qword_10032A7A8, off_1002E5C88);
  [v0 setTransactionClass:swift_getObjCClassFromMetadata(v3)];
  return v0;
}

uint64_t sub_100128ADC(void *a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = v2;
  uint64_t v26 = v4;
  while (1)
  {
    id v5 = [a1 currentSchemaVersion];
    if (v5 && v5 != (id)16000) {
      break;
    }
    uint64_t v31 = sub_10012894C;
    uint64_t v32 = 0LL;
    aBlock = _NSConcreteStackBlock;
    unint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_1000DC508;
    uint64_t v30 = &unk_1002EEEA8;
    uint64_t v7 = _Block_copy(&aBlock);
    swift_release(v32);
    unsigned __int8 v8 = [a1 migrateToVersion:17000 usingBlock:v7];
    _Block_release(v7);
    if ((v8 & 1) == 0) {
      return 0LL;
    }
LABEL_11:
  }

  if (v5 == (id)17000) {
    goto LABEL_11;
  }
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v10 = sub_100079604(v25, (uint64_t)qword_10033E1A8);
  uint64_t v11 = (uint64_t)v26;
  sub_1001296C8(v10, (uint64_t)v26, type metadata accessor for SKLogger);
  aBlock = 0LL;
  unint64_t v28 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD00000000000001CLL;
  unint64_t v28 = 0x80000001002A3E40LL;
  uint64_t v33 = (uint64_t)[a1 currentSchemaVersion];
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 540949792LL;
  v13._object = (void *)0xE400000000000000LL;
  String.append(_:)(v13);
  uint64_t v33 = 17000LL;
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  String.append(_:)(v14);
  uint64_t v15 = swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t)aBlock;
  unint64_t v16 = v28;
  os_log_type_t v18 = static os_log_type_t.error.getter(v15);
  uint64_t v19 = swift_bridgeObjectRetain_n(v16, 2LL);
  int v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = v18;
  if (os_log_type_enabled(v20, v18))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = (void **)swift_slowAlloc(64LL, -1LL);
    aBlock = v23;
    *(_DWORD *)uint64_t v22 = 136446466;
    uint64_t v33 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v22 + 4);
    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain(v16);
    uint64_t v33 = sub_10007A488(v17, v16, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v22 + 14);
    swift_bridgeObjectRelease_n(v16, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s%{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_bridgeObjectRelease();
  }

  else
  {

    swift_bridgeObjectRelease_n(v16, 3LL);
  }

  sub_100085BC4(v11, type metadata accessor for SKLogger);
  return 0LL;
}

id sub_100128EF0(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for StorefrontStore();
  id v3 = objc_msgSendSuper2(&v5, "initWithDatabase:", a1);

  return v3;
}

id sub_100128F90()
{
  return sub_100129294(0LL, type metadata accessor for StorefrontStore);
}

uint64_t type metadata accessor for StorefrontStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitdP33_AF6EE5E6A32790C1A1159F4A44E8152D15StorefrontStore);
}

uint64_t sub_100128FC4()
{
  return 0x6F726665726F7473LL;
}

uint64_t sub_10012901C()
{
  return sub_1000B1658(0x5F7972746E756F63LL, 0xEC00000065646F63LL);
}

uint64_t sub_10012904C()
{
  return sub_1000B1658(0x696669746E656469LL, 0xEA00000000007265LL);
}

uint64_t sub_100129078()
{
  return sub_1000B1658(0xD000000000000011LL, 0x80000001002A3E20LL);
}

id sub_1001290A4(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StorefrontEntity();
  id v5 = objc_msgSendSuper2(&v7, "initWithPropertyValues:onConnection:", isa, a2);

  return v5;
}

id sub_100129198(uint64_t a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for StorefrontEntity();
  id v5 = objc_msgSendSuper2(&v7, "initWithPersistentID:onConnection:", a1, a2);

  return v5;
}

id sub_100129228(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_100129284()
{
  return sub_100129294(0LL, type metadata accessor for StorefrontEntity);
}

id sub_100129294(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for StorefrontEntity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitdP33_AF6EE5E6A32790C1A1159F4A44E8152D16StorefrontEntity);
}

uint64_t sub_1001292E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  objc_super v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v4;
  *objc_super v4 = v3;
  v4[1] = sub_1000AA214;
  return v6();
}

uint64_t sub_100129338(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  objc_super v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  id v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v5;
  *id v5 = v4;
  v5[1] = sub_1000AA214;
  return v7();
}

uint64_t sub_10012938C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_10007D824(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100085298(a1, (uint64_t *)&unk_10032BAB0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = swift_allocObject(&unk_1002EF110, 32LL, 7LL);
  *(void *)(v16 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v13;
    v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, &type metadata for ()[8], &unk_10032C2E0, v16);
}

uint64_t sub_1001294D0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100129E10;
  return v6(a1);
}

uint64_t sub_100129534(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100129544(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10012954C()
{
  return sub_100129980((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100129558()
{
  uint64_t v1 = swift_task_alloc(dword_10032C27C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  uint64_t v3 = sub_100129F1C();
  return sub_100128424(v3, v4, v5, v6, v7);
}

uint64_t sub_1001295B0()
{
  return sub_100129980((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001295BC()
{
  uint64_t v1 = swift_task_alloc(dword_10032C28C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  uint64_t v3 = sub_100129F1C();
  return sub_100128120(v3, v4, v5, v6, v7);
}

uint64_t sub_100129614(void *a1)
{
  id v2 = objc_msgSend(a1, "ams_storefront");

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100129680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032BCE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1001296C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_1000861D4(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  sub_1000221B0();
}

uint64_t sub_1001296FC()
{
  uint64_t v1 = *(void *)(sub_1000E95D8() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(sub_100129EF8() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = sub_10007B1FC(&qword_10032A028);
  if (!sub_10007D824(v0 + v3, 2LL, v8))
  {
    uint64_t v9 = sub_100086318();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v0 + v3, v9);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10012A3CC();
  sub_10008614C(v10);
  return swift_deallocObject(v0, ((v3 + v4 + v6) & ~v6) + v7, v2 | v6 | 7);
}

void sub_1001297DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1000861D4(a1, a2, a3);
  sub_10012A144(v3);
  sub_1000221B0();
}

BOOL sub_1001297FC(void *a1)
{
  uint64_t v3 = *(void *)(sub_1000E95D8() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(sub_100129EF8() - 8) + 80LL);
  return sub_100125F64(a1, v1 + v4, (void *)(v1 + ((v4 + v5 + v6) & ~v6)));
}

uint64_t sub_100129860(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032BCE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001298AC()
{
  uint64_t v1 = (void *)sub_10011BF60();
  *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v1;
  uint64_t v2 = sub_1000DE4E4(v1, (uint64_t)sub_1000AA214);
  return sub_100086014(v2, v3, v4, v5);
}

uint64_t sub_1001298F0()
{
  return sub_100129980((void (*)(void))&_swift_release);
}

uint64_t sub_1001298FC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10032C2BC);
  *(void *)(v1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000AA214;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10032C2B8 + dword_10032C2B8))(v2, v3, v4);
}

uint64_t sub_100129974()
{
  return sub_100129980((void (*)(void))&_swift_release);
}

uint64_t sub_100129980(void (*a1)(void))
{
  return swift_deallocObject(v1, 48LL, 7LL);
}

uint64_t sub_1001299B8()
{
  uint64_t v1 = swift_task_alloc(dword_10032C2CC);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000AA214;
  uint64_t v3 = sub_100129F1C();
  return v4(v3);
}

uint64_t sub_100129A1C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100129A40(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = sub_10011BF60();
  uint64_t v6 = (void *)sub_1000AA6CC(v5);
  *uint64_t v6 = v2;
  v6[1] = sub_1000AA214;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10032C2D8 + dword_10032C2D8))(a1, v4);
}

void sub_100129AA8(uint64_t a1)
{
}

uint64_t sub_100129AB0()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032C300);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return sub_1000B2150(v0, v5, v6);
}

uint64_t sub_100129B24()
{
  uint64_t v1 = swift_task_alloc(dword_10032C30C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000A9C68;
  uint64_t v3 = sub_100129F1C();
  return sub_100123050(v3, v4, v5, v6, v7);
}

uint64_t sub_100129BA4()
{
  uint64_t v0 = swift_task_alloc(dword_10032C324);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  sub_1000AB03C(v1);
  return sub_10012334C();
}

uint64_t sub_100129BE8()
{
  uint64_t v1 = *(void *)(sub_1000E95D8() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = sub_10007B1FC(&qword_10032A028);
  if (!sub_10009C250(v4))
  {
    uint64_t v5 = sub_100086318();
    sub_10008614C(v5);
  }

  return sub_1000B2150(v0, ((v3 + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v2 | 7);
}

uint64_t sub_100129C54(void *a1)
{
  uint64_t v3 = *(void *)(sub_1000E95D8() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100124454(a1, v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100129CA4()
{
  uint64_t v1 = *(void *)(sub_1000E95D8() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);

  uint64_t v4 = sub_10007B1FC(&qword_10032A028);
  if (!sub_10009C250(v4))
  {
    uint64_t v5 = sub_100086318();
    sub_10008614C(v5);
  }

  return sub_1000B2150(v0, ((v2 + 32) & ~v2) + v3, v2 | 7);
}

void sub_100129D0C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
}

uint64_t sub_100129D68()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100129D94()
{
  uint64_t v1 = (void *)sub_10011BF60();
  *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v1;
  uint64_t v2 = sub_1000DE4E4(v1, (uint64_t)sub_1000AA214);
  return sub_100086014(v2, v3, v4, v5);
}

void sub_100129DD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10007B1FC(a3);
  sub_10012A144(v3);
  sub_1000221B0();
}

uint64_t sub_100129E38()
{
  return type metadata accessor for StorefrontInternal(0LL);
}

uint64_t sub_100129E5C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100129E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_task_dealloc(v4);
}

uint64_t sub_100129E90()
{
  return type metadata accessor for StorefrontInternal(0LL);
}

uint64_t sub_100129EB0(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100129EC8()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100129ED0()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

void sub_100129EE4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100129EF8()
{
  return type metadata accessor for StorefrontInternal(0LL);
}

void sub_100129F00( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  v20._uint64_t countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
}

uint64_t sub_100129F10()
{
  return swift_continuation_init(v0, 1LL);
}

uint64_t sub_100129F1C()
{
  return v0;
}

uint64_t sub_100129F38()
{
  return sub_1000DFBF4();
}

uint64_t sub_100129F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10007A488(a5, v5, (uint64_t *)va);
}

uint64_t sub_100129F50()
{
  return type metadata accessor for Client(0LL);
}

void sub_100129F60(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v1);
}

uint64_t sub_100129F78()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100129F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v8,  v7,  0LL,  0LL,  0LL,  1LL,  a7,  a7,  a7,  a1,  a1,  a1);
}

void sub_100129FBC(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
}

void sub_100129FE8()
{
}

  ;
}

uint64_t sub_10012A028(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10012A048()
{
  return static os_log_type_t.error.getter();
}

void sub_10012A050()
{
  v0._uint64_t countAndFlagsBits = 40LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

  ;
}

uint64_t sub_10012A084(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_10012A090(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

  ;
}

uint64_t sub_10012A0AC()
{
  return static _DictionaryStorage.allocate(capacity:)(v0);
}

BOOL sub_10012A0BC(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10012A0CC()
{
  return _print_unlocked<A, B>(_:_:)(v1, v0);
}

uint64_t sub_10012A0D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *uint64_t v10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, v9, a9);
}

uint64_t sub_10012A0F0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10012A108( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 544) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a9, v10 + 552, v9);
}

void sub_10012A120(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v1);
}

void sub_10012A138( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 + 480) = a15;
  *(void *)(v16 + 488) = a16;
}

uint64_t sub_10012A144(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

void sub_10012A15C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_10012A164()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  *uint64_t v3 = *v0;
  *(void *)(v2 + 192) = *(void *)(v2 + 48);
}

unint64_t sub_10012A184()
{
  v0[56] = 45LL;
  v0[57] = 0xE100000000000000LL;
  v0[54] = 95LL;
  v0[55] = 0xE100000000000000LL;
  return sub_1000A9B34();
}

uint64_t sub_10012A19C(uint64_t a1, uint64_t a2)
{
  return sub_100121F5C(a1, a2);
}

uint64_t sub_10012A1A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v11 - sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, a9, v10);
}

uint64_t sub_10012A1C0()
{
  return sub_10007D824(v1, 1LL, v0);
}

uint64_t sub_10012A1E0()
{
  return sub_1000DFC70();
}

uint64_t sub_10012A1F4(uint64_t a1)
{
  return sub_10007D0AC(v1, 0LL, 1LL, a1);
}

void sub_10012A208()
{
}

  ;
}

void sub_10012A228()
{
  uint64_t v2 = (void *)(v1 - 8);
  *uint64_t v2 = *v0;
  *uint64_t v2 = *v0;
}

void sub_10012A244()
{
  uint64_t v2 = (void *)(v1 - 8);
  *uint64_t v2 = *v0;
  *uint64_t v2 = *v0;
}

void sub_10012A260()
{
  uint64_t v2 = (void *)(v1 - 8);
  *uint64_t v2 = *v0;
  *uint64_t v2 = *v0;
}

uint64_t sub_10012A27C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 712));
}

uint64_t sub_10012A284( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_10007A488(a5, v8, (uint64_t *)va);
}

uint64_t sub_10012A294()
{
  return swift_release(v0);
}

uint64_t sub_10012A2A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_bridgeObjectRelease(a19);
}

void sub_10012A2AC(Swift::String a1)
{
}

void sub_10012A2B4()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_10012A2C4()
{
  return 0x6465676E61686320LL;
}

void sub_10012A2DC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  v20._uint64_t countAndFlagsBits = v19;
  v20._object = v18;
  String.append(_:)(v20);
}

void sub_10012A2EC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  v14._uint64_t countAndFlagsBits = v13;
  v14._object = v12;
  String.append(_:)(v14);
}

uint64_t sub_10012A2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 7LL);
}

void sub_10012A304(uint64_t a1)
{
}

void sub_10012A30C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

  ;
}

uint64_t sub_10012A324()
{
  return v1;
}

uint64_t sub_10012A34C(uint64_t a1)
{
  return swift_beginAccess(a1, v1, 33LL, 0LL);
}

uint64_t sub_10012A35C(uint64_t a1)
{
  *(void *)(v2 + 184) = a1;
  return swift_unknownObjectRelease(v1);
}

uint64_t sub_10012A36C(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return type metadata accessor for StorefrontManager(0LL);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10012A3A0()
{
  return sub_1000DFC70();
}

void *sub_10012A3AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  *a11 = a1;
  return a11;
}

uint64_t sub_10012A3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007D0AC(a1, 1LL, 2LL, a4);
}

uint64_t sub_10012A3CC()
{
  return type metadata accessor for Locale(0LL);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10012A410(uint64_t a1)
{
  return sub_10007D824(v1, 1LL, a1);
}

uint64_t sub_10012A434(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1);
}

uint64_t sub_10012A43C()
{
  return *(void *)(*(void *)(v1 + 48) + 16 * v0 + 8);
}

  ;
}

uint64_t sub_10012A45C()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10012A468()
{
  return sub_100129680(v0, v1);
}

  ;
}

uint64_t sub_10012A488()
{
  return Locale.Components.init(identifier:)(v0, v1);
}

uint64_t sub_10012A494()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10012A49C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void destroy for FetchMessagesTask(uint64_t a1)
{
}

void *initializeWithCopy for FetchMessagesTask(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  id v7 = v3;
  swift_bridgeObjectRetain(v5);
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for FetchMessagesTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void **)(a2 + 24);
  uint64_t v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  id v11 = v9;

  return a1;
}

uint64_t assignWithTake for FetchMessagesTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for FetchMessagesTask(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(sub_1000DE51C(*(void *)(v0 + 200), v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_1000DE51C(*(void *)(v0 + 200), v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchMessagesTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FetchMessagesTask()
{
  return &type metadata for FetchMessagesTask;
}

void sub_10012A674(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v5 = sub_100134460(a1, a2), (v6 & 1) != 0))
  {
    uint64_t v7 = sub_100134440(v5);
    sub_100134274(v7, v8);
  }

  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_1000221B0();
  }

void sub_10012A6B0(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = sub_100132100(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = sub_100134440(v4);
    sub_100134274(v6, v7);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_1000221B0();
  }

uint64_t sub_10012A6F0(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v3 = sub_100132208(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  char v5 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v3);
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain(v5[1]);
  return v6;
}

uint64_t sub_10012A744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100134460(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(v4 + 56);
    uint64_t v10 = sub_1000C654C();
    sub_100134420();
    sub_10009BF04(v9 + v11 * v8, a4, v12);
    uint64_t v13 = sub_100134410();
    uint64_t v16 = v10;
  }

  else
  {
    sub_1000C654C();
    uint64_t v13 = sub_100134318();
  }

  return sub_10007D0AC(v13, v14, v15, v16);
}

void sub_10012A7B4(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (uint64_t v4 = sub_100132208(a1), (v5 & 1) != 0))
  {
    uint64_t v6 = sub_100134440(v4);
    sub_100134274(v6, v7);
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_1000221B0();
  }

uint64_t sub_10012A7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100134460(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(v4 + 56);
    uint64_t v10 = sub_10007B1FC(&qword_10032BD40);
    sub_100134420();
    sub_1000E9220(v9 + v11 * v8, a4, &qword_10032BD40);
    uint64_t v12 = sub_100134410();
    uint64_t v15 = v10;
  }

  else
  {
    sub_10007B1FC(&qword_10032BD40);
    uint64_t v12 = sub_100134318();
  }

  return sub_10007D0AC(v12, v13, v14, v15);
}

void sub_10012A87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = sub_100134460(a1, a2);
    if ((v5 & 1) != 0) {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v3 + 56) + 8 * v4));
    }
  }

  sub_1000221B0();
}

double sub_10012A8B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100132188(a1), (v6 & 1) != 0))
  {
    sub_10007B1C0(*(void *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

void sub_10012A904()
{
  NSString v1 = String._bridgeToObjectiveC()();
  sub_100085EF0();
  id v2 = [(id)swift_getObjCClassFromMetadata(v0) contextWithBundleID:v1];

  sub_1000AB000();
}

void sub_10012A958(uint64_t a1, void *a2)
{
  sub_10012A96C( a1,  a2,  (void (*)(uint64_t, uint64_t, uint64_t))sub_10013323C,  (void (*)(_OWORD *__return_ptr, void *))sub_1001329CC);
}

void sub_10012A96C( uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t), void (*a4)(_OWORD *__return_ptr, void *))
{
  if (*(void *)(a1 + 24))
  {
    sub_1000853B0((_OWORD *)a1, v7);
    sub_100132F3C((uint64_t)v7, (uint64_t)a2, a3);
  }

  else
  {
    sub_1001343B4(a1);
    a4(v7, a2);

    sub_1001343B4((uint64_t)v7);
  }

  sub_100008600();
}

void sub_10012A9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000853B0((_OWORD *)a1, v5);
    sub_100132F98();
    sub_100085EF0();
  }

  else
  {
    sub_1001343B4(a1);
    sub_100132B04(a2, a3, v5);
    sub_100085EF0();
    sub_1001343B4((uint64_t)v5);
  }

  sub_100008600();
}

void sub_10012AA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_10007D824(a1, 1LL, v11) == 1)
  {
    sub_100134468(a1);
    sub_100132BDC(a2, a3, v3);
    sub_100085EF0();
    sub_100134468(v3);
  }

  else
  {
    uint64_t v12 = sub_1000C4A8C(a1, (uint64_t)v10);
    sub_100134450(v12, v13, v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001335D0);
    sub_100085EF0();
  }

  sub_1000C6594();
}

void sub_10012AB2C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000853B0((_OWORD *)a1, v3);
    sub_100133018(v3, a2);
    sub_100087388(a2);
  }

  else
  {
    sub_1000CEEA8(a1, (uint64_t *)&unk_100328ED0);
    sub_100132D1C(a2, v3);
    sub_100087388(a2);
    sub_1000CEEA8((uint64_t)v3, (uint64_t *)&unk_100328ED0);
  }

  sub_100008600();
}

void sub_10012ABA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_10007D824(a1, 1LL, v11) == 1)
  {
    sub_100134468(a1);
    sub_100132E38(a2, a3, v3);
    sub_100085EF0();
    sub_100134468(v3);
  }

  else
  {
    sub_1000E91F4(a1, (uint64_t)v10, &qword_10032BD40);
    sub_100134450(v12, v13, v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100133814);
    sub_100085EF0();
  }

  sub_1000C6594();
}

uint64_t sub_10012AC8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = sub_1000C6320(v7, v8, a1, a2);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_1000C6320(v14, v15, a1, a2) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10012AD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = a3;
  uint64_t v7 = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v6 = String.init<A>(_:)( &v6,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v7 = v4;
  String.append<A>(contentsOf:)(v8, &type metadata for String, &protocol witness table for String);
  return v6;
}

uint64_t sub_10012ADC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&__int128 v38 = a3;
  *((void *)&v38 + 1) = a4;
  sub_1001330F8(a2, v43);
  uint64_t v6 = v43[0];
  int64_t v39 = v43[3];
  unint64_t v7 = v43[4];
  uint64_t v36 = v43[1];
  int64_t v37 = (unint64_t)(v43[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a2);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v9 = v8 | (v39 << 6);
  while (1)
  {
    uint64_t v14 = *(void **)(*(void *)(v6 + 48) + 8 * v9);
    uint64_t v15 = (void *)(*(void *)(v6 + 56) + 16 * v9);
    uint64_t v16 = v15[1];
    *(void *)&__int128 v41 = *v15;
    *((void *)&v41 + 1) = v16;
    v40[0] = v38;
    id v17 = v14;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(*((void *)&v38 + 1));
    *(void *)&v40[0] = String.init<A>(_:)( v40,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
    *((void *)&v40[0] + 1) = v18;
    String.append<A>(contentsOf:)(&v41, &type metadata for String, &protocol witness table for String);
    uint64_t v42 = &type metadata for String;
    __int128 v41 = v40[0];
    sub_1000853B0(&v41, v40);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    uint64_t v44 = a1;
    unint64_t v20 = sub_100132188((uint64_t)v17);
    uint64_t v22 = a1[2];
    BOOL v23 = (v21 & 1) == 0;
    Swift::Int v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    unint64_t v25 = v20;
    char v26 = v21;
    sub_10007B1FC(&qword_10032C468);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
    {
      unint64_t v27 = sub_100132188((uint64_t)v17);
      if ((v26 & 1) != (v28 & 1)) {
        goto LABEL_33;
      }
      unint64_t v25 = v27;
    }

    a1 = v44;
    if ((v26 & 1) != 0)
    {
      uint64_t v29 = (void *)(v44[7] + 32 * v25);
      sub_10007B1A0(v29);
      sub_1000853B0(v40, v29);
    }

    else
    {
      v44[(v25 >> 6) + 8] |= 1LL << v25;
      *(void *)(a1[6] + 8 * v25) = v17;
      sub_1000853B0(v40, (_OWORD *)(a1[7] + 32 * v25));
      uint64_t v30 = a1[2];
      BOOL v31 = __OFADD__(v30, 1LL);
      uint64_t v32 = v30 + 1;
      if (v31) {
        goto LABEL_31;
      }
      a1[2] = v32;
      id v33 = v17;
    }

    swift_bridgeObjectRelease(v16);

    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      goto LABEL_32;
    }
    if (v10 >= v37) {
      goto LABEL_29;
    }
    unint64_t v11 = *(void *)(v36 + 8 * v10);
    int64_t v12 = v39 + 1;
    if (!v11)
    {
      int64_t v12 = v39 + 2;
      if (v39 + 2 >= v37) {
        goto LABEL_29;
      }
      unint64_t v11 = *(void *)(v36 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v39 + 3;
        if (v39 + 3 >= v37) {
          goto LABEL_29;
        }
        unint64_t v11 = *(void *)(v36 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v39 + 4;
          if (v39 + 4 >= v37) {
            goto LABEL_29;
          }
          unint64_t v11 = *(void *)(v36 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v39 + 5;
            if (v39 + 5 >= v37) {
              goto LABEL_29;
            }
            unint64_t v11 = *(void *)(v36 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v39 + 6;
              while (v13 < v37)
              {
                unint64_t v11 = *(void *)(v36 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

id sub_10012B10C()
{
  return sub_10011DD6C(&qword_100328B68, (id *)&qword_10033E1F0);
}

NSString sub_10012B128()
{
  NSString result = sub_100086100();
  qword_10033E1E8 = (uint64_t)result;
  return result;
}

NSString sub_10012B154()
{
  NSString result = sub_100086100();
  qword_10033E1F0 = (uint64_t)result;
  return result;
}

id sub_10012B1AC()
{
  return sub_10011DD6C(&qword_100328B70, (id *)&qword_10033E1F8);
}

NSString sub_10012B1C8()
{
  NSString result = sub_100086100();
  qword_10033E1F8 = (uint64_t)result;
  return result;
}

NSString sub_10012B220()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E200 = (uint64_t)result;
  return result;
}

id sub_10012B254()
{
  return sub_10011DD6C(&qword_100328B78, (id *)&qword_10033E200);
}

NSString sub_10012B29C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E208 = (uint64_t)result;
  return result;
}

id sub_10012B2D0()
{
  return sub_10011DD6C(&qword_100328B80, (id *)&qword_10033E208);
}

NSString sub_10012B318()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E210 = (uint64_t)result;
  return result;
}

id sub_10012B34C()
{
  return sub_10011DD6C(&qword_100328B88, (id *)&qword_10033E210);
}

NSString sub_10012B394()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E218 = (uint64_t)result;
  return result;
}

id sub_10012B3C8()
{
  return sub_10011DD6C(&qword_100328B90, (id *)&qword_10033E218);
}

id sub_10012B410()
{
  return sub_10011DD6C(&qword_100328B98, (id *)&qword_10033E220);
}

NSString sub_10012B42C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E220 = (uint64_t)result;
  return result;
}

NSString sub_10012B490()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E228 = (uint64_t)result;
  return result;
}

id sub_10012B4C4()
{
  return sub_10011DD6C(&qword_100328BA0, (id *)&qword_10033E228);
}

NSString sub_10012B50C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E230 = (uint64_t)result;
  return result;
}

id sub_10012B540()
{
  return sub_10011DD6C(&qword_100328BA8, (id *)&qword_10033E230);
}

id sub_10012B588()
{
  return sub_10011DD6C(&qword_100328BB0, (id *)&qword_10033E238);
}

NSString sub_10012B5A4()
{
  NSString result = sub_1001344AC();
  qword_10033E238 = (uint64_t)result;
  return result;
}

id sub_10012B604()
{
  return sub_10011DD6C(&qword_100328BB8, (id *)&qword_10033E240);
}

NSString sub_10012B620()
{
  NSString result = sub_100086100();
  qword_10033E240 = (uint64_t)result;
  return result;
}

NSString sub_10012B67C()
{
  NSString result = sub_100086100();
  qword_10033E248 = (uint64_t)result;
  return result;
}

id sub_10012B6A8()
{
  return sub_10011DD6C(&qword_100328BC0, (id *)&qword_10033E248);
}

NSString sub_10012B6F0()
{
  NSString result = sub_100086100();
  qword_10033E250 = (uint64_t)result;
  return result;
}

id sub_10012B71C()
{
  return sub_10011DD6C(&qword_100328BC8, (id *)&qword_10033E250);
}

NSString sub_10012B764()
{
  NSString result = sub_100086100();
  qword_10033E258 = (uint64_t)result;
  return result;
}

id sub_10012B790()
{
  return sub_10011DD6C(&qword_100328BD0, (id *)&qword_10033E258);
}

NSString sub_10012B7D8()
{
  NSString result = sub_100086100();
  qword_10033E260 = (uint64_t)result;
  return result;
}

id sub_10012B808()
{
  return sub_10011DD6C(&qword_100328BD8, (id *)&qword_10033E260);
}

NSString sub_10012B850()
{
  NSString result = sub_100086100();
  qword_10033E268 = (uint64_t)result;
  return result;
}

id sub_10012B880()
{
  return sub_10011DD6C(&qword_100328BE0, (id *)&qword_10033E268);
}

NSString sub_10012B8C8()
{
  NSString result = sub_100086100();
  qword_10033E270 = (uint64_t)result;
  return result;
}

id sub_10012B8F8()
{
  return sub_10011DD6C(&qword_100328BE8, (id *)&qword_10033E270);
}

NSString sub_10012B940()
{
  NSString result = sub_100086100();
  qword_10033E278 = (uint64_t)result;
  return result;
}

id sub_10012B96C()
{
  return sub_10011DD6C(&qword_100328BF0, (id *)&qword_10033E278);
}

NSString sub_10012B9B4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E280 = (uint64_t)result;
  return result;
}

id sub_10012B9E8()
{
  return sub_10011DD6C(&qword_100328BF8, (id *)&qword_10033E280);
}

id sub_10012BA30()
{
  return sub_10011DD6C(&qword_100328C00, (id *)&qword_10033E288);
}

NSString sub_10012BA4C()
{
  NSString result = sub_100086100();
  qword_10033E288 = (uint64_t)result;
  return result;
}

id sub_10012BAA8()
{
  return sub_10011DD6C(&qword_100328C08, (id *)&qword_10033E290);
}

NSString sub_10012BAC4()
{
  NSString result = sub_100086100();
  qword_10033E290 = (uint64_t)result;
  return result;
}

id sub_10012BB20()
{
  return sub_10011DD6C(&qword_100328C10, (id *)&qword_10033E298);
}

NSString sub_10012BB3C()
{
  NSString result = sub_100086100();
  qword_10033E298 = (uint64_t)result;
  return result;
}

id sub_10012BB98()
{
  return sub_10011DD6C(&qword_100328C18, (id *)&qword_10033E2A0);
}

NSString sub_10012BBB4()
{
  NSString result = sub_100086100();
  qword_10033E2A0 = (uint64_t)result;
  return result;
}

NSString sub_10012BC10()
{
  NSString result = sub_100086100();
  qword_10033E2A8 = (uint64_t)result;
  return result;
}

id sub_10012BC40()
{
  return sub_10011DD6C(&qword_100328C20, (id *)&qword_10033E2A8);
}

id sub_10012BC88()
{
  return sub_10011DD6C(&qword_100328C28, (id *)&qword_10033E2B0);
}

NSString sub_10012BCA4()
{
  NSString result = sub_100086100();
  qword_10033E2B0 = (uint64_t)result;
  return result;
}

NSString sub_10012BCFC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E2B8 = (uint64_t)result;
  return result;
}

id sub_10012BD30()
{
  return sub_10011DD6C(&qword_100328C30, (id *)&qword_10033E2B8);
}

NSString sub_10012BD78()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E2C0 = (uint64_t)result;
  return result;
}

id sub_10012BDAC()
{
  return sub_10011DD6C(&qword_100328C38, (id *)&qword_10033E2C0);
}

NSString sub_10012BDF4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E2C8 = (uint64_t)result;
  return result;
}

id sub_10012BE28()
{
  return sub_10011DD6C(&qword_100328C40, (id *)&qword_10033E2C8);
}

NSString sub_10012BE70()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E2D0 = (uint64_t)result;
  return result;
}

id sub_10012BEAC()
{
  return sub_10011DD6C(&qword_100328C48, (id *)&qword_10033E2D0);
}

id sub_10012BEF4()
{
  return sub_10011DD6C(&qword_100328C50, (id *)&qword_10033E2D8);
}

NSString sub_10012BF10()
{
  NSString result = sub_1001344AC();
  qword_10033E2D8 = (uint64_t)result;
  return result;
}

NSString sub_10012BF70()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E2E0 = (uint64_t)result;
  return result;
}

id sub_10012BFA4()
{
  return sub_10011DD6C(&qword_100328C58, (id *)&qword_10033E2E0);
}

NSString sub_10012BFEC()
{
  NSString result = sub_100086100();
  qword_10033E2E8 = (uint64_t)result;
  return result;
}

id sub_10012C01C()
{
  return sub_10011DD6C(&qword_100328C60, (id *)&qword_10033E2E8);
}

NSString sub_10012C064()
{
  NSString result = sub_100086100();
  qword_10033E2F0 = (uint64_t)result;
  return result;
}

id sub_10012C090()
{
  return sub_10011DD6C(&qword_100328C68, (id *)&qword_10033E2F0);
}

id sub_10012C0D8()
{
  return sub_10011DD6C(&qword_100328C70, (id *)&qword_10033E2F8);
}

NSString sub_10012C0F4()
{
  NSString result = sub_100086100();
  qword_10033E2F8 = (uint64_t)result;
  return result;
}

id sub_10012C150()
{
  return sub_10011DD6C(&qword_100328C78, (id *)&qword_10033E300);
}

NSString sub_10012C16C()
{
  NSString result = sub_100086100();
  qword_10033E300 = (uint64_t)result;
  return result;
}

id sub_10012C1C8()
{
  return sub_10011DD6C(&qword_100328C80, (id *)&qword_10033E308);
}

NSString sub_10012C1E4()
{
  NSString result = sub_100086100();
  qword_10033E308 = (uint64_t)result;
  return result;
}

id sub_10012C23C()
{
  return sub_10011DD6C(&qword_100328C88, (id *)&qword_10033E310);
}

NSString sub_10012C258()
{
  NSString result = sub_100086100();
  qword_10033E310 = (uint64_t)result;
  return result;
}

id sub_10012C2B4()
{
  return sub_10011DD6C(&qword_100328C90, (id *)&qword_10033E318);
}

NSString sub_10012C2D0()
{
  NSString result = sub_1001344AC();
  qword_10033E318 = (uint64_t)result;
  return result;
}

NSString sub_10012C330()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E320 = (uint64_t)result;
  return result;
}

id sub_10012C364()
{
  return sub_10011DD6C(&qword_100328C98, (id *)&qword_10033E320);
}

NSString sub_10012C3AC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E328 = (uint64_t)result;
  return result;
}

id sub_10012C3E0()
{
  return sub_10011DD6C(&qword_100328CA0, (id *)&qword_10033E328);
}

id sub_10012C428()
{
  return sub_10011DD6C(&qword_100328CA8, (id *)&qword_10033E330);
}

NSString sub_10012C444()
{
  NSString result = sub_100086100();
  qword_10033E330 = (uint64_t)result;
  return result;
}

id sub_10012C49C()
{
  return sub_10011DD6C(&qword_100328CB0, (id *)&qword_10033E338);
}

NSString sub_10012C4B8()
{
  NSString result = sub_100086100();
  qword_10033E338 = (uint64_t)result;
  return result;
}

NSString sub_10012C514()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E340 = (uint64_t)result;
  return result;
}

id sub_10012C548()
{
  return sub_10011DD6C(&qword_100328CB8, (id *)&qword_10033E340);
}

id sub_10012C590()
{
  return sub_10011DD6C(&qword_100328CC0, (id *)&qword_10033E348);
}

NSString sub_10012C5AC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E348 = (uint64_t)result;
  return result;
}

id sub_10012C60C()
{
  return sub_10011DD6C(&qword_100328CC8, (id *)&qword_10033E350);
}

NSString sub_10012C628()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E350 = (uint64_t)result;
  return result;
}

NSString sub_10012C688()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E358 = (uint64_t)result;
  return result;
}

id sub_10012C6BC()
{
  return sub_10011DD6C(&qword_100328CD0, (id *)&qword_10033E358);
}

id sub_10012C704()
{
  return sub_10011DD6C(&qword_100328CD8, (id *)&qword_10033E360);
}

NSString sub_10012C720()
{
  NSString result = sub_100086100();
  qword_10033E360 = (uint64_t)result;
  return result;
}

id sub_10012C77C()
{
  return sub_10011DD6C(&qword_100328CE0, (id *)&qword_10033E368);
}

NSString sub_10012C798()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E368 = (uint64_t)result;
  return result;
}

NSString sub_10012C7F8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E370 = (uint64_t)result;
  return result;
}

id sub_10012C82C()
{
  return sub_10011DD6C(&qword_100328CE8, (id *)&qword_10033E370);
}

NSString sub_10012C874()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E378 = (uint64_t)result;
  return result;
}

id sub_10012C8A8()
{
  return sub_10011DD6C(&qword_100328CF0, (id *)&qword_10033E378);
}

NSString sub_10012C8F0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E380 = (uint64_t)result;
  return result;
}

id sub_10012C924()
{
  return sub_10011DD6C(&qword_100328CF8, (id *)&qword_10033E380);
}

NSString sub_10012C96C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E388 = (uint64_t)result;
  return result;
}

id sub_10012C9A0()
{
  return sub_10011DD6C(&qword_100328D00, (id *)&qword_10033E388);
}

NSString sub_10012C9E8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E390 = (uint64_t)result;
  return result;
}

id sub_10012CA1C()
{
  return sub_10011DD6C(&qword_100328D08, (id *)&qword_10033E390);
}

NSString sub_10012CA64()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E398 = (uint64_t)result;
  return result;
}

id sub_10012CA9C()
{
  return sub_10011DD6C(&qword_100328D10, (id *)&qword_10033E398);
}

NSString sub_10012CAE4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E3A0 = (uint64_t)result;
  return result;
}

id sub_10012CB20()
{
  return sub_10011DD6C(&qword_100328D18, (id *)&qword_10033E3A0);
}

NSString sub_10012CB68()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E3A8 = (uint64_t)result;
  return result;
}

id sub_10012CBA4()
{
  return sub_10011DD6C(&qword_100328D20, (id *)&qword_10033E3A8);
}

NSString sub_10012CBEC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E3B0 = (uint64_t)result;
  return result;
}

id sub_10012CC20()
{
  return sub_10011DD6C(&qword_100328D28, (id *)&qword_10033E3B0);
}

NSString sub_10012CC68()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E3B8 = (uint64_t)result;
  return result;
}

id sub_10012CC9C()
{
  return sub_10011DD6C(&qword_100328D30, (id *)&qword_10033E3B8);
}

NSString sub_10012CCE4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E3C0 = (uint64_t)result;
  return result;
}

id sub_10012CD18()
{
  return sub_10011DD6C(&qword_100328D38, (id *)&qword_10033E3C0);
}

NSString sub_10012CD60()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E3C8 = (uint64_t)result;
  return result;
}

id sub_10012CD94()
{
  return sub_10011DD6C(&qword_100328D40, (id *)&qword_10033E3C8);
}

id sub_10012CDDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BagKey();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10012CE2C(uint64_t a1)
{
  return sub_100129294(a1, type metadata accessor for BagKey);
}

uint64_t type metadata accessor for BagKey()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd6BagKey);
}

uint64_t sub_10012CE5C()
{
  v2[3] = &type metadata for StoreKitFeatureFlag;
  v2[4] = sub_100134064();
  LOBYTE(v2[0]) = 0;
  char v0 = isFeatureEnabled(_:)(v2);
  sub_10007B1A0(v2);
  if ((v0 & 1) != 0) {
    return 0x74694B65726F7453LL;
  }
  else {
    return 0x65726F7473707061LL;
  }
}

uint64_t sub_10012CF34()
{
  return sub_10012CE5C();
}

uint64_t sub_10012CF80()
{
  return 49LL;
}

id sub_10012CFBC()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC9storekitd3Bag_bag) isExpired];
}

uint64_t sub_10012D0A4@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) expirationDate];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  uint64_t v6 = type metadata accessor for Date(0LL);
  return sub_10007D0AC(a1, v5, 1LL, v6);
}

void sub_10012D118(uint64_t a1)
{
}

uint64_t sub_10012D128()
{
  return sub_10012D224(&qword_100328D48, &qword_10033E3D0);
}

uint64_t sub_10012D170(uint64_t a1)
{
  return sub_10012D2A4(a1, &qword_100328D48, &qword_10033E3D0, (uint64_t)sub_10012D118);
}

void sub_10012D1C0(uint64_t a1)
{
}

void sub_10012D1D0(uint64_t a1, char a2, id *a3)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for Bag());
  *a3 = sub_10012D39C(a2);
  sub_1000221B0();
}

uint64_t sub_10012D208()
{
  return sub_10012D224(&qword_100328D50, &qword_10033E3D8);
}

uint64_t sub_10012D224(void *a1, void *a2)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  return swift_unknownObjectRetain(*a2);
}

uint64_t sub_10012D288(uint64_t a1)
{
  return sub_10012D2A4(a1, &qword_100328D50, &qword_10033E3D8, (uint64_t)sub_10012D1C0);
}

uint64_t sub_10012D2A4(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  uint64_t v6 = *a3;
  *a3 = a1;
  return swift_unknownObjectRelease(v6);
}

void sub_10012D31C(uint64_t a1, uint64_t a2)
{
}

id sub_10012D39C(char a1)
{
  id v3 = (void *)objc_opt_self(&OBJC_CLASS___AMSProcessInfo);
  uint64_t v4 = v1;
  id v5 = [v3 currentProcess];
  uint64_t v6 = v5;
  if ((a1 & 1) != 0) {
    [v5 setAccountMediaType:AMSAccountMediaTypeAppStoreSandbox];
  }
  sub_10007CB7C(0LL, &qword_10032C478, &OBJC_CLASS___AMSBag_ptr);
  unint64_t v7 = (objc_class *)type metadata accessor for Bag();
  uint64_t v8 = sub_10012CE5C();
  *(void *)&v4[OBJC_IVAR____TtC9storekitd3Bag_bag] = sub_10012D47C(v8, v9, 49LL, 0xE100000000000000LL, v6);

  v11.receiver = v4;
  v11.super_class = v7;
  return objc_msgSendSuper2(&v11, "init");
}

id sub_10012D47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v11 = [(id)swift_getObjCClassFromMetadata(v5) bagForProfile:v9 profileVersion:v10 processInfo:a5];

  return v11;
}

id sub_10012D518(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) arrayForKey:a1];
}

id sub_10012D594(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) BOOLForKey:a1];
}

void sub_10012D610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC9storekitd3Bag_bag);
  uint64_t v5 = sub_1001344FC((uint64_t)sub_1000DCDC4, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v6, v7);
  swift_retain(a2);
  swift_release(a2);
  [v4 createSnapshotWithCompletion:v5];
  _Block_release(v5);
}

void sub_10012D718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

id sub_10012D770(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) doubleForKey:a1];
}

id sub_10012D7EC(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) integerForKey:a1];
}

id sub_10012D868(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) stringForKey:a1];
}

id sub_10012D8E4(uint64_t a1)
{
  return [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) URLForKey:a1];
}

void sub_10012D960(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC9storekitd3Bag_bag);
  if (([v5 respondsToSelector:"URLForKey:account:"] & 1) != 0
    && [v5 URLForKey:a1 account:a2])
  {
    sub_1000AB000();
  }

  else
  {
    id v6 = [v5 URLForKey:a1];
  }

id sub_10012DA50(uint64_t a1)
{
  id v2 = [*(id *)(v1 + OBJC_IVAR____TtC9storekitd3Bag_bag) dictionaryForKey:a1];
  uint64_t v3 = sub_10013448C();
  if (v3 == 0xD000000000000011LL && v4 == 0x80000001002A4A20LL)
  {
    id v5 = v2;
    sub_10007BA44();
  }

  else
  {
    char v6 = sub_1000C6320(v3, v4, 0xD000000000000011LL, 0x80000001002A4A20LL);
    id v7 = v2;
    sub_10007B980();
    if ((v6 & 1) == 0)
    {

      return v7;
    }
  }

  uint64_t v8 = sub_1001344FC((uint64_t)sub_10012E47C, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v10, v11);
  id v7 = [v2 transformWithBlock:v8];

  _Block_release(v8);
  return v7;
}

uint64_t sub_10012DB84(void *a1)
{
  id v1 = [a1 mutableCopy];
  _bridgeAnyObjectToAny(_:)(&v85);
  swift_unknownObjectRelease(v1);
  uint64_t v2 = sub_10007CB7C(0LL, (unint64_t *)&unk_10032C430, &OBJC_CLASS___NSMutableDictionary_ptr);
  swift_dynamicCast(&v82, &v85, (char *)&type metadata for Any + 8, v2, 7LL);
  uint64_t v3 = (void *)v82;
  *(void *)&__int128 v82 = 0x636E616E69465A4DLL;
  *((void *)&v82 + 1) = 0xE900000000000065LL;
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v82, &type metadata for String);
  id v5 = objc_msgSend(v3, "__swift_objectForKeyedSubscript:", v4);
  swift_unknownObjectRelease(v4);
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(&v82);
    swift_unknownObjectRelease(v5);
  }

  else
  {
    __int128 v82 = 0u;
    __int128 v83 = 0u;
  }

  sub_1000E91F4((uint64_t)&v82, (uint64_t)&v85, (uint64_t *)&unk_100328ED0);
  if (!v87)
  {
    sub_1000CEEA8((uint64_t)&v85, (uint64_t *)&unk_100328ED0);
    goto LABEL_49;
  }

  uint64_t v6 = sub_10007B1FC(&qword_10032A500);
  if ((swift_dynamicCast(&v84, &v85, (char *)&type metadata for Any + 8, v6, 6LL) & 1) == 0)
  {
LABEL_49:
    uint64_t v84 = 0LL;
LABEL_50:
    uint64_t v85 = 0x636E616E69465A4DLL;
    unint64_t v86 = 0xE900000000000065LL;
    uint64_t v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v85, &type metadata for String);
    objc_msgSend(v3, "__swift_setObject:forKeyedSubscript:", 0, v38);
    goto LABEL_51;
  }

  uint64_t v7 = v84;
  if (!v84) {
    goto LABEL_50;
  }
  swift_bridgeObjectRetain(v84);
  uint64_t v9 = sub_100133E90(v8, &off_1002EA8C0);
  char v11 = v10;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v77 = v3;
  if ((v11 & 1) != 0)
  {
    uint64_t v9 = *(void *)(v7 + 16);
  }

  else
  {
    uint64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_135;
    }
    uint64_t v14 = v84;
    unint64_t v15 = *(void *)(v84 + 16);
    if (v13 != v15)
    {
      uint64_t v16 = v9 + 1;
      uint64_t v79 = v9 + 1;
      do
      {
        if (v13 < 0)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }

        if (v16 >= v15) {
          goto LABEL_116;
        }
        id v17 = (void *)(v14 + 32 + 16 * v16);
        uint64_t v18 = *v17;
        uint64_t v19 = (char *)v17[1];
        uint64_t result = *(void *)"inAppBuy";
        BOOL v20 = *(void *)"inAppBuy" == *v17 && *(void *)"" == (void)v19;
        if (!v20)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)"inAppBuy", *(void *)"", *v17, v17[1], 0LL);
          if ((result & 1) != 0) {
            goto LABEL_18;
          }
          uint64_t v13 = v79;
          uint64_t result = 0xD000000000000018LL;
          if (v18 == 0xD000000000000018LL && "adNetworkPayloadVersion" == v19) {
            goto LABEL_29;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)( 0xD000000000000018LL,  "adNetworkPayloadVersion",  v18,  v19,  0LL);
          if ((result & 1) != 0)
          {
LABEL_18:
            uint64_t v13 = v79;
          }

          else
          {
            uint64_t v13 = v79;
            uint64_t v32 = &off_1002EA908;
            uint64_t v33 = 2LL;
            do
            {
              uint64_t v34 = v33 + 1;
              if (__OFADD__(v33, 1LL)) {
                goto LABEL_133;
              }
              uint64_t result = (uint64_t)*(v32 - 1);
              uint64_t v35 = *v32;
              if (result == v18 && v35 == v19) {
                goto LABEL_29;
              }
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v35, v18, v19, 0LL);
              if ((result & 1) != 0) {
                goto LABEL_18;
              }
              v32 += 2;
              ++v33;
              uint64_t v13 = v79;
            }

            while (v34 != 3);
            if (v9 != v16)
            {
              if (v9 < 0) {
                goto LABEL_123;
              }
              unint64_t v21 = *(void *)(v14 + 16);
              if (v9 >= v21) {
                goto LABEL_124;
              }
              uint64_t v22 = (uint64_t *)(v14 + 32 + 16 * v9);
              uint64_t v24 = *v22;
              uint64_t v23 = v22[1];
              uint64_t v25 = *v17;
              uint64_t v26 = v17[1];
              swift_bridgeObjectRetain(v23);
              swift_bridgeObjectRetain(v26);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v84 = v14;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1001340EC();
                uint64_t v14 = v37;
                uint64_t v84 = v37;
              }

              uint64_t v28 = v14 + 16 * v9;
              *(void *)(v28 + 32) = v25;
              *(void *)(v28 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v26;
              uint64_t result = swift_bridgeObjectRelease();
              if (v16 >= *(void *)(v84 + 16)) {
                goto LABEL_126;
              }
              uint64_t v29 = v84 + 16 * v16;
              *(void *)(v29 + 32) = v24;
              *(void *)(v29 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v23;
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v14 = v84;
              uint64_t v13 = v79;
            }

            BOOL v30 = __OFADD__(v9++, 1LL);
            if (v30) {
              goto LABEL_121;
            }
          }
        }

LABEL_101:
    uint64_t v85 = 0x7975425A4DLL;
    unint64_t v86 = 0xE500000000000000LL;
    uint64_t v71 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v85, &type metadata for String);
    objc_msgSend(v3, "__swift_setObject:forKeyedSubscript:", 0, v71);
LABEL_102:
    swift_unknownObjectRelease(v71);
    id v72 = [(id)objc_opt_self(AMSPromise) promiseWithResult:v3];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v72;
  }

  uint64_t v80 = v44 + 1;
  uint64_t v50 = v44 + 1;
  while (1)
  {
    if (v47 < 0) {
      goto LABEL_118;
    }
    if (v50 >= v49) {
      goto LABEL_119;
    }
    uint64_t v51 = (void *)(v48 + 32 + 16 * v50);
    uint64_t v52 = *v51;
    char v53 = (char *)v51[1];
    uint64_t result = *(void *)"inAppBuy";
    if (*(void *)"inAppBuy" != *v51 || *(void *)"" != (void)v53) {
      break;
    }
LABEL_79:
    BOOL v30 = __OFADD__(v50++, 1LL);
    if (v30) {
      goto LABEL_120;
    }
    unint64_t v49 = *(void *)(v48 + 16);
    if (v50 == v49) {
      goto LABEL_111;
    }
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)"inAppBuy", *(void *)"", *v51, v51[1], 0LL);
  if ((result & 1) != 0) {
    goto LABEL_68;
  }
  uint64_t v47 = v80;
  uint64_t result = 0xD000000000000018LL;
  if (v52 == 0xD000000000000018LL && "adNetworkPayloadVersion" == v53) {
    goto LABEL_79;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, "adNetworkPayloadVersion", v52, v53, 0LL);
  if ((result & 1) != 0)
  {
LABEL_68:
    uint64_t v47 = v80;
    goto LABEL_79;
  }

  uint64_t v47 = v80;
  uint64_t v65 = &off_1002EA908;
  uint64_t v66 = 2LL;
  uint64_t v78 = v3;
  do
  {
    uint64_t v67 = v66 + 1;
    if (__OFADD__(v66, 1LL)) {
      goto LABEL_134;
    }
    uint64_t result = (uint64_t)*(v65 - 1);
    int v68 = *v65;
    if (result == v52 && v68 == v53)
    {
      uint64_t v3 = v78;
      goto LABEL_79;
    }

    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v68, v52, v53, 0LL);
    if ((result & 1) != 0)
    {
      uint64_t v3 = v78;
      goto LABEL_68;
    }

    v65 += 2;
    ++v66;
    uint64_t v47 = v80;
    BOOL v20 = v67 == 3;
    uint64_t v3 = v78;
  }

  while (!v20);
  if (v44 == v50)
  {
LABEL_78:
    BOOL v30 = __OFADD__(v44++, 1LL);
    if (v30) {
      goto LABEL_122;
    }
    goto LABEL_79;
  }

  if (v44 < 0) {
    goto LABEL_127;
  }
  unint64_t v55 = *(void *)(v48 + 16);
  if (v44 >= v55) {
    goto LABEL_128;
  }
  uint64_t v56 = (uint64_t *)(v48 + 32 + 16 * v44);
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  uint64_t v59 = *v51;
  uint64_t v60 = v51[1];
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v60);
  char v61 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v81 = v48;
  if ((v61 & 1) == 0)
  {
    sub_1001340EC();
    uint64_t v48 = v70;
    uint64_t v81 = v70;
  }

  uint64_t v62 = v48 + 16 * v44;
  *(void *)(v62 + 32) = v59;
  *(void *)(v62 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v60;
  uint64_t result = swift_bridgeObjectRelease();
  if (v50 < *(void *)(v81 + 16))
  {
    uint64_t v63 = v81 + 16 * v50;
    *(void *)(v63 + 32) = v58;
    *(void *)(v63 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v57;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v48 = v81;
    uint64_t v47 = v80;
    goto LABEL_78;
  }

LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
  return result;
}

id sub_10012E47C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(uint64_t (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  uint64_t v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

void sub_10012E518()
{
}

id sub_10012E550(uint64_t a1)
{
  return sub_100129294(a1, type metadata accessor for Bag);
}

uint64_t type metadata accessor for Bag()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd3Bag);
}

uint64_t sub_10012E58C()
{
  uint64_t v0 = sub_10007B1FC(&qword_10032C470);
  uint64_t inited = swift_initStackObject(v0, &v48);
  *(_OWORD *)(inited + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027CDB0;
  if (qword_100328B80 != -1) {
    swift_once(&qword_100328B80, sub_10012B29C);
  }
  uint64_t v2 = (void *)qword_10033E208;
  *(void *)(inited + 32) = qword_10033E208;
  *(void *)(inited + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0xD000000000000027LL;
  *(void *)(inited + 48) = 0x80000001002A4BF0LL;
  uint64_t v3 = qword_100328BA0;
  id v4 = v2;
  if (v3 != -1) {
    swift_once(&qword_100328BA0, sub_10012B490);
  }
  id v5 = (void *)qword_10033E228;
  *(void *)(inited + 56) = qword_10033E228;
  *(void *)(inited + 64) = 0xD00000000000002DLL;
  *(void *)(inited + 72) = 0x80000001002A4C20LL;
  uint64_t v6 = qword_100328C30;
  id v7 = v5;
  if (v6 != -1) {
    swift_once(&qword_100328C30, sub_10012BCFC);
  }
  uint64_t v8 = (void *)qword_10033E2B8;
  *(void *)(inited + 80) = qword_10033E2B8;
  *(void *)(inited + 88) = 0xD000000000000031LL;
  *(void *)(inited + 96) = 0x80000001002A4C50LL;
  uint64_t v9 = qword_100328C48;
  id v10 = v8;
  if (v9 != -1) {
    swift_once(&qword_100328C48, sub_10012BE70);
  }
  char v11 = (void *)qword_10033E2D0;
  *(void *)(inited + 104) = qword_10033E2D0;
  *(void *)(inited + 112) = 0xD000000000000021LL;
  *(void *)(inited + 120) = 0x80000001002A4C90LL;
  uint64_t v12 = qword_100328C70;
  id v13 = v11;
  if (v12 != -1) {
    swift_once(&qword_100328C70, sub_10012C0F4);
  }
  uint64_t v14 = (void *)qword_10033E2F8;
  *(void *)(inited + 128) = qword_10033E2F8;
  strcpy((char *)(inited + 136), "/subscriptions");
  *(_BYTE *)(inited + 151) = -18;
  uint64_t v15 = qword_100328C98;
  id v16 = v14;
  if (v15 != -1) {
    swift_once(&qword_100328C98, sub_10012C330);
  }
  id v17 = (void *)qword_10033E320;
  *(void *)(inited + 152) = qword_10033E320;
  *(void *)(inited + 160) = 0xD000000000000038LL;
  *(void *)(inited + 168) = 0x80000001002A4CC0LL;
  uint64_t v18 = qword_100328CA0;
  id v19 = v17;
  if (v18 != -1) {
    swift_once(&qword_100328CA0, sub_10012C3AC);
  }
  BOOL v20 = (void *)qword_10033E328;
  *(void *)(inited + 176) = qword_10033E328;
  *(void *)(inited + 184) = 0xD000000000000035LL;
  *(void *)(inited + 192) = 0x80000001002A4D00LL;
  uint64_t v21 = qword_100328CB0;
  id v22 = v20;
  if (v21 != -1) {
    swift_once(&qword_100328CB0, sub_10012C4B8);
  }
  uint64_t v23 = (void *)qword_10033E338;
  *(void *)(inited + 200) = qword_10033E338;
  *(void *)(inited + 208) = 0xD00000000000002ELL;
  *(void *)(inited + 2sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0x80000001002A4D40LL;
  uint64_t v24 = qword_100328CC0;
  id v25 = v23;
  if (v24 != -1) {
    swift_once(&qword_100328CC0, sub_10012C5AC);
  }
  uint64_t v26 = (void *)qword_10033E348;
  *(void *)(inited + 224) = qword_10033E348;
  *(void *)(inited + 232) = 0x6D65656465722FLL;
  *(void *)(inited + 2sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0xE700000000000000LL;
  uint64_t v27 = qword_100328CC8;
  id v28 = v26;
  if (v27 != -1) {
    swift_once(&qword_100328CC8, sub_10012C628);
  }
  uint64_t v29 = (void *)qword_10033E350;
  *(void *)(inited + 248) = qword_10033E350;
  *(void *)(inited + 256) = 0x2F646E756665722FLL;
  *(void *)(inited + 264) = 0xEF74736575716572LL;
  uint64_t v30 = qword_100328CD0;
  id v31 = v29;
  if (v30 != -1) {
    swift_once(&qword_100328CD0, sub_10012C688);
  }
  uint64_t v32 = (void *)qword_10033E358;
  *(void *)(inited + 272) = qword_10033E358;
  *(void *)(inited + 280) = 0xD000000000000038LL;
  *(void *)(inited + 288) = 0x80000001002A4D70LL;
  uint64_t v33 = qword_100328CF0;
  id v34 = v32;
  if (v33 != -1) {
    swift_once(&qword_100328CF0, sub_10012C874);
  }
  uint64_t v35 = (void *)qword_10033E378;
  *(void *)(inited + 296) = qword_10033E378;
  *(void *)(inited + 304) = 0xD000000000000015LL;
  *(void *)(inited + 312) = 0x80000001002A4DB0LL;
  uint64_t v36 = qword_100328D10;
  id v37 = v35;
  if (v36 != -1) {
    swift_once(&qword_100328D10, sub_10012CA64);
  }
  uint64_t v38 = (void *)qword_10033E398;
  *(void *)(inited + 320) = qword_10033E398;
  *(void *)(inited + 328) = 0xD000000000000012LL;
  *(void *)(inited + 336) = 0x80000001002A4DD0LL;
  uint64_t v39 = qword_100328D18;
  id v40 = v38;
  if (v39 != -1) {
    swift_once(&qword_100328D18, sub_10012CAE4);
  }
  uint64_t v41 = (void *)qword_10033E3A0;
  *(void *)(inited + 344) = qword_10033E3A0;
  *(void *)(inited + 352) = 0xD000000000000012LL;
  *(void *)(inited + 360) = 0x80000001002A4DF0LL;
  type metadata accessor for AMSBagKey(0LL);
  uint64_t v43 = v42;
  sub_10007ACCC( &qword_100328DF0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_10027947C);
  uint64_t v45 = v44;
  id v46 = v41;
  uint64_t result = Dictionary.init(dictionaryLiteral:)(inited, v43, &type metadata for String, v45);
  qword_10032C350 = result;
  return result;
}

uint64_t sub_10012EAC8()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_isExpired);
}

uint64_t sub_10012EAFC(uint64_t result)
{
  *(_BYTE *)(v1 + OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_isExpired) = result;
  return result;
}

void sub_10012EBC0(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_expirationDate;
  swift_beginAccess(v3, v4, 0LL, 0LL);
  sub_1000E9220(v3, a1, (uint64_t *)&unk_10032C410);
}

uint64_t sub_10012ECD4(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_expirationDate;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_100134170(a1, v3, (uint64_t *)&unk_10032C410);
  return swift_endAccess(v5);
}

id sub_10012EDC0(uint64_t a1, uint64_t a2)
{
  unint64_t v96[2] = a2;
  v96[1] = a1;
  sub_10007B1FC((uint64_t *)&unk_10032C410);
  sub_100085E74();
  __chkstk_darwin(v3);
  id v5 = (char *)v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (uint64_t)&v2[OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_expirationDate];
  uint64_t v7 = type metadata accessor for Date(0LL);
  sub_10007D0AC(v6, 1LL, 1LL, v7);
  v2[OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_isExpired] = 0;
  uint64_t v8 = v2;
  static Date.distantFuture.getter();
  uint64_t v98 = (void *)v7;
  sub_10007D0AC((uint64_t)v5, 0LL, 1LL, v7);
  swift_beginAccess(v6, &v108, 33LL, 0LL);
  sub_100134170((uint64_t)v5, v6, (uint64_t *)&unk_10032C410);
  swift_endAccess(&v108);
  id v9 = [(id)objc_opt_self(OctaneManager) sharedInstance];
  uint64_t v108 = 0x736F686C61636F6CLL;
  unint64_t v109 = 0xEA00000000003A74LL;
  id v103 = v9;
  v107[0] = [v9 activePort];
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v10);
  sub_10007BA44();
  v11._uint64_t countAndFlagsBits = v108;
  uint64_t v12 = (void *)v109;
  uint64_t v108 = 0x2F2F3A70747468LL;
  unint64_t v109 = 0xE700000000000000LL;
  uint64_t countAndFlagsBits = v11._countAndFlagsBits;
  v11._object = v12;
  String.append(_:)(v11);
  uint64_t v13 = v108;
  uint64_t v14 = v109;
  if (qword_100328D58 != -1) {
    swift_once(&qword_100328D58, sub_10012E58C);
  }
  uint64_t v15 = qword_10032C350;
  type metadata accessor for AMSBagKey(0LL);
  uint64_t v17 = v16;
  sub_10007ACCC( &qword_100328DF0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_10027947C);
  uint64_t v19 = v18;
  swift_bridgeObjectRetain(v15);
  BOOL v20 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  v17,  (char *)&type metadata for Any + 8,  v19);
  swift_bridgeObjectRetain(v14);
  uint64_t v21 = sub_10012ADC4(v20, v15, v13, v14);
  sub_10007B980();
  *(void *)&v8[OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_bag] = v21;
  if (qword_100328B68 != -1) {
    swift_once(&qword_100328B68, sub_10012B154);
  }
  unint64_t v99 = (unint64_t)v12;
  id v101 = v8;
  id v22 = (void *)qword_10033E1F0;
  uint64_t v23 = sub_10007B1FC(&qword_10032A500);
  uint64_t v110 = (void *)v23;
  uint64_t v108 = (uint64_t)&off_1002EA1E0;
  sub_1001341A4();
  id v24 = v22;
  sub_1001341FC( (uint64_t)v24,  v24,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328B90 != -1) {
    swift_once(&qword_100328B90, sub_10012B394);
  }
  id v25 = (void *)qword_10033E218;
  uint64_t v26 = sub_10007B1FC((uint64_t *)&unk_10032C440);
  uint64_t inited = swift_initStackObject(v26, v106);
  __int128 v102 = xmmword_10027A330;
  *(_OWORD *)(inited + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027A330;
  *(void *)(inited + 32) = 0x702D6C72752D3276LL;
  *(void *)(inited + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0xEF736E7265747461LL;
  *(void *)(inited + 48) = &off_1002EA210;
  int v97 = (void *)v23;
  *(void *)(inited + 72) = v23;
  strcpy((char *)(inited + 80), "v2-mapped-urls");
  *(_BYTE *)(inited + 95) = -18;
  uint64_t v28 = sub_10007B1FC((uint64_t *)&unk_10032A690);
  uint64_t v29 = sub_1000AA314(v28, 96LL);
  *(_OWORD *)(v29 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v102;
  strcpy((char *)(v29 + 32), "/subscriptions");
  *(_BYTE *)(v29 + 47) = -18;
  uint64_t v108 = 0LL;
  unint64_t v109 = 0xE000000000000000LL;
  id v30 = v25;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRetain(v14);
  sub_10007B980();
  uint64_t v108 = v13;
  unint64_t v109 = v14;
  v31._uint64_t countAndFlagsBits = 0x697263736275732FLL;
  v31._object = (void *)0xEE00736E6F697470LL;
  String.append(_:)(v31);
  unint64_t v32 = v109;
  *(void *)(v29 + 48) = v108;
  *(void *)(v29 + 56) = v32;
  *(void *)(v29 + 64) = 0xD00000000000001ALL;
  *(void *)(v29 + 72) = 0x80000001002A4A60LL;
  uint64_t v108 = 0LL;
  unint64_t v109 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(v109);
  uint64_t v108 = v13;
  unint64_t v109 = v14;
  v33._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v33._object = (void *)0x80000001002A4A60LL;
  String.append(_:)(v33);
  unint64_t v34 = v109;
  *(void *)(v29 + 80) = v108;
  *(void *)(v29 + 88) = v34;
  uint64_t v35 = Dictionary.init(dictionaryLiteral:)( v29,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  *(void *)(inited + 120) = sub_10007B1FC((uint64_t *)&unk_10032C450);
  *(void *)(inited + 96) = v35;
  uint64_t v36 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v110 = (void *)sub_10007B1FC(&qword_10032A580);
  uint64_t v108 = v36;
  sub_1001341A4();
  sub_100134208( (uint64_t)&v108,  v30,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  sub_10007CB7C(0LL, &qword_10032C460, off_1002E5C38);
  sub_10012A904();
  uint64_t v38 = v37;
  id v39 = objc_msgSend(v103, "getStorefrontWithContext:");
  id v40 = &unk_10033E000;
  if (v39)
  {
    uint64_t v41 = v39;
    type metadata accessor for OctaneStorefrontKey(0LL);
    uint64_t v43 = v42;
    sub_10007ACCC( &qword_100329088,  (uint64_t (*)(uint64_t))type metadata accessor for OctaneStorefrontKey,  (uint64_t)&unk_10027A2A8);
    uint64_t v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v41, v43, &type metadata for String);

    if (qword_100328B98 != -1) {
      swift_once(&qword_100328B98, sub_10012B42C);
    }
    id v45 = (id)qword_10033E220;
    id v46 = sub_10013442C();
    sub_1001342D4((uint64_t)v46);
    sub_1001342C8();
    if (&unk_10033E000) {
      sub_100134480();
    }
    else {
      sub_100134434();
    }
    sub_1001341A4();
    sub_100134208( (uint64_t)&v108,  v41,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    if (qword_100328BB0 != -1) {
      swift_once(&qword_100328BB0, sub_10012B5A4);
    }
    id v60 = (id)qword_10033E238;
    id v61 = sub_10013442C();
    sub_1001342D4((uint64_t)v61);
    sub_1001342C8();
    if (&unk_10033E000) {
      sub_100134480();
    }
    else {
      sub_100134434();
    }
    sub_1001341A4();
    sub_100134208( (uint64_t)&v108,  v41,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    if (qword_100328C50 != -1) {
      swift_once(&qword_100328C50, sub_10012BF10);
    }
    id v62 = (id)qword_10033E2D8;
    id v63 = [v103 getStringValueForIdentifier:4 withContext:v38];
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      unint64_t v67 = v66;

      uint64_t v108 = v65;
      unint64_t v109 = v67;
      v107[0] = 95LL;
      v107[1] = 0xE100000000000000LL;
      v104[0] = 45LL;
      v104[1] = 0xE100000000000000LL;
      unint64_t v68 = sub_1000A9B34();
      uint64_t v41 = (void *)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v107,  v104,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v68,  v68,  v68);
      id v40 = v69;
      swift_bridgeObjectRelease(v67);
      uint64_t v110 = &type metadata for String;
      uint64_t v108 = (uint64_t)v41;
      unint64_t v109 = (unint64_t)v40;
    }

    else
    {
      sub_100134434();
    }

    sub_1001341A4();
    sub_100134208( (uint64_t)&v108,  v62,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    if (qword_100328CD8 != -1) {
      swift_once(&qword_100328CD8, sub_10012C720);
    }
    id v70 = (id)qword_10033E360;
    id v71 = sub_10013442C();
    sub_1001342D4((uint64_t)v71);
    sub_1001342C8();
    if (v40) {
      sub_100134480();
    }
    else {
      sub_100134434();
    }
    sub_1001341A4();
    sub_100134208( (uint64_t)&v108,  v41,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    if (qword_100328CE0 != -1) {
      swift_once(&qword_100328CE0, sub_10012C798);
    }
    id v72 = (id)qword_10033E368;
    id v73 = sub_10013442C();
    sub_1001342D4((uint64_t)v73);
    sub_1001342C8();
    swift_bridgeObjectRelease(v44);
    if (v40) {
      sub_100134480();
    }
    else {
      sub_100134434();
    }
    uint64_t v50 = countAndFlagsBits;
    unint64_t v53 = v99;
    unint64_t v49 = v101;
    sub_1001341A4();
    id v59 = v41;
  }

  else
  {
    if (qword_100328B98 != -1) {
      swift_once(&qword_100328B98, sub_10012B42C);
    }
    uint64_t v47 = (void *)qword_10033E220;
    uint64_t v110 = &type metadata for String;
    uint64_t v108 = 21333LL;
    unint64_t v109 = 0xE200000000000000LL;
    sub_1001341A4();
    id v48 = v47;
    sub_1001341FC( (uint64_t)v48,  v48,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    unint64_t v49 = v101;
    uint64_t v50 = countAndFlagsBits;
    if (qword_100328BB0 != -1) {
      swift_once(&qword_100328BB0, sub_10012B5A4);
    }
    uint64_t v51 = (void *)qword_10033E238;
    uint64_t v110 = &type metadata for String;
    uint64_t v108 = 4477781LL;
    unint64_t v109 = 0xE300000000000000LL;
    sub_1001341A4();
    id v52 = v51;
    sub_1001341FC( (uint64_t)v52,  v52,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    unint64_t v53 = v99;
    if (qword_100328C50 != -1) {
      swift_once(&qword_100328C50, sub_10012BF10);
    }
    uint64_t v54 = (void *)qword_10033E2D8;
    uint64_t v110 = &type metadata for String;
    uint64_t v108 = 0x53552D6E65LL;
    unint64_t v109 = 0xE500000000000000LL;
    sub_1001341A4();
    id v55 = v54;
    sub_1001341FC( (uint64_t)v55,  v55,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    if (qword_100328CD8 != -1) {
      swift_once(&qword_100328CD8, sub_10012C720);
    }
    uint64_t v56 = (void *)qword_10033E360;
    uint64_t v110 = &type metadata for String;
    uint64_t v108 = 4281173LL;
    unint64_t v109 = 0xE300000000000000LL;
    sub_1001341A4();
    id v57 = v56;
    sub_1001341FC( (uint64_t)v57,  v57,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
    sub_100134210();
    if (qword_100328CE0 != -1) {
      swift_once(&qword_100328CE0, sub_10012C798);
    }
    uint64_t v58 = (void *)qword_10033E368;
    uint64_t v110 = &type metadata for String;
    uint64_t v108 = 0x313434333431LL;
    unint64_t v109 = 0xE600000000000000LL;
    sub_1001341A4();
    id v59 = v58;
  }

  sub_100134208( (uint64_t)&v108,  v59,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328C58 != -1) {
    swift_once(&qword_100328C58, sub_10012BF70);
  }
  uint64_t v74 = (void *)qword_10033E2E0;
  uint64_t v110 = &type metadata for Double;
  uint64_t v108 = 0x3FF0000000000000LL;
  sub_1001341A4();
  id v75 = v74;
  sub_1001341FC( (uint64_t)v75,  v75,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328C78 != -1) {
    swift_once(&qword_100328C78, sub_10012C16C);
  }
  Class v76 = (void *)qword_10033E300;
  uint64_t v110 = &type metadata for String;
  uint64_t v108 = v50;
  unint64_t v109 = v53;
  sub_1001341A4();
  id v77 = v76;
  sub_10008618C();
  sub_100134208( (uint64_t)&v108,  v77,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328C80 != -1) {
    swift_once(&qword_100328C80, sub_10012C1E4);
  }
  uint64_t v78 = (void *)qword_10033E308;
  uint64_t v110 = &type metadata for String;
  uint64_t v108 = v50;
  unint64_t v109 = v53;
  sub_1001341A4();
  sub_10008618C();
  id v79 = v78;
  sub_1001341FC( (uint64_t)v79,  v79,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328CA8 != -1) {
    swift_once(&qword_100328CA8, sub_10012C444);
  }
  uint64_t v80 = (void *)qword_10033E330;
  uint64_t v110 = &type metadata for Int;
  uint64_t v108 = 25LL;
  sub_1001341A4();
  id v81 = v80;
  sub_1001341FC( (uint64_t)v81,  v81,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328CE8 != -1) {
    swift_once(&qword_100328CE8, sub_10012C7F8);
  }
  __int128 v82 = (void *)qword_10033E370;
  uint64_t v110 = &type metadata for Int;
  uint64_t v108 = 2LL;
  sub_1001341A4();
  id v83 = v82;
  sub_1001341FC( (uint64_t)v83,  v83,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328CF8 != -1) {
    swift_once(&qword_100328CF8, sub_10012C8F0);
  }
  uint64_t v84 = (void *)qword_10033E380;
  uint64_t v110 = v98;
  sub_10009D60C(&v108);
  id v85 = v84;
  Date.init()(v85);
  sub_1001341A4();
  sub_100134208( (uint64_t)&v108,  v85,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328D00 != -1) {
    swift_once(&qword_100328D00, sub_10012C96C);
  }
  unint64_t v86 = (void *)qword_10033E388;
  uint64_t v110 = &type metadata for Int;
  uint64_t v108 = 1LL;
  sub_1001341A4();
  id v87 = v86;
  sub_1001341FC( (uint64_t)v87,  v87,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328D08 != -1) {
    swift_once(&qword_100328D08, sub_10012C9E8);
  }
  uint64_t v88 = (void *)qword_10033E390;
  uint64_t v110 = &type metadata for Int;
  uint64_t v108 = 50LL;
  sub_1001341A4();
  id v89 = v88;
  sub_1001341FC( (uint64_t)v89,  v89,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();
  if (qword_100328D20 != -1) {
    swift_once(&qword_100328D20, sub_10012CB68);
  }
  int v90 = (void *)qword_10033E3A8;
  uint64_t v91 = sub_10007B1FC((uint64_t *)&unk_10032B180);
  uint64_t v92 = sub_1000AA314(v91, 64LL);
  *(_OWORD *)(v92 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v102;
  *(void *)(v92 + 32) = 0x736F686C61636F6CLL;
  *(void *)(v92 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0xE900000000000074LL;
  *(void *)(v92 + 48) = v50;
  *(void *)(v92 + 56) = v53;
  uint64_t v110 = v97;
  uint64_t v108 = v92;
  sub_1001341A4();
  id v93 = v90;
  sub_1001341FC( (uint64_t)v93,  v93,  (void (*)(uint64_t, uint64_t, uint64_t))sub_100133130,  (void (*)(_OWORD *__return_ptr, void *))sub_100132894);
  sub_100134210();

  int v94 = (objc_class *)type metadata accessor for Bag.XcodeBag(0LL);
  v105.receiver = v49;
  v105.super_class = v94;
  return objc_msgSendSuper2(&v105, "init");
}

id sub_10012FD28(void *a1)
{
  return sub_100130790(a1, 0LL);
}

id sub_10012FD7C(void *a1)
{
  return sub_100130790(a1, 1LL);
}

void sub_10012FDD0(uint64_t a1, void (**a2)(const void *, unint64_t, void *))
{
  uint64_t v78 = a2;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  __chkstk_darwin(v3);
  id v71 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v69);
  uint64_t v70 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v77 = v6;
  __chkstk_darwin(v6);
  id v75 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v79 = [objc_allocWithZone(AMSSnapshotBagBuilder) init];
  uint64_t v8 = (uint64_t *)(a1 + OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_bag);
  swift_beginAccess(v8, v97, 0LL, 0LL);
  uint64_t v9 = *v8;
  swift_bridgeObjectRetain(*v8);
  Swift::String v10 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_1001330F8(v9, v88);
  uint64_t v85 = v88[0];
  int64_t v86 = v88[3];
  unint64_t v11 = v88[4];
  uint64_t v80 = v88[1];
  int64_t v81 = (unint64_t)(v88[2] + 64LL) >> 6;
  uint64_t v12 = &v92;
  uint64_t v83 = (uint64_t)v93 + 8;
  uint64_t v84 = (uint64_t)v95 + 8;
  __int128 v82 = v91;
  uint64_t v74 = v9;
  swift_bridgeObjectRetain(v9);
  if (!v11) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v14 = v13 | (v86 << 6);
  while (1)
  {
    uint64_t v19 = *(void **)(*(void *)(v85 + 48) + 8 * v14);
    sub_10007B1C0(*(void *)(v85 + 56) + 32 * v14, v84);
    *(void *)&v95[0] = v19;
    v93[0] = v95[0];
    v93[1] = v95[1];
    uint64_t v94 = v96;
    v91[4] = v19;
    uint64_t v20 = v83;
    uint64_t v21 = v12;
    sub_10007B1C0(v83, (uint64_t)v12);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v9 = v23;
    int v90 = v19;
    id v24 = v82;
    sub_10007B1C0(v20, (uint64_t)v82);
    sub_1000853B0(v24, v89);
    id v25 = v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v87 = v10;
    unint64_t v27 = sub_100132130(v22, v9);
    uint64_t v29 = v10[2];
    BOOL v30 = (v28 & 1) == 0;
    Swift::Int v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }

    unint64_t v32 = v27;
    char v33 = v28;
    sub_10007B1FC((uint64_t *)&unk_10032B190);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31)) {
      break;
    }
LABEL_25:
    Swift::String v10 = v87;
    if ((v33 & 1) != 0)
    {
      uint64_t v36 = (void *)(v87[7] + 32 * v32);
      sub_10007B1A0(v36);
      sub_1000853B0(v89, v36);
    }

    else
    {
      v87[(v32 >> 6) + 8] |= 1LL << v32;
      id v37 = (uint64_t *)(v10[6] + 16 * v32);
      *id v37 = v22;
      v37[1] = v9;
      sub_1000853B0(v89, (_OWORD *)(v10[7] + 32 * v32));
      uint64_t v38 = v10[2];
      BOOL v39 = __OFADD__(v38, 1LL);
      uint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_40;
      }
      v10[2] = v40;
      swift_bridgeObjectRetain(v9);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v21;
    sub_10007B1A0(v21);
    sub_1000CEEA8((uint64_t)v93, (uint64_t *)&unk_10032C420);
    if (v11) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v86 + 1;
    if (__OFADD__(v86, 1LL)) {
      goto LABEL_41;
    }
    if (v15 >= v81) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v80 + 8 * v15);
    int64_t v17 = v86 + 1;
    if (!v16)
    {
      int64_t v17 = v86 + 2;
      if (v86 + 2 >= v81) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v80 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v86 + 3;
        if (v86 + 3 >= v81) {
          goto LABEL_31;
        }
        unint64_t v16 = *(void *)(v80 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v86 + 4;
          if (v86 + 4 >= v81) {
            goto LABEL_31;
          }
          unint64_t v16 = *(void *)(v80 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v86 + 5;
            if (v86 + 5 >= v81) {
              goto LABEL_31;
            }
            unint64_t v16 = *(void *)(v80 + 8 * v17);
            if (!v16)
            {
              int64_t v17 = v86 + 6;
              if (v86 + 6 >= v81) {
                goto LABEL_31;
              }
              unint64_t v16 = *(void *)(v80 + 8 * v17);
              if (!v16)
              {
                int64_t v18 = v86 + 7;
                while (v18 < v81)
                {
                  unint64_t v16 = *(void *)(v80 + 8 * v18++);
                  if (v16)
                  {
                    int64_t v17 = v18 - 1;
                    goto LABEL_20;
                  }
                }

LABEL_42:
                swift_once(&qword_100328B40, sub_1000F4208);
                goto LABEL_34;
              }
            }
          }
        }
      }
    }

id sub_1001305EC(void *a1)
{
  return sub_100130790(a1, 2LL);
}

id sub_100130640(void *a1)
{
  return sub_100130790(a1, 3LL);
}

id sub_100130694(void *a1)
{
  return sub_100130790(a1, 4LL);
}

id sub_1001306E8(void *a1)
{
  return sub_100130790(a1, 5LL);
}

id sub_10013073C(void *a1)
{
  return sub_100130790(a1, 6LL);
}

id sub_100130790(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (uint64_t *)(v2 + OBJC_IVAR____TtCC9storekitd3BagP33_548B24E65CA9FE1CAECE2177332C57EA8XcodeBag_bag);
  swift_beginAccess(v8, v31, 0LL, 0LL);
  uint64_t v9 = *v8;
  id v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10012A8B4((uint64_t)v10, v9, &v29);

  swift_bridgeObjectRelease();
  if (v30)
  {
    sub_1000853B0(&v29, v32);
    switch(a2)
    {
      case 0LL:
        sub_10007B1C0((uint64_t)v32, (uint64_t)&v29);
        unint64_t v11 = &qword_100329320;
        uint64_t v12 = &OBJC_CLASS___NSArray_ptr;
        goto LABEL_11;
      case 1LL:
      case 2LL:
      case 3LL:
        sub_10007B1C0((uint64_t)v32, (uint64_t)&v29);
        unint64_t v11 = (unint64_t *)&qword_100329340;
        uint64_t v12 = &OBJC_CLASS___NSNumber_ptr;
        goto LABEL_11;
      case 4LL:
        sub_10007B1C0((uint64_t)v32, (uint64_t)&v29);
        unint64_t v11 = &qword_100329330;
        uint64_t v12 = &OBJC_CLASS___NSString_ptr;
        goto LABEL_11;
      case 5LL:
        sub_10007B1C0((uint64_t)v32, (uint64_t)&v29);
        URL.init(string:)(v28[0], v28[1]);
        swift_bridgeObjectRelease();
        uint64_t v17 = type metadata accessor for URL(0LL);
        URL._bridgeToObjectiveC()(v18);
        unint64_t v16 = v19;
        (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v7, v17);
        goto LABEL_13;
      case 6LL:
        sub_10007B1C0((uint64_t)v32, (uint64_t)&v29);
        unint64_t v11 = &qword_100329310;
        uint64_t v12 = &OBJC_CLASS___NSDictionary_ptr;
LABEL_11:
        uint64_t v20 = sub_10007CB7C(0LL, v11, v12);
        unint64_t v16 = (void *)v28[0];
LABEL_13:
        id v15 = [(id)objc_opt_self(AMSPromise) promiseWithResult:v16];
        break;
      default:
LABEL_14:
        id v21 = (id)AMSError(200LL, 0LL, 0LL, 0LL);
        uint64_t v22 = (void *)_convertErrorToNSError(_:)(v21);
        id v15 = [(id)objc_opt_self(AMSPromise) promiseWithError:v22];

        unint64_t v16 = 0LL;
        break;
    }

    sub_10007B1A0(v32);
  }

  else
  {
    sub_1000CEEA8((uint64_t)&v29, (uint64_t *)&unk_100328ED0);
    id v13 = (id)AMSError(204LL, 0LL, 0LL, 0LL);
    unint64_t v14 = (void *)_convertErrorToNSError(_:)(v13);
    id v15 = [(id)objc_opt_self(AMSPromise) promiseWithError:v14];

    unint64_t v16 = 0LL;
  }

  uint64_t v23 = (void *)objc_opt_self(&OBJC_CLASS___AMSBagValue);
  id v24 = v10;
  id v25 = [v23 bagValueWithKey:v24 valueType:a2 valuePromise:v15];

  return v25;
}

void sub_100130B30()
{
}

id sub_100130B7C()
{
  return sub_100129294(0LL, (uint64_t (*)(void))type metadata accessor for Bag.XcodeBag);
}

uint64_t sub_100130BD0()
{
  return type metadata accessor for Bag.XcodeBag(0LL);
}

uint64_t type metadata accessor for Bag.XcodeBag(uint64_t a1)
{
  uint64_t result = qword_10032C3F0;
  if (!qword_10032C3F0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Bag.XcodeBag);
  }
  return result;
}

void sub_100130C10(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_10027CDE8;
  sub_100130C94(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
  }

void sub_100130C94(uint64_t a1)
{
  if (!qword_10032C400)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10032C400);
    }
  }

Swift::Int sub_100130CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = sub_1000CEF70();
  sub_10007BA44();
  return v5;
}

void sub_100130D54()
{
  if ((v3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v4 != v5)
    {
      sub_1000C65E4();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  sub_1001342E0();
  if (v2)
  {
    uint64_t v6 = sub_10007B1FC((uint64_t *)&unk_10032C520);
    uint64_t v7 = (const void *)sub_1000AA314(v6, 32 * v2 + 32);
    sub_1001343F8(v7);
    sub_10013438C(v8);
  }

  if ((v1 & 1) != 0)
  {
    uint64_t v9 = (char *)sub_100134508();
    sub_1001318C8(v9, v10, v11);
    *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    sub_100085EF0();
  }

  else
  {
    uint64_t v12 = sub_100134340();
    sub_1001312A4(v12, v13, v14, v15);
  }

  sub_1000AB000();
}

void sub_100130DF4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100130E08()
{
  if ((v3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v4 != v5)
    {
      sub_1000C65E4();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  sub_1001342E0();
  if (v2)
  {
    uint64_t v6 = sub_10007B1FC((uint64_t *)&unk_10032A680);
    uint64_t v7 = (const void *)sub_1000AA314(v6, 8 * v2 + 32);
    sub_1001343F8(v7);
    sub_10013438C(v8);
  }

  if ((v1 & 1) != 0)
  {
    uint64_t v9 = (char *)sub_100134508();
    sub_100131938(v9, v10, v11);
    *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    sub_100085EF0();
  }

  else
  {
    uint64_t v12 = sub_100134340();
    sub_10013139C(v12, v13, v14, v15);
  }

  sub_1000AB000();
}

uint64_t sub_100130EA8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100130EBC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_10032C4C0,  (void (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100130EBC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v10 != v11)
    {
      sub_1000C65E4();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_1001341B8();
        uint64_t v30 = "Division by zero";
        uint64_t v31 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v30,  v31,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_1000C62BC();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_10007B1FC(a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    sub_1001341B8();
    uint64_t v30 = "Division results in an overflow";
    uint64_t v31 = 31LL;
    goto LABEL_25;
  }

  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  if ((a1 & 1) != 0)
  {
    sub_100131B0C(a4 + v23, v12, (unint64_t)v19 + v23, a6);
    *(void *)(a4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    sub_100085EF0();
  }

  else
  {
    uint64_t v24 = sub_1001344E8();
    sub_1001315A4(v24, v25, v26, v27, v28);
  }

  return (uint64_t)v19;
}

void sub_100131058()
{
  if ((v3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v4 != v5)
    {
      sub_1000C65E4();
      if (v4)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  sub_1001342E0();
  if (v2)
  {
    uint64_t v6 = sub_10007B1FC((uint64_t *)&unk_10032B180);
    uint64_t v7 = (const void *)sub_1000AA314(v6, 16 * v2 + 32);
    sub_1001343F8(v7);
    sub_10013438C(v8);
  }

  if ((v1 & 1) != 0)
  {
    uint64_t v9 = (char *)sub_100134508();
    sub_100131864(v9, v10, v11);
    *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    sub_100085EF0();
  }

  else
  {
    uint64_t v12 = sub_100134340();
    sub_1001314B0(v12, v13, v14, v15);
  }

  sub_1000AB000();
}

uint64_t sub_1001310F8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100130EBC( a1,  a2,  a3,  a4,  &qword_10032C4E8,  (void (*)(void))type metadata accessor for PurchaseIntentInternal);
}

uint64_t sub_10013110C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100130EBC( a1,  a2,  a3,  a4,  (uint64_t *)&unk_10032C510,  (void (*)(void))&type metadata accessor for URL);
}

void sub_100131120()
{
  if ((v4 & 1) != 0)
  {
    sub_1000C62E4();
    if (v5 != v6)
    {
      sub_1000C65E4();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  sub_1001342E0();
  if (v3)
  {
    uint64_t v7 = sub_10007B1FC(&qword_10032C500);
    uint64_t v8 = (const void *)sub_1000AA314(v7, 24 * v3 + 32);
    sub_1001343F8(v8);
    *(void *)(v3 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v2;
    *(void *)(v3 + 24) = 2 * (v9 / 24);
  }

  if ((v1 & 1) != 0)
  {
    uint64_t v10 = (char *)sub_100134508();
    sub_10013199C(v10, v11, v12);
    *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    sub_100085EF0();
  }

  else
  {
    uint64_t v13 = sub_100134340();
    sub_100131684(v13, v14, v15, v16);
  }

  sub_1000C6594();
}

void sub_1001311CC(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1001311E0(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v8 != v9)
    {
      sub_1000C65E4();
      if (v8)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = sub_10007B1FC(a5);
    uint64_t v13 = (char *)sub_1000AA314(v12, 24 * v11 + 32);
    size_t v14 = j__malloc_size(v13);
    *((void *)v13 + 2) = v10;
    *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 24);
  }

  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    sub_100131A98((char *)(a4 + 32), v10, v13 + 32);
    *(void *)(a4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    sub_100085EF0();
  }

  else
  {
    uint64_t v15 = sub_1001344E8();
    sub_1001317A0(v15, v16, v17, v18);
  }

  sub_1000C6594();
}

uint64_t sub_1001312A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10013139C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 8 * a1 + 32;
  unint64_t v8 = a3 + 8 * v4;
  if (v7 >= v8 || v7 + 8 * v4 <= a3)
  {
    sub_10007B1FC(&qword_10032A580);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001314B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001315A4( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_1001341B8();
    sub_100134228();
    goto LABEL_11;
  }

  a5(0LL);
  sub_1001344D4();
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = a4 + v9 + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_100085EF0();
    return v14;
  }

  sub_1001341B8();
  sub_100134218();
LABEL_11:
  uint64_t result = sub_1001341DC(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  __break(1u);
  return result;
}

uint64_t sub_100131684(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v4;
  if (v7 >= v8 || v7 + 24 * v4 <= a3)
  {
    sub_10007B1FC(&qword_10032C508);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001317A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    sub_1001341B8();
    sub_100134228();
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_100085EF0();
    return v6;
  }

  sub_1001341B8();
  sub_100134218();
LABEL_11:
  uint64_t result = sub_1001341DC(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

char *sub_100131864(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    uint64_t result = (char *)sub_1001341DC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v4,  (uint64_t)"Swift/UnsafePointer.swift",  v5,  v6,  v7,  v8);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1001341CC(a3, result);
  }

  return result;
}

char *sub_1001318C8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    uint64_t result = (char *)sub_1001341DC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v4,  (uint64_t)"Swift/UnsafePointer.swift",  v5,  v6,  v7,  v8);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1001341CC(a3, result);
  }

  return result;
}

void sub_10013192C(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

char *sub_100131938(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    uint64_t result = (char *)sub_1001341DC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v4,  (uint64_t)"Swift/UnsafePointer.swift",  v5,  v6,  v7,  v8);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1001341CC(a3, result);
  }

  return result;
}

char *sub_10013199C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }

  return __src;
}

char *sub_100131A28(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    uint64_t result = (char *)sub_1001341DC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v4,  (uint64_t)"Swift/UnsafePointer.swift",  v5,  v6,  v7,  v8);
    __break(1u);
  }

  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_1001341CC(a3, result);
  }

  return result;
}

char *sub_100131A98(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    uint64_t result = (char *)sub_1001341DC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v4,  (uint64_t)"Swift/UnsafePointer.swift",  v5,  v6,  v7,  v8);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1001341CC(a3, result);
  }

  return result;
}

void sub_100131B00(unint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_100131B0C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_1001341DC( (uint64_t)"Fatal error",  11LL,  2LL,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  55LL,  v11,  (uint64_t)"Swift/UnsafePointer.swift",  v12,  v13,  v14,  v15);
    __break(1u);
  }

  else if (a3 < a1 || (a4(0LL), sub_100134420(), a1 + v8 * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = sub_1001344C0();
    swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 == a1)
  {
    sub_100008600();
  }

  else
  {
    uint64_t v9 = sub_1001344C0();
    swift_arrayInitWithTakeBackToFront(v9);
  }

uint64_t sub_100131BD0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_100134228();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return sub_10013426C(a3);
    }
    sub_1001341B8();
    sub_100134218();
  }

  uint64_t result = sub_1001341DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100131C68(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_100134228();
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return sub_10013426C(a3);
    }
    sub_1001341B8();
    sub_100134218();
  }

  uint64_t result = sub_1001341DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100131D04(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100131F94(a1, a2, a3);
}

uint64_t sub_100131D10(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_100134228();
  }

  else
  {
    sub_1001343CC();
    unint64_t v5 = v3 + 8 * v4;
    if (v2 + 8 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_10007B1FC(&qword_10032A580);
      uint64_t v8 = sub_10013432C();
      return sub_100134238(v8);
    }

    sub_1001341B8();
    sub_100134218();
  }

  uint64_t result = sub_1001341DC(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_100131DB0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_100134228();
  }

  else
  {
    sub_1001343CC();
    unint64_t v5 = v3 + 48 * v4;
    if (v2 + 48 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_10007B1FC(&qword_10032A6A8);
      uint64_t v8 = sub_10013432C();
      return sub_100134238(v8);
    }

    sub_1001341B8();
    sub_100134218();
  }

  uint64_t result = sub_1001341DC(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

void *sub_100131E54(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_100134228();
  }

  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst) {
      return memcpy(__dst, __src, 8 * a2);
    }
    sub_1001341B8();
    sub_100134218();
  }

  uint64_t result = (void *)sub_1001341DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100131EEC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_100134228();
  }

  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3) {
      return sub_10013426C(a3);
    }
    sub_1001341B8();
    sub_100134218();
  }

  uint64_t result = sub_1001341DC(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_100131F88(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100131F94(a1, a2, a3);
}

uint64_t sub_100131F94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_1001341B8();
    sub_100134228();
  }

  else
  {
    sub_1001343CC();
    v6(0LL);
    sub_100134420();
    uint64_t v8 = v7 * v3;
    unint64_t v9 = a3 + v8;
    unint64_t v10 = v4 + v8;
    if (v9 <= v4 || v10 <= a3)
    {
      uint64_t v12 = sub_10013432C();
      return sub_100134238(v12);
    }

    sub_1001341B8();
    sub_100134218();
  }

  uint64_t result = sub_1001341DC(v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24);
  __break(1u);
  return result;
}

void sub_100132038(void (*a1)(void))
{
}

void sub_100132054()
{
  uint64_t v3 = v2();
  unint64_t v4 = (void *)v3;
  uint64_t v5 = *v1;
  uint64_t v6 = *v1 + 8;
  if (v3) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5);
  *char v1 = v6;
  uint64_t v7 = *v0;
  if (*v0)
  {
    *uint64_t v7 = v4;
    void *v0 = v7 + 1;
  }

  else
  {
  }

unint64_t sub_100132100(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10013230C(a1, v4);
}

unint64_t sub_100132130(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = sub_1000CEF70();
  return sub_1001323D0(a1, a2, v4);
}

unint64_t sub_100132188(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_1001324B0(a1, v5);
}

uint64_t sub_100132208(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = sub_1000CEF70();
  swift_bridgeObjectRelease(v4);
  return sub_100132764(a1, v5);
}

unint64_t sub_100132290(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_10032C4B0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10027A1B8);
  _CFObject.hash(into:)(v7, v3, v4);
  Swift::Int v5 = sub_1000CEF70();
  return sub_100132624(a1, v5);
}

unint64_t sub_10013230C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10009BEC0(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100087388((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_1001323D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_1001324B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

unint64_t sub_100132624(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    uint64_t v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    sub_10007ACCC( &qword_10032C4B0,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10027A1B8);
    uint64_t v12 = v11;
    id v13 = v10;
    char v14 = static _CFObject.== infix(_:_:)(v13, a1, v9, v12);

    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      for (unint64_t i = (i + 1) & v15; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v15)
      {
        id v16 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v17 = static _CFObject.== infix(_:_:)(v16, a1, v9, v12);

        if ((v17 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_100132764(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  sub_1001342F0();
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = sub_100134494();
    uint64_t v8 = v7;
    uint64_t v9 = sub_10013448C();
    if (v6 == v9 && v8 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v8, 2LL);
      return v4;
    }

    uint64_t v12 = v10;
    char v13 = sub_1000C6320(v6, v8, v9, v10);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v12);
    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v3;
      uint64_t v4 = (v4 + 1) & v14;
      sub_1001342F0();
      if ((v15 & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = sub_100134494();
          uint64_t v8 = v17;
          uint64_t v18 = sub_10013448C();
          if (v16 == v18 && v8 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = sub_1000C6320(v16, v8, v18, v19);
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            uint64_t v4 = (v4 + 1) & v14;
            sub_1001342F0();
            if ((v23 & 1) != 0) {
              continue;
            }
          }

          return v4;
        }

        goto LABEL_16;
      }
    }
  }

  return v4;
}

double sub_100132894@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100132188(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v17 = *v3;
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    Swift::Int v11 = *(void *)(v10 + 24);
    sub_10007B1FC(&qword_10032C468);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);

    sub_1000853B0((_OWORD *)(*(void *)(v17 + 56) + 32 * v7), a2);
    type metadata accessor for AMSBagKey(0LL);
    uint64_t v13 = v12;
    sub_10007ACCC( &qword_100328DF0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_10027947C);
    _NativeDictionary._delete(at:)(v7, v17, v13, (char *)&type metadata for Any + 8, v14);
    uint64_t v15 = *v3;
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

double sub_1001329CC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  uint64_t v7 = sub_100132208(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v17 = *v3;
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    Swift::Int v11 = *(void *)(v10 + 24);
    sub_10007B1FC(&qword_10032C4A0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);

    sub_1000853B0((_OWORD *)(*(void *)(v17 + 56) + 32 * v7), a2);
    type metadata accessor for SKServerKey(0LL);
    uint64_t v13 = v12;
    sub_10007ACCC( &qword_100329078,  (uint64_t (*)(uint64_t))type metadata accessor for SKServerKey,  (uint64_t)&unk_10027A268);
    _NativeDictionary._delete(at:)(v7, v17, v13, (char *)&type metadata for Any + 8, v14);
    uint64_t v15 = *v3;
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease(v15);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

double sub_100132B04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  sub_10008618C();
  sub_100134470();
  sub_1001343E8();
  if ((a2 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v4);
    *(void *)int v28 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    int v8 = sub_10007B1FC((uint64_t *)&unk_10032B190);
    BOOL v16 = sub_100134350(v8, v9, v10, v11, v12, v13, v14, v15, v26, v28[0]);
    sub_100134378(v16, v17, v18, v19, v20, v21, v22, v23, v27, v29);
    sub_1000853B0((_OWORD *)(*(void *)(a2 + 56) + 32 * a1), a3);
    _NativeDictionary._delete(at:)( a1,  a2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    uint64_t v24 = *v4;
    *uint64_t v4 = a2;
    sub_1001341E8(v24);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_100132BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100132130(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v19 = *v4;
    uint64_t v12 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    Swift::Int v13 = *(void *)(v12 + 24);
    sub_10007B1FC((uint64_t *)&unk_10032C488);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13);
    swift_bridgeObjectRelease(*(void *)(*(void *)(v19 + 48) + 16 * v9 + 8));
    uint64_t v14 = *(void *)(v19 + 56);
    uint64_t v15 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
    sub_1000C4A8C(v14 + *(void *)(*(void *)(v15 - 8) + 72LL) * v9, a3);
    _NativeDictionary._delete(at:)(v9, v19, &type metadata for String, v15, &protocol witness table for String);
    uint64_t v16 = *v4;
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease(v16);
    return sub_10007D0AC(a3, 0LL, 1LL, v15);
  }

  else
  {
    uint64_t v18 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
    return sub_10007D0AC(a3, 1LL, 1LL, v18);
  }

double sub_100132D1C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100132100(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v14 = *v3;
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    Swift::Int v11 = *(void *)(v10 + 24);
    sub_10007B1FC(&qword_10032C4B8);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    sub_100087388(*(void *)(v14 + 48) + 40 * v7);
    sub_1000853B0((_OWORD *)(*(void *)(v14 + 56) + 32 * v7), a2);
    _NativeDictionary._delete(at:)( v7,  v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    uint64_t v12 = *v3;
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_100132E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  sub_10008618C();
  sub_100134470();
  sub_1001343E8();
  if ((a2 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v4);
    *(void *)char v35 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    int v8 = sub_10007B1FC(&qword_10032C4A8);
    BOOL v16 = sub_100134350(v8, v9, v10, v11, v12, v13, v14, v15, v33, v35[0]);
    sub_100134378(v16, v17, v18, v19, v20, v21, v22, v23, v34, v36);
    uint64_t v24 = *(void *)(a2 + 56);
    uint64_t v25 = sub_10007B1FC(&qword_10032BD40);
    sub_100134420();
    sub_1000E91F4(v24 + v26 * a1, a3, &qword_10032BD40);
    _NativeDictionary._delete(at:)(a1, a2, &type metadata for String, v25, &protocol witness table for String);
    uint64_t v27 = *v4;
    *uint64_t v4 = a2;
    swift_bridgeObjectRelease(v27);
    uint64_t v28 = sub_100134410();
    uint64_t v31 = v25;
  }

  else
  {
    sub_10007B1FC(&qword_10032BD40);
    uint64_t v28 = sub_100134318();
  }

  return sub_10007D0AC(v28, v29, v30, v31);
}

uint64_t sub_100132F3C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = sub_1001342B8();
  uint64_t v10 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  a3(v5, v4, v7);
  uint64_t v8 = *v3;
  *uint64_t v3 = v10;
  return sub_1001341E8(v8);
}

uint64_t sub_100132F98()
{
  uint64_t v1 = sub_100134290();
  sub_100133348(v1, v2, v3);
  uint64_t v4 = *v0;
  uint64_t *v0 = v6;
  return sub_1001341E8(v4);
}

uint64_t sub_100132FD8()
{
  uint64_t v1 = sub_100134290();
  sub_100133514(v1, v2, v3);
  uint64_t v4 = *v0;
  uint64_t *v0 = v6;
  return sub_1001341E8(v4);
}

uint64_t sub_100133018(_OWORD *a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  sub_1001336F0(a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v2;
  *uint64_t v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100133084( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v12 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  a4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  uint64_t v10 = *v4;
  *uint64_t v4 = v12;
  return sub_1001341E8(v10);
}

uint64_t sub_1001330F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

_OWORD *sub_100133130(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v8 = sub_100132188((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v13 = v8;
  char v14 = v9;
  sub_10007B1FC(&qword_10032C468);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_100132188((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    type metadata accessor for AMSBagKey(0LL);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }

  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = *v4;
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = (void *)(*(void *)(v17 + 56) + 32 * v13);
    sub_10007B1A0(v18);
    return sub_1000853B0(a1, v18);
  }

  else
  {
    sub_100133944(v13, (uint64_t)a2, (uint64_t)a1, v17);
    return a2;
  }

_OWORD *sub_10013323C(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  uint64_t v8 = sub_100132208((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v13 = v8;
  char v14 = v9;
  sub_10007B1FC(&qword_10032C4A0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  uint64_t v15 = sub_100132208((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    type metadata accessor for SKServerKey(0LL);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
    return result;
  }

  unint64_t v13 = v15;
LABEL_5:
  uint64_t v17 = *v4;
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = (void *)(*(void *)(v17 + 56) + 32 * v13);
    sub_10007B1A0(v18);
    return sub_1000853B0(a1, v18);
  }

  else
  {
    sub_100133944(v13, (uint64_t)a2, (uint64_t)a1, v17);
    return a2;
  }

_OWORD *sub_100133348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_10007B1FC((uint64_t *)&unk_10032B190);
  if (!sub_100134364()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_1001343D8();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v6;
  if ((v11 & 1) != 0)
  {
    uint64_t v15 = (void *)(*(void *)(v14 + 56) + 32 * v10);
    sub_10007B1A0(v15);
    return sub_1000853B0(v3, v15);
  }

  else
  {
    sub_100133994(v10, v5, v4, (uint64_t)v3, v14);
    return (_OWORD *)sub_10013427C(v4);
  }

void sub_10013340C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v8 = v6;
  sub_1001343CC();
  Swift::Int v12 = *v6;
  sub_100132130(v13, v14);
  sub_100134304();
  if (v17)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v15;
  char v19 = v16;
  sub_10007B1FC(&qword_10032C4D0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100132130(a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = (void *)*v8;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = (uint64_t *)(v22[7] + 16 * v18);
    swift_bridgeObjectRelease(v23[1]);
    *uint64_t v23 = v7;
    v23[1] = v5;
    sub_100085E98();
  }

  else
  {
    sub_1001339E8(v18, a3, a4, v7, v5, v22);
    swift_bridgeObjectRetain(a4);
  }

void sub_100133514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_10007B1FC(&qword_10032C498);
  if (!sub_100134364()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_1001343D8();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v6;
  if ((v11 & 1) != 0)
  {
    uint64_t v15 = v14[7];

    *(void *)(v15 + 8 * v10) = v3;
  }

  else
  {
    sub_100133A34(v10, v5, v4, v3, v14);
    sub_10013427C(v4);
  }

uint64_t sub_1001335D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_100132130(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10007B1FC((uint64_t *)&unk_10032C488);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100132130(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = v21
        + *(void *)(*(void *)(type metadata accessor for ExternalPurchaseTokenV2Response(0LL) - 8) + 72LL) * v16;
    return sub_10013412C(a1, v22);
  }

  else
  {
    sub_100133A7C(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain(a3);
  }

_OWORD *sub_1001336F0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v9 = sub_100132100(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_10007B1FC(&qword_10032C4B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100132100(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if ((v15 & 1) != 0)
  {
    char v19 = (void *)(v18[7] + 32 * v14);
    sub_10007B1A0(v19);
    return sub_1000853B0(a1, v19);
  }

  else
  {
    sub_10009BEC0(a2, (uint64_t)v21);
    return sub_100133B04(v14, (uint64_t)v21, a1, v18);
  }

void sub_100133814(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_100132130(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10007B1FC(&qword_10032C4A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_100132130(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    uint64_t v22 = sub_10007B1FC(&qword_10032BD40);
    sub_100134170(a1, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v16, &qword_10032BD40);
  }

  else
  {
    sub_100133B7C(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }

void sub_100133944(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_10013439C(a1, a4 + 8 * (a1 >> 6));
  *(void *)(*(void *)(v6 + 48) + 8 * sub_1000E9458(v1, v2, v5) = v7;
  sub_1000853B0(v8, (_OWORD *)(*(void *)(v6 + 56) + 32 * v5));
  uint64_t v9 = *(void *)(a4 + 16);
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v11;
    sub_1000221B0();
  }

void sub_100133994(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_10013439C(a1, a5 + 8 * (a1 >> 6));
  char v8 = (void *)(*(void *)(v7 + 48) + 16 * v6);
  *char v8 = v9;
  v8[1] = v10;
  sub_1000853B0(v11, (_OWORD *)(*(void *)(v7 + 56) + 32 * v6));
  uint64_t v12 = *(void *)(a5 + 16);
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a5 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v14;
    sub_1000221B0();
  }

unint64_t sub_1001339E8( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t sub_100133A34(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100133A7C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  uint64_t result = sub_1000C4A8C(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

_OWORD *sub_100133B04(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_1000853B0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

void sub_100133B7C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_10007B1FC(&qword_10032BD40);
  sub_1000E91F4(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1, &qword_10032BD40);
  uint64_t v11 = a5[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a5[2] = v13;
  }
}

void sub_100133C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      uint64_t v13 = v6 + v9;
    }
    else {
      uint64_t v13 = v6;
    }
    uint64_t v5 = sub_100130EBC( isUniquelyReferenced_nonNull_native,  v13,  1,  v5,  (uint64_t *)&unk_10032C4D8,  (void (*)(void))type metadata accessor for LoadProductsTask);
    *uint64_t v3 = v5;
  }

  type metadata accessor for LoadProductsTask(0LL);
  sub_1001344D4();
  uint64_t v15 = v5 + v14;
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = v5 + v14 + v17 * a1;
  swift_arrayDestroy(v18, v8, v19);
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(v5 + 16);
  if (__OFSUB__(v20, a2))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  sub_100131B0C( v15 + v17 * a2,  v20 - a2,  v18 + v17,  (void (*)(void))type metadata accessor for LoadProductsTask);
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v9);
  uint64_t v23 = v21 + v9;
  if (!v22)
  {
    *(void *)(v5 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v23;
LABEL_16:
    if (v17 < 1)
    {
LABEL_20:
      sub_1000CEEA8(a3, &qword_10032A4A0);
      sub_100085E98();
      return;
    }

    char v24 = 0;
    while ((v24 & 1) == 0)
    {
      sub_10009BF04(a3, v15 + v17 * a1, type metadata accessor for LoadProductsTask);
      v15 += v17;
      char v24 = 1;
      if (v15 + v17 * (a1 - 1) >= v18) {
        goto LABEL_20;
      }
    }

    goto LABEL_27;
  }

char *sub_100133D94(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native() || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_100131058();
    uint64_t v4 = v9;
  }

  uint64_t v10 = (char *)(v4 + 32 + 16LL * (void)v6);
  uint64_t result = (char *)swift_arrayDestroy(v10, v7, &type metadata for String);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  uint64_t result = sub_100131864((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v14;
LABEL_13:
    *uint64_t v2 = v4;
    return result;
  }

uint64_t sub_100133E90(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v20 = a1 + 32;
    uint64_t v5 = a2[2];
    uint64_t v19 = a2 + 7;
    while (1)
    {
      if (v5)
      {
        uint64_t v6 = (uint64_t *)(v20 + 16 * v4);
        uint64_t v7 = *v6;
        uint64_t v8 = v6[1];
        uint64_t v9 = a2[4];
        uint64_t v10 = a2[5];
        BOOL v11 = v9 == *v6 && v10 == v8;
        if (v11 || (uint64_t result = sub_1001343BC(v9, v10), (result & 1) != 0))
        {
LABEL_20:
          sub_100086004();
          return v4;
        }

        if (v5 != 1) {
          break;
        }
      }

void sub_100133FA4(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setData:isa];
}

void sub_100134010(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  sub_10007BA44();
  objc_msgSend(a3, *a4, v6);
}

unint64_t sub_100134064()
{
  unint64_t result = qword_10032C408;
  if (!qword_10032C408)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027C18C, &type metadata for StoreKitFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_10032C408);
  }

  return result;
}

uint64_t sub_1001340A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001340B0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001340B8(uint64_t a1)
{
  return sub_100130EBC( 0,  *(void *)(a1 + 16),  0,  a1,  (uint64_t *)&unk_10032C4D8,  (void (*)(void))type metadata accessor for LoadProductsTask);
}

void sub_1001340EC()
{
}

uint64_t sub_100134100()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100134124(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10013412C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_100134170(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_1000E976C(a1, a2, a3);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_1000221B0();
}

uint64_t sub_1001341A4()
{
  return swift_beginAccess(v0, v1 - 168, 33LL, 0LL);
}

  ;
}

void *sub_1001341CC@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_1001341DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_1001341E8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_1001341FC( uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t), void (*a4)(_OWORD *__return_ptr, void *))
{
}

void sub_100134208( uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t), void (*a4)(_OWORD *__return_ptr, void *))
{
}

uint64_t sub_100134210()
{
  return swift_endAccess(v0 - 168);
}

  ;
}

  ;
}

uint64_t sub_100134238(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

unint64_t sub_100134248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100132130(a2, a3);
}

uint64_t sub_10013426C(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_100134274(uint64_t a1, uint64_t a2)
{
  return sub_10007B1C0(a1, a2);
}

uint64_t sub_10013427C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100134290()
{
  void *v0 = 0x8000000000000000LL;
  return v1;
}

uint64_t sub_1001342B8()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_1001342C8()
{
}

uint64_t sub_1001342D4(uint64_t a1)
{
  return sub_10012A6F0(a1, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100134318()
{
  return v0;
}

uint64_t sub_10013432C()
{
  return v0;
}

uint64_t sub_100134340()
{
  return 0LL;
}

BOOL sub_100134350(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL sub_100134364()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100134378( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a10 + 48) + 16 * v10 + 8));
}

void sub_10013438C(uint64_t a1@<X8>)
{
  *(void *)(v3 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_10013439C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) |= 1LL << result;
  return result;
}

void sub_1001343B4(uint64_t a1)
{
}

uint64_t sub_1001343BC(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

  ;
}

unint64_t sub_1001343D8()
{
  return sub_100132130(v1, v0);
}

uint64_t sub_1001343E8()
{
  return swift_bridgeObjectRelease(v0);
}

size_t sub_1001343F8(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_100134410()
{
  return v0;
}

  ;
}

id sub_10013442C()
{
  return v0;
}

double sub_100134434()
{
  double result = 0.0;
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_100134440(uint64_t a1)
{
  return *(void *)(v1 + 56) + 32 * a1;
}

uint64_t sub_100134450( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_100133084(v6, v5, v4, a4);
}

unint64_t sub_100134460(uint64_t a1, uint64_t a2)
{
  return sub_100132130(a1, a2);
}

void sub_100134468(uint64_t a1)
{
}

unint64_t sub_100134470()
{
  return sub_100132130(v1, v0);
}

void sub_100134480()
{
  *(void *)(v3 - 120) = v0;
  *(void *)(v3 - 144) = v1;
  *(void *)(v3 - 136) = v2;
}

uint64_t sub_10013448C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_100134494()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v1 + 48) + 8 * v0));
}

  ;
}

NSString sub_1001344AC()
{
  return String._bridgeToObjectiveC()();
}

void *sub_1001344B4(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1001344C0()
{
  return v0;
}

  ;
}

uint64_t sub_1001344E8()
{
  return 0LL;
}

void *sub_1001344FC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

uint64_t sub_100134508()
{
  return v0 + 32;
}

uint64_t sub_100134514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[45] = a2;
  v3[46] = a3;
  v3[44] = a1;
  uint64_t v4 = sub_100086224();
  v3[47] = v4;
  v3[48] = sub_10009BFD0(*(void *)(v4 - 8));
  v3[49] = sub_100093010();
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  v3[50] = sub_10009BFD0(*(void *)(v5 - 8));
  v3[51] = sub_100093010();
  v3[52] = sub_100093010();
  v3[53] = sub_100093010();
  v3[54] = sub_100093010();
  uint64_t v6 = sub_100086318();
  v3[55] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[56] = v7;
  v3[57] = sub_10009BFD0(v7);
  v3[58] = sub_100093010();
  v3[59] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1001345C0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, Swift::String a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  a31 = v33;
  a32 = v34;
  a30 = v32;
  uint64_t v35 = *(void *)(v32 + 360);
  uint64_t v36 = *(void *)(v32 + 368);
  id v37 = *(void **)(v32 + 352);
  *id v37 = v36;
  uint64_t v39 = *(void *)(v35 + 8);
  uint64_t v38 = *(void *)(v35 + 16);
  uint64_t v40 = (int *)sub_100140378();
  *(void *)(v32 + 480) = v40;
  uint64_t v41 = v40[8];
  *(_DWORD *)(v32 + 284) = v41;
  uint64_t v42 = (void *)((char *)v37 + v41);
  *uint64_t v42 = v39;
  v42[1] = v38;
  int v43 = *(unsigned __int8 *)(v35 + 1);
  *((_BYTE *)v37 + v40[9]) = v43;
  sub_1000E91F4(v35 + 40, v32 + 240, (uint64_t *)&unk_10032A1A0);
  uint64_t v44 = v40[11];
  *(_DWORD *)(v32 + 300) = v44;
  sub_1000E91F4(v32 + 240, (uint64_t)v37 + v44, (uint64_t *)&unk_10032A1A0);
  uint64_t v46 = (uint64_t *)(v36 + OBJC_IVAR____TtC9storekitd6Client_auditToken);
  uint64_t v47 = *(void **)(v32 + 368);
  if ((*(_BYTE *)(v36 + OBJC_IVAR____TtC9storekitd6Client_auditToken + 32) & 1) == 0)
  {
    uint64_t v218 = v39;
    uint64_t v221 = v40;
    uint64_t v58 = (void *)v46[2];
    uint64_t v57 = v46[3];
    uint64_t v225 = (void *)v32;
    uint64_t v59 = v38;
    uint64_t v61 = *v46;
    uint64_t v60 = v46[1];
    uint64_t v62 = sub_10007CBC0(v45, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
    id v63 = v47;
    sub_10008618C();
    sub_10011ABC8(v32 + 240);
    uint64_t v64 = (void *)v62;
    id v65 = sub_1000FF744(v61, v60, v58, v57);
    *(void *)(v32 + 488) = v65;
    uint64_t v66 = v65;
    uint64_t v67 = (uint64_t *)(v32 + 344);
    uint64_t v68 = (uint64_t *)(v32 + 352);
    switch(v43)
    {
      case 0:
        sub_1000E66E0();
        sub_100140A9C();
        if ((v69 & 1) == 0) {
          goto LABEL_28;
        }
        uint64_t v70 = sub_1000D3118();
        uint64_t v72 = v71;
        if (v70 != 2)
        {
          uint64_t v122 = *(void *)(v32 + 424);
          int v123 = *(void **)(v32 + 368);
          sub_1000930DC();
          sub_1000C6714();
          unint64_t v124 = sub_10009BB88();
          uint64_t v125 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v124);
          _BYTE *v126 = 2;
          sub_1000C62B4(v125, (uint64_t)v126, v127, v128, v129, v130, v131);

          uint64_t v132 = v122;
LABEL_56:
          sub_1000CEEA8(v132, (uint64_t *)&unk_10032A1C0);
          goto LABEL_38;
        }

        ExternalGatewaySheetRequest.subscript.getter(0, (uint64_t)&type metadata for String, v32 + 256);
        sub_1000C6714();
        if (*(void *)(v32 + 264))
        {
          URL.init(string:)(*(void *)(v32 + 256), *(void *)(v32 + 264));
          sub_10007B980();
        }

        else
        {
          sub_1000875FC(*(void *)(v32 + 416), v73, v74, *(void *)(v32 + 440));
        }

        uint64_t v160 = *(void *)(v32 + 440);
        uint64_t v161 = *(void *)(v32 + 408);
        sub_1000E9220(*(void *)(v32 + 416), v161, (uint64_t *)&unk_10032A1C0);
        int v162 = sub_10007D824(v161, 1LL, v160);
        if (v162 == 1)
        {
          uint64_t v163 = *(void *)(v32 + 440);
          uint64_t v164 = *(void *)(v32 + 424);
          uint64_t v166 = *(void *)(v32 + 400);
          uint64_t v165 = *(void *)(v32 + 408);
          sub_1000930DC();
          sub_1000CEEA8(v165, (uint64_t *)&unk_10032A1C0);
          sub_1000E9220(v164, v166, (uint64_t *)&unk_10032A1C0);
          if (sub_10007D824(v166, 1LL, v163) == 1)
          {
            uint64_t v168 = *(void *)(v32 + 416);
            uint64_t v167 = *(void *)(v32 + 424);
            uint64_t v169 = *(void **)(v32 + 368);
            sub_1000CEEA8(*(void *)(v32 + 400), (uint64_t *)&unk_10032A1C0);
            unint64_t v170 = sub_10009BB88();
            uint64_t v171 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v170);
            *uint64_t v172 = 2;
            sub_1000C62B4(v171, (uint64_t)v172, v173, v174, v175, v176, v177);

            sub_1000CEEA8(v168, (uint64_t *)&unk_10032A1C0);
            uint64_t v132 = v167;
            goto LABEL_56;
          }

          uint64_t v198 = *(void *)(v32 + 448);
          uint64_t v199 = *(void *)(v32 + 456);
          uint64_t v200 = *(void *)(v32 + 440);
          uint64_t v201 = *(void *)(v32 + 400);
          uint64_t v202 = *(void *)(v32 + 352);
          uint64_t v203 = *(void (**)(uint64_t, uint64_t, uint64_t))(v198 + 32);
          v203(v199, v201, v200);
          v203(v202 + v221[5], v199, v200);
          sub_100140AE4();
          *(void *)(v202 + v185) = 0LL;
        }

        else
        {
          uint64_t v178 = (uint64_t *)(v32 + 352);
          uint64_t v179 = *(void (**)(uint64_t, void, void))(*(void *)(v32 + 448) + 32LL);
          v179(*(void *)(v32 + 464), *(void *)(v32 + 408), *(void *)(v32 + 440));
          uint64_t v180 = (void *)v32;
          if (!v72
            || (uint64_t v181 = sub_1001368B4(*(void *)(v32 + 464), v72), v183 = v182, sub_1000930DC(), (v183 & 1) != 0))
          {
            uint64_t v186 = v180[56];
            uint64_t v188 = v180[52];
            uint64_t v187 = v180[53];
            uint64_t v189 = (void *)v180[46];
            unint64_t v190 = sub_10009BB88();
            uint64_t v191 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v190);
            *uint64_t v192 = 2;
            sub_1000C62B4(v191, (uint64_t)v192, v193, v194, v195, v196, v197);

            sub_1000AAA04(*(uint64_t (**)(uint64_t, uint64_t))(v186 + 8));
            sub_1001408A8(v188);
            sub_1001408A8(v187);
            uint64_t v32 = (uint64_t)v180;
            goto LABEL_38;
          }

          uint64_t v184 = v180[44];
          v179(v184 + v221[5], v180[58], v180[55]);
          sub_100140AE4();
          *(void *)(v184 + v185) = v181;
          uint64_t v68 = v178;
        }

        uint64_t v204 = *v68;
        *(_BYTE *)(*v68 + v185 + 8) = v162 == 1;
        *(_BYTE *)(v204 + v221[10]) = 2;
        if (qword_100328BC0 != -1) {
          swift_once(&qword_100328BC0, sub_10012B67C);
        }
        uint64_t v206 = v225[52];
        uint64_t v205 = v225[53];
        uint64_t v207 = (void *)v225[46];
        uint64_t v208 = v225[44];
        id v209 = (id)qword_10033E248;

        sub_1001408A8(v206);
        sub_1001408A8(v205);
        *(void *)(v208 + v221[7]) = v209;
        goto LABEL_70;
      case 1:
        sub_1000C4DC0(*(void **)(v32 + 360));
        sub_1000E66E0();
        sub_100140A9C();
        if ((v92 & 1) == 0)
        {
          uint64_t v64 = *(void **)(v32 + 368);
          goto LABEL_33;
        }

        sub_1000D4458();
        if (v95 != 2)
        {
          uint64_t v64 = *(void **)(v32 + 368);
          goto LABEL_36;
        }

        uint64_t v96 = *(void *)(v32 + 352);
        sub_1000875FC(v96 + v221[5], v93, v94, *(void *)(v32 + 440));
        uint64_t v97 = v96 + v221[6];
        *(void *)uint64_t v97 = 0LL;
        *(_BYTE *)(v97 + 8) = 1;
        *(_BYTE *)(v96 + v221[10]) = 2;
        if (qword_100328BE8 != -1) {
          swift_once(&qword_100328BE8, sub_10012B8C8);
        }
        uint64_t v98 = *(void **)(v32 + 368);
        uint64_t v99 = *(void *)(v32 + 352);
        id v100 = (id)qword_10033E270;

        *(void *)(v99 + v221[7]) = v100;
        goto LABEL_70;
      case 2:
        sub_100140BA8();
        sub_1000DEA24();
        *(void *)(v32 + 496) = v101;
        if (qword_100328B98 != -1) {
          uint64_t v101 = swift_once(&qword_100328B98, sub_10012B42C);
        }
        id v102 = sub_1000936AC(v101, "stringForKey:");
        *(void *)(v32 + 504) = v102;
        *(void *)(v32 + 120) = v32 + 304;
        *(void *)(v32 + 80) = v32;
        *(void *)(v32 + 88) = sub_100135250;
        uint64_t v103 = sub_1000AA7D4(v32 + 80);
        *(void *)(v32 + 184) = _NSConcreteStackBlock;
        *(void *)(v32 + 192) = 0x40000000LL;
        sub_1000937B0(v103, (uint64_t)sub_100121C5C);
        sub_10014085C(v102, "valueWithCompletion:");
        return sub_100140548();
      case 3:
        sub_1000E66E0();
        sub_100140A9C();
        if ((v105 & 1) != 0)
        {
          uint64_t v64 = v66;
          sub_1000D4040();
          uint64_t v107 = v106;
          sub_1000D3C28();
          if (v107 != 2 && v108 != 2)
          {
            sub_100140BA8();
LABEL_36:
            unint64_t v133 = sub_10009BB88();
            uint64_t v113 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v133);
            char v120 = 2;
            goto LABEL_37;
          }

          if ((*(_BYTE *)(*(void *)(v32 + 360) + 32LL) & 1) == 0)
          {
            LOBYTE(v110) = 2;
LABEL_67:
            uint64_t v210 = *v68;
            sub_1000C6714();
            *(_BYTE *)(v210 + v221[10]) = v110;
            if (qword_100328BF0 != -1) {
              swift_once(&qword_100328BF0, sub_10012B940);
            }
            uint64_t v211 = *(void **)(v32 + 368);
            uint64_t v212 = *(void *)(v32 + 352);
            id v213 = (id)qword_10033E278;

            *(void *)(v212 + v221[7]) = v213;
            sub_10009C314(v212 + v221[5]);
            uint64_t v214 = v212 + v221[6];
            *(void *)uint64_t v214 = 0LL;
            *(_BYTE *)(v214 + 8) = 1;
LABEL_70:
            sub_100140690();
            sub_1000939C0();
            sub_1000931C8();
            sub_100093280();
            sub_100093124();
            sub_1000932CC();
            sub_1000932D4();
            sub_1000931DC();
            sub_100093288();
            sub_1000AABB0();
            int v136 = (uint64_t (*)(void))sub_100093CFC();
            return sub_1001402F0(v136);
          }

          int v137 = (void *)(v32 + 272);
          ExternalGatewaySheetRequest.subscript.getter(2, (uint64_t)&type metadata for Int, v32 + 272);
          if (*(_BYTE *)(v32 + 280) != 1)
          {
            int v138 = *v137 == 1LL ? 1 : 2;
            int v110 = *v137 ? v138 : 0;
            if (v110 != 2) {
              goto LABEL_67;
            }
          }

          uint64_t v224 = (uint64_t *)(v32 + 336);
          if (qword_100328B40 != -1) {
            swift_once(&qword_100328B40, sub_1000F4208);
          }
          uint64_t v139 = *(void *)(v32 + 384);
          uint64_t v140 = sub_100079604(*(void *)(v32 + 376), (uint64_t)qword_10033E1A8);
          sub_10007961C(v140, v139);
          a19 = 0LL;
          a20 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(62LL);
          uint64_t v141 = a20;
          *(void *)(v32 + 224) = a19;
          *(void *)(v32 + 232) = v141;
          sub_100093888(0xD00000000000003CLL, (uint64_t)"Missing link out type from request to present the sheet for ");
          *(_BYTE *)(v32 + 281) = 3;
          uint64_t v142 = sub_1000C6664(v32 + 281);
          uint64_t v143 = *(void *)(v32 + 232);
          uint64_t v216 = *(void *)(v32 + 224);
          os_log_type_t v144 = static os_log_type_t.error.getter(v142);
          int v145 = (void *)v59;
          sub_100085EE8(v59);
          uint64_t v146 = sub_100085EE8(v143);
          int v147 = (os_log_s *)Logger.logObject.getter(v146);
          BOOL v148 = os_log_type_enabled(v147, v144);
          int v149 = *(void **)(v32 + 360);
          if (v148)
          {
            uint64_t v215 = *(void *)(v32 + 360);
            int v150 = (uint8_t *)sub_10007B9FC(22LL);
            uint64_t v151 = sub_10007B9FC(64LL);
            *(_DWORD *)int v150 = 136446466;
            sub_1000B2110();
            a18 = v152;
            a19 = v153;
            a20 = v154;
            sub_100093528();
            v155._uint64_t countAndFlagsBits = v218;
            v155._object = v145;
            String.append(_:)(v155);
            sub_100085F14();
            sub_100093460();
            *uint64_t v224 = sub_10008620C(a19, v156, &a18);
            sub_1000F3D94((uint64_t)v224, v32 + 344);
            sub_10007B980();
            sub_10007D974((uint64_t)v145);
            sub_1000C5FF4();
            sub_10007BA3C();
            *(void *)(v32 + 320) = sub_100086308(v216, v157, &a18);
            sub_100086194(v32 + 320, v32 + 328);
            sub_100085E64(v143);
            sub_100086038((void *)&_mh_execute_header, v147, v144, "%{public}s%{public}s", v150);
            sub_100086030(v151, v158, (uint64_t)&type metadata for Any + 8);
            sub_10007B974(v151);
            sub_10007B974((uint64_t)v150);

            sub_10007BA44();
            int v159 = (void *)v215;
          }

          else
          {
            sub_10007D974((uint64_t)v145);
            sub_100085E64(v143);

            int v159 = v149;
          }

          sub_1000C4DC0(v159);
          uint64_t v111 = *(void *)(v32 + 384);
LABEL_31:
          uint64_t v64 = *(void **)(v32 + 368);
          sub_10007A3CC(v111);
          unint64_t v112 = sub_10009BB88();
          uint64_t v113 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v112);
          char v120 = 7;
        }

        else
        {
LABEL_28:
          sub_100140BA8();
LABEL_33:
          unint64_t v121 = sub_10009BB88();
          uint64_t v113 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v121);
          char v120 = 5;
        }

LABEL_37:
        char *v114 = v120;
        sub_1000C62B4(v113, (uint64_t)v114, v115, v116, v117, v118, v119);

        goto LABEL_38;
      default:
        uint64_t v219 = v32 + 352;
        uint64_t v222 = v32 + 336;
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        uint64_t v75 = *(void *)(v32 + 392);
        uint64_t v76 = *(void **)(v32 + 360);
        uint64_t v77 = sub_100079604(*(void *)(v32 + 376), (uint64_t)qword_10033E1A8);
        sub_10007961C(v77, v75);
        a19 = 0LL;
        a20 = 0xE000000000000000LL;
        sub_1001408F0();
        swift_bridgeObjectRelease(a20);
        sub_100140A54();
        a19 = v78;
        a20 = v79;
        sub_10009C32C(0xD000000000000015LL);
        sub_1000C4DC0(v76);
        uint64_t v80 = sub_100085FB4();
        uint64_t v81 = a19;
        uint64_t v82 = a20;
        os_log_type_t v83 = static os_log_type_t.default.getter(v80);
        uint64_t v84 = sub_100085EE8(v82);
        uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
        os_log_type_t v86 = v83;
        if (os_log_type_enabled(v85, v83))
        {
          uint64_t v87 = sub_10007B9FC(22LL);
          uint64_t v88 = sub_10007B9FC(64LL);
          a19 = v88;
          *(_DWORD *)uint64_t v87 = 136446466;
          id v89 = (uint64_t *)(v32 + 328);
          uint64_t *v67 = sub_10007A488(0LL, 0xE000000000000000LL, &a19);
          sub_1000F3D94((uint64_t)v67, v219);
          *(_WORD *)(v87 + 12) = 2082;
          sub_10008618C();
          *id v89 = sub_1000C6228(v81, v90, &a19);
          sub_1000F3D94((uint64_t)v89, v222);
          sub_100085E64(v82);
          sub_100086038((void *)&_mh_execute_header, v85, v86, "%{public}s%{public}s", (uint8_t *)v87);
          sub_100086030(v88, v91, (uint64_t)&type metadata for Any + 8);
          sub_10007B974(v88);
          sub_10007B974(v87);

          sub_100085FB4();
        }

        else
        {
          sub_100085E64(v82);
        }

        uint64_t v32 = (uint64_t)v225;
        uint64_t v111 = v225[49];
        goto LABEL_31;
    }
  }

  id v48 = *(void **)(v32 + 360);
  id v49 = v47;
  sub_100093528();
  sub_10011ABC8(v32 + 240);
  sub_1000C4DC0(v48);
  unint64_t v50 = sub_10013F714();
  uint64_t v217 = sub_100093030((uint64_t)&type metadata for ExternalGatewaySheet.ExternalLinkSheetError, v50);
  sub_1000C62B4(v217, v51, v52, v53, v54, v55, v56);

LABEL_38:
  sub_1001406D4();
  uint64_t v220 = v135;
  uint64_t v223 = v134;
  uint64_t v226 = *(void *)(v32 + 384);

  sub_100140944();
  sub_10014093C();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  swift_task_dealloc(v220);
  swift_task_dealloc(v223);
  swift_task_dealloc(v226);
  int v136 = *(uint64_t (**)(void))(v32 + 8);
  return sub_1001402F0(v136);
}

uint64_t sub_100135250()
{
  *(void *)(v0 + 512) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100135290()
{
  uint64_t v1 = *(void **)(v0 + 504);
  *(void *)(v0 + 520) = *(void *)(v0 + 304);

  if (qword_100328CD8 != -1) {
    swift_once(&qword_100328CD8, sub_10012C720);
  }
  id v2 = [*(id *)(v0 + 496) stringForKey:qword_10033E360];
  *(void *)(v0 + 528) = v2;
  *(void *)(v0 + 56) = v0 + 288;
  *(void *)(v0 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_100135370;
  uint64_t v3 = sub_1000AA7D4(v0 + 16);
  *(void *)(v0 + 144) = _NSConcreteStackBlock;
  *(void *)(v0 + 152) = 0x40000000LL;
  sub_1000937B0(v3, (uint64_t)sub_100121C5C);
  sub_10014085C(v2, "valueWithCompletion:");
  return sub_1000AA4B4();
}

uint64_t sub_100135370()
{
  *(void *)(v0 + 536) = v1;
  sub_100093420();
  return sub_100092F20();
}

#error "1001355FC: call analysis failed (funcsize=155)"
#error "100135694: call analysis failed (funcsize=32)"
#error "100135720: call analysis failed (funcsize=35)"
uint64_t sub_10013573C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  v4[37] = a3;
  v4[38] = v3;
  v4[35] = a1;
  v4[36] = a2;
  uint64_t v5 = sub_100086318();
  v4[39] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[40] = v6;
  v4[41] = sub_10009BFAC(v6);
  uint64_t v7 = type metadata accessor for URLQueryItem(0LL);
  v4[42] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[43] = v8;
  v4[44] = sub_10009BFD0(v8);
  v4[45] = sub_100093010();
  uint64_t v9 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  v4[46] = sub_10009BFD0(*(void *)(v9 - 8));
  v4[47] = sub_100093010();
  v4[48] = sub_100093010();
  uint64_t v10 = sub_100086224();
  v4[49] = v10;
  v4[50] = sub_10009BFD0(*(void *)(v10 - 8));
  v4[51] = sub_100093010();
  v4[52] = sub_100093010();
  v4[53] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1001357FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = (__int128 *)(v28 + 56);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v32 = *(void *)(v28 + 304);
  uint64_t v33 = sub_100079604(*(void *)(v28 + 392), (uint64_t)qword_10033E1A8);
  *(void *)(v28 + 432) = v33;
  sub_1000935C4(v33);
  sub_10011BEC4();
  _StringGuts.grow(_:)(28LL);
  uint64_t v34 = a17;
  *(void *)(v28 + 176) = a16;
  *(void *)(v28 + 184) = v34;
  sub_1001408D0(0xD00000000000001ALL, (uint64_t)"Presenting sheet for mode ");
  uint64_t v35 = (int *)sub_100140378();
  uint64_t v36 = v35[9];
  *(_DWORD *)(v28 + 504) = v36;
  *(_BYTE *)(v28 + 512) = *(_BYTE *)(v32 + v36);
  uint64_t v37 = sub_100140B50();
  uint64_t v38 = *(void *)(v28 + 184);
  uint64_t v84 = *(void *)(v28 + 176);
  uint64_t v39 = v35[8];
  *(_DWORD *)(v28 + 508) = v39;
  uint64_t v40 = *(void *)(v32 + v39 + 8);
  os_log_type_t v41 = static os_log_type_t.default.getter(v37);
  sub_100085EE8(v40);
  sub_100085EE8(v38);
  uint64_t v42 = (os_log_s *)sub_1000935A4();
  if (sub_10011B3E0(v42))
  {
    uint64_t v43 = sub_10007B9FC(22LL);
    uint64_t v83 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v43 = 136446466;
    sub_1000AAE30();
    sub_1000AABA0();
    sub_100140B08();
    sub_100085F14();
    sub_1000AABA8();
    *(void *)(v28 + 224) = sub_10008620C(a16, v44, &a15);
    sub_1000C6390(v28 + 224, v28 + 232);
    sub_10007B980();
    sub_10007D974(v40);
    *(_WORD *)(v43 + 12) = 2082;
    sub_10008618C();
    *(void *)(v28 + 256) = sub_1000C6228(v84, v45, &a15);
    sub_100086194(v28 + 256, v28 + 264);
    sub_100085E64(v38);
    sub_100086038((void *)&_mh_execute_header, v42, v41, "%{public}s%{public}s", (uint8_t *)v43);
    sub_100086030(v83, v46, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v83);
    uint64_t v47 = v43;
    uint64_t v31 = (__int128 *)(v28 + 56);
    sub_10007B974(v47);

    sub_100085FB4();
  }

  else
  {
    sub_10007D974(v40);
    sub_100085E64(v38);
  }

  uint64_t v48 = *(void *)(v28 + 304);
  uint64_t v49 = *(void *)(v28 + 280);
  sub_10007A3CC(*(void *)(v28 + 424));
  uint64_t v50 = v48 + v35[5];
  sub_10014094C(v50, v51, (uint64_t *)&unk_10032A1C0);
  sub_1000E9220(v49, (uint64_t)v31, &qword_10032BDC0);
  if (*(void *)(v28 + 80))
  {
    sub_10009D8A4(v31, v28 + 16);
    uint64_t v52 = *(void *)(v28 + 40);
    uint64_t v53 = *(void *)(v28 + 48);
    sub_100085B44((void *)(v28 + 16), v52);
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
    URLQueryItem.init(name:value:)(0xD000000000000015LL, 0x800000010029CC90LL, v54, v55);
    sub_10007B980();
    uint64_t v56 = sub_100130EA8(0, 1LL, 1, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v58 = *(void *)(v56 + 16);
    unint64_t v57 = *(void *)(v56 + 24);
    if (v58 >= v57 >> 1) {
      uint64_t v56 = sub_1000AA554(v57);
    }
    uint64_t v59 = *(void *)(v28 + 360);
    uint64_t v60 = *(void *)(v28 + 336);
    uint64_t v61 = *(void *)(v28 + 344);
    uint64_t v62 = *(void **)(v28 + 304);
    *(void *)(v56 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v58 + 1;
    unint64_t v63 = (*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
    uint64_t v64 = *(void *)(v61 + 72);
    id v65 = *(void (**)(unint64_t, uint64_t, uint64_t))(v61 + 32);
    v65(v56 + v63 + v64 * v58, v59, v60);
    uint64_t v66 = (uint64_t *)(*v62 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
    uint64_t v67 = *v66;
    uint64_t v68 = v66[1];
    sub_100093528();
    URLQueryItem.init(name:value:)(0x6449656C646E7562LL, 0xE800000000000000LL, v67, v68);
    sub_100093460();
    unint64_t v70 = *(void *)(v56 + 16);
    unint64_t v69 = *(void *)(v56 + 24);
    if (v70 >= v69 >> 1) {
      uint64_t v56 = sub_1000AA554(v69);
    }
    uint64_t v71 = *(void *)(v28 + 376);
    uint64_t v72 = *(void *)(v28 + 352);
    uint64_t v73 = *(void *)(v28 + 336);
    uint64_t v74 = *(void *)(v28 + 312);
    *(void *)(v56 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v70 + 1;
    v65(v56 + v63 + v70 * v64, v72, v73);
    sub_1000E9220(v50, v71, (uint64_t *)&unk_10032A1C0);
    if (sub_10007D824(v71, 1LL, v74) == 1)
    {
      uint64_t v75 = sub_100085EF0();
      sub_100140714(v75, (uint64_t *)&unk_10032A1C0);
    }

    else
    {
      uint64_t v76 = *(void *)(v28 + 384);
      uint64_t v77 = *(void *)(v28 + 368);
      uint64_t v79 = *(void *)(v28 + 320);
      uint64_t v78 = *(void *)(v28 + 328);
      uint64_t v80 = *(void *)(v28 + 312);
      (*(void (**)(uint64_t, void, uint64_t))(v79 + 32))(v78, *(void *)(v28 + 376), v80);
      URL.appending(queryItems:)(v56);
      sub_100085EF0();
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      sub_1000CEEA8(v76, (uint64_t *)&unk_10032A1C0);
      sub_10007D0AC(v77, 0LL, 1LL, v80);
      sub_1000E91F4(v77, v76, (uint64_t *)&unk_10032A1C0);
    }

    sub_10007B1A0((void *)(v28 + 16));
  }

  else
  {
    sub_1000CEEA8((uint64_t)v31, &qword_10032BDC0);
  }

  uint64_t v81 = (void *)swift_task_alloc(dword_10032C53C);
  *(void *)(v28 + 4sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v81;
  *uint64_t v81 = v28;
  v81[1] = sub_100135CDC;
  sub_1000AA7B8();
  return sub_100136980();
}

uint64_t sub_100135CDC()
{
  *(_BYTE *)(v1 + 514) = v0;
  sub_1000C652C(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100135D18()
{
  uint64_t v24 = v1;
  uint64_t v25 = v2;
  uint64_t v23 = v0;
  if (*(_BYTE *)(v0 + 514) == 1)
  {
    uint64_t v3 = (os_log_s *)(*(void *)(v0 + 304) + *(int *)(v0 + 508));
    uint64_t v4 = sub_10009362C(*(void *)(v0 + 432));
    uint64_t v5 = *((void *)v3 + 1);
    os_log_type_t v6 = static os_log_type_t.default.getter(v4);
    uint64_t v7 = sub_100085EE8(v5);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    if (sub_1000C5F64(v8))
    {
      uint64_t v9 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v10 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v9 = 136446466;
      v22[0] = v10;
      v22[1] = 91LL;
      v22[2] = 0xE100000000000000LL;
      sub_1000930E4();
      sub_1001406AC();
      sub_100085F14();
      sub_1000930DC();
      *(void *)(v0 + 264) = sub_10008620C(91LL, v11, v22);
      sub_1000B21CC(v0 + 264, v0 + 272);
      sub_10007B980();
      sub_10007D974(v5);
      sub_1000C5FF4();
      *(void *)(v0 + 272) = sub_1000AB050(40LL, 0x80000001002A5430LL, v22);
      sub_100086194(v0 + 272, v0 + 280);
      sub_100086038((void *)&_mh_execute_header, v3, v6, "%{public}s%{public}s", v9);
      sub_100086030(v10, v12, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v10);
      sub_10007B974((uint64_t)v9);
    }

    else
    {
      sub_10007D974(v5);
    }

    sub_10007A3CC(*(void *)(v0 + 416));
    unint64_t v18 = (void *)swift_task_alloc(dword_10032C54C);
    *(void *)(v0 + 448) = v18;
    uint64_t v19 = sub_100140580(v18, (uint64_t)sub_100135EEC);
    return sub_100136B6C(v19, v20, v21);
  }

  else
  {
    BOOL v13 = (void *)swift_task_alloc(dword_10032C544);
    *(void *)(v0 + 464) = v13;
    uint64_t v14 = sub_100140580(v13, (uint64_t)sub_10013613C);
    return sub_100140500(v14, v15, v16);
  }

uint64_t sub_100135EEC(char a1)
{
  uint64_t v10 = *v2;
  uint64_t v4 = v10;
  sub_1000C666C(&v10);
  *(void *)(v4 + 456) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(_BYTE *)(v4 + 515) = a1 & 1;
  }
  sub_100093420();
  return swift_task_switch(v6, v7, v8);
}

#error "100135FC4: call analysis failed (funcsize=115)"
uint64_t sub_10013613C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  sub_1000875CC();
  uint64_t v3 = *(void *)(v2 + 464);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 472) = v0;
  swift_task_dealloc(v3);
  sub_100093420();
  return sub_100092F20();
}

#error "1001361E8: call analysis failed (funcsize=26)"
uint64_t sub_1001361F8()
{
  uint64_t v0;
  sub_1000875CC();
  sub_10008750C(*(void *)(v0 + 496));
  sub_10007B980();
  sub_100093420();
  return sub_100092F20();
}

#error "1001362A0: call analysis failed (funcsize=33)"
#error "100136344: call analysis failed (funcsize=154)"
#error "1001365D0: call analysis failed (funcsize=154)"
uint64_t sub_1001367D0(uint64_t a1)
{
  unsigned int v1;
  if (a1 == 1) {
    uint64_t v1 = 1;
  }
  else {
    uint64_t v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001367E8(char a1)
{
  return a1 & 1;
}

void sub_1001367F0()
{
}

void sub_1001367F8(uint64_t a1)
{
}

uint64_t sub_100136800@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001367D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100136828@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001367E8(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100136850()
{
  uint64_t v0 = sub_10007B1FC(&qword_10032C5A0);
  sub_1000B40F4(v0, qword_10033E3E0);
  uint64_t v1 = sub_100079604(v0, (uint64_t)qword_10033E3E0);
  uint64_t v2 = sub_10007B1FC(&qword_10032C5A8);
  return sub_10007D0AC(v1, 1LL, 1LL, v2);
}

uint64_t sub_1001368B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = *(void *)(v6 + 72);
  sub_10007ACCC( &qword_10032C5C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v10 = v9;
  uint64_t v11 = 0LL;
  while ((dispatch thunk of static Equatable.== infix(_:_:)(v7, a1, v5, v10) & 1) == 0)
  {
    ++v11;
    v7 += v8;
    if (v2 == v11) {
      return 0LL;
    }
  }

  return v11;
}

uint64_t sub_100136980()
{
  *(void *)(v1 + 136) = v0;
  return swift_task_switch(sub_100136998, 0LL, 0LL);
}

uint64_t sub_100136998()
{
  uint64_t v1 = v0[17];
  if (*(_BYTE *)(v1 + *(int *)(sub_100140378() + 36)) == 3)
  {
    sub_1000DEA24();
    if (qword_100328C20 != -1) {
      uint64_t v2 = swift_once(&qword_100328C20, sub_10012BC10);
    }
    id v3 = sub_1000936AC(v2, "BOOLForKey:");
    v0[18] = v3;
    sub_1000931C0();
    v0[7] = v0 + 15;
    v0[2] = v0;
    v0[3] = sub_100136AA8;
    uint64_t v4 = sub_1000AA7D4((uint64_t)(v0 + 2));
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000LL;
    sub_1000937B0(v4, (uint64_t)sub_1000A36F8);
    sub_10014085C(v3, "valueWithCompletion:");
    return sub_1001405DC();
  }

  else
  {
    uint64_t v6 = sub_100093DF8();
    return sub_100140838(v6, v7);
  }

uint64_t sub_100136AA8()
{
  *(void *)(v0 + 152) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100136AE8()
{
  uint64_t v1 = *(void **)(v0 + 144);

  char v2 = *(_BYTE *)(v0 + 128);
  return sub_100140838((v2 & 1) == 0, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100136B28()
{
  uint64_t v1 = *(void **)(v0 + 144);
  sub_100093D24();
  sub_1000C6290();

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_100136B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[99] = v3;
  v4[98] = a3;
  v4[97] = a2;
  v4[96] = a1;
  uint64_t v5 = type metadata accessor for URL(0LL);
  v4[100] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[101] = v6;
  v4[102] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  v4[103] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  v4[104] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[105] = swift_task_alloc(v9);
  v4[106] = swift_task_alloc(v9);
  v4[107] = swift_task_alloc(v9);
  v4[108] = swift_task_alloc(v9);
  v4[109] = swift_task_alloc(v9);
  v4[110] = swift_task_alloc(v9);
  v4[111] = swift_task_alloc(v9);
  v4[112] = swift_task_alloc(v9);
  v4[113] = swift_task_alloc(v9);
  return swift_task_switch(sub_100136C84, 0LL, 0LL);
}

uint64_t sub_100136C84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v31 = *(void *)(v28 + 792);
  uint64_t v32 = sub_100079604(*(void *)(v28 + 832), (uint64_t)qword_10033E1A8);
  *(void *)(v28 + 912) = v32;
  sub_100140604(v32);
  sub_1001408F8();
  sub_1001408F0();
  unint64_t v33 = a14;
  *(void *)(v28 + 496) = a13;
  *(void *)(v28 + 504) = v33;
  sub_100093888(0xD00000000000001FLL, (uint64_t)"Presenting engagement for mode ");
  uint64_t v34 = (int *)sub_100140378();
  *(void *)(v28 + 920) = v34;
  uint64_t v35 = v34[9];
  *(_DWORD *)(v28 + 1056) = v35;
  *(_BYTE *)(v28 + 1064) = *(_BYTE *)(v31 + v35);
  uint64_t v36 = sub_1000C6664(v28 + 1064);
  uint64_t v38 = *(void *)(v28 + 496);
  uint64_t v37 = *(void *)(v28 + 504);
  uint64_t v39 = v34[8];
  *(_DWORD *)(v28 + 1060) = v39;
  uint64_t v40 = (uint64_t *)(v31 + v39);
  uint64_t v41 = *v40;
  uint64_t v42 = v40[1];
  os_log_type_t v43 = static os_log_type_t.default.getter(v36);
  sub_100085EE8(v42);
  sub_100085EE8(v37);
  uint64_t v44 = (os_log_s *)sub_100093B00();
  if (sub_10009396C(v44))
  {
    uint64_t v83 = v38;
    uint64_t v45 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v84 = v34;
    uint64_t v46 = sub_10007B9FC(64LL);
    a17 = v46;
    sub_100140B5C(4.8752e-34);
    a13 = v47;
    a14 = v48;
    sub_1000AA78C();
    sub_100086114(v41);
    sub_100085F14();
    sub_100086144();
    *(void *)(v28 + 608) = sub_10008620C(a13, v49, &a17);
    sub_1000C6390(v28 + 608, v28 + 616);
    sub_10007B980();
    sub_10007D974(v42);
    sub_10009BFBC();
    *(void *)(v28 + 704) = sub_100086308(v83, v50, &a17);
    sub_100086194(v28 + 704, v28 + 712);
    sub_100085E64(v37);
    sub_100086038((void *)&_mh_execute_header, v44, v43, "%{public}s%{public}s", v45);
    sub_100086030(v46, v51, (uint64_t)&type metadata for Any + 8);
    uint64_t v52 = v46;
    uint64_t v34 = v84;
    sub_10007B974(v52);
    sub_10007B974((uint64_t)v45);

    sub_10007BA44();
  }

  else
  {
    sub_10007D974(v42);
    sub_100085E64(v37);
  }

  uint64_t v53 = *(void *)(v28 + 824);
  uint64_t v54 = *(void **)(v28 + 776);
  uint64_t v55 = *(void *)(v28 + 768);
  sub_10007A3CC(*(void *)(v28 + 904));
  uint64_t v56 = swift_allocObject(&unk_1002EF388, 24LL, 7LL);
  *(void *)(v28 + 928) = v56;
  unint64_t v58 = _swiftEmptyDictionarySingleton;
  if (v54) {
    unint64_t v58 = v54;
  }
  *(void *)(v56 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v58;
  sub_10014094C(v55, v57, (uint64_t *)&unk_10032A1C0);
  int v59 = sub_100140684(v53);
  uint64_t v60 = sub_10008618C();
  if (v59 == 1)
  {
    sub_100140714(v60, (uint64_t *)&unk_10032A1C0);
    sub_100140B3C();
  }

  else
  {
    uint64_t v61 = *(void *)(v28 + 808);
    uint64_t v62 = URL.absoluteString.getter(v60);
    a16 = &type metadata for String;
    a13 = v62;
    a14 = v63;
    sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
  }

  uint64_t v64 = *(uint64_t **)(v28 + 792);
  sub_100140928((uint64_t)&a13, 0x6C616E7265747865LL, 0xEC0000006B6E694CLL);
  uint64_t v65 = *v64;
  uint64_t v66 = *(void *)(v65 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
  a16 = &type metadata for UInt64;
  a13 = v66;
  sub_10012A9E0((uint64_t)&a13, 0x496D616441707061LL, 0xE900000000000064LL);
  sub_100140864(OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  sub_10012A9E0((uint64_t)&a13, 0x6C646E7542707061LL, 0xEB00000000644965LL);
  unint64_t v67 = *(void *)(v65 + OBJC_IVAR____TtC9storekitd6Client_vendorName + 8);
  if (v67)
  {
    uint64_t v68 = *(void *)(v65 + OBJC_IVAR____TtC9storekitd6Client_vendorName);
    a16 = &type metadata for String;
    a13 = v68;
    a14 = v67;
  }

  else
  {
    sub_100140B3C();
  }

  swift_bridgeObjectRetain(v67);
  sub_100140928((uint64_t)&a13, 0x65706F6C65766564LL, 0xED0000656D614E72LL);
  unint64_t v69 = *(void *)(v65 + OBJC_IVAR____TtC9storekitd6Client_signerOrganization + 8);
  if (v69)
  {
    uint64_t v70 = *(void *)(v65 + OBJC_IVAR____TtC9storekitd6Client_signerOrganization);
    a16 = &type metadata for String;
    a13 = v70;
    a14 = v69;
  }

  else
  {
    sub_100140B3C();
  }

  uint64_t v71 = *(void *)(v28 + 792);
  swift_bridgeObjectRetain(v69);
  sub_100140928((uint64_t)&a13, 0xD000000000000012LL, 0x80000001002A14B0LL);
  sub_100140864(OBJC_IVAR____TtC9storekitd6Client_localizedName);
  sub_10012A9E0((uint64_t)&a13, 0x656D614E707061LL, 0xE700000000000000LL);
  sub_100140AA4();
  sub_10012A9E0(v73, v72 & 0xFFFF00000000FFFFLL | 0x617465420000LL, 0xE600000000000000LL);
  sub_100140AA4();
  sub_10012A9E0(v75, v74 | 0x53656C7070410000LL, 0xED000064656E6769LL);
  int v76 = *(unsigned __int8 *)(v71 + v34[10]);
  if (v76 == 2)
  {
    sub_100140B3C();
  }

  else
  {
    BOOL v77 = (v76 & 1) == 0;
    uint64_t v78 = 6448503LL;
    if (v77) {
      uint64_t v78 = 0x746C7561666564LL;
    }
    unint64_t v79 = 0xE300000000000000LL;
    a16 = &type metadata for String;
    if (v77) {
      unint64_t v79 = 0xE700000000000000LL;
    }
    a13 = v78;
    a14 = v79;
  }

  sub_100140928((uint64_t)&a13, 0x5474756F6B6E696CLL, 0xEB00000000657079LL);
  uint64_t v80 = (void *)swift_task_alloc(dword_10032C554);
  *(void *)(v28 + 936) = v80;
  *uint64_t v80 = v28;
  v80[1] = sub_1001371E8;
  sub_1000AA7B8();
  return sub_10013A188(v81);
}

uint64_t sub_1001371E8()
{
  uint64_t v3 = *(void *)(v2 + 936);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 944) = v0;
  swift_task_dealloc(v3);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100137238( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = *(int *)(v28 + 1056);
  uint64_t v32 = *(void *)(v28 + 912);
  uint64_t v33 = *(void *)(v28 + 792);
  uint64_t v34 = (uint64_t *)(v33 + *(int *)(v28 + 1060));
  uint64_t v35 = URL.absoluteString.getter(v30);
  a16 = &type metadata for String;
  a13 = v35;
  a14 = v36;
  sub_10012A9E0((uint64_t)&a13, 0x4C52557465656873LL, 0xE800000000000000LL);
  sub_1000DEA24();
  id v74 = [objc_allocWithZone(AMSEngagement) initWithBag:v37];
  *(void *)(v28 + 952) = v74;
  sub_1000931C0();
  sub_100140604(v32);
  sub_1001408F8();
  _StringGuts.grow(_:)(39LL);
  uint64_t v38 = a14;
  *(void *)(v28 + 512) = a13;
  *(void *)(v28 + 520) = v38;
  sub_100093888(0xD000000000000025LL, (uint64_t)"Fetching presentation type for mode: ");
  *(_BYTE *)(v28 + 1065) = *(_BYTE *)(v33 + v31);
  uint64_t v39 = sub_1000C6664(v28 + 1065);
  uint64_t v40 = *(void *)(v28 + 512);
  uint64_t v41 = *(void *)(v28 + 520);
  uint64_t v42 = *v34;
  uint64_t v43 = v34[1];
  os_log_type_t v44 = static os_log_type_t.default.getter(v39);
  sub_100085EE8(v43);
  sub_100085EE8(v41);
  uint64_t v45 = (os_log_s *)sub_100093B00();
  if (sub_10011B3E0(v45))
  {
    uint64_t v73 = v40;
    uint64_t v46 = sub_10007B9FC(22LL);
    uint64_t v47 = sub_10007B9FC(64LL);
    a17 = v47;
    sub_100140A00(4.8752e-34);
    a13 = v48;
    a14 = v49;
    sub_1000AA78C();
    sub_100086114(v42);
    sub_100085F14();
    sub_100086144();
    *(void *)(v28 + 720) = sub_10008620C(a13, v50, &a17);
    sub_1000F3D94(v28 + 720, v28 + 728);
    sub_10007B980();
    sub_10007D974(v43);
    *(_WORD *)(v46 + 12) = 2082;
    sub_10007BA3C();
    *(void *)(v28 + 6sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_100086308(v73, v51, &a17);
    sub_100086194(v28 + 616, v28 + 624);
    sub_100085E64(v41);
    sub_100086038((void *)&_mh_execute_header, v45, v44, "%{public}s%{public}s", (uint8_t *)v46);
    sub_100086030(v47, v52, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v47);
    sub_10007B974(v46);

    sub_10007BA44();
  }

  else
  {
    sub_10007D974(v43);
    sub_100085E64(v41);
  }

  sub_10007A3CC(*(void *)(v28 + 896));
  uint64_t v53 = sub_10007B1FC(&qword_10032AAE8);
  uint64_t v54 = sub_1000875E8(v53);
  *(_OWORD *)(v54 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027AE00;
  uint64_t v55 = (void *)sub_10009C738();
  sub_100121248(v55);
  uint64_t v57 = v56;
  sub_10007B980();
  id v58 = objc_allocWithZone(&OBJC_CLASS___AMSEngagementPlacementInfo);
  unint64_t v59 = sub_100140A34();
  id v61 = sub_10013EC90(v59, v60, v57);
  *(void *)(v54 + 32) = v61;
  a13 = v54;
  specialized Array._endMutation()(v61, v62, v63, v64, v65, v66, v67, v68);
  id v69 = objc_allocWithZone(&OBJC_CLASS___AMSEngagementMessageEvent);
  id v70 = sub_10013ED2C();
  id v71 = [v74 enqueueMessageEvent:v70];
  *(void *)(v28 + 960) = v71;

  *(void *)(v28 + 120) = v28 + 656;
  *(void *)(v28 + 80) = v28;
  *(void *)(v28 + 88) = sub_1001375F4;
  *(void *)(v28 + 360) = sub_1000AA7D4(v28 + 80);
  *(void *)(v28 + 328) = _NSConcreteStackBlock;
  *(void *)(v28 + 336) = 0x40000000LL;
  *(void *)(v28 + 344) = sub_100099C24;
  *(void *)(v28 + 352) = &unk_1002EF3A0;
  [v71 resultWithCompletion:v28 + 328];
  return sub_100093808();
}

uint64_t sub_1001375F4()
{
  *(void *)(v0 + 968) = v1;
  sub_100093420();
  return sub_100092F20();
}

#error "100137DEC: call analysis failed (funcsize=554)"
uint64_t sub_100137F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_1000C6454();
  sub_1000C651C();
  *(void *)(v1 + 1008) = v0;
  sub_1000C652C(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100137F7C()
{
  uint64_t v1 = v0 + 712;
  uint64_t v2 = *(int *)(v0 + 1056);
  uint64_t v3 = *(void *)(v0 + 792);
  uint64_t v4 = (uint64_t *)(v3 + *(int *)(v0 + 1060));
  sub_1000DDE48(*(void *)(v0 + 1008), *(void **)(v0 + 992));
  sub_100140B70();
  uint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(46LL);
  *(void *)(v0 + 544) = 0LL;
  *(void *)(v0 + 552) = 0xE000000000000000LL;
  sub_1000862B8();
  sub_100140A28(44LL, v5);
  *(_BYTE *)(v0 + 1068) = *(_BYTE *)(v3 + v2);
  uint64_t v6 = sub_1000B235C(v0 + 1068);
  uint64_t v7 = *(void *)(v0 + 544);
  uint64_t v8 = *(void *)(v0 + 552);
  uint64_t v10 = *v4;
  uint64_t v9 = v4[1];
  os_log_type_t v11 = static os_log_type_t.default.getter(v6);
  sub_100085EE8(v9);
  uint64_t v12 = sub_100085EE8(v8);
  BOOL v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (sub_10009396C(v13))
  {
    uint64_t v31 = v7;
    uint64_t v14 = sub_10007B9FC(22LL);
    uint64_t v32 = sub_10007B9FC(64LL);
    uint64_t v15 = v32;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v33 = 91LL;
    unint64_t v34 = 0xE100000000000000LL;
    sub_1000B220C();
    sub_1000B2204(v10);
    sub_100085F14();
    sub_10009C494();
    *(void *)(v0 + 760) = sub_10008620C(91LL, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v14 + 4);
    sub_10007B980();
    sub_10007D974(v9);
    *(_WORD *)(v14 + 12) = 2082;
    sub_100085FEC();
    *(void *)(v0 + 736) = sub_1000B20F4(v31, v17, &v32);
    sub_100086194(v0 + 736, v0 + 744);
    sub_100085E64(v8);
    sub_100086038((void *)&_mh_execute_header, v13, v11, "%{public}s%{public}s", (uint8_t *)v14);
    sub_100086030(v15, v18, (uint64_t)&type metadata for Any + 8);
    uint64_t v19 = v15;
    uint64_t v1 = v0 + 712;
    sub_10007B974(v19);
    sub_10007B974(v14);

    sub_100085EF0();
  }

  else
  {
    sub_10007D974(v9);
    sub_100085E64(v8);
  }

  uint64_t v20 = *(void *)(v0 + 920);
  uint64_t v21 = *(void *)(v0 + 792);
  sub_10007A3CC(*(void *)(v0 + 888));
  sub_1000DEA24();
  uint64_t v23 = v22;
  *(void *)(v0 + 10sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v22;
  else {
    NSString v24 = 0LL;
  }
  *(void *)(v0 + 1024) = v24;
  uint64_t v25 = *(void *)(v0 + 992);
  uint64_t v26 = *(void **)(v0 + 784);
  *(void *)(v0 + 184) = v1;
  *(void *)(v0 + 144) = v0;
  *(void *)(v0 + 152) = sub_100138274;
  uint64_t v27 = sub_1000AA7D4(v0 + 144);
  *(void *)(v0 + 208) = _NSConcreteStackBlock;
  uint64_t v28 = v0 + 208;
  *(void *)(v28 + 8) = 0x40000000LL;
  sub_1000937B0(v27, (uint64_t)sub_100099C24);
  [v26 handleEngagementRequest:v25 bag:v23 hostSceneID:v24 completionHandler:v28];
  sub_1000C60EC();
  return swift_continuation_await(v29);
}

uint64_t sub_100138274()
{
  *(void *)(v0 + 1032) = v1;
  sub_100093420();
  return sub_100092F20();
}

#error "100138350: call analysis failed (funcsize=194)"
uint64_t sub_1001385D4()
{
  uint64_t v0;
  uint64_t v1;
  sub_10009C134();
  *(void *)(v0 + 1048) = v1;
  sub_100093420();
  return sub_100092F20();
}

#error "10013869C: call analysis failed (funcsize=199)"
uint64_t sub_100138960()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  sub_10014059C();
  uint64_t v20 = v0[103];
  uint64_t v22 = v0[102];
  swift_release(v0[116]);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  uint64_t v1 = sub_1000939C0();
  uint64_t v9 = sub_1000AADF8(v1, v2, v3, v4, v5, v6, v7, v8, v20);
  sub_100093AE0(v9, v10, v11, v12, v13, v14, v15, v16, v21, v22);
  uint64_t v17 = sub_100093DF8();
  return v18(v17);
}

uint64_t sub_100138A0C()
{
  uint64_t v53 = v1;
  uint64_t v54 = v2;
  uint64_t v52 = v0;
  uint64_t v3 = *(void *)(v0 + 968);
  uint64_t v4 = *(void **)(v0 + 960);
  uint64_t v5 = *(void *)(v0 + 912);
  uint64_t v6 = *(void *)(v0 + 792) + *(int *)(v0 + 1060);
  swift_willThrow(v2, v7, v8, v9, v10, v11, v12);

  sub_100140604(v5);
  sub_1000C60C0();
  _StringGuts.grow(_:)(37LL);
  uint64_t v13 = v51;
  *(void *)(v0 + 560) = v50;
  *(void *)(v0 + 568) = v13;
  sub_1000862B8();
  v14._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  String.append(_:)(v14);
  *(void *)(v0 + 6sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v3;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v15 = _print_unlocked<A, B>(_:_:)(v0 + 640, v0 + 560);
  uint64_t v47 = *(void *)(v0 + 560);
  uint64_t v16 = *(void *)(v0 + 568);
  uint64_t v17 = *(void *)(v6 + 8);
  os_log_type_t v18 = static os_log_type_t.default.getter(v15);
  sub_100085EE8(v17);
  sub_100085EE8(v16);
  uint64_t v19 = (os_log_s *)sub_100093B00();
  os_log_type_t v20 = v18;
  if (sub_10011B3E0(v19))
  {
    uint64_t v46 = *(void *)(v0 + 968);
    uint64_t v45 = *(void **)(v0 + 952);
    uint64_t v21 = sub_10007B9FC(22LL);
    uint64_t v22 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v21 = 136446466;
    sub_1000C6180();
    sub_1000AABA0();
    sub_100140B08();
    sub_100085F14();
    sub_1000AABA8();
    *(void *)(v0 + 728) = sub_10008620C(v50, v23, &v49);
    sub_1000C6390(v0 + 728, v0 + 736);
    sub_10007B980();
    sub_10007D974(v17);
    *(_WORD *)(v21 + 12) = 2082;
    sub_10007BA3C();
    *(void *)(v0 + 632) = sub_100086308(v47, v24, &v49);
    sub_100086194(v0 + 632, v0 + 640);
    sub_100085E64(v16);
    sub_100086038((void *)&_mh_execute_header, v19, v20, "%{public}s%{public}s", (uint8_t *)v21);
    sub_100086030(v22, v25, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v22);
    sub_10007B974(v21);

    sub_1000C657C(v26, v27, v28, v29, v30, v31, v32, v33, v44, v0 + 728, v0 + 640, v0 + 632, v45);
    sub_10007BA44();
    uint64_t v34 = v46;
  }

  else
  {
    uint64_t v35 = *(void *)(v0 + 968);
    uint64_t v36 = *(void **)(v0 + 952);
    sub_10007D974(v17);
    sub_100085E64(v16);

    uint64_t v34 = v35;
  }

  swift_errorRelease(v34);
  uint64_t v37 = *(void *)(v0 + 928);
  uint64_t v38 = *(void *)(v0 + 816);
  uint64_t v39 = *(void *)(v0 + 808);
  uint64_t v40 = *(void *)(v0 + 800);
  sub_10007A3CC(*(void *)(v0 + 840));
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
  swift_release(v37);
  uint64_t v48 = *(void *)(v0 + 816);
  swift_task_dealloc(*(void *)(v0 + 904));
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  swift_task_dealloc(v48);
  uint64_t v41 = sub_100093DF8();
  return v42(v41);
}

#error "100138D90: call analysis failed (funcsize=43)"
#error "100138E30: call analysis failed (funcsize=39)"
uint64_t sub_100138E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  v4[38] = a3;
  v4[39] = v3;
  v4[37] = a1;
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  v4[40] = v5;
  uint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[41] = swift_task_alloc(v6);
  v4[42] = swift_task_alloc(v6);
  v4[43] = swift_task_alloc(v6);
  uint64_t v7 = (*(void *)(*(void *)(sub_10007B1FC((uint64_t *)&unk_10032A1C0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[44] = swift_task_alloc(v7);
  v4[45] = swift_task_alloc(v7);
  v4[46] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for URL(0LL);
  v4[47] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[48] = v9;
  uint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[49] = swift_task_alloc(v10);
  v4[50] = swift_task_alloc(v10);
  v4[51] = swift_task_alloc(v10);
  v4[52] = swift_task_alloc(v10);
  return swift_task_switch(sub_100138F54, 0LL, 0LL);
}

uint64_t sub_100138F54()
{
  if (sub_10006B548())
  {
    unint64_t v1 = 0x80000001002A5990LL;
    if (qword_100328C68 != -1) {
      swift_once(&qword_100328C68, sub_10012C064);
    }
    uint64_t v2 = &qword_10033E2F0;
  }

  else
  {
    unint64_t v1 = 0x80000001002A5840LL;
    if (qword_100328C60 != -1) {
      swift_once(&qword_100328C60, sub_10012BFEC);
    }
    uint64_t v2 = &qword_10033E2E8;
  }

  uint64_t v3 = (void *)*v2;
  v0[53] = v1;
  v0[54] = v3;
  id v4 = v3;
  sub_1000DEA24();
  id v6 = [v5 URLForKey:v4];
  v0[55] = v6;
  sub_1000931C0();
  v0[7] = v0 + 29;
  v0[2] = v0;
  v0[3] = sub_1001390B8;
  uint64_t v7 = sub_1000AA7D4((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  sub_1000937B0(v7, (uint64_t)sub_1000A6BC4);
  sub_10014085C(v6, "valueWithCompletion:");
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1001390B8()
{
  *(void *)(v0 + 448) = v1;
  if (!v1) {
    swift_bridgeObjectRelease();
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100139100()
{
  uint64_t v1 = *(void **)(v0 + 232);

  sub_100140AD0();
  sub_1001409C8();
  uint64_t v2 = (void *)swift_task_alloc(dword_10032B1F4);
  *(void *)(v0 + 456) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10013916C;
  uint64_t v3 = sub_1001408B0(*(void *)(v0 + 416));
  return sub_1000D5638(v3, v4);
}

uint64_t sub_10013916C()
{
  *(void *)(v2 + 464) = v1;
  *(void *)(v2 + 472) = v0;
  sub_1000C652C(v3);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1001391B8()
{
  uint64_t v71 = v1;
  uint64_t v72 = v2;
  uint64_t v70 = v0;
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = sub_100140378();
  *(void *)(v0 + 480) = v4;
  uint64_t v5 = *(int *)(v4 + 36);
  *(_DWORD *)(v0 + 244) = v5;
  uint64_t v6 = sub_1001409A4(0x4020004u);
  uint64_t v8 = sub_1000D5038(v6, v7);
  uint64_t v10 = v9;
  sub_100085EF0();
  *(void *)(v0 + 488) = v8;
  *(void *)(v0 + 496) = v10;
  if (v10)
  {
    uint64_t v11 = sub_1001409A4(0x6030106u);
    uint64_t v13 = sub_1000D5038(v11, v12);
    uint64_t v15 = v14;
    sub_1000930DC();
    if (v15)
    {
      uint64_t v16 = **(void **)(v0 + 312);
      uint64_t v17 = *(void *)(v16 + OBJC_IVAR____TtC9storekitd6Client_vendorName + 8);
      if (v17)
      {
        *(void *)(v0 + 184) = *(void *)(v16 + OBJC_IVAR____TtC9storekitd6Client_vendorName);
        *(void *)(v0 + 192) = v17;
        *(void *)(v0 + 120) = v13;
        *(void *)(v0 + 128) = v15;
        sub_100140A54();
        *(void *)(v0 + 152) = v18;
        *(void *)(v0 + 160) = v19;
      }

      else
      {
        uint64_t v50 = *(void *)(v16 + OBJC_IVAR____TtC9storekitd6Client_signerOrganization + 8);
        if (!v50)
        {
          uint64_t v63 = v15;
          goto LABEL_15;
        }

        *(void *)(v0 + 168) = *(void *)(v16 + OBJC_IVAR____TtC9storekitd6Client_signerOrganization);
        *(void *)(v0 + 176) = v50;
        *(void *)(v0 + 2sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v13;
        *(void *)(v0 + 224) = v15;
        sub_100140A54();
        *(void *)(v0 + 200) = v51;
        *(void *)(v0 + 208) = v52;
      }

      unint64_t v53 = sub_1000A9B34();
      sub_10007BA3C();
      sub_100140964();
      uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v54,  v55,  v56,  v57,  v58,  v59,  v60,  v61,  &type metadata for String,  v53,  v53,  v53);
      uint64_t v63 = v62;
      sub_100085EF0();
      sub_10007BA44();
LABEL_15:
      *(void *)(v0 + 504) = v13;
      *(void *)(v0 + 512) = v63;
      uint64_t v64 = (void *)swift_task_alloc(dword_10032C58C);
      *(void *)(v0 + 520) = v64;
      *uint64_t v64 = v0;
      v64[1] = sub_1001395E8;
      return sub_10013A5F4(*(void *)(v0 + 408));
    }

    sub_100085FB4();
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v20 = *(void *)(v0 + 336);
  uint64_t v21 = *(void *)(v0 + 312);
  uint64_t v22 = sub_100079604(*(void *)(v0 + 320), (uint64_t)qword_10033E1A8);
  sub_10007961C(v22, v20);
  sub_1000C60C0();
  _StringGuts.grow(_:)(32LL);
  uint64_t v23 = v69;
  *(void *)(v0 + 136) = v68;
  *(void *)(v0 + 144) = v23;
  sub_1001406C4(0xD00000000000001ELL, (uint64_t)"Localization missing for mode ");
  *(_BYTE *)(v0 + 241) = *(_BYTE *)(v3 + v5);
  uint64_t v24 = sub_1000B235C(v0 + 241);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v25 = *(void *)(v0 + 144);
  uint64_t v27 = (uint64_t *)(v21 + *(int *)(v4 + 32));
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  LOBYTE(v21) = static os_log_type_t.error.getter(v24);
  sub_100085EE8(v29);
  sub_100085EE8(v25);
  uint64_t v30 = (os_log_s *)sub_10009C414();
  os_log_type_t v31 = v21;
  if (sub_1000B22A4(v30))
  {
    uint64_t v32 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v65 = v26;
    uint64_t v33 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v32 = 136446466;
    sub_1001406F8();
    sub_1000B2204(v28);
    sub_100085F14();
    sub_10009C494();
    *(void *)(v0 + 272) = sub_10008620C(v68, v34, &v67);
    sub_1000B21CC(v0 + 272, v0 + 280);
    sub_10007B980();
    sub_10007D974(v29);
    sub_1000861F0();
    sub_100085FEC();
    *(void *)(v0 + 264) = sub_1000B20F4(v65, v35, &v67);
    sub_100086194(v0 + 264, v0 + 272);
    sub_100085E64(v25);
    sub_100086038((void *)&_mh_execute_header, v30, v31, "%{public}s%{public}s", v32);
    sub_100086030(v33, v36, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v33);
    sub_10007B974((uint64_t)v32);

    sub_100085EF0();
  }

  else
  {
    sub_10007D974(v29);
    sub_100085E64(v25);
  }

  uint64_t v37 = *(void **)(v0 + 464);
  uint64_t v38 = *(void **)(v0 + 432);
  uint64_t v39 = *(void *)(v0 + 416);
  uint64_t v40 = *(void *)(v0 + 376);
  uint64_t v41 = *(void *)(v0 + 384);
  sub_10007A3CC(*(void *)(v0 + 336));
  unint64_t v42 = sub_10013F714();
  uint64_t v66 = sub_100093030((uint64_t)&type metadata for ExternalGatewaySheet.ExternalLinkSheetError, v42);
  sub_1000C62B4(v66, v43, v44, v45, v46, v47, v48);

  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  sub_1001402D8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  sub_1000939C0();
  return sub_100092F68(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001395E8()
{
  uint64_t v8 = *v1;
  uint64_t v2 = v8;
  sub_1000C666C(&v8);
  *(void *)(v2 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease();
    sub_10007B980();
  }

  sub_100093420();
  return sub_1000C5F5C(v4, v5, v6);
}

uint64_t sub_100139650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_BYTE *)(*(void *)(v3 + 312) + *(int *)(v3 + 244)) & 0xFD) != 0)
  {
    sub_1000875FC(*(void *)(v3 + 360), a2, a3, *(void *)(v3 + 376));
    uint64_t v4 = (void *)swift_task_alloc(dword_10032C594);
    *(void *)(v3 + 552) = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_100139B7C;
    sub_1000C60EC();
    return sub_10013BD40(v5, v6, v7, v8, v9, v10, v11, v12);
  }

  else
  {
    uint64_t v14 = *(void *)(v3 + 368);
    sub_1000E9220(*(void *)(v3 + 296), v14, (uint64_t *)&unk_10032A1C0);
    sub_10014088C(v14);
    if (v15)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = sub_10007B980();
      sub_100140ADC(v16, (uint64_t *)&unk_10032A1C0);
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v17 = *(int *)(v3 + 244);
      uint64_t v18 = *(void *)(v3 + 312);
      uint64_t v19 = sub_100079604(*(void *)(v3 + 320), (uint64_t)qword_10033E1A8);
      sub_10009362C(v19);
      sub_1001408F8();
      _StringGuts.grow(_:)(28LL);
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }

    (*(void (**)(void, void, void))(*(void *)(v3 + 384) + 32LL))( *(void *)(v3 + 400),  *(void *)(v3 + 368),  *(void *)(v3 + 376));
    uint64_t v20 = (void *)swift_task_alloc(dword_10032C59C);
    *(void *)(v3 + 536) = v20;
    *uint64_t v20 = v3;
    v20[1] = sub_100139A98;
    sub_1001408B0(*(void *)(v3 + 488));
    sub_1000C60EC();
    return sub_10013A884(v21, v22, v23, v24, v25, v26, v27);
  }

uint64_t sub_100139A98()
{
  uint64_t v8 = *v1;
  uint64_t v2 = v8;
  sub_1000C666C(&v8);
  *(void *)(v2 + 544) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease(*(void *)(v2 + 512));
  sub_100085EF0();
  sub_100093420();
  return sub_1000C5F5C(v4, v5, v6);
}

#error "100139B64: call analysis failed (funcsize=31)"
uint64_t sub_100139B7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v8 = *v1;
  uint64_t v2 = v8;
  sub_1000C666C(&v8);
  *(void *)(v2 + 560) = v0;
  swift_task_dealloc(v3);
  sub_1000CEEA8(*(void *)(v2 + 360), (uint64_t *)&unk_10032A1C0);
  sub_100085EF0();
  sub_10007BA44();
  sub_100093420();
  return sub_1000C5F5C(v4, v5, v6);
}

#error "100139C50: call analysis failed (funcsize=27)"
uint64_t sub_100139C68()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;
  os_log_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  os_log_s *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[12];
  void *v52;
  uint64_t v53;
  uint64_t v54;
  sub_1000C60D0();
  unint64_t v53 = v1;
  uint64_t v54 = v2;
  uint64_t v52 = v0;
  uint64_t v3 = (void *)v0[55];
  uint64_t v4 = v0[56];
  sub_100093D24();

  uint64_t v5 = (void *)_convertErrorToNSError(_:)(v4);
  uint64_t v6 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
  sub_1000D67E8(v6, v7, (id)0xCC);
  uint64_t v9 = v8;

  sub_100085EF0();
  if ((v9 & 1) == 0)
  {
    uint64_t v21 = (void *)v0[54];
    uint64_t v22 = swift_bridgeObjectRelease();
    swift_willThrow(v22, v23, v24, v25, v26, v27, v28);

LABEL_10:
    sub_1001402D8();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    sub_1000AABB0();
    sub_1000939C0();
    uint64_t v40 = (uint64_t (*)(void))sub_100140930();
    return sub_1000C6124(v40);
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v10 = (os_log_s *)v0[39];
  uint64_t v11 = sub_100079604(v0[40], (uint64_t)qword_10033E1A8);
  sub_10009362C(v11);
  uint64_t v12 = sub_100140378();
  uint64_t v13 = *(void *)((char *)v10 + *(int *)(v12 + 32) + 8);
  uint64_t v14 = static os_log_type_t.default.getter(v12);
  char v15 = sub_100085EE8(v13);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  if (sub_1000C5F64(v16))
  {
    uint64_t v17 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v18 = sub_10007B9FC(64LL);
    sub_10014062C(4.8752e-34);
    sub_1001406AC();
    sub_100085F14();
    sub_1000930DC();
    v0[35] = sub_10008620C(v51[1], v19, v51);
    sub_1000B21CC((uint64_t)(v0 + 35), (uint64_t)(v0 + 36));
    sub_10007D974(v13);
    sub_10007B980();
    sub_1000C5FF4();
    v0[36] = sub_1000AB050(53LL, 0x80000001002A5890LL, v51);
    sub_100086194((uint64_t)(v0 + 36), (uint64_t)(v0 + 37));
    sub_100086038((void *)&_mh_execute_header, v10, v14, "%{public}s%{public}s", v17);
    sub_100086030(v18, v20, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v18);
    sub_10007B974((uint64_t)v17);
  }

  else
  {

    sub_10007D974(v13);
  }

  uint64_t v29 = v0[53];
  uint64_t v30 = v0[44];
  sub_10007A3CC(v0[41]);
  URL.init(string:)(0xD00000000000004ELL, v29);
  sub_10007B980();
  if (sub_100140684(v30) == 1)
  {
    os_log_type_t v31 = (void *)v0[54];
    sub_1000CEEA8(v0[44], (uint64_t *)&unk_10032A1C0);
    uint64_t v32 = sub_10009BB88();
    uint64_t v33 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v32);
    *uint64_t v34 = 2;
    sub_1000C62B4(v33, (uint64_t)v34, v35, v36, v37, v38, v39);

    sub_10011B038();
    goto LABEL_10;
  }

  unint64_t v42 = v0[52];
  uint64_t v44 = v0[48];
  uint64_t v43 = v0[49];
  uint64_t v45 = v0[47];
  uint64_t v46 = v0[44];
  sub_10011B038();
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
  v47(v43, v46, v45);
  v47(v42, v43, v45);
  sub_1001409C8();
  uint64_t v48 = (void *)swift_task_alloc(dword_10032B1F4);
  v0[57] = v48;
  *uint64_t v48 = v0;
  v48[1] = sub_10013916C;
  uint64_t v49 = sub_1001408B0(v0[52]);
  return sub_1000D5638(v49, v50);
}

uint64_t sub_100139F94()
{
  uint64_t v1 = *(void *)(v0 + 384);

  sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1001402D8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  sub_1000939C0();
  uint64_t v2 = (uint64_t (*)(void))sub_100140930();
  return sub_10011B460(v2);
}

uint64_t sub_10013A000()
{
  uint64_t v1 = *(void **)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 384);

  sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_1001402D8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  sub_1000939C0();
  uint64_t v3 = (uint64_t (*)(void))sub_100140930();
  return sub_10011B460(v3);
}

uint64_t sub_10013A074()
{
  uint64_t v1 = *(void **)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 400);

  sub_100140A20(v4);
  sub_100140A20(v2);
  sub_100140A20(v3);
  sub_1001402D8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  sub_1000939C0();
  uint64_t v5 = (uint64_t (*)(void))sub_100140930();
  return sub_10011B460(v5);
}

uint64_t sub_10013A100()
{
  uint64_t v1 = *(void **)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 384);

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v2, v4);
  v6(v3, v4);
  sub_1001402D8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  sub_1000AABB0();
  sub_1000939C0();
  uint64_t v7 = (uint64_t (*)(void))sub_100140930();
  return sub_10011B460(v7);
}

uint64_t sub_10013A188(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  v2[22] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SKLogger(0LL);
  v2[23] = v4;
  v2[24] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10013A208, 0LL, 0LL);
}

uint64_t sub_10013A208()
{
  uint64_t v1 = sub_100140378();
  v0[25] = v1;
  id v2 = sub_1000936AC(v1, "URLForKey:");
  v0[26] = v2;
  sub_1000931C0();
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_10013A2D8;
  uint64_t v3 = sub_1000AA7D4((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_1000A6BC4;
  v0[13] = &unk_1002EF418;
  v0[14] = v3;
  sub_10009C2F4(v2, "valueWithCompletion:");
  return sub_1001405DC();
}

uint64_t sub_10013A2D8()
{
  *(void *)(v0 + 2sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013A318()
{
  uint64_t v1 = *(void **)(v0 + 120);

  sub_100140AD0();
  sub_1001407C0();
  sub_1000939C0();
  id v2 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000AA42C(v2);
}

uint64_t sub_10013A35C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  uint64_t v28 = *(void **)(v24 + 208);
  uint64_t v27 = *(void *)(v24 + 216);
  swift_willThrow(v26, v29, v30, v31, v32, v33, v34);

  type metadata accessor for Code(0LL);
  uint64_t v36 = v35;
  *(void *)(v24 + 136) = 204LL;
  swift_errorRetain(v27);
  sub_10007ACCC( &qword_100328FE8,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100279FA0);
  LOBYTE(v36) = static _ErrorCodeProtocol.~= infix(_:_:)(v24 + 136, v27, v36, v37);
  sub_10011B038();
  if ((v36 & 1) != 0 && *(_BYTE *)(*(void *)(v24 + 168) + *(int *)(*(void *)(v24 + 200) + 36LL)) != 2)
  {
    swift_errorRelease(*(void *)(v24 + 216));
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v39 = *(int **)(v24 + 200);
    uint64_t v40 = *(void *)(v24 + 168);
    uint64_t v41 = sub_100079604(*(void *)(v24 + 184), (uint64_t)qword_10033E1A8);
    uint64_t v42 = sub_10009362C(v41);
    uint64_t v43 = *(void *)(v40 + v39[8] + 8);
    os_log_type_t v44 = static os_log_type_t.default.getter(v42);
    uint64_t v45 = sub_100085EE8(v43);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    if (sub_1000C5F64(v46))
    {
      uint64_t v47 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v48 = sub_10007B9FC(64LL);
      sub_10014062C(4.8752e-34);
      sub_1001406AC();
      sub_100085F14();
      sub_1000930DC();
      *(void *)(v24 + 144) = sub_10008620C(a11, v49, &a10);
      sub_1000B21CC(v24 + 144, v24 + 152);
      sub_10007B980();
      sub_10007D974(v43);
      sub_1000C5FF4();
      *(void *)(v24 + 152) = sub_10007A488(0xD000000000000042LL, 0x80000001002A57B0LL, &a10);
      sub_100086194(v24 + 152, v24 + 160);
      sub_100086038((void *)&_mh_execute_header, (os_log_s *)v39, v44, "%{public}s%{public}s", v47);
      sub_100086030(v48, v50, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v48);
      sub_10007B974((uint64_t)v47);
    }

    else
    {
      sub_10007D974(v43);
    }

    uint64_t v51 = *(void *)(v24 + 176);
    sub_10007A3CC(*(void *)(v24 + 192));
    URL.init(string:)(0xD000000000000036LL, 0x80000001002A5800LL);
    uint64_t v52 = sub_100086318();
    uint64_t result = sub_10014088C(v51);
    if (v53)
    {
      __break(1u);
    }

    else
    {
      (*(void (**)(void, void, uint64_t))(*(void *)(v52 - 8) + 32LL))( *(void *)(v24 + 160),  *(void *)(v24 + 176),  v52);
      sub_1001407C0();
      sub_1000939C0();
      uint64_t v54 = (uint64_t (*)(void))sub_100093CFC();
      return sub_1000C6124(v54);
    }
  }

  else
  {
    sub_1001407C0();
    sub_1000939C0();
    return sub_1000C6124(*(uint64_t (**)(void))(v24 + 8));
  }

  return result;
}

uint64_t sub_10013A5F4(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  return swift_task_switch(sub_10013A60C, 0LL, 0LL);
}

void sub_10013A60C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_1000DEA24();
  *(void *)(v0 + 152) = v2;
  uint64_t v3 = (char *)&loc_10013A64C + *((int *)qword_10013A788 + *(unsigned __int8 *)(v1 + *(int *)(sub_100140378() + 36)));
  __asm { BR              X10 }

uint64_t sub_10013A65C()
{
  if (qword_100328BD8 != -1) {
    swift_once(&qword_100328BD8, sub_10012B7D8);
  }
  uint64_t v1 = (void *)qword_10033E260;
  v0[20] = qword_10033E260;
  id v2 = sub_1000936AC((uint64_t)v1, "URLForKey:");
  v0[21] = v2;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_10013A798;
  uint64_t v3 = sub_1000AA7D4((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  sub_1000937B0(v3, (uint64_t)sub_1000A6BC4);
  sub_10014085C(v2, "valueWithCompletion:");
  return sub_1000AA4B4();
}

uint64_t sub_10013A798()
{
  *(void *)(v0 + 176) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013A7D8()
{
  uint64_t v1 = *(void **)(v0 + 160);
  id v2 = *(void **)(v0 + 120);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v2);
  sub_1000931C0();
  uint64_t v3 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000AA42C(v3);
}

uint64_t sub_10013A830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 168);
  uint64_t v9 = *(void **)(v7 + 160);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  sub_1000931C0();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_10013A884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[81] = v7;
  v8[80] = a7;
  v8[79] = a6;
  v8[78] = a5;
  v8[77] = a4;
  v8[76] = a3;
  v8[75] = a2;
  v8[74] = a1;
  uint64_t v9 = sub_10007B1FC(&qword_10032C5A0);
  v8[82] = v9;
  v8[83] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SKLogger(0LL);
  v8[84] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[85] = swift_task_alloc(v11);
  v8[86] = swift_task_alloc(v11);
  v8[87] = swift_task_alloc(v11);
  v8[88] = swift_task_alloc(v11);
  v8[89] = swift_task_alloc(v11);
  v8[90] = swift_task_alloc(v11);
  return swift_task_switch(sub_10013A990, 0LL, 0LL);
}

CFStringRef sub_10013A990()
{
  uint64_t v155 = v2;
  uint64_t v156 = v3;
  uint64_t v154 = v0;
  uint64_t v4 = sub_1001406B8(0xD000000000000040LL, (uint64_t)"StoreKit.ExternalLinkAccountNotitication.qr-subtitle-text-format");
  if (!v5) {
    goto LABEL_17;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  sub_1000862B8();
  uint64_t v9 = sub_1000D5038(0xD000000000000022LL, v8);
  if (!v10)
  {
LABEL_16:
    sub_100093460();
LABEL_17:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v67 = *(os_log_s **)(v0 + 648);
    uint64_t v68 = sub_100079604(*(void *)(v0 + 672), (uint64_t)qword_10033E1A8);
    sub_10009362C(v68);
    sub_100140378();
    os_log_type_t v69 = sub_100140954();
    uint64_t v70 = sub_100085EE8(v1);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    if (sub_1000C5F64(v71))
    {
      uint64_t v72 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v73 = sub_10007B9FC(64LL);
      v153[0] = v73;
      sub_100140778(4.8752e-34);
      char v148 = v74;
      uint64_t v151 = v75;
      int v76 = sub_1000930E4();
      sub_100140918(v76, v77, v78, v79, v80, v81, v82, v83, v122, v125, v129, v132, v135, v137, v140, v0 + 536, v148);
      sub_100085F14();
      sub_1000930DC();
      uint64_t v85 = sub_10008620C(v149, v84, v153);
      *(void *)(v0 + 544) = v85;
      sub_1001409B0(v85, v0 + 552);
      sub_10007B980();
      sub_10007D974(v1);
      sub_1000C5FF4();
      *(void *)(v0 + 536) = sub_1001408C0( 0xD000000000000031LL,  (uint64_t)"Localization missing for ExternalGateway QR sheet",  v124,  v128,  v131,  v134,  v136,  v139,  v143,  v145,  v149,  v151,  v152);
      sub_100086194(v146, v0 + 544);
      sub_100086038((void *)&_mh_execute_header, v67, v69, "%{public}s%{public}s", v72);
      sub_100086030(v73, v86, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v73);
      sub_10007B974((uint64_t)v72);
    }

    else
    {
      sub_10007D974(v1);
    }

    uint64_t v87 = *(void *)(v0 + 688);
    goto LABEL_23;
  }

  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = sub_1001406B8(0xD000000000000028LL, (uint64_t)"StoreKit.ExternalGateway.learn-more-text");
  if (!v14)
  {
    sub_100093460();
    goto LABEL_16;
  }

  uint64_t v141 = v13;
  uint64_t v144 = v11;
  uint64_t v138 = v14;
  *(void *)(v0 + 432) = URL.absoluteString.getter(v13);
  *(void *)(v0 + 4sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v15;
  *(void *)(v0 + 4sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v6;
  *(void *)(v0 + 424) = v7;
  *(void *)(v0 + 448) = 0x40404C52554040LL;
  *(void *)(v0 + 456) = 0xE700000000000000LL;
  unint64_t v126 = sub_1000A9B34();
  sub_100140964();
  uint64_t v24 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  &type metadata for String,  v126,  v126,  v126);
  uint64_t v26 = v25;
  sub_100093460();
  sub_100085FB4();
  uint64_t v27 = sub_10007B1FC((uint64_t *)&unk_10032A690);
  uint64_t inited = swift_initStackObject(v27, v0 + 80);
  *(_OWORD *)(inited + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027CE00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSCFUserNotificationTemplateTypeKey);
  *(void *)(inited + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v29;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationExternalLinkTemplateType);
  *(void *)(inited + 56) = v30;
  CFStringRef result = kCFUserNotificationAlertHeaderKey;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v32 = *(void *)(v0 + 600);
  uint64_t v33 = *(void *)(v0 + 592);
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFUserNotificationAlertHeaderKey);
  *(void *)(inited + 72) = v34;
  *(void *)(inited + 80) = v33;
  *(void *)(inited + 88) = v32;
  CFStringRef result = kCFUserNotificationAlertMessageKey;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v35 = *(void *)(v0 + 616);
  uint64_t v36 = *(void *)(v0 + 608);
  *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFUserNotificationAlertMessageKey);
  *(void *)(inited + 104) = v37;
  *(void *)(inited + 112) = v36;
  *(void *)(inited + 120) = v35;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationQRCodeSubtitleKey);
  *(void *)(inited + 136) = v38;
  *(void *)(inited + 144) = v24;
  *(void *)(inited + 152) = v26;
  CFStringRef result = kCFUserNotificationDefaultButtonTitleKey;
  if (!kCFUserNotificationDefaultButtonTitleKey)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  *(void *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFUserNotificationDefaultButtonTitleKey);
  *(void *)(inited + 168) = v39;
  *(void *)(inited + 176) = v144;
  *(void *)(inited + 184) = v12;
  CFStringRef result = kCFUserNotificationAlternateButtonTitleKey;
  if (!kCFUserNotificationAlternateButtonTitleKey)
  {
LABEL_38:
    __break(1u);
    return result;
  }

  *(void *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFUserNotificationAlternateButtonTitleKey);
  *(void *)(inited + 200) = v40;
  *(void *)(inited + 208) = v141;
  *(void *)(inited + 2sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v138;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(PBSUserNotificationQRCodeURLKey);
  *(void *)(inited + 232) = v41;
  sub_10008618C();
  uint64_t v42 = sub_10007BA3C();
  *(void *)(inited + 2sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = URL.absoluteString.getter(v42);
  *(void *)(inited + 248) = v43;
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  *(_DWORD *)(v0 + 808) = 0;
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100085FB4();
  CFUserNotificationRef v45 = CFUserNotificationCreate(0LL, 0.0, 0LL, (SInt32 *)(v0 + 808), isa);
  *(void *)(v0 + 728) = v45;

  if (!v45)
  {
LABEL_11:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v46 = *(void *)(v0 + 648);
    uint64_t v47 = sub_100079604(*(void *)(v0 + 672), (uint64_t)qword_10033E1A8);
    sub_1000935C4(v47);
    sub_1000C60C0();
    _StringGuts.grow(_:)(36LL);
    sub_100093CCC(v48, v49, v50, v51, v52, v53, v54, v55, v123, v127, v130, v133, v135, v138, v141, v144, v147, v150);
    *(_DWORD *)(v0 + 812) = *(_DWORD *)(v0 + 808);
    v157._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    sub_100093A2C(v157);
    sub_10007BA44();
    uint64_t v56 = sub_100140378();
    uint64_t v57 = (uint64_t *)(v46 + *(int *)(v56 + 32));
    uint64_t v58 = *v57;
    uint64_t v59 = v57[1];
    os_log_type_t v60 = static os_log_type_t.error.getter(v56);
    sub_100085EE8(v59);
    sub_100085EE8(0x80000001002A5A20LL);
    uint64_t v61 = (os_log_s *)sub_1000935A4();
    os_log_type_t v62 = v60;
    if (sub_10011B3E0(v61))
    {
      uint64_t v63 = sub_10007B9FC(22LL);
      uint64_t v142 = sub_10007B9FC(64LL);
      v153[0] = v142;
      *(_DWORD *)uint64_t v63 = 136446466;
      sub_1000AA78C();
      sub_100086114(v58);
      sub_100085F14();
      sub_100086144();
      *(void *)(v0 + 464) = sub_10008620C(91LL, v64, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v63 + 4);
      sub_10007B980();
      sub_10007D974(v59);
      *(_WORD *)(v63 + 12) = 2082;
      sub_10007BA3C();
      *(void *)(v0 + 472) = sub_100086308(0xD000000000000022LL, v65, v153);
      sub_100086194(v0 + 472, v0 + 480);
      sub_100085E64(0x80000001002A5A20LL);
      sub_100086038((void *)&_mh_execute_header, v61, v62, "%{public}s%{public}s", (uint8_t *)v63);
      sub_100086030(v142, v66, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v142);
      sub_10007B974(v63);

      sub_10007BA44();
    }

    else
    {
      sub_10007D974(v59);
      sub_100085E64(0x80000001002A5A20LL);
    }

    uint64_t v87 = *(void *)(v0 + 696);
LABEL_23:
    sub_10007A3CC(v87);
    unint64_t v88 = sub_10013F714();
    uint64_t v89 = sub_100093030((uint64_t)&type metadata for ExternalGatewaySheet.ExternalLinkSheetError, v88);
    sub_1000C62B4(v89, v90, v91, v92, v93, v94, v95);
LABEL_24:
    swift_task_dealloc(*(void *)(v0 + 720));
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    return (CFStringRef)sub_1001402F0(*(uint64_t (**)(void))(v0 + 8));
  }

  if (*(_DWORD *)(v0 + 808))
  {

    goto LABEL_11;
  }

  CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(0LL, v45, (CFUserNotificationCallBack)sub_10013D188, 0LL);
  *(void *)(v0 + 736) = RunLoopSource;
  if (!RunLoopSource)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v100 = *(void *)(v0 + 648);
    uint64_t v101 = sub_100079604(*(void *)(v0 + 672), (uint64_t)qword_10033E1A8);
    sub_10009362C(v101);
    uint64_t v102 = sub_100140378();
    uint64_t v103 = (uint64_t *)(v100 + *(int *)(v102 + 32));
    uint64_t v104 = *v103;
    uint64_t v105 = v103[1];
    os_log_type_t v106 = static os_log_type_t.error.getter(v102);
    uint64_t v107 = sub_100085EE8(v105);
    uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
    os_log_type_t v109 = v106;
    if (sub_10009396C(v108))
    {
      uint64_t v110 = sub_10007B9FC(22LL);
      uint64_t v111 = sub_10007B9FC(64LL);
      v153[0] = v111;
      *(_DWORD *)uint64_t v110 = 136446466;
      sub_1000B220C();
      sub_1000B2204(v104);
      sub_100085F14();
      sub_10009C494();
      *(void *)(v0 + 480) = sub_10008620C(91LL, v112, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v110 + 4);
      sub_10007B980();
      sub_10007D974(v105);
      *(_WORD *)(v110 + 12) = 2082;
      *(void *)(v0 + 488) = sub_1001408C0( 0xD000000000000035LL,  (uint64_t)"Couldn't create run loop source for user notification",  v123,  v127,  v130,  v133,  v135,  v138,  v110 + 4,  v0 + 488,  91LL,  0xE100000000000000LL,  v152);
      sub_100086194(v0 + 488, v0 + 496);
      sub_100086038((void *)&_mh_execute_header, v108, v109, "%{public}s%{public}s", (uint8_t *)v110);
      sub_100086030(v111, v113, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v111);
      sub_10007B974(v110);
    }

    else
    {
      sub_10007D974(v105);
    }

    sub_10007A3CC(*(void *)(v0 + 704));
    unint64_t v114 = sub_10013F714();
    uint64_t v115 = sub_100093030((uint64_t)&type metadata for ExternalGatewaySheet.ExternalLinkSheetError, v114);
    sub_1000C62B4(v115, v116, v117, v118, v119, v120, v121);

    goto LABEL_24;
  }

  CFRunLoopSourceRef v97 = RunLoopSource;
  uint64_t v98 = swift_task_alloc(32LL);
  *(void *)(v0 + 744) = v98;
  *(void *)(v98 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v97;
  uint64_t v99 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 752) = v99;
  *uint64_t v99 = v0;
  v99[1] = sub_10013B2E4;
  sub_100093420();
  return (CFStringRef)((uint64_t (*)(void))withCheckedContinuation<A>(isolation:function:_:))();
}

uint64_t sub_10013B2E4()
{
  return sub_100092F20();
}

id sub_10013B34C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32)
{
  a31 = v33;
  a32 = v34;
  a30 = v32;
  uint64_t v72 = v32 + 520;
  uint64_t v35 = *(void *)(v32 + 496);
  CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(v32 + 736));
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v73 = v32 + 376;
  uint64_t v36 = *(void *)(v32 + 648);
  uint64_t v37 = sub_100079604(*(void *)(v32 + 672), (uint64_t)qword_10033E1A8);
  *(void *)(v32 + 760) = v37;
  uint64_t v70 = v37;
  sub_100140604(v37);
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  *(void *)(v32 + 504) = v35;
  v74._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  sub_100140998(v74);
  sub_100085EF0();
  uint64_t v38 = sub_100140378();
  uint64_t v39 = (uint64_t *)(v36 + *(int *)(v38 + 32));
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  uint64_t v71 = v39;
  os_log_type_t v42 = static os_log_type_t.default.getter(v38);
  sub_100085EE8(v40);
  sub_100085EE8(0x80000001002A5AE0LL);
  uint64_t v43 = (os_log_s *)sub_100093B00();
  if (sub_100093764(v43))
  {
    uint64_t v44 = sub_10007B9FC(22LL);
    uint64_t v45 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v44 = 136446466;
    a20 = v45;
    sub_100085FEC();
    sub_1000935BC(v41);
    sub_100085F14();
    sub_100085EF0();
    *(void *)(v32 + 528) = sub_10008620C(91LL, v46, &a20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32 + 528, v32 + 536, v44 + 4);
    sub_10007B980();
    sub_10007D974(v40);
    *(_WORD *)(v44 + 12) = 2082;
    sub_1000930E4();
    *(void *)(v32 + 512) = sub_10007A488(0xD000000000000020LL, 0x80000001002A5AE0LL, &a20);
    sub_100086194(v32 + 512, v72);
    sub_100085E64(0x80000001002A5AE0LL);
    sub_100086038((void *)&_mh_execute_header, v43, v42, "%{public}s%{public}s", (uint8_t *)v44);
    sub_100086030(v45, v47, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v45);
    sub_10007B974(v44);

    sub_1000930DC();
  }

  else
  {
    sub_10007D974(v40);
    sub_100085E64(0x80000001002A5AE0LL);
  }

  sub_10007A3CC(*(void *)(v32 + 720));
  if (qword_100328D60 != -1) {
    swift_once(&qword_100328D60, sub_100136850);
  }
  uint64_t v48 = *(void **)(v32 + 664);
  uint64_t v49 = sub_100079604(*(void *)(v32 + 656), (uint64_t)qword_10033E3E0);
  uint64_t v50 = sub_10007B1FC(&qword_10032C5A8);
  sub_1000875FC((uint64_t)v48, v51, v52, v50);
  swift_beginAccess(v49, v73, 33LL, 0LL);
  sub_10013F758((uint64_t)v48, v49);
  swift_endAccess(v73);
  if (v35 == 1)
  {
    sub_100140604(v70);
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v53 = sub_100086318();
    sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v75._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
    sub_100140998(v75);
    uint64_t v55 = sub_100085EF0();
    uint64_t v56 = *v71;
    *(void *)(v32 + 768) = *v71;
    uint64_t v57 = v71[1];
    *(void *)(v32 + 776) = v57;
    os_log_type_t v58 = static os_log_type_t.default.getter(v55);
    sub_100085EE8(v57);
    sub_100085EE8(0x80000001002A5B10LL);
    uint64_t v59 = (os_log_s *)sub_100093B00();
    if (sub_10009396C(v59))
    {
      os_log_type_t v60 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v61 = sub_10007B9FC(64LL);
      *(_DWORD *)os_log_type_t v60 = 136446466;
      a20 = v61;
      sub_100085FEC();
      sub_1000935BC(v56);
      sub_100085F14();
      sub_100085EF0();
      *(void *)(v32 + 576) = sub_10008620C(91LL, v62, &a20);
      sub_1000B21CC(v32 + 576, v32 + 584);
      sub_10007B980();
      sub_10007D974(v57);
      sub_10009BFBC();
      *(void *)(v32 + 584) = sub_100086308(0xD000000000000018LL, v63, &a20);
      sub_100086194(v32 + 584, v32 + 592);
      sub_100085E64(0x80000001002A5B10LL);
      sub_100086038((void *)&_mh_execute_header, v59, v58, "%{public}s%{public}s", v60);
      sub_100086030(v61, v64, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v61);
      sub_10007B974((uint64_t)v60);

      sub_10007BA44();
    }

    else
    {
      sub_10007D974(v57);
      sub_100085E64(0x80000001002A5B10LL);
    }

    sub_10007A3CC(*(void *)(v32 + 712));
    id result = [(id)objc_opt_self(LSApplicationWorkspace) defaultWorkspace];
    *(void *)(v32 + 784) = result;
    if (result)
    {
      uint64_t v67 = result;
      URL._bridgeToObjectiveC()(v66);
      uint64_t v69 = v68;
      *(void *)(v32 + 792) = v68;
      *(void *)(v32 + 56) = v72;
      *(void *)(v32 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v32;
      *(void *)(v32 + 24) = sub_10013B970;
      *(void *)(v32 + 368) = sub_1000AA7D4(v32 + 16);
      *(void *)(v32 + 336) = _NSConcreteStackBlock;
      *(void *)(v32 + 344) = 0x40000000LL;
      *(void *)(v32 + 352) = sub_10013D11C;
      *(void *)(v32 + 360) = &unk_1002EF448;
      [v67 openURL:v69 configuration:0 completionHandler:v32 + 336];
      return (id)sub_100140548();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    sub_1001409D4();

    sub_10014038C();
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    return (id)sub_1001402F0(*(uint64_t (**)(void))(v32 + 8));
  }

  return result;
}

uint64_t sub_10013B970()
{
  *(void *)(v0 + 800) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013B9F4()
{
  uint64_t v2 = *(void **)(v1 + 792);
  uint64_t v3 = *(void **)(v1 + 784);
  sub_1001409D4();

  sub_10007B980();
  sub_10014038C();
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  return sub_1001404C4(*(uint64_t (**)(void))(v1 + 8));
}

#error "10013BCB8: call analysis failed (funcsize=166)"
uint64_t sub_10013BD40( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  v9[61] = a8;
  v9[62] = v8;
  v9[59] = a6;
  v9[60] = a7;
  v9[57] = a4;
  v9[58] = a5;
  v9[55] = a2;
  v9[56] = a3;
  v9[54] = a1;
  uint64_t v10 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  v9[63] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL(0LL);
  v9[64] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v9[65] = v12;
  v9[66] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SKLogger(0LL);
  v9[67] = v13;
  uint64_t v14 = (*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v9[68] = swift_task_alloc(v14);
  v9[69] = swift_task_alloc(v14);
  v9[70] = swift_task_alloc(v14);
  v9[71] = swift_task_alloc(v14);
  v9[72] = swift_task_alloc(v14);
  return swift_task_switch(sub_10013BE2C, 0LL, 0LL);
}

#error "10013C088: call analysis failed (funcsize=208)"
uint64_t sub_10013C1B4()
{
  uint64_t v0;
  uint64_t v1;
  sub_10012A244();
  *(void *)(v0 + 6sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v1;
  sub_100093420();
  return sub_100092F20();
}

#error "10013C260: call analysis failed (funcsize=653)"
uint64_t sub_10013CCB8()
{
  uint64_t v0;
  uint64_t v1;
  sub_10009C134();
  *(void *)(v0 + 648) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013CCF8()
{
  uint64_t v1 = *(void **)(v0 + 640);
  uint64_t v2 = *(void **)(v0 + 632);
  uint64_t v3 = *(void **)(v0 + 624);
  uint64_t v4 = *(void **)(v0 + 600);
  uint64_t v5 = *(void **)(v0 + 592);
  uint64_t v6 = *(void **)(v0 + 584);
  uint64_t v7 = *(void *)(v0 + 520);

  sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  sub_10007B980();
  sub_100140664();
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  uint64_t v8 = (uint64_t (*)(void))sub_100093CFC();
  return sub_10011B460(v8);
}

uint64_t sub_10013CD8C()
{
  *(void *)(v0 + 672) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013CDCC()
{
  uint64_t v5 = *(void **)(v0 + 664);
  sub_1001409EC();
  uint64_t v6 = *(void **)(v0 + 584);

  sub_10007B980();
  unint64_t v8 = sub_10009BB88();
  uint64_t v9 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v8);
  *uint64_t v10 = 8;
  sub_1000C62B4(v9, (uint64_t)v10, v11, v12, v13, v14, v15);

  sub_1001402B8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  return sub_1001404C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10013CE78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = *(void **)(v7 + 608);
  uint64_t v9 = *(void **)(v7 + 600);
  uint64_t v10 = *(void **)(v7 + 592);
  uint64_t v11 = *(void **)(v7 + 584);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  sub_1001402B8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  return sub_1001404C4(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_10013CEF8()
{
  uint64_t v15 = *(void **)(v0 + 632);
  uint64_t v16 = *(void **)(v0 + 640);
  uint64_t v1 = *(void **)(v0 + 624);
  uint64_t v2 = *(void **)(v0 + 608);
  uint64_t v3 = *(void **)(v0 + 600);
  uint64_t v4 = *(void **)(v0 + 592);
  uint64_t v5 = *(void **)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 520);
  swift_willThrow(v7, v8, v9, v10, v11, v12, v13);

  sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_1001402B8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  return sub_1000B2064(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10013CF9C()
{
  uint64_t v5 = *(void **)(v0 + 664);
  uint64_t v6 = *(void **)(v0 + 656);
  sub_1001409EC();
  uint64_t v7 = *(void **)(v0 + 584);
  swift_willThrow(v8, v9, v10, v11, v12, v13, v14);

  sub_1001402B8();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10013D038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v7 = 0LL;
  }

  id v8 = [(id)swift_getObjCClassFromMetadata(v4) actionWithTitle:v7 style:a3];

  return v8;
}

id sub_10013D0B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [(id)swift_getObjCClassFromMetadata(v2) actionWithTitle:v4];

  return v5;
}

uint64_t sub_10013D11C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_100121AC4(v3, a3);
  }
  if (a2) {
    a2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  (char *)&type metadata for Any + 8);
  }
  return sub_100121B40(v3, a2);
}

void sub_10013D188(void *a1, uint64_t a2)
{
  id v3 = a1;
  sub_10013D1C0((uint64_t)v3, a2);
}

uint64_t sub_10013D1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10007B1FC(&qword_10032C5A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (qword_100328D60 != -1) {
    swift_once(&qword_100328D60, sub_100136850);
  }
  uint64_t v7 = sub_10007B1FC(&qword_10032C5A0);
  uint64_t v8 = sub_100079604(v7, (uint64_t)qword_10033E3E0);
  swift_beginAccess(v8, v11, 0LL, 0LL);
  uint64_t result = sub_100140684(v8);
  if (!(_DWORD)result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
    uint64_t v10 = a2;
    CheckedContinuation.resume(returning:)(&v10, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return result;
}

void sub_10013D2C8(uint64_t a1, __CFRunLoopSource *a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C5A0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (qword_100328D60 != -1) {
    swift_once(&qword_100328D60, sub_100136850);
  }
  uint64_t v7 = sub_100079604(v4, (uint64_t)qword_10033E3E0);
  uint64_t v8 = sub_10007B1FC(&qword_10032C5A8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, a1, v8);
  sub_10007D0AC((uint64_t)v6, 0LL, 1LL, v8);
  swift_beginAccess(v7, v11, 33LL, 0LL);
  sub_10013F758((uint64_t)v6, v7);
  swift_endAccess(v11);
  uint64_t v9 = CFRunLoopGetMain();
  CFRunLoopAddSource(v9, a2, kCFRunLoopCommonModes);
}

uint64_t sub_10013D404(int a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v66 = a3;
  uint64_t v63 = a2;
  int v62 = a1;
  uint64_t v7 = type metadata accessor for SKLogger(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v58 - v11;
  sub_1000DEA24();
  uint64_t v14 = v13;
  id v70 = [objc_allocWithZone(AMSEngagement) initWithBag:v13];
  swift_unknownObjectRelease(v14);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v61 = (uint64_t *)(a5 + 16);
  uint64_t v67 = sub_100079604(v7, (uint64_t)qword_10033E1A8);
  sub_10007961C(v67, (uint64_t)v12);
  *(void *)&__int128 v75 = 0LL;
  *((void *)&v75 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
  v15._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  v15._object = (void *)0x80000001002A5750LL;
  String.append(_:)(v15);
  uint64_t v16 = type metadata accessor for ExternalGatewaySheet(0LL);
  uint64_t v65 = *(int *)(v16 + 36);
  LOBYTE(v77[0]) = *(_BYTE *)(a4 + v65);
  uint64_t v17 = _print_unlocked<A, B>(_:_:)(v77, &v75);
  unint64_t v18 = *((void *)&v75 + 1);
  uint64_t v60 = v75;
  uint64_t v19 = *(int *)(v16 + 32);
  uint64_t v68 = a4;
  uint64_t v20 = (uint64_t *)(a4 + v19);
  uint64_t v22 = *v20;
  uint64_t v21 = (void *)v20[1];
  uint64_t v64 = v20;
  os_log_type_t v23 = static os_log_type_t.default.getter(v17);
  swift_bridgeObjectRetain_n(v21, 2LL);
  uint64_t v24 = swift_bridgeObjectRetain_n(v18, 2LL);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = v23;
  BOOL v27 = os_log_type_enabled(v25, v23);
  uint64_t v69 = v10;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    v77[0] = v29;
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v59 = v28 + 4;
    *(void *)&__int128 v75 = 91LL;
    *((void *)&v75 + 1) = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v21);
    v30._uint64_t countAndFlagsBits = v22;
    v30._object = v21;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 8285LL;
    v31._object = (void *)0xE200000000000000LL;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v75 = sub_10007A488(v75, *((unint64_t *)&v75 + 1), v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v59);
    swift_bridgeObjectRelease_n(v21, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain(v18);
    *(void *)&__int128 v75 = sub_10007A488(v60, v18, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v28 + 14);
    swift_bridgeObjectRelease_n(v18, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s%{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v32 = v29;
    uint64_t v10 = v69;
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_bridgeObjectRelease();
  }

  else
  {

    swift_bridgeObjectRelease_n(v18, 3LL);
    swift_bridgeObjectRelease_n(v21, 2LL);
  }

  sub_10007A3CC((uint64_t)v12);
  uint64_t v33 = sub_10007B1FC(&qword_10032A800);
  uint64_t inited = swift_initStackObject(v33, &v78);
  *(_OWORD *)(inited + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027A340;
  *(void *)&__int128 v75 = 7368801LL;
  *((void *)&v75 + 1) = 0xE300000000000000LL;
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = 0xD000000000000013LL;
  *(void *)(inited + 80) = 0x80000001002A1F60LL;
  *(void *)&__int128 v75 = 0x707954746E657665LL;
  *((void *)&v75 + 1) = 0xE900000000000065LL;
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 144), "MessageResult");
  *(_WORD *)(inited + 158) = -4864;
  *(void *)&__int128 v75 = 0x5465636976726573LL;
  *((void *)&v75 + 1) = 0xEB00000000657079LL;
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 2sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = &type metadata for String;
  strcpy((char *)(inited + 216), "StoreKitEclair");
  *(_BYTE *)(inited + 231) = -18;
  *(void *)&__int128 v75 = 0x6E656D6563616C70LL;
  *((void *)&v75 + 1) = 0xE900000000000074LL;
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 288) = 0xD000000000000014LL;
  *(void *)(inited + 296) = 0x800000010027CE10LL;
  *(void *)&__int128 v75 = 0x6144746E65696C63LL;
  *((void *)&v75 + 1) = 0xEA00000000006174LL;
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  uint64_t v35 = v61;
  swift_beginAccess(v61, v77, 0LL, 0LL);
  uint64_t v36 = *v35;
  *(void *)(inited + 384) = sub_10007B1FC(&qword_10032A580);
  *(void *)(inited + 360) = v36;
  *(void *)&__int128 v75 = 0x73736563637573LL;
  *((void *)&v75 + 1) = 0xE700000000000000LL;
  swift_bridgeObjectRetain(v36);
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 456) = &type metadata for Bool;
  *(_BYTE *)(inited + 432) = v62 & 1;
  *(void *)&__int128 v75 = 0x746C75736572LL;
  *((void *)&v75 + 1) = 0xE600000000000000LL;
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  sub_1000E9220(v63, (uint64_t)&v75, (uint64_t *)&unk_100328ED0);
  uint64_t v37 = v68;
  if (v76)
  {
    sub_1000853B0(&v75, (_OWORD *)(inited + 504));
  }

  else
  {
    uint64_t v38 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    *(void *)(inited + 528) = sub_10007B1FC(&qword_10032A0C8);
    *(void *)(inited + 504) = v38;
    sub_1000CEEA8((uint64_t)&v75, (uint64_t *)&unk_100328ED0);
  }

  *(void *)&__int128 v75 = 0x726F727265LL;
  *((void *)&v75 + 1) = 0xE500000000000000LL;
  AnyHashable.init<A>(_:)(&v75, &type metadata for String, &protocol witness table for String);
  if (v66)
  {
    swift_getErrorValue(v66, &v73, &v71);
    uint64_t v39 = v71;
    uint64_t v40 = v72;
    uint64_t v76 = v72;
    uint64_t v41 = sub_10009D60C(&v75);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16LL))(v41, v39, v40);
    sub_1000853B0(&v75, (_OWORD *)(inited + 576));
  }

  else
  {
    *(void *)(inited + 600) = &type metadata for String;
    *(void *)(inited + 576) = 0LL;
    *(void *)(inited + 584) = 0xE000000000000000LL;
  }

  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  uint64_t v66 = (char *)&type metadata for Any + 8;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v43 = v70;

  sub_10007961C(v67, (uint64_t)v10);
  *(void *)&__int128 v75 = 0LL;
  *((void *)&v75 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  v44._uint64_t countAndFlagsBits = 0xD000000000000026LL;
  v44._object = (void *)0x80000001002A5780LL;
  String.append(_:)(v44);
  LOBYTE(v74) = *(_BYTE *)(v37 + v65);
  uint64_t v45 = _print_unlocked<A, B>(_:_:)(&v74, &v75);
  unint64_t v46 = *((void *)&v75 + 1);
  uint64_t v68 = v75;
  uint64_t v47 = *v64;
  uint64_t v48 = (void *)v64[1];
  LOBYTE(isa) = static os_log_type_t.default.getter(v45);
  swift_bridgeObjectRetain_n(v48, 2LL);
  uint64_t v49 = swift_bridgeObjectRetain_n(v46, 2LL);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = isa;
  if (os_log_type_enabled(v50, (os_log_type_t)isa))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v52 = 136446466;
    uint64_t v74 = v53;
    *(void *)&__int128 v75 = 91LL;
    *((void *)&v75 + 1) = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v48);
    v54._uint64_t countAndFlagsBits = v47;
    v54._object = v48;
    String.append(_:)(v54);
    v55._uint64_t countAndFlagsBits = 8285LL;
    v55._object = (void *)0xE200000000000000LL;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v75 = sub_10007A488(v75, *((unint64_t *)&v75 + 1), &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v52 + 4);
    swift_bridgeObjectRelease_n(v48, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v52 + 12) = 2082;
    swift_bridgeObjectRetain(v46);
    *(void *)&__int128 v75 = sub_10007A488(v68, v46, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v52 + 14);
    swift_bridgeObjectRelease_n(v46, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%{public}s%{public}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 2LL, v66);
    uint64_t v56 = v53;
    uint64_t v10 = v69;
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);

    swift_bridgeObjectRelease();
  }

  else
  {

    swift_bridgeObjectRelease_n(v46, 3LL);
    swift_bridgeObjectRelease_n(v48, 2LL);
  }

  return sub_10007A3CC((uint64_t)v10);
}

uint64_t sub_10013DDCC()
{
  v1[58] = v0;
  uint64_t v2 = sub_100086224();
  v1[59] = v2;
  v1[60] = sub_10009BFAC(*(void *)(v2 - 8));
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013DE0C()
{
  uint64_t v1 = (void *)v0[58];
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
  v0[61] = v2;
  v0[62] = *v1;
  sub_1000DF90C();
  uint64_t v4 = v3;
  sub_1000862B8();
  NSString v5 = String._bridgeToObjectiveC()();
  sub_1000DEA24();
  id v7 = [v2 identifierStoreWithAccount:v4 bagNamespace:v5 bag:v6];
  v0[63] = v7;
  sub_1000931C0();

  v0[7] = v0 + 57;
  v0[2] = v0;
  v0[3] = sub_10013DF28;
  uint64_t v8 = sub_1000AA7D4((uint64_t)(v0 + 2));
  v0[31] = _NSConcreteStackBlock;
  v0[32] = 0x40000000LL;
  v0[33] = sub_100099C24;
  v0[34] = &unk_1002EF3E8;
  v0[35] = v8;
  sub_10009C2F4(v7, "resultWithCompletion:");
  return sub_1001405DC();
}

uint64_t sub_10013DF28()
{
  *(void *)(v0 + 512) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013DF68()
{
  uint64_t v1 = (void *)v0[63];
  uint64_t v2 = (void *)v0[61];
  uint64_t v3 = (void *)v0[57];
  v0[65] = v3;

  [v3 setIncludeAccountMatchStatus:1];
  sub_1000DF90C();
  NSString v5 = v4;
  sub_1000862B8();
  NSString v6 = String._bridgeToObjectiveC()();
  sub_1000DEA24();
  id v8 = [v2 identifierStoreWithAccount:v5 bagNamespace:v6 bag:v7];
  v0[66] = v8;
  sub_1000931C0();

  v0[15] = v0 + 53;
  v0[10] = v0;
  v0[11] = sub_10013E098;
  v0[40] = sub_1000AA7D4((uint64_t)(v0 + 10));
  v0[36] = _NSConcreteStackBlock;
  v0[37] = 0x40000000LL;
  v0[38] = sub_100099C24;
  v0[39] = &unk_1002EF400;
  sub_10009C2F4(v8, "resultWithCompletion:");
  return swift_continuation_await(v0 + 10);
}

uint64_t sub_10013E098()
{
  *(void *)(v0 + 536) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10013E0D8()
{
  uint64_t v1 = *(void **)(v0 + 520);
  id v108 = *(id *)(v0 + 424);

  sub_10007CBC0(v2, (unint64_t *)&qword_10032B2A8, &OBJC_CLASS___AMSMetricsIdentifierKey_ptr);
  id v3 = sub_1000D8570(0x644972657375LL, 0xE600000000000000LL, 1);
  uint64_t v4 = sub_10007B1FC(&qword_10032AAE8);
  uint64_t v5 = sub_1000875E8(v4);
  *(_OWORD *)(v5 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027AE00;
  *(void *)(v5 + 32) = v3;
  sub_100140AC4(v5, v6, v7, v8, v9, v10, v11, v12, 1LL, 3LL, v0 + 376, (uint64_t)v1);
  id v107 = v3;
  Class isa = sub_100140B9C().super.isa;
  sub_10007B980();
  id v14 = [v1 generateEventFieldsForKeys:isa];

  uint64_t v15 = sub_100140B7C();
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, v16, v17);

  uint64_t v19 = sub_10007B1FC(&qword_10032A800);
  uint64_t inited = swift_initStackObject(v19, v0 + 144);
  *(_OWORD *)(inited + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027A600;
  *(void *)(v0 + 376) = 0x734E72657375LL;
  *(void *)(v0 + 384) = 0xE600000000000000LL;
  AnyHashable.init<A>(_:)(v98, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for String;
  sub_100140A54();
  *(void *)(inited + 72) = v21;
  *(void *)(inited + 80) = v22;
  uint64_t v23 = sub_100140B7C();
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)(v23, v24, v25, v26);
  uint64_t v28 = sub_10013EB78(v27, v18);
  id v29 = sub_1000D8570(0x6449746E65696C63LL, 0xE800000000000000LL, 0);
  uint64_t v30 = sub_1000875E8(v4);
  *(_OWORD *)(v30 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v87;
  *(void *)(v30 + 32) = v29;
  sub_100140AC4(v30, v31, v32, v33, v34, v35, v36, v37, v87, *((uint64_t *)&v87 + 1), v98, v104);
  id v38 = v29;
  Class v39 = sub_100140B9C().super.isa;
  sub_10007B980();
  id v40 = [v108 generateEventFieldsForKeys:v39];

  uint64_t v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v40,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);
  uint64_t v42 = sub_10013EB78(v41, v28);

  sub_1000C657C(v43, v44, v45, v46, v47, v48, v49, v50, v88, v93, v99, v105, v107);
  os_log_type_t v51 = *(uint64_t **)(v0 + 464);
  sub_10014078C();
  sub_10014041C(v0 + 328, (uint64_t)&type metadata for String);
  uint64_t v52 = *v51;
  uint64_t v53 = sub_100085FEC();
  sub_100140538(v53, v54, v55, v56, v57, v58, v59, v60, v89, v94, v100);
  sub_10014051C();
  sub_10014041C(v0 + 344, (uint64_t)&type metadata for String);
  uint64_t v61 = sub_100085FEC();
  sub_100140538(v61, v62, v63, v64, v65, v66, v67, v68, v90, v95, v101);
  sub_100140350();
  sub_10014041C(v0 + 360, (uint64_t)&type metadata for String);
  *(void *)&double v69 = swift_bridgeObjectRetain(*(void *)(v52 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion + 8)).n128_u64[0];
  sub_100140538(v70, v71, v72, v73, v74, v75, v76, v77, v91, v96, v102, v69);
  sub_10014064C();
  sub_10014041C(v0 + 392, (uint64_t)&type metadata for String);
  sub_100140734();
  sub_100140538(v78, v79, v80, v81, v82, v83, v84, v85, v92, v97, v103);
  sub_100093280();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v42);
}

uint64_t sub_10013E458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 504);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  uint64_t v9 = *(void *)(v7 + 512);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v10 = *(void *)(v7 + 464);
  uint64_t v11 = sub_100079604(*(void *)(v7 + 472), (uint64_t)qword_10033E1A8);
  sub_1000935C4(v11);
  sub_10011BEC4();
  sub_1001408F0();
  *(void *)(v7 + 408) = v69;
  *(void *)(v7 + 4sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v71;
  sub_1001408D0(0xD00000000000001FLL, (uint64_t)"Failed to get AMS metrics ids: ");
  uint64_t v68 = v9;
  *(void *)(v7 + 432) = v9;
  sub_10007B1FC(&qword_100329B90);
  sub_100140B50();
  uint64_t v13 = *(uint8_t **)(v7 + 408);
  uint64_t v12 = *(void *)(v7 + 416);
  uint64_t v14 = sub_100140378();
  uint64_t v15 = (uint64_t *)(v10 + *(int *)(v14 + 32));
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = static os_log_type_t.error.getter(v14);
  sub_100085EE8(v16);
  sub_100085EE8(v12);
  uint64_t v19 = (os_log_s *)sub_1000935A4();
  os_log_type_t v20 = v18;
  if (sub_10009396C(v19))
  {
    uint64_t v18 = v7 + 448;
    uint64_t v67 = (uint64_t)v13;
    uint64_t v13 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v21 = sub_10007B9FC(64LL);
    uint64_t v73 = v21;
    *(_DWORD *)uint64_t v13 = 136446466;
    sub_1000B2110();
    uint64_t v70 = v22;
    uint64_t v72 = v23;
    sub_1000AA78C();
    sub_100086114(v17);
    sub_100085F14();
    sub_100086144();
    uint64_t v8 = v72;
    *(void *)(v7 + 448) = sub_10008620C(v70, v24, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 + 448, v7 + 456, v13 + 4);
    sub_10007B980();
    sub_10007D974(v16);
    sub_10009BFBC();
    *(void *)(v7 + 4sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = sub_100086308(v67, v25, &v73);
    sub_100086194(v7 + 440, v7 + 448);
    sub_100085E64(v12);
    sub_100086038((void *)&_mh_execute_header, v19, v20, "%{public}s%{public}s", v13);
    sub_100086030(v21, v26, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v21);
    sub_10007B974((uint64_t)v13);

    sub_10007BA44();
  }

  else
  {
    sub_10007D974(v16);
    sub_100085E64(v12);
  }

  sub_1001407EC();
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  swift_errorRelease(v68);
  uint64_t v28 = *(uint64_t **)(v7 + 464);
  sub_10014078C();
  sub_100140380((uint64_t)v8);
  uint64_t v29 = *v28;
  uint64_t v30 = (uint64_t *)(*v28 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  uint64_t v75 = &type metadata for String;
  uint64_t v73 = v31;
  uint64_t v74 = v32;
  uint64_t v33 = sub_1000AA78C();
  sub_1001404E0(v33, v34, v35, v36, v37, v38, v39);
  sub_10014051C();
  sub_100140380((uint64_t)v13);
  uint64_t v75 = &type metadata for String;
  uint64_t v73 = v31;
  uint64_t v74 = v32;
  uint64_t v40 = sub_1000AA78C();
  sub_1001404E0(v40, v41, v42, v43, v44, v45, v46);
  sub_100140350();
  sub_100140380(v18);
  uint64_t v48 = *(void *)(v29 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion);
  uint64_t v47 = *(void *)(v29 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion + 8);
  uint64_t v75 = &type metadata for String;
  uint64_t v73 = v48;
  uint64_t v74 = v47;
  *(void *)&double v49 = swift_bridgeObjectRetain(v47).n128_u64[0];
  sub_1001404E0(v50, v51, v52, v53, v54, v55, v56, v49);
  sub_10014064C();
  sub_100140380(v7 + 392);
  uint64_t v75 = &type metadata for String;
  sub_100140734();
  uint64_t v73 = v58;
  uint64_t v74 = v57;
  sub_1001404E0(v59, v60, v61, v62, v63, v64, v65);
  sub_1000931C8();
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(v27);
}

uint64_t sub_10013E7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 528);
  uint64_t v9 = *(void **)(v7 + 520);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  uint64_t v10 = *(void *)(v7 + 536);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v11 = *(void *)(v7 + 480);
  uint64_t v12 = *(void *)(v7 + 464);
  uint64_t v13 = sub_100079604(*(void *)(v7 + 472), (uint64_t)qword_10033E1A8);
  sub_10007961C(v13, v11);
  sub_1001408F0();
  *(void *)(v7 + 408) = 0LL;
  *(void *)(v7 + 4sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0xE000000000000000LL;
  sub_1001406C4(0xD00000000000001FLL, (uint64_t)"Failed to get AMS metrics ids: ");
  *(void *)(v7 + 432) = v10;
  sub_10007B1FC(&qword_100329B90);
  sub_1000B235C(v7 + 432);
  uint64_t v15 = *(uint8_t **)(v7 + 408);
  uint64_t v14 = *(void *)(v7 + 416);
  uint64_t v16 = sub_100140378();
  uint64_t v17 = (uint64_t *)(v12 + *(int *)(v16 + 32));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  os_log_type_t v20 = static os_log_type_t.error.getter(v16);
  sub_100085EE8(v19);
  uint64_t v21 = sub_100085EE8(v14);
  uint64_t v22 = v11;
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v21);
  if (sub_10009396C(v23))
  {
    uint64_t v63 = (uint64_t)v15;
    uint64_t v15 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v64 = v10;
    uint64_t v24 = sub_10007B9FC(64LL);
    uint64_t v67 = v24;
    sub_100140B5C(4.8752e-34);
    uint64_t v65 = v25;
    uint64_t v66 = v26;
    sub_1000AA78C();
    sub_100086114(v18);
    sub_100085F14();
    sub_100086144();
    uint64_t v22 = v66;
    *(void *)(v7 + 448) = sub_10008620C(v65, v27, &v67);
    uint64_t v18 = v7 + 448;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 + 448, v7 + 456, &type metadata for Any);
    sub_10007B980();
    sub_10007D974(v19);
    sub_10009BFBC();
    *(void *)(v7 + 4sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = sub_100086308(v63, v28, &v67);
    sub_100086194(v7 + 440, v7 + 448);
    sub_100085E64(v14);
    sub_100086038((void *)&_mh_execute_header, v23, v20, "%{public}s%{public}s", v15);
    sub_100086030(v24, v29, (uint64_t)&type metadata for Any + 8);
    uint64_t v30 = v24;
    uint64_t v10 = v64;
    sub_10007B974(v30);
    sub_10007B974((uint64_t)v15);

    sub_10007BA44();
  }

  else
  {
    sub_10007D974(v19);
    sub_100085E64(v14);
  }

  sub_1001407EC();
  uint64_t v31 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  swift_errorRelease(v10);
  uint64_t v32 = *(uint64_t **)(v7 + 464);
  sub_10014078C();
  sub_100140380(v22);
  uint64_t v33 = *v32;
  uint64_t v34 = (uint64_t *)(*v32 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v69 = &type metadata for String;
  uint64_t v67 = v35;
  uint64_t v68 = v36;
  uint64_t v37 = sub_1000AA78C();
  sub_1001404D0(v37, v38, v39, v40, v41);
  sub_10014051C();
  sub_100140380((uint64_t)v15);
  uint64_t v69 = &type metadata for String;
  uint64_t v67 = v35;
  uint64_t v68 = v36;
  uint64_t v42 = sub_1000AA78C();
  sub_1001404D0(v42, v43, v44, v45, v46);
  sub_100140350();
  sub_100140380(v18);
  uint64_t v48 = *(void *)(v33 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion);
  uint64_t v47 = *(void *)(v33 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion + 8);
  uint64_t v69 = &type metadata for String;
  uint64_t v67 = v48;
  uint64_t v68 = v47;
  *(void *)&double v49 = swift_bridgeObjectRetain(v47).n128_u64[0];
  sub_1001404D0(v50, v51, v52, v53, v54, v49);
  sub_10014064C();
  sub_100140380(v7 + 392);
  uint64_t v69 = &type metadata for String;
  sub_100140734();
  uint64_t v67 = v56;
  uint64_t v68 = v55;
  sub_1001404D0(v57, v58, v59, v60, v61);
  sub_1000931C8();
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(v31);
}

uint64_t sub_10013EB78(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_10013F18C(a1, (uint64_t)sub_10013F178, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

id sub_10013EBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v7 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v8 = 0LL;
    goto LABEL_6;
  }

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  id v9 = [v4 initWithTitle:v7 message:v8];

  return v9;
}

id sub_10013EC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a3)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    v7.super.Class isa = 0LL;
  }

  id v8 = [v3 initWithPlacement:v6 context:v7.super.isa];

  return v8;
}

id sub_10013ED2C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10007CB7C(0LL, &qword_10032C578, &OBJC_CLASS___AMSEngagementPlacementInfo_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithServiceType:v1 placementInfo:isa];

  return v3;
}

uint64_t type metadata accessor for ExternalGatewaySheet(uint64_t a1)
{
  uint64_t result = qword_10032C620;
  if (!qword_10032C620) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ExternalGatewaySheet);
  }
  return result;
}

uint64_t sub_10013EDF4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10013EE18(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10007B1FC(&qword_10032C2A0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v37 = v5 + 64;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v15 = 0LL;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v16 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v15 << 6))
    {
      uint64_t v22 = *(void *)(v5 + 48) + 40 * i;
      if ((a2 & 1) != 0)
      {
        __int128 v23 = *(_OWORD *)v22;
        __int128 v24 = *(_OWORD *)(v22 + 16);
        uint64_t v41 = *(void *)(v22 + 32);
        __int128 v39 = v23;
        __int128 v40 = v24;
        sub_1000853B0((_OWORD *)(*(void *)(v5 + 56) + 32 * i), v38);
      }

      else
      {
        sub_10009BEC0(v22, (uint64_t)&v39);
        sub_10007B1C0(*(void *)(v5 + 56) + 32 * i, (uint64_t)v38);
      }

      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
      uint64_t v25 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          BOOL v31 = v27 == v30;
          if (v27 == v30) {
            unint64_t v27 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v13 + 8 * v27);
          if (v32 != -1)
          {
            unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_34;
          }
        }

        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        return result;
      }

      unint64_t v28 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
      *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
      uint64_t v33 = *(void *)(v8 + 48) + 40 * v28;
      __int128 v34 = v39;
      __int128 v35 = v40;
      *(void *)(v33 + 32) = v41;
      *(_OWORD *)uint64_t v33 = v34;
      *(_OWORD *)(v33 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v35;
      uint64_t result = (uint64_t)sub_1000853B0(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v28));
      ++*(void *)(v8 + 16);
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v18 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_45;
      }
      if (v18 >= v12) {
        break;
      }
      uint64_t v19 = (void *)(v5 + 64);
      unint64_t v20 = *(void *)(v37 + 8 * v18);
      ++v15;
      if (!v20)
      {
        int64_t v15 = v18 + 1;
        if (v18 + 1 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v15);
        if (!v20)
        {
          int64_t v21 = v18 + 2;
          if (v21 >= v12)
          {
LABEL_36:
            swift_release(v5);
            if ((a2 & 1) == 0) {
              goto LABEL_43;
            }
            goto LABEL_39;
          }

          unint64_t v20 = *(void *)(v37 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v15 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                goto LABEL_46;
              }
              if (v15 >= v12) {
                goto LABEL_36;
              }
              unint64_t v20 = *(void *)(v37 + 8 * v15);
              ++v21;
              if (v20) {
                goto LABEL_21;
              }
            }
          }

          int64_t v15 = v21;
        }
      }

uint64_t sub_10013F128(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

uint64_t sub_10013F144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007B1C0(a4, a2);
}

uint64_t sub_10013F178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10013F144(a2, a2 + 40, a1, a1 + 40);
}

uint64_t sub_10013F18C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = swift_retain(a3);
  sub_100140BB0(v10, v11, v12, v13, v14, v15, v16, v17, v57, a1, v62, *((uint64_t *)&v62 + 1), v63, v64, v65[0]);
  if (!*((void *)&v70 + 1))
  {
LABEL_14:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_10009BEFC(v73[0]);
    return swift_release(v73[6]);
  }

  while (1)
  {
    __int128 v66 = v69;
    __int128 v67 = v70;
    uint64_t v68 = v71;
    int64_t v18 = sub_1000853B0(&v72, v65);
    unint64_t v27 = sub_1001409E0((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, v58, v60);
    uint64_t v28 = v5[2];
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    char v31 = v26;
    if (v5[3] >= v30)
    {
      if ((a4 & 1) != 0)
      {
        if ((v26 & 1) != 0) {
          goto LABEL_9;
        }
      }

      else
      {
        sub_10007B1FC(&qword_10032C4B8);
        _NativeDictionary.copy()();
        if ((v31 & 1) != 0) {
          goto LABEL_9;
        }
      }
    }

    else
    {
      uint64_t v32 = sub_10013EE18(v30, a4 & 1);
      unint64_t v40 = sub_1001409E0(v32, v33, v34, v35, v36, v37, v38, v39, v59, v61);
      if ((v31 & 1) != (v41 & 1)) {
        goto LABEL_17;
      }
      unint64_t v27 = v40;
      if ((v31 & 1) != 0)
      {
LABEL_9:
        sub_10007B1C0((uint64_t)v65, (uint64_t)&v62);
        sub_10007B1A0(v65);
        sub_100087388((uint64_t)&v66);
        uint64_t v5 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v27);
        sub_10007B1A0(v5);
        uint64_t v42 = sub_1000853B0(&v62, v5);
        goto LABEL_13;
      }
    }

    uint64_t v5 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v27 >> 6) + 64) |= 1LL << v27;
    uint64_t v50 = v5[6] + 40 * v27;
    __int128 v51 = v66;
    __int128 v52 = v67;
    *(void *)(v50 + 32) = v68;
    *(_OWORD *)uint64_t v50 = v51;
    *(_OWORD *)(v50 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v52;
    uint64_t v42 = sub_1000853B0(v65, (_OWORD *)(v5[7] + 32 * v27));
    uint64_t v53 = v5[2];
    BOOL v54 = __OFADD__(v53, 1LL);
    uint64_t v55 = v53 + 1;
    if (v54) {
      goto LABEL_16;
    }
    _OWORD v5[2] = v55;
LABEL_13:
    sub_100140BB0( (uint64_t)v42,  v43,  v44,  v45,  v46,  v47,  v48,  v49,  v59,  v61,  v62,  *((uint64_t *)&v62 + 1),  v63,  v64,  v65[0]);
    a4 = 1;
    if (!*((void *)&v70 + 1)) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_10013F394(void *a1)
{
  id v1 = [a1 messageActions];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_10007CB7C(0LL, &qword_10032C570, &OBJC_CLASS___AMSEngagementMessageEventServiceResponse_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_10013F400(void *a1)
{
  id v2 = [a1 data];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  return v3;
}

uint64_t sub_10013F474(void *a1)
{
  id v2 = [a1 placementsMap];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_10007B1FC(&qword_10032C568);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, v3);

  return v4;
}

uint64_t sub_10013F4EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

void sub_10013F528(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    sub_10009BEC0(*(void *)(v3 + 48) + 40 * v10, (uint64_t)v19);
    sub_10007B1C0(*(void *)(v3 + 56) + 32 * v10, (uint64_t)&v19[2] + 8);
    goto LABEL_23;
  }

  int64_t v11 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return;
  }

  int64_t v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    unint64_t v13 = *(void *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
      int64_t v7 = v11;
      goto LABEL_3;
    }

    int64_t v14 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        int64_t v11 = v14;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        unint64_t v13 = *(void *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          int64_t v11 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v14 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (v13) {
            goto LABEL_10;
          }
          int64_t v11 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            unint64_t v13 = *(void *)(v4 + 8 * v11);
            if (v13) {
              goto LABEL_7;
            }
            int64_t v7 = v12 - 1;
            int64_t v15 = v5 + 6;
            while (v15 < v12)
            {
              unint64_t v13 = *(void *)(v4 + 8 * v15++);
              if (v13)
              {
                int64_t v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  uint64_t v20 = 0LL;
  memset(v19, 0, sizeof(v19));
LABEL_23:
  *id v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v16 = (void (*)(_BYTE *))v1[5];
  sub_1000E91F4((uint64_t)v19, (uint64_t)__src, &qword_10032C560);
  if (__src[3])
  {
    memcpy(v17, __src, sizeof(v17));
    v16(v17);
    sub_1000CEEA8((uint64_t)v17, &qword_10032A2B8);
  }

  else
  {
    *(void *)(a1 + 64) = 0LL;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0u;
  }

unint64_t sub_10013F714()
{
  unint64_t result = qword_10032C580;
  if (!qword_10032C580)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027CF70, &type metadata for ExternalGatewaySheet.ExternalLinkSheetError);
    atomic_store(result, &qword_10032C580);
  }

  return result;
}

void sub_10013F750(uint64_t a1)
{
}

uint64_t sub_10013F758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C5A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ExternalGatewaySheet.ExternalLinkSheetError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10013F7E0 + 4 * byte_10027CE14[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10013F800 + 4 * byte_10027CE19[v4]))();
  }
}

_BYTE *sub_10013F7E0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10013F800(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10013F808(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10013F810(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10013F818(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10013F820(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ExternalGatewaySheet.ExternalLinkSheetError()
{
  return &type metadata for ExternalGatewaySheet.ExternalLinkSheetError;
}

void **sub_10013F83C(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    int64_t v7 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    int64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    int64_t v12 = v4;
    if (sub_10007D824((uint64_t)v10, 1LL, v11))
    {
      uint64_t v13 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_10007D0AC((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v7 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    int64_t v18 = *(void **)((char *)a2 + v15);
    *(void **)((char *)v7 + sub_10012A9E0((uint64_t)va, v14, v15) = v18;
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (void **)((char *)v7 + v19);
    uint64_t v22 = (void **)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    *((_BYTE *)v7 + v20) = *((_BYTE *)a2 + v20);
    uint64_t v24 = a3[11];
    *((_BYTE *)v7 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    uint64_t v25 = (void **)((char *)v7 + v24);
    char v26 = (void **)((char *)a2 + v24);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    id v28 = v18;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v27);
  }

  return v7;
}

uint64_t sub_10013F99C(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void **sub_10013FA30(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  id v11 = v6;
  if (sub_10007D824((uint64_t)v9, 1LL, v10))
  {
    uint64_t v12 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_10007D0AC((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = *(void **)((char *)a2 + v14);
  *(void **)((char *)a1 + v14) = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = (void **)((char *)a1 + v18);
  uint64_t v21 = (void **)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
  uint64_t v23 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  uint64_t v24 = (void **)((char *)a1 + v23);
  uint64_t v25 = (void **)((char *)a2 + v23);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  id v27 = v17;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v26);
  return a1;
}

void **sub_10013FB68(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  int v13 = sub_10007D824((uint64_t)v10, 1LL, v12);
  int v14 = sub_10007D824((uint64_t)v11, 1LL, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  sub_10007D0AC((uint64_t)v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v17 = a3[6];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  v18[8] = v19[8];
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a3[7];
  uint64_t v22 = *(void **)((char *)a2 + v21);
  uint64_t v23 = *(void **)((char *)a1 + v21);
  *(void **)((char *)a1 + v21) = v22;
  id v24 = v22;

  uint64_t v25 = a3[8];
  uint64_t v26 = (void **)((char *)a1 + v25);
  id v27 = (void **)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  uint64_t v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  uint64_t v29 = a3[11];
  uint64_t v30 = (void **)((char *)a1 + v29);
  char v31 = (void **)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  uint64_t v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10013FD24(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  if (sub_10007D824((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_10007D0AC((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  int v13 = (char *)a1 + v11;
  int v14 = (char *)a2 + v11;
  *(void *)int v13 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + sub_10012A9E0((uint64_t)va, v14, v15) = *((_BYTE *)a2 + v15);
  uint64_t v16 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + vsub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(_OWORD *)((char *)a2 + v16);
  return a1;
}

void **sub_10013FE2C(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  int v11 = sub_10007D824((uint64_t)v8, 1LL, v10);
  int v12 = sub_10007D824((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_10007D0AC((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v15;
  uint64_t v18 = (char *)a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = *(void **)((char *)a1 + v16);
  *(void **)((char *)a1 + vsub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(void **)((char *)a2 + v16);

  uint64_t v20 = a3[8];
  uint64_t v21 = (void **)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
  uint64_t v26 = a3[11];
  id v27 = (void **)((char *)a1 + v26);
  uint64_t v28 = (uint64_t *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *id v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10013FFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013FFC4);
}

uint64_t sub_10013FFC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    return sub_10007D824((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_10014003C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100140048);
}

void *sub_100140048(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    return (void *)sub_10007D0AC((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

void sub_1001400B8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100085AF0(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = "\t";
    void v4[3] = &unk_10027CE90;
    void v4[4] = &unk_10027CEA8;
    v4[5] = &unk_10027CEC0;
    v4[6] = &unk_10027CED8;
    v4[7] = &unk_10027CEF0;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

unint64_t sub_100140170()
{
  unint64_t result = qword_10032C670;
  if (!qword_10032C670)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027CF48, &type metadata for ExternalGatewaySheet.ExternalLinkSheetError);
    atomic_store(result, (unint64_t *)&qword_10032C670);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ExternalGatewaySheet.LinkOut( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001401F8 + 4 * byte_10027CE23[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014022C + 4 * byte_10027CE1E[v4]))();
}

uint64_t sub_10014022C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100140234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014023CLL);
  }
  return result;
}

uint64_t sub_100140248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100140250LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100140254(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014025C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalGatewaySheet.LinkOut()
{
  return &type metadata for ExternalGatewaySheet.LinkOut;
}

unint64_t sub_10014027C()
{
  unint64_t result = qword_10032C678;
  if (!qword_10032C678)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D030, &type metadata for ExternalGatewaySheet.LinkOut);
    atomic_store(result, (unint64_t *)&qword_10032C678);
  }

  return result;
}

uint64_t sub_1001402B8()
{
  return swift_task_dealloc(*(void *)(v0 + 576));
}

uint64_t sub_1001402D8()
{
  return swift_task_dealloc(*(void *)(v0 + 416));
}

uint64_t sub_1001402F0(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10014030C()
{
}

void sub_100140350()
{
  *(_BYTE *)(v0 + 375) = -18;
}

uint64_t sub_100140378()
{
  return type metadata accessor for ExternalGatewaySheet(0LL);
}

uint64_t sub_100140380(uint64_t a1)
{
  return AnyHashable.init<A>(_:)(a1, v1, v2);
}

uint64_t sub_10014038C()
{
  return swift_task_dealloc(*(void *)(v0 + 720));
}

uint64_t sub_1001403AC()
{
  return swift_release(*(void *)(v0 + 928));
}

uint64_t sub_1001403E8()
{
  return swift_task_dealloc(*(void *)(v0 + 904));
}

uint64_t sub_10014041C(uint64_t a1, uint64_t a2)
{
  return AnyHashable.init<A>(_:)(a1, a2, v2);
}

uint64_t sub_100140424()
{
  return v1(*(void *)(v0 + 408), *(void *)(v0 + 376));
}

uint64_t sub_100140454()
{
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  return swift_errorRetain(v0);
}

uint64_t sub_100140480()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v0, v3, v1, 0LL);
}

uint64_t sub_100140498()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1001404C4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1001404D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10012AB2C((uint64_t)va1, (uint64_t)va);
}

void sub_1001404E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_10012AB2C((uint64_t)va1, (uint64_t)va);
}

uint64_t sub_1001404F0(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1);
}

uint64_t sub_100140500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100138E48(a1, a2, a3);
}

void sub_10014051C()
{
  *(void *)(v0 + 344) = 0x70704174736F68LL;
  *(void *)(v0 + 352) = 0xE700000000000000LL;
}

void sub_100140538( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100140548()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100140564(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000BAF68(a1, a2, a3, a4, a5);
}

uint64_t sub_100140580@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 384);
}

  ;
}

uint64_t sub_1001405B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1001405DC()
{
  return swift_continuation_await();
}

uint64_t sub_1001405E4(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100140604(uint64_t a1)
{
  return sub_10007961C(a1, v1);
}

void sub_10014060C()
{
  v0._uint64_t countAndFlagsBits = 0x72726520726F6620LL;
  v0._object = (void *)0xEB0000000020726FLL;
  String.append(_:)(v0);
}

uint64_t sub_10014062C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_10014064C()
{
  *(void *)(v0 + 392) = 0x6369706F74LL;
  *(void *)(v0 + 400) = 0xE500000000000000LL;
}

uint64_t sub_100140664()
{
  return swift_task_dealloc(*(void *)(v0 + 576));
}

uint64_t sub_100140684(uint64_t a1)
{
  return sub_10007D824(a1, 1LL, v1);
}

uint64_t sub_100140690()
{
  return swift_task_dealloc(*(void *)(v0 + 472));
}

void sub_1001406AC()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1001406B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D5038(a1, (a2 - 32) | 0x8000000000000000LL);
}

void sub_1001406C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

  ;
}

uint64_t sub_1001406F8()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_100140714(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10014071C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a10, a9, v11);
}

  ;
}

void sub_100140748(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  String.append(_:)(v1);
}

uint64_t sub_100140760()
{
  return sub_10013D404(0, v0, v1, v3, v2);
}

void sub_100140778(float a1)
{
  *Swift::String v1 = a1;
}

void sub_10014078C()
{
  *(void *)(v0 + 328) = 7368801LL;
  *(void *)(v0 + 336) = 0xE300000000000000LL;
}

uint64_t sub_1001407A0@<X0>( void *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = v7;
  a1[1] = a2;
  return a7;
}

uint64_t sub_1001407C0()
{
  return swift_task_dealloc(*(void *)(v0 + 192));
}

void sub_1001407CC()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_1001407D8()
{
}

uint64_t sub_1001407EC()
{
  return sub_10007A3CC(*(void *)(v0 + 480));
}

uint64_t sub_100140800()
{
  return sub_10009D8A4(v0, v1 + 96);
}

void sub_10014082C()
{
}

uint64_t sub_100140838(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_100140840(float a1)
{
  *uint64_t v1 = a1;
}

id sub_10014085C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_100140864@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1 + 8));
}

uint64_t sub_100140878()
{
  return sub_10007A3CC(*(void *)(v0 + 400));
}

uint64_t sub_10014088C(uint64_t a1)
{
  return sub_10007D824(a1, 1LL, v1);
}

void sub_1001408A8(uint64_t a1)
{
}

uint64_t sub_1001408B0@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1001408C0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

void sub_1001408D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1001408E0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

void sub_1001408F0()
{
}

  ;
}

void sub_100140908( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  v18._uint64_t countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
}

void sub_100140918( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  v19._uint64_t countAndFlagsBits = v18;
  v19._object = v17;
  String.append(_:)(v19);
}

void sub_100140928(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100140930()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_10014093C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

uint64_t sub_100140944()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 8));
}

void sub_10014094C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100140954()
{
  return static os_log_type_t.error.getter();
}

  ;
}

  ;
}

void sub_100140998(Swift::String a1)
{
}

uint64_t sub_1001409A4@<X0>(unsigned int a1@<W8>)
{
  return sub_10007CC08(a1 >> v1);
}

uint64_t sub_1001409B0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, a2, v2);
}

uint64_t sub_1001409BC()
{
  return sub_10007961C(v1, v0);
}

uint64_t sub_1001409C8()
{
  return type metadata accessor for LocalizationJetPack();
}

void sub_1001409D4()
{
}

unint64_t sub_1001409E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_100132100((uint64_t)va);
}

  ;
}

void sub_100140A00(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100140A14@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100140A20(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_100140A28(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

unint64_t sub_100140A34()
{
  return 0xD000000000000014LL;
}

uint64_t sub_100140A48()
{
  return static os_log_type_t.default.getter();
}

  ;
}

void sub_100140A60()
{
  *(_BYTE *)(v0 + 513) = (v1 & 1) == 0;
}

uint64_t sub_100140A74()
{
  return swift_errorRelease(v0);
}

  ;
}

void sub_100140A94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_100140A9C()
{
}

  ;
}

void sub_100140AB8()
{
}

uint64_t sub_100140AC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return specialized Array._endMutation()(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_100140AD0()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_100140ADC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100140AE4()
{
  return sub_10007D0AC(v1, 0LL, 1LL, v0);
}

void sub_100140B08()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_100140B14(uint64_t a1, uint64_t *a2)
{
}

  ;
}

id sub_100140B30()
{
  return [v1 *(SEL *)(v0 + 72)];
}

double sub_100140B3C()
{
  return 0.0;
}

uint64_t sub_100140B48(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100140B50()
{
  return _print_unlocked<A, B>(_:_:)(v1, v0);
}

void sub_100140B5C(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100140B70()
{
  return sub_10007961C(v0, v1);
}

uint64_t sub_100140B7C()
{
  return v0;
}

uint64_t sub_100140B90()
{
  return v2(v0, v1);
}

NSArray sub_100140B9C()
{
  return Array._bridgeToObjectiveC()();
}

void *sub_100140BA8()
{
  return sub_1000C4DC0(*(void **)(v0 + 360));
}

void sub_100140BB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100140BBC()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

uint64_t sub_100140BC8()
{
  return 0LL;
}

uint64_t AuditToken.rawValue.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *uint64_t v4 = result;
  v4[1] = a2;
  void v4[2] = a3;
  void v4[3] = a4;
  return result;
}

uint64_t (*ClientOverride.requestAuditTokenData.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t AuditToken.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = static AuditToken.decode<A>(data:)(a1, a2, a3);
  if (!v4) {
    uint64_t v3 = v7;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  return v3;
}

uint64_t static AuditToken.decode<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100140DB0((uint64_t)v13, 1LL, a2, a3, &v12);
  if (v3) {
    return swift_willThrow(v4, v5, v6, v7, v8, v9, v10);
  }
  else {
    return v12;
  }
}

uint64_t AuditToken.data.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  void v6[3] = a4;
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(v6, 32LL);
  return 0x2000000000LL;
}

uint64_t sub_100140DB0@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  if (!result)
  {
    unint64_t v12 = sub_100141088();
    uint64_t v13 = swift_allocError(&type metadata for AuditTokenDecodingError, v12, 0LL, 0LL);
    *(void *)uint64_t v14 = 0LL;
    *(void *)(v14 + 8) = 0LL;
    *(_BYTE *)(v14 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 1;
    return swift_willThrow(v13, v14, v15, v16, v17, v18, v19);
  }

  if ((unint64_t)(a2 - 0x400000000000000LL) >> 59 == 31)
  {
    uint64_t v8 = (_OWORD *)result;
    uint64_t v9 = 32 * a2;
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 8) + 8LL) + 8LL);
    if (32 * a2 == dispatch thunk of Collection.count.getter(a3, v10))
    {
      unint64_t result = dispatch thunk of DataProtocol.copyBytes(to:count:)(v8, &v8[(unint64_t)v9 / 0x10], v9, a3, a4);
      __int128 v11 = v8[1];
      *a5 = *v8;
      a5[1] = v11;
      return result;
    }

    uint64_t v20 = dispatch thunk of Collection.count.getter(a3, v10);
    unint64_t v21 = sub_100141088();
    uint64_t v13 = swift_allocError(&type metadata for AuditTokenDecodingError, v21, 0LL, 0LL);
    *(void *)uint64_t v14 = v9;
    *(void *)(v14 + 8) = v20;
    *(_BYTE *)(v14 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0;
    return swift_willThrow(v13, v14, v15, v16, v17, v18, v19);
  }

  __break(1u);
  return result;
}

__n128 sub_100140ED0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v3;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

__n128 sub_100140EE0@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  __int128 v3 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

uint64_t variable initialization expression of ClientOverride.requestAuditTokenData()
{
  return 0LL;
}

uint64_t variable initialization expression of ClientOverride.requestBundleVersion()
{
  return 0LL;
}

uint64_t variable initialization expression of ClientOverride.vendorID@<X0>(uint64_t a1@<X8>)
{
  return sub_100140F1C((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t variable initialization expression of AcknowledgeMessageRequest.clientOverride@<X0>(uint64_t a1@<X8>)
{
  return sub_100140F1C(type metadata accessor for ClientOverride, a1);
}

uint64_t sub_100140F1C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

__n128 initializeWithCopy for AuditToken(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for AuditToken()
{
  return &type metadata for AuditToken;
}

__n128 initializeBufferWithCopyOfBuffer for AuditTokenDecodingError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AuditTokenDecodingError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AuditTokenDecodingError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_BYTE *)(result + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_100140FE0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100140FFC(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    *(_BYTE *)(result + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 1;
  }

  else
  {
    *(_BYTE *)(result + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for AuditTokenDecodingError()
{
  return &type metadata for AuditTokenDecodingError;
}

void _s3__C13audit_token_tVMa_0()
{
  if (!qword_10032C690)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1002EFC70);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10032C690);
    }
  }

void sub_100141080(void *a1@<X8>)
{
  *a1 = 0LL;
}

unint64_t sub_100141088()
{
  unint64_t result = qword_10032C698;
  if (!qword_10032C698)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AuditTokenDecodingError,  &type metadata for AuditTokenDecodingError);
    atomic_store(result, (unint64_t *)&qword_10032C698);
  }

  return result;
}

uint64_t sub_1001410E0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100141114 + 4 * byte_10027D140[*v0]))( 0x6974616D6F747561LL,  0xE900000000000063LL);
}

uint64_t sub_100141114()
{
  return 0x69746375646F7270LL;
}

uint64_t sub_100141130()
{
  return 0x786F62646E6173LL;
}

uint64_t sub_100141148()
{
  return 0x73655465646F6378LL;
}

uint64_t sub_100141160@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100145748(a1, a2);
  *a3 = result;
  return result;
}

void sub_100141184(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100141190(uint64_t a1)
{
  unint64_t v2 = sub_1001420B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001411B8(uint64_t a1)
{
  unint64_t v2 = sub_1001420B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001411E0()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1001411FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10014591C(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_100141224(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100141230(uint64_t a1)
{
  unint64_t v2 = sub_10014213C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100141258(uint64_t a1)
{
  unint64_t v2 = sub_10014213C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ClientOverride.Server.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for ClientOverride.Server(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B6230(v1, (uint64_t)v5, v6);
  uint64_t v7 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v8 = (char *)sub_100141374
     + 4
     * byte_10027D144[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))( v5,  3LL,  v7)];
  __asm { BR              X10 }

uint64_t sub_100141374()
{
  *(void *)(v4 - 64) = 0x73655465646F6358LL;
  *(void *)(v4 - 56) = 0xEA00000000002874LL;
  uint64_t v5 = sub_10009D5CC( &qword_10032C6A8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = *(void *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  return v8;
}

uint64_t type metadata accessor for ClientOverride.Server(uint64_t a1)
{
  return sub_100142BAC(a1, (uint64_t *)&unk_10032C8C0, (uint64_t)&nominal type descriptor for ClientOverride.Server);
}

void sub_10014146C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for ClientOverride.Server(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B6230(a1, (uint64_t)v5, v6);
  uint64_t v7 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v8 = (char *)sub_100141564
     + 4
     * byte_10027D148[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))( v5,  3LL,  v7)];
  __asm { BR              X10 }

uint64_t sub_100141564()
{
  *(void *)(v5 - 80) = 0x73655465646F6358LL;
  *(void *)(v5 - 72) = 0xEA00000000002874LL;
  uint64_t v6 = sub_10009D5CC( &qword_10032C6A8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)(v5 - 80);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  sub_1000B6274(v0, type metadata accessor for ClientOverride.Server);
  return v10;
}

uint64_t ClientOverride.Server.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v3 = sub_10007B1FC(&qword_10032C6B0);
  __chkstk_darwin(v3);
  uint64_t v73 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10007B1FC(&qword_10032C6B8);
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v76 = v5;
  __chkstk_darwin(v5);
  __int128 v72 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = sub_10007B1FC(&qword_10032C6C0);
  uint64_t v74 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v77 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v83 = *(void *)(v8 - 8);
  uint64_t v84 = v8;
  __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = sub_10007B1FC(&qword_10032C6C8);
  uint64_t v10 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  unint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10007B1FC(&qword_10032C6D0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10007B1FC(&qword_10032C6D8);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for ClientOverride.Server(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v71 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v81 = (uint64_t)&v70 - v23;
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v90 = a1;
  sub_100085B44(a1, v25);
  unint64_t v26 = sub_1001420B4();
  id v27 = v85;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ClientOverride.Server.CodingKeys,  &type metadata for ClientOverride.Server.CodingKeys,  v26,  v25,  v24);
  if (v27)
  {
    swift_errorRelease(v27);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1LL, 1LL, v16);
    sub_100087418((uint64_t)v15, &qword_10032C6D0);
  }

  else
  {
    uint64_t v85 = v12;
    uint64_t v70 = v10;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0LL, 1LL, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    uint64_t v35 = KeyedDecodingContainer.allKeys.getter(v16);
    if (*(void *)(v35 + 16))
    {
      uint64_t v36 = *(unsigned __int8 *)(v35 + 32);
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }

  uint64_t v28 = v90;
  uint64_t v29 = v90[3];
  uint64_t v30 = v90[4];
  sub_100085B44(v90, v29);
  dispatch thunk of Decoder.singleValueContainer()(v87, v29, v30);
  uint64_t v31 = v88;
  uint64_t v32 = v89;
  sub_100085B44(v87, v88);
  uint64_t v33 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v31, v32);
  uint64_t v37 = v33;
  uint64_t v38 = v34;
  if (v33 == 1869903201 && v34 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = v81;
LABEL_15:
    uint64_t v41 = sub_10007B1FC(&qword_10032C6A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v39, 1LL, 3LL, v41);
    goto LABEL_16;
  }

  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(1869903201LL, 0xE400000000000000LL, v33, v34, 0LL);
  uint64_t v39 = v81;
  if ((v40 & 1) != 0
    || v37 == 0x6974616D6F747561LL && v38 == 0xE900000000000063LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6974616D6F747561LL, 0xE900000000000063LL, v37, v38, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  if (v37 == 1685025392 && v38 == 0xE400000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(1685025392LL, 0xE400000000000000LL, v37, v38, 0LL) & 1) != 0
    || v37 == 0x69746375646F7270LL && v38 == 0xEA00000000006E6FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x69746375646F7270LL, 0xEA00000000006E6FLL, v37, v38, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = sub_10007B1FC(&qword_10032C6A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v39, 2LL, 3LL, v43);
  }

  else if (v37 == 0x786F62646E6173LL && v38 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x786F62646E6173LL, 0xE700000000000000LL, v37, v38, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    uint64_t v44 = sub_10007B1FC(&qword_10032C6A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v39, 3LL, 3LL, v44);
  }

  else
  {
    uint64_t v45 = sub_10007B1FC(&qword_10032C6E8);
    Regex.init(_regexString:version:)(0xD000000000000013LL, 0x80000001002A5D60LL, 1LL, v45);
    uint64_t v46 = (uint64_t)v73;
    Regex.wholeMatch(in:)(v37, v38, v78);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v46, 1LL, v76) == 1)
    {
      sub_100087418(v46, &qword_10032C6B0);
      uint64_t v47 = type metadata accessor for DecodingError(0LL);
      swift_allocError(v47, &protocol witness table for DecodingError, 0LL, 0LL);
      uint64_t v49 = v48;
      uint64_t v28 = v90;
      uint64_t v50 = v90[3];
      uint64_t v51 = v90[4];
      sub_100085B44(v90, v50);
      uint64_t v52 = dispatch thunk of Decoder.codingPath.getter(v50, v51);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v52,  0xD000000000000056LL,  0x80000001002A5D80LL,  0LL);
      uint64_t v53 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v47 - 8) + 104LL))( v49,  enum case for DecodingError.dataCorrupted(_:),  v47);
      swift_willThrow(v53, v54, v55, v56, v57, v58, v59);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v77, v78);
      sub_10007B1A0(v87);
      return sub_10007B1A0(v28);
    }

    uint64_t v61 = v75;
    uint64_t v60 = v76;
    __int128 v62 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v72, v46, v76);
    uint64_t KeyPath = swift_getKeyPath(&unk_10027D180);
    Regex.Match.subscript.getter(&v86, KeyPath, v60);
    swift_release(KeyPath);
    uint64_t v64 = static String._fromSubstring(_:)(v86);
    uint64_t v66 = v65;
    swift_bridgeObjectRelease();
    __int128 v67 = v71;
    URL.init(fileURLWithPath:)(v64, v66);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v60);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v77, v78);
    uint64_t v68 = sub_10007B1FC(&qword_10032C6A0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56LL))(v67, 0LL, 3LL, v68);
    uint64_t v69 = (uint64_t)v67;
    uint64_t v39 = v81;
    sub_1001420F8(v69, v81);
    uint64_t v28 = v90;
  }

unint64_t sub_1001420B4()
{
  unint64_t result = qword_10032C6E0;
  if (!qword_10032C6E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D82C, &type metadata for ClientOverride.Server.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C6E0);
  }

  return result;
}

uint64_t sub_1001420F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientOverride.Server(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10014213C()
{
  unint64_t result = qword_10032C6F0;
  if (!qword_10032C6F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D7DC, &type metadata for ClientOverride.Server.XcodeTestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C6F0);
  }

  return result;
}

uint64_t sub_100142180()
{
  return 0LL;
}

uint64_t sub_10014218C(uint64_t a1)
{
  unint64_t v2 = sub_100142750();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001421B4(uint64_t a1)
{
  unint64_t v2 = sub_100142750();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001421DC(uint64_t a1)
{
  unint64_t v2 = sub_10014270C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100142204(uint64_t a1)
{
  unint64_t v2 = sub_10014270C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014222C@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_100142258(uint64_t a1)
{
  unint64_t v2 = sub_1001426C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100142280(uint64_t a1)
{
  unint64_t v2 = sub_1001426C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ClientOverride.Server.encode(to:)(void *a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032C700);
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v29 = v2;
  __chkstk_darwin(v2);
  unint64_t v26 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for URL(0LL);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v24 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10007B1FC(&qword_10032C708);
  uint64_t v22 = *(void *)(v5 - 8);
  uint64_t v23 = v5;
  __chkstk_darwin(v5);
  uint64_t v21 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10007B1FC(&qword_10032C710);
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  __chkstk_darwin(v7);
  uint64_t v18 = sub_10007B1FC(&qword_10032C718);
  __chkstk_darwin(v18);
  uint64_t v8 = type metadata accessor for ClientOverride.Server(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10007B1FC(&qword_10032C720);
  uint64_t v30 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_100085B44(a1, v13);
  unint64_t v14 = sub_1001420B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ClientOverride.Server.CodingKeys,  &type metadata for ClientOverride.Server.CodingKeys,  v14,  v13,  v12);
  sub_1000B6230(v31, (uint64_t)v10, type metadata accessor for ClientOverride.Server);
  uint64_t v15 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v16 = (char *)sub_100142508
      + 4
      * byte_10027D150[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))( v10,  3LL,  v15)];
  __asm { BR              X10 }

uint64_t sub_100142508()
{
  uint64_t v3 = *(void *)(v2 - 144);
  uint64_t v4 = *(void *)(v2 - 152);
  uint64_t v5 = *(void *)(v2 - 128);
  (*(void (**)(void))(v3 + 32))();
  *(_BYTE *)(v2 - 65) = 3;
  unint64_t v6 = sub_10014213C();
  uint64_t v7 = *(void *)(v2 - 136);
  ((void (*)(ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t))KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:))( &type metadata for ClientOverride.Server.XcodeTestCodingKeys,  v2 - 65,  v0,  &type metadata for ClientOverride.Server.XcodeTestCodingKeys,  v6);
  sub_10009D5CC( &qword_10032C728,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v8 = *(void *)(v2 - 112);
  ((void (*)(uint64_t))KeyedEncodingContainer.encode<A>(_:forKey:))(v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 120) + 8LL))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 104) + 8LL))(v1, v0);
}

unint64_t sub_1001426C8()
{
  unint64_t result = qword_10032C730;
  if (!qword_10032C730)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D78C, &type metadata for ClientOverride.Server.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C730);
  }

  return result;
}

unint64_t sub_10014270C()
{
  unint64_t result = qword_10032C738;
  if (!qword_10032C738)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D73C, &type metadata for ClientOverride.Server.ProductionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C738);
  }

  return result;
}

unint64_t sub_100142750()
{
  unint64_t result = qword_10032C740;
  if (!qword_10032C740)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D6EC, &type metadata for ClientOverride.Server.AutomaticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C740);
  }

  return result;
}

uint64_t sub_100142798@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ClientOverride.Server.init(from:)(a1, a2);
}

void sub_1001427AC(void *a1)
{
}

uint64_t ClientOverride.description.getter()
{
  uint64_t v1 = type metadata accessor for ClientOverride.Server(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10007B1FC(&qword_10032C748);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = 0LL;
  unint64_t v45 = 0xE000000000000000LL;
  uint64_t v11 = v0[3];
  if (v11)
  {
    uint64_t v12 = v0[2];
    v43._uint64_t countAndFlagsBits = 0x2864696272LL;
    v43._object = (void *)0xE500000000000000LL;
    String.append(_:)(*(Swift::String *)(&v11 - 1));
    v13._uint64_t countAndFlagsBits = 8233LL;
    v13._object = (void *)0xE200000000000000LL;
    String.append(_:)(v13);
    object = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(object);
  }

  uint64_t v15 = v0[5];
  if (v15)
  {
    uint64_t v16 = v0[4];
    v43._uint64_t countAndFlagsBits = 0x287372766272LL;
    v43._object = (void *)0xE600000000000000LL;
    String.append(_:)(*(Swift::String *)(&v15 - 1));
    v17._uint64_t countAndFlagsBits = 8233LL;
    v17._object = (void *)0xE200000000000000LL;
    String.append(_:)(v17);
    uint64_t v18 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v18);
  }

  uint64_t v19 = (int *)type metadata accessor for ClientOverride(0LL);
  uint64_t v20 = (char *)v0 + v19[9];
  if ((v20[8] & 1) == 0)
  {
    uint64_t v21 = *(void *)v20;
    v43._uint64_t countAndFlagsBits = 0x2864496D616461LL;
    v43._object = (void *)0xE700000000000000LL;
    uint64_t v42 = v21;
    v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    v24._uint64_t countAndFlagsBits = 8233LL;
    v24._object = (void *)0xE200000000000000LL;
    String.append(_:)(v24);
    uint64_t v25 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v25);
  }

  unint64_t v26 = (char *)v0 + v19[8];
  if ((v26[8] & 1) == 0)
  {
    uint64_t v27 = *(void *)v26;
    v43._uint64_t countAndFlagsBits = 0x6449737256747865LL;
    v43._object = (void *)0xE900000000000028LL;
    uint64_t v42 = v27;
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v29 = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v29);
    v30._uint64_t countAndFlagsBits = 8233LL;
    v30._object = (void *)0xE200000000000000LL;
    String.append(_:)(v30);
    uint64_t v31 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v31);
  }

  sub_100142BE0((uint64_t)v0 + v19[10], (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100087418((uint64_t)v6, &qword_10032C748);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v43._uint64_t countAndFlagsBits = 677669238LL;
    v43._object = (void *)0xE400000000000000LL;
    uint64_t v32 = sub_10009D5CC( &qword_10032C750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v32);
    uint64_t v34 = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v34);
    v35._uint64_t countAndFlagsBits = 8233LL;
    v35._object = (void *)0xE200000000000000LL;
    String.append(_:)(v35);
    uint64_t v36 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v36);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  v43._uint64_t countAndFlagsBits = 0x28726576726573LL;
  v43._object = (void *)0xE700000000000000LL;
  sub_1000B6230((uint64_t)v0 + v19[7], (uint64_t)v3, type metadata accessor for ClientOverride.Server);
  sub_10014146C((uint64_t)v3);
  uint64_t v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  uint64_t v39 = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v39);
  return v44;
}

uint64_t type metadata accessor for ClientOverride(uint64_t a1)
{
  return sub_100142BAC(a1, (uint64_t *)&unk_10032C7F8, (uint64_t)&nominal type descriptor for ClientOverride);
}

uint64_t sub_100142BAC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_100142BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t ClientOverride.requestAuditTokenData.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1001198EC(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t ClientOverride.requestAuditTokenData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10009BE78(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t LazyJWS.rawValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t ClientOverride.requestBundleID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ClientOverride.requestBundleID.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t AcknowledgeMessageRequest.offerID.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t ClientOverride.requestBundleVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = a2;
  return result;
}

uint64_t (*ClientOverride.requestBundleVersion.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ClientOverride.server.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ClientOverride(0LL);
  return sub_1000B6230(v1 + *(int *)(v3 + 28), a1, type metadata accessor for ClientOverride.Server);
}

uint64_t ClientOverride.server.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClientOverride(0LL) + 28);
  return sub_100142DD8(a1, v3);
}

uint64_t sub_100142DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientOverride.Server(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*ClientOverride.server.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ClientOverride.storeExternalVersion.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ClientOverride(0LL) + 32));
}

uint64_t ClientOverride.storeExternalVersion.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ClientOverride(0LL);
  uint64_t v6 = v2 + *(int *)(result + 32);
  *(void *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ClientOverride.storeExternalVersion.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ClientOverride.storeItemID.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ClientOverride(0LL) + 36));
}

uint64_t ClientOverride.storeItemID.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ClientOverride(0LL);
  uint64_t v6 = v2 + *(int *)(result + 36);
  *(void *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ClientOverride.storeItemID.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ClientOverride.vendorID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClientOverride(0LL) + 40);
  return sub_100142BE0(v3, a1);
}

uint64_t ClientOverride.vendorID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClientOverride(0LL) + 40);
  return sub_100142FCC(a1, v3);
}

uint64_t sub_100142FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*ClientOverride.vendorID.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ClientOverride.init(requestAuditTokenData:requestBundleID:requestBundleVersion:server:storeItemID:storeExternalVersion:vendorID:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, char a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v19 = (int *)type metadata accessor for ClientOverride(0LL);
  uint64_t v20 = (char *)a9 + v19[8];
  uint64_t v21 = (char *)a9 + v19[9];
  uint64_t v22 = (uint64_t)a9 + v19[10];
  uint64_t v23 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  sub_1001420F8(a7, (uint64_t)a9 + v19[7]);
  *(void *)uint64_t v20 = a11;
  v20[8] = a12 & 1;
  *(void *)uint64_t v21 = a8;
  v21[8] = a10 & 1;
  return sub_100142FCC(a13, v22);
}

uint64_t sub_100143150(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10014318C + 4 * byte_10027D154[a1]))( 0xD000000000000015LL,  0x80000001002A5E00LL);
}

uint64_t sub_10014318C()
{
  return 0x4274736575716572LL;
}

unint64_t sub_1001431B0()
{
  return 0xD000000000000014LL;
}

uint64_t sub_1001431EC()
{
  return 0x65744965726F7473LL;
}

uint64_t sub_10014320C()
{
  return 0x4449726F646E6576LL;
}

BOOL sub_100143224(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100143238()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10014327C()
{
}

uint64_t sub_1001432A4()
{
  return sub_100143150(*v0);
}

uint64_t sub_1001432AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001459A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001432D0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1001432DC(uint64_t a1)
{
  unint64_t v2 = sub_1001435B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100143304(uint64_t a1)
{
  unint64_t v2 = sub_1001435B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClientOverride.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032C758);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v9);
  unint64_t v11 = sub_1001435B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ClientOverride.CodingKeys,  &type metadata for ClientOverride.CodingKeys,  v11,  v9,  v10);
  __int128 v33 = *v3;
  char v32 = 0;
  unint64_t v12 = sub_1001435F8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v32, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = *((void *)v3 + 2);
    uint64_t v14 = *((void *)v3 + 3);
    LOBYTE(v33) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v33, v5);
    uint64_t v15 = *((void *)v3 + 4);
    uint64_t v16 = *((void *)v3 + 5);
    LOBYTE(v33) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v33, v5);
    Swift::String v17 = (int *)type metadata accessor for ClientOverride(0LL);
    uint64_t v18 = (uint64_t)v3 + v17[7];
    LOBYTE(v33) = 3;
    uint64_t v19 = type metadata accessor for ClientOverride.Server(0LL);
    uint64_t v20 = sub_10009D5CC( &qword_10032C770,  type metadata accessor for ClientOverride.Server,  (uint64_t)&protocol conformance descriptor for ClientOverride.Server);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v33, v5, v19, v20);
    uint64_t v21 = (uint64_t *)((char *)v3 + v17[8]);
    uint64_t v22 = *v21;
    uint64_t v23 = *((unsigned __int8 *)v21 + 8);
    LOBYTE(v33) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v33, v5);
    Swift::String v24 = (uint64_t *)((char *)v3 + v17[9]);
    uint64_t v25 = *v24;
    uint64_t v26 = *((unsigned __int8 *)v24 + 8);
    LOBYTE(v33) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v33, v5);
    uint64_t v27 = (uint64_t)v3 + v17[10];
    LOBYTE(v33) = 6;
    uint64_t v28 = type metadata accessor for UUID(0LL);
    uint64_t v29 = sub_10009D5CC( &qword_10032C778,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v33, v5, v28, v29);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1001435B4()
{
  unint64_t result = qword_10032C760;
  if (!qword_10032C760)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D69C, &type metadata for ClientOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C760);
  }

  return result;
}

unint64_t sub_1001435F8()
{
  unint64_t result = qword_10032C768;
  if (!qword_10032C768)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10032C768);
  }

  return result;
}

uint64_t ClientOverride.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = sub_10007B1FC(&qword_10032C748);
  __chkstk_darwin(v3);
  uint64_t v46 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = type metadata accessor for ClientOverride.Server(0LL);
  __chkstk_darwin(v43);
  uint64_t v44 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = sub_10007B1FC(&qword_10032C780);
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ClientOverride(0LL);
  uint64_t v9 = (int *)__chkstk_darwin(v8);
  unint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *(_OWORD *)unint64_t v11 = xmmword_10027C9D0;
  unint64_t v12 = &v11[v9[8]];
  *(void *)unint64_t v12 = 0LL;
  v12[8] = 1;
  uint64_t v13 = &v11[v9[9]];
  *(void *)uint64_t v13 = 0LL;
  v13[8] = 1;
  uint64_t v48 = v9;
  uint64_t v14 = (uint64_t)&v11[v9[10]];
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL);
  uint64_t v49 = v14;
  v16(v14, 1LL, 1LL, v15);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  uint64_t v50 = a1;
  sub_100085B44(a1, v17);
  unint64_t v19 = sub_1001435B4();
  uint64_t v20 = v7;
  uint64_t v21 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ClientOverride.CodingKeys,  &type metadata for ClientOverride.CodingKeys,  v19,  v17,  v18);
  if (v21)
  {
    uint64_t v31 = v49;
    sub_10007B1A0(v50);
    sub_10009BE78(*(void *)v11, *((void *)v11 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100087418(v31, &qword_10032C748);
  }

  else
  {
    uint64_t v51 = (uint64_t *)v12;
    uint64_t v41 = (uint64_t *)v13;
    uint64_t v22 = v45;
    uint64_t v23 = (uint64_t)v46;
    char v53 = 0;
    unint64_t v24 = sub_100143A9C();
    uint64_t v25 = v47;
    uint64_t v26 = v20;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v53,  v47,  &type metadata for Data,  v24);
    *(_OWORD *)unint64_t v11 = v52;
    LOBYTE(v52) = 1;
    *((void *)v11 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v25);
    *((void *)v11 + 3) = v27;
    LOBYTE(v52) = 2;
    *((void *)v11 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v25);
    *((void *)v11 + 5) = v28;
    LOBYTE(v52) = 3;
    uint64_t v29 = sub_10009D5CC( &qword_10032C790,  type metadata accessor for ClientOverride.Server,  (uint64_t)&protocol conformance descriptor for ClientOverride.Server);
    uint64_t v30 = (uint64_t)v44;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, &v52, v25, v43, v29);
    sub_1001420F8(v30, (uint64_t)&v11[v48[7]]);
    LOBYTE(v52) = 4;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v25);
    __int128 v33 = v51;
    *uint64_t v51 = v32;
    *((_BYTE *)v33 + 8) = v34 & 1;
    LOBYTE(v52) = 5;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v25);
    uint64_t v36 = v41;
    *uint64_t v41 = v35;
    *((_BYTE *)v36 + 8) = v37 & 1;
    LOBYTE(v52) = 6;
    uint64_t v38 = sub_10009D5CC( &qword_10032C798,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v15, &v52, v25, v15, v38);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v25);
    sub_100142FCC(v23, v49);
    sub_1000B6230((uint64_t)v11, v42, type metadata accessor for ClientOverride);
    sub_10007B1A0(v50);
    return sub_1000B6274((uint64_t)v11, type metadata accessor for ClientOverride);
  }

unint64_t sub_100143A9C()
{
  unint64_t result = qword_10032C788;
  if (!qword_10032C788)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10032C788);
  }

  return result;
}

uint64_t sub_100143AE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ClientOverride.init(from:)(a1, a2);
}

uint64_t sub_100143AF8(void *a1)
{
  return ClientOverride.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ClientOverride(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }

    else
    {
      uint64_t v9 = *a2;
      sub_1000881FC(*a2, a2[1]);
      *uint64_t v4 = v9;
      v4[1] = v7;
    }

    uint64_t v10 = a2[3];
    void v4[2] = a2[2];
    void v4[3] = v10;
    uint64_t v11 = a2[5];
    void v4[4] = a2[4];
    v4[5] = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    uint64_t v15 = sub_10007B1FC(&qword_10032C6A0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 3LL, v15))
    {
      uint64_t v17 = type metadata accessor for ClientOverride.Server(0LL);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      uint64_t v18 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v13, v14, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 3LL, v15);
    }

    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (char *)v4 + v19;
    uint64_t v22 = (char *)a2 + v19;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = (char *)v4 + v20;
    unint64_t v24 = (char *)a2 + v20;
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    uint64_t v25 = a3[10];
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for UUID(0LL);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, v28))
    {
      uint64_t v30 = sub_10007B1FC(&qword_10032C748);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
    }
  }

  return v4;
}

uint64_t destroy for ClientOverride(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_10007F054(*a1, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v5 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v6 = sub_10007B1FC(&qword_10032C6A0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 3LL, v6))
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v5, v7);
  }

  uint64_t v8 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t initializeWithCopy for ClientOverride(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v7 = *a2;
    sub_1000881FC(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }

  uint64_t v8 = a2[3];
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = a2[2];
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  uint64_t v13 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 3LL, v13))
  {
    uint64_t v15 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    uint64_t v16 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v11, v12, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 3LL, v13);
  }

  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = (char *)a2 + v17;
  *(void *)uint64_t v19 = *(void *)v20;
  *(_BYTE *)(v19 + 8) = v20[8];
  uint64_t v21 = a1 + v18;
  uint64_t v22 = (char *)a2 + v18;
  *(void *)uint64_t v21 = *(void *)v22;
  *(_BYTE *)(v21 + 8) = v22[8];
  uint64_t v23 = a3[10];
  unint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = sub_10007B1FC(&qword_10032C748);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  return a1;
}

uint64_t *assignWithCopy for ClientOverride(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a2;
      sub_1000881FC(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_1000A18B0((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v8 = *a2;
  sub_1000881FC(*a2, a2[1]);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10007F054(v9, v10);
LABEL_8:
  a1[2] = a2[2];
  uint64_t v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v12 = a2[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 3LL, v16);
  int v20 = v18(v15, 3LL, v16);
  if (v19)
  {
    if (!v20)
    {
      uint64_t v21 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v14, v15, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 3LL, v16);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (v20)
  {
    sub_100087418((uint64_t)v14, &qword_10032C6A0);
LABEL_13:
    uint64_t v22 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v14, v15, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_14;
  }

  uint64_t v41 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 24LL))(v14, v15, v41);
LABEL_14:
  uint64_t v23 = a3[8];
  unint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)unint64_t v24 = v26;
  uint64_t v27 = a3[9];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = *(void *)v29;
  char v28[8] = v29[8];
  *(void *)uint64_t v28 = v30;
  uint64_t v31 = a3[10];
  uint64_t v32 = (char *)a1 + v31;
  __int128 v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1LL, v34);
  int v38 = v36(v33, 1LL, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v32, v33, v34);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_19;
  }

  if (v38)
  {
LABEL_19:
    uint64_t v39 = sub_10007B1FC(&qword_10032C748);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
  return a1;
}

_OWORD *initializeWithTake for ClientOverride(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 3LL, v10))
  {
    uint64_t v12 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    uint64_t v13 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v8, v9, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 3LL, v10);
  }

  uint64_t v14 = a3[8];
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = (char *)a1 + v15;
  int v19 = (char *)a2 + v15;
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = a3[10];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = sub_10007B1FC(&qword_10032C748);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
  }

  return a1;
}

uint64_t assignWithTake for ClientOverride(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000A18B0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_10007F054(v8, v6);
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 3LL, v14);
  int v18 = v16(v13, 3LL, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v19 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v12, v13, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 3LL, v14);
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  if (v18)
  {
    sub_100087418((uint64_t)v12, &qword_10032C6A0);
LABEL_11:
    uint64_t v20 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_12;
  }

  uint64_t v37 = type metadata accessor for URL(0LL);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v37 - 8) + 40LL))(v12, v13, v37);
LABEL_12:
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  uint64_t v25 = a1 + v22;
  uint64_t v26 = a2 + v22;
  *(void *)uint64_t v25 = *(void *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  uint64_t v27 = a3[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1LL, v30);
  int v34 = v32(v29, 1LL, v30);
  if (!v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 40))(v28, v29, v30);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v31 + 8))(v28, v30);
    goto LABEL_17;
  }

  if (v34)
  {
LABEL_17:
    uint64_t v35 = sub_10007B1FC(&qword_10032C748);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v31 + 32))(v28, v29, v30);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientOverride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001446D0);
}

uint64_t sub_1001446D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = type metadata accessor for ClientOverride.Server(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(int *)(a3 + 28);
    }

    else
    {
      uint64_t v11 = sub_10007B1FC(&qword_10032C748);
      uint64_t v10 = *(void *)(v11 - 8);
      uint64_t v12 = *(int *)(a3 + 40);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

uint64_t storeEnumTagSinglePayload for ClientOverride(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014478C);
}

uint64_t sub_10014478C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 24) = a2;
  }

  else
  {
    uint64_t v8 = type metadata accessor for ClientOverride.Server(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 28);
    }

    else
    {
      uint64_t v10 = sub_10007B1FC(&qword_10032C748);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 40);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_10014482C(uint64_t a1)
{
  v6[0] = &unk_10027D2B0;
  v6[1] = &unk_10027D2C8;
  v6[2] = &unk_10027D2C8;
  uint64_t v2 = type metadata accessor for ClientOverride.Server(319LL);
  if (v3 <= 0x3F)
  {
    void v6[3] = *(void *)(v2 - 8) + 64LL;
    void v6[4] = &unk_10027D2E0;
    v6[5] = &unk_10027D2E0;
    sub_1001448D4(319LL);
    if (v5 <= 0x3F)
    {
      v6[6] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 7LL, v6, a1 + 16);
    }
  }

void sub_1001448D4(uint64_t a1)
{
  if (!qword_10032C808)
  {
    uint64_t v2 = type metadata accessor for UUID(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10032C808);
    }
  }

uint64_t *initializeBufferWithCopyOfBuffer for ClientOverride.Server(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = sub_10007B1FC(&qword_10032C6A0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3LL, v7))
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v10 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16LL))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 3LL, v7);
    }
  }

  return a1;
}

uint64_t destroy for ClientOverride.Server(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 3LL, v2);
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *initializeWithCopy for ClientOverride.Server(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  }

  return a1;
}

void *assignWithCopy for ClientOverride.Server(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3LL, v6);
  int v10 = v8(a2, 3LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24LL))(a1, a2, v13);
      return a1;
    }

    sub_100087418((uint64_t)a1, &qword_10032C6A0);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  return a1;
}

void *initializeWithTake for ClientOverride.Server(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3LL, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  }

  return a1;
}

void *assignWithTake for ClientOverride.Server(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 3LL, v6);
  int v10 = v8(a2, 3LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40LL))(a1, a2, v13);
      return a1;
    }

    sub_100087418((uint64_t)a1, &qword_10032C6A0);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    return a1;
  }

  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 3LL, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientOverride.Server(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100144DF4);
}

uint64_t sub_100144DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C6A0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
  if (v5 >= 4) {
    return v5 - 3;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ClientOverride.Server(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100144E50);
}

uint64_t sub_100144E50(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 3);
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v6 = sub_10007B1FC(&qword_10032C6A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, v5, a3, v6);
}

uint64_t sub_100144EA8(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032C6A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(a1, 3LL, v2);
}

uint64_t sub_100144EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C6A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, 3LL, v4);
}

uint64_t sub_100144F28(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(result - 8) + 64LL, 3LL);
    return 0LL;
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for ProductRequest.RequestKind(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ClientOverride.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for ClientOverride.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100145064 + 4 * byte_10027D160[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100145098 + 4 * byte_10027D15B[v4]))();
}

uint64_t sub_100145098(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001450A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001450A8LL);
  }
  return result;
}

uint64_t sub_1001450B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001450BCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1001450C0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001450C8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClientOverride.CodingKeys()
{
  return &type metadata for ClientOverride.CodingKeys;
}

ValueMetadata *type metadata accessor for ClientOverride.Server.AutomaticCodingKeys()
{
  return &type metadata for ClientOverride.Server.AutomaticCodingKeys;
}

ValueMetadata *type metadata accessor for ClientOverride.Server.ProductionCodingKeys()
{
  return &type metadata for ClientOverride.Server.ProductionCodingKeys;
}

ValueMetadata *type metadata accessor for ClientOverride.Server.SandboxCodingKeys()
{
  return &type metadata for ClientOverride.Server.SandboxCodingKeys;
}

uint64_t getEnumTagSinglePayload for ExternalGatewayMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for ClientOverride.Server.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1001451F0 + 4 * byte_10027D16A[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100145224 + 4 * byte_10027D165[v4]))();
}

uint64_t sub_100145224(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014522C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100145234LL);
  }
  return result;
}

uint64_t sub_100145240(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100145248LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10014524C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100145254(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClientOverride.Server.CodingKeys()
{
  return &type metadata for ClientOverride.Server.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ClientOverride.Server.XcodeTestCodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001452B4 + 4 * byte_10027D16F[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001452D4 + 4 * byte_10027D174[v4]))();
  }
}

_BYTE *sub_1001452B4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1001452D4(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001452DC(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001452E4(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001452EC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001452F4(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ClientOverride.Server.XcodeTestCodingKeys()
{
  return &type metadata for ClientOverride.Server.XcodeTestCodingKeys;
}

unint64_t sub_100145314()
{
  unint64_t result = qword_10032C8D0;
  if (!qword_10032C8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D414, &type metadata for ClientOverride.Server.XcodeTestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C8D0);
  }

  return result;
}

unint64_t sub_10014535C()
{
  unint64_t result = qword_10032C8D8;
  if (!qword_10032C8D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D4CC, &type metadata for ClientOverride.Server.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C8D8);
  }

  return result;
}

unint64_t sub_1001453A4()
{
  unint64_t result = qword_10032C8E0;
  if (!qword_10032C8E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D674, &type metadata for ClientOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C8E0);
  }

  return result;
}

unint64_t sub_1001453EC()
{
  unint64_t result = qword_10032C8E8;
  if (!qword_10032C8E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D5E4, &type metadata for ClientOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C8E8);
  }

  return result;
}

unint64_t sub_100145434()
{
  unint64_t result = qword_10032C8F0;
  if (!qword_10032C8F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D60C, &type metadata for ClientOverride.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C8F0);
  }

  return result;
}

unint64_t sub_10014547C()
{
  unint64_t result = qword_10032C8F8;
  if (!qword_10032C8F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D594, &type metadata for ClientOverride.Server.AutomaticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C8F8);
  }

  return result;
}

unint64_t sub_1001454C4()
{
  unint64_t result = qword_10032C900;
  if (!qword_10032C900)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D5BC, &type metadata for ClientOverride.Server.AutomaticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C900);
  }

  return result;
}

unint64_t sub_10014550C()
{
  unint64_t result = qword_10032C908;
  if (!qword_10032C908)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D544, &type metadata for ClientOverride.Server.ProductionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C908);
  }

  return result;
}

unint64_t sub_100145554()
{
  unint64_t result = qword_10032C910;
  if (!qword_10032C910)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D56C, &type metadata for ClientOverride.Server.ProductionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C910);
  }

  return result;
}

unint64_t sub_10014559C()
{
  unint64_t result = qword_10032C918;
  if (!qword_10032C918)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D4F4, &type metadata for ClientOverride.Server.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C918);
  }

  return result;
}

unint64_t sub_1001455E4()
{
  unint64_t result = qword_10032C920;
  if (!qword_10032C920)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D51C, &type metadata for ClientOverride.Server.SandboxCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C920);
  }

  return result;
}

unint64_t sub_10014562C()
{
  unint64_t result = qword_10032C928;
  if (!qword_10032C928)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D384, &type metadata for ClientOverride.Server.XcodeTestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C928);
  }

  return result;
}

unint64_t sub_100145674()
{
  unint64_t result = qword_10032C930;
  if (!qword_10032C930)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D3AC, &type metadata for ClientOverride.Server.XcodeTestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C930);
  }

  return result;
}

unint64_t sub_1001456BC()
{
  unint64_t result = qword_10032C938;
  if (!qword_10032C938)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D43C, &type metadata for ClientOverride.Server.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C938);
  }

  return result;
}

unint64_t sub_100145704()
{
  unint64_t result = qword_10032C940;
  if (!qword_10032C940)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027D464, &type metadata for ClientOverride.Server.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C940);
  }

  return result;
}

uint64_t sub_100145748(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6974616D6F747561LL && a2 == 0xE900000000000063LL)
  {
    unint64_t v5 = 0xE900000000000063LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974616D6F747561LL, 0xE900000000000063LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x69746375646F7270LL && a2 == 0xEA00000000006E6FLL)
  {
    unint64_t v7 = 0xEA00000000006E6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746375646F7270LL, 0xEA00000000006E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x786F62646E6173LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x786F62646E6173LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x73655465646F6378LL && a2 == 0xE900000000000074LL)
  {
    swift_bridgeObjectRelease(0xE900000000000074LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73655465646F6378LL, 0xE900000000000074LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10014591C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010LL && a2 == 0x80000001002A5DE0LL)
  {
    swift_bridgeObjectRelease(0x80000001002A5DE0LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001002A5DE0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

uint64_t sub_1001459A0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v4 = 0x80000001002A5E00LL;
    if (a2 == 0x80000001002A5E00LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x80000001002A5E00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x4274736575716572LL && a2 == 0xEF4449656C646E75LL)
  {
    unint64_t v6 = 0xEF4449656C646E75LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4274736575716572LL, 0xEF4449656C646E75LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v7 = 0x80000001002A1480LL;
    if (a2 == 0x80000001002A1480LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001002A1480LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0x726576726573LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726576726573LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v9 = 0x80000001002A5E20LL;
    if (a2 == 0x80000001002A5E20LL) {
      goto LABEL_27;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x80000001002A5E20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if (a1 == 0x65744965726F7473LL && a2 == 0xEB0000000044496DLL)
  {
    unint64_t v10 = 0xEB0000000044496DLL;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65744965726F7473LL, 0xEB0000000044496DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_33;
  }

  if (a1 == 0x4449726F646E6576LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 6LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4449726F646E6576LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 6LL;
    }
    else {
      return 7LL;
    }
  }

Swift::Bool __swiftcall NSFileManager.isDirectory(atPath:)(Swift::String atPath)
{
  Swift::Bool v4 = 0;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 fileExistsAtPath:v2 isDirectory:&v4];

  return v4;
}

uint64_t NSFileManager.fileExists(at:)()
{
  __int16 v1 = v0;
  char v7 = 0;
  object = URL.path(percentEncoded:)(0)._object;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  unsigned int v4 = [v1 fileExistsAtPath:v3 isDirectory:&v7];

  if (v7) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  return v5 | v4;
}

BOOL ExternalGatewayMode.isLink.getter(char a1)
{
  return (a1 & 0xFD) == 0;
}

uint64_t ExternalGatewayMode.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100145E1C + 4 * byte_10027D880[a1]))( 0xD000000000000016LL,  0x80000001002A5970LL);
}

unint64_t sub_100145E1C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_100145E38()
{
  return v0 + 3;
}

uint64_t ExternalGatewayMode.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_100145E6C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s15StoreKit_Shared19ExternalGatewayModeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100145E94(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100145EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100147B60();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100145EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100147B60();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_100145F48(char a1)
{
  unint64_t v2 = 0xD000000000000013LL;
  Hasher.init(_seed:)(v5);
  if (a1)
  {
    if (a1 == 1)
    {
      unint64_t v2 = 0xD000000000000015LL;
      unint64_t v3 = 0x80000001002A5C70LL;
    }

    else
    {
      unint64_t v3 = 0x80000001002A5C90LL;
    }
  }

  else
  {
    unint64_t v3 = 0x80000001002A5C50LL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100145FEC(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD000000000000013LL;
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v3 = 0xD000000000000015LL;
      unint64_t v4 = 0x80000001002A5C70LL;
    }

    else
    {
      unint64_t v4 = 0x80000001002A5C90LL;
    }
  }

  else
  {
    unint64_t v4 = 0x80000001002A5C50LL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100146068(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD000000000000013LL;
  Hasher.init(_seed:)(v6);
  if (a2)
  {
    if (a2 == 1)
    {
      unint64_t v3 = 0xD000000000000015LL;
      unint64_t v4 = 0x80000001002A5C70LL;
    }

    else
    {
      unint64_t v4 = 0x80000001002A5C90LL;
    }
  }

  else
  {
    unint64_t v4 = 0x80000001002A5C50LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t ExternalGatewayOptionsKey.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000013LL;
  if (a1 == 1) {
    return 0xD000000000000015LL;
  }
  return result;
}

uint64_t sub_100146168(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10014B4C4(*a1, *a2);
}

Swift::Int sub_100146174()
{
  return sub_100145F48(*v0);
}

uint64_t sub_10014617C(uint64_t a1)
{
  return sub_100145FEC(a1, *v1);
}

Swift::Int sub_100146184(uint64_t a1)
{
  return sub_100146068(a1, *v1);
}

unint64_t sub_10014618C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s15StoreKit_Shared25ExternalGatewayOptionsKeyO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001461B8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ExternalGatewayOptionsKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ExternalGatewaySheetRequest.generateToken.getter()
{
  return *v0;
}

uint64_t ExternalGatewaySheetRequest.kind.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ExternalGatewaySheetRequest.logKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t ExternalGatewaySheetRequest.logKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = a2;
  return result;
}

uint64_t (*ExternalGatewaySheetRequest.logKey.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ExternalGatewaySheetRequest.options.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t ExternalGatewaySheetRequest.options.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 24));
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*ExternalGatewaySheetRequest.options.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ExternalGatewaySheetRequest.presentSheet.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t ExternalGatewaySheetRequest.hostSceneID.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t ExternalGatewaySheetRequest.init(kind:options:presentSheet:hostSceneID:generateToken:logKey:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_BYTE *)a9 = a6;
  *(_BYTE *)(a9 + 1) = result;
  *(void *)(a9 + 8) = a7;
  *(void *)(a9 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = a8;
  *(void *)(a9 + 24) = a2;
  *(_BYTE *)(a9 + 32) = a3;
  *(void *)(a9 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = a4;
  *(void *)(a9 + 48) = a5;
  return result;
}

uint64_t ExternalGatewaySheetRequest.subscript.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Optional(0LL, a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v22 - v9;
  sub_1000D4B44(v3 + 24, (uint64_t)v24, &qword_10032C948);
  sub_1000D4B44((uint64_t)v24, (uint64_t)&v25, &qword_10032C948);
  uint64_t v11 = v25;
  if (!v25)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    goto LABEL_14;
  }

  uint64_t v12 = 0xD000000000000013LL;
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v12 = 0xD000000000000015LL;
      uint64_t v13 = 0x80000001002A5C70LL;
    }

    else
    {
      uint64_t v13 = 0x80000001002A5C90LL;
    }

    if (!*(void *)(v25 + 16)) {
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v13 = 0x80000001002A5C50LL;
    if (!*(void *)(v25 + 16))
    {
LABEL_12:
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      goto LABEL_13;
    }
  }

  unint64_t v14 = sub_1001469D8(v12, v13);
  if ((v15 & 1) == 0) {
    goto LABEL_12;
  }
  sub_10007B1C0(*(void *)(v11 + 56) + 32 * v14, (uint64_t)&v22);
LABEL_13:
  swift_bridgeObjectRelease(v13);
LABEL_14:
  uint64_t v16 = sub_10007B1FC(&qword_10032C950);
  int v17 = swift_dynamicCast(v10, &v22, v16, a2, 6LL);
  uint64_t v18 = *(void *)(a2 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v17)
  {
    v19(v10, 0LL, 1LL, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v10, a2);
    uint64_t v20 = 0LL;
  }

  else
  {
    uint64_t v20 = 1LL;
    v19(v10, 1LL, 1LL, a2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(a3, v20, 1LL, a2);
}

double ExternalGatewaySheetRequest.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t ExternalGatewaySheetRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032C958);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v9);
  unint64_t v11 = sub_100147078();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ExternalGatewaySheetRequest.CodingKeys,  &type metadata for ExternalGatewaySheetRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  LOBYTE(v37[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v37, v5);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  LOBYTE(v37[0]) = v3[1];
  HIBYTE(v36) = 1;
  unint64_t v13 = sub_1001470BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v37, (char *)&v36 + 7, v5, &type metadata for ExternalGatewayMode, v13);
  uint64_t v14 = *((void *)v3 + 1);
  uint64_t v15 = *((void *)v3 + 2);
  LOBYTE(v37[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v37, v5);
  uint64_t v16 = v3[32];
  LOBYTE(v37[0]) = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v16, v37, v5);
  sub_1000D4B44((uint64_t)(v3 + 40), (uint64_t)v39, &qword_10032C970);
  sub_1000D4B44((uint64_t)v39, (uint64_t)v37, &qword_10032C970);
  HIBYTE(v36) = 5;
  uint64_t v17 = sub_10007B1FC(&qword_10032C970);
  unint64_t v18 = sub_100147100();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v37, (char *)&v36 + 7, v5, v17, v18);
  sub_1000D4B44((uint64_t)(v3 + 24), (uint64_t)v38, &qword_10032C948);
  sub_1000D4B44((uint64_t)v38, (uint64_t)&v40, &qword_10032C948);
  if (!v40) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v20 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v37[0] = 0LL;
  id v22 = [v20 dataWithJSONObject:isa options:0 error:v37];

  id v23 = v37[0];
  if (!v22)
  {
    uint64_t v28 = v23;
    _convertNSErrorToError(_:)(v23);

    swift_willThrow(v29, v30, v31, v32, v33, v34, v35);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v24 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v26 = v25;

  v37[0] = v24;
  v37[1] = v26;
  HIBYTE(v36) = 3;
  unint64_t v27 = sub_1001435F8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v37, (char *)&v36 + 7, v5, &type metadata for Data, v27);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_10007F054((uint64_t)v24, (unint64_t)v26);
}

uint64_t sub_100146860()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014689C + 4 * byte_10027D884[*v0]))( 0x65746172656E6567LL,  0xED00006E656B6F54LL);
}

uint64_t sub_10014689C()
{
  return 1684957547LL;
}

uint64_t sub_1001468AC()
{
  return 0x79654B676F6CLL;
}

uint64_t sub_1001468C0()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1001468D8()
{
  return 0x53746E6573657270LL;
}

uint64_t sub_1001468F8()
{
  return 0x6E65635374736F68LL;
}

uint64_t sub_100146918@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001478A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10014693C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100146948(uint64_t a1)
{
  unint64_t v2 = sub_100147078();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100146970(uint64_t a1)
{
  unint64_t v2 = sub_100147078();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100146998(void *a1)
{
  return ExternalGatewaySheetRequest.encode(to:)(a1);
}

unint64_t sub_1001469D8(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_1001323D0(a1, a2, v4);
}

unint64_t _s15StoreKit_Shared19ExternalGatewayModeO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

unint64_t _s15StoreKit_Shared25ExternalGatewayOptionsKeyO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002EF718, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100146A94@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v70 = type metadata accessor for DecodingError.Context(0LL);
  uint64_t v3 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10007B1FC(&qword_10032C9B0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __int128 v72 = a1;
  sub_100085B44(a1, v10);
  unint64_t v12 = sub_100147078();
  uint64_t v13 = v73;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ExternalGatewaySheetRequest.CodingKeys,  &type metadata for ExternalGatewaySheetRequest.CodingKeys,  v12,  v10,  v11);
  if (v13)
  {
    sub_10007B1A0(v72);
    return swift_bridgeObjectRelease();
  }

  uint64_t v14 = v7;
  LOBYTE(v75) = 0;
  uint64_t v15 = v6;
  LODWORD(v73) = KeyedDecodingContainer.decode(_:forKey:)(&v75, v6);
  LOBYTE(v74) = 1;
  unint64_t v16 = sub_100147BA4();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &type metadata for ExternalGatewayMode,  &v74,  v6,  &type metadata for ExternalGatewayMode,  v16);
  int v17 = v75;
  LOBYTE(v75) = 2;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v75, v15);
  uint64_t v69 = v19;
  uint64_t v67 = v18;
  int v68 = v17;
  LOBYTE(v75) = 4;
  swift_bridgeObjectRetain(v19);
  int v65 = KeyedDecodingContainer.decode(_:forKey:)(&v75, v15);
  LOBYTE(v75) = 5;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v75, v15);
  LOBYTE(v74) = 3;
  uint64_t v23 = v22;
  unint64_t v24 = sub_100143A9C();
  uint64_t v66 = v23;
  swift_bridgeObjectRetain(v23);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v74, v15, &type metadata for Data, v24);
  uint64_t v64 = v21;
  unint64_t v25 = v76;
  if (v76 >> 60 != 15)
  {
    uint64_t v27 = (uint64_t)v75;
    uint64_t v28 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    uint64_t v62 = v27;
    id v63 = v28;
    unint64_t v61 = v25;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v75 = 0LL;
    id v30 = [v63 JSONObjectWithData:isa options:0 error:&v75];

    if (v30)
    {
      id v31 = v75;
      _bridgeAnyObjectToAny(_:)(&v75);
      swift_unknownObjectRelease(v30);
      uint64_t v32 = sub_10007B1FC(&qword_10032C9C0);
      if ((swift_dynamicCast(&v74, &v75, (char *)&type metadata for Any + 8, v32, 6LL) & 1) != 0)
      {
        sub_10009BE78(v62, v61);
        uint64_t v26 = v74;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v47 = sub_10007B1FC(&qword_10032C9C8);
      uint64_t v48 = swift_allocObject(v47, 72LL, 7LL);
      *(_OWORD *)(v48 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027A600;
      *(void *)(v48 + 56) = &type metadata for ExternalGatewaySheetRequest.CodingKeys;
      *(void *)(v48 + 64) = v12;
      *(_BYTE *)(v48 + 32) = 3;
      id v75 = 0LL;
      unint64_t v76 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(28LL);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v48,  0xD000000000000031LL,  0x80000001002A5E40LL,  0LL);
      uint64_t v49 = type metadata accessor for DecodingError(0LL);
      swift_allocError(v49, &protocol witness table for DecodingError, 0LL, 0LL);
      uint64_t v51 = v50;
      uint64_t v52 = v70;
      (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v50, v5, v70);
      uint64_t v53 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v49 - 8) + 104LL))( v51,  enum case for DecodingError.dataCorrupted(_:),  v49);
      swift_willThrow(v53, v54, v55, v56, v57, v58, v59);
      sub_10009BE78(v62, v61);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v52);
    }

    else
    {
      id v38 = v75;
      id v39 = v75;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)(v38);

      swift_willThrow(v40, v41, v42, v43, v44, v45, v46);
      sub_10009BE78(v62, v61);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
    sub_10007B1A0(v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  swift_bridgeObjectRelease();
  uint64_t v26 = 0LL;
LABEL_10:
  char v33 = v73 & 1;
  char v34 = v65 & 1;
  swift_bridgeObjectRetain(v26);
  sub_10007B1A0(v72);
  uint64_t v35 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = v69;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v37 = v71;
  *uint64_t v71 = v33;
  v37[1] = v68;
  *((void *)v37 + 1) = v67;
  *((void *)v37 + 2) = v36;
  *((void *)v37 + 3) = v26;
  v37[32] = v34;
  *((void *)v37 + 5) = v64;
  *((void *)v37 + 6) = v35;
  return result;
}

unint64_t sub_100147078()
{
  unint64_t result = qword_10032C960;
  if (!qword_10032C960)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027DBC0, &type metadata for ExternalGatewaySheetRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C960);
  }

  return result;
}

unint64_t sub_1001470BC()
{
  unint64_t result = qword_10032C968;
  if (!qword_10032C968)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ExternalGatewayMode,  &type metadata for ExternalGatewayMode);
    atomic_store(result, (unint64_t *)&qword_10032C968);
  }

  return result;
}

unint64_t sub_100147100()
{
  unint64_t result = qword_10032C978;
  if (!qword_10032C978)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032C970);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10032C978);
  }

  return result;
}

unint64_t sub_100147160()
{
  unint64_t result = qword_10032C980;
  if (!qword_10032C980)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ExternalGatewayMode,  &type metadata for ExternalGatewayMode);
    atomic_store(result, (unint64_t *)&qword_10032C980);
  }

  return result;
}

unint64_t sub_1001471A8()
{
  unint64_t result = qword_10032C988;
  if (!qword_10032C988)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ExternalGatewayOptionsKey,  &type metadata for ExternalGatewayOptionsKey);
    atomic_store(result, (unint64_t *)&qword_10032C988);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ExternalGatewayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100147238 + 4 * byte_10027D88F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10014726C + 4 * byte_10027D88A[v4]))();
}

uint64_t sub_10014726C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100147274(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014727CLL);
  }
  return result;
}

uint64_t sub_100147288(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100147290LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100147294(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014729C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalGatewayMode()
{
  return &type metadata for ExternalGatewayMode;
}

uint64_t getEnumTagSinglePayload for ExternalGatewayOptionsKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for ExternalGatewayOptionsKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100147394 + 4 * byte_10027D899[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001473C8 + 4 * byte_10027D894[v4]))();
}

uint64_t sub_1001473C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001473D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001473D8LL);
  }
  return result;
}

uint64_t sub_1001473E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001473ECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001473F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001473F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalGatewayOptionsKey()
{
  return &type metadata for ExternalGatewayOptionsKey;
}

uint64_t destroy for ExternalGatewaySheetRequest(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for ExternalGatewaySheetRequest(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ExternalGatewaySheetRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for ExternalGatewaySheetRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ExternalGatewaySheetRequest(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalGatewaySheetRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_1000DE51C(*(void *)(v0 + 200), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExternalGatewaySheetRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExternalGatewaySheetRequest()
{
  return &type metadata for ExternalGatewaySheetRequest;
}

uint64_t getEnumTagSinglePayload for ExternalGatewaySheetRequest.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for ExternalGatewaySheetRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10014774C + 4 * byte_10027D8A3[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100147780 + 4 * byte_10027D89E[v4]))();
}

uint64_t sub_100147780(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100147788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100147790LL);
  }
  return result;
}

uint64_t sub_10014779C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001477A4LL);
  }
  *(_BYTE *)__n128 result = a2 + 5;
  return result;
}

uint64_t sub_1001477A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001477B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalGatewaySheetRequest.CodingKeys()
{
  return &type metadata for ExternalGatewaySheetRequest.CodingKeys;
}

unint64_t sub_1001477D0()
{
  unint64_t result = qword_10032C990;
  if (!qword_10032C990)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027DB98, &type metadata for ExternalGatewaySheetRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C990);
  }

  return result;
}

unint64_t sub_100147818()
{
  unint64_t result = qword_10032C998;
  if (!qword_10032C998)
  {
    unint64_t result = swift_getWitnessTable("a'\a", &type metadata for ExternalGatewaySheetRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C998);
  }

  return result;
}

unint64_t sub_100147860()
{
  unint64_t result = qword_10032C9A0;
  if (!qword_10032C9A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027DB30, &type metadata for ExternalGatewaySheetRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032C9A0);
  }

  return result;
}

uint64_t sub_1001478A4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x65746172656E6567LL && a2 == 0xED00006E656B6F54LL)
  {
    unint64_t v5 = 0xED00006E656B6F54LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746172656E6567LL, 0xED00006E656B6F54LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1684957547 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957547LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x79654B676F6CLL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79654B676F6CLL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v9 = 0xE700000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x53746E6573657270LL && a2 == 0xEC00000074656568LL)
  {
    unint64_t v10 = 0xEC00000074656568LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53746E6573657270LL, 0xEC00000074656568LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x6E65635374736F68LL && a2 == 0xEB00000000444965LL)
  {
    swift_bridgeObjectRelease(0xEB00000000444965LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E65635374736F68LL, 0xEB00000000444965LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

unint64_t sub_100147B60()
{
  unint64_t result = qword_10032C9A8;
  if (!qword_10032C9A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ExternalGatewayMode,  &type metadata for ExternalGatewayMode);
    atomic_store(result, (unint64_t *)&qword_10032C9A8);
  }

  return result;
}

unint64_t sub_100147BA4()
{
  unint64_t result = qword_10032C9B8;
  if (!qword_10032C9B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ExternalGatewayMode,  &type metadata for ExternalGatewayMode);
    atomic_store(result, (unint64_t *)&qword_10032C9B8);
  }

  return result;
}

uint64_t sub_100147BE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100147C28 + 4 * byte_10027DC20[a1]))( 0x4465727574616566LL,  0xEF64656C62617369LL);
}

uint64_t sub_100147C28()
{
  return 0x4164696C61766E69LL;
}

unint64_t sub_100147C44()
{
  return 0xD000000000000018LL;
}

uint64_t sub_100147C64()
{
  return 0x7469746E45746F6ELL;
}

uint64_t sub_100147C84()
{
  return 0x746E6F4349556F6ELL;
}

unint64_t sub_100147CA4()
{
  return 0xD000000000000011LL;
}

uint64_t sub_100147CCC()
{
  return 0x6E776F6E6B6E75LL;
}

uint64_t sub_100147CE4()
{
  return 0x636E614372657375LL;
}

uint64_t sub_100147D08()
{
  return 0x4D746E756F636361LL;
}

uint64_t sub_100147D2C(uint64_t a1)
{
  unint64_t v2 = sub_100148784();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147D54(uint64_t a1)
{
  unint64_t v2 = sub_100148784();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147D7C()
{
  return sub_100147BE8(*v0);
}

uint64_t sub_100147D84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100148CB0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100147DA8(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_100147DB4(uint64_t a1)
{
  unint64_t v2 = sub_100148740();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147DDC(uint64_t a1)
{
  unint64_t v2 = sub_100148740();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147E04(uint64_t a1)
{
  unint64_t v2 = sub_1001489E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147E2C(uint64_t a1)
{
  unint64_t v2 = sub_1001489E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147E54(uint64_t a1)
{
  unint64_t v2 = sub_1001489A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147E7C(uint64_t a1)
{
  unint64_t v2 = sub_1001489A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147EA4(uint64_t a1)
{
  unint64_t v2 = sub_1001488D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147ECC(uint64_t a1)
{
  unint64_t v2 = sub_1001488D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147EF4(uint64_t a1)
{
  unint64_t v2 = sub_100148960();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147F1C(uint64_t a1)
{
  unint64_t v2 = sub_100148960();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147F44(uint64_t a1)
{
  unint64_t v2 = sub_10014891C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147F6C(uint64_t a1)
{
  unint64_t v2 = sub_10014891C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147F94(uint64_t a1)
{
  unint64_t v2 = sub_100148894();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147FBC(uint64_t a1)
{
  unint64_t v2 = sub_100148894();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147FE4(uint64_t a1)
{
  unint64_t v2 = sub_100148850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014800C(uint64_t a1)
{
  unint64_t v2 = sub_100148850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100148034(uint64_t a1)
{
  unint64_t v2 = sub_10014880C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014805C(uint64_t a1)
{
  unint64_t v2 = sub_10014880C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100148084(uint64_t a1)
{
  unint64_t v2 = sub_1001487C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001480AC(uint64_t a1)
{
  unint64_t v2 = sub_1001487C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void StoreKitInternalError.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v45 = a2;
  uint64_t v3 = sub_10007B1FC(&qword_10032C9D0);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  __chkstk_darwin(v3);
  uint64_t v42 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10007B1FC(&qword_10032C9D8);
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  id v39 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10007B1FC(&qword_10032C9E0);
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10007B1FC(&qword_10032C9E8);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  __chkstk_darwin(v9);
  char v33 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10007B1FC(&qword_10032C9F0);
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  __chkstk_darwin(v11);
  id v30 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_10007B1FC(&qword_10032C9F8);
  uint64_t v28 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v27 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_10007B1FC(&qword_10032CA00);
  uint64_t v25 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v24 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_10007B1FC(&qword_10032CA08);
  v22[2] = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  v22[1] = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v22[0] = sub_10007B1FC(&qword_10032CA10);
  __chkstk_darwin(v22[0]);
  uint64_t v16 = sub_10007B1FC(&qword_10032CA18);
  __chkstk_darwin(v16);
  uint64_t v48 = sub_10007B1FC(&qword_10032CA20);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_100085B44(a1, v19);
  unint64_t v21 = sub_100148740();
  uint64_t v47 = v18;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for StoreKitInternalError.CodingKeys,  &type metadata for StoreKitInternalError.CodingKeys,  v21,  v19,  v20);
  __asm { BR              X10 }

uint64_t sub_100148444()
{
  *(_BYTE *)(v3 - 90) = 0;
  unint64_t v4 = sub_1001489E8();
  uint64_t v6 = *(void *)(v3 - 112);
  uint64_t v5 = *(void *)(v3 - 104);
  ((void (*)(ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t))KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:))( &type metadata for StoreKitInternalError.FeatureDisabledCodingKeys,  v3 - 90,  v5,  &type metadata for StoreKitInternalError.FeatureDisabledCodingKeys,  v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 120) + 8LL))(v6, v5);
}

unint64_t sub_100148740()
{
  unint64_t result = qword_10032CA28;
  if (!qword_10032CA28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E744, &type metadata for StoreKitInternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA28);
  }

  return result;
}

unint64_t sub_100148784()
{
  unint64_t result = qword_10032CA30;
  if (!qword_10032CA30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E6F4, &type metadata for StoreKitInternalError.AccountMissingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA30);
  }

  return result;
}

unint64_t sub_1001487C8()
{
  unint64_t result = qword_10032CA38;
  if (!qword_10032CA38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E6A4, &type metadata for StoreKitInternalError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA38);
  }

  return result;
}

unint64_t sub_10014880C()
{
  unint64_t result = qword_10032CA40;
  if (!qword_10032CA40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E654, &type metadata for StoreKitInternalError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA40);
  }

  return result;
}

unint64_t sub_100148850()
{
  unint64_t result = qword_10032CA48;
  if (!qword_10032CA48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E604, &type metadata for StoreKitInternalError.UnimplementedFlowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA48);
  }

  return result;
}

unint64_t sub_100148894()
{
  unint64_t result = qword_10032CA50;
  if (!qword_10032CA50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E5B4, &type metadata for StoreKitInternalError.PurchasesDisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA50);
  }

  return result;
}

unint64_t sub_1001488D8()
{
  unint64_t result = qword_10032CA58;
  if (!qword_10032CA58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E564, &type metadata for StoreKitInternalError.NoUIContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA58);
  }

  return result;
}

unint64_t sub_10014891C()
{
  unint64_t result = qword_10032CA60;
  if (!qword_10032CA60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E514, &type metadata for StoreKitInternalError.NotEntitledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA60);
  }

  return result;
}

unint64_t sub_100148960()
{
  unint64_t result = qword_10032CA68;
  if (!qword_10032CA68)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027E4C4,  &type metadata for StoreKitInternalError.NotAvailableInStorefrontCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA68);
  }

  return result;
}

unint64_t sub_1001489A4()
{
  unint64_t result = qword_10032CA70;
  if (!qword_10032CA70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E474, &type metadata for StoreKitInternalError.InvalidAppCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA70);
  }

  return result;
}

unint64_t sub_1001489E8()
{
  unint64_t result = qword_10032CA78;
  if (!qword_10032CA78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E424, &type metadata for StoreKitInternalError.FeatureDisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA78);
  }

  return result;
}

uint64_t StoreKitInternalError.init(from:)(void *a1)
{
  return sub_10014914C(a1);
}

uint64_t sub_100148A40@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10014914C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_100148A68(void *a1)
{
}

uint64_t StoreKitServerError.rawValue.getter(char a1)
{
  return qword_10027E798[a1];
}

BOOL sub_100148A98(char *a1, char *a2)
{
  return qword_10027E798[*a1] == qword_10027E798[*a2];
}

Swift::Int sub_100148ABC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10027E798[v1]);
  return Hasher._finalize()();
}

void sub_100148B08()
{
}

Swift::Int sub_100148B3C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10027E798[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100148B84@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s15StoreKit_Shared0aB11ServerErrorO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100148BAC(void *a1@<X8>)
{
  *a1 = qword_10027E798[*v1];
}

uint64_t sub_100148BC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014A5D4();
  unint64_t v5 = sub_10014A618();
  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t sub_100148C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10014A5D4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100148C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10014A5D4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100148CB0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4465727574616566LL && a2 == 0xEF64656C62617369LL)
  {
    unint64_t v5 = 0xEF64656C62617369LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4465727574616566LL, 0xEF64656C62617369LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4164696C61766E69LL && a2 == 0xEA00000000007070LL)
  {
    unint64_t v7 = 0xEA00000000007070LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164696C61766E69LL, 0xEA00000000007070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x80000001002A5E80LL)
  {
    unint64_t v8 = 0x80000001002A5E80LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x80000001002A5E80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x7469746E45746F6ELL && a2 == 0xEB0000000064656CLL)
  {
    unint64_t v9 = 0xEB0000000064656CLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469746E45746F6ELL, 0xEB0000000064656CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x746E6F4349556F6ELL && a2 == 0xEB00000000747865LL)
  {
    unint64_t v10 = 0xEB00000000747865LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E6F4349556F6ELL, 0xEB00000000747865LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v11 = 0x80000001002A5EA0LL;
    if (a2 == 0x80000001002A5EA0LL) {
      goto LABEL_37;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001002A5EA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v12 = 0x80000001002A5EC0LL;
    if (a2 == 0x80000001002A5EC0LL) {
      goto LABEL_42;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001002A5EC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if (a1 == 0x6E776F6E6B6E75LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v13 = 0xE700000000000000LL;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E776F6E6B6E75LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_48;
  }

  if (a1 == 0x636E614372657375LL && a2 == 0xED000064656C6C65LL)
  {
    unint64_t v14 = 0xED000064656C6C65LL;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E614372657375LL, 0xED000064656C6C65LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_54;
  }

  if (a1 == 0x4D746E756F636361LL && a2 == 0xEE00676E69737369LL)
  {
    swift_bridgeObjectRelease(0xEE00676E69737369LL);
    return 9LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4D746E756F636361LL, 0xEE00676E69737369LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

uint64_t sub_10014914C(void *a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032CB58);
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  __chkstk_darwin(v2);
  int v65 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10007B1FC(&qword_10032CB60);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v69 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10007B1FC(&qword_10032CB68);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6);
  int v68 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = sub_10007B1FC(&qword_10032CB70);
  uint64_t v51 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v67 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10007B1FC(&qword_10032CB78);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  uint64_t v66 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = sub_10007B1FC(&qword_10032CB80);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v64 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = sub_10007B1FC(&qword_10032CB88);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  id v63 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = sub_10007B1FC(&qword_10032CB90);
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v62 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = sub_10007B1FC(&qword_10032CB98);
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unint64_t v61 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10007B1FC(&qword_10032CBA0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_10007B1FC(&qword_10032CBA8);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  uint64_t v70 = a1;
  sub_100085B44(a1, v23);
  unint64_t v25 = sub_100148740();
  uint64_t v26 = v71;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StoreKitInternalError.CodingKeys,  &type metadata for StoreKitInternalError.CodingKeys,  v25,  v23,  v24);
  if (!v26)
  {
    v41[3] = v18;
    v41[1] = v16;
    _OWORD v41[2] = v15;
    uint64_t v42 = v20;
    uint64_t v71 = v22;
    uint64_t v27 = KeyedDecodingContainer.allKeys.getter(v19);
    if (*(void *)(v27 + 16) == 1LL)
    {
      v41[0] = v27;
      __asm { BR              X9 }
    }

    uint64_t v28 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v28, &protocol witness table for DecodingError, 0LL, 0LL);
    id v30 = v29;
    sub_10007B1FC(&qword_10032CBB0);
    *id v30 = &type metadata for StoreKitInternalError;
    uint64_t v31 = v71;
    uint64_t v32 = KeyedDecodingContainer.codingPath.getter(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v32,  0xD00000000000002BLL,  0x80000001002A5EE0LL,  0LL);
    uint64_t v33 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v28 - 8) + 104LL))( v30,  enum case for DecodingError.typeMismatch(_:),  v28);
    swift_willThrow(v33, v34, v35, v36, v37, v38, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v19);
  }

  sub_10007B1A0(v70);
  return v19;
}

uint64_t _s15StoreKit_Shared0aB11ServerErrorO8rawValueACSgSi_tcfC_0(uint64_t a1)
{
  if (a1 <= 3503)
  {
    if (a1 > 2054)
    {
      switch(a1)
      {
        case 3027LL:
          return 9LL;
        case 3028LL:
        case 3029LL:
        case 3030LL:
        case 3031LL:
        case 3032LL:
        case 3033LL:
        case 3034LL:
        case 3035LL:
        case 3036LL:
        case 3037LL:
        case 3039LL:
        case 3040LL:
        case 3041LL:
        case 3042LL:
        case 3043LL:
        case 3044LL:
        case 3045LL:
        case 3046LL:
        case 3047LL:
        case 3048LL:
        case 3049LL:
        case 3050LL:
        case 3051LL:
        case 3052LL:
        case 3053LL:
        case 3054LL:
        case 3055LL:
        case 3056LL:
        case 3057LL:
        case 3058LL:
          return 26LL;
        case 3038LL:
          return 10LL;
        case 3059LL:
          return 11LL;
        case 3060LL:
          return 12LL;
        default:
          if (a1 == 2055)
          {
            uint64_t result = 7LL;
          }

          else
          {
            if (a1 != 3004) {
              return 26LL;
            }
            uint64_t result = 8LL;
          }

          break;
      }
    }

    else
    {
      uint64_t v1 = a1 - 1001;
      uint64_t result = 1LL;
      switch(v1)
      {
        case 0LL:
          uint64_t result = 0LL;
          break;
        case 2LL:
          return result;
        case 3LL:
          uint64_t result = 2LL;
          break;
        case 4LL:
          uint64_t result = 3LL;
          break;
        case 5LL:
          uint64_t result = 4LL;
          break;
        default:
          return 26LL;
      }
    }

    return result;
  }

  if (a1 <= 3899)
  {
    if (a1 <= 3602)
    {
      if (a1 == 3504) {
        return 13LL;
      }
      if (a1 == 3513) {
        return 14LL;
      }
    }

    else
    {
      switch(a1)
      {
        case 3603LL:
          return 15LL;
        case 3604LL:
          return 16LL;
        case 3705LL:
          return 17LL;
      }
    }

    return 26LL;
  }

  if (a1 > 500316)
  {
    switch(a1)
    {
      case 500317LL:
        return 23LL;
      case 500328LL:
        return 24LL;
      case 4000029LL:
        return 25LL;
    }

    return 26LL;
  }

  switch(a1)
  {
    case 3900LL:
      uint64_t result = 18LL;
      break;
    case 3901LL:
      uint64_t result = 19LL;
      break;
    case 3902LL:
      uint64_t result = 20LL;
      break;
    case 3903LL:
      uint64_t result = 21LL;
      break;
    case 3904LL:
      uint64_t result = 22LL;
      break;
    default:
      return 26LL;
  }

  return result;
}

unint64_t sub_100149B60()
{
  unint64_t result = qword_10032CA80;
  if (!qword_10032CA80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StoreKitInternalError,  &type metadata for StoreKitInternalError);
    atomic_store(result, (unint64_t *)&qword_10032CA80);
  }

  return result;
}

unint64_t sub_100149BA8()
{
  unint64_t result = qword_10032CA88;
  if (!qword_10032CA88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StoreKitServerError,  &type metadata for StoreKitServerError);
    atomic_store(result, (unint64_t *)&qword_10032CA88);
  }

  return result;
}

ValueMetadata *type metadata accessor for StoreKitInternalError()
{
  return &type metadata for StoreKitInternalError;
}

uint64_t getEnumTagSinglePayload for StoreKitServerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }

uint64_t storeEnumTagSinglePayload for StoreKitServerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE6) {
    return ((uint64_t (*)(void))((char *)&loc_100149CE0 + 4 * byte_10027DC70[v4]))();
  }
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_100149D14 + 4 * byte_10027DC6B[v4]))();
}

uint64_t sub_100149D14(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149D1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100149D24LL);
  }
  return result;
}

uint64_t sub_100149D30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100149D38LL);
  }
  *(_BYTE *)unint64_t result = a2 + 25;
  return result;
}

uint64_t sub_100149D3C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149D44(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StoreKitServerError()
{
  return &type metadata for StoreKitServerError;
}

uint64_t _s15StoreKit_Shared21StoreKitInternalErrorOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

uint64_t _s15StoreKit_Shared21StoreKitInternalErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_100149E3C + 4 * byte_10027DC7A[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100149E70 + 4 * byte_10027DC75[v4]))();
}

uint64_t sub_100149E70(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149E78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100149E80LL);
  }
  return result;
}

uint64_t sub_100149E8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100149E94LL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_100149E98(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100149EA0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.CodingKeys()
{
  return &type metadata for StoreKitInternalError.CodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.FeatureDisabledCodingKeys()
{
  return &type metadata for StoreKitInternalError.FeatureDisabledCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.InvalidAppCodingKeys()
{
  return &type metadata for StoreKitInternalError.InvalidAppCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.NotAvailableInStorefrontCodingKeys()
{
  return &type metadata for StoreKitInternalError.NotAvailableInStorefrontCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.NotEntitledCodingKeys()
{
  return &type metadata for StoreKitInternalError.NotEntitledCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.NoUIContextCodingKeys()
{
  return &type metadata for StoreKitInternalError.NoUIContextCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.PurchasesDisabledCodingKeys()
{
  return &type metadata for StoreKitInternalError.PurchasesDisabledCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.UnimplementedFlowCodingKeys()
{
  return &type metadata for StoreKitInternalError.UnimplementedFlowCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.UnknownCodingKeys()
{
  return &type metadata for StoreKitInternalError.UnknownCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.UserCancelledCodingKeys()
{
  return &type metadata for StoreKitInternalError.UserCancelledCodingKeys;
}

ValueMetadata *type metadata accessor for StoreKitInternalError.AccountMissingCodingKeys()
{
  return &type metadata for StoreKitInternalError.AccountMissingCodingKeys;
}

unint64_t sub_100149F60()
{
  unint64_t result = qword_10032CA90;
  if (!qword_10032CA90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E3FC, &type metadata for StoreKitInternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA90);
  }

  return result;
}

unint64_t sub_100149FA8()
{
  unint64_t result = qword_10032CA98;
  if (!qword_10032CA98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E31C, &type metadata for StoreKitInternalError.FeatureDisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CA98);
  }

  return result;
}

unint64_t sub_100149FF0()
{
  unint64_t result = qword_10032CAA0;
  if (!qword_10032CAA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E344, &type metadata for StoreKitInternalError.FeatureDisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAA0);
  }

  return result;
}

unint64_t sub_10014A038()
{
  unint64_t result = qword_10032CAA8;
  if (!qword_10032CAA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E2CC, &type metadata for StoreKitInternalError.InvalidAppCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAA8);
  }

  return result;
}

unint64_t sub_10014A080()
{
  unint64_t result = qword_10032CAB0;
  if (!qword_10032CAB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E2F4, &type metadata for StoreKitInternalError.InvalidAppCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAB0);
  }

  return result;
}

unint64_t sub_10014A0C8()
{
  unint64_t result = qword_10032CAB8;
  if (!qword_10032CAB8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027E27C,  &type metadata for StoreKitInternalError.NotAvailableInStorefrontCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAB8);
  }

  return result;
}

unint64_t sub_10014A110()
{
  unint64_t result = qword_10032CAC0;
  if (!qword_10032CAC0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027E2A4,  &type metadata for StoreKitInternalError.NotAvailableInStorefrontCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAC0);
  }

  return result;
}

unint64_t sub_10014A158()
{
  unint64_t result = qword_10032CAC8;
  if (!qword_10032CAC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E22C, &type metadata for StoreKitInternalError.NotEntitledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAC8);
  }

  return result;
}

unint64_t sub_10014A1A0()
{
  unint64_t result = qword_10032CAD0;
  if (!qword_10032CAD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E254, &type metadata for StoreKitInternalError.NotEntitledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAD0);
  }

  return result;
}

unint64_t sub_10014A1E8()
{
  unint64_t result = qword_10032CAD8;
  if (!qword_10032CAD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E1DC, &type metadata for StoreKitInternalError.NoUIContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAD8);
  }

  return result;
}

unint64_t sub_10014A230()
{
  unint64_t result = qword_10032CAE0;
  if (!qword_10032CAE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E204, &type metadata for StoreKitInternalError.NoUIContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAE0);
  }

  return result;
}

unint64_t sub_10014A278()
{
  unint64_t result = qword_10032CAE8;
  if (!qword_10032CAE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E18C, &type metadata for StoreKitInternalError.PurchasesDisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAE8);
  }

  return result;
}

unint64_t sub_10014A2C0()
{
  unint64_t result = qword_10032CAF0;
  if (!qword_10032CAF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E1B4, &type metadata for StoreKitInternalError.PurchasesDisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAF0);
  }

  return result;
}

unint64_t sub_10014A308()
{
  unint64_t result = qword_10032CAF8;
  if (!qword_10032CAF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E13C, &type metadata for StoreKitInternalError.UnimplementedFlowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CAF8);
  }

  return result;
}

unint64_t sub_10014A350()
{
  unint64_t result = qword_10032CB00;
  if (!qword_10032CB00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E164, &type metadata for StoreKitInternalError.UnimplementedFlowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB00);
  }

  return result;
}

unint64_t sub_10014A398()
{
  unint64_t result = qword_10032CB08;
  if (!qword_10032CB08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E0EC, &type metadata for StoreKitInternalError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB08);
  }

  return result;
}

unint64_t sub_10014A3E0()
{
  unint64_t result = qword_10032CB10;
  if (!qword_10032CB10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E114, &type metadata for StoreKitInternalError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB10);
  }

  return result;
}

unint64_t sub_10014A428()
{
  unint64_t result = qword_10032CB18;
  if (!qword_10032CB18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E09C, &type metadata for StoreKitInternalError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB18);
  }

  return result;
}

unint64_t sub_10014A470()
{
  unint64_t result = qword_10032CB20;
  if (!qword_10032CB20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E0C4, &type metadata for StoreKitInternalError.UserCancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB20);
  }

  return result;
}

unint64_t sub_10014A4B8()
{
  unint64_t result = qword_10032CB28;
  if (!qword_10032CB28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E04C, &type metadata for StoreKitInternalError.AccountMissingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB28);
  }

  return result;
}

unint64_t sub_10014A500()
{
  unint64_t result = qword_10032CB30;
  if (!qword_10032CB30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E074, &type metadata for StoreKitInternalError.AccountMissingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB30);
  }

  return result;
}

unint64_t sub_10014A548()
{
  unint64_t result = qword_10032CB38;
  if (!qword_10032CB38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E36C, &type metadata for StoreKitInternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB38);
  }

  return result;
}

unint64_t sub_10014A590()
{
  unint64_t result = qword_10032CB40;
  if (!qword_10032CB40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027E394, &type metadata for StoreKitInternalError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CB40);
  }

  return result;
}

unint64_t sub_10014A5D4()
{
  unint64_t result = qword_10032CB48;
  if (!qword_10032CB48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StoreKitServerError,  &type metadata for StoreKitServerError);
    atomic_store(result, (unint64_t *)&qword_10032CB48);
  }

  return result;
}

unint64_t sub_10014A618()
{
  unint64_t result = qword_10032CB50;
  if (!qword_10032CB50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10032CB50);
  }

  return result;
}

char *sub_10014A65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = Substring.distance(from:to:)(a1, a2, a1, a2, a3, a4);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v10 = v8;
    v29[0] = _swiftEmptyArrayStorage;
    unint64_t result = sub_100150FDC(0LL, v8 & ~(v8 >> 63), 0);
    if ((v10 & 0x8000000000000000LL) == 0)
    {
      uint64_t v9 = (void *)v29[0];
      uint64_t v12 = a1;
      uint64_t v28 = v4;
      while (1)
      {
        uint64_t v14 = Substring.subscript.getter(v12, a1, a2, a3, v4);
        unint64_t v15 = v13;
        if (v14 == 45 && v13 == 0xE100000000000000LL)
        {
          unint64_t v15 = 0xE100000000000000LL;
          swift_bridgeObjectRelease();
          uint64_t v14 = 43LL;
        }

        else if ((_stringCompareWithSmolCheck(_:_:expecting:)(45LL, 0xE100000000000000LL, v14, v13, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          unint64_t v15 = 0xE100000000000000LL;
          uint64_t v14 = 43LL;
        }

        else
        {
          if (v14 == 95 && v15 == 0xE100000000000000LL)
          {
            unint64_t v15 = 0xE100000000000000LL;
            swift_bridgeObjectRelease();
LABEL_14:
            uint64_t v14 = 47LL;
            goto LABEL_15;
          }

          if ((_stringCompareWithSmolCheck(_:_:expecting:)(95LL, 0xE100000000000000LL, v14, v15, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            unint64_t v15 = 0xE100000000000000LL;
            goto LABEL_14;
          }
        }

Swift::String __swiftcall StringProtocol.base64URLEncodedToBase64()()
{
  uint64_t v15 = sub_10014AA70( (void (*)(char *, char *))sub_10014A9B8,  0LL,  v0,  (uint64_t)&type metadata for Character,  (uint64_t)&type metadata for Never,  *(void *)(*(void *)(v1 + 8) + 8LL),  (uint64_t)&protocol witness table for Never,  v2);
  uint64_t v3 = sub_10007B1FC(&qword_10032CBB8);
  unint64_t v4 = sub_10014AD60();
  uint64_t v5 = String.init<A>(_:)(&v15, v3, v4);
  BOOL v7 = v6;
  uint64_t v15 = v5;
  unint64_t v16 = v6;
  swift_bridgeObjectRetain(v6);
  uint64_t v8 = String.count.getter(v5, v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 & 3;
  if (v8 <= 0) {
    uint64_t v9 = -(-v8 & 3);
  }
  if (v9)
  {
    v10._uint64_t countAndFlagsBits = 61LL;
    v10._object = (void *)0xE100000000000000LL;
    Swift::String v11 = String.init(repeating:count:)(v10, 4 - v9);
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }

  uint64_t v12 = v15;
  unint64_t v13 = v16;
  result._object = v13;
  result._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t sub_10014A9B8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  BOOL v5 = *(void *)result == 45LL && v3 == 0xE100000000000000LL;
  if (v5
    || (Swift::String result = _stringCompareWithSmolCheck(_:_:expecting:)(45LL, 0xE100000000000000LL, v4, v3, 0LL), (result & 1) != 0))
  {
    *a2 = 43LL;
    a2[1] = 0xE100000000000000LL;
  }

  else
  {
    BOOL v6 = v4 == 95 && v3 == 0xE100000000000000LL;
    if (v6
      || (Swift::String result = _stringCompareWithSmolCheck(_:_:expecting:)(95LL, 0xE100000000000000LL, v4, v3, 0LL),
          (result & 1) != 0))
    {
      *a2 = 47LL;
      a2[1] = 0xE100000000000000LL;
    }

    else
    {
      *a2 = v4;
      a2[1] = v3;
      return swift_bridgeObjectRetain(v3);
    }
  }

  return result;
}

uint64_t sub_10014AA70( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a5;
  uint64_t v40 = a8;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v38 = *(void *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v49 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(v13 + 8));
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v18 = (char *)&v38 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v41 = *(void *)(v21 - 8);
  uint64_t v42 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v38 - v22;
  uint64_t v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24) {
    return static Array._allocateUninitialized(_:)(0LL, a4);
  }
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v25 = v8;
  uint64_t v26 = a4;
  Swift::Int v27 = v24;
  uint64_t v53 = ContiguousArray.init()(v26);
  uint64_t v43 = type metadata accessor for ContiguousArray(0LL, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  uint64_t v46 = v25;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v27 & 0x8000000000000000LL) == 0)
  {
    Swift::Int v29 = v27;
    uint64_t v44 = v20;
    while (v29)
    {
      Swift::Int v50 = v29;
      id v30 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v52, v23, a3, a6);
      uint64_t v31 = *(void (**)(char *))(v15 + 16);
      uint64_t v32 = v15;
      uint64_t v33 = v45;
      v31(v18);
      v30(v52, 0LL);
      uint64_t v34 = v23;
      uint64_t v35 = v18;
      uint64_t v36 = v44;
      uint64_t v37 = v51;
      v47(v35, v49);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        swift_release(v53);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v49, v39);
      }

      uint64_t v51 = 0LL;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v43);
      uint64_t result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      Swift::Int v29 = v50 - 1;
      uint64_t v15 = v32;
      uint64_t v18 = v35;
      uint64_t v23 = v34;
      if (v50 == 1)
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        return v53;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t sub_10014AD60()
{
  unint64_t result = qword_10032CBC0;
  if (!qword_10032CBC0)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032CBB8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10032CBC0);
  }

  return result;
}

uint64_t Data.init<A>(base64URLEncoded:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t countAndFlagsBits = StringProtocol.base64URLEncodedToBase64()()._countAndFlagsBits;
  uint64_t v6 = Data.init(base64Encoded:options:)(countAndFlagsBits);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  sub_1001198EC(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
  if (v8 >> 60 != 15) {
    sub_10009BE78(v6, v8);
  }
  return v6;
}

uint64_t LazyJWS.rawHeader.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[3]);
  return v1;
}

uint64_t LazyJWS.rawPayload.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t LazyJWS.rawSignature.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain(*(void *)(v0 + 88));
  return v1;
}

uint64_t LazyJWS.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10014B1D0((uint64_t)v5, a3);
}

uint64_t LazyJWS.payloadJSONString.getter()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  swift_bridgeObjectRetain(v7);
  unint64_t v8 = sub_10014A65C(v4, v5, v6, v7);
  uint64_t v9 = Data.init(base64Encoded:options:)(v8);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  sub_1001198EC(v9, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = 0LL;
  if (v11 >> 60 != 15)
  {
    uint64_t v13 = sub_10009BE78(v9, v11);
    static String.Encoding.utf8.getter(v13);
    uint64_t v12 = String.init(data:encoding:)(v9, v11, v3);
    sub_10009BE78(v9, v11);
  }

  return v12;
}

uint64_t sub_10014B04C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014B1D0((uint64_t)v4, a2);
}

uint64_t sub_10014B08C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10014B098@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  v22[0] = 46LL;
  v22[1] = 0xE100000000000000LL;
  uint64_t v21 = v22;
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = sub_100151350(3LL, 1, sub_10014B4A8, (uint64_t)v20, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  if (*((void *)v6 + 2) == 3LL)
  {
    uint64_t v18 = *((void *)v6 + 5);
    uint64_t v19 = *((void *)v6 + 4);
    uint64_t v7 = *((void *)v6 + 7);
    uint64_t v10 = *((void *)v6 + 11);
    uint64_t v16 = *((void *)v6 + 10);
    uint64_t v17 = *((void *)v6 + 6);
    uint64_t v8 = *((void *)v6 + 8);
    uint64_t v9 = *((void *)v6 + 9);
    uint64_t v11 = *((void *)v6 + 12);
    uint64_t v12 = *((void *)v6 + 13);
    uint64_t v13 = *((void *)v6 + 14);
    uint64_t v14 = *((void *)v6 + 15);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v14);
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v19;
  a3[1] = v18;
  a3[2] = v17;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = v9;
  a3[6] = v16;
  a3[7] = v10;
  a3[8] = v11;
  a3[9] = v12;
  a3[10] = v13;
  a3[11] = v14;
  return result;
}

uint64_t sub_10014B1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032CBC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for LazyJWS(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for LazyJWS(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for LazyJWS(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v6 = a2[7];
  uint64_t v7 = a1[7];
  a1[7] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  uint64_t v8 = a2[11];
  uint64_t v9 = a1[11];
  a1[11] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for LazyJWS(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for LazyJWS(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyJWS(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_1000DE51C(*(void *)(v0 + 200), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyJWS(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LazyJWS()
{
  return &type metadata for LazyJWS;
}

uint64_t sub_10014B4A8(uint64_t *a1)
{
  return sub_100151974(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_10014B4C4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000013LL;
  unint64_t v3 = 0x80000001002A5C50LL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000015LL;
    }
    else {
      unint64_t v5 = 0xD000000000000013LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000001002A5C70LL;
    }
    else {
      unint64_t v6 = 0x80000001002A5C90LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }

  else
  {
    unint64_t v5 = 0xD000000000000013LL;
    unint64_t v6 = 0x80000001002A5C50LL;
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }

  if (v7 == 1)
  {
    unint64_t v2 = 0xD000000000000015LL;
    unint64_t v3 = 0x80000001002A5C70LL;
  }

  else
  {
    unint64_t v3 = 0x80000001002A5C90LL;
  }

void sub_10014B5B8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10014B600(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10014B664 + 4 * byte_10027E8C4[a2]))(0x49746375646F7270LL);
}

uint64_t sub_10014B664(uint64_t a1)
{
  if (a1 == 0x49746375646F7270LL && v1 == 0xE900000000000044LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x49746375646F7270LL, 0xE900000000000044LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000044LL);
  return v2 & 1;
}

void sub_10014B70C(char *a1)
{
}

void sub_10014B718()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_10014B760()
{
  return Hasher._finalize()();
}

void sub_10014B7D0()
{
  __asm { BR              X10 }

uint64_t sub_10014B808(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE900000000000044LL);
}

void sub_10014B864()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_10014B8A8()
{
  return Hasher._finalize()();
}

unint64_t sub_10014B918@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10014D95C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014B944()
{
  return ((uint64_t (*)(void))((char *)sub_10014B970 + 4 * byte_10027E8D4[*v0]))();
}

void sub_10014B970(void *a1@<X8>)
{
  *a1 = 0x49746375646F7270LL;
  a1[1] = 0xE900000000000044LL;
}

void sub_10014B990(void *a1@<X8>)
{
  *a1 = 0x69666F725079656BLL;
  a1[1] = 0xEA0000000000656CLL;
}

void sub_10014B9B0(void *a1@<X8>)
{
  *a1 = 0x736D61726170LL;
  a1[1] = v1;
}

uint64_t sub_10014B9C4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014B9F0 + 4 * byte_10027E8D8[*v0]))( 0x79654B676F6CLL,  0xE600000000000000LL);
}

uint64_t sub_10014B9F0()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_10014BA0C()
{
  return 0x69666F725079656BLL;
}

uint64_t sub_10014BA28()
{
  return 0x736D61726170LL;
}

unint64_t sub_10014BA38@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10014D95C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10014BA5C(uint64_t a1)
{
  unint64_t v2 = sub_10014BD30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014BA84(uint64_t a1)
{
  unint64_t v2 = sub_10014BD30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ProductPageLookupRequest.ParameterRequest.parameters.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

void __swiftcall ProductPageLookupRequest.ParameterRequest.init(productID:logKey:keyProfile:parameters:)( StoreKit_Shared::ProductPageLookupRequest::ParameterRequest *__return_ptr retstr, Swift::String productID, Swift::String logKey, Swift::String keyProfile, Swift::OpaquePointer parameters)
{
  retstr->logKey = logKey;
  retstr->productID = productID;
  retstr->keyProfile = keyProfile;
  retstr->parameters = parameters;
}

uint64_t ProductPageLookupRequest.ParameterRequest.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032CBD0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v36[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v9);
  unint64_t v11 = sub_10014BD30();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys,  &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = v3[2];
  uint64_t v13 = v3[3];
  LOBYTE(v36[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v36, v5);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v14 = *v3;
  uint64_t v15 = v3[1];
  LOBYTE(v36[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v36, v5);
  uint64_t v16 = v3[4];
  uint64_t v17 = v3[5];
  LOBYTE(v36[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v36, v5);
  uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v36[0] = 0LL;
  id v21 = [v19 dataWithJSONObject:isa options:0 error:v36];

  id v22 = v36[0];
  if (!v21)
  {
    Swift::Int v27 = v22;
    _convertNSErrorToError(_:)(v22);

    swift_willThrow(v28, v29, v30, v31, v32, v33, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v23 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v25 = v24;

  v36[0] = v23;
  v36[1] = v25;
  HIBYTE(v35) = 3;
  unint64_t v26 = sub_1001435F8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v36, (char *)&v35 + 7, v5, &type metadata for Data, v26);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_10007F054((uint64_t)v23, (unint64_t)v25);
}

unint64_t sub_10014BD30()
{
  unint64_t result = qword_10032CBD8;
  if (!qword_10032CBD8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027EBFC,  &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CBD8);
  }

  return result;
}

double ProductPageLookupRequest.ParameterRequest.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_10014BDC0(void *a1)
{
  return ProductPageLookupRequest.ParameterRequest.encode(to:)(a1);
}

uint64_t ProductPageLookupRequest.URLRequest.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ProductPageLookupRequest.URLRequest(0LL) + 28);
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t ProductPageLookupRequest.URLRequest.init(productID:url:keyProfile:logKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  a8[2] = a6;
  a8[3] = a7;
  a8[4] = a4;
  a8[5] = a5;
  uint64_t v12 = (char *)a8 + *(int *)(type metadata accessor for ProductPageLookupRequest.URLRequest(0LL) + 28);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a3, v13);
  *a8 = a1;
  a8[1] = a2;
  return result;
}

uint64_t ProductPageLookupRequest.URLRequest.parameters.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v51 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10007B1FC(&qword_10032CBE0);
  __chkstk_darwin(v5);
  __int128 v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (void *)sub_10014C388((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = type metadata accessor for ProductPageLookupRequest.URLRequest(0LL);
  URLComponents.init(url:resolvingAgainstBaseURL:)((char *)v1 + *(int *)(v9 + 28), 1LL);
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1LL, v10) != 1)
  {
    uint64_t v39 = URLComponents.queryItems.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
    if (v39) {
      uint64_t v12 = (void *)v39;
    }
    else {
      uint64_t v12 = _swiftEmptyArrayStorage;
    }
    uint64_t v13 = v12[2];
    if (v13) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease(v12);
LABEL_32:
    *(void *)&__int128 v54 = 25705LL;
    *((void *)&v54 + 1) = 0xE200000000000000LL;
    AnyHashable.init<A>(_:)(&v54, &type metadata for String, &protocol witness table for String);
    if (v8[2] && (unint64_t v40 = sub_100132100((uint64_t)v56), (v41 & 1) != 0))
    {
      sub_10007B1C0(v8[7] + 32 * v40, (uint64_t)&v54);
    }

    else
    {
      __int128 v54 = 0u;
      __int128 v55 = 0u;
    }

    sub_100087388((uint64_t)v56);
    uint64_t v42 = *((void *)&v55 + 1);
    sub_100087418((uint64_t)&v54, &qword_10032C950);
    if (!v42)
    {
      *(void *)&__int128 v54 = 25705LL;
      *((void *)&v54 + 1) = 0xE200000000000000LL;
      AnyHashable.init<A>(_:)(&v54, &type metadata for String, &protocol witness table for String);
      uint64_t v43 = *v1;
      uint64_t v44 = v1[1];
      *((void *)&v55 + 1) = &type metadata for String;
      *(void *)&__int128 v54 = v43;
      *((void *)&v54 + 1) = v44;
      sub_1000853B0(&v54, v53);
      swift_bridgeObjectRetain(v44);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v52 = v8;
      sub_10014D488(v53, (uint64_t)v56, isUniquelyReferenced_nonNull_native);
      uint64_t v8 = v52;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100087388((uint64_t)v56);
    }

    return (uint64_t)v8;
  }

  sub_100087418((uint64_t)v7, &qword_10032CBE0);
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v13 = _swiftEmptyArrayStorage[2];
  if (!v13) {
    goto LABEL_31;
  }
LABEL_3:
  uint64_t v47 = v12;
  uint64_t v48 = v1;
  uint64_t v14 = (char *)v12 + ((*(unsigned __int8 *)(v51 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
  uint64_t v49 = *(void *)(v51 + 72);
  uint64_t v15 = &type metadata for String;
  Swift::Int v50 = *(uint64_t (**)(char *, char *, uint64_t))(v51 + 16);
  for (uint64_t i = v50(v4, v14, v2); ; uint64_t i = v50(v4, v14, v2))
  {
    *(void *)&__int128 v54 = URLQueryItem.name.getter(i);
    *((void *)&v54 + 1) = v18;
    uint64_t v19 = AnyHashable.init<A>(_:)(&v54, v15, &protocol witness table for String);
    uint64_t v20 = URLQueryItem.value.getter(v19);
    if (v21) {
      break;
    }
    swift_bridgeObjectRetain(v8);
    unint64_t v32 = sub_100132100((uint64_t)v56);
    char v34 = v33;
    swift_bridgeObjectRelease(v8);
    if ((v34 & 1) != 0)
    {
      char v35 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v53[0] = v8;
      if ((v35 & 1) == 0)
      {
        sub_10014D5C0();
        uint64_t v8 = *(void **)&v53[0];
      }

      sub_100087388(v8[6] + 40 * v32);
      sub_1000853B0((_OWORD *)(v8[7] + 32 * v32), &v54);
      sub_10014D2C0(v32, (uint64_t)v8);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      __int128 v54 = 0u;
      __int128 v55 = 0u;
    }

    sub_100087388((uint64_t)v56);
    sub_100087418((uint64_t)&v54, &qword_10032C950);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v51 + 8))(v4, v2);
    v14 += v49;
    if (!--v13)
    {
      swift_bridgeObjectRelease(v47);
      uint64_t v1 = v48;
      goto LABEL_32;
    }
  }

  id v22 = v15;
  *((void *)&v55 + 1) = v15;
  *(void *)&__int128 v54 = v20;
  *((void *)&v54 + 1) = v21;
  sub_1000853B0(&v54, v53);
  uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = v8;
  unint64_t v25 = sub_100132100((uint64_t)v56);
  uint64_t v26 = v8[2];
  BOOL v27 = (v24 & 1) == 0;
  uint64_t v28 = v26 + v27;
  if (!__OFADD__(v26, v27))
  {
    char v29 = v24;
    if (v8[3] < v28)
    {
      sub_10014CC88(v28, v23);
      unint64_t v30 = sub_100132100((uint64_t)v56);
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_41;
      }
      unint64_t v25 = v30;
      uint64_t v8 = v52;
      if ((v29 & 1) == 0) {
        goto LABEL_20;
      }
LABEL_4:
      uint64_t v17 = (void *)(v8[7] + 32 * v25);
      sub_10007B1A0(v17);
      sub_1000853B0(v53, v17);
LABEL_5:
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100087388((uint64_t)v56);
      uint64_t v15 = v22;
      goto LABEL_6;
    }

    if ((v23 & 1) != 0)
    {
      uint64_t v8 = v52;
      if ((v24 & 1) != 0) {
        goto LABEL_4;
      }
    }

    else
    {
      sub_10014D5C0();
      uint64_t v8 = v52;
      if ((v29 & 1) != 0) {
        goto LABEL_4;
      }
    }

unint64_t sub_10014C388(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10007B1FC(&qword_10032CCD8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10014EC88(v7, (uint64_t)v16);
    unint64_t result = sub_100132100((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_1000853B0(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10014C4B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10007B1FC(&qword_10032CCD0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_1001469D8(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    void v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t static ProductPageLookupRequest.URLRequest.productID(from:)()
{
  uint64_t v0 = type metadata accessor for CharacterSet(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v17 - v6;
  v17[0] = URL.lastPathComponent.getter(v5);
  v17[1] = v8;
  uint64_t v9 = static CharacterSet.decimalDigits.getter(v17[0], v8);
  CharacterSet.inverted.getter(v9);
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v7, v0);
  unint64_t v11 = sub_10014DFBC();
  uint64_t v12 = StringProtocol.trimmingCharacters(in:)(v4, &type metadata for String, v11);
  unint64_t v14 = v13;
  v10(v4, v0);
  swift_bridgeObjectRelease();
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v12;
}

uint64_t sub_10014C6EC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014C720 + 4 * byte_10027E8DC[*v0]))( 0x49746375646F7270LL,  0xE900000000000044LL);
}

uint64_t sub_10014C720()
{
  return 0x79654B676F6CLL;
}

uint64_t sub_10014C734()
{
  return 0x69666F725079656BLL;
}

uint64_t sub_10014C750()
{
  return 7107189LL;
}

uint64_t sub_10014C760@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10014EAD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014C784(uint64_t a1)
{
  unint64_t v2 = sub_10014E000();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014C7AC(uint64_t a1)
{
  unint64_t v2 = sub_10014E000();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ProductPageLookupRequest.URLRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032CBF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v9);
  unint64_t v11 = sub_10014E000();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys,  &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v26, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v25, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v24, v5);
    __int128 v18 = (char *)v3 + *(int *)(type metadata accessor for ProductPageLookupRequest.URLRequest(0LL) + 28);
    char v23 = 3;
    uint64_t v19 = type metadata accessor for URL(0LL);
    uint64_t v20 = sub_10014E044(&qword_10032C728, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v23, v5, v19, v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ProductPageLookupRequest.URLRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = type metadata accessor for URL(0LL);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v28 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_10007B1FC(&qword_10032CC00);
  uint64_t v4 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ProductPageLookupRequest.URLRequest(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100085B44(a1, v10);
  unint64_t v12 = sub_10014E000();
  uint64_t v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys,  &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys,  v12,  v10,  v11);
  if (v13) {
    return sub_10007B1A0(a1);
  }
  uint64_t v30 = v7;
  uint64_t v14 = v4;
  uint64_t v15 = v28;
  uint64_t v16 = v29;
  char v34 = 0;
  uint64_t v17 = (uint64_t)v9;
  *uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v29);
  v9[1] = v18;
  char v33 = 1;
  __int128 v9[2] = KeyedDecodingContainer.decode(_:forKey:)(&v33, v16);
  v9[3] = v19;
  char v32 = 2;
  v9[4] = KeyedDecodingContainer.decode(_:forKey:)(&v32, v16);
  v9[5] = v20;
  char v31 = 3;
  uint64_t v21 = sub_10014E044(&qword_10032C6F8, (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v22 = v15;
  uint64_t v23 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, &v31, v16, v27, v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v17 + *(int *)(v30 + 28), v22, v23);
  sub_10014E084(v17, v26);
  sub_10007B1A0(a1);
  return sub_10014E0C8(v17);
}

uint64_t sub_10014CC60@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ProductPageLookupRequest.URLRequest.init(from:)(a1, a2);
}

uint64_t sub_10014CC74(void *a1)
{
  return ProductPageLookupRequest.URLRequest.encode(to:)(a1);
}

uint64_t sub_10014CC88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10007B1FC(&qword_10032CCD8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

Swift::Int sub_10014CF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10007B1FC(&qword_10032CCD0);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  __int128 v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    int64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

LABEL_33:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    unint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    Swift::Int result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        BOOL v30 = v17 == v29;
        if (v17 == v29) {
          unint64_t v17 = 0LL;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = 16 * v18;
    unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    *unint64_t v20 = v35;
    v20[1] = v34;
    unint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    *unint64_t v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  int64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *int64_t v25 = -1LL << v39;
  }
  *(void *)(v5 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
LABEL_43:
  Swift::Int result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

unint64_t sub_10014D2C0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_10009BEC0(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        Swift::Int result = sub_100087388((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            unint64_t v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              __int128 v17 = *v16;
              __int128 v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v18;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              __int128 v9 = v21[1];
              *unint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  uint64_t *v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

_OWORD *sub_10014D488(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100132100(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        __int128 v17 = (void *)(v16[7] + 32 * v10);
        sub_10007B1A0(v17);
        return sub_1000853B0(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10014D5C0();
      goto LABEL_7;
    }

    sub_10014CC88(v13, a3 & 1);
    unint64_t v19 = sub_100132100(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      unint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10009BEC0(a2, (uint64_t)v21);
      return sub_100133B04(v10, (uint64_t)v21, a1, v16);
    }
  }

  Swift::Int result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void *sub_10014D5C0()
{
  uint64_t v1 = v0;
  sub_10007B1FC(&qword_10032CCD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void sub_10014D7A4()
{
  uint64_t v1 = v0;
  sub_10007B1FC(&qword_10032CCD0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

unint64_t sub_10014D95C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002EF780, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10014D9A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v75 = a2;
  uint64_t v3 = type metadata accessor for DecodingError.Context(0LL);
  uint64_t v76 = *(void *)(v3 - 8);
  uint64_t v77 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10007B1FC(&qword_10032CCE8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v11);
  unint64_t v12 = sub_10014BD30();
  int64_t v13 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys,  &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys,  v12,  v11,  v10);
  if (v13) {
    return sub_10007B1A0(a1);
  }
  unint64_t v74 = v12;
  uint64_t v78 = v5;
  unint64_t v15 = a1;
  uint64_t v16 = v77;
  uint64_t v17 = v7;
  LOBYTE(v80) = 0;
  uint64_t v18 = v9;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v80, v6);
  uint64_t v20 = v6;
  uint64_t v22 = v21;
  uint64_t v71 = v19;
  LOBYTE(v80) = 1;
  swift_bridgeObjectRetain(v21);
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)(&v80, v6);
  uint64_t v72 = v24;
  uint64_t v73 = v15;
  uint64_t v68 = v23;
  LOBYTE(v80) = 2;
  swift_bridgeObjectRetain(v24);
  uint64_t v69 = 0LL;
  uint64_t v67 = KeyedDecodingContainer.decode(_:forKey:)(&v80, v6);
  LOBYTE(v79) = 3;
  uint64_t v26 = v25;
  unint64_t v27 = sub_100143A9C();
  uint64_t v70 = v26;
  swift_bridgeObjectRetain(v26);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v79, v6, &type metadata for Data, v27);
  uint64_t v66 = v18;
  BOOL v30 = v80;
  unint64_t v29 = v81;
  uint64_t v31 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  unint64_t v65 = v29;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v80 = 0LL;
  id v33 = [v31 JSONObjectWithData:isa options:0 error:&v80];

  if (v33)
  {
    uint64_t v34 = v80;
    _bridgeAnyObjectToAny(_:)(&v80);
    swift_unknownObjectRelease(v33);
    uint64_t v35 = sub_10007B1FC(&qword_10032CCF0);
    char v36 = swift_dynamicCast(&v79, &v80, (char *)&type metadata for Any + 8, v35, 6LL);
    uint64_t v37 = v72;
    if ((v36 & 1) != 0)
    {
      sub_10007F054((uint64_t)v30, v65);
      uint64_t v38 = v79;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v66, v20);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10007B1A0(v73);
      swift_bridgeObjectRelease();
      uint64_t v39 = v70;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      __int128 v40 = v75;
      *id v75 = v71;
      v40[1] = v22;
      _OWORD v40[2] = v68;
      v40[3] = v37;
      v40[4] = v67;
      v40[5] = v39;
      v40[6] = v38;
      return result;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = sub_10007B1FC(&qword_10032C9C8);
    uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
    id v75 = v30;
    uint64_t v52 = v51;
    *(_OWORD *)(v51 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027A600;
    unint64_t v53 = v74;
    *(void *)(v51 + 56) = &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys;
    *(void *)(v51 + 64) = v53;
    *(_BYTE *)(v51 + 32) = 3;
    uint64_t v80 = 0LL;
    unint64_t v81 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v52,  0xD00000000000003FLL,  0x80000001002A5F10LL,  0LL);
    uint64_t v54 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v54, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v56 = v55;
    uint64_t v57 = v76;
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v55, v78, v16);
    uint64_t v58 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v54 - 8) + 104LL))( v56,  enum case for DecodingError.dataCorrupted(_:),  v54);
    swift_willThrow(v58, v59, v60, v61, v62, v63, v64);
    sub_10007F054((uint64_t)v75, v65);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v78, v16);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v66, v20);
    uint64_t v28 = v69;
  }

  else
  {
    int64_t v41 = v80;
    uint64_t v42 = v80;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v41);

    swift_willThrow(v43, v44, v45, v46, v47, v48, v49);
    sub_10007F054((uint64_t)v30, v65);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v66, v20);
    uint64_t v28 = v69;
    unint64_t v15 = v73;
  }

  sub_10007B1A0(v15);
  swift_bridgeObjectRelease();
  if (!v28) {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ProductPageLookupRequest.URLRequest(uint64_t a1)
{
  uint64_t result = qword_10032CC60;
  if (!qword_10032CC60) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProductPageLookupRequest.URLRequest);
  }
  return result;
}

unint64_t sub_10014DFBC()
{
  unint64_t result = qword_10032CBE8;
  if (!qword_10032CBE8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10032CBE8);
  }

  return result;
}

unint64_t sub_10014E000()
{
  unint64_t result = qword_10032CBF8;
  if (!qword_10032CBF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EBAC, &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CBF8);
  }

  return result;
}

uint64_t sub_10014E044(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for URL(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10014E084(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProductPageLookupRequest.URLRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014E0C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ProductPageLookupRequest.URLRequest(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for ProductPageLookupRequest()
{
  return &type metadata for ProductPageLookupRequest;
}

uint64_t destroy for ProductPageLookupRequest.ParameterRequest(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

void *initializeWithCopy for ProductPageLookupRequest.ParameterRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for ProductPageLookupRequest.ParameterRequest(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for ProductPageLookupRequest.ParameterRequest(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProductPageLookupRequest.ParameterRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_1000DE51C(*(void *)(v0 + 200), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProductPageLookupRequest.ParameterRequest( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + sub_10012A084(*(void *)(v0 + 88) + OBJC_IVAR____TtC9storekitd17StorefrontManager_productionStorefront, v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ProductPageLookupRequest.ParameterRequest()
{
  return &type metadata for ProductPageLookupRequest.ParameterRequest;
}

uint64_t *initializeBufferWithCopyOfBuffer for ProductPageLookupRequest.URLRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v13);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v11 = type metadata accessor for URL(0LL);
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v10, v9, v11);
  }

  return v3;
}

uint64_t destroy for ProductPageLookupRequest.URLRequest(void *a1, uint64_t a2)
{
  int v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *initializeWithCopy for ProductPageLookupRequest.URLRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v9, v8, v10);
  return a1;
}

void *assignWithCopy for ProductPageLookupRequest.URLRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for ProductPageLookupRequest.URLRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

void *assignWithTake for ProductPageLookupRequest.URLRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProductPageLookupRequest.URLRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014E6C8);
}

uint64_t sub_10014E6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for ProductPageLookupRequest.URLRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014E750);
}

uint64_t sub_10014E750(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10014E7C4(uint64_t a1)
{
  v4[0] = &unk_10027E9E0;
  v4[1] = &unk_10027E9E0;
  void v4[2] = &unk_10027E9E0;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for ProductPageLookupRequest.URLRequest.CodingKeys()
{
  return &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys;
}

uint64_t _s15StoreKit_Shared24ProductPageLookupRequestV10URLRequestV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10014E8A0 + 4 * byte_10027E8E5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10014E8D4 + 4 * byte_10027E8E0[v4]))();
}

uint64_t sub_10014E8D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E8DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014E8E4LL);
  }
  return result;
}

uint64_t sub_10014E8F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014E8F8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10014E8FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014E904(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProductPageLookupRequest.ParameterRequest.CodingKeys()
{
  return &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys;
}

unint64_t sub_10014E924()
{
  unint64_t result = qword_10032CCA0;
  if (!qword_10032CCA0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027EACC,  &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CCA0);
  }

  return result;
}

unint64_t sub_10014E96C()
{
  unint64_t result = qword_10032CCA8;
  if (!qword_10032CCA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EB84, &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CCA8);
  }

  return result;
}

unint64_t sub_10014E9B4()
{
  unint64_t result = qword_10032CCB0;
  if (!qword_10032CCB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EAF4, &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CCB0);
  }

  return result;
}

unint64_t sub_10014E9FC()
{
  unint64_t result = qword_10032CCB8;
  if (!qword_10032CCB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EB1C, &type metadata for ProductPageLookupRequest.URLRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CCB8);
  }

  return result;
}

unint64_t sub_10014EA44()
{
  unint64_t result = qword_10032CCC0;
  if (!qword_10032CCC0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027EA04,  &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CCC0);
  }

  return result;
}

unint64_t sub_10014EA8C()
{
  unint64_t result = qword_10032CCC8;
  if (!qword_10032CCC8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10027EA2C,  &type metadata for ProductPageLookupRequest.ParameterRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CCC8);
  }

  return result;
}

uint64_t sub_10014EAD0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v5 = 0xE900000000000044LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x79654B676F6CLL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79654B676F6CLL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x69666F725079656BLL && a2 == 0xEA0000000000656CLL)
  {
    unint64_t v8 = 0xEA0000000000656CLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69666F725079656BLL, 0xEA0000000000656CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 7107189 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(7107189LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10014EC88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032CCE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t ProductResponse.Key.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014ED08 + 4 * byte_10027EC4C[a1]))( 0x6B726F77747261LL,  0xE700000000000000LL);
}

uint64_t sub_10014ED08()
{
  return 0x7475626972747461LL;
}

uint64_t sub_10014ED24()
{
  return 0x79636E6572727563LL;
}

uint64_t sub_10014ED44()
{
  return 0x7470697263736564LL;
}

uint64_t sub_10014ED64()
{
  return 0x746E756F63736964LL;
}

uint64_t sub_10014ED84()
{
  return 1701667182LL;
}

uint64_t sub_10014ED94()
{
  return 0x726F466563697270LL;
}

uint64_t sub_10014EDB8()
{
  return 0x6F43646574736F68LL;
}

uint64_t sub_10014EDDC()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_10014EDF0()
{
  return 1702521203LL;
}

unint64_t sub_10014EE00()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10014EF68()
{
  return 1701869940LL;
}

uint64_t sub_10014EF78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = ProductResponse.Key.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = ProductResponse.Key.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_10014F000()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5);
  uint64_t v2 = ProductResponse.Key.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10014F060(uint64_t a1)
{
  uint64_t v3 = ProductResponse.Key.rawValue.getter(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10014F0A0()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5);
  uint64_t v2 = ProductResponse.Key.rawValue.getter(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10014F0FC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s15StoreKit_Shared15ProductResponseV3KeyO8rawValueAESgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10014F128@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ProductResponse.Key.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ProductResponse.products.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

StoreKit_Shared::ProductResponse __swiftcall ProductResponse.init(products:serverCorrelationID:)( Swift::OpaquePointer products, Swift::String_optional serverCorrelationID)
{
  uint64_t countAndFlagsBits = serverCorrelationID.value._countAndFlagsBits;
  object = serverCorrelationID.value._object;
  rawValue = products._rawValue;
  result.products._rawValue = rawValue;
  result.serverCorrelationID.value._object = object;
  result.serverCorrelationID.value._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t ProductResponse.init(from:)(void *a1)
{
  uint64_t result = sub_10014F58C(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t ProductResponse.encode(to:)(void *a1, void *a2, unint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v6 = sub_10007B1FC(&qword_10032CCF8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  sub_10007B1FC(&qword_10032C9C0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v36 = 0LL;
  id v12 = [v10 dataWithJSONObject:isa options:0 error:&v36];

  id v13 = v36;
  if (v12)
  {
    unint64_t v14 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    unint64_t v33 = v15;

    uint64_t v17 = a1[3];
    uint64_t v16 = a1[4];
    sub_100085B44(a1, v17);
    unint64_t v18 = sub_10014FA44();
    dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ProductResponse.CodingKeys,  &type metadata for ProductResponse.CodingKeys,  v18,  v17,  v16);
    id v36 = v34;
    unint64_t v37 = a3;
    char v35 = 0;
    swift_bridgeObjectRetain(a3);
    uint64_t v19 = sub_10007B1FC(&qword_10032C970);
    uint64_t v20 = sub_100150108( (unint64_t *)&qword_10032C978,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v6, v19, v20);
    if (v3)
    {
      sub_10007F054((uint64_t)v14, v33);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = (uint64_t)v14;
      id v36 = v14;
      unint64_t v31 = v33;
      unint64_t v37 = v33;
      char v35 = 1;
      unint64_t v32 = sub_1001435F8();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v6, &type metadata for Data, v32);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return sub_10007F054(v30, v31);
    }
  }

  else
  {
    uint64_t v22 = v13;
    _convertNSErrorToError(_:)(v13);

    return swift_willThrow(v23, v24, v25, v26, v27, v28, v29);
  }

BOOL sub_10014F41C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10014F434()
{
  if (*v0) {
    return 0x73746375646F7270LL;
  }
  else {
    return 0xD000000000000013LL;
  }
}

uint64_t sub_10014F474@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10015001C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10014F498(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10014F4A4(uint64_t a1)
{
  unint64_t v2 = sub_10014FA44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014F4CC(uint64_t a1)
{
  unint64_t v2 = sub_10014FA44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014F4F4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10014F58C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10014F520(void *a1)
{
  return ProductResponse.encode(to:)(a1, *(void **)v1, *(void *)(v1 + 8));
}

uint64_t _s15StoreKit_Shared15ProductResponseV3KeyO8rawValueAESgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1002EF800, a1, a2, &unk_10032C680);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1B) {
    return 27LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10014F58C(void *a1)
{
  uint64_t v59 = type metadata accessor for DecodingError.Context(0LL);
  uint64_t v2 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_10007B1FC(&qword_10032CD28);
  uint64_t v5 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100085B44(a1, v8);
  unint64_t v10 = sub_10014FA44();
  uint64_t v11 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ProductResponse.CodingKeys,  &type metadata for ProductResponse.CodingKeys,  v10,  v8,  v9);
  if (v11) {
    return sub_10007B1A0(a1);
  }
  uint64_t v58 = v4;
  id v12 = a1;
  uint64_t v61 = v2;
  uint64_t v13 = sub_10007B1FC(&qword_10032C970);
  LOBYTE(v62) = 0;
  uint64_t v14 = sub_100150108( &qword_10032CD30,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  uint64_t v15 = v60;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v13, &v62, v60, v13, v14);
  id v17 = v63;
  unint64_t v18 = v64;
  LOBYTE(v62) = 1;
  unint64_t v19 = sub_100143A9C();
  swift_bridgeObjectRetain(v18);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v62, v15, &type metadata for Data, v19);
  id v55 = v17;
  uint64_t v56 = v12;
  uint64_t v21 = (uint64_t)v63;
  unint64_t v20 = v64;
  uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  unint64_t v57 = v20;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v63 = 0LL;
  id v24 = [v22 JSONObjectWithData:isa options:0 error:&v63];

  id v25 = v63;
  if (v24)
  {
    uint64_t v54 = v21;
    id v26 = v63;
    _bridgeAnyObjectToAny(_:)(&v63);
    swift_unknownObjectRelease(v24);
    uint64_t v27 = sub_10007B1FC(&qword_10032CD38);
    uint64_t v28 = v5;
    if ((swift_dynamicCast(&v62, &v63, (char *)&type metadata for Any + 8, v27, 6LL) & 1) != 0)
    {
      sub_10007F054(v54, v57);
      uint64_t v29 = v62;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v15);
      swift_bridgeObjectRetain(v29);
      sub_10007B1A0(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v55;
    }

    swift_bridgeObjectRelease();
    uint64_t v38 = sub_10007B1FC(&qword_10032C9C8);
    uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
    *(_OWORD *)(v39 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = xmmword_10027A600;
    *(void *)(v39 + 56) = &type metadata for ProductResponse.CodingKeys;
    *(void *)(v39 + 64) = v10;
    *(_BYTE *)(v39 + 32) = 1;
    id v63 = 0LL;
    unint64_t v64 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease();
    __int128 v40 = v58;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v39,  0xD000000000000039LL,  0x80000001002A5F50LL,  0LL);
    uint64_t v41 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v41, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v43 = v42;
    uint64_t v44 = v7;
    uint64_t v45 = v61;
    uint64_t v46 = v59;
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v42, v40, v59);
    uint64_t v47 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v43,  enum case for DecodingError.dataCorrupted(_:),  v41);
    swift_willThrow(v47, v48, v49, v50, v51, v52, v53);
    sub_10007F054(v54, v57);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v46);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v44, v60);
  }

  else
  {
    id v30 = v63;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)(v25);

    swift_willThrow(v31, v32, v33, v34, v35, v36, v37);
    sub_10007F054(v21, v57);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  }

  sub_10007B1A0(v56);
  return swift_bridgeObjectRelease();
}

unint64_t sub_10014FA44()
{
  unint64_t result = qword_10032CD00;
  if (!qword_10032CD00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EE58, &type metadata for ProductResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CD00);
  }

  return result;
}

unint64_t sub_10014FA8C()
{
  unint64_t result = qword_10032CD08;
  if (!qword_10032CD08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ProductResponse.Key,  &type metadata for ProductResponse.Key);
    atomic_store(result, (unint64_t *)&qword_10032CD08);
  }

  return result;
}

uint64_t destroy for ProductResponse(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *_s15StoreKit_Shared15ProductResponseVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for ProductResponse(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for ProductResponse(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for ProductResponse(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProductResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(sub_1000DE51C(*(void *)(v0 + 200), v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProductResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ProductResponse()
{
  return &type metadata for ProductResponse;
}

uint64_t getEnumTagSinglePayload for ProductResponse.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

uint64_t storeEnumTagSinglePayload for ProductResponse.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE5) {
    return ((uint64_t (*)(void))((char *)&loc_10014FD68 + 4 * byte_10027EC6C[v4]))();
  }
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_10014FD9C + 4 * byte_10027EC67[v4]))();
}

uint64_t sub_10014FD9C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FDA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014FDACLL);
  }
  return result;
}

uint64_t sub_10014FDB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014FDC0LL);
  }
  *(_BYTE *)__n128 result = a2 + 26;
  return result;
}

uint64_t sub_10014FDC4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FDCC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProductResponse.Key()
{
  return &type metadata for ProductResponse.Key;
}

uint64_t getEnumTagSinglePayload for ProductResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for ProductResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10014FEC4 + 4 * byte_10027EC76[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014FEF8 + 4 * byte_10027EC71[v4]))();
}

uint64_t sub_10014FEF8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FF00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10014FF08LL);
  }
  return result;
}

uint64_t sub_10014FF14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014FF1CLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_10014FF20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FF28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProductResponse.CodingKeys()
{
  return &type metadata for ProductResponse.CodingKeys;
}

unint64_t sub_10014FF48()
{
  unint64_t result = qword_10032CD10;
  if (!qword_10032CD10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EE30, &type metadata for ProductResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CD10);
  }

  return result;
}

unint64_t sub_10014FF90()
{
  unint64_t result = qword_10032CD18;
  if (!qword_10032CD18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EDA0, &type metadata for ProductResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CD18);
  }

  return result;
}

unint64_t sub_10014FFD8()
{
  unint64_t result = qword_10032CD20;
  if (!qword_10032CD20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EDC8, &type metadata for ProductResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CD20);
  }

  return result;
}

uint64_t sub_10015001C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v4 = 0x800000010029E1D0LL;
    if (a2 == 0x800000010029E1D0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010029E1D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x73746375646F7270LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746375646F7270LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100150108(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000849B4(&qword_10032C970);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t PurchaseIntentInternal.productName.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t PurchaseIntentInternal.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PurchaseIntentInternal(0LL) + 32);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t type metadata accessor for PurchaseIntentInternal(uint64_t a1)
{
  uint64_t result = qword_10032CDC0;
  if (!qword_10032CDC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PurchaseIntentInternal);
  }
  return result;
}

uint64_t PurchaseIntentInternal.additionalBuyParams.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for PurchaseIntentInternal(0LL) + 36));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t PurchaseIntentInternal.init(appName:bundleID:productID:productName:timestamp:additionalBuyParams:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  uint64_t v13 = type metadata accessor for PurchaseIntentInternal(0LL);
  uint64_t v14 = (char *)a9 + *(int *)(v13 + 32);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v14, a10, v15);
  id v17 = (void *)((char *)a9 + *(int *)(v13 + 36));
  *id v17 = a11;
  v17[1] = a12;
  return result;
}

unint64_t PurchaseIntentInternal.additionalBuyParamsDictionary.getter()
{
  uint64_t v1 = type metadata accessor for PurchaseIntentInternal(0LL);
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(v1 + 36));
  unint64_t v3 = v2[1];
  if (!v3) {
    return sub_10014C4B4((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v4 = *v2;
  uint64_t v65 = 38LL;
  unint64_t v66 = 0xE100000000000000LL;
  __chkstk_darwin(v1);
  uint64_t v58 = &v65;
  swift_bridgeObjectRetain_n(v3, 2LL);
  uint64_t v5 = 0LL;
  uint64_t v6 = sub_100151350(0x7FFFFFFFFFFFFFFFLL, 1, sub_1001519C8, (uint64_t)v57, v4, v3);
  swift_bridgeObjectRelease();
  int64_t v7 = *((void *)v6 + 2);
  if (v7)
  {
    unint64_t v64 = _swiftEmptyArrayStorage;
    sub_100150FF8(0LL, v7, 0);
    uint64_t v8 = 0LL;
    uint64_t v59 = v6;
    int64_t v60 = v7;
    uint64_t v61 = v6 + 32;
    do
    {
      uint64_t v9 = &v61[32 * v8];
      uint64_t v10 = *(void *)v9;
      uint64_t v11 = *((void *)v9 + 3);
      swift_bridgeObjectRetain(v11);
      uint64_t v12 = static String._fromSubstring(_:)(v10);
      unint64_t v14 = v13;
      uint64_t v65 = 61LL;
      unint64_t v66 = 0xE100000000000000LL;
      __chkstk_darwin(v12);
      uint64_t v58 = &v65;
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = sub_100151350(0x7FFFFFFFFFFFFFFFLL, 1, sub_1001519C8, (uint64_t)v57, v12, v14);
      swift_bridgeObjectRelease();
      int64_t v17 = *((void *)v16 + 2);
      if (v17)
      {
        uint64_t v62 = v11;
        uint64_t v63 = v5;
        uint64_t v65 = (uint64_t)_swiftEmptyArrayStorage;
        sub_100151014(0LL, v17, 0);
        unint64_t v18 = (void *)v65;
        unint64_t v19 = v16 + 56;
        do
        {
          uint64_t v20 = *(v19 - 3);
          swift_bridgeObjectRetain(*v19);
          uint64_t v21 = static String._fromSubstring(_:)(v20);
          uint64_t v23 = v22;
          swift_bridgeObjectRelease();
          uint64_t v65 = (uint64_t)v18;
          unint64_t v25 = v18[2];
          unint64_t v24 = v18[3];
          if (v25 >= v24 >> 1)
          {
            sub_100151014((char *)(v24 > 1), v25 + 1, 1);
            unint64_t v18 = (void *)v65;
          }

          void v18[2] = v25 + 1;
          id v26 = &v18[2 * v25];
          v26[4] = v21;
          v26[5] = v23;
          v19 += 4;
          --v17;
        }

        while (v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v7 = v60;
        uint64_t v5 = v63;
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v18 = _swiftEmptyArrayStorage;
      }

      uint64_t v27 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100150FF8(0LL, v27[2] + 1LL, 1);
        uint64_t v27 = v64;
      }

      unint64_t v29 = v27[2];
      unint64_t v28 = v27[3];
      if (v29 >= v28 >> 1)
      {
        sub_100150FF8((void *)(v28 > 1), v29 + 1, 1);
        uint64_t v27 = v64;
      }

      ++v8;
      _OWORD v27[2] = v29 + 1;
      v27[v29 + 4] = v18;
    }

    while (v8 != v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = _swiftEmptyArrayStorage;
  }

  unint64_t v31 = sub_10014C4B4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = (void *)v31;
  uint64_t v33 = (char *)v27[2];
  if (!v33)
  {
    swift_bridgeObjectRelease();
    return (unint64_t)v32;
  }

  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v27);
  uint64_t v34 = 0LL;
  int64_t v60 = (int64_t)v32;
  uint64_t v61 = v33;
  while (1)
  {
    uint64_t v37 = (void *)v27[v34 + 4];
    if (v37[2] != 2LL) {
      goto LABEL_23;
    }
    uint64_t v38 = v37[4];
    uint64_t v39 = v37[5];
    uint64_t v40 = v37[7];
    uint64_t v62 = v37[6];
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v39);
    uint64_t v63 = v40;
    swift_bridgeObjectRetain(v40);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v65 = (uint64_t)v32;
    unint64_t v43 = sub_1001469D8(v38, v39);
    uint64_t v44 = v32[2];
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      break;
    }
    char v47 = v42;
    if (v32[3] >= v46)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v50 = (void *)v65;
        if ((v42 & 1) == 0) {
          goto LABEL_32;
        }
      }

      else
      {
        sub_10014D7A4();
        uint64_t v50 = (void *)v65;
        if ((v47 & 1) == 0) {
          goto LABEL_32;
        }
      }
    }

    else
    {
      sub_10014CF9C(v46, isUniquelyReferenced_nonNull_native);
      unint64_t v48 = sub_1001469D8(v38, v39);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_41;
      }
      unint64_t v43 = v48;
      uint64_t v50 = (void *)v65;
      if ((v47 & 1) == 0)
      {
LABEL_32:
        v50[(v43 >> 6) + 8] |= 1LL << v43;
        uint64_t v51 = (uint64_t *)(v50[6] + 16 * v43);
        *uint64_t v51 = v38;
        v51[1] = v39;
        uint64_t v52 = (void *)(v50[7] + 16 * v43);
        uint64_t v53 = v63;
        *uint64_t v52 = v62;
        v52[1] = v53;
        uint64_t v54 = v50[2];
        BOOL v55 = __OFADD__(v54, 1LL);
        uint64_t v56 = v54 + 1;
        if (v55) {
          goto LABEL_40;
        }
        v50[2] = v56;
        swift_bridgeObjectRetain(v39);
        goto LABEL_22;
      }
    }

    uint64_t v35 = (void *)(v50[7] + 16 * v43);
    swift_bridgeObjectRelease();
    uint64_t v36 = v63;
    *uint64_t v35 = v62;
    v35[1] = v36;
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = v50;
    uint64_t v33 = v61;
LABEL_23:
    if (v33 == (char *)++v34)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v27, 2LL);
      return (unint64_t)v32;
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t PurchaseIntentInternal.buyParamsOfferID.getter()
{
  unint64_t v0 = PurchaseIntentInternal.additionalBuyParamsDictionary.getter();
  if (*(void *)(v0 + 16) && (unint64_t v1 = sub_1001469D8(0x66664F636F486461LL, 0xEC00000064497265LL), (v2 & 1) != 0))
  {
    unint64_t v3 = (uint64_t *)(*(void *)(v0 + 56) + 16 * v1);
    uint64_t v4 = *v3;
    swift_bridgeObjectRetain(v3[1]);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1001508B8()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001508E8 + 4 * byte_10027EEB0[*v0]))( 0x656D614E707061LL,  0xE700000000000000LL);
}

uint64_t sub_1001508E8()
{
  return 0x4449656C646E7562LL;
}

uint64_t sub_100150900()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_10015091C()
{
  return 0x4E746375646F7270LL;
}

uint64_t sub_10015093C()
{
  return 0x6D617473656D6974LL;
}

unint64_t sub_10015095C()
{
  return 0xD000000000000013LL;
}

uint64_t sub_100150978@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100152310(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10015099C(uint64_t a1)
{
  unint64_t v2 = sub_100151A34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001509C4(uint64_t a1)
{
  unint64_t v2 = sub_100151A34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PurchaseIntentInternal.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032CD40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v9);
  unint64_t v11 = sub_100151A34();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PurchaseIntentInternal.CodingKeys,  &type metadata for PurchaseIntentInternal.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v34 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v34, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v33 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v33, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v32 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v32, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v31 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    uint64_t v20 = type metadata accessor for PurchaseIntentInternal(0LL);
    uint64_t v21 = (char *)v3 + *(int *)(v20 + 32);
    char v30 = 4;
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = sub_100151A78(&qword_10032CD50, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v30, v5, v22, v23);
    unint64_t v24 = (uint64_t *)((char *)v3 + *(int *)(v20 + 36));
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    char v29 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v29, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PurchaseIntentInternal.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_10007B1FC(&qword_10032CD58);
  uint64_t v6 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for PurchaseIntentInternal(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v35 = a1;
  sub_100085B44(a1, v12);
  unint64_t v14 = sub_100151A34();
  uint64_t v15 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PurchaseIntentInternal.CodingKeys,  &type metadata for PurchaseIntentInternal.CodingKeys,  v14,  v12,  v13);
  if (v15) {
    return sub_10007B1A0(v35);
  }
  uint64_t v36 = v5;
  uint64_t v16 = v6;
  uint64_t v17 = v33;
  char v42 = 0;
  *(void *)unint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v34);
  *((void *)v11 + 1) = v18;
  char v41 = 1;
  *((void *)v11 + 2) = KeyedDecodingContainer.decode(_:forKey:)(&v41, v34);
  *((void *)v11 + 3) = v19;
  char v40 = 2;
  *((void *)v11 + 4) = KeyedDecodingContainer.decode(_:forKey:)(&v40, v34);
  *((void *)v11 + 5) = v20;
  char v39 = 3;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v34);
  v30[1] = 0LL;
  *((void *)v11 + 6) = v21;
  *((void *)v11 + 7) = v22;
  char v38 = 4;
  uint64_t v23 = sub_100151A78(&qword_10032CD60, (uint64_t)&protocol conformance descriptor for Date);
  unint64_t v24 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &v38, v34, v17, v23);
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v11[*(int *)(v9 + 32)], v24, v17);
  char v37 = 5;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v37, v34);
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v34);
  uint64_t v28 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *uint64_t v28 = v25;
  v28[1] = v27;
  sub_100151AB8((uint64_t)v11, v31);
  sub_10007B1A0(v35);
  return sub_100151AFC((uint64_t)v11);
}

uint64_t sub_100150FB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PurchaseIntentInternal.init(from:)(a1, a2);
}

uint64_t sub_100150FC8(void *a1)
{
  return PurchaseIntentInternal.encode(to:)(a1);
}

char *sub_100150FDC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100151030(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_100150FF8(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100151130(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100151014(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100151250(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100151030(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC(&qword_10032CE40);
    unint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14);
  }

  swift_release(a4);
  return v11;
}

void *sub_100151130(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC(&qword_10032CE28);
    unint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    unint64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_10007B1FC(&qword_10032CE30);
    swift_arrayInitWithCopy(v11 + 4);
  }

  swift_release(a4);
  return v11;
}

char *sub_100151250(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC(&qword_10032CE20);
    unint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14);
  }

  swift_release(a4);
  return v11;
}

char *sub_100151350( uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  uint64_t v11 = a5;
  uint64_t v14 = swift_allocObject(&unk_1002F0CF8, 24LL, 7LL);
  *(void *)(v14 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject(&unk_1002F0D20, 24LL, 7LL);
  *(void *)(v47 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = 15LL;
  uint64_t v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v16 = HIBYTE(a6) & 0xF) : (uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = 7LL;
    if (((a6 >> 60) & ((v11 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v31 = 11LL;
    }
    sub_100151768(v31 | (v15 << 16), v47, a2 & 1, v14);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain(v10);
    swift_release(v14);
    uint64_t v32 = v47;
    goto LABEL_40;
  }

  uint64_t v42 = a1;
  uint64_t v43 = v14;
  uint64_t v17 = 7LL;
  if (((a6 >> 60) & ((v11 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v17 = 11LL;
  }
  uint64_t v41 = v17 | (v16 << 16);
  unint64_t v48 = 4 * v16;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  unint64_t v9 = 15LL;
  unint64_t v8 = 15LL;
  unint64_t v18 = 15LL;
  while (1)
  {
    v50[0] = String.subscript.getter(v9, v11, a6);
    v50[1] = v19;
    uint64_t v20 = a3(v50);
    if (v7)
    {
      swift_release(v43);
      swift_release(v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }

    uint64_t v6 = v20;
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      break;
    }
    unint64_t v9 = String.index(after:)(v9, v11, a6);
LABEL_11:
    if (v48 == v9 >> 14) {
      goto LABEL_31;
    }
  }

  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v9 = String.index(after:)(v9, v11, a6);
    *(void *)(v47 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v9;
    unint64_t v8 = v9;
    unint64_t v18 = v9;
    goto LABEL_11;
  }

  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v21 = String.subscript.getter(v8, v9);
  uint64_t v44 = v22;
  uint64_t v45 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = sub_100151874(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
  }
  unint64_t v28 = *((void *)v10 + 2);
  unint64_t v27 = *((void *)v10 + 3);
  uint64_t v6 = v28 + 1;
  if (v28 >= v27 >> 1) {
    uint64_t v10 = sub_100151874((char *)(v27 > 1), v28 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v6;
  char v29 = &v10[32 * v28];
  *((void *)v29 + 4) = v45;
  *((void *)v29 + 5) = v24;
  *((void *)v29 + 6) = v26;
  *((void *)v29 + 7) = v44;
  *(void *)(v43 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v10;
  uint64_t v30 = String.index(after:)(v9, v11, a6);
  unint64_t v9 = v30;
  *(void *)(v47 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v30;
  if (*((void *)v10 + 2) != v42)
  {
    unint64_t v8 = v30;
    unint64_t v18 = v30;
    goto LABEL_11;
  }

  unint64_t v18 = v30;
  unint64_t v8 = v30;
LABEL_31:
  if (v48 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = v43;
    goto LABEL_39;
  }

  if (v48 >= v18 >> 14)
  {
    uint64_t v6 = String.subscript.getter(v18, v41);
    unint64_t v8 = v34;
    unint64_t v9 = v35;
    uint64_t v11 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_36;
  }

uint64_t sub_100151768(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v11 = *(void *)(a2 + 16);
  int v12 = (v11 >> 14 == a1 >> 14) & a3;
  if (v12 == 1) {
    return v12 ^ 1u;
  }
  if (a1 >> 14 < v11 >> 14)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v4 = a4;
  uint64_t v5 = String.subscript.getter(v11, a1);
  uint64_t v6 = v13;
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  unint64_t v9 = *(char **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    unint64_t v9 = sub_100151874(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
    *(void *)(v4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v9;
  }

  unint64_t v18 = *((void *)v9 + 2);
  unint64_t v17 = *((void *)v9 + 3);
  if (v18 >= v17 >> 1)
  {
    unint64_t v9 = sub_100151874((char *)(v17 > 1), v18 + 1, 1, v9);
    *(void *)(v4 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = v9;
  }

  *((void *)v9 + 2) = v18 + 1;
  uint64_t v19 = &v9[32 * v18];
  *((void *)v19 + 4) = v5;
  *((void *)v19 + 5) = v6;
  *((void *)v19 + 6) = v7;
  *((void *)v19 + 7) = v8;
  return v12 ^ 1u;
}

char *sub_100151874(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC(&qword_10032CE38);
    unint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14);
  }

  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100151974(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL) & 1;
  }
}

uint64_t sub_1001519C8(uint64_t *a1)
{
  return sub_1001519E0(a1) & 1;
}

uint64_t sub_1001519E0(uint64_t *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v3[1];
  if (v4 == *v3 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0LL) & 1;
  }
}

unint64_t sub_100151A34()
{
  unint64_t result = qword_10032CD48;
  if (!qword_10032CD48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027F03C, &type metadata for PurchaseIntentInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CD48);
  }

  return result;
}

uint64_t sub_100151A78(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Date(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100151AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseIntentInternal(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100151AFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PurchaseIntentInternal(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for PurchaseIntentInternal(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = *(int *)(a3 + 32);
    uint64_t v21 = (char *)a1 + v11;
    int64_t v12 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14(v21, v12, v13);
    uint64_t v15 = *(int *)(a3 + 36);
    uint64_t v16 = (uint64_t *)((char *)v4 + v15);
    unint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain(v18);
  }

  return v4;
}

uint64_t destroy for PurchaseIntentInternal(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(a2 + 36) + 8));
}

void *initializeWithCopy for PurchaseIntentInternal(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v19 = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v19, v11, v12);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  return a1;
}

void *assignWithCopy for PurchaseIntentInternal(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

_OWORD *initializeWithTake for PurchaseIntentInternal(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  __int128 v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

void *assignWithTake for PurchaseIntentInternal(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v23 = v19[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PurchaseIntentInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100151FF0);
}

uint64_t sub_100151FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for PurchaseIntentInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100152078);
}

uint64_t sub_100152078(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001520EC(uint64_t a1)
{
  v4[0] = &unk_10027EF48;
  v4[1] = &unk_10027EF60;
  void v4[2] = &unk_10027EF60;
  void v4[3] = &unk_10027EF48;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = &unk_10027EF48;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PurchaseIntentInternal.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1001521B8 + 4 * byte_10027EEBB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001521EC + 4 * byte_10027EEB6[v4]))();
}

uint64_t sub_1001521EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001521F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001521FCLL);
  }
  return result;
}

uint64_t sub_100152208(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100152210LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100152214(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015221C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PurchaseIntentInternal.CodingKeys()
{
  return &type metadata for PurchaseIntentInternal.CodingKeys;
}

unint64_t sub_10015223C()
{
  unint64_t result = qword_10032CE08;
  if (!qword_10032CE08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027F014, &type metadata for PurchaseIntentInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CE08);
  }

  return result;
}

unint64_t sub_100152284()
{
  unint64_t result = qword_10032CE10;
  if (!qword_10032CE10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EF84, &type metadata for PurchaseIntentInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CE10);
  }

  return result;
}

unint64_t sub_1001522CC()
{
  unint64_t result = qword_10032CE18;
  if (!qword_10032CE18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027EFAC, &type metadata for PurchaseIntentInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CE18);
  }

  return result;
}

uint64_t sub_100152310(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656D614E707061LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E707061LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x49746375646F7270LL && a2 == 0xE900000000000044LL)
  {
    unint64_t v8 = 0xE900000000000044LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270LL, 0xE900000000000044LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x4E746375646F7270LL && a2 == 0xEB00000000656D61LL)
  {
    unint64_t v9 = 0xEB00000000656D61LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E746375646F7270LL, 0xEB00000000656D61LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v10 = 0xE900000000000070LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x80000001002A5F90LL)
  {
    swift_bridgeObjectRelease(0x80000001002A5F90LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001002A5F90LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_1001525B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001525D8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t AcknowledgeMessageRequest.clientOverride.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AcknowledgeMessageRequest(0LL) + 28);
  return sub_100152654(v3, a1);
}

uint64_t type metadata accessor for AcknowledgeMessageRequest(uint64_t a1)
{
  uint64_t result = qword_10032CEF0;
  if (!qword_10032CEF0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AcknowledgeMessageRequest);
  }
  return result;
}

uint64_t sub_100152654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032CE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t AcknowledgeMessageRequest.clientOverride.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AcknowledgeMessageRequest(0LL) + 28);
  return sub_1001526CC(a1, v3);
}

uint64_t sub_1001526CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032CE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*AcknowledgeMessageRequest.clientOverride.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t AcknowledgeMessageRequest.logKey.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AcknowledgeMessageRequest(0LL) + 32));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t AcknowledgeMessageRequest.logKey.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for AcknowledgeMessageRequest(0LL) + 32));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*AcknowledgeMessageRequest.logKey.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t AcknowledgeMessageRequest.init(messageType:bundleID:offerID:overrides:logKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v17 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v18 = (uint64_t)a9 + *(int *)(v17 + 28);
  uint64_t v19 = type metadata accessor for ClientOverride(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v18, 1LL, 1LL, v19);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  uint64_t result = sub_1001526CC(a7, v18);
  uint64_t v21 = (void *)((char *)a9 + *(int *)(v17 + 32));
  *uint64_t v21 = a8;
  v21[1] = a10;
  return result;
}

uint64_t AcknowledgeMessageRequest.encode()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  uint64_t v3 = JSONEncoder.init()();
  uint64_t v4 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v5 = sub_10009D5CC( &qword_10032CE50,  type metadata accessor for AcknowledgeMessageRequest,  (uint64_t)&protocol conformance descriptor for AcknowledgeMessageRequest);
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)(v1, v4, v5);
  swift_release(v3);
  return v6;
}

uint64_t static AcknowledgeMessageRequest.decode(encodedRequest:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = JSONDecoder.init()();
  uint64_t v8 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v9 = sub_10009D5CC( &qword_10032CE58,  type metadata accessor for AcknowledgeMessageRequest,  (uint64_t)&protocol conformance descriptor for AcknowledgeMessageRequest);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a3, v8, a1, a2, v8, v9);
  return swift_release(v7);
}

uint64_t sub_1001529FC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100152A34 + 4 * byte_10027F090[*v0]))( 0x546567617373656DLL,  0xEB00000000657079LL);
}

uint64_t sub_100152A34()
{
  return 0x4449656C646E7562LL;
}

uint64_t sub_100152A4C()
{
  return 0x4449726566666FLL;
}

uint64_t sub_100152A64()
{
  return 0x764F746E65696C63LL;
}

uint64_t sub_100152A88()
{
  return 0x79654B676F6CLL;
}

uint64_t sub_100152A9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10015324C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100152AC0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100152ACC(uint64_t a1)
{
  unint64_t v2 = sub_100152CF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100152AF4(uint64_t a1)
{
  unint64_t v2 = sub_100152CF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AcknowledgeMessageRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032CE60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v9);
  unint64_t v11 = sub_100152CF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AcknowledgeMessageRequest.CodingKeys,  &type metadata for AcknowledgeMessageRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v31 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v30, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v29 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v29, v5);
    uint64_t v18 = type metadata accessor for AcknowledgeMessageRequest(0LL);
    uint64_t v19 = (char *)v3 + *(int *)(v18 + 28);
    char v28 = 3;
    uint64_t v20 = type metadata accessor for ClientOverride(0LL);
    uint64_t v21 = sub_10009D5CC( &qword_10032CE70,  type metadata accessor for ClientOverride,  (uint64_t)&protocol conformance descriptor for ClientOverride);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v28, v5, v20, v21);
    uint64_t v22 = (uint64_t *)((char *)v3 + *(int *)(v18 + 32));
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    char v27 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v24, &v27, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100152CF4()
{
  unint64_t result = qword_10032CE68;
  if (!qword_10032CE68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027F320, &type metadata for AcknowledgeMessageRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CE68);
  }

  return result;
}

uint64_t AcknowledgeMessageRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = sub_10007B1FC(&qword_10032CE48);
  __chkstk_darwin(v3);
  unint64_t v34 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10007B1FC(&qword_10032CE78);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = (uint64_t)v11 + *(int *)(v9 + 28);
  uint64_t v13 = type metadata accessor for ClientOverride(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
  uint64_t v37 = v12;
  v14(v12, 1LL, 1LL, v13);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_100085B44(a1, v15);
  unint64_t v17 = sub_100152CF4();
  uint64_t v18 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AcknowledgeMessageRequest.CodingKeys,  &type metadata for AcknowledgeMessageRequest.CodingKeys,  v17,  v15,  v16);
  if (v18)
  {
    sub_10007B1A0(a1);
    return sub_100087418(v37, &qword_10032CE48);
  }

  else
  {
    uint64_t v32 = v13;
    unint64_t v38 = a1;
    uint64_t v20 = v35;
    uint64_t v19 = v36;
    char v43 = 0;
    *unint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v36);
    v11[1] = v21;
    char v42 = 1;
    v11[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v19);
    v11[3] = v22;
    char v41 = 2;
    v11[4] = KeyedDecodingContainer.decode(_:forKey:)(&v41, v19);
    v11[5] = v23;
    char v40 = 3;
    uint64_t v24 = sub_10009D5CC( &qword_10032CE80,  type metadata accessor for ClientOverride,  (uint64_t)&protocol conformance descriptor for ClientOverride);
    uint64_t v25 = (uint64_t)v34;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v32, &v40, v19, v32, v24);
    sub_1001526CC(v25, v37);
    char v39 = 4;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v19);
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v36);
    char v29 = (void *)((char *)v11 + *(int *)(v8 + 32));
    *char v29 = v26;
    v29[1] = v28;
    sub_1001530C8((uint64_t)v11, v33);
    sub_10007B1A0(v38);
    return sub_1000B6274((uint64_t)v11, type metadata accessor for AcknowledgeMessageRequest);
  }

uint64_t sub_1001530C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015310C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AcknowledgeMessageRequest.init(from:)(a1, a2);
}

uint64_t sub_100153120(void *a1)
{
  return AcknowledgeMessageRequest.encode(to:)(a1);
}

uint64_t MessageType.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1LL;
}

Swift::Int sub_100153144()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_100153188()
{
}

Swift::Int sub_1001531B4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t sub_1001531F4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s15StoreKit_Shared11MessageTypeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10015321C(void *a1@<X8>)
{
  *a1 = *v1 + 1LL;
}

uint64_t MessageType.messageTypeString.getter(char a1)
{
  return qword_10027F378[a1];
}

uint64_t sub_10015324C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x546567617373656DLL && a2 == 0xEB00000000657079LL)
  {
    unint64_t v5 = 0xEB00000000657079LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x546567617373656DLL, 0xEB00000000657079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x4449726566666FLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726566666FLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x764F746E65696C63LL && a2 == 0xEE00656469727265LL)
  {
    unint64_t v9 = 0xEE00656469727265LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x764F746E65696C63LL, 0xEE00656469727265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x79654B676F6CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79654B676F6CLL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t _s15StoreKit_Shared11MessageTypeO8rawValueACSgSi_tcfC_0(unint64_t a1)
{
  if (a1 >= 6) {
    return 5LL;
  }
  else {
    return (0x40302010005uLL >> (8 * a1));
  }
}

uint64_t sub_1001534C0(uint64_t a1)
{
  uint64_t result = sub_10009D5CC( &qword_10032CE88,  type metadata accessor for AcknowledgeMessageRequest,  (uint64_t)&unk_10027F0CC);
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = result;
  return result;
}

uint64_t sub_1001534FC(uint64_t a1)
{
  *(void *)(a1 + sub_10012A084(*(void *)(v0 + 96) + OBJC_IVAR____TtC9storekitd17StorefrontManager_sandboxStorefront, v0 + 16) = sub_10009D5CC( &qword_10032CE58,  type metadata accessor for AcknowledgeMessageRequest,  (uint64_t)&protocol conformance descriptor for AcknowledgeMessageRequest);
  uint64_t result = sub_10009D5CC( &qword_10032CE50,  type metadata accessor for AcknowledgeMessageRequest,  (uint64_t)&protocol conformance descriptor for AcknowledgeMessageRequest);
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_10015355C()
{
  unint64_t result = qword_10032CE90;
  if (!qword_10032CE90)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_10032CE90);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AcknowledgeMessageRequest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    uint64_t v9 = *(int *)(a3 + 28);
    char v10 = (unint64_t *)((char *)a1 + v9);
    unint64_t v11 = (unint64_t *)((char *)a2 + v9);
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v12 = type metadata accessor for ClientOverride(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(unint64_t *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    __n128 v15 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1LL, v12, v15))
    {
      uint64_t v16 = sub_10007B1FC(&qword_10032CE48);
      memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
      uint64_t v17 = a3;
    }

    else
    {
      uint64_t v48 = v13;
      unint64_t v19 = v11[1];
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)char v10 = *(_OWORD *)v11;
      }

      else
      {
        unint64_t v20 = *v11;
        sub_1000881FC(*v11, v11[1]);
        *char v10 = v20;
        v10[1] = v19;
      }

      uint64_t v21 = (int *)v12;
      uint64_t v17 = a3;
      unint64_t v22 = v11[3];
      v10[2] = v11[2];
      v10[3] = v22;
      unint64_t v23 = v11[5];
      v10[4] = v11[4];
      void v10[5] = v23;
      uint64_t v24 = v21[7];
      uint64_t v25 = (char *)v10 + v24;
      uint64_t v26 = (char *)v11 + v24;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      uint64_t v27 = sub_10007B1FC(&qword_10032C6A0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 3LL, v27))
      {
        uint64_t v29 = type metadata accessor for ClientOverride.Server(0LL);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
      }

      else
      {
        uint64_t v30 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v25, v26, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 3LL, v27);
      }

      uint64_t v31 = v21[8];
      uint64_t v32 = (char *)v10 + v31;
      uint64_t v33 = (char *)v11 + v31;
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v21[9];
      uint64_t v35 = (char *)v10 + v34;
      uint64_t v36 = (char *)v11 + v34;
      char v35[8] = v36[8];
      *(void *)uint64_t v35 = *(void *)v36;
      uint64_t v37 = v21[10];
      unint64_t v38 = (char *)v10 + v37;
      char v39 = (char *)v11 + v37;
      uint64_t v40 = type metadata accessor for UUID(0LL);
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
      {
        uint64_t v42 = sub_10007B1FC(&qword_10032C748);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
      }

      (*(void (**)(unint64_t *, void, uint64_t, int *))(v48 + 56))(v10, 0LL, 1LL, v21);
    }

    uint64_t v43 = *(int *)(v17 + 32);
    uint64_t v44 = (uint64_t *)((char *)v4 + v43);
    uint64_t v45 = (uint64_t *)((char *)a2 + v43);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    swift_bridgeObjectRetain(v46);
  }

  return v4;
}

uint64_t destroy for AcknowledgeMessageRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  uint64_t v5 = type metadata accessor for ClientOverride(0LL);
  if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5))
  {
    unint64_t v6 = v4[1];
    if (v6 >> 60 != 15) {
      sub_10007F054(*v4, v6);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_10007B1FC(&qword_10032C6A0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 3LL, v8))
    {
      uint64_t v9 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v7, v9);
    }

    char v10 = (char *)v4 + *(int *)(v5 + 40);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AcknowledgeMessageRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (void *)((char *)a1 + v8);
  char v10 = (void *)((char *)a2 + v8);
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v11 = (int *)type metadata accessor for ClientOverride(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(unsigned int (**)(unint64_t *, uint64_t, int *, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  __n128 v14 = swift_bridgeObjectRetain(v7);
  if (v13(v10, 1LL, v11, v14))
  {
    uint64_t v15 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    uint64_t v16 = a3;
  }

  else
  {
    uint64_t v45 = v12;
    unint64_t v17 = v10[1];
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      unint64_t v18 = *v10;
      sub_1000881FC(*v10, v10[1]);
      *uint64_t v9 = v18;
      v9[1] = v17;
    }

    uint64_t v16 = a3;
    unint64_t v19 = v10[3];
    __int128 v9[2] = v10[2];
    v9[3] = v19;
    unint64_t v20 = v10[5];
    v9[4] = v10[4];
    v9[5] = v20;
    uint64_t v21 = v11[7];
    unint64_t v22 = (char *)v9 + v21;
    unint64_t v23 = (char *)v10 + v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    uint64_t v24 = sub_10007B1FC(&qword_10032C6A0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 3LL, v24))
    {
      uint64_t v26 = type metadata accessor for ClientOverride.Server(0LL);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      uint64_t v27 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v22, v23, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 3LL, v24);
    }

    uint64_t v28 = v11[8];
    uint64_t v29 = (char *)v9 + v28;
    uint64_t v30 = (char *)v10 + v28;
    *(void *)uint64_t v29 = *(void *)v30;
    v29[8] = v30[8];
    uint64_t v31 = v11[9];
    uint64_t v32 = (char *)v9 + v31;
    uint64_t v33 = (char *)v10 + v31;
    v32[8] = v33[8];
    *(void *)uint64_t v32 = *(void *)v33;
    uint64_t v34 = v11[10];
    uint64_t v35 = (char *)v9 + v34;
    uint64_t v36 = (char *)v10 + v34;
    uint64_t v37 = type metadata accessor for UUID(0LL);
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
    {
      uint64_t v39 = sub_10007B1FC(&qword_10032C748);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
    }

    (*(void (**)(unint64_t *, void, uint64_t, int *))(v45 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v40 = *(int *)(v16 + 32);
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  return a1;
}

void *assignWithCopy for AcknowledgeMessageRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  char v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for ClientOverride(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  __n128 v14 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_1000B6274((uint64_t)v10, type metadata accessor for ClientOverride);
      goto LABEL_7;
    }

    unint64_t v19 = v11[1];
    uint64_t v85 = a3;
    if ((unint64_t)v10[1] >> 60 == 15)
    {
      if (v19 >> 60 != 15)
      {
        uint64_t v20 = *v11;
        sub_1000881FC(*v11, v19);
        *char v10 = v20;
        v10[1] = v19;
        goto LABEL_23;
      }
    }

    else
    {
      if (v19 >> 60 != 15)
      {
        uint64_t v45 = *v11;
        sub_1000881FC(*v11, v19);
        uint64_t v46 = *v10;
        unint64_t v47 = v10[1];
        *char v10 = v45;
        v10[1] = v19;
        sub_10007F054(v46, v47);
LABEL_23:
        v10[2] = v11[2];
        uint64_t v48 = v11[3];
        v10[3] = v48;
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRelease();
        v10[4] = v11[4];
        uint64_t v49 = v11[5];
        void v10[5] = v49;
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRelease();
        uint64_t v50 = v12[7];
        uint64_t v51 = (char *)v10 + v50;
        uint64_t v52 = (char *)v11 + v50;
        uint64_t v53 = sub_10007B1FC(&qword_10032C6A0);
        uint64_t v54 = *(void *)(v53 - 8);
        BOOL v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
        uint64_t v83 = (uint64_t)v51;
        LODWORD(v51) = v55(v51, 3LL, v53);
        int v56 = v55(v52, 3LL, v53);
        if ((_DWORD)v51)
        {
          if (v56)
          {
            size_t v57 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
            uint64_t v58 = (void *)v83;
LABEL_28:
            memcpy(v58, v52, v57);
            goto LABEL_31;
          }

          uint64_t v59 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v59 - 8) + 16LL))(v83, v52, v59);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v83, 0LL, 3LL, v53);
        }

        else
        {
          if (v56)
          {
            sub_100087418(v83, &qword_10032C6A0);
            size_t v57 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
            uint64_t v58 = (void *)v83;
            goto LABEL_28;
          }

          uint64_t v60 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v60 - 8) + 24LL))(v83, v52, v60);
        }

_OWORD *initializeWithTake for AcknowledgeMessageRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (_OWORD *)((char *)a1 + v7);
  uint64_t v9 = (_OWORD *)((char *)a2 + v7);
  char v10 = (int *)type metadata accessor for ClientOverride(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    __int128 v13 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v13;
    void v8[2] = v9[2];
    uint64_t v14 = v10[7];
    __dst = (char *)v8 + v14;
    int v15 = (char *)v9 + v14;
    uint64_t v16 = sub_10007B1FC(&qword_10032C6A0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 3LL, v16))
    {
      uint64_t v18 = type metadata accessor for ClientOverride.Server(0LL);
      memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(__dst, v15, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0LL, 3LL, v16);
    }

    uint64_t v20 = v10[8];
    uint64_t v21 = (char *)v8 + v20;
    uint64_t v22 = (char *)v9 + v20;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v10[9];
    uint64_t v24 = (char *)v8 + v23;
    uint64_t v25 = (char *)v9 + v23;
    _BYTE v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = v10[10];
    uint64_t v27 = (char *)v8 + v26;
    uint64_t v28 = (char *)v9 + v26;
    uint64_t v29 = type metadata accessor for UUID(0LL);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
    {
      uint64_t v31 = sub_10007B1FC(&qword_10032C748);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    }

    (*(void (**)(_OWORD *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  *(_OWORD *)((char *)a1 + *(int *)(a3 + sub_10011B7D4(*(uint64_t (**)(void))(v0 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

void *assignWithTake for AcknowledgeMessageRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 28);
  char v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for ClientOverride(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  uint64_t v14 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_1000B6274((uint64_t)v10, type metadata accessor for ClientOverride);
      goto LABEL_7;
    }

    unint64_t v25 = v10[1];
    uint64_t v77 = a3;
    if (v25 >> 60 != 15)
    {
      unint64_t v26 = v11[1];
      if (v26 >> 60 != 15)
      {
        uint64_t v40 = *v10;
        *char v10 = *v11;
        v10[1] = v26;
        sub_10007F054(v40, v25);
LABEL_18:
        uint64_t v41 = v11[3];
        v10[2] = v11[2];
        v10[3] = v41;
        swift_bridgeObjectRelease();
        uint64_t v42 = v11[5];
        v10[4] = v11[4];
        void v10[5] = v42;
        swift_bridgeObjectRelease();
        uint64_t v43 = v12[7];
        uint64_t v44 = (char *)v10 + v43;
        uint64_t v45 = (char *)v11 + v43;
        uint64_t v46 = sub_10007B1FC(&qword_10032C6A0);
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
        uint64_t v75 = (uint64_t)v44;
        LODWORD(v44) = v48(v44, 3LL, v46);
        int v49 = v48(v45, 3LL, v46);
        if ((_DWORD)v44)
        {
          if (v49)
          {
            size_t v50 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
            uint64_t v51 = (void *)v75;
LABEL_23:
            memcpy(v51, v45, v50);
            goto LABEL_26;
          }

          uint64_t v52 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v52 - 8) + 32LL))(v75, v45, v52);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v75, 0LL, 3LL, v46);
        }

        else
        {
          if (v49)
          {
            sub_100087418(v75, &qword_10032C6A0);
            size_t v50 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
            uint64_t v51 = (void *)v75;
            goto LABEL_23;
          }

          uint64_t v53 = type metadata accessor for URL(0LL);
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v53 - 8) + 40LL))(v75, v45, v53);
        }

uint64_t getEnumTagSinglePayload for AcknowledgeMessageRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001549A0);
}

uint64_t sub_1001549A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10007B1FC(&qword_10032CE48);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for AcknowledgeMessageRequest( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100154A2C);
}

uint64_t sub_100154A2C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10007B1FC(&qword_10032CE48);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

void sub_100154AA4(uint64_t a1)
{
  v4[0] = &unk_10027F220;
  v4[1] = &unk_10027F238;
  void v4[2] = &unk_10027F220;
  sub_100154B24(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    void v4[4] = &unk_10027F220;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
  }

void sub_100154B24(uint64_t a1)
{
  if (!qword_10032CF00)
  {
    uint64_t v2 = type metadata accessor for ClientOverride(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10032CF00);
    }
  }

ValueMetadata *type metadata accessor for MessageType()
{
  return &type metadata for MessageType;
}

uint64_t _s15StoreKit_Shared11MessageTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t _s15StoreKit_Shared11MessageTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100154C6C + 4 * byte_10027F09A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100154CA0 + 4 * byte_10027F095[v4]))();
}

uint64_t sub_100154CA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100154CA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100154CB0LL);
  }
  return result;
}

uint64_t sub_100154CBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100154CC4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100154CC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100154CD0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AcknowledgeMessageRequest.CodingKeys()
{
  return &type metadata for AcknowledgeMessageRequest.CodingKeys;
}

unint64_t sub_100154CF0()
{
  unint64_t result = qword_10032CF40;
  if (!qword_10032CF40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027F2F8, &type metadata for AcknowledgeMessageRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CF40);
  }

  return result;
}

unint64_t sub_100154D38()
{
  unint64_t result = qword_10032CF48;
  if (!qword_10032CF48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027F268, &type metadata for AcknowledgeMessageRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CF48);
  }

  return result;
}

unint64_t sub_100154D80()
{
  unint64_t result = qword_10032CF50;
  if (!qword_10032CF50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027F290, &type metadata for AcknowledgeMessageRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CF50);
  }

  return result;
}

uint64_t ClientOverrideRequest.clientOverride.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClientOverrideRequest(0LL) + 20);
  return sub_100152654(v3, a1);
}

uint64_t type metadata accessor for ClientOverrideRequest(uint64_t a1)
{
  uint64_t result = qword_10032CFE0;
  if (!qword_10032CFE0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClientOverrideRequest);
  }
  return result;
}

uint64_t ClientOverrideRequest.logKey.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ClientOverrideRequest(0LL) + 24));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ClientOverrideRequest.logKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ClientOverrideRequest(0LL) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ClientOverrideRequest.logKey.modify())(void)
{
  return AuditToken.rawValue.getter;
}

uint64_t ClientOverrideRequest.until.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ClientOverrideRequest(0LL) + 28);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t ClientOverrideRequest.init(bundleID:clientOverride:until:logKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  uint64_t v12 = (int *)type metadata accessor for ClientOverrideRequest(0LL);
  sub_100154FB0(a3, (uint64_t)a7 + v12[5]);
  uint64_t v13 = (char *)a7 + v12[7];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v13, a4, v14);
  int v16 = (void *)((char *)a7 + v12[6]);
  *int v16 = a5;
  v16[1] = a6;
  return result;
}

uint64_t sub_100154FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032CE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100154FF8()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100155028 + 4 * byte_10027F3D0[*v0]))( 0x4449656C646E7562LL,  0xE800000000000000LL);
}

uint64_t sub_100155028()
{
  return 0x764F746E65696C63LL;
}

uint64_t sub_10015504C()
{
  return 0x79654B676F6CLL;
}

uint64_t sub_100155060()
{
  return 0x6C69746E75LL;
}

uint64_t sub_100155074@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100156F84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100155098(uint64_t a1)
{
  unint64_t v2 = sub_1001552D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001550C0(uint64_t a1)
{
  unint64_t v2 = sub_1001552D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClientOverrideRequest.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032CF58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100085B44(a1, v9);
  unint64_t v11 = sub_1001552D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ClientOverrideRequest.CodingKeys,  &type metadata for ClientOverrideRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v29, v5);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for ClientOverrideRequest(0LL);
    int v15 = (char *)v3 + v14[5];
    char v28 = 1;
    uint64_t v16 = type metadata accessor for ClientOverride(0LL);
    uint64_t v17 = sub_10009D5CC( &qword_10032CE70,  type metadata accessor for ClientOverride,  (uint64_t)&protocol conformance descriptor for ClientOverride);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v28, v5, v16, v17);
    uint64_t v18 = (uint64_t *)((char *)v3 + v14[6]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    char v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v27, v5);
    uint64_t v21 = (char *)v3 + v14[7];
    char v26 = 3;
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = sub_10009D5CC( &qword_10032CD50,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v26, v5, v22, v23);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1001552D0()
{
  unint64_t result = qword_10032CF60;
  if (!qword_10032CF60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027F594, &type metadata for ClientOverrideRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032CF60);
  }

  return result;
}

uint64_t ClientOverrideRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = type metadata accessor for Date(0LL);
  uint64_t v34 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10007B1FC(&qword_10032CE48);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = sub_10007B1FC(&qword_10032CF68);
  uint64_t v7 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ClientOverrideRequest(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100085B44(a1, v14);
  unint64_t v15 = sub_1001552D0();
  uint64_t v39 = v9;
  uint64_t v16 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ClientOverrideRequest.CodingKeys,  &type metadata for ClientOverrideRequest.CodingKeys,  v15,  v14,  v13);
  if (v16) {
    return sub_10007B1A0(a1);
  }
  uint64_t v17 = v7;
  uint64_t v18 = a1;
  char v44 = 0;
  uint64_t v19 = v38;
  uint64_t v20 = (uint64_t)v12;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v38);
  v12[1] = v21;
  uint64_t v22 = type metadata accessor for ClientOverride(0LL);
  char v43 = 1;
  uint64_t v23 = sub_10009D5CC( &qword_10032CE80,  type metadata accessor for ClientOverride,  (uint64_t)&protocol conformance descriptor for ClientOverride);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, &v43, v19, v22, v23);
  uint64_t v24 = v10;
  sub_100154FB0((uint64_t)v6, v20 + *(int *)(v10 + 20));
  char v42 = 2;
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v19);
  char v26 = (uint64_t *)(v20 + *(int *)(v10 + 24));
  *char v26 = v25;
  v26[1] = v27;
  char v41 = 3;
  uint64_t v28 = sub_10009D5CC( &qword_10032CD60,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v29 = v19;
  uint64_t v31 = v36;
  uint64_t v30 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, &v41, v29, v36, v28);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v39, v38);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v20 + *(int *)(v24 + 28), v30, v31);
  sub_1001556B4(v20, v35);
  sub_10007B1A0(v18);
  return sub_1000B6274(v20, type metadata accessor for ClientOverrideRequest);
}