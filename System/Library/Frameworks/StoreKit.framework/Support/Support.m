id sub_100005AB0(uint64_t a1, void *a2)
{
  return [a2 bindString:*(void *)(a1 + 32) atPosition:1];
}

void sub_100005AC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindString:*(void *)(a1 + 32) atPosition:1];
  [v3 bindString:*(void *)(a1 + 40) atPosition:2];
  if (qword_10032DC58 != -1) {
    dispatch_once(&qword_10032DC58, &stru_1002E6948);
  }
  v4 = (os_log_s *)qword_10032DC10;
  if (os_log_type_enabled((os_log_t)qword_10032DC10, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 32);
    int v15 = 138543874;
    uint64_t v16 = v5;
    __int16 v17 = 2114;
    uint64_t v18 = v7;
    __int16 v19 = 2114;
    uint64_t v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Setting StoreKit promotion order %{public}@ for %{public}@:%{public}@",  (uint8_t *)&v15,  0x20u);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  [v3 bindNumber:v8 atPosition:3];

  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
  {
    if (qword_10032DC58 != -1) {
      dispatch_once(&qword_10032DC58, &stru_1002E6948);
    }
    v11 = (os_log_s *)qword_10032DC10;
    if (os_log_type_enabled((os_log_t)qword_10032DC10, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 64);
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138543874;
      uint64_t v16 = v12;
      __int16 v17 = 2114;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      uint64_t v20 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Setting StoreKit promotion visibility %{public}@ for %{public}@:%{public}@",  (uint8_t *)&v15,  0x20u);
    }

    [v3 bindNumber:*(void *)(a1 + 56) atPosition:4];
  }
}

void sub_100005CB8(void *a1, void *a2)
{
  id v3 = a2;
  [v3 bindString:a1[4] atPosition:1];
  [v3 bindString:a1[5] atPosition:2];
  uint64_t v4 = a1[6];
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    if (qword_10032DC58 != -1) {
      dispatch_once(&qword_10032DC58, &stru_1002E6948);
    }
    uint64_t v6 = (os_log_s *)qword_10032DC10;
    if (os_log_type_enabled((os_log_t)qword_10032DC10, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = a1[7];
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      int v10 = 138543874;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      uint64_t v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Setting StoreKit promotion visibility %{public}@ for %{public}@:%{public}@",  (uint8_t *)&v10,  0x20u);
    }

    [v3 bindNumber:a1[6] atPosition:4];
  }
}

id sub_100005F14(uint64_t a1, void *a2)
{
  return [a2 bindString:*(void *)(a1 + 32) atPosition:1];
}

void sub_100005F24(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  v2 = off_100327A10;
  off_100327A10 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032DC10;
  qword_10032DC10 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032DC18;
  qword_10032DC18 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032DC20;
  qword_10032DC20 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  int v10 = (void *)qword_10032DC28;
  qword_10032DC28 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int16 v12 = (void *)qword_10032DC30;
  qword_10032DC30 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_10032DC38;
  qword_10032DC38 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032DC40;
  qword_10032DC40 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032DC48;
  qword_10032DC48 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DC50;
  qword_10032DC50 = (uint64_t)v19;
}

void sub_100006080(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_100006358(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"product_id"]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"promo_order"]);
  signed int v7 = [v6 intValue];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"visibility"]);
  signed int v9 = [v8 intValue];

  if (v5)
  {
    v14[0] = v5;
    v13[0] = off_100328138[0];
    v13[1] = @"ord";
    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v7));
    v14[1] = v10;
    v13[2] = @"vis";
    os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v9));
    v14[2] = v11;
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  3LL));

    [*(id *)(a1 + 32) addObject:v12];
  }
}

void sub_10000674C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  v2 = off_100327A18;
  off_100327A18 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DC60;
  qword_10032DC60 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032DC68;
  qword_10032DC68 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032DC70;
  qword_10032DC70 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  int v10 = (void *)qword_10032DC78;
  qword_10032DC78 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int16 v12 = (void *)qword_10032DC80;
  qword_10032DC80 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_10032DC88;
  qword_10032DC88 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032DC90;
  qword_10032DC90 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032DC98;
  qword_10032DC98 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DCA0;
  qword_10032DCA0 = (uint64_t)v19;
}

void sub_1000068A8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

__CFString *sub_1000068B8(uint64_t a1)
{
  else {
    return off_1002E69B0[a1 - 1];
  }
}

uint64_t sub_1000068DC(uint64_t a1)
{
  if (a1 == 2) {
    return 1LL;
  }
  else {
    return 2LL * (a1 == 3);
  }
}

LABEL_7:
  return v7;
}

  v27 = &__NSArray0__struct;
LABEL_34:

  return v27;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  os_log_t v15 = a4(v9, v10, a3);
  sub_100086004();
  return v15;
}

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  int v10 = *(void *)(v0 + 632);
  os_log_t v11 = sub_100079604(*(void *)(v0 + 616), (uint64_t)qword_10033E1A8);
  sub_1001296C8(v11, v10, type metadata accessor for SKLogger);
  sub_1000E66E0();
  __int16 v12 = sub_100129F38();
  __int16 v14 = v13;
  os_log_t v15 = static os_log_type_t.error.getter(v12);
  uint64_t v16 = sub_100085EE8((uint64_t)v14);
  os_log_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  if (os_log_type_enabled(v17, v15))
  {
    os_log_t v1 = sub_10007B9FC(22LL);
    uint64_t v18 = sub_10007B9FC(64LL);
    *(_DWORD *)os_log_t v1 = 136446466;
    v25[0] = v18;
    v25[1] = 91LL;
    v25[2] = 0xE100000000000000LL;
    sub_10008618C();
    v19._countAndFlagsBits = v12;
    v19._object = v14;
    String.append(_:)(v19);
    sub_100085F14();
    sub_100085FB4();
    *(void *)(v0 + 584) = sub_10008620C(91LL, v20, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v1 + 4);
    sub_10007B980();
    sub_10007D974((uint64_t)v14);
    *(_WORD *)(v1 + 12) = 2082;
    *(void *)(v0 + 560) = sub_1000AB050(38LL, 0x80000001002A4040LL, v25);
    sub_100086194(v0 + 560, v0 + 568);
    sub_100086038((void *)&_mh_execute_header, v17, v15, "%{public}s%{public}s", (uint8_t *)v1);
    sub_100086030(v18, v21, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v18);
    sub_10007B974(v1);

    sub_100085FB4();
  }

  else
  {
    sub_100085E64((uint64_t)v14);
  }

  sub_100085BC4(*(void *)(v0 + 632), type metadata accessor for SKLogger);
  v22 = sub_100129E38();
  sub_100129E74(v1, v23, v24, v22);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100006B78(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 path]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ for '%@'",  v5,  v7));

  uint64_t v9 = ASDErrorWithUnderlyingErrorAndDescription(v6, ASDErrorDomain, 513LL, v8);
  int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

double sub_100006DD4(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 56LL);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100006E40(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) count];
  double Current = CFAbsoluteTimeGetCurrent();
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) lastObject]);
    [v4 doubleValue];
    double v6 = v5;

    *(void *)(*(void *)(a1 + 32) + 48LL) = *(void *)(a1 + 40);
    if ((unint64_t)v2 >= 0x78)
    {
      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "removeObjectAtIndex:", 0, Current - v6);
      [*(id *)(*(void *)(a1 + 32) + 24) removeObjectAtIndex:0];
    }
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 48LL) = *(void *)(a1 + 40);
  }

  os_log_t v7 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", Current));
  [v7 addObject:v8];

  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  [v9 addObject:v10];

  _[*(id *)(a1 + 32) _updateStatisticsFromSnapshots];
}
}

uint64_t sub_1000074F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100008428(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327A28;
  off_100327A28 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DCB0;
  qword_10032DCB0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  double v6 = (void *)qword_10032DCB8;
  qword_10032DCB8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032DCC0;
  qword_10032DCC0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  int v10 = (void *)qword_10032DCC8;
  qword_10032DCC8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int16 v12 = (void *)qword_10032DCD0;
  qword_10032DCD0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_10032DCD8;
  qword_10032DCD8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032DCE0;
  qword_10032DCE0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032DCE8;
  qword_10032DCE8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DCF0;
  qword_10032DCF0 = (uint64_t)v19;
}

id sub_100008584(id a1)
{
  return a1;
}

void sub_1000085A4( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t sub_1000085C8()
{
  return objc_opt_class(v0);
}

id sub_1000085D4(id a1)
{
  return a1;
}

void sub_1000085EC( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_100008610(id a1)
{
  return a1;
}

uint64_t sub_100008618()
{
  return objc_opt_class(v0);
}

uint64_t sub_100008624()
{
  return v0;
}

  ;
}

void sub_10000863C(void *a1, uint64_t a2, void *a3)
{
  id v17 = a1;
  id v5 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    [v17 bindArray:v5 atPosition:a2];
  }

  else
  {
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    {
      [v17 bindDictionary:v5 atPosition:a2];
    }

    else
    {
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString);
      if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
      {
        [v17 bindString:v5 atPosition:a2];
      }

      else if (v5 && (uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSNull), (objc_opt_isKindOfClass(v5, v9) & 1) == 0))
      {
        uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDate);
        if ((objc_opt_isKindOfClass(v5, v10) & 1) != 0)
        {
          [v5 timeIntervalSinceReferenceDate];
        }

        else
        {
          uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSData);
          if ((objc_opt_isKindOfClass(v5, v11) & 1) != 0)
          {
            [v17 bindData:v5 atPosition:a2];
            goto LABEL_10;
          }

          uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSUUID);
          if ((objc_opt_isKindOfClass(v5, v12) & 1) != 0)
          {
            [v17 bindUUID:v5 atPosition:a2];
            goto LABEL_10;
          }

          uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSURL);
          if ((objc_opt_isKindOfClass(v5, v13) & 1) != 0)
          {
            __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v5 absoluteString]);
            [v17 bindString:v14 atPosition:a2];

            goto LABEL_10;
          }

          id v15 = v5;
          uint64_t v16 = (const char *)[v15 objCType];
          if (strcmp(v16, "d") && strcmp(v16, "f"))
          {
            objc_msgSend(v17, "bindInt64:atPosition:", objc_msgSend(v15, "longLongValue"), a2);
            goto LABEL_10;
          }

          [v15 doubleValue];
        }

        objc_msgSend(v17, "bindDouble:atPosition:", a2);
      }

      else
      {
        [v17 bindNullAtPosition:a2];
      }
    }
  }

LABEL_10:
}

  return v9;
}

  return v7;
}
}

  sub_1000E961C(v11, type metadata accessor for Client.Server);
  return 1LL;
}

  sub_10007B1A0(v5);
  return v1;
}

__CFString *sub_100008878(uint64_t a1)
{
  if (!a1) {
    return &stru_1002FBA48;
  }
  id v2 = -[NSMutableString initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableString), "initWithCapacity:", 3 * a1 + 1);
  -[NSMutableString appendString:](v2, "appendString:", @"?");
  uint64_t v3 = a1 - 1;
  if (a1 != 1)
  {
    do
    {
      -[NSMutableString appendString:](v2, "appendString:", @", ?");
      --v3;
    }

    while (v3);
  }

  id v4 = -[NSMutableString copy](v2, "copy");

  return (__CFString *)v4;
}

void sub_100008CD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100008CF0(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100008D7C;
  v7[3] = &unk_1002E6AB0;
  uint64_t v10 = *(void *)(a1 + 56);
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v5;
}

BOOL sub_100008D7C(void *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  BOOL result = +[SQLiteEntity _insertValues:intoTable:withPersistentID:onConnection:]( &OBJC_CLASS___SQLiteEntity,  "_insertValues:intoTable:withPersistentID:onConnection:",  a3,  a2,  a1[6],  a1[4]);
  if (!result)
  {
    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 0;
    *a4 = 1;
  }

  return result;
}

void sub_100008FE8(_Unwind_Exception *a1)
{
}

BOOL sub_100009004(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [(id)objc_opt_class(v2) databaseTable];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 _deleteRowFromTable:v4 usingColumn:@"ROWID"];

  id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) foreignDatabaseTablesToDelete];
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  id v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v19;
    while (2)
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)i);
        uint64_t v12 = (void *)objc_opt_class(*(void *)(a1 + 32));
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "foreignKeyColumnForTable:", v11, (void)v18));
        if (v13)
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _deleteRowFromTable:v11 usingColumn:v13];
          if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
          {

            goto LABEL_12;
          }
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

LABEL_12:
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = *(void **)(v14 + 8);
    *(void *)(v14 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0LL;

    BOOL v16 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != 0;
  }

  else
  {
    BOOL v16 = 0LL;
  }

  return v16;
}
}

  [(id)qword_10032E3B8 unlock];
  return v5;
}

  if (qword_10032EDA8 != -1) {
    dispatch_once(&qword_10032EDA8, &stru_1002E9D10);
  }
  v25 = (void *)qword_10032ED88;
  if (os_log_type_enabled((os_log_t)qword_10032ED88, OS_LOG_TYPE_ERROR))
  {
    v29 = v25;
    v30 = [v8 length];
    *(_DWORD *)buf = 138544130;
    v36 = v32;
    v37 = 2048;
    v38 = v30;
    v39 = 2114;
    v40 = v9;
    v41 = 2114;
    v42 = v19;
    _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "[%{public}@] Error writing receipt (%ld bytes) to %{public}@: %{public}@",  buf,  0x2Au);
  }

  if (a6)
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to write receipt to URL: %@",  v9));
    v27 = ASDErrorWithUnderlyingErrorAndDescription(v19, ASDErrorDomain, 500LL, v26);
    *a6 = (id)objc_claimAutoreleasedReturnValue(v27);
  }

  __int128 v20 = 0;
LABEL_19:

  return v20;
}

  objc_sync_exit(v2);
}

  if (v5 == v2 && v6 == v3)
  {
    id v8 = 1;
    id v3 = v6;
  }

  else
  {
    id v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

void sub_1000091D4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  id v5 = @"SQLiteUserInfoKeyPersistentID";
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a1 + 32)));
  id v6 = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v2 postNotificationName:@"SQLiteDidDeleteEntityNotification" object:0 userInfo:v4];
}

void sub_100009398( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000093B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
}

void sub_100009744(id *a1, void *a2, uint64_t a3)
{
  id v5 = a1[6];
  id v6 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 disambiguatedSQLForProperty:v6]);
  if (a3) {
    objc_msgSend(a1[4], "appendString:", @", ");
  }
  [a1[4] appendString:v8];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] joinClauseForProperty:v6]);

  if (v7) {
    [a1[5] addObject:v7];
  }
}

void sub_1000097E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10000988C;
  v5[3] = &unk_1002E6BC0;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  [v4 enumerateRowsUsingBlock:v5];
}

void sub_10000988C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  if (v8)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10000994C;
    v9[3] = &unk_1002E6B98;
    id v7 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v8;
    [v7 enumerateObjectsUsingBlock:v9];
  }

  objc_autoreleasePoolPop(v6);
}

void sub_10000994C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 40);
  id v6 = a2;
  id v7 = sub_10005A458(v5, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v6];
}

void sub_100009B78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100009B94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _copyTableClusteredValuesWithValues:*(void *)(a1 + 40)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100009C3C;
  v7[3] = &unk_1002E6C60;
  uint64_t v11 = *(void *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a1 + 56);
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v5;
}

void sub_100009C3C(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) foreignKeyColumnForTable:v7]);
  if (v9) {
    uint64_t v10 = (__CFString *)v9;
  }
  else {
    uint64_t v10 = @"ROWID";
  }
  uint64_t v31 = 0LL;
  v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  char v34 = 1;
  if (([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {
    uint64_t v11 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"SELECT 1 FROM ");
    -[NSMutableString appendString:](v11, "appendString:", v7);
    -[NSMutableString appendString:](v11, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v11, "appendString:", v10);
    -[NSMutableString appendString:](v11, "appendString:", @" =  ? LIMIT 1;");
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void **)(v12 + 8);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100009F84;
    v30[3] = &unk_1002E6B48;
    v30[4] = v12;
    v30[5] = &v31;
    [v13 executeQuery:v11 withResults:v30];
  }

  if (*((_BYTE *)v32 + 24))
  {
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v15 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"UPDATE ");
    -[NSMutableString appendString:](v15, "appendString:", v7);
    -[NSMutableString appendString:](v15, "appendString:", @" SET ");
    v28[0] = 0LL;
    v28[1] = v28;
    v28[2] = 0x2020000000LL;
    char v29 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100009FE0;
    v24[3] = &unk_1002E6C10;
    v27 = v28;
    BOOL v16 = v15;
    v25 = v16;
    id v17 = v14;
    v26 = v17;
    [v8 enumerateKeysAndObjectsUsingBlock:v24];
    -[NSMutableString appendString:](v16, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v16, "appendString:", v7);
    -[NSMutableString appendString:](v16, "appendString:", @".");
    -[NSMutableString appendString:](v16, "appendString:", v10);
    -[NSMutableString appendString:](v16, "appendString:", @" = ?;");
    __int128 v18 = *(void **)(*(void *)(a1 + 40) + 8LL);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10000A078;
    v21[3] = &unk_1002E6C38;
    __int128 v19 = v17;
    uint64_t v20 = *(void *)(a1 + 40);
    v22 = v19;
    uint64_t v23 = v20;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v18 executeStatement:v16 error:0 bindings:v21];

    _Block_object_dispose(v28, 8);
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = +[SQLiteEntity _insertValues:intoTable:withPersistentID:onConnection:]( &OBJC_CLASS___SQLiteEntity,  "_insertValues:intoTable:withPersistentID:onConnection:",  v8,  v7,  *(void *)(*(void *)(a1 + 40) + 16LL),  *(void *)(*(void *)(a1 + 40) + 8LL));
  }

  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) ^ 1;
  _Block_object_dispose(&v31, 8);
}

void sub_100009F4C(_Unwind_Exception *a1)
{
}

void sub_100009F84(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
}

void sub_100009FE0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", @", ");
  }
  [*(id *)(a1 + 32) appendString:v6];
  [*(id *)(a1 + 32) appendString:@" = ?"];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  [*(id *)(a1 + 40) addObject:v5];
}

void sub_10000A078(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    uint64_t v8 = 1LL;
    do
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = v8;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_10000863C(v3, (uint64_t)v9 + v10, *(void **)(*((void *)&v12 + 1) + 8LL * (void)v9));
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v8 = (v10 + (_DWORD)v9);
    }

    while (v6);
    uint64_t v11 = (v10 + (_DWORD)v9);
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  objc_msgSend(v3, "bindInt64:atPosition:", *(void *)(*(void *)(a1 + 40) + 16), v11, (void)v12);
}

void sub_10000A594(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindInt64:*(void *)(a1 + 40) atPosition:1];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    uint64_t v8 = 2LL;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v11 + 1) + 8 * (void)v9),  (void)v11));
        sub_10000863C(v3, (uint64_t)v9 + v8, v10);

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      uint64_t v8 = (v8 + (_DWORD)v9);
    }

    while (v6);
  }
}

void sub_10000A7B0(id *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (([v10 isEqualToString:@"ROWID"] & 1) == 0)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseTableForProperty:v10]);
    if (v6)
    {
      id v7 = (id)v6;
      id v8 = (id)objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseColumnForProperty:v10]);
    }

    else
    {
      id v8 = v10;
      id v7 = a1[4];
    }

    uint64_t v9 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([a1[5] objectForKey:v7]);
    if (!v9)
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      [a1[5] setObject:v9 forKey:v7];
    }

    -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v5, v8);
  }
}

id sub_10000A96C(uint64_t a1, void *a2)
{
  return [a2 bindInt64:*(void *)(*(void *)(a1 + 32) + 16) atPosition:1];
}

void sub_10000ABD4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327A90;
  off_100327A90 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DD00;
  qword_10032DD00 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032DD08;
  qword_10032DD08 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032DD10;
  qword_10032DD10 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032DD18;
  qword_10032DD18 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032DD20;
  qword_10032DD20 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032DD28;
  qword_10032DD28 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  BOOL v16 = (void *)qword_10032DD30;
  qword_10032DD30 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032DD38;
  qword_10032DD38 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DD40;
  qword_10032DD40 = (uint64_t)v19;
}

void sub_10000AE50(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___NSCache);
  id v2 = (void *)qword_10032DD50;
  qword_10032DD50 = (uint64_t)v1;
}

void sub_10000AEB8(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.storekit.AMSMetricsQueue", v4);
  os_log_t v3 = (void *)qword_10032DD60;
  qword_10032DD60 = (uint64_t)v2;
}

void sub_10000B6BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_t v7 = v6;
  if (v5)
  {
    [*(id *)(a1 + 32) finishWithResult:v5];
  }

  else if (v6)
  {
    [*(id *)(a1 + 32) finishWithError:v6];
  }

  else
  {
    if (qword_10032DDB8 != -1) {
      dispatch_once(&qword_10032DDB8, &stru_1002E6D80);
    }
    id v8 = (void *)qword_10032DD88;
    if (os_log_type_enabled((os_log_t)qword_10032DD88, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      id v10 = *(void **)(v9 + 40);
      os_log_t v11 = v8;
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 logUUID]);
      int v16 = 138543618;
      uint64_t v17 = v9;
      __int16 v18 = 2114;
      os_log_t v19 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@][%{public}@]: Purchase completed without a result or error.",  (uint8_t *)&v16,  0x16u);
    }

    os_log_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = ASDErrorWithDescription(ASDErrorDomain, 500LL, @"Purchase completed without a result or error.");
    os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    [v13 finishWithError:v15];
  }
}

void sub_10000B8D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  dispatch_queue_t v2 = off_100327A98;
  off_100327A98 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DD70;
  qword_10032DD70 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032DD78;
  qword_10032DD78 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032DD80;
  qword_10032DD80 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032DD88;
  qword_10032DD88 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032DD90;
  qword_10032DD90 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032DD98;
  qword_10032DD98 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032DDA0;
  qword_10032DDA0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032DDA8;
  qword_10032DDA8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DDB0;
  qword_10032DDB0 = (uint64_t)v19;
}

void sub_10000BAA0(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  dispatch_queue_t v2 = (void *)qword_10032DDC0;
  qword_10032DDC0 = (uint64_t)v1;
}

void sub_10000BC08(_Unwind_Exception *a1)
{
}

void sub_10000BC74(_Unwind_Exception *a1)
{
}

LABEL_15:
  v22 = objc_alloc(&OBJC_CLASS___InAppDownloadTask);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v9 info]);
  v24 = (void *)objc_claimAutoreleasedReturnValue([v8 callerBundleID]);
  v25 = -[InAppDownloadTask initWithDownloadID:info:bundleID:containerID:]( v22,  "initWithDownloadID:info:bundleID:containerID:",  v7,  v23,  v24,  0LL);

  [v9 setTask:v25];
  objc_initWeak(&location, self);
  uint64_t v33 = _NSConcreteStackBlock;
  char v34 = 3221225472LL;
  v35 = sub_10000C120;
  v36 = &unk_1002E6DA8;
  objc_copyWeak(&v37, &location);
  -[InAppDownloadTask setStatusBlock:](v25, "setStatusBlock:", &v33);
  if (qword_10032DE18 != -1) {
    dispatch_once(&qword_10032DE18, &stru_1002E6DC8);
  }
  v26 = off_100327AA0;
  if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_DEFAULT))
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(-[InAppDownloadTask logKey](v25, "logKey", v33, v34, v35, v36));
    *(_DWORD *)buf = 138543618;
    v40 = v27;
    v41 = 2114;
    v42 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v26,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Starting downloads for ID %{public}@",  buf,  0x16u);
  }

  -[NSOperationQueue addOperation:](self->_downloadQueue, "addOperation:", v25);
  objc_destroyWeak(&v37);
  objc_destroyWeak(&location);
  v28 = 1;
  os_log_t v11 = v25;
LABEL_26:
  -[NSLock unlock](self->_downloadLock, "unlock", v33, v34, v35, v36);

  return v28;
}

  os_log_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
  int v16 = (void *)objc_claimAutoreleasedReturnValue([v17 localeIdentifier]);

  if (qword_10032EC98 != -1) {
    dispatch_once(&qword_10032EC98, &stru_1002E9BD8);
  }
  __int16 v18 = (os_log_s *)qword_10032EC60;
  if (os_log_type_enabled((os_log_t)qword_10032EC60, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v19 = *(void *)(&self->super.super._success + 2);
    *(_DWORD *)buf = 138543618;
    v24 = v19;
    v25 = 2114;
    v26 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Defaulting media products to device locale: %{public}@",  buf,  0x16u);
  }

  result |= 0x800uLL;
  if ((a5 & 1) != 0) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0) {
    result |= 0x2000uLL;
  }
  if ((a7 & 1) != 0) {
    return result | 0x4000;
  }
  return result;
}

        v29[0] = v9;
        os_log_t v17 = v9[2];
        int v16 = v9[3];
        if (v17 >= v16 >> 1)
        {
          sub_100150FDC((char *)(v16 > 1), v17 + 1, 1);
          os_log_t v9 = (void *)v29[0];
        }

        v9[2] = v17 + 1;
        __int16 v18 = &v9[2 * v17];
        v18[4] = v14;
        v18[5] = v15;
        id v4 = v28;
        __int128 v12 = Substring.index(after:)(v12, a1, a2, a3, v28);
        if (!--v10) {
          goto LABEL_18;
        }
      }
    }

    __break(1u);
  }

  else
  {
LABEL_18:
    v29[0] = v9;
    os_log_t v19 = sub_10007B1FC(&qword_10032CBB8);
    uint64_t v20 = sub_10014AD60();
    __int128 v21 = String.init<A>(_:)(v29, v19, v20);
    uint64_t v23 = v22;
    v29[0] = v21;
    v29[1] = v22;
    swift_bridgeObjectRetain(v22);
    v24 = String.count.getter(v21, v23);
    swift_bridgeObjectRelease();
    v25 = v24 & 3;
    if (v24 <= 0) {
      v25 = -(-v24 & 3);
    }
    if (v25)
    {
      v26._countAndFlagsBits = 61LL;
      v26._object = (void *)0xE100000000000000LL;
      v27 = String.init(repeating:count:)(v26, 4 - v25);
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
    }

    return (char *)v29[0];
  }

  return result;
}

void sub_10000C0F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10000C120(uint64_t a1, void *a2)
{
  dispatch_queue_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _notifyObserversDownloadStatusChanged:v3];
}

LABEL_19:
  -[NSLock unlock](self->_downloadLock, "unlock", *(_OWORD *)v19, *(void *)&v19[16]);
}

  -[NSLock unlock](self->_downloadLock, "unlock", *(_OWORD *)v19, *(void *)&v19[16]);
}

  if (v16)
  {
    if (-[Client isClip](v16, "isClip"))
    {
      if (qword_10032E410 != -1) {
        dispatch_once(&qword_10032E410, &stru_1002E8AB0);
      }
      if (os_log_type_enabled((os_log_t)qword_10032E3E0, OS_LOG_TYPE_ERROR)) {
        sub_10025E6A8();
      }
      os_log_t v19 = ASDErrorWithDescription(ASDErrorDomain, 1051LL, @"In-app purchases not allowed in App Clip");
      uint64_t v20 = (LoadUnfinishedInAppTransactionsTask *)objc_claimAutoreleasedReturnValue(v19);
      v9[2](v9, 0LL, v20);
    }

    else
    {
      uint64_t v20 = -[LoadUnfinishedInAppTransactionsTask initWithClient:]( objc_alloc(&OBJC_CLASS___LoadUnfinishedInAppTransactionsTask),  "initWithClient:",  v16);
      -[LoadUnfinishedInAppTransactionsTask setForceServerCheck:](v20, "setForceServerCheck:", v6);
      objc_initWeak((id *)buf, self);
      objc_initWeak(&location, v20);
      v22 = _NSConcreteStackBlock;
      uint64_t v23 = 3221225472LL;
      v24 = sub_1000358E8;
      v25 = &unk_1002E8780;
      objc_copyWeak(&v27, &location);
      objc_copyWeak(&v28, (id *)buf);
      v26 = v9;
      -[LoadUnfinishedInAppTransactionsTask setCompletionBlock:](v20, "setCompletionBlock:", &v22);
      -[NSOperationQueue addOperation:](self->_paymentQueue, "addOperation:", v20, v22, v23, v24, v25);

      objc_destroyWeak(&v28);
      objc_destroyWeak(&v27);
      objc_destroyWeak(&location);
      objc_destroyWeak((id *)buf);
    }

    goto LABEL_33;
  }

  return v16;
}

    id v10 = (v14 - 1) & v14;
    __int128 v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_20:
    int v16 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v12);
    __int16 v18 = *v16;
    os_log_t v17 = v16[1];
    sub_10007B1C0(*(void *)(a3 + 56) + 32 * v12, (uint64_t)v27);
    v25[0] = v18;
    v25[1] = v17;
    sub_10007B1C0((uint64_t)v27, (uint64_t)&v26);
    swift_bridgeObjectRetain_n(v17, 2LL);
    sub_1000BDBE4(v18, v17, a4);
    LOBYTE(v1_Block_object_dispose((const void *)(v1 - 136), 8) = v19;
    sub_100085298((uint64_t)v25, &qword_10032A6A8);
    sub_10007B1A0(v27);
    BOOL result = swift_bridgeObjectRelease(v17);
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      if (__OFADD__(v24++, 1LL))
      {
        __break(1u);
LABEL_24:
        __int128 v21 = sub_1000C31BC(v23, a2, v24, a3);
        swift_bridgeObjectRelease(a4);
        return v21;
      }
    }
  }

  os_log_t v15 = v13 + 3;
  if (v15 >= v28) {
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14)
  {
    id v6 = v15;
    goto LABEL_19;
  }

  while (1)
  {
    id v6 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v6 >= v28) {
      goto LABEL_24;
    }
    uint64_t v14 = *(void *)(v7 + 8 * v6);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

      v194 = (v47 - 1) & v47;
      v195 = (char *)v48;
      v45 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_20:
      sub_10009BEC0(*(void *)(a2 + 48) + 40 * v45, (uint64_t)v209);
      v50 = *(void *)(a2 + 56) + 32 * v45;
      v51 = v193;
      sub_10007B1C0(v50, (uint64_t)v193);
      v206[0] = v209[0];
      v206[1] = v209[1];
      v207 = v210;
      sub_1000853B0(v51, v40);
      sub_10009BEC0((uint64_t)v206, (uint64_t)v205);
      sub_10007B1C0((uint64_t)v40, (uint64_t)v41);
      if ((swift_dynamicCast(v203, v205, &type metadata for AnyHashable, &type metadata for String, 6LL) & 1) != 0) {
        break;
      }
      sub_10007B1A0(v41);
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      v52 = sub_100079604(v192, (uint64_t)qword_10033E1A8);
      v53 = v189;
      sub_10007961C(v52, v189);
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v13, v53, v10);
      sub_10009BEC0((uint64_t)v206, (uint64_t)v205);
      sub_10007B1C0((uint64_t)v40, (uint64_t)v41);
      sub_1000F3C5C((uint64_t)v205, (uint64_t)v203, &qword_10032A2B8);
      memcpy(v202, v205, sizeof(v202));
      sub_1000F3B98(v35);
      v54 = sub_1000F3B98(v35);
      v55 = (os_log_s *)Logger.logObject.getter(v54);
      v56 = v13;
      v57 = static os_log_type_t.error.getter(v55);
      if (os_log_type_enabled(v55, v57))
      {
        v58 = swift_slowAlloc(32LL, -1LL);
        v59 = swift_slowAlloc(96LL, -1LL);
        v201 = v59;
        *(_DWORD *)v58 = v182.n128_u32[0];
        *(void *)(v58 + 4) = sub_10007A488(0xD000000000000011LL, v179 | 0x8000000000000000LL, &v201);
        *(_WORD *)(v58 + 12) = 2082;
        v60 = *(void *)(v35 + 40);
        v61 = *(void *)(v35 + 48);
        swift_bridgeObjectRetain(v61);
        *(void *)(v58 + 14) = sub_10007A488(v60, v61, &v201);
        swift_bridgeObjectRelease(v61);
        sub_1000F3BFC(v35);
        sub_1000F3BFC(v35);
        *(_WORD *)(v58 + 22) = 2080;
        sub_10009BEC0((uint64_t)v203, (uint64_t)v196);
        v62 = v181;
        sub_10007B1C0((uint64_t)v180, (uint64_t)v181);
        v199[0] = v196[0];
        v199[1] = v196[1];
        v200 = v197;
        v63 = sub_10007B1A0(v62);
        v64 = AnyHashable.description.getter(v63);
        v66 = v65;
        sub_100087388((uint64_t)v199);
        *(void *)(v58 + 24) = sub_10007A488(v64, v66, &v201);
        v67 = v66;
        v44 = v185;
        swift_bridgeObjectRelease(v67);
        sub_100087418((uint64_t)v202, &qword_10032A2B8);
        sub_100087418((uint64_t)v203, &qword_10032A2B8);
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v57,  "[%{public}s][%{public}s]: Invalid key format: %s",  (uint8_t *)v58,  0x20u);
        swift_arrayDestroy(v59, 3LL, (char *)&type metadata for Any + 8);
        v68 = v59;
        a2 = v183;
        swift_slowDealloc(v68, -1LL, -1LL);
        v69 = v58;
        id v10 = v184;
        swift_slowDealloc(v69, -1LL, -1LL);
      }

      else
      {

        sub_100087418((uint64_t)v202, &qword_10032A2B8);
        sub_100087418((uint64_t)v203, &qword_10032A2B8);
        sub_1000F3BFC(v35);
        sub_1000F3BFC(v35);
      }

      (*(void (**)(char *, uint64_t))(v44 + 8))(v56, v10);
      sub_100087418((uint64_t)v206, &qword_10032A2B8);
      os_log_t v13 = v56;
      os_log_t v15 = v188;
      v41 = v190;
      v40 = v191;
      v39 = v194;
      v43 = v195;
      if (v194) {
        goto LABEL_5;
      }
    }

    v70 = v203[0];
    v71 = v203[1];
    sub_10007B1A0(v41);
    if (qword_100328B38 != -1) {
      swift_once(&qword_100328B38, sub_1000EF5E0);
    }
    v72 = qword_10033E1A0;
    v73 = *(void *)(qword_10033E1A0 + 16);
    v74 = v70;
    if (!v73) {
      goto LABEL_37;
    }
    v75 = *(void *)(qword_10033E1A0 + 32);
    v76 = *(void *)(qword_10033E1A0 + 40);
    if (v75 == v70 && v76 == v71) {
      goto LABEL_49;
    }
    v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v70, v71, 0LL);
    v74 = v70;
    if ((v78 & 1) != 0) {
      goto LABEL_49;
    }
    if (v73 == 1) {
      goto LABEL_37;
    }
    v95 = *(void *)(v72 + 48);
    v96 = *(void *)(v72 + 56);
    v97 = v95 == v70 && v96 == v71;
    if (v97
      || (BOOL result = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v96, v70, v71, 0LL), v74 = v70, (result & 1) != 0))
    {
LABEL_49:
      v99 = v169;
      v35 = v178;
      sub_1000F3054(v74, v71, (uint64_t)v40, v169);
      swift_bridgeObjectRelease(v71);
      v100 = v170;
      if (sub_10007D824(v99, 1LL, v170) == 1)
      {
        sub_100087418((uint64_t)v206, &qword_10032A2B8);
        sub_100087418(v99, &qword_10032B730);
        id v10 = v184;
      }

      else
      {
        v101 = v168;
        v102 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 32);
        v103 = v166;
        v102(v166, v99, v100);
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v167, v103, v100);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        id v10 = v184;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          v177 = (void *)sub_100130EA8(0, v177[2] + 1LL, 1, (uint64_t)v177);
        }
        v106 = v177[2];
        v105 = v177[3];
        v41 = v190;
        if (v106 >= v105 >> 1) {
          v177 = (void *)sub_100130EA8(v105 > 1, v106 + 1, 1, (uint64_t)v177);
        }
        v107 = (char *)v177;
        v177[2] = v106 + 1;
        v108 = v168;
        v109 = v170;
        v102( &v107[((*(unsigned __int8 *)(v108 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80))
              + *(void *)(v168 + 72) * v106],
          (uint64_t)v167,
          v170);
        (*(void (**)(char *, uint64_t))(v108 + 8))(v166, v109);
        sub_100087418((uint64_t)v206, &qword_10032A2B8);
        v35 = v178;
        v40 = v191;
      }

      goto LABEL_56;
    }

    if (v73 == 2)
    {
LABEL_37:
      if ((*(_BYTE *)(v178 + 64) & 1) != 0) {
        goto LABEL_49;
      }
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      v79 = sub_100079604(v192, (uint64_t)qword_10033E1A8);
      v80 = v160;
      sub_10007961C(v79, v160);
      (*(void (**)(char *, uint64_t, uint64_t))(v185 + 32))(v15, v80, v184);
      v35 = v178;
      sub_1000F3B98(v178);
      sub_1000F3B98(v35);
      swift_bridgeObjectRetain(v71);
      v82 = (os_log_s *)Logger.logObject.getter(v81);
      v83 = static os_log_type_t.error.getter(v82);
      v157 = v82;
      LODWORD(v156) = v83;
      if (os_log_type_enabled(v82, v83))
      {
        v84 = swift_slowAlloc(32LL, -1LL);
        v155 = swift_slowAlloc(96LL, -1LL);
        v205[0] = v155;
        *(_DWORD *)v84 = v182.n128_u32[0];
        *(void *)(v84 + 4) = sub_10007A488(0xD000000000000011LL, v159, v205);
        *(_WORD *)(v84 + 12) = 2082;
        v85 = v41;
        v86 = v40;
        v87 = v13;
        v88 = *(void *)(v178 + 40);
        v89 = *(void *)(v178 + 48);
        swift_bridgeObjectRetain(v89);
        v90 = v88;
        os_log_t v13 = v87;
        v40 = v86;
        v41 = v85;
        *(void *)(v84 + 14) = sub_10007A488(v90, v89, v205);
        v91 = v89;
        a2 = v183;
        swift_bridgeObjectRelease(v91);
        sub_1000F3BFC(v178);
        sub_1000F3BFC(v178);
        *(_WORD *)(v84 + 22) = 2080;
        swift_bridgeObjectRetain(v71);
        *(void *)(v84 + 24) = sub_10007A488(v70, v71, v205);
        swift_bridgeObjectRelease_n(v71, 3LL);
        v92 = v157;
        _os_log_impl( (void *)&_mh_execute_header,  v157,  (os_log_type_t)v156,  "[%{public}s][%{public}s]: Ignoring query parameter for unentitled client: %s",  (uint8_t *)v84,  0x20u);
        v93 = v155;
        swift_arrayDestroy(v155, 3LL, v158);
        swift_slowDealloc(v93, -1LL, -1LL);
        v94 = v84;
        v35 = v178;
        swift_slowDealloc(v94, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v71, 2LL);

        sub_1000F3BFC(v35);
        sub_1000F3BFC(v35);
      }

      id v10 = v184;
      (*(void (**)(char *, uint64_t))(v185 + 8))(v15, v184);
      sub_100087418((uint64_t)v206, &qword_10032A2B8);
LABEL_56:
      v39 = v194;
      v43 = v195;
      continue;
    }

    break;
  }

  v110 = (uint64_t *)(v72 + 72);
  v111 = 2LL;
  while (!__OFADD__(v111, 1LL))
  {
    v112 = *(v110 - 1);
    v113 = *v110;
    if (v112 == v74 && v113 == v71) {
      goto LABEL_49;
    }
    v156 = v111 + 1;
    v157 = (os_log_s *)v111;
    BOOL result = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v113, v70, v71, 0LL);
    v74 = v70;
    if ((result & 1) != 0) {
      goto LABEL_49;
    }
    v110 += 2;
    v111 = (uint64_t)v157 + 1;
    if (v156 == v73) {
      goto LABEL_37;
    }
  }

  __break(1u);
  return result;
}

void sub_10000D2E4(_Unwind_Exception *a1)
{
}

void sub_10000D350(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  dispatch_queue_t v2 = off_100327AA0;
  off_100327AA0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DDD0;
  qword_10032DDD0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032DDD8;
  qword_10032DDD8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032DDE0;
  qword_10032DDE0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032DDE8;
  qword_10032DDE8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032DDF0;
  qword_10032DDF0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032DDF8;
  qword_10032DDF8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032DE00;
  qword_10032DE00 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032DE08;
  qword_10032DE08 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DE10;
  qword_10032DE10 = (uint64_t)v19;
}

uint64_t sub_10000DA6C(uint64_t a1)
{
  return 1LL;
}

BOOL sub_10000DCA0(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned __int8 v6 = [v5 fileExistsAtPath:v4];

  return v6 ^ 1;
}

void sub_10000DDF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  dispatch_queue_t v2 = off_100327AA8;
  off_100327AA8 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DE28;
  qword_10032DE28 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned __int8 v6 = (void *)qword_10032DE30;
  qword_10032DE30 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032DE38;
  qword_10032DE38 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032DE40;
  qword_10032DE40 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032DE48;
  qword_10032DE48 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032DE50;
  qword_10032DE50 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032DE58;
  qword_10032DE58 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032DE60;
  qword_10032DE60 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DE68;
  qword_10032DE68 = (uint64_t)v19;
}

  ;
}

void sub_10000E79C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  dispatch_queue_t v2 = off_100327AB0;
  off_100327AB0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DE78;
  qword_10032DE78 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned __int8 v6 = (void *)qword_10032DE80;
  qword_10032DE80 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032DE88;
  qword_10032DE88 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032DE90;
  qword_10032DE90 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032DE98;
  qword_10032DE98 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032DEA0;
  qword_10032DEA0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032DEA8;
  qword_10032DEA8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032DEB0;
  qword_10032DEB0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032DEB8;
  qword_10032DEB8 = (uint64_t)v19;
}

  ;
}

void sub_10000E944(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___TaskQueue);
  dispatch_queue_t v2 = (void *)qword_10032DEC8;
  qword_10032DEC8 = (uint64_t)v1;

  [(id)qword_10032DEC8 setName:@"com.apple.storekit.TaskQueue.networkQueue"];
}

void sub_10000EB70(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToWeakObjectsMapTable"));
  dispatch_queue_t v2 = (void *)qword_10032DED8;
  qword_10032DED8 = v1;

  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  unsigned __int8 v6 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
  dispatch_queue_t v4 = dispatch_queue_create("Receipt managers queue", v6);
  os_log_t v5 = (void *)qword_10032DEE0;
  qword_10032DEE0 = (uint64_t)v4;
}

uint64_t sub_10000EBE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000EBF0(uint64_t a1)
{
}

void sub_10000EBF8(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)qword_10032DED8;
  dispatch_queue_attr_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestBundleID]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned __int8 v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    os_log_t v7 = -[ReceiptManager initWithClient:]( objc_alloc(&OBJC_CLASS___ReceiptManager),  "initWithClient:",  *(void *)(a1 + 32));
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    os_log_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = (void *)qword_10032DED8;
    os_log_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v13 = (id)objc_claimAutoreleasedReturnValue([v11 requestBundleID]);
    [v10 setObject:v12 forKey:v13];
  }

id sub_10000EEF0()
{
  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  return (id)qword_10032DF18;
}

id sub_10000EF30(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  uint64_t v4 = (os_log_s *)qword_10032DF18;
  if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v9 = 138543618;
    uint64_t v10 = v5;
    __int16 v11 = 2114;
    uint64_t v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Clearing transactions for %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  if ([v3 removeReceiptsForBundleID:*(void *)(a1 + 32)]
    && [v3 removeStatusesForBundleID:*(void *)(a1 + 32)]
    && [v3 clearLegacyTransactionsLastUpdatedForBundleID:*(void *)(a1 + 32)])
  {
    id v7 = [v3 removeCachedLegacyTransactionsForBundleID:*(void *)(a1 + 32)];
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

void sub_10000F48C(_Unwind_Exception *a1)
{
}

void sub_10000FA2C(_Unwind_Exception *a1)
{
}

void sub_10000FA50(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v11 requestBundleID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleVersion]);
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v4 appTransactionForBundleID:v5 bundleVersion:v7 accountToken:*(void *)(a1 + 40)]);

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10000FB0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) syncLock]);
    [v5 unlock];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10000FBE0;
    v8[3] = &unk_1002E6F50;
    v8[4] = v4;
    id v9 = *(id *)(a1 + 56);
    [v4 _appTransactionSyncWithDialogContext:v6 logKey:v7 completionHandler:v8];
  }
}

void sub_10000FBE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 syncLock]);
  [v7 unlock];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10000FC58(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 syncLock]);
  [v7 unlock];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10000FE88(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
  else {
    return _[*(id *)(a1 + 32) _manualSyncWithLogKey:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
  }
}

id sub_10001001C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 requestBundleID]);
  if ([v3 removeReceiptsForBundleID:v5])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
    id v8 = [v3 removeStatusesForBundleID:v7];
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void sub_1000101AC(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID lib_shortLogKey](&OBJC_CLASS___NSUUID, "lib_shortLogKey"));
  if (*(void *)(a1 + 32)) {
    id v3 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @" ProductID: %@",  *(void *)(a1 + 32)));
  }
  else {
    id v3 = &stru_1002FBA48;
  }
  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  id v4 = (void *)qword_10032DF18;
  if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 40);
    id v6 = v4;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 requestBundleID]);
    *(_DWORD *)buf = 138543874;
    __int128 v21 = v2;
    __int16 v22 = 2114;
    uint64_t v23 = v8;
    __int16 v24 = 2114;
    v25 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Enumerating current transactions for %{public}@%{public}@",  buf,  0x20u);
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000103B8;
  void v13[3] = &unk_1002E7040;
  id v9 = *(void **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v15 = v9;
  id v10 = *(id *)(a1 + 48);
  os_log_t v17 = v3;
  id v18 = v10;
  id v16 = v2;
  id v19 = *(id *)(a1 + 56);
  id v11 = v3;
  id v12 = v2;
  [v14 _checkTransactionAgeAndSyncWithLogKey:v12 completionHandler:v13];
}

void sub_1000103B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v21 = 0LL;
  __int16 v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  uint64_t v24 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) databaseStore]);
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472LL;
  id v15 = sub_1000105D0;
  id v16 = &unk_1002E7018;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v17 = v5;
  uint64_t v18 = v6;
  uint64_t v20 = &v21;
  id v19 = *(id *)(a1 + 64);
  [v4 readUsingSession:&v13];

  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  uint64_t v7 = (os_log_s *)(id)qword_10032DF18;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = v22[3];
    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "client", v13, v14, v15, v16, v17, v18));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 requestBundleID]);
    uint64_t v12 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138544130;
    uint64_t v26 = v8;
    __int16 v27 = 2048;
    uint64_t v28 = v9;
    __int16 v29 = 2114;
    v30 = v11;
    __int16 v31 = 2114;
    uint64_t v32 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Finished enumerating %li current transactions for %{public}@%{public}@",  buf,  0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  _Block_object_dispose(&v21, 8);
}

void sub_1000105AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000105D0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100010694;
  v10[3] = &unk_1002E6FF0;
  __int128 v9 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v9;
  *(_OWORD *)id v11 = v9;
  [v5 enumerateCurrentReceiptsForProductID:v3 bundleID:v7 usingBlock:v10];
}

uint64_t sub_100010694(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100010798(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID lib_shortLogKey](&OBJC_CLASS___NSUUID, "lib_shortLogKey"));
  if (*(void *)(a1 + 32)) {
    uint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @" ProductID: %@",  *(void *)(a1 + 32)));
  }
  else {
    uint64_t v3 = &stru_1002FBA48;
  }
  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  id v4 = (void *)qword_10032DF18;
  if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(void **)(a1 + 40);
    uint64_t v6 = v4;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 requestBundleID]);
    *(_DWORD *)buf = 138543874;
    uint64_t v21 = v2;
    __int16 v22 = 2114;
    uint64_t v23 = v8;
    __int16 v24 = 2114;
    v25 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Enumerating transactions for %{public}@%{public}@",  buf,  0x20u);
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000109A4;
  void v13[3] = &unk_1002E7040;
  __int128 v9 = *(void **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v15 = v9;
  id v10 = *(id *)(a1 + 48);
  id v17 = v3;
  id v18 = v10;
  id v16 = v2;
  id v19 = *(id *)(a1 + 56);
  id v11 = v3;
  id v12 = v2;
  [v14 _checkTransactionAgeAndSyncWithLogKey:v12 completionHandler:v13];
}

void sub_1000109A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v21 = 0LL;
  __int16 v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  uint64_t v24 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) databaseStore]);
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472LL;
  id v15 = sub_100010BBC;
  id v16 = &unk_1002E7018;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v17 = v5;
  uint64_t v18 = v6;
  uint64_t v20 = &v21;
  id v19 = *(id *)(a1 + 64);
  [v4 readUsingSession:&v13];

  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  uint64_t v7 = (os_log_s *)(id)qword_10032DF18;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = v22[3];
    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "client", v13, v14, v15, v16, v17, v18));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 requestBundleID]);
    uint64_t v12 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138544130;
    uint64_t v26 = v8;
    __int16 v27 = 2048;
    uint64_t v28 = v9;
    __int16 v29 = 2114;
    v30 = v11;
    __int16 v31 = 2114;
    uint64_t v32 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Finished enumerating %li transactions for %{public}@%{public}@",  buf,  0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  _Block_object_dispose(&v21, 8);
}

void sub_100010B98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100010BBC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100010C80;
  v10[3] = &unk_1002E6FF0;
  __int128 v9 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v9;
  *(_OWORD *)id v11 = v9;
  [v5 enumerateReceiptsForProductID:v3 bundleID:v7 usingBlock:v10];
}

uint64_t sub_100010C80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100010D5C(uint64_t a1)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID lib_shortLogKey](&OBJC_CLASS___NSUUID, "lib_shortLogKey"));
  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  uint64_t v3 = (void *)qword_10032DF18;
  if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = v3;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
    *(_DWORD *)buf = 138543618;
    id v16 = v2;
    __int16 v17 = 2114;
    uint64_t v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Enumerating unfinished transactions for %{public}@",  buf,  0x16u);
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100010F00;
  v10[3] = &unk_1002E70B8;
  id v8 = *(void **)(a1 + 40);
  id v11 = *(id *)(a1 + 32);
  id v12 = v2;
  id v13 = v8;
  id v14 = *(id *)(a1 + 48);
  id v9 = v2;
  [v11 _checkTransactionAgeAndSyncWithLogKey:v9 completionHandler:v10];
}

void sub_100010F00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  uint64_t v16 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) databaseStore]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000110F8;
  v10[3] = &unk_1002E7090;
  void v10[4] = *(void *)(a1 + 32);
  id v12 = &v13;
  id v11 = *(id *)(a1 + 48);
  [v4 readUsingSession:v10];

  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  id v5 = (os_log_s *)(id)qword_10032DF18;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v14[3];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 requestBundleID]);
    *(_DWORD *)buf = 138543874;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v6;
    __int16 v21 = 2114;
    __int16 v22 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Finished enumerating %li unfinished transactions for %{public}@",  buf,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  _Block_object_dispose(&v13, 8);
}

void sub_1000110D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000110F8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000111B0;
  v9[3] = &unk_1002E6FF0;
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  *(_OWORD *)id v10 = v8;
  [v4 enumerateUnfinishedTransactionReceiptsForBundleID:v6 usingBlock:v9];
}

uint64_t sub_1000111B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001143C(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  dispatch_queue_t v2 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000114FC;
  v6[3] = &unk_1002E7108;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  [v3 _checkTransactionAgeAndSyncWithLogKey:v4 completionHandler:v6];
}

void sub_1000114FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    id v4 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v5 = *(void **)(a1 + 40);
      id v7 = v4;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 requestBundleID]);
      id v10 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 48);
      *(_DWORD *)buf = 138544130;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2114;
      v62 = v10;
      LOWORD(v63) = 2114;
      *(void *)((char *)&v63 + 2) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Error syncing transactions while checking introductory offer eligibility for %{public}@/%{public}@. Result is based on last known data. %{public}@",  buf,  0x2Au);
    }
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  v62 = sub_10000EBE0;
  *(void *)&__int128 v63 = sub_10000EBF0;
  *((void *)&v63 + 1) = 0LL;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) databaseStore]);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472LL;
  v49[2] = sub_100011AAC;
  v49[3] = &unk_1002E6F28;
  v52 = buf;
  id v12 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 40);
  id v50 = v12;
  uint64_t v51 = v13;
  [v11 readUsingSession:v49];

  id v14 = objc_alloc(&OBJC_CLASS___IntroOfferEligibilityCheck);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 requestBundleID]);
  id v18 = -[IntroOfferEligibilityCheck initForGroupID:bundleID:storefrontID:logKey:]( v14,  "initForGroupID:bundleID:storefrontID:logKey:",  v15,  v17,  *(void *)(a1 + 56),  *(void *)(a1 + 32));
  id v19 = [v18 eligibilityBasedOnStatus:*(void *)(*(void *)&buf[8] + 40)];

  if (!v19)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v20 = (os_log_s *)(id)qword_10032DF18;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 requestBundleID]);
      uint64_t v28 = *(void *)(a1 + 48);
      *(_DWORD *)v53 = 138544130;
      uint64_t v54 = v25;
      __int16 v55 = 2114;
      v56 = v27;
      __int16 v57 = 2114;
      uint64_t v58 = v28;
      __int16 v59 = 1026;
      int v60 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "[%{public}@] %{public}@/%{public}@ introductory offer eligibility: %{public}d",  v53,  0x26u);
    }

    goto LABEL_16;
  }

  if (v19 == (id)1)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v20 = (os_log_s *)(id)qword_10032DF18;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 requestBundleID]);
      uint64_t v24 = *(void *)(a1 + 48);
      *(_DWORD *)v53 = 138544130;
      uint64_t v54 = v21;
      __int16 v55 = 2114;
      v56 = v23;
      __int16 v57 = 2114;
      uint64_t v58 = v24;
      __int16 v59 = 1026;
      int v60 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "[%{public}@] %{public}@/%{public}@ introductory offer eligibility: %{public}d",  v53,  0x26u);
    }

LABEL_16:
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    goto LABEL_22;
  }

  uint64_t v45 = 0LL;
  v46 = &v45;
  uint64_t v47 = 0x2020000000LL;
  char v48 = 0;
  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) databaseStore]);
  v38 = _NSConcreteStackBlock;
  uint64_t v39 = 3221225472LL;
  v40 = sub_100011B38;
  v41 = &unk_1002E6F28;
  v44 = &v45;
  id v30 = *(id *)(a1 + 48);
  uint64_t v31 = *(void *)(a1 + 40);
  id v42 = v30;
  uint64_t v43 = v31;
  [v29 readUsingSession:&v38];

  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  uint64_t v32 = (os_log_s *)(id)qword_10032DF18;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    uint64_t v33 = *(void *)(a1 + 32);
    char v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "client", v38, v39, v40, v41));
    v35 = (void *)objc_claimAutoreleasedReturnValue([v34 requestBundleID]);
    uint64_t v36 = *(void *)(a1 + 48);
    int v37 = *((unsigned __int8 *)v46 + 24);
    *(_DWORD *)v53 = 138544130;
    uint64_t v54 = v33;
    __int16 v55 = 2114;
    v56 = v35;
    __int16 v57 = 2114;
    uint64_t v58 = v36;
    __int16 v59 = 1026;
    int v60 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "[%{public}@] %{public}@/%{public}@ introductory offer eligibility: %{public}d",  v53,  0x26u);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  _Block_object_dispose(&v45, 8);
LABEL_22:

  _Block_object_dispose(buf, 8);
}
}

      uint64_t v16 = sub_1000188D8(self->_database);
      id v14 = objc_claimAutoreleasedReturnValue(v16);
LABEL_17:
      id v12 = (void *)v14;
      goto LABEL_18;
    }

    id v7 = 1;
LABEL_8:
    id v11 = v18;
    objc_autoreleasePoolPop(v9);
  }

  while (!v11);
  id v12 = 0LL;
LABEL_19:
  if (a3 && (v7 & 1) == 0) {
    *a3 = v12;
  }

  return v7 & 1;
}

  return v7;
}
      }

      id v4 = [v2 countByEnumeratingWithState:&v18 objects:v23 count:16];
    }

    while (v4);
  }
}

      id v9 = 0LL;
      return v9;
    }

    id v11 = v10;
    if (getxattr(a1, name, v10, v7, 0, 1) == -1)
    {
      free(v11);
      if (a3)
      {
        id v14 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  *__error(),  0LL);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        uint64_t v16 = ASDErrorWithUnderlyingErrorAndDescription(v15, ASDErrorDomain, 500LL, @"Failed to read attribute");
        *a3 = (id)objc_claimAutoreleasedReturnValue(v16);
      }

      goto LABEL_16;
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  v11,  v7,  1LL));
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  }

  return v9;
}

  sub_10007B1A0(v87);
  sub_1001420F8(v39, v80);
  return sub_10007B1A0(v28);
}

void sub_100011A68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_100011AAC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue([v4 client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v10 requestBundleID]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 subscriptionStatusForSubscriptionGroupID:v3 bundleID:v6]);

  uint64_t v8 = *(void *)(a1[6] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100011B38(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 requestBundleID]);
  LOBYTE(v3) = [v5 hasTransactionWithSubscriptionOfferType:1 forSubscriptionGroupID:v3 bundleID:v6];

  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v3;
}

void sub_100011C88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100011CA0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 requestBundleID]);
  LOBYTE(v3) = [v5 isTransactionFinishedForID:v3 bundleID:v6];

  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v3;
}

void sub_100011DE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100011E00(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 requestBundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 lastUpdatedForBundleID:v5]);

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1000121A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_1000121D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained receiptString]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  if (!v4)
  {
    if ([v3 length])
    {
      id v5 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v3,  0LL);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"customURL"]);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        id v12 = 0LL;
        +[WriteReceipt writeReceiptData:toURL:logKey:error:]( &OBJC_CLASS___WriteReceipt,  "writeReceiptData:toURL:logKey:error:",  v5,  v6,  v7,  &v12);
        id v4 = v12;
      }

      else
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) client]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 callerBundleURL]);
        uint64_t v10 = *(void *)(a1 + 40);
        id v11 = 0LL;
        +[WriteReceipt writeReceiptData:forBundleURL:logKey:error:]( &OBJC_CLASS___WriteReceipt,  "writeReceiptData:forBundleURL:logKey:error:",  v5,  v9,  v10,  &v11);
        id v4 = v11;
      }
    }

    else
    {
      id v4 = 0LL;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_1000123EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  if ([v3 setFinishedForTransactionID:v4 bundleID:v6 logKey:*(void *)(a1 + 48)])
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 requestBundleID]);
    id v10 = [v3 removeCachedLegacyTransactionWithID:v7 forBundleID:v9];
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

void sub_100012554(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v20 = 0LL;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x3032000000LL;
  uint64_t v23 = sub_10000EBE0;
  uint64_t v24 = sub_10000EBF0;
  id v25 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] databaseStore]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10001270C;
  v16[3] = &unk_1002E6F28;
  id v19 = &v20;
  id v5 = a1[5];
  id v6 = a1[4];
  id v17 = v5;
  id v18 = v6;
  [v4 readUsingSession:v16];

  if ([a1[4] _needsSubscriptionStatusSyncForStatusDictionary:v21[5] logKey:v3])
  {
    id v7 = a1[4];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    id v10[2] = sub_100012798;
    v10[3] = &unk_1002E71D0;
    id v11 = v3;
    id v8 = a1[5];
    id v9 = a1[4];
    id v12 = v8;
    id v13 = v9;
    uint64_t v15 = &v20;
    id v14 = a1[6];
    [v7 _syncSubscriptionStatusWithReason:3 logKey:v11 completionHandler:v10];
  }

  else
  {
    (*((void (**)(void))a1[6] + 2))();
  }

  _Block_object_dispose(&v20, 8);
}

void sub_1000126F0(_Unwind_Exception *a1)
{
}

void sub_10001270C(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  id v5 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue([v4 client]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v10 requestBundleID]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 subscriptionStatusForSubscriptionGroupID:v3 bundleID:v6]);

  uint64_t v8 = *(void *)(a1[6] + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100012798(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v4 = (os_log_s *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      uint64_t v15 = v5;
      __int16 v16 = 2114;
      uint64_t v17 = v6;
      __int16 v18 = 2114;
      id v19 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Error syncing subscription status for %{public}@. Returning last known status. %{public}@",  buf,  0x20u);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) databaseStore]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  id v10[2] = sub_10001290C;
  v10[3] = &unk_1002E6F28;
  uint64_t v13 = *(void *)(a1 + 64);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  id v11 = v8;
  uint64_t v12 = v9;
  [v7 readUsingSession:v10];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10001290C(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  id v5 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue([v4 client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v10 requestBundleID]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 subscriptionStatusForSubscriptionGroupID:v3 bundleID:v6]);

  uint64_t v8 = *(void *)(a1[6] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100012A40(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v19 = 0LL;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000LL;
  char v22 = 0;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] databaseStore]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100012BD4;
  v15[3] = &unk_1002E7248;
  v15[4] = a1[4];
  __int16 v18 = &v19;
  id v5 = v3;
  id v16 = v5;
  id v17 = a1[5];
  [v4 readUsingSession:v15];

  if (*((_BYTE *)v20 + 24))
  {
    (*((void (**)(void))a1[6] + 2))();
  }

  else
  {
    id v6 = a1[4];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    id v10[2] = sub_100012D2C;
    v10[3] = &unk_1002E72C0;
    id v7 = v5;
    id v8 = a1[4];
    id v9 = a1[5];
    id v11 = v7;
    id v12 = v8;
    id v13 = v9;
    id v14 = a1[6];
    [v6 _syncSubscriptionStatusWithReason:3 logKey:v7 completionHandler:v10];
  }

  _Block_object_dispose(&v19, 8);
}

void sub_100012BBC(_Unwind_Exception *a1)
{
}

void sub_100012BD4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_100012CA4;
  v9[3] = &unk_1002E7220;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  void v9[4] = v7;
  v9[1] = 3221225472LL;
  id v10 = v8;
  id v11 = *(id *)(a1 + 48);
  [v4 enumerateSubscriptionStatusForBundleID:v6 usingBlock:v9];
}

void sub_100012CA4(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
    goto LABEL_5;
  }
  if (![*(id *)(a1 + 32) _needsSubscriptionStatusSyncForStatusDictionary:v5 logKey:*(void *)(a1 + 40)])
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_6;
  }

  *a3 = 1;
LABEL_6:
}

void sub_100012D2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    id v4 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v5 = *(void **)(a1 + 40);
      uint64_t v7 = v4;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 requestBundleID]);
      *(_DWORD *)buf = 138543874;
      uint64_t v18 = v6;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 2114;
      id v22 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Error syncing subscription status for %{public}@. Returning last known status. %{public}@",  buf,  0x20u);
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) databaseStore]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100012ECC;
  v15[3] = &unk_1002E7298;
  id v11 = *(void **)(a1 + 48);
  v15[4] = *(void *)(a1 + 40);
  id v16 = v11;
  [v10 readUsingSession:v15];

  (*(void (**)(void, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v3,  v12,  v13,  v14);
}

void sub_100012ECC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100012F78;
  v7[3] = &unk_1002E7270;
  id v8 = *(id *)(a1 + 40);
  [v4 enumerateSubscriptionStatusForBundleID:v6 usingBlock:v7];
}

uint64_t sub_100012F78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100013098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000130B0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 requestBundleID]);
  unsigned __int8 v6 = [v4 cacheIncludesFinishedConsumablesForBundleID:v5];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
}

void sub_1000131F4(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) syncLock]);
  [v3 unlock];

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_100013318(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) syncLock]);
  [v3 unlock];

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_1000134D0(_Unwind_Exception *a1)
{
}

void sub_1000134F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained receiptString]);
  if ([v3 length])
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v4 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v5 = *(void **)(a1 + 40);
      id v7 = v4;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 requestBundleID]);
      *(_DWORD *)buf = 138543618;
      uint64_t v23 = v6;
      __int16 v24 = 2114;
      id v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Caching app transaction for %{public}@",  buf,  0x16u);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 currentAccountToken]);

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) databaseStore]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1000136F8;
    v18[3] = &unk_1002E71A8;
    id v13 = v3;
    uint64_t v14 = *(void *)(a1 + 40);
    id v19 = v13;
    uint64_t v20 = v14;
    id v21 = v11;
    id v15 = v11;
    [v12 modifyUsingTransaction:v18];
  }

  uint64_t v16 = *(void *)(a1 + 48);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  (*(void (**)(uint64_t, void *, void *))(v16 + 16))(v16, v3, v17);
}

id sub_1000136F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 requestBundleVersion]);
  id v10 = [v5 setAppTransaction:v3 forBundleID:v7 bundleVersion:v9 token:*(void *)(a1 + 48)];

  return v10;
}

void sub_100013CC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    id v8 = (os_log_s *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_ERROR)) {
      sub_10025BAE8(a1, (uint64_t)v7, v8);
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 selectedActionIdentifier]);
    unsigned int v10 = [v9 isEqualToString:@"OK"];

    if (v10)
    {
      if (qword_10032DF38 != -1) {
        dispatch_once(&qword_10032DF38, &stru_1002E7588);
      }
      id v11 = (os_log_s *)qword_10032DF18;
      if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        uint64_t v22 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Simulated authentication did complete",  buf,  0xCu);
      }

      id v7 = 0LL;
    }

    else
    {
      if (qword_10032DF38 != -1) {
        dispatch_once(&qword_10032DF38, &stru_1002E7588);
      }
      id v13 = (void *)qword_10032DF18;
      if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        id v15 = v13;
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 selectedActionIdentifier]);
        *(_DWORD *)buf = 138543618;
        uint64_t v22 = v14;
        __int16 v23 = 2114;
        __int16 v24 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Simulated authentication did cancel (action id: %{public}@)",  buf,  0x16u);
      }

      uint64_t v17 = ASDErrorDomain;
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v5 selectedActionIdentifier]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"The tester selected %@",  v18));
      uint64_t v20 = ASDErrorWithTitleAndMessage(v17, 907LL, @"Simulated authentication cancelled", v19);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v20);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100013F4C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    id v8 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[4];
      id v9 = (void *)a1[5];
      id v11 = v8;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 client]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requestBundleID]);
      int v16 = 138543874;
      uint64_t v17 = v10;
      __int16 v18 = 2114;
      id v19 = v13;
      __int16 v20 = 2114;
      id v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Authenticate failed for %{public}@ - %{public}@",  (uint8_t *)&v16,  0x20u);
    }
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 account]);

    if (v14)
    {
      id v7 = 0LL;
    }

    else
    {
      uint64_t v15 = ASDErrorWithDescription(ASDErrorDomain, 530LL, @"AMSAuthenticateRequest failed with no error.");
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v15);
    }
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

LABEL_55:
    uint64_t v39 = 0LL;
LABEL_80:

LABEL_81:
    v81[0] = _NSConcreteStackBlock;
    v81[1] = 3221225472LL;
    v81[2] = sub_100014FEC;
    v81[3] = &unk_1002E7310;
    v81[4] = self;
    v82 = v7;
    -[ReceiptManager _syncTransactionsAndSubscriptionStatusWithReason:logKey:completionHandler:]( self,  "_syncTransactionsAndSubscriptionStatusWithReason:logKey:completionHandler:",  v39,  v6,  v81);

    goto LABEL_82;
  }

  if (!*(void *)(*(void *)&buf[8] + 40LL))
  {
    if (v11)
    {
      if (qword_10032DF38 != -1) {
        dispatch_once(&qword_10032DF38, &stru_1002E7588);
      }
      __int16 v29 = (os_log_s *)(id)qword_10032DF18;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        char v48 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
        v49 = (void *)objc_claimAutoreleasedReturnValue([v48 requestBundleID]);
        *(_DWORD *)v95 = 138543618;
        v96 = v6;
        v97 = 2114;
        v98 = (uint64_t)v49;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Skipping transaction sync for %{public}@ with no history.",  v95,  0x16u);
      }

      goto LABEL_68;
    }

    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    __int16 v29 = (os_log_s *)(id)qword_10032DF18;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v52 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
      v53 = (void *)objc_claimAutoreleasedReturnValue([v52 requestBundleID]);
      *(_DWORD *)v95 = 138543618;
      v96 = v6;
      v97 = 2114;
      v98 = (uint64_t)v53;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Forcing transaction sync for %{public}@ because there is no history",  v95,  0x16u);
    }

    goto LABEL_55;
  }

  if (!v90[5])
  {
    -[ReceiptManager clearTransactions](self, "clearTransactions");
    if (v11)
    {
      if (qword_10032DF38 != -1) {
        dispatch_once(&qword_10032DF38, &stru_1002E7588);
      }
      __int16 v29 = (os_log_s *)(id)qword_10032DF18;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        id v50 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v50 requestBundleID]);
        *(_DWORD *)v95 = 138543618;
        v96 = v6;
        v97 = 2114;
        v98 = (uint64_t)v51;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Skipping transaction sync for %{public}@ where the cached history has no token.",  v95,  0x16u);
      }

      goto LABEL_68;
    }

    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    __int16 v29 = (os_log_s *)(id)qword_10032DF18;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v61 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
      v62 = (void *)objc_claimAutoreleasedReturnValue([v61 requestBundleID]);
      *(_DWORD *)v95 = 138543618;
      v96 = v6;
      v97 = 2114;
      v98 = (uint64_t)v62;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Forcing transaction sync for %{public}@ because the cached history has no token",  v95,  0x16u);
    }

        v110 = sub_1000D75A8();
        goto LABEL_56;
      }

      v142 = v180;
      if (v180 != 3705)
      {
        v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
        v145 = v144;
        v146 = sub_1000D750C(v2);
        if (v147)
        {
          v179 = &type metadata for String;
          *(void *)&v178 = v146;
          *((void *)&v178 + 1) = v147;
        }

        else
        {
          sub_1000D75A8();
        }

        sub_10012A9E0((uint64_t)&v178, v143, v145);
        v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(ASDServerErrorDomain);
        v160 = v159;
        v115 = v182;
        v161 = objc_allocWithZone(&OBJC_CLASS___NSError);
        sub_1000D7674();
        v117 = v158;
        v118 = v160;
        v119 = v142;
        goto LABEL_43;
      }
    }

    else
    {
      v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
      v123 = v122;
      sub_1000D6CAC(v121, v122);
      v125 = v124;
      swift_bridgeObjectRelease(v123);
      if ((v125 & 1) == 0)
      {
        _convertErrorToNSError(_:)(v2);
        v148 = (id)sub_1000D7690();
        sub_1000D766C();
        if (v2) {
          goto LABEL_70;
        }
        __break(1u);
        goto LABEL_55;
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
      sub_1000D7654();
      v126 = (void *)_convertErrorToNSError(_:)(v2);
      v127 = (id)ASDErrorWithSafeUserInfo(v126);

      if (v127)
      {
        v128 = swift_getErrorValue(v127, v176, &v174);
        v129 = v174;
        v130 = v175;
        v179 = v175;
        v138 = sub_1000D7688( v128,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v166,  (uint64_t)v167,  v168,  v169,  v170,  (uint64_t)v171);
        (*(void (**)(void *, uint64_t, void *))(*(v130 - 1) + 16LL))(v138, v129, v130);
      }

      else
      {
        sub_1000D75A8();
      }

      sub_1000D75B4((uint64_t)&v178);
      v151 = sub_100093DE4(v150, "code");
      if (v151 == (id)12)
      {
        sub_10008622C();
        v140 = v153;
        v141 = 512LL;
        goto LABEL_69;
      }

      if (v151 == (id)100)
      {
        if ((sub_1000D6988(v2) & 1) != 0)
        {
          v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
          v156 = v155;
          v157 = objc_allocWithZone(&OBJC_CLASS___NSError);
          v117 = v154;
          v118 = v156;
          v119 = -1004LL;
          v120 = 0LL;
          goto LABEL_44;
        }

        sub_10008622C();
        v140 = v162;
        v141 = 530LL;
LABEL_69:
        v177 = v141;
        v163 = v182;
        v164 = sub_1000B25DC();
        swift_bridgeObjectRetain(v163);
        _BridgedStoredNSError.init(_:userInfo:)(&v177, v163, v140, v164);
        uint64_t v2 = (id)v178;
        goto LABEL_70;
      }

      if (v151 != (id)511)
      {
LABEL_57:
        sub_10008622C();
        v140 = v149;
        v141 = 500LL;
        goto LABEL_69;
      }
    }

    sub_10008622C();
    v140 = v152;
    v141 = 1052LL;
    goto LABEL_69;
  }

  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
  v64 = v63;
  v65 = sub_1000D750C(v2);
  if (v66)
  {
    v179 = &type metadata for String;
    *(void *)&v178 = v65;
    *((void *)&v178 + 1) = v66;
  }

  else
  {
    sub_1000D75A8();
  }

  sub_10012A9E0((uint64_t)&v178, v62, v64);
  v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(ASDServerErrorDomain);
  v113 = v112;
  v114 = sub_100093DE4(v111, "code");
  v115 = v182;
  v116 = objc_allocWithZone(&OBJC_CLASS___NSError);
  sub_1000D7674();
  v117 = v111;
  v118 = v113;
  v119 = (uint64_t)v114;
LABEL_43:
  v120 = (uint64_t)v115;
LABEL_44:
  uint64_t v2 = sub_10011947C(v117, v118, v119, v120);
LABEL_70:
  swift_bridgeObjectRelease(v182);
  return v2;
}

LABEL_79:
    uint64_t v39 = 5LL;
    goto LABEL_80;
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
  __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v28 currentAccountToken]);

  id v30 = v90[5];
  if (!v29)
  {
    if (v30)
    {
      if (qword_10032DF38 != -1) {
        dispatch_once(&qword_10032DF38, &stru_1002E7588);
      }
      uint64_t v54 = (os_log_s *)(id)qword_10032DF18;
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
        v56 = (void *)objc_claimAutoreleasedReturnValue([v55 requestBundleID]);
        *(_DWORD *)v95 = 138543618;
        v96 = v6;
        v97 = 2114;
        v98 = (uint64_t)v56;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Removing all transactions %{public}@ because there is no account",  v95,  0x16u);
      }

      -[ReceiptManager clearTransactions](self, "clearTransactions");
    }

    goto LABEL_68;
  }

  if ((-[os_log_s isEqualToString:](v29, "isEqualToString:", v30) & 1) == 0)
  {
    -[ReceiptManager clearTransactions](self, "clearTransactions");
    if (v11)
    {
      if (qword_10032DF38 != -1) {
        dispatch_once(&qword_10032DF38, &stru_1002E7588);
      }
      __int16 v57 = (os_log_s *)(id)qword_10032DF18;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
        __int16 v59 = (void *)objc_claimAutoreleasedReturnValue([v58 requestBundleID]);
        *(_DWORD *)v95 = 138543618;
        v96 = v6;
        v97 = 2114;
        v98 = (uint64_t)v59;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Skipping transaction sync for %{public}@ where the tokens don't match",  v95,  0x16u);
      }

LABEL_68:
      goto LABEL_69;
    }

    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    __int128 v63 = (os_log_s *)(id)qword_10032DF18;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      v64 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
      v65 = (void *)objc_claimAutoreleasedReturnValue([v64 requestBundleID]);
      *(_DWORD *)v95 = 138543618;
      v96 = v6;
      v97 = 2114;
      v98 = (uint64_t)v65;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Forcing transaction sync for %{public}@ because the tokens don't match",  v95,  0x16u);
    }

    goto LABEL_79;
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
  v80 = (void *)objc_claimAutoreleasedReturnValue([v31 bag]);

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[BagKey transactionReceiptsMaxAge](&OBJC_CLASS____TtC9storekitd6BagKey, "transactionReceiptsMaxAge"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v80 integerForKey:v32]);

  v83 = 0LL;
  char v34 = (void *)objc_claimAutoreleasedReturnValue([v33 valueWithError:&v83]);
  v35 = (os_log_s *)v83;
  v79 = v34;
  if (v35)
  {
    uint64_t v36 = v35;
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    int v37 = (os_log_s *)(id)qword_10032DF18;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v75 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
      v76 = objc_claimAutoreleasedReturnValue([v75 requestBundleID]);
      *(_DWORD *)v95 = 138543874;
      v96 = v6;
      v97 = 2114;
      v98 = v76;
      v99 = 2114;
      v100 = v36;
      v77 = (void *)v76;
      _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "[%{public}@] Error getting max age for %{public}@ transaction history: %{public}@",  v95,  0x20u);
    }

LABEL_24:
    LOBYTE(v3_Block_object_dispose(va, 8) = 0;
LABEL_25:
    uint64_t v39 = 0LL;
    goto LABEL_26;
  }

  if (v11)
  {
    v66 = sub_10000EEF0();
    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v67 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
      v68 = (void *)objc_claimAutoreleasedReturnValue([v67 requestBundleID]);
      *(_DWORD *)v95 = 138543618;
      v96 = v6;
      v97 = 2114;
      v98 = (uint64_t)v68;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Skipping transaction sync for %{public}@ lastUpdated check",  v95,  0x16u);
    }

    goto LABEL_24;
  }

  v69 = *(void **)(*(void *)&buf[8] + 40LL);
  [v34 doubleValue];
  uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "dateByAddingTimeInterval:"));
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  v38 = [v70 compare:v36] == (id)1;

  if (!v38) {
    goto LABEL_25;
  }
  v71 = sub_10000EEF0();
  log = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
  {
    v72 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager client](self, "client"));
    v73 = objc_claimAutoreleasedReturnValue([v72 requestBundleID]);
    *(_DWORD *)v95 = 138543618;
    v96 = v6;
    v97 = 2114;
    v98 = v73;
    v74 = (void *)v73;
    _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Forcing transaction sync for %{public}@ because lastUpdated is older than maxAge",  v95,  0x16u);
  }

  uint64_t v39 = 3LL;
LABEL_26:

  if (v38) {
    goto LABEL_81;
  }
LABEL_69:
  int v60 = (void *)objc_claimAutoreleasedReturnValue(-[ReceiptManager syncLock](self, "syncLock", log));
  [v60 unlock];

  (*((void (**)(id, void))v7 + 2))(v7, 0LL);
LABEL_82:
  _Block_object_dispose(&v85, 8);
  _Block_object_dispose(&v89, 8);

  _Block_object_dispose(buf, 8);
}

void sub_100014E60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_100014EE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v4 lastUpdatedForBundleID:v6]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 requestBundleID]);
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v4 accountTokenForBundleID:v11]);
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  id v16 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v16 requestBundleID]);
  LOBYTE(v11) = [v4 cacheIncludesFinishedConsumablesForBundleID:v15];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = (_BYTE)v11;
}

void sub_100014FEC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 syncLock]);
  [v4 unlock];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000152C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000152E8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  unsigned __int8 v7 = [v4 removeCachedLegacyTransactionsForBundleID:v6];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v7;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_1000155CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000155E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 requestBundleID]);
  unsigned __int8 v6 = [v4 cacheIncludesFinishedConsumablesForBundleID:v5];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
}

void sub_100015820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100015850(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue( [v4 transactionHashesForBundleID:v6 totalCount:*(void *)(*(void *)(a1 + 48) + 8) + 24]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v14 requestBundleID]);
  uint64_t v11 = objc_claimAutoreleasedReturnValue([v4 statusHashesForBundleID:v10]);

  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_10001592C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) syncLock]);
  [v4 unlock];

  if (!v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_1000159E4;
    v5[3] = &unk_1002E7400;
    void v5[4] = *(void *)(a1 + 32);
    __int128 v6 = *(_OWORD *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
    +[AnalyticsEvent sendLazy:](&OBJC_CLASS____TtC9storekitd22ManualSyncSuccessEvent, "sendLazy:", v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000159E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _configureMetricsEventWithBeforeTransactionCount:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) beforeTransactions:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) beforeStatuses:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

void sub_100015BE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100015C14(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [v4 transactionHashesForBundleID:v6 totalCount:*(void *)(*(void *)(a1 + 48) + 8) + 24]);
  id v8 = [v7 mutableCopy];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v16 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v16 requestBundleID]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 statusHashesForBundleID:v11]);

  id v13 = [v12 mutableCopy];
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;
}

void sub_100015F88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100015FAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  unsigned __int8 v7 = [v4 clearLegacyTransactionsLastUpdatedForBundleID:v6];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v7;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100016198( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1000161B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) client]);
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v3 setTransactionInfo:v4 unfinishedIDs:v5 forBu ndleID:v7 logKey:*(void *)(a1 + 56) containsSubscriptions:*(void *)(a1 + 80)];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) client]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 currentAccountToken]);

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    __int16 v24 = (void *)qword_10032DF18;
    if (!os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v27 = *(void **)(a1 + 48);
    uint64_t v28 = v24;
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v27 client]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 requestBundleID]);
    int v39 = 138543874;
    uint64_t v40 = v26;
    __int16 v41 = 2114;
    uint64_t v42 = v25;
    __int16 v43 = 2114;
    v44 = v30;
    uint64_t v31 = "[%{public}@] Not setting transaction revision to %{public}@ for %{public}@ because write was unsuccessful.";
LABEL_25:
    _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&v39, 0x20u);

    goto LABEL_23;
  }

  if (![*(id *)(a1 + 64) length])
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v32 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_ERROR)) {
      sub_10025BB64((uint64_t *)(a1 + 56), (void **)(a1 + 48), v32);
    }
    goto LABEL_23;
  }

  if ([v9 length])
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v10 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 64);
      id v13 = *(void **)(a1 + 48);
      uint64_t v14 = v10;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 client]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 requestBundleID]);
      int v39 = 138543874;
      uint64_t v40 = v12;
      __int16 v41 = 2114;
      uint64_t v42 = v11;
      __int16 v43 = 2114;
      v44 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Setting transaction revision to %{public}@ for %{public}@",  (uint8_t *)&v39,  0x20u);
    }

    uint64_t v17 = *(void *)(a1 + 64);
    uint64_t v18 = *(unsigned __int8 *)(a1 + 88);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) client]);
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 requestBundleID]);
    unsigned __int8 v21 = [v3 setRevision:v17 includesFinishedConsumables:v18 token:v9 forBundleID:v20];
    uint64_t v22 = *(void *)(*(void *)(a1 + 72) + 8LL);
    if (*(_BYTE *)(v22 + 24)) {
      unsigned __int8 v23 = v21;
    }
    else {
      unsigned __int8 v23 = 0;
    }
    *(_BYTE *)(v22 + 24) = v23;

    goto LABEL_23;
  }

  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  uint64_t v33 = (void *)qword_10032DF18;
  if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_ERROR))
  {
    uint64_t v37 = *(void *)(a1 + 56);
    uint64_t v36 = *(void *)(a1 + 64);
    v38 = *(void **)(a1 + 48);
    uint64_t v28 = v33;
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v38 client]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 requestBundleID]);
    int v39 = 138543874;
    uint64_t v40 = v37;
    __int16 v41 = 2114;
    uint64_t v42 = v36;
    __int16 v43 = 2114;
    v44 = v30;
    uint64_t v31 = "[%{public}@] Not setting transaction revision to %{public}@ for %{public}@ because accountToken is empty";
    goto LABEL_25;
  }

LABEL_23:
  uint64_t v34 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  return v34;
}
}

                if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
                {
                  sub_100130DF4(0, v7[2] + 1LL, 1, (uint64_t)v7);
                  unsigned __int8 v7 = v23;
                }

                unsigned __int8 v21 = v7[2];
                __int16 v20 = v7[3];
                if (v21 >= v20 >> 1)
                {
                  sub_100130DF4(v20 > 1, v21 + 1, 1, (uint64_t)v7);
                  unsigned __int8 v7 = v24;
                }

                v7[2] = v21 + 1;
                uint64_t v22 = &v7[3 * v21];
                v22[4] = v9;
                v22[5] = v10;
                *((_BYTE *)v22 + 4_Block_object_dispose(va, 8) = v11;
                break;
              default:
                break;
            }
          }

          ++a3;
          v6 -= 8LL;
        }

        while (v6);
      }

      else
      {
        unsigned __int8 v7 = _swiftEmptyArrayStorage;
      }

      uint64_t v25 = v30(v7);
      uint64_t v27 = v26;
      __int16 v29 = v28;
      swift_bridgeObjectRelease(v7);
      switch(v29)
      {
        case 0:
          sqlite3_result_int64(v5, v25);
          goto LABEL_38;
        case 1:
          sqlite3_result_double(v5, *(double *)&v25);
          goto LABEL_38;
        case 2:
          sub_10007E9C0(v25, v27, v5);
          swift_release(v31);
          return (sqlite3_context *)sub_10007F01C(v25, v27, 2);
        case 3:
          __asm { BR              X10 }

          return result;
        default:
          sqlite3_result_null(v5);
LABEL_38:
          BOOL result = (sqlite3_context *)swift_release(v31);
          break;
      }
    }
  }

  return result;
}

      uint64_t v9 = (v17 - 1) & v17;
    }
  }

  BOOL result = swift_release(v3);
  void *v2 = v6;
  return result;
}

      uint64_t v10 = (v18 - 1) & v18;
    }
  }

  BOOL result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    uint64_t v10 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    BOOL result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  uint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    id v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    id v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    uint64_t v10 = (v18 - 1) & v18;
  }

  id v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_35:
    BOOL result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_37;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v14 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_35;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

    mach_msg_destroy(&msg);
    return v12;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

id sub_100016664(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[5];
  id v5 = a2;
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 client]);
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
  id v8 = [v5 reconcileUnfinishedTransactionIDs:v3 forBundleID:v7 logKey:a1[6]];

  return v8;
}

void sub_10001679C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID lib_shortLogKey](&OBJC_CLASS___NSUUID, "lib_shortLogKey"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100016858;
  v6[3] = &unk_1002E7478;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v7 = v2;
  id v8 = v4;
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v5 = v2;
  [v4 _checkTransactionAgeAndSyncWithLogKey:v5 completionHandler:v6];
}

void sub_100016858(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v4 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      id v5 = (void *)a1[5];
      id v7 = v4;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 client]);
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 requestBundleID]);
      id v10 = (void *)v9;
      uint64_t v11 = @"all";
      uint64_t v12 = (const __CFString *)a1[6];
      int v13 = 138544130;
      if (v12) {
        uint64_t v11 = v12;
      }
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      uint64_t v16 = v9;
      __int16 v17 = 2114;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      id v20 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Error syncing transactions while retrieving subscription status for %{public}@/%{public}@. Returnin g last known status(es). %{public}@",  (uint8_t *)&v13,  0x2Au);
    }
  }

  (*(void (**)(void))(a1[7] + 16LL))(a1[7]);
}

void sub_100017050( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id location)
{
}

void sub_100017090(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 requestBundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 currentRevisionForBundleID:v5]);

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100017118(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (v3)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([WeakRetained error]);
    if (v4)
    {
      id v5 = (void *)v4;
      if (qword_10032DF38 != -1) {
        dispatch_once(&qword_10032DF38, &stru_1002E7588);
      }
      uint64_t v6 = (void *)qword_10032DF18;
      if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_ERROR)) {
        sub_10025BC1C(a1, v6);
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      goto LABEL_28;
    }
  }

  else
  {
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([WeakRetained statuses]);
    id v7 = [obj countByEnumeratingWithState:&v45 objects:v55 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v38 = *(void *)v46;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v46 != v38) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)i);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"subscriptionGroupIdentifier"]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"lastTransactions"]);
          int v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"gracePeriodExpiresDate"]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) databaseStore]);
          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472LL;
          v39[2] = sub_1000175D8;
          v39[3] = &unk_1002E74C8;
          uint64_t v15 = *(void *)(a1 + 32);
          uint64_t v16 = *(void **)(a1 + 40);
          id v40 = v12;
          uint64_t v41 = v15;
          id v42 = v16;
          id v43 = v11;
          id v44 = v13;
          id v17 = v13;
          id v18 = v11;
          id v19 = v12;
          [v14 modifyUsingTransaction:v39];
        }

        id v8 = [obj countByEnumeratingWithState:&v45 objects:v55 count:16];
      }

      while (v8);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue( +[StoreKitServiceConnection connectionForClient:]( &OBJC_CLASS___StoreKitServiceConnection,  "connectionForClient:",  v20));

    if (v21)
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained statuses]);
      id v23 = [v22 count];

      if (v23)
      {
        if (qword_10032DF38 != -1) {
          dispatch_once(&qword_10032DF38, &stru_1002E7588);
        }
        __int16 v24 = (void *)qword_10032DF18;
        if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *(void *)(a1 + 40);
          uint64_t v26 = v24;
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained statuses]);
          id v28 = [v27 count];
          *(_DWORD *)buf = 138543874;
          uint64_t v50 = v25;
          __int16 v51 = 2048;
          id v52 = v28;
          __int16 v53 = 2114;
          uint64_t v54 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Sending %ld statuses to %{public}@",  buf,  0x20u);
        }

        __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v21 remoteObject]);
        id v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained statuses]);
        [v29 receivedStatuses:v30];
      }
    }
  }

  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  uint64_t v31 = (void *)qword_10032DF18;
  if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = *(void **)(a1 + 32);
    uint64_t v33 = *(void *)(a1 + 40);
    uint64_t v34 = v31;
    v35 = (void *)objc_claimAutoreleasedReturnValue([v32 client]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 requestBundleID]);
    *(_DWORD *)buf = 138543618;
    uint64_t v50 = v33;
    __int16 v51 = 2114;
    id v52 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Updated subscription status for %{public}@",  buf,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_28:
}

id sub_1000175D8(uint64_t a1, void *a2)
{
  id v18 = a2;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v19 + 1) + 8 * (void)v7) objectForKeyedSubscript:@"signedTransactionInfo"]);
        id v9 = (void *)v8;
        if (v8)
        {
          uint64_t v23 = v8;
          id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v23,  1LL));
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) client]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 requestBundleID]);
          [v18 setTransactionInfo:v10 unfinishedIDs:0 forBundleID:v12 logKey:*(void *)(a1 + 48) containsSubscriptions:0];
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }

    while (v5);
  }

  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) requestBundleID]);
  id v16 = [v18 setSubscriptionRenewalInfo:v14 forGroupID:v13 bundleID:v15 gracePeriodExpirationDate:*(void *)(a1 + 64) logKey:*(void *)(a1 + 48)];

  return v16;
}

void sub_100017854(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v6 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v7 = *(void **)(a1 + 40);
      id v9 = v6;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 client]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 requestBundleID]);
      *(_DWORD *)buf = 138543618;
      uint64_t v24 = v8;
      __int16 v25 = 2114;
      uint64_t v26 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Transaction sync contained subscriptions. Syncing subscription status for %{public}@",  buf,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(a1 + 40);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100017A90;
    v21[3] = &unk_1002E74F0;
    uint64_t v14 = *(void *)(a1 + 56);
    id v22 = *(id *)(a1 + 48);
    [v12 _syncSubscriptionStatusWithReason:v14 logKey:v13 completionHandler:v21];
  }

  else
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v15 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      id v16 = *(void **)(a1 + 40);
      id v18 = v15;
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v16 client]);
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 requestBundleID]);
      *(_DWORD *)buf = 138543618;
      uint64_t v24 = v17;
      __int16 v25 = 2114;
      uint64_t v26 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Transaction sync did not contain subscriptions for %{public}@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_100017A90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100017E94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, id location)
{
}

void sub_100017EE0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 requestBundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 currentRevisionForBundleID:v5]);

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100017F68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  char v43 = 0;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  }

  else
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained receipts]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained unfinishedTransactionIDs]);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 72);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained serverRevision]);
    LOBYTE(v5) = [v5 _setTransactionInfo:v6 unfinishedIDs:v7 includesFinishedConsumables:v8 forRevision:v9 logKey:*(void *)(a1 + 40) con tainsSubscriptions:&v43];

    if ((v5 & 1) != 0)
    {
      id v4 = 0LL;
    }

    else
    {
      uint64_t v10 = ASDErrorWithDescription(ASDErrorDomain, 1053LL, @"Failed transaction cache update");
      id v4 = (void *)objc_claimAutoreleasedReturnValue(v10);
    }

    unint64_t v11 = *(void *)(a1 + 64);
    if (v11 <= 6 && ((1LL << v11) & 0x4C) != 0)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[StoreKitServiceConnection connectionForClient:]( &OBJC_CLASS___StoreKitServiceConnection,  "connectionForClient:",  v12));

      if (v13)
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained receipts]);
        id v15 = [v14 count];

        if (v15)
        {
          if (qword_10032DF38 != -1) {
            dispatch_once(&qword_10032DF38, &stru_1002E7588);
          }
          id v16 = (void *)qword_10032DF18;
          if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *(void *)(a1 + 40);
            id v18 = v16;
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained receipts]);
            id v20 = [v19 count];
            *(_DWORD *)buf = 138543874;
            uint64_t v45 = v17;
            __int16 v46 = 2048;
            id v47 = v20;
            __int16 v48 = 2114;
            v49 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Sending %ld receipts to %{public}@",  buf,  0x20u);
          }

          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v13 remoteObject]);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained receipts]);
          [v21 receivedTransactions:v22];
        }
      }
    }
  }

  if (v4)
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v23 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_ERROR)) {
      sub_10025BCB8(a1, v23);
    }
    uint64_t v24 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_33:
    v24();
    goto LABEL_34;
  }

  if (![WeakRetained more])
  {
    if (qword_10032DF38 != -1) {
      dispatch_once(&qword_10032DF38, &stru_1002E7588);
    }
    uint64_t v34 = (void *)qword_10032DF18;
    if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *(void *)(a1 + 40);
      uint64_t v36 = v34;
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained serverRevision]);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
      int v39 = (void *)objc_claimAutoreleasedReturnValue([v38 requestBundleID]);
      *(_DWORD *)buf = 138543874;
      uint64_t v45 = v35;
      __int16 v46 = 2114;
      id v47 = v37;
      __int16 v48 = 2114;
      v49 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Updated receipts to revision %{public}@ for %{public}@",  buf,  0x20u);
    }

    uint64_t v24 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_33;
  }

  if (qword_10032DF38 != -1) {
    dispatch_once(&qword_10032DF38, &stru_1002E7588);
  }
  __int16 v25 = (void *)qword_10032DF18;
  if (os_log_type_enabled((os_log_t)qword_10032DF18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v27 = v25;
    id v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained serverRevision]);
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 requestBundleID]);
    *(_DWORD *)buf = 138543874;
    uint64_t v45 = v26;
    __int16 v46 = 2114;
    id v47 = v28;
    __int16 v48 = 2114;
    v49 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Updated receipts to revision %{public}@. Syncing more receipts for %{public}@",  buf,  0x20u);
  }

  uint64_t v31 = *(void *)(a1 + 64);
  uint64_t v32 = *(void **)(a1 + 32);
  uint64_t v33 = *(void *)(a1 + 40);
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_100018490;
  v40[3] = &unk_1002E7540;
  id v41 = *(id *)(a1 + 48);
  char v42 = v43;
  [v32 _syncTransactionsWithReason:v31 logKey:v33 completionHandler:v40];

LABEL_34:
}

uint64_t sub_100018490(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40)) {
    a2 = 1LL;
  }
  else {
    a2 = a2;
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), a2);
}

void sub_10001851C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100327AB8;
  off_100327AB8 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DEF0;
  qword_10032DEF0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032DEF8;
  qword_10032DEF8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032DF00;
  qword_10032DF00 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032DF08;
  qword_10032DF08 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032DF10;
  qword_10032DF10 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032DF18;
  qword_10032DF18 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_10032DF20;
  qword_10032DF20 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032DF28;
  qword_10032DF28 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  id v20 = (void *)qword_10032DF30;
  qword_10032DF30 = (uint64_t)v19;
}

  ;
}

void sub_100018698(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1000186B8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_1000186C8(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t sub_1000186D4(sqlite3 *a1, void *a2)
{
  id v3 = a2;
  sqlite3_extended_result_codes(a1, 1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 encryptionKeyId]);

  if (v4) {
  uint64_t v5 = sqlite3_exec(a1, "PRAGMA journal_mode=WAL", 0LL, 0LL, 0LL);
  }
  if (!(_DWORD)v5)
  {
    uint64_t v6 = -[NSString initWithFormat:]( [NSString alloc], "initWithFormat:", @"PRAGMA cache_size=%ld", [v3 cacheSize]);
    uint64_t v5 = sqlite3_exec(a1, -[NSString UTF8String](v6, "UTF8String"), 0LL, 0LL, 0LL);
  }

  return v5;
}

uint64_t sub_1000187C0()
{
  return 0LL;
}

BOOL sub_1000187C8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
  id v3 = sub_100018874(v1, 0LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  -[NSFileManager removeItemAtPath:error:](v2, "removeItemAtPath:error:", v4, 0LL);

  id v5 = sub_100018874(v1, 1LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[NSFileManager removeItemAtPath:error:](v2, "removeItemAtPath:error:", v6, 0LL);

  BOOL v7 = -[NSFileManager removeItemAtPath:error:](v2, "removeItemAtPath:error:", v1, 0LL);
  return v7;
}

id sub_100018874(void *a1, uint64_t a2)
{
  id v4 = a1;
  id v5 = v4;
  if (!a2)
  {
    uint64_t v6 = @"-shm";
    goto LABEL_5;
  }

  if (a2 == 1)
  {
    uint64_t v6 = @"-wal";
LABEL_5:
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByAppendingString:v6]);
  }

  return v2;
}

id sub_1000188D8(sqlite3 *a1)
{
  int v2 = sqlite3_errcode(a1);
  if (v2)
  {
    int v3 = v2;
    id v4 = (NSDictionary *)sqlite3_errmsg(a1);
    if (v4)
    {
      id v5 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v4);
      id v4 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v5,  NSLocalizedDescriptionKey,  0LL);
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"SQLiteErrorDomain",  v3,  v4));
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

uint64_t sub_10001899C(sqlite3 **a1, void *a2)
{
  id v3 = a2;
  ppDb = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 databasePath]);
  if ([v3 isReadOnly])
  {
    int v5 = 2;
  }

  else
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByDeletingLastPathComponent]);
    -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v6,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v7,  1LL,  0LL,  0LL);

    int v5 = 6;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 protectionType]);
  os_log_t v9 = v8;
  if (v8) {
    v5 |= sub_100018AC4(v8);
  }
  id v10 = v4;
  uint64_t v11 = sqlite3_open_v2((const char *)[v10 fileSystemRepresentation], &ppDb, v5, 0);
  if ((_DWORD)v11 || (uint64_t v11 = sub_1000186D4(ppDb, v3), (_DWORD)v11))
  {
    if (ppDb) {
      sqlite3_close(ppDb);
    }
  }

  else
  {
    *a1 = ppDb;
  }

  return v11;
}

uint64_t sub_100018AC4(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:NSFileProtectionNone])
    {
      uint64_t v3 = 0x400000LL;
    }

    else if ([v2 isEqualToString:NSFileProtectionComplete])
    {
      uint64_t v3 = 0x100000LL;
    }

    else if ([v2 isEqualToString:NSFileProtectionCompleteUnlessOpen])
    {
      uint64_t v3 = 0x200000LL;
    }

    else if ([v2 isEqualToString:NSFileProtectionCompleteUntilFirstUserAuthentication])
    {
      uint64_t v3 = 3145728LL;
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

BOOL sub_100018B78(unsigned __int8 a1)
{
  return a1 - 100 < 2 || a1 == 0;
}

BOOL sub_100018B94(void *a1)
{
  ppDb = 0LL;
  if (sqlite3_open_v2( (const char *)[a1 fileSystemRepresentation], &ppDb, 2, 0))
  {
    return 0LL;
  }

  int v3 = 129;
  BOOL v1 = sqlite3_file_control(ppDb, 0LL, 101, &v3) == 0;
  sqlite3_close(ppDb);
  return v1;
}

id sub_1000190C4()
{
  if (qword_10032DF88 != -1) {
    dispatch_once(&qword_10032DF88, &stru_1002E76E8);
  }
  return (id)qword_10032DF58;
}

id sub_100019104(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _performWithBuyParams:a2];
}

LABEL_69:
  v144 = (void *)v54;
  if (qword_10032DF88 != -1) {
    dispatch_once(&qword_10032DF88, &stru_1002E76E8);
  }
  v73 = (os_log_s *)(id)qword_10032DF58;
  if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
    sub_10025BD54(v148, (uint64_t)v145, v73);
  }

  v74 = (void *)objc_claimAutoreleasedReturnValue([v145 domain]);
  v135 = AMSErrorDomain;
  if (!objc_msgSend(v74, "isEqualToString:"))
  {

LABEL_77:
    -[InAppTransactionTask clearTransactionCache](v148, "clearTransactionCache");
    goto LABEL_78;
  }

  if ([v145 code] == (id)6)
  {

    goto LABEL_78;
  }

  v82 = [v145 code] == (id)508;

  if (!v82) {
    goto LABEL_77;
  }
LABEL_78:
  v75 = (void *)objc_claimAutoreleasedReturnValue([v145 userInfo]);
  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "tcr_numberForKey:", AMSErrorUserInfoKeyServerErrorCode));

  if (v136) {
    v137 = (uint64_t)[v136 integerValue];
  }
  else {
    v137 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v76 = (void *)objc_claimAutoreleasedReturnValue([v145 userInfo]);
  v139 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "tcr_dictionaryForKey:", AMSErrorUserInfoKeyServerPayload));

  if (v139)
  {
    if (objc_msgSend(v139, "tcr_BOOLForKey:", @"trigger-download"))
    {
      if (qword_10032DF88 != -1) {
        dispatch_once(&qword_10032DF88, &stru_1002E76E8);
      }
      v77 = (os_log_s *)(id)qword_10032DF58;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        v78 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
        *(_DWORD *)v175 = 138543362;
        *(void *)&v175[4] = v78;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Failed payment had a trigger queue check.",  v175,  0xCu);
      }

      v79 = (void *)objc_claimAutoreleasedReturnValue(+[ASDPurchaseManager sharedManager](&OBJC_CLASS___ASDPurchaseManager, "sharedManager"));
      [v79 checkPendingQueue];
    }

    if (v137 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "tcr_stringForKey:", @"failureType"));
      v81 = v80;
      if (v80) {
        v137 = (uint64_t)[v80 integerValue];
      }
      else {
        v137 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }

    v83 = (void *)objc_claimAutoreleasedReturnValue([v145 domain]);
    if ([v83 isEqualToString:v135])
    {
      v84 = [v145 code] == (id)511;

      if (v84) {
        goto LABEL_151;
      }
    }

    else
    {
    }

    v85 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask client](v148, "client"));
    v86 = objc_msgSend(v85, "objc_clientType") == 3;

    if (v86)
    {
      if (v137 == 3705)
      {
        if (qword_10032DF88 != -1) {
          dispatch_once(&qword_10032DF88, &stru_1002E76E8);
        }
        v115 = (os_log_s *)(id)qword_10032DF58;
        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
        {
          v116 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
          *(_DWORD *)v175 = 138543618;
          *(void *)&v175[4] = v116;
          *(_WORD *)&v175[12] = 2114;
          *(void *)&v175[14] = v145;
          _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Mapping Xcode error to ask to buy: %{public}@",  v175,  0x16u);
        }

        v117 = ASDErrorWithUnderlyingErrorAndDescription( v145,  ASDErrorDomain,  1052LL,  @"Received simulated ask to buy purchase from Xcode");
        v90 = objc_claimAutoreleasedReturnValue(v117);
        v91 = 3705LL;
      }

      else
      {
        if (v137 != 3038)
        {
          if (qword_10032DF88 != -1) {
            dispatch_once(&qword_10032DF88, &stru_1002E76E8);
          }
          v118 = (os_log_s *)(id)qword_10032DF58;
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
          {
            v119 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
            *(_DWORD *)v175 = 138543618;
            *(void *)&v175[4] = v119;
            *(_WORD *)&v175[12] = 2114;
            *(void *)&v175[14] = v145;
            _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Mapping Xcode error to StoreKit error: %{public}@",  v175,  0x16u);
          }

          v120 = ASDErrorWithUnderlyingErrorAndDescription( v145,  ASDErrorDomain,  v137,  @"Received failure in response from Xcode");
          v90 = objc_claimAutoreleasedReturnValue(v120);
          goto LABEL_139;
        }

        if (qword_10032DF88 != -1) {
          dispatch_once(&qword_10032DF88, &stru_1002E76E8);
        }
        v87 = (os_log_s *)(id)qword_10032DF58;
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          v88 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
          *(_DWORD *)v175 = 138543618;
          *(void *)&v175[4] = v88;
          *(_WORD *)&v175[12] = 2114;
          *(void *)&v175[14] = v145;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Mapping Xcode error to interrupted: %{public}@",  v175,  0x16u);
        }

        v89 = ASDErrorWithUnderlyingErrorAndDescription( v145,  ASDErrorDomain,  504LL,  @"Received simulated interrupted purchase from Xcode");
        v90 = objc_claimAutoreleasedReturnValue(v89);
        v91 = 3038LL;
      }

      v137 = v91;
LABEL_139:
      v92 = v145;
      v145 = (id)v90;
      goto LABEL_150;
    }

    v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "tcr_urlForKeyPath:", @"dialog.okButtonAction.url"));
    v92 = v134;
    if (!v134)
    {
LABEL_150:

      goto LABEL_151;
    }

    v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLComponents componentsWithURL:resolvingAgainstBaseURL:]( &OBJC_CLASS___NSURLComponents,  "componentsWithURL:resolvingAgainstBaseURL:",  v134,  0LL));
    v133 = v93;
    if (!v93)
    {
LABEL_149:

      v92 = v134;
      goto LABEL_150;
    }

    v153 = 0u;
    v154 = 0u;
    v151 = 0u;
    v152 = 0u;
    v94 = (void *)objc_claimAutoreleasedReturnValue([v93 queryItems]);
    v95 = [v94 countByEnumeratingWithState:&v151 objects:v162 count:16];
    if (!v95) {
      goto LABEL_147;
    }
    v96 = 0;
    v147 = 0;
    v97 = 0;
    v98 = *(void *)v152;
    do
    {
      for (i = 0LL; i != v95; i = (char *)i + 1)
      {
        if (*(void *)v152 != v98) {
          objc_enumerationMutation(v94);
        }
        v100 = *(void **)(*((void *)&v151 + 1) + 8LL * (void)i);
        v101 = (void *)objc_claimAutoreleasedReturnValue([v100 name]);
        v102 = [v101 isEqualToString:@"offerName"];

        if ((v102 & 1) != 0)
        {
          v96 = 1;
        }

        else
        {
          v103 = (void *)objc_claimAutoreleasedReturnValue([v100 name]);
          v104 = [v103 isEqualToString:@"pricingParameters"];

          if ((v104 & 1) != 0)
          {
            v147 = 1;
          }

          else
          {
            v105 = (void *)objc_claimAutoreleasedReturnValue([v100 name]);
            v106 = [v105 isEqualToString:@"productType"];

            v97 |= v106;
          }
        }
      }

      v95 = [v94 countByEnumeratingWithState:&v151 objects:v162 count:16];
    }

    while (v95);

    if ((v96 & v147 & v97 & 1) == 0) {
      goto LABEL_148;
    }
    v107 = (void *)objc_claimAutoreleasedReturnValue([v145 domain]);
    if ([v107 isEqualToString:v135])
    {
      v108 = [v145 code] == (id)6;

      if (v108)
      {
        v109 = sub_1000190C4();
        v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
        {
          v111 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
          v112 = (void *)objc_claimAutoreleasedReturnValue([v134 absoluteString]);
          *(_DWORD *)v175 = 138543618;
          *(void *)&v175[4] = v111;
          *(_WORD *)&v175[12] = 2114;
          *(void *)&v175[14] = v112;
          _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] The request was cancelled for URL: %{public}@",  v175,  0x16u);
        }

        v113 = ASDErrorWithUnderlyingErrorAndInfo( v145,  ASDErrorDomain,  907LL,  @"The purchase request was cancelled.",  0LL,  0LL);
        v114 = objc_claimAutoreleasedReturnValue(v113);
LABEL_146:
        v94 = v145;
        v145 = (id)v114;
LABEL_147:

LABEL_148:
        v93 = v133;
        goto LABEL_149;
      }
    }

    else
    {
    }

    if (qword_10032DF88 != -1) {
      dispatch_once(&qword_10032DF88, &stru_1002E76E8);
    }
    v121 = (os_log_s *)(id)qword_10032DF58;
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
    {
      v122 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
      *(_DWORD *)v175 = 138543618;
      *(void *)&v175[4] = v122;
      *(_WORD *)&v175[12] = 2114;
      *(void *)&v175[14] = v145;
      _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Mapping error to interrupted: %{public}@",  v175,  0x16u);
    }

    v123 = ASDErrorWithUnderlyingErrorAndDescription( v145,  ASDErrorDomain,  504LL,  @"Received purchase response without a transaction but including an action URL with buy params");
    v114 = objc_claimAutoreleasedReturnValue(v123);
    goto LABEL_146;
  }

LABEL_151:
  if ((id)-[InAppTransactionTask apiVersion](v148, "apiVersion") == (id)1 || v137 != 3532)
  {

LABEL_159:
    if (v145)
    {
      -[AsyncTask completeWithError:](v148, "completeWithError:");
    }

    else
    {
      if (-[InAppTransactionTask shouldInstallParentAppWithBuyParams:]( v148,  "shouldInstallParentAppWithBuyParams:",  v143))
      {
        if (qword_10032DF88 != -1) {
          dispatch_once(&qword_10032DF88, &stru_1002E76E8);
        }
        v127 = (os_log_s *)(id)qword_10032DF58;
        if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
        {
          v128 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
          *(_DWORD *)v175 = 138543362;
          *(void *)&v175[4] = v128;
          _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Pinging AppStoreDaemon to start parent app install",  v175,  0xCu);
        }

        v129 = (void *)objc_claimAutoreleasedReturnValue(+[ASDPurchaseManager sharedManager](&OBJC_CLASS___ASDPurchaseManager, "sharedManager"));
        [v129 checkPendingQueue];
      }

      -[AsyncTask completeWithSuccess](v148, "completeWithSuccess");
    }

    goto LABEL_168;
  }

  if (qword_10032DF88 != -1) {
    dispatch_once(&qword_10032DF88, &stru_1002E76E8);
  }
  v124 = (os_log_s *)(id)qword_10032DF58;
  if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
  {
    v125 = (void *)objc_claimAutoreleasedReturnValue(-[InAppTransactionTask logKey](v148, "logKey"));
    *(_DWORD *)v175 = 138543618;
    *(void *)&v175[4] = v125;
    *(_WORD *)&v175[12] = 2114;
    *(void *)&v175[14] = v145;
    _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Purchased already subscribed subscription: %{public}@",  v175,  0x16u);
  }

  v149[0] = _NSConcreteStackBlock;
  v149[1] = 3221225472LL;
  v149[2] = sub_10001A85C;
  v149[3] = &unk_1002E7600;
  v149[4] = v148;
  v126 = v145;
  v150 = v126;
  -[InAppTransactionTask _latestTransactionWithCompletion:](v148, "_latestTransactionWithCompletion:", v149);

LABEL_168:
}

void sub_10001A800(_Unwind_Exception *a1)
{
}

uint64_t sub_10001A848(uint64_t a1, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10001A85C(uint64_t a1, void *a2)
{
  if (a2)
  {
    os_log_t v9 = off_1003280A8[0];
    id v10 = a2;
    id v4 = a2;
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    [*(id *)(a1 + 32) setTransaction:v5];

    [*(id *)(a1 + 32) completeWithSuccess];
  }

  else
  {
    BOOL v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v8 = 0LL;
    [v7 completeWithError:v6];
  }
}

void sub_10001AE68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001AEAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001AEBC(uint64_t a1)
{
}

void sub_10001AEC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10001B9B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10001B9C8(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 client]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 requestBundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 pendingLegacyTransactionsAccountTokenForBundleID:v5]);

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_10001BA50(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transaction]);
  id v12 = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
  id v10 = [v4 cacheLegacyTransactionsForBundleID:v6 transactions:v8 logKey:v9];

  return v10;
}

void sub_10001BCA0(_Unwind_Exception *a1)
{
}

void sub_10001BCB8(uint64_t a1, void *a2, _BYTE *a3)
{
  *a3 = 1;
}

void sub_10001BCEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastUpdated]);
    [v4 timeIntervalSinceNow];
    double v6 = v5;

    if (v6 <= -60.0)
    {
      if (qword_10032DF88 != -1) {
        dispatch_once(&qword_10032DF88, &stru_1002E76E8);
      }
      id v8 = (void *)qword_10032DF58;
      if (os_log_type_enabled((os_log_t)qword_10032DF58, OS_LOG_TYPE_ERROR)) {
        sub_10025C3D4(a1, v8);
      }
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      v13[2] = sub_10001BEB4;
      void v13[3] = &unk_1002E76A0;
      int8x16_t v11 = *(int8x16_t *)(a1 + 32);
      id v9 = (id)v11.i64[0];
      int8x16_t v14 = vextq_s8(v11, v11, 8uLL);
      __int128 v12 = *(_OWORD *)(a1 + 48);
      id v10 = (id)v12;
      __int128 v15 = v12;
      [v9 syncReceiptsWithReason:1 completionHandler:v13];
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
      if (qword_10032DF88 != -1) {
        dispatch_once(&qword_10032DF88, &stru_1002E76E8);
      }
      uint64_t v7 = (void *)qword_10032DF58;
      if (os_log_type_enabled((os_log_t)qword_10032DF58, OS_LOG_TYPE_ERROR)) {
        sub_10025C348(a1, v7);
      }
    }
  }
}

void sub_10001BEB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032DF88 != -1) {
      dispatch_once(&qword_10032DF88, &stru_1002E76E8);
    }
    id v4 = (void *)qword_10032DF58;
    if (os_log_type_enabled((os_log_t)qword_10032DF58, OS_LOG_TYPE_ERROR)) {
      sub_10025C460(a1, v4);
    }
  }

  double v5 = *(void **)(a1 + 40);
  double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) productIdentifier]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10001BFD8;
  v12[3] = &unk_1002E7650;
  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_10001C00C;
  v9[3] = &unk_1002E7678;
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  v9[1] = 3221225472LL;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v11 = v13;
  void v9[4] = v8;
  id v10 = v7;
  [v5 enumerateReceiptsForProductID:v6 usingBlock:v12 completionHandler:v9];
}

void sub_10001BFD8(uint64_t a1, void *a2, _BYTE *a3)
{
  *a3 = 1;
}

void sub_10001C00C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || !*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    if (qword_10032DF88 != -1) {
      dispatch_once(&qword_10032DF88, &stru_1002E76E8);
    }
    id v4 = (void *)qword_10032DF58;
    if (os_log_type_enabled((os_log_t)qword_10032DF58, OS_LOG_TYPE_ERROR)) {
      sub_10025C4EC(a1, v4);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001C758(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  int v2 = off_100327AC0;
  off_100327AC0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032DF40;
  qword_10032DF40 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  double v6 = (void *)qword_10032DF48;
  qword_10032DF48 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032DF50;
  qword_10032DF50 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032DF58;
  qword_10032DF58 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032DF60;
  qword_10032DF60 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  int8x16_t v14 = (void *)qword_10032DF68;
  qword_10032DF68 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032DF70;
  qword_10032DF70 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032DF78;
  qword_10032DF78 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  id v20 = (void *)qword_10032DF80;
  qword_10032DF80 = (uint64_t)v19;
}

  ;
}

  ;
}

uint64_t sub_10001C8DC()
{
  return v0;
}

id sub_10001C8E8(uint64_t a1, void *a2)
{
  return a2;
}

id sub_10001C8F4(id a1)
{
  return a1;
}

id sub_10001C8FC(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t sub_10001CB64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001CB74(uint64_t a1)
{
}

void sub_10001CB7C(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSKeybag sharedInstance](&OBJC_CLASS___AMSKeybag, "sharedInstance"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 fairplayContextWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);

  if (v4)
  {
    [*(id *)(a1 + 32) bytes];
    [*(id *)(a1 + 32) length];
    sub_1002132B0();
    if ((_DWORD)v5 && (uint64_t v6 = v5, (v7 = *(void *)(*(void *)(a1 + 40) + 8LL)) != 0))
    {
      sub_1002553F0(v7);
      *(void *)(*(void *)(a1 + 40) + 8LL) = 0LL;
      uint64_t v8 = ASDErrorDomain;
      NSErrorUserInfoKey v15 = NSDebugDescriptionErrorKey;
      os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Session creation failed (error: %d)",  v6));
      uint64_t v16 = v9;
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
      uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  500LL,  v10));
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
      os_log_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }
  }

void sub_10001CE3C(uint64_t a1)
{
  if (qword_10032DFD8 != -1) {
    dispatch_once(&qword_10032DFD8, &stru_1002E77F8);
  }
  os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)off_100327B28);
  if (qword_10032DFD8 != -1) {
    dispatch_once(&qword_10032DFD8, &stru_1002E77F8);
  }
  uint64_t v3 = off_100327B28;
  unsigned int v4 = (os_log_s *)v3;
  unint64_t v5 = v2 - 1;
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v3))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_INTERVAL_BEGIN,  v2,  "Download::Decrypt/Prepare",  "",  buf,  2u);
  }

  if (*(void *)(*(void *)(a1 + 32) + 72LL))
  {
    uint64_t v6 = *(void **)(a1 + 40);
    if (!v6 || ![v6 length])
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
      return;
    }

    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 40);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      id v52 = 0LL;
      unsigned int v10 = [v8 verifyData:v9 error:&v52];
      id v11 = v52;
      if (!v10)
      {
        (*(void (**)(void, id, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v11, 0LL);
        goto LABEL_16;
      }

      uint64_t v7 = *(void *)(a1 + 32);
    }

    else
    {
      id v11 = 0LL;
    }

    uint64_t v14 = *(void *)(v7 + 24);
    id v15 = [*(id *)(a1 + 40) length];
    uint64_t v16 = *(void *)(a1 + 32);
    if (((unint64_t)v15 + v14) >> 15)
    {
      uint64_t v17 = *(void *)(v16 + 24);
      size_t v18 = (size_t)[*(id *)(a1 + 40) length] + v17;
      os_log_t v19 = (char *)malloc(v18);
      id v20 = v19;
      uint64_t v21 = *(void *)(a1 + 32);
      size_t v22 = *(void *)(v21 + 24);
      if (v22)
      {
        memcpy(v19, *(const void **)(v21 + 16), v22);
        uint64_t v23 = *(void **)(a1 + 40);
        uint64_t v24 = *(void *)(v21 + 24);
        __int16 v25 = v20;
        v20 += v24;
        id v26 = [v23 length];
        uint64_t v27 = v23;
      }

      else
      {
        id v28 = *(void **)(a1 + 40);
        id v26 = [v28 length];
        uint64_t v27 = v28;
        __int16 v25 = v20;
      }

      [v27 getBytes:v20 length:v26];
      if (qword_10032DFD8 != -1) {
        dispatch_once(&qword_10032DFD8, &stru_1002E77F8);
      }
      __int16 v29 = v25;
      id v30 = off_100327B28;
      uint64_t v31 = (os_log_s *)v30;
      if (v5 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v30))
      {
        *(_DWORD *)buf = 134349056;
        v56[0] = v18;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  OS_SIGNPOST_INTERVAL_END,  v2,  "Download::Decrypt/Prepare",  " bytes=%{public, signpost.description:attribute}lu ",  buf,  0xCu);
      }

      if (qword_10032DFD8 != -1) {
        dispatch_once(&qword_10032DFD8, &stru_1002E77F8);
      }
      uint64_t v32 = off_100327B28;
      uint64_t v33 = (os_log_s *)v32;
      if (v5 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v32))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  OS_SIGNPOST_INTERVAL_BEGIN,  v2,  "Download::Decrypt/Process",  "",  buf,  2u);
      }

      [*(id *)(a1 + 32) _resizeSampleSizeArray:(v18 >> 15)];
      *(_DWORD *)buf = v18 >> 15;
      *(void *)((char *)v56 + 4) = *(void *)(*(void *)(a1 + 32) + 48LL);
      *(void *)((char *)&v56[1] + 4) = v25;
      unint64_t v34 = (unint64_t)*(unsigned int *)buf << 15;
      *(void *)((char *)&v56[2] + 4) = v34;
      sub_1002537C8();
      if (!(_DWORD)v35)
      {
        __int16 v51 = v29;
        if (qword_10032DFD8 != -1) {
          dispatch_once(&qword_10032DFD8, &stru_1002E77F8);
        }
        int v39 = off_100327B28;
        id v40 = (os_log_s *)v39;
        if (v5 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v39))
        {
          *(_DWORD *)__int16 v53 = 134349056;
          size_t v54 = (v18 >> 15);
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v40,  OS_SIGNPOST_INTERVAL_END,  v2,  "Download::Decrypt/Process",  " blocks=%{public, signpost.description:attribute}lu ",  v53,  0xCu);
        }

        if (qword_10032DFD8 != -1) {
          dispatch_once(&qword_10032DFD8, &stru_1002E77F8);
        }
        id v41 = off_100327B28;
        char v42 = (os_log_s *)v41;
        if (v5 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v41))
        {
          *(_WORD *)__int16 v53 = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_INTERVAL_BEGIN,  v2,  "Download::Decrypt/Final",  "",  v53,  2u);
        }

        if (v18 == v34)
        {
          *(void *)(*(void *)(a1 + 32) + 24LL) = 0LL;
        }

        else
        {
          *(void *)(*(void *)(a1 + 32) + 24LL) = v18 - v34;
          uint64_t v43 = *(void *)(a1 + 32);
          size_t v44 = *(void *)(v43 + 24);
          if (v44 > 0x8000)
          {
            *(void *)(v43 + 24) = 0LL;
            uint64_t v45 = ASDErrorWithDescription(ASDErrorDomain, 711LL, @"Partial sample exceeded buffer size!");
            uint64_t v46 = objc_claimAutoreleasedReturnValue(v45);

            free(v51);
            (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
            id v11 = (id)v46;
            goto LABEL_16;
          }

          memcpy(*(void **)(v43 + 16), &v51[v34], v44);
          size_t v18 = (unint64_t)(v18 >> 15) << 15;
        }

        id v47 = sub_10001D4FC();
        __int16 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        v49 = v48;
        if (v5 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
        {
          *(_DWORD *)__int16 v53 = 134349056;
          size_t v54 = v18;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v49,  OS_SIGNPOST_INTERVAL_END,  v2,  "Download::Decrypt/Final",  " bytes=%{public, signpost.description:attribute}lu ",  v53,  0xCu);
        }

        uint64_t v50 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  v51,  v18,  1LL);
        [*(id *)(*(void *)(a1 + 32) + 72) consumeData:v50 withCompletionHandler:*(void *)(a1 + 48)];

        goto LABEL_16;
      }

      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Decryption failed (error: %d)",  v35));
      uint64_t v37 = ASDErrorWithDescription(ASDErrorDomain, 711LL, v36);
      uint64_t v38 = objc_claimAutoreleasedReturnValue(v37);

      free(v29);
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      id v11 = (id)v38;
    }

    else
    {
      memcpy( (void *)(*(void *)(v16 + 16) + *(void *)(v16 + 24)), [*(id *)(a1 + 40) bytes], (size_t)objc_msgSend(*(id *)(a1 + 40), "length"));
      *(void *)(*(void *)(a1 + 32) + 24) += [*(id *)(a1 + 40) length];
      (*(void (**)(void, void, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 0LL, 0LL);
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = ASDErrorWithDescription(ASDErrorDomain, 701LL, @"No processor was set when consuming data");
    id v11 = (id)objc_claimAutoreleasedReturnValue(v13);
    (*(void (**)(uint64_t, id, void))(v12 + 16))(v12, v11, 0LL);
  }

void *sub_10001D4FC()
{
  if (qword_10032DFD8 != -1) {
    dispatch_once(&qword_10032DFD8, &stru_1002E77F8);
  }
  return off_100327B28;
}

void sub_10001D5B8(uint64_t a1)
{
  os_signpost_id_t v2 = *(void **)(a1 + 32);
  if (!v2[9])
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = ASDErrorWithDescription(ASDErrorDomain, 701LL, @"No processor was set when finishing");
    id v12 = (id)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v12);
    goto LABEL_6;
  }

  if (v2[3])
  {
    sub_100251E58();
    if ((_DWORD)v3)
    {
      id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Decryption failed (error: %d)",  v3));
      uint64_t v4 = ASDErrorWithDescription(ASDErrorDomain, 711LL, v12);
      unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

LABEL_6:
      return;
    }

    uint64_t v8 = -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  *(void *)(*(void *)(a1 + 32) + 16LL),  *(void *)(*(void *)(a1 + 32) + 24LL));
    *(void *)(*(void *)(a1 + 32) + 24LL) = 0LL;
    uint64_t v9 = *(void *)(a1 + 32);
    unsigned int v10 = *(void **)(a1 + 40);
    id v11 = *(void **)(v9 + 72);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10001D74C;
    void v13[3] = &unk_1002E7788;
    void v13[4] = v9;
    id v14 = v10;
    [v11 consumeData:v8 andWaitWithCompletionHandler:v13];
  }

  else
  {
    [v2 _resetDecryptionBufferAndDigestVerifier];
    [*(id *)(*(void *)(a1 + 32) + 72) finishWithCompletionHandler:*(void *)(a1 + 40)];
  }

void sub_10001D74C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10001D7F8;
    v5[3] = &unk_1002E7760;
    id v7 = *(id *)(a1 + 40);
    id v6 = v3;
    [v4 finishWithCompletionHandler:v5];
  }

  else
  {
    [*(id *)(a1 + 32) finishWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10001D7F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10001D884(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  os_signpost_id_t v2 = *(void **)(v1 + 72);
  if (v2)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10001D950;
    v6[3] = &unk_1002E77D8;
    void v6[4] = v1;
    id v7 = *(id *)(a1 + 40);
    [v2 prepareWithCompletionHandler:v6];
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = ASDErrorWithDescription(ASDErrorDomain, 701LL, @"No processor was set when preparing");
    id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0LL, v5);
  }

void sub_10001D950(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  if (*(void *)(*(void *)(a1 + 32) + 64LL))
  {
    id v5 = -[DigestVerifier initWithChunkedDigest:resumptionOffset:]( objc_alloc(&OBJC_CLASS___DigestVerifier),  "initWithChunkedDigest:resumptionOffset:",  *(void *)(*(void *)(a1 + 32) + 64LL),  a2);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001DA4C(uint64_t a1)
{
  os_signpost_id_t v2 = *(void **)(a1 + 32);
  if (v2[9])
  {
    [v2 _resetDecryptionBufferAndDigestVerifier];
    [*(id *)(*(void *)(a1 + 32) + 72) resetWithCompletionHandler:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = ASDErrorWithDescription(ASDErrorDomain, 701LL, @"No processor was set when resetting");
    id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }

void sub_10001DB50(uint64_t a1)
{
  os_signpost_id_t v2 = *(void **)(a1 + 32);
  if (v2[9])
  {
    [v2 _resetDecryptionBufferAndDigestVerifier];
    [*(id *)(*(void *)(a1 + 32) + 72) suspendWithCompletionHandler:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = ASDErrorWithDescription(ASDErrorDomain, 701LL, @"No processor was set when suspending");
    id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }

void sub_10001DC54(uint64_t a1)
{
  os_signpost_id_t v2 = *(void **)(a1 + 32);
  if (v2[9])
  {
    [v2 _resetDecryptionBufferAndDigestVerifier];
    if ((objc_opt_respondsToSelector(*(void *)(*(void *)(a1 + 32) + 72LL), "truncateWithCompletionHandler:") & 1) != 0)
    {
      uint64_t v3 = *(void **)(a1 + 40);
      uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 72LL);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10001DD58;
      v8[3] = &unk_1002E74F0;
      id v9 = v3;
      [v4 truncateWithCompletionHandler:v8];
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = ASDErrorWithDescription(ASDErrorDomain, 701LL, @"No processor was set when truncating");
    id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v7);
  }

uint64_t sub_10001DD58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001DDE4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  os_signpost_id_t v2 = off_100327B28;
  off_100327B28 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032DF90;
  qword_10032DF90 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032DF98;
  qword_10032DF98 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032DFA0;
  qword_10032DFA0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  unsigned int v10 = (void *)qword_10032DFA8;
  qword_10032DFA8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032DFB0;
  qword_10032DFB0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032DFB8;
  qword_10032DFB8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032DFC0;
  qword_10032DFC0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  size_t v18 = (void *)qword_10032DFC8;
  qword_10032DFC8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  id v20 = (void *)qword_10032DFD0;
  qword_10032DFD0 = (uint64_t)v19;
}

void sub_10001DFB4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  os_signpost_id_t v2 = (void *)qword_10032DFE0;
  qword_10032DFE0 = (uint64_t)v1;
}

void sub_10001E0FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (v2 <= 0)
  {
    os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
    *(void *)(*(void *)(a1 + 32) + 8) = [v3 activePort];

    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
}

void sub_10001E3C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10001E3E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001E3F0(uint64_t a1)
{
}

void sub_10001E3F8(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = *(void *)(a1 + 32);
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleID]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 buyProductWithID:v2 bundleID:v3]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10001E65C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001E67C(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = *(unsigned __int8 *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) transactionID];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v8 changeAutoRenewStatus:v2 transactionID:v3 bundleID:v4]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10001E8E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001E908(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 clearOverridesForBundleID:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10001EB44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001EB68(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = *(unsigned __int8 *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) transactionID];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v8 completeAskToBuyRequestWithResponse:v2 transactionID:v3 forBundleID:v4]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10001ED74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001ED94(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 deleteAllTransactionsForBundleID:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10001EE84(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deleteDataWithContext:*(void *)(a1 + 40)];
}

uint64_t sub_10001EF90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10001F1FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001F220(uint64_t a1)
{
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleID]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v8 expireOrRenewSubscriptionWithIdentifier:v3 expire:v2 forBundleID:v4]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10001F378(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 getStorefrontForBundleID:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10001F4BC(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 getTransactionDataForBundleID:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10001F5AC(uint64_t a1)
{
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
  unsigned int v15 = [v16 startAccessingReturningError:0];
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v20 = a1;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v24;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v24 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v5);
        id v7 = objc_autoreleasePoolPush();
        id v8 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
        id v22 = 0LL;
        id v9 = [v8 initWithBundleIdentifier:v6 allowPlaceholder:0 error:&v22];
        id v10 = v22;
        if (!v10) {
          goto LABEL_10;
        }
        if (qword_10032E038 != -1) {
          dispatch_once(&qword_10032E038, &stru_1002E7A18);
        }
        os_log_t v11 = (os_log_s *)qword_10032E028;
        if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543618;
          id v28 = v6;
          __int16 v29 = 2114;
          id v30 = v10;
          _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Error looking up app with bundle ID %{public}@: %{public}@",  buf,  0x16u);
          if (!v9) {
            goto LABEL_18;
          }
        }

        else
        {
LABEL_10:
          if (!v9) {
            goto LABEL_18;
          }
        }

        if (([v9 isBeta] & 1) != 0 || objc_msgSend(v9, "isAppStoreVendable"))
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue( +[OctaneActionContext contextWithBundleID:]( &OBJC_CLASS___OctaneActionContext,  "contextWithBundleID:",  v6));
          if (qword_10032E038 != -1) {
            dispatch_once(&qword_10032E038, &stru_1002E7A18);
          }
          os_log_t v13 = (void *)qword_10032E028;
          if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_DEBUG))
          {
            log = v13;
            size_t v18 = (void *)objc_claimAutoreleasedReturnValue([v12 logKey]);
            os_log_t v17 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleID]);
            *(_DWORD *)buf = 138543618;
            id v28 = v18;
            __int16 v29 = 2114;
            id v30 = v17;
            _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "[%{public}@] Removing data for %{public}@ due to non-development application install",  buf,  0x16u);
          }

          [*(id *)(v20 + 40) _deleteDataWithContext:v12];
        }

LABEL_18:
        objc_autoreleasePoolPop(v7);
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v14 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
      id v3 = v14;
    }

    while (v14);
  }

  if (v15) {
    [v16 stopAccessing];
  }
}

    goto LABEL_19;
  }

  LOBYTE(v7) = 0;
LABEL_19:

  return v7;
}

  v49 = 0LL;
  size_t v18 = 1;
LABEL_19:
  size_t v44 = a4;
  int v60 = 0u;
  v61 = 0u;
  uint64_t v58 = 0u;
  __int16 v59 = 0u;
  id obj = v6;
  __int16 v53 = [obj countByEnumeratingWithState:&v58 objects:v62 count:16];
  __int128 v24 = 0LL;
  if (v53)
  {
    __int128 v25 = *(void *)v59;
    uint64_t v45 = v8;
    __int16 v48 = v18;
    id v47 = *(void *)v59;
    while (2)
    {
      for (i = 0LL; i != v53; i = (char *)i + 1)
      {
        if (*(void *)v59 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v27 = *(void *)(*((void *)&v58 + 1) + 8LL * (void)i);
        if (v18)
        {
          __int16 v57 = v24;
          id v28 = (void *)objc_claimAutoreleasedReturnValue( -[LoadInAppProductsTask _mediaAPIFetchWith:error:]( v52,  "_mediaAPIFetchWith:error:",  v27,  &v57));
          __int16 v29 = v57;

          if (v29)
          {
            __int128 v24 = v29;
LABEL_43:

            goto LABEL_44;
          }

          if (*(_TtC9storekitd6Client **)((char *)&v52->_client + 2) == (_TtC9storekitd6Client *)1)
          {
            id v30 = objc_claimAutoreleasedReturnValue(-[LoadInAppProductsTask _parseMediaProducts:](v52, "_parseMediaProducts:", v28));

            __int128 v24 = 0LL;
            id v28 = (void *)v30;
          }

          else
          {
            __int128 v24 = 0LL;
          }
        }

        else
        {
          uint64_t v31 = v11;
          uint64_t v32 = [v49 mutableCopy];
          [v32 setObject:v27 forKeyedSubscript:@"offerNames"];
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[BagKey productsURL](&OBJC_CLASS____TtC9storekitd6BagKey, "productsURL"));
          unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v8 URLForKey:v33]);
          uint64_t v35 = 2;
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v50 requestWithMethod:2 bagURL:v34 parameters:v32]);

          v56 = v24;
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 resultWithError:&v56]);
          uint64_t v38 = v56;

          if (v38)
          {
            id v28 = 0LL;
            __int128 v24 = v38;
          }

          else
          {
            int v39 = (void *)objc_claimAutoreleasedReturnValue([v46 dataTaskPromiseWithRequest:v37]);
            __int16 v55 = 0LL;
            id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 resultWithError:&v55]);
            __int128 v24 = v55;
            id v41 = objc_claimAutoreleasedReturnValue([v40 responseCorrelationId]);
            char v42 = *(void **)((char *)&v52->_apiVersion + 2);
            *(int64_t *)((char *)&v52->_apiVersion + 2) = v41;

            if (v24)
            {
              id v28 = 0LL;
              uint64_t v35 = 2;
            }

            else
            {
              if ((id)-[LoadInAppProductsTask apiVersion](v52, "apiVersion") == (id)2)
              {
                id v28 = (void *)objc_claimAutoreleasedReturnValue(-[LoadInAppProductsTask _parseLegacyToMedia:](v52, "_parseLegacyToMedia:", v40));
                __int128 v24 = 0LL;
              }

              else
              {
                size_t v54 = 0LL;
                id v28 = (void *)objc_claimAutoreleasedReturnValue(-[LoadInAppProductsTask _parseResponse:error:](v52, "_parseResponse:error:", v40, &v54));
                __int128 v24 = v54;
              }

              uint64_t v35 = 2 * (v24 != 0LL);
            }

            id v8 = v45;
          }

          os_log_t v11 = v31;
          size_t v18 = v48;
          __int128 v25 = v47;
          if (v35) {
            goto LABEL_43;
          }
        }

        -[NSMutableArray addObjectsFromArray:](v11, "addObjectsFromArray:", v28);
      }

      __int16 v53 = [obj countByEnumeratingWithState:&v58 objects:v62 count:16];
      if (v53) {
        continue;
      }
      break;
    }
  }

    uint64_t v20 = -[DigestVerifier bytesValidated](self->_verifier, "bytesValidated");
    id v40 = 0LL;
    uint64_t v21 = [v7 truncateAtOffset:v20 error:&v40];
    id v22 = (unint64_t)v40;
    if (v21)
    {
      self->_savedBytes = -[DigestVerifier bytesValidated](self->_verifier, "bytesValidated");
      if (qword_10032EE98 != -1) {
        dispatch_once(&qword_10032EE98, &stru_1002E9E30);
      }
      __int128 v23 = (os_log_s *)off_1003288C0;
      if (os_log_type_enabled((os_log_t)off_1003288C0, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v24 = self->_logKey;
        savedBytes = self->_savedBytes;
        __int128 v26 = self->_downloadPath;
        *(_DWORD *)buf = 138543874;
        size_t v44 = v24;
        uint64_t v45 = 2048;
        uint64_t v46 = savedBytes;
        id v47 = 2114;
        __int16 v48 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Validated %llu bytes at: %{public}@",  buf,  0x20u);
      }
    }

    else
    {
      if (qword_10032EE98 != -1) {
        dispatch_once(&qword_10032EE98, &stru_1002E9E30);
      }
      if (os_log_type_enabled((os_log_t)off_1003288C0, OS_LOG_TYPE_ERROR)) {
        sub_100263724();
      }
    }

    int v39 = 0LL;
    uint64_t v27 = [v7 closeAndReturnError:&v39];
    id v28 = (unint64_t)v39;
    if ((v27 & 1) == 0)
    {
      if (qword_10032EE98 != -1) {
        dispatch_once(&qword_10032EE98, &stru_1002E9E30);
      }
      if (os_log_type_enabled((os_log_t)off_1003288C0, OS_LOG_TYPE_ERROR)) {
        sub_1002636C0();
      }
    }

    if (v22 | v28)
    {
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v30 = self->_downloadPath;
      uint64_t v38 = 0LL;
      [v29 removeItemAtPath:v30 error:&v38];
      uint64_t v31 = v38;

      if (v31)
      {
        if (qword_10032EE98 != -1) {
          dispatch_once(&qword_10032EE98, &stru_1002E9E30);
        }
        if (os_log_type_enabled((os_log_t)off_1003288C0, OS_LOG_TYPE_FAULT)) {
          sub_10026364C();
        }
      }

      else
      {
        if (qword_10032EE98 != -1) {
          dispatch_once(&qword_10032EE98, &stru_1002E9E30);
        }
        uint64_t v32 = (os_log_s *)off_1003288C0;
        if (os_log_type_enabled((os_log_t)off_1003288C0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = self->_logKey;
          unint64_t v34 = self->_downloadPath;
          *(_DWORD *)buf = 138543618;
          size_t v44 = v33;
          uint64_t v45 = 2114;
          uint64_t v46 = (unint64_t)v34;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Deleted partially downloaded file due to previous errors: %{public}@",  buf,  0x16u);
        }
      }
    }
  }

  uint64_t v35 = (NSOutputStream *)objc_claimAutoreleasedReturnValue( +[NSOutputStream outputStreamToFileAtPath:append:]( &OBJC_CLASS___NSOutputStream,  "outputStreamToFileAtPath:append:",  self->_downloadPath,  self->_savedBytes != 0));
  outputStream = self->_outputStream;
  self->_outputStream = v35;

  -[NSOutputStream open](self->_outputStream, "open");
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSOutputStream streamError](self->_outputStream, "streamError"));
  v4[2](v4, self->_savedBytes, v37);
}

  __break(1u);
}

    id v7 = (v11 - 1) & v11;
    id v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int v39 = v12;
  }

  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  type metadata accessor for AMSBagKey(0LL);
  BOOL result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
  __break(1u);
  return result;
}

      if (++v4 == v3) {
        goto LABEL_21;
      }
    }

    os_log_t v13 = v19;
    id v14 = 1LL;
    while (1)
    {
      unsigned int v15 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        break;
      }
      uint64_t v16 = *(v13 - 1);
      os_log_t v17 = *v13;
      if (v16 == v7 && v17 == v8) {
        goto LABEL_20;
      }
      BOOL result = sub_1001343BC(v16, v17);
      if ((result & 1) != 0) {
        goto LABEL_20;
      }
      v13 += 2;
      ++v14;
      if (v15 == v5) {
        goto LABEL_18;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_21:
    sub_100086004();
    return 0LL;
  }

  return result;
}

void sub_10001F944(uint64_t a1)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v17;
    p_cache = &OBJC_CLASS___SecureClock.cache;
    *(void *)&__int128 v4 = 138543618LL;
    __int128 v14 = v4;
    id v15 = v2;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v2);
        }
        id v9 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( p_cache + 268,  "contextWithBundleID:",  *(void *)(*((void *)&v16 + 1) + 8 * (void)v8),  v14));
        if (qword_10032E038 != -1) {
          dispatch_once(&qword_10032E038, &stru_1002E7A18);
        }
        id v10 = (void *)qword_10032E028;
        if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_DEBUG))
        {
          os_log_t v11 = v10;
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 logKey]);
          os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 bundleID]);
          *(_DWORD *)buf = v14;
          uint64_t v21 = v12;
          __int16 v22 = 2114;
          __int128 v23 = v13;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[%{public}@] Removing data for %{public}@ due to application uninstall",  buf,  0x16u);

          id v2 = v15;
          p_cache = (void **)(&OBJC_CLASS___SecureClock + 16);
        }

        [*(id *)(a1 + 40) _deleteDataWithContext:v9];

        id v8 = (char *)v8 + 1;
      }

      while (v5 != v8);
      id v5 = [v2 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }

    while (v5);
  }
}

void sub_10001FE14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001FE38(uint64_t a1)
{
  id v3 = (uint64_t *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 48);
  switch(v2)
  {
    case 0LL:
      uint64_t v4 = ASDErrorDomain;
      NSErrorUserInfoKey v35 = NSDebugDescriptionErrorKey;
      uint64_t v36 = @"Unknown action request";
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
      uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v4,  951LL,  v5));
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      goto LABEL_4;
    case 1LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v15 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v14 cancelTransactionWithIdentifier:v15 forBundleID:v16]);
      goto LABEL_15;
    case 2LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v18 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v14 deleteTransactionWithIdentifier:v18 forBundleID:v16]);
      goto LABEL_15;
    case 3LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v19 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v14 refundTransactionWithIdentifier:v19 forBundleID:v16]);
      goto LABEL_15;
    case 4LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v20 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v14 resolveIssueForTransactionWithIdentifier:v20 forBundleID:v16]);
      goto LABEL_15;
    case 5LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v21 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      __int16 v22 = v14;
      id v23 = v21;
      __int128 v24 = v16;
      uint64_t v25 = 0LL;
      goto LABEL_11;
    case 6LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v26 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      __int16 v22 = v14;
      id v23 = v26;
      __int128 v24 = v16;
      uint64_t v25 = 1LL;
LABEL_11:
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v22 startPriceIncreaseForTransactionID:v23 bundleID:v24 needsConsent:v25]);
      goto LABEL_15;
    case 7LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v27 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      id v28 = v14;
      uint64_t v29 = 1LL;
      goto LABEL_14;
    case 8LL:
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
      id v27 = [*(id *)(a1 + 32) transactionID];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
      id v28 = v14;
      uint64_t v29 = 0LL;
LABEL_14:
      uint64_t v17 = objc_claimAutoreleasedReturnValue( [v28 completePriceConsentRequestWithResponse:v29 transactionIdentifier:v27 forBundleID:v16]);
LABEL_15:
      uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v31 = *(void **)(v30 + 40);
      *(void *)(v30 + 40) = v17;

      break;
    default:
      uint64_t v9 = ASDErrorDomain;
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalid action (action: %ld)",  v2,  NSDebugDescriptionErrorKey));
      unint64_t v34 = v5;
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
      uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v9,  951LL,  v10));
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      os_log_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

LABEL_4:
      break;
  }

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    if (qword_10032E038 != -1) {
      dispatch_once(&qword_10032E038, &stru_1002E7A18);
    }
    uint64_t v32 = (void *)qword_10032E028;
    if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_ERROR)) {
      sub_10025C5F8(a1, v32, v3);
    }
  }

uint64_t sub_100020308(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 8LL) = *(void *)(result + 40);
  return result;
}

void sub_100020740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100020760(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleID]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 setStorefront:v2 forBundleID:v3]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000208B8(void *a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 registerForEventOfType:a1[6] withFilterData:a1[4]]);
  uint64_t v3 = *(void *)(a1[5] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100020994(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  [v2 unregisterForEventWithIdentifier:*(void *)(a1 + 32)];
}

void sub_100020A7C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  [v2 useConfigurationDirectory:*(void *)(a1 + 32) forBundleID:*(void *)(a1 + 40)];
}

void sub_100020C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100020C68(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 generateSKANPostbackSignature:*(void *)(a1 + 32)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100020D78(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  *(void *)(*(void *)(a1[5] + 8) + 24) = [v2 storeKitErrorForCategory:a1[6] bundleID:a1[4]];
}

void sub_100020E5C(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  [v2 setStoreKitError:a1[5] forCategory:a1[6] bundleID:a1[4]];
}

void sub_100021068(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 getIntegerValueForIdentifier:v2 forBundleID:v3];
}

void sub_1000212A4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 setIntegerValue:v3 forIdentifier:v4 forBundleID:v5]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    if (qword_10032E038 != -1) {
      dispatch_once(&qword_10032E038, &stru_1002E7A18);
    }
    uint64_t v9 = (void *)qword_10032E028;
    if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_ERROR))
    {
      id v10 = *(void **)(a1 + 32);
      uint64_t v11 = v9;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 logKey]);
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v16 = 138544130;
      uint64_t v17 = v12;
      __int16 v18 = 2048;
      uint64_t v19 = v14;
      __int16 v20 = 2048;
      uint64_t v21 = v13;
      __int16 v22 = 2114;
      uint64_t v23 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[%{public}@] Failed to set value to %ld for key %lu: %{public}@",  (uint8_t *)&v16,  0x2Au);
    }
  }

void sub_1000215F4(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v7 getStringValueForIdentifier:v2 forBundleID:v3]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100021858(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ASOctaneServer shared](&OBJC_CLASS___ASOctaneServer, "shared"));
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 setStringValue:v4 forIdentifier:v3 forBundleID:v5]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    if (qword_10032E038 != -1) {
      dispatch_once(&qword_10032E038, &stru_1002E7A18);
    }
    uint64_t v9 = (void *)qword_10032E028;
    if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_ERROR))
    {
      id v10 = *(void **)(a1 + 40);
      uint64_t v11 = v9;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 logKey]);
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      int v16 = 138544130;
      uint64_t v17 = v12;
      __int16 v18 = 2048;
      uint64_t v19 = v13;
      __int16 v20 = 2048;
      uint64_t v21 = v14;
      __int16 v22 = 2114;
      uint64_t v23 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[%{public}@] Failed to set value to %ld for key %lu: %{public}@",  (uint8_t *)&v16,  0x2Au);
    }
  }

void sub_100021EC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032E038 != -1) {
      dispatch_once(&qword_10032E038, &stru_1002E7A18);
    }
    uint64_t v4 = (os_log_s *)qword_10032E028;
    if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_ERROR)) {
      sub_10025C954(a1, (uint64_t)v3, v4);
    }
  }

  else
  {
    if (qword_10032E038 != -1) {
      dispatch_once(&qword_10032E038, &stru_1002E7A18);
    }
    uint64_t v5 = (os_log_s *)qword_10032E028;
    if (os_log_type_enabled((os_log_t)qword_10032E028, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Successfully refreshed receipt",  (uint8_t *)&v7,  0xCu);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100022000(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100327B58;
  off_100327B58 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032DFF0;
  qword_10032DFF0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032DFF8;
  qword_10032DFF8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E000;
  qword_10032E000 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E008;
  qword_10032E008 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E010;
  qword_10032E010 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E018;
  qword_10032E018 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032E020;
  qword_10032E020 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E028;
  qword_10032E028 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032E030;
  qword_10032E030 = (uint64_t)v19;
}

uint64_t sub_10002215C(uint64_t result, float a2, uint64_t a3, uint64_t a4)
{
  *(float *)a4 = a2;
  *(void *)(a4 + 4) = result;
  *(_WORD *)(a4 + 12) = 2114;
  *(void *)(a4 + 14) = v4;
  return result;
}

void sub_100022174( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

void sub_1000223D8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5 && *(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16LL), a3);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_13:
  if ([v3 allowsCellularAccess])
  {
    os_log_t v11 = @"phone";
  }

  else
  {
    os_log_t v11 = @"wifi";
  }

  [v4 addObject:v11];
LABEL_20:
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 componentsJoinedByString:@"."]);

  return v12;
}

  return v13;
}

  return v9;
}

  return v10;
}

    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_6;
  }

void sub_100023000(id a1)
{
  uint64_t v9 = 0LL;
  id v10 = &v9;
  uint64_t v11 = 0x2050000000LL;
  os_log_t v1 = (void *)qword_10032E048;
  uint64_t v12 = qword_10032E048;
  if (!qword_10032E048)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000234C0;
    v8[3] = &unk_1002E7AD8;
    void v8[4] = &v9;
    sub_1000234C0((uint64_t)v8);
    os_log_t v1 = (void *)v10[3];
  }

  id v2 = v1;
  _Block_object_dispose(&v9, 8);
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedScheduler]);
  id v4 = [sub_10002311C() groupWithName:@"com.apple.storekit.connectionPool.apps" maxConcurrent:4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v3 createActivityGroup:v5];

  id v6 = [sub_10002311C() groupWithName:@"com.apple.storekit.connectionPool.odr" maxConcurrent:3];
  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v3 createActivityGroup:v7];
}

void sub_100023104( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10002311C()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_10032E058;
  uint64_t v7 = qword_10032E058;
  if (!qword_10032E058)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000235C0;
    v3[3] = &unk_1002E7AD8;
    v3[4] = &v4;
    sub_1000235C0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000231B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000234C0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("_DASScheduler");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10032E048 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_10025CA90();
    sub_100023514();
  }

void sub_100023514()
{
  id v1 = 0LL;
  if (!qword_10032E050)
  {
    __int128 v2 = off_1002E7AF8;
    uint64_t v3 = 0LL;
    qword_10032E050 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_10032E050)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

void sub_1000235C0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("_DASActivityGroup");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10032E058 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    __int128 v2 = (void *)sub_10025CAB4();
    sub_100023614(v2);
  }

void sub_100023614(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  __int128 v2 = off_100327B60;
  off_100327B60 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E060;
  qword_10032E060 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032E068;
  qword_10032E068 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E070;
  qword_10032E070 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E078;
  qword_10032E078 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E080;
  qword_10032E080 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E088;
  qword_10032E088 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032E090;
  qword_10032E090 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E098;
  qword_10032E098 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032E0A0;
  qword_10032E0A0 = (uint64_t)v19;
}

void *sub_100023898(unsigned int a1)
{
  if (qword_10032E0B0 != -1) {
    dispatch_once(&qword_10032E0B0, &stru_1002E7BA8);
  }
  return *(&off_100327B68 + a1);
}

void sub_100023A64(_Unwind_Exception *a1)
{
}

void sub_100023CA8(_Unwind_Exception *a1)
{
}

LABEL_9:
  return v9;
}

  uint64_t v12 = v6;

  return v12;
}

      os_log_t v17 = self->_statement;
      os_log_t v9 = (const char *)-[__CFString UTF8String](theString, "UTF8String");
      statement = v17;
      os_log_t v11 = a4;
      uint64_t v12 = -1LL;
      goto LABEL_10;
    }

    CharactersPtr = CFStringGetCharactersPtr(theString);
    if (!CharactersPtr) {
      goto LABEL_9;
    }
    uint64_t v14 = CharactersPtr;
    os_log_t v15 = self->_statement;
    Length = CFStringGetLength(theString);
    sqlite3_bind_text16(v15, a4, v14, 2 * Length, 0LL);
  }

  else
  {
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Statement already finalized");
  }

  __break(1u);
  return result;
}

void sub_1000240C8(_Unwind_Exception *a1)
{
}

void sub_100024428( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100024440(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
}

void sub_1000245B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000245C8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(sqlite3 **)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  os_log_t v5 = (const char *)[v4 name];
  int v6 = [*(id *)(a1 + 40) argumentCount];
  int v7 = [*(id *)(a1 + 40) flags];
  id v8 = [v4 implementation];
  os_log_t v9 = (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))[v4 xFunc];
  xDestroy = (void (__cdecl *)(void *))[v4 xDestroy];

  uint64_t result = sqlite3_create_function_v2(v3, v5, v6, v7, v8, v9, 0LL, 0LL, xDestroy);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_DWORD)result == 0;
  return result;
}

id sub_100024A0C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) step];
}

void sub_100024D8C(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      os_log_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5));
        os_log_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void sub_100025038(sqlite3_context *a1)
{
}

void sub_100025284( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10002529C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000252AC(uint64_t a1)
{
}

uint64_t sub_1000252B4(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2(*(sqlite3 **)(*(void *)(a1 + 32) + 16LL), *(const char **)(a1 + 48), -1, &ppStmt, 0LL);
  if (sub_100018B78(v2))
  {
    id v3 = objc_alloc(&OBJC_CLASS___SQLiteStatement);
    uint64_t v4 = -[SQLiteStatement initWithStatement:onConnection:]( v3,  "initWithStatement:onConnection:",  ppStmt,  *(void *)(a1 + 32));
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    __int128 v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

  else
  {
    sqlite3_finalize(ppStmt);
  }

  return v2;
}

void sub_100025934(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100327B68;
  off_100327B68 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_100327B70;
  qword_100327B70 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  __int128 v6 = (void *)qword_100327B78;
  qword_100327B78 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  __int128 v8 = (void *)qword_100327B80;
  qword_100327B80 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_100327B88;
  qword_100327B88 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_100327B90;
  qword_100327B90 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_100327B98;
  qword_100327B98 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_100327BA0;
  qword_100327BA0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_100327BA8;
  qword_100327BA8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_100327BB0;
  qword_100327BB0 = (uint64_t)v19;
}

  ;
}

void sub_100025A7C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t sub_100025AA8()
{
  return objc_opt_class(v0);
}

id sub_100025AB4(void *a1)
{
  return a1;
}

uint64_t sub_100025AC0()
{
  return v0;
}

BOOL sub_100025ACC(os_log_s *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

id sub_100025AD8(uint64_t a1, void *a2)
{
  return a2;
}

id sub_100025AE4(void *a1)
{
  id v8 = 0LL;
  id v1 = sub_100025C04(a1, (uint64_t)&v8);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = v8;
  if (v3)
  {
    if (qword_10032E100 != -1) {
      dispatch_once(&qword_10032E100, &stru_1002E7E40);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E0E0, OS_LOG_TYPE_ERROR)) {
      sub_10025D038();
    }
    uint64_t v4 = 0LL;
  }

  else
  {
    os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"gracePeriodExpiresDate"]);
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0) {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( NSDate,  "dateWithTimeIntervalSince1970:",  (double)(uint64_t)[v5 longLongValue] / 1000.0));
    }
    else {
      uint64_t v4 = 0LL;
    }
  }

  return v4;
}

id sub_100025C04(void *a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@"."]);
  if ([v3 count] == (id)3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:1]);
    os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByReplacingOccurrencesOfString:@"-" withString:@"+"]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByReplacingOccurrencesOfString:@"_" withString:@"/"]);

    unint64_t v7 = (unint64_t)[v6 length] & 3;
    if (v7)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue( objc_msgSend( v6,  "stringByPaddingToLength:withString:startingAtIndex:",  (char *)objc_msgSend(v6, "length") - v7 + 4,  @"=",  0));

      uint64_t v6 = (void *)v8;
    }

    os_log_t v9 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v6,  0LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v9,  0LL,  a2));
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

BOOL sub_100025D3C(void *a1, uint64_t a2)
{
  id v2 = sub_100025C04(a1, a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"revocationDate"]);
  if (v4)
  {
    os_log_t v5 = (void *)v4;
LABEL_9:
    BOOL v7 = 0LL;
    goto LABEL_10;
  }

  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"type"]);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) == 0) {
    goto LABEL_9;
  }
  if (([v5 isEqualToString:@"Non-Consumable"] & 1) == 0)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"isUpgraded"]);

    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0) {
      unsigned __int8 v10 = [v8 BOOLValue];
    }
    else {
      unsigned __int8 v10 = 0;
    }
    os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"expiresDate"]);

    uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v5, v12) & 1) != 0)
    {
      [v5 doubleValue];
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  v13 / 1000.0));
      if ((v10 & 1) == 0)
      {
LABEL_14:
        os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        BOOL v7 = [v14 compare:v15] == (id)1;

LABEL_17:
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
      if ((v10 & 1) == 0) {
        goto LABEL_14;
      }
    }

    BOOL v7 = 0LL;
    goto LABEL_17;
  }

  BOOL v7 = 1LL;
LABEL_10:

  return v7;
}

id sub_100025EEC(void *a1, void *a2, void *a3, uint64_t a4, void *a5, int a6, int a7)
{
  id v12 = a1;
  id v13 = a2;
  id v14 = a3;
  id v44 = a5;
  os_log_t v15 = sub_10002653C(v12, v44);
  id v47 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (v47)
  {
    if (v14)
    {
      +[WriteReceipt writeReceiptData:toURL:logKey:error:]( &OBJC_CLASS___WriteReceipt,  "writeReceiptData:toURL:logKey:error:",  v47,  v14,  v44,  0LL);
    }

    else
    {
      int v16 = (void *)objc_claimAutoreleasedReturnValue([v13 callerBundleURL]);

      if (v16)
      {
        os_log_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 callerBundleURL]);
        +[WriteReceipt writeReceiptData:forBundleURL:logKey:error:]( &OBJC_CLASS___WriteReceipt,  "writeReceiptData:forBundleURL:logKey:error:",  v47,  v17,  v44,  0LL);
      }

      else
      {
        if (qword_10032E100 != -1) {
          dispatch_once(&qword_10032E100, &stru_1002E7E40);
        }
        if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_ERROR)) {
          sub_10025D0F8();
        }
      }
    }
  }

  else if (a4 == 1)
  {
    if (qword_10032E100 != -1) {
      dispatch_once(&qword_10032E100, &stru_1002E7E40);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_ERROR)) {
      sub_10025D098();
    }
  }

  __int16 v18 = sub_1000266A4(v12);
  os_log_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  if (qword_10032E100 != -1) {
    dispatch_once(&qword_10032E100, &stru_1002E7E40);
  }
  __int16 v20 = (void *)qword_10032E0D0;
  if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = v20;
    *(_DWORD *)buf = 138543618;
    id v57 = v44;
    __int16 v58 = 2048;
    id v59 = [v19 count];
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] %ld transactions in response",  buf,  0x16u);
  }

  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[ReceiptManager managerForClient:](&OBJC_CLASS___ReceiptManager, "managerForClient:", v13));
  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  id v23 = v19;
  id v24 = [v23 countByEnumeratingWithState:&v50 objects:v55 count:16];
  if (v24)
  {
    id v25 = v24;
    uint64_t v45 = a4;
    id v40 = v14;
    id v41 = v13;
    id v42 = v12;
    char v26 = 0;
    uint64_t v27 = *(void *)v51;
    do
    {
      id v28 = 0LL;
      do
      {
        if (*(void *)v51 != v27) {
          objc_enumerationMutation(v23);
        }
        uint64_t v29 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)v28);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "tcr_stringForKey:", off_1003280A8[0]));
        if ([v30 length])
        {
          size_t v54 = v30;
          char v26 = 1;
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v54,  1LL));
          [v46 setTransactionInfo:v31 unfinishedIDs:0 forRevision:0];
        }

        else if (v45 == 2)
        {
          if (qword_10032E100 != -1) {
            dispatch_once(&qword_10032E100, &stru_1002E7E40);
          }
          uint64_t v32 = (os_log_s *)qword_10032E0D0;
          if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            id v57 = v44;
            _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "[%{public}@] No transaction receipt in response",  buf,  0xCu);
          }
        }

        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "tcr_stringForKey:", off_100328138[0]));
        if (v33)
        {
          unsigned __int8 v34 = [v22 containsObject:v33];
          if (v47)
          {
            if ((v34 & 1) == 0)
            {
              sub_100026B1C(v47, v33, v44);
              [v22 addObject:v33];
            }
          }
        }

        id v28 = (char *)v28 + 1;
      }

      while (v25 != v28);
      id v25 = [v23 countByEnumeratingWithState:&v50 objects:v55 count:16];
    }

    while (v25);

    id v13 = v41;
    id v12 = v42;
    id v14 = v40;
    if ((v26 & 1) != 0) {
      goto LABEL_45;
    }
  }

  else
  {
  }

  NSErrorUserInfoKey v35 = (void *)objc_claimAutoreleasedReturnValue([v46 lastUpdated]);

  if (!v35) {
    goto LABEL_54;
  }
  if (qword_10032E100 != -1) {
    dispatch_once(&qword_10032E100, &stru_1002E7E40);
  }
  uint64_t v36 = (os_log_s *)qword_10032E0D0;
  if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v57 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Forcing server transaction sync for legacy purchase",  buf,  0xCu);
  }

LABEL_45:
  if (a6)
  {
    if (qword_10032E100 != -1) {
      dispatch_once(&qword_10032E100, &stru_1002E7E40);
    }
    uint64_t v37 = (os_log_s *)qword_10032E0D0;
    if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v57 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Syncing server transactions",  buf,  0xCu);
    }

    if (a7) {
      uint64_t v38 = 6LL;
    }
    else {
      uint64_t v38 = 1LL;
    }
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_100026D60;
    v48[3] = &unk_1002E7E20;
    id v49 = v44;
    [v46 syncReceiptsWithReason:v38 completionHandler:v48];
  }

    goto LABEL_46;
  }

  if ([v7 actionType] == (id)32)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 getRevokedProductsMap]);
    uint64_t v9 = v14;
    if (v14)
    {
      os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 allKeys]);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      v38[2] = sub_10005DF60;
      v38[3] = &unk_1002E9490;
      uint64_t v9 = v9;
      int v39 = v9;
      id v40 = self;
      id v41 = v8;
      [v15 enumerateObjectsUsingBlock:v38];
    }

    else
    {
      if (qword_10032EAB8 != -1) {
        dispatch_once(&qword_10032EAB8, &stru_1002E9800);
      }
      __int16 v20 = (os_log_s *)qword_10032EA78;
      if (os_log_type_enabled((os_log_t)qword_10032EA78, OS_LOG_TYPE_ERROR)) {
        sub_100262528(v20);
      }
    }

    goto LABEL_45;
  }

        __asm { BR              X8 }
      }

      if (v13 == -531863420) {
        goto LABEL_39;
      }
      os_log_t v11 = -503352505;
    }
  }

  else if (v13 > -1459139961)
  {
    if (v13 <= -1269023326)
    {
      if (v13 == -1459139960) {
        goto LABEL_45;
      }
      if (v13 == -1422777163) {
        goto LABEL_39;
      }
      os_log_t v11 = -1403081054;
    }

    else if (v13 > -1006137667)
    {
      if (v13 == -1006137666) {
        goto LABEL_39;
      }
      os_log_t v11 = -876676109;
    }

    else
    {
      if (v13 == -1269023325) {
        goto LABEL_45;
      }
      os_log_t v11 = -1028896721;
    }
  }

  else if (v13 > -1931668218)
  {
    os_log_t v11 = -1605270299;
  }

  else
  {
    if (v13 <= -2022691387)
    {
      if (v13 != -2088015090)
      {
        unsigned __int8 v10 = -2063883720;
        goto LABEL_13;
      }

      goto LABEL_45;
    }

    if (v13 == -2022691386) {
      goto LABEL_45;
    }
    os_log_t v11 = -2003270446;
  }

  if (v13 == v11) {
    goto LABEL_45;
  }
  return ((uint64_t (*)(void))sub_100236C48)();
}

LABEL_54:
  return v23;
}

  sub_100131A28(v4, (v12 - v4) / 48, v6);
  return 1LL;
}

NSData *sub_10002653C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 objectForKeyedSubscript:@"receipt-data"]);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v6 = objc_opt_class(v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    BOOL v7 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v4,  0LL);
    if (!v7)
    {
      if (qword_10032E100 != -1) {
        dispatch_once(&qword_10032E100, &stru_1002E7E40);
      }
      if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_ERROR)) {
        sub_10025D158();
      }
LABEL_14:
      BOOL v7 = 0LL;
    }
  }

  else
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSData);
    uint64_t v9 = objc_opt_class(v8);
    if ((objc_opt_isKindOfClass(v4, v9) & 1) == 0)
    {
      if (v4)
      {
        if (qword_10032E100 != -1) {
          dispatch_once(&qword_10032E100, &stru_1002E7E40);
        }
        if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_ERROR)) {
          sub_10025D1B8();
        }
      }

      goto LABEL_14;
    }

    BOOL v7 = v4;
  }

  return v7;
}

NSMutableArray *sub_1000266A4(void *a1)
{
  id v1 = a1;
  id v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"app-list"]);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    id v25 = v2;
    id v26 = v1;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id obj = v2;
    id v30 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (!v30) {
      goto LABEL_22;
    }
    uint64_t v29 = *(void *)v32;
    while (1)
    {
      for (i = 0LL; i != v30; i = (char *)i + 1)
      {
        if (*(void *)v32 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", @"offer-name", v25, v26));
        if (v6)
        {
        }

        else
        {
          BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"item-id"]);

          if (!v7) {
            continue;
          }
        }

        uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_stringForKey:", @"offer-name"));
        if (!v9)
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_stringForKey:", @"item-id"));
          if (!v9)
          {
            unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_numberForKey:", @"item-id"));
            uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v10 stringValue]);
          }
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v9, off_100328138[0]);
        os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_numberForKey:", @"item-id"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v11, off_100327F60[0]);

        id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_numberForKey:", @"quantity"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v12, off_100328140[0]);

        id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_dataForKey:", @"request-data"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v13, off_100328148[0]);

        id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_dataForKey:", @"receipt-data"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v14, @"rcpt");

        os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_dateForKey:", @"purchase-date"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v15, @"odate");
        int v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_dateForKey:", @"original-purchase-date"));
        os_log_t v17 = v16;
        __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_stringForKey:", @"transaction-id"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v18, @"tid");
        os_log_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_stringForKey:", @"original-transaction-id"));
        __int16 v20 = v19;
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_arrayForKey:", @"assetList"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v21, @"assets");

        __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcr_stringForKey:", @"transaction-receipt"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v22, off_1003280A8[0]);

        id v23 = -[NSMutableDictionary copy](v8, "copy");
        -[NSMutableArray addObject:](v28, "addObject:", v23);
      }

      id v30 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
      if (!v30)
      {
LABEL_22:

        id v2 = v25;
        id v1 = v26;
        break;
      }
    }
  }

  return v28;
}

BOOL sub_100026B1C(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v22 = a3;
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v23 = v5;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ASFReceipt receiptWithData:](&OBJC_CLASS___ASFReceipt, "receiptWithData:", v5));
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 iaps]);
  id v10 = [v9 countByEnumeratingWithState:&v24 objects:v34 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v25;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v25 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 productID]);
        unsigned int v16 = [v6 isEqual:v15];

        if (v16) {
          [v7 addObject:v14];
        }
      }

      id v11 = [v9 countByEnumeratingWithState:&v24 objects:v34 count:16];
    }

    while (v11);
  }

  if (qword_10032E100 != -1) {
    dispatch_once(&qword_10032E100, &stru_1002E7E40);
  }
  os_log_t v17 = (void *)qword_10032E0D0;
  if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v18 = v17;
    id v19 = [v7 count];
    *(_DWORD *)buf = 138543874;
    id v29 = v22;
    __int16 v30 = 2048;
    id v31 = v19;
    __int16 v32 = 2114;
    id v33 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Found %ld products in receipt with ID %{public}@",  buf,  0x20u);
  }

  BOOL v20 = [v7 count] != 0;

  return v20;
}

void sub_100026D60(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032E100 != -1) {
      dispatch_once(&qword_10032E100, &stru_1002E7E40);
    }
    uint64_t v4 = (os_log_s *)qword_10032E0D0;
    if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_ERROR)) {
      sub_10025D218(a1, (uint64_t)v3, v4);
    }
  }

  else
  {
    if (qword_10032E100 != -1) {
      dispatch_once(&qword_10032E100, &stru_1002E7E40);
    }
    id v5 = (os_log_s *)qword_10032E0D0;
    if (os_log_type_enabled((os_log_t)qword_10032E0D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Finished syncing server transactions",  (uint8_t *)&v7,  0xCu);
    }
  }
}

CFStringRef sub_100026E88(uint64_t a1)
{
  if (a1 == 1) {
    return @"1.0";
  }
  else {
    return @"2.0";
  }
}

__CFString *sub_100026EA4(unint64_t a1)
{
  if (a1 > 6) {
    return 0LL;
  }
  else {
    return off_1002E7E60[a1];
  }
}

id sub_100026EC4(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSData);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSArray);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber);
    uint64_t v8 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v5,  v6,  v7,  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    id v15 = 0LL;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v9,  v3,  &v15));
    id v11 = v15;
    uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSArray);
    id v13 = 0LL;
    if ((objc_opt_isKindOfClass(v10, v12) & 1) != 0)
    {
      if (v11)
      {
        if (a2)
        {
          id v13 = 0LL;
          *a2 = v11;
        }

        else
        {
          if (qword_10032E100 != -1) {
            dispatch_once(&qword_10032E100, &stru_1002E7E40);
          }
          if (os_log_type_enabled((os_log_t)qword_10032E0E0, OS_LOG_TYPE_ERROR)) {
            sub_10025D28C();
          }
          id v13 = 0LL;
        }
      }

      else
      {
        id v13 = v10;
      }
    }
  }

  else
  {
    id v13 = 0LL;
  }

  return v13;
}

void sub_100027068(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327BB8;
  off_100327BB8 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E0B8;
  qword_10032E0B8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032E0C0;
  qword_10032E0C0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E0C8;
  qword_10032E0C8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E0D0;
  qword_10032E0D0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E0D8;
  qword_10032E0D8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E0E0;
  qword_10032E0E0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  unsigned int v16 = (void *)qword_10032E0E8;
  qword_10032E0E8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E0F0;
  qword_10032E0F0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  BOOL v20 = (void *)qword_10032E0F8;
  qword_10032E0F8 = (uint64_t)v19;
}

  ;
}

void sub_100027814(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"CACHE_DELETE_AMOUNT"]);
  if (qword_10032E150 != -1) {
    dispatch_once(&qword_10032E150, &stru_1002E7EC0);
  }
  os_log_t v3 = (void *)qword_10032E108;
  if (os_log_type_enabled((os_log_t)qword_10032E108, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    os_log_t v5 = v3;
    int v7 = 138543618;
    id v8 = (id)objc_opt_class(v4);
    __int16 v9 = 2114;
    id v10 = v2;
    id v6 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Recovered %{public}@ bytes",  (uint8_t *)&v7,  0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100027A10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327BC0;
  off_100327BC0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E108;
  qword_10032E108 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E110;
  qword_10032E110 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E118;
  qword_10032E118 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E120;
  qword_10032E120 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E128;
  qword_10032E128 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E130;
  qword_10032E130 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  unsigned int v16 = (void *)qword_10032E138;
  qword_10032E138 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E140;
  qword_10032E140 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  BOOL v20 = (void *)qword_10032E148;
  qword_10032E148 = (uint64_t)v19;
}

LABEL_24:
    if (v22) {
      goto LABEL_25;
    }
LABEL_27:
    objc_storeStrong((id *)((char *)&self->_dialogContext + 2), v23);
    -[AsyncTask completeWithSuccess](self, "completeWithSuccess");
    goto LABEL_28;
  }

  -[FetchReceiptTask _authenticateAndRequestReceipt](self, "_authenticateAndRequestReceipt");
  if (!v22) {
    goto LABEL_27;
  }
LABEL_25:
  -[AsyncTask completeWithError:](self, "completeWithError:", v22);
LABEL_28:
}

    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_10;
  }

  swift_release(v102);
  id v33 = v103;
LABEL_22:
  _Block_release(v33);
}

        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        id v6 = (uint64_t *)(v0 + 256);
        sub_100079604(*(void *)(v0 + 232), (uint64_t)qword_10033E1A8);
        sub_1000C600C();
        int v39 = static os_log_type_t.error.getter(v38);
        id v40 = v39;
        __int16 v30 = (os_log_s *)Logger.logObject.getter(v39);
        if (sub_1000C63C8(v30))
        {
          id v41 = sub_10007B9FC(22LL);
          id v42 = sub_10007B9FC(64LL);
          v50[0] = v42;
          *(_DWORD *)id v41 = 136446466;
          *(void *)(v0 + 152) = sub_1000C625C(v42, v43, v44);
          sub_1000C6004(v0 + 152, v0 + 160);
          *(_WORD *)(v41 + 12) = 2082;
          *(void *)(v0 + 160) = sub_1000C6434( 0xD000000000000032LL,  (uint64_t)"Store change notification has no payload, ignoring",  v46,  v47,  (uint64_t)v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v41 + 14);
          sub_100086038((void *)&_mh_execute_header, v30, v40, "%{public}s%{public}s", (uint8_t *)v41);
          sub_100086030(v42, v45, (uint64_t)&type metadata for Any + 8);
          sub_10007B974(v42);
          sub_10007B974(v41);
        }

        goto LABEL_28;
      }
    }

    else
    {
      *(_OWORD *)(v0 + 8_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v0 + 104) = 0u;
    }

    sub_1000C65DC(v17, (uint64_t *)&unk_100328ED0);
    goto LABEL_24;
  }

      os_log_t v9 = (v15 - 1) & v15;
      os_log_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }

    os_log_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    os_log_t v19 = *v17;
    __int16 v18 = v17[1];
    sub_10007B1C0(*(void *)(v4 + 56) + 32 * v13, (uint64_t)v34);
    sub_1000853B0(v34, v33);
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v32, v19, v18);
    uint64_t result = Hasher._finalize()();
    BOOL v20 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v21 = result & ~v20;
    id v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0) {
      break;
    }
    id v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    id v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *id v28 = v19;
    v28[1] = v18;
    uint64_t result = (uint64_t)sub_1000853B0(v33, (_OWORD *)(*(void *)(v8 + 56) + 32 * v23));
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v8;
    }
  }

  __int128 v24 = 0;
  __int128 v25 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v25 || (v24 & 1) == 0)
  {
    __int128 v26 = v22 == v25;
    if (v22 == v25) {
      id v22 = 0LL;
    }
    v24 |= v26;
    __int128 v27 = *(void *)(v11 + 8 * v22);
    if (v27 != -1)
    {
      id v23 = __clz(__rbit64(~v27)) + (v22 << 6);
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

    os_log_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    __int128 v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      __int128 v27 = *(_OWORD *)v26;
      id v28 = *(_OWORD *)(v26 + 16);
      id v41 = *(void *)(v26 + 32);
      int v39 = v27;
      id v40 = v28;
      sub_1000853B0((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_10009BEC0(v26, (uint64_t)&v39);
      sub_10007B1C0(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v29 = -1LL << *(_BYTE *)(v8 + 32);
    __int16 v30 = result & ~v29;
    id v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unsigned int v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v32 = 0;
      id v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        __int128 v34 = v31 == v33;
        if (v31 == v33) {
          id v31 = 0LL;
        }
        v32 |= v34;
        NSErrorUserInfoKey v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unsigned int v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    os_log_t v17 = *(void *)(v8 + 48) + 40 * v16;
    __int16 v18 = v39;
    os_log_t v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)os_log_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    uint64_t result = (uint64_t)sub_1000853B0(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  *os_log_t v3 = v8;
  return result;
}

void sub_100028708( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100028750(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100028760(uint64_t a1)
{
}

void sub_100028768(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100028ACC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    id v8 = 0LL;
  }

  else
  {
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 _requestReceiptStringError:&v10]);
    id v7 = v10;
    if (!v7)
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 82LL), v8);
      [*(id *)(a1 + 32) completeWithSuccess];
      goto LABEL_5;
    }
  }

  [*(id *)(a1 + 32) completeWithError:v7];
LABEL_5:
}

LABEL_30:
  if (a3) {
    *a3 = v9;
  }

  return v11;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_10002A3B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327C88;
  off_100327C88 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E158;
  qword_10032E158 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E160;
  qword_10032E160 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E168;
  qword_10032E168 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E170;
  qword_10032E170 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E178;
  qword_10032E178 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E180;
  qword_10032E180 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E188;
  qword_10032E188 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E190;
  qword_10032E190 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  BOOL v20 = (void *)qword_10032E198;
  qword_10032E198 = (uint64_t)v19;
}

void sub_10002A514( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10002A528()
{
  return v0;
}

void sub_10002A6A0(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___StoreKitTestingService);
  id v2 = (void *)qword_10032E1A8;
  qword_10032E1A8 = (uint64_t)v1;
}

uint64_t sub_10002C3E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10002D820(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327E10;
  off_100327E10 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E1B8;
  qword_10032E1B8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E1C0;
  qword_10032E1C0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E1C8;
  qword_10032E1C8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E1D0;
  qword_10032E1D0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E1D8;
  qword_10032E1D8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E1E0;
  qword_10032E1E0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E1E8;
  qword_10032E1E8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E1F0;
  qword_10032E1F0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  BOOL v20 = (void *)qword_10032E1F8;
  qword_10032E1F8 = (uint64_t)v19;
}

void sub_10002D97C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10002DB34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002DB4C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10002DBC4;
  v5[3] = &unk_1002E7F70;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  *(_OWORD *)id v6 = v4;
  [a2 enumerateRowsUsingBlock:v5];
}

void sub_10002DBC4(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 stringForColumnName:@"name"]);
  unsigned __int8 v6 = [v7 isEqualToString:*(void *)(a1 + 32)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
  *a4 = v6;
}

void sub_10002DCB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10002DCCC(uint64_t a1, void *a2)
{
  id result = [a2 firstInt64Value];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_10002DDBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10002DDD4(uint64_t a1)
{
  id v2 = -[SQLiteSchemaMigration initWithConnection:]( objc_alloc(&OBJC_CLASS___SQLiteSchemaMigration),  "initWithConnection:",  *(void *)(*(void *)(a1 + 32) + 8LL));
  if (qword_10032E250 != -1) {
    dispatch_once(&qword_10032E250, &stru_1002E8008);
  }
  id v3 = (void *)qword_10032E238;
  if (os_log_type_enabled((os_log_t)qword_10032E238, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
    os_log_t v5 = v3;
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 options]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 databasePath]);
    uint64_t v8 = *(void *)(a1 + 56);
    int v12 = 138543618;
    os_log_t v13 = v7;
    __int16 v14 = 2048;
    uint64_t v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Migrating %{public}@ to %llu",  (uint8_t *)&v12,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = -[SQLiteSchemaMigration success](v2, "success");
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    [*(id *)(a1 + 32) _setUserVersion:*(void *)(a1 + 56)];
  }

  else
  {
    if (qword_10032E250 != -1) {
      dispatch_once(&qword_10032E250, &stru_1002E8008);
    }
    os_log_t v9 = (void *)qword_10032E238;
    if (os_log_type_enabled((os_log_t)qword_10032E238, OS_LOG_TYPE_ERROR)) {
      sub_10025DB94(a1 + 32, v9, a1);
    }
  }

  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v10;
}

void sub_10002E08C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10002E0A4(uint64_t a1, void *a2)
{
  id result = [a2 hasRows];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10002E138(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327E18;
  off_100327E18 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  __int128 v4 = (void *)qword_10032E208;
  qword_10032E208 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned __int8 v6 = (void *)qword_10032E210;
  qword_10032E210 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E218;
  qword_10032E218 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E220;
  qword_10032E220 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10032E228;
  qword_10032E228 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int16 v14 = (void *)qword_10032E230;
  qword_10032E230 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E238;
  qword_10032E238 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E240;
  qword_10032E240 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  BOOL v20 = (void *)qword_10032E248;
  qword_10032E248 = (uint64_t)v19;
}

void sub_10002E90C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10002E92C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002E93C(uint64_t a1)
{
}

void sub_10002E944(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"receipt"]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  unsigned __int8 v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_10002EEDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"product_id"]);
  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"receipt"]);

  id v16 = 0LL;
  id v7 = sub_100025C04(v6, (uint64_t)&v16);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v16;
  if (v9)
  {
    if (qword_10032E2A0 != -1) {
      dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
      sub_10025DCEC();
    }
    goto LABEL_13;
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"revocationDate"]);
  if (!v10)
  {
    os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"revocationReason"]);

    if (v11) {
      goto LABEL_9;
    }
    int v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tcr_numberForKey:", @"expiresDate"));
    os_log_t v13 = v12;
    if (v12)
    {
      [v12 doubleValue];
      os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  v14 / 1000.0));
      if ([v15 compare:*(void *)(a1 + 32)] == (id)-1)
      {
        if (qword_10032E2A0 != -1) {
          dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
        }
        if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
          sub_10025DC94();
        }

        goto LABEL_26;
      }
    }

    if (v5
      && ([*(id *)(a1 + 40) containsObject:v5] & 1) == 0
      && [v6 length])
    {
      [*(id *)(a1 + 40) addObject:v5];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

LABEL_26:
    goto LABEL_13;
  }

LABEL_9:
  if (qword_10032E2A0 != -1) {
    dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
    sub_10025DCC0();
  }
LABEL_13:
}

  __int128 v27 = *(void *)(a1 + 56);
  id v28 = (void *)objc_claimAutoreleasedReturnValue([(id)v9 toASDErrorWithMetadata:0]);
  (*(void (**)(uint64_t, id, void *))(v27 + 16))(v27, v8, v28);
}

  __break(1u);
  return result;
}

  sub_100085E98();
}

  __break(1u);
  return result;
}

    sub_10012A314();
    uint64_t v5 = v19 & v18;
    uint64_t v8 = v21 + (v20 << 6);
    unsigned __int8 v6 = v20;
  }

  while (!__OFADD__(v15, 1LL))
  {
    sub_10012A0A0();
    if (v10 == v11) {
      goto LABEL_38;
    }
    os_log_t v15 = v17 + 1;
    if (*(void *)(v33 + 8 * v16)) {
      goto LABEL_26;
    }
  }

    sub_10012A314();
    id v4 = v16 & v15;
    uint64_t v5 = v17;
  }

  while (!__OFADD__(v12, 1LL))
  {
    sub_10012A0A0();
    if (v7 == v8) {
      goto LABEL_38;
    }
    int v12 = v14 + 1;
    if (*(void *)(v31 + 8 * v13)) {
      goto LABEL_26;
    }
  }

        size_t v54 = v12[8];
        __int16 v55 = (char *)v10 + v54;
        v56 = (char *)v11 + v54;
        *(void *)__int16 v55 = *(void *)v56;
        v55[8] = v56[8];
        id v57 = v12[9];
        __int16 v58 = (char *)v10 + v57;
        id v59 = (char *)v11 + v57;
        v58[8] = v59[8];
        *(void *)__int16 v58 = *(void *)v59;
        int v60 = v12[10];
        v61 = (char *)v10 + v60;
        v62 = (char *)v11 + v60;
        __int128 v63 = type metadata accessor for UUID(0LL);
        v64 = *(void *)(v63 - 8);
        v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
        v66 = v65(v61, 1LL, v63);
        v67 = v65(v62, 1LL, v63);
        if (v66)
        {
          if (!v67)
          {
            (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v61, v62, v63);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0LL, 1LL, v63);
LABEL_32:
            a3 = v77;
            goto LABEL_33;
          }
        }

        else
        {
          if (!v67)
          {
            (*(void (**)(char *, char *, uint64_t))(v64 + 40))(v61, v62, v63);
            goto LABEL_32;
          }

          (*(void (**)(char *, uint64_t))(v64 + 8))(v61, v63);
        }

        v68 = sub_10007B1FC(&qword_10032C748);
        memcpy(v61, v62, *(void *)(*(void *)(v68 - 8) + 64LL));
        goto LABEL_32;
      }

      sub_1000A18B0((uint64_t)v10);
    }

    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    goto LABEL_18;
  }

  if (v16)
  {
LABEL_7:
    __int128 v24 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v10, v11, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_33;
  }

  v76 = a3;
  os_log_t v17 = *((_OWORD *)v11 + 1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v17;
  *((_OWORD *)v10 + 2) = *((_OWORD *)v11 + 2);
  __int16 v18 = v12[7];
  os_log_t v19 = (char *)v10 + v18;
  BOOL v20 = (char *)v11 + v18;
  uint64_t v21 = sub_10007B1FC(&qword_10032C6A0);
  id v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 3LL, v21))
  {
    id v23 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    __int128 v27 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v19, v20, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 3LL, v21);
  }

  id v28 = v12[8];
  id v29 = (char *)v10 + v28;
  __int16 v30 = (char *)v11 + v28;
  *(void *)id v29 = *(void *)v30;
  v29[8] = v30[8];
  id v31 = v12[9];
  __int16 v32 = (char *)v10 + v31;
  id v33 = (char *)v11 + v31;
  v32[8] = v33[8];
  *(void *)__int16 v32 = *(void *)v33;
  __int128 v34 = v12[10];
  NSErrorUserInfoKey v35 = (char *)v10 + v34;
  uint64_t v36 = (char *)v11 + v34;
  uint64_t v37 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1LL, v37))
  {
    int v39 = sub_10007B1FC(&qword_10032C748);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  }

  a3 = v76;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_33:
  v69 = *(int *)(a3 + 32);
  v70 = (void *)((char *)a1 + v69);
  v71 = (void *)((char *)a2 + v69);
  v73 = *v71;
  v72 = v71[1];
  *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  return a1;
}

        __int128 v52 = v10[8];
        __int128 v53 = (char *)v8 + v52;
        size_t v54 = (char *)v9 + v52;
        *(void *)__int128 v53 = *(void *)v54;
        v53[8] = v54[8];
        __int16 v55 = v10[9];
        v56 = (char *)v8 + v55;
        id v57 = (char *)v9 + v55;
        v56[8] = v57[8];
        *(void *)v56 = *(void *)v57;
        __int16 v58 = v10[10];
        id v59 = (char *)v8 + v58;
        int v60 = (char *)v9 + v58;
        v61 = type metadata accessor for UUID(0LL);
        v62 = *(void *)(v61 - 8);
        __int128 v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
        v64 = v63(v59, 1LL, v61);
        v65 = v63(v60, 1LL, v61);
        if (v64)
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0LL, 1LL, v61);
LABEL_32:
            a3 = v79;
            goto LABEL_33;
          }
        }

        else
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v59, v60, v61);
            goto LABEL_32;
          }

          (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
        }

        v66 = sub_10007B1FC(&qword_10032C748);
        memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64LL));
        goto LABEL_32;
      }

      sub_1000A18B0((uint64_t)v8);
    }

    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_18;
  }

  if (v14)
  {
LABEL_7:
    id v22 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v8, v9, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_33;
  }

  v78 = a3;
  os_log_t v15 = *((_OWORD *)v9 + 1);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *((_OWORD *)v8 + 1) = v15;
  *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
  id v16 = v10[7];
  os_log_t v17 = (char *)v8 + v16;
  __int16 v18 = (char *)v9 + v16;
  os_log_t v19 = sub_10007B1FC(&qword_10032C6A0);
  BOOL v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 3LL, v19))
  {
    uint64_t v21 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    __int128 v25 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v17, v18, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 3LL, v19);
  }

  __int128 v26 = v10[8];
  __int128 v27 = (char *)v8 + v26;
  id v28 = (char *)v9 + v26;
  *(void *)__int128 v27 = *(void *)v28;
  v27[8] = v28[8];
  id v29 = v10[9];
  __int16 v30 = (char *)v8 + v29;
  id v31 = (char *)v9 + v29;
  v30[8] = v31[8];
  *(void *)__int16 v30 = *(void *)v31;
  __int16 v32 = v10[10];
  id v33 = (char *)v8 + v32;
  __int128 v34 = (char *)v9 + v32;
  NSErrorUserInfoKey v35 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_10007B1FC(&qword_10032C748);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  a3 = v78;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_33:
  v67 = a3[6];
  v68 = (void *)((char *)a1 + v67);
  v69 = (void *)((char *)a2 + v67);
  v71 = *v69;
  v70 = v69[1];
  *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  v72 = a3[7];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  v75 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 40LL))(v73, v74, v75);
  return a1;
}

        os_log_t v11 = (v18 - 1) & v18;
        id v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      BOOL v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(v20);
      id result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      id v22 = result & ~v21;
      id v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        double v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v24 = 0;
        __int128 v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          __int128 v26 = v23 == v25;
          if (v23 == v25) {
            id v23 = 0LL;
          }
          v24 |= v26;
          __int128 v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        double v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  id result = swift_release(v3);
  void *v2 = v6;
  return result;
}

    os_log_t v11 = (v18 - 1) & v18;
    id v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    BOOL v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v20);
    id result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    id v22 = result & ~v21;
    id v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      double v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v24 = 0;
      __int128 v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        __int128 v26 = v23 == v25;
        if (v23 == v25) {
          id v23 = 0LL;
        }
        v24 |= v26;
        __int128 v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      double v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }

  os_log_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    id result = swift_release(v3);
    id v2 = v28;
    goto LABEL_38;
  }

  __int16 v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    id v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    id v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    __int16 v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

        __int128 v52 = v10[8];
        __int128 v53 = (char *)v8 + v52;
        size_t v54 = (char *)v9 + v52;
        *(void *)__int128 v53 = *(void *)v54;
        v53[8] = v54[8];
        __int16 v55 = v10[9];
        v56 = (char *)v8 + v55;
        id v57 = (char *)v9 + v55;
        v56[8] = v57[8];
        *(void *)v56 = *(void *)v57;
        __int16 v58 = v10[10];
        id v59 = (char *)v8 + v58;
        int v60 = (char *)v9 + v58;
        v61 = type metadata accessor for UUID(0LL);
        v62 = *(void *)(v61 - 8);
        __int128 v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
        v64 = v63(v59, 1LL, v61);
        v65 = v63(v60, 1LL, v61);
        if (v64)
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v60, v61);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0LL, 1LL, v61);
LABEL_32:
            a3 = v75;
            goto LABEL_33;
          }
        }

        else
        {
          if (!v65)
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v59, v60, v61);
            goto LABEL_32;
          }

          (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v61);
        }

        v66 = sub_10007B1FC(&qword_10032C748);
        memcpy(v59, v60, *(void *)(*(void *)(v66 - 8) + 64LL));
        goto LABEL_32;
      }

      sub_1000A18B0((uint64_t)v8);
    }

    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_18;
  }

  if (v14)
  {
LABEL_7:
    id v22 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v8, v9, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_33;
  }

  v74 = a3;
  os_log_t v15 = *((_OWORD *)v9 + 1);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *((_OWORD *)v8 + 1) = v15;
  *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
  id v16 = v10[7];
  os_log_t v17 = (char *)v8 + v16;
  __int16 v18 = (char *)v9 + v16;
  os_log_t v19 = sub_10007B1FC(&qword_10032C6A0);
  BOOL v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 3LL, v19))
  {
    uint64_t v21 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    __int128 v25 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32LL))(v17, v18, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 3LL, v19);
  }

  __int128 v26 = v10[8];
  __int128 v27 = (char *)v8 + v26;
  id v28 = (char *)v9 + v26;
  *(void *)__int128 v27 = *(void *)v28;
  v27[8] = v28[8];
  id v29 = v10[9];
  __int16 v30 = (char *)v8 + v29;
  id v31 = (char *)v9 + v29;
  v30[8] = v31[8];
  *(void *)__int16 v30 = *(void *)v31;
  __int16 v32 = v10[10];
  id v33 = (char *)v8 + v32;
  __int128 v34 = (char *)v9 + v32;
  NSErrorUserInfoKey v35 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35))
  {
    uint64_t v37 = sub_10007B1FC(&qword_10032C748);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
  }

  a3 = v74;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_33:
  v67 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v68 = (void *)(a1 + v67);
  v69 = (uint64_t *)(a2 + v67);
  v71 = *v69;
  v70 = v69[1];
  *v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  return a1;
}

void sub_10002F16C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (([*(id *)(a1 + 32) containsObject:v5] & 1) == 0 && objc_msgSend(v6, "length"))
  {
    [*(id *)(a1 + 32) addObject:v5];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10002F448(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"receipt"]);
  if ([v4 length]) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_10002F740(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"renewal_info"]);
  id v52 = 0LL;
  id v8 = sub_100026EC4(v7, &v52);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v52;
  if (v10)
  {
    os_log_t v11 = v10;
    if (qword_10032E2A0 != -1) {
      dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
      sub_10025DE14();
    }

    goto LABEL_45;
  }

  if (v9)
  {
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    id v12 = v9;
    id v13 = [v12 countByEnumeratingWithState:&v48 objects:v57 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v38 = a5;
      int v39 = v9;
      id v40 = v7;
      id v41 = v6;
      id v44 = 0LL;
      uint64_t v45 = 0LL;
      id v15 = 0LL;
      uint64_t v16 = *(void *)v49;
      do
      {
        os_log_t v17 = 0LL;
        do
        {
          __int16 v18 = v15;
          if (*(void *)v49 != v16) {
            objc_enumerationMutation(v12);
          }
          os_log_t v19 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)v17);
          BOOL v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", @"signedRenewalInfo", v38));
          id v47 = v15;
          id v21 = sub_100025C04(v20, (uint64_t)&v47);
          id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          id v15 = v47;

          if (v15) {
            BOOL v23 = 1;
          }
          else {
            BOOL v23 = v22 == 0LL;
          }
          if (v23)
          {
            if (qword_10032E2A0 != -1) {
              dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
            }
            __int128 v24 = (os_log_s *)qword_10032E280;
            if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = a1[4];
              *(_DWORD *)buf = 138543618;
              uint64_t v54 = v25;
              __int16 v55 = 2114;
              id v56 = v15;
              _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Failed to parse renewal info payload when checking for billing grace period for %{public}@: %{public}@",  buf,  0x16u);
            }
          }

          else
          {
            id v26 = v14;
            __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:@"gracePeriodExpiresDate"]);
            uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSNumber);
            char isKindOfClass = objc_opt_isKindOfClass(v27, v28);
            if ((isKindOfClass & 1) != 0 && (!v45 || [v45 compare:v27] == (id)-1))
            {
              id v43 = v27;

              id v30 = v19;
              id v44 = v30;
              uint64_t v45 = v43;
            }

            id v14 = v26;
          }

          os_log_t v17 = (char *)v17 + 1;
        }

        while (v14 != v17);
        id v14 = [v12 countByEnumeratingWithState:&v48 objects:v57 count:16];
      }

      while (v14);

      if (v44)
      {
        id v6 = v41;
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v41 objectForKeyedSubscript:@"subscription_group_id"]);
        uint64_t v33 = a1[4];
        __int16 v32 = (void *)a1[5];
        id v46 = 0LL;
        __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( [v32 _latestTransactionReceiptForUnarchivedRenewalInfo:v44 subscriptionGroupID:v31 bundleID:v33 outProductID:&v46]);
        id v35 = v46;
        uint64_t v36 = v35;
        id v9 = v39;
        if (v34 && v35) {
          (*(void (**)(void))(a1[6] + 16LL))();
        }

        id v7 = v40;
        uint64_t v37 = v45;
LABEL_44:

        goto LABEL_45;
      }

      id v7 = v40;
      id v6 = v41;
      id v9 = v39;
      uint64_t v37 = v45;
    }

    else
    {

      id v15 = 0LL;
      uint64_t v37 = 0LL;
    }

    if (qword_10032E2A0 != -1) {
      dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
      sub_10025DDB0();
    }
    goto LABEL_44;
  }

  if (qword_10032E2A0 != -1) {
    dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
    sub_10025DD4C();
  }
LABEL_45:
}

void sub_10002FE18(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"receipt"]);
  if ([v4 length]) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100030358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100030378(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  if (qword_10032E2A0 != -1) {
    dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
  }
  id v7 = (os_log_s *)qword_10032E280;
  if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138543618;
    uint64_t v10 = v8;
    __int16 v11 = 2114;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Found intro offer transaction for %{public}@: %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  if (v6)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

void sub_1000305A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000305B8(uint64_t a1, void *a2)
{
}

uint64_t sub_100030650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100030840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100030860(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

void sub_100030AF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100030B18(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"transaction_id"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v6, @"tid");

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"original_transaction_id"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v7, @"otid");

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"product_id"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v8, off_100328138[0]);

  int v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"item_id"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v9, off_100327F60[0]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"transaction_date"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v10, @"odate");

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"original_transaction_date"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v11, @"date");

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"receipt"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v12, @"rcpt");

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"quantity"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v13, off_100328140[0]);

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"request_data"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v14, off_100328148[0]);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"transaction_receipt"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v15, off_1003280A8[0]);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"assets"]);
  if (v16)
  {
    uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSArray);
    uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSNumber);
    uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSString);
    uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSDate);
    id v22 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v17,  v18,  v19,  v20,  v21,  objc_opt_class(&OBJC_CLASS___NSData),  0LL);
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    id v28 = 0LL;
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v23,  v16,  &v28));
    id v25 = v28;
    if (v25)
    {
      uint64_t v26 = ASDLogHandleForCategory(36LL);
      __int128 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_10025DE7C();
      }
    }

    else
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v24, @"assets");
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v5];
}

void sub_10003105C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _BYTE *a5)
{
  id v11 = a3;
  if ((unint64_t)[*(id *)(a1 + 32) count] > 0x63)
  {
    *a5 = 1;
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"renewal_info"]);
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSData);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    {
      Class v9 = sub_1000F6DE8(v7, 0LL);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      if (v10) {
        [*(id *)(a1 + 32) addObject:v10];
      }
    }
  }
}

void sub_1000312C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000312E8(void *a1, uint64_t a2, void *a3, uint64_t a4, _BYTE *a5)
{
  id v7 = a3;
  if (++*(void *)(*(void *)(a1[5] + 8LL) + 24LL) > 0x1F3uLL)
  {
    if (!a1[6]) {
      *a5 = 1;
    }
  }

  else
  {
    id v13 = v7;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"receipt"]);
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
    {
      uint64_t v10 = sub_1000F6C2C((uint64_t)v8, 0LL);
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      {
        id v11 = (void *)a1[4];
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v10 >> 9));
        [v11 addObject:v12];
      }
    }

    id v7 = v13;
  }
}

void sub_100031590( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000315B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000317A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000317C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100031CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_100031CFC(uint64_t a1, void *a2, _BYTE *a3)
{
  *a3 = 1;
}

void sub_100031F2C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"subscription_group_id"]);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"last_updated"]);
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDate);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) == 0)
    {
      if (qword_10032E2A0 != -1) {
        dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
      }
      if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
        sub_10025E07C();
      }
      uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));

      id v7 = (void *)v9;
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"renewal_info"]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _statusesForRenewalInfoBlob:v10 subscriptionGroupID:v5 bundleID:*(void *)(a1 + 40)]);
    id v12 = v11;
    if (!*(_BYTE *)(a1 + 56) || [v11 count])
    {
      v14[0] = @"subscriptionGroupIdentifier";
      v14[1] = @"lastUpdated";
      v15[0] = v5;
      v15[1] = v7;
      v14[2] = @"lastTransactions";
      v15[2] = v12;
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  3LL));
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    if (qword_10032E2A0 != -1) {
      dispatch_once(&qword_10032E2A0, &stru_1002E81E8);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E280, OS_LOG_TYPE_ERROR)) {
      sub_10025E0DC();
    }
  }
}

void sub_10003219C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327E20;
  off_100327E20 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E258;
  qword_10032E258 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032E260;
  qword_10032E260 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E268;
  qword_10032E268 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E270;
  qword_10032E270 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E278;
  qword_10032E278 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E280;
  qword_10032E280 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E288;
  qword_10032E288 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032E290;
  qword_10032E290 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E298;
  qword_10032E298 = (uint64_t)v19;
}

void sub_1000322F8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

void sub_10003232C(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

LABEL_32:
      if ((v8 & 1) == 0) {
        goto LABEL_45;
      }
      goto LABEL_33;
    }

    if (v7 == 15200)
    {
      if ([v4 column:@"allow_developer_control" existsInTable:@"storekit_messages"]) {
        uint64_t v18 = &stru_1002E8288;
      }
      else {
        uint64_t v18 = &stru_1002E8268;
      }
      uint64_t v8 = [v4 migrateToVersion:15400 usingBlock:v18];
      if (qword_10032E2F0 != -1) {
        dispatch_once(&qword_10032E2F0, &stru_1002E82F0);
      }
      os_log_t v19 = (void *)qword_10032E2B0;
      if (os_log_type_enabled((os_log_t)qword_10032E2B0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = v19;
        uint64_t v20 = [v4 currentSchemaVersion];
        *(_DWORD *)buf = v27;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        id v29 = 15400LL;
        LOWORD(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 2) = v8;
        id v12 = v10;
        os_log_t v13 = "[%{public}@]: Database migration function for %li => %li success=%d";
        goto LABEL_31;
      }

      goto LABEL_32;
    }

    if (v7 != 15400) {
      break;
    }
    uint64_t v21 = [v4 migrateToVersion:16000 usingBlock:&stru_1002E82A8];
    if (qword_10032E2F0 != -1) {
      dispatch_once(&qword_10032E2F0, &stru_1002E82F0);
    }
    id v22 = (void *)qword_10032E2B0;
    if (os_log_type_enabled((os_log_t)qword_10032E2B0, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v23 = v22;
      __int128 v24 = [v4 currentSchemaVersion];
      *(_DWORD *)buf = v27;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v24;
      *(_WORD *)&buf[22] = 2048;
      id v29 = 16000LL;
      LOWORD(v30) = 1024;
      *(_DWORD *)((char *)&v30 + 2) = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Database migration function for %li => %li success=%d",  buf,  0x26u);
    }

    if (!v21) {
      goto LABEL_45;
    }
LABEL_33:
  }

  if (v7 == 16000) {
    goto LABEL_33;
  }
LABEL_41:
  if (qword_10032E2F0 != -1) {
    dispatch_once(&qword_10032E2F0, &stru_1002E82F0);
  }
  id v25 = (void *)qword_10032E2B0;
  if (os_log_type_enabled((os_log_t)qword_10032E2B0, OS_LOG_TYPE_ERROR)) {
    sub_10025E13C(v25, v4);
  }
LABEL_45:
  uint64_t v6 = 0;
LABEL_46:

  return v6;
}

      if (v8 < v3)
      {
        if (__OFSUB__(v8, v10)) {
          goto LABEL_147;
        }
        if (v8 - v10 < v109)
        {
          if (__OFADD__(v10, v109)) {
            goto LABEL_151;
          }
          __int128 v27 = v10;
          if (v10 + v109 >= v3) {
            id v28 = v3;
          }
          else {
            id v28 = v10 + v109;
          }
          v113 = v27;
          if (v28 < v27)
          {
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
            return;
          }

          if (v8 != v28)
          {
            id v29 = 48 * v8;
            do
            {
              id v30 = v113;
              id v31 = v29;
              while (1)
              {
                __int16 v32 = *v2 + v31;
                sub_1000F71B0(v32, (uint64_t)&v118);
                sub_1000F71B0(v32 - 48, (uint64_t)&v116);
                if (v118 == v116 && v119 == v117) {
                  break;
                }
                __int128 v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v118, v119, v116, v117, 1LL);
                sub_100087418((uint64_t)&v116, &qword_10032A6A8);
                sub_100087418((uint64_t)&v118, &qword_10032A6A8);
                if ((v34 & 1) == 0) {
                  goto LABEL_52;
                }
                if (!*v2) {
                  goto LABEL_154;
                }
                id v35 = (__int128 *)(*v2 + v31);
                uint64_t v37 = v35[1];
                uint64_t v36 = v35[2];
                uint64_t v38 = *v35;
                int v39 = *(v35 - 2);
                void *v35 = *(v35 - 3);
                v35[1] = v39;
                v35[2] = *(v35 - 1);
                *(v35 - 3) = v38;
                *(v35 - 2) = v37;
                *(v35 - 1) = v36;
                v31 -= 48LL;
                if (v8 == ++v30) {
                  goto LABEL_52;
                }
              }

              sub_100087418((uint64_t)&v116, &qword_10032A6A8);
              sub_100087418((uint64_t)&v118, &qword_10032A6A8);
LABEL_52:
              ++v8;
              v29 += 48LL;
            }

            while (v8 != v28);
            uint64_t v8 = v28;
          }

          uint64_t v10 = v113;
        }
      }

      if (v8 < v10) {
        goto LABEL_146;
      }
      id v40 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        sub_1000A9378(0, *((void *)v9 + 2) + 1LL, 1, v9);
        os_log_t v9 = v97;
      }

      id v42 = *((void *)v9 + 2);
      id v41 = *((void *)v9 + 3);
      id v43 = v42 + 1;
      if (v42 >= v41 >> 1)
      {
        sub_1000A9378(v41 > 1, v42 + 1, 1, v9);
        os_log_t v9 = v98;
      }

      *((void *)v9 + 2) = v43;
      id v44 = v9 + 32;
      uint64_t v45 = &v9[16 * v42 + 32];
      *(void *)uint64_t v45 = v40;
      *((void *)v45 + 1) = v8;
      if (v42)
      {
        v114 = v8;
        while (1)
        {
          id v46 = v43 - 1;
          if (v43 >= 4)
          {
            __int128 v51 = &v44[16 * v43];
            id v52 = *((void *)v51 - 8);
            __int128 v53 = *((void *)v51 - 7);
            id v57 = __OFSUB__(v53, v52);
            uint64_t v54 = v53 - v52;
            if (v57) {
              goto LABEL_131;
            }
            id v56 = *((void *)v51 - 6);
            __int16 v55 = *((void *)v51 - 5);
            id v57 = __OFSUB__(v55, v56);
            __int128 v49 = v55 - v56;
            __int128 v50 = v57;
            if (v57) {
              goto LABEL_132;
            }
            __int16 v58 = v43 - 2;
            id v59 = &v44[16 * v43 - 32];
            v61 = *(void *)v59;
            int v60 = *((void *)v59 + 1);
            id v57 = __OFSUB__(v60, v61);
            v62 = v60 - v61;
            if (v57) {
              goto LABEL_133;
            }
            id v57 = __OFADD__(v49, v62);
            __int128 v63 = v49 + v62;
            if (v57) {
              goto LABEL_135;
            }
            if (v63 >= v54)
            {
              v81 = &v44[16 * v46];
              v83 = *(void *)v81;
              v82 = *((void *)v81 + 1);
              id v57 = __OFSUB__(v82, v83);
              v84 = v82 - v83;
              if (v57) {
                goto LABEL_141;
              }
              v74 = v49 < v84;
              goto LABEL_93;
            }
          }

          else
          {
            if (v43 != 3)
            {
              v75 = *((void *)v9 + 4);
              v76 = *((void *)v9 + 5);
              id v57 = __OFSUB__(v76, v75);
              v68 = v76 - v75;
              v69 = v57;
              goto LABEL_87;
            }

            __int128 v48 = *((void *)v9 + 4);
            id v47 = *((void *)v9 + 5);
            id v57 = __OFSUB__(v47, v48);
            __int128 v49 = v47 - v48;
            __int128 v50 = v57;
          }

          if ((v50 & 1) != 0) {
            goto LABEL_134;
          }
          __int16 v58 = v43 - 2;
          v64 = &v44[16 * v43 - 32];
          v66 = *(void *)v64;
          v65 = *((void *)v64 + 1);
          v67 = __OFSUB__(v65, v66);
          v68 = v65 - v66;
          v69 = v67;
          if (v67) {
            goto LABEL_136;
          }
          v70 = &v44[16 * v46];
          v72 = *(void *)v70;
          v71 = *((void *)v70 + 1);
          id v57 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          if (v57) {
            goto LABEL_138;
          }
          if (__OFADD__(v68, v73)) {
            goto LABEL_140;
          }
          if (v68 + v73 >= v49)
          {
            v74 = v49 < v73;
LABEL_93:
            if (v74) {
              id v46 = v58;
            }
            goto LABEL_95;
          }

void sub_100032C74(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS storekit_messages (dsid INTEGER, bundle_id TEXT, status INTEGER, allow_developer_control INTEGER,message_type INTEGER, UNIQUE(dsid, bundle_id, message_type) ON CONFLICT REPLACE);");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS storekit_revocations (dsid INTEGER, bundle_id TEXT, product_id TEXT, UNIQUE(dsid, bundle_id, product_id) ON CONFLICT REPLACE);");
}

void sub_100032CB4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
}

void sub_100032CC4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
}

void sub_100032CD8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000LL;
  uint64_t v20 = sub_100032F20;
  uint64_t v21 = sub_100032F30;
  id v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteDatabaseStoreMigrator connection](v2, "connection"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity allOnConnection:predicate:]( &OBJC_CLASS___StoreKitMessagesDatabaseEntity,  "allOnConnection:predicate:",  v3,  0LL));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100032F38;
  v16[3] = &unk_1002E82D0;
  void v16[4] = &v17;
  [v4 enumerateObjectsUsingBlock:v16];

  -[SQLiteDatabaseStoreMigrator executeStatement:](v2, "executeStatement:", @"DROP TABLE storekit_messages");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS storekit_messages (dsid INTEGER, bundle_id TEXT, status INTEGER, allow_developer_control INTEGER,message_type INTEGER, UNIQUE(dsid, bundle_id, message_type) ON CONFLICT REPLACE);");
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v5 = (id)v18[5];
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v23 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v13;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)v8);
        uint64_t v10 = objc_alloc(&OBJC_CLASS___StoreKitMessagesDatabaseEntity);
        os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteDatabaseStoreMigrator connection](v2, "connection", (void)v12));

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v12 objects:v23 count:16];
    }

    while (v6);
  }

  _Block_object_dispose(&v17, 8);
}

void sub_100032EF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

uint64_t sub_100032F20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100032F30(uint64_t a1)
{
}

void sub_100032F38(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"dsid"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v4, @"dsid");

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"bundle_id"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v5, @"bundle_id");

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"status"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v6, @"status");

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"allow_developer_control"]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v7,  @"allow_developer_control");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  &off_1003027E0,  @"message_type");
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v8];
}

void sub_100033088(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327E28;
  off_100327E28 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E2A8;
  qword_10032E2A8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E2B0;
  qword_10032E2B0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E2B8;
  qword_10032E2B8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E2C0;
  qword_10032E2C0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032E2C8;
  qword_10032E2C8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032E2D0;
  qword_10032E2D0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E2D8;
  qword_10032E2D8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032E2E0;
  qword_10032E2E0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E2E8;
  qword_10032E2E8 = (uint64_t)v19;
}

id sub_1000332C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) createPayload];
}

id sub_100033344(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if ([v2 canCreatePayload])
  {
    os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 createPayload]);
  }

  else
  {
    if (qword_10032E340 != -1) {
      dispatch_once(&qword_10032E340, &stru_1002E8360);
    }
    id v4 = (os_log_s *)qword_10032E2F8;
    if (os_log_type_enabled((os_log_t)qword_10032E2F8, OS_LOG_TYPE_ERROR)) {
      sub_10025E1E4(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    os_log_t v3 = 0LL;
  }

  return v3;
}

void sub_1000333E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100327E30;
  off_100327E30 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E2F8;
  qword_10032E2F8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032E300;
  qword_10032E300 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E308;
  qword_10032E308 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E310;
  qword_10032E310 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032E318;
  qword_10032E318 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032E320;
  qword_10032E320 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E328;
  qword_10032E328 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032E330;
  qword_10032E330 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E338;
  qword_10032E338 = (uint64_t)v19;
}

NSString *sub_100033540(uint64_t a1)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.storekit.unfinishedtransactions.%@",  a1);
}

__CFString *sub_100033574(unint64_t a1)
{
  if (a1 >= 4) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown: %ld",  a1));
  }
  else {
    return *(&off_1002E8680 + a1);
  }
}

BOOL sub_1000335C4(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFDLL) == 1;
}

void sub_100033698(id a1)
{
  if (qword_10032E3B0 != -1) {
    dispatch_once(&qword_10032E3B0, &stru_1002E8708);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E368, OS_LOG_TYPE_DEBUG)) {
    sub_10025E218();
  }
  id v1 = -[SecureClock _init](objc_alloc(&OBJC_CLASS___SecureClock), "_init");
  id v2 = (void *)qword_10032E348;
  qword_10032E348 = (uint64_t)v1;

  [(id)qword_10032E348 _logState];
  [(id)qword_10032E348 _readState];
}

void sub_10003376C(id a1)
{
  id v1 = objc_opt_new(&OBJC_CLASS___NSDateFormatter);
  id v2 = (void *)qword_10032E358;
  qword_10032E358 = (uint64_t)v1;

  objc_msgSend((id)qword_10032E358, "setDateFormat:", @"EEE, dd MMM yyyy HH:mm:ss zzz");
}

id sub_100033BF4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 24LL) = *(void *)(a1 + 48);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16LL), *(id *)(a1 + 40));
  return _[*(id *)(a1 + 32) _writeState];
}

void sub_1000341A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000341BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000341CC(uint64_t a1)
{
}

id sub_1000341D4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentTime]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(a1 + 32) _logState];
}

void sub_1000343F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003281D0;
  off_1003281D0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E368;
  qword_10032E368 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032E370;
  qword_10032E370 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E378;
  qword_10032E378 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E380;
  qword_10032E380 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  __int128 v12 = (void *)qword_10032E388;
  qword_10032E388 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032E390;
  qword_10032E390 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E398;
  qword_10032E398 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032E3A0;
  qword_10032E3A0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E3A8;
  qword_10032E3A8 = (uint64_t)v19;
}

void sub_100034550(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100035198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000351B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (v3)
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    id v4 = (void *)qword_10032E3F0;
    if (os_log_type_enabled((os_log_t)qword_10032E3F0, OS_LOG_TYPE_ERROR)) {
      sub_10025E58C(a1, v4, WeakRetained);
    }
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transactions]);
  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);
}

void sub_100035320(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v3 count]));
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v12;
      do
      {
        os_log_t v9 = 0LL;
        do
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v9), "mutableCopy", (void)v11);
          [v10 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"qid"];
          [v4 addObject:v10];

          os_log_t v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v7);
    }

    [*(id *)(*(void *)(a1 + 40) + 80) updatedTransactions:v4];
  }
}

LABEL_28:
  if (qword_10032E410 != -1) {
    dispatch_once(&qword_10032E410, &stru_1002E8AB0);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E3E0, OS_LOG_TYPE_ERROR)) {
    sub_10025E648();
  }
  uint64_t v21 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 950LL, 0LL, 0LL);
  uint64_t v20 = (LoadUnfinishedInAppTransactionsTask *)objc_claimAutoreleasedReturnValue(v21);
  v9[2](v9, 0LL, v20);
LABEL_33:
}

    __int128 v13 = log;
  }

  if (a7) {
    *a7 = v22;
  }
  if (a6) {
    *a6 = v17;
  }

  return (char)v30;
}
}

      os_log_t v19 = 0LL;
      *(void *)(v9 + 32) = 0LL;
      *(_OWORD *)os_log_t v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
    }

    os_log_t v9 = v106;
    id v43 = swift_release(v103);
    id v44 = sub_10009C208(v43, "productIdentifier");
    sub_100086040((uint64_t)v44);
    sub_10009C49C();
    sub_10009C288();
    sub_10009C6D0();
    sub_10009C018();
    if (qword_100328A30 == -1) {
      goto LABEL_31;
    }
LABEL_108:
    swift_once(&qword_100328A30, sub_1000944F4);
LABEL_31:
    uint64_t v45 = (void *)sub_10009C1CC();
    sub_10009BF84(v45);

    *(void *)(v9 + 792) = sub_10009C208(v46, "quantity");
    dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    sub_10009C210();
    sub_10009C018();
    id v47 = &selRef_accountMediaType;
    if (qword_100328A80 != -1) {
      swift_once(&qword_100328A80, sub_1000946FC);
    }
    __int128 v48 = (void *)sub_10009C1CC();
    sub_10009BF84(v48);

    if (sub_10009C208(v49, "apiVersion") != (id)1)
    {
      __int128 v50 = sub_10009C114();
      sub_10009C43C((uint64_t)v50, OBJC_IVAR____TtC9storekitd6Client_deviceVendorID);

      __int128 v51 = sub_10009C6A8();
      id v52 = sub_10009C5C4(v51);
      if (v53)
      {
        sub_10009C740(v52, &qword_10032A3D0);
      }

      else
      {
        UUID.uuidString.getter(v52);
        sub_10009C2A8();
        uint64_t v54 = sub_10009C698();
        id v56 = v55;
        sub_10007BA44();
        *(void *)(v9 + 632) = v54;
        *(void *)(v9 + 640) = v56;
        sub_10009C7BC();
        sub_10009C4DC();
      }

      if (qword_1003289D8 != -1) {
        swift_once(&qword_1003289D8, sub_100094294);
      }
      sub_10009BF84(*(void **)(v9 + 992));
      sub_1000931C0();
    }

    id v57 = sub_10009B9FC(*(void **)(v9 + 816));
    if (v58 >> 60 != 15)
    {
      if ((sub_10009C7D0(v57, v58) & 1) == 0)
      {
        v59.super.isa = sub_10009C754().super.isa;
        if (qword_100328A60 != -1) {
          swift_once(&qword_100328A60, sub_100094624);
        }
        sub_10009368C(*(id *)(v9 + 992), v23[493]);
      }

      sub_10009C748();
    }

    sub_10009BB30(*(void **)(v9 + 816), (SEL *)&selRef_applicationUsername);
    if (v60)
    {
      sub_10009C12C();
      sub_100085EF0();
    }

    if (qword_1003289C8 != -1) {
      swift_once(&qword_1003289C8, sub_100094238);
    }
    v61 = (void *)sub_10009C1CC();
    sub_10009BF84(v61);
    v62 = sub_1000931C0();
    sub_10009C200(v62, (SEL *)&selRef_appAccountToken);
    if (v63)
    {
      sub_10009C12C();
      sub_100085EF0();
    }

    if (qword_1003289C0 != -1) {
      swift_once(&qword_1003289C0, sub_1000941FC);
    }
    v64 = (void *)sub_10009C1CC();
    sub_10009BF84(v64);
    v65 = sub_1000931C0();
    sub_10009C200(v65, (SEL *)&selRef_partnerIdentifier);
    if (v66)
    {
      sub_10009C12C();
      sub_100085EF0();
    }

    if (qword_100328A50 != -1) {
      swift_once(&qword_100328A50, sub_1000945BC);
    }
    v67 = (void *)sub_10009C1CC();
    sub_10009BF84(v67);
    v68 = sub_1000931C0();
    sub_10009C200(v68, (SEL *)&selRef_partnerTransactionIdentifier);
    if (v69)
    {
      isa = sub_10009C12C();
      sub_100085EF0();
    }

    else
    {
      isa = 0LL;
    }

    if (qword_100328A58 != -1) {
      swift_once(&qword_100328A58, sub_1000945F0);
    }
    v71 = *(unsigned __int8 *)(v9 + 673);
    sub_10009BF84(*(void **)(v9 + 992));
    sub_1000931C0();
    if (v71 == 1)
    {
      isa = sub_10009C064().super.super.isa;
      if (qword_100328A08 != -1) {
        swift_once(&qword_100328A08, sub_1000943E0);
      }
      sub_10009BF84(*(void **)(v9 + 992));
    }

    v72 = *(void *)(v9 + 904);
    v73 = *(void *)(v9 + 896);
    v74 = sub_10009C114();
    sub_10009C4BC();

    v75 = sub_10007B1FC(&qword_10032A028);
    LODWORD(isa) = sub_10009C0B8(v75);
    sub_10009C358(v73);
    sub_10009C358(v72);
    if ((isa & 1) == 0 && [*(id *)(v9 + 816) simulateAskToBuy])
    {
      isa = sub_10009C064().super.super.isa;
      if (qword_100328A68 != -1) {
        swift_once(&qword_100328A68, sub_10009465C);
      }
      sub_10009BF84(*(void **)(v9 + 992));
    }

    if (objc_msgSend(*(id *)(v9 + 816), "isStoreOriginated", v98))
    {
      isa = sub_10009C064().super.super.isa;
      if (qword_100328A28 != -1) {
        swift_once(&qword_100328A28, sub_1000944C0);
      }
      sub_10009BF84(*(void **)(v9 + 992));
    }

    v76 = sub_10009C114();
    sub_10009C67C(v76);
    if ((_DWORD)isa == 1)
    {
      v77.super.super.isa = sub_10009C064().super.super.isa;
      if (qword_1003289D0 != -1) {
        swift_once(&qword_1003289D0, sub_10009426C);
      }
      sub_10009BF84(*(void **)(v9 + 992));
    }

    if ([*(id *)(v9 + 816) isStoreKitViewInitiated])
    {
      v78.super.super.isa = sub_10009C064().super.super.isa;
      if (qword_100328A78 != -1) {
        swift_once(&qword_100328A78, sub_1000946C8);
      }
      sub_10009BF84(*(void **)(v9 + 992));
    }

    uint64_t v0 = (char *)v23;
    sub_10009BB30(*(void **)(v9 + 816), (SEL *)&selRef_discountIdentifier);
    if (v79)
    {
      sub_10009BB30(*(void **)(v9 + 816), (SEL *)&selRef_discountKeyIdentifier);
      if (!v80)
      {
        sub_10009C494();
        goto LABEL_104;
      }

      sub_10009BB30(*(void **)(v9 + 816), (SEL *)&selRef_discountNonceString);
      if (!v81)
      {
        sub_100093460();
        sub_10009C494();
        goto LABEL_104;
      }

      sub_10009BB30(*(void **)(v9 + 816), (SEL *)&selRef_discountSignature);
      if (v82)
      {
        v83 = (SEL *)[*(id *)(v9 + 816) discountTimestamp];
        if (v83)
        {
          uint64_t v16 = v83;
          __int128 v13 = String._bridgeToObjectiveC()();
          sub_10009C494();
          if (qword_1003289E0 != -1) {
            goto LABEL_110;
          }
          goto LABEL_90;
        }

        sub_100085EF0();
        sub_100085FB4();
        sub_100093460();
        sub_10009C494();
        os_log_t v9 = v106;
      }

      else
      {
        sub_100085FB4();
        sub_100093460();
        sub_10009C494();
      }

      id v47 = &selRef_accountMediaType;
    }

  v122 = (uint64_t)v180;
  *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_storeExternalVersionID) = v107;
  if (*((_BYTE *)v43 + v79) == 1)
  {
    v123 = (void *)objc_opt_self(&OBJC_CLASS___AppMetadataLoader);
    v185 = 0LL;
    v124 = [v123 loadMetadataFromApplicationRecord:v89 withError:&v185];
    v125 = v185;
    if (v124)
    {
      v126 = v124;
      v127 = v185;
      v128 = [v126 hasOrEverHasHadIAP];
      if (v128)
      {
        v129 = v128;
        v130 = [v128 BOOLValue];

        *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_hasEverHadIAPs) = v130;
        v131 = v184;
        v132 = (uint64_t)v181;
        v133 = (uint64_t)v179;
        goto LABEL_36;
      }
    }

    else
    {
      v134 = v185;
      v135 = _convertNSErrorToError(_:)(v125);

      swift_willThrow(v136, v137, v138, v139, v140, v141, v142);
      swift_errorRelease(v135);
    }
  }

  v133 = (uint64_t)v179;
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_hasEverHadIAPs) = 1;
  v131 = v184;
  v132 = (uint64_t)v181;
LABEL_36:
  *((_BYTE *)v43 + OBJC_IVAR____TtC9storekitd6Client_isClip) = 0;
  sub_1000E9220(v131, v133, &qword_10032A3D8);
  if (sub_10007D824(v133, 1LL, (uint64_t)v53) == 1)
  {
    sub_100085298(v133, &qword_10032A3D8);
  }

  else
  {
    v143 = v133;
    v144 = *(void *)(v133 + 16);
    v145 = *(void *)(v143 + 24);
    swift_bridgeObjectRetain(v145);
    sub_100085BC4(v143, type metadata accessor for ClientOverride);
    if (v145)
    {
      swift_bridgeObjectRelease(v169);
      v146 = v145;
      v132 = (uint64_t)v181;
      goto LABEL_42;
    }

    v132 = (uint64_t)v181;
  }

  v146 = v169;
  v144 = v166;
LABEL_42:
  v147 = (void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  *v147 = v144;
  v147[1] = v146;
  sub_1000E9220(v131, v132, &qword_10032A3D8);
  if (sub_10007D824(v132, 1LL, (uint64_t)v53) == 1)
  {
    sub_100085298(v132, &qword_10032A3D8);
    goto LABEL_46;
  }

  v148 = v132;
  v150 = *(void *)(v132 + 32);
  v149 = *(void *)(v132 + 40);
  swift_bridgeObjectRetain(v149);
  sub_100085BC4(v148, type metadata accessor for ClientOverride);
  if (!v149)
  {
LABEL_46:
    sub_1000E9108(v89, (SEL *)&selRef_exactBundleVersion);
    if (v153)
    {
      v149 = v153;
      v151 = (char *)v43 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion;
      *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion) = v152;
    }

    else
    {
      v151 = (char *)v43 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion;
      *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion) = 3157553LL;
      v149 = 0xE300000000000000LL;
    }

    goto LABEL_49;
  }

  v151 = (char *)v43 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion;
  *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion) = v150;
LABEL_49:
  *((void *)v151 + 1) = v149;
  sub_1000E91F4(v131, v122, &qword_10032A3D8);
  if (sub_10007D824(v122, 1LL, (uint64_t)v53) != 1)
  {
    v156 = v171;
    sub_1000E8F9C(v122 + v53[7], v171, type metadata accessor for ClientOverride.Server);
    sub_100085BC4(v122, type metadata accessor for ClientOverride);
    v157 = v156;
    v158 = v170;
    sub_1000E9158(v157, v170, type metadata accessor for ClientOverride.Server);
    v159 = v158;
    v160 = v173;
    sub_1000E9158(v159, v173, type metadata accessor for ClientOverride.Server);
    v161 = sub_10007B1FC(&qword_10032A028);
    v162 = (char *)&loc_1000E62AC + *((int *)qword_1000E6448 + sub_10007D824(v160, 3LL, v161));
    __asm { BR              X10 }
  }

  sub_100085298(v122, &qword_10032A3D8);
  v154 = (uint64_t)v43 + OBJC_IVAR____TtC9storekitd6Client_serverOverride;
  v155 = type metadata accessor for Client.Server(0LL);
  sub_10007D0AC(v154, 1LL, 1LL, v155);

  v163 = v183;
  v186.receiver = v43;
  v186.super_class = ObjectType;
  __int128 v34 = (char *)objc_msgSendSuper2(&v186, "init");

  sub_100085298(v163, &qword_10032A3D8);
  return v34;
}

        sub_10012A314();
        id v47 = v22 & v21;
        uint64_t v8 = v23;
      }

      __int128 v24 = sub_10012A43C();
      uint64_t v26 = *v25;
      __int128 v27 = v25[1];
      __int128 v49 = v28;
      __int128 v50 = v24;
      v48[0] = v26;
      v48[1] = v27;
      swift_bridgeObjectRetain(v24);
      sub_100093528();
      sub_10012A2FC((uint64_t)v6, (uint64_t)v48, (uint64_t)v10, (uint64_t)v9);
      id v29 = v49;
      id v30 = v50;
      sub_1000853B0(v6, v7);
      sub_1000853B0(v7, v54);
      sub_1000853B0(v54, &v52);
      id v31 = sub_100132130(v29, v30);
      __int16 v32 = v31;
      if ((v33 & 1) == 0) {
        break;
      }
      id v46 = v8;
      __int128 v34 = v7;
      id v35 = v6;
      uint64_t v36 = v1;
      uint64_t v37 = v10;
      uint64_t v38 = v9;
      int v39 = (uint64_t *)(v2[6] + 16 * v31);
      swift_bridgeObjectRelease(v39[1]);
      *int v39 = v29;
      v39[1] = v30;
      os_log_t v9 = v38;
      id v10 = v37;
      os_log_t v1 = v36;
      id v6 = v35;
      id v7 = v34;
      uint64_t v8 = v46;
      id v40 = (void *)(v2[7] + 32 * v32);
      sub_10007B1A0(v40);
      sub_1000853B0(&v52, v40);
      id v5 = v47;
    }

    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v31;
    id v41 = (uint64_t *)(v2[6] + 16 * v31);
    void *v41 = v29;
    v41[1] = v30;
    sub_1000853B0(&v52, (_OWORD *)(v2[7] + 32 * v31));
    id v42 = v2[2];
    __int128 v13 = __OFADD__(v42, 1LL);
    id v43 = v42 + 1;
    if (v13) {
      goto LABEL_36;
    }
    v2[2] = v43;
    id v5 = v47;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
}

void sub_1000358B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
}

void sub_1000358E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transactions]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _processDownloadsForTransactions:v3]);

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 toASDErrorWithMetadata:0]);
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v4, v7);
}

void sub_1000369E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  if (v9)
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    id v10 = (os_log_s *)qword_10032E3E0;
    if (os_log_type_enabled((os_log_t)qword_10032E3E0, OS_LOG_TYPE_ERROR)) {
      sub_10025EA18(a1, v9, v10);
    }
    if (*(_BYTE *)(a1 + 64))
    {
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
      [v11 removeDeviceIdentifierForVendorName:*(void *)(a1 + 48) bundleIdentifier:*(void *)(a1 + 40)];
    }
  }

  else
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    __int128 v12 = (os_log_s *)qword_10032E3E0;
    if (os_log_type_enabled((os_log_t)qword_10032E3E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v39 = v13;
      __int16 v40 = 2114;
      uint64_t v41 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%{public}@: Finished processing payment for %{public}@",  buf,  0x16u);
    }
  }

  if (v7)
  {
    if (![*(id *)(a1 + 40) length]) {
      goto LABEL_26;
    }
    id v30 = v8;
    unint64_t v31 = v7;
    id v15 = [(id)v7 mutableCopy];
    [v15 setObject:@"DefaultQueue" forKeyedSubscript:@"qid"];
    uint64_t v29 = v9;
    [v15 setObject:v9 forKeyedSubscript:@"error"];
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[StoreKitServiceConnection allConnections]( &OBJC_CLASS___StoreKitServiceConnection,  "allConnections"));
    id v17 = [v16 countByEnumeratingWithState:&v32 objects:v37 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v33;
      do
      {
        for (i = 0LL; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v33 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v21 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 client]);
          BOOL v23 = (void *)objc_claimAutoreleasedReturnValue([v22 requestBundleID]);
          unsigned int v24 = [v23 isEqualToString:*(void *)(a1 + 40)];

          if (v24)
          {
            id v36 = v15;
            id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v36,  1LL));
            [v21 receivedTransactions:v25];
          }
        }

        id v18 = [v16 countByEnumeratingWithState:&v32 objects:v37 count:16];
      }

      while (v18);
    }

    id v8 = v30;
    unint64_t v7 = v31;
    uint64_t v9 = v29;
  }

  if (!(v7 | v9))
  {
    uint64_t v26 = ASDErrorWithDescription(ASDErrorDomain, 825LL, @"No transactions in response");
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v26);
  }

LABEL_43:
      id v25 = v49;
      goto LABEL_44;
    }
  }

  id v25 = (void *)v18;
  if (qword_10032E410 != -1) {
    dispatch_once(&qword_10032E410, &stru_1002E8AB0);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E3E0, OS_LOG_TYPE_ERROR)) {
    sub_10025EAA8();
  }
  uint64_t v26 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 950LL, 0LL, 0LL);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  (*((void (**)(id, void, void *))v13 + 2))(v13, 0LL, v27);
LABEL_44:
}

    id v10 = 0;
    goto LABEL_44;
  }

  swift_bridgeObjectRetain(a2);
  id v8 = sub_1000E8478(v6, a2, 10LL);
  id v10 = v23;
  swift_bridgeObjectRelease(a2);
LABEL_44:
  if ((v10 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

    swift_once(&qword_1003289E0, sub_1000942C8);
    goto LABEL_40;
  }

  id result = swift_release(v5);
  *id v3 = v8;
  return result;
}

void sub_100037434(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v10, v8);
  }
}

void sub_1000374B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E3E0, OS_LOG_TYPE_ERROR)) {
      sub_10025EC44(a1);
    }
  }
}

void sub_100037F34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location, id a26)
{
}

void sub_100037F70(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = objc_loadWeakRetained((id *)(a1 + 56));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transaction]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transaction]);
    id v17 = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 _processDownloadsForTransactions:v6]);

    id v4 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);
  }

  id v8 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000380FC;
  v12[3] = &unk_1002E8820;
  id v13 = WeakRetained;
  id v14 = v8;
  id v9 = *(id *)(a1 + 40);
  id v15 = v4;
  id v16 = v9;
  id v10 = v4;
  id v11 = WeakRetained;
  +[objc_StoreFrontManager storefrontCountryCodeForClient:completionHandler:]( &OBJC_CLASS____TtC9storekitd22objc_StoreFrontManager,  "storefrontCountryCodeForClient:completionHandler:",  v8,  v12);
}

void sub_1000380FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v11 = objc_alloc_init(&OBJC_CLASS____TtC9storekitd28StoreKitServiceErrorMetadata);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverCorrelationIdentifier]);
  -[StoreKitServiceErrorMetadata setServerCorrelationID:](v11, "setServerCorrelationID:", v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objc_clientDescription"));
  -[StoreKitServiceErrorMetadata setEnvironment:](v11, "setEnvironment:", v5);

  -[StoreKitServiceErrorMetadata setStorefrontCountryCode:](v11, "setStorefrontCountryCode:", v3);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) response]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 toASDErrorWithMetadata:v11]);
  (*(void (**)(uint64_t, uint64_t, void *, void *))(v6 + 16))(v6, v7, v8, v10);
}

void sub_1000385C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000385E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained isCancelled])
  {
    uint64_t v3 = ASDErrorWithDescription(ASDErrorDomain, 908LL, @"Operation Canceled");
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  }

  else
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([WeakRetained error]);
  }

  id v5 = (void *)v4;
  uint64_t v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  id v10[2] = sub_1000386FC;
  v10[3] = &unk_1002E8820;
  id v11 = WeakRetained;
  id v12 = v6;
  id v7 = *(id *)(a1 + 40);
  id v13 = v5;
  id v14 = v7;
  id v8 = v5;
  id v9 = WeakRetained;
  +[objc_StoreFrontManager storefrontCountryCodeForClient:completionHandler:]( &OBJC_CLASS____TtC9storekitd22objc_StoreFrontManager,  "storefrontCountryCodeForClient:completionHandler:",  v6,  v10);
}

void sub_1000386FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = objc_alloc_init(&OBJC_CLASS____TtC9storekitd28StoreKitServiceErrorMetadata);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverCorrelationID]);
  -[StoreKitServiceErrorMetadata setServerCorrelationID:](v8, "setServerCorrelationID:", v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objc_clientDescription"));
  -[StoreKitServiceErrorMetadata setEnvironment:](v8, "setEnvironment:", v5);

  -[StoreKitServiceErrorMetadata setStorefrontCountryCode:](v8, "setStorefrontCountryCode:", v3);
  uint64_t v6 = *(void *)(a1 + 56);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) toASDErrorWithMetadata:v8]);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
}

void sub_100038954( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100038978(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v7 = WeakRetained;
  if (a2)
  {
    if (WeakRetained)
    {
      [WeakRetained[10] removedEntitlementsForProductIdentifiers:*(void *)(a1 + 32)];
    }

    else
    {
      if (qword_10032E410 != -1) {
        dispatch_once(&qword_10032E410, &stru_1002E8AB0);
      }
      id v8 = (os_log_s *)qword_10032E3C8;
      if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_INFO))
      {
        v9[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Could not notify client of removed entitlements because a weak reference to self was lost while waiting for re newReceiptWithOptions:client:replyBlock: to reply. This is expected if the client has terminated.",  (uint8_t *)v9,  2u);
      }
    }
  }

  else
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_ERROR)) {
      sub_10025ED70();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100038FCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id a25)
{
}

void sub_100039004(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E3E0, OS_LOG_TYPE_ERROR)) {
      sub_10025EC44(a1);
    }
  }
}

void sub_10003909C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[ReceiptManager managerForClient:]( &OBJC_CLASS___ReceiptManager,  "managerForClient:",  *(void *)(a1 + 32)));
  [v4 invalidateLegacyTransactionCache];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transactions]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 _processDownloadsForTransactions:v5]);

  id v7 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000391D4;
  v11[3] = &unk_1002E8820;
  id v12 = WeakRetained;
  id v13 = v7;
  id v8 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v8;
  id v9 = v6;
  id v10 = WeakRetained;
  +[objc_StoreFrontManager storefrontCountryCodeForClient:completionHandler:]( &OBJC_CLASS____TtC9storekitd22objc_StoreFrontManager,  "storefrontCountryCodeForClient:completionHandler:",  v7,  v11);
}

void sub_1000391D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = objc_alloc_init(&OBJC_CLASS____TtC9storekitd28StoreKitServiceErrorMetadata);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverCorrelationID]);
  -[StoreKitServiceErrorMetadata setServerCorrelationID:](v10, "setServerCorrelationID:", v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objc_clientDescription"));
  -[StoreKitServiceErrorMetadata setEnvironment:](v10, "setEnvironment:", v5);

  -[StoreKitServiceErrorMetadata setStorefrontCountryCode:](v10, "setStorefrontCountryCode:", v3);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 toASDErrorWithMetadata:v10]);
  (*(void (**)(uint64_t, uint64_t, void *))(v6 + 16))(v6, v7, v9);
}

uint64_t sub_100039590(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100039818(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v5 = a2;
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
  objc_msgSend(v2, "receivedStatuses:", v4, v5);
}

void sub_1000398B0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 receivedStatuses:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10003A6A4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = a2 == 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 toASDErrorWithMetadata:0]);
  (*(void (**)(uint64_t, BOOL, void *))(v3 + 16))(v3, v4, v5);

  uint64_t result = *(void *)(a1 + 40);
  if (result >= 1) {
    return sandbox_extension_release();
  }
  return result;
}

uint64_t sub_10003A9BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003B4D8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[InAppPromotionManager manager](&OBJC_CLASS___InAppPromotionManager, "manager"));
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestBundleID]);
  id v9 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 promotionInfoForProductIdentifiers:v3 bundleID:v4 error:&v9]);
  id v6 = v9;

  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 toASDErrorWithMetadata:0]);
  (*(void (**)(uint64_t, void *, void *))(v7 + 16))(v7, v5, v8);
}

void sub_10003B804(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[InAppPromotionManager manager](&OBJC_CLASS___InAppPromotionManager, "manager"));
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestBundleID]);
  id v8 = 0LL;
  [v2 setPromotionInfo:v3 forBundleID:v4 error:&v8];
  id v5 = v8;

  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 toASDErrorWithMetadata:0]);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
}

LABEL_21:
  (*((void (**)(id, void, char *))v9 + 2))(v9, 0LL, v18);
LABEL_22:
}

    __int128 v34 = (v14 - 1) & v14;
    __int128 v35 = v15;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

  *(void *)(v12 + 2944) = _swiftEmptyArrayStorage;
  __int128 v50 = (uint64_t *)(**(void **)(v12 + 2184) + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  __int128 v51 = *v50;
  id v52 = v50[1];
  swift_bridgeObjectRetain(v52);
  sub_1000862B8();
  URLQueryItem.init(name:value:)(0xD000000000000013LL, v53, v51, v52);
  sub_1000930DC();
  uint64_t v54 = sub_100130EA8(0, 1LL, 1, (uint64_t)_swiftEmptyArrayStorage);
  __int128 v33 = *(void *)(v54 + 16);
  id v43 = *(void *)(v54 + 24);
  uint64_t v38 = v33 + 1;
  if (v33 >= v43 >> 1) {
LABEL_28:
  }
    uint64_t v54 = sub_1000AB088(v43 > 1, v38);
  __int16 v55 = *(void *)(v12 + 2568);
  id v56 = *(void *)(v12 + 2280);
  id v57 = *(void *)(v12 + 2232);
  *(void *)(v54 + 16) = v38;
  __int16 v58 = *(_DWORD *)(v56 + 80);
  *(_DWORD *)(v12 + 2004) = v58;
  id v59 = (v58 + 32LL) & ~(unint64_t)v58;
  int v60 = *(void *)(v56 + 72);
  *(void *)(v12 + 2952) = v60;
  v61 = v54 + v59 + v60 * v33;
  v62 = *(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 32);
  *(void *)(v12 + 2960) = v62;
  v62(v61, v55, v57);
  sub_1000A6ED0();
  v64 = v63;
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  v67 = v66;

  URLQueryItem.init(name:value:)(0x6D726F6674616C70LL, 0xE800000000000000LL, v65, v67);
  sub_10009C494();
  v69 = *(void *)(v54 + 16);
  v68 = *(void *)(v54 + 24);
  if (v69 >= v68 >> 1) {
    uint64_t v54 = sub_1000AB088(v68 > 1, v69 + 1);
  }
  *(void *)(v12 + 296_Block_object_dispose(va, 8) = v54;
  v70 = *(void *)(v12 + 2520);
  v71 = *(void *)(v12 + 2232);
  *(void *)(v54 + 16) = v69 + 1;
  v62(v54 + v59 + v69 * v60, v70, v71);
  return sub_1000AA56C();
}

  uint64_t v6 = v7;
LABEL_47:
  sub_100131864(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  __int128 v32 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
  __int128 v33 = sub_10007961C(v32, (uint64_t)v8);
  __int128 v34 = static os_log_type_t.error.getter(v33);
  __int128 v35 = swift_bridgeObjectRetain_n(a3, 2LL);
  id v36 = v8;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v35);
  uint64_t v38 = v34;
  if (os_log_type_enabled(v37, v34))
  {
    uint64_t v39 = swift_slowAlloc(22LL, -1LL);
    __int16 v40 = swift_slowAlloc(64LL, -1LL);
    v80 = v40;
    *(_DWORD *)uint64_t v39 = 136446466;
    *(void *)&v83 = 91LL;
    *((void *)&v83 + 1) = 0xE100000000000000LL;
    swift_bridgeObjectRetain(a3);
    v41._countAndFlagsBits = v78;
    v41._object = a3;
    String.append(_:)(v41);
    v42._countAndFlagsBits = 8285LL;
    v42._object = (void *)0xE200000000000000LL;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(a3);
    *(void *)&v83 = sub_10007A488(v83, *((unint64_t *)&v83 + 1), &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 8, v39 + 4);
    sub_1000CB958();
    sub_10007B980();
    *(_WORD *)(v39 + 12) = 2082;
    id v36 = (id)(v39 + 14);
    sub_1000862B8();
    *(void *)&v83 = sub_10007A488(v43, v44, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 8, v39 + 14);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s%{public}s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v40);
    sub_10007B974(v39);
  }

  else
  {

    sub_1000CB958();
  }

  sub_100085BC4((uint64_t)v8, type metadata accessor for SKLogger);
  uint64_t v45 = sub_100092B3C();
  id v46 = swift_allocError(&unk_1002EED98, v45, 0LL, 0LL);
  *id v47 = 0LL;
  v47[1] = 0LL;
  v47[2] = 1LL;
  swift_willThrow(v46, v47, v48, v49, v50, v51, v52);
  return v36;
}

    sub_100085BC4(v22, type metadata accessor for SKLogger);
    goto LABEL_22;
  }

  __break(1u);
}

    id v8 = (v16 - 1) & v16;
    id v14 = __clz(__rbit64(v16)) + (v15 << 6);
    id v11 = v15;
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

      id v11 = (v20 - 1) & v20;
    }

    swift_release(v5);
    uint64_t v19 = (void *)(v5 + 64);
    if ((a2 & 1) == 0) {
      goto LABEL_43;
    }
LABEL_39:
    id v36 = 1LL << *(_BYTE *)(v5 + 32);
    if (v36 >= 64) {
      sub_10013F128(0LL, (unint64_t)(v36 + 63) >> 6, v19);
    }
    else {
      *uint64_t v19 = -1LL << v36;
    }
    *(void *)(v5 + 16) = 0LL;
  }

void sub_10003BC9C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 toASDErrorWithMetadata:0]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10003C04C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472LL;
  id v9 = sub_10003C114;
  id v10 = &unk_1002E8938;
  id v11 = *(id *)(a1 + 32);
  id v12 = v3;
  id v4 = v3;
  +[AnalyticsEvent sendLazy:](&OBJC_CLASS____TtC9storekitd23ManualSyncFinishedEvent, "sendLazy:", &v7);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "toASDErrorWithMetadata:", 0, v7, v8, v9, v10));
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

_TtC9storekitd23ManualSyncFinishedEvent *sub_10003C114(uint64_t a1)
{
  id v2 = objc_opt_new(&OBJC_CLASS____TtC9storekitd23ManualSyncFinishedEvent);
  -[BaseManualSyncEvent configureWithClient:](v2, "configureWithClient:", *(void *)(a1 + 32));
  -[ManualSyncFinishedEvent configureWithError:](v2, "configureWithError:", *(void *)(a1 + 40));
  return v2;
}

void sub_10003C3FC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
  objc_msgSend(v2, "receivedTransactions:", v4, v5);
}

void sub_10003C494(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) receivedTransactions:0];
  id v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10003C558;
  v7[3] = &unk_1002E8988;
  id v8 = v4;
  id v5 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = v5;
  id v6 = v3;
  +[objc_StoreFrontManager storefrontCountryCodeForClient:completionHandler:]( &OBJC_CLASS____TtC9storekitd22objc_StoreFrontManager,  "storefrontCountryCodeForClient:completionHandler:",  v8,  v7);
}

void sub_10003C558(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS____TtC9storekitd28StoreKitServiceErrorMetadata);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objc_clientDescription"));
  -[StoreKitServiceErrorMetadata setEnvironment:](v7, "setEnvironment:", v4);

  -[StoreKitServiceErrorMetadata setStorefrontCountryCode:](v7, "setStorefrontCountryCode:", v3);
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) toASDErrorWithMetadata:v7]);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_10003C8A0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
  objc_msgSend(v2, "receivedTransactions:", v4, v5);
}

void sub_10003C938(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) receivedTransactions:0];
  id v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10003C9FC;
  v7[3] = &unk_1002E8988;
  id v8 = v4;
  id v5 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = v5;
  id v6 = v3;
  +[objc_StoreFrontManager storefrontCountryCodeForClient:completionHandler:]( &OBJC_CLASS____TtC9storekitd22objc_StoreFrontManager,  "storefrontCountryCodeForClient:completionHandler:",  v8,  v7);
}

void sub_10003C9FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS____TtC9storekitd28StoreKitServiceErrorMetadata);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objc_clientDescription"));
  -[StoreKitServiceErrorMetadata setEnvironment:](v7, "setEnvironment:", v4);

  -[StoreKitServiceErrorMetadata setStorefrontCountryCode:](v7, "setStorefrontCountryCode:", v3);
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) toASDErrorWithMetadata:v7]);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_10003CD28(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v5 = a2;
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
  objc_msgSend(v2, "receivedTransactions:", v4, v5);
}

void sub_10003CDC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) receivedTransactions:0];
  id v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10003CE84;
  v7[3] = &unk_1002E8988;
  id v8 = v4;
  id v5 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = v5;
  id v6 = v3;
  +[objc_StoreFrontManager storefrontCountryCodeForClient:completionHandler:]( &OBJC_CLASS____TtC9storekitd22objc_StoreFrontManager,  "storefrontCountryCodeForClient:completionHandler:",  v8,  v7);
}

void sub_10003CE84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS____TtC9storekitd28StoreKitServiceErrorMetadata);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objc_clientDescription"));
  -[StoreKitServiceErrorMetadata setEnvironment:](v7, "setEnvironment:", v4);

  -[StoreKitServiceErrorMetadata setStorefrontCountryCode:](v7, "setStorefrontCountryCode:", v3);
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) toASDErrorWithMetadata:v7]);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_10003D174(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ReceiptManager managerForClient:](&OBJC_CLASS___ReceiptManager, "managerForClient:", v3));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10003D224;
  v7[3] = &unk_1002E89D8;
  uint64_t v6 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  [v5 isEligibleForIntroductoryOfferForSubscriptionGroupID:v6 storefrontID:v4 completionHandler:v7];
}

uint64_t sub_10003D224(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10003D77C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2)
  {
    [*(id *)(*(void *)(a1 + 32) + 80) removedEntitlementsForProductIdentifiers:*(void *)(a1 + 40)];
  }

  else if (v5)
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_ERROR)) {
      sub_10025F738();
    }
  }

  else
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    uint64_t v7 = (os_log_s *)qword_10032E3C8;
    if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_ERROR)) {
      sub_10025F708(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

void sub_10003DB54(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = [*(id *)(a1 + 32) _isClientValidForReview:*(void *)(a1 + 40)];
  if ((a2 & 1) == 0)
  {
    if (!v6)
    {
      if (qword_10032E410 != -1) {
        dispatch_once(&qword_10032E410, &stru_1002E8AB0);
      }
      BOOL v23 = (os_log_s *)qword_10032E3C8;
      if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_ERROR)) {
        sub_10025F8CC(a1 + 32, v23, v24, v25, v26, v27, v28, v29);
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
      goto LABEL_23;
    }

    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    uint64_t v7 = (os_log_s *)qword_10032E3C8;
    if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_ERROR)) {
      sub_10025F864(a1 + 32, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[AMSKeybag sharedInstance](&OBJC_CLASS___AMSKeybag, "sharedInstance"));
  id v30 = v5;
  [v14 fairplayContextWithError:&v30];
  id v15 = v30;

  if (!v15)
  {
    size_t v16 = *(unsigned int *)(a1 + 72);
    id v17 = malloc(v16);
    [*(id *)(a1 + 48) getBytes:v17 length:v16];
    sub_1001FC2D8();
    int v19 = v18;
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    uint64_t v20 = (os_log_s *)qword_10032E3C8;
    if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543874;
      uint64_t v32 = v21;
      __int16 v33 = 2114;
      uint64_t v34 = v22;
      __int16 v35 = 2048;
      uint64_t v36 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%{public}@: %{public}@ Status %ld",  buf,  0x20u);
    }

    id v5 = 0LL;
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    free(v17);

LABEL_23:
    return;
  }

  if (qword_10032E410 != -1) {
    dispatch_once(&qword_10032E410, &stru_1002E8AB0);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_ERROR)) {
    sub_10025F7F8((void *)(a1 + 32));
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10003E800(_Unwind_Exception *a1)
{
}

void sub_10003EB24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_10003ED90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([a2 account]);

  if (v6)
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    uint64_t v7 = (os_log_s *)qword_10032E3C8;
    if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v12 = 138543362;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Silent auth successful.",  (uint8_t *)&v12,  0xCu);
    }

    [*(id *)(a1 + 40) finishWithSuccess];
  }

  else
  {
    if (qword_10032E410 != -1) {
      dispatch_once(&qword_10032E410, &stru_1002E8AB0);
    }
    if (os_log_type_enabled((os_log_t)qword_10032E3C8, OS_LOG_TYPE_ERROR)) {
      sub_10025FA5C(a1);
    }
    uint64_t v9 = *(void **)(a1 + 40);
    if (v5)
    {
      [v9 finishWithError:v5];
    }

    else
    {
      uint64_t v10 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 901LL, 0LL, 0LL);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      [v9 finishWithError:v11];
    }
  }
}

void sub_10003F3DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328238;
  off_100328238 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E3C8;
  qword_10032E3C8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned int v6 = (void *)qword_10032E3D0;
  qword_10032E3D0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E3D8;
  qword_10032E3D8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E3E0;
  qword_10032E3E0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10032E3E8;
  qword_10032E3E8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E3F0;
  qword_10032E3F0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  size_t v16 = (void *)qword_10032E3F8;
  qword_10032E3F8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10032E400;
  qword_10032E400 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E408;
  qword_10032E408 = (uint64_t)v19;
}

void sub_10003F538( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10003F618(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___NSISO8601DateFormatter);
  id v2 = (void *)qword_10032E418;
  qword_10032E418 = (uint64_t)v1;
}

void sub_10003F690(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  id v2 = (void *)qword_10032E428;
  qword_10032E428 = (uint64_t)v1;

  os_log_t v3 = -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en_US_POSIX");
  [(id)qword_10032E428 setLocale:v3];
  [(id)qword_10032E428 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
}

void sub_10003F758(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  id v2 = (void *)qword_10032E438;
  qword_10032E438 = (uint64_t)v1;

  os_log_t v3 = -[NSLocale initWithLocaleIdentifier:]( objc_alloc(&OBJC_CLASS___NSLocale),  "initWithLocaleIdentifier:",  @"en_US_POSIX");
  [(id)qword_10032E438 setLocale:v3];
  [(id)qword_10032E438 setDateFormat:@"yyyy-MM-dd"];
}

void sub_10003F9EC(uint64_t a1)
{
  id v2 = [(id)objc_opt_class(*(void *)(a1 + 40)) storeDescriptor];
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend( *(id *)(a1 + 32),  "_modifyUsingTransactionClass:withBlock:",  objc_msgSend(v3, "transactionClass"),  *(void *)(a1 + 48));
}

id sub_10003FAF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _modifyUsingTransactionClass:*(void *)(a1 + 56) withBlock:*(void *)(a1 + 48)];
}

void sub_10003FBC8(uint64_t a1)
{
  id v2 = [(id)objc_opt_class(*(void *)(a1 + 40)) storeDescriptor];
  id v4 = (id)objc_claimAutoreleasedReturnValue(v2);
  id v3 = objc_msgSend( objc_alloc((Class)objc_msgSend(v4, "sessionClass")),  "initWithConnection:",  *(void *)(*(void *)(a1 + 32) + 8));
  [*(id *)(a1 + 32) _readUsingSession:v3 withBlock:*(void *)(a1 + 48)];
}

void sub_10003FF0C(_Unwind_Exception *a1)
{
}

id sub_10003FF24(void *a1)
{
  id result = [*(id *)(a1[4] + 8) tableExists:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10003FFA8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) options]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 databasePath]);

  if ([*(id *)(*(void *)(a1 + 32) + 8) tableExists:@"schema_version"])
  {
    if (qword_10032E490 != -1) {
      dispatch_once(&qword_10032E490, &stru_1002E8B80);
    }
    id v4 = (os_log_s *)qword_10032E478;
    if (os_log_type_enabled((os_log_t)qword_10032E478, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543362;
      os_log_t v7 = v3;
      os_log_t v5 = "Database opened at: %{public}@";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v6, 0xCu);
    }
  }

  else
  {
    if (qword_10032E490 != -1) {
      dispatch_once(&qword_10032E490, &stru_1002E8B80);
    }
    id v4 = (os_log_s *)qword_10032E478;
    if (os_log_type_enabled((os_log_t)qword_10032E478, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543362;
      os_log_t v7 = v3;
      os_log_t v5 = "Database created at: %{public}@";
      goto LABEL_10;
    }
  }
}

uint64_t sub_1000401C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000403E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100040408(void *a1)
{
  *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [(id)objc_opt_class(a1[4]) createOrMigrateStoreUsingSchema:a1[5]];
  return *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL);
}

uint64_t sub_1000404FC(uint64_t a1)
{
  return 1LL;
}

void sub_1000405DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_1003282A0;
  off_1003282A0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E448;
  qword_10032E448 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E450;
  qword_10032E450 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E458;
  qword_10032E458 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E460;
  qword_10032E460 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10032E468;
  qword_10032E468 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E470;
  qword_10032E470 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  size_t v16 = (void *)qword_10032E478;
  qword_10032E478 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10032E480;
  qword_10032E480 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E488;
  qword_10032E488 = (uint64_t)v19;
}

id sub_100040D3C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 48) count];
  return result;
}

void sub_100041028(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328308;
  off_100328308 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E498;
  qword_10032E498 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E4A0;
  qword_10032E4A0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E4A8;
  qword_10032E4A8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E4B0;
  qword_10032E4B0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10032E4B8;
  qword_10032E4B8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E4C0;
  qword_10032E4C0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  size_t v16 = (void *)qword_10032E4C8;
  qword_10032E4C8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10032E4D0;
  qword_10032E4D0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E4D8;
  qword_10032E4D8 = (uint64_t)v19;
}

BOOL sub_100041348(id a1, NSString *a2, id a3)
{
  return AnalyticsSendEventLazy(a2, a3);
}

NSMutableDictionary *sub_100041630(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"AnalyticsEventInfo"]);
  os_log_t v3 = (NSMutableDictionary *)[v2 mutableCopy];

  if (!v3) {
    os_log_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) selectedActionIdentifier]);
  if (v4)
  {
    os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) locateActionWithIdentifier:v4]);
    int v6 = v5;
    if (v5)
    {
      os_log_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lib_analyticsActionName"));
      if (!v7)
      {
        id v8 = [v6 style];
        else {
          os_log_t v7 = *(&off_1002E8C28 + (void)v8);
        }
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v7, @"actionName");
    }
  }

  os_log_t v9 = *(void **)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lib_sanitizedDescription"));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  v10,  @"errorDescription");
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 64),  @"dialogName");

  return v3;
}

void sub_1000419CC(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_10032E4E8;
  qword_10032E4E8 = (uint64_t)v1;
}

void sub_100041F4C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID lib_shortLogKey](&OBJC_CLASS___NSUUID, "lib_shortLogKey"));
  if (qword_10032E540 != -1) {
    dispatch_once(&qword_10032E540, &stru_1002E8C58);
  }
  os_log_t v3 = (void *)qword_10032E4F8;
  if (os_log_type_enabled((os_log_t)qword_10032E4F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    os_log_t v5 = v3;
    *(_DWORD *)buf = 138543618;
    id v34 = (id)objc_opt_class(v4);
    __int16 v35 = 2114;
    uint64_t v36 = v2;
    id v6 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Performing migration of FamilyInfo",  buf,  0x16u);
  }

  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_activeiTunesAccount"));

  if (v8)
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[FamilyInfoLookupTask cachedFamilyInfoWithLogKey:]( &OBJC_CLASS___FamilyInfoLookupTask,  "cachedFamilyInfoWithLogKey:",  v2));
    if (v9) {
      goto LABEL_12;
    }
    if (qword_10032E540 != -1) {
      dispatch_once(&qword_10032E540, &stru_1002E8C58);
    }
    uint64_t v10 = (void *)qword_10032E4F8;
    if (os_log_type_enabled((os_log_t)qword_10032E4F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = v10;
      os_log_t v13 = (void *)objc_opt_class(v11);
      id v14 = v13;
      os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
      *(_DWORD *)buf = 138543874;
      id v34 = v13;
      __int16 v35 = 2114;
      uint64_t v36 = v2;
      __int16 v37 = 2114;
      uint64_t v38 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Attempting to update cached FamilyInfo for account: %{public}@",  buf,  0x20u);
    }

    size_t v16 = *(void **)(a1 + 32);
    uint64_t v32 = 0LL;
    os_log_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 _familyMembersSuppressDialogs:1 logKey:v2 error:&v32]);

    if (v17)
    {
LABEL_12:
      if (qword_10032E540 != -1) {
        dispatch_once(&qword_10032E540, &stru_1002E8C58);
      }
      int v18 = (void *)qword_10032E4F8;
      if (!os_log_type_enabled((os_log_t)qword_10032E4F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = v18;
      uint64_t v21 = (void *)objc_opt_class(v19);
      id v22 = v21;
      BOOL v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
      *(_DWORD *)buf = 138543874;
      id v34 = v21;
      __int16 v35 = 2114;
      uint64_t v36 = v2;
      __int16 v37 = 2114;
      uint64_t v38 = v23;
      uint64_t v24 = "[%{public}@] [%{public}@] FamilyInfo cached for account: %{public}@";
    }

    else
    {
      if (qword_10032E540 != -1) {
        dispatch_once(&qword_10032E540, &stru_1002E8C58);
      }
      uint64_t v29 = (void *)qword_10032E4F8;
      if (!os_log_type_enabled((os_log_t)qword_10032E4F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v20 = v29;
      unint64_t v31 = (void *)objc_opt_class(v30);
      id v22 = v31;
      BOOL v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
      *(_DWORD *)buf = 138543874;
      id v34 = v31;
      __int16 v35 = 2114;
      uint64_t v36 = v2;
      __int16 v37 = 2114;
      uint64_t v38 = v23;
      uint64_t v24 = "[%{public}@] [%{public}@] FamilyInfo not cached following migration for account: %{public}@";
    }

    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v24, buf, 0x20u);

LABEL_21:
    goto LABEL_22;
  }

  if (qword_10032E540 != -1) {
    dispatch_once(&qword_10032E540, &stru_1002E8C58);
  }
  uint64_t v25 = (void *)qword_10032E4F8;
  if (os_log_type_enabled((os_log_t)qword_10032E4F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)(a1 + 32);
    id v9 = v25;
    uint64_t v27 = (void *)objc_opt_class(v26);
    *(_DWORD *)buf = 138543618;
    id v34 = v27;
    __int16 v35 = 2114;
    uint64_t v36 = v2;
    id v28 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Not updating FamilyInfo due to no active account",  buf,  0x16u);

    goto LABEL_21;
  }

LABEL_22:
}

  if (self->_valid) {
    BOOL v23 = -[HashDigest initWithDigestType:]( objc_alloc(&OBJC_CLASS___HashDigest),  "initWithDigestType:",  -[ChunkedDigest chunkType](self->_digest, "chunkType"));
  }
  else {
    BOOL v23 = 0LL;
  }
  hashDigest = self->_hashDigest;
  self->_hashDigest = v23;

  valid = self->_valid;
  return valid;
}

    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_9;
  }

  uint64_t v26 = [(id)objc_opt_self(OctaneManager) sharedInstance];
  isa = Data._bridgeToObjectiveC()().super.isa;
  id v28 = String._bridgeToObjectiveC()();
  uint64_t v29 = v24;
  uint64_t v30 = v28;
  v94 = 0LL;
  unint64_t v31 = v29;
  uint64_t v32 = objc_msgSend(v26, "saveConfigurationAssetData:name:withContext:error:", isa, v28);

  __int16 v33 = v94;
  if (v32)
  {
    id v34 = (id)v94;
    sub_10008617C();
  }

  else
  {
    id v52 = (id)v94;
    __int128 v53 = _convertNSErrorToError(_:)(v33);

    swift_willThrow(v54, v55, v56, v57, v58, v59, v60);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    v61 = sub_100079604(v14, (uint64_t)qword_10033E1A8);
    sub_100085BA4(v61, v87, type metadata accessor for SKLogger);
    sub_1000861A4();
    _StringGuts.grow(_:)(57LL);
    sub_100085F08(0xD00000000000002CLL, (uint64_t)"Failed to save StoreKit configuration asset ");
    v62._countAndFlagsBits = v93;
    v62._object = (void *)v10;
    String.append(_:)(v62);
    sub_100086128();
    static String._unconditionallyBridgeFromObjectiveC(_:)([v31 bundleID]);
    sub_1000862E8();
    sub_10008619C(v53);
    sub_100086004();
    sub_1000862C4();
    v97[0] = v53;
    sub_10007B1FC(&qword_100329B90);
    sub_1000862DC();
    v64 = v94;
    __int128 v63 = v95[0];
    v65 = sub_100086040((uint64_t)[v31 logKey]);
    v67 = v66;

    v69 = static os_log_type_t.error.getter(v68);
    sub_100085EE8((uint64_t)v67);
    v70 = sub_100085EE8(v63);
    v71 = (os_log_s *)Logger.logObject.getter(v70);
    if (os_log_type_enabled(v71, v69))
    {
      v72 = sub_10007B9FC(22LL);
      v90 = v64;
      v73 = v72;
      v93 = sub_10007B9FC(64LL);
      v97[0] = v93;
      *(_DWORD *)v73 = 136446466;
      v94 = 91LL;
      v95[0] = 0xE100000000000000LL;
      sub_100085FEC();
      v74._countAndFlagsBits = v65;
      v74._object = v67;
      String.append(_:)(v74);
      sub_100085F14();
      sub_100085EF0();
      v94 = sub_10008620C(v94, v75, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v73 + 4);
      sub_10007D974((uint64_t)v67);
      sub_10007B980();
      *(_WORD *)(v73 + 12) = 2082;
      sub_10007BA3C();
      v94 = sub_100086308(v90, v76, v97);
      sub_100086194((uint64_t)&v94, (uint64_t)v95);
      sub_100085E64(v63);
      sub_100086038((void *)&_mh_execute_header, v71, v69, "%{public}s%{public}s", (uint8_t *)v73);
      v77 = v93;
      sub_100086030(v93, v78, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v77);
      sub_10007B974(v73);
      sub_10007BA44();
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v63);
      sub_100085E64((uint64_t)v67);
    }

    sub_100085BC4(v87, type metadata accessor for SKLogger);
    swift_errorRetain(v53);
    sub_10008617C();
    sub_100086184();
    sub_100086184();
  }

  v84 = sub_100086100();
  [v89 logExitForMethod:v84 context:v31];

LABEL_20:
  sub_100085E98();
}

    os_log_t v7 = 0LL;
    v180[1] = 0u;
    v180[2] = 0u;
    *v180 = 0u;
  }

  v67 = sub_10009C5EC();
  v68 = *(void *)(v0 + 920);
  v69 = *(void **)(v0 + 816);
  v70 = sub_100093DE4(v67, "client");
  [v69 excludeReceiptFromRequest];
  sub_10009C314(v68);
  sub_1000DED8C();
  v72 = v71;

  sub_100085298(v68, (uint64_t *)&unk_10032A1C0);
  *(void *)(v0 + 696) = v72;
  memset(v185, 0, sizeof(v185));
  sub_10012A958((uint64_t)v185, @"appDsid");
  os_log_t v3 = *(uint64_t **)(v0 + 696);
  v181 = v3 + 8;
  sub_10009BFFC();
  id v8 = v74 & v73;
  sub_10009C240();
  v75 = v0 + 376;
  v76 = (_OWORD *)(v0 + 416);
  v184 = v77;
  v179 = v77 - 1;
  sub_10009C738();
  v78 = 0LL;
  if (!v8) {
    goto LABEL_42;
  }
LABEL_40:
  v79 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v80 = v79 | (v78 << 6);
LABEL_41:
  v81 = *(void **)(v3[6] + 8 * v80);
  *(void *)v176 = v81;
  sub_10007B1C0(v3[7] + 32 * v80, v75);
  v82 = v81;
  v83 = v176;
  while (1)
  {
    sub_10009BF3C(v83, (uint64_t)v175, (uint64_t *)&unk_10032A290);
    v92 = *v175;
    if (!*v175) {
      break;
    }
    v93 = *(void **)(v182 + 992);
    sub_1000853B0(v76, v171);
    v94 = sub_100085B44(v171, *(void *)(v182 + 544));
    v95 = _bridgeAnythingToObjectiveC<A>(_:)(v94);
    sub_10007B1A0(v171);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
    v97 = v96;
    id v1 = String._bridgeToObjectiveC()();
    v98 = v97;
    id v9 = &selRef_initWithOptions_;
    swift_bridgeObjectRelease(v98);
    sub_10009C6F8(v93, "setParameter:forKey:");

    swift_unknownObjectRelease(v95);
    if (v8) {
      goto LABEL_40;
    }
LABEL_42:
    v84 = v78 + 1;
    if (__OFADD__(v78, 1LL)) {
      goto LABEL_143;
    }
    if (v84 < v184)
    {
      if (*((void *)v181 + v84)) {
        goto LABEL_45;
      }
      v89 = v78 + 2;
      ++v78;
      if (v84 + 1 < v184)
      {
        if (*((void *)v181 + v89)) {
          goto LABEL_45;
        }
        v78 = v84 + 1;
        if (v84 + 2 < v184)
        {
          if (*((void *)v181 + v84 + 2)) {
            goto LABEL_45;
          }
          v90 = v84 + 3;
          v78 = v84 + 2;
          if (v84 + 3 < v184)
          {
            if (*((void *)v181 + v90))
            {
LABEL_45:
              sub_10009C394();
              id v8 = v86 & v85;
              v80 = v88 + (v87 << 6);
              v78 = v87;
              goto LABEL_41;
            }

            while (!__OFADD__(v90, 1LL))
            {
              if (v90 + 1 >= v184)
              {
                v78 = v179;
                goto LABEL_58;
              }

              sub_10009C470();
              if (v91) {
                goto LABEL_45;
              }
            }

            goto LABEL_146;
          }
        }
      }
    }

  BOOL v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    __break(1u);
  }

LABEL_44:
  return v20 == 0LL;
}

  if (v44) {
    void *v44 = v24;
  }

  return v11;
}

  __break(1u);
LABEL_45:
  uint64_t v10 = sub_100151874(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
LABEL_36:
  uint64_t v38 = *((void *)v10 + 2);
  __int16 v37 = *((void *)v10 + 3);
  if (v38 >= v37 >> 1) {
    uint64_t v10 = sub_100151874((char *)(v37 > 1), v38 + 1, 1, v10);
  }
  *((void *)v10 + 2) = v38 + 1;
  uint64_t v39 = &v10[32 * v38];
  *((void *)v39 + 4) = v6;
  *((void *)v39 + 5) = v8;
  *((void *)v39 + 6) = v9;
  *((void *)v39 + 7) = v11;
  __int16 v33 = v43;
  *(void *)(v43 + 16) = v10;
LABEL_39:
  swift_bridgeObjectRetain(v10);
  swift_release(v33);
  uint64_t v32 = v47;
LABEL_40:
  swift_release(v32);
  return v10;
}

void sub_100042BD0(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_DSID"));
  os_log_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v2)
  {
    if (!v5) {
      goto LABEL_7;
    }
  }

  else if (v5)
  {
    goto LABEL_7;
  }

  uint64_t v4 = *(void *)(a1 + 32);
LABEL_7:
  objc_storeStrong((id *)(v4 + 8), v3);
  [*(id *)(a1 + 32) _clearFamily];
  if (v6) {
    [*(id *)(a1 + 32) _updateFamilyInfoFollowingAccountChangeIfNeeded:v6];
  }
LABEL_9:
}

void sub_1000432B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328310;
  off_100328310 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E4F8;
  qword_10032E4F8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E500;
  qword_10032E500 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E508;
  qword_10032E508 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E510;
  qword_10032E510 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10032E518;
  qword_10032E518 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E520;
  qword_10032E520 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  size_t v16 = (void *)qword_10032E528;
  qword_10032E528 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10032E530;
  qword_10032E530 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E538;
  qword_10032E538 = (uint64_t)v19;
}

void sub_100043450(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___VoucherStore);
  id v2 = (void *)qword_10032E550;
  qword_10032E550 = (uint64_t)v1;
}

void sub_100043594(_Unwind_Exception *a1)
{
}

void sub_100043650(_Unwind_Exception *a1)
{
}

void sub_100043814(_Unwind_Exception *a1)
{
}

uint64_t sub_100043830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100043848(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328318;
  off_100328318 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E558;
  qword_10032E558 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E560;
  qword_10032E560 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E568;
  qword_10032E568 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E570;
  qword_10032E570 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10032E578;
  qword_10032E578 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E580;
  qword_10032E580 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  size_t v16 = (void *)qword_10032E588;
  qword_10032E588 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  int v18 = (void *)qword_10032E590;
  qword_10032E590 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E598;
  qword_10032E598 = (uint64_t)v19;
}

void sub_100043D30(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  -[SQLiteDatabaseStoreMigrator executeStatement:](v2, "executeStatement:", @"DROP TABLE IF EXISTS iap_receipts;");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"DROP TABLE IF EXISTS iap_subscription_status;");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"DROP TABLE IF EXISTS iap_receipts_properties;");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"DROP TABLE IF EXISTS iap_pending_transactions;");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"DROP TABLE IF EXISTS iap_pending_transactions_properties;");
  -[SQLiteDatabaseStoreMigrator executeStatement:](v2, "executeStatement:", @"DROP TABLE IF EXISTS app_receipts;");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS iap_receipts_properties (bundle_id TEXT PRIMARY KEY, revision TEXT, token TEXT, last_updated DATETIME)");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS iap_receipts (transaction_id TEXT, bundle_id TEXT, product_id TEXT, product_type INTEGER, transaction_date DATETIME, expiration_date DATETIME, revocation_date DATETIME, is_upgraded BOOL DEFAULT false, is_finished BOOL DEFAULT false, receipt TEXT NOT NULL, PRIMARY KEY (transaction_id, bundle_id) ON CONFLICT REPLACE);");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS iap_subscription_status (bundle_id TEXT, subscription_group_id TEXT, last_updated DATETIME, grace_period_expiration_date DATETIME, renewal_info BLOB, PRIMARY KEY (bundle_id, subscription_group_id) ON CONFLICT REPLACE);");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS iap_pending_transactions (bundle_id TEXT NOT NULL, transaction_id TEXT NOT NULL, original_transaction_id TEXT, product_id TEXT NOT NULL, item_id INTEGER, transaction_date DATETIME, original_transaction_date DATETIME, quantity INTEGER, request_data BLOB, transaction_receipt TEXT, receipt BLOB, assets BLOB, PRIMARY KEY (bundle_id, transaction_id) ON CONFLICT REPLACE);");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS iap_pending_transactions_properties (bundle_id TEXT PRIMARY KEY, token TEXT NOT NULL, last_updated DATETIME)");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS app_receipts (bundle_id TEXT, bundle_version TEXT, receipt TEXT NOT NULL, token TEXT, last_updated DATETIME, PRIMARY KEY (bundle_id) ON CONFLICT REPLACE);");
}

void sub_100043E10(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"ALTER TABLE iap_subscription_status ADD COLUMN grace_period_expiration_date DATETIME;");
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[SQLiteDatabaseStoreMigrator connection](v2, "connection"));

  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity allOnConnection:predicate:]( &OBJC_CLASS___InAppSubscriptionStatusDatabaseEntity,  "allOnConnection:predicate:",  v4,  0LL));
  [v3 enumerateObjectsUsingBlock:&stru_1002E8D40];
}

void sub_100043E8C(id a1, SQLiteEntity *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v4, "valueForProperty:", @"renewal_info"));
  id v6 = sub_100026EC4(v5, 0LL);
  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (v7)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v9)
    {
      id v10 = v9;
      os_log_t v19 = v5;
      os_log_t v11 = 0LL;
      uint64_t v12 = *(void *)v21;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v21 != v12) {
            objc_enumerationMutation(v8);
          }
          id v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v20 + 1) + 8 * (void)i) objectForKeyedSubscript:@"signedRenewalInfo"]);
          os_log_t v15 = v14;
          if (v14)
          {
            id v16 = sub_100025AE4(v14);
            os_log_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
            if (v17 && (!v11 || [v11 compare:v17] == (id)-1))
            {
              id v18 = v17;

              os_log_t v11 = v18;
            }
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v10);
      os_log_t v5 = v19;
      if (v11)
      {
        -[SQLiteEntity setValue:forProperty:](v4, "setValue:forProperty:", v11, @"grace_period_expiration_date");
      }
    }
  }
}

void sub_100044040(id a1, SQLiteDatabaseStoreMigrator *a2)
{
}

void sub_100044050(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS iap_pending_transactions (bundle_id TEXT NOT NULL, transaction_id TEXT NOT NULL, original_transaction_id TEXT, product_id TEXT NOT NULL, item_id INTEGER, transaction_date DATETIME, original_transaction_date DATETIME, quantity INTEGER, request_data BLOB, transaction_receipt TEXT, receipt BLOB, assets BLOB, PRIMARY KEY (bundle_id, transaction_id) ON CONFLICT REPLACE);");
  -[SQLiteDatabaseStoreMigrator executeStatement:]( v2,  "executeStatement:",  @"CREATE TABLE IF NOT EXISTS iap_pending_transactions_properties (bundle_id TEXT PRIMARY KEY, token TEXT NOT NULL, last_updated DATETIME)");
}

void sub_100044090(id a1, SQLiteDatabaseStoreMigrator *a2)
{
}

void sub_1000440A0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
}

void sub_1000440B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328320;
  off_100328320 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E5A8;
  qword_10032E5A8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E5B0;
  qword_10032E5B0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E5B8;
  qword_10032E5B8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E5C0;
  qword_10032E5C0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E5C8;
  qword_10032E5C8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E5D0;
  qword_10032E5D0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_10032E5D8;
  qword_10032E5D8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032E5E0;
  qword_10032E5E0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E5E8;
  qword_10032E5E8 = (uint64_t)v19;
}

void sub_1000444F8(id a1)
{
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  os_log_t v1 = (os_log_s *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_ERROR)) {
    sub_10025FDE4(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void sub_10004455C(id a1)
{
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  os_log_t v1 = (os_log_s *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_ERROR)) {
    sub_10025FE18(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void sub_1000447EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  uint64_t v4 = (void *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_ERROR)) {
    sub_10025FE4C(a1, v4);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100044884(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  uint64_t v7 = (void *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    os_log_t v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 logKey]);
    int v11 = 138543874;
    uint64_t v12 = v10;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Authenticate request completed: %@ error: %{public}@",  (uint8_t *)&v11,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100044BA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  uint64_t v4 = (void *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_ERROR)) {
    sub_10025FED4(a1, v4);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100044C40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  uint64_t v7 = (void *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    os_log_t v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 logKey]);
    int v11 = 138543874;
    uint64_t v12 = v10;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Dialog request completed: %@ error: %{public}@",  (uint8_t *)&v11,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100044F64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  uint64_t v4 = (void *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_ERROR)) {
    sub_10025FF5C(a1, v4);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100044FFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_10032E640 != -1) {
    dispatch_once(&qword_10032E640, &stru_1002E8E90);
  }
  uint64_t v7 = (void *)qword_10032E5F8;
  if (os_log_type_enabled((os_log_t)qword_10032E5F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    os_log_t v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 logKey]);
    int v11 = 138543874;
    uint64_t v12 = v10;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Engagement request completed: %@ error: %{public}@",  (uint8_t *)&v11,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100045148(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328388;
  off_100328388 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E5F8;
  qword_10032E5F8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E600;
  qword_10032E600 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E608;
  qword_10032E608 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E610;
  qword_10032E610 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E618;
  qword_10032E618 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E620;
  qword_10032E620 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_10032E628;
  qword_10032E628 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032E630;
  qword_10032E630 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E638;
  qword_10032E638 = (uint64_t)v19;
}

void sub_1000452A4( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100045D6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100045DB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100045DC0(uint64_t a1)
{
}

void sub_100045DC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100045FB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328390;
  off_100328390 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032E648;
  qword_10032E648 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E650;
  qword_10032E650 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E658;
  qword_10032E658 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E660;
  qword_10032E660 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E668;
  qword_10032E668 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E670;
  qword_10032E670 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E678;
  qword_10032E678 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032E680;
  qword_10032E680 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E688;
  qword_10032E688 = (uint64_t)v19;
}

void sub_100046160(void *a1, void *a2)
{
  os_log_t v3 = a2;
  id v4 = a1;
  [v4 lock];
  v3[2](v3);

  [v4 unlock];
}

void sub_100046380(_Unwind_Exception *a1)
{
}

id sub_10004639C(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_10032E6E0 != -1) {
    dispatch_once(&qword_10032E6E0, &stru_1002E8EF8);
  }
  id v4 = (void *)qword_10032E698;
  if (os_log_type_enabled((os_log_t)qword_10032E698, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v5 = v4;
    id v6 = (void *)objc_opt_class(WeakRetained);
    id v7 = v6;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained logKey]);
    *(_DWORD *)buf = 138543618;
    id v34 = v6;
    __int16 v35 = 2114;
    uint64_t v36 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Performing LoadFamilyCircleTask",  buf,  0x16u);
  }

  os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_activeiTunesAccount"));

  if (!v10)
  {
    if (qword_10032E6E0 != -1) {
      dispatch_once(&qword_10032E6E0, &stru_1002E8EF8);
    }
    uint64_t v16 = (void *)qword_10032E698;
    if (os_log_type_enabled((os_log_t)qword_10032E698, OS_LOG_TYPE_ERROR))
    {
      sub_1002600FC(v16, WeakRetained);
      if (a2) {
        goto LABEL_13;
      }
    }

    else if (a2)
    {
LABEL_13:
      uint64_t v17 = ASDErrorWithTitleAndMessage( ASDErrorDomain,  509LL,  @"Family Info Lookup Failed",  @"Unable load the family circle if there's no active account.");
      os_log_t v15 = 0LL;
      *a2 = (id)objc_claimAutoreleasedReturnValue(v17);
      goto LABEL_36;
    }

    os_log_t v15 = 0LL;
    goto LABEL_36;
  }

  id v32 = 0LL;
  os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _performFamilyInfoRequestForAccount:v10 error:&v32]);
  id v12 = v32;
  uint64_t v13 = objc_claimAutoreleasedReturnValue(+[FamilyInfoLookupTask _processURLResult:](&OBJC_CLASS___FamilyInfoLookupTask, "_processURLResult:", v11));
  uint64_t v14 = (void *)v13;
  if (v11 && v13)
  {
    [WeakRetained _cacheFamilyInfoLookupResult:v13 forAccount:v10];
    os_log_t v15 = v14;
  }

  else
  {
    if (v11)
    {
      if (qword_10032E6E0 != -1) {
        dispatch_once(&qword_10032E6E0, &stru_1002E8EF8);
      }
      id v18 = (void *)qword_10032E698;
      if (os_log_type_enabled((os_log_t)qword_10032E698, OS_LOG_TYPE_ERROR)) {
        sub_100260240(v18, WeakRetained);
      }
    }

    else
    {
      if (qword_10032E6E0 != -1) {
        dispatch_once(&qword_10032E6E0, &stru_1002E8EF8);
      }
      if (os_log_type_enabled((os_log_t)qword_10032E698, OS_LOG_TYPE_ERROR)) {
        sub_100260194();
      }
    }

    os_log_t v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained logKey]);
    os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[FamilyInfoLookupTask _cachedFamilyInfoLookupResultForAccount:ignoreCacheTimeout:logKey:]( &OBJC_CLASS___FamilyInfoLookupTask,  "_cachedFamilyInfoLookupResultForAccount:ignoreCacheTimeout:logKey:",  v10,  0LL,  v19));

    if (v15)
    {
      if (qword_10032E6E0 != -1) {
        dispatch_once(&qword_10032E6E0, &stru_1002E8EF8);
      }
      __int128 v20 = (void *)qword_10032E698;
      if (os_log_type_enabled((os_log_t)qword_10032E698, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v21 = v20;
        __int128 v22 = (void *)objc_opt_class(WeakRetained);
        id v23 = v22;
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained logKey]);
        *(_DWORD *)buf = 138543618;
        id v34 = v22;
        __int16 v35 = 2114;
        uint64_t v36 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Returning cached family info.",  buf,  0x16u);
      }
    }

    else
    {
      if (qword_10032E6E0 != -1) {
        dispatch_once(&qword_10032E6E0, &stru_1002E8EF8);
      }
      uint64_t v25 = (void *)qword_10032E698;
      if (os_log_type_enabled((os_log_t)qword_10032E698, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = v25;
        uint64_t v27 = (void *)objc_opt_class(WeakRetained);
        id v28 = v27;
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained logKey]);
        *(_DWORD *)buf = 138543618;
        id v34 = v27;
        __int16 v35 = 2114;
        uint64_t v36 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] We failed to load the family info, and we have no cached family info to return.",  buf,  0x16u);
      }

      if (a2)
      {
        uint64_t v30 = ASDErrorWithUnderlyingError( v12,  ASDErrorDomain,  500LL,  @"Family Info Lookup Failed",  @"We failed to load the family info for the active account.");
        os_log_t v15 = 0LL;
        *a2 = (id)objc_claimAutoreleasedReturnValue(v30);
      }

      else
      {
        os_log_t v15 = 0LL;
      }
    }
  }

LABEL_36:
  return v15;
}

void sub_10004780C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003283F8;
  off_1003283F8 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E698;
  qword_10032E698 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E6A0;
  qword_10032E6A0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E6A8;
  qword_10032E6A8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032E6B0;
  qword_10032E6B0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E6B8;
  qword_10032E6B8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032E6C0;
  qword_10032E6C0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E6C8;
  qword_10032E6C8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032E6D0;
  qword_10032E6D0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E6D8;
  qword_10032E6D8 = (uint64_t)v19;
}

uint64_t sub_100047968()
{
  return objc_opt_class(v0);
}

  ;
}

  ;
}

LABEL_34:
    if (qword_10032E730 != -1) {
      dispatch_once(&qword_10032E730, &stru_1002E8F68);
    }
    id v28 = (void *)qword_10032E710;
    if (os_log_type_enabled((os_log_t)qword_10032E710, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = v28;
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[LoadUnfinishedInAppTransactionsTask logKey](self, "logKey"));
      unint64_t v31 = [*(id *)((char *)&self->_client + 2) count];
      *(_DWORD *)buf = 138543874;
      uint64_t v38 = self;
      uint64_t v39 = 2114;
      __int16 v40 = v30;
      uint64_t v41 = 2048;
      id v42 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%{public}@][%{public}@]: Finished loading %lu pending transactions",  buf,  0x20u);
    }

LABEL_38:
    -[AsyncTask completeWithSuccess](self, "completeWithSuccess");
    goto LABEL_39;
  }

  __int16 v33 = 0LL;
  __int128 v20 = (_TtC9storekitd6Client *)objc_claimAutoreleasedReturnValue( -[LoadUnfinishedInAppTransactionsTask _cachedLegacyTransactionsFromDataStore:error:]( self,  "_cachedLegacyTransactionsFromDataStore:error:",  v3,  &v33));
  __int128 v21 = v33;
  __int128 v22 = *(_TtC9storekitd6Client **)((char *)&self->_client + 2);
  *(_TtC9storekitd6Client **)((char *)&self->_client + 2) = v20;

  if (!v21) {
    goto LABEL_34;
  }
  if (qword_10032E730 != -1) {
    dispatch_once(&qword_10032E730, &stru_1002E8F68);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E710, OS_LOG_TYPE_ERROR)) {
    sub_1002606C4();
  }
  id v32 = v21;
  id v23 = (_TtC9storekitd6Client *)objc_claimAutoreleasedReturnValue( -[LoadUnfinishedInAppTransactionsTask _checkServerQueueAndCacheTransactionsWithDataStore:bag:error:]( self,  "_checkServerQueueAndCacheTransactionsWithDataStore:bag:error:",  v3,  v5,  &v32));
  os_log_t v11 = v32;

  os_log_t v13 = *(_TtC9storekitd6Client **)((char *)&self->_client + 2);
  *(_TtC9storekitd6Client **)((char *)&self->_client + 2) = v23;
LABEL_28:

  if (!v11) {
    goto LABEL_34;
  }
  if (qword_10032E730 != -1) {
    dispatch_once(&qword_10032E730, &stru_1002E8F68);
  }
  if (os_log_type_enabled((os_log_t)qword_10032E710, OS_LOG_TYPE_ERROR)) {
    sub_100260538();
  }
  -[AsyncTask completeWithError:](self, "completeWithError:", v11);

LABEL_39:
}

      uint64_t v14 = (char *)v14 + 1;
    }

    while (v14 != v12);
    int v60 = [obj countByEnumeratingWithState:&v84 objects:v95 count:16];
    id v12 = v60;
  }

  while (v60);
LABEL_45:

  id v6 = v65;
  os_log_t v5 = v66;
  os_log_t v9 = v64;
LABEL_46:

LABEL_54:
  return v69;
}

    uint64_t v10 = 0;
    goto LABEL_39;
  }

  if (a1 != 45)
  {
    uint64_t v8 = (a1 - 48);
    id v18 = v4 - 1;
    if (v18)
    {
      __int128 v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        __int128 v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        uint64_t v14 = __CFADD__(10 * v8, v21);
        uint64_t v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        uint64_t v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }

    goto LABEL_38;
  }

  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      uint64_t v2 = 0LL;
      uint64_t v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        os_log_t v11 = v4 - 2;
        if (v11)
        {
          id v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            os_log_t v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            uint64_t v14 = 10 * v8 >= v13;
            uint64_t v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            uint64_t v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }

        goto LABEL_38;
      }

      goto LABEL_53;
    }

id sub_100047FB8()
{
  if (qword_10032E730 != -1) {
    dispatch_once(&qword_10032E730, &stru_1002E8F68);
  }
  return (id)qword_10032E710;
}

LABEL_29:
  if (qword_10032E730 != -1) {
    dispatch_once(&qword_10032E730, &stru_1002E8F68);
  }
  uint64_t v38 = v46;
  uint64_t v39 = (void *)qword_10032E710;
  if (os_log_type_enabled((os_log_t)qword_10032E710, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v40 = v39;
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(-[LoadUnfinishedInAppTransactionsTask logKey](v17, "logKey"));
    id v42 = [v46 count];
    *(_DWORD *)buf = 138543618;
    __int128 v51 = v41;
    id v52 = 2048;
    __int128 v53 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Found %lu transactions in pending queue",  buf,  0x16u);
  }

  __int128 v21 = [v46 copy];
  __int128 v20 = 0LL;
LABEL_36:

LABEL_37:
  return v21;
}

              swift_release(v6);
              swift_bridgeObjectRelease(*((void *)&v38 + 1));
              return (uint64_t)a1;
            }
          }
        }
      }
    }

        uint64_t v30 = __OFADD__(v16++, 1LL);
        if (v30) {
          goto LABEL_117;
        }
        os_log_t v15 = *(void *)(v14 + 16);
      }

      while (v16 != v15);
    }
  }

  v73 = *(void *)(v84 + 16);
  if (v73 < v9) {
    goto LABEL_131;
  }
  sub_100133D94((char *)v9, v73);
  os_log_t v3 = v77;
  if (!v84 || !*(void *)(v84 + 16)) {
    goto LABEL_50;
  }
  swift_bridgeObjectRetain(v84);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v85 = 0x636E616E69465A4DLL;
  v86 = 0xE900000000000065LL;
  uint64_t v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v85, &type metadata for String);
  objc_msgSend(v77, "__swift_setObject:forKeyedSubscript:", isa, v38);

LABEL_51:
  swift_unknownObjectRelease(v38);
  *(void *)&v82 = 0x7975425A4DLL;
  *((void *)&v82 + 1) = 0xE500000000000000LL;
  uint64_t v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v82, &type metadata for String);
  __int16 v40 = objc_msgSend(v3, "__swift_objectForKeyedSubscript:", v39);
  swift_unknownObjectRelease(v39);
  if (v40)
  {
    _bridgeAnyObjectToAny(_:)(&v82);
    swift_unknownObjectRelease(v40);
  }

  else
  {
    v82 = 0u;
    v83 = 0u;
  }

  sub_1000E91F4((uint64_t)&v82, (uint64_t)&v85, (uint64_t *)&unk_100328ED0);
  if (!v87)
  {
    sub_1000CEEA8((uint64_t)&v85, (uint64_t *)&unk_100328ED0);
    goto LABEL_100;
  }

  uint64_t v41 = sub_10007B1FC(&qword_10032A500);
  if ((swift_dynamicCast(&v81, &v85, (char *)&type metadata for Any + 8, v41, 6LL) & 1) == 0)
  {
LABEL_100:
    v81 = 0LL;
    goto LABEL_101;
  }

  id v42 = v81;
  if (!v81) {
    goto LABEL_101;
  }
  swift_bridgeObjectRetain(v81);
  id v44 = sub_100133E90(v43, &off_1002EA8C0);
  id v46 = v45;
  id result = swift_bridgeObjectRelease();
  if ((v46 & 1) != 0)
  {
    id v44 = *(void *)(v42 + 16);
    goto LABEL_111;
  }

  id v47 = v44 + 1;
  if (__OFADD__(v44, 1LL)) {
    goto LABEL_136;
  }
  __int128 v48 = v81;
  __int128 v49 = *(void *)(v81 + 16);
  if (v47 == v49)
  {
LABEL_111:
    v75 = *(void *)(v81 + 16);
    if (v75 < v44) {
      goto LABEL_132;
    }
    sub_100133D94((char *)v44, v75);
    if (v81 && *(void *)(v81 + 16))
    {
      swift_bridgeObjectRetain(v81);
      v76 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v85 = 0x7975425A4DLL;
      v86 = 0xE500000000000000LL;
      v71 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v85, &type metadata for String);
      objc_msgSend(v3, "__swift_setObject:forKeyedSubscript:", v76, v71);

      goto LABEL_102;
    }

void sub_100049528( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10004954C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004955C(uint64_t a1)
{
}

void sub_100049564(uint64_t a1, void *a2)
{
  os_log_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v4 pendingLegacyTransactionsAccountTokenForBundleID:v6]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v14 requestBundleID]);
  uint64_t v11 = objc_claimAutoreleasedReturnValue([v4 pendingLegacyTransactionsLastUpdatedForBundleID:v10]);

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  os_log_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1000498CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000498FC(uint64_t a1, void *a2)
{
  os_log_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestBundleID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v8 + 40);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v4 pendingLegacyTransactionsForBundleID:v6 logKey:v7 error:&obj]);

  objc_storeStrong((id *)(v8 + 40), obj);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_100049BC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100049BE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 requestBundleID]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 removeCachedLegacyTransactionsForBundleID:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestBundleID]);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
  unsigned int v10 = [v3 cacheLegacyTransactionsForBundleID:v7 transactions:v8 logKey:v9];
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (v10) {
    BOOL v12 = *(_BYTE *)(v11 + 24) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  *(_BYTE *)(v11 + 24) = v12;

  os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 requestBundleID]);
  os_log_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) client]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 currentAccountToken]);
  unsigned int v17 = [v3 setLegacyTransactionsLastUpdatedForBundleID:v14 token:v16];
  uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (v17) {
    BOOL v19 = *(_BYTE *)(v18 + 24) != 0;
  }
  else {
    BOOL v19 = 0;
  }
  *(_BYTE *)(v18 + 24) = v19;

  uint64_t v20 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  return v20;
}

void sub_100049FA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100049FC0(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 resetLegacyTransactionsLastUpdatedForBundleID:*(void *)(a1 + 32)];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_10004A0F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328400;
  off_100328400 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E6E8;
  qword_10032E6E8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E6F0;
  qword_10032E6F0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E6F8;
  qword_10032E6F8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  unsigned int v10 = (void *)qword_10032E700;
  qword_10032E700 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  BOOL v12 = (void *)qword_10032E708;
  qword_10032E708 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E710;
  qword_10032E710 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint64_t v16 = (void *)qword_10032E718;
  qword_10032E718 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032E720;
  qword_10032E720 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E728;
  qword_10032E728 = (uint64_t)v19;
}

  ;
}

id sub_10004A26C(uint64_t a1, void *a2)
{
  return a2;
}

  ;
}

void sub_10004A2C0(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___AssetSession);
  uint64_t v2 = (void *)qword_10032E740;
  qword_10032E740 = (uint64_t)v1;
}

void sub_10004A468(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  os_log_t v3 = off_100328588;
  if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = kNSURLSessionLaunchOnDemandNotificationName;
    os_log_t v5 = v3;
    int v6 = 136315394;
    uint64_t v7 = v4;
    __int16 v8 = 2080;
    os_log_t v9 = xpc_copy_description(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Handling %s wake: %s", (uint8_t *)&v6, 0x16u);
  }
}

void sub_10004A568(id a1)
{
  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  os_log_t v1 = (os_log_s *)off_100328588;
  if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Obliterated stale background sessions", v2, 2u);
  }

void sub_10004A810(id *a1, void *a2)
{
  id v3 = a2;
  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  uint64_t v4 = off_100328588;
  os_log_t v5 = (char *)[a1[4] signpostId];
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v6 = (os_signpost_id_t)v5;
    if (os_signpost_enabled((os_log_t)v4))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] logKey]);
      __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] URL]);
      *(_DWORD *)buf = 138543618;
      os_log_t v17 = v7;
      __int16 v18 = 2114;
      os_log_t v19 = v8;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_SIGNPOST_INTERVAL_BEGIN,  v6,  "Download",  " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ",  buf,  0x16u);
    }
  }

  objc_initWeak((id *)buf, a1[6]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10004AA40;
  void v13[3] = &unk_1002E9010;
  id v14 = a1[4];
  objc_copyWeak(&v15, (id *)buf);
  [v3 addErrorBlock:v13];
  id v9 = a1[6];
  unsigned int v10 = (dispatch_queue_s *)*((void *)v9 + 2);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_10004AC14;
  v11[3] = &unk_1002E78B8;
  void v11[4] = v9;
  id v12 = a1[4];
  dispatch_async(v10, v11);

  objc_destroyWeak(&v15);
  objc_destroyWeak((id *)buf);
}

void sub_10004AA1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_10004AA40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s **)objc_claimAutoreleasedReturnValue([v3 domain]);
  if (![v4 isEqualToString:NSCocoaErrorDomain])
  {
LABEL_9:

    goto LABEL_10;
  }

  id v5 = [v3 code];

  if (v5 == (id)3072)
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    os_signpost_id_t v6 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void **)(a1 + 32);
      __int16 v8 = v6;
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 logKey]);
      *(_DWORD *)buf = 138543362;
      id v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@] Request cancelled", buf, 0xCu);
    }

    id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v4 = WeakRetained;
    if (WeakRetained)
    {
      os_log_t v11 = WeakRetained[2];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10004ABD8;
      block[3] = &unk_1002E7958;
      id v13 = *(id *)(a1 + 32);
      dispatch_async(v11, block);
    }

    goto LABEL_9;
  }

id sub_10004ABD8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) task]);
  [v2 cancel];

  return [*(id *)(a1 + 32) setAction:3];
}

id sub_10004AC14(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _prepareDataConsumerUsingTaskInfo:*(void *)(a1 + 40)];
}

void sub_10004AF1C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) state])
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    os_signpost_id_t v6 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void **)(a1 + 40);
      __int16 v8 = v6;
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 logKey]);
      unsigned int v10 = *(void **)(a1 + 32);
      int v25 = 138543618;
      uint64_t v26 = v9;
      __int16 v27 = 2114;
      id v28 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Data consumer for task: %{public}@ was stopped at consumer callback",  (uint8_t *)&v25,  0x16u);
    }
  }

  else
  {
    if (v5)
    {
      if (qword_10032E790 != -1) {
        dispatch_once(&qword_10032E790, &stru_1002E91C0);
      }
      os_log_t v11 = off_100328588;
      id v12 = (char *)[*(id *)(a1 + 40) signpostId];
      if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v13 = (os_signpost_id_t)v12;
        if (os_signpost_enabled((os_log_t)v11))
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lib_shortDescription"));
          int v25 = 138543618;
          uint64_t v26 = v14;
          __int16 v27 = 2114;
          id v28 = v15;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_SIGNPOST_EVENT,  v13,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v25,  0x16u);
        }
      }

      if (qword_10032E790 != -1) {
        dispatch_once(&qword_10032E790, &stru_1002E91C0);
      }
      uint64_t v16 = off_100328588;
      if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR))
      {
        __int128 v21 = *(void **)(a1 + 40);
        __int128 v22 = v16;
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 logKey]);
        uint64_t v24 = *(void **)(a1 + 32);
        int v25 = 138543874;
        uint64_t v26 = v23;
        __int16 v27 = 2114;
        id v28 = v24;
        __int16 v29 = 2114;
        id v30 = v5;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[%{public}@] Data consumer for task: %{public}@ failed with error: %{public}@",  (uint8_t *)&v25,  0x20u);
      }

      [*(id *)(a1 + 40) setError:v5];
    }

    else
    {
      if (!a3)
      {
        objc_msgSend( *(id *)(a1 + 40),  "setBytesReceived:",  (char *)objc_msgSend(*(id *)(a1 + 32), "countOfBytesReceived")
        + (void)[*(id *)(a1 + 40) requestOffset]);
        goto LABEL_25;
      }

      if (qword_10032E790 != -1) {
        dispatch_once(&qword_10032E790, &stru_1002E91C0);
      }
      os_log_t v17 = off_100328588;
      __int16 v18 = (char *)[*(id *)(a1 + 40) signpostId];
      if ((unint64_t)(v18 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v19 = (os_signpost_id_t)v18;
        if (os_signpost_enabled((os_log_t)v17))
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
          int v25 = 138543362;
          uint64_t v26 = v20;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_SIGNPOST_EVENT,  v19,  "ConsumerComplete",  " uuid=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v25,  0xCu);
        }
      }

      [*(id *)(a1 + 40) setAction:2];
    }

    [*(id *)(a1 + 32) cancel];
  }

LABEL_25:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

    os_signpost_id_t v13 = (v18 - 1) & v18;
  }

  os_signpost_id_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  __int16 v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    id v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    __int16 v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    os_signpost_id_t v13 = (v18 - 1) & v18;
  }

  os_signpost_id_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  __int16 v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    id v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    __int16 v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    id v12 = (v22 - 1) & v22;
    id v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10009BEC0(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    os_log_t v17 = 32 * v15;
    sub_10007B1C0(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    __int16 v18 = *(void *)(v4 + 48) + v16;
    os_signpost_id_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)__int16 v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_1000853B0(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  id v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  __int128 v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    id v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    __int128 v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    id v12 = (v26 - 1) & v26;
    id v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    os_log_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    os_signpost_id_t v19 = *v17;
    __int16 v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    __int128 v21 = *v20;
    __int128 v22 = v20[1];
    id v23 = (void *)(*(void *)(v4 + 48) + v16);
    *id v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }

  __int16 v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    id v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

LABEL_83:
    goto LABEL_84;
  }

  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR)) {
    sub_100260CC4();
  }
  (*((void (**)(id, void))v11 + 2))(v11, 0LL);
LABEL_84:
}

void sub_10004BF48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10004C024;
  v9[3] = &unk_1002E90D8;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_10004C024(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v2 = off_100328588;
    id v3 = (char *)[*(id *)(a1 + 56) signpostId];
    if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v4 = (os_signpost_id_t)v3;
      if (os_signpost_enabled((os_log_t)v2))
      {
        id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) logKey]);
        id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lib_shortDescription"));
        *(_DWORD *)buf = 138543618;
        uint64_t v20 = v5;
        __int16 v21 = 2114;
        __int128 v22 = v6;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_SIGNPOST_EVENT,  v4,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  buf,  0x16u);
      }
    }

    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v7 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 56);
      id v10 = v7;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 logKey]);
      uint64_t v12 = *(void **)(a1 + 64);
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543874;
      uint64_t v20 = v11;
      __int16 v21 = 2114;
      __int128 v22 = v12;
      __int16 v23 = 2114;
      uint64_t v24 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%{public}@] Data consumer for task: %{public}@ failed to reset with error: %{public}@",  buf,  0x20u);
    }

    [*(id *)(a1 + 56) setError:*(void *)(a1 + 32)];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10004C2C8;
    void v14[3] = &unk_1002E90B0;
    id v8 = *(void **)(a1 + 40);
    v14[4] = *(void *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 64);
    id v18 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 32);
    [v8 prepareWithCompletionHandler:v14];
  }

void sub_10004C2C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10004C3A4;
  v9[3] = &unk_1002E9088;
  uint64_t v15 = a2;
  id v10 = v6;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 56);
  id v8 = v5;
  dispatch_async(v7, v9);
}

uint64_t sub_10004C3A4(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v2 = off_100328588;
    id v3 = (char *)[*(id *)(a1 + 32) signpostId];
    if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v4 = (os_signpost_id_t)v3;
      if (os_signpost_enabled((os_log_t)v2))
      {
        id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
        id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lib_shortDescription"));
        int v22 = 138543618;
        __int16 v23 = v5;
        __int16 v24 = 2114;
        int v25 = v6;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_SIGNPOST_EVENT,  v4,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v22,  0x16u);
      }
    }

    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v7 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR))
    {
      id v17 = *(void **)(a1 + 32);
      id v18 = v7;
      os_signpost_id_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
      uint64_t v20 = *(void **)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 72);
      int v22 = 138543874;
      __int16 v23 = v19;
      __int16 v24 = 2114;
      int v25 = v20;
      __int16 v26 = 2048;
      uint64_t v27 = v21;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[%{public}@] Data consumer for task: %{public}@ failed to prepare with unexpected resumption offset: %llu",  (uint8_t *)&v22,  0x20u);
    }

    uint64_t v8 = ASDErrorWithDescription(@"AssetErrorDomain", 8LL, @"Expected zero resumption offset");
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    [*(id *)(a1 + 32) setError:v9];

    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  if (*(void *)(a1 + 40))
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    id v10 = off_100328588;
    id v11 = (char *)[*(id *)(a1 + 32) signpostId];
    if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v12 = (os_signpost_id_t)v11;
      if (os_signpost_enabled((os_log_t)v10))
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "lib_shortDescription"));
        int v22 = 138543618;
        __int16 v23 = v13;
        __int16 v24 = 2114;
        int v25 = v14;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_SIGNPOST_EVENT,  v12,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v22,  0x16u);
      }
    }

    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v15 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR)) {
      sub_100260ECC(a1 + 32, v15);
    }
    [*(id *)(a1 + 32) setError:*(void *)(a1 + 40)];
    return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), 1LL);
}

void sub_10004C754(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10004C818;
  v7[3] = &unk_1002E9100;
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_10004C818(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v2 = off_100328588;
    id v3 = (char *)[*(id *)(a1 + 40) signpostId];
    if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v4 = (os_signpost_id_t)v3;
      if (os_signpost_enabled((os_log_t)v2))
      {
        id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
        id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lib_shortDescription"));
        int v14 = 138543618;
        uint64_t v15 = v5;
        __int16 v16 = 2114;
        id v17 = v6;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_SIGNPOST_EVENT,  v4,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v14,  0x16u);
      }
    }

    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v7 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 40);
      id v10 = v7;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 logKey]);
      os_signpost_id_t v12 = *(void **)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 138543874;
      uint64_t v15 = v11;
      __int16 v16 = 2114;
      id v17 = v12;
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%{public}@] Data consumer for task: %{public}@ failed to reset with error: %{public}@",  (uint8_t *)&v14,  0x20u);
    }

    [*(id *)(a1 + 40) setError:*(void *)(a1 + 32)];
  }

  else
  {
    [*(id *)(a1 + 40) setAction:1];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10004D23C(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10004D2DC;
  block[3] = &unk_1002E9128;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = v3;
  dispatch_async(v5, block);
}

id sub_10004D2DC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v2 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR)) {
      sub_1002610D8(a1, v2);
    }
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);

    if (!v3) {
      [*(id *)(a1 + 40) setError:*(void *)(a1 + 32)];
    }
  }

  return [*(id *)(a1 + 48) _finishPromiseUsingTaskInfo:*(void *)(a1 + 40)];
}

void sub_10004D388(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10004D428;
  block[3] = &unk_1002E9128;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = v3;
  dispatch_async(v5, block);
}

id sub_10004D428(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    uint64_t v2 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR)) {
      sub_10026115C(a1, v2);
    }
    [*(id *)(a1 + 40) setError:*(void *)(a1 + 32)];
    return [*(id *)(a1 + 48) _finishPromiseUsingTaskInfo:*(void *)(a1 + 40)];
  }

  else
  {
    id v4 = [*(id *)(a1 + 40) action];
    uint64_t v6 = *(void *)(a1 + 40);
    id v5 = *(void **)(a1 + 48);
    if (v4 == (id)1) {
      return _[v5 _retryTaskUsingTaskInfo:v6];
    }
    else {
      return [v5 _finishPromiseUsingTaskInfo:v6];
    }
  }

void sub_10004E80C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10004E8AC;
  block[3] = &unk_1002E9128;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = v3;
  dispatch_async(v5, block);
}

id sub_10004E8AC(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return _[*(id *)(a1 + 48) _prepareDataConsumerUsingTaskInfo:*(void *)(a1 + 40)];
  }
  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  uint64_t v2 = off_100328588;
  if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR)) {
    sub_1002612D4(a1, v2);
  }
  [*(id *)(a1 + 40) setError:*(void *)(a1 + 32)];
  return [*(id *)(a1 + 48) _finishPromiseUsingTaskInfo:*(void *)(a1 + 40)];
}

void sub_10004EC28(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v11[0] = _NSConcreteStackBlock;
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  id v11[2] = sub_10004ECD0;
  v11[3] = &unk_1002E9150;
  v11[1] = 3221225472LL;
  id v12 = v5;
  uint64_t v15 = a2;
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, v11);
}

id sub_10004ECD0(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  if (!*(void *)(a1 + 32))
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (!v10)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) properties]);
      id v12 = [v11 rangeOffset];

      if (!v12) {
        return _[*(id *)(a1 + 48) _prepareRequestUsingTaskInfo:*(void *)(a1 + 40)];
      }
      uint64_t v10 = *(void *)(a1 + 56);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) properties]);
    objc_msgSend(*(id *)(a1 + 40), "setRequestOffset:", (char *)objc_msgSend(v13, "rangeOffset") + v10);

    return _[*(id *)(a1 + 48) _prepareRequestUsingTaskInfo:*(void *)(a1 + 40)];
  }

  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  id v3 = off_100328588;
  id v4 = (char *)[*(id *)(a1 + 40) signpostId];
  if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v5 = (os_signpost_id_t)v4;
    if (os_signpost_enabled((os_log_t)v3))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "lib_shortDescription"));
      int v14 = 138543618;
      uint64_t v15 = v6;
      __int16 v16 = 2114;
      id v17 = v7;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_SIGNPOST_EVENT,  v5,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v14,  0x16u);
    }
  }

  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  id v8 = off_100328588;
  if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR)) {
    sub_100261458((void **)(a1 + 40), v8);
  }
  [*(id *)(a1 + 40) setError:*(void *)(a1 + 32)];
  return [*(id *)(a1 + 48) _finishPromiseUsingTaskInfo:*(void *)(a1 + 40)];
}

void sub_10004F0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  id v8 = off_100328588;
  if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(void **)(a1 + 40);
    int v14 = v8;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 logKey]);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) request]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 URL]);
    int v21 = 138544386;
    int v22 = v15;
    __int16 v23 = 2114;
    __int16 v24 = v17;
    __int16 v25 = 2114;
    uint64_t v26 = a2;
    __int16 v27 = 2114;
    uint64_t v28 = a3;
    __int16 v29 = 2114;
    uint64_t v30 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[%{public}@] Lookup complete for: %{public}@ found replacement: %{public}@ with advice: %{public}@ error: %{public}@",  (uint8_t *)&v21,  0x34u);

    if (a2) {
      goto LABEL_5;
    }
  }

  else if (a2)
  {
LABEL_5:
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) request]);
    id v10 = [v9 mutableCopy];

    [v10 setURL:a2];
    [v10 _setRequiresShortConnectionTimeout:1];
    id v11 = *(void **)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    goto LABEL_13;
  }

  if (a4)
  {
    if (qword_10032E790 != -1) {
      dispatch_once(&qword_10032E790, &stru_1002E91C0);
    }
    __int16 v18 = off_100328588;
    if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_ERROR)) {
      sub_1002614E4(a1, v18);
    }
  }

  [*(id *)(a1 + 40) setIgnoreAssetCache:1];
  uint64_t v20 = *(void **)(a1 + 32);
  uint64_t v19 = *(void **)(a1 + 40);
  id v10 = (id)objc_claimAutoreleasedReturnValue([v19 request]);
  id v11 = v20;
  id v12 = v19;
LABEL_13:
  [v11 _startTaskUsingTaskInfo:v12 withRequest:v10];
}

id sub_10004FF10(id *a1)
{
  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  uint64_t v2 = off_100328588;
  id v3 = (char *)[a1[4] signpostId];
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = (os_signpost_id_t)v3;
    if (os_signpost_enabled((os_log_t)v2))
    {
      os_signpost_id_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[4] logKey]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] URL]);
      int v13 = 138543618;
      int v14 = v5;
      __int16 v15 = 2114;
      __int16 v16 = v6;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_SIGNPOST_EVENT,  v4,  "TaskStarted",  " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v13,  0x16u);
    }
  }

  if (qword_10032E790 != -1) {
    dispatch_once(&qword_10032E790, &stru_1002E91C0);
  }
  uint64_t v7 = off_100328588;
  if (os_log_type_enabled((os_log_t)off_100328588, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = a1[4];
    uint64_t v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 logKey]);
    id v11 = a1[6];
    int v13 = 138543618;
    int v14 = v10;
    __int16 v15 = 2114;
    __int16 v16 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Started task: %{public}@",  (uint8_t *)&v13,  0x16u);
  }

  return [a1[6] resume];
}

void sub_10005013C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328588;
  off_100328588 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  os_signpost_id_t v4 = (void *)qword_10032E748;
  qword_10032E748 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E750;
  qword_10032E750 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E758;
  qword_10032E758 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E760;
  qword_10032E760 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E768;
  qword_10032E768 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  int v14 = (void *)qword_10032E770;
  qword_10032E770 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_10032E778;
  qword_10032E778 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E780;
  qword_10032E780 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E788;
  qword_10032E788 = (uint64_t)v19;
}

void sub_100050298( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_100050AC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328590;
  off_100328590 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  os_signpost_id_t v4 = (void *)qword_10032E798;
  qword_10032E798 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032E7A0;
  qword_10032E7A0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E7A8;
  qword_10032E7A8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E7B0;
  qword_10032E7B0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E7B8;
  qword_10032E7B8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  int v14 = (void *)qword_10032E7C0;
  qword_10032E7C0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_10032E7C8;
  qword_10032E7C8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032E7D0;
  qword_10032E7D0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032E7D8;
  qword_10032E7D8 = (uint64_t)v19;
}

void sub_100050C60(id a1)
{
  os_log_t v1 = objc_opt_new(&OBJC_CLASS___Optional);
  uint64_t v2 = (void *)qword_10032E7F0;
  qword_10032E7F0 = (uint64_t)v1;
}

void sub_100050E68(id a1)
{
  os_log_t v1 = -[TransactionStore initWithHoldTime:](objc_alloc(&OBJC_CLASS___TransactionStore), "initWithHoldTime:", 5.0);
  uint64_t v2 = (void *)qword_10032E7F8;
  qword_10032E7F8 = (uint64_t)v1;
}

_DWORD *sub_100050FC8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) keyEnumerator]);
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        [v2 addObject:*(void *)(*((void *)&v19 + 1) + 8 * (void)i)];
      }

      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v25 count:16];
    }

    while (v5);
  }

  if ([v2 count])
  {
    __int16 v23 = @"transactions";
    __int16 v24 = v2;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL));
    id v18 = 0LL;
    os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v8,  200LL,  0LL,  &v18));
    id v10 = v18;
    if (v9)
    {
      id v11 = [v9 length];
      id v12 = calloc(1uLL, (size_t)v11 + 200);
      if (v12)
      {
        os_log_t v13 = v12;
        *id v12 = 1;
        v12[1] = (_DWORD)v11;
        id v14 = [@"Transactions" UTF8String];
        if (v14) {
          __strlcpy_chk(v13 + 34, v14, 64LL, 64LL);
        }
        memcpy(v13 + 50, [v9 bytes], (size_t)v11);
        goto LABEL_24;
      }

      if (qword_10032E850 != -1) {
        dispatch_once(&qword_10032E850, &stru_1002E9268);
      }
      __int16 v16 = (os_log_s *)qword_10032E808;
      if (os_log_type_enabled((os_log_t)qword_10032E808, OS_LOG_TYPE_ERROR)) {
        sub_100261988(v16);
      }
    }

    else
    {
      if (qword_10032E850 != -1) {
        dispatch_once(&qword_10032E850, &stru_1002E9268);
      }
      os_log_t v15 = (os_log_s *)qword_10032E808;
      if (os_log_type_enabled((os_log_t)qword_10032E808, OS_LOG_TYPE_ERROR)) {
        sub_100261914((uint64_t)v10, v15);
      }
    }

    os_log_t v13 = 0LL;
LABEL_24:

    goto LABEL_25;
  }

  os_log_t v13 = 0LL;
LABEL_25:

  return v13;
}

uint64_t sub_100051374(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100051384(uint64_t a1)
{
}

void sub_10005138C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100051454(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 32) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100051680(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 32) countForObject:*(void *)(a1 + 40)] == (id)1)
  {
    if (qword_10032E850 != -1) {
      dispatch_once(&qword_10032E850, &stru_1002E9268);
    }
    id v2 = (os_log_s *)qword_10032E808;
    if (os_log_type_enabled((os_log_t)qword_10032E808, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v7 = 138543362;
      uint64_t v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[Transaction] Started transaction: %{public}@",  (uint8_t *)&v7,  0xCu);
    }

    id v4 = (void *)os_transaction_create([*(id *)(a1 + 40) UTF8String]);
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:v4 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  else
  {
    if (qword_10032E850 != -1) {
      dispatch_once(&qword_10032E850, &stru_1002E9268);
    }
    id v5 = (os_log_s *)qword_10032E808;
    if (os_log_type_enabled((os_log_t)qword_10032E808, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[Transaction] Joined transaction: %{public}@",  (uint8_t *)&v7,  0xCu);
    }
  }

void sub_1000518A0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 32) countForObject:*(void *)(a1 + 40)])
  {
    if (qword_10032E850 != -1) {
      dispatch_once(&qword_10032E850, &stru_1002E9268);
    }
    id v2 = (os_log_s *)qword_10032E808;
    if (os_log_type_enabled((os_log_t)qword_10032E808, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v6 = 138543362;
      uint64_t v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "[Transaction] Left transaction: %{public}@",  (uint8_t *)&v6,  0xCu);
    }
  }

  else
  {
    if (qword_10032E850 != -1) {
      dispatch_once(&qword_10032E850, &stru_1002E9268);
    }
    id v4 = (os_log_s *)qword_10032E808;
    if (os_log_type_enabled((os_log_t)qword_10032E808, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = 138543362;
      uint64_t v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[Transaction] Ended transaction: %{public}@",  (uint8_t *)&v6,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }

void sub_100051A40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328598;
  off_100328598 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E808;
  qword_10032E808 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E810;
  qword_10032E810 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E818;
  qword_10032E818 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E820;
  qword_10032E820 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E828;
  qword_10032E828 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E830;
  qword_10032E830 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_10032E838;
  qword_10032E838 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032E840;
  qword_10032E840 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E848;
  qword_10032E848 = (uint64_t)v19;
}

LABEL_60:
              id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  3LL));
              [v18 setObject:v88 forKeyedSubscript:@"subscriptionGroupIdentifier"];
              v76 = v91;
              [v18 setObject:v91 forKeyedSubscript:@"lastTransactions"];
              [v18 setObject:v23 forKeyedSubscript:@"gracePeriodExpiresDate"];
              -[NSMutableArray addObject:](v82, "addObject:", v18);
LABEL_61:

              uint64_t v8 = v83;
              goto LABEL_62;
            }

            if (qword_10032E8A0 != -1) {
              dispatch_once(&qword_10032E8A0, &stru_1002E9288);
            }
            v66 = (void *)v15;
            v67 = (void *)qword_10032E880;
            if (os_log_type_enabled((os_log_t)qword_10032E880, OS_LOG_TYPE_ERROR))
            {
              v68 = v67;
              v69 = (void *)objc_claimAutoreleasedReturnValue(-[LoadSubscriptionStatusTask logKey](self, "logKey"));
              v70 = (void *)objc_opt_class(self);
              *(_DWORD *)buf = 138544130;
              v114 = v69;
              v115 = 2114;
              v116 = v70;
              v117 = 2114;
              v118 = (uint64_t)v18;
              v119 = 2114;
              v120 = v13;
              v71 = v70;
              v72 = v68;
              v73 = "[%{public}@] [%{public}@]: Invalid status %{public}@ for subscription group ID %{public}@";
              v74 = 42;
              goto LABEL_65;
            }

            goto LABEL_57;
          }

          id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"lastTransactions"]);
          uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSArray);
          if ((objc_opt_isKindOfClass(v18, v36) & 1) == 0)
          {
            if (qword_10032E8A0 != -1) {
              dispatch_once(&qword_10032E8A0, &stru_1002E9288);
            }
            v66 = (void *)v15;
            v75 = (void *)qword_10032E880;
            if (os_log_type_enabled((os_log_t)qword_10032E880, OS_LOG_TYPE_ERROR))
            {
              v68 = v75;
              v69 = (void *)objc_claimAutoreleasedReturnValue(-[LoadSubscriptionStatusTask logKey](self, "logKey"));
              v77 = (void *)objc_opt_class(self);
              *(_DWORD *)buf = 138543874;
              v114 = v69;
              v115 = 2114;
              v116 = v77;
              v117 = 2114;
              v118 = v13;
              v71 = v77;
              v72 = v68;
              v73 = "[%{public}@] [%{public}@]: Invalid lastTransactions for subscription group ID %{public}@";
              v74 = 32;
LABEL_65:
              _os_log_error_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, v73, buf, v74);

              os_log_t v7 = v81;
            }

LABEL_57:
            __int16 v23 = 0LL;
            v76 = v66;
            goto LABEL_61;
          }

          v91 = (void *)v15;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          __int128 v20 = v18;
          v90 = [v20 countByEnumeratingWithState:&v94 objects:v109 count:16];
          __int16 v23 = 0LL;
          if (!v90)
          {
            id v18 = v20;
            goto LABEL_60;
          }

          v89 = *(void *)v95;
          __int16 v37 = &_ss13OpaquePointerV16debugDescriptionSSvg_ptr;
          while (2)
          {
            uint64_t v38 = 0LL;
LABEL_25:
            if (*(void *)v95 != v89) {
              objc_enumerationMutation(v20);
            }
            uint64_t v39 = v20;
            __int16 v40 = *(void **)(*((void *)&v94 + 1) + 8 * v38);
            uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:@"status"]);
            id v42 = objc_opt_class(v37[362]);
            if ((objc_opt_isKindOfClass(v41, v42) & 1) != 0)
            {
              id v43 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v10]);
              id v44 = objc_opt_class(v9[374]);
              if ((objc_opt_isKindOfClass(v43, v44) & 1) != 0)
              {
                uint64_t v45 = v10;
                id v46 = sub_100025AE4(v43);
                id v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
                v93 = v23;
                -[LoadSubscriptionStatusTask _replaceDate:ifBeforeDate:](self, "_replaceDate:ifBeforeDate:", &v93, v47);
                __int128 v48 = v93;

                __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:@"signedTransactionInfo"]);
                __int128 v50 = objc_opt_class(v9[374]);
                if ((objc_opt_isKindOfClass(v49, v50) & 1) != 0)
                {
                  v107[0] = @"status";
                  v107[1] = v45;
                  v108[0] = v41;
                  v108[1] = v43;
                  v107[2] = @"signedTransactionInfo";
                  v108[2] = v49;
                  __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v108,  v107,  3LL));
                  [v91 addObject:v51];
                  goto LABEL_31;
                }

                if (qword_10032E8A0 != -1) {
                  dispatch_once(&qword_10032E8A0, &stru_1002E9288);
                }
                v62 = (void *)qword_10032E880;
                if (os_log_type_enabled((os_log_t)qword_10032E880, OS_LOG_TYPE_ERROR))
                {
                  log = v62;
                  __int128 v63 = (void *)objc_claimAutoreleasedReturnValue(-[LoadSubscriptionStatusTask logKey](self, "logKey"));
                  v64 = (void *)objc_opt_class(self);
                  *(_DWORD *)buf = 138543874;
                  v114 = v63;
                  v115 = 2114;
                  v116 = v64;
                  v117 = 2114;
                  v118 = (uint64_t)v88;
                  v85 = v64;
                  __int128 v51 = log;
                  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@]: Invalid transaction for subscription group ID %{public}@",  buf,  0x20u);

LABEL_31:
                }

                __int16 v23 = v48;
                os_log_t v9 = &_ss13OpaquePointerV16debugDescriptionSSvg_ptr;
                id v10 = v45;
                __int16 v37 = &_ss13OpaquePointerV16debugDescriptionSSvg_ptr;
                __int128 v20 = v39;
              }

              else
              {
                if (qword_10032E8A0 != -1) {
                  dispatch_once(&qword_10032E8A0, &stru_1002E9288);
                }
                __int128 v20 = v39;
                id v57 = (void *)qword_10032E880;
                if (os_log_type_enabled((os_log_t)qword_10032E880, OS_LOG_TYPE_ERROR))
                {
                  __int16 v58 = v57;
                  id v59 = (void *)objc_claimAutoreleasedReturnValue(-[LoadSubscriptionStatusTask logKey](self, "logKey"));
                  int v60 = (void *)objc_opt_class(self);
                  *(_DWORD *)buf = 138543874;
                  v114 = v59;
                  v115 = 2114;
                  v116 = v60;
                  v117 = 2114;
                  v118 = (uint64_t)v88;
                  v61 = v60;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@]: Invalid renewal info for subscription group ID %{public}@",  buf,  0x20u);

                  os_log_t v9 = &_ss13OpaquePointerV16debugDescriptionSSvg_ptr;
                  __int128 v20 = v39;
                }
              }
            }

            else
            {
              if (qword_10032E8A0 != -1) {
                dispatch_once(&qword_10032E8A0, &stru_1002E9288);
              }
              __int128 v20 = v39;
              id v52 = (void *)qword_10032E880;
              if (os_log_type_enabled((os_log_t)qword_10032E880, OS_LOG_TYPE_ERROR))
              {
                __int128 v53 = v52;
                uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[LoadSubscriptionStatusTask logKey](self, "logKey"));
                __int16 v55 = (void *)objc_opt_class(self);
                *(_DWORD *)buf = 138544130;
                v114 = v54;
                v115 = 2114;
                v116 = v55;
                v117 = 2114;
                v118 = (uint64_t)v41;
                v119 = 2114;
                v120 = (uint64_t)v88;
                id v56 = v55;
                _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@]: Invalid status %{public}@ for subscription group ID %{public}@",  buf,  0x2Au);

                os_log_t v9 = &_ss13OpaquePointerV16debugDescriptionSSvg_ptr;
              }
            }

            if (v90 == (id)++v38)
            {
              v65 = [v20 countByEnumeratingWithState:&v94 objects:v109 count:16];
              v90 = v65;
              if (!v65)
              {
                id v18 = v20;
                id v4 = &_ss13OpaquePointerV16debugDescriptionSSvg_ptr;
                os_log_t v5 = v80;
                os_log_t v7 = v81;
                goto LABEL_60;
              }

              continue;
            }

            goto LABEL_25;
          }
        }

        if (qword_10032E8A0 != -1) {
          dispatch_once(&qword_10032E8A0, &stru_1002E9288);
        }
        unint64_t v31 = (void *)qword_10032E880;
        if (os_log_type_enabled((os_log_t)qword_10032E880, OS_LOG_TYPE_ERROR))
        {
          id v32 = v31;
          __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(-[LoadSubscriptionStatusTask logKey](self, "logKey"));
          id v34 = (void *)objc_opt_class(self);
          *(_DWORD *)buf = 138543874;
          v114 = v33;
          v115 = 2114;
          v116 = v34;
          v117 = 2114;
          v118 = v13;
          __int16 v35 = v34;
          _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@]: Invalid subscription group ID for status request: %{public}@",  buf,  0x20u);

          os_log_t v7 = v81;
        }

LABEL_62:
        os_log_t v11 = v87 + 1;
      }

      while ((id)(v87 + 1) != v7);
      v78 = [v5 countByEnumeratingWithState:&v103 objects:v121 count:16];
      os_log_t v7 = v78;
    }

    while (v78);
  }

  v79 = *(NSString **)((char *)&self->_logKey + 2);
  *(NSString **)((char *)&self->_logKey + 2) = (NSString *)&v82->super.super.isa;
}

        __break(1u);
        JUMPOUT(0x1000E5420LL);
      }

      goto LABEL_60;
    }

    swift_bridgeObjectRelease(a3);
  }

  else
  {

    swift_bridgeObjectRelease(a3);
    sub_100085298((uint64_t)&v163, (uint64_t *)&unk_100328ED0);
  }

  id v52 = v159;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  __int128 v53 = sub_100079604(v38, (uint64_t)qword_10033E1A8);
  sub_1000E8F9C(v53, (uint64_t)v40, type metadata accessor for SKLogger);
  __int16 v55 = (os_log_s *)Logger.logObject.getter(v54);
  id v56 = type metadata accessor for Logger(0LL);
  id v57 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v56 - 8) + 8LL))(v40, v56);
  __int16 v58 = static os_log_type_t.error.getter(v57);
  if (os_log_type_enabled(v55, v58))
  {
    id v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    int v60 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v163 = v60;
    *(_DWORD *)id v59 = 136446210;
    v161 = sub_10007A488(0x746E65696C43LL, 0xE600000000000000LL, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162, v59 + 4);
    _os_log_impl((void *)&_mh_execute_header, v55, v58, "[%{public}s] Cannot find bundle ID", v59, 0xCu);
    swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);
  }

  v61 = v155;
  v62 = sub_1000E9070();
  __int128 v63 = swift_allocError(&unk_1002EDD58, v62, 0LL, 0LL);
  *v64 = 0;
  swift_willThrow(v63, v64, v65, v66, v67, v68, v69);
  sub_100085298(v157, &qword_10032A3D8);
  (*(void (**)(id, uint64_t))(v158 + 8))(v61, v52);
  swift_deallocPartialClassInstance( v44,  ObjectType,  *(unsigned int *)((swift_isaMask & *v44) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v44) + 0x34LL));
  return v61;
}

void sub_10005317C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_1003285A0;
  off_1003285A0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E858;
  qword_10032E858 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E860;
  qword_10032E860 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032E868;
  qword_10032E868 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E870;
  qword_10032E870 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032E878;
  qword_10032E878 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032E880;
  qword_10032E880 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_10032E888;
  qword_10032E888 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_10032E890;
  qword_10032E890 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E898;
  qword_10032E898 = (uint64_t)v19;
}

void sub_100053B34(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 bindNumber:v3 atPosition:1];
  [v4 bindString:a1[5] atPosition:2];
  [v4 bindNumber:a1[6] atPosition:3];
}

void sub_100053DB0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindNumber:v3 atPosition:1];
  [v4 bindString:*(void *)(a1 + 40) atPosition:2];
}

void sub_10005454C(id a1)
{
  os_log_t v1 = objc_opt_new(&OBJC_CLASS___StoreKitServiceListener);
  id v2 = (void *)qword_10032E8B0;
  qword_10032E8B0 = (uint64_t)v1;

  if (qword_10032E8B8 != -1) {
    dispatch_once(&qword_10032E8B8, &stru_1002E92F0);
  }
  uint64_t v3 = (os_log_s *)qword_100328670;
  if (os_log_type_enabled((os_log_t)qword_100328670, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering StoreKit IAP push consumer", v6, 2u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[PushService sharedInstance](&OBJC_CLASS___PushService, "sharedInstance"));
  [v4 registerConsumer:qword_10032E8B0 forActionType:37];

  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[PushService sharedInstance](&OBJC_CLASS___PushService, "sharedInstance"));
  [v5 registerConsumer:qword_10032E8B0 forActionType:36];
}

void *sub_10005463C(unsigned int a1)
{
  if (qword_10032E8B8 != -1) {
    dispatch_once(&qword_10032E8B8, &stru_1002E92F0);
  }
  return *(&off_100328668 + a1);
}

void sub_100055090(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032E8B8 != -1) {
      dispatch_once(&qword_10032E8B8, &stru_1002E92F0);
    }
    id v4 = (os_log_s *)qword_100328688;
    if (os_log_type_enabled((os_log_t)qword_100328688, OS_LOG_TYPE_ERROR)) {
      sub_100261FE0(a1, (uint64_t)v3, v4);
    }
  }

  else
  {
    if (qword_10032E8B8 != -1) {
      dispatch_once(&qword_10032E8B8, &stru_1002E92F0);
    }
    os_log_t v5 = (os_log_s *)qword_100328688;
    if (os_log_type_enabled((os_log_t)qword_100328688, OS_LOG_TYPE_DEBUG)) {
      sub_100261F6C(a1, v5);
    }
  }
}

LABEL_40:
        os_log_t v17 = (char *)v17 + 1;
      }

      while (v15 != v17);
      os_log_t v15 = [obj countByEnumeratingWithState:&v42 objects:v46 count:16];
    }

    while (v15);
  }

  id v32 = obj;

  id v4 = v35;
  os_log_t v7 = v33;
LABEL_44:
}

    os_log_t v1 = 0LL;
    *(_OWORD *)(v0 + 28_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(v0 + 304) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
LABEL_41:
    sub_10009BF3C(v0 + 272, v0 + 320, &qword_10032A2A0);
    if (!*(void *)(v0 + 328)) {
      break;
    }
    id v2 = *(void **)(v0 + 992);
    sub_10009C654((_OWORD *)(v0 + 336));
    __int128 v51 = sub_100085B44((void *)(v0 + 488), *(void *)(v0 + 512));
    id v52 = _bridgeAnythingToObjectiveC<A>(_:)(v51);
    sub_10009C630();
    __int128 v53 = String._bridgeToObjectiveC()();
    sub_10007BA44();
    sub_10009C6F8(v2, "setParameter:forKey:");

    swift_unknownObjectRelease(v52);
    if (v1) {
      goto LABEL_29;
    }
  }

  sub_10009C5EC();
LABEL_55:
  id v56 = *(void *)(v0 + 976);
  id v57 = *(void *)(v0 + 912);
  __int16 v58 = *(void *)(v0 + 904);
  v87 = *(void *)(v0 + 896);
  v89 = *(void *)(v0 + 888);
  v90 = *(void *)(v0 + 864);
  v92 = *(void *)(v0 + 848);
  v93 = *(void *)(v0 + 840);
  swift_task_dealloc(*(void *)(v0 + 984));
  swift_task_dealloc(v56);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 992));
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void sub_10005578C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (qword_10032E8B8 != -1) {
      dispatch_once(&qword_10032E8B8, &stru_1002E92F0);
    }
    if (os_log_type_enabled((os_log_t)qword_100328690, OS_LOG_TYPE_ERROR)) {
      sub_10026205C();
    }
  }
}

void sub_100055814(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (qword_10032E8B8 != -1) {
      dispatch_once(&qword_10032E8B8, &stru_1002E92F0);
    }
    if (os_log_type_enabled((os_log_t)qword_100328690, OS_LOG_TYPE_ERROR)) {
      sub_1002620C0();
    }
  }
}

void sub_100055AF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328668;
  off_100328668 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_100328670;
  qword_100328670 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_100328678;
  qword_100328678 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_100328680;
  qword_100328680 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_100328688;
  qword_100328688 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_100328690;
  qword_100328690 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_100328698;
  qword_100328698 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_1003286A0;
  qword_1003286A0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  id v18 = (void *)qword_1003286A8;
  qword_1003286A8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_1003286B0;
  qword_1003286B0 = (uint64_t)v19;
}

  ;
}

id sub_100055C4C(id a1)
{
  return a1;
}

void sub_100055C64(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_1000579FC(uint64_t a1)
{
  id v2 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([(id)qword_10032E8C0 objectForKey:*(void *)(a1 + 32)]);
  if (!v2) {
    id v2 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  }
  os_log_t v3 = v2;
  -[NSMutableSet addObject:](v2, "addObject:", *(void *)(a1 + 40));
  [(id)qword_10032E8C0 setObject:v3 forKey:*(void *)(a1 + 32)];
}

void sub_100057B3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100057B54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100057B64(uint64_t a1)
{
}

void sub_100057B6C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_10032E8C0 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  id v4 = v2;
  if (!v2) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v2);
  os_log_t v3 = v4;
  if (!v4)
  {

    os_log_t v3 = 0LL;
  }
}

void sub_100057DC0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([(id)qword_10032E8C0 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 8)]);
  [v2 removeObject:*(void *)(a1 + 32)];
}

void sub_100057E0C(uint64_t a1, void *a2)
{
  os_log_t v3 = a2;
  if (v3[5] == 1LL && v3[4])
  {
    id v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "minusSet:");
    os_log_t v3 = v4;
  }
}

void sub_100057F08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100057F20(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a2 + 32) containsObject:*(void *)(a1 + 32)];
  if ((_DWORD)result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
  return result;
}

void sub_100058120( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_10005814C(uint64_t a1, void *a2)
{
  os_log_t v3 = a2;
}

void sub_100058320(_Unwind_Exception *a1)
{
}

void sub_10005833C(uint64_t a1)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([(id)qword_10032E8C0 objectEnumerator]);
  id v2 = [obj countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v20;
    do
    {
      os_log_t v5 = 0LL;
      do
      {
        if (*(void *)v20 != v4) {
          objc_enumerationMutation(obj);
        }
        int v6 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)v5);
        __int128 v15 = 0u;
        __int128 v16 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        id v7 = v6;
        id v8 = [v7 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v16;
          do
          {
            os_log_t v11 = 0LL;
            do
            {
              if (*(void *)v16 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)v11);
              uint64_t v13 = objc_opt_class(&OBJC_CLASS___OctaneClientConnection);
              if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0) {
                [*(id *)(a1 + 32) addObject:v12];
              }
              os_log_t v11 = (char *)v11 + 1;
            }

            while (v9 != v11);
            id v9 = [v7 countByEnumeratingWithState:&v15 objects:v23 count:16];
          }

          while (v9);
        }

        os_log_t v5 = (char *)v5 + 1;
      }

      while (v5 != v3);
      id v3 = [obj countByEnumeratingWithState:&v19 objects:v24 count:16];
    }

    while (v3);
  }
}

void sub_1000585C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000585DC(uint64_t a1)
{
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v2 = (id)qword_10032E8C0;
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = (void *)objc_claimAutoreleasedReturnValue( [(id)qword_10032E8C0 objectForKeyedSubscript:*(void *)(*((void *)&v18 + 1) + 8 * (void)i)]);
        __int128 v14 = 0u;
        __int128 v15 = 0u;
        __int128 v16 = 0u;
        __int128 v17 = 0u;
        id v8 = v7;
        id v9 = [v8 countByEnumeratingWithState:&v14 objects:v22 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v15;
          while (2)
          {
            for (j = 0LL; j != v10; j = (char *)j + 1)
            {
              if (*(void *)v15 != v11) {
                objc_enumerationMutation(v8);
              }
              uint64_t v13 = *(id **)(*((void *)&v14 + 1) + 8LL * (void)j);
              if ([v13[3] isEqualToString:*(void *)(a1 + 32)])
              {
                objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v13);
                goto LABEL_16;
              }
            }

            id v10 = [v8 countByEnumeratingWithState:&v14 objects:v22 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }

void sub_1000589BC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_10032E8C0 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 8)]);
  if (v2)
  {
    id v3 = v2;
    [v2 removeObject:*(void *)(a1 + 32)];
    id v2 = v3;
  }
}

void sub_100058A60(_Unwind_Exception *a1)
{
}

void sub_100058AC8(_Unwind_Exception *a1)
{
}

void sub_100058B64(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328718;
  off_100328718 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E8D0;
  qword_10032E8D0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E8D8;
  qword_10032E8D8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E8E0;
  qword_10032E8E0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E8E8;
  qword_10032E8E8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E8F0;
  qword_10032E8F0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032E8F8;
  qword_10032E8F8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int128 v16 = (void *)qword_10032E900;
  qword_10032E900 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032E908;
  qword_10032E908 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E910;
  qword_10032E910 = (uint64_t)v19;
}

void sub_100058DBC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328720;
  off_100328720 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E920;
  qword_10032E920 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E928;
  qword_10032E928 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E930;
  qword_10032E930 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E938;
  qword_10032E938 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E940;
  qword_10032E940 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032E948;
  qword_10032E948 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int128 v16 = (void *)qword_10032E950;
  qword_10032E950 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032E958;
  qword_10032E958 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E960;
  qword_10032E960 = (uint64_t)v19;
}

void sub_100059098(id a1, SQLiteDatabaseStoreMigrator *a2)
{
}

void sub_1000590A8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
}

void sub_1000590B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328728;
  off_100328728 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E970;
  qword_10032E970 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E978;
  qword_10032E978 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E980;
  qword_10032E980 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E988;
  qword_10032E988 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E990;
  qword_10032E990 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032E998;
  qword_10032E998 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int128 v16 = (void *)qword_10032E9A0;
  qword_10032E9A0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032E9A8;
  qword_10032E9A8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032E9B0;
  qword_10032E9B0 = (uint64_t)v19;
}

void sub_1000598E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328730;
  off_100328730 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032E9C0;
  qword_10032E9C0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032E9C8;
  qword_10032E9C8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032E9D0;
  qword_10032E9D0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032E9D8;
  qword_10032E9D8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032E9E0;
  qword_10032E9E0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032E9E8;
  qword_10032E9E8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int128 v16 = (void *)qword_10032E9F0;
  qword_10032E9F0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032E9F8;
  qword_10032E9F8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032EA00;
  qword_10032EA00 = (uint64_t)v19;
}

void sub_10005A3E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  os_log_t v5 = *(void **)(a1 + 32);
  if (!v5 || [v5 containsObject:v8])
  {
    id v6 = sub_10005A458(*(void **)(a1 + 48), a3);
    os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v8];
  }
}

id sub_10005A458(void *a1, uint64_t a2)
{
  id v3 = a1;
  switch([v3 _declaredTypeForColumnIndex:a2])
  {
    case 0u:
      id v4 = 0LL;
      switch([v3 _columnTypeForColumnIndex:a2])
      {
        case 1u:
          uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 int64ForColumnIndex:a2]));
          goto LABEL_10;
        case 2u:
          [v3 doubleForColumnIndex:a2];
          uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
          goto LABEL_10;
        case 3u:
          goto LABEL_4;
        case 5u:
          goto LABEL_11;
        default:
          uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 dataForColumnIndex:a2]);
          goto LABEL_10;
      }

      break;
    case 1u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 dateForColumnIndex:a2]);
      goto LABEL_10;
    case 2u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 JSONObjectForColumnIndex:a2]);
      goto LABEL_10;
    case 3u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 UUIDForColumnIndex:a2]);
      goto LABEL_10;
    case 4u:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 URLForColumnIndex:a2]);
      goto LABEL_10;
    case 5u:
LABEL_4:
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 stringForColumnIndex:a2]);
LABEL_10:
      id v4 = (void *)v5;
      break;
    default:
      id v4 = 0LL;
      break;
  }

LABEL_11:
  return v4;
}
}

  return v7;
}

  sub_100085E98();
}

  v62 = v4;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  id v43 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
  sub_1000A9710(v43, v63, type metadata accessor for SKLogger);
  id v44 = (char *)v1 + *(int *)(type metadata accessor for LoadProductsTask(0LL) + 20);
  uint64_t v45 = type metadata accessor for ProductRequest(0LL);
  id v46 = (uint64_t *)&v44[*(int *)(v45 + 32)];
  __int128 v48 = *v46;
  id v47 = (void *)v46[1];
  __int128 v49 = static os_log_type_t.error.getter(v45);
  __int128 v50 = swift_bridgeObjectRetain_n(v47, 2LL);
  __int128 v51 = (os_log_s *)Logger.logObject.getter(v50);
  id v52 = v49;
  if (os_log_type_enabled(v51, v49))
  {
    __int128 v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v54 = swift_slowAlloc(64LL, -1LL);
    v61 = v54;
    *(_DWORD *)__int128 v53 = 136446466;
    int v60 = v53 + 4;
    v65 = 91LL;
    v66 = 0xE100000000000000LL;
    v67 = v54;
    swift_bridgeObjectRetain(v47);
    v55._countAndFlagsBits = v48;
    v55._object = v47;
    String.append(_:)(v55);
    v56._countAndFlagsBits = 8285LL;
    v56._object = (void *)0xE200000000000000LL;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v47);
    id v57 = v66;
    v65 = sub_10007A488(v65, v66, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v60);
    swift_bridgeObjectRelease_n(v47, 2LL);
    swift_bridgeObjectRelease(v57);
    *(_WORD *)(v53 + 12) = 2082;
    v65 = sub_10007A488(0xD000000000000024LL, 0x800000010029F030LL, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v53 + 14);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "%{public}s%{public}s", (uint8_t *)v53, 0x16u);
    __int16 v58 = v61;
    swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v47, 2LL);
  }

  id v4 = v62;
  sub_100085BC4(v63, type metadata accessor for SKLogger);
LABEL_17:
  (*(void (**)(char *, uint64_t))(v64 + 8))(v6, v4);
  return v31;
}

      id v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v16 + v8, v9 - v8);
  }

  v170 = v43;
  if (qword_100328B20 != -1) {
    id v44 = swift_once(&qword_100328B20, sub_1000EE934);
  }
  v169 = sub_1000E99A8(v44, (uint64_t)qword_10033E178);
  sub_100085BA4(v169, (uint64_t)v36, type metadata accessor for SKLogger);
  v183 = 0LL;
  v184 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease(v184);
  v183 = 0xD00000000000001ELL;
  v184 = 0x80000001002A1EB0LL;
  id v56 = [v40 description];
  id v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  id v59 = v58;

  v60._countAndFlagsBits = v57;
  v60._object = v59;
  String.append(_:)(v60);
  sub_100085FB4();
  sub_100086128();
  v62 = *(void *)&v181[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
  v61 = *(void **)&v181[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
  sub_100085FEC();
  v166 = v62;
  v63._countAndFlagsBits = v62;
  v63._object = v61;
  String.append(_:)(v63);
  v167 = v61;
  sub_100085EF0();
  v64 = v184;
  v168 = v183;
  v65 = (uint64_t)v182;
  v66 = swift_bridgeObjectRetain(v182);
  LOBYTE(v61) = static os_log_type_t.default.getter(v66);
  sub_100085EE8(v65);
  v67 = sub_100085EE8(v64);
  v68 = (os_log_s *)Logger.logObject.getter(v67);
  v69 = v61;
  v70 = os_log_type_enabled(v68, (os_log_type_t)v61);
  v171 = v1;
  v172 = v40;
  if (v70)
  {
    v71 = sub_10007B9FC(22LL);
    v72 = sub_10007B9FC(64LL);
    *(_DWORD *)v71 = 136446466;
    v165 = v33;
    v73 = (uint64_t)v182;
    v164 = v71 + 4;
    sub_1000EF594(v72);
    swift_bridgeObjectRetain(v73);
    sub_1000EF42C();
    sub_100085F14();
    sub_100086144();
    v75 = sub_10008620C(v183, v74, v185);
    v76 = sub_1000EF488(v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v77, v164);
    sub_10007D974(v73);
    sub_10007B980();
    *(_WORD *)(v71 + 12) = 2082;
    sub_10008600C();
    v78 = sub_10007A488(v168, v64, v185);
    v79 = sub_1000EF528(v78);
    __int16 v40 = v172;
    sub_100086194(v79, v80);
    sub_100085E64(v64);
    sub_100086038((void *)&_mh_execute_header, v68, v69, "%{public}s%{public}s", (uint8_t *)v71);
    sub_100086030(v72, v81, (uint64_t)&type metadata for Any + 8);
    v82 = v72;
    os_log_t v1 = v171;
    sub_10007B974(v82);
    sub_10007B974(v71);
    sub_100086004();
    v83 = v73;
    __int16 v33 = v165;
    swift_bridgeObjectRelease(v83);
  }

  else
  {

    sub_100085E64(v64);
    sub_100085E64((uint64_t)v182);
  }

  sub_100085BC4((uint64_t)v36, type metadata accessor for SKLogger);
  v84 = v181;
  sub_1000DE6D4();
  v85 = sub_10007B1FC(&qword_10032A028);
  v86 = sub_10007D824((uint64_t)v10, 2LL, v85);
  if (!v86)
  {
    v101 = sub_100086318();
    sub_1000EF404(v101);
    goto LABEL_23;
  }

  if (v86 != 1)
  {
LABEL_23:
    v95 = (uint64_t)v173;
    v102 = v174;
    *v173 = v84;
    *(_OWORD *)(v95 + _Block_object_dispose(va, 8) = xmmword_10027C5B0;
    *(_BYTE *)(v95 + 24) = 1;
    v97 = (uint64_t)v182;
    *(void *)(v95 + 32) = v180;
    *(void *)(v95 + 40) = v97;
    sub_100085BA4(v169, v95 + *(int *)(v102 + 32), type metadata accessor for SKLogger);
    v103 = *(int *)(v102 + 36);
    objc_opt_self(&OBJC_CLASS___StoreKitMessagesManager);
    sub_10008600C();
    *(void *)(v95 + v103) = sub_100093DE4((uint64_t)v84, "sharedManager");
    goto LABEL_24;
  }

  v87 = [v1 messageInfoForClient:v84 messageType:v40];
  if (!v87)
  {
    sub_100085BA4(v169, (uint64_t)v33, type metadata accessor for SKLogger);
    v183 = 0LL;
    v184 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(50LL);
    swift_bridgeObjectRelease(v184);
    v183 = 0xD000000000000029LL;
    v184 = 0x80000001002A1ED0LL;
    v144 = [v40 description];
    v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
    v147 = v146;

    v148._countAndFlagsBits = v145;
    v148._object = v147;
    String.append(_:)(v148);
    sub_100086004();
    sub_100086128();
    v149 = v167;
    sub_100085FEC();
    v150._countAndFlagsBits = v166;
    v150._object = v149;
    String.append(_:)(v150);
    v151 = sub_100085EF0();
    v153 = v183;
    v152 = v184;
    LOBYTE(v149) = static os_log_type_t.default.getter(v151);
    sub_100085EE8((uint64_t)v182);
    v154 = sub_100085EE8(v152);
    v155 = (os_log_s *)Logger.logObject.getter(v154);
    v156 = v149;
    if (os_log_type_enabled(v155, (os_log_type_t)v149))
    {
      v157 = sub_10007B9FC(22LL);
      v158 = sub_10007B9FC(64LL);
      *(_DWORD *)v157 = 136446466;
      sub_1000EF594(v158);
      v159 = v182;
      swift_bridgeObjectRetain(v182);
      v165 = v33;
      v160._countAndFlagsBits = v180;
      v160._object = v159;
      String.append(_:)(v160);
      sub_100085F14();
      sub_1000AABA8();
      v183 = sub_10008620C(v183, v161, v185);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v157 + 4);
      sub_10007D974((uint64_t)v159);
      sub_10007B980();
      *(_WORD *)(v157 + 12) = 2082;
      sub_10007BA3C();
      v183 = sub_10007A488(v153, v152, v185);
      __int16 v33 = v165;
      sub_100086194((uint64_t)&v183, (uint64_t)&v184);
      sub_100085E64(v152);
      sub_100086038((void *)&_mh_execute_header, v155, v156, "%{public}s%{public}s", (uint8_t *)v157);
      sub_100086030(v158, v162, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v158);
      sub_10007B974(v157);

      sub_10007BA44();
      sub_1000AABA8();
    }

    else
    {

      sub_100085E64(v152);
      sub_100085E64((uint64_t)v182);
    }

    v127 = type metadata accessor for SKLogger;
    v126 = (uint64_t)v33;
    goto LABEL_25;
  }

  v88 = v87;
  v89 = v84;
  v90 = sub_100093DE4((uint64_t)v89, "status");
  v91 = [v90 integerValue];

  v93 = sub_100093DE4(v92, "type");
  v95 = (uint64_t)v173;
  v94 = v174;
  *v173 = v89;
  *(void *)(v95 + _Block_object_dispose(va, 8) = v91;
  *(void *)(v95 + 16) = v93;
  *(_BYTE *)(v95 + 24) = 0;
  v96 = (uint64_t)v182;
  *(void *)(v95 + 32) = v180;
  *(void *)(v95 + 40) = v96;
  sub_100085BA4(v169, v95 + *(int *)(v94 + 32), type metadata accessor for SKLogger);
  v97 = *(int *)(v94 + 36);
  v98 = (void *)objc_opt_self(&OBJC_CLASS___StoreKitMessagesManager);
  sub_10008618C();
  v99 = [v98 sharedManager];

  *(void *)(v95 + v97) = v99;
LABEL_24:
  v104 = sub_1000AAD2C();
  v105 = v178;
  sub_1000875FC(v178, v106, v107, v104);
  v108 = v177;
  sub_100085BA4(v95, v177, type metadata accessor for MessageServerRequest);
  sub_1000EF53C();
  v109 = (v176 + v97 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  v110 = (v109 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  v111 = (v110 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  v112 = (v111 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  v114 = swift_allocObject(&unk_1002EDF60, v112 + 16, v113);
  *(void *)(v114 + 16) = 0LL;
  *(void *)(v114 + 24) = 0LL;
  sub_100085264(v108, v114 + v97, type metadata accessor for MessageServerRequest);
  v115 = v171;
  *(void *)(v114 + v109) = v171;
  v116 = v180;
  v117 = v181;
  *(void *)(v114 + v110) = v181;
  v118 = v179;
  *(void *)(v114 + v111) = v179;
  v119 = (uint64_t *)(v114 + v112);
  v120 = (uint64_t)v182;
  *v119 = v116;
  v119[1] = v120;
  v121 = v118;
  v122 = v117;
  v123 = v115;
  sub_1000F9480(v105, (uint64_t)&unk_10032B718, v114);
  v125 = v124;

  swift_release(v125);
  v126 = v95;
  v127 = type metadata accessor for MessageServerRequest;
LABEL_25:
  sub_100085BC4(v126, v127);

LABEL_35:
  sub_100085E98();
}

void sub_10005A648(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328738;
  off_100328738 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EA10;
  qword_10032EA10 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032EA18;
  qword_10032EA18 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  id v8 = (void *)qword_10032EA20;
  qword_10032EA20 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032EA28;
  qword_10032EA28 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032EA30;
  qword_10032EA30 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  __int128 v14 = (void *)qword_10032EA38;
  qword_10032EA38 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int128 v16 = (void *)qword_10032EA40;
  qword_10032EA40 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EA48;
  qword_10032EA48 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032EA50;
  qword_10032EA50 = (uint64_t)v19;
}

void sub_10005A944(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v2 addObject:v3];
}

void sub_10005AB70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005AB88(uint64_t result)
{
  return result;
}

void sub_10005ADE8(uint64_t a1, void *a2)
{
  int v5 = 1;
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 predicate]);
  [v4 applyBinding:v3 atIndex:&v5];
}

void sub_10005AED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005AEEC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) entityClass];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10005AF6C;
  v4[3] = &unk_1002E9538;
  id v6 = v2;
  __int128 v5 = *(_OWORD *)(a1 + 32);
  [(id)v5 enumeratePersistentIDsUsingBlock:v4];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_10005AF6C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v6 deleteFromDatabase];
  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) ^ 1;
}

void sub_10005B164(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(*(Class *)(a1 + 40));
  [v4 setDatabaseID:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005B1CC(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v5 = *(objc_class **)(a1 + 40);
  id v6 = a3;
  id v7 = objc_alloc_init(v5);
  [v7 setDatabaseID:a2];
  [v7 setValuesWithDictionary:v6];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10005B2D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005B3AC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v14 = 1;
  [a1[4] applyBinding:v5 atIndex:&v14];
  id v7 = [a1[5] count];
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  void v13[3] = 0LL;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10005B4B4;
  v8[3] = &unk_1002E95D8;
  id v12 = v7;
  id v9 = a1[5];
  id v10 = a1[6];
  os_log_t v11 = v13;
  [v5 enumerateRowsUsingBlock:v8];

  _Block_object_dispose(v13, 8);
}

void sub_10005B49C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_10005B4B4(void *a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  a1[7]));
  if (v13)
  {
    id v8 = (void *)a1[4];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10005B5E8;
    void v14[3] = &unk_1002E6B98;
    id v9 = v7;
    id v15 = v9;
    id v10 = v13;
    id v16 = v10;
    [v8 enumerateObjectsUsingBlock:v14];
    uint64_t v11 = a1[5];
    id v12 = [v10 int64ForColumnIndex:0];
    ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v12, v9);
  }

  objc_autoreleasePoolPop(v6);
}

void sub_10005B5E8(uint64_t a1, void *a2, int a3)
{
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = (a3 + 1);
  id v6 = a2;
  id v7 = sub_10005A458(v4, v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v6];
}

void sub_10005BF3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10005BF54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005BF64(uint64_t a1)
{
}

void sub_10005BF6C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

void sub_10005C0E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005C0FC(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v3];
}

void sub_10005C524( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005C54C(uint64_t a1, void *a2)
{
  int v7 = 1;
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 predicate]);
  [v5 applyBinding:v4 atIndex:&v7];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_10005C5F0;
  v6[3] = &unk_1002E9678;
  void v6[4] = *(void *)(a1 + 40);
  [v4 enumerateRowsUsingBlock:v6];
}

void sub_10005C5F0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = sub_10005A458(a2, 0LL);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *a4 = 1;
}

void sub_10005C72C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005C744(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

uint64_t sub_10005CCE0(uint64_t a1)
{
  uint64_t v2 = sqlite3_step(*(sqlite3_stmt **)(a1 + 48));
  return v2;
}

void sub_10005CDC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_10005CDD8(void *result, void *a2, uint64_t a3, _BYTE *a4)
{
  if (a2)
  {
    uint64_t v5 = result;
    id result = [a2 int64ForColumnIndex:0];
    *(void *)(*(void *)(v5[4] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
  }

  *a4 = 1;
  return result;
}

void sub_10005CEC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005CEE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005CEF0(uint64_t a1)
{
}

void sub_10005CEF8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  if (a2)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([a2 numberForColumnIndex:0]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  *a4 = 1;
}

void sub_10005CFD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005CFE8(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (a2) {
    *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
  *a4 = 1;
  return result;
}

void sub_10005D244(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10032EA60;
  qword_10032EA60 = (uint64_t)v1;
}

void sub_10005D470(_Unwind_Exception *a1)
{
}

void sub_10005D7AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10005D7D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005D7E4(uint64_t a1)
{
}

id sub_10005D7EC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v3 + 40);
  id v4 = [a2 addMessageInfo:v2 withError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

LABEL_46:
}

      sub_100086084();
      return;
    }
  }

  v99 = v213;
  sub_1000E9554(v213, v91);
  v100 = objc_allocWithZone(&OBJC_CLASS___LSApplicationExtensionRecord);
  v101 = sub_1000E82A8(v99);
  if (v101
    && (v123 = objc_msgSend(v101, "containingBundleRecord", v198),
        sub_1000E993C(),
        v100))
  {
    v124 = objc_opt_self(&OBJC_CLASS___LSApplicationRecord);
    v125 = swift_dynamicCastObjCClass(v100, v124);
    v103 = v232;
    if (v125)
    {
      v122 = (void *)v125;
      goto LABEL_31;
    }
  }

  else
  {
    v103 = v232;
  }

  v104 = v215;
  if ((v90 & 1) != 0
    || (URL._bridgeToObjectiveC()(v102),
        v106 = v105,
        v107 = CFBundleCopyInfoDictionaryForURL(v105),
        v106,
        !v107))
  {
    URL._bridgeToObjectiveC()(v102);
    v109 = v108;
    v107 = CFBundleCopyInfoDictionaryForURL(v108);

    if (!v107)
    {
      sub_1000E9738();
      sub_1000E9494(v224, type metadata accessor for SKLogger, (uint64_t)&v229);
      v133 = v203;
      sub_1000E94DC(v203);
      v134 = v201;
      v135 = sub_1000E9554(v201, (uint64_t)v66);
      v136 = (void *)Logger.logObject.getter(v135);
      v137 = static os_log_type_t.fault.getter(v136);
      if (sub_1000E979C(v137))
      {
        v138 = (_DWORD *)sub_10007B9FC(22LL);
        v227 = sub_10007B9FC(64LL);
        v233 = v227;
        *v138 = 136446466;
        v139 = sub_1000E95A0();
        sub_1000E990C(v139);
        v141 = v140 + 8;
        sub_1000E98A0((uint64_t)&v236, v140 + 8);
        sub_1000E9804();
        sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        v143 = dispatch thunk of CustomStringConvertible.description.getter(v62, v142);
        v236 = sub_1000E967C(v143, v144);
        v145 = v141;
        v66 = v229;
        sub_1000E98A0((uint64_t)&v236, v145);
        sub_10007B980();
        sub_1000E9418(v134);
        sub_1000E9640((void *)&_mh_execute_header, v146, v147, "[%{public}s] Cannot read info.plist for %{public}s");
        v148 = v227;
        sub_100086030(v227, v149, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v148);
        v150 = (uint64_t)v138;
        v103 = v232;
        sub_10007B974(v150);

        v151 = v203;
      }

      else
      {
        sub_1000E9418(v134);

        v151 = v133;
      }

      sub_1000E93F0(v151);
      v184 = v226;
      v185 = sub_1000E9070();
      v186 = swift_allocError(&unk_1002EDD58, v185, 0LL, 0LL);
      *v187 = 1;
      swift_willThrow(v186, v187, v188, v189, v190, v191, v192);
      sub_100085298(v184, &qword_10032A3D8);
      sub_1000E9418((uint64_t)v66);
      sub_1000E9418(v103);
      goto LABEL_46;
    }
  }

  v222 = v107;
  sub_1000E9494(v224, type metadata accessor for SKLogger, (uint64_t)&v237);
  sub_1000E94DC(v104);
  v110 = v210;
  v111 = sub_1000E9554(v210, (uint64_t)v66);
  v112 = (os_log_s *)Logger.logObject.getter(v111);
  v113 = static os_log_type_t.error.getter(v112);
  if (os_log_type_enabled(v112, v113))
  {
    v114 = sub_10007B9FC(22LL);
    v221 = sub_10007B9FC(64LL);
    v233 = v221;
    *(_DWORD *)v114 = 136446466;
    v115 = sub_1000E95A0();
    sub_1000E990C(v115);
    sub_1000E93D0();
    *(_WORD *)(v114 + 12) = 2082;
    v62 = v114 + 14;
    sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v117 = dispatch thunk of CustomStringConvertible.description.getter(v228, v116);
    v119 = sub_1000E967C(v117, v118);
    sub_1000E9588(v119);
    sub_10007B980();
    sub_1000E9418(v110);
    _os_log_impl( (void *)&_mh_execute_header,  v112,  v113,  "[%{public}s] Cannot find application record for %{public}s. Initializing with bundle.",  (uint8_t *)v114,  0x16u);
    v120 = v221;
    sub_100086030(v221, v121, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v120);
    sub_10007B974(v114);

    sub_1000E93F0(v215);
  }

  else
  {
    sub_1000E9418(v110);

    sub_1000E93F0(v104);
  }

  v130 = v211;
  sub_1000E9554((uint64_t)v211, v232);
  v233 = 0LL;
  v129 = v222;
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  v131 = v233;
  if (v233)
  {

    v132 = v209;
    sub_1000E9220(v226, v209, &qword_10032A3D8);
    sub_1000E9894();
    v152 = sub_1000E4500(v214, v130, v131, v132);

    v222 = 0LL;
    goto LABEL_37;
  }

          sub_1000E9184(0LL, &qword_10032B548, &OBJC_CLASS___ASFReceipt_ptr);
          v113 = (uint64_t)v147;
          v78(v147, v71, v159);
          v115 = sub_1000E54B4(v113, v114);
          if (v115)
          {
            v116 = v115;
            v117 = [v115 itemID];
            v118 = [v117 unsignedLongLongValue];

            *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_storeItemID) = v118;
            v119 = [v116 installerVersionID];
            v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
            v122 = v121;

            v123 = sub_1000DEB28(v120, v122);
            LOBYTE(v120) = v124;

            if ((v120 & 1) != 0) {
              v125 = 0LL;
            }
            else {
              v125 = v123;
            }
          }

          else
          {
            v125 = 0LL;
            *(void *)((char *)v44 + OBJC_IVAR____TtC9storekitd6Client_storeItemID) = 0LL;
          }

          goto LABEL_51;
        }

void sub_10005DEF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

id sub_10005DF10(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v3 + 40);
  id v4 = [a2 addMessageInfo:v2 withError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

void sub_10005DF60(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKey:v4]);
  [*(id *)(a1 + 40) revokeProductIdentifiers:v5 forBundleID:v4 accountID:*(void *)(a1 + 48)];
}

void sub_10005E208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005E22C(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v4 requestBundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 messageForUserID:v3 inApp:v9 messageType:a1[6]]);

  uint64_t v7 = *(void *)(a1[7] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10005E610( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10005E640(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v4 requestBundleID]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 revocationsForUserID:v3 inApp:v9]);

  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_10005E6BC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 requestBundleID]);
  id v6 = [v4 removeRevocationInfoForUser:v2 inApp:v5];

  return v6;
}

void sub_10005E718(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 productID]);
  [v2 addObject:v3];
}

uint64_t sub_10005E890(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v13 = 0LL;
  int v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  char v16 = 1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10005E988;
  v8[3] = &unk_1002E9790;
  id v4 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v5 = v3;
  id v11 = v5;
  id v12 = &v13;
  [v4 enumerateObjectsUsingBlock:v8];
  uint64_t v6 = *((unsigned __int8 *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return v6;
}

void sub_10005E970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005E988(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = -[StoreKitRevocationInfo initWithUserID:bundleID:productID:]( objc_alloc(&OBJC_CLASS___StoreKitRevocationInfo),  "initWithUserID:bundleID:productID:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v3);
  unsigned __int8 v5 = [*(id *)(a1 + 48) addRevocationInfo:v4];
  if ((v5 & 1) == 0)
  {
    if (qword_10032EAB8 != -1) {
      dispatch_once(&qword_10032EAB8, &stru_1002E9800);
    }
    uint64_t v6 = (os_log_s *)qword_10032EA78;
    if (os_log_type_enabled((os_log_t)qword_10032EA78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138478339;
      uint64_t v12 = v9;
      __int16 v13 = 2114;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      id v16 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Error inserting revocation info for account ID: %{private}@, bundle ID: %{public}@, product ID: %{public}@",  (uint8_t *)&v11,  0x20u);
    }
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  if (*(_BYTE *)(v7 + 24)) {
    unsigned __int8 v8 = v5;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  *(_BYTE *)(v7 + 24) = v8;
}

void sub_10005EDB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_10005EDD4(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v5 + 40);
  id v6 = [a2 removeMessageInfoForUser:v2 inApp:v3 type:v4 withError:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  return v6;
}

void sub_10005EE28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003287A0;
  off_1003287A0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032EA70;
  qword_10032EA70 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032EA78;
  qword_10032EA78 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned __int8 v8 = (void *)qword_10032EA80;
  qword_10032EA80 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EA88;
  qword_10032EA88 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032EA90;
  qword_10032EA90 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EA98;
  qword_10032EA98 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_10032EAA0;
  qword_10032EAA0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EAA8;
  qword_10032EAA8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032EAB0;
  qword_10032EAB0 = (uint64_t)v19;
}

void sub_10005EFC4(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___Environment);
  uint64_t v2 = (void *)qword_10032EAC0;
  qword_10032EAC0 = (uint64_t)v1;
}

uint64_t sub_10005F104(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005F114(uint64_t a1)
{
}

void sub_10005F11C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (!v2)
  {
    os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sk_userDatabaseURL"));
    os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 path]);

    if (v5)
    {
      id v6 = -[SQLiteConnectionOptions initWithDatabasePath:]( objc_alloc(&OBJC_CLASS___SQLiteConnectionOptions),  "initWithDatabasePath:",  v5);
      os_log_t v7 = -[SQLiteDatabase initWithConnectionOptions:]( objc_alloc(&OBJC_CLASS___SQLiteDatabase),  "initWithConnectionOptions:",  v6);
      uint64_t v8 = *(void *)(a1 + 32);
      os_log_t v9 = *(void **)(v8 + 16);
      *(void *)(v8 + 16) = v7;
    }

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v2);
}

uint64_t sub_10005FA4C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) executeStatement:@"PRAGMA user_version = 1;" error:0];
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 8),  "executeStatement:error:",  @"CREATE TABLE IF NOT EXISTS schema_version (schema_name TEXT, schema_version INTEGER DEFAULT 0, PRIMARY KEY(schema_name));",
    0LL);
  return 1LL;
}

void sub_10005FB34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10005FB4C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  id v5 = [v4 firstInt64Value];

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v5;
}

void sub_10005FCA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005FCBC(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10005FD34;
  v5[3] = &unk_1002E7F70;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  id v3 = (id)v4;
  *(_OWORD *)id v6 = v4;
  [a2 enumerateRowsUsingBlock:v5];
}

void sub_10005FD34(uint64_t a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 stringForColumnName:@"name"]);
  unsigned __int8 v6 = [v7 isEqualToString:*(void *)(a1 + 32)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v6;
  *a4 = v6;
}

id sub_10005FE24(void *a1)
{
  uint64_t v2 = -[SQLiteDatabaseStoreMigrator initWithConnection:]( objc_alloc(&OBJC_CLASS___SQLiteDatabaseStoreMigrator),  "initWithConnection:",  *(void *)(a1[4] + 8LL));
  (*(void (**)(void))(a1[5] + 16LL))();
  if (-[SQLiteDatabaseStoreMigrator success](v2, "success"))
  {
    uint64_t v3 = a1[4];
    __int128 v4 = *(void **)(v3 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10005FEE4;
    v8[3] = &unk_1002E6CB0;
    uint64_t v5 = a1[6];
    void v8[4] = v3;
    void v8[5] = v5;
    id v6 = objc_msgSend( v4,  "executeStatement:error:bindings:",  @"INSERT OR REPLACE INTO schema_version (schema_name, schema_version) VALUES (?, ?)",  0,  v8);
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

void sub_10005FEE4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  [v4 bindInt64:*(void *)(a1 + 40) atPosition:2];
}

void sub_10005FFF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10006000C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  LOBYTE(v3) = [v4 hasRows];

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
}

LABEL_8:
  return v7;
}

      valid = 0;
      goto LABEL_9;
    }
  }

  -[DigestVerifier _hashData:](self, "_hashData:", v6);
LABEL_5:
  valid = self->_valid;
LABEL_9:

  return valid;
}

    uint64_t v14 = NSDebugDescriptionErrorKey;
    os_log_t v15 = @"SecItemCopyMatching succeeded with empty results";
    os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
    os_log_t v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  901LL,  v11));

    goto LABEL_10;
  }

  uint64_t v8 = CFGetTypeID(cf);
  if (v8 != CFDataGetTypeID()) {
    goto LABEL_8;
  }
  os_log_t v9 = 0LL;
  uint64_t v10 = (void *)cf;
  if (!a4) {
    goto LABEL_13;
  }
LABEL_11:
  if (!v10) {
    *a4 = v9;
  }
LABEL_13:
  CFRelease(v6);

  return v10;
}

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v8 postNotificationName:@"AccountStorePrimaryAccountDidChange" object:*(void *)(a1 + 40) userInfo:v2];
}

    sqlite3_result_text(v6, v7, -1, v5);
    return;
  }

  _StringGuts._slowWithCString<A>(_:)(sub_10007F17C, v8, a1, a2);
}

  sub_1000F5678(v2, v3);
  return v5;
}

id sub_100060468(uint64_t a1, uint64_t a2, char a3, _BYTE *a4)
{
  id result = [*(id *)(a1 + 32) _hashData:a2];
  if ((a3 & 1) == 0)
  {
    id result = [*(id *)(a1 + 32) _validateAndResetDigestError:*(void *)(a1 + 40)];
    *a4 = result ^ 1;
  }

  return result;
}

void sub_1000608C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328808;
  off_100328808 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EAD0;
  qword_10032EAD0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032EAD8;
  qword_10032EAD8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032EAE0;
  qword_10032EAE0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EAE8;
  qword_10032EAE8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032EAF0;
  qword_10032EAF0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EAF8;
  qword_10032EAF8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  id v16 = (void *)qword_10032EB00;
  qword_10032EB00 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EB08;
  qword_10032EB08 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int128 v20 = (void *)qword_10032EB10;
  qword_10032EB10 = (uint64_t)v19;
}

void sub_100060AE0(id a1, BOOL a2, NSError *a3)
{
  id v4 = a3;
  if (!a2)
  {
    if (qword_10032EB78 != -1) {
      dispatch_once(&qword_10032EB78, &stru_1002E9960);
    }
    os_log_t v5 = (os_log_s *)qword_10032EB30;
    if (os_log_type_enabled((os_log_t)qword_10032EB30, OS_LOG_TYPE_ERROR)) {
      sub_100262608((uint64_t)v4, v5);
    }
  }
}

void sub_100060BD0(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10032EB20;
  qword_10032EB20 = (uint64_t)v1;
}

void sub_100060CDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100060CF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_10032EB78 != -1) {
      dispatch_once(&qword_10032EB78, &stru_1002E9960);
    }
    id v4 = (void *)qword_10032EB30;
    if (os_log_type_enabled((os_log_t)qword_10032EB30, OS_LOG_TYPE_DEFAULT))
    {
      os_log_t v7 = v4;
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      os_log_t v9 = (void *)objc_opt_class(WeakRetained);
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = v9;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 content]);
      os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 categoryIdentifier]);
      int v20 = 138543874;
      __int128 v21 = v9;
      __int16 v22 = 2114;
      __int16 v23 = v13;
      __int16 v24 = 2114;
      id v25 = v3;
      uint64_t v14 = "[%{public}@]: Error posting user notification: %{public}@ : %{public}@";
      os_log_t v15 = v7;
      uint32_t v16 = 32;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v20, v16);
    }
  }

  else
  {
    if (qword_10032EB78 != -1) {
      dispatch_once(&qword_10032EB78, &stru_1002E9960);
    }
    os_log_t v17 = (void *)qword_10032EB30;
    if (os_log_type_enabled((os_log_t)qword_10032EB30, OS_LOG_TYPE_DEFAULT))
    {
      os_log_t v7 = v17;
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      __int128 v18 = (void *)objc_opt_class(WeakRetained);
      os_log_t v19 = *(void **)(a1 + 32);
      id v11 = v18;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v19 content]);
      os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 categoryIdentifier]);
      int v20 = 138543618;
      __int128 v21 = v18;
      __int16 v22 = 2114;
      __int16 v23 = v13;
      uint64_t v14 = "[%{public}@]: Posted user notification: %{public}@";
      os_log_t v15 = v7;
      uint32_t v16 = 22;
      goto LABEL_10;
    }
  }

  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v3, v5, v6);
}

void sub_100061128(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328810;
  off_100328810 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EB30;
  qword_10032EB30 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032EB38;
  qword_10032EB38 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032EB40;
  qword_10032EB40 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EB48;
  qword_10032EB48 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  uint64_t v12 = (void *)qword_10032EB50;
  qword_10032EB50 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EB58;
  qword_10032EB58 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  uint32_t v16 = (void *)qword_10032EB60;
  qword_10032EB60 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EB68;
  qword_10032EB68 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  int v20 = (void *)qword_10032EB70;
  qword_10032EB70 = (uint64_t)v19;
}

uint64_t sub_1000614D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000616C8(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      os_log_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        os_log_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_100061888(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  os_log_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 32) addObject:v3];
    os_log_t v3 = v4;
  }
}

void sub_1000619B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000619D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000619E0(uint64_t a1)
{
}

void sub_1000619E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  int v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v5)
  {
    if (v6) {
      [v6 addObject:v11];
    }
  }

  else if (!v6)
  {
    os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", 0, a3));
    id v8 = [v7 mutableCopy];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    __int128 v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

uint64_t sub_100061DD8()
{
  return -1LL;
}

void sub_100061FA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100061FB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100061FC8(uint64_t a1)
{
}

void sub_100061FD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tcr_arrayForKey:", v3));
  int v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tcr_stringEnumerator", 0));
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      __int128 v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        -[NSMutableArray addObject:](v5, "addObject:", *(void *)(*((void *)&v11 + 1) + 8LL * (void)v10));
        __int128 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v8);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v5 forKey:v3];
}

id sub_100062484(uint64_t a1)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v15;
    *(void *)&__int128 v4 = 138543874LL;
    __int128 v13 = v4;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)v7);
        if ((objc_msgSend(*(id *)(*(void *)(a1 + 40) + 24), "containsObject:", v8, v13, (void)v14) & 1) == 0)
        {
          if (qword_10032EBC8 != -1) {
            dispatch_once(&qword_10032EBC8, &stru_1002E9AC0);
          }
          uint64_t v9 = (os_log_s *)qword_10032EB88;
          if (os_log_type_enabled((os_log_t)qword_10032EB88, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            uint64_t v11 = *(void *)(v10 + 48);
            *(_DWORD *)buf = v13;
            uint64_t v19 = v10;
            __int16 v20 = 2114;
            uint64_t v21 = v11;
            __int16 v22 = 2114;
            uint64_t v23 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@][%{public}@]: Adding observation for %{public}@.",  buf,  0x20u);
          }

          [*(id *)(*(void *)(a1 + 40) + 24) addObject:v8];
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
    }

    while (v5);
  }

  return [*(id *)(a1 + 40) _startObservingIfNecessary];
}

id sub_1000626C0(uint64_t a1)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v15;
    *(void *)&__int128 v4 = 138543874LL;
    __int128 v13 = v4;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)v7);
        if (objc_msgSend(*(id *)(*(void *)(a1 + 40) + 24), "containsObject:", v8, v13, (void)v14))
        {
          if (qword_10032EBC8 != -1) {
            dispatch_once(&qword_10032EBC8, &stru_1002E9AC0);
          }
          uint64_t v9 = (os_log_s *)qword_10032EB88;
          if (os_log_type_enabled((os_log_t)qword_10032EB88, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            uint64_t v11 = *(void *)(v10 + 48);
            *(_DWORD *)buf = v13;
            uint64_t v19 = v10;
            __int16 v20 = 2114;
            uint64_t v21 = v11;
            __int16 v22 = 2114;
            uint64_t v23 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@][%{public}@]: Removing observation for %{public}@.",  buf,  0x20u);
          }

          [*(id *)(*(void *)(a1 + 40) + 24) removeObject:v8];
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
    }

    while (v5);
  }

  return [*(id *)(a1 + 40) _stopObservingIfNecessary];
}

id sub_1000628D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopObserving];
}

void sub_100062C18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_100062C44(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if ([v3 state])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

    if (v5)
    {
      if (qword_10032EBC8 != -1) {
        dispatch_once(&qword_10032EBC8, &stru_1002E9AC0);
      }
      uint64_t v6 = (void *)qword_10032EB88;
      if (os_log_type_enabled((os_log_t)qword_10032EB88, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = v6;
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
        int v12 = 138543874;
        id v13 = WeakRetained;
        __int16 v14 = 2114;
        uint64_t v15 = v7;
        __int16 v16 = 2114;
        __int128 v17 = v9;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@][%{public}@]: Error with completion: %{public}@.",  (uint8_t *)&v12,  0x20u);
      }
    }
  }

  else
  {
    if (qword_10032EBC8 != -1) {
      dispatch_once(&qword_10032EBC8, &stru_1002E9AC0);
    }
    uint64_t v10 = (os_log_s *)qword_10032EB88;
    if (os_log_type_enabled((os_log_t)qword_10032EB88, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138543618;
      id v13 = WeakRetained;
      __int16 v14 = 2114;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@][%{public}@]: Done listening to app launch events.",  (uint8_t *)&v12,  0x16u);
    }
  }
}

void sub_100062E18(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 eventBody]);

  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleID]);
    dispatch_time_t v8 = dispatch_time(0LL, 1000000000LL);
    uint64_t v9 = (dispatch_queue_s *)WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100062F34;
    block[3] = &unk_1002E9A78;
    objc_copyWeak(&v14, v3);
    id v12 = *(id *)(a1 + 32);
    id v13 = v7;
    id v10 = v7;
    dispatch_after(v8, v9, block);

    objc_destroyWeak(&v14);
  }
}

void sub_100062F34(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (qword_10032EBC8 != -1) {
    dispatch_once(&qword_10032EBC8, &stru_1002E9AC0);
  }
  id v3 = (os_log_s *)qword_10032EB88;
  if (os_log_type_enabled((os_log_t)qword_10032EB88, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138543874;
    id v7 = WeakRetained;
    __int16 v8 = 2114;
    uint64_t v9 = v4;
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[%{public}@][%{public}@]: Sending launch event for %{public}@.",  (uint8_t *)&v6,  0x20u);
  }

  [WeakRetained _appDidLaunch:*(void *)(a1 + 40)];
}

void sub_1000631E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  id v2 = off_100328818;
  off_100328818 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032EB80;
  qword_10032EB80 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032EB88;
  qword_10032EB88 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  __int16 v8 = (void *)qword_10032EB90;
  qword_10032EB90 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  __int16 v10 = (void *)qword_10032EB98;
  qword_10032EB98 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032EBA0;
  qword_10032EBA0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032EBA8;
  qword_10032EBA8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_10032EBB0;
  qword_10032EBB0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EBB8;
  qword_10032EBB8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032EBC0;
  qword_10032EBC0 = (uint64_t)v19;
}

void sub_10006333C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10006334C(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_1000635FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100063614(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100063624(uint64_t a1)
{
}

void sub_10006362C(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100063740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100063758(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100063870( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100063888(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]]);
  id v5 = (id)v2;
  if (v2) {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[Optional optionalWithSome:](&OBJC_CLASS___Optional, "optionalWithSome:", v2));
  }
  else {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[Optional optionalWithNone](&OBJC_CLASS___Optional, "optionalWithNone"));
  }
  uint64_t v4 = v3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v3);
}

id sub_1000639B4(void *a1)
{
  return [*(id *)(a1[4] + 8) setObject:a1[6] forKeyedSubscript:a1[5]];
}

id sub_100063A70(void *a1)
{
  return [*(id *)(a1[4] + 8) setObject:a1[6] forKeyedSubscript:a1[5]];
}

void sub_100063AF0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___PushService);
  uint64_t v2 = (void *)qword_10032EBD0;
  qword_10032EBD0 = (uint64_t)v1;
}

void sub_100063C84(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[Bag defaultBag](&OBJC_CLASS____TtC9storekitd3Bag, "defaultBag"));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[PushService _pushHandlerWithBagContract:](&OBJC_CLASS___PushService, "_pushHandlerWithBagContract:"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 4_Block_object_dispose(va, 8) = v2;

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v5 addObserver:*(void *)(a1 + 32) selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];
  if (!*(void *)(a1 + 40)) {
    [*(id *)(a1 + 32) _initializeConnectionsAndSkipEnvironmentCheck:0];
  }
}

void sub_100063DBC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
  value = 0LL;
  if (NSMapMember(*(NSMapTable **)(*(void *)(a1 + 32) + 16LL), v2, 0LL, &value))
  {
    if (qword_10032EC28 != -1) {
      dispatch_once(&qword_10032EC28, &stru_1002E9B48);
    }
    uint64_t v3 = (void *)qword_10032EC00;
    if (os_log_type_enabled((os_log_t)qword_10032EC00, OS_LOG_TYPE_FAULT)) {
      sub_100262868((uint64_t *)&value, v3);
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 16) setObject:*(void *)(a1 + 40) forKey:v2];
  [*(id *)(a1 + 32) _flushPendingMessagesWithActionType:v2];
}

void sub_100063EF0(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40)));
  if (NSMapMember(*(NSMapTable **)(*(void *)(a1 + 32) + 16LL), v3, 0LL, 0LL))
  {
    [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:v3];
  }

  else
  {
    if (qword_10032EC28 != -1) {
      dispatch_once(&qword_10032EC28, &stru_1002E9B48);
    }
    uint64_t v4 = (os_log_s *)qword_10032EC00;
    if (os_log_type_enabled((os_log_t)qword_10032EC00, OS_LOG_TYPE_ERROR)) {
      sub_100262918(v2, v4, v5, v6, v7, v8, v9, v10);
    }
  }
}

id sub_100064060(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processReceivedMessage:*(void *)(a1 + 40) withConnection:*(void *)(a1 + 48)];
}

id sub_1000643AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initializeConnectionsAndSkipEnvironmentCheck:0];
}

void sub_100064B68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328880;
  off_100328880 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032EBE0;
  qword_10032EBE0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032EBE8;
  qword_10032EBE8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032EBF0;
  qword_10032EBF0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EBF8;
  qword_10032EBF8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032EC00;
  qword_10032EC00 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032EC08;
  qword_10032EC08 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_10032EC10;
  qword_10032EC10 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EC18;
  qword_10032EC18 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032EC20;
  qword_10032EC20 = (uint64_t)v19;
}

id sub_100065FC0(id a1, NSString *a2)
{
  return -[NSString lowercaseString](a2, "lowercaseString");
}

void sub_10006798C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _newProductIdentifierAllowedCharacterSet];
  uint64_t v2 = (void *)qword_10032EC30;
  qword_10032EC30 = (uint64_t)v1;
}

void sub_1000679B0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _newProductIdentifierAllowedCharacterSet];
  uint64_t v2 = (void *)qword_10032EC38;
  qword_10032EC38 = (uint64_t)v1;
}

void sub_10006AB4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328888;
  off_100328888 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032EC50;
  qword_10032EC50 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032EC58;
  qword_10032EC58 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  uint64_t v8 = (void *)qword_10032EC60;
  qword_10032EC60 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EC68;
  qword_10032EC68 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032EC70;
  qword_10032EC70 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032EC78;
  qword_10032EC78 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  __int16 v16 = (void *)qword_10032EC80;
  qword_10032EC80 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EC88;
  qword_10032EC88 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032EC90;
  qword_10032EC90 = (uint64_t)v19;
}

  ;
}

id sub_10006ADC8(const char *a1, char *name, void *a3)
{
  if (!a1) {
    sub_10026302C();
  }
  if (!name) {
    sub_100263054();
  }
  unint64_t v6 = getxattr(a1, name, 0LL, 0LL, 0, 1);
  if (v6)
  {
    size_t v7 = v6;
    if (v6 >= 0xF4241)
    {
      if (a3)
      {
        uint64_t v8 = @"Attribute size too large";
LABEL_13:
        uint64_t v12 = ASDErrorWithUserInfoAndFormat(507LL, 0LL, v8);
        id v13 = (id)objc_claimAutoreleasedReturnValue(v12);
        os_log_t v9 = 0LL;
        *a3 = v13;
        return v9;
      }

      goto LABEL_16;
    }

    uint64_t v10 = malloc(v6);
    if (!v10)
    {
      if (a3)
      {
        uint64_t v8 = @"Could not allocate buffer";
        goto LABEL_13;
      }

void sub_10006AFC8(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10032ECA0;
  qword_10032ECA0 = (uint64_t)v1;
}

void sub_10006B0C4(_Unwind_Exception *a1)
{
}

void sub_10006B20C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10006B224(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006B234(uint64_t a1)
{
}

id sub_10006B23C(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  if (!v2) {
    return _[a2 removePromotionInfoForBundleID:v3];
  }
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = [a2 setPromotionInfo:v2 forBundleID:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  return v5;
}

void sub_10006B40C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10006B430(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([a2 promotionInfoForProductIdentifiers:v3 bundleID:v4 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

NSString *sub_10006B520()
{
  return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "Nov 10 2024");
}

NSString *sub_10006B534()
{
  return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "02:48:11");
}

uint64_t sub_10006B548()
{
  return os_variant_has_internal_content("com.apple.storekitd");
}

uint64_t sub_10006B554()
{
  return dyld_program_sdk_at_least(0xC020000000002LL);
}

uint64_t sub_10006B564()
{
  return dyld_program_sdk_at_least(0x7E30901FFFFFFFFLL);
}

uint64_t sub_10006B570()
{
  return dyld_program_sdk_at_least(0xA100000000001LL);
}

uint64_t sub_10006B580()
{
  return dyld_program_sdk_at_least(0x7E70F01FFFFFFFFLL);
}

void sub_10006C1B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"transaction_id"]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"product_type"]);
  unsigned int v8 = [v7 unsignedCharValue];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"is_finished"]);
  unsigned int v10 = [v9 BOOLValue];

  unsigned int v11 = [*(id *)(a1 + 32) containsObject:v6];
  if (v10 == v11)
  {
    unsigned int v12 = v11;
    id v13 = objc_alloc(&OBJC_CLASS___InAppTransactionEntity);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
    os_log_t v15 = -[SQLiteEntity initWithPersistentID:onConnection:](v13, "initWithPersistentID:onConnection:", a2, v14);

    if (v8 == 1) {
      char v16 = v12;
    }
    else {
      char v16 = 1;
    }
    if ((v16 & 1) != 0 || *(_BYTE *)(a1 + 56))
    {
      os_log_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v12 ^ 1));
      -[SQLiteEntity setValue:forProperty:](v15, "setValue:forProperty:", v17, @"is_finished");
    }

    else if (!-[SQLiteEntity deleteFromDatabase](v15, "deleteFromDatabase"))
    {
      if (qword_10032ECF8 != -1) {
        dispatch_once(&qword_10032ECF8, &stru_1002E9C98);
      }
      if (os_log_type_enabled((os_log_t)qword_10032ECD8, OS_LOG_TYPE_ERROR)) {
        sub_1002630DC();
      }
    }
  }
}

void sub_10006CAB0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"product_type"]);
  unsigned int v6 = [v5 unsignedCharValue];

  uint64_t v7 = objc_alloc(&OBJC_CLASS___InAppTransactionEntity);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v9 = -[SQLiteEntity initWithPersistentID:onConnection:](v7, "initWithPersistentID:onConnection:", a2, v8);

  if (v6 == 1 && !*(_BYTE *)(a1 + 48))
  {
    if (!-[SQLiteEntity deleteFromDatabase](v9, "deleteFromDatabase"))
    {
      if (qword_10032ECF8 != -1) {
        dispatch_once(&qword_10032ECF8, &stru_1002E9C98);
      }
      if (os_log_type_enabled((os_log_t)qword_10032ECD8, OS_LOG_TYPE_ERROR)) {
        sub_100263140();
      }
    }
  }

  else
  {
    -[SQLiteEntity setValue:forProperty:](v9, "setValue:forProperty:", &__kCFBooleanTrue, @"is_finished");
  }
}

LABEL_65:
  return (char)v17;
}

void sub_10006DCB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328898;
  off_100328898 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  uint64_t v4 = (void *)qword_10032ECB0;
  qword_10032ECB0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned int v6 = (void *)qword_10032ECB8;
  qword_10032ECB8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned int v8 = (void *)qword_10032ECC0;
  qword_10032ECC0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  unsigned int v10 = (void *)qword_10032ECC8;
  qword_10032ECC8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned int v12 = (void *)qword_10032ECD0;
  qword_10032ECD0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032ECD8;
  qword_10032ECD8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  char v16 = (void *)qword_10032ECE0;
  qword_10032ECE0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032ECE8;
  qword_10032ECE8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032ECF0;
  qword_10032ECF0 = (uint64_t)v19;
}

  ;
}

void sub_10006DE30( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10006E1B0(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___ActiveAccountObserver);
  uint64_t v2 = (void *)qword_10032ED08;
  qword_10032ED08 = (uint64_t)v1;
}

void sub_10006E588(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"AccountDidChangePreviousActiveDSID"]);
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (v1)
  {
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v1, v3) & 1) != 0) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v1,  @"AccountDidChangePreviousActiveDSID");
    }
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v4 postNotificationName:@"AccountStoreSandboxAccountDidChange" object:0 userInfo:v2];
}

void sub_10006E6CC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"DSID"]);

  if (v3) {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"DSID"]);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"active"]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"active"]);
    unsigned int v6 = [v5 BOOLValue];
  }

  else
  {
    unsigned int v6 = 0;
  }

  os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"signout"]);

  if (v7)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"signout"]);
    unsigned int v9 = [v8 BOOLValue];
  }

  else
  {
    unsigned int v9 = 0;
  }

  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ams_activeiTunesAccount"));

  if (v11)
  {
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ams_DSID"));

    if (!v12)
    {
      if (qword_10032ED58 != -1) {
        dispatch_once(&qword_10032ED58, &stru_1002E9CF0);
      }
      os_log_t v13 = (void *)qword_10032ED10;
      if (os_log_type_enabled((os_log_t)qword_10032ED10, OS_LOG_TYPE_ERROR)) {
        sub_100263204(a1, v13);
      }

      os_log_t v11 = 0LL;
    }
  }

  if (v9)
  {
    if (qword_10032ED58 != -1) {
      dispatch_once(&qword_10032ED58, &stru_1002E9CF0);
    }
    id v14 = (void *)qword_10032ED10;
    if (os_log_type_enabled((os_log_t)qword_10032ED10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      char v16 = v14;
      *(_DWORD *)id v32 = 138543874;
      *(void *)&v32[4] = objc_opt_class(v15);
      *(_WORD *)&v32[12] = 2114;
      *(void *)&v32[14] = v3;
      *(_WORD *)&v32[22] = 1024;
      LODWORD(v33) = v6;
      id v17 = *(id *)&v32[4];
      __int128 v18 = "[%{public}@] Account signout notification accountID: %{public}@ active: %d";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v18, v32, 0x1Cu);
    }
  }

  else
  {
    if (qword_10032ED58 != -1) {
      dispatch_once(&qword_10032ED58, &stru_1002E9CF0);
    }
    os_log_t v19 = (void *)qword_10032ED10;
    if (os_log_type_enabled((os_log_t)qword_10032ED10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 40);
      char v16 = v19;
      *(_DWORD *)id v32 = 138543874;
      *(void *)&v32[4] = objc_opt_class(v20);
      *(_WORD *)&v32[12] = 2114;
      *(void *)&v32[14] = v3;
      *(_WORD *)&v32[22] = 1024;
      LODWORD(v33) = v6;
      id v17 = *(id *)&v32[4];
      __int128 v18 = "[%{public}@] Account account changed notification accountID: %{public}@ active: %d";
      goto LABEL_25;
    }
  }

  if (+[ActiveAccountObserver _shouldNotifyChangeFromExistingAccount:toCurrentAccount:]( &OBJC_CLASS___ActiveAccountObserver,  "_shouldNotifyChangeFromExistingAccount:toCurrentAccount:",  *(void *)(*(void *)(a1 + 40) + 8LL),  v11,  *(_OWORD *)v32,  *(void *)&v32[16],  v33))
  {
    uint64_t v21 = (os_log_s *)*(id *)(*(void *)(a1 + 40) + 8LL);
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 8LL), v11);
    if (qword_10032ED58 != -1) {
      dispatch_once(&qword_10032ED58, &stru_1002E9CF0);
    }
    __int16 v22 = (void *)qword_10032ED10;
    if (os_log_type_enabled((os_log_t)qword_10032ED10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 40);
      __int16 v24 = v22;
      id v25 = (void *)objc_opt_class(v23);
      id v26 = v25;
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v11 hashedDescription]);
      *(_DWORD *)id v32 = 138543618;
      *(void *)&v32[4] = v25;
      *(_WORD *)&v32[12] = 2114;
      *(void *)&v32[14] = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Posting notification after active iTunes account changed: %{public}@",  v32,  0x16u);
    }

    +[ActiveAccountObserver _postAccountDidChangeFromOldAccount:withAccountStore:]( &OBJC_CLASS___ActiveAccountObserver,  "_postAccountDidChangeFromOldAccount:withAccountStore:",  v21,  *(void *)(a1 + 40));
    goto LABEL_36;
  }

  if (qword_10032ED58 != -1) {
    dispatch_once(&qword_10032ED58, &stru_1002E9CF0);
  }
  uint64_t v28 = (void *)qword_10032ED10;
  if (os_log_type_enabled((os_log_t)qword_10032ED10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = *(void *)(a1 + 40);
    uint64_t v21 = v28;
    uint64_t v30 = (void *)objc_opt_class(v29);
    *(_DWORD *)id v32 = 138543362;
    *(void *)&v32[4] = v30;
    id v31 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Received account change notification but nothing has changed",  v32,  0xCu);

LABEL_36:
  }
}

void sub_10006EC50(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));

  if (v3)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));
    [v2 setObject:v4 forKeyedSubscript:@"AccountDidChangePreviousActiveDSID"];
LABEL_7:

    goto LABEL_8;
  }

  if (qword_10032ED58 != -1) {
    dispatch_once(&qword_10032ED58, &stru_1002E9CF0);
  }
  id v5 = (void *)qword_10032ED10;
  if (os_log_type_enabled((os_log_t)qword_10032ED10, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = *(void **)(a1 + 32);
    id v4 = v5;
    os_log_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 hashedDescription]);
    int v9 = 138543362;
    unsigned int v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_DEFAULT,  "Not posting account change due to no DSID on account: %{public}@",  (uint8_t *)&v9,  0xCu);

    goto LABEL_7;
  }

LABEL_2:
  unsigned int v8 = 0;
LABEL_16:

  return v8;
}

void sub_10006F00C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003288A0;
  off_1003288A0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032ED10;
  qword_10032ED10 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned int v6 = (void *)qword_10032ED18;
  qword_10032ED18 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned int v8 = (void *)qword_10032ED20;
  qword_10032ED20 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  unsigned int v10 = (void *)qword_10032ED28;
  qword_10032ED28 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned int v12 = (void *)qword_10032ED30;
  qword_10032ED30 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032ED38;
  qword_10032ED38 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  char v16 = (void *)qword_10032ED40;
  qword_10032ED40 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032ED48;
  qword_10032ED48 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032ED50;
  qword_10032ED50 = (uint64_t)v19;
}

void sub_10006F168( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_10006F17C(void *a1)
{
  return a1;
}

void sub_10006F7D0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, int a16, __int16 a17, __int16 a18, uint64_t a19, __int128 a20)
{
  if (a2 == 1)
  {
    id v21 = objc_begin_catch(a1);
    id v22 = sub_10006F8A0();
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
    {
      id v24 = [v20 length];
      LODWORD(buf) = 138544130;
      *(void *)((char *)&buf + 4) = a12;
      WORD6(buf) = 2048;
      *(void *)((char *)&buf + 14) = v24;
      a18 = 2114;
      LOWORD(a20) = 2114;
      *(void *)((char *)&a20 + 2) = v21;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_FAULT,  "[%{public}@] Encountered exception while writing receipt (%ld bytes) to %{public}@: %{public}@",  (uint8_t *)&buf,  0x2Au);
    }

    objc_end_catch();
    JUMPOUT(0x10006F654LL);
  }

  _Unwind_Resume(a1);
}

id sub_10006F8A0()
{
  if (qword_10032EDA8 != -1) {
    dispatch_once(&qword_10032EDA8, &stru_1002E9D10);
  }
  return (id)qword_10032ED88;
}

void sub_10006F8E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003288A8;
  off_1003288A8 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032ED60;
  qword_10032ED60 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned int v6 = (void *)qword_10032ED68;
  qword_10032ED68 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned int v8 = (void *)qword_10032ED70;
  qword_10032ED70 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  unsigned int v10 = (void *)qword_10032ED78;
  qword_10032ED78 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned int v12 = (void *)qword_10032ED80;
  qword_10032ED80 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032ED88;
  qword_10032ED88 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  char v16 = (void *)qword_10032ED90;
  qword_10032ED90 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032ED98;
  qword_10032ED98 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032EDA0;
  qword_10032EDA0 = (uint64_t)v19;
}

void sub_10006FB44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003288B0;
  off_1003288B0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EDB0;
  qword_10032EDB0 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  unsigned int v6 = (void *)qword_10032EDB8;
  qword_10032EDB8 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned int v8 = (void *)qword_10032EDC0;
  qword_10032EDC0 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  unsigned int v10 = (void *)qword_10032EDC8;
  qword_10032EDC8 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned int v12 = (void *)qword_10032EDD0;
  qword_10032EDD0 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  id v14 = (void *)qword_10032EDD8;
  qword_10032EDD8 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  char v16 = (void *)qword_10032EDE0;
  qword_10032EDE0 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int128 v18 = (void *)qword_10032EDE8;
  qword_10032EDE8 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  uint64_t v20 = (void *)qword_10032EDF0;
  qword_10032EDF0 = (uint64_t)v19;
}

void sub_10006FFD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_10006FFF4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100070004(uint64_t a1)
{
}

void sub_10007000C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _BYTE *a5)
{
  id v7 = a3;
  id v20 = (id)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"dsid"]);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"bundle_id"]);
  os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"status"]);
  id v10 = [v9 integerValue];

  os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"message_type"]);
  id v12 = [v11 integerValue];

  os_log_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"allow_developer_control"]);
  id v14 = [v13 BOOLValue];

  os_log_t v15 = objc_alloc(&OBJC_CLASS___StoreKitMessageInfo);
  char v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v10));
  os_log_t v17 = -[StoreKitMessageInfo initWithUserID:bundleID:status:allowDeveloperControl:messageType:]( v15,  "initWithUserID:bundleID:status:allowDeveloperControl:messageType:",  v20,  v8,  v16,  v14,  v12);
  uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL);
  os_log_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;

  *a5 = 1;
}

void sub_1000703D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000703F4(void *a1, uint64_t a2, void *a3)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"product_id"]);
  id v4 = -[StoreKitRevocationInfo initWithUserID:bundleID:productID:]( objc_alloc(&OBJC_CLASS___StoreKitRevocationInfo),  "initWithUserID:bundleID:productID:",  a1[4],  a1[5],  v5);
  if (v4) {
    [*(id *)(*(void *)(a1[6] + 8) + 40) addObject:v4];
  }
}

void sub_100070628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100070650(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"bundle_id"]);
  if (v4)
  {
    id v5 = v4;
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
    id v4 = v5;
  }
}

void sub_1000708B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000708E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  *a5 = 1;
  return result;
}

void sub_100070B58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100070B80(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"bundle_id"]);
  if (v4)
  {
    id v5 = v4;
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v4];
    id v4 = v5;
  }
}

void sub_100071484( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000714A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned int v8 = WeakRetained;
  if (v6) {
    [WeakRetained completeWithError:v6];
  }
  os_log_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 selectedActionIdentifier]);

  if (v9 == @"InvalidReceiptPromptOKAction")
  {
    if (*(void *)(a1 + 32))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
      uint64_t v11 = *(void *)(a1 + 32);
      id v15 = 0LL;
      [v10 openURL:v11 withOptions:0 error:&v15];
      id v12 = v15;

      if (v12)
      {
LABEL_7:
        if (qword_10032EE48 != -1) {
          dispatch_once(&qword_10032EE48, &stru_1002E9DB0);
        }
        os_log_t v13 = (os_log_s *)qword_10032EE00;
        if (os_log_type_enabled((os_log_t)qword_10032EE00, OS_LOG_TYPE_ERROR)) {
          sub_1002635D8((uint64_t)v12, v13);
        }
        [*(id *)(a1 + 40) completeWithError:v12];
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v14 = ASDErrorWithDescription( ASDErrorDomain,  507LL,  @"Could not construct product page URL from the adam ID");
      id v12 = (id)objc_claimAutoreleasedReturnValue(v14);
      if (v12) {
        goto LABEL_7;
      }
    }

    [*(id *)(a1 + 40) completeWithSuccess];
LABEL_14:

    goto LABEL_15;
  }

  [*(id *)(a1 + 40) completeWithSuccess];
LABEL_15:
}

void sub_100071654(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003288B8;
  off_1003288B8 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EE00;
  qword_10032EE00 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032EE08;
  qword_10032EE08 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned int v8 = (void *)qword_10032EE10;
  qword_10032EE10 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032EE18;
  qword_10032EE18 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032EE20;
  qword_10032EE20 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EE28;
  qword_10032EE28 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  char v16 = (void *)qword_10032EE30;
  qword_10032EE30 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032EE38;
  qword_10032EE38 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  id v20 = (void *)qword_10032EE40;
  qword_10032EE40 = (uint64_t)v19;
}

void sub_1000720C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_1003288C0;
  off_1003288C0 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EE50;
  qword_10032EE50 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  id v6 = (void *)qword_10032EE58;
  qword_10032EE58 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned int v8 = (void *)qword_10032EE60;
  qword_10032EE60 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  id v10 = (void *)qword_10032EE68;
  qword_10032EE68 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  id v12 = (void *)qword_10032EE70;
  qword_10032EE70 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EE78;
  qword_10032EE78 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  char v16 = (void *)qword_10032EE80;
  qword_10032EE80 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032EE88;
  qword_10032EE88 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  id v20 = (void *)qword_10032EE90;
  qword_10032EE90 = (uint64_t)v19;
}

void sub_100072248(id a1)
{
  os_log_t v1 = objc_opt_new(&OBJC_CLASS___OctaneListener);
  uint64_t v2 = (void *)qword_10032EEA0;
  qword_10032EEA0 = (uint64_t)v1;

  os_log_t v3 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.storekit.configuration.xpc");
  id v4 = (void *)qword_10032EEA8;
  qword_10032EEA8 = (uint64_t)v3;

  [(id)qword_10032EEA8 setDelegate:qword_10032EEA0];
  if (qword_10032EF00 != -1) {
    dispatch_once(&qword_10032EF00, &stru_1002E9EC0);
  }
  os_log_t v5 = (os_log_s *)qword_10032EEF0;
  if (os_log_type_enabled((os_log_t)qword_10032EEF0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Starting Xcode Test Service", v6, 2u);
  }

  [(id)qword_10032EEA8 resume];
}

void sub_100072798(_Unwind_Exception *a1)
{
}

void sub_1000727D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_10032EF00 != -1) {
    dispatch_once(&qword_10032EF00, &stru_1002E9EC0);
  }
  uint64_t v3 = (void *)qword_10032EEF0;
  if (os_log_type_enabled((os_log_t)qword_10032EEF0, OS_LOG_TYPE_ERROR)) {
    sub_100263788(v3, (uint64_t)WeakRetained, a1);
  }
}

void sub_100072858(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (qword_10032EF00 != -1) {
    dispatch_once(&qword_10032EF00, &stru_1002E9EC0);
  }
  uint64_t v3 = (void *)qword_10032EEF0;
  if (os_log_type_enabled((os_log_t)qword_10032EEF0, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    uint64_t v5 = objc_opt_class(WeakRetained);
    int v6 = *(_DWORD *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 32);
    int v9 = 138543874;
    uint64_t v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[%{public}@]: Connection invalidated for pid: %i (%{public}@)",  (uint8_t *)&v9,  0x1Cu);
  }

  if ([*(id *)(a1 + 40) isEqualToString:@"com.apple.ASOctaneSupportXPCService"])
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[OctaneManager sharedInstance](&OBJC_CLASS___OctaneManager, "sharedInstance"));
    [v8 restartServerIfNecessary];
  }

  +[OctaneClientConnection removeConnectionWithUUID:]( &OBJC_CLASS___OctaneClientConnection,  "removeConnectionWithUUID:",  *(void *)(a1 + 32));
}

void sub_1000729A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328928;
  off_100328928 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EEB8;
  qword_10032EEB8 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  int v6 = (void *)qword_10032EEC0;
  qword_10032EEC0 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  unsigned int v8 = (void *)qword_10032EEC8;
  qword_10032EEC8 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EED0;
  qword_10032EED0 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  int v12 = (void *)qword_10032EED8;
  qword_10032EED8 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EEE0;
  qword_10032EEE0 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  char v16 = (void *)qword_10032EEE8;
  qword_10032EEE8 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  uint64_t v18 = (void *)qword_10032EEF0;
  qword_10032EEF0 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  id v20 = (void *)qword_10032EEF8;
  qword_10032EEF8 = (uint64_t)v19;
}

id sub_100072CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (a3) {
    return [v3 setObject:a3 forKey:a2];
  }
  else {
    return [v3 removeObjectForKey:a2];
  }
}

void sub_100074874(_Unwind_Exception *a1)
{
}

void sub_1000748B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _downloadedBytes:a3 expectedBytes:a4];
}

void sub_1000748FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(17LL, 0LL);
  int v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000749C4;
  block[3] = &unk_1002E9A78;
  objc_copyWeak(&v11, (id *)(a1 + 40));
  id v9 = *(id *)(a1 + 32);
  id v10 = v4;
  id v7 = v4;
  dispatch_async(v6, block);

  objc_destroyWeak(&v11);
}

void sub_1000749C4(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (*(void *)(a1 + 40))
    {
      if (qword_10032EF50 != -1) {
        dispatch_once(&qword_10032EF50, &stru_1002E9F70);
      }
      uint64_t v3 = (os_log_s *)off_100328930;
      if (os_log_type_enabled((os_log_t)off_100328930, OS_LOG_TYPE_ERROR)) {
        sub_1002639DC(a1, (uint64_t *)(a1 + 40), v3);
      }
      [WeakRetained _finalizeTaskWithError:*(void *)(a1 + 40)];
    }

    else
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      unsigned __int8 v12 = [v11 fileExistsAtPath:*(void *)(WeakRetained + 58)];

      if ((v12 & 1) != 0)
      {
        if (qword_10032EF50 != -1) {
          dispatch_once(&qword_10032EF50, &stru_1002E9F70);
        }
        os_log_t v13 = (os_log_s *)off_100328930;
        if (os_log_type_enabled((os_log_t)off_100328930, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)(a1 + 32);
          uint64_t v15 = *(void *)(WeakRetained + 130);
          int v25 = 138543618;
          uint64_t v26 = v14;
          __int16 v27 = 2114;
          uint64_t v28 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Finished download %{public}@. Starting install.",  (uint8_t *)&v25,  0x16u);
        }

        [WeakRetained _install];
      }

      else
      {
        if (qword_10032EF50 != -1) {
          dispatch_once(&qword_10032EF50, &stru_1002E9F70);
        }
        char v16 = (os_log_s *)off_100328930;
        if (os_log_type_enabled((os_log_t)off_100328930, OS_LOG_TYPE_ERROR)) {
          sub_100263974(a1, v16, v17, v18, v19, v20, v21, v22);
        }
        uint64_t v23 = ASDErrorWithDescription(ASDErrorDomain, 513LL, @"Downloaded asset not found");
        id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        [WeakRetained _finalizeTaskWithError:v24];
      }
    }
  }

  else
  {
    if (qword_10032EF50 != -1) {
      dispatch_once(&qword_10032EF50, &stru_1002E9F70);
    }
    id v4 = (os_log_s *)off_100328930;
    if (os_log_type_enabled((os_log_t)off_100328930, OS_LOG_TYPE_ERROR)) {
      sub_10026390C(a1, v4, v5, v6, v7, v8, v9, v10);
    }
  }
}

void sub_100074DC0(_Unwind_Exception *a1)
{
}

void sub_100074F18(_Unwind_Exception *a1)
{
}

void sub_10007537C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000753F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10007577C(_Unwind_Exception *a1)
{
}

void sub_1000757A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = BOMCopierUserData();
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  unint64_t v7 = *(void *)(v6 + 122) + a4;
  *(void *)(v6 + 122) = v7;
  double v8 = fmax((double)v7 / (double)*(unint64_t *)(v6 + 114) * 0.2 + 0.8, 0.99);
  uint64_t v9 = objc_alloc(&OBJC_CLASS___InAppDownloadStatus);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([(id)v6 downloadID]);
  id v11 = -[InAppDownloadStatus initWithDownloadID:](v9, "initWithDownloadID:", v10);

  -[InAppDownloadStatus setState:](v11, "setState:", 1LL);
  -[InAppDownloadStatus setProgress:](v11, "setProgress:", v8);
  -[InAppDownloadStatus setTimeRemaining:](v11, "setTimeRemaining:", -1.0);
  [(id)v6 _updateDownloadStatus:v11];
  if (qword_10032EF50 != -1) {
    dispatch_once(&qword_10032EF50, &stru_1002E9F70);
  }
  unsigned __int8 v12 = off_100328930;
  if (os_log_type_enabled((os_log_t)off_100328930, OS_LOG_TYPE_DEBUG))
  {
    os_log_t v13 = v12;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([(id)v6 logKey]);
    -[InAppDownloadStatus progress](v11, "progress");
    int v16 = 138543874;
    uint64_t v17 = v14;
    __int16 v18 = 2048;
    uint64_t v19 = a4;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[%{public}@] BOMCopier copied %lld (%f)",  (uint8_t *)&v16,  0x20u);
  }
}

void sub_100076038(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328930;
  off_100328930 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EF08;
  qword_10032EF08 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032EF10;
  qword_10032EF10 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  double v8 = (void *)qword_10032EF18;
  qword_10032EF18 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EF20;
  qword_10032EF20 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned __int8 v12 = (void *)qword_10032EF28;
  qword_10032EF28 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EF30;
  qword_10032EF30 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032EF38;
  qword_10032EF38 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032EF40;
  qword_10032EF40 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032EF48;
  qword_10032EF48 = (uint64_t)v19;
}

void sub_100076380(id a1)
{
  os_log_t v1 = os_log_create("com.apple.storekit", "Download");
  uint64_t v2 = off_100328938;
  off_100328938 = v1;

  os_log_t v3 = os_log_create("com.apple.storekit", "General");
  id v4 = (void *)qword_10032EF58;
  qword_10032EF58 = (uint64_t)v3;

  os_log_t v5 = os_log_create("com.apple.storekit", "Messages");
  uint64_t v6 = (void *)qword_10032EF60;
  qword_10032EF60 = (uint64_t)v5;

  os_log_t v7 = os_log_create("com.apple.storekit", "Products");
  double v8 = (void *)qword_10032EF68;
  qword_10032EF68 = (uint64_t)v7;

  os_log_t v9 = os_log_create("com.apple.storekit", "Purchase");
  uint64_t v10 = (void *)qword_10032EF70;
  qword_10032EF70 = (uint64_t)v9;

  os_log_t v11 = os_log_create("com.apple.storekit", "Push");
  unsigned __int8 v12 = (void *)qword_10032EF78;
  qword_10032EF78 = (uint64_t)v11;

  os_log_t v13 = os_log_create("com.apple.storekit", "Receipts");
  uint64_t v14 = (void *)qword_10032EF80;
  qword_10032EF80 = (uint64_t)v13;

  os_log_t v15 = os_log_create("com.apple.storekit", "SQL");
  int v16 = (void *)qword_10032EF88;
  qword_10032EF88 = (uint64_t)v15;

  os_log_t v17 = os_log_create("com.apple.storekit", "XcodeTest");
  __int16 v18 = (void *)qword_10032EF90;
  qword_10032EF90 = (uint64_t)v17;

  os_log_t v19 = os_log_create("com.apple.storekit", "ProductPage");
  __int16 v20 = (void *)qword_10032EF98;
  qword_10032EF98 = (uint64_t)v19;
}

int64_t sub_100077020(id a1, FamilyMember *a2, FamilyMember *a3)
{
  id v4 = a2;
  os_log_t v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[FamilyMember firstName](v4, "firstName"));
  if (v6)
  {
  }

  else
  {
    int64_t v7 = objc_claimAutoreleasedReturnValue(-[FamilyMember firstName](v5, "firstName"));

    if (!v7) {
      goto LABEL_11;
    }
  }

  if (-[FamilyMember isCurrentSignedInUser](v4, "isCurrentSignedInUser")
    || (double v8 = (void *)objc_claimAutoreleasedReturnValue(-[FamilyMember firstName](v5, "firstName")), v8, !v8))
  {
    int64_t v7 = -1LL;
  }

  else if (-[FamilyMember isCurrentSignedInUser](v5, "isCurrentSignedInUser") {
         || (os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[FamilyMember firstName](v4, "firstName")),
  }
             v9,
             !v9))
  {
    int64_t v7 = 1LL;
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[FamilyMember firstName](v4, "firstName"));
    os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[FamilyMember firstName](v5, "firstName"));
    int64_t v7 = (int64_t)[v10 localizedCaseInsensitiveCompare:v11];
  }

id sub_1000771B8(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10032EFB8;
  qword_10032EFB8 = (uint64_t)v1;

  return [(id)qword_10032EFB8 _serviceConnection];
}

void sub_1000774E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000774F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100077508(uint64_t a1)
{
}

void sub_100077510(uint64_t a1, void *a2)
{
}

void sub_100077520(uint64_t a1, void *a2)
{
}

void sub_10007766C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100077684(uint64_t a1, void *a2)
{
}

void sub_100077694(uint64_t a1, void *a2)
{
}

void sub_1000777C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000777DC(uint64_t a1, void *a2)
{
}

void sub_1000777EC(uint64_t a1, void *a2)
{
}

id sub_100077A9C(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32), "updateWithBuffer:length:", objc_msgSend(*(id *)(a1 + 40), "bytes"), objc_msgSend(*(id *)(a1 + 40), "length"));
}

dispatch_block_t sub_100077D6C(dispatch_block_t block)
{
  return dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
}

void sub_100077D88(void *a1, void *a2)
{
  os_log_t v3 = a1;
  id v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, a2);
  dispatch_async(v3, v4);
}

dispatch_queue_t sub_100077DD8(const char *a1, dispatch_qos_class_t a2)
{
  dispatch_queue_attr_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  os_log_t v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v4);
  dispatch_queue_attr_t v6 = dispatch_queue_attr_make_with_qos_class(v5, a2, 0);
  int64_t v7 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v6);
  dispatch_queue_t v8 = dispatch_queue_create(a1, v7);

  return v8;
}

uint64_t sub_100077F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_queue_attr_t v4 = *(void **)(a1 + 32);
  os_log_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  dispatch_queue_attr_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@/%ld",  v5,  [v3 code]));
  [v4 addObject:v6];

  int64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  if (![v7 isEqualToString:AMSErrorDomain])
  {
LABEL_5:

    goto LABEL_6;
  }

  id v8 = [v3 code];

  if (v8 == (id)305)
  {
    os_log_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
    int64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "tcr_integerValueForKey:", AMSErrorUserInfoKeyServerErrorCode));

    if (v7)
    {
      uint64_t v10 = *(void **)(a1 + 32);
      os_log_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/%@",  AMSServerErrorDomain,  v7));
      [v10 addObject:v11];
    }

    goto LABEL_5;
  }

LABEL_6:
  return 1LL;
}

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  dispatch_queue_attr_t v6 = (uint64_t *)(v0 + 240);
  sub_100079604(*(void *)(v0 + 232), (uint64_t)qword_10033E1A8);
  sub_1000C600C();
  id v8 = static os_log_type_t.debug.getter(v7);
  os_log_t v9 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
  if (sub_1000B22A4(v10))
  {
    os_log_t v11 = sub_10007B9FC(22LL);
    unsigned __int8 v12 = sub_10007B9FC(64LL);
    v50[0] = v12;
    *(_DWORD *)os_log_t v11 = 136446466;
    *(void *)(v0 + 16_Block_object_dispose(va, 8) = sub_1000C625C(v12, v13, v14);
    sub_1000C6004(v0 + 168, v0 + 176);
    *(_WORD *)(v11 + 12) = 2082;
    *(void *)(v0 + 176) = sub_1000C6434( 0xD000000000000043LL,  (uint64_t)"Store change notification is not for the current store, ignoring...",  v46,  v47,  v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v11 + 14);
    sub_100086038((void *)&_mh_execute_header, v10, v9, "%{public}s%{public}s", (uint8_t *)v11);
    sub_100086030(v12, v15, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v12);
    sub_10007B974(v11);
  }

LABEL_11:
  sub_100085BC4(*v6, type metadata accessor for SKLogger);
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v4 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v4);
  sub_10007B9C4();
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v5 = sub_100079604(v4, (uint64_t)qword_10033E1A8);
  sub_10007961C(v5, v3);
  uint64_t v25 = 0LL;
  unint64_t v26 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(43LL);
  if (qword_100328AA8 != -1) {
    swift_once(&qword_100328AA8, sub_1000B238C);
  }
  uint64_t v7 = qword_10033E080;
  unint64_t v6 = *(void *)algn_10033E088;
  sub_10007BA3C();
  sub_10007B980();
  uint64_t v25 = v7;
  unint64_t v26 = v6;
  v8._countAndFlagsBits = 32LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  if (qword_100328AB0 != -1) {
    swift_once(&qword_100328AB0, sub_1000B23A4);
  }
  uint64_t v9 = qword_10033E090;
  uint64_t v10 = *(void **)algn_10033E098;
  swift_bridgeObjectRetain(*(void *)algn_10033E098);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._object = (void *)0x800000010029D080LL;
  v12._countAndFlagsBits = 0xD000000000000026LL;
  String.append(_:)(v12);
  uint64_t v14 = v25;
  unint64_t v13 = v26;
  LOBYTE(v10) = static os_log_type_t.default.getter(v15);
  uint64_t v16 = swift_bridgeObjectRetain_n(v26, 2LL);
  os_log_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = v10;
  if (os_log_type_enabled(v17, (os_log_type_t)v10))
  {
    uint64_t v19 = sub_10007B9FC(22LL);
    uint64_t v20 = sub_10007B9FC(64LL);
    uint64_t v25 = v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    sub_10007BA24(v20, v21, &v25);
    sub_10007B9B4();
    *(_WORD *)(v19 + 12) = 2082;
    sub_10007BA3C();
    sub_10007A488(v14, v13, &v25);
    sub_10007B9B4();
    sub_10007BA30();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s%{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v20);
    sub_10007B974(v19);
    sub_10007BA44();
  }

  else
  {

    sub_10007BA30();
  }

  sub_10007A3CC(v3);
  uint64_t v22 = objc_autoreleasePoolPush();
  sub_1000786E4();
  objc_autoreleasePoolPop(v22);
  qword_10033E068 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for ServiceListener()) init];
  id v23 = [(id)objc_opt_self(NSRunLoop) mainRunLoop];
  [v23 run];

  return 0;
}

uint64_t sub_1000786E4()
{
  if (qword_100328B58 != -1) {
    swift_once(&qword_100328B58, sub_10012268C);
  }
  [(id)objc_opt_self(OctaneListener) start];
  [(id)objc_opt_self(StoreKitServiceListener) start];

  if (qword_1003289B8 != -1) {
    swift_once(&qword_1003289B8, sub_100086618);
  }
  return sub_1000787D8();
}

uint64_t sub_1000787D8()
{
  uint64_t v1 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v1);
  sub_10007B9C4();
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10007B240();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
  unint64_t v6 = (dispatch_queue_s *)static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  aBlock[4] = (uint64_t)sub_100078A54;
  aBlock[5] = 0LL;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000795B4;
  aBlock[3] = (uint64_t)&unk_1002EAA00;
  uint64_t v7 = _Block_copy(aBlock);
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v6, v7);
  _Block_release(v7);

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v8 = sub_100079604(v1, (uint64_t)qword_10033E1A8);
  uint64_t v9 = sub_10007961C(v8, v0);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  os_log_type_t v11 = v10;
  Swift::String v12 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v13 = v11;
  if (os_log_type_enabled(v12, v11))
  {
    uint64_t v14 = sub_10007B9FC(22LL);
    uint64_t v15 = sub_10007B9FC(64LL);
    aBlock[0] = v15;
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v19 = sub_10007BA24(v15, v16, aBlock);
    sub_10007BA04();
    *(_WORD *)(v14 + 12) = 2082;
    uint64_t v19 = sub_10007A488(0xD000000000000029LL, 0x800000010029D420LL, aBlock);
    sub_10007BA04();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s%{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v15);
    sub_10007B974(v14);
  }

  return sub_10007A3CC(v0);
}

void sub_100078A54(void *a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v78 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  os_log_type_t v11 = (char *)&v78 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v78 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v78 - v15;
  xpc_type_t type = xpc_get_type(a1);
  if (type != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v18 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
    uint64_t v19 = sub_10007961C(v18, (uint64_t)v5);
    uint64_t v20 = static os_log_type_t.error.getter(v19);
    os_log_type_t v21 = v20;
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v23 = v21;
    if (os_log_type_enabled(v22, v21))
    {
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v25 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v84 = v25;
      *(_DWORD *)uint64_t v24 = 136446466;
      uint64_t v82 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v24 + 4);
      *(_WORD *)(v24 + 12) = 2082;
      uint64_t v82 = sub_10007A488(0xD00000000000002CLL, 0x800000010029D450LL, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v24 + 14);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s%{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v26 = (uint64_t)v5;
LABEL_31:
    sub_10007A3CC(v26);
    return;
  }

  uint64_t ObjectType = swift_getObjectType(a1);
  sub_10011C3D0(ObjectType, &v84);
  if (!v85)
  {
    sub_10007B294((uint64_t)&v84);
    goto LABEL_19;
  }

  uint64_t v28 = sub_10007B1FC(&qword_10032A580);
  if ((swift_dynamicCast(&v82, &v84, (char *)&type metadata for Any + 8, v28, 6LL) & 1) == 0)
  {
LABEL_19:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v50 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
    uint64_t v51 = sub_10007961C(v50, (uint64_t)v16);
    uint64_t v52 = static os_log_type_t.error.getter(v51);
    os_log_type_t v53 = v52;
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v52);
    if (os_log_type_enabled(v54, v53))
    {
      uint64_t v55 = swift_slowAlloc(22LL, -1LL);
      uint64_t v56 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v84 = v56;
      *(_DWORD *)uint64_t v55 = 136446466;
      uint64_t v82 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 4);
      *(_WORD *)(v55 + 12) = 2082;
      uint64_t v82 = sub_10007A488(0xD00000000000002DLL, 0x800000010029D480LL, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 14);
      _os_log_impl((void *)&_mh_execute_header, v54, v53, "%{public}s%{public}s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    uint64_t v26 = (uint64_t)v16;
    goto LABEL_31;
  }

  uint64_t v29 = v82;
  uint64_t v30 = XPC_EVENT_KEY_NAME.getter();
  uint64_t v31 = String.init(utf8String:)(v30);
  if (!v32) {
    goto LABEL_24;
  }
  uint64_t v33 = v32;
  sub_10012A674(v31, v32, v29, &v84);
  swift_bridgeObjectRelease(v33);
  if (!v85)
  {
    swift_bridgeObjectRelease(v29);
    sub_10007B294((uint64_t)&v84);
    goto LABEL_26;
  }

  if ((swift_dynamicCast(&v82, &v84, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_24:
    swift_bridgeObjectRelease(v29);
LABEL_26:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v57 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
    uint64_t v58 = sub_10007961C(v57, (uint64_t)v8);
    uint64_t v59 = static os_log_type_t.error.getter(v58);
    os_log_type_t v60 = v59;
    v61 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v62 = v60;
    if (os_log_type_enabled(v61, v60))
    {
      uint64_t v63 = swift_slowAlloc(22LL, -1LL);
      uint64_t v64 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v84 = v64;
      *(_DWORD *)uint64_t v63 = 136446466;
      uint64_t v82 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v63 + 4);
      *(_WORD *)(v63 + 12) = 2082;
      uint64_t v82 = sub_10007A488(0xD00000000000002CLL, 0x800000010029D4B0LL, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v63 + 14);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%{public}s%{public}s", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy(v64, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    uint64_t v26 = (uint64_t)v8;
    goto LABEL_31;
  }

  id v34 = v83;
  uint64_t v81 = v82;
  sub_10012A674(0x6F666E4972657355LL, 0xE800000000000000LL, v29, &v84);
  swift_bridgeObjectRelease(v29);
  if (!v85)
  {
    sub_10007B294((uint64_t)&v84);
    goto LABEL_33;
  }

  if ((swift_dynamicCast(&v82, &v84, (char *)&type metadata for Any + 8, v28, 6LL) & 1) == 0)
  {
LABEL_33:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v65 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
    sub_10007961C(v65, (uint64_t)v14);
    *(void *)&__int128 v84 = 0LL;
    *((void *)&v84 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease(*((void *)&v84 + 1));
    *(void *)&__int128 v84 = 0xD000000000000015LL;
    *((void *)&v84 + 1) = 0x800000010029D4E0LL;
    v66._countAndFlagsBits = v81;
    v66._object = v34;
    String.append(_:)(v66);
    __int128 v67 = v84;
    os_log_type_t v68 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
    uint64_t v69 = swift_bridgeObjectRetain_n(*((void *)&v67 + 1), 2LL);
    v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = v68;
    if (os_log_type_enabled(v70, v68))
    {
      uint64_t v72 = swift_slowAlloc(22LL, -1LL);
      uint64_t v73 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v84 = v73;
      *(_DWORD *)uint64_t v72 = 136446466;
      v80 = v34;
      uint64_t v82 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v72 + 4);
      *(_WORD *)(v72 + 12) = 2082;
      swift_bridgeObjectRetain(*((void *)&v67 + 1));
      uint64_t v82 = sub_10007A488(v67, *((unint64_t *)&v67 + 1), (uint64_t *)&v84);
      id v34 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v72 + 14);
      swift_bridgeObjectRelease_n(*((void *)&v67 + 1), 3LL);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "%{public}s%{public}s", (uint8_t *)v72, 0x16u);
      swift_arrayDestroy(v73, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_bridgeObjectRelease(*((void *)&v67 + 1));
    }

    else
    {

      swift_bridgeObjectRelease_n(*((void *)&v67 + 1), 3LL);
    }

    sub_10007A3CC((uint64_t)v14);
    id v74 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    NSString v75 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
    [v74 postNotificationName:v75 object:0];
    goto LABEL_41;
  }

  __int16 v35 = (void *)v82;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v36 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
  sub_10007961C(v36, (uint64_t)v11);
  *(void *)&__int128 v84 = 0LL;
  *((void *)&v84 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease(*((void *)&v84 + 1));
  *(void *)&__int128 v84 = 0xD000000000000015LL;
  *((void *)&v84 + 1) = 0x800000010029D4E0LL;
  v37._countAndFlagsBits = v81;
  v37._object = v34;
  String.append(_:)(v37);
  v38._countAndFlagsBits = 0x666E497265737520LL;
  v38._object = (void *)0xEB00000000203A6FLL;
  String.append(_:)(v38);
  v39._countAndFlagsBits = Dictionary.description.getter( v35,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  object = v39._object;
  String.append(_:)(v39);
  uint64_t v41 = swift_bridgeObjectRelease(object);
  __int128 v42 = v84;
  os_log_type_t v43 = static os_log_type_t.debug.getter(v41);
  uint64_t v44 = swift_bridgeObjectRetain_n(*((void *)&v42 + 1), 2LL);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  if (os_log_type_enabled(v45, v43))
  {
    uint64_t v46 = swift_slowAlloc(22LL, -1LL);
    uint64_t v47 = swift_slowAlloc(64LL, -1LL);
    v80 = v35;
    uint64_t v48 = v47;
    *(void *)&__int128 v84 = v47;
    *(_DWORD *)uint64_t v46 = 136446466;
    uint64_t v82 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v84);
    v79 = (char *)&type metadata for Any + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v46 + 4);
    *(_WORD *)(v46 + 12) = 2082;
    swift_bridgeObjectRetain(*((void *)&v42 + 1));
    uint64_t v82 = sub_10007A488(v42, *((unint64_t *)&v42 + 1), (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v46 + 14);
    swift_bridgeObjectRelease_n(*((void *)&v42 + 1), 3LL);
    _os_log_impl((void *)&_mh_execute_header, v45, v43, "%{public}s%{public}s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy(v48, 2LL, v79);
    uint64_t v49 = v48;
    __int16 v35 = v80;
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_bridgeObjectRelease(*((void *)&v42 + 1));
  }

  else
  {

    swift_bridgeObjectRelease_n(*((void *)&v42 + 1), 3LL);
  }

  sub_10007A3CC((uint64_t)v11);
  id v74 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  NSString v75 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  sub_100121248(v35);
  uint64_t v77 = v76;
  swift_bridgeObjectRelease(v35);
  sub_10007AF14((uint64_t)v75, 0LL, v77, v74);
LABEL_41:
}

uint64_t sub_1000795B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

  ;
}

uint64_t sub_100079604(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10007961C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SKLogger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100079660(uint64_t a1)
{
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000796A0(uint64_t a1)
{
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000796E4(uint64_t a1)
{
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100079724@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_10007972C()
{
}

void sub_10007974C(uint64_t a1, id *a2)
{
}

uint64_t sub_100079760(uint64_t a1, id *a2)
{
  return sub_10007B0D4(a1, a2) & 1;
}

void sub_100079778()
{
  uint64_t v1 = sub_10007B968();
  *uint64_t v0 = AuditToken.rawValue.getter(v1);
  sub_1000221B0();
}

BOOL sub_100079798(uint64_t *a1, uint64_t *a2)
{
  return sub_1000CEDD0(*a1, *a2);
}

void sub_1000797A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

void sub_1000797C8()
{
}

void sub_1000797E8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_10007B980();
  sub_1000221B0();
}

uint64_t sub_100079818(uint64_t a1)
{
  return sub_100079830(a1, *v1);
}

uint64_t sub_100079830(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10007B9A0(a1, a2);
  sub_10007B988(v3, v4);
  return sub_10007B9AC(v2);
}

uint64_t sub_100079850(uint64_t a1)
{
  return sub_100130CE8(a1, *v1);
}

id sub_100079858()
{
  return *v0;
}

uint64_t sub_100079860(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10027A1B8, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10007989C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10027A1B8, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000798E4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10027A1B8, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

void *sub_10007993C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_10007994C(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_100079958(uint64_t *a1@<X8>)
{
  *a1 = variable initialization expression of ExternalGatewaySheetRequest.options();
  sub_1000221B0();
}

void sub_100079978(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void sub_100079984(_BYTE *a1@<X8>)
{
  *a1 = AuditToken.rawValue.getter(*v1);
  sub_1000221B0();
}

uint64_t sub_1000799A8(void *a1, void *a2)
{
  return sub_1000F8E5C(*a1, *a2);
}

uint64_t sub_1000799B4(uint64_t a1)
{
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000799F4(uint64_t a1)
{
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100079A34(uint64_t a1)
{
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_100079A74(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v3 & 1;
}

uint64_t sub_100079AA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AuditToken.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void sub_100079ACC()
{
  uint64_t v1 = sub_10007B968();
  *uint64_t v0 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_1000221B0();
}

uint64_t sub_100079AF0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
}

uint64_t sub_100079B00(uint64_t a1)
{
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100079B40(uint64_t a1)
{
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100079B80(void *a1, uint64_t a2)
{
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100079BE4(uint64_t a1, uint64_t a2)
{
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100079C3C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
}

uint64_t sub_100079C4C(uint64_t a1)
{
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100079C8C(uint64_t a1)
{
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100079CCC(void *a1, uint64_t a2)
{
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100079D30()
{
  return sub_10007B170(*v0);
}

uint64_t sub_100079D38(uint64_t a1, uint64_t a2)
{
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void sub_100079D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[9] = *v3;
  Hasher.init(_seed:)(v6);
  dispatch thunk of Hashable.hash(into:)(v6, a2, a3);
  Hasher._finalize()();
  sub_10007B9DC();
}

uint64_t sub_100079DD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10027A1B8, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

void *sub_100079E24@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100079E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100079E8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100079EB8(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_100329040,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_100279E10);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100079F3C(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_100328DF8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_10027941C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100079FC0(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_100329080,  (uint64_t (*)(uint64_t))type metadata accessor for SKServerKey,  (uint64_t)&unk_100279954);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10007A044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10007A09C(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_100329060,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_100279BA4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10007A120(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_100329050,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_100279CFC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_10007A1A4()
{
  uint64_t v1 = sub_10007B968();
  *uint64_t v0 = j_j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_1000221B0();
}

uint64_t sub_10007A1C4(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_100329070,  (uint64_t (*)(uint64_t))type metadata accessor for SKClientOverridesKey,  (uint64_t)&unk_100279A54);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10007A248@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = sub_10007B980();
  *a1 = v2;
  return result;
}

uint64_t sub_10007A288(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10007ACCC( &qword_100329090,  (uint64_t (*)(uint64_t))type metadata accessor for OctaneStorefrontKey,  (uint64_t)&unk_100279854);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_10007A30C(uint64_t a1)
{
}

uint64_t sub_10007A324(uint64_t *a1, uint64_t *a2)
{
  return sub_10007AFA0(*a1, *a2) & 1;
}

uint64_t sub_10007A344(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  _BYTE *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_10007A354( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10007A388(Swift::Int a1)
{
  if (a1 < 16) {
    return 0LL;
  }
  _StringGuts.grow(_:)(a1);
  return 0LL;
}

uint64_t sub_10007A3CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10007A408(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10007A428(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  uint64_t v8 = sub_10007A488(v6, v7, a3);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  uint64_t v11 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v9);
  sub_10007B980();
  *a1 = v10;
  sub_10007B9EC();
}

uint64_t sub_10007A488(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10007A554(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10007B1C0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10007B1C0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    sub_10007BA3C();
  }

  sub_10007B1A0(v12);
  return v7;
}

void *sub_10007A554(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10007A6A8((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = sub_10007A76C(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_10007A6A8(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_10007A76C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_10007A800(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_10007A970(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10007A970((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_10007A800(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  sub_1000E83B0(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 32, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return (void *)v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

char *sub_10007A970(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC(&qword_100328EC0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10007AB08(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_10007AA44(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10007AA44(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_10007AB08(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

_BYTE **sub_10007AB88(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = *result;
  _BYTE *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void type metadata accessor for AMSRequestMethod(uint64_t a1)
{
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for MessageServerResponse.ProductOffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_10007ABF4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AuditToken(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AuditToken(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for ASDError(uint64_t a1)
{
}

void sub_10007AC74()
{
}

void sub_10007ACA0()
{
}

void sub_10007ACCC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_1000221B0();
}

void sub_10007AD08()
{
}

void sub_10007AD34()
{
}

void sub_10007AD60()
{
}

void sub_10007AD8C()
{
}

void sub_10007ADB8()
{
}

void sub_10007ADE4()
{
}

void sub_10007AE10()
{
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void sub_10007AE50()
{
}

unint64_t sub_10007AE80()
{
  unint64_t result = qword_100328DD8;
  if (!qword_100328DD8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100328DD8);
  }

  return result;
}

void sub_10007AEBC()
{
}

void sub_10007AEE8()
{
}

void sub_10007AF14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  [a4 postNotificationName:a1 object:a2 userInfo:isa];
}

uint64_t sub_10007AFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease(v5);
  sub_10007B980();
  return v9 & 1;
}

void sub_10007B024(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10007B9A0(a1, a2);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v5);
  String.hash(into:)(v5, v2, v4);
  Hasher._finalize()();
  sub_10007BA44();
  sub_10007B9DC();
}

void sub_10007B07C(uint64_t a1, id *a2)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  static String._forceBridgeFromObjectiveC(_:result:)(v3, &v5);
  if (v6)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    sub_10007B980();
  }

  else
  {
    NSString v4 = 0LL;
  }

  void *v2 = v4;
  sub_10007B9EC();
}

uint64_t sub_10007B0D4(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v7);
  if (v8)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    sub_10007BA44();
  }

  else
  {
    NSString v5 = 0LL;
  }

  void *v2 = v5;
  return v4 & 1;
}

void sub_10007B140(uint64_t a1)
{
  uint64_t v2 = v1;
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  sub_1000221B0();
}

uint64_t sub_10007B170(void *a1)
{
  id v1 = a1;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10007B1A0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10007B1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10007B1FC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10007B240()
{
  unint64_t result = qword_100328EC8;
  if (!qword_100328EC8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100328EC8);
  }

  return result;
}

uint64_t sub_10007B27C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007B28C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10007B294(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC((uint64_t *)&unk_100328ED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for os_eligibility_answer_t(uint64_t a1)
{
}

void type metadata accessor for os_eligibility_domain_t(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for CFData(uint64_t a1)
{
}

void type metadata accessor for CFBoolean(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for SKClientOverridesKey(uint64_t a1)
{
}

void type metadata accessor for SKServerKey(uint64_t a1)
{
}

void type metadata accessor for OctaneStorefrontKey(uint64_t a1)
{
}

void sub_10007B3D8()
{
}

void sub_10007B404()
{
}

void sub_10007B430()
{
}

void sub_10007B45C()
{
}

void sub_10007B488()
{
}

void sub_10007B4B4()
{
}

void sub_10007B4E0()
{
}

void sub_10007B50C()
{
}

void sub_10007B538()
{
}

void sub_10007B564()
{
}

void sub_10007B590()
{
}

void sub_10007B5BC()
{
}

void sub_10007B5E8()
{
}

void sub_10007B614()
{
}

void sub_10007B640()
{
}

void sub_10007B66C()
{
}

void type metadata accessor for AMSError(uint64_t a1)
{
}

void sub_10007B6AC()
{
}

void sub_10007B6D8()
{
}

void sub_10007B704()
{
}

void sub_10007B730()
{
}

void sub_10007B75C()
{
}

void sub_10007B788()
{
}

void sub_10007B7B4()
{
}

void sub_10007B7E0()
{
}

void sub_10007B80C()
{
}

void sub_10007B838()
{
}

void sub_10007B864()
{
}

void sub_10007B890()
{
}

void sub_10007B8BC()
{
}

void type metadata accessor for StoreKitMessageEvent(uint64_t a1)
{
}

void sub_10007B8FC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_10007B968()
{
  return *(void *)v0;
}

uint64_t sub_10007B974(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

uint64_t sub_10007B980()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10007B988(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(v2, a1, a2);
}

uint64_t sub_10007B9A0(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

uint64_t sub_10007B9AC(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10007B9B4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v1, v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10007B9FC(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_10007BA04()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v1, v0);
}

void sub_10007BA14(uint64_t a1, id *a2)
{
}

uint64_t sub_10007BA24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(0LL, 0xE000000000000000LL, a3);
}

uint64_t sub_10007BA30()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_10007BA3C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10007BA44()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10007BA4C()
{
  uint64_t result = sub_10007BA68();
  qword_100329230 = result;
  return result;
}

uint64_t sub_10007BA68()
{
  id v35 = (id)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  id v0 = [v35 interfaceWithProtocol:&OBJC_PROTOCOL___ServiceProtocol];
  sub_10007CB7C(0LL, (unint64_t *)&unk_1003292E0, &OBJC_CLASS___NSSet_ptr);
  uint64_t v36 = sub_10007B1FC((uint64_t *)&unk_10032C520);
  uint64_t v1 = swift_allocObject(v36, 96LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_10027A330;
  uint64_t v2 = sub_10007CB7C(0LL, (unint64_t *)&qword_1003292F0, &OBJC_CLASS___NSError_ptr);
  uint64_t v3 = sub_10007B1FC(&qword_1003292F8);
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 32) = v2;
  uint64_t v4 = sub_10007CB7C(0LL, &qword_100329300, &OBJC_CLASS___AMSDialogRequest_ptr);
  uint64_t v5 = sub_10007B1FC(&qword_100329308);
  *(void *)(v1 + 8_Block_object_dispose(va, 8) = v5;
  *(void *)(v1 + 64) = v4;
  uint64_t v6 = (void *)NSSet.init(objects:)(v1);
  uint64_t v37 = 0LL;
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)( v6,  &v37,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t v8 = v37;
  if (!v37)
  {
    __break(1u);
    goto LABEL_7;
  }

  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  [v0 setClasses:isa forSelector:"processPaymentWithBuyParamsString:reply:" argumentIndex:1 ofReply:1];

  uint64_t v10 = swift_allocObject(v36, 96LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_10027A330;
  *(void *)(v10 + 32) = v2;
  *(void *)(v10 + 8_Block_object_dispose(va, 8) = v5;
  *(void *)(v10 + 56) = v3;
  *(void *)(v10 + 64) = v4;
  uint64_t v11 = (void *)NSSet.init(objects:)(v10);
  uint64_t v37 = 0LL;
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)( v11,  &v37,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t v12 = v37;
  if (!v37)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  Class v13 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v13);

  uint64_t v14 = swift_allocObject(v36, 288LL, 7LL);
  *(_OWORD *)(v14 + 16) = xmmword_10027A340;
  uint64_t v15 = sub_10007CB7C(0LL, &qword_100329310, &OBJC_CLASS___NSDictionary_ptr);
  *(void *)(v14 + 56) = sub_10007B1FC(&qword_100329318);
  *(void *)(v14 + 32) = v15;
  uint64_t v16 = sub_10007CB7C(0LL, &qword_100329320, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v14 + 8_Block_object_dispose(va, 8) = sub_10007B1FC(&qword_100329328);
  *(void *)(v14 + 64) = v16;
  uint64_t v17 = sub_10007CB7C(0LL, &qword_100329330, &OBJC_CLASS___NSString_ptr);
  *(void *)(v14 + 120) = sub_10007B1FC(&qword_100329338);
  *(void *)(v14 + 96) = v17;
  uint64_t v18 = sub_10007CB7C(0LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v14 + 152) = sub_10007B1FC(&qword_100329348);
  *(void *)(v14 + 12_Block_object_dispose(va, 8) = v18;
  uint64_t v19 = sub_10007CB7C(0LL, &qword_100329350, &OBJC_CLASS___NSData_ptr);
  uint64_t v20 = sub_10007B1FC(&qword_100329358);
  *(void *)(v14 + 184) = v20;
  *(void *)(v14 + 160) = v19;
  uint64_t v21 = sub_10007CB7C(0LL, &qword_100329360, &OBJC_CLASS___NSDate_ptr);
  *(void *)(v14 + 216) = sub_10007B1FC(&qword_100329368);
  *(void *)(v14 + 192) = v21;
  uint64_t v22 = sub_10007CB7C(0LL, &qword_100329370, &OBJC_CLASS___NSURL_ptr);
  uint64_t v23 = sub_10007B1FC(&qword_100329378);
  *(void *)(v14 + 224) = v22;
  *(void *)(v14 + 280) = v3;
  *(void *)(v14 + 24_Block_object_dispose(va, 8) = v23;
  *(void *)(v14 + 256) = v2;
  uint64_t v24 = (void *)NSSet.init(objects:)(v14);
  uint64_t v37 = 0LL;
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)( v24,  &v37,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t v25 = v37;
  if (!v37)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  Class v26 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  [v0 setClasses:v26 forSelector:"processPayment:forClient:paymentDelegate:reply:" argumentIndex:0 ofReply:1];

  uint64_t v27 = swift_allocObject(v36, 96LL, 7LL);
  *(_OWORD *)(v27 + 16) = xmmword_10027A330;
  *(void *)(v27 + 32) = v19;
  *(void *)(v27 + 8_Block_object_dispose(va, 8) = v3;
  *(void *)(v27 + 56) = v20;
  *(void *)(v27 + 64) = v2;
  uint64_t v28 = (void *)NSSet.init(objects:)(v27);
  uint64_t v37 = 0LL;
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)( v28,  &v37,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t v29 = v37;
  if (v37)
  {

    Class v30 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    [v0 setClasses:v30 forSelector:"manageSubscriptionsEngagementRequestWithRequest:reply:" argumentIndex:1 ofReply:1];

    id v31 = [v35 interfaceWithProtocol:&OBJC_PROTOCOL___ProductResponseReceiver];
    [v0 setInterface:v31 forSelector:"productsWithRequest:responseReceiver:reply:" argumentIndex:1 ofReply:0];
    id v32 = [v35 interfaceWithProtocol:&OBJC_PROTOCOL___SKTransactionReceiverProtocol];
    [v0 setInterface:v32 forSelector:"enumerateCurrentReceiptsForProductID:withReceiver:reply:" argumentIndex:1 ofReply:0];
    [v0 setInterface:v32 forSelector:"enumerateReceiptsForProductID:withReceiver:reply:" argumentIndex:1 ofReply:0];
    [v0 setInterface:v32 forSelector:"enumerateUnfinishedTransactionsWithReceiver:reply:" argumentIndex:0 ofReply:0];
    id v33 = [v35 interfaceWithProtocol:&OBJC_PROTOCOL___SKPaymentDelegateProtocol];
    [v0 setInterface:v33 forSelector:"processPayment:forClient:paymentDelegate:reply:" argumentIndex:2 ofReply:0];
    id v34 = [v35 interfaceWithProtocol:&OBJC_PROTOCOL___SKStatusReceiverProtocol];
    [v0 setInterface:v34 forSelector:"enumerateSubscriptionStatusesWithReceiver:reply:" argumentIndex:0 ofReply:0];

    return (uint64_t)v0;
  }

char *sub_10007C0B4(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.storekitd");
  uint64_t v4 = v3;
  uint64_t v5 = v1;
  *(void *)&v5[OBJC_IVAR____TtC9storekitd15ServiceListener_listener] = sub_10007C1EC(v2, v4);

  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for ServiceListener();
  id v6 = objc_msgSendSuper2(&v13, "init");
  sub_10007CBC0((uint64_t)v6, &qword_100329278, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = (char *)v6;
  uint64_t v8 = (void *)static OS_os_log.default.getter();
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)( "Starting StoreKit Service",  25LL,  2LL,  &_mh_execute_header,  v8,  v9,  _swiftEmptyArrayStorage);

  uint64_t v10 = *(void **)&v7[OBJC_IVAR____TtC9storekitd15ServiceListener_listener];
  [v10 setDelegate:v7];
  id v11 = v10;
  [v11 resume];

  return v7;
}

id sub_10007C1EC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithMachServiceName:v5];

  return v6;
}

uint64_t sub_10007C27C(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v3);
  NSString v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [a2 processIdentifier];
  if ((_DWORD)v6 == getpid()) {
    return 0LL;
  }
  uint64_t v7 = (void **)sub_1000EAF94(a2);
  if (!v8)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v28 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
    sub_10007961C(v28, (uint64_t)v5);
    uint64_t v51 = 0LL;
    unint64_t v52 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(v52);
    uint64_t v51 = (void **)0xD00000000000001FLL;
    unint64_t v52 = 0x800000010029D7A0LL;
    LODWORD(v55) = (_DWORD)v6;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v29._object;
    String.append(_:)(v29);
    uint64_t v31 = swift_bridgeObjectRelease(object);
    uint64_t v33 = (uint64_t)v51;
    unint64_t v32 = v52;
    os_log_type_t v34 = static os_log_type_t.error.getter(v31);
    uint64_t v35 = sub_10007CBE4();
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = v34;
    if (os_log_type_enabled(v36, v34))
    {
      uint64_t v38 = sub_10007B9FC(22LL);
      uint64_t v39 = sub_10007B9FC(64LL);
      uint64_t v51 = (void **)v39;
      *(_DWORD *)uint64_t v38 = 136446466;
      uint64_t v55 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&v51);
      sub_10007CBC8();
      *(_WORD *)(v38 + 12) = 2082;
      swift_bridgeObjectRetain(v32);
      uint64_t v55 = sub_10007A488(v33, v32, (uint64_t *)&v51);
      sub_10007CBC8();
      sub_10007BA30();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%{public}s%{public}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
      sub_10007B974(v39);
      sub_10007B974(v38);
      swift_bridgeObjectRelease(v32);
    }

    else
    {

      sub_10007BA30();
    }

    sub_10007A3CC((uint64_t)v5);
    return 0LL;
  }

  uint64_t v51 = v7;
  unint64_t v52 = v8;
  v9._countAndFlagsBits = 91LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  LODWORD(v55) = (_DWORD)v6;
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  id v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 93LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  uint64_t v14 = v51;
  unint64_t v13 = v52;
  id v15 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SKClientProtocol];
  sub_10007CBD8((uint64_t)v15, "setRemoteObjectInterface:");

  sub_10007CBC0(v16, &qword_100329268, &off_1002E5CA8);
  id v17 = a2;
  id v18 = [v17 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)(&v51);
  swift_unknownObjectRelease(v18);
  uint64_t v19 = sub_10007B1FC(&qword_100329270);
  swift_dynamicCast(&v55, &v51, (char *)&type metadata for Any + 8, v19, 7LL);
  id v20 = sub_10007C878(v17, v55, (uint64_t)v6);
  sub_10007CBC0((uint64_t)v20, &qword_100329278, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v21 = swift_bridgeObjectRetain_n(v13, 2LL);
  uint64_t v22 = (os_log_s *)static OS_os_log.default.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v50 = v14;
  if (v24)
  {
    uint64_t v49 = (char *)&type metadata for Any + 8;
    uint64_t v25 = (uint8_t *)sub_10007B9FC(12LL);
    uint64_t v26 = (uint64_t)v14;
    uint64_t v27 = sub_10007B9FC(32LL);
    uint64_t v51 = (void **)v27;
    *(_DWORD *)uint64_t v25 = 136446210;
    swift_bridgeObjectRetain(v13);
    uint64_t v55 = sub_10007A488(v26, v13, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v25 + 4);
    swift_bridgeObjectRelease_n(v13, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Accepting new connection %{public}s", v25, 0xCu);
    swift_arrayDestroy(v27, 1LL, v49);
    sub_10007B974(v27);
    sub_10007B974((uint64_t)v25);
  }

  else
  {
    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  if (qword_1003289A0 != -1) {
    swift_once(&qword_1003289A0, sub_10007BA4C);
  }
  [v17 setExportedInterface:qword_100329230];
  [v17 setExportedObject:v20];
  uint64_t v40 = sub_10007CBFC((uint64_t)&unk_1002EAE50);
  uint64_t v41 = v50;
  *(void *)(v40 + 16) = v50;
  *(void *)(v40 + 24) = v13;
  os_log_type_t v53 = sub_10007CB24;
  uint64_t v54 = v40;
  uint64_t v51 = _NSConcreteStackBlock;
  unint64_t v52 = 1107296256LL;
  __int128 v42 = sub_10007CBF0((uint64_t)&unk_1002EAE68);
  uint64_t v43 = v54;
  swift_bridgeObjectRetain(v13);
  uint64_t v44 = swift_release(v43);
  sub_10007CBD8(v44, "setInvalidationHandler:");
  _Block_release(v42);
  uint64_t v45 = sub_10007CBFC((uint64_t)&unk_1002EAEA0);
  *(void *)(v45 + 16) = v41;
  *(void *)(v45 + 24) = v13;
  os_log_type_t v53 = sub_10007CB5C;
  uint64_t v54 = v45;
  uint64_t v51 = _NSConcreteStackBlock;
  unint64_t v52 = 1107296256LL;
  uint64_t v46 = sub_10007CBF0((uint64_t)&unk_1002EAEB8);
  swift_release(v54);
  [v17 setInterruptionHandler:v46];
  _Block_release(v46);
  [v17 resume];

  return 1LL;
}

id sub_10007C878(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)) initWithConnection:a1 remoteObject:a2 pid:a3];

  swift_unknownObjectRelease(a2);
  return v6;
}

void sub_10007C8DC(uint64_t a1, unint64_t a2, const char *a3)
{
  uint64_t v6 = sub_10007CBE4();
  oslog = (os_log_s *)static OS_os_log.default.getter(v6);
  os_log_type_t v7 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v7))
  {
    unint64_t v8 = (uint8_t *)sub_10007B9FC(12LL);
    uint64_t v9 = sub_10007B9FC(32LL);
    uint64_t v12 = v9;
    *(_DWORD *)unint64_t v8 = 136446210;
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = sub_10007A488(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8 + 4);
    sub_10007BA30();
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, a3, v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v9);
    sub_10007B974((uint64_t)v8);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

id sub_10007CAA0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServiceListener();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ServiceListener()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd15ServiceListener);
}

uint64_t sub_10007CB00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10007CB24()
{
}

uint64_t sub_10007CB44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007CB54(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10007CB5C()
{
}

uint64_t sub_10007CB7C(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10007CBC0(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_10007CB7C(0LL, a2, a3);
}

uint64_t sub_10007CBC8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v1, v0);
}

id sub_10007CBD8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_10007CBE4()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void *sub_10007CBF0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 136) = v1;
  *(void *)(v2 - 12_Block_object_dispose(va, 8) = a1;
  return _Block_copy((const void *)(v2 - 152));
}

uint64_t sub_10007CBFC(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t sub_10007CC08(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007CC44 + 4 * byte_10027A380[a1]))( 0xD000000000000025LL,  0x800000010029DA40LL);
}

uint64_t sub_10007CC44()
{
  return v0 + 11;
}

uint64_t sub_10007CCF8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000011LL;
  }
  else {
    return 0x40404C52554040LL;
  }
}

uint64_t sub_10007CD34(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10007CD94, 0LL, 0LL);
}

uint64_t sub_10007CD94()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v4 = *(uint64_t **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = (char *)v4 + *(int *)(type metadata accessor for ConsultMessageListenerTask(0LL) + 36);
  uint64_t v30 = 0LL;
  unint64_t v31 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0xE000000000000000LL;
  _print_unlocked<A, B>(_:_:)(v4, v0 + 16);
  v6._object = (void *)0x800000010029DA70LL;
  v6._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v6);
  unint64_t v7 = *(void *)(v0 + 24);
  uint64_t v28 = *(void *)(v0 + 16);
  uint64_t v8 = *v4;
  uint64_t v9 = (void *)v4[1];
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v1, v5, v3);
  swift_bridgeObjectRetain_n(v9, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain_n(v7, 2LL);
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v11))
  {
    uint64_t v25 = *(void *)(v0 + 72);
    uint64_t v26 = *(void *)(v0 + 64);
    uint64_t v27 = *(void *)(v0 + 80);
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v29 = v15;
    uint64_t v30 = 91LL;
    unint64_t v31 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v9);
    v16._countAndFlagsBits = v8;
    v16._object = v9;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 8285LL;
    v17._object = (void *)0xE200000000000000LL;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v9);
    *(void *)(v0 + 32) = sub_10007A488(91LL, 0xE100000000000000LL, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 4);
    swift_bridgeObjectRelease(0xE100000000000000LL);
    sub_10007D974((uint64_t)v9);
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 40) = sub_10007A488(v28, v7, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 14);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v11, "%{public}s%{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v15);
    sub_10007B974(v14);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 64);
    sub_10007D974((uint64_t)v9);
    sub_10007D974(v7);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  swift_bridgeObjectRelease(v7);
  uint64_t v21 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 48);
  uint64_t v23 = sub_10007D96C();
  sub_10007D0AC(v22, 1LL, 1LL, v23);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ConsultMessageListenerTask(uint64_t a1)
{
  uint64_t result = qword_100329990;
  if (!qword_100329990) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConsultMessageListenerTask);
  }
  return result;
}

uint64_t sub_10007D0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t *sub_10007D0B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = (void *)a2[2];
    uint64_t v9 = (void *)a2[3];
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v9;
    uint64_t v10 = (void *)a2[4];
    uint64_t v11 = *(int *)(a3 + 32);
    uint64_t v12 = (uint64_t *)((char *)a1 + v11);
    unint64_t v13 = (uint64_t *)((char *)a2 + v11);
    a1[4] = (uint64_t)v10;
    uint64_t v14 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
    swift_bridgeObjectRetain(v7);
    id v15 = v8;
    id v16 = v9;
    id v17 = v10;
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      uint64_t v18 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v18;
      uint64_t v19 = v13[2];
      uint64_t v20 = v13[3];
      v12[2] = v19;
      void v12[3] = v20;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
      uint64_t v21 = 1LL;
    }

    else
    {
      uint64_t v23 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v12, v13, v23);
      uint64_t v21 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v12, v14, v21);
    uint64_t v24 = *(int *)(a3 + 36);
    uint64_t v25 = (char *)v4 + v24;
    uint64_t v26 = (char *)a2 + v24;
    uint64_t v27 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v25, v26, v27);
  }

  return v4;
}

uint64_t sub_10007D204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(v4 + 8));
    swift_bridgeObjectRelease(*(void *)(v4 + 24));
  }

  else
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v4, v6);
  }

  uint64_t v7 = a1 + *(int *)(a2 + 36);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
}

void *sub_10007D2C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = (void *)a2[2];
  uint64_t v8 = (void *)a2[3];
  a1[2] = v7;
  a1[3] = v8;
  uint64_t v9 = (void *)a2[4];
  a1[4] = v9;
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  swift_bridgeObjectRetain(v6);
  id v14 = v7;
  id v15 = v8;
  id v16 = v9;
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    uint64_t v17 = v12[1];
    void *v11 = *v12;
    v11[1] = v17;
    uint64_t v18 = v12[2];
    uint64_t v19 = v12[3];
    id v11[2] = v18;
    v11[3] = v19;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    uint64_t v20 = 1LL;
  }

  else
  {
    uint64_t v21 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v11, v12, v21);
    uint64_t v20 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v11, v13, v20);
  uint64_t v22 = *(int *)(a3 + 36);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
  return a1;
}

void *sub_10007D3E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)a2[2];
  uint64_t v9 = (void *)a1[2];
  a1[2] = v8;
  id v10 = v8;

  uint64_t v11 = (void *)a2[3];
  uint64_t v12 = (void *)a1[3];
  a1[3] = v11;
  id v13 = v11;

  id v14 = (void *)a2[4];
  id v15 = (void *)a1[4];
  a1[4] = v14;
  id v16 = v14;

  if (a1 != a2)
  {
    uint64_t v17 = *(int *)(a3 + 32);
    uint64_t v18 = (void *)((char *)a1 + v17);
    uint64_t v19 = (void *)((char *)a2 + v17);
    sub_10007D540((uint64_t)a1 + v17);
    uint64_t v20 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      *uint64_t v18 = *v19;
      uint64_t v21 = v19[1];
      v18[1] = v21;
      v18[2] = v19[2];
      uint64_t v22 = v19[3];
      v18[3] = v22;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      uint64_t v23 = 1LL;
    }

    else
    {
      uint64_t v24 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v18, v19, v24);
      uint64_t v23 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v18, v20, v23);
  }

  uint64_t v25 = *(int *)(a3 + 36);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 24LL))(v26, v27, v28);
  return a1;
}

uint64_t sub_10007D540(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10007D57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  if (swift_getEnumCaseMultiPayload(v9, v10))
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 0LL);
  }

  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  return a1;
}

void *sub_10007D660(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t v9 = (void *)a1[3];
  a1[3] = a2[3];

  uint64_t v10 = (void *)a1[4];
  a1[4] = a2[4];

  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(a3 + 32);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    sub_10007D540((uint64_t)a1 + v11);
    uint64_t v14 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
    if (swift_getEnumCaseMultiPayload(v13, v14))
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v15 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v12, v13, v15);
      swift_storeEnumTagMultiPayload(v12, v14, 0LL);
    }
  }

  uint64_t v16 = *(int *)(a3 + 36);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_10007D784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007D790);
}

uint64_t sub_10007D790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10007D96C();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 32);
    }

    else
    {
      uint64_t v9 = type metadata accessor for SKLogger(0LL);
      uint64_t v10 = *(int *)(a3 + 36);
    }

    return sub_10007D824(a1 + v10, a2, v9);
  }

uint64_t sub_10007D824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_10007D830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007D83C);
}

uint64_t sub_10007D83C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_10007D96C();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 32);
    }

    else
    {
      uint64_t v9 = type metadata accessor for SKLogger(0LL);
      uint64_t v10 = *(int *)(a4 + 36);
    }

    return sub_10007D0AC(v5 + v10, a2, a2, v9);
  }

  return result;
}

uint64_t sub_10007D8CC(uint64_t a1)
{
  v5[0] = &unk_10027A3C0;
  v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for MessageServerResponse.MessageItem(319LL);
  if (v3 <= 0x3F)
  {
    void v5[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      void v5[5] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 6LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10007D96C()
{
  return type metadata accessor for MessageServerResponse.MessageItem(0LL);
}

uint64_t sub_10007D974(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_10007D97C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    LODWORD(v2) = 0;
    unint64_t v3 = (int *)(a1 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if ((v5 & ~(_DWORD)v2) == 0) {
        int v4 = 0;
      }
      uint64_t v2 = v4 | v2;
      --v1;
    }

    while (v1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t sub_10007DA04()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_name);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_name + 8));
  return v1;
}

uint64_t sub_10007DA5C()
{
  return sub_10007F198(OBJC_IVAR____TtC9storekitd14SQLiteFunction_argumentCount);
}

uint64_t sub_10007DA68()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10007DA90@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = AuditToken.rawValue.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007DAB8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sub_1000187C0();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of ExternalGatewaySheetRequest.options()
{
  return 0LL;
}

uint64_t sub_10007DAE4@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_10007DB10(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10007DB10(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t sub_10007DB18@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_10007DB44(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10007DB44(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t sub_10007DB4C@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_10007DB78(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10007DB78(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

BOOL sub_10007DB80(_DWORD *a1, int *a2)
{
  return sub_10007DB88(a1, *a2);
}

BOOL sub_10007DB88(_DWORD *a1, int a2)
{
  int v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

unint64_t sub_10007DBB4@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10007DBE4(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

unint64_t sub_10007DBE4(unsigned int a1)
{
  int v2 = *v1;
  int v3 = *v1 & a1;
  if (v3)
  {
    *uint64_t v1 = v2 & ~a1;
    uint64_t v4 = v2 & a1;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4 | ((unint64_t)(v3 == 0) << 32);
}

unint64_t sub_10007DC24@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10007DC54(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

unint64_t sub_10007DC54(unsigned int a1)
{
  int v2 = *v1;
  *v1 |= a1;
  return v2 & a1 | ((unint64_t)((v2 & a1) == 0) << 32);
}

uint64_t sub_10007DC80(unsigned int *a1)
{
  return sub_10007DC88(*a1);
}

uint64_t sub_10007DC88(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_10007DC98(unsigned int *a1)
{
  return sub_10007DCA0(*a1);
}

uint64_t sub_10007DCA0(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_10007DCB0(unsigned int *a1)
{
  return sub_10007DCB8(*a1);
}

uint64_t sub_10007DCB8(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_10007DCC8@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_10007DCF4(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10007DCF4(int a1, int a2)
{
  return a2 & ~a1;
}

BOOL sub_10007DCFC(int *a1)
{
  return sub_10007DD08(*a1, *v1);
}

BOOL sub_10007DD08(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_10007DD14(int *a1)
{
  return sub_10007DD20(*a1, *v1);
}

BOOL sub_10007DD20(int a1, int a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_10007DD2C(int *a1)
{
  return sub_10007DD38(*a1, *v1);
}

BOOL sub_10007DD38(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_10007DD44()
{
  return sub_10007DD4C(*v0);
}

BOOL sub_10007DD4C(int a1)
{
  return a1 == 0;
}

uint64_t sub_10007DD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10007DD70(unsigned int *a1)
{
  return sub_10007DD78(*a1);
}

uint64_t sub_10007DD78(uint64_t result)
{
  *v1 &= ~(_DWORD)result;
  return result;
}

uint64_t sub_10007DD88@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AuditToken.rawValue.getter(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL sub_10007DDB4(int *a1, int *a2)
{
  return sub_1000F9354(*a1, *a2);
}

uint64_t sub_10007DDC0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_10007D97C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007DE08()
{
  return (*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_flagStorage + 1) >> 3) & 1;
}

BOOL sub_10007DE44()
{
  return (*(_BYTE *)(v0 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_flagStorage + 2) & 8) == 0;
}

uint64_t sub_10007DE80()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_flagStorage);
}

id sub_10007DE90(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v8);
  uint64_t v18 = &v8[OBJC_IVAR____TtC9storekitd14SQLiteFunction_name];
  *(void *)uint64_t v18 = a1;
  *((void *)v18 + 1) = a2;
  if ((a6 & 1) != 0) {
    uint64_t v19 = -1LL;
  }
  else {
    uint64_t v19 = a5;
  }
  *(void *)&v8[OBJC_IVAR____TtC9storekitd14SQLiteFunction_argumentCount] = v19;
  uint64_t v20 = &v8[OBJC_IVAR____TtC9storekitd14SQLiteFunction_implementation];
  *(void *)uint64_t v20 = a7;
  *((void *)v20 + 1) = a8;
  if ((a3 & 1) != 0) {
    int v21 = 526337;
  }
  else {
    int v21 = 524289;
  }
  if ((a4 & 1) != 0) {
    v21 &= 0x7FFFFu;
  }
  *(_DWORD *)&v8[OBJC_IVAR____TtC9storekitd14SQLiteFunction_flagStorage] = v21;
  v23.receiver = v8;
  v23.super_class = ObjectType;
  return objc_msgSendSuper2(&v23, "init");
}

uint64_t sub_10007DF8C()
{
  return sub_10007F198(OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_name);
}

uint64_t sub_10007DFBC(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_name);
}

uint64_t sub_10007DFE8()
{
  return sub_10007F198(OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_implementation);
}

uint64_t sub_10007E018(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_implementation);
}

uint64_t sub_10007E044()
{
  return sub_10007F198(OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_xFunc);
}

uint64_t sub_10007E074(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_xFunc);
}

uint64_t sub_10007E0A0()
{
  return sub_10007F198(OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_xDestroy);
}

uint64_t sub_10007E0D0(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_xDestroy);
}

id sub_10007E0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v4);
  *(void *)&v4[OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_name] = a1;
  *(void *)&v4[OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_implementation] = a2;
  *(void *)&v4[OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_xFunc] = a3;
  *(void *)&v4[OBJC_IVAR____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers_xDestroy] = a4;
  v11.receiver = v4;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "init");
}

void sub_10007E168()
{
}

void sub_10007E19C(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_implementation);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_implementation + 8);
  uint64_t v6 = type metadata accessor for SQLiteFunction.ImplementationBox();
  uint64_t v7 = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v4;
  uint64_t v8 = a1 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_name;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_name);
  uint64_t v10 = *(void *)(v8 + 8);
  _Block_copy(a2);
  swift_retain(v4);
  sub_10007E828(v9, v10, v7, a2);
  _Block_release(a2);
}

void sub_10007E23C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v6 = objc_allocWithZone((Class)type metadata accessor for SQLiteFunction.SQLiteFunctionPointers());
  id v7 = sub_10007E0DC(a1, a2, (uint64_t)sub_10007E2B8, (uint64_t)sub_10007E818);
  a3();
}

sqlite3_context *sub_10007E2BC(sqlite3_context *result, int a2, sqlite3_value **a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = (sqlite3_context *)sqlite3_user_data(result);
    if (result)
    {
      uint64_t v30 = (uint64_t (*)(void *))*((void *)result + 2);
      uint64_t v31 = swift_retain(*((void *)result + 3));
      if (a3 && a2)
      {
        uint64_t v6 = 8LL * a2;
        id v7 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v8 = *a3;
          if (*a3)
          {
            switch(sqlite3_value_type(*a3))
            {
              case 1:
                uint64_t v9 = sqlite3_value_int64(v8);
                unint64_t v10 = 0LL;
                char v11 = 0;
                goto LABEL_23;
              case 2:
                *(double *)&uint64_t v19 = sqlite3_value_double(v8);
                unint64_t v10 = 0LL;
                uint64_t v9 = v19;
                char v11 = 1;
                goto LABEL_23;
              case 3:
                if (sqlite3_value_text(v8))
                {
                  uint64_t v9 = String.init(cString:)();
                  unint64_t v10 = v12;
                  char v11 = 2;
                }

                else
                {
                  uint64_t v9 = 0LL;
                  char v11 = 2;
                  unint64_t v10 = 0xE000000000000000LL;
                }

                goto LABEL_23;
              case 4:
                uint64_t v9 = (uint64_t)sqlite3_value_blob(v8);
                if (!v9) {
                  goto LABEL_19;
                }
                int v13 = sqlite3_value_bytes(v8);
                if (v13)
                {
                  uint64_t v14 = v13;
                  if (v13 < 15)
                  {
                    memset(__dst, 0, sizeof(__dst));
                    unsigned __int8 v33 = v13;
                    memcpy(__dst, (const void *)v9, v13);
                    uint64_t v9 = *(void *)__dst;
                    unint64_t v10 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v33 << 48);
                  }

                  else
                  {
                    uint64_t v15 = type metadata accessor for __DataStorage(0LL);
                    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
                    uint64_t v16 = v9;
                    if ((_DWORD)v14 == 0x7FFFFFFF)
                    {
                      uint64_t v17 = __DataStorage.init(bytes:length:)(v9, 0x7FFFFFFFLL);
                      uint64_t v18 = type metadata accessor for Data.RangeReference(0LL);
                      uint64_t v9 = swift_allocObject(v18, 32LL, 7LL);
                      *(_OWORD *)(v9 + 16) = xmmword_10027A3E0;
                      unint64_t v10 = v17 | 0x8000000000000000LL;
                    }

                    else
                    {
                      uint64_t v9 = v14 << 32;
                      unint64_t v10 = __DataStorage.init(bytes:length:)(v16, v14) | 0x4000000000000000LL;
                    }
                  }

                  char v11 = 3;
                }

                else
                {
                  uint64_t v9 = 0LL;
LABEL_19:
                  char v11 = 3;
                  unint64_t v10 = 0xC000000000000000LL;
                }

uint64_t sub_10007E81C(uint64_t result)
{
  if (result) {
    return swift_release(result);
  }
  return result;
}

void sub_10007E828(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  uint64_t v14 = aBlock;
  v12[2] = a3;
  void v12[3] = sub_10007EEAC;
  void v12[4] = &v13;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _Block_copy(aBlock);
    _StringGuts._slowWithCString<A>(_:)(sub_10007EEBC, v12, a1, a2);
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v15[0] = a1;
    v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    objc_allocWithZone((Class)type metadata accessor for SQLiteFunction.SQLiteFunctionPointers());
    _Block_copy(aBlock);
    _Block_copy(aBlock);
    id v10 = sub_10007E0DC((uint64_t)v15, a3, (uint64_t)sub_10007E2B8, (uint64_t)sub_10007E818);
    (*((void (**)(void *, id))aBlock + 2))(aBlock, v10);

    _Block_release(aBlock);
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v8 = _StringObject.sharedUTF8.getter(a1, a2);
      uint64_t v9 = v11;
    }

    _Block_copy(aBlock);
    sub_10007EED8(v8, v9, a3, (void (*)(void))sub_10007EEAC);
  }

  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_10007E9C0(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  v8[2] = a3;
  if ((a2 & 0x1000000000000000LL) == 0 && a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL)
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      *(void *)uint64_t v9 = a1;
      uint64_t v10 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v5 = (void (__cdecl *)(void *))sub_100061DD8();
      id v7 = v9;
      uint64_t v6 = a3;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }

      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter(a1, a2);
        if (!v4)
        {
          uint64_t v5 = (void (__cdecl *)(void *))sub_100061DD8();
          uint64_t v6 = a3;
          id v7 = 0LL;
          goto LABEL_8;
        }
      }

      uint64_t v5 = (void (__cdecl *)(void *))sub_100061DD8();
      uint64_t v6 = a3;
      id v7 = (char *)v4;
    }

void sub_10007EB00()
{
}

id sub_10007EB30()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SQLiteFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd14SQLiteFunction);
}

uint64_t type metadata accessor for SQLiteFunction.ImplementationBox()
{
  return objc_opt_self(&OBJC_CLASS____TtCC9storekitd14SQLiteFunctionP33_A940F011497B4D812F91BD2C0A7F3F3B17ImplementationBox);
}

uint64_t type metadata accessor for SQLiteFunction.SQLiteFunctionPointers()
{
  return objc_opt_self(&OBJC_CLASS____TtCC9storekitd14SQLiteFunction22SQLiteFunctionPointers);
}

uint64_t sub_10007EC04(uint64_t a1, void *a2)
{
  uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_name);
  swift_bridgeObjectRetain(*(void *)(v2 + OBJC_IVAR____TtC9storekitd14SQLiteFunction_name + 8));
  v5._countAndFlagsBits = 40LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 41LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return v9;
}

ValueMetadata *type metadata accessor for SQLiteFunction.Flags()
{
  return &type metadata for SQLiteFunction.Flags;
}

unint64_t sub_10007ED14()
{
  unint64_t result = qword_100329B70;
  if (!qword_100329B70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A490, &type metadata for SQLiteFunction.Flags);
    atomic_store(result, (unint64_t *)&qword_100329B70);
  }

  return result;
}

unint64_t sub_10007ED54()
{
  unint64_t result = qword_100329B78;
  if (!qword_100329B78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A460, &type metadata for SQLiteFunction.Flags);
    atomic_store(result, (unint64_t *)&qword_100329B78);
  }

  return result;
}

unint64_t sub_10007ED94()
{
  unint64_t result = qword_100329B80;
  if (!qword_100329B80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A4B8, &type metadata for SQLiteFunction.Flags);
    atomic_store(result, (unint64_t *)&qword_100329B80);
  }

  return result;
}

unint64_t sub_10007EDD4()
{
  unint64_t result = qword_100329B88;
  if (!qword_100329B88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A4F0, &type metadata for SQLiteFunction.Flags);
    atomic_store(result, (unint64_t *)&qword_100329B88);
  }

  return result;
}

void sub_10007EE10(const char *a1, sqlite3_context *a2)
{
  uint64_t v4 = (void (__cdecl *)(void *))sub_100061DD8();
  sqlite3_result_text(a2, a1, -1, v4);
}

void sub_10007EE58(const void *a1, uint64_t a2, sqlite3_context *a3)
{
  if (a1) {
    sqlite3_uint64 v5 = a2 - (void)a1;
  }
  else {
    sqlite3_uint64 v5 = 0LL;
  }
  Swift::String v6 = (void (__cdecl *)(void *))sub_100061DD8();
  sqlite3_result_blob64(a3, a1, v5, v6);
}

uint64_t sub_10007EEAC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_10007EEBC(uint64_t a1)
{
}

void sub_10007EED8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a1)
  {
    objc_allocWithZone((Class)type metadata accessor for SQLiteFunction.SQLiteFunctionPointers());
    uint64_t v7 = a1;
  }

  else
  {
    objc_allocWithZone((Class)type metadata accessor for SQLiteFunction.SQLiteFunctionPointers());
    uint64_t v7 = 0LL;
  }

  id v8 = sub_10007E0DC(v7, a3, (uint64_t)sub_10007E2B8, (uint64_t)sub_10007E818);
  a4();
}

void sub_10007EF7C(uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_context *a4)
{
  uint64_t v7 = (char *)__DataStorage._bytes.getter();
  if (v7)
  {
    uint64_t v8 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v8))
    {
LABEL_13:
      __break(1u);
      return;
    }

    v7 += a1 - v8;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  char v13 = &v7[v12];
  if (v7) {
    uint64_t v14 = (uint64_t)v13;
  }
  else {
    uint64_t v14 = 0LL;
  }
  sub_10007EE58(v7, v14, a4);
}

uint64_t sub_10007F01C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_10007F030(result, a2, a3);
  }
  return result;
}

uint64_t sub_10007F030(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return sub_10007F054(result, a2);
  }
  if (a3 == 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_10007F054(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_10007F098(uint64_t a1, uint64_t a2, sqlite3_uint64 a3, sqlite3_context *a4)
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  char v12 = BYTE5(a2);
  Swift::String v6 = (void (__cdecl *)(void *))sub_100061DD8();
  sqlite3_result_blob64(a4, &v7, a3, v6);
}

void sub_10007F17C(const char *a1)
{
}

uint64_t sub_10007F198@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_10007F1A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + a2) = result;
  return result;
}

uint64_t sub_10007F1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, 6LL, 0LL);
}

uint64_t sub_10007F1B4(uint64_t a1, void *a2)
{
  id v4 = sub_1000F9360(a1, a2, 1);
  Swift::String v6 = v4;
  if (!v4) {
    return 0LL;
  }
  uint64_t v7 = objc_opt_self(&OBJC_CLASS___LSApplicationExtensionRecord);
  __int16 v8 = (void *)swift_dynamicCastObjCClass(v6, v7);
  if (v8)
  {
    id v9 = [v8 containingBundleRecord];
    if (v9)
    {
      id v10 = v9;

      Swift::String v6 = v10;
    }
  }

  char v11 = sub_1000D1318();

  return v11 & 1;
}

void sub_10007F2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sqlite3_uint64 v5 = (uint64_t *)type metadata accessor for SKLogger(0LL);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000862F4();
  uint64_t v188 = v7;
  sub_100086200();
  uint64_t v9 = __chkstk_darwin(v8);
  char v11 = (char *)&v182 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (os_log_s *)((char *)&v182 - v13);
  __chkstk_darwin(v12);
  v189 = (os_log_s *)((char *)&v182 - v15);
  sub_100086200();
  __chkstk_darwin(v16);
  uint64_t v190 = (uint64_t)&v182 - v17;
  sub_100086200();
  __chkstk_darwin(v18);
  uint64_t v192 = (uint64_t)&v182 - v19;
  sub_100086200();
  uint64_t v21 = __chkstk_darwin(v20);
  objc_super v23 = (char *)&v182 - v22;
  id v24 = sub_100085E6C(v21, "connection");
  uint64_t v25 = sub_100084A84(v24);
  uint64_t v195 = v26;
  if (!v26) {
    goto LABEL_10;
  }
  uint64_t v185 = v3;
  v186 = v14;
  uint64_t v193 = v25;
  uint64_t v194 = a3;
  id v27 = sub_100085E6C(v25, "bundleID");
  uint64_t v28 = sub_10008613C((uint64_t)v27);
  unint64_t v30 = v29;

  swift_bridgeObjectRelease(v30);
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000LL) == 0) {
    uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
  }
  if (!v31)
  {
    swift_bridgeObjectRelease(v195);
LABEL_10:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v56 = sub_100079604((uint64_t)v5, (uint64_t)qword_10033E1A8);
    sub_100085BA4(v56, (uint64_t)v11, type metadata accessor for SKLogger);
    sub_100085F20();
    _StringGuts.grow(_:)(66LL);
    sub_1000861E4();
    sub_100085F08(0xD000000000000016LL, (uint64_t)"Ignoring method call ");
    sub_1000862AC();
    sub_100085F08(0xD00000000000002ALL, (uint64_t)" because the required bundleID is missing");
    uint64_t v58 = v196;
    uint64_t v57 = v197;
    id v60 = sub_100085E6C(v59, "logKey");
    uint64_t v61 = sub_100086040((uint64_t)v60);
    uint64_t v63 = v62;

    os_log_type_t v65 = static os_log_type_t.error.getter(v64);
    sub_100085EE8((uint64_t)v63);
    uint64_t v66 = sub_100085EE8(v57);
    __int128 v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = v65;
    if (os_log_type_enabled(v67, v65))
    {
      uint64_t v69 = sub_10007B9FC(22LL);
      uint64_t v70 = sub_10007B9FC(64LL);
      uint64_t v195 = v58;
      uint64_t v71 = v70;
      uint64_t v198 = v70;
      *(_DWORD *)uint64_t v69 = 136446466;
      uint64_t v194 = v69 + 4;
      sub_100085E84();
      v72._countAndFlagsBits = v61;
      v72._object = v63;
      String.append(_:)(v72);
      sub_100085F14();
      sub_100085EF0();
      uint64_t v196 = sub_100085EF8();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v194);
      sub_100085FA8();
      sub_10007B980();
      *(_WORD *)(v69 + 12) = 2082;
      sub_10008600C();
      uint64_t v196 = sub_100085F50();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v69 + 14);
      sub_100085E64(v57);
      sub_100086038((void *)&_mh_execute_header, v67, v68, "%{public}s%{public}s", (uint8_t *)v69);
      sub_100086030(v71, v73, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v71);
      sub_10007B974(v69);
      sub_100086004();
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v57);
      sub_100085E64((uint64_t)v63);
    }

    sub_100085BC4((uint64_t)v11, type metadata accessor for SKLogger);
    sub_10008622C();
    uint64_t v75 = v74;
    uint64_t v76 = 650LL;
    goto LABEL_56;
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v187 = sub_100079604((uint64_t)v5, (uint64_t)qword_10033E1A8);
  sub_100085BA4(v187, (uint64_t)v23, type metadata accessor for SKLogger);
  sub_100085F20();
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(v197);
  uint64_t v196 = 0x676E697265746E45LL;
  unint64_t v197 = 0xE900000000000020LL;
  sub_1000862AC();
  v32._countAndFlagsBits = 0x20726F6620LL;
  v32._object = (void *)0xE500000000000000LL;
  String.append(_:)(v32);
  id v34 = sub_100085E6C(v33, "bundleID");
  sub_10008613C((uint64_t)v34);
  sub_100086024();
  sub_10008611C();
  sub_100085FB4();
  v35._countAndFlagsBits = 544825888LL;
  v35._object = (void *)0xE400000000000000LL;
  String.append(_:)(v35);
  uint64_t v36 = v195;
  sub_100086114(v193);
  unint64_t v37 = v197;
  uint64_t v184 = v196;
  id v39 = sub_100085E6C(v38, "logKey");
  uint64_t v40 = sub_100086040((uint64_t)v39);
  __int128 v42 = v41;

  os_log_type_t v44 = static os_log_type_t.default.getter(v43);
  sub_100085EE8((uint64_t)v42);
  uint64_t v45 = sub_100085EE8(v37);
  LODWORD(v5) = (_DWORD)v23;
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  if (os_log_type_enabled(v46, v44))
  {
    uint64_t v47 = sub_10007B9FC(22LL);
    uint64_t v48 = sub_10007B9FC(64LL);
    uint64_t v198 = v48;
    *(_DWORD *)uint64_t v47 = 136446466;
    uint64_t v183 = v47 + 4;
    sub_100086244();
    swift_bridgeObjectRetain(v42);
    sqlite3_uint64 v5 = &v196;
    v49._countAndFlagsBits = v40;
    v49._object = v42;
    String.append(_:)(v49);
    sub_100085F14();
    swift_bridgeObjectRelease(v42);
    uint64_t v50 = sub_100086234();
    uint64_t v51 = sub_100086160(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v52, v183);
    swift_bridgeObjectRelease_n(v42, 2LL);
    sub_100085EF0();
    *(_WORD *)(v47 + 12) = 2082;
    sub_10008618C();
    uint64_t v53 = sub_10007A488(v184, v37, &v198);
    sub_1000860D4(v53);
    sub_100085E64(v37);
    sub_100086038((void *)&_mh_execute_header, v46, v44, "%{public}s%{public}s", (uint8_t *)v47);
    sub_100086030(v48, v54, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v48);
    uint64_t v55 = v47;
    uint64_t v36 = v195;
    sub_10007B974(v55);
    sub_100085FB4();
    swift_bridgeObjectRelease(v42);
  }

  else
  {

    sub_100085E64(v37);
    sub_100085E64((uint64_t)v42);
  }

  sub_100085BC4((uint64_t)v23, type metadata accessor for SKLogger);
  id v78 = sub_100085E6C(v77, "bundleID");
  NSString v79 = v78;
  if (!v78)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    LODWORD(v5) = v80;
    NSString v79 = String._bridgeToObjectiveC()();
    id v78 = (id)sub_10007B980();
  }

  sub_100086284((uint64_t)v78, "isAppStoreSignedAppWithBundleID:");
  sub_100086064();
  if ((_DWORD)v5)
  {
    sub_100085BA4(v187, v192, type metadata accessor for SKLogger);
    sub_100085F20();
    _StringGuts.grow(_:)(81LL);
    sub_1000861E4();
    sub_1000862B8();
    sub_10008626C(v81, v82);
    id v84 = sub_100085E6C(v83, "bundleID");
    sub_10008613C((uint64_t)v84);
    sub_100086024();
    sub_10008611C();
    sub_100085FB4();
    sub_100085F08(0xD000000000000011LL, (uint64_t)" because the app ");
    sub_100086114(v193);
    sub_100086144();
    sub_100085F08(0xD000000000000022LL, (uint64_t)" is not valid for StoreKit testing");
    uint64_t v86 = v196;
    uint64_t v85 = v197;
    id v88 = sub_100085E6C(v87, "logKey");
    sub_100086040((uint64_t)v88);
    sub_100086058();
    static os_log_type_t.error.getter(v89);
    sub_100085EE8((uint64_t)v79);
    uint64_t v90 = sub_100085EE8(v85);
    v91 = (os_log_s *)Logger.logObject.getter(v90);
    if (sub_100086048(v91))
    {
      v92 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v93 = sub_10007B9FC(64LL);
      sub_10008632C(v93);
      _DWORD *v92 = 136446466;
      uint64_t v195 = v86;
      sub_100085E84();
      sub_100085F30();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v94 = sub_100085EF8();
      sub_100085EC8(v94);
      sub_100085FA8();
      sub_10007B980();
      sub_100085F94();
      uint64_t v95 = sub_100085F50();
      sub_100085EB0(v95);
      sub_100085E64(v85);
      sub_100085F60( (void *)&_mh_execute_header,  (os_log_s *)&selRef_executeOptionalQuery_withResults_,  v96,  "%{public}s%{public}s");
      sub_100085F40((uint64_t)&type metadata for Any);
      sub_10007B974(v36);
      sub_10007B974((uint64_t)v92);
      sub_100086004();
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v85);
      sub_100085E64((uint64_t)v79);
    }

    sub_100085BC4(v192, type metadata accessor for SKLogger);
    sub_10008622C();
    uint64_t v75 = v106;
    uint64_t v76 = 950LL;
    goto LABEL_56;
  }

  BOOL v97 = amfi_developer_mode_status();
  if (!v97)
  {
    sub_100085BA4(v187, v190, type metadata accessor for SKLogger);
    sub_100085F20();
    _StringGuts.grow(_:)(72LL);
    sub_1000861E4();
    sub_1000862B8();
    sub_10008626C(v107, v108);
    sub_100086114(v193);
    sub_100086144();
    sub_100085F08(0xD00000000000002CLL, (uint64_t)" because the device is not in developer mode");
    uint64_t v110 = v196;
    unint64_t v109 = v197;
    id v112 = sub_100085E6C(v111, "logKey");
    sub_100086040((uint64_t)v112);
    sub_100086058();
    os_log_type_t v114 = static os_log_type_t.error.getter(v113);
    sub_100085EE8(0xD00000000000001ALL);
    uint64_t v115 = sub_100085EE8(v109);
    v116 = (os_log_s *)Logger.logObject.getter(v115);
    if (os_log_type_enabled(v116, v114))
    {
      v117 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v118 = sub_10007B9FC(64LL);
      uint64_t v195 = v110;
      sub_10008632C(v118);
      _DWORD *v117 = 136446466;
      sub_100085E84();
      sub_100085F30();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v196 = sub_100085EF8();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v196, &v197, v117 + 1);
      sub_100085FA8();
      sub_10007B980();
      sub_1000861F0();
      sub_10008618C();
      uint64_t v119 = sub_10007A488(v195, v109, &v198);
      sub_100085EB0(v119);
      sub_100085E64(v109);
      sub_100085F60((void *)&_mh_execute_header, v116, v120, "%{public}s%{public}s");
      sub_100085F40((uint64_t)&type metadata for Any);
      sub_10007B974(v110);
      sub_10007B974((uint64_t)v117);
      sub_100085FB4();
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v109);
      sub_100085E64(0xD00000000000001ALL);
    }

    sub_100085BC4(v190, type metadata accessor for SKLogger);
    sub_10008622C();
    uint64_t v75 = v122;
    uint64_t v76 = 535LL;
    goto LABEL_56;
  }

  id v98 = sub_100085E6C(v97, "bundleID");
  uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
  uint64_t v101 = v100;

  uint64_t v102 = v193;
  if (v193 == v99 && v36 == v101)
  {
    uint64_t v104 = sub_100085EF0();
    v105 = &selRef_accountMediaType;
  }

  else
  {
    LODWORD(v99) = _stringCompareWithSmolCheck(_:_:expecting:)(v193, v36, v99, v101, 0LL);
    uint64_t v104 = sub_100085EF0();
    v105 = &selRef_accountMediaType;
    if ((v99 & 1) == 0) {
      goto LABEL_35;
    }
  }

  id v121 = sub_100085E6C(v104, v105[195]);
  objc_msgSend(v121, "sk_getTaskAllowed");
  sub_100086064();
  if ((v99 & 1) == 0)
  {
    v123 = v189;
    sub_100085BA4(v187, (uint64_t)v189, type metadata accessor for SKLogger);
    sub_100085F20();
    _StringGuts.grow(_:)(52LL);
    sub_1000861E4();
    sub_100085F08(0xD000000000000032LL, (uint64_t)"Ignoring method call from non-development client: ");
    sub_100086114(v102);
    uint64_t v124 = sub_100086144();
    uint64_t v126 = v196;
    uint64_t v125 = v197;
    id v127 = sub_100085E6C(v124, "logKey");
    sub_100086040((uint64_t)v127);
    sub_100086058();
    static os_log_type_t.error.getter(v128);
    sub_100085EE8((uint64_t)v121);
    uint64_t v129 = sub_100085EE8(v125);
    v130 = (os_log_s *)Logger.logObject.getter(v129);
    if (sub_100086048(v130))
    {
      v131 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v132 = sub_10007B9FC(64LL);
      sub_10008632C(v132);
      _DWORD *v131 = 136446466;
      uint64_t v195 = v126;
      sub_100085E84();
      sub_100085F30();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v133 = sub_100085EF8();
      sub_100085EC8(v133);
      sub_100085FA8();
      sub_10007B980();
      sub_100085F94();
      uint64_t v134 = sub_100085F50();
      sub_100085EB0(v134);
      sub_100085E64(v125);
      sub_100085F60((void *)&_mh_execute_header, v123, v135, "%{public}s%{public}s");
      sub_100085F40((uint64_t)&type metadata for Any);
      sub_10007B974(v36);
      sub_10007B974((uint64_t)v131);
      sub_100086004();
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v125);
      sub_100085E64((uint64_t)v121);
    }

    uint64_t v165 = (uint64_t)v189;
    goto LABEL_55;
  }

LABEL_35:
  objc_msgSend(sub_100085E6C(v104, v105[195]), "sk_isOctanePrivileged");
  sub_100086064();
  if ((v99 & 1) == 0)
  {
    NSString v136 = String._bridgeToObjectiveC()();
    sub_100086284((uint64_t)v136, "isAppStoreSignedAppWithBundleID:");
    sub_100086064();
    id v138 = sub_100085E6C(v137, "connection");
    objc_msgSend(v138, "sk_getTaskAllowed");
    sub_100086064();
    if ((_DWORD)v99)
    {
      uint64_t v139 = sub_10007CB7C(0LL, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
      id v140 = sub_100085E6C(v139, "bundleID");
      sub_10008613C((uint64_t)v140);
      sub_100086024();
      uint64_t v141 = v185;
      id v142 = sub_1000F9360(v102, &selRef_executeOptionalQuery_withResults_, 0);
      if (v141)
      {
        sub_100085BA4(v187, v188, type metadata accessor for SKLogger);
        sub_100085F20();
        _StringGuts.grow(_:)(37LL);
        sub_1000861E4();
        sub_100085F08(0xD00000000000001FLL, (uint64_t)"Unable to get entitlements for ");
        id v144 = sub_100085E6C(v143, "bundleID");
        sub_10008613C((uint64_t)v144);
        sub_100086024();
        sub_10008611C();
        sub_100085FB4();
        v145._countAndFlagsBits = 8250LL;
        v145._object = (void *)0xE200000000000000LL;
        String.append(_:)(v145);
        uint64_t v198 = v141;
        sub_10007B1FC(&qword_100329B90);
        uint64_t v146 = _print_unlocked<A, B>(_:_:)(&v198, &v196);
        unint64_t v147 = v197;
        uint64_t v192 = v196;
        id v148 = sub_100085E6C(v146, "logKey");
        id v138 = (id)sub_100086040((uint64_t)v148);
        v150 = v149;

        os_log_type_t v152 = static os_log_type_t.error.getter(v151);
        sub_100085EE8((uint64_t)v150);
        uint64_t v153 = sub_100085EE8(v147);
        v154 = (os_log_s *)Logger.logObject.getter(v153);
        os_log_type_t v155 = v152;
        if (os_log_type_enabled(v154, v152))
        {
          uint64_t v156 = sub_10007B9FC(22LL);
          uint64_t v157 = sub_10007B9FC(64LL);
          uint64_t v198 = v157;
          *(_DWORD *)uint64_t v156 = 136446466;
          uint64_t v191 = v156 + 4;
          sub_100086244();
          sub_10008618C();
          v158._countAndFlagsBits = (uint64_t)v138;
          v158._object = v150;
          String.append(_:)(v158);
          sub_100085F14();
          sub_100085FB4();
          uint64_t v159 = sub_100086234();
          uint64_t v160 = sub_100086160(v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v160, v161, v191);
          swift_bridgeObjectRelease_n(v150, 2LL);
          sub_100085EF0();
          *(_WORD *)(v156 + 12) = 2082;
          id v138 = (id)(v156 + 14);
          sub_10008600C();
          uint64_t v162 = sub_10007A488(v192, v147, &v198);
          sub_1000860D4(v162);
          sub_100085E64(v147);
          sub_100086038((void *)&_mh_execute_header, v154, v155, "%{public}s%{public}s", (uint8_t *)v156);
          sub_100086030(v157, v163, (uint64_t)&type metadata for Any + 8);
          sub_10007B974(v157);
          uint64_t v164 = v156;
          uint64_t v36 = v195;
          sub_10007B974(v164);
          sub_100086004();
          sub_100085FB4();
        }

        else
        {

          sub_100085E64(v147);
          sub_100085E64((uint64_t)v150);
        }

        swift_errorRelease(v141);
        sub_100085BC4(v188, type metadata accessor for SKLogger);
        uint64_t v102 = v193;
      }

      else
      {
        id v138 = v142;
        uint64_t v185 = 0LL;
        objc_msgSend(v142, "sk_getTaskAllowed");
        sub_100086064();
        uint64_t v102 = v193;
        if ((v139 & 1) != 0) {
          goto LABEL_36;
        }
      }
    }

    v166 = v186;
    sub_100085BA4(v187, (uint64_t)v186, type metadata accessor for SKLogger);
    sub_100085F20();
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease(v197);
    uint64_t v196 = 0xD00000000000002ELL;
    unint64_t v197 = 0x800000010029DFB0LL;
    sub_100086114(v102);
    uint64_t v167 = sub_100086144();
    uint64_t v169 = v196;
    uint64_t v168 = v197;
    id v170 = sub_100085E6C(v167, "logKey");
    sub_100086040((uint64_t)v170);
    sub_100086058();
    static os_log_type_t.error.getter(v171);
    sub_100085EE8((uint64_t)v138);
    uint64_t v172 = sub_100085EE8(v168);
    v173 = (os_log_s *)Logger.logObject.getter(v172);
    if (sub_100086048(v173))
    {
      v174 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v175 = sub_10007B9FC(64LL);
      sub_10008632C(v175);
      _DWORD *v174 = 136446466;
      uint64_t v195 = v169;
      sub_100085E84();
      sub_100085F30();
      sub_100085F14();
      sub_100085EF0();
      uint64_t v176 = sub_100085EF8();
      sub_100085EC8(v176);
      sub_100085FA8();
      sub_10007B980();
      sub_100085F94();
      uint64_t v177 = sub_100085F50();
      sub_100085EB0(v177);
      sub_100085E64(v168);
      sub_100085F60((void *)&_mh_execute_header, v166, v178, "%{public}s%{public}s");
      sub_100085F40((uint64_t)&type metadata for Any);
      sub_10007B974(v36);
      sub_10007B974((uint64_t)v174);
      sub_100086004();
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v168);
      sub_100085E64((uint64_t)v138);
    }

    uint64_t v165 = (uint64_t)v186;
LABEL_55:
    sub_100085BC4(v165, type metadata accessor for SKLogger);
    sub_10008622C();
    uint64_t v75 = v179;
    uint64_t v76 = 505LL;
LABEL_56:
    uint64_t v198 = v76;
    unint64_t v180 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
    sub_10007ACCC( (unint64_t *)&qword_100328DE8,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10027950C);
    _BridgedStoredNSError.init(_:userInfo:)(&v198, v180, v75, v181);
    sub_1000862A4();
    goto LABEL_57;
  }

    uint64_t v85 = 0LL;
    *(void *)(v73 + 32) = 0LL;
    *(_OWORD *)uint64_t v73 = 0u;
    *(_OWORD *)(v73 + 16) = 0u;
  }

  NSString v79 = v178;
  v103 = sub_10009C5EC();
  uint64_t v104 = sub_10009C208(v103, "productIdentifier");
  sub_100086040((uint64_t)v104);
  sub_10009C49C();
  sub_10009C288();
  sub_10009C6D0();
  sub_10009C018();
  if (qword_100328A30 == -1) {
    goto LABEL_38;
  }
LABEL_116:
  swift_once(&qword_100328A30, sub_1000944F4);
LABEL_38:
  v105 = (void *)sub_10009C1CC();
  sub_1000875F4(v105, "setParameter:forKey:");

  v79[99] = sub_10009C208(v106, "quantity");
  dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  sub_10009C210();
  sub_10009C018();
  uint64_t v107 = &selRef_accountMediaType;
  if (qword_100328A80 != -1) {
    swift_once(&qword_100328A80, sub_1000946FC);
  }
  uint64_t v108 = (void *)sub_10009C1CC();
  sub_1000875F4(v108, "setParameter:forKey:");

  if (sub_10009C208(v109, "apiVersion") != (id)1)
  {
    uint64_t v110 = sub_10009C114();
    sub_10009C43C((uint64_t)v110, OBJC_IVAR____TtC9storekitd6Client_deviceVendorID);

    uint64_t v111 = sub_10009C6A8();
    id v112 = sub_10009C5C4(v111);
    if (v113)
    {
      sub_10009C740(v112, &qword_10032A3D0);
    }

    else
    {
      UUID.uuidString.getter(v112);
      sub_10009C2A8();
      os_log_type_t v114 = sub_10009C698();
      v116 = v115;
      sub_10007BA44();
      v79[79] = v114;
      v79[80] = v116;
      sub_10009C7BC();
      sub_10009C4DC();
    }

    if (qword_1003289D8 != -1) {
      swift_once(&qword_1003289D8, sub_100094294);
    }
    sub_1000875F4((id)v79[124], "setParameter:forKey:");
    sub_1000931C0();
  }

  v117 = sub_10009B9FC((void *)v79[102]);
  if (v118 >> 60 != 15)
  {
    if ((sub_10009C7D0(v117, v118) & 1) == 0)
    {
      v119.super.Class isa = sub_10009C754().super.isa;
      if (qword_100328A60 != -1) {
        swift_once(&qword_100328A60, sub_100094624);
      }
      sub_10009368C((id)v79[124], "setParameter:forKey:");
    }

    sub_10009C748();
  }

  sub_10009BB30((void *)v79[102], (SEL *)&selRef_applicationUsername);
  if (v120)
  {
    sub_10009C12C();
    sub_100085EF0();
  }

  if (qword_1003289C8 != -1) {
    swift_once(&qword_1003289C8, sub_100094238);
  }
  id v121 = (void *)sub_10009C1CC();
  sub_1000875F4(v121, "setParameter:forKey:");
  uint64_t v122 = sub_1000931C0();
  sub_10009C200(v122, (SEL *)&selRef_appAccountToken);
  if (v123)
  {
    sub_10009C12C();
    sub_100085EF0();
  }

  if (qword_1003289C0 != -1) {
    swift_once(&qword_1003289C0, sub_1000941FC);
  }
  uint64_t v124 = (void *)sub_10009C1CC();
  sub_1000875F4(v124, "setParameter:forKey:");
  uint64_t v125 = sub_1000931C0();
  sub_10009C200(v125, (SEL *)&selRef_partnerIdentifier);
  if (v126)
  {
    sub_10009C12C();
    sub_100085EF0();
  }

  if (qword_100328A50 != -1) {
    swift_once(&qword_100328A50, sub_1000945BC);
  }
  id v127 = (void *)sub_10009C1CC();
  sub_1000875F4(v127, "setParameter:forKey:");
  uint64_t v128 = sub_1000931C0();
  sub_10009C200(v128, (SEL *)&selRef_partnerTransactionIdentifier);
  if (v129)
  {
    Class isa = sub_10009C12C();
    sub_100085EF0();
  }

  else
  {
    Class isa = 0LL;
  }

  if (qword_100328A58 != -1) {
    swift_once(&qword_100328A58, sub_1000945F0);
  }
  v131 = *((unsigned __int8 *)v79 + 673);
  sub_1000875F4((id)v79[124], "setParameter:forKey:");
  sub_1000931C0();
  if (v131 == 1)
  {
    Class isa = sub_10009C064().super.super.isa;
    if (qword_100328A08 != -1) {
      swift_once(&qword_100328A08, sub_1000943E0);
    }
    sub_1000875F4((id)v79[124], "setParameter:forKey:");
  }

  uint64_t v132 = v79[113];
  uint64_t v133 = v79[112];
  uint64_t v134 = sub_10009C114();
  sub_10009C4BC();

  uint64_t v135 = sub_10007B1FC(&qword_10032A028);
  LODWORD(isa) = sub_10009C0B8(v135);
  sub_10009C358(v133);
  sub_10009C358(v132);
  if ((isa & 1) == 0 && [(id)v79[102] simulateAskToBuy])
  {
    Class isa = sub_10009C064().super.super.isa;
    if (qword_100328A68 != -1) {
      swift_once(&qword_100328A68, sub_10009465C);
    }
    sub_1000875F4((id)v79[124], "setParameter:forKey:");
  }

  if (objc_msgSend((id)v79[102], "isStoreOriginated", v165))
  {
    Class isa = sub_10009C064().super.super.isa;
    if (qword_100328A28 != -1) {
      swift_once(&qword_100328A28, sub_1000944C0);
    }
    sub_1000875F4((id)v79[124], "setParameter:forKey:");
  }

  NSString v136 = sub_10009C114();
  sub_10009C67C(v136);
  if ((_DWORD)isa == 1)
  {
    v137.super.super.Class isa = sub_10009C064().super.super.isa;
    if (qword_1003289D0 != -1) {
      swift_once(&qword_1003289D0, sub_10009426C);
    }
    sub_1000875F4((id)v79[124], "setParameter:forKey:");
  }

  if ([(id)v79[102] isStoreKitViewInitiated])
  {
    v138.super.super.Class isa = sub_10009C064().super.super.isa;
    if (qword_100328A78 != -1) {
      swift_once(&qword_100328A78, sub_1000946C8);
    }
    sub_1000875F4((id)v79[124], "setParameter:forKey:");
  }

  sub_10009BB30((void *)v79[102], (SEL *)&selRef_discountIdentifier);
  if (!v139) {
    goto LABEL_112;
  }
  id v140 = v139;
  sub_10009BB30((void *)v178[102], (SEL *)&selRef_discountKeyIdentifier);
  if (!v141)
  {
    uint64_t v153 = v140;
LABEL_108:
    swift_bridgeObjectRelease(v153);
    goto LABEL_112;
  }

  id v142 = v141;
  sub_10009BB30((void *)v178[102], (SEL *)&selRef_discountNonceString);
  if (!v143)
  {
    sub_100086144();
    uint64_t v153 = v142;
    goto LABEL_108;
  }

  id v144 = v143;
  sub_10009BB30((void *)v178[102], (SEL *)&selRef_discountSignature);
  if (v145)
  {
    uint64_t v146 = v145;
    unint64_t v147 = [(id)v178[102] discountTimestamp];
    if (v147)
    {
      uint64_t v82 = v147;
      uint64_t v46 = (uint64_t *)sub_10009C58C();
      sub_100086144();
      if (qword_1003289E0 != -1) {
        goto LABEL_118;
      }
      goto LABEL_97;
    }

    sub_100086144();
    sub_100093460();
    sub_100085FB4();
    v154 = v146;
  }

  else
  {
    sub_100086144();
    sub_100093460();
    v154 = v144;
  }

  swift_bridgeObjectRelease(v154);
  uint64_t v107 = &selRef_accountMediaType;
LABEL_112:
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  v178[128] = sub_100079604(v178[116], (uint64_t)qword_10033E1A8);
  os_log_type_t v155 = sub_10009C7DC();
  v178[129] = v155;
  v178[130] = v156;
  uint64_t v157 = (char *)sub_10009C2FC(v155, v107[163]);
  v178[131] = *(void *)&v157[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
  sub_10008618C();

  sub_10009C684();
  Swift::String v158 = (void *)swift_task_alloc(dword_10032A7DC);
  v178[132] = v158;
  *Swift::String v158 = v178;
  v158[1] = sub_100096C08;
  uint64_t v159 = sub_10009C228();
  return sub_1000AEA20(v159, v160, v161, v162, v163);
}

          uint64_t v8 = 0LL;
LABEL_36:
          uint64_t v6 = v23;
          unint64_t result = v24;
          goto LABEL_37;
        }

        v15 += 3LL;
      }
    }

  _Block_release(a4);
}

LABEL_36:
  sub_100086144();
LABEL_57:
  sub_100086084();
}

    sub_1000DB258((uint64_t)v30);
    goto LABEL_37;
  }

  uint64_t v159 = v51;
  uint64_t v162 = 0LL;
  uint64_t v73 = [v69 URLForDirectory:99 inDomain:1 appropriateForURL:v71 create:1 error:&v162];

  uint64_t v74 = (id)v162;
  uint64_t v75 = v157;
  uint64_t v76 = v155;
  if (!v73)
  {
    uint64_t v111 = (id)v162;
    sub_1000DB26C();
    sub_100086064();
    sub_100093D24();
    sub_1000DB33C(v60);
    goto LABEL_36;
  }

  uint64_t v161 = v60;
  uint64_t v151 = v30;
  uint64_t v77 = v153;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v73);
  id v78 = v74;

  id v142 = @"Configuration.storekit";
  uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"Configuration.storekit");
  v163[0] = v79;
  uint64_t v141 = enum case for URL.DirectoryHint.inferFromPath(_:);
  int v80 = v154;
  ((void (*)(uint64_t))v154)(v76);
  uint64_t v81 = sub_1000A9B34();
  uint64_t v82 = v152;
  uint64_t v143 = v81;
  URL.appending<A>(path:directoryHint:)(&v162, v76, &type metadata for String, v81);
  uint64_t v83 = v145;
  v145(v76, v75);
  id v84 = sub_1000DB2EC();
  uint64_t v85 = v76;
  uint64_t v86 = sub_10009C324(v84, "defaultManager");
  URL._bridgeToObjectiveC()(v87);
  uint64_t v89 = v88;
  uint64_t v162 = 0LL;
  uint64_t v90 = [v86 createDirectoryAtURL:v88 withIntermediateDirectories:0 attributes:0 error:&v162];

  v91 = (id)v162;
  if (!v90)
  {
    id v112 = (id)v162;
    sub_1000DB26C();
    sub_100086064();
    sub_100093D24();
    sub_1000DB258(v82);
    sub_1000DA104();
    sub_1000DB33C(v161);
    uint64_t v100 = v77;
    goto LABEL_29;
  }

  uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
  v163[0] = v92;
  uint64_t v93 = v157;
  v80(v85, v141, v157);
  uint64_t v94 = v91;
  uint64_t v95 = v149;
  URL.appending<A>(path:directoryHint:)(&v162, v85, &type metadata for String, v143);
  v83(v85, v93);
  sub_1000DB2EC();
  uint64_t v96 = v160;
  BOOL v97 = v161;
  id v98 = v159;
  Data.write(to:options:)(v95, 0LL, v161, v159);
  if (v96)
  {
    sub_1000DB258(v95);
    sub_1000DB258(v82);
    uint64_t v99 = v153;
    sub_1000DA104();
    sub_10007F054(v97, v98);
    uint64_t v100 = v99;
LABEL_29:
    sub_1000DB258(v100);
    unint64_t v30 = v151;
    goto LABEL_36;
  }

  uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v147 + 8);
  uint64_t v134 = sub_1000DB258(v95);
  uint64_t v135 = sub_10009C324(v134, "defaultManager");
  uint64_t v162 = 46LL;
  v163[0] = 0xE100000000000000LL;
  unint64_t v30 = v151;
  v136._countAndFlagsBits = URL.lastPathComponent.getter();
  String.append(_:)(v136);
  sub_100086004();
  uint64_t v137 = v146;
  NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)(v30, v82, v162, v163[0], 1LL);

  sub_100086004();
  sub_1000B3FC4(v137);
  sub_1000DB258(v82);
  sub_1000DB3C0();
  sub_1000DB258((uint64_t)v135);
  uint64_t v51 = v159;
  id v60 = v161;
LABEL_31:
  uint64_t v160 = 0LL;
  uint64_t v161 = v60;
  uint64_t v159 = v51;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  os_log_type_t v114 = sub_100079604(v158, (uint64_t)qword_10033E1A8);
  sub_10007961C(v114, (uint64_t)v150);
  uint64_t v162 = 0LL;
  v163[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(31LL);
  uint64_t v115 = sub_1000DB2EC();
  uint64_t v162 = 0xD00000000000001DLL;
  v163[0] = 0x80000001002A10E0LL;
  v116 = sub_1000DB36C(v115, "bundleID");
  sub_10008613C((uint64_t)v116);
  sub_100086024();
  sub_10008611C();
  v117 = sub_100085FB4();
  Swift::String v158 = v162;
  uint64_t v118 = sub_1000DB36C(v117, "logKey");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
  uint64_t v120 = v119;

  uint64_t v122 = static os_log_type_t.debug.getter(v121);
  sub_100085EE8(v120);
  v123 = sub_1000DB260();
  uint64_t v124 = (os_log_s *)Logger.logObject.getter(v123);
  uint64_t v125 = v122;
  if (os_log_type_enabled(v124, v122))
  {
    uint64_t v126 = sub_10007B9FC(22LL);
    id v127 = (void *)sub_10007B9FC(64LL);
    uint64_t v151 = v30;
    uint64_t v128 = (uint64_t)v127;
    uint64_t v164 = v127;
    *(_DWORD *)uint64_t v126 = 136446466;
    uint64_t v157 = v126 + 4;
    uint64_t v162 = 91LL;
    v163[0] = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v120);
    sub_10008611C();
    sub_100085F14();
    sub_100085FB4();
    uint64_t v129 = v163[0];
    uint64_t v162 = sub_10007A488(v162, v163[0], (uint64_t *)&v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v157);
    swift_bridgeObjectRelease_n(v120, 2LL);
    swift_bridgeObjectRelease(v129);
    *(_WORD *)(v126 + 12) = 2082;
    sub_100085FEC();
    uint64_t v162 = sub_1000B20F4(v158, v130, (uint64_t *)&v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v126 + 14);
    sub_1000B1FD4();
    sub_100086038((void *)&_mh_execute_header, v124, v125, "%{public}s%{public}s", (uint8_t *)v126);
    sub_100086030(v128, v131, (uint64_t)&type metadata for Any + 8);
    uint64_t v132 = v128;
    unint64_t v30 = v151;
    sub_10007B974(v132);
    sub_10007B974(v126);
    sub_100085EF0();
    sub_100085FB4();
  }

  else
  {

    sub_1000B1FD4();
    sub_100085E64(v120);
  }

  id v138 = v156;
  uint64_t v139 = v161;
  sub_1000B6274((uint64_t)v150, type metadata accessor for SKLogger);
  [v148 startServerIfNecessaryFor:v144];
  sub_1000DB33C(v139);
  v113((uint64_t)v30, v138);
LABEL_37:
  sub_100086084();
}

    uint64_t v8 = 0LL;
    uint64_t v10 = 1;
    goto LABEL_39;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t v10 = 1;
  uint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

  sub_100085E98();
}

    uint64_t v76 = 0uLL;
    uint64_t v77 = v100;
LABEL_37:
    *uint64_t v77 = v76;
    v77[1] = v76;
    return;
  }

  id v78 = sub_10011CF40(v2);
  if (!v78) {
    goto LABEL_36;
  }
  NSString v79 = v78;
  int v80 = (uint64_t *)&unk_10032BDE0;
LABEL_42:
  uint64_t v82 = sub_10007B1FC(v80);
  uint64_t v83 = v100;
  v100[3] = v82;
  void *v83 = v79;
}

id sub_10008042C(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  sub_100085FB4();
  id v8 = 0LL;
  LODWORD(a2) = [v2 validateMethodCall:v4 context:a2 error:&v8];

  id v5 = v8;
  if ((_DWORD)a2) {
    return v8;
  }
  id v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)sub_1000862A4();
}

void *sub_100080510(uint64_t a1)
{
  id v1 = [objc_allocWithZone(NSString) initWithUTF8String:a1];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 description];

    uint64_t v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }

  return v2;
}

void sub_10008063C()
{
  uint64_t v2 = v1;
  NSString v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v8);
  sub_10007B9C4();
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v9 = sub_100079604(v7, (uint64_t)qword_10033E1A8);
  sub_100085BA4(v9, v0, type metadata accessor for SKLogger);
  uint64_t v25 = 0x20676E6974697845LL;
  unint64_t v26 = 0xE800000000000000LL;
  v10._countAndFlagsBits = v6;
  v10._object = v4;
  String.append(_:)(v10);
  uint64_t v11 = sub_100086040((uint64_t)[v2 logKey]);
  uint64_t v13 = v12;

  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  sub_100085EE8(v13);
  uint64_t v16 = sub_100085EE8(0xE800000000000000LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = v15;
  if (os_log_type_enabled(v17, v15))
  {
    uint64_t v19 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v20 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v24 = v20;
    sub_100086244();
    sub_10008600C();
    sub_10008619C(v11);
    sub_100085F14();
    sub_100086004();
    uint64_t v25 = sub_10008620C(v25, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4);
    sub_10007D974(v13);
    sub_10007B980();
    sub_1000861F0();
    sub_10007BA3C();
    uint64_t v25 = sub_100086308(0x20676E6974697845LL, v22, &v24);
    sub_100086194((uint64_t)&v25, (uint64_t)&v26);
    sub_100085E64(0xE800000000000000LL);
    sub_100086038((void *)&_mh_execute_header, v17, v18, "%{public}s%{public}s", v19);
    sub_100086030(v20, v23, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v20);
    sub_10007B974((uint64_t)v19);
    sub_10007BA44();
    sub_100086004();
  }

  else
  {

    sub_100085E64(0xE800000000000000LL);
    sub_100085E64(v13);
  }

  sub_100085BC4(v0, type metadata accessor for SKLogger);
  sub_100085E98();
}

void sub_1000808E4(uint64_t a1, uint64_t a2)
{
  id v4 = String._bridgeToObjectiveC()();
  sub_10007BA44();
  [v2 logExitForMethod:v4 context:a2];
}

void *sub_1000809B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void))
{
  Swift::String v10 = v9;
  NSString v11 = String._bridgeToObjectiveC()();
  id v26 = 0LL;
  unsigned int v12 = [a5 validateMethodCall:v11 context:v10 error:&v26];

  id v13 = v26;
  if (!v12)
  {
    uint64_t v14 = v13;
    uint64_t v15 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v16, v17, v18, v19, v20, v21, v22);
    swift_errorRetain(v15);
    uint64_t v23 = (void *)_convertErrorToNSError(_:)(v15);
    ((void (**)(void, void *))a6)[2](a6, v23);

    swift_errorRelease(v15);
    NSString v24 = String._bridgeToObjectiveC()();
    [a5 logExitForMethod:v24 context:v10];

    swift_errorRelease(v15);
    Swift::String v10 = 0LL;
  }

  _Block_release(a6);
  return v10;
}

void sub_100080BE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void *))
{
  uint64_t v67 = a2;
  uint64_t v10 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v10);
  uint64_t v68 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_allocObject(&unk_1002EB210, 24LL, 7LL);
  *(void *)(v12 + 16) = a6;
  Swift::String v72 = a6;
  _Block_copy(a6);
  uint64_t v69 = "storekitd.SQLiteFunction";
  NSString v13 = String._bridgeToObjectiveC()();
  NSString v14 = String._bridgeToObjectiveC()();
  uint64_t v15 = swift_allocObject(&unk_1002EB238, 32LL, 7LL);
  *(void *)(v15 + 16) = sub_100085E1C;
  *(void *)(v15 + 24) = v12;
  uint64_t v71 = v12;
  v74[3] = (unint64_t)sub_100085E50;
  uint64_t v75 = v15;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  v74[0] = 1107296256LL;
  v74[1] = (unint64_t)sub_100081868;
  v74[2] = (unint64_t)&unk_1002EB250;
  uint64_t v16 = _Block_copy(&aBlock);
  uint64_t v17 = v75;
  swift_retain(v15);
  swift_release(v17);
  id v70 = a5;
  id v18 = [a5 validateOctaneContextFor:v13 with:v14 completion:v16];

  _Block_release(v16);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v15, "", 101LL, 148LL, 95LL, 1LL);
  swift_release(v15);
  if ((v16 & 1) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v18)
  {
    id v19 = [(id)objc_opt_self(OctaneManager) sharedInstance];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t aBlock = 0LL;
    unsigned __int8 v21 = [v19 saveConfigurationData:isa withContext:v18 error:&aBlock];

    uint64_t v22 = aBlock;
    if ((v21 & 1) != 0)
    {
      id v23 = (id)aBlock;
      Class v24 = UInt._bridgeToObjectiveC()().super.super.isa;
      uint64_t v25 = sub_10007B1FC((uint64_t *)&unk_10032B180);
      uint64_t v26 = swift_allocObject(v25, 48LL, 7LL);
      *(_OWORD *)(v26 + 16) = xmmword_10027A600;
      *(void *)(v26 + 32) = a3;
      *(void *)(v26 + 40) = a4;
      swift_bridgeObjectRetain(a4);
      Class v27 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v26);
      id v28 = v70;
      [v70 simulateStoreKitPushWithAction:v24 forBundleIdentifiers:v27];

      unint64_t v29 = v72;
      v72[2](v72, 0LL);
LABEL_11:
      NSString v63 = String._bridgeToObjectiveC()();
      [v28 logExitForMethod:v63 context:v18];
      swift_release(v71);

      unint64_t v30 = v29;
      goto LABEL_12;
    }

    id v31 = (id)aBlock;
    a5 = (void *)_convertNSErrorToError(_:)(v22);

    swift_willThrow(v32, v33, v34, v35, v36, v37, v38);
    if (qword_100328B40 == -1)
    {
LABEL_7:
      uint64_t v39 = sub_100079604(v10, (uint64_t)qword_10033E1A8);
      sub_100085BA4(v39, v68, type metadata accessor for SKLogger);
      uint64_t aBlock = 0LL;
      v74[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(48LL);
      v40._countAndFlagsBits = 0xD00000000000002ALL;
      v40._object = (void *)0x800000010029DD70LL;
      String.append(_:)(v40);
      id v41 = [v18 bundleID];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      os_log_type_t v44 = v43;

      v45._countAndFlagsBits = v42;
      v45._object = v44;
      String.append(_:)(v45);
      swift_bridgeObjectRelease(v44);
      v46._countAndFlagsBits = 8250LL;
      v46._object = (void *)0xE200000000000000LL;
      String.append(_:)(v46);
      uint64_t v76 = (uint64_t)a5;
      sub_10007B1FC(&qword_100329B90);
      _print_unlocked<A, B>(_:_:)(&v76, &aBlock);
      uint64_t v48 = aBlock;
      unint64_t v47 = v74[0];
      id v49 = [v18 logKey];
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      uint64_t v51 = v50;

      os_log_type_t v53 = static os_log_type_t.error.getter(v52);
      swift_bridgeObjectRetain_n(v51, 2LL);
      uint64_t v54 = swift_bridgeObjectRetain_n(v47, 2LL);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      if (os_log_type_enabled(v55, v53))
      {
        uint64_t v56 = swift_slowAlloc(22LL, -1LL);
        uint64_t v65 = v48;
        uint64_t v57 = v56;
        uint64_t v66 = swift_slowAlloc(64LL, -1LL);
        uint64_t v76 = v66;
        *(_DWORD *)uint64_t v57 = 136446466;
        uint64_t aBlock = 91LL;
        v74[0] = 0xE100000000000000LL;
        swift_bridgeObjectRetain(v51);
        v58._countAndFlagsBits = v67;
        v58._object = v51;
        String.append(_:)(v58);
        v59._countAndFlagsBits = 8285LL;
        v59._object = (void *)0xE200000000000000LL;
        String.append(_:)(v59);
        swift_bridgeObjectRelease(v51);
        unint64_t v60 = v74[0];
        uint64_t aBlock = sub_10007A488(aBlock, v74[0], &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v74, v57 + 4);
        swift_bridgeObjectRelease_n(v51, 2LL);
        swift_bridgeObjectRelease(v60);
        *(_WORD *)(v57 + 12) = 2082;
        swift_bridgeObjectRetain(v47);
        uint64_t aBlock = sub_10007A488(v65, v47, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v74, v57 + 14);
        swift_bridgeObjectRelease_n(v47, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v55, v53, "%{public}s%{public}s", (uint8_t *)v57, 0x16u);
        uint64_t v61 = v66;
        swift_arrayDestroy(v66, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
        swift_bridgeObjectRelease(v47);
        swift_bridgeObjectRelease(v51);
      }

      else
      {

        swift_bridgeObjectRelease_n(v47, 3LL);
        swift_bridgeObjectRelease_n(v51, 3LL);
      }

      unint64_t v29 = v72;
      sub_100085BC4(v68, type metadata accessor for SKLogger);
      swift_errorRetain(a5);
      os_log_type_t v62 = (void *)_convertErrorToNSError(_:)(a5);
      v29[2](v29, v62);

      swift_errorRelease(a5);
      swift_errorRelease(a5);
      id v28 = v70;
      goto LABEL_11;
    }

LABEL_14:
    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_7;
  }

  swift_release(v71);
  unint64_t v30 = v72;
LABEL_12:
  _Block_release(v30);
}

  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  id v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  unsigned __int8 v21 = __OFADD__(v20, 1LL);
  uint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

      if (v72 == (void *)++v13)
      {
        sub_10009C494();
        id v4 = v66;
        goto LABEL_17;
      }
    }

    sub_100087418((uint64_t)&v74, (uint64_t *)&unk_100328ED0);
LABEL_8:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    id v18 = sub_100079604(v70, (uint64_t)qword_10033E1A8);
    sub_10007961C(v18, (uint64_t)v8);
    uint64_t v74 = 0LL;
    uint64_t v75 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    sub_1000EB1A8();
    LODWORD(v73) = sub_10009C324(v19, "processIdentifier");
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._countAndFlagsBits = 0xD000000000000019LL;
    v22._object = v69;
    String.append(_:)(v22);
    LOBYTE(v73) = v71;
    id v23 = sub_1000EB2A0();
    _print_unlocked<A, B>(_:_:)(v23, v24);
    v25._countAndFlagsBits = 10272LL;
    v25._object = (void *)0xE200000000000000LL;
    String.append(_:)(v25);
    LOBYTE(v73) = v14;
    uint64_t v26 = sub_1000EB2A0();
    _print_unlocked<A, B>(_:_:)(v26, v27);
    v28._countAndFlagsBits = 41LL;
    v28._object = (void *)0xE100000000000000LL;
    String.append(_:)(v28);
    unint64_t v29 = v74;
    unint64_t v30 = v75;
    uint64_t v32 = static os_log_type_t.debug.getter(v31);
    uint64_t v33 = swift_bridgeObjectRetain_n(v30, 2LL);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    uint64_t v35 = v32;
    if (os_log_type_enabled(v34, v32))
    {
      uint64_t v36 = sub_10007B9FC(22LL);
      uint64_t v37 = sub_10007B9FC(64LL);
      uint64_t v74 = v37;
      *(_DWORD *)uint64_t v36 = v68;
      *(void *)(v36 + 4) = sub_1000EB1BC();
      *(_WORD *)(v36 + 12) = 2082;
      swift_bridgeObjectRetain(v30);
      *(void *)(v36 + 14) = sub_10007A488(v29, v30, &v74);
      sub_1000EB2AC();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s%{public}s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v37, 2LL, v67);
      sub_10007B974(v37);
      sub_10007B974(v36);
      swift_bridgeObjectRelease(v30);
    }

    else
    {

      sub_1000EB2AC();
    }

    sub_10007A3CC((uint64_t)v8);
    goto LABEL_14;
  }

  sub_10009C494();
LABEL_17:
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v38 = sub_100079604(v70, (uint64_t)qword_10033E1A8);
  sub_10007961C(v38, v4);
  sub_1000EB1E0();
  sub_1000EB1A8();
  LODWORD(v73) = sub_10009C324(v39, "processIdentifier");
  v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  sub_1000EB294(v77);
  sub_100085EF0();
  v40._object = (void *)0x80000001002A1B40LL;
  v40._countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v40);
  LOBYTE(v73) = v71;
  id v41 = sub_1000EB2A0();
  uint64_t v43 = _print_unlocked<A, B>(_:_:)(v41, v42);
  static os_log_type_t.error.getter(v43);
  os_log_type_t v44 = sub_1000EB278();
  Swift::String v45 = (void *)Logger.logObject.getter(v44);
  if (os_log_type_enabled((os_log_t)v45, (os_log_type_t)&type metadata for Any))
  {
    Swift::String v46 = (_DWORD *)sub_10007B9FC(22LL);
    unint64_t v47 = sub_10007B9FC(64LL);
    uint64_t v74 = v47;
    os_log_s *v46 = 136446466;
    uint64_t v73 = sub_1000EB1BC();
    sub_1000EB198();
    sub_1000EB1F4();
    uint64_t v73 = sub_1000EB248();
    sub_1000EB198();
    sub_1000B1FD4();
    sub_1000EB1CC((void *)&_mh_execute_header, v48, v49, "%{public}s%{public}s");
    sub_1000EB258((uint64_t)&type metadata for Any);
    sub_10007B974(v47);
    sub_10007B974((uint64_t)v46);
    sub_100085EF0();
  }

  else
  {

    sub_1000B1FD4();
  }

  uint64_t v50 = 0LL;
LABEL_23:
  sub_10007A3CC(v4);
  return v50;
}

            uint64_t v15 = v17;
            goto LABEL_21;
          }

  sub_10011C244();
  sub_1000939C0();
  return sub_1000AA42C(*(uint64_t (**)(void))(v1 + 8));
}

  NSString v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v13 + 48) + a2) = v5;
  NSString v14 = *(void *)(v13 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

void StoreKitTestingService.saveConfigurationData(_:bundleID:completion:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_1000860EC();
  uint64_t v51 = v11;
  NSString v12 = sub_100086100();
  NSString v13 = String._bridgeToObjectiveC()();
  unint64_t v14 = sub_10007CBFC((uint64_t)&unk_1002EB030);
  *(void *)(v14 + 16) = v4;
  *(void *)(v14 + 24) = v2;
  v54[3] = (unint64_t)sub_100081848;
  v54[4] = v14;
  uint64_t v53 = (uint64_t)_NSConcreteStackBlock;
  v54[0] = 1107296256LL;
  uint64_t v15 = sub_100086278((uint64_t)sub_100081868);
  swift_retain(v14);
  swift_release(v14);
  uint64_t v52 = v0;
  id v16 = [v0 validateOctaneContextFor:v12 with:v13 completion:v15];

  _Block_release(v15);
  LOBYTE(v12) = sub_100086108(v14, (uint64_t)"", 101LL, 148LL);
  swift_release(v14);
  if ((v12 & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (v16)
  {
    id v17 = [(id)objc_opt_self(OctaneManager) sharedInstance];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v53 = 0LL;
    unsigned int v19 = [v17 saveConfigurationData:isa withContext:v16 error:&v53];

    uint64_t v20 = v53;
    if (v19)
    {
      id v21 = (id)v53;
      Class v22 = UInt._bridgeToObjectiveC()().super.super.isa;
      uint64_t v23 = sub_10007B1FC((uint64_t *)&unk_10032B180);
      uint64_t v24 = swift_allocObject(v23, 48LL, 7LL);
      *(_OWORD *)(v24 + 16) = xmmword_10027A600;
      *(void *)(v24 + 32) = v8;
      *(void *)(v24 + 40) = v6;
      swift_bridgeObjectRetain(v6);
      Class v25 = Array._bridgeToObjectiveC()().super.isa;
      sub_100086004();
      uint64_t v26 = v52;
      [v52 simulateStoreKitPushWithAction:v22 forBundleIdentifiers:v25];

      sub_10008617C();
LABEL_10:
      NSString v49 = sub_100086100();
      [v26 logExitForMethod:v49 context:v16];

      goto LABEL_11;
    }

    id v0 = (id)v53;
    uint64_t v6 = _convertNSErrorToError(_:)(v20);

    uint64_t v8 = v6;
    swift_willThrow(v27, v28, v29, v30, v31, v32, v33);
    if (qword_100328B40 == -1)
    {
LABEL_6:
      uint64_t v34 = sub_100079604(v9, (uint64_t)qword_10033E1A8);
      sub_100085BA4(v34, v51, type metadata accessor for SKLogger);
      sub_1000861A4();
      _StringGuts.grow(_:)(48LL);
      sub_100085F08(0xD00000000000002ALL, (uint64_t)"Failed to save StoreKit configuration for ");
      static String._unconditionallyBridgeFromObjectiveC(_:)([v16 bundleID]);
      sub_1000862E8();
      sub_10008619C(v8);
      sub_100086004();
      sub_1000862C4();
      v55[0] = v6;
      sub_10007B1FC(&qword_100329B90);
      sub_1000862DC();
      uint64_t v36 = v53;
      uint64_t v35 = v54[0];
      uint64_t v37 = sub_100086040((uint64_t)[v16 logKey]);
      uint64_t v39 = v38;

      os_log_type_t v41 = static os_log_type_t.error.getter(v40);
      sub_100085EE8((uint64_t)v39);
      uint64_t v42 = sub_100085EE8(v35);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = v41;
      if (os_log_type_enabled(v43, v41))
      {
        uint64_t v45 = sub_10007B9FC(22LL);
        uint64_t v50 = sub_10007B9FC(64LL);
        v55[0] = v50;
        *(_DWORD *)uint64_t v45 = 136446466;
        uint64_t v53 = 91LL;
        v54[0] = 0xE100000000000000LL;
        swift_bridgeObjectRetain(v39);
        v46._countAndFlagsBits = v37;
        v46._object = v39;
        String.append(_:)(v46);
        sub_100085F14();
        swift_bridgeObjectRelease(v39);
        uint64_t v53 = sub_10007A488(v53, v54[0], v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v45 + 4);
        sub_10007D974((uint64_t)v39);
        sub_100085EF0();
        *(_WORD *)(v45 + 12) = 2082;
        sub_10007BA3C();
        uint64_t v53 = sub_100086308(v36, v47, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v45 + 14);
        sub_100085E64(v35);
        sub_100086038((void *)&_mh_execute_header, v43, v44, "%{public}s%{public}s", (uint8_t *)v45);
        sub_100086030(v50, v48, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v50);
        sub_10007B974(v45);
        sub_10007BA44();
        swift_bridgeObjectRelease(v39);
      }

      else
      {

        sub_100085E64(v35);
        sub_100085E64((uint64_t)v39);
      }

      sub_100085BC4(v51, type metadata accessor for SKLogger);
      swift_errorRetain(v6);
      sub_10008617C();
      sub_100086184();
      sub_100086184();
      uint64_t v26 = v52;
      goto LABEL_10;
    }

uint64_t sub_100081848()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100081868(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  id v4 = a2;
  v3(a2);
}

uint64_t sub_1000818AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000818BC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100081990( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v95 = a1;
  uint64_t v96 = a2;
  id v100 = (id)type metadata accessor for SKLogger(0LL);
  uint64_t v14 = __chkstk_darwin(v100);
  uint64_t v97 = (uint64_t)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v101 = (uint64_t)&v95 - v16;
  uint64_t v17 = swift_allocObject(&unk_1002EB198, 24LL, 7LL);
  *(void *)(v17 + 16) = a8;
  v103 = a8;
  _Block_copy(a8);
  id v98 = "toreKit configuration for ";
  NSString v18 = String._bridgeToObjectiveC()();
  NSString v19 = String._bridgeToObjectiveC()();
  uint64_t v20 = swift_allocObject(&unk_1002EB1C0, 32LL, 7LL);
  *(void *)(v20 + 16) = sub_100085E1C;
  *(void *)(v20 + 24) = v17;
  uint64_t v102 = v17;
  v105[3] = (unint64_t)sub_100085E50;
  uint64_t v106 = v20;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  v105[0] = 1107296256LL;
  v105[1] = (unint64_t)sub_100081868;
  v105[2] = (unint64_t)&unk_1002EB1D8;
  id v21 = _Block_copy(&aBlock);
  uint64_t v22 = v106;
  swift_retain(v20);
  swift_release(v22);
  id v99 = a7;
  id v23 = objc_msgSend(a7, "validateOctaneContextFor:with:completion:", v18, v19, v21, v95, v96);

  _Block_release(v21);
  LOBYTE(v1_Block_object_dispose(va, 8) = swift_isEscapingClosureAtFileLocation(v20, "", 101LL, 174LL, 95LL, 1LL);
  swift_release(v20);
  if ((v18 & 1) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  if (v23)
  {
    uint64_t v24 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000LL) == 0) {
      uint64_t v24 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      id v25 = [(id)objc_opt_self(OctaneManager) sharedInstance];
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v27 = String._bridgeToObjectiveC()();
      uint64_t aBlock = 0LL;
      unsigned __int8 v28 = [v25 saveConfigurationAssetData:isa name:v27 withContext:v23 error:&aBlock];

      uint64_t v29 = aBlock;
      if ((v28 & 1) != 0)
      {
        uint64_t v30 = v103;
        uint64_t v31 = (void (*)(const void *, void))v103[2];
        id v32 = (id)aBlock;
        v31(v30, 0LL);
      }

      else
      {
        id v52 = (id)aBlock;
        uint64_t v53 = _convertNSErrorToError(_:)(v29);

        swift_willThrow(v54, v55, v56, v57, v58, v59, v60);
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        uint64_t v61 = sub_100079604((uint64_t)v100, (uint64_t)qword_10033E1A8);
        sub_100085BA4(v61, v97, type metadata accessor for SKLogger);
        uint64_t aBlock = 0LL;
        v105[0] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(57LL);
        v62._countAndFlagsBits = 0xD00000000000002CLL;
        v62._object = (void *)0x800000010029DDE0LL;
        String.append(_:)(v62);
        v63._countAndFlagsBits = a3;
        v63._object = (void *)a4;
        String.append(_:)(v63);
        v64._countAndFlagsBits = 0x20726F6620LL;
        v64._object = (void *)0xE500000000000000LL;
        String.append(_:)(v64);
        id v65 = [v23 bundleID];
        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
        uint64_t v68 = v67;

        v69._countAndFlagsBits = v66;
        v69._object = v68;
        String.append(_:)(v69);
        swift_bridgeObjectRelease(v68);
        v70._countAndFlagsBits = 8250LL;
        v70._object = (void *)0xE200000000000000LL;
        String.append(_:)(v70);
        uint64_t v107 = v53;
        sub_10007B1FC(&qword_100329B90);
        _print_unlocked<A, B>(_:_:)(&v107, &aBlock);
        uint64_t v72 = aBlock;
        unint64_t v71 = v105[0];
        id v100 = v23;
        id v73 = [v23 logKey];
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
        uint64_t v76 = v75;

        os_log_type_t v78 = static os_log_type_t.error.getter(v77);
        swift_bridgeObjectRetain_n(v76, 2LL);
        uint64_t v79 = swift_bridgeObjectRetain_n(v71, 2LL);
        int v80 = (os_log_s *)Logger.logObject.getter(v79);
        if (os_log_type_enabled(v80, v78))
        {
          uint64_t v81 = swift_slowAlloc(22LL, -1LL);
          uint64_t v96 = v72;
          uint64_t v82 = v81;
          uint64_t v101 = swift_slowAlloc(64LL, -1LL);
          uint64_t v107 = v101;
          *(_DWORD *)uint64_t v82 = 136446466;
          uint64_t aBlock = 91LL;
          v105[0] = 0xE100000000000000LL;
          swift_bridgeObjectRetain(v76);
          v83._countAndFlagsBits = v74;
          v83._object = v76;
          String.append(_:)(v83);
          v84._countAndFlagsBits = 8285LL;
          v84._object = (void *)0xE200000000000000LL;
          String.append(_:)(v84);
          swift_bridgeObjectRelease(v76);
          unint64_t v85 = v105[0];
          uint64_t aBlock = sub_10007A488(aBlock, v105[0], &v107);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v105, v82 + 4);
          swift_bridgeObjectRelease_n(v76, 2LL);
          swift_bridgeObjectRelease(v85);
          *(_WORD *)(v82 + 12) = 2082;
          swift_bridgeObjectRetain(v71);
          uint64_t aBlock = sub_10007A488(v96, v71, &v107);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v105, v82 + 14);
          swift_bridgeObjectRelease_n(v71, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v80, v78, "%{public}s%{public}s", (uint8_t *)v82, 0x16u);
          uint64_t v86 = v101;
          swift_arrayDestroy(v101, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1LL, -1LL);
          swift_slowDealloc(v82, -1LL, -1LL);
          swift_bridgeObjectRelease(v71);
          swift_bridgeObjectRelease(v76);
        }

        else
        {

          swift_bridgeObjectRelease_n(v71, 3LL);
          swift_bridgeObjectRelease_n(v76, 3LL);
        }

        sub_100085BC4(v97, type metadata accessor for SKLogger);
        swift_errorRetain(v53);
        uint64_t v93 = (void *)_convertErrorToNSError(_:)(v53);
        uint64_t v30 = v103;
        ((void (*)(void *, void *))v103[2])(v103, v93);

        swift_errorRelease(v53);
        swift_errorRelease(v53);
        id v23 = v100;
      }

      NSString v94 = String._bridgeToObjectiveC()();
      [v99 logExitForMethod:v94 context:v23];
      swift_release(v102);

      goto LABEL_21;
    }

    if (qword_100328B40 == -1)
    {
LABEL_10:
      uint64_t v34 = sub_100079604((uint64_t)v100, (uint64_t)qword_10033E1A8);
      sub_100085BA4(v34, v101, type metadata accessor for SKLogger);
      uint64_t aBlock = 0LL;
      v105[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(37LL);
      swift_bridgeObjectRelease(v105[0]);
      uint64_t aBlock = 0xD000000000000023LL;
      v105[0] = 0x800000010029DE10LL;
      v35._countAndFlagsBits = a5;
      v35._object = a6;
      String.append(_:)(v35);
      id v36 = (id)aBlock;
      unint64_t v37 = v105[0];
      id v100 = v23;
      id v38 = [v23 logKey];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      os_log_type_t v41 = v40;

      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      swift_bridgeObjectRetain_n(v41, 2LL);
      uint64_t v44 = swift_bridgeObjectRetain_n(v37, 2LL);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      if (os_log_type_enabled(v45, v43))
      {
        uint64_t v46 = swift_slowAlloc(22LL, -1LL);
        id v99 = v36;
        uint64_t v47 = v46;
        uint64_t v48 = swift_slowAlloc(64LL, -1LL);
        uint64_t v107 = v48;
        *(_DWORD *)uint64_t v47 = 136446466;
        uint64_t aBlock = 91LL;
        v105[0] = 0xE100000000000000LL;
        swift_bridgeObjectRetain(v41);
        v49._countAndFlagsBits = v39;
        v49._object = v41;
        String.append(_:)(v49);
        v50._countAndFlagsBits = 8285LL;
        v50._object = (void *)0xE200000000000000LL;
        String.append(_:)(v50);
        swift_bridgeObjectRelease(v41);
        unint64_t v51 = v105[0];
        uint64_t aBlock = sub_10007A488(aBlock, v105[0], &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v105, v47 + 4);
        swift_bridgeObjectRelease_n(v41, 2LL);
        swift_bridgeObjectRelease(v51);
        *(_WORD *)(v47 + 12) = 2082;
        swift_bridgeObjectRetain(v37);
        uint64_t aBlock = sub_10007A488((uint64_t)v99, v37, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v105, v47 + 14);
        swift_bridgeObjectRelease_n(v37, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v45, v43, "%{public}s%{public}s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy(v48, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v41);
      }

      else
      {

        swift_bridgeObjectRelease_n(v37, 3LL);
        swift_bridgeObjectRelease_n(v41, 3LL);
      }

      sub_100085BC4(v101, type metadata accessor for SKLogger);
      type metadata accessor for ASDError(0LL);
      uint64_t v88 = v87;
      uint64_t v107 = 951LL;
      unint64_t v89 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
      sub_10007ACCC( (unint64_t *)&qword_100328DE8,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10027950C);
      _BridgedStoredNSError.init(_:userInfo:)(&v107, v89, v88, v90);
      id v91 = (id)aBlock;
      v92 = (void *)_convertErrorToNSError(_:)(aBlock);
      uint64_t v30 = v103;
      ((void (*)(void *, void *))v103[2])(v103, v92);
      swift_release(v102);

LABEL_21:
      uint64_t v33 = v30;
      goto LABEL_22;
    }

void StoreKitTestingService.saveConfigurationAsset(_:fileName:bundleID:completion:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v93 = v11;
  uint64_t v85 = v12;
  uint64_t v86 = v13;
  uint64_t v14 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v15);
  sub_1000862F4();
  uint64_t v87 = v16;
  sub_100086200();
  __chkstk_darwin(v17);
  uint64_t v90 = (uint64_t)&v85 - v18;
  uint64_t v88 = "toreKit configuration for ";
  NSString v19 = sub_100086100();
  NSString v20 = String._bridgeToObjectiveC()();
  uint64_t v21 = sub_10007CBFC((uint64_t)&unk_1002EB080);
  uint64_t v91 = v2;
  uint64_t v92 = v4;
  *(void *)(v21 + 16) = v4;
  *(void *)(v21 + 24) = v2;
  v95[3] = sub_100085E50;
  uint64_t v96 = v21;
  uint64_t v94 = (uint64_t)_NSConcreteStackBlock;
  v95[0] = 1107296256LL;
  uint64_t v22 = sub_100086278((uint64_t)sub_100081868);
  uint64_t v23 = v96;
  swift_retain(v21);
  swift_release(v23);
  id v89 = v0;
  id v24 = objc_msgSend(v0, "validateOctaneContextFor:with:completion:", v19, v20, v22, v85, v86);

  _Block_release(v22);
  LOBYTE(v20) = sub_100086108(v21, (uint64_t)"", 101LL, 174LL);
  swift_release(v21);
  if ((v20 & 1) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (!v24) {
    goto LABEL_20;
  }
  unint64_t v25 = HIBYTE(v10) & 0xF;
  uint64_t v0 = (void *)v93;
  if ((v10 & 0x2000000000000000LL) == 0) {
    unint64_t v25 = v93 & 0xFFFFFFFFFFFFLL;
  }
  if (!v25)
  {
    if (qword_100328B40 == -1)
    {
LABEL_9:
      uint64_t v35 = sub_100079604(v14, (uint64_t)qword_10033E1A8);
      sub_100085BA4(v35, v90, type metadata accessor for SKLogger);
      sub_1000861A4();
      _StringGuts.grow(_:)(37LL);
      swift_bridgeObjectRelease(v95[0]);
      uint64_t v94 = 0xD000000000000023LL;
      v95[0] = 0x800000010029DE10LL;
      v36._countAndFlagsBits = v8;
      v36._object = v6;
      String.append(_:)(v36);
      id v38 = (id)v94;
      unint64_t v37 = v95[0];
      uint64_t v93 = (uint64_t)v24;
      uint64_t v39 = sub_100086040((uint64_t)[v24 logKey]);
      os_log_type_t v41 = v40;

      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      sub_100085EE8((uint64_t)v41);
      uint64_t v44 = sub_100085EE8(v37);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      if (os_log_type_enabled(v45, v43))
      {
        uint64_t v46 = sub_10007B9FC(22LL);
        id v89 = v38;
        uint64_t v47 = v46;
        uint64_t v48 = sub_10007B9FC(64LL);
        v97[0] = v48;
        *(_DWORD *)uint64_t v47 = 136446466;
        uint64_t v94 = 91LL;
        v95[0] = 0xE100000000000000LL;
        sub_100085FEC();
        v49._countAndFlagsBits = v39;
        v49._object = v41;
        String.append(_:)(v49);
        sub_100085F14();
        sub_100085EF0();
        uint64_t v94 = sub_10008620C(v94, v50, v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v47 + 4);
        sub_10007D974((uint64_t)v41);
        sub_10007B980();
        *(_WORD *)(v47 + 12) = 2082;
        swift_bridgeObjectRetain(v37);
        uint64_t v94 = sub_10007A488((uint64_t)v89, v37, v97);
        sub_100086194((uint64_t)&v94, (uint64_t)v95);
        sub_100085E64(v37);
        sub_100086038((void *)&_mh_execute_header, v45, v43, "%{public}s%{public}s", (uint8_t *)v47);
        sub_100086030(v48, v51, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v48);
        sub_10007B974(v47);
        swift_bridgeObjectRelease(v37);
        sub_100085EF0();
      }

      else
      {

        sub_100085E64(v37);
        sub_100085E64((uint64_t)v41);
      }

      sub_100085BC4(v90, type metadata accessor for SKLogger);
      type metadata accessor for ASDError(0LL);
      uint64_t v80 = v79;
      v97[0] = 951LL;
      unint64_t v81 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
      sub_10007ACCC( (unint64_t *)&qword_100328DE8,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10027950C);
      _BridgedStoredNSError.init(_:userInfo:)(v97, v81, v80, v82);
      id v83 = (id)v94;
      sub_10008617C();

      goto LABEL_20;
    }

BOOL static ProductRequest.RequestKind.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ProductRequest.RequestKind.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_100082CD8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x4449656C646E7562LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C646E7562LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x5255656C646E7562LL && a2 == 0xE90000000000004CLL)
  {
    unint64_t v8 = 0xE90000000000004CLL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5255656C646E7562LL, 0xE90000000000004CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x4E79616C70736964LL && a2 == 0xEB00000000656D61LL)
  {
    swift_bridgeObjectRelease(0xEB00000000656D61LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964LL, 0xEB00000000656D61LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100082E48()
{
  return 3LL;
}

Swift::Int StoreKitInternalError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t variable initialization expression of ClientOverride.storeExternalVersion()
{
  return 0LL;
}

uint64_t sub_100082EA0(char a1)
{
  if (!a1) {
    return 0x4449656C646E7562LL;
  }
  if (a1 == 1) {
    return 0x5255656C646E7562LL;
  }
  return 0x4E79616C70736964LL;
}

BOOL sub_100082F04(char *a1, char *a2)
{
  return static ProductRequest.RequestKind.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100082F10()
{
  return StoreKitInternalError.hashValue.getter(*v0);
}

void sub_100082F18(uint64_t a1)
{
}

Swift::Int sub_100082F20()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100082F60()
{
  return sub_100082EA0(*v0);
}

uint64_t sub_100082F68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100082CD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100082F8C()
{
  return variable initialization expression of ClientOverride.storeExternalVersion();
}

uint64_t sub_100082FA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100082E48();
  *a1 = result;
  return result;
}

uint64_t sub_100082FCC(uint64_t a1)
{
  unint64_t v2 = sub_100085B68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100082FF4(uint64_t a1)
{
  unint64_t v2 = sub_100085B68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008301C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_100329C88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100085FDC();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100085B44(a1, v10);
  unint64_t v12 = sub_100085B68();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &_s9OctaneAppV10CodingKeysON,  &_s9OctaneAppV10CodingKeysON,  v12,  v10,  v11);
  uint64_t v13 = *v3;
  uint64_t v14 = v3[1];
  char v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v25, v5);
  if (!v2)
  {
    uint64_t v15 = _s9OctaneAppVMa(0LL);
    uint64_t v16 = (char *)v3 + *(int *)(v15 + 20);
    char v24 = 1;
    uint64_t v17 = sub_100086318();
    sub_10007ACCC( &qword_100329C98,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v24, v5, v17, v18);
    NSString v19 = (uint64_t *)((char *)v3 + *(int *)(v15 + 24));
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    char v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v23, v5);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100083198(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = sub_10007B1FC(&qword_100329CA0);
  __chkstk_darwin(v22);
  sub_100085FDC();
  uint64_t v5 = _s9OctaneAppVMa(0LL);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_100085FDC();
  uint64_t v9 = (void *)(v8 - v7);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100085B44(a1, v10);
  unint64_t v12 = sub_100085B68();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &_s9OctaneAppV10CodingKeysON,  &_s9OctaneAppV10CodingKeysON,  v12,  v10,  v11);
  if (v23)
  {
    sub_100086290();
  }

  else
  {
    uint64_t v20 = (uint64_t)v9;
    char v26 = 0;
    *uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v22);
    v9[1] = v13;
    uint64_t v14 = sub_100086318();
    char v25 = 1;
    sub_10007ACCC( &qword_100329CA8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v25, v22, v14, v15);
    sub_10008521C(v2, (uint64_t)v9 + *(int *)(v5 + 20));
    char v24 = 2;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v22);
    uint64_t v18 = v17;
    sub_100085FF4();
    NSString v19 = (uint64_t *)(v20 + *(int *)(v5 + 24));
    *NSString v19 = v16;
    v19[1] = v18;
    sub_100085BA4(v20, a2, _s9OctaneAppVMa);
    sub_100086290();
    sub_100085BC4(v20, _s9OctaneAppVMa);
  }

  sub_100086084();
}

void sub_1000833E8(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000833FC(void *a1)
{
  return sub_10008301C(a1);
}

uint64_t sub_100083410()
{
  uint64_t v2 = sub_1000834E8();
  if (!v1)
  {
    uint64_t v4 = v2;
    if (v2[2])
    {
      uint64_t v5 = type metadata accessor for PropertyListEncoder(0LL);
      swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
      uint64_t v6 = PropertyListEncoder.init()();
      dispatch thunk of PropertyListEncoder.outputFormat.setter(200LL);
      uint64_t v9 = v4;
      uint64_t v7 = sub_10007B1FC(&qword_100329BA8);
      unint64_t v8 = sub_100084938();
      uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v9, v7, v8);
      sub_100086004();
      swift_release(v6);
    }

    else
    {
      sub_100086004();
      return 0LL;
    }
  }

  return v0;
}

void *sub_1000834E8()
{
  uint64_t v3 = v2 - v1;
  uint64_t v4 = sub_100086318();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  id v11 = [(id)objc_opt_self(NSFileManager) defaultManager];
  id v12 = objc_msgSend(v11, "sk_octanePersistedDataURL");
  if (!v12)
  {
    sub_1000862D0(v3, 1LL);
    goto LABEL_7;
  }

  uint64_t v13 = v12;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

  uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v14(v3, v8, v4);
  sub_1000862D0(v3, 0LL);
  if (sub_10007D824(v3, 1LL, v4) == 1)
  {
LABEL_7:
    sub_100085298(v3, (uint64_t *)&unk_10032A1C0);

    return _swiftEmptyArrayStorage;
  }

  v14((uint64_t)v10, (char *)v3, v4);
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = (void *)v16;
  id v27 = 0LL;
  id v18 = sub_100084AF0(v16, (uint64_t)_swiftEmptyArrayStorage, 0LL, (uint64_t)&v27, v11);

  id v19 = v27;
  if (v18)
  {
    uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v4);
    id v21 = v19;

    uint64_t v22 = (void *)swift_allocObject(&unk_1002EB170, 56LL, 7LL);
    v22[2] = sub_100083848;
    v22[3] = 0LL;
    v22[4] = v20;
    v22[5] = sub_100083820;
    v22[6] = 0LL;
    uint64_t v23 = swift_bridgeObjectRetain(v20);
    sub_100084B80(v23, (void (*)(char *))sub_100085210, (uint64_t)v22);
    id v25 = v24;
    swift_release(v22);
    swift_bridgeObjectRelease(v20);
  }

  else
  {
    id v25 = v27;
    _convertNSErrorToError(_:)(v19);

    sub_1000862A4();
  }

  sub_1000861B4();
  return v25;
}

uint64_t sub_100083820@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URL.lastPathComponent.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100083848@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *a1;
  unint64_t v8 = (void *)a1[1];
  sub_10007CB7C(0LL, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
  swift_bridgeObjectRetain(v8);
  id v9 = sub_1000F9360(v7, v8, 0);
  uint64_t v13 = v9;
  if (v9)
  {
    swift_bridgeObjectRetain(v8);
    id v14 = [v13 URL];
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

    uint64_t v15 = type metadata accessor for URL(0LL);
    sub_10007D0AC((uint64_t)v6, 0LL, 1LL, v15);
    id v16 = [v13 localizedName];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v12 = v17;
  }

  else
  {
    uint64_t v10 = type metadata accessor for URL(0LL);
    sub_10007D0AC((uint64_t)v6, 1LL, 1LL, v10);
    swift_bridgeObjectRetain(v8);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
  }

  *a2 = v7;
  a2[1] = (uint64_t)v8;
  uint64_t v18 = _s9OctaneAppVMa(0LL);
  uint64_t result = sub_10008521C((uint64_t)v6, (uint64_t)a2 + *(int *)(v18 + 20));
  uint64_t v20 = (uint64_t *)((char *)a2 + *(int *)(v18 + 24));
  *uint64_t v20 = v11;
  v20[1] = v12;
  return result;
}

void StoreKitTestingService.sendPurchaseIntent(for:bundleID:completion:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v66 = v9;
  id v67 = v10;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v11);
  sub_1000860EC();
  uint64_t v73 = v12;
  uint64_t v13 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v14);
  sub_1000860EC();
  uint64_t v75 = v15;
  type metadata accessor for Date(0LL);
  sub_100085E74();
  __chkstk_darwin(v16);
  sub_100085FDC();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = sub_100086310();
  uint64_t v68 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v69 = v22;
  uint64_t v70 = (uint64_t)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v76 = (uint64_t *)((char *)&v66 - v23);
  sub_1000862B8();
  NSString v24 = String._bridgeToObjectiveC()();
  NSString v25 = String._bridgeToObjectiveC()();
  uint64_t v26 = sub_10007CBFC((uint64_t)&unk_1002EB0D0);
  uint64_t v71 = v4;
  uint64_t v72 = v2;
  *(void *)(v26 + 16) = v4;
  *(void *)(v26 + 24) = v2;
  v79[3] = sub_100085E50;
  uint64_t v80 = v26;
  uint64_t v78 = (uint64_t)_NSConcreteStackBlock;
  v79[0] = 1107296256LL;
  v79[1] = sub_100081868;
  v79[2] = &unk_1002EB0E8;
  id v27 = _Block_copy(&v78);
  uint64_t v28 = v80;
  swift_retain(v26);
  swift_release(v28);
  Swift::String v74 = v0;
  id v29 = [v0 validateOctaneContextFor:v24 with:v25 completion:v27];

  _Block_release(v27);
  uint64_t v30 = sub_100086108(v26, (uint64_t)"", 101LL, 259LL);
  swift_release(v26);
  if ((v30 & 1) != 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_4;
  }

  if (!v29) {
    goto LABEL_8;
  }
  sub_10008618C();
  uint64_t v30 = (uint64_t)v67;
  uint64_t v31 = swift_bridgeObjectRetain(v67);
  Date.init()(v31);
  uint64_t v65 = v19;
  uint64_t v19 = v66;
  PurchaseIntentInternal.init(appName:bundleID:productID:productName:timestamp:additionalBuyParams:)( 0LL,  0LL,  v8,  (uint64_t)v6,  v66,  v30,  0LL,  0LL,  v76,  v65,  0LL,  0LL);
  if (qword_100328B40 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v32 = sub_100079604(v13, (uint64_t)qword_10033E1A8);
  sub_100085BA4(v32, v75, type metadata accessor for SKLogger);
  uint64_t v78 = 0LL;
  v79[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(v79[0]);
  uint64_t v78 = 0xD000000000000018LL;
  v79[0] = 0x800000010029DE70LL;
  v33._countAndFlagsBits = v19;
  v33._object = (void *)v30;
  String.append(_:)(v33);
  sub_100086128();
  v34._countAndFlagsBits = v8;
  v34._object = v6;
  String.append(_:)(v34);
  uint64_t v36 = v78;
  unint64_t v35 = v79[0];
  id v67 = v29;
  uint64_t v37 = sub_100086040((uint64_t)[v29 logKey]);
  uint64_t v39 = v38;

  os_log_type_t v41 = static os_log_type_t.debug.getter(v40);
  sub_100085EE8(v39);
  uint64_t v42 = sub_100085EE8(v35);
  os_log_type_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  if (os_log_type_enabled(v43, v41))
  {
    uint64_t v44 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v45 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v44 = 136446466;
    uint64_t v77 = v45;
    uint64_t v78 = 91LL;
    v79[0] = 0xE100000000000000LL;
    sub_10008600C();
    sub_10008619C(v37);
    sub_100085F14();
    sub_100086004();
    uint64_t v78 = sub_10008620C(v78, v46, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v44 + 4);
    sub_10007D974(v39);
    sub_10007B980();
    sub_1000861F0();
    sub_100085FEC();
    uint64_t v78 = sub_10007A488(v36, v35, &v77);
    sub_100086194((uint64_t)&v78, (uint64_t)v79);
    sub_100085E64(v35);
    sub_100086038((void *)&_mh_execute_header, v43, v41, "%{public}s%{public}s", v44);
    sub_100086030(v45, v47, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v45);
    sub_10007B974((uint64_t)v44);
    sub_100085EF0();
    sub_100086004();
  }

  else
  {

    sub_100085E64(v35);
    sub_100085E64(v39);
  }

  sub_100085BC4(v75, type metadata accessor for SKLogger);
  uint64_t v48 = type metadata accessor for TaskPriority(0LL);
  uint64_t v49 = v73;
  sub_10007D0AC(v73, 1LL, 1LL, v48);
  uint64_t v50 = v76;
  uint64_t v51 = v70;
  sub_100085BA4((uint64_t)v76, v70, type metadata accessor for PurchaseIntentInternal);
  uint64_t v52 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v53 = (v52 + 40) & ~v52;
  unint64_t v54 = (v69 + v53 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v55 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v56 = (void *)swift_allocObject(&unk_1002EB120, v55 + 8, v52 | 7);
  v56[2] = 0LL;
  v56[3] = 0LL;
  uint64_t v57 = v67;
  void v56[4] = v67;
  sub_100085264(v51, (uint64_t)v56 + v53, type metadata accessor for PurchaseIntentInternal);
  uint64_t v58 = (void *)((char *)v56 + v54);
  uint64_t v59 = v72;
  *uint64_t v58 = v71;
  v58[1] = v59;
  uint64_t v60 = v74;
  *(void *)((char *)v56 + v55) = v74;
  id v61 = v57;
  swift_retain(v59);
  id v62 = v60;
  sub_100084100(v49);
  uint64_t v64 = v63;

  swift_release(v64);
  sub_100085298(v49, (uint64_t *)&unk_10032BAB0);
  sub_100085BC4((uint64_t)v50, type metadata accessor for PurchaseIntentInternal);
LABEL_8:
  sub_100085E98();
}

uint64_t sub_100083F84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[5] = a7;
  void v8[6] = a8;
  v8[3] = a5;
  void v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_100083FA4, 0LL, 0LL);
}

uint64_t sub_100083FA4()
{
  uint64_t v2 = sub_100086040((uint64_t)[*(id *)(v1 + 16) logKey]);
  uint64_t v4 = v3;

  *(void *)(v1 + 56) = v4;
  uint64_t v5 = (void *)swift_task_alloc(dword_10032A824);
  *(void *)(v1 + 64) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100084030;
  return sub_1000AB0A8(*(void *)(v1 + 24), 1, v2, v4);
}

uint64_t sub_100084030()
{
  return swift_task_switch(sub_100084088, 0LL, 0LL);
}

uint64_t sub_100084088()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  (*(void (**)(void))(v0 + 32))(0LL);
  sub_1000862B8();
  NSString v3 = sub_100086100();
  [v1 logExitForMethod:v3 context:v2];

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100084100(uint64_t a1)
{
  uint64_t v5 = sub_100085F70(a1);
  if (*(void *)(v2 + 16))
  {
    sub_100086298();
    sub_100086320();
    sub_1000861C4();
    sub_100086214();
  }

  else
  {
    uint64_t v1 = 0LL;
    uint64_t v4 = 0LL;
  }

  uint64_t v6 = sub_10007CBFC((uint64_t)&unk_1002EB2B0);
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v2;
  if (v4 | v1)
  {
    v8[0] = 0LL;
    v8[1] = 0LL;
    uint64_t v7 = v8;
    v8[2] = v1;
    v8[3] = v4;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  swift_task_create(v5, v7, &type metadata for ()[8], &unk_100329BD8, v6);
  sub_10008606C();
}

void sub_10008419C(uint64_t a1)
{
  uint64_t v5 = sub_100085F70(a1);
  if (*(void *)(v2 + 16))
  {
    sub_100086298();
    sub_100086320();
    sub_1000861C4();
    sub_100086214();
  }

  else
  {
    uint64_t v1 = 0LL;
    uint64_t v4 = 0LL;
  }

  uint64_t v6 = sub_10007CBFC((uint64_t)&unk_1002EB288);
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v2;
  uint64_t v7 = sub_10007B1FC(&qword_10032BCD0);
  if (v4 | v1)
  {
    v9[0] = 0LL;
    v9[1] = 0LL;
    uint64_t v8 = v9;
    v9[2] = v1;
    v9[3] = v4;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  swift_task_create(v5, v8, v7, &unk_100329BD0, v6);
  sub_10008606C();
}

unint64_t sub_100084308(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10007B1FC(&qword_10032A2B0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    sub_100085EF0();
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100085384(v7, (uint64_t)&v16, &qword_100329BE0);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100084438(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_1000853B0(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100084438(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10008449C(a1, a2, v4);
}

unint64_t sub_10008449C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_1000845E0(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085384(a1, (uint64_t)v16, (uint64_t *)&unk_10032BAB0);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  uint64_t v18 = sub_10007D824((uint64_t)v16, 1LL, v17);
  if ((_DWORD)v18 == 1)
  {
    sub_100085298((uint64_t)v16, (uint64_t *)&unk_10032BAB0);
    uint64_t result = 0LL;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }

  else
  {
    unsigned __int8 v20 = TaskPriority.rawValue.getter(v18);
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
    uint64_t result = v20;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_100084728()
{
  uint64_t v1 = sub_100086310();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  uint64_t v8 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 56));
  uint64_t v9 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  swift_bridgeObjectRelease(*(void *)(v8 + *(int *)(v1 + 36) + 8));
  swift_release(*(void *)(v0 + v6 + 8));

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100084818(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100086310() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = (void *)((char *)v1 + v6);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = *(void *)((char *)v1 + v7);
  uint64_t v16 = (void *)swift_task_alloc(dword_100329B9C);
  *(void *)(v2 + 16) = v16;
  *uint64_t v16 = v2;
  v16[1] = sub_1000848E0;
  return sub_100083F84(a1, v8, v9, v10, v11, v13, v14, v15);
}

uint64_t sub_1000848E0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008490C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100084930(uint64_t a1)
{
}

unint64_t sub_100084938()
{
  unint64_t result = qword_100329BB0;
  if (!qword_100329BB0)
  {
    uint64_t v1 = sub_1000849B4(&qword_100329BA8);
    sub_10007ACCC(&qword_100329BB8, _s9OctaneAppVMa, (uint64_t)&unk_10027A688);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100329BB0);
  }

  return result;
}

uint64_t sub_1000849B4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t _s9OctaneAppVMa(uint64_t a1)
{
  uint64_t result = qword_100329C40;
  if (!qword_100329C40) {
    return swift_getSingletonMetadata(a1, &_s9OctaneAppVMn);
  }
  return result;
}

uint64_t sub_100084A30( uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr))
{
  return swift_bridgeObjectRelease(v7[1]);
}

uint64_t sub_100084A84(void *a1)
{
  id v2 = objc_msgSend(a1, "sk_clientID");

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

id sub_100084AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  id v11 = [a5 contentsOfDirectoryAtURL:a1 includingPropertiesForKeys:isa options:a3 error:a4];

  return v11;
}

void sub_100084B80(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v86 = a2;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v85 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v88 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  NSString v84 = (char *)&v79 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v79 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v79 - v16;
  uint64_t v18 = sub_10007B1FC(&qword_100329BC0);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v91 = (uint64_t)&v79 - v22;
  uint64_t v93 = _s9OctaneAppVMa(0LL);
  uint64_t v23 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v94 = (uint64_t)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v25 = *(void *)(a1 + 16);
  uint64_t v87 = a1;
  uint64_t v80 = v15;
  id v89 = v17;
  uint64_t v90 = v23;
  unint64_t v92 = v25;
  if (!v25)
  {
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v50 = *(unsigned __int8 *)(v23 + 80);
    unint64_t v51 = _swiftEmptyArrayStorage[3];
    uint64_t v81 = (v50 + 32) & ~v50;
    Swift::String v34 = (char *)_swiftEmptyArrayStorage + v81;
    uint64_t v52 = a1;
    uint64_t v36 = v51 >> 1;
    swift_bridgeObjectRetain(v52);
    swift_retain(a3);
    unint64_t v37 = 0LL;
LABEL_18:
    uint64_t v88 = v50 | 7;
    while (1)
    {
      if (v37 == v25)
      {
        uint64_t v53 = 1LL;
        unint64_t v37 = v25;
        uint64_t v54 = (uint64_t)v89;
      }

      else
      {
        if (v37 >= v25) {
          goto LABEL_55;
        }
        uint64_t v54 = (uint64_t)v89;
        (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v89,  v87 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
        + *(void *)(v6 + 72) * v37,
          v5);
        uint64_t v53 = 0LL;
        ++v37;
      }

      uint64_t v55 = 1LL;
      sub_10007D0AC(v54, v53, 1LL, v5);
      sub_10008521C(v54, (uint64_t)v15);
      if (sub_10007D824((uint64_t)v15, 1LL, v5) != 1)
      {
        uint64_t v56 = v85;
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v85, v15, v5);
        v86(v56);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v56, v5);
        uint64_t v55 = 0LL;
      }

      uint64_t v57 = v55;
      uint64_t v58 = v91;
      uint64_t v59 = v93;
      sub_10007D0AC(v91, v57, 1LL, v93);
      sub_100085264(v58, v94, _s9OctaneAppVMa);
      if (v36)
      {
        uint64_t v60 = v30;
      }

      else
      {
        unint64_t v61 = v30[3];
        int64_t v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v62 <= 1) {
          uint64_t v63 = 1LL;
        }
        else {
          uint64_t v63 = v62;
        }
        uint64_t v64 = sub_10007B1FC(&qword_100329BC8);
        uint64_t v65 = *(void *)(v90 + 72);
        uint64_t v66 = v81;
        uint64_t v60 = (void *)swift_allocObject(v64, v81 + v65 * v63, v88);
        size_t v67 = j__malloc_size(v60);
        if (!v65) {
          goto LABEL_57;
        }
        int64_t v68 = v67 - v66;
        if (v67 - v66 == 0x8000000000000000LL && v65 == -1) {
          goto LABEL_59;
        }
        uint64_t v70 = v68 / v65;
        v60[2] = v63;
        v60[3] = 2 * (v68 / v65);
        uint64_t v71 = (char *)v60 + v66;
        unint64_t v72 = v30[3];
        uint64_t v73 = (v72 >> 1) * v65;
        if (v30[2])
        {
          if (v60 < v30 || v71 >= (char *)v30 + v81 + v73)
          {
            swift_arrayInitWithTakeFrontToBack(v71);
          }

          else if (v60 != v30)
          {
            swift_arrayInitWithTakeBackToFront(v71);
          }

          v30[2] = 0LL;
        }

        Swift::String v34 = &v71[v73];
        uint64_t v36 = (v70 & 0x7FFFFFFFFFFFFFFFLL) - (v72 >> 1);
        swift_release(v30);
        uint64_t v15 = v80;
      }

      unint64_t v25 = v92;
      BOOL v75 = __OFSUB__(v36--, 1LL);
      if (v75)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }

      sub_100085264(v94, (uint64_t)v34, _s9OctaneAppVMa);
      v34 += *(void *)(v90 + 72);
      uint64_t v30 = v60;
    }

    swift_release(a3);
    swift_bridgeObjectRelease(v87);
    sub_100085298(v58, &qword_100329BC0);
    unint64_t v76 = v30[3];
    if (v76 < 2) {
      return;
    }
    unint64_t v77 = v76 >> 1;
    BOOL v75 = __OFSUB__(v77, v36);
    unint64_t v78 = v77 - v36;
    if (!v75)
    {
      v30[2] = v78;
      return;
    }

    goto LABEL_61;
  }

  uint64_t v26 = sub_10007B1FC(&qword_100329BC8);
  uint64_t v27 = *(void *)(v23 + 72);
  uint64_t v28 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v29 = (v28 + 32) & ~v28;
  uint64_t v79 = v28;
  uint64_t v30 = (void *)swift_allocObject(v26, v29 + v27 * v25, v28 | 7);
  size_t v31 = j__malloc_size(v30);
  if (!v27) {
    goto LABEL_60;
  }
  if (v31 - v29 != 0x8000000000000000LL || v27 != -1)
  {
    uint64_t v81 = v29;
    uint64_t v82 = v27;
    uint64_t v33 = (uint64_t)(v31 - v29) / v27;
    v30[2] = v25;
    v30[3] = 2 * v33;
    Swift::String v34 = (char *)v30 + v29;
    uint64_t v35 = a1;
    uint64_t v36 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - v25;
    swift_bridgeObjectRetain(v35);
    swift_retain(a3);
    unint64_t v37 = 0LL;
    unint64_t v38 = v25;
    uint64_t v83 = v6;
    while (1)
    {
      if (v37 == v25)
      {
        uint64_t v39 = 1LL;
        unint64_t v37 = v25;
        uint64_t v40 = (uint64_t)v84;
      }

      else
      {
        if (v37 >= v25)
        {
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          break;
        }

        unint64_t v41 = v87
        uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        uint64_t v40 = (uint64_t)v84;
        v42(v84, v41, v5);
        uint64_t v39 = 0LL;
        ++v37;
      }

      uint64_t v43 = 1LL;
      sub_10007D0AC(v40, v39, 1LL, v5);
      uint64_t v44 = v40;
      uint64_t v45 = v88;
      sub_10008521C(v44, v88);
      int v46 = sub_10007D824(v45, 1LL, v5);
      uint64_t v6 = v83;
      if (v46 != 1)
      {
        uint64_t v47 = v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v85, v88, v5);
        v86(v47);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v47, v5);
        uint64_t v43 = 0LL;
      }

      uint64_t v48 = v43;
      uint64_t v49 = v93;
      sub_10007D0AC((uint64_t)v21, v48, 1LL, v93);
      sub_100085264((uint64_t)v21, (uint64_t)v34, _s9OctaneAppVMa);
      v34 += v82;
      --v38;
      unint64_t v25 = v92;
      if (!v38)
      {
        uint64_t v50 = v79;
        uint64_t v15 = v80;
        goto LABEL_18;
      }
    }
  }

  __break(1u);
LABEL_63:
  __break(1u);
}

uint64_t sub_1000851CC(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  return sub_100084A30(a1, a2, a3, *(void *)a4, *(void (**)(void *__return_ptr))(a4 + 8));
}

uint64_t sub_1000851DC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100085210(uint64_t a1)
{
  return sub_1000851CC(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t sub_10008521C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_100085264(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_1000861D4(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  sub_1000221B0();
}

void sub_100085298(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_10007B1FC(a2);
  sub_10008614C(v2);
  sub_1000221B0();
}

uint64_t sub_1000852C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000852EC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032BCC4);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008609C(v1);
  return sub_100086014(v2, v3, v4, v5);
}

uint64_t sub_100085338()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032BD64);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008609C(v1);
  return sub_100086014(v2, v3, v4, v5);
}

void sub_100085384(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10007B1FC(a3);
  sub_1000860BC(v3);
  sub_1000221B0();
}

_OWORD *sub_1000853B0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t *sub_1000853C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL(0LL);
    swift_bridgeObjectRetain(v7);
    if (sub_10007D824((uint64_t)v10, 1LL, v11))
    {
      uint64_t v12 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_10007D0AC((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }

  return v4;
}

uint64_t sub_1000854D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

void *sub_100085548(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  swift_bridgeObjectRetain(v6);
  if (sub_10007D824((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_10007D0AC((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

void *sub_10008562C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  int v12 = sub_10007D824((uint64_t)v9, 1LL, v11);
  int v13 = sub_10007D824((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  sub_10007D0AC((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

_OWORD *sub_10008577C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  if (sub_10007D824((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_10007D0AC((uint64_t)v7, 0LL, 1LL, v9);
  }

  *(_OWORD *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100085844(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  int v12 = sub_10007D824((uint64_t)v9, 1LL, v11);
  int v13 = sub_10007D824((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  sub_10007D0AC((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v21 = v17[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_100085974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100085980);
}

uint64_t sub_100085980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    return sub_10007D824(a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_1000859F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100085A04);
}

uint64_t sub_100085A04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
    return sub_10007D0AC(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

void sub_100085A74(uint64_t a1)
{
  v4[0] = &unk_10027A630;
  sub_100085AF0(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = &unk_10027A648;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

void sub_100085AF0(uint64_t a1)
{
  if (!qword_100329C50)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100329C50);
    }
  }

void *sub_100085B44(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_100085B68()
{
  unint64_t result = qword_100329C90;
  if (!qword_100329C90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A774, &_s9OctaneAppV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100329C90);
  }

  return result;
}

void sub_100085BA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_1000861D4(a1, a2, a3);
  sub_1000860BC(v3);
  sub_1000221B0();
}

void sub_100085BC4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_10008614C(v2);
  sub_1000221B0();
}

_BYTE *_s9OctaneAppV10CodingKeysOwCP(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t _s9OctaneAppV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  id v100 = [v89 iTunesMetadata];
  uint64_t v101 = [v100 storeItemIdentifier];

  if (v101
    && (uint64_t v102 = [v89 iTunesMetadata],
        v103 = [v102 versionIdentifier],
        v102,
        v103))
  {
    uint64_t v104 = [v89 iTunesMetadata];
    v105 = [v104 storeItemIdentifier];

    *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_storeItemID) = v105;
    uint64_t v106 = [v89 iTunesMetadata];
    uint64_t v107 = [v106 versionIdentifier];
  }

  else
  {
    sub_1000E9184(0LL, &qword_10032B548, &OBJC_CLASS___ASFReceipt_ptr);
    uint64_t v108 = [v89 URL];
    unint64_t v109 = (uint64_t)v172;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v108);

    uint64_t v111 = sub_1000E54B4(v109, v110);
    uint64_t v107 = v111;
    if (v111)
    {
      id v112 = [v111 itemID];
      uint64_t v113 = [v112 unsignedLongLongValue];

      *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_storeItemID) = v113;
      os_log_type_t v114 = [v107 installerVersionID];
      uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
      v117 = v116;

      uint64_t v118 = sub_1000DEB28(v115, v117);
      LOBYTE(v115) = v119;

      if ((v115 & 1) != 0) {
        uint64_t v107 = 0LL;
      }
      else {
        uint64_t v107 = (id)v118;
      }
    }

    else
    {
      *(void *)((char *)v43 + OBJC_IVAR____TtC9storekitd6Client_storeItemID) = 0LL;
    }
  }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v5 = v6 - 12;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  uint64_t v8 = v6 - 7;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  uint64_t v8 = v6 - 4;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  uint64_t v8 = v6 - 3;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  uint64_t v8 = v6 - 6;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  uint64_t v8 = v6 - 26;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  uint64_t v8 = v6 - 10;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  uint64_t v8 = v6 - 27;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  uint64_t v8 = v6 - 5;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

uint64_t _s9OctaneAppV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100085CCC + 4 * byte_10027A615[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100085D00 + 4 * byte_10027A610[v4]))();
}

uint64_t sub_100085D00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100085D08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100085D10LL);
  }
  return result;
}

uint64_t sub_100085D1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100085D24LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100085D28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100085D30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100085D3C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100085D44(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *_s9OctaneAppV10CodingKeysOMa()
{
  return &_s9OctaneAppV10CodingKeysON;
}

unint64_t sub_100085D60()
{
  unint64_t result = qword_100329CB0;
  if (!qword_100329CB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A74C, &_s9OctaneAppV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100329CB0);
  }

  return result;
}

unint64_t sub_100085DA0()
{
  unint64_t result = qword_100329CB8;
  if (!qword_100329CB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A6BC, &_s9OctaneAppV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100329CB8);
  }

  return result;
}

unint64_t sub_100085DE0()
{
  unint64_t result = qword_100329CC0[0];
  if (!qword_100329CC0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10027A6E4, &_s9OctaneAppV10CodingKeysON);
    atomic_store(result, qword_100329CC0);
  }

  return result;
}

uint64_t sub_100085E54()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100085E64(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

id sub_100085E6C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t sub_100085E84()
{
  *(void *)(v1 - 96) = 91LL;
  *(void *)(v1 - 8_Block_object_dispose(va, 8) = 0xE100000000000000LL;
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_100085EB0(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v2, v1);
}

uint64_t sub_100085EC8(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v2 - 88, v1);
}

uint64_t sub_100085EE8(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_100085EF0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100085EF8()
{
  return sub_10007A488(*(void *)(v0 - 96), *(void *)(v0 - 88), (uint64_t *)(v0 - 72));
}

void sub_100085F08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_100085F14()
{
  v0._countAndFlagsBits = 8285LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

void sub_100085F20()
{
  *(void *)(v0 - 96) = 0LL;
  *(void *)(v0 - 8_Block_object_dispose(va, 8) = 0xE000000000000000LL;
}

void sub_100085F30()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_100085F40@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 2LL, a1 + 8);
}

uint64_t sub_100085F50()
{
  return sub_10007A488(*(void *)(v1 - 104), v0, (uint64_t *)(v1 - 72));
}

void sub_100085F60(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100085F70(uint64_t a1)
{
  return sub_1000845E0(a1, 0, 0, 0, 1, 0, 0);
}

uint64_t sub_100085F94()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100085FA8()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_100085FB4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100085FBC()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
  return swift_task_dealloc(v3);
}

  ;
}

uint64_t sub_100085FEC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100085FF4()
{
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v2 - 96), v1);
}

uint64_t sub_100086004()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10008600C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100086014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_100086024()
{
}

uint64_t sub_100086030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 2LL, a3);
}

void sub_100086038(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100086040(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

BOOL sub_100086048(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_100086058()
{
}

void sub_100086064()
{
}

  ;
}

  ;
}

uint64_t sub_10008609C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000860BC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

uint64_t sub_1000860D4(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v2, v1);
}

  ;
}

NSString sub_100086100()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100086108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_isEscapingClosureAtFileLocation(a1, a2, a3, a4, 95LL, 1LL);
}

void sub_100086114(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_10008611C()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void sub_100086128()
{
  v0._countAndFlagsBits = 0x20726F6620LL;
  v0._object = (void *)0xE500000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_10008613C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100086144()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10008614C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_100086160(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_10008617C()
{
  return (*(uint64_t (**)(void))(v0 - 168))();
}

uint64_t sub_100086184()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10008618C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100086194(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void sub_10008619C(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000861A4()
{
  *(void *)(v0 - 144) = 0LL;
  *(void *)(v0 - 136) = 0xE000000000000000LL;
}

uint64_t sub_1000861B4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000861C4()
{
  return dispatch thunk of Actor.unownedExecutor.getter(v1, v0);
}

uint64_t sub_1000861D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

void sub_1000861E4()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 96) = *(void *)(v0 - 96);
  *(void *)(v0 - 8_Block_object_dispose(va, 8) = v1;
}

void sub_1000861F0()
{
  *(_WORD *)(v0 + 12) = 2082;
}

  ;
}

uint64_t sub_10008620C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(a1, v3, a3);
}

uint64_t sub_100086214()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100086224()
{
  return type metadata accessor for SKLogger(0LL);
}

void sub_10008622C()
{
}

uint64_t sub_100086234()
{
  return sub_10007A488(*(void *)(v0 - 96), *(void *)(v0 - 88), (uint64_t *)(v0 - 72));
}

void sub_100086244()
{
  *(void *)(v0 - 96) = 91LL;
  *(void *)(v0 - 8_Block_object_dispose(va, 8) = 0xE100000000000000LL;
}

  ;
}

void sub_10008626C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0xD00000000000001ALL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

void *sub_100086278@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 12_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 - 120) = v1;
  return _Block_copy((const void *)(v2 - 144));
}

id sub_100086284(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100086290()
{
  return sub_10007B1A0(v0);
}

uint64_t sub_100086298()
{
  return swift_getObjectType(v0);
}

uint64_t sub_1000862A4()
{
  return swift_willThrow();
}

void sub_1000862AC()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

  ;
}

void sub_1000862C4()
{
  v0._countAndFlagsBits = 8250LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1000862D0(uint64_t a1, uint64_t a2)
{
  return sub_10007D0AC(a1, a2, 1LL, v2);
}

uint64_t sub_1000862DC()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 96, v0 - 144);
}

void sub_1000862E8()
{
}

  ;
}

uint64_t sub_100086308(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(a1, v3, a3);
}

uint64_t sub_100086310()
{
  return type metadata accessor for PurchaseIntentInternal(0LL);
}

uint64_t sub_100086318()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_100086320()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10008632C(uint64_t result)
{
  *(void *)(v1 - 72) = result;
  return result;
}

uint64_t sub_10008633C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000863B8()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = type metadata accessor for Optional(0LL, *(void *)(*(void *)v0 + 80LL));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_1000865A8();
  return v0;
}

uint64_t sub_100086404()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AsyncValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100086574(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncValue);
}

uint64_t sub_100086428(uint64_t a1)
{
  v2[1] = "\b";
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 88);
}

uint64_t sub_100086470()
{
  return v0;
}

uint64_t sub_10008647C()
{
  return sub_100086470();
}

uint64_t sub_100086494()
{
  return v0;
}

uint64_t sub_1000864B4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for WeakStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100086574(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakStore);
}

uint64_t sub_1000864D8(uint64_t a1)
{
  v2[1] = (char *)&value witness table for () + 64;
  void v2[2] = "\b";
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 104);
}

uint64_t sub_100086530()
{
  return v0;
}

uint64_t sub_100086550()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for WeakCloudStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100086574(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakCloudStore);
}

uint64_t sub_100086574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  id v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000865A8()
{
  return swift_defaultActor_destroy(v0);
}

NSString sub_1000865B0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100329E48 = (uint64_t)result;
  return result;
}

NSString sub_1000865E4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100329E50 = (uint64_t)result;
  return result;
}

uint64_t sub_100086618()
{
  uint64_t v0 = type metadata accessor for LaunchServicesObserver();
  swift_allocObject(v0, 16LL, 7LL);
  uint64_t result = sub_100086650();
  qword_10033E070 = result;
  return result;
}

uint64_t sub_100086650()
{
  id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v2 = qword_1003289A8;
  swift_retain(v0);
  if (v2 != -1) {
    swift_once(&qword_1003289A8, sub_1000865B0);
  }
  [v1 addObserver:v0 selector:"handleInstalledEvent:" name:qword_100329E48 object:0];
  swift_release(v0);
  uint64_t v3 = qword_1003289B0;
  swift_retain(v0);
  if (v3 != -1) {
    swift_once(&qword_1003289B0, sub_1000865E4);
  }
  [v1 addObserver:v0 selector:"handleUninstalledEvent:" name:qword_100329E50 object:0];

  swift_release(v0);
  return v0;
}

uint64_t sub_100086768()
{
  id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  sub_1000875F4(v1, "removeObserver:");

  return v0;
}

uint64_t sub_1000867B8()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

void sub_1000867D8()
{
  uint64_t v2 = v0;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v3);
  os_log_type_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v7);
  sub_10008758C();
  char v8 = sub_100087218();
  if (v9)
  {
    uint64_t v10 = v9;
    if ((v8 & 1) != 0)
    {
      swift_bridgeObjectRelease(v9);
      return;
    }

    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v11 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
    sub_10007961C(v11, v1);
    uint64_t v34 = 0LL;
    unint64_t v35 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    sub_100087558();
    uint64_t v33 = v2;
    type metadata accessor for LaunchServicesObserver();
    sub_1000875DC();
    v12._object = (void *)0x800000010029E100LL;
    v12._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v12);
    v13._countAndFlagsBits = Array.description.getter(v10, &type metadata for String);
    object = v13._object;
    String.append(_:)(v13);
    uint64_t v15 = swift_bridgeObjectRelease(object);
    uint64_t v17 = v34;
    unint64_t v16 = v35;
    os_log_type_t v18 = static os_log_type_t.debug.getter(v15);
    uint64_t v19 = swift_bridgeObjectRetain_n(v16, 2LL);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = v18;
    if (os_log_type_enabled(v20, v18))
    {
      uint64_t v22 = sub_10007B9FC(22LL);
      uint64_t v23 = sub_10007B9FC(64LL);
      uint64_t v32 = v17;
      uint64_t v24 = v23;
      uint64_t v34 = v23;
      *(_DWORD *)uint64_t v22 = 136446466;
      uint64_t v33 = sub_10008756C();
      sub_10008757C();
      *(_WORD *)(v22 + 12) = 2082;
      swift_bridgeObjectRetain(v16);
      uint64_t v33 = sub_10007A488(v32, v16, &v34);
      sub_10008757C();
      sub_100085E64(v16);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s%{public}s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
      sub_10007B974(v24);
      sub_10007B974(v22);
      swift_bridgeObjectRelease(v16);
    }

    else
    {

      sub_100085E64(v16);
    }

    sub_10007A3CC(v1);
    id v25 = [(id)objc_opt_self(OctaneManager) sharedInstance];
    Class isa = sub_100087608().super.isa;
    [v25 handleAppsInstalledWithBundleIDs:isa];

    uint64_t v27 = type metadata accessor for TaskPriority(0LL);
    sub_1000875FC((uint64_t)v5, v28, v29, v27);
    uint64_t v30 = (void *)sub_1000875E8((uint64_t)&unk_1002EB688);
    v30[2] = 0LL;
    v30[3] = 0LL;
    v30[4] = v10;
    sub_1000F9480((uint64_t)v5, (uint64_t)&unk_100329F20, (uint64_t)v30);
    swift_release(v31);
  }

  sub_100085E98();
}

uint64_t sub_100086AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_100086B10, 0LL, 0LL);
}

uint64_t sub_100086B10()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = sub_100086224();
  sub_100079604(v1, (uint64_t)qword_10033E1A8);
  unint64_t v2 = sub_1000F4060();
  uint64_t v4 = v3;
  v0[3] = v3;
  os_log_type_t v5 = (uint64_t **)swift_task_alloc(dword_10032A7E4);
  v0[4] = (uint64_t)v5;
  *os_log_type_t v5 = v0;
  v5[1] = (uint64_t *)sub_100086BB0;
  return sub_1000AC590(v0[2], v2, v4);
}

uint64_t sub_100086BB0()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100086BEC()
{
  uint64_t v3 = v0;
  sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  sub_100085E74();
  __chkstk_darwin(v4);
  sub_10008758C();
  uint64_t v5 = sub_100086224();
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000875A4();
  char v29 = sub_100087218();
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v9 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v9, v2);
    v31[0] = 0LL;
    v31[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(38LL);
    sub_100087558();
    uint64_t v30 = v3;
    type metadata accessor for LaunchServicesObserver();
    sub_1000875DC();
    v10._object = (void *)0x800000010029E0D0LL;
    v10._countAndFlagsBits = 0xD000000000000021LL;
    String.append(_:)(v10);
    v11._countAndFlagsBits = Array.description.getter(v8, &type metadata for String);
    object = v11._object;
    String.append(_:)(v11);
    uint64_t v13 = swift_bridgeObjectRelease(object);
    os_log_type_t v14 = static os_log_type_t.debug.getter(v13);
    uint64_t v15 = swift_bridgeObjectRetain_n(0xE000000000000000LL, 2LL);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = v14;
    if (os_log_type_enabled(v16, v14))
    {
      uint64_t v18 = sub_10007B9FC(22LL);
      uint64_t v19 = sub_10007B9FC(64LL);
      v31[0] = v19;
      *(_DWORD *)uint64_t v18 = 136446466;
      uint64_t v30 = sub_10008756C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v18 + 4);
      *(_WORD *)(v18 + 12) = 2082;
      swift_bridgeObjectRetain(0xE000000000000000LL);
      uint64_t v30 = sub_10007A488(0LL, 0xE000000000000000LL, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v18 + 14);
      sub_100085E64(0xE000000000000000LL);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s%{public}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
      sub_10007B974(v19);
      sub_10007B974(v18);
      swift_bridgeObjectRelease(0xE000000000000000LL);
    }

    else
    {

      sub_100085E64(0xE000000000000000LL);
    }

    sub_10007A3CC(v2);
    id v20 = [(id)objc_opt_self(OctaneManager) sharedInstance];
    Class isa = sub_100087608().super.isa;
    sub_1000875F4(v20, "handleAppsUninstalledWithBundleIDs:");

    if ((v29 & 1) != 0)
    {
      swift_bridgeObjectRelease(v8);
    }

    else
    {
      uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___ReceiptManager);
      Class v23 = sub_100087608().super.isa;
      sub_1000875F4(v22, "handleAppUninstallForBundleIDs:");

      uint64_t v24 = type metadata accessor for TaskPriority(0LL);
      sub_1000875FC(v1, v25, v26, v24);
      uint64_t v27 = (void *)sub_1000875E8((uint64_t)&unk_1002EB660);
      v27[2] = 0LL;
      v27[3] = 0LL;
      v27[4] = v8;
      sub_100084100(v1);
      swift_release(v28);
      sub_100087418(v1, (uint64_t *)&unk_10032BAB0);
    }
  }

  sub_100085E98();
}

uint64_t sub_100086F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_100086F60, 0LL, 0LL);
}

uint64_t sub_100086F60()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_100086224();
  sub_100079604(v2, (uint64_t)qword_10033E1A8);
  *(void *)(v0 + 24) = sub_1000F4060();
  *(void *)(v0 + 32) = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v0 + 40) = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 16);
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = 0LL;
    uint64_t v6 = *(void *)(v5 + 32);
    uint64_t v7 = *(void *)(v5 + 40);
    *(void *)(v0 + 56) = v7;
    uint64_t v8 = dword_10032AA74;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v5);
    uint64_t v9 = (void *)swift_task_alloc(v8);
    *(void *)(v0 + 64) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100087058;
    return sub_1000BBE08(v6, v7, 0LL, 0LL, *(void *)(v0 + 24), *(void *)(v0 + 32));
  }

  else
  {
    swift_bridgeObjectRelease(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100087058()
{
  return swift_task_switch(sub_10008709C, 0LL, 0LL);
}

uint64_t sub_10008709C()
{
  uint64_t v1 = *(void *)(v0 + 48) + 1LL;
  if (v1 == *(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 16));
    sub_10007B980();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = v1;
    uint64_t v3 = *(void *)(v0 + 16) + 16 * v1;
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 40);
    *(void *)(v0 + 56) = v4;
    uint64_t v6 = dword_10032AA74;
    swift_bridgeObjectRetain(v4);
    uint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 64) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100087058;
    return sub_1000BBE08(v5, v4, 0LL, 0LL, *(void *)(v0 + 24), *(void *)(v0 + 32));
  }

uint64_t sub_100087160(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for Notification(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_1000875A4();
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  swift_retain(a1);
  a4(v4);
  swift_release(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
}

uint64_t type metadata accessor for LaunchServicesObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd22LaunchServicesObserver);
}

uint64_t sub_100087218()
{
  uint64_t result = Notification.userInfo.getter();
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v30 = 0x4449656C646E7562LL;
  uint64_t v31 = 0xE900000000000073LL;
  uint64_t v2 = AnyHashable.init<A>(_:)(&v30, &type metadata for String, &protocol witness table for String);
  sub_1000875BC(v2, v3, v4, v5, v6, v7, v8, v9, v28, v30, v31, v32[0], v33, v34, v35, v36, v37);
  sub_100087388((uint64_t)v32);
  if (!v38)
  {
    sub_10007B980();
    sub_100087418((uint64_t)&v37, (uint64_t *)&unk_100328ED0);
    return 0LL;
  }

  uint64_t v10 = sub_10007B1FC(&qword_10032A500);
  if ((sub_100087528(v10, v11, v12, v10, v13) & 1) == 0)
  {
    uint64_t v27 = v1;
LABEL_11:
    swift_bridgeObjectRelease(v27);
    return 0LL;
  }

  uint64_t v14 = v30;
  if (!*(void *)(v30 + 16))
  {
    sub_10007B980();
    uint64_t v27 = v14;
    goto LABEL_11;
  }

  strcpy((char *)&v37, "isPlaceholder");
  HIWORD(v37) = -4864;
  uint64_t v15 = AnyHashable.init<A>(_:)(&v37, &type metadata for String, &protocol witness table for String);
  sub_1000875BC(v15, v16, v17, v18, v19, v20, v21, v22, v29, v30, v31, v32[0], v33, v34, v35, v36, v37);
  sub_10007B980();
  uint64_t v23 = sub_100087388((uint64_t)v32);
  if (v38)
  {
  }

  else
  {
    sub_100087418((uint64_t)&v37, (uint64_t *)&unk_100328ED0);
  }

  return 0LL;
}

uint64_t sub_100087388(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000873C0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100329F0C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008753C(v1);
  return sub_100086F48(v2, v3, v4, v5);
}

uint64_t sub_100087418(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10007B1FC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100087458()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100087484()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100329F1C);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10008753C(v1);
  return sub_100086AF8(v2, v3, v4, v5);
}

uint64_t sub_1000874DC()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008750C(uint64_t a1)
{
  *(void *)(v2 - _Block_object_dispose(va, 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_10008751C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100087528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v5 + 8, a4, 6LL);
}

uint64_t sub_10008753C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_100087558()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 96) = *(void *)(v0 - 96);
  *(void *)(v0 - 8_Block_object_dispose(va, 8) = v1;
  v2._countAndFlagsBits = 91LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
}

uint64_t sub_10008756C()
{
  return sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)(v0 - 96));
}

uint64_t sub_10008757C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 104, v0, v1);
}

  ;
}

  ;
}

void sub_1000875BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17)
{
}

void sub_1000875CC()
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
}

uint64_t sub_1000875DC()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 104, v0 - 96);
}

uint64_t sub_1000875E8(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

id sub_1000875F4(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000875FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007D0AC(a1, 1LL, 1LL, a4);
}

NSArray sub_100087608()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_100087610(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100087670, 0LL, 0LL);
}

uint64_t sub_100087670()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for MessageServerRequest(0LL) + 32);
  uint64_t v30 = 0LL;
  unint64_t v31 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  *(void *)(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0xE000000000000000LL;
  _print_unlocked<A, B>(_:_:)(v4, v0 + 16);
  v6._object = (void *)0x800000010029DA70LL;
  v6._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v6);
  unint64_t v7 = *(void *)(v0 + 24);
  uint64_t v28 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v4 + 32);
  uint64_t v9 = *(void **)(v4 + 40);
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  swift_bridgeObjectRetain_n(v9, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  if (os_log_type_enabled(v13, v11))
  {
    uint64_t v25 = *(void *)(v0 + 72);
    uint64_t v26 = *(void *)(v0 + 64);
    uint64_t v27 = *(void *)(v0 + 80);
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v14 = 136446466;
    uint64_t v29 = v15;
    uint64_t v30 = 91LL;
    unint64_t v31 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v9);
    v16._countAndFlagsBits = v8;
    v16._object = v9;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 8285LL;
    v17._object = (void *)0xE200000000000000LL;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v9);
    *(void *)(v0 + 32) = sub_10007A488(91LL, 0xE100000000000000LL, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v14 + 4);
    swift_bridgeObjectRelease(0xE100000000000000LL);
    sub_10007D974((uint64_t)v9);
    *(_WORD *)(v14 + 12) = 2082;
    swift_bridgeObjectRetain(v7);
    *(void *)(v0 + 40) = sub_10007A488(v28, v7, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 14);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v11, "%{public}s%{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v15);
    sub_10007B974(v14);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 64);
    sub_10007D974((uint64_t)v9);
    sub_10007D974(v7);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  swift_bridgeObjectRelease(v7);
  uint64_t v21 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 48);
  uint64_t v23 = type metadata accessor for MessageServerResponse(0LL);
  sub_10007D0AC(v22, 1LL, 1LL, v23);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(0LL, 1LL);
}

uint64_t type metadata accessor for MessageServerRequest(uint64_t a1)
{
  uint64_t result = qword_100329F88;
  if (!qword_100329F88) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessageServerRequest);
  }
  return result;
}

char *sub_100087994(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    unint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    a1[24] = *((_BYTE *)a2 + 24);
    uint64_t v9 = a2[5];
    uint64_t v10 = *(int *)(a3 + 32);
    os_log_type_t v11 = &a1[v10];
    uint64_t v12 = (uint64_t)a2 + v10;
    *((void *)a1 + 4) = a2[4];
    *((void *)a1 + 5) = v9;
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    uint64_t v15 = v4;
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    uint64_t v16 = *(int *)(a3 + 36);
    Swift::String v17 = *(char **)((char *)a2 + v16);
    *(void *)&v7[v16] = v17;
    id v18 = v17;
  }

  return v7;
}

void sub_100087A70(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_100087AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  id v14 = v7;
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v16;
  id v17 = v16;
  return a1;
}

uint64_t sub_100087B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  unint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 36);
  id v17 = *(void **)(a2 + v16);
  id v18 = *(void **)(a1 + v16);
  *(void *)(a1 + v16) = v17;
  id v19 = v17;

  return a1;
}

uint64_t sub_100087C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_100087CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);

  return a1;
}

uint64_t sub_100087D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100087D94);
}

uint64_t sub_100087D94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SKLogger(0LL);
    return sub_10007D824((uint64_t)a1 + *(int *)(a3 + 32), a2, v8);
  }

uint64_t sub_100087E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100087E14);
}

void *sub_100087E14(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SKLogger(0LL);
    return (void *)sub_10007D0AC((uint64_t)v5 + *(int *)(a4 + 32), a2, a2, v7);
  }

  return result;
}

uint64_t sub_100087E80(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = "\t";
  void v4[3] = &unk_10027A9B0;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100087F24()
{
  return sub_100088044(&OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_serverCorrelationID);
}

uint64_t sub_100087F3C(uint64_t a1, uint64_t a2)
{
  return sub_100088090(a1, a2, &OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_serverCorrelationID);
}

id sub_100087F54(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (v3)
  {
    uint64_t v4 = v3;
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    NSString v5 = 0LL;
  }

  return v5;
}

uint64_t sub_100087F98()
{
  return sub_100088044(&OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_environment);
}

void sub_100087FB0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  id v9 = a1;
  a4(v6, v8);
}

uint64_t sub_100088020(uint64_t a1, uint64_t a2)
{
  return sub_100088090(a1, a2, &OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_environment);
}

uint64_t sub_100088038()
{
  return sub_100088044(&OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_storefrontCountryCode);
}

uint64_t sub_100088044(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_100088084(uint64_t a1, uint64_t a2)
{
  return sub_100088090(a1, a2, &OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_storefrontCountryCode);
}

uint64_t sub_100088090(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(v3 + *a3);
  uint64_t v5 = v4[1];
  void *v4 = a1;
  v4[1] = a2;
  return swift_bridgeObjectRelease(v5);
}

id sub_1000880A8()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_serverCorrelationID];
  *(void *)uint64_t v1 = 0LL;
  *((void *)v1 + 1) = 0LL;
  uint64_t v2 = &v0[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_environment];
  *(void *)uint64_t v2 = 0LL;
  *((void *)v2 + 1) = 0LL;
  uint64_t v3 = &v0[OBJC_IVAR____TtC9storekitd28StoreKitServiceErrorMetadata_storefrontCountryCode];
  uint64_t v4 = (objc_class *)type metadata accessor for StoreKitServiceErrorMetadata();
  *(void *)uint64_t v3 = 0LL;
  *((void *)v3 + 1) = 0LL;
  v6.receiver = v0;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, "init");
}

id sub_100088130()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StoreKitServiceErrorMetadata();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StoreKitServiceErrorMetadata()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd28StoreKitServiceErrorMetadata);
}

uint64_t sub_1000881D8(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return sub_1000881FC(result, a2);
  }
  if (a3 == 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000881FC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t destroy for SQLiteValue(uint64_t a1)
{
  return sub_10007F030(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9storekitd11SQLiteValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000881D8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLiteValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000881D8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10007F030(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for SQLiteValue(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SQLiteValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10007F030(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteValue(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000883C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000883D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteValue()
{
  return &type metadata for SQLiteValue;
}

uint64_t sub_1000883E8(void *a1)
{
  uint64_t v3 = sub_10007B1FC(&qword_10032A0A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100085B44(a1, v7);
  unint64_t v9 = sub_100092D1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BindPaymentAccountResponse.CodingKeys,  &type metadata for BindPaymentAccountResponse.CodingKeys,  v9,  v7,  v8);
  if (!v1)
  {
    uint64_t v10 = KeyedDecodingContainer.allKeys.getter(v3);
    uint64_t v11 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease(v10);
    if (v11)
    {
      uint64_t v12 = type metadata accessor for DecodingError(0LL);
      sub_100093030(v12, (uint64_t)&protocol witness table for DecodingError);
      uint64_t v14 = v13;
      sub_10007B1FC(&qword_10032A0B0);
      *uint64_t v14 = &type metadata for BindPaymentAccountResponse;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( _swiftEmptyArrayStorage,  0xD000000000000017LL,  0x800000010029E560LL,  0LL);
      uint64_t v15 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  enum case for DecodingError.typeMismatch(_:),  v12);
      swift_willThrow(v15, v16, v17, v18, v19, v20, v21);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  return sub_10007B1A0(a1);
}

uint64_t sub_100088568()
{
  return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
}

uint64_t sub_1000885A4(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = result;
  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      }
      uint64_t v8 = (uint64_t)sub_1000E8464(v7, v4);
      char v10 = v9 & 1;
      goto LABEL_44;
    }

    v24[0] = result;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_57;
      }
      uint64_t v8 = (BYTE1(result) - 48);
      if (v3 != 2)
      {
        uint64_t v8 = 10LL * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v11 = v3 - 3;
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)v24 + 3;
          while (1)
          {
            unsigned int v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_31;
            }
            uint64_t v14 = 10 * v8;
            uint64_t v8 = v14 + v13;
            char v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_44;
            }
          }
        }
      }
    }

    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v3 == 2)
            {
              char v10 = 0;
              uint64_t v8 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_44;
            }

            if ((BYTE2(result) - 48) <= 9u)
            {
              uint64_t v8 = -10LL * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              uint64_t v19 = v3 - 3;
              if (!v19) {
                goto LABEL_43;
              }
              uint64_t v20 = (unsigned __int8 *)v24 + 3;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  break;
                }
                uint64_t v22 = 10 * v8;
                uint64_t v8 = v22 - v21;
                char v10 = 0;
                ++v20;
                if (!--v19) {
                  goto LABEL_44;
                }
              }
            }
          }

LABEL_31:
          uint64_t v8 = 0LL;
          char v10 = 1;
          goto LABEL_44;
        }

        __break(1u);
LABEL_57:
        __break(1u);
        return result;
      }

      uint64_t v8 = (result - 48);
      if (v3 != 1)
      {
        uint64_t v8 = 10LL * (result - 48) + (BYTE1(result) - 48);
        uint64_t v15 = v3 - 2;
        if (v15)
        {
          uint64_t v16 = (unsigned __int8 *)v24 + 2;
          while (1)
          {
            unsigned int v17 = *v16 - 48;
            if (v17 > 9) {
              goto LABEL_31;
            }
            uint64_t v18 = 10 * v8;
            uint64_t v8 = v18 + v17;
            char v10 = 0;
            ++v16;
            if (!--v15) {
              goto LABEL_44;
            }
          }
        }
      }
    }

              sub_10009BEFC(v4);
              return (unint64_t)v3;
            }
          }
        }
      }
    }

      uint64_t v8 = v18;
LABEL_32:
      if (v8 >= v3) {
        goto LABEL_41;
      }
      if (__OFSUB__(v8, v10)) {
        goto LABEL_144;
      }
      if (v8 - v10 >= v106) {
        goto LABEL_41;
      }
      if (__OFADD__(v10, v106)) {
        goto LABEL_147;
      }
      if (v10 + v106 >= v3) {
        uint64_t v33 = v3;
      }
      else {
        uint64_t v33 = v10 + v106;
      }
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }

      if (v8 == v33)
      {
LABEL_41:
        uint64_t v34 = v110;
      }

      else
      {
        uint64_t v85 = (void *)(v9 + 16 * v8);
        uint64_t v34 = v110;
        do
        {
          uint64_t v86 = (uint64_t *)(v9 + 16 * v8);
          uint64_t v87 = *v86;
          uint64_t v88 = v86[1];
          id v89 = v10;
          uint64_t v90 = v85;
          do
          {
            uint64_t v91 = *(v90 - 2);
            unint64_t v92 = *(v90 - 1);
            uint64_t v93 = v87 == v91 && v88 == v92;
            if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1LL) & 1) == 0) {
              break;
            }
            if (!v9) {
              goto LABEL_151;
            }
            uint64_t v87 = *v90;
            uint64_t v88 = v90[1];
            *(_OWORD *)uint64_t v90 = *((_OWORD *)v90 - 1);
            *(v90 - 1) = v88;
            *(v90 - 2) = v87;
            v90 -= 2;
            ++v89;
          }

          while (v8 != v89);
          ++v8;
          v85 += 2;
        }

        while (v8 != v33);
        uint64_t v8 = v33;
      }

      if (v8 < v10) {
        goto LABEL_143;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      {
        sub_1000A9378(0, *((void *)v34 + 2) + 1LL, 1, v34);
        uint64_t v34 = v94;
      }

      uint64_t v36 = *((void *)v34 + 2);
      uint64_t v35 = *((void *)v34 + 3);
      __int128 v37 = v36 + 1;
      if (v36 >= v35 >> 1)
      {
        sub_1000A9378(v35 > 1, v36 + 1, 1, v34);
        uint64_t v34 = v95;
      }

      *((void *)v34 + 2) = v37;
      uint64_t v38 = v34 + 32;
      uint64_t v39 = (Swift::Int *)&v34[16 * v36 + 32];
      *uint64_t v39 = v10;
      v39[1] = v8;
      uint64_t v110 = v34;
      if (v36)
      {
        while (1)
        {
          uint64_t v40 = v37 - 1;
          if (v37 >= 4)
          {
            uint64_t v45 = &v38[2 * v37];
            int v46 = *(v45 - 8);
            uint64_t v47 = *(v45 - 7);
            unint64_t v51 = __OFSUB__(v47, v46);
            uint64_t v48 = v47 - v46;
            if (v51) {
              goto LABEL_128;
            }
            uint64_t v50 = *(v45 - 6);
            uint64_t v49 = *(v45 - 5);
            unint64_t v51 = __OFSUB__(v49, v50);
            uint64_t v43 = v49 - v50;
            uint64_t v44 = v51;
            if (v51) {
              goto LABEL_129;
            }
            uint64_t v52 = v37 - 2;
            uint64_t v53 = &v38[2 * v37 - 4];
            uint64_t v55 = *v53;
            uint64_t v54 = v53[1];
            unint64_t v51 = __OFSUB__(v54, v55);
            uint64_t v56 = v54 - v55;
            if (v51) {
              goto LABEL_130;
            }
            unint64_t v51 = __OFADD__(v43, v56);
            uint64_t v57 = v43 + v56;
            if (v51) {
              goto LABEL_132;
            }
            if (v57 >= v48)
            {
              BOOL v75 = &v38[2 * v40];
              unint64_t v77 = *v75;
              unint64_t v76 = v75[1];
              unint64_t v51 = __OFSUB__(v76, v77);
              unint64_t v78 = v76 - v77;
              if (v51) {
                goto LABEL_138;
              }
              int64_t v68 = v43 < v78;
              goto LABEL_79;
            }
          }

          else
          {
            if (v37 != 3)
            {
              uint64_t v69 = *((void *)v34 + 4);
              uint64_t v70 = *((void *)v34 + 5);
              unint64_t v51 = __OFSUB__(v70, v69);
              int64_t v62 = v70 - v69;
              uint64_t v63 = v51;
              goto LABEL_73;
            }

            uint64_t v42 = *((void *)v34 + 4);
            unint64_t v41 = *((void *)v34 + 5);
            unint64_t v51 = __OFSUB__(v41, v42);
            uint64_t v43 = v41 - v42;
            uint64_t v44 = v51;
          }

          if ((v44 & 1) != 0) {
            goto LABEL_131;
          }
          uint64_t v52 = v37 - 2;
          uint64_t v58 = &v38[2 * v37 - 4];
          uint64_t v60 = *v58;
          uint64_t v59 = v58[1];
          unint64_t v61 = __OFSUB__(v59, v60);
          int64_t v62 = v59 - v60;
          uint64_t v63 = v61;
          if (v61) {
            goto LABEL_133;
          }
          uint64_t v64 = &v38[2 * v40];
          uint64_t v66 = *v64;
          uint64_t v65 = v64[1];
          unint64_t v51 = __OFSUB__(v65, v66);
          size_t v67 = v65 - v66;
          if (v51) {
            goto LABEL_135;
          }
          if (__OFADD__(v62, v67)) {
            goto LABEL_137;
          }
          if (v62 + v67 >= v43)
          {
            int64_t v68 = v43 < v67;
LABEL_79:
            if (v68) {
              uint64_t v40 = v52;
            }
            goto LABEL_81;
          }

    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_3;
  }

  __n128 result = xpc_array_get_count(a1);
  if ((result & 0x8000000000000000LL) == 0)
  {
    unsigned int v13 = (char *)result;
    if (!result) {
      return (size_t)_swiftEmptyArrayStorage;
    }
    uint64_t v49 = v11;
    uint64_t v28 = 0LL;
    uint64_t v29 = _swiftEmptyArrayStorage;
    *(void *)&uint64_t v27 = 134217984LL;
    uint64_t v48 = v27;
    while (v13 != (char *)v28)
    {
      uint64_t v30 = xpc_array_get_value(a1, v28);
      uint64_t ObjectType = swift_getObjectType(v30);
      sub_10011C3D0(&v51, ObjectType);
      swift_unknownObjectRelease(v30);
      if (v52)
      {
        sub_1000853B0(&v51, v53);
        sub_10007B1C0((uint64_t)v53, (uint64_t)&v51);
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_100130D54();
          uint64_t v29 = v44;
        }

        uint64_t v32 = v29[2];
        uint64_t v8 = (char *)(v32 + 1);
        if (v32 >= v29[3] >> 1)
        {
          sub_100130D54();
          uint64_t v29 = v45;
        }

        v29[2] = v8;
        sub_1000853B0(&v51, &v29[4 * v32 + 4]);
        sub_10007B1A0(v53);
      }

      else
      {
        sub_100087418((uint64_t)&v51, (uint64_t *)&unk_100328ED0);
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        uint64_t v33 = sub_100079604(v50, (uint64_t)qword_10033E1A8);
        uint64_t v34 = (uint64_t)v49;
        sub_10007961C(v33, (uint64_t)v49);
        uint64_t v35 = v3;
        uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32);
        __int128 v37 = v2;
        uint64_t v38 = v36(v6, v34, v2);
        uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
        uint64_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          unint64_t v41 = swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)unint64_t v41 = v48;
          *(void *)(v41 + 4) = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Failed to get value in XPC array at index: %ld",  (uint8_t *)v41,  0xCu);
          swift_slowDealloc(v41, -1LL, -1LL);
        }

        int v2 = v37;
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v37);
        uint64_t v42 = [objc_allocWithZone(NSNull) init];
        uint64_t v54 = sub_10011D868();
        v53[0] = (uint64_t)v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_100130D54();
          uint64_t v29 = v46;
        }

        uint64_t v43 = v29[2];
        uint64_t v8 = (char *)(v43 + 1);
        uint64_t v3 = v35;
        if (v43 >= v29[3] >> 1)
        {
          sub_100130D54();
          uint64_t v29 = v47;
        }

        v29[2] = v8;
        sub_1000853B0(v53, &v29[4 * v43 + 4]);
      }
    }

    __break(1u);
    goto LABEL_31;
  }

  __break(1u);
  return result;
}

                swift_release(v85);
                swift_bridgeObjectRelease();
                unint64_t v41 = v79;
                sub_100133FA4((uint64_t)v10, v79);
                uint64_t v42 = v75;
                static Date.distantFuture.getter();
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                (*(void (**)(char *, uint64_t))(v76 + 8))(v42, v77);
                [v41 setExpirationDate:isa];

                uint64_t v44 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
                [v41 setProcessInfo:v44];

                type metadata accessor for Bag();
                uint64_t v45 = sub_10012CE5C();
                sub_100134010(v45, v46, v41, (SEL *)&selRef_setProfile_);
                sub_100134010(49LL, 0xE100000000000000LL, v41, (SEL *)&selRef_setProfileVersion_);
                *(void *)&v95[0] = 0LL;
                uint64_t v11 = (unint64_t)[v41 buildWithError:v95];
                uint64_t v47 = *(void *)&v95[0];
                if (v11)
                {
                  uint64_t v48 = *(id *)&v95[0];
                  uint64_t v49 = 0LL;
                  char v9 = 0LL;
                  uint64_t v50 = v78;
LABEL_38:
                  v50[2](v50, v11, v49);

                  swift_errorRelease(v9);
                  _Block_release(v50);
                  return;
                }

                unint64_t v51 = *(id *)&v95[0];
                char v9 = _convertNSErrorToError(_:)(v47);

                swift_willThrow(v52, v53, v54, v55, v56, v57, v58);
                if (qword_100328B40 == -1)
                {
LABEL_34:
                  uint64_t v59 = sub_100079604(v69, (uint64_t)qword_10033E1A8);
                  uint64_t v60 = v70;
                  sub_10009BF04(v59, v70, type metadata accessor for SKLogger);
                  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v71, v60, v73);
                  unint64_t v61 = swift_errorRetain(v9);
                  int64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
                  uint64_t v63 = static os_log_type_t.error.getter(v62);
                  if (os_log_type_enabled(v62, v63))
                  {
                    uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                    uint64_t v65 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
                    *(_DWORD *)uint64_t v64 = 138543362;
                    uint64_t v66 = _convertErrorToNSError(_:)(v9);
                    *(void *)&v95[0] = v66;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(v95, (char *)v95 + 8, v64 + 4);
                    *uint64_t v65 = v66;
                    swift_errorRelease(v9);
                    _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Failed to create snapshot bag: %{public}@",  v64,  0xCu);
                    size_t v67 = sub_10007B1FC(&qword_10032B340);
                    swift_arrayDestroy(v65, 1LL, v67);
                    swift_slowDealloc(v65, -1LL, -1LL);
                    swift_slowDealloc(v64, -1LL, -1LL);
                  }

                  else
                  {
                    swift_errorRelease(v9);
                  }

                  uint64_t v50 = v78;

                  (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v73);
                  uint64_t v49 = (void *)_convertErrorToNSError(_:)(v9);
                  goto LABEL_38;
                }

        unint64_t v61 = v12[8];
        int64_t v62 = (char *)v10 + v61;
        uint64_t v63 = (char *)v11 + v61;
        uint64_t v64 = *(void *)v63;
        v62[8] = v63[8];
        *(void *)int64_t v62 = v64;
        uint64_t v65 = v12[9];
        uint64_t v66 = (char *)v10 + v65;
        size_t v67 = (char *)v11 + v65;
        int64_t v68 = *(void *)v67;
        v66[8] = v67[8];
        *(void *)uint64_t v66 = v68;
        uint64_t v69 = v12[10];
        uint64_t v70 = (char *)v10 + v69;
        uint64_t v71 = (char *)v11 + v69;
        unint64_t v72 = type metadata accessor for UUID(0LL);
        uint64_t v73 = *(void *)(v72 - 8);
        Swift::String v74 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
        BOOL v75 = v74(v70, 1LL, v72);
        unint64_t v76 = v74(v71, 1LL, v72);
        if (v75)
        {
          if (!v76)
          {
            (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0LL, 1LL, v72);
LABEL_37:
            a3 = v85;
            goto LABEL_38;
          }
        }

        else
        {
          if (!v76)
          {
            (*(void (**)(char *, char *, uint64_t))(v73 + 24))(v70, v71, v72);
            goto LABEL_37;
          }

          (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v72);
        }

        unint64_t v77 = sub_10007B1FC(&qword_10032C748);
        memcpy(v70, v71, *(void *)(*(void *)(v77 - 8) + 64LL));
        goto LABEL_37;
      }

      sub_1000A18B0((uint64_t)v10);
    }

    *(_OWORD *)char v10 = *(_OWORD *)v11;
    goto LABEL_23;
  }

  if (v16)
  {
LABEL_7:
    uint64_t v18 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_38;
  }

  unsigned int v17 = v11[1];
  NSString v84 = a3;
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)char v10 = *(_OWORD *)v11;
  }

  else
  {
    unsigned int v21 = *v11;
    sub_1000881FC(*v11, v17);
    *char v10 = v21;
    v10[1] = v17;
  }

  id v10[2] = v11[2];
  uint64_t v22 = v11[3];
  v10[3] = v22;
  void v10[4] = v11[4];
  char v23 = v11[5];
  void v10[5] = v23;
  uint64_t v24 = v12[7];
  uint64_t v25 = (char *)v10 + v24;
  uint64_t v26 = (char *)v11 + v24;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  uint64_t v27 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 3LL, v27))
  {
    uint64_t v29 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    uint64_t v30 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v25, v26, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 3LL, v27);
  }

  unint64_t v31 = v12[8];
  uint64_t v32 = (char *)v10 + v31;
  uint64_t v33 = (char *)v11 + v31;
  uint64_t v34 = *(void *)v33;
  char v32[8] = v33[8];
  *(void *)uint64_t v32 = v34;
  uint64_t v35 = v12[9];
  uint64_t v36 = (char *)v10 + v35;
  __int128 v37 = (char *)v11 + v35;
  uint64_t v38 = *(void *)v37;
  v36[8] = v37[8];
  *(void *)uint64_t v36 = v38;
  uint64_t v39 = v12[10];
  uint64_t v40 = (char *)v10 + v39;
  unint64_t v41 = (char *)v11 + v39;
  uint64_t v42 = type metadata accessor for UUID(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
  {
    uint64_t v44 = sub_10007B1FC(&qword_10032C748);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
  }

  a3 = v84;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v13 + 56))(v10, 0LL, 1LL, v12);
LABEL_38:
  unint64_t v78 = *(int *)(a3 + 32);
  uint64_t v79 = (void *)((char *)a1 + v78);
  uint64_t v80 = (void *)((char *)a2 + v78);
  char *v79 = *v80;
  uint64_t v81 = v80[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease();
  return a1;
}

        uint64_t v59 = v10[8];
        uint64_t v60 = (char *)v8 + v59;
        unint64_t v61 = (char *)v9 + v59;
        int64_t v62 = *(void *)v61;
        v60[8] = v61[8];
        *(void *)uint64_t v60 = v62;
        uint64_t v63 = v10[9];
        uint64_t v64 = (char *)v8 + v63;
        uint64_t v65 = (char *)v9 + v63;
        uint64_t v66 = *(void *)v65;
        v64[8] = v65[8];
        *(void *)uint64_t v64 = v66;
        size_t v67 = v10[10];
        int64_t v68 = (char *)v8 + v67;
        uint64_t v69 = (char *)v9 + v67;
        uint64_t v70 = type metadata accessor for UUID(0LL);
        uint64_t v71 = *(void *)(v70 - 8);
        unint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
        uint64_t v73 = v72(v68, 1LL, v70);
        Swift::String v74 = v72(v69, 1LL, v70);
        if (v73)
        {
          if (!v74)
          {
            (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v70);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0LL, 1LL, v70);
LABEL_37:
            a3 = v87;
            goto LABEL_38;
          }
        }

        else
        {
          if (!v74)
          {
            (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v68, v69, v70);
            goto LABEL_37;
          }

          (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v70);
        }

        BOOL v75 = sub_10007B1FC(&qword_10032C748);
        memcpy(v68, v69, *(void *)(*(void *)(v75 - 8) + 64LL));
        goto LABEL_37;
      }

      sub_1000A18B0((uint64_t)v8);
    }

    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_23;
  }

  if (v14)
  {
LABEL_7:
    uint64_t v16 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_38;
  }

  uint64_t v15 = v9[1];
  uint64_t v86 = a3;
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v19 = *v9;
    sub_1000881FC(*v9, v15);
    char *v8 = v19;
    v8[1] = v15;
  }

  v8[2] = v9[2];
  uint64_t v20 = v9[3];
  v8[3] = v20;
  void v8[4] = v9[4];
  unsigned int v21 = v9[5];
  void v8[5] = v21;
  uint64_t v22 = v10[7];
  char v23 = (char *)v8 + v22;
  uint64_t v24 = (char *)v9 + v22;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  uint64_t v25 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 3LL, v25))
  {
    uint64_t v27 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    uint64_t v28 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v23, v24, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 3LL, v25);
  }

  uint64_t v29 = v10[8];
  uint64_t v30 = (char *)v8 + v29;
  unint64_t v31 = (char *)v9 + v29;
  uint64_t v32 = *(void *)v31;
  v30[8] = v31[8];
  *(void *)uint64_t v30 = v32;
  uint64_t v33 = v10[9];
  uint64_t v34 = (char *)v8 + v33;
  uint64_t v35 = (char *)v9 + v33;
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  __int128 v37 = v10[10];
  uint64_t v38 = (char *)v8 + v37;
  uint64_t v39 = (char *)v9 + v37;
  uint64_t v40 = type metadata accessor for UUID(0LL);
  unint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
  {
    uint64_t v42 = sub_10007B1FC(&qword_10032C748);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
  }

  a3 = v86;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_38:
  unint64_t v76 = a3[6];
  unint64_t v77 = (void *)((char *)a1 + v76);
  unint64_t v78 = (void *)((char *)a2 + v76);
  *unint64_t v77 = *v78;
  uint64_t v79 = v78[1];
  v77[1] = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[7];
  uint64_t v81 = (char *)a1 + v80;
  uint64_t v82 = (char *)a2 + v80;
  uint64_t v83 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 24LL))(v81, v82, v83);
  return a1;
}

        uint64_t v59 = v10[8];
        uint64_t v60 = (char *)v8 + v59;
        unint64_t v61 = (char *)v9 + v59;
        int64_t v62 = *(void *)v61;
        v60[8] = v61[8];
        *(void *)uint64_t v60 = v62;
        uint64_t v63 = v10[9];
        uint64_t v64 = (char *)v8 + v63;
        uint64_t v65 = (char *)v9 + v63;
        uint64_t v66 = *(void *)v65;
        v64[8] = v65[8];
        *(void *)uint64_t v64 = v66;
        size_t v67 = v10[10];
        int64_t v68 = (char *)v8 + v67;
        uint64_t v69 = (char *)v9 + v67;
        uint64_t v70 = type metadata accessor for UUID(0LL);
        uint64_t v71 = *(void *)(v70 - 8);
        unint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
        uint64_t v73 = v72(v68, 1LL, v70);
        Swift::String v74 = v72(v69, 1LL, v70);
        if (v73)
        {
          if (!v74)
          {
            (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v70);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0LL, 1LL, v70);
LABEL_37:
            a3 = v83;
            goto LABEL_38;
          }
        }

        else
        {
          if (!v74)
          {
            (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v68, v69, v70);
            goto LABEL_37;
          }

          (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v70);
        }

        BOOL v75 = sub_10007B1FC(&qword_10032C748);
        memcpy(v68, v69, *(void *)(*(void *)(v75 - 8) + 64LL));
        goto LABEL_37;
      }

      sub_1000A18B0((uint64_t)v8);
    }

    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_23;
  }

  if (v14)
  {
LABEL_7:
    uint64_t v16 = sub_10007B1FC(&qword_10032CE48);
    memcpy(v8, v9, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_38;
  }

  uint64_t v15 = v9[1];
  uint64_t v82 = a3;
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v19 = *v9;
    sub_1000881FC(*v9, v15);
    char *v8 = v19;
    v8[1] = v15;
  }

  v8[2] = v9[2];
  uint64_t v20 = v9[3];
  v8[3] = v20;
  void v8[4] = v9[4];
  unsigned int v21 = v9[5];
  void v8[5] = v21;
  uint64_t v22 = v10[7];
  char v23 = (char *)v8 + v22;
  uint64_t v24 = (char *)v9 + v22;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  uint64_t v25 = sub_10007B1FC(&qword_10032C6A0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 3LL, v25))
  {
    uint64_t v27 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    uint64_t v28 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v23, v24, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 3LL, v25);
  }

  uint64_t v29 = v10[8];
  uint64_t v30 = (char *)v8 + v29;
  unint64_t v31 = (char *)v9 + v29;
  uint64_t v32 = *(void *)v31;
  v30[8] = v31[8];
  *(void *)uint64_t v30 = v32;
  uint64_t v33 = v10[9];
  uint64_t v34 = (char *)v8 + v33;
  uint64_t v35 = (char *)v9 + v33;
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  __int128 v37 = v10[10];
  uint64_t v38 = (char *)v8 + v37;
  uint64_t v39 = (char *)v9 + v37;
  uint64_t v40 = type metadata accessor for UUID(0LL);
  unint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1LL, v40))
  {
    uint64_t v42 = sub_10007B1FC(&qword_10032C748);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v40);
  }

  a3 = v82;
  (*(void (**)(uint64_t *, void, uint64_t, int *))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_38:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  unint64_t v76 = a3[7];
  unint64_t v77 = (void *)(a1 + v76);
  unint64_t v78 = (void *)(a2 + v76);
  *unint64_t v77 = *v78;
  uint64_t v79 = v78[1];
  v77[1] = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t AcknowledgeMessageRequest.messageType.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_1000888AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AuditToken.rawValue.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000888D0()
{
  return sub_1000885A4(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1000888EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100088568();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100088910(uint64_t a1)
{
  unint64_t v2 = sub_100092D1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088938(uint64_t a1)
{
  unint64_t v2 = sub_100092D1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100088960(void *a1)
{
  return sub_1000883E8(a1);
}

uint64_t sub_100088974()
{
  v1[19] = v0;
  v1[20] = sub_100086224();
  v1[21] = sub_100093010();
  v1[22] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000889C8()
{
  uint64_t v1 = v0 + 2;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v2 = v0[19];
  uint64_t v3 = sub_100079604(v0[20], (uint64_t)qword_10033E1A8);
  v0[23] = v3;
  uint64_t v4 = sub_10009362C(v3);
  uint64_t v5 = *(void *)(v2 + 24);
  v0[24] = v5;
  uint64_t v6 = *(void *)(v2 + 32);
  v0[25] = v6;
  os_log_type_t v7 = static os_log_type_t.default.getter(v4);
  uint64_t v8 = sub_100085EE8(v6);
  char v9 = (os_log_s *)Logger.logObject.getter(v8);
  if (sub_100093764(v9))
  {
    char v10 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v38 = sub_10007B9FC(64LL);
    *(_DWORD *)char v10 = 136446466;
    v40[0] = v38;
    v40[1] = 91LL;
    v40[2] = 0xE100000000000000LL;
    sub_10007BA3C();
    sub_100093624(v5);
    sub_100085F14();
    sub_10007BA44();
    v0[17] = sub_10008620C(91LL, v11, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v10 + 4);
    sub_10007B980();
    sub_10007D974(v6);
    sub_100093CA4();
    sub_1000862B8();
    v0[18] = sub_10007A488(0xD000000000000018LL, v12, v40);
    uint64_t v1 = v0 + 2;
    sub_100086194((uint64_t)(v0 + 18), (uint64_t)(v0 + 19));
    sub_100086038((void *)&_mh_execute_header, v9, v7, "%{public}s%{public}s", v10);
    sub_100086030(v38, v13, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v38);
    sub_10007B974((uint64_t)v10);
  }

  else
  {
    sub_10007D974(v6);
  }

  uint64_t v14 = v0[19];
  sub_100092A98(v0[22], type metadata accessor for SKLogger);
  uint64_t v15 = sub_10007B1FC((uint64_t *)&unk_10032A690);
  uint64_t inited = swift_initStackObject(v15, v1);
  *(_OWORD *)(inited + 16) = xmmword_10027A330;
  *(void *)(inited + 32) = 0x6449656C646E7562LL;
  *(void *)(inited + 40) = 0xE800000000000000LL;
  unsigned int v17 = *(void **)v14;
  uint64_t v18 = (void *)(*(void *)v14 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  uint64_t v19 = v18[1];
  *(void *)(inited + 4_Block_object_dispose(va, 8) = *v18;
  *(void *)(inited + 56) = v19;
  strcpy((char *)(inited + 64), "inAppPinningId");
  *(_BYTE *)(inited + 79) = -18;
  uint64_t v20 = *(void **)(v14 + 8);
  swift_bridgeObjectRetain(v19);
  id v21 = [v20 pinningID];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  *(void *)(inited + 80) = v22;
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v24;
  uint64_t v25 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v26 = qword_100328C90;
  id v27 = v17;
  if (v26 != -1) {
    swift_once(&qword_100328C90, sub_10012C2D0);
  }
  uint64_t v28 = v0[19];
  id v29 = (id)qword_10033E318;
  sub_10012150C(v25);
  uint64_t v31 = v30;
  sub_100085FB4();
  id v32 = objc_allocWithZone((Class)type metadata accessor for Request());
  sub_10011E6C4(v27, v29, 4LL, 2, v31);
  uint64_t v34 = v33;
  v0[26] = v33;
  sub_100092A28(v28 + 16, (uint64_t)(v0 + 14));
  sub_100092A28((uint64_t)(v0 + 14), v34 + OBJC_IVAR____TtC9storekitd7Request_dialogContext);
  sub_100092A70(v0 + 14);
  sub_100093634();
  uint64_t v35 = (uint64_t *)(v34 + OBJC_IVAR____TtC9storekitd7Request_logKey);
  uint64_t *v35 = v5;
  v35[1] = v6;
  sub_10007BA3C();
  sub_100085EF0();
  *(_BYTE *)(v34 + OBJC_IVAR____TtC9storekitd7Request_useBiometrics) = 1;
  uint64_t v39 = (uint64_t (__cdecl *)())((char *)&dword_10032A020 + dword_10032A020);
  uint64_t v36 = (void *)swift_task_alloc(unk_10032A024);
  v0[27] = v36;
  *uint64_t v36 = v0;
  v36[1] = sub_100088DCC;
  return v39();
}

uint64_t sub_100088DCC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216LL);
  *(void *)(*(void *)v1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100088E24()
{
  sub_1000939C0();
  sub_1000931C8();
  uint64_t v1 = (uint64_t (*)(void))sub_100093CFC();
  return v1();
}

uint64_t sub_100088E60()
{
  uint64_t v1 = *(void *)(v0 + 200);
  sub_10007961C(*(void *)(v0 + 184), *(void *)(v0 + 168));
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  unint64_t v29 = 0xD000000000000018LL;
  unint64_t v30 = 0x800000010029E250LL;
  uint64_t v2 = (void *)sub_100093C54();
  id v3 = [v2 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  sub_100093460();

  os_log_type_t v9 = static os_log_type_t.error.getter(v8);
  sub_100085EE8(v1);
  sub_100085EE8(0x800000010029E250LL);
  char v10 = (os_log_s *)sub_100093C38();
  if (sub_10009396C(v10))
  {
    uint64_t v12 = *(void *)(v0 + 192);
    uint64_t v11 = *(void **)(v0 + 200);
    uint64_t v13 = sub_10007B9FC(22LL);
    uint64_t v27 = sub_10007B9FC(64LL);
    uint64_t v28 = v27;
    *(_DWORD *)uint64_t v13 = 136446466;
    unint64_t v29 = 91LL;
    unint64_t v30 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v11);
    v14._countAndFlagsBits = v12;
    v14._object = v11;
    String.append(_:)(v14);
    sub_100085F14();
    swift_bridgeObjectRelease(v11);
    *(void *)(v0 + 120) = sub_10008620C(91LL, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 4);
    sub_10007B980();
    sub_10007D974((uint64_t)v11);
    *(_WORD *)(v13 + 12) = 2082;
    sub_100085FEC();
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = sub_10007A488(0xD000000000000018LL, 0x800000010029E250LL, &v28);
    sub_100086194(v0 + 128, v0 + 136);
    sub_100085E64(0x800000010029E250LL);
    sub_100086038((void *)&_mh_execute_header, v10, v9, "%{public}s%{public}s", (uint8_t *)v13);
    sub_100086030(v27, v16, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v27);
    sub_10007B974(v13);

    uint64_t v17 = sub_100085EF0();
  }

  else
  {
    sub_10007D974(*(void *)(v0 + 200));
    sub_100085E64(0x800000010029E250LL);
  }

  uint64_t v18 = *(void **)(v0 + 208);
  uint64_t v19 = sub_100093A6C(v17, type metadata accessor for SKLogger);
  swift_willThrow(v19, v20, v21, v22, v23, v24, v25);

  sub_1000939C0();
  sub_1000931C8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000890D4()
{
  v1[53] = v0;
  uint64_t v2 = type metadata accessor for Client.Server(0LL);
  v1[54] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  v1[55] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[56] = swift_task_alloc(v4);
  v1[57] = swift_task_alloc(v4);
  v1[58] = swift_task_alloc(v4);
  v1[59] = swift_task_alloc(v4);
  v1[60] = swift_task_alloc(v4);
  v1[61] = swift_task_alloc(v4);
  v1[62] = swift_task_alloc(v4);
  return swift_task_switch(sub_10008919C, 0LL, 0LL);
}

#error "1000891E4: call analysis failed (funcsize=427)"
uint64_t sub_1000898C0()
{
  sub_10009342C();
  sub_100093420();
  return sub_100092F20();
}

#error "1000899AC: call analysis failed (funcsize=130)"
#error "100089DB8: call analysis failed (funcsize=403)"
uint64_t sub_10008A1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000939E0();
  sub_10009319C();
  if (v1)
  {
    sub_1000934D8();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    return sub_100093184(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    *(void *)(v3 + 624) = v0;
    sub_100093420();
    return sub_100092FAC();
  }

uint64_t sub_10008A220()
{
  id v3 = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v4 = sub_10009330C((uint64_t)v3);
  sub_100093220(v4, "setAccount:");
  id v5 = sub_1000DF468();
  sub_100092F5C((uint64_t)v5, "setClientInfo:");

  sub_10009322C(v6, "setRequestEncoding:");
  sub_100093740();
  if (v7)
  {
    [sub_1000931D0() init];
    id v8 = [(id)sub_100093208() preferredAttestationStyle];
    id v9 = sub_1000936AC((uint64_t)v8, "setStyle:");
    id v10 = sub_1000931E4((uint64_t)v9, "setPurpose:");
    sub_100092F5C((uint64_t)v10, "setKeychainOptions:");
  }

  sub_100093594();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v12 = (void *)v11;
  id v13 = sub_10009304C(v11, "ams_configurationWithProcessInfo:bag:");
  sub_100093A74((uint64_t)v13);
  sub_1000931C0();
  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v1, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  sub_1000932DC(v14);
  v0[72] = sub_10009368C(v15, "URLForKey:");
  sub_1000931C0();
  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd7Request_parameters)) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  id v17 = sub_100092F98(v16, "requestWithMethod:bagURL:parameters:");
  uint64_t v18 = sub_10009331C((uint64_t)v17);
  id v19 = sub_1000931FC(v18, "dataTaskPromiseWithRequestPromise:");
  sub_1000935AC((uint64_t)v19);
  uint64_t v20 = sub_10009305C((uint64_t)sub_1000898C0);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v21 = sub_1000937B0(v20, (uint64_t)sub_10008F3C0);
  sub_100093238(v21, "resultWithCompletion:");
  return sub_100092FC4();
}

uint64_t sub_10008A45C()
{
  uint64_t v1 = sub_100093C2C();
  v0[54] = sub_10009344C(v1);
  v0[55] = sub_100086224();
  v0[56] = sub_100093010();
  v0[57] = sub_100093010();
  v0[58] = sub_100093010();
  v0[59] = sub_100093010();
  v0[60] = sub_100093010();
  v0[61] = sub_100093010();
  v0[62] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10008A4E0()
{
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v6 = sub_100093354();
  uint64_t v7 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
  *(void *)(v0 + 504) = v7;
  uint64_t v155 = v7;
  sub_1000935C4(v7);
  sub_100093678();
  sub_100093CCC(v8, v9, v10, v11, v12, v13, v14, v15, v131, v139, v147, v155, v163, v169, v176, v183, v185, v187);
  sub_100093AC0();
  v189._countAndFlagsBits = sub_100093A38(OBJC_IVAR____TtC9storekitd7Request_bagKey);
  sub_100093A2C(v189);
  sub_10007BA44();
  sub_100093D88();
  uint64_t v17 = sub_1000934C0(*v16);
  uint64_t v18 = (uint64_t *)static os_log_type_t.default.getter(v17);
  sub_100085EE8(v3);
  sub_100085EE8(v2);
  id v19 = (os_log_s *)sub_1000935A4();
  uint64_t v20 = (uint8_t *)&type metadata for Any;
  if (sub_1000938D8(v19))
  {
    uint64_t v20 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v1 = (os_log_s *)sub_10007B9FC(64LL);
    sub_100093160(4.8752e-34);
    sub_100093570();
    sub_100085F14();
    uint64_t v21 = sub_100093460();
    uint64_t v29 = sub_100092F4C( v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v132,  v140,  v148,  v156,  v164,  v170,  v177,  v184,  v186,  v188);
    sub_1000933B0(v29, v30, v31, v32, v33, v34, v35, v36, v133, v141, v149, v157, v165, v171);
    sub_10007B980();
    sub_10007D974(v3);
    *((_WORD *)v20 + 6) = 2082;
    uint64_t v37 = sub_1000930E4();
    *(void *)(v0 + 416) = sub_1000938A8(v37, v38, v39, v40, v41, v42, v43);
    uint64_t v18 = (uint64_t *)v178;
    sub_100086194(v0 + 416, v178);
    sub_100085E64(v2);
    sub_100086038((void *)&_mh_execute_header, v4, v5, "%{public}s%{public}s", v20);
    sub_100086030((uint64_t)v1, v44, (uint64_t)&type metadata for Any + 8);
    sub_10007B974((uint64_t)v1);
    sub_10007B974((uint64_t)v20);

    sub_100093460();
    sub_1000930DC();
  }

  else
  {
    sub_100085E64(v3);
    sub_100085E64(v2);

    sub_100093D64();
  }

  uint64_t v45 = sub_100093D58();
  sub_100092A98(v45, type metadata accessor for SKLogger);
  sub_1000937F8(OBJC_IVAR____TtC9storekitd7Request_client);
  uint64_t v46 = sub_10007B1FC(&qword_10032A028);
  uint64_t v47 = sub_100093914(v46);
  if (!(_DWORD)v47)
  {
    uint64_t v61 = sub_100086318();
    sub_10008614C(v61);
    goto LABEL_11;
  }

  uint64_t v48 = *v18;
  sub_100093A6C(v47, type metadata accessor for Client.Server);
  uint64_t v49 = (os_log_s *)*(unsigned __int8 *)(v48 + OBJC_IVAR____TtC9storekitd7Request_accountRequirement);
  if (!(_DWORD)v49)
  {
LABEL_11:
    uint64_t v60 = 0LL;
    goto LABEL_12;
  }

  sub_1000DF90C();
  sub_100093B80(v50);
  if (!v20)
  {
    if ((_DWORD)v49 == 2)
    {
      sub_100093588(v51, v52, v53, v54, v55, v56, v57, v58, v132, v140, v148, v156);
      uint64_t v83 = *v150;
      uint64_t v82 = v150[1];
      uint64_t v84 = sub_10007BA3C();
      static os_log_type_t.default.getter(v84);
      uint64_t v85 = sub_100085EE8(v82);
      uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
      if (sub_1000937C8(v86))
      {
        uint64_t v87 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v88 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v87 = 136446466;
        sub_10007BA3C();
        sub_100093624(v83);
        sub_100085F14();
        uint64_t v89 = sub_10007BA44();
        uint64_t v97 = sub_100092F4C( v89,  v90,  v91,  v92,  v93,  v94,  v95,  v96,  v134,  v142,  (uint64_t)v150,  v158,  v164,  v170,  (uint64_t)(v87 + 4),  v88,  91LL,  0xE100000000000000LL);
        sub_100093490(v97, v98, v99, v100, v101, v102, v103, v104, v135, v143, v151, v159, v166, v172, v179);
        sub_10007B980();
        sub_10007D974(v82);
        unint64_t v105 = sub_100093554();
        *(void *)(v0 + 400) = sub_100093270( v105,  (uint64_t)"No account for request. Forcing authentication.",  v136,  v144,  v152,  v160,  v167,  v173,  v180);
        sub_100086194(v0 + 400, v174);
        sub_100086038((void *)&_mh_execute_header, v1, (os_log_type_t)v2, "%{public}s%{public}s", v87);
        sub_100086030(v88, v106, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v88);
        sub_10007B974((uint64_t)v87);

        sub_10007BA44();
      }

      else
      {
        sub_100085E64(v82);
      }

      sub_100092A98(*(void *)(v0 + 456), type metadata accessor for SKLogger);
      uint64_t v126 = (void *)swift_task_alloc(dword_10032BFDC);
      *(void *)(v0 + 60_Block_object_dispose(va, 8) = v126;
      uint64_t v127 = sub_100093988(v126, (uint64_t)sub_10008AEE8);
      return sub_100093108(v127);
    }

    else
    {
      sub_100093588(v51, v52, v53, v54, v55, v56, v57, v58, v132, v140, v148, v156);
      uint64_t v108 = *v153;
      uint64_t v107 = v153[1];
      uint64_t v109 = sub_100085FEC();
      os_log_type_t v110 = static os_log_type_t.error.getter(v109);
      uint64_t v111 = sub_100085EE8(v107);
      id v112 = (os_log_s *)Logger.logObject.getter(v111);
      if (sub_1000934F0(v112))
      {
        uint64_t v113 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v114 = sub_10007B9FC(64LL);
        sub_1000932EC(4.8752e-34);
        sub_1000935BC(v108);
        sub_100085F14();
        uint64_t v115 = sub_100085EF0();
        uint64_t v123 = sub_100092F4C( v115,  v116,  v117,  v118,  v119,  v120,  v121,  v122,  v137,  v145,  (uint64_t)v153,  v161,  v164,  v170,  v0 + 336,  v184,  v186,  v188);
        sub_10009312C(v123);
        sub_10007B980();
        sub_10007D974(v107);
        unint64_t v124 = sub_100093144();
        *(void *)(v0 + 336) = sub_100093270( v124,  (uint64_t)"Account is required for request.",  v138,  v146,  v154,  v162,  v168,  v175,  v181);
        sub_100086194(v182, v0 + 344);
        sub_100086038((void *)&_mh_execute_header, v49, v110, "%{public}s%{public}s", v113);
        sub_100086030(v114, v125, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v114);
        sub_10007B974((uint64_t)v113);

        sub_100085EF0();
      }

      else
      {
        sub_100085E64(v107);
      }

      sub_100092A98(*(void *)(v0 + 448), type metadata accessor for SKLogger);
      unint64_t v128 = sub_100092AC4();
      uint64_t v129 = sub_100093030((uint64_t)&unk_1002EEE28, v128);
      sub_100093390(v129, v130);
      sub_1000930CC(*(void *)(v0 + 496));
      sub_1000931C8();
      sub_100093280();
      sub_100093124();
      sub_1000932CC();
      sub_1000932D4();
      sub_1000931DC();
      sub_100093288();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  sub_1000DF90C();
  uint64_t v60 = v59;
LABEL_12:
  *(void *)(v0 + 544) = v60;
  *(void *)(v0 + 536) = 0LL;
  sub_100093548();
  id v62 = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v63 = sub_10009330C((uint64_t)v62);
  sub_100093220(v63, "setAccount:");
  id v64 = sub_1000DF468();
  sub_100092F5C((uint64_t)v64, "setClientInfo:");

  sub_10009322C(v65, "setRequestEncoding:");
  sub_100093740();
  if (v66)
  {
    [sub_1000931D0() init];
    id v67 = [(id)sub_100093208() preferredAttestationStyle];
    id v68 = sub_1000936AC((uint64_t)v67, "setStyle:");
    id v69 = sub_1000931E4((uint64_t)v68, "setPurpose:");
    sub_100092F5C((uint64_t)v69, "setKeychainOptions:");
  }

  sub_100093594();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v71 = (void *)v70;
  id v72 = sub_10009304C(v70, "ams_configurationWithProcessInfo:bag:");
  *(void *)(v0 + 560) = v72;
  sub_1000931C0();

  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v72, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  sub_1000932DC(v73);
  *(void *)(v0 + 576) = sub_10009368C(v74, "URLForKey:");
  sub_1000931C0();
  sub_1000937BC();
  id v76 = sub_100092F98(v75, "requestWithMethod:bagURL:parameters:");
  uint64_t v77 = sub_10009331C((uint64_t)v76);
  id v78 = sub_1000931FC(v77, "dataTaskPromiseWithRequestPromise:");
  sub_1000935AC((uint64_t)v78);
  uint64_t v79 = sub_10009305C((uint64_t)sub_10008AC1C);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
  uint64_t v80 = sub_1000937B0(v79, (uint64_t)sub_10008F3C0);
  sub_100093238(v80, "resultWithCompletion:");
  return sub_1000930EC();
}

uint64_t sub_10008AC1C()
{
  return sub_100092F20();
}

uint64_t sub_10008AC58()
{
  uint64_t v110 = v5;
  uint64_t v111 = v6;
  uint64_t v109 = v1;
  sub_100093290();
  sub_100093B78();
  sub_100093798();
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v9 = sub_10007BA3C();
  static os_log_type_t.default.getter(v9);
  sub_100085EE8(v7);
  uint64_t v10 = (os_log_s *)sub_100093B00();
  if (sub_100093468(v10))
  {
    uint64_t v11 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v12 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v11 = 136446466;
    v108[0] = v12;
    v108[1] = 91LL;
    v108[2] = 0xE100000000000000LL;
    sub_10007BA3C();
    sub_100093624(v8);
    sub_100085F14();
    sub_10007BA44();
    *(void *)(v1 + 376) = sub_10008620C(91LL, v13, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 376, v1 + 384, v11 + 4);
    sub_10007B980();
    sub_10007D974(v7);
    sub_100093898();
    sub_1000862B8();
    *(void *)(v1 + 384) = sub_10007A488(0xD000000000000010LL, v14, v108);
    sub_100086194(v1 + 384, v1 + 392);
    sub_100086038((void *)&_mh_execute_header, v2, v4, "%{public}s%{public}s", v11);
    sub_100086030(v12, v15, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v12);
    sub_10007B974((uint64_t)v11);

    sub_10007BA44();
  }

  else
  {
    sub_100085E64(v7);
  }

  uint64_t v16 = sub_100093AE8();
  sub_100092A98(v16, type metadata accessor for SKLogger);
  uint64_t v17 = sub_10008F40C(v0);
  uint64_t v21 = *(void **)(v1 + 584);
  uint64_t v22 = *(void **)(v1 + 576);
  uint64_t v23 = *(void **)(v1 + 568);
  uint64_t v24 = *(void **)(v1 + 560);
  uint64_t v25 = *(void **)(v1 + 552);
  uint64_t v26 = *(void **)(v1 + 544);
  if (v7)
  {

    sub_1000930CC(*(void *)(v1 + 496));
    sub_1000939C0();
    sub_1000931C8();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    uint64_t v27 = (uint64_t (*)(void))sub_100093D08();
    return sub_100093934(v27);
  }

  else
  {
    uint64_t v83 = *(void *)(v1 + 480);
    uint64_t v89 = *(void *)(v1 + 472);
    uint64_t v94 = *(void *)(v1 + 464);
    uint64_t v98 = *(void *)(v1 + 456);
    uint64_t v101 = *(void *)(v1 + 448);
    uint64_t v103 = *(void *)(v1 + 432);
    uint64_t v104 = v17;
    uint64_t v105 = v18;
    uint64_t v106 = v19;
    uint64_t v107 = v20;

    sub_1000931DC();
    uint64_t v29 = sub_100093280();
    uint64_t v37 = sub_100093AE0(v29, v30, v31, v32, v33, v34, v35, v36, v77, v83);
    uint64_t v45 = sub_100093AD8(v37, v38, v39, v40, v41, v42, v43, v44, v78, v84, v89);
    uint64_t v53 = sub_100093B38(v45, v46, v47, v48, v49, v50, v51, v52, v79, v85, v90, v94);
    uint64_t v61 = sub_100093AB8(v53, v54, v55, v56, v57, v58, v59, v60, v80, v86, v91, v95, v98);
    uint64_t v69 = sub_100093AD0(v61, v62, v63, v64, v65, v66, v67, v68, v81, v87, v92, v96, v99, v101);
    sub_100093AF8(v69, v70, v71, v72, v73, v74, v75, v76, v82, v88, v93, v97, v100, v102, v103);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8))(v104, v105, v106, v107);
  }

uint64_t sub_10008AEE8()
{
  if (v1)
  {
    sub_1000934D8();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  else
  {
    *(void *)(v3 + 624) = v0;
    sub_100093420();
    return sub_100092FAC();
  }

uint64_t sub_10008AF60()
{
  id v3 = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v4 = sub_10009330C((uint64_t)v3);
  sub_100093220(v4, "setAccount:");
  id v5 = sub_1000DF468();
  sub_100092F5C((uint64_t)v5, "setClientInfo:");

  sub_10009322C(v6, "setRequestEncoding:");
  sub_100093740();
  if (v7)
  {
    [sub_1000931D0() init];
    id v8 = [(id)sub_100093208() preferredAttestationStyle];
    id v9 = sub_1000936AC((uint64_t)v8, "setStyle:");
    id v10 = sub_1000931E4((uint64_t)v9, "setPurpose:");
    sub_100092F5C((uint64_t)v10, "setKeychainOptions:");
  }

  sub_100093594();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v12 = (void *)v11;
  id v13 = sub_10009304C(v11, "ams_configurationWithProcessInfo:bag:");
  sub_100093A74((uint64_t)v13);
  sub_1000931C0();
  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v1, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  sub_1000932DC(v14);
  v0[72] = sub_10009368C(v15, "URLForKey:");
  sub_1000931C0();
  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd7Request_parameters)) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  id v17 = sub_100092F98(v16, "requestWithMethod:bagURL:parameters:");
  uint64_t v18 = sub_10009331C((uint64_t)v17);
  id v19 = sub_1000931FC(v18, "dataTaskPromiseWithRequestPromise:");
  sub_1000935AC((uint64_t)v19);
  uint64_t v20 = sub_10009305C((uint64_t)sub_10008AC1C);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v21 = sub_1000937B0(v20, (uint64_t)sub_10008F3C0);
  sub_100093238(v21, "resultWithCompletion:");
  return sub_100092FC4();
}

uint64_t sub_10008B19C(uint64_t a1)
{
  uint64_t v2 = sub_100093DA0(a1);
  v1[55] = sub_10009344C(v2);
  v1[56] = sub_100086224();
  v1[57] = sub_100093010();
  v1[58] = sub_100093010();
  v1[59] = sub_100093010();
  v1[60] = sub_100093010();
  v1[61] = sub_100093010();
  v1[62] = sub_100093010();
  v1[63] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10008B220()
{
  uint64_t v112 = v1 + 408;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v3 = sub_100093CD4();
  uint64_t v4 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
  *(void *)(v1 + 512) = v4;
  uint64_t v106 = v4;
  sub_1000935C4(v4);
  sub_100093C40();
  swift_bridgeObjectRelease(v118);
  *(void *)uint64_t v117 = v0;
  unint64_t v118 = 0x800000010029E270LL;
  v119._countAndFlagsBits = sub_100093D70(OBJC_IVAR____TtC9storekitd7Request_bagKey);
  sub_100093D94(v119);
  sub_10007BA44();
  uint64_t v109 = v0;
  uint64_t v5 = OBJC_IVAR____TtC9storekitd7Request_logKey;
  *(void *)(v1 + 52_Block_object_dispose(va, 8) = OBJC_IVAR____TtC9storekitd7Request_logKey;
  uint64_t v6 = (uint64_t *)(v2 + v5);
  id v8 = (char *)*v6;
  uint64_t v7 = v6[1];
  uint64_t v103 = v6;
  uint64_t v9 = sub_1000930E4();
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  sub_100085EE8(v7);
  sub_100085EE8(0x800000010029E270LL);
  uint64_t v11 = (os_log_s *)sub_1000935A4();
  if (sub_100093764(v11))
  {
    uint64_t v12 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v13 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v12 = 136446466;
    unint64_t v118 = 0xE100000000000000LL;
    int v14 = sub_1000930E4();
    sub_100093CBC(v14, v15, v16, v17, v18, v19, v20, v21, v1 + 416, (uint64_t)v103, v106, v109, v112, v13, 91);
    sub_100085F14();
    sub_1000930DC();
    uint64_t v23 = sub_10008620C(*(uint64_t *)v117, v22, &v116);
    sub_1000939F8(v23, v24, v25, v26, v27, v28, v29, v30, v101, v104, v107, v110, v113);
    sub_10007B980();
    sub_10007D974(v7);
    uint64_t v31 = sub_100093BB0();
    *(void *)(v1 + 416) = sub_100093C94(v31, v32, v33, v34, v35);
    sub_100086194((uint64_t)v8, v1 + 424);
    sub_100085E64(0x800000010029E270LL);
    sub_100086038((void *)&_mh_execute_header, v11, v10, "%{public}s%{public}s", v12);
    sub_100086030(v13, v36, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v13);
    sub_10007B974((uint64_t)v12);

    sub_1000930DC();
    sub_100085FB4();
  }

  else
  {
    sub_100085E64(v7);
    sub_100085E64(0x800000010029E270LL);
  }

  uint64_t v37 = *(void *)(v1 + 440);
  sub_100092A98(*(void *)(v1 + 504), type metadata accessor for SKLogger);
  sub_100093C64(OBJC_IVAR____TtC9storekitd7Request_client);
  uint64_t v38 = sub_10007B1FC(&qword_10032A028);
  uint64_t v39 = sub_10007D824(v37, 2LL, v38);
  uint64_t v40 = *(void *)(v1 + 440);
  if (!(_DWORD)v39)
  {
    uint64_t v46 = sub_100086318();
    sub_10008614C(v46);
    goto LABEL_11;
  }

  uint64_t v41 = *(void *)(v1 + 432);
  sub_100093A6C(v39, type metadata accessor for Client.Server);
  uint64_t v42 = (os_log_s *)*(unsigned __int8 *)(v41 + OBJC_IVAR____TtC9storekitd7Request_accountRequirement);
  if (!(_DWORD)v42)
  {
LABEL_11:
    uint64_t v45 = 0LL;
    goto LABEL_12;
  }

  sub_1000DF90C();
  sub_100093B80(v43);
  if (!v40)
  {
    if ((_DWORD)v42 == 2)
    {
      sub_10009362C(v106);
      uint64_t v66 = *v103;
      uint64_t v65 = v103[1];
      uint64_t v67 = sub_10007BA3C();
      os_log_type_t v68 = static os_log_type_t.default.getter(v67);
      uint64_t v69 = sub_100085EE8(v65);
      uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
      os_log_type_t v71 = v68;
      if (sub_10009396C(v70))
      {
        uint64_t v72 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v73 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v72 = 136446466;
        uint64_t v116 = v73;
        *(void *)uint64_t v117 = 91LL;
        unint64_t v118 = 0xE100000000000000LL;
        sub_10007BA3C();
        sub_100093624(v66);
        sub_100085F14();
        sub_10007BA44();
        *(void *)(v1 + 392) = sub_10008620C(*(uint64_t *)v117, v74, &v116);
        sub_1000933A4( v1 + 392,  v75,  v76,  (uint64_t)(v72 + 12),  v77,  v78,  v79,  v80,  v100,  (uint64_t)v103,  v106,  (uint64_t)(v72 + 4));
        sub_10007B980();
        sub_10007D974(v65);
        unint64_t v81 = sub_100093BC4();
        *(void *)(v1 + 400) = sub_100093878( v81,  (uint64_t)"No account for request. Forcing authentication.",  v102,  v105,  v108,  v111,  v112);
        sub_100086194(v1 + 400, v114);
        sub_100086038((void *)&_mh_execute_header, v70, v71, "%{public}s%{public}s", v72);
        sub_100086030(v73, v82, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v73);
        sub_10007B974((uint64_t)v72);

        sub_10007BA44();
      }

      else
      {
        sub_100085E64(v65);
      }

      sub_100092A98(*(void *)(v1 + 464), type metadata accessor for SKLogger);
      uint64_t v95 = (void *)swift_task_alloc(dword_10032BFDC);
      *(void *)(v1 + 616) = v95;
      uint64_t v96 = sub_100093DD0(v95, (uint64_t)sub_10008BC5C);
      return sub_100093824(v96);
    }

    else
    {
      sub_10009362C(v106);
      uint64_t v84 = *v103;
      uint64_t v83 = v103[1];
      uint64_t v85 = sub_100085FEC();
      os_log_type_t v86 = static os_log_type_t.error.getter(v85);
      uint64_t v87 = sub_100085EE8(v83);
      uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
      if (sub_1000934F0(v88))
      {
        uint64_t v89 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v90 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v89 = 136446466;
        uint64_t v116 = v90;
        *(void *)uint64_t v117 = 91LL;
        unint64_t v118 = 0xE100000000000000LL;
        sub_100085FEC();
        sub_1000935BC(v84);
        sub_100085F14();
        sub_100085EF0();
        uint64_t v92 = sub_10008620C(*(uint64_t *)v117, v91, &v116);
        sub_10009312C(v92);
        sub_10007B980();
        sub_10007D974(v83);
        unint64_t v93 = sub_100093144();
        *(void *)(v1 + 336) = sub_100093878( v93,  (uint64_t)"Account is required for request.",  v100,  (uint64_t)v103,  v106,  v109,  v1 + 336);
        sub_100086194(v115, v1 + 344);
        sub_100086038((void *)&_mh_execute_header, v42, v86, "%{public}s%{public}s", v89);
        sub_100086030(v90, v94, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v90);
        sub_10007B974((uint64_t)v89);

        sub_100085EF0();
      }

      else
      {
        sub_100085E64(v83);
      }

      sub_100092A98(*(void *)(v1 + 456), type metadata accessor for SKLogger);
      unint64_t v97 = sub_100092AC4();
      uint64_t v98 = sub_100093030((uint64_t)&unk_1002EEE28, v97);
      sub_100093390(v98, v99);
      sub_100093614(*(void *)(v1 + 504));
      sub_1000931C8();
      sub_100093280();
      sub_100093124();
      sub_1000932CC();
      sub_1000932D4();
      sub_1000931DC();
      sub_100093288();
      return sub_100093840(*(uint64_t (**)(void))(v1 + 8));
    }
  }

  sub_1000DF90C();
  uint64_t v45 = v44;
LABEL_12:
  *(void *)(v1 + 552) = v45;
  *(void *)(v1 + 544) = 0LL;
  sub_100093A20();
  *(void *)(v1 + 560) = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v47 = sub_100093634();
  sub_100093220(v47, "setAccount:");
  id v48 = sub_1000DF468();
  sub_100092F5C((uint64_t)v48, "setClientInfo:");

  sub_10009322C(v49, "setRequestEncoding:");
  sub_100093740();
  if (v50)
  {
    [sub_1000931D0() init];
    id v51 = [(id)sub_100093208() preferredAttestationStyle];
    id v52 = sub_1000936AC((uint64_t)v51, "setStyle:");
    id v53 = sub_1000931E4((uint64_t)v52, "setPurpose:");
    sub_100092F5C((uint64_t)v53, "setKeychainOptions:");
  }

  sub_100093AA8();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v55 = (void *)v54;
  id v56 = sub_10009304C(v54, "ams_configurationWithProcessInfo:bag:");
  *(void *)(v1 + 56_Block_object_dispose(va, 8) = v56;
  sub_1000931C0();

  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v56, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  *(void *)(v1 + 576) = v57;
  sub_1000936C4();
  *(void *)(v1 + 584) = sub_10009368C(v58, "URLForKey:");
  sub_1000931C0();
  if (*(void *)&v8[OBJC_IVAR____TtC9storekitd7Request_parameters]) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  *(void *)(v1 + 592) = sub_100092F98(v59, "requestWithMethod:bagURL:parameters:");
  uint64_t v60 = sub_1000936B4();
  id v61 = sub_1000931FC(v60, "dataTaskPromiseWithRequestPromise:");
  sub_100093B68((uint64_t)v61);
  uint64_t v62 = sub_10009305C((uint64_t)sub_10008BA08);
  *(void *)(v1 + 80) = _NSConcreteStackBlock;
  *(void *)(v1 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
  uint64_t v63 = sub_1000937B0(v62, (uint64_t)sub_10008F3C0);
  sub_100093238(v63, "resultWithCompletion:");
  return sub_100093808();
}

uint64_t sub_10008BA08()
{
  return sub_100092F20();
}

#error "10008BB00: call analysis failed (funcsize=130)"
uint64_t sub_10008BC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000939E0();
  sub_10009399C();
  if (v1)
  {
    sub_100093A80();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    return sub_100093184(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    *(void *)(v3 + 632) = v0;
    sub_100093420();
    return sub_100092FAC();
  }

uint64_t sub_10008BCC0()
{
  uint64_t v3 = v0[78];
  v0[69] = v0[79];
  v0[68] = v3;
  sub_100093A20();
  v0[70] = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v4 = sub_100093634();
  sub_100093220(v4, "setAccount:");
  id v5 = sub_1000DF468();
  sub_100092F5C((uint64_t)v5, "setClientInfo:");

  sub_10009322C(v6, "setRequestEncoding:");
  sub_100093740();
  if (v7)
  {
    [sub_1000931D0() init];
    id v8 = [(id)sub_100093208() preferredAttestationStyle];
    id v9 = sub_1000936AC((uint64_t)v8, "setStyle:");
    id v10 = sub_1000931E4((uint64_t)v9, "setPurpose:");
    sub_100092F5C((uint64_t)v10, "setKeychainOptions:");
  }

  sub_100093AA8();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v12 = (void *)v11;
  id v13 = sub_10009304C(v11, "ams_configurationWithProcessInfo:bag:");
  sub_100093E10((uint64_t)v13);
  sub_1000931C0();
  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v1, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  v0[72] = v14;
  sub_1000936C4();
  v0[73] = sub_10009368C(v15, "URLForKey:");
  sub_1000931C0();
  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd7Request_parameters)) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  v0[74] = sub_100092F98(v16, "requestWithMethod:bagURL:parameters:");
  uint64_t v17 = sub_1000936B4();
  id v18 = sub_1000931FC(v17, "dataTaskPromiseWithRequestPromise:");
  sub_100093B68((uint64_t)v18);
  uint64_t v19 = sub_10009305C((uint64_t)sub_10008BA08);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v20 = sub_1000937B0(v19, (uint64_t)sub_10008F3C0);
  sub_100093238(v20, "resultWithCompletion:");
  return sub_100092FC4();
}

uint64_t sub_10008BF24(uint64_t a1)
{
  uint64_t v2 = sub_100093DA0(a1);
  v1[55] = sub_10009344C(v2);
  v1[56] = sub_100086224();
  v1[57] = sub_100093010();
  v1[58] = sub_100093010();
  v1[59] = sub_100093010();
  v1[60] = sub_100093010();
  v1[61] = sub_100093010();
  v1[62] = sub_100093010();
  v1[63] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10008BFA8()
{
  uint64_t v112 = v1 + 408;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v3 = sub_100093CD4();
  uint64_t v4 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
  *(void *)(v1 + 512) = v4;
  uint64_t v106 = v4;
  sub_1000935C4(v4);
  sub_100093C40();
  swift_bridgeObjectRelease(v118);
  *(void *)uint64_t v117 = v0;
  unint64_t v118 = 0x800000010029E270LL;
  v119._countAndFlagsBits = sub_100093D70(OBJC_IVAR____TtC9storekitd7Request_bagKey);
  sub_100093D94(v119);
  sub_10007BA44();
  uint64_t v109 = v0;
  uint64_t v5 = OBJC_IVAR____TtC9storekitd7Request_logKey;
  *(void *)(v1 + 52_Block_object_dispose(va, 8) = OBJC_IVAR____TtC9storekitd7Request_logKey;
  uint64_t v6 = (uint64_t *)(v2 + v5);
  id v8 = (char *)*v6;
  uint64_t v7 = v6[1];
  uint64_t v103 = v6;
  uint64_t v9 = sub_1000930E4();
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  sub_100085EE8(v7);
  sub_100085EE8(0x800000010029E270LL);
  uint64_t v11 = (os_log_s *)sub_1000935A4();
  if (sub_100093764(v11))
  {
    uint64_t v12 = (uint8_t *)sub_10007B9FC(22LL);
    uint64_t v13 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v12 = 136446466;
    unint64_t v118 = 0xE100000000000000LL;
    int v14 = sub_1000930E4();
    sub_100093CBC(v14, v15, v16, v17, v18, v19, v20, v21, v1 + 416, (uint64_t)v103, v106, v109, v112, v13, 91);
    sub_100085F14();
    sub_1000930DC();
    uint64_t v23 = sub_10008620C(*(uint64_t *)v117, v22, &v116);
    sub_1000939F8(v23, v24, v25, v26, v27, v28, v29, v30, v101, v104, v107, v110, v113);
    sub_10007B980();
    sub_10007D974(v7);
    uint64_t v31 = sub_100093BB0();
    *(void *)(v1 + 416) = sub_100093C94(v31, v32, v33, v34, v35);
    sub_100086194((uint64_t)v8, v1 + 424);
    sub_100085E64(0x800000010029E270LL);
    sub_100086038((void *)&_mh_execute_header, v11, v10, "%{public}s%{public}s", v12);
    sub_100086030(v13, v36, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v13);
    sub_10007B974((uint64_t)v12);

    sub_1000930DC();
    sub_100085FB4();
  }

  else
  {
    sub_100085E64(v7);
    sub_100085E64(0x800000010029E270LL);
  }

  uint64_t v37 = *(void *)(v1 + 440);
  sub_100092A98(*(void *)(v1 + 504), type metadata accessor for SKLogger);
  sub_100093C64(OBJC_IVAR____TtC9storekitd7Request_client);
  uint64_t v38 = sub_10007B1FC(&qword_10032A028);
  uint64_t v39 = sub_10007D824(v37, 2LL, v38);
  uint64_t v40 = *(void *)(v1 + 440);
  if (!(_DWORD)v39)
  {
    uint64_t v46 = sub_100086318();
    sub_10008614C(v46);
    goto LABEL_11;
  }

  uint64_t v41 = *(void *)(v1 + 432);
  sub_100093A6C(v39, type metadata accessor for Client.Server);
  uint64_t v42 = (os_log_s *)*(unsigned __int8 *)(v41 + OBJC_IVAR____TtC9storekitd7Request_accountRequirement);
  if (!(_DWORD)v42)
  {
LABEL_11:
    uint64_t v45 = 0LL;
    goto LABEL_12;
  }

  sub_1000DF90C();
  sub_100093B80(v43);
  if (!v40)
  {
    if ((_DWORD)v42 == 2)
    {
      sub_10009362C(v106);
      uint64_t v66 = *v103;
      uint64_t v65 = v103[1];
      uint64_t v67 = sub_10007BA3C();
      os_log_type_t v68 = static os_log_type_t.default.getter(v67);
      uint64_t v69 = sub_100085EE8(v65);
      uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
      os_log_type_t v71 = v68;
      if (sub_10009396C(v70))
      {
        uint64_t v72 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v73 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v72 = 136446466;
        uint64_t v116 = v73;
        *(void *)uint64_t v117 = 91LL;
        unint64_t v118 = 0xE100000000000000LL;
        sub_10007BA3C();
        sub_100093624(v66);
        sub_100085F14();
        sub_10007BA44();
        *(void *)(v1 + 392) = sub_10008620C(*(uint64_t *)v117, v74, &v116);
        sub_1000933A4( v1 + 392,  v75,  v76,  (uint64_t)(v72 + 12),  v77,  v78,  v79,  v80,  v100,  (uint64_t)v103,  v106,  (uint64_t)(v72 + 4));
        sub_10007B980();
        sub_10007D974(v65);
        unint64_t v81 = sub_100093BC4();
        *(void *)(v1 + 400) = sub_100093878( v81,  (uint64_t)"No account for request. Forcing authentication.",  v102,  v105,  v108,  v111,  v112);
        sub_100086194(v1 + 400, v114);
        sub_100086038((void *)&_mh_execute_header, v70, v71, "%{public}s%{public}s", v72);
        sub_100086030(v73, v82, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v73);
        sub_10007B974((uint64_t)v72);

        sub_10007BA44();
      }

      else
      {
        sub_100085E64(v65);
      }

      sub_100092A98(*(void *)(v1 + 464), type metadata accessor for SKLogger);
      uint64_t v95 = (void *)swift_task_alloc(dword_10032BFDC);
      *(void *)(v1 + 616) = v95;
      uint64_t v96 = sub_100093DD0(v95, (uint64_t)sub_10008D0B8);
      return sub_100093824(v96);
    }

    else
    {
      sub_10009362C(v106);
      uint64_t v84 = *v103;
      uint64_t v83 = v103[1];
      uint64_t v85 = sub_100085FEC();
      os_log_type_t v86 = static os_log_type_t.error.getter(v85);
      uint64_t v87 = sub_100085EE8(v83);
      uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
      if (sub_1000934F0(v88))
      {
        uint64_t v89 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v90 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v89 = 136446466;
        uint64_t v116 = v90;
        *(void *)uint64_t v117 = 91LL;
        unint64_t v118 = 0xE100000000000000LL;
        sub_100085FEC();
        sub_1000935BC(v84);
        sub_100085F14();
        sub_100085EF0();
        uint64_t v92 = sub_10008620C(*(uint64_t *)v117, v91, &v116);
        sub_10009312C(v92);
        sub_10007B980();
        sub_10007D974(v83);
        unint64_t v93 = sub_100093144();
        *(void *)(v1 + 336) = sub_100093878( v93,  (uint64_t)"Account is required for request.",  v100,  (uint64_t)v103,  v106,  v109,  v1 + 336);
        sub_100086194(v115, v1 + 344);
        sub_100086038((void *)&_mh_execute_header, v42, v86, "%{public}s%{public}s", v89);
        sub_100086030(v90, v94, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v90);
        sub_10007B974((uint64_t)v89);

        sub_100085EF0();
      }

      else
      {
        sub_100085E64(v83);
      }

      sub_100092A98(*(void *)(v1 + 456), type metadata accessor for SKLogger);
      unint64_t v97 = sub_100092AC4();
      uint64_t v98 = sub_100093030((uint64_t)&unk_1002EEE28, v97);
      sub_100093390(v98, v99);
      sub_100093614(*(void *)(v1 + 504));
      sub_1000931C8();
      sub_100093280();
      sub_100093124();
      sub_1000932CC();
      sub_1000932D4();
      sub_1000931DC();
      sub_100093288();
      return sub_100093840(*(uint64_t (**)(void))(v1 + 8));
    }
  }

  sub_1000DF90C();
  uint64_t v45 = v44;
LABEL_12:
  *(void *)(v1 + 552) = v45;
  *(void *)(v1 + 544) = 0LL;
  sub_100093A20();
  *(void *)(v1 + 560) = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v47 = sub_100093634();
  sub_100093220(v47, "setAccount:");
  id v48 = sub_1000DF468();
  sub_100092F5C((uint64_t)v48, "setClientInfo:");

  sub_10009322C(v49, "setRequestEncoding:");
  sub_100093740();
  if (v50)
  {
    [sub_1000931D0() init];
    id v51 = [(id)sub_100093208() preferredAttestationStyle];
    id v52 = sub_1000936AC((uint64_t)v51, "setStyle:");
    id v53 = sub_1000931E4((uint64_t)v52, "setPurpose:");
    sub_100092F5C((uint64_t)v53, "setKeychainOptions:");
  }

  sub_100093AA8();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v55 = (void *)v54;
  id v56 = sub_10009304C(v54, "ams_configurationWithProcessInfo:bag:");
  *(void *)(v1 + 56_Block_object_dispose(va, 8) = v56;
  sub_1000931C0();

  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v56, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  *(void *)(v1 + 576) = v57;
  sub_1000936C4();
  *(void *)(v1 + 584) = sub_10009368C(v58, "URLForKey:");
  sub_1000931C0();
  if (*(void *)&v8[OBJC_IVAR____TtC9storekitd7Request_parameters]) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  *(void *)(v1 + 592) = sub_100092F98(v59, "requestWithMethod:bagURL:parameters:");
  uint64_t v60 = sub_1000936B4();
  id v61 = sub_1000931FC(v60, "dataTaskPromiseWithRequestPromise:");
  sub_100093B68((uint64_t)v61);
  uint64_t v62 = sub_10009305C((uint64_t)sub_10008C790);
  *(void *)(v1 + 80) = _NSConcreteStackBlock;
  *(void *)(v1 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
  uint64_t v63 = sub_1000937B0(v62, (uint64_t)sub_10008F3C0);
  sub_100093238(v63, "resultWithCompletion:");
  return sub_100093808();
}

uint64_t sub_10008C790()
{
  return sub_100092F20();
}

#error "10008C888: call analysis failed (funcsize=130)"
#error "10008CC9C: call analysis failed (funcsize=419)"
uint64_t sub_10008D0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000939E0();
  sub_10009399C();
  if (v1)
  {
    sub_100093A80();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    return sub_100093184(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    *(void *)(v3 + 632) = v0;
    sub_100093420();
    return sub_100092FAC();
  }

uint64_t sub_10008D11C()
{
  uint64_t v3 = v0[78];
  v0[69] = v0[79];
  v0[68] = v3;
  sub_100093A20();
  v0[70] = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v4 = sub_100093634();
  sub_100093220(v4, "setAccount:");
  id v5 = sub_1000DF468();
  sub_100092F5C((uint64_t)v5, "setClientInfo:");

  sub_10009322C(v6, "setRequestEncoding:");
  sub_100093740();
  if (v7)
  {
    [sub_1000931D0() init];
    id v8 = [(id)sub_100093208() preferredAttestationStyle];
    id v9 = sub_1000936AC((uint64_t)v8, "setStyle:");
    id v10 = sub_1000931E4((uint64_t)v9, "setPurpose:");
    sub_100092F5C((uint64_t)v10, "setKeychainOptions:");
  }

  sub_100093AA8();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v12 = (void *)v11;
  id v13 = sub_10009304C(v11, "ams_configurationWithProcessInfo:bag:");
  sub_100093E10((uint64_t)v13);
  sub_1000931C0();
  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v1, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  v0[72] = v14;
  sub_1000936C4();
  v0[73] = sub_10009368C(v15, "URLForKey:");
  sub_1000931C0();
  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd7Request_parameters)) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  v0[74] = sub_100092F98(v16, "requestWithMethod:bagURL:parameters:");
  uint64_t v17 = sub_1000936B4();
  id v18 = sub_1000931FC(v17, "dataTaskPromiseWithRequestPromise:");
  sub_100093B68((uint64_t)v18);
  uint64_t v19 = sub_10009305C((uint64_t)sub_10008C790);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v20 = sub_1000937B0(v19, (uint64_t)sub_10008F3C0);
  sub_100093238(v20, "resultWithCompletion:");
  return sub_100092FC4();
}

uint64_t sub_10008D380()
{
  uint64_t v1 = sub_100093C2C();
  v0[54] = sub_10009344C(v1);
  v0[55] = sub_100086224();
  v0[56] = sub_100093010();
  v0[57] = sub_100093010();
  v0[58] = sub_100093010();
  v0[59] = sub_100093010();
  v0[60] = sub_100093010();
  v0[61] = sub_100093010();
  v0[62] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

#error "10008D44C: call analysis failed (funcsize=427)"
uint64_t sub_10008DB28()
{
  sub_10009342C();
  sub_100093420();
  return sub_100092F20();
}

#error "10008DC14: call analysis failed (funcsize=130)"
uint64_t sub_10008DD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000939E0();
  sub_10009319C();
  if (v1)
  {
    sub_1000934D8();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    return sub_100093184(*(uint64_t (**)(void))(v2 + 8));
  }

  else
  {
    *(void *)(v3 + 624) = v0;
    sub_100093420();
    return sub_100092FAC();
  }

uint64_t sub_10008DDF4()
{
  id v3 = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v4 = sub_10009330C((uint64_t)v3);
  sub_100093220(v4, "setAccount:");
  id v5 = sub_1000DF468();
  sub_100092F5C((uint64_t)v5, "setClientInfo:");

  sub_10009322C(v6, "setRequestEncoding:");
  sub_100093740();
  if (v7)
  {
    [sub_1000931D0() init];
    id v8 = [(id)sub_100093208() preferredAttestationStyle];
    id v9 = sub_1000936AC((uint64_t)v8, "setStyle:");
    id v10 = sub_1000931E4((uint64_t)v9, "setPurpose:");
    sub_100092F5C((uint64_t)v10, "setKeychainOptions:");
  }

  sub_100093594();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v12 = (void *)v11;
  id v13 = sub_10009304C(v11, "ams_configurationWithProcessInfo:bag:");
  sub_100093A74((uint64_t)v13);
  sub_1000931C0();
  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v1, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  sub_1000932DC(v14);
  v0[72] = sub_10009368C(v15, "URLForKey:");
  sub_1000931C0();
  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd7Request_parameters)) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  id v17 = sub_100092F98(v16, "requestWithMethod:bagURL:parameters:");
  uint64_t v18 = sub_10009331C((uint64_t)v17);
  id v19 = sub_1000931FC(v18, "dataTaskPromiseWithRequestPromise:");
  sub_1000935AC((uint64_t)v19);
  uint64_t v20 = sub_10009305C((uint64_t)sub_10008DB28);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v21 = sub_1000937B0(v20, (uint64_t)sub_10008F3C0);
  sub_100093238(v21, "resultWithCompletion:");
  return sub_100092FC4();
}

uint64_t sub_10008E030()
{
  uint64_t v1 = sub_100093C2C();
  v0[54] = sub_10009344C(v1);
  v0[55] = sub_100086224();
  v0[56] = sub_100093010();
  v0[57] = sub_100093010();
  v0[58] = sub_100093010();
  v0[59] = sub_100093010();
  v0[60] = sub_100093010();
  v0[61] = sub_100093010();
  v0[62] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

#error "10008E0FC: call analysis failed (funcsize=427)"
uint64_t sub_10008E7D8()
{
  sub_10009342C();
  sub_100093420();
  return sub_100092F20();
}

#error "10008E8BC: call analysis failed (funcsize=143)"
uint64_t sub_10008EA60()
{
  char *v0;
  void *v1;
  void *v2;
  os_log_s *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void ***v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  os_log_s *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_s *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  os_log_s *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  Swift::String v233;
  sub_1000938F8();
  v231 = v6;
  v232 = v7;
  v230 = v1;
  sub_10009374C();

  id v8 = (void ***)sub_100093C54();
  id v9 = [v8 userInfo];
  id v10 = &type metadata for Any;
  sub_100093A44((uint64_t)v9, (uint64_t)&type metadata for String);
  sub_100093C5C();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorUserInfoKeyServerPayload);
  sub_1000938B8(v11, v12);
  sub_100085FB4();
  sub_10007BA44();
  sub_100093DB8();
  if (!v13)
  {
    id v15 = v0;
LABEL_10:
    sub_10007B294((uint64_t)v15);
    goto LABEL_11;
  }

  uint64_t v14 = sub_10007B1FC(&qword_10032A580);
  if ((sub_1000934A8(v14) & 1) == 0) {
    goto LABEL_11;
  }
  sub_1000930A0();
  if (!v1[22])
  {
    sub_10007B980();
    id v15 = (char *)&type metadata for Any + 8;
    goto LABEL_10;
  }

  if ((sub_10009369C( (uint64_t)(v1 + 41),  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Int) & 1) == 0)
  {
    sub_10007B980();
LABEL_11:
    sub_1000938E8();
    uint64_t v16 = sub_10009385C();
    if ((v17 & 1) != 0)
    {
      uint64_t v18 = (void *)v1[59];
      sub_1000935C4(v16);
      sub_100093650();
      uint64_t v27 = sub_100093A98( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v171,  v180,  v189,  v195,  v201,  v205,  (uint64_t)v4,  v213,  v216,  v221,  v226,  v227,  v228,  v229);
      sub_100093888(v27, (uint64_t)"Request cancelled: ");
      v1[36] = &type metadata for Any;
      sub_10007B1FC(&qword_100329B90);
      sub_10009357C();
      uint64_t v28 = v1[32];
      v206 = v1[31];
      uint64_t v29 = *v8;
      uint64_t v30 = (uint64_t)v8[1];
      uint64_t v31 = sub_1000930E4();
      id v3 = (os_log_s *)static os_log_type_t.error.getter(v31);
      sub_100085EE8(v30);
      sub_100085EE8(v28);
      uint64_t v32 = (os_log_s *)sub_1000935A4();
      if (sub_10009332C(v32))
      {
        uint64_t v18 = v1 + 37;
        id v3 = (os_log_s *)(v1 + 38);
        id v5 = sub_10007B9FC(22LL);
        sub_10007B9FC(64LL);
        sub_100093A14();
        uint64_t v33 = sub_100092F2C(4.8752e-34);
        sub_100093260( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v172,  v181,  v190,  v196,  v202,  v206,  v210,  (uint64_t)v214,  v217,  v222,  v226,  v227,  v228);
        sub_100085F14();
        sub_1000930DC();
        uint64_t v42 = sub_10008620C(v228, v41, &v226);
        sub_100093018(v42, v43, v44, v45, v46, v47, v48, v49, v173, v182, v191, v197);
        sub_10007B980();
        sub_10007D974(v30);
        *(_WORD *)(v5 + 12) = 2082;
        char v50 = sub_10007BA3C();
        v1[38] = sub_100093250(v50, v51, v52, v53, v54, v55, v56, v57, v174, v183);
        sub_100086194((uint64_t)(v1 + 38), v210);
        sub_100085E64(v28);
        sub_100086038( (void *)&_mh_execute_header,  (os_log_s *)&type metadata for Any,  (os_log_type_t)v4,  "%{public}s%{public}s",  (uint8_t *)v5);
        sub_100086030(v202, v58, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v202);
        sub_10007B974(v5);

        sub_1000930DC();
        sub_10007BA44();
      }

      else
      {
        sub_100085E64(v30);
        sub_100085E64(v28);
      }

      unint64_t v97 = sub_1000935CC();
      sub_100092A98(v97, type metadata accessor for SKLogger);
      uint64_t v98 = sub_100092AC4();
      uint64_t v99 = sub_100093030((uint64_t)&unk_1002EEE28, v98);
      sub_100093DC4(v99, v100);
    }

    else
    {
      uint64_t v18 = (void *)v1[58];
      sub_1000935C4(v16);
      sub_10009363C();
      sub_100093D44( v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  v171,  v180,  v189,  v195,  v201,  v205,  v209,  v213,  v216,  v221,  v226,  v227,  v228,  v229);
      sub_100093478((uint64_t)"Request failed: ");
      v1[35] = &type metadata for Any;
      sub_10007B1FC(&qword_100329B90);
      v210 = (uint64_t)(v1 + 35);
      sub_10009357C();
      uint64_t v67 = v1[30];
      v206 = v1[29];
      uint64_t v29 = *v8;
      os_log_type_t v68 = (uint64_t)v8[1];
      uint64_t v69 = sub_1000930E4();
      id v3 = (os_log_s *)static os_log_type_t.error.getter(v69);
      sub_100085EE8(v68);
      sub_100085EE8(v67);
      uint64_t v70 = (os_log_s *)sub_1000935A4();
      if (sub_10009332C(v70))
      {
        uint64_t v18 = v1 + 33;
        id v3 = (os_log_s *)(v1 + 34);
        id v5 = sub_10007B9FC(22LL);
        sub_10007B9FC(64LL);
        sub_100093A14();
        os_log_type_t v71 = sub_100092F2C(4.8752e-34);
        sub_100093260( v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v172,  v181,  v190,  v196,  v202,  v206,  v210,  (uint64_t)v214,  v218,  v223,  v226,  v227,  v228);
        sub_100085F14();
        sub_1000930DC();
        uint64_t v80 = sub_10008620C(v228, v79, &v226);
        sub_100093018(v80, v81, v82, v83, v84, v85, v86, v87, v175, v184, v192, v198);
        sub_10007B980();
        sub_10007D974(v68);
        *(_WORD *)(v5 + 12) = 2082;
        uint64_t v88 = sub_10007BA3C();
        v1[34] = sub_100093250(v88, v89, v90, v91, v92, v93, v94, v95, v176, v185);
        sub_100086194((uint64_t)(v1 + 34), v210);
        sub_100085E64(v67);
        sub_100086038( (void *)&_mh_execute_header,  (os_log_s *)&type metadata for Any,  (os_log_type_t)v4,  "%{public}s%{public}s",  (uint8_t *)v5);
        sub_100086030(v202, v96, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v202);
        sub_10007B974(v5);

        sub_1000930DC();
        sub_10007BA44();
      }

      else
      {
        sub_100085E64(v68);
        sub_100085E64(v67);
      }

      uint64_t v101 = sub_1000935F0();
      sub_100092A98(v101, type metadata accessor for SKLogger);
      uint64_t v102 = sub_100092AC4();
      uint64_t v103 = sub_100093030((uint64_t)&unk_1002EEE28, v102);
      sub_100093B28(v103, v104);
    }

    goto LABEL_20;
  }

  sub_100092FDC();
  sub_10007B980();
  if (!v1[18])
  {
    sub_100093CEC();
    goto LABEL_23;
  }

  if ((sub_10009369C( (uint64_t)(v1 + 27),  (uint64_t)v9,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_23:
    sub_100093DEC();
    goto LABEL_24;
  }

  id v10 = (void *)v1[28];
LABEL_24:
  sub_100093BA4();
  sub_100093664();
  sub_100093D14( v116,  v117,  v118,  v119,  v120,  v121,  v122,  v123,  v171,  v180,  v189,  v195,  v201,  v205,  v209,  v213,  v216,  v221,  v226,  v227,  v228,  v229);
  sub_100093B40();
  sub_10009306C();
  v233._countAndFlagsBits = sub_100093CB4((uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
  sub_100093A60(v233);
  unint64_t v124 = sub_100085EF0();
  uint64_t v132 = sub_100093974( v124,  v125,  v126,  v127,  v128,  v129,  v130,  v131,  v177,  v186,  v193,  v199,  v203,  v207,  v211,  v215,  v219,  v224,  v226,  v227,  v228);
  if (v10)
  {
    sub_100093404( v132,  v133,  v134,  v135,  v136,  v137,  v138,  v139,  v178,  v187,  v194,  v200,  v204,  v208,  v212,  (uint64_t)v214,  v220,  v225,  v226,  v227,  v228,  v229);
    sub_1000937E8();
    sub_1000935BC(v228);
    sub_100085EF0();
    uint64_t v132 = v226;
  }

  uint64_t v29 = (void **)(v1[53] + v1[65]);
  sub_1000935BC(v132);
  sub_100085EF0();
  uint64_t v4 = *v29;
  id v10 = v29[1];
  uint64_t v140 = sub_100093528();
  uint64_t v18 = (void *)static os_log_type_t.error.getter(v140);
  sub_100085EE8((uint64_t)v10);
  sub_100085EE8(v225);
  uint64_t v141 = (os_log_s *)sub_100093C38();
  if (sub_1000938C8(v141))
  {
    uint64_t v142 = sub_10007B9FC(22LL);
    sub_10007B9FC(64LL);
    sub_100093D2C();
    sub_1000933E8(4.8752e-34);
    sub_100093570();
    sub_100085F14();
    sub_100093460();
    uint64_t v144 = sub_10008620C(v228, v143, &v226);
    sub_100093530(v144, v145, v146, v147, v148, v149, v150, v151, v178, (uint64_t)(v1 + 45), (uint64_t)(v1 + 44));
    sub_10007B980();
    sub_10007D974((uint64_t)v10);
    *(_WORD *)(v142 + 12) = 2082;
    uint64_t v152 = sub_1000930E4();
    v1[45] = sub_1000937D8(v152, v153, v154, v155, v156, v157, v158, v159, v179, v188);
    sub_100086194((uint64_t)v4, (uint64_t)(v1 + 46));
    sub_100085E64(v225);
    sub_100086038((void *)&_mh_execute_header, v3, (os_log_type_t)v5, "%{public}s%{public}s", (uint8_t *)v142);
    sub_100086030((uint64_t)v29, v160, (uint64_t)&type metadata for Any + 8);
    sub_10007B974((uint64_t)v29);
    sub_10007B974(v142);

    sub_100093460();
    sub_1000930DC();
  }

  else
  {
    sub_100085E64((uint64_t)v10);
    sub_100085E64(v225);
  }

  uint64_t v161 = sub_100093500();
  sub_100092A98(v161, type metadata accessor for SKLogger);
  uint64_t v162 = sub_100092B3C();
  uint64_t v163 = sub_100093030((uint64_t)&unk_1002EED98, v162);
  sub_1000936D4(v163, v164, v165, v166, v167, v168, v169, v170, v178, v187, v194, v220, v204, v208, v212);
LABEL_20:
  sub_100093D24();

  uint64_t v105 = sub_100093CF4();
  sub_100093D1C(v105, v106, v107, v108, v109, v110, v111, v112, v172, v181, v190, v196, v202, v206, v210, v214);
  sub_1000930CC(v1[62]);
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  sub_100093288();
  uint64_t v113 = sub_100093DF8();
  return v114(v113);
}

uint64_t sub_10008F10C()
{
  if (v1)
  {
    sub_1000934D8();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    uint64_t v3 = sub_100093DF8();
    return v4(v3);
  }

  else
  {
    *(void *)(v2 + 624) = v0;
    sub_100093420();
    return sub_100092FAC();
  }

uint64_t sub_10008F184()
{
  id v3 = sub_100093694(objc_allocWithZone(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:");
  uint64_t v4 = sub_10009330C((uint64_t)v3);
  sub_100093220(v4, "setAccount:");
  id v5 = sub_1000DF468();
  sub_100092F5C((uint64_t)v5, "setClientInfo:");

  sub_10009322C(v6, "setRequestEncoding:");
  sub_100093740();
  if (v7)
  {
    [sub_1000931D0() init];
    id v8 = [(id)sub_100093208() preferredAttestationStyle];
    id v9 = sub_1000936AC((uint64_t)v8, "setStyle:");
    id v10 = sub_1000931E4((uint64_t)v9, "setPurpose:");
    sub_100092F5C((uint64_t)v10, "setKeychainOptions:");
  }

  sub_100093594();
  objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  sub_100093244();
  sub_1000936A4();
  uint64_t v12 = (void *)v11;
  id v13 = sub_10009304C(v11, "ams_configurationWithProcessInfo:bag:");
  sub_100093A74((uint64_t)v13);
  sub_1000931C0();
  sub_10009303C(OBJC_IVAR____TtC9storekitd6Client_callerBundleID);
  sub_1000931F0();
  sub_100093214();
  sub_1000875F4(v1, "set_sourceApplicationBundleIdentifier:");

  sub_1000936BC();
  sub_1000936CC();
  sub_10009370C();
  sub_100092F84();
  sub_1000932DC(v14);
  v0[72] = sub_10009368C(v15, "URLForKey:");
  sub_1000931C0();
  if (*(void *)(v2 + OBJC_IVAR____TtC9storekitd7Request_parameters)) {
    Dictionary._bridgeToObjectiveC()();
  }
  sub_1000937BC();
  id v17 = sub_100092F98(v16, "requestWithMethod:bagURL:parameters:");
  uint64_t v18 = sub_10009331C((uint64_t)v17);
  id v19 = sub_1000931FC(v18, "dataTaskPromiseWithRequestPromise:");
  sub_1000935AC((uint64_t)v19);
  uint64_t v20 = sub_10009305C((uint64_t)sub_10008E7D8);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v21 = sub_1000937B0(v20, (uint64_t)sub_10008F3C0);
  sub_100093238(v21, "resultWithCompletion:");
  return sub_100092FC4();
}

uint64_t sub_10008F3C0(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_100121AC4(v3, a3);
  }
  if (a2) {
    return sub_100121B18(v3, (uint64_t)a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_10008F40C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  id v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v103 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)&v103 - v12;
  id v14 = [a1 responseHeaders];
  if (!v14)
  {
    __int128 v109 = 0u;
    __int128 v110 = 0u;
    goto LABEL_10;
  }

  id v15 = v14;
  uint64_t v112 = v11;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  strcpy((char *)v106, "Content-Type");
  HIBYTE(v106[6]) = 0;
  v106[7] = -5120;
  AnyHashable.init<A>(_:)(v106, &type metadata for String, &protocol witness table for String);
  sub_10012A6B0((uint64_t)&v107, v16, &v109);
  swift_bridgeObjectRelease(v16);
  sub_100087388((uint64_t)&v107);
  if (!*((void *)&v110 + 1))
  {
LABEL_10:
    sub_10007B294((uint64_t)&v109);
    goto LABEL_11;
  }

  if (!swift_dynamicCast( &v107,  &v109,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
  {
LABEL_11:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v37 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v37, (uint64_t)v8);
    uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v38 = *(void **)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v40 = swift_bridgeObjectRetain(v38);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    uint64_t v42 = swift_bridgeObjectRetain_n(v38, 2LL);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = v41;
    if (os_log_type_enabled(v43, v41))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v46 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v109 = v46;
      *(_DWORD *)uint64_t v45 = 136446466;
      uint64_t v107 = 91LL;
      v108[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v38);
      v47._countAndFlagsBits = v39;
      v47._object = v38;
      String.append(_:)(v47);
      v48._countAndFlagsBits = 8285LL;
      v48._object = (void *)0xE200000000000000LL;
      String.append(_:)(v48);
      swift_bridgeObjectRelease(v38);
      unint64_t v49 = v108[0];
      uint64_t v107 = sub_10007A488(v107, v108[0], (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v45 + 4);
      swift_bridgeObjectRelease_n(v38, 2LL);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v45 + 12) = 2082;
      uint64_t v107 = sub_10007A488(0xD000000000000045LL, 0x800000010029E3A0LL, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v45 + 14);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s%{public}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_bridgeObjectRelease(v38);
    }

    else
    {

      swift_bridgeObjectRelease_n(v38, 3LL);
    }

    uint64_t v50 = (uint64_t)v8;
    goto LABEL_17;
  }

  uint64_t v17 = v107;
  uint64_t v18 = (void *)v108[0];
  swift_bridgeObjectRetain(v108[0]);
  char v19 = sub_10011E60C();
  if (v19 == 2)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v20 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v20, (uint64_t)v13);
    uint64_t v107 = 0LL;
    v108[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(v108[0]);
    uint64_t v107 = 0xD000000000000023LL;
    v108[0] = 0x800000010029E3F0LL;
    v21._countAndFlagsBits = v17;
    v21._object = v18;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v18);
    uint64_t v23 = v107;
    unint64_t v22 = v108[0];
    uint64_t v25 = *(void *)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v24 = *(void **)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v26 = swift_bridgeObjectRetain(v24);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    swift_bridgeObjectRetain_n(v24, 2LL);
    uint64_t v28 = swift_bridgeObjectRetain_n(v22, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = v27;
    if (os_log_type_enabled(v29, v27))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v112 = (char *)v23;
      uint64_t v33 = v32;
      *(void *)&__int128 v109 = v32;
      *(_DWORD *)uint64_t v31 = 136446466;
      uint64_t v105 = v31 + 4;
      uint64_t v107 = 91LL;
      v108[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v24);
      v34._countAndFlagsBits = v25;
      v34._object = v24;
      String.append(_:)(v34);
      v35._countAndFlagsBits = 8285LL;
      v35._object = (void *)0xE200000000000000LL;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v24);
      unint64_t v36 = v108[0];
      uint64_t v107 = sub_10007A488(v107, v108[0], (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v105);
      swift_bridgeObjectRelease_n(v24, 2LL);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2082;
      swift_bridgeObjectRetain(v22);
      uint64_t v107 = sub_10007A488((uint64_t)v112, v22, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v31 + 14);
      swift_bridgeObjectRelease_n(v22, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v24);
    }

    else
    {

      swift_bridgeObjectRelease_n(v22, 3LL);
      swift_bridgeObjectRelease_n(v24, 3LL);
    }

    uint64_t v50 = (uint64_t)v13;
LABEL_17:
    sub_100092A98(v50, type metadata accessor for SKLogger);
    unint64_t v51 = sub_100092B3C();
    uint64_t v52 = swift_allocError(&unk_1002EED98, v51, 0LL, 0LL);
    *id v53 = 0LL;
    v53[1] = 0LL;
    v53[2] = 1LL;
    return swift_willThrow(v52, v53, v54, v55, v56, v57, v58);
  }

  char v60 = v19;
  swift_bridgeObjectRelease(v18);
  char v61 = v60;
  if ((v60 & 1) != 0)
  {
    uint64_t v69 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
    uint64_t v63 = PropertyListDecoder.init()();
    id v70 = [a1 data];
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v70);
    unint64_t v67 = v71;

    unint64_t v72 = sub_100092C2C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v111,  &type metadata for ExternalPurchaseTokenV1Response,  v65,  v67,  &type metadata for ExternalPurchaseTokenV1Response,  v72);
  }

  else
  {
    uint64_t v62 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    uint64_t v63 = JSONDecoder.init()();
    id v64 = [a1 data];
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v64);
    unint64_t v67 = v66;

    unint64_t v68 = sub_100092C2C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v111,  &type metadata for ExternalPurchaseTokenV1Response,  v65,  v67,  &type metadata for ExternalPurchaseTokenV1Response,  v68);
  }

  if (v2)
  {
    sub_10007F054(v65, v67);
    uint64_t v73 = v2;
    swift_release(v63);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v74 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v74, (uint64_t)v112);
    uint64_t v107 = 0LL;
    v108[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    v75._object = (void *)0x800000010029E420LL;
    v75._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v75);
    LOBYTE(v109) = v61 & 1;
    _print_unlocked<A, B>(_:_:)(&v109, &v107);
    v76._countAndFlagsBits = 0x736E6F7073657220LL;
    v76._object = (void *)0xEF206F746E692065LL;
    String.append(_:)(v76);
    v77._countAndFlagsBits = 0xD000000000000046LL;
    v77._object = (void *)0x800000010029E4C0LL;
    String.append(_:)(v77);
    v78._countAndFlagsBits = 8250LL;
    v78._object = (void *)0xE200000000000000LL;
    String.append(_:)(v78);
    *(void *)&__int128 v109 = v2;
    sub_10007B1FC(&qword_100329B90);
    _print_unlocked<A, B>(_:_:)(&v109, &v107);
    uint64_t v79 = v107;
    unint64_t v80 = v108[0];
    uint64_t v82 = *(void *)(v3 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    unint64_t v81 = *(void **)(v3 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v83 = swift_bridgeObjectRetain(v81);
    os_log_type_t v84 = static os_log_type_t.error.getter(v83);
    swift_bridgeObjectRetain_n(v81, 2LL);
    uint64_t v85 = swift_bridgeObjectRetain_n(v80, 2LL);
    os_log_type_t v86 = (os_log_s *)Logger.logObject.getter(v85);
    if (os_log_type_enabled(v86, v84))
    {
      uint64_t v87 = swift_slowAlloc(22LL, -1LL);
      uint64_t v105 = v2;
      uint64_t v88 = v87;
      uint64_t v89 = swift_slowAlloc(64LL, -1LL);
      uint64_t v104 = v79;
      uint64_t v90 = v89;
      *(void *)&__int128 v109 = v89;
      *(_DWORD *)uint64_t v88 = 136446466;
      uint64_t v107 = 91LL;
      v108[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v81);
      v91._countAndFlagsBits = v82;
      v91._object = v81;
      String.append(_:)(v91);
      v92._countAndFlagsBits = 8285LL;
      v92._object = (void *)0xE200000000000000LL;
      String.append(_:)(v92);
      swift_bridgeObjectRelease(v81);
      unint64_t v93 = v108[0];
      uint64_t v107 = sub_10007A488(v107, v108[0], (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v88 + 4);
      swift_bridgeObjectRelease_n(v81, 2LL);
      swift_bridgeObjectRelease(v93);
      *(_WORD *)(v88 + 12) = 2082;
      swift_bridgeObjectRetain(v80);
      uint64_t v107 = sub_10007A488(v104, v80, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v88 + 14);
      swift_bridgeObjectRelease_n(v80, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v86, v84, "%{public}s%{public}s", (uint8_t *)v88, 0x16u);
      swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      uint64_t v94 = v88;
      uint64_t v73 = v105;
      swift_slowDealloc(v94, -1LL, -1LL);
      swift_bridgeObjectRelease(v80);
      swift_bridgeObjectRelease(v81);
    }

    else
    {

      swift_bridgeObjectRelease_n(v80, 3LL);
      swift_bridgeObjectRelease_n(v81, 3LL);
    }

    sub_100092A98((uint64_t)v112, type metadata accessor for SKLogger);
    unint64_t v95 = sub_100092B3C();
    uint64_t v96 = swift_allocError(&unk_1002EED98, v95, 0LL, 0LL);
    *unint64_t v97 = 0LL;
    v97[1] = 0LL;
    uint64_t v97[2] = 1LL;
    swift_willThrow(v96, v97, v98, v99, v100, v101, v102);
    return swift_errorRelease(v73);
  }

  else
  {
    sub_10007F054(v65, v67);
    swift_release(v63);
    return v111;
  }

uint64_t sub_10008FF40@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  id v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v105 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)&v105 - v12;
  id v14 = [a1 responseHeaders];
  if (!v14)
  {
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    goto LABEL_10;
  }

  id v15 = v14;
  uint64_t v107 = v11;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  strcpy((char *)v108, "Content-Type");
  HIBYTE(v108[6]) = 0;
  v108[7] = -5120;
  AnyHashable.init<A>(_:)(v108, &type metadata for String, &protocol witness table for String);
  sub_10012A6B0((uint64_t)&v109, v16, &v111);
  swift_bridgeObjectRelease(v16);
  sub_100087388((uint64_t)&v109);
  if (!*((void *)&v112 + 1))
  {
LABEL_10:
    sub_10007B294((uint64_t)&v111);
    goto LABEL_11;
  }

  if (!swift_dynamicCast( &v109,  &v111,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
  {
LABEL_11:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v37 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v37, (uint64_t)v8);
    uint64_t v39 = *(void *)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v38 = *(void **)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v40 = swift_bridgeObjectRetain(v38);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    uint64_t v42 = swift_bridgeObjectRetain_n(v38, 2LL);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = v41;
    if (os_log_type_enabled(v43, v41))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v46 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v111 = v46;
      *(_DWORD *)uint64_t v45 = 136446466;
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v38);
      v47._countAndFlagsBits = v39;
      v47._object = v38;
      String.append(_:)(v47);
      v48._countAndFlagsBits = 8285LL;
      v48._object = (void *)0xE200000000000000LL;
      String.append(_:)(v48);
      swift_bridgeObjectRelease(v38);
      unint64_t v49 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v45 + 4);
      swift_bridgeObjectRelease_n(v38, 2LL);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v45 + 12) = 2082;
      uint64_t v109 = sub_10007A488(0xD000000000000045LL, 0x800000010029E3A0LL, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v45 + 14);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s%{public}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_bridgeObjectRelease(v38);
    }

    else
    {

      swift_bridgeObjectRelease_n(v38, 3LL);
    }

    uint64_t v50 = (uint64_t)v8;
    goto LABEL_17;
  }

  uint64_t v17 = v109;
  uint64_t v18 = (void *)v110[0];
  swift_bridgeObjectRetain(v110[0]);
  int v19 = sub_10011E60C();
  if (v19 == 2)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v20 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v20, (uint64_t)v13);
    uint64_t v109 = 0LL;
    v110[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(v110[0]);
    uint64_t v109 = 0xD000000000000023LL;
    v110[0] = 0x800000010029E3F0LL;
    v21._countAndFlagsBits = v17;
    v21._object = v18;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v18);
    uint64_t v23 = v109;
    unint64_t v22 = v110[0];
    uint64_t v25 = *(void *)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v24 = *(void **)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v26 = swift_bridgeObjectRetain(v24);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    swift_bridgeObjectRetain_n(v24, 2LL);
    uint64_t v28 = swift_bridgeObjectRetain_n(v22, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = v27;
    if (os_log_type_enabled(v29, v27))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v113 = v23;
      uint64_t v33 = v32;
      *(void *)&__int128 v111 = v32;
      *(_DWORD *)uint64_t v31 = 136446466;
      uint64_t v107 = (char *)(v31 + 4);
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v24);
      v34._countAndFlagsBits = v25;
      v34._object = v24;
      String.append(_:)(v34);
      v35._countAndFlagsBits = 8285LL;
      v35._object = (void *)0xE200000000000000LL;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v24);
      unint64_t v36 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v107);
      swift_bridgeObjectRelease_n(v24, 2LL);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2082;
      swift_bridgeObjectRetain(v22);
      uint64_t v109 = sub_10007A488(v113, v22, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 14);
      swift_bridgeObjectRelease_n(v22, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v24);
    }

    else
    {

      swift_bridgeObjectRelease_n(v22, 3LL);
      swift_bridgeObjectRelease_n(v24, 3LL);
    }

    uint64_t v50 = (uint64_t)v13;
LABEL_17:
    sub_100092A98(v50, type metadata accessor for SKLogger);
    unint64_t v51 = sub_100092B3C();
    uint64_t v52 = swift_allocError(&unk_1002EED98, v51, 0LL, 0LL);
    *id v53 = 0LL;
    v53[1] = 0LL;
    v53[2] = 1LL;
    return swift_willThrow(v52, v53, v54, v55, v56, v57, v58);
  }

  int v60 = v19;
  swift_bridgeObjectRelease(v18);
  LODWORD(v106) = v60;
  if ((v60 & 1) != 0)
  {
    uint64_t v69 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
    uint64_t v62 = PropertyListDecoder.init()();
    uint64_t v70 = sub_10007B1FC(&qword_10032C480);
    id v71 = [a1 data];
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v71);
    unint64_t v67 = v72;

    unint64_t v73 = sub_100092CA8();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a2, v70, v65, v67, v70, v73);
  }

  else
  {
    uint64_t v61 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
    uint64_t v62 = JSONDecoder.init()();
    uint64_t v63 = sub_10007B1FC(&qword_10032C480);
    id v64 = [a1 data];
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v64);
    unint64_t v67 = v66;

    unint64_t v68 = sub_100092CA8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(a2, v63, v65, v67, v63, v68);
  }

  if (v2)
  {
    sub_10007F054(v65, v67);
    uint64_t v74 = v2;
    char v75 = v106 & 1;
    swift_release(v62);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v76 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v76, (uint64_t)v107);
    uint64_t v109 = 0LL;
    v110[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    v77._object = (void *)0x800000010029E420LL;
    v77._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v77);
    LOBYTE(v111) = v75;
    _print_unlocked<A, B>(_:_:)(&v111, &v109);
    v78._countAndFlagsBits = 0x736E6F7073657220LL;
    v78._object = (void *)0xEF206F746E692065LL;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 0xD000000000000029LL;
    v79._object = (void *)0x800000010029E530LL;
    String.append(_:)(v79);
    v80._countAndFlagsBits = 8250LL;
    v80._object = (void *)0xE200000000000000LL;
    String.append(_:)(v80);
    *(void *)&__int128 v111 = v2;
    sub_10007B1FC(&qword_100329B90);
    _print_unlocked<A, B>(_:_:)(&v111, &v109);
    uint64_t v81 = v109;
    unint64_t v82 = v110[0];
    uint64_t v84 = *(void *)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v83 = *(void **)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v85 = swift_bridgeObjectRetain(v83);
    os_log_type_t v86 = static os_log_type_t.error.getter(v85);
    swift_bridgeObjectRetain_n(v83, 2LL);
    uint64_t v87 = swift_bridgeObjectRetain_n(v82, 2LL);
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
    if (os_log_type_enabled(v88, v86))
    {
      uint64_t v89 = swift_slowAlloc(22LL, -1LL);
      uint64_t v113 = v2;
      uint64_t v90 = v89;
      uint64_t v91 = swift_slowAlloc(64LL, -1LL);
      uint64_t v106 = v81;
      uint64_t v92 = v91;
      *(void *)&__int128 v111 = v91;
      *(_DWORD *)uint64_t v90 = 136446466;
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v83);
      v93._countAndFlagsBits = v84;
      v93._object = v83;
      String.append(_:)(v93);
      v94._countAndFlagsBits = 8285LL;
      v94._object = (void *)0xE200000000000000LL;
      String.append(_:)(v94);
      swift_bridgeObjectRelease(v83);
      unint64_t v95 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v90 + 4);
      swift_bridgeObjectRelease_n(v83, 2LL);
      swift_bridgeObjectRelease(v95);
      *(_WORD *)(v90 + 12) = 2082;
      swift_bridgeObjectRetain(v82);
      uint64_t v109 = sub_10007A488(v106, v82, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v90 + 14);
      swift_bridgeObjectRelease_n(v82, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v88, v86, "%{public}s%{public}s", (uint8_t *)v90, 0x16u);
      swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1LL, -1LL);
      uint64_t v96 = v90;
      uint64_t v74 = v113;
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v83);
    }

    else
    {

      swift_bridgeObjectRelease_n(v82, 3LL);
      swift_bridgeObjectRelease_n(v83, 3LL);
    }

    sub_100092A98((uint64_t)v107, type metadata accessor for SKLogger);
    unint64_t v97 = sub_100092B3C();
    uint64_t v98 = swift_allocError(&unk_1002EED98, v97, 0LL, 0LL);
    *uint64_t v99 = 0LL;
    v99[1] = 0LL;
    v99[2] = 1LL;
    swift_willThrow(v98, v99, v100, v101, v102, v103, v104);
    return swift_errorRelease(v74);
  }

  else
  {
    sub_10007F054(v65, v67);
    return swift_release(v62);
  }

uint64_t sub_100090A98@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  id v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v105 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)&v105 - v12;
  id v14 = [a1 responseHeaders];
  if (!v14)
  {
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    goto LABEL_10;
  }

  id v15 = v14;
  uint64_t v107 = v11;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  strcpy((char *)v108, "Content-Type");
  HIBYTE(v108[6]) = 0;
  v108[7] = -5120;
  AnyHashable.init<A>(_:)(v108, &type metadata for String, &protocol witness table for String);
  sub_10012A6B0((uint64_t)&v109, v16, &v111);
  swift_bridgeObjectRelease(v16);
  sub_100087388((uint64_t)&v109);
  if (!*((void *)&v112 + 1))
  {
LABEL_10:
    sub_10007B294((uint64_t)&v111);
    goto LABEL_11;
  }

  if (!swift_dynamicCast( &v109,  &v111,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
  {
LABEL_11:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v37 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v37, (uint64_t)v8);
    uint64_t v39 = *(void *)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v38 = *(void **)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v40 = swift_bridgeObjectRetain(v38);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    uint64_t v42 = swift_bridgeObjectRetain_n(v38, 2LL);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = v41;
    if (os_log_type_enabled(v43, v41))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v46 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v111 = v46;
      *(_DWORD *)uint64_t v45 = 136446466;
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v38);
      v47._countAndFlagsBits = v39;
      v47._object = v38;
      String.append(_:)(v47);
      v48._countAndFlagsBits = 8285LL;
      v48._object = (void *)0xE200000000000000LL;
      String.append(_:)(v48);
      swift_bridgeObjectRelease(v38);
      unint64_t v49 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v45 + 4);
      swift_bridgeObjectRelease_n(v38, 2LL);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v45 + 12) = 2082;
      uint64_t v109 = sub_10007A488(0xD000000000000045LL, 0x800000010029E3A0LL, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v45 + 14);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s%{public}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_bridgeObjectRelease(v38);
    }

    else
    {

      swift_bridgeObjectRelease_n(v38, 3LL);
    }

    uint64_t v50 = (uint64_t)v8;
    goto LABEL_17;
  }

  uint64_t v17 = v109;
  uint64_t v18 = (void *)v110[0];
  swift_bridgeObjectRetain(v110[0]);
  int v19 = sub_10011E60C();
  if (v19 == 2)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v20 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v20, (uint64_t)v13);
    uint64_t v109 = 0LL;
    v110[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(v110[0]);
    uint64_t v109 = 0xD000000000000023LL;
    v110[0] = 0x800000010029E3F0LL;
    v21._countAndFlagsBits = v17;
    v21._object = v18;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v18);
    uint64_t v23 = v109;
    unint64_t v22 = v110[0];
    uint64_t v25 = *(void *)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v24 = *(void **)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v26 = swift_bridgeObjectRetain(v24);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    swift_bridgeObjectRetain_n(v24, 2LL);
    uint64_t v28 = swift_bridgeObjectRetain_n(v22, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = v27;
    if (os_log_type_enabled(v29, v27))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v113 = v23;
      uint64_t v33 = v32;
      *(void *)&__int128 v111 = v32;
      *(_DWORD *)uint64_t v31 = 136446466;
      uint64_t v107 = (char *)(v31 + 4);
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v24);
      v34._countAndFlagsBits = v25;
      v34._object = v24;
      String.append(_:)(v34);
      v35._countAndFlagsBits = 8285LL;
      v35._object = (void *)0xE200000000000000LL;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v24);
      unint64_t v36 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v107);
      swift_bridgeObjectRelease_n(v24, 2LL);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2082;
      swift_bridgeObjectRetain(v22);
      uint64_t v109 = sub_10007A488(v113, v22, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 14);
      swift_bridgeObjectRelease_n(v22, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v24);
    }

    else
    {

      swift_bridgeObjectRelease_n(v22, 3LL);
      swift_bridgeObjectRelease_n(v24, 3LL);
    }

    uint64_t v50 = (uint64_t)v13;
LABEL_17:
    sub_100092A98(v50, type metadata accessor for SKLogger);
    unint64_t v51 = sub_100092B3C();
    uint64_t v52 = swift_allocError(&unk_1002EED98, v51, 0LL, 0LL);
    *id v53 = 0LL;
    v53[1] = 0LL;
    v53[2] = 1LL;
    return swift_willThrow(v52, v53, v54, v55, v56, v57, v58);
  }

  int v60 = v19;
  swift_bridgeObjectRelease(v18);
  LODWORD(v106) = v60;
  if ((v60 & 1) != 0)
  {
    uint64_t v69 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
    uint64_t v62 = PropertyListDecoder.init()();
    uint64_t v70 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
    id v71 = [a1 data];
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v71);
    unint64_t v67 = v72;

    unint64_t v73 = sub_100092C68();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a2, v70, v65, v67, v70, v73);
  }

  else
  {
    uint64_t v61 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
    uint64_t v62 = JSONDecoder.init()();
    uint64_t v63 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
    id v64 = [a1 data];
    uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v64);
    unint64_t v67 = v66;

    unint64_t v68 = sub_100092C68();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(a2, v63, v65, v67, v63, v68);
  }

  if (v2)
  {
    sub_10007F054(v65, v67);
    uint64_t v74 = v2;
    char v75 = v106 & 1;
    swift_release(v62);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v76 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v76, (uint64_t)v107);
    uint64_t v109 = 0LL;
    v110[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    v77._object = (void *)0x800000010029E420LL;
    v77._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v77);
    LOBYTE(v111) = v75;
    _print_unlocked<A, B>(_:_:)(&v111, &v109);
    v78._countAndFlagsBits = 0x736E6F7073657220LL;
    v78._object = (void *)0xEF206F746E692065LL;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 0xD00000000000001FLL;
    v79._object = (void *)0x800000010029E510LL;
    String.append(_:)(v79);
    v80._countAndFlagsBits = 8250LL;
    v80._object = (void *)0xE200000000000000LL;
    String.append(_:)(v80);
    *(void *)&__int128 v111 = v2;
    sub_10007B1FC(&qword_100329B90);
    _print_unlocked<A, B>(_:_:)(&v111, &v109);
    uint64_t v81 = v109;
    unint64_t v82 = v110[0];
    uint64_t v84 = *(void *)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v83 = *(void **)(v113 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v85 = swift_bridgeObjectRetain(v83);
    os_log_type_t v86 = static os_log_type_t.error.getter(v85);
    swift_bridgeObjectRetain_n(v83, 2LL);
    uint64_t v87 = swift_bridgeObjectRetain_n(v82, 2LL);
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
    if (os_log_type_enabled(v88, v86))
    {
      uint64_t v89 = swift_slowAlloc(22LL, -1LL);
      uint64_t v113 = v2;
      uint64_t v90 = v89;
      uint64_t v91 = swift_slowAlloc(64LL, -1LL);
      uint64_t v106 = v81;
      uint64_t v92 = v91;
      *(void *)&__int128 v111 = v91;
      *(_DWORD *)uint64_t v90 = 136446466;
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v83);
      v93._countAndFlagsBits = v84;
      v93._object = v83;
      String.append(_:)(v93);
      v94._countAndFlagsBits = 8285LL;
      v94._object = (void *)0xE200000000000000LL;
      String.append(_:)(v94);
      swift_bridgeObjectRelease(v83);
      unint64_t v95 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v90 + 4);
      swift_bridgeObjectRelease_n(v83, 2LL);
      swift_bridgeObjectRelease(v95);
      *(_WORD *)(v90 + 12) = 2082;
      swift_bridgeObjectRetain(v82);
      uint64_t v109 = sub_10007A488(v106, v82, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v90 + 14);
      swift_bridgeObjectRelease_n(v82, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v88, v86, "%{public}s%{public}s", (uint8_t *)v90, 0x16u);
      swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1LL, -1LL);
      uint64_t v96 = v90;
      uint64_t v74 = v113;
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v83);
    }

    else
    {

      swift_bridgeObjectRelease_n(v82, 3LL);
      swift_bridgeObjectRelease_n(v83, 3LL);
    }

    sub_100092A98((uint64_t)v107, type metadata accessor for SKLogger);
    unint64_t v97 = sub_100092B3C();
    uint64_t v98 = swift_allocError(&unk_1002EED98, v97, 0LL, 0LL);
    *uint64_t v99 = 0LL;
    v99[1] = 0LL;
    v99[2] = 1LL;
    swift_willThrow(v98, v99, v100, v101, v102, v103, v104);
    return swift_errorRelease(v74);
  }

  else
  {
    sub_10007F054(v65, v67);
    return swift_release(v62);
  }

uint64_t sub_1000915E8(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v104 = a4;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v101 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v101 - v16;
  id v18 = sub_100093DE4(v15, "responseHeaders");
  if (!v18)
  {
    __int128 v109 = 0u;
    __int128 v110 = 0u;
    goto LABEL_10;
  }

  int v19 = v18;
  uint64_t v102 = a5;
  uint64_t v103 = v14;
  uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v18,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  strcpy((char *)v106, "Content-Type");
  HIBYTE(v106[6]) = 0;
  v106[7] = -5120;
  AnyHashable.init<A>(_:)(v106, &type metadata for String, &protocol witness table for String);
  sub_10012A6B0((uint64_t)&v107, v20, &v109);
  swift_bridgeObjectRelease(v20);
  sub_100087388((uint64_t)&v107);
  if (!*((void *)&v110 + 1))
  {
LABEL_10:
    uint64_t v21 = sub_10007B294((uint64_t)&v109);
    goto LABEL_11;
  }

  uint64_t v21 = swift_dynamicCast(&v107, &v109, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if (!(_DWORD)v21)
  {
LABEL_11:
    uint64_t v39 = v111;
    if (qword_100328B40 != -1) {
      uint64_t v21 = swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v40 = sub_100093D50(v21, (uint64_t)qword_10033E1A8);
    sub_10007961C(v40, (uint64_t)v11);
    uint64_t v42 = *(void *)(v39 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    os_log_type_t v41 = *(void **)(v39 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v43 = sub_100085FEC();
    os_log_type_t v44 = static os_log_type_t.error.getter(v43);
    uint64_t v45 = sub_100085EE8((uint64_t)v41);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = v44;
    if (os_log_type_enabled(v46, v44))
    {
      uint64_t v48 = sub_10007B9FC(22LL);
      uint64_t v49 = sub_10007B9FC(64LL);
      *(void *)&__int128 v109 = v49;
      *(_DWORD *)uint64_t v48 = 136446466;
      uint64_t v107 = 91LL;
      v108[0] = 0xE100000000000000LL;
      sub_100085FEC();
      v50._countAndFlagsBits = v42;
      v50._object = v41;
      String.append(_:)(v50);
      sub_100085F14();
      sub_100085EF0();
      uint64_t v107 = sub_100093A50();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v48 + 4);
      sub_10007D974((uint64_t)v41);
      sub_10007B980();
      *(_WORD *)(v48 + 12) = 2082;
      sub_1000862B8();
      uint64_t v107 = sub_10007A488(v51, v52, (uint64_t *)&v109);
      sub_100086194((uint64_t)&v107, (uint64_t)v108);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%{public}s%{public}s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
      sub_10007B974(v49);
      sub_10007B974(v48);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64((uint64_t)v41);
    }

    uint64_t v53 = (uint64_t)v11;
    goto LABEL_17;
  }

  uint64_t v22 = v107;
  uint64_t v23 = (void *)v108[0];
  swift_bridgeObjectRetain(v108[0]);
  uint64_t v24 = sub_10011E60C();
  if (v24 == 2)
  {
    if (qword_100328B40 != -1) {
      uint64_t v24 = swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v25 = sub_100093D50(v24, (uint64_t)qword_10033E1A8);
    sub_10007961C(v25, (uint64_t)v17);
    uint64_t v107 = 0LL;
    v108[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(v108[0]);
    uint64_t v107 = 0xD000000000000023LL;
    v108[0] = 0x800000010029E3F0LL;
    v26._countAndFlagsBits = v22;
    v26._object = v23;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v23);
    uint64_t v28 = v107;
    unint64_t v27 = v108[0];
    uint64_t v30 = *(void *)(v111 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v29 = *(void **)(v111 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v31 = sub_100085FEC();
    static os_log_type_t.error.getter(v31);
    sub_100085EE8((uint64_t)v29);
    uint64_t v32 = sub_100085EE8(v27);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    if (sub_100093D38(v33))
    {
      Swift::String v34 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v35 = sub_10007B9FC(64LL);
      uint64_t v111 = v28;
      uint64_t v36 = v35;
      *(void *)&__int128 v109 = v35;
      *Swift::String v34 = 136446466;
      uint64_t v105 = v34 + 1;
      uint64_t v107 = 91LL;
      v108[0] = 0xE100000000000000LL;
      sub_100085FEC();
      v37._countAndFlagsBits = v30;
      v37._object = v29;
      String.append(_:)(v37);
      sub_100085F14();
      sub_100085EF0();
      uint64_t v107 = sub_100093A50();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v105);
      sub_10007D974((uint64_t)v29);
      sub_10007B980();
      sub_100093CA4();
      swift_bridgeObjectRetain(v27);
      uint64_t v107 = sub_10007A488(v111, v27, (uint64_t *)&v109);
      sub_100086194((uint64_t)&v107, (uint64_t)v108);
      sub_100085E64(v27);
      sub_100093C84((void *)&_mh_execute_header, v33, v38, "%{public}s%{public}s");
      sub_100093C74((uint64_t)&type metadata for Any);
      sub_10007B974(v36);
      sub_10007B974((uint64_t)v34);
      swift_bridgeObjectRelease(v27);
      sub_100085EF0();
    }

    else
    {

      sub_100085E64(v27);
      sub_100085E64((uint64_t)v29);
    }

    uint64_t v53 = (uint64_t)v17;
LABEL_17:
    sub_100092A98(v53, type metadata accessor for SKLogger);
    unint64_t v54 = sub_100092B3C();
    uint64_t v55 = sub_100093030((uint64_t)&unk_1002EED98, v54);
    return sub_100093B50(v55, v56);
  }

  char v58 = v24;
  swift_bridgeObjectRelease(v23);
  if ((v58 & 1) != 0)
  {
    uint64_t v68 = type metadata accessor for PropertyListDecoder(0LL);
    sub_100093D7C(v68);
    uint64_t v60 = PropertyListDecoder.init()();
    id v69 = sub_100093DE4(v60, "data");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
    sub_100093E04();
    a2();
    uint64_t v70 = sub_100093BE0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v75, v70, v71, v72, v73, v74);
  }

  else
  {
    uint64_t v59 = type metadata accessor for JSONDecoder(0LL);
    sub_100093D7C(v59);
    uint64_t v60 = JSONDecoder.init()();
    id v61 = sub_100093DE4(v60, "data");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
    sub_100093E04();
    a2();
    uint64_t v62 = sub_100093BE0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v67, v62, v63, v64, v65, v66);
  }

  uint64_t v76 = v102;
  uint64_t v77 = (uint64_t)v103;
  if (v5)
  {
    char v78 = v58;
    sub_100093DAC();
    uint64_t v79 = v5;
    uint64_t v80 = swift_release(v60);
    if (qword_100328B40 != -1) {
      uint64_t v80 = swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v81 = sub_100093D50(v80, (uint64_t)qword_10033E1A8);
    sub_10007961C(v81, v77);
    uint64_t v107 = 0LL;
    v108[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    sub_1000862B8();
    v82._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v82);
    LOBYTE(v109) = v78 & 1;
    sub_100093BFC();
    v83._countAndFlagsBits = 0x736E6F7073657220LL;
    v83._object = (void *)0xEF206F746E692065LL;
    String.append(_:)(v83);
    v84._countAndFlagsBits = v104;
    v84._object = v76;
    String.append(_:)(v84);
    v85._countAndFlagsBits = 8250LL;
    v85._object = (void *)0xE200000000000000LL;
    String.append(_:)(v85);
    *(void *)&__int128 v109 = v5;
    sub_10007B1FC(&qword_100329B90);
    sub_100093BFC();
    unint64_t v86 = v108[0];
    uint64_t v105 = (_DWORD *)v107;
    uint64_t v88 = *(void *)(v111 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v87 = *(void **)(v111 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v89 = swift_bridgeObjectRetain(v87);
    static os_log_type_t.error.getter(v89);
    sub_100085EE8((uint64_t)v87);
    uint64_t v90 = sub_100085EE8(v86);
    uint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
    if (sub_100093D38(v91))
    {
      uint64_t v92 = (_DWORD *)sub_10007B9FC(22LL);
      uint64_t v93 = sub_10007B9FC(64LL);
      uint64_t v111 = v5;
      uint64_t v94 = v93;
      *(void *)&__int128 v109 = v93;
      _DWORD *v92 = 136446466;
      uint64_t v107 = 91LL;
      v108[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v87);
      v95._countAndFlagsBits = v88;
      v95._object = v87;
      String.append(_:)(v95);
      sub_100085F14();
      swift_bridgeObjectRelease(v87);
      uint64_t v107 = sub_100093A50();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v92 + 1);
      sub_10007D974((uint64_t)v87);
      sub_10007B980();
      sub_100093CA4();
      sub_100085FEC();
      uint64_t v107 = sub_10007A488((uint64_t)v105, v86, (uint64_t *)&v109);
      sub_100086194((uint64_t)&v107, (uint64_t)v108);
      sub_100085E64(v86);
      sub_100093C84((void *)&_mh_execute_header, v91, v96, "%{public}s%{public}s");
      sub_100093C74((uint64_t)&type metadata for Any);
      uint64_t v97 = v94;
      uint64_t v79 = v111;
      uint64_t v77 = (uint64_t)v103;
      sub_10007B974(v97);
      sub_10007B974((uint64_t)v92);
      sub_100085EF0();
      swift_bridgeObjectRelease(v87);
    }

    else
    {

      sub_100085E64(v86);
      sub_100085E64((uint64_t)v87);
    }

    sub_100092A98(v77, type metadata accessor for SKLogger);
    unint64_t v98 = sub_100092B3C();
    uint64_t v99 = sub_100093030((uint64_t)&unk_1002EED98, v98);
    sub_100093B50(v99, v100);
    return swift_errorRelease(v79);
  }

  else
  {
    sub_100093DAC();
    return swift_release(v60);
  }

uint64_t sub_100091EF4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v105 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v105 - v12;
  id v14 = [a1 responseHeaders];
  if (!v14)
  {
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    goto LABEL_10;
  }

  uint64_t v15 = v14;
  uint64_t v107 = v11;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  strcpy((char *)v108, "Content-Type");
  HIBYTE(v108[6]) = 0;
  v108[7] = -5120;
  AnyHashable.init<A>(_:)(v108, &type metadata for String, &protocol witness table for String);
  sub_10012A6B0((uint64_t)&v109, v16, &v111);
  swift_bridgeObjectRelease(v16);
  sub_100087388((uint64_t)&v109);
  if (!*((void *)&v112 + 1))
  {
LABEL_10:
    sub_10007B294((uint64_t)&v111);
    goto LABEL_11;
  }

  if (!swift_dynamicCast( &v109,  &v111,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
  {
LABEL_11:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v37 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v37, (uint64_t)v8);
    uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v38 = *(void **)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v40 = swift_bridgeObjectRetain(v38);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    uint64_t v42 = swift_bridgeObjectRetain_n(v38, 2LL);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = v41;
    if (os_log_type_enabled(v43, v41))
    {
      uint64_t v45 = swift_slowAlloc(22LL, -1LL);
      uint64_t v46 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v111 = v46;
      *(_DWORD *)uint64_t v45 = 136446466;
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v38);
      v47._countAndFlagsBits = v39;
      v47._object = v38;
      String.append(_:)(v47);
      v48._countAndFlagsBits = 8285LL;
      v48._object = (void *)0xE200000000000000LL;
      String.append(_:)(v48);
      swift_bridgeObjectRelease(v38);
      unint64_t v49 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v45 + 4);
      swift_bridgeObjectRelease_n(v38, 2LL);
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v45 + 12) = 2082;
      uint64_t v109 = sub_10007A488(0xD000000000000045LL, 0x800000010029E3A0LL, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v45 + 14);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s%{public}s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_bridgeObjectRelease(v38);
    }

    else
    {

      swift_bridgeObjectRelease_n(v38, 3LL);
    }

    uint64_t v50 = (uint64_t)v8;
    goto LABEL_17;
  }

  uint64_t v17 = v109;
  id v18 = (void *)v110[0];
  swift_bridgeObjectRetain(v110[0]);
  char v19 = sub_10011E60C();
  if (v19 == 2)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v20 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v20, (uint64_t)v13);
    uint64_t v109 = 0LL;
    v110[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease(v110[0]);
    uint64_t v109 = 0xD000000000000023LL;
    v110[0] = 0x800000010029E3F0LL;
    v21._countAndFlagsBits = v17;
    v21._object = v18;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v18);
    uint64_t v23 = v109;
    unint64_t v22 = v110[0];
    uint64_t v25 = *(void *)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    uint64_t v24 = *(void **)(v1 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v26 = swift_bridgeObjectRetain(v24);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    swift_bridgeObjectRetain_n(v24, 2LL);
    uint64_t v28 = swift_bridgeObjectRetain_n(v22, 2LL);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = v27;
    if (os_log_type_enabled(v29, v27))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t v107 = (char *)v23;
      uint64_t v33 = v32;
      *(void *)&__int128 v111 = v32;
      *(_DWORD *)uint64_t v31 = 136446466;
      uint64_t v106 = v31 + 4;
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v24);
      v34._countAndFlagsBits = v25;
      v34._object = v24;
      String.append(_:)(v34);
      v35._countAndFlagsBits = 8285LL;
      v35._object = (void *)0xE200000000000000LL;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v24);
      unint64_t v36 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v106);
      swift_bridgeObjectRelease_n(v24, 2LL);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2082;
      swift_bridgeObjectRetain(v22);
      uint64_t v109 = sub_10007A488((uint64_t)v107, v22, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v31 + 14);
      swift_bridgeObjectRelease_n(v22, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s%{public}s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(v24);
    }

    else
    {

      swift_bridgeObjectRelease_n(v22, 3LL);
      swift_bridgeObjectRelease_n(v24, 3LL);
    }

    uint64_t v50 = (uint64_t)v13;
LABEL_17:
    sub_100092A98(v50, type metadata accessor for SKLogger);
    unint64_t v51 = sub_100092B3C();
    uint64_t v52 = swift_allocError(&unk_1002EED98, v51, 0LL, 0LL);
    *uint64_t v53 = 0LL;
    v53[1] = 0LL;
    v53[2] = 1LL;
    swift_willThrow(v52, v53, v54, v55, v56, v57, v58);
    return v59 & 1;
  }

  char v61 = v19;
  swift_bridgeObjectRelease(v18);
  char v62 = v61;
  if ((v61 & 1) != 0)
  {
    uint64_t v70 = type metadata accessor for PropertyListDecoder(0LL);
    uint64_t v71 = swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
    uint64_t v64 = PropertyListDecoder.init()(v71);
    id v72 = [a1 data];
    uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v72);
    unint64_t v68 = v73;

    unint64_t v74 = sub_100092BB4();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v113,  &type metadata for BindPaymentAccountEligibilityResponse,  v66,  v68,  &type metadata for BindPaymentAccountEligibilityResponse,  v74);
  }

  else
  {
    uint64_t v63 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
    uint64_t v64 = JSONDecoder.init()();
    id v65 = [a1 data];
    uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
    unint64_t v68 = v67;

    unint64_t v69 = sub_100092BB4();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v113,  &type metadata for BindPaymentAccountEligibilityResponse,  v66,  v68,  &type metadata for BindPaymentAccountEligibilityResponse,  v69);
  }

  if (v2)
  {
    sub_10007F054(v66, v68);
    uint64_t v75 = v2;
    swift_release(v64);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v76 = sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_10007961C(v76, (uint64_t)v107);
    uint64_t v109 = 0LL;
    v110[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    v77._object = (void *)0x800000010029E420LL;
    v77._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v77);
    LOBYTE(v111) = v62 & 1;
    _print_unlocked<A, B>(_:_:)(&v111, &v109);
    v78._countAndFlagsBits = 0x736E6F7073657220LL;
    v78._object = (void *)0xEF206F746E692065LL;
    String.append(_:)(v78);
    v79._countAndFlagsBits = 0xD000000000000025LL;
    v79._object = (void *)0x800000010029E440LL;
    String.append(_:)(v79);
    v80._countAndFlagsBits = 8250LL;
    v80._object = (void *)0xE200000000000000LL;
    String.append(_:)(v80);
    *(void *)&__int128 v111 = v2;
    sub_10007B1FC(&qword_100329B90);
    _print_unlocked<A, B>(_:_:)(&v111, &v109);
    uint64_t v81 = v109;
    unint64_t v82 = v110[0];
    uint64_t v84 = *(void *)(v3 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    Swift::String v83 = *(void **)(v3 + OBJC_IVAR____TtC9storekitd7Request_logKey + 8);
    uint64_t v85 = swift_bridgeObjectRetain(v83);
    os_log_type_t v86 = static os_log_type_t.error.getter(v85);
    swift_bridgeObjectRetain_n(v83, 2LL);
    uint64_t v87 = swift_bridgeObjectRetain_n(v82, 2LL);
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
    if (os_log_type_enabled(v88, v86))
    {
      uint64_t v89 = swift_slowAlloc(22LL, -1LL);
      uint64_t v106 = v2;
      uint64_t v90 = v89;
      uint64_t v91 = swift_slowAlloc(64LL, -1LL);
      uint64_t v105 = v81;
      uint64_t v92 = v91;
      *(void *)&__int128 v111 = v91;
      *(_DWORD *)uint64_t v90 = 136446466;
      uint64_t v109 = 91LL;
      v110[0] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v83);
      v93._countAndFlagsBits = v84;
      v93._object = v83;
      String.append(_:)(v93);
      v94._countAndFlagsBits = 8285LL;
      v94._object = (void *)0xE200000000000000LL;
      String.append(_:)(v94);
      swift_bridgeObjectRelease(v83);
      unint64_t v95 = v110[0];
      uint64_t v109 = sub_10007A488(v109, v110[0], (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v90 + 4);
      swift_bridgeObjectRelease_n(v83, 2LL);
      swift_bridgeObjectRelease(v95);
      *(_WORD *)(v90 + 12) = 2082;
      swift_bridgeObjectRetain(v82);
      uint64_t v109 = sub_10007A488(v105, v82, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v90 + 14);
      swift_bridgeObjectRelease_n(v82, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v88, v86, "%{public}s%{public}s", (uint8_t *)v90, 0x16u);
      swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1LL, -1LL);
      uint64_t v96 = v90;
      uint64_t v75 = v106;
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v83);
    }

    else
    {

      swift_bridgeObjectRelease_n(v82, 3LL);
      swift_bridgeObjectRelease_n(v83, 3LL);
    }

    sub_100092A98((uint64_t)v107, type metadata accessor for SKLogger);
    unint64_t v97 = sub_100092B3C();
    uint64_t v98 = swift_allocError(&unk_1002EED98, v97, 0LL, 0LL);
    *uint64_t v99 = 0LL;
    v99[1] = 0LL;
    v99[2] = 1LL;
    swift_willThrow(v98, v99, v100, v101, v102, v103, v104);
    swift_errorRelease(v75);
  }

  else
  {
    sub_10007F054(v66, v68);
    swift_release(v64);
    char v59 = v113;
  }

  return v59 & 1;
}

uint64_t sub_100092A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032A018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100092A70(void *a1)
{
  return a1;
}

uint64_t sub_100092A98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  sub_10008614C(v3);
  return a1;
}

unint64_t sub_100092AC4()
{
  unint64_t result = qword_10032A030;
  if (!qword_10032A030)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027CC60, &unk_1002EEE28);
    atomic_store(result, (unint64_t *)&qword_10032A030);
  }

  return result;
}

unint64_t sub_100092B00()
{
  unint64_t result = qword_10032A038;
  if (!qword_10032A038)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSURLSession);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10032A038);
  }

  return result;
}

unint64_t sub_100092B3C()
{
  unint64_t result = qword_10032A040;
  if (!qword_10032A040)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027CC20, &unk_1002EED98);
    atomic_store(result, (unint64_t *)&qword_10032A040);
  }

  return result;
}

unint64_t sub_100092B78()
{
  unint64_t result = qword_10032A048;
  if (!qword_10032A048)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027AA6C, &type metadata for BindPaymentAccountResponse);
    atomic_store(result, (unint64_t *)&qword_10032A048);
  }

  return result;
}

unint64_t sub_100092BB4()
{
  unint64_t result = qword_10032A058;
  if (!qword_10032A058)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B748, &type metadata for BindPaymentAccountEligibilityResponse);
    atomic_store(result, (unint64_t *)&qword_10032A058);
  }

  return result;
}

unint64_t sub_100092BF0()
{
  unint64_t result = qword_10032A068;
  if (!qword_10032A068)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B214, &type metadata for ExternalPurchaseTokenV1UpdateResponse);
    atomic_store(result, (unint64_t *)&qword_10032A068);
  }

  return result;
}

unint64_t sub_100092C2C()
{
  unint64_t result = qword_10032A078;
  if (!qword_10032A078)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B1DC, &type metadata for ExternalPurchaseTokenV1Response);
    atomic_store(result, (unint64_t *)&qword_10032A078);
  }

  return result;
}

unint64_t sub_100092C68()
{
  unint64_t result = qword_10032A088;
  if (!qword_10032A088)
  {
    uint64_t v1 = type metadata accessor for ExternalPurchaseTokenV2Response(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10027B264, v1);
    atomic_store(result, (unint64_t *)&qword_10032A088);
  }

  return result;
}

unint64_t sub_100092CA8()
{
  unint64_t result = qword_10032A098;
  if (!qword_10032A098)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032C480);
    sub_100092C68();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10032A098);
  }

  return result;
}

ValueMetadata *type metadata accessor for BindPaymentAccountResponse()
{
  return &type metadata for BindPaymentAccountResponse;
}

unint64_t sub_100092D1C()
{
  unint64_t result = qword_10032A0A8;
  if (!qword_10032A0A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027AAF0, &type metadata for BindPaymentAccountResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032A0A8);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for BindPaymentAccountResponse.CodingKeys(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for BindPaymentAccountResponse.CodingKeys(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for BindPaymentAccountResponse.CodingKeys(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for BindPaymentAccountResponse.CodingKeys(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for BindPaymentAccountResponse.CodingKeys(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindPaymentAccountResponse.CodingKeys(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BindPaymentAccountResponse.CodingKeys(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BindPaymentAccountResponse.CodingKeys()
{
  return &type metadata for BindPaymentAccountResponse.CodingKeys;
}

unint64_t sub_100092E98()
{
  unint64_t result = qword_10032A0B8;
  if (!qword_10032A0B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027AAA0, &type metadata for BindPaymentAccountResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032A0B8);
  }

  return result;
}

unint64_t sub_100092ED8()
{
  unint64_t result = qword_10032A0C0;
  if (!qword_10032A0C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027AAC8, &type metadata for BindPaymentAccountResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032A0C0);
  }

  return result;
}

uint64_t sub_100092F20()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100092F2C(float a1)
{
  float *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_100092F4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  return sub_10007A488(a17, a18, &a16);
}

id sub_100092F5C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100092F68(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100092F84()
{
}

id sub_100092F98(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v4, v3, v5);
}

uint64_t sub_100092FAC()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100092FC4()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

void sub_100092FDC()
{
}

uint64_t sub_100093010()
{
  return swift_task_alloc(v0);
}

uint64_t sub_100093018( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *uint64_t v12 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v12, v13, a12);
}

uint64_t sub_100093030(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_10009303C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1 + 8));
}

id sub_10009304C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v4, v2);
}

uint64_t sub_10009305C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

void sub_10009306C()
{
  *(void *)(v0 + 344) = v1;
}

void sub_1000930A0()
{
}

uint64_t sub_1000930CC(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_1000930DC()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000930E4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000930EC()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100093108(uint64_t a1)
{
  return sub_10011E808(a1);
}

uint64_t sub_100093124()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_10009312C(uint64_t a1)
{
  *(void *)(v1 + 36_Block_object_dispose(va, 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1 + 376, v2);
}

unint64_t sub_100093144()
{
  *(_WORD *)(v0 + 12) = 2082;
  return 0xD000000000000020LL;
}

uint64_t sub_100093160(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100093184(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10009319C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 608);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 616) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000931C0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000931C8()
{
  return swift_task_dealloc(v0);
}

id sub_1000931D0()
{
  return objc_allocWithZone(&OBJC_CLASS___AMSKeychainOptions);
}

uint64_t sub_1000931DC()
{
  return swift_task_dealloc(v0);
}

id sub_1000931E4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

NSString sub_1000931F0()
{
  return String._bridgeToObjectiveC()();
}

id sub_1000931FC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100093208()
{
  return objc_opt_self(*(void *)(v0 + 2248));
}

uint64_t sub_100093214()
{
  return swift_bridgeObjectRelease(v0);
}

id sub_100093220(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id sub_10009322C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 3);
}

id sub_100093238(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id sub_100093244()
{
  return sub_1000DF468();
}

uint64_t sub_100093250( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10007A488(a6, v10, (uint64_t *)va);
}

void sub_100093260( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
}

uint64_t sub_100093270@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

uint64_t sub_100093280()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_100093288()
{
  return swift_task_dealloc(v0);
}

id sub_100093290()
{
  return *(id *)(v0 + 320);
}

  ;
}

uint64_t sub_1000932CC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000932D4()
{
  return swift_task_dealloc(v0);
}

void sub_1000932DC(uint64_t a1)
{
  *(void *)(v1 + 56_Block_object_dispose(va, 8) = a1;
  sub_1000DEA24();
}

uint64_t sub_1000932EC(float a1)
{
  float *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10009330C(uint64_t a1)
{
  *(void *)(v1 + 552) = a1;
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_10009331C(uint64_t a1)
{
  *(void *)(v1 + 584) = a1;
  return swift_unknownObjectRelease(v2);
}

BOOL sub_10009332C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10009333C@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_10007A488(0xD000000000000010LL, (a1 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

uint64_t sub_100093354()
{
  return *(void *)(v0 + 440);
}

uint64_t sub_100093378( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v15 + 376) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a14, a15, v16);
}

uint64_t sub_100093390(uint64_t a1, _BYTE *a2)
{
  *a2 = 2;
  return swift_willThrow();
}

uint64_t sub_1000933A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v12, a12);
}

uint64_t sub_1000933B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  *a14 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a14, v14, a10);
}

void sub_1000933CC()
{
  uint64_t v1 = v0[77];
  v0[68] = v0[78];
  v0[67] = v1;
  sub_1000DEA24();
}

uint64_t sub_1000933E8(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_100093404( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  v24._countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
}

  ;
}

void sub_10009342C()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  *uint64_t v3 = *v0;
  *(void *)(v2 + 600) = *(void *)(v2 + 48);
}

uint64_t sub_10009344C(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_100093460()
{
  return swift_bridgeObjectRelease(v0);
}

BOOL sub_100093468(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_100093478(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v1);
}

uint64_t sub_100093490( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *uint64_t v16 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v16, v15, a15);
}

uint64_t sub_1000934A8(uint64_t a1)
{
  return swift_dynamicCast(v3, v2, v1, a1, 6LL);
}

uint64_t sub_1000934C0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 520) = a1;
  return swift_bridgeObjectRetain(*(void *)(v2 + a1 + 8));
}

uint64_t sub_1000934D8()
{
  return swift_task_dealloc(*(void *)(v0 + 496));
}

BOOL sub_1000934F0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100093500()
{
  return *(void *)(v0 + 480);
}

uint64_t sub_100093528()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100093530( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 + 352) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, a10, v11);
}

void sub_100093548()
{
}

unint64_t sub_100093554()
{
  *(_WORD *)(v0 + 12) = 2082;
  return 0xD00000000000002FLL;
}

void sub_100093570()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_10009357C()
{
  return _print_unlocked<A, B>(_:_:)(v1, v0);
}

uint64_t sub_100093588( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_10007961C(a12, v12);
}

  ;
}

uint64_t sub_1000935A4()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000935AC(uint64_t result)
{
  *(void *)(v1 + 592) = result;
  *(void *)(v1 + 56) = v2;
  return result;
}

void sub_1000935BC(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000935C4(uint64_t a1)
{
  return sub_10007961C(a1, v1);
}

uint64_t sub_1000935CC()
{
  return *(void *)(v0 + 472);
}

uint64_t sub_1000935F0()
{
  return *(void *)(v0 + 464);
}

uint64_t sub_100093614(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

void sub_100093624(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10009362C(uint64_t a1)
{
  return sub_10007961C(a1, v1);
}

uint64_t sub_100093634()
{
  return swift_unknownObjectRelease(v0);
}

void sub_10009363C()
{
}

void sub_100093650()
{
}

void sub_100093664()
{
}

void sub_100093678()
{
}

id sub_10009368C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

id sub_100093694(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_10009369C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

void sub_1000936A4()
{
}

id sub_1000936AC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000936B4()
{
  return swift_unknownObjectRelease(v0);
}

unint64_t sub_1000936BC()
{
  return sub_100092B00();
}

void sub_1000936C4()
{
}

id sub_1000936CC()
{
  return v0;
}

void sub_1000936D4( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *a2 = a15;
  a2[1] = v15;
  a2[2] = a14;
}

  ;
}

id sub_10009370C()
{
  return v0;
}

void sub_100093714()
{
}

  ;
}

uint64_t sub_10009374C()
{
  return swift_willThrow();
}

BOOL sub_100093764(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_10009376C()
{
}

uint64_t sub_100093798()
{
  return sub_10007961C(v0, v1);
}

id sub_1000937A4()
{
  return *(id *)(v0 + 320);
}

uint64_t sub_1000937B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v3[2] = a2;
  v3[3] = v2;
  v3[4] = result;
  return result;
}

  ;
}

BOOL sub_1000937C8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000937D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10007A488(a4, v10, (uint64_t *)va);
}

void sub_1000937E8()
{
  v0._countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

void sub_1000937F8(uint64_t a1@<X8>)
{
  *(void *)(v2 + 52_Block_object_dispose(va, 8) = *(void *)(v1 + a1);
  sub_1000DE6D4();
}

uint64_t sub_100093808()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_100093824(uint64_t a1)
{
  return sub_10011E808(a1);
}

uint64_t sub_100093840(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10009385C()
{
  return *(void *)(v0 + 504);
}

uint64_t sub_100093878@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

void sub_100093888(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_100093898()
{
  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_1000938A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10007A488(a5, v7, (uint64_t *)va);
}

void sub_1000938B8(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1000938C8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

BOOL sub_1000938D8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_1000938E8()
{
}

  ;
}

uint64_t sub_100093914(uint64_t a1)
{
  return sub_10007D824(v1, 2LL, a1);
}

uint64_t sub_100093934(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100093950(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

BOOL sub_10009396C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100093974( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return a21;
}

uint64_t sub_100093988@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0LL;
}

uint64_t sub_10009399C()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 616);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 624) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000939C0()
{
  return swift_task_dealloc(v0);
}

  ;
}

  ;
}

uint64_t sub_1000939F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v14 + 40_Block_object_dispose(va, 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a13, a9, v13);
}

  ;
}

void sub_100093A20()
{
}

void sub_100093A2C(Swift::String a1)
{
}

uint64_t sub_100093A38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + a1);
  *(void *)(v1 + 512) = v3;
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
}

uint64_t sub_100093A44(uint64_t a1, uint64_t a2)
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, a2, v2);
}

uint64_t sub_100093A50()
{
  return sub_10007A488(*(void *)(v0 - 152), *(void *)(v0 - 144), (uint64_t *)(v0 - 112));
}

void sub_100093A60(Swift::String a1)
{
}

uint64_t sub_100093A6C(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_100092A98(v2, a2);
}

void sub_100093A74(uint64_t a1)
{
  *(void *)(v1 + 560) = a1;
}

uint64_t sub_100093A80()
{
  return swift_task_dealloc(*(void *)(v0 + 504));
}

uint64_t sub_100093A98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  *(void *)(v22 + 24_Block_object_dispose(va, 8) = a21;
  *(void *)(v22 + 256) = a22;
  return v23 + 3;
}

  ;
}

uint64_t sub_100093AB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

  ;
}

uint64_t sub_100093AD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t sub_100093AD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_task_dealloc(a11);
}

uint64_t sub_100093AE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_task_dealloc(a10);
}

uint64_t sub_100093AE8()
{
  return *(void *)(v0 + 488);
}

uint64_t sub_100093AF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

uint64_t sub_100093B00()
{
  return Logger.logObject.getter();
}

void sub_100093B08()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  *uint64_t v3 = *v0;
  *(void *)(v2 + 60_Block_object_dispose(va, 8) = *(void *)(v2 + 48);
}

void sub_100093B28(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

uint64_t sub_100093B38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

  ;
}

uint64_t sub_100093B50(uint64_t a1, void *a2)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 1LL;
  return swift_willThrow();
}

uint64_t sub_100093B68(uint64_t result)
{
  *(void *)(v1 + 600) = result;
  *(void *)(v1 + 56) = v2;
  return result;
}

void sub_100093B78()
{
}

void sub_100093B80(void *a1)
{
}

  ;
}

uint64_t sub_100093BA4()
{
  return sub_10007961C(*(void *)(v0 + 504), *(void *)(v0 + 480));
}

uint64_t sub_100093BB0()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_100093BC4()
{
  *(_WORD *)(v0 + 12) = 2082;
  return 0xD00000000000002FLL;
}

uint64_t sub_100093BE0()
{
  return v0;
}

uint64_t sub_100093BFC()
{
  return _print_unlocked<A, B>(_:_:)(v0 - 112, v0 - 152);
}

  ;
}

uint64_t sub_100093C2C()
{
  *(void *)(v1 + 424) = v0;
  return type metadata accessor for Client.Server(0LL);
}

uint64_t sub_100093C38()
{
  return Logger.logObject.getter();
}

void sub_100093C40()
{
}

uint64_t sub_100093C54()
{
  return _convertErrorToNSError(_:)(v0);
}

void sub_100093C5C()
{
}

void sub_100093C64(uint64_t a1@<X8>)
{
  *(void *)(v2 + 536) = *(void *)(v1 + a1);
  sub_1000DE6D4();
}

uint64_t sub_100093C74@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 2LL, a1 + 8);
}

void sub_100093C84(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100093C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10007A488(a4, v5, (uint64_t *)va);
}

void sub_100093CA4()
{
  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_100093CB4(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(a1, a2);
}

void sub_100093CBC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  v17._countAndFlagsBits = v16;
  v17._object = v15;
  String.append(_:)(v17);
}

uint64_t sub_100093CCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_bridgeObjectRelease(a18);
}

uint64_t sub_100093CD4()
{
  return *(void *)(v0 + 448);
}

uint64_t sub_100093CEC()
{
  return sub_10007B294(v0);
}

uint64_t sub_100093CF4()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100093CFC()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100093D08()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_100093D14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_bridgeObjectRelease(a22);
}

void sub_100093D1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

uint64_t sub_100093D24()
{
  return swift_willThrow();
}

  ;
}

BOOL sub_100093D38(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_100093D44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  *(void *)(v22 + 232) = a21;
  *(void *)(v22 + 240) = a22;
}

uint64_t sub_100093D50(uint64_t a1, uint64_t a2)
{
  return sub_100079604(v2, a2);
}

uint64_t sub_100093D58()
{
  return *(void *)(v0 + 496);
}

  ;
}

uint64_t sub_100093D70@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v2 + a1);
  *(void *)(v1 + 520) = v3;
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
}

uint64_t sub_100093D7C(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

  ;
}

void sub_100093D94(Swift::String a1)
{
}

uint64_t sub_100093DA0(uint64_t a1)
{
  *(void *)(v2 + 424) = a1;
  *(void *)(v2 + 432) = v1;
  return type metadata accessor for Client.Server(0LL);
}

uint64_t sub_100093DAC()
{
  return sub_10007F054(v1, v0);
}

  ;
}

void sub_100093DC4(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t sub_100093DD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 0LL;
}

id sub_100093DE4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t sub_100093DF8()
{
  return 0LL;
}

void sub_100093E04()
{
}

void sub_100093E10(uint64_t a1)
{
  *(void *)(v1 + 56_Block_object_dispose(va, 8) = a1;
}

void sub_100093E1C(uint64_t a1, uint64_t a2)
{
  id v7 = 0LL;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = sub_100025C04(v3, (uint64_t)&v7);

  if (v4)
  {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for String,  (char *)&type metadata for Any + 8);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  if (v7)
  {
    id v6 = v7;
    swift_bridgeObjectRelease(a2);
    a2 = v5;
  }

  swift_bridgeObjectRelease(a2);
  sub_10007B9EC();
}

void sub_100093EF8(uint64_t a1, unint64_t a2)
{
  id v9 = 0LL;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v5 = sub_100026EC4(isa, &v9);

  if (v5)
  {
    uint64_t v6 = sub_10007B1FC(&qword_10032A0C8);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  if (v9)
  {
    id v8 = v9;
    swift_bridgeObjectRelease(v7);
  }

  sub_10007F054(a1, a2);
  sub_10007B9EC();
}

uint64_t sub_100093FCC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_100093FF0 + 4 * byte_10027AB40[a2 >> 62]))();
}

BOOL sub_100093FF0(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2) == 0LL;
}

uint64_t sub_100094018(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 136) = a2;
  return swift_task_switch(sub_100094030, 0LL, 0LL);
}

uint64_t sub_100094030()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  id v3 = [objc_allocWithZone(AMSURLParser) initWithBag:v1[17]];
  v1[18] = v3;
  URL._bridgeToObjectiveC()(v4);
  uint64_t v6 = v5;
  id v7 = [v3 typeForURL:v5];
  v1[19] = v7;

  v1[7] = v1 + 15;
  v1[2] = v1;
  v1[3] = sub_100094124;
  uint64_t v8 = swift_continuation_init(v2, 1LL);
  v1[10] = _NSConcreteStackBlock;
  v1 += 10;
  v1[1] = 0x40000000LL;
  v1[2] = sub_100099C24;
  v1[3] = &unk_1002EB9C8;
  v1[4] = v8;
  [v7 resultWithCompletion:v1];
  return swift_continuation_await(v2);
}

uint64_t sub_100094124()
{
  *(void *)(v0 + 160) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100094164(uint64_t a1)
{
  id v3 = *(void **)(v1 + 144);
  uint64_t v2 = *(void **)(v1 + 152);
  id v4 = *(void **)(v1 + 120);
  id v5 = sub_1000936AC(a1, "integerValue");

  return (*(uint64_t (**)(id))(v1 + 8))(v5);
}

uint64_t sub_1000941C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 152);
  id v9 = *(void **)(v7 + 144);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  return sub_10009C2E4(*(uint64_t (**)(void))(v7 + 8));
}

NSString sub_1000941FC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A0D0 = (uint64_t)result;
  return result;
}

NSString sub_100094238()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A0D8 = (uint64_t)result;
  return result;
}

NSString sub_10009426C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A0E0 = (uint64_t)result;
  return result;
}

NSString sub_100094294()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A0E8 = (uint64_t)result;
  return result;
}

NSString sub_1000942C8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A0F0 = (uint64_t)result;
  return result;
}

NSString sub_100094300()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A0F8 = (uint64_t)result;
  return result;
}

NSString sub_100094334()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A100 = (uint64_t)result;
  return result;
}

NSString sub_100094368()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A108 = (uint64_t)result;
  return result;
}

NSString sub_1000943A4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A110 = (uint64_t)result;
  return result;
}

NSString sub_1000943E0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A118 = (uint64_t)result;
  return result;
}

NSString sub_100094414()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A120 = (uint64_t)result;
  return result;
}

NSString sub_100094450()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A128 = (uint64_t)result;
  return result;
}

NSString sub_10009448C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A130 = (uint64_t)result;
  return result;
}

NSString sub_1000944C0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A138 = (uint64_t)result;
  return result;
}

NSString sub_1000944F4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A140 = (uint64_t)result;
  return result;
}

NSString sub_100094528()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A148 = (uint64_t)result;
  return result;
}

NSString sub_10009454C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A150 = (uint64_t)result;
  return result;
}

NSString sub_100094588()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A158 = (uint64_t)result;
  return result;
}

NSString sub_1000945BC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A160 = (uint64_t)result;
  return result;
}

NSString sub_1000945F0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A168 = (uint64_t)result;
  return result;
}

NSString sub_100094624()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A170 = (uint64_t)result;
  return result;
}

NSString sub_10009465C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A178 = (uint64_t)result;
  return result;
}

NSString sub_100094690()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A180 = (uint64_t)result;
  return result;
}

NSString sub_1000946C8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A188 = (uint64_t)result;
  return result;
}

NSString sub_1000946FC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10032A190 = (uint64_t)result;
  return result;
}

uint64_t sub_10009472C()
{
  if (qword_100328A20 != -1) {
    swift_once(&qword_100328A20, sub_10009448C);
  }
  id v0 = sub_10009C6EC();
  if (v0)
  {
    _bridgeAnyObjectToAny(_:)(&v34);
    id v0 = (id)sub_1000931C0();
  }

  else
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
  }

  sub_10009C6E0((uint64_t)v0, v1, (uint64_t *)&unk_100328ED0, v2, v3);
  if (v37)
  {
    if ((sub_10009C448( v4,  v5,  v6,  (uint64_t)&type metadata for String,  v7,  v8,  v9,  v10,  v31,  v33,  v34,  *((uint64_t *)&v34 + 1),  v35,  *((uint64_t *)&v35 + 1),  v36[0]) & 1) != 0)
    {
      if (v31 == 1702195828 && v33 == 0xE400000000000000LL)
      {
        unint64_t v14 = 0xE400000000000000LL;
        goto LABEL_23;
      }

      uint64_t v12 = sub_10009C7C4();
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 1702195828LL, 0xE400000000000000LL, 0LL) & 1) != 0)
      {
        unint64_t v14 = v33;
LABEL_23:
        swift_bridgeObjectRelease(v14);
        return 1LL;
      }

      if (v31 == 49 && v33 == 0xE100000000000000LL)
      {
        unint64_t v14 = 0xE100000000000000LL;
        goto LABEL_23;
      }

      uint64_t v28 = sub_10009C7C4();
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, 49LL, 0xE100000000000000LL, 0LL);
      sub_10007B980();
      if ((v30 & 1) != 0) {
        return 1LL;
      }
    }
  }

  else
  {
    sub_100085298((uint64_t)v36, (uint64_t *)&unk_100328ED0);
  }

  id v15 = sub_10009C6EC();
  if (v15)
  {
    _bridgeAnyObjectToAny(_:)(&v34);
    id v15 = (id)sub_10009C5A4();
  }

  else
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
  }

  sub_10009C6E0((uint64_t)v15, v16, (uint64_t *)&unk_100328ED0, v17, v18);
  if (v37)
  {
    uint64_t result = sub_10009C448( v19,  v20,  v21,  (uint64_t)&type metadata for Bool,  v22,  v23,  v24,  v25,  v31,  v33,  v34,  *((uint64_t *)&v34 + 1),  v35,  *((uint64_t *)&v35 + 1),  v36[0]);
    if ((_DWORD)result) {
      return v32;
    }
  }

  else
  {
    sub_100085298((uint64_t)v36, (uint64_t *)&unk_100328ED0);
    return 0LL;
  }

  return result;
}

uint64_t sub_100094944(char a1)
{
  *(void *)(v2 + 816) = v1;
  *(_BYTE *)(v2 + 673) = a1;
  uint64_t v3 = type metadata accessor for URL(0LL);
  *(void *)(v2 + 824) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 832) = v4;
  *(void *)(v2 + 840) = sub_10009BFAC(v4);
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032A280);
  *(void *)(v2 + 84_Block_object_dispose(va, 8) = sub_10009BFAC(*(void *)(v5 - 8));
  uint64_t v6 = type metadata accessor for PurchaseIntentInternal(0LL);
  *(void *)(v2 + 856) = v6;
  *(void *)(v2 + 864) = sub_10009BFAC(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for Date(0LL);
  *(void *)(v2 + 872) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v2 + 880) = v8;
  *(void *)(v2 + 88_Block_object_dispose(va, 8) = sub_10009BFAC(v8);
  uint64_t v9 = type metadata accessor for Client.Server(0LL);
  *(void *)(v2 + 896) = sub_10009BFD0(*(void *)(v9 - 8));
  *(void *)(v2 + 904) = sub_100093010();
  uint64_t v10 = sub_10007B1FC(&qword_10032A3D0);
  *(void *)(v2 + 912) = sub_10009BFAC(*(void *)(v10 - 8));
  uint64_t v11 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  *(void *)(v2 + 920) = sub_10009BFAC(*(void *)(v11 - 8));
  uint64_t v12 = sub_100086224();
  *(void *)(v2 + 92_Block_object_dispose(va, 8) = v12;
  *(void *)(v2 + 936) = sub_10009BFD0(*(void *)(v12 - 8));
  *(void *)(v2 + 944) = sub_100093010();
  *(void *)(v2 + 952) = sub_100093010();
  *(void *)(v2 + 960) = sub_100093010();
  *(void *)(v2 + 96_Block_object_dispose(va, 8) = sub_100093010();
  *(void *)(v2 + 976) = sub_100093010();
  *(void *)(v2 + 984) = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100094A98()
{
  uint64_t v1 = (void *)*((void *)v0 + 102);
  id v2 = [objc_allocWithZone(AMSBuyParams) init];
  *((void *)v0 + 124) = v2;
  id v3 = sub_1000936AC((uint64_t)v2, "apiVersion");
  if (v3 == (id)1
    || (sub_10009BAD0(*((void **)v0 + 102), (SEL *)&selRef_customBuyParams), (*((void *)v0 + 125) = v3) == 0LL))
  {
    uint64_t v9 = (uint64_t)(v0 + 368);
    uint64_t v105 = (SEL *)(v0 + 408);
    uint64_t v10 = v0 + 520;
    uint64_t v11 = *((void *)v0 + 115);
    uint64_t v99 = v0 + 792;
    uint64_t v12 = (void *)*((void *)v0 + 102);
    NSString v13 = sub_10009C628((uint64_t)v3, "client");
    [v12 excludeReceiptFromRequest];
    sub_10009C314(v11);
    sub_1000DED8C();
    uint64_t v15 = v14;

    sub_100085298(v11, (uint64_t *)&unk_10032A1C0);
    *((void *)v0 + 87) = v15;
    memset(v107, 0, sizeof(v107));
    uint64_t v16 = (SEL *)(v0 + 696);
    sub_10012A958((uint64_t)v107, @"appDsid");
    uint64_t v100 = *((void *)v0 + 87) + 64LL;
    sub_10009BFFC();
    unint64_t v19 = v18 & v17;
    sub_10009C240();
    uint64_t v101 = v20;
    uint64_t v102 = (uint64_t)(v0 + 376);
    uint64_t v106 = (uint64_t)v0;
    uint64_t v103 = v21;
    uint64_t v104 = v0 + 416;
    uint64_t v98 = v20 - 1;
    swift_bridgeObjectRetain(v21);
    uint64_t v22 = 0LL;
    uint64_t v23 = &selRef_initWithOptions_;
    if (!v19) {
      goto LABEL_11;
    }
LABEL_9:
    unint64_t v29 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v30 = v29 | (v22 << 6);
LABEL_10:
    uint64_t v31 = *(void **)(*(void *)(v103 + 48) + 8 * v30);
    *(void *)uint64_t v9 = v31;
    sub_10009C70C(v102, *(void *)(v103 + 56));
    id v32 = v31;
    while (1)
    {
      uint64_t v16 = v105;
      sub_10009BF3C(v9, (uint64_t)v105, (uint64_t *)&unk_10032A290);
      uint64_t v42 = (char *)*v105;
      if (!*v105) {
        break;
      }
      uint64_t v24 = *(void **)(v106 + 992);
      sub_1000853B0(v104, v10);
      uint64_t v25 = sub_100085B44(v10, *(void *)(v106 + 544));
      NSString v13 = (NSString)_bridgeAnythingToObjectiveC<A>(_:)(v25);
      sub_10007B1A0(v10);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v16 = (SEL *)v23;
      uint64_t v27 = v26;
      id v0 = (char *)String._bridgeToObjectiveC()();
      uint64_t v28 = v27;
      uint64_t v23 = (char **)v16;
      swift_bridgeObjectRelease(v28);
      objc_msgSend(v24, v16[493], v13, v0);

      swift_unknownObjectRelease(v13);
      if (v19) {
        goto LABEL_9;
      }
LABEL_11:
      if (__OFADD__(v22, 1LL))
      {
        __break(1u);
        goto LABEL_108;
      }

      sub_10009C47C();
      if (v34 != v35)
      {
        if (*(void *)(v100 + 8 * v33)) {
          goto LABEL_15;
        }
        uint64_t v22 = v33;
        if (v33 + 1 < v101)
        {
          if (*(void *)(v100 + 8 * (v33 + 1))) {
            goto LABEL_15;
          }
          uint64_t v22 = v33 + 1;
          if (v33 + 2 < v101)
          {
            if (*(void *)(v100 + 8 * (v33 + 2))) {
              goto LABEL_15;
            }
            uint64_t v40 = v33 + 3;
            uint64_t v22 = v33 + 2;
            if (v33 + 3 < v101)
            {
              if (*(void *)(v100 + 8 * v40))
              {
LABEL_15:
                sub_10009C394();
                unint64_t v19 = v37 & v36;
                unint64_t v30 = v39 + (v38 << 6);
                uint64_t v22 = v38;
                goto LABEL_10;
              }

              while (!__OFADD__(v40, 1LL))
              {
                sub_10009C47C();
                if (v34 == v35)
                {
                  uint64_t v22 = v98;
                  goto LABEL_28;
                }

                sub_10009C470();
                if (v41) {
                  goto LABEL_15;
                }
              }

              __break(1u);
LABEL_110:
              swift_once(&qword_1003289E0, sub_1000942C8);
LABEL_90:
              sub_10009C668(*(void **)(v106 + 992));

              NSString v84 = String._bridgeToObjectiveC()();
              sub_100093460();
              if (qword_1003289E8 != -1) {
                swift_once(&qword_1003289E8, sub_100094300);
              }
              sub_10009C65C(*(void **)(v106 + 992));

              NSString v85 = sub_10009C400();
              sub_100085FB4();
              uint64_t v9 = v106;
              if (qword_1003289F0 != -1) {
                swift_once(&qword_1003289F0, sub_100094334);
              }
              objc_msgSend(*(id *)(v106 + 992), *((SEL *)v0 + 493), v85, qword_10032A100, v98);

              NSString v86 = sub_10009C7F0();
              sub_100085EF0();
              if (qword_1003289F8 != -1) {
                swift_once(&qword_1003289F8, sub_100094368);
              }
              sub_10009368C(*(id *)(v106 + 992), *((SEL *)v0 + 493));

              uint64_t v87 = v16;
              sub_10009C76C((uint64_t)-[SEL description](v87, "description"));
              sub_10009C72C();

              NSString v88 = sub_10009C488();
              sub_10007BA44();
              Swift::String v47 = &selRef_accountMediaType;
              if (qword_100328A00 != -1) {
                swift_once(&qword_100328A00, sub_1000943A4);
              }
              sub_10009C2F4(*(id *)(v106 + 992), *((SEL *)v0 + 493));

              goto LABEL_104;
            }
          }
        }
      }

LABEL_104:
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    *(void *)(v9 + 1024) = sub_100079604(*(void *)(v9 + 928), (uint64_t)qword_10033E1A8);
    unint64_t v89 = sub_10009C7DC();
    *(void *)(v9 + 1032) = v89;
    *(void *)(v9 + 1040) = v90;
    uint64_t v91 = (char *)sub_10009C2FC(v89, v47[163]);
    *(void *)(v9 + 104_Block_object_dispose(va, 8) = *(void *)&v91[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
    sub_10008618C();

    sub_10009C684();
    uint64_t v92 = (uint64_t *)swift_task_alloc(dword_10032A7DC);
    *(void *)(v9 + 1056) = v92;
    uint64_t *v92 = v9;
    v92[1] = (uint64_t)sub_100096C08;
    uint64_t v93 = sub_10009C228();
    return sub_1000AEA20(v93, v94, v95, v96, v97);
  }

  else
  {
    id v4 = [*((id *)v0 + 102) client];
    sub_10009C4C8();
    uint64_t v6 = v5;

    if (qword_100328B68 != -1) {
      swift_once(&qword_100328B68, sub_10012B154);
    }
    id v7 = [v6 arrayForKey:qword_10033E1F0];
    *((void *)v0 + 126) = v7;
    sub_10009C5A4();
    *((void *)v0 + 7) = v0 + 664;
    *((void *)v0 + 60) = sub_10009305C((uint64_t)sub_100095830);
    *((void *)v0 + 56) = _NSConcreteStackBlock;
    *((void *)v0 + 57) = 0x40000000LL;
    *((void *)v0 + 5_Block_object_dispose(va, 8) = sub_100098FC4;
    *((void *)v0 + 59) = &unk_1002EB9B0;
    [v7 valueWithCompletion:v0 + 448];
    return swift_continuation_await(v0 + 16);
  }

uint64_t sub_100095830()
{
  *(void *)(v0 + 1016) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000958B4()
{
  id v2 = (uint64_t *)(v0 + 80);
  uint64_t v180 = (_OWORD *)(v0 + 128);
  uint64_t v175 = (void **)(v0 + 408);
  uint64_t v176 = v0 + 368;
  uint64_t v171 = (_OWORD *)(v0 + 520);
  uint64_t v160 = v0 + 696;
  uint64_t v158 = v0 + 632;
  uint64_t v159 = (void *)(v0 + 792);
  uint64_t v163 = (uint64_t *)(v0 + 808);
  uint64_t v164 = (uint64_t *)(v0 + 800);
  id v3 = *(uint64_t **)(v0 + 1000);
  uint64_t v177 = *(void **)(v0 + 664);

  uint64_t v178 = 0LL;
  uint64_t v4 = v3[8];
  uint64_t v161 = (uint64_t)(v3 + 8);
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *((_BYTE *)v3 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  uint64_t v7 = v5 & v4;
  uint64_t v169 = v0 + 144;
  uint64_t v170 = v3;
  uint64_t v172 = (_OWORD *)(v0 + 96);
  uint64_t v165 = (void **)(v0 + 816);
  int64_t v166 = (unint64_t)(63 - v6) >> 6;
  uint64_t v157 = v166 - 1;
  unint64_t v8 = (unint64_t)off_100328000;
  uint64_t v162 = (char *)&type metadata for Any + 8;
  uint64_t v9 = &selRef_initWithOptions_;
  unint64_t v182 = v0;
  uint64_t v173 = (void *)(v0 + 584);
  uint64_t v174 = (uint64_t *)(v0 + 80);
  if ((v5 & v4) == 0) {
    goto LABEL_6;
  }
LABEL_4:
  sub_10009C774();
  uint64_t v11 = v10 | (v178 << 6);
LABEL_5:
  uint64_t v12 = (void *)(v170[6] + 16 * v11);
  uint64_t v13 = v12[1];
  *(void *)(v0 + 12_Block_object_dispose(va, 8) = *v12;
  *(void *)(v0 + 136) = v13;
  sub_10009C70C(v169, v170[7]);
  sub_10009C738();
  while (1)
  {
    sub_10009BF3C((uint64_t)v180, (uint64_t)v2, &qword_10032A2A0);
    uint64_t v1 = *(void **)(v0 + 88);
    if (!v1) {
      break;
    }
    uint64_t v19 = *v2;
    sub_10009C654(v172);
    NSString v20 = sub_10009C58C();
    unsigned int v21 = [v177 containsObject:v20];

    uint64_t v22 = *(void *)(v8 + 2880);
    uint64_t v183 = v7;
    if (v21)
    {
      if (v22 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v23 = *(void *)(v0 + 984);
      uint64_t v24 = *(void **)(v0 + 816);
      uint64_t v25 = sub_100079604(*(void *)(v0 + 928), (uint64_t)qword_10033E1A8);
      sub_10009BF04(v25, v23, type metadata accessor for SKLogger);
      v185[0] = 0LL;
      v185[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(26LL);
      swift_bridgeObjectRelease(v185[1]);
      v185[0] = 0xD000000000000018LL;
      v185[1] = 0x800000010029EA30LL;
      sub_100086114(v19);
      unint64_t v26 = v185[1];
      uint64_t v168 = v185[0];
      id v28 = sub_10009C2FC(v27, "logKey");
      uint64_t v167 = sub_100086040((uint64_t)v28);
      sub_10009C6A0();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      sub_100085EE8((uint64_t)v24);
      uint64_t v30 = sub_100085EE8(v26);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = v29;
      if (os_log_type_enabled(v31, v29))
      {
        uint64_t v33 = sub_10007B9FC(22LL);
        uint64_t v34 = sub_10007B9FC(64LL);
        v186[0] = v34;
        *(_DWORD *)uint64_t v33 = 136446466;
        sub_10007BA3C();
        uint64_t v35 = sub_10009C38C();
        sub_10009C280(v35, v36);
        sub_10009C6BC();
        v37._countAndFlagsBits = v167;
        v37._object = v24;
        String.append(_:)(v37);
        sub_100085F14();
        sub_10007BA44();
        *uint64_t v164 = sub_10008620C(v185[0], v38, v186);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v163, v33 + 4);
        sub_10007B980();
        sub_10007D974((uint64_t)v24);
        *(_WORD *)(v33 + 12) = 2082;
        swift_bridgeObjectRetain(v26);
        *uint64_t v163 = sub_10007A488(v168, v26, v186);
        sub_100086194((uint64_t)v163, (uint64_t)v165);
        sub_100085E64(v26);
        sub_100086038((void *)&_mh_execute_header, v31, v32, "%{public}s%{public}s", (uint8_t *)v33);
        sub_10009C68C( v34,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v156,  v157,  v158,  (uint64_t)v159,  v160,  v161,  (uint64_t)v162);
        uint64_t v46 = v34;
        unint64_t v8 = 0x100328000LL;
        unint64_t v0 = v182;
        sub_10007B974(v46);
        sub_10007B974(v33);

        sub_10007BA44();
        sub_100093460();
      }

      else
      {
        sub_100085E64((uint64_t)v24);
        sub_100085E64(v26);
      }

      uint64_t v9 = &selRef_initWithOptions_;
      id v3 = *(uint64_t **)(v0 + 992);
      sub_100085BC4(*(void *)(v0 + 984), type metadata accessor for SKLogger);
      uint64_t v64 = sub_100085B44(v173, *(void *)(v0 + 608));
      uint64_t v65 = _bridgeAnythingToObjectiveC<A>(_:)(v64);
      NSString v66 = sub_10009C58C();
      sub_100086144();
      [v3 setParameter:v65 forKey:v66];

      swift_unknownObjectRelease(v65);
    }

    else
    {
      if (v22 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v47 = *(void *)(v0 + 976);
      Swift::String v48 = *(void **)(v0 + 816);
      uint64_t v49 = sub_100079604(*(void *)(v0 + 928), (uint64_t)qword_10033E1A8);
      sub_10009BF04(v49, v47, type metadata accessor for SKLogger);
      v185[0] = 0LL;
      v185[1] = 0xE000000000000000LL;
      id v3 = v185;
      _StringGuts.grow(_:)(54LL);
      v50._countAndFlagsBits = 0xD00000000000001ALL;
      v50._object = (void *)0x800000010029E9F0LL;
      String.append(_:)(v50);
      sub_100086114(v19);
      sub_100086144();
      v51._countAndFlagsBits = 0xD00000000000001ALL;
      v51._object = (void *)0x800000010029EA10LL;
      String.append(_:)(v51);
      __int128 v52 = *(_OWORD *)v185;
      id v54 = sub_10009C2FC(v53, "logKey");
      uint64_t v1 = (void *)sub_100086040((uint64_t)v54);
      sub_10009C6A0();
      os_log_type_t v56 = static os_log_type_t.default.getter(v55);
      sub_100085EE8((uint64_t)v48);
      sub_100085EE8(*((uint64_t *)&v52 + 1));
      uint64_t v57 = (os_log_s *)sub_10009C414();
      if (os_log_type_enabled(v57, v56))
      {
        uint64_t v58 = sub_10007B9FC(22LL);
        uint64_t v59 = sub_10007B9FC(64LL);
        v186[0] = v59;
        *(_DWORD *)uint64_t v58 = 136446466;
        sub_10009C6BC();
        sub_10007BA3C();
        v60._countAndFlagsBits = (uint64_t)v1;
        v60._object = v48;
        String.append(_:)(v60);
        sub_100085F14();
        sub_10007BA44();
        id v3 = (uint64_t *)v185[1];
        *(void *)(v58 + 4) = sub_10008620C(v185[0], v61, v186);
        sub_10007B980();
        sub_10007D974((uint64_t)v48);
        *(_WORD *)(v58 + 12) = 2082;
        sub_100085FEC();
        *(void *)(v58 + 14) = sub_10007A488(v52, *((unint64_t *)&v52 + 1), v186);
        sub_100085E64(*((uint64_t *)&v52 + 1));
        sub_100086038((void *)&_mh_execute_header, v57, v56, "%{public}s%{public}s", (uint8_t *)v58);
        swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v62 = v59;
        uint64_t v9 = &selRef_initWithOptions_;
        sub_10007B974(v62);
        uint64_t v63 = v58;
        unint64_t v8 = 0x100328000LL;
        sub_10007B974(v63);

        sub_10007BA44();
        sub_100085EF0();
      }

      else
      {
        sub_100085E64((uint64_t)v48);
        sub_100085E64(*((uint64_t *)&v52 + 1));
      }

      sub_100085BC4(*(void *)(v0 + 976), type metadata accessor for SKLogger);
    }

    id v2 = v174;
    uint64_t v7 = v183;
    sub_10009C630();
    if (v183) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v14 = v178 + 1;
    if (__OFADD__(v178, 1LL))
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      swift_once(&qword_100328A30, sub_1000944F4);
      goto LABEL_63;
    }

    if (v14 < v166)
    {
      if (*(void *)(v161 + 8 * v14)) {
        goto LABEL_9;
      }
      uint64_t v16 = v178 + 2;
      ++v178;
      if (v14 + 1 < v166)
      {
        if (*(void *)(v161 + 8 * v16)) {
          goto LABEL_9;
        }
        uint64_t v178 = v14 + 1;
        if (v14 + 2 < v166)
        {
          if (*(void *)(v161 + 8 * (v14 + 2))) {
            goto LABEL_9;
          }
          int64_t v17 = v14 + 3;
          uint64_t v178 = v14 + 2;
          if (v14 + 3 < v166)
          {
            if (*(void *)(v161 + 8 * v17))
            {
LABEL_9:
              sub_10009C574();
              uint64_t v178 = v15;
              goto LABEL_5;
            }

            while (!__OFADD__(v17, 1LL))
            {
              if (v17 + 1 >= v166)
              {
                uint64_t v178 = v157;
                goto LABEL_22;
              }

              sub_10009C470();
              if (v18) {
                goto LABEL_9;
              }
            }

            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            swift_once(&qword_1003289E0, sub_1000942C8);
LABEL_125:
            [*(id *)(v8 + 992) setParameter:v1 forKey:qword_10032A0F0];

            NSString v141 = sub_10009C760();
            sub_100093460();
            if (qword_1003289E8 != -1) {
              swift_once(&qword_1003289E8, sub_100094300);
            }
            [*(id *)(v8 + 992) setParameter:v141 forKey:qword_10032A0F8];

            NSString v142 = sub_10009C400();
            sub_100085FB4();
            if (qword_1003289F0 != -1) {
              swift_once(&qword_1003289F0, sub_100094334);
            }
            sub_10009C4B0(*(void **)(v8 + 992));

            NSString v143 = sub_10009C7F0();
            sub_100085EF0();
            if (qword_1003289F8 != -1) {
              swift_once(&qword_1003289F8, sub_100094368);
            }
            sub_10009C4B0(*(void **)(v8 + 992));

            uint64_t v144 = v3;
            sub_10009C76C((uint64_t)[v144 description]);
            sub_10009C72C();

            NSString v145 = sub_10009C488();
            sub_10007BA44();
            if (qword_100328A00 != -1) {
              swift_once(&qword_100328A00, sub_1000943A4);
            }
            sub_10009C4B0(*(void **)(v8 + 992));

            goto LABEL_138;
          }
        }
      }
    }

LABEL_58:
    unint64_t v8 = 0LL;
    uint64_t v83 = v176;
    *(void *)(v176 + 32) = 0LL;
    *(_OWORD *)uint64_t v176 = 0u;
    *(_OWORD *)(v176 + 16) = 0u;
  }

  uint64_t v99 = sub_10009C5EC();
  id v100 = sub_10009C208(v99, "productIdentifier");
  sub_100086040((uint64_t)v100);
  sub_10009C49C();
  sub_10009C288();
  sub_10009C6D0();
  sub_10009C018();
  if (qword_100328A30 != -1) {
    goto LABEL_144;
  }
LABEL_63:
  unint64_t v8 = v182;
  uint64_t v101 = (void *)sub_10009C61C();
  sub_10009BF84(v101);

  *(void *)(v182 + 792) = sub_10009C208(v102, "quantity");
  uint64_t isa = (uint64_t)v159;
  dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  sub_10009C210();
  sub_10009C018();
  uint64_t v104 = &selRef_accountMediaType;
  if (qword_100328A80 != -1) {
    swift_once(&qword_100328A80, sub_1000946FC);
  }
  uint64_t v105 = (void *)sub_10009C61C();
  sub_10009BF84(v105);

  if (sub_10009C208(v106, "apiVersion") != (id)1)
  {
    uint64_t v107 = *(void *)(v182 + 912);
    id v108 = sub_10009C3DC(*(void **)(v182 + 816));
    sub_10009C43C((uint64_t)v108, OBJC_IVAR____TtC9storekitd6Client_deviceVendorID);

    uint64_t v109 = sub_10009C6A8();
    uint64_t v110 = sub_10007D824(v107, 1LL, v109);
    uint64_t v111 = *(void *)(v182 + 912);
    if ((_DWORD)v110 == 1)
    {
      sub_10009C740(v110, &qword_10032A3D0);
      uint64_t isa = 0LL;
    }

    else
    {
      UUID.uuidString.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8LL))(v111, v109);
      uint64_t isa = sub_10009C698();
      uint64_t v113 = v112;
      sub_10007BA44();
      *(void *)(v182 + 632) = isa;
      *(void *)(v182 + 640) = v113;
      sub_10009C7BC();
      sub_10009C4DC();
    }

    if (qword_1003289D8 != -1) {
      swift_once(&qword_1003289D8, sub_100094294);
    }
    sub_10009BF84(*(void **)(v182 + 992));
    sub_1000931C0();
  }

  uint64_t v114 = sub_10009B9FC(*v165);
  if (v115 >> 60 != 15)
  {
    uint64_t isa = v114;
    unint64_t v116 = v115;
    if ((sub_100093FCC(v114, v115) & 1) == 0)
    {
      v117.super.uint64_t isa = Data._bridgeToObjectiveC()().super.isa;
      if (qword_100328A60 != -1) {
        swift_once(&qword_100328A60, sub_100094624);
      }
      sub_10009C2F4(*(id *)(v182 + 992), v9[493]);
    }

    sub_10009BE78(isa, v116);
  }

  sub_10009BB30(*v165, (SEL *)&selRef_applicationUsername);
  if (v118)
  {
    sub_10009C210();
    sub_10009C018();
  }

  else
  {
    uint64_t isa = 0LL;
  }

  if (qword_1003289C8 != -1) {
    swift_once(&qword_1003289C8, sub_100094238);
  }
  Swift::String v119 = (void *)sub_10009C61C();
  sub_10009BF84(v119);
  uint64_t v120 = sub_1000931C0();
  sub_10009C200(v120, (SEL *)&selRef_appAccountToken);
  if (v121)
  {
    sub_10009C210();
    sub_10009C018();
  }

  else
  {
    uint64_t isa = 0LL;
  }

  if (qword_1003289C0 != -1) {
    swift_once(&qword_1003289C0, sub_1000941FC);
  }
  uint64_t v122 = (void *)sub_10009C61C();
  sub_10009BF84(v122);
  uint64_t v123 = sub_1000931C0();
  sub_10009C200(v123, (SEL *)&selRef_partnerIdentifier);
  if (v124)
  {
    sub_10009C210();
    sub_10009C018();
  }

  else
  {
    uint64_t isa = 0LL;
  }

  if (qword_100328A50 != -1) {
    swift_once(&qword_100328A50, sub_1000945BC);
  }
  uint64_t v125 = (void *)sub_10009C61C();
  sub_10009BF84(v125);
  uint64_t v126 = sub_1000931C0();
  sub_10009C200(v126, (SEL *)&selRef_partnerTransactionIdentifier);
  if (v127)
  {
    sub_10009C210();
    sub_10009C018();
  }

  else
  {
    uint64_t isa = 0LL;
  }

  if (qword_100328A58 != -1) {
    swift_once(&qword_100328A58, sub_1000945F0);
  }
  int v128 = *(unsigned __int8 *)(v182 + 673);
  sub_10009BF84(*(void **)(v182 + 992));
  sub_1000931C0();
  if (v128 == 1)
  {
    uint64_t isa = (uint64_t)sub_10009C064().super.super.isa;
    if (qword_100328A08 != -1) {
      swift_once(&qword_100328A08, sub_1000943E0);
    }
    sub_10009BF84(*(void **)(v182 + 992));
  }

  uint64_t v129 = *(void *)(v182 + 904);
  uint64_t v130 = *(void *)(v182 + 896);
  id v131 = sub_10009C3DC(*(void **)(v182 + 816));
  sub_10009C4BC();

  uint64_t v132 = sub_10007B1FC(&qword_10032A028);
  LODWORD(isa) = sub_10009C0B8(v132);
  sub_10009C358(v130);
  sub_10009C358(v129);
  if ((isa & 1) == 0 && [*v165 simulateAskToBuy])
  {
    uint64_t isa = (uint64_t)sub_10009C064().super.super.isa;
    if (qword_100328A68 != -1) {
      swift_once(&qword_100328A68, sub_10009465C);
    }
    sub_10009BF84(*(void **)(v182 + 992));
  }

  if ([*v165 isStoreOriginated])
  {
    uint64_t isa = (uint64_t)sub_10009C064().super.super.isa;
    if (qword_100328A28 != -1) {
      swift_once(&qword_100328A28, sub_1000944C0);
    }
    sub_10009BF84(*(void **)(v182 + 992));
  }

  id v133 = sub_10009C3DC(*v165);
  sub_10009C67C(v133);
  if ((_DWORD)isa == 1)
  {
    v134.super.super.uint64_t isa = sub_10009C064().super.super.isa;
    if (qword_1003289D0 != -1) {
      swift_once(&qword_1003289D0, sub_10009426C);
    }
    sub_10009BF84(*(void **)(v182 + 992));
  }

  if ([*v165 isStoreKitViewInitiated])
  {
    v135.super.super.uint64_t isa = sub_10009C064().super.super.isa;
    if (qword_100328A78 != -1) {
      swift_once(&qword_100328A78, sub_1000946C8);
    }
    sub_10009BF84(*(void **)(v182 + 992));
  }

  sub_10009BB30(*v165, (SEL *)&selRef_discountIdentifier);
  if (v136)
  {
    sub_10009BB30(*v165, (SEL *)&selRef_discountKeyIdentifier);
    if (v137)
    {
      sub_10009BB30(*v165, (SEL *)&selRef_discountNonceString);
      if (v138)
      {
        sub_10009BB30(*v165, (SEL *)&selRef_discountSignature);
        if (v139)
        {
          uint64_t v140 = (uint64_t *)[*v165 discountTimestamp];
          if (v140)
          {
            id v3 = v140;
            uint64_t v1 = String._bridgeToObjectiveC()();
            sub_100086004();
            if (qword_1003289E0 != -1) {
              goto LABEL_147;
            }
            goto LABEL_125;
          }

          sub_100085EF0();
        }

        sub_100085FB4();
        sub_100093460();
        sub_100086004();
LABEL_138:
        uint64_t v104 = &selRef_accountMediaType;
        goto LABEL_139;
      }

      sub_100093460();
    }

    sub_100086004();
  }

  swift_release(v32);
  object = v148;
  uint64_t v65 = *((void *)v148 + 2);
  if (!v65)
  {
LABEL_88:
    os_log_type_t v32 = v143;
    uint64_t v4 = 0xD000000000000015LL;
    uint64_t v39 = (unint64_t)"SKExternalPurchaseMultiLink";
    uint64_t v36 = (unint64_t)"SKExternalLinkAccount";
    sub_10012A674(42LL, 0xE100000000000000LL, (uint64_t)v38, &v169);
    if (*((void *)&v170 + 1))
    {
      if ((sub_10009369C( (uint64_t)&v167,  (uint64_t)&v169,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0) {
        goto LABEL_95;
      }
      id v100 = v142;
      URL.init(string:)(v167, *((void *)&v167 + 1));
      sub_100085EF0();
      uint64_t v101 = v158;
      if (sub_10007D824(v100, 1LL, v158) != 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 32))(v151, v100, v101);
        uint64_t v139 = sub_10007B1FC((uint64_t *)&unk_10032C510);
        uint64_t v140 = (__n128 *)sub_1000D4DEC(v139);
        sub_1000D4EC8(v140, (__n128)xmmword_10027A600);
        goto LABEL_123;
      }

      uint64_t v102 = (uint64_t *)&unk_10032A1C0;
      uint64_t v103 = (__int128 *)v100;
    }

    else
    {
      uint64_t v102 = (uint64_t *)&unk_100328ED0;
      uint64_t v103 = &v169;
    }

    sub_100087418((uint64_t)v103, v102);
LABEL_95:
    if (qword_100328B40 != -1) {
      goto LABEL_128;
    }
    goto LABEL_96;
  }

  unint64_t v146 = &v166;
  sub_10008600C();
  NSString v66 = (void **)(object + 40);
  sub_1000AB058();
  uint64_t v162 = v67;
  uint64_t v163 = v68;
  *(void *)&uint64_t v69 = 136446466LL;
  NSString v145 = v69;
  sub_1000AB058();
  uint64_t v150 = v70;
  sub_1000AB058();
  uint64_t v149 = v71;
  while (1)
  {
    uint64_t v73 = (uint64_t)*(v66 - 1);
    uint64_t v72 = *v66;
    uint64_t v74 = String.lowercased()();
    if (v38[2])
    {
      sub_10008600C();
      uint64_t v75 = sub_1000D4F24(v74._countAndFlagsBits, (uint64_t)v74._object);
      if ((v76 & 1) != 0)
      {
        sub_1000D4FB8(v38[7] + 32 * v75);
      }

      else
      {
        uint64_t v167 = 0u;
        uint64_t v168 = 0u;
      }
    }

    else
    {
      uint64_t v167 = 0u;
      uint64_t v168 = 0u;
      sub_10008600C();
    }

    sub_1000930DC();
    if (*((void *)&v168 + 1)) {
      break;
    }
    sub_100086004();
    sub_100087418((uint64_t)&v167, (uint64_t *)&unk_100328ED0);
LABEL_86:
    v66 += 2;
    if (!--v65)
    {
      object = v148;
      sub_100086004();
      goto LABEL_88;
    }
  }

  sub_1000853B0(&v167, &v169);
  sub_1000D4FB8((uint64_t)&v169);
  if (sub_10009369C((uint64_t)&v165, (uint64_t)&v167, v163, (uint64_t)&type metadata for String))
  {
    uint64_t v77 = (uint64_t)v165;
    uint64_t v78 = v166;
    URL.init(string:)(v165, v166);
    if (sub_10007D824(v39, 1LL, v158) != 1)
    {
      swift_bridgeObjectRelease(v78);
      sub_100086004();
      sub_1000D502C();
      (*(void (**)(char *, unint64_t, uint64_t))(v157 + 32))(v152, v39, v158);
      uint64_t v124 = sub_10007B1FC((uint64_t *)&unk_10032C510);
      uint64_t v125 = (__n128 *)sub_1000D4DEC(v124);
      sub_1000D4EC8(v125, (__n128)xmmword_10027A600);
      sub_1000D4FC0();
      goto LABEL_123;
    }

    sub_100087418(v39, (uint64_t *)&unk_10032A1C0);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_1000D4E8C(v159, (uint64_t)qword_10033E1A8);
    *(void *)&uint64_t v167 = 0LL;
    *((void *)&v167 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(*((void *)&v167 + 1));
    *(void *)&uint64_t v167 = 91LL;
    *((void *)&v167 + 1) = 0xE100000000000000LL;
    uint64_t v165 = (void *)sub_1000D4FAC();
    int64_t v166 = v79;
    unint64_t v80 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
    v81._countAndFlagsBits = String.init<A>(describing:)(&v165, v80);
    id v82 = v81._object;
    String.append(_:)(v81);
    swift_bridgeObjectRelease(v82);
    sub_100085F14();
    if ((_BYTE)v160)
    {
      else {
        uint64_t v83 = 0xD00000000000001BLL;
      }
      else {
        uint64_t v84 = v149;
      }
    }

    else
    {
      uint64_t v83 = 0xD000000000000016LL;
      uint64_t v84 = v147 | 0x8000000000000000LL;
    }

    uint64_t v86 = v84;
    String.append(_:)(*(Swift::String *)&v83);
    swift_bridgeObjectRelease(v84);
    v87._countAndFlagsBits = 46LL;
    v87._object = (void *)0xE100000000000000LL;
    String.append(_:)(v87);
    v88._countAndFlagsBits = v73;
    v88._object = v72;
    String.append(_:)(v88);
    sub_100086004();
    v89._countAndFlagsBits = 0xD000000000000015LL;
    v89._object = v162;
    String.append(_:)(v89);
    v90._countAndFlagsBits = v77;
    v90._object = v78;
    String.append(_:)(v90);
    uint64_t v91 = swift_bridgeObjectRelease(v78);
    uint64_t v92 = v167;
    static os_log_type_t.error.getter(v91);
    sub_100085EE8(*((uint64_t *)&v92 + 1));
    uint64_t v93 = (os_log_s *)sub_1000935A4();
    if (sub_1000D4CA4(v93))
    {
      uint64_t v94 = sub_10007B9FC(22LL);
      uint64_t v95 = sub_10007B9FC(64LL);
      uint64_t v161 = v92;
      uint64_t v96 = v95;
      *(void *)&uint64_t v167 = v95;
      *(_DWORD *)uint64_t v94 = v145;
      uint64_t v165 = (void *)sub_10007BA24(v95, v97, (uint64_t *)&v167);
      uint64_t v98 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v146, v94 + 4);
      *(_WORD *)(v94 + 12) = 2082;
      sub_10008600C();
      uint64_t v165 = (void *)sub_10007A488(v161, *((unint64_t *)&v92 + 1), (uint64_t *)&v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v98, v94 + 14);
      sub_100085E64(*((uint64_t *)&v92 + 1));
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&v167,  (os_log_type_t)v77,  "%{public}s%{public}s",  (uint8_t *)v94,  0x16u);
      sub_100086030(v96, v99, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v96);
      sub_10007B974(v94);
      sub_100086004();
    }

    else
    {

      sub_100085E64(*((uint64_t *)&v92 + 1));
    }

    uint64_t v39 = (unint64_t)v164;
    sub_1000D4F34();
    goto LABEL_85;
  }

  sub_100086004();
  sub_1000D4FB8((uint64_t)&v169);
  uint64_t v85 = sub_10007B1FC(&qword_10032A500);
  if (!sub_10009369C((uint64_t)&v165, (uint64_t)&v167, (uint64_t)&type metadata for Any + 8, v85))
  {
LABEL_85:
    sub_1000D4FC0();
    goto LABEL_86;
  }

  uint64_t v126 = v165;
  uint64_t v127 = v165[2];
  if (v127)
  {
    swift_bridgeObjectRetain(v165);
    int v128 = v126 + 5;
    uint64_t v129 = _swiftEmptyArrayStorage;
    uint64_t v130 = v158;
    id v131 = (uint64_t)v144;
    do
    {
      uint64_t v132 = *(v128 - 1);
      id v133 = *v128;
      sub_1000930E4();
      NSNumber v134 = v132;
      NSNumber v135 = (uint64_t)v155;
      URL.init(string:)(v134, v133);
      sub_1000930DC();
      if (sub_10007D824(v135, 1LL, v130) == 1)
      {
        sub_100087418(v135, (uint64_t *)&unk_10032A1C0);
      }

      else
      {
        sub_1000D500C(v131, v135);
        sub_1000D500C(v154, v131);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v129 = (void *)sub_1000D4FE8(0, v129[2] + 1LL);
        }
        uint64_t v137 = v129[2];
        uint64_t v136 = v129[3];
        if (v137 >= v136 >> 1) {
          uint64_t v129 = (void *)sub_1000D4FE8(v136 > 1, v137 + 1);
        }
        v129[2] = v137 + 1;
        uint64_t v138 = (uint64_t)v129
        uint64_t v130 = v158;
        sub_1000D500C(v138, v154);
      }

      v128 += 2;
      --v127;
    }

    while (v127);
    sub_10007B980();
  }

  sub_1000D4FC0();
  sub_10007B980();
  sub_1000D502C();
LABEL_123:
  sub_10007BA44();
LABEL_108:
  sub_100085E98();
}

LABEL_139:
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  *(void *)(v8 + 1024) = sub_100079604(*(void *)(v8 + 928), (uint64_t)qword_10033E1A8);
  unint64_t v146 = sub_10009C7DC();
  *(void *)(v8 + 1032) = v146;
  *(void *)(v8 + 1040) = v147;
  uint64_t v148 = (char *)sub_10009C2FC(v146, v104[163]);
  *(void *)(v8 + 104_Block_object_dispose(va, 8) = *(void *)&v148[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
  sub_10008618C();

  sub_10009C684();
  uint64_t v149 = (unint64_t *)swift_task_alloc(dword_10032A7DC);
  *(void *)(v8 + 1056) = v149;
  unint64_t *v149 = v8;
  v149[1] = (unint64_t)sub_100096C08;
  uint64_t v150 = sub_10009C228();
  return sub_1000AEA20(v150, v151, v152, v153, v154);
}

    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }

uint64_t sub_100096C08(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1056LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 888LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 880LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 872LL);
  *(void *)(*(void *)v1 + 1064LL) = a1;
  swift_task_dealloc(v2);
  sub_10007B980();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100093420();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_100096CC0()
{
  uint64_t v2 = *(void *)(v0 + 856);
  uint64_t v3 = *(void *)(v0 + 848);
  sub_100099018(*(void *)(v0 + 1064), *(id *)(v0 + 816), v3);
  *(void *)(v0 + 1072) = 0LL;
  swift_bridgeObjectRelease(*(void *)(v0 + 696));
  sub_10007B980();
  if (sub_10007D824(v3, 1LL, v2) == 1)
  {
    sub_100085298(*(void *)(v0 + 848), (uint64_t *)&unk_10032A280);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 864);
    uint64_t v5 = *(void *)(v0 + 856);
    sub_10009BDF8(*(void *)(v0 + 848), v4);
    uint64_t v6 = v4 + *(int *)(v5 + 36);
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7)
    {
      uint64_t v8 = *(void **)v6;
      sub_10009BE3C();
      sub_100085EE8(v7);
      id v9 = sub_100099168((uint64_t)v8, v7);
      uint64_t v10 = sub_10009BA5C(v9);
      if (v10)
      {
        unint64_t v11 = sub_1000991D8(v10);
        sub_10007B980();
        unint64_t v75 = v11;
        if (v11)
        {
          uint64_t v12 = *(os_log_s **)(v0 + 968);
          sub_10009BF04(*(void *)(v0 + 1024), (uint64_t)v12, type metadata accessor for SKLogger);
          uint64_t v13 = sub_10007A388(50LL);
          sub_10009C280(v13, v14);
          sub_10009C350((uint64_t)v8);
          uint64_t v15 = sub_1000930DC();
          id v16 = sub_10009C628(v15, "logKey");
          uint64_t v17 = sub_100086040((uint64_t)v16);
          sub_10009C674();
          static os_log_type_t.default.getter(v18);
          sub_100085EE8((uint64_t)v8);
          uint64_t v19 = sub_100085EE8(0x800000010029E910LL);
          NSString v20 = (os_log_s *)Logger.logObject.getter(v19);
          if (sub_10009C504(v20))
          {
            unsigned int v21 = (uint8_t *)sub_10007B9FC(22LL);
            uint64_t v71 = sub_10007B9FC(64LL);
            v76[0] = v71;
            *(_DWORD *)unsigned int v21 = 136446466;
            swift_bridgeObjectRetain(v8);
            uint64_t v22 = sub_10009C38C();
            sub_10009C280(v22, v23);
            sub_10009C378();
            v24._countAndFlagsBits = v17;
            v24._object = v8;
            String.append(_:)(v24);
            sub_100085F14();
            sub_100093460();
            *(void *)(v0 + 680) = sub_10008620C(0xD000000000000030LL, v25, v76);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v21 + 4);
            sub_10007B980();
            sub_10007D974((uint64_t)v8);
            sub_10009C54C();
            uint64_t v26 = sub_1000930E4();
            *(void *)(v0 + 68_Block_object_dispose(va, 8) = sub_10009C430( v26,  v27,  v76,  v28,  v29,  v30,  v31,  v32,  v69,  (uint64_t)(v21 + 4),  v0 + 680,  v71,  0xD000000000000030LL);
            sub_100086194(v0 + 688, v0 + 696);
            sub_100085E64(0x800000010029E910LL);
            sub_100086038((void *)&_mh_execute_header, v12, v1, "%{public}s%{public}s", v21);
            sub_10009BFA0(v33, v34, (uint64_t)&type metadata for Any + 8);
            sub_10007B974(v72);
            sub_10007B974((uint64_t)v21);

            sub_100093460();
            sub_1000930DC();
          }

          else
          {
            sub_100085E64((uint64_t)v8);
            sub_100085E64(0x800000010029E910LL);
          }

          Swift::String v37 = (_OWORD *)(v0 + 224);
          sub_100085BC4(*(void *)(v0 + 968), type metadata accessor for SKLogger);
          uint64_t v38 = 0LL;
          unint64_t v73 = v75 + 64;
          sub_10009BFFC();
          uint64_t v41 = v40 & v39;
          sub_10009C240();
          uint64_t v74 = v42;
          uint64_t v70 = v42 - 1;
          if (!v41) {
            goto LABEL_14;
          }
LABEL_12:
          sub_10009C774();
          uint64_t v44 = v43 | (v38 << 6);
LABEL_13:
          uint64_t v45 = (void *)(*(void *)(v75 + 48) + 16 * v44);
          uint64_t v46 = v45[1];
          *(void *)(v0 + 224) = *v45;
          *(void *)(v0 + 232) = v46;
          sub_10009C70C(v0 + 240, *(void *)(v75 + 56));
          swift_bridgeObjectRetain(v46);
          while (1)
          {
            sub_10009BF3C(v0 + 224, v0 + 176, &qword_10032A2A0);
            if (!*(void *)(v0 + 184))
            {
              uint64_t v35 = *(void *)(v0 + 864);
              swift_release(v75);
              goto LABEL_36;
            }

            uint64_t v53 = *(void **)(v0 + 992);
            sub_10009C654((_OWORD *)(v0 + 192));
            id v54 = sub_100085B44((void *)(v0 + 552), *(void *)(v0 + 576));
            uint64_t v55 = _bridgeAnythingToObjectiveC<A>(_:)(v54);
            sub_10009C630();
            NSString v56 = sub_10009C58C();
            sub_100086144();
            [v53 setParameter:v55 forKey:v56];

            swift_unknownObjectRelease(v55);
            if (v41) {
              goto LABEL_12;
            }
LABEL_14:
            if (__OFADD__(v38, 1LL)) {
              break;
            }
            sub_10009C47C();
            if (v48 != v49)
            {
              if (*(void *)(v73 + 8 * v47)) {
                goto LABEL_18;
              }
              uint64_t v38 = v47;
              if (v47 + 1 < v74)
              {
                if (*(void *)(v73 + 8 * (v47 + 1))) {
                  goto LABEL_18;
                }
                uint64_t v38 = v47 + 1;
                if (v47 + 2 < v74)
                {
                  if (*(void *)(v73 + 8 * (v47 + 2))) {
                    goto LABEL_18;
                  }
                  uint64_t v51 = v47 + 3;
                  uint64_t v38 = v47 + 2;
                  if (v47 + 3 < v74)
                  {
                    if (*(void *)(v73 + 8 * v51))
                    {
LABEL_18:
                      sub_10009C574();
                      uint64_t v38 = v50;
                      goto LABEL_13;
                    }

                    while (1)
                    {
                      if (__OFADD__(v51, 1LL)) {
                        __break(1u);
                      }
                      sub_10009C47C();
                      if (v48 == v49) {
                        break;
                      }
                      sub_10009C470();
                      if (v52) {
                        goto LABEL_18;
                      }
                    }

                    uint64_t v38 = v70;
                  }
                }
              }
            }

            uint64_t v41 = 0LL;
            *(_OWORD *)(v0 + 240) = 0u;
            *(_OWORD *)(v0 + 256) = 0u;
            *Swift::String v37 = 0u;
          }

          __break(1u);
          goto LABEL_43;
        }
      }

      uint64_t v35 = *(void *)(v0 + 864);
      sub_1000930DC();
LABEL_36:
      uint64_t v36 = v35;
    }

    else
    {
      uint64_t v36 = *(void *)(v0 + 864);
    }

    sub_100085BC4(v36, type metadata accessor for PurchaseIntentInternal);
  }

  uint64_t v57 = sub_10009BB30(*(void **)(v0 + 816), (SEL *)&selRef_winbackOfferIdentifier);
  if (v58)
  {
    Swift::String v37 = sub_10009C12C();
    sub_100085EF0();
    if (qword_1003289E0 == -1)
    {
LABEL_40:
      sub_1000875F4(*(id *)(v0 + 992), "setParameter:forKey:");

      goto LABEL_41;
    }

LABEL_41:
  uint64_t v59 = (char *)sub_10009C2FC(v57, "client");
  uint64_t v61 = *(void *)&v59[OBJC_IVAR____TtC9storekitd6Client_requestBundleID];
  uint64_t v60 = *(void *)&v59[OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8];
  *(void *)(v0 + 1080) = v60;
  sub_100085FEC();

  id v63 = sub_10009C2FC(v62, "productIdentifier");
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  uint64_t v66 = v65;

  *(void *)(v0 + 108_Block_object_dispose(va, 8) = v66;
  uint64_t v67 = (void *)swift_task_alloc(dword_10032A7B4);
  *(void *)(v0 + 1096) = v67;
  *uint64_t v67 = v0;
  v67[1] = sub_1000972F4;
  return sub_1000AECF0(v61, v60, v64, v66, *(void *)(v0 + 1032), *(void *)(v0 + 1040));
}

  __break(1u);
}

  __break(1u);
}

uint64_t sub_1000972F4()
{
  return sub_10009C2D4();
}

uint64_t sub_100097370()
{
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  NSString v4 = [v3 operatingSystem];
  if (!v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v4 = sub_10009C55C();
    sub_10007BA44();
  }

  if (qword_100328A38 == -1) {
    goto LABEL_4;
  }
LABEL_68:
  swift_once(&qword_100328A38, sub_100094528);
LABEL_4:
  sub_10009C2F4(*(id *)(v0 + 992), "setParameter:forKey:");

  NSString v6 = sub_1000936AC(v5, "productVersion");
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v6 = sub_10009C55C();
    sub_10007BA44();
  }

  if (qword_100328A48 != -1) {
    swift_once(&qword_100328A48, sub_100094588);
  }
  sub_10009C2F4(*(id *)(v0 + 992), "setParameter:forKey:");

  NSString v8 = sub_1000936AC(v7, "buildVersion");
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v8 = sub_10009C55C();
    sub_10007BA44();
  }

  if (qword_100328A40 != -1) {
    swift_once(&qword_100328A40, sub_10009454C);
  }
  sub_10009C2F4(*(id *)(v0 + 992), "setParameter:forKey:");

  sub_1000CFCAC(v3);
  if (v9)
  {
    sub_10009C55C();
    sub_10007BA44();
  }

  if (qword_100328A18 != -1) {
    swift_once(&qword_100328A18, sub_100094450);
  }
  sub_10009C2F4(*(id *)(v0 + 992), "setParameter:forKey:");
  sub_10009C5A4();
  sub_10009BB30(v3, (SEL *)&selRef_sk_hardwareFamily);
  if (v10)
  {
    sub_10009C12C();
    sub_100085EF0();
  }

  if (qword_100328A10 != -1) {
    swift_once(&qword_100328A10, sub_100094414);
  }
  uint64_t v11 = *(void *)(v0 + 1072);
  uint64_t v12 = *(void *)(v0 + 840);
  uint64_t v13 = *(void *)(v0 + 832);
  uint64_t v14 = *(void *)(v0 + 824);
  id v15 = *(id *)(v0 + 816);
  sub_1000875F4(*(id *)(v0 + 992), "setParameter:forKey:");
  sub_1000931C0();
  id v16 = [v15 client];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))( v12,  (uint64_t)v16 + OBJC_IVAR____TtC9storekitd6Client_callerBundleURL,  v14);

  id v17 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  id v18 = sub_1000E80D4(v12, 0);
  if (v11)
  {
    uint64_t v19 = v11;
LABEL_22:
    sub_10009BF04(*(void *)(v0 + 1024), *(void *)(v0 + 936), type metadata accessor for SKLogger);
    *(void *)(v0 + 64_Block_object_dispose(va, 8) = sub_10007A388(29LL);
    *(void *)(v0 + 656) = v20;
    sub_100085F08(0xD00000000000001BLL, (uint64_t)"Error getting store cohort ");
    *(void *)(v0 + 784) = v19;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v21 = sub_10009C714();
    uint64_t v23 = _print_unlocked<A, B>(_:_:)(v21, v22);
    uint64_t v91 = *(void *)(v0 + 648);
    unint64_t v24 = *(void *)(v0 + 656);
    id v25 = sub_10009C324(v23, "logKey");
    uint64_t v26 = sub_100086040((uint64_t)v25);
    sub_10009C3EC();
    static os_log_type_t.error.getter(v27);
    sub_100085EE8((uint64_t)v15);
    uint64_t v28 = sub_100085EE8(v24);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    if (sub_10009C504(v29))
    {
      uint64_t v30 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v31 = sub_10007B9FC(64LL);
      v96[0] = v31;
      *(_DWORD *)uint64_t v30 = 136446466;
      sub_1000930E4();
      uint64_t v32 = sub_10009C38C();
      sub_10009C280(v32, v33);
      sub_10009C378();
      sub_10009C350(v26);
      sub_100085F14();
      sub_1000930DC();
      *(void *)(v0 + 776) = sub_10008620C(v95, v34, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 784, v30 + 4);
      sub_10007B980();
      sub_10007D974((uint64_t)v15);
      sub_10009C54C();
      sub_100085FEC();
      *(void *)(v0 + 72_Block_object_dispose(va, 8) = sub_10007A488(v91, v24, v96);
      sub_100086194(v0 + 728, v0 + 736);
      sub_100085E64(v24);
      sub_100086038((void *)&_mh_execute_header, (os_log_s *)v1, (os_log_type_t)v2, "%{public}s%{public}s", v30);
      swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
      sub_10007B974(v31);
      sub_10007B974((uint64_t)v30);

      sub_1000930DC();
      sub_100085EF0();
    }

    else
    {
      sub_100085E64((uint64_t)v15);
      sub_100085E64(v24);
    }

    swift_errorRelease(v19);
    uint64_t v35 = *(void *)(v0 + 936);
    goto LABEL_26;
  }

  NSString v4 = v18;
  id v15 = [v18 iTunesMetadata];
  *(void *)(v0 + 720) = 0LL;
  uint64_t v3 = [v15 storeCohortWithError:v0 + 720];

  unint64_t v1 = *(void *)(v0 + 720);
  if (!v3)
  {
    id v65 = (id)v1;
    uint64_t v19 = _convertNSErrorToError(_:)(v1);

    swift_willThrow(v66, v67, v68, v69, v70, v71, v72);
    goto LABEL_22;
  }

  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v62 = v61;
  id v63 = (id)v1;
  sub_100093460();
  uint64_t v64 = HIBYTE(v62) & 0xF;
  if ((v62 & 0x2000000000000000LL) == 0) {
    uint64_t v64 = v60 & 0xFFFFFFFFFFFFLL;
  }
  if (v64)
  {
    if (qword_100328A70 != -1) {
      goto LABEL_70;
    }
    goto LABEL_61;
  }

  uint64_t v73 = *(void *)(v0 + 1024);
  uint64_t v74 = *(void **)(v0 + 816);

  sub_10009C5F4(v73, v75, type metadata accessor for SKLogger);
  uint64_t v76 = sub_100086040((uint64_t)[v74 logKey]);
  sub_10009C3EC();
  LOBYTE(v73) = static os_log_type_t.info.getter();
  sub_100085EE8((uint64_t)v74);
  uint64_t v77 = (os_log_s *)sub_10009C5AC();
  os_log_type_t v78 = v73;
  if (os_log_type_enabled(v77, (os_log_type_t)v73))
  {
    LOBYTE(v2) = v0 - 56;
    uint64_t v79 = sub_10007B9FC(22LL);
    uint64_t v94 = sub_10007B9FC(64LL);
    v96[0] = v94;
    *(_DWORD *)uint64_t v79 = 136446466;
    sub_1000930E4();
    uint64_t v80 = sub_10009C38C();
    sub_10009C280(v80, v81);
    sub_10009C378();
    sub_10009C350(v76);
    sub_100085F14();
    sub_1000930DC();
    *(void *)(v0 + 712) = sub_10008620C(v95, v82, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 712, v0 + 720, v79 + 4);
    sub_10007B980();
    sub_10007D974((uint64_t)v74);
    *(_WORD *)(v79 + 12) = 2082;
    *(void *)(v0 + 704) = sub_10007A488(0xD000000000000015LL, 0x800000010029E8F0LL, v96);
    sub_100086194(v0 + 704, v0 + 712);
    sub_100086038((void *)&_mh_execute_header, v77, v78, "%{public}s%{public}s", (uint8_t *)v79);
    sub_10009BFA0(v83, v84, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v94);
    sub_10007B974(v79);

    sub_1000930DC();
  }

  else
  {
    sub_100085E64((uint64_t)v74);
  }

  uint64_t v35 = *(void *)(v0 + 960);
LABEL_26:
  sub_100085BC4(v35, type metadata accessor for SKLogger);
LABEL_27:
  sub_10009BAD0(*(void **)(v0 + 816), (SEL *)&selRef_additionalBuyParams);
  if (!v36) {
    goto LABEL_55;
  }
  uint64_t v3 = v36;
  NSString v4 = 0LL;
  uint64_t v86 = v36 + 8;
  sub_10009BFFC();
  unint64_t v1 = v38 & v37;
  sub_10009C240();
  uint64_t v88 = v39;
  uint64_t v85 = (void *)(v39 - 1);
  if (v1)
  {
LABEL_29:
    unint64_t v40 = __clz(__rbit64(v1));
    v1 &= v1 - 1;
    unint64_t v41 = v40 | ((void)v4 << 6);
LABEL_30:
    uint64_t v42 = (void *)(v3[6] + 16 * v41);
    uint64_t v43 = v42[1];
    *(void *)(v0 + 272) = *v42;
    *(void *)(v0 + 280) = v43;
    sub_10007B1C0(v3[7] + 32 * v41, v0 + 288);
    sub_10007BA3C();
    goto LABEL_41;
  }

  while (1)
  {
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_68;
    }

    sub_10009C47C();
    if (v45 != v46)
    {
      if (v86[v44]) {
        goto LABEL_35;
      }
      NSString v4 = (NSString)(v44 + 1);
      if (v44 + 1 >= v88)
      {
        NSString v4 = (NSString)v44;
      }

      else
      {
        if (v86[(void)v4]) {
          goto LABEL_35;
        }
        if (v44 + 2 < v88)
        {
          if (v86[v44 + 2]) {
            goto LABEL_35;
          }
          uint64_t v54 = v44 + 3;
          if (v44 + 3 < v88)
          {
            if (v86[v54])
            {
LABEL_35:
              sub_10009C394();
              unint64_t v1 = v48 & v47;
              unint64_t v41 = v50 + ((void)v49 << 6);
              NSString v4 = v49;
              goto LABEL_30;
            }

            while (!__OFADD__(v54, 1LL))
            {
              sub_10009C47C();
              if (v45 == v46)
              {
                NSString v4 = v85;
                goto LABEL_40;
              }

              sub_10009C470();
              if (v55) {
                goto LABEL_35;
              }
            }

            __break(1u);
LABEL_70:
            swift_once(&qword_100328A70, sub_100094690);
LABEL_61:
            sub_1000875F4(*(id *)(v0 + 992), "setParameter:forKey:");

            goto LABEL_27;
          }

          NSString v4 = (NSString)(v44 + 2);
        }
      }
    }

uint64_t sub_100097E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v175 = (uint64_t)(v7 + 95);
  uint64_t v177 = v7 + 65;
  uint64_t v169 = v7 + 99;
  uint64_t v8 = v7[127];
  uint64_t v9 = (void *)v7[126];
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  uint64_t v10 = (void *)_convertErrorToNSError(_:)(v8);
  uint64_t v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
  sub_1000D67E8(v11, v12, (id)0xCC);
  char v14 = v13;

  sub_100085EF0();
  uint64_t v178 = v7;
  if ((v14 & 1) != 0)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v15 = v7[125];
    uint64_t v16 = sub_100079604(v7[116], (uint64_t)qword_10033E1A8);
    sub_10009C3E4(v16, v17, type metadata accessor for SKLogger);
    *(void *)&v179[0] = 0LL;
    *((void *)&v179[0] + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(58LL);
    v18._object = (void *)0x800000010029E9B0LL;
    v18._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v18);
    v19._countAndFlagsBits = Dictionary.Keys.description.getter(v15, &type metadata for String);
    String.append(_:)(v19);
    sub_10007BA44();
    sub_100086144();
    v20._countAndFlagsBits = 0xD00000000000001DLL;
    v20._object = (void *)0x800000010029E9D0LL;
    String.append(_:)(v20);
    __int128 v21 = v179[0];
    id v23 = sub_10009C324(v22, "logKey");
    uint64_t v170 = sub_100086040((uint64_t)v23);
    id v25 = v24;

    static os_log_type_t.default.getter(v26);
    sub_100085EE8((uint64_t)v25);
    sub_100085EE8(*((uint64_t *)&v21 + 1));
    uint64_t v27 = (os_log_s *)sub_1000935A4();
    BOOL v28 = sub_10009C6B0(v27);
    uint64_t v29 = v7[127];
    if (v28)
    {
      uint64_t v30 = sub_10007B9FC(22LL);
      uint64_t v31 = sub_10007B9FC(64LL);
      v180[0] = v31;
      *(_DWORD *)uint64_t v30 = 136446466;
      swift_bridgeObjectRetain(v25);
      uint64_t v32 = sub_10009C38C();
      sub_10009C280(v32, v33);
      *(void *)&v179[0] = 91LL;
      *((void *)&v179[0] + 1) = 0xE100000000000000LL;
      v34._countAndFlagsBits = v170;
      v34._object = v25;
      String.append(_:)(v34);
      sub_100085F14();
      swift_bridgeObjectRelease(v25);
      v7[95] = sub_10008620C(*(uint64_t *)&v179[0], v35, v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v175, v7 + 96, v30 + 4);
      sub_10007D974((uint64_t)v25);
      sub_10007B980();
      *(_WORD *)(v30 + 12) = 2082;
      sub_10007BA3C();
      v7[96] = sub_100086308(v21, v36, v180);
      sub_100086194((uint64_t)(v7 + 96), (uint64_t)(v7 + 97));
      sub_100085E64(*((uint64_t *)&v21 + 1));
      sub_100086038( (void *)&_mh_execute_header,  v27,  (os_log_type_t)&selRef_initWithOptions_,  "%{public}s%{public}s",  (uint8_t *)v30);
      sub_10009C68C( v31,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v165,  v21,  v29,  (uint64_t)(v7 + 79),  (uint64_t)v169,  v170,  (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v31);
      sub_10007B974(v30);

      uint64_t v44 = v166;
    }

    else
    {

      sub_10007D974(*((uint64_t *)&v21 + 1));
      sub_10007D974((uint64_t)v25);
      uint64_t v44 = v29;
    }

    swift_errorRelease(v44);
    sub_10007BA44();
    swift_bridgeObjectRelease(v25);
    char v46 = v7 + 119;
  }

  else
  {
    swift_bridgeObjectRelease(v7[125]);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v45 = v7[127];
    char v46 = v7 + 118;
    uint64_t v47 = sub_100079604(v7[116], (uint64_t)qword_10033E1A8);
    sub_10009C3E4(v47, v48, type metadata accessor for SKLogger);
    v7[77] = sub_10007A388(46LL);
    v7[78] = v49;
    sub_100085F08(0xD00000000000002CLL, (uint64_t)"Could not get custom buy params allow-list: ");
    v7[92] = v45;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v50 = sub_10009C7C4();
    uint64_t v52 = _print_unlocked<A, B>(_:_:)(v50, v51);
    uint64_t v171 = v7[77];
    uint64_t v53 = v7[78];
    id v54 = sub_10009C628(v52, "logKey");
    uint64_t v55 = sub_100086040((uint64_t)v54);
    uint64_t v56 = v7;
    uint64_t v58 = v57;

    os_log_type_t v60 = static os_log_type_t.error.getter(v59);
    sub_100085EE8(v58);
    sub_100085EE8(v53);
    unint64_t v61 = (os_log_s *)sub_1000935A4();
    os_log_type_t v62 = v60;
    BOOL v63 = os_log_type_enabled(v61, v60);
    uint64_t v64 = v56[127];
    if (v63)
    {
      uint64_t v65 = v55;
      uint64_t v66 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v167 = sub_10007B9FC(64LL);
      v180[0] = v167;
      *(_DWORD *)uint64_t v66 = 136446466;
      uint64_t v165 = (uint64_t)(v66 + 4);
      swift_bridgeObjectRetain(v58);
      uint64_t v67 = sub_10009C38C();
      sub_10009C280(v67, v68);
      *(void *)&v179[0] = 91LL;
      *((void *)&v179[0] + 1) = 0xE100000000000000LL;
      sub_100086114(v65);
      sub_100085F14();
      sub_100086144();
      v56[93] = sub_10008620C(91LL, v69, v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56 + 93, v56 + 94, v66 + 4);
      sub_10007D974(v58);
      sub_10007B980();
      sub_10009BFBC();
      v56[94] = sub_100086308(v171, v70, v180);
      sub_100086194((uint64_t)(v56 + 94), v175);
      sub_100085E64(v53);
      sub_100086038((void *)&_mh_execute_header, v61, v62, "%{public}s%{public}s", v66);
      sub_10009BFA0(v71, v72, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v167);
      sub_10007B974((uint64_t)v66);
    }

    else
    {

      sub_10007D974(v53);
      sub_10007D974(v58);
    }

    swift_errorRelease(v64);
    sub_10007BA44();
    sub_100086144();
    uint64_t v7 = v56;
  }

  uint64_t v73 = (uint64_t)(v7 + 46);
  uint64_t v74 = (void **)(v7 + 51);
  sub_100085BC4(*v46, type metadata accessor for SKLogger);
  uint64_t v75 = v7[115];
  uint64_t v76 = (void *)v7[102];
  id v78 = sub_10009C324(v77, "client");
  uint64_t v79 = (void *)([v76 excludeReceiptFromRequest] ^ 1);
  sub_10009C314(v75);
  sub_1000DED8C();
  uint64_t v81 = v80;

  sub_100085298(v75, (uint64_t *)&unk_10032A1C0);
  v7[87] = v81;
  memset(v179, 0, sizeof(v179));
  sub_10012A958((uint64_t)v179, @"appDsid");
  uint64_t v82 = (void *)v7[87];
  uint64_t v172 = v82 + 8;
  sub_10009BFFC();
  unint64_t v85 = v84 & v83;
  sub_10009C240();
  uint64_t v174 = (uint64_t)(v7 + 47);
  uint64_t v176 = v7 + 52;
  uint64_t v173 = v86;
  uint64_t v168 = v86 - 1;
  sub_10009C738();
  uint64_t v87 = 0LL;
  if (!v85) {
    goto LABEL_19;
  }
LABEL_17:
  unint64_t v90 = __clz(__rbit64(v85));
  v85 &= v85 - 1;
  unint64_t v91 = v90 | (v87 << 6);
LABEL_18:
  uint64_t v92 = *(void **)(v82[6] + 8 * v91);
  *(void *)uint64_t v73 = v92;
  sub_10007B1C0(v82[7] + 32 * v91, v174);
  id v93 = v92;
  while (1)
  {
    sub_10009BF3C(v73, (uint64_t)v74, (uint64_t *)&unk_10032A290);
    uint64_t v102 = *v74;
    if (!*v74) {
      break;
    }
    uint64_t v79 = (void *)v178[124];
    sub_1000853B0(v176, v177);
    uint64_t v88 = sub_100085B44(v177, v178[68]);
    char v46 = (uint64_t *)_bridgeAnythingToObjectiveC<A>(_:)(v88);
    sub_10007B1A0(v177);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
    NSString v89 = sub_10009C210();
    sub_100086004();
    [v79 setParameter:v46 forKey:v89];

    swift_unknownObjectRelease(v46);
    if (v85) {
      goto LABEL_17;
    }
LABEL_19:
    uint64_t v94 = v87 + 1;
    if (__OFADD__(v87, 1LL))
    {
      __break(1u);
      goto LABEL_116;
    }

    if (v94 < v173)
    {
      if (v172[v94]) {
        goto LABEL_22;
      }
      uint64_t v99 = v87 + 2;
      ++v87;
      if (v94 + 1 < v173)
      {
        if (v172[v99]) {
          goto LABEL_22;
        }
        uint64_t v87 = v94 + 1;
        if (v94 + 2 < v173)
        {
          if (v172[v94 + 2]) {
            goto LABEL_22;
          }
          uint64_t v100 = v94 + 3;
          uint64_t v87 = v94 + 2;
          if (v94 + 3 < v173)
          {
            if (v172[v100])
            {
LABEL_22:
              sub_10009C394();
              unint64_t v85 = v96 & v95;
              unint64_t v91 = v98 + (v97 << 6);
              uint64_t v87 = v97;
              goto LABEL_18;
            }

            while (!__OFADD__(v100, 1LL))
            {
              if (v100 + 1 >= v173)
              {
                uint64_t v87 = v168;
                goto LABEL_35;
              }

              sub_10009C470();
              if (v101) {
                goto LABEL_22;
              }
            }

            __break(1u);
LABEL_118:
            swift_once(&qword_1003289E0, sub_1000942C8);
LABEL_97:
            sub_10009C668((void *)v178[124]);

            NSString v148 = sub_10009C760();
            sub_100093460();
            if (qword_1003289E8 != -1) {
              swift_once(&qword_1003289E8, sub_100094300);
            }
            sub_10009C65C((void *)v178[124]);

            NSString v149 = sub_10009C400();
            sub_100085FB4();
            if (qword_1003289F0 != -1) {
              swift_once(&qword_1003289F0, sub_100094334);
            }
            objc_msgSend((id)v178[124], "setParameter:forKey:", v149, qword_10032A100, v165);

            NSString v150 = sub_10009C7F0();
            sub_100085EF0();
            uint64_t v107 = &selRef_accountMediaType;
            if (qword_1003289F8 != -1) {
              swift_once(&qword_1003289F8, sub_100094368);
            }
            sub_10009368C((id)v178[124], "setParameter:forKey:");

            uint64_t v151 = v82;
            sub_10009C76C((uint64_t)[v151 description]);
            sub_10009C6A0();

            NSString v152 = sub_10009C488();
            sub_10007BA44();
            if (qword_100328A00 != -1) {
              swift_once(&qword_100328A00, sub_1000943A4);
            }
            sub_10009C2F4((id)v178[124], "setParameter:forKey:");

            goto LABEL_112;
          }
        }
      }
    }

uint64_t sub_100098FC4(uint64_t result, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4) {
    return sub_100121AC4(v4, a4);
  }
  if (a2) {
    return sub_100129E0C(v4, a2, a3);
  }
  __break(1u);
  return result;
}

void sub_100099018(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v22 = type metadata accessor for PurchaseIntentInternal(0LL);
    uint64_t v6 = *(void *)(v22 - 8);
    unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v8 = *(void *)(v6 + 72);
    uint64_t v9 = a1 + v7 + v8 * (v4 - 1);
    uint64_t v10 = -v8;
    while (1)
    {
      uint64_t v12 = *(void *)(v9 + 32);
      uint64_t v11 = *(void *)(v9 + 40);
      id v13 = objc_msgSend(a2, "productIdentifier", v22);
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v16 = v15;

      if (v12 == v14 && v11 == v16) {
        break;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v14, v16, 0LL);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0) {
        goto LABEL_11;
      }
      v9 += v10;
      if (!--v4) {
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease(v11);
LABEL_11:
    sub_10009BF04(v9, a3, type metadata accessor for PurchaseIntentInternal);
    uint64_t v20 = a3;
    uint64_t v21 = 0LL;
    uint64_t v19 = v22;
  }

  else
  {
LABEL_9:
    uint64_t v19 = type metadata accessor for PurchaseIntentInternal(0LL);
    uint64_t v20 = a3;
    uint64_t v21 = 1LL;
  }

  sub_10007D0AC(v20, v21, 1LL, v19);
}

id sub_100099168(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithString:v5];

  return v6;
}

unint64_t sub_1000991D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10007B1FC(&qword_10032A2B0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  sub_1001330F4(v45, a1);
  uint64_t v4 = v45[0];
  uint64_t v5 = v45[3];
  int64_t v32 = (unint64_t)(v45[2] + 64LL) >> 6;
  uint64_t v33 = v45[1];
  unint64_t v6 = v45[4];
  unint64_t v7 = &__src[40];
  uint64_t v8 = &__dst[40];
  uint64_t v9 = &v39;
  uint64_t v10 = &v41;
  unint64_t result = swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v34 = (v6 - 1) & v6;
  int64_t v35 = v5;
  for (unint64_t i = __clz(__rbit64(v6)) | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    sub_10009BEC0(*(void *)(v4 + 48) + 40 * i, (uint64_t)__src);
    sub_10007B1C0(*(void *)(v4 + 56) + 32 * i, (uint64_t)v7);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10009BEC0((uint64_t)__dst, (uint64_t)v38);
    if (!swift_dynamicCast(&v36, v38, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      uint64_t v36 = 0LL;
      uint64_t v37 = 0LL;
      sub_100085298((uint64_t)__dst, &qword_10032A2B8);
      swift_bridgeObjectRelease(v37);
      sub_10009BEFC(v4);
      swift_release(v3);
      return 0LL;
    }

    uint64_t v17 = v36;
    uint64_t v18 = v37;
    sub_10007B1C0((uint64_t)v8, (uint64_t)v38);
    sub_100085298((uint64_t)__dst, &qword_10032A2B8);
    sub_1000853B0(v38, v9);
    *(void *)&__int128 v40 = v17;
    *((void *)&v40 + 1) = v18;
    sub_1000853B0(v9, v10);
    __int128 v19 = v40;
    sub_1000853B0(v10, v42);
    sub_1000853B0(v42, &v40);
    unint64_t result = sub_100132130(v19, *((uint64_t *)&v19 + 1));
    unint64_t v20 = result;
    if ((v21 & 1) != 0)
    {
      uint64_t v22 = v10;
      id v23 = v9;
      unint64_t v24 = v8;
      uint64_t v25 = v4;
      uint64_t v26 = v7;
      uint64_t v27 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(void *)(v27 + 8));
      *(_OWORD *)uint64_t v27 = v19;
      unint64_t v7 = v26;
      uint64_t v4 = v25;
      uint64_t v8 = v24;
      uint64_t v9 = v23;
      uint64_t v10 = v22;
      BOOL v28 = (void *)(v3[7] + 32 * v20);
      sub_10007B1A0(v28);
      unint64_t result = (unint64_t)sub_1000853B0(&v40, v28);
      goto LABEL_28;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    unint64_t result = (unint64_t)sub_1000853B0(&v40, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v29 = v3[2];
    BOOL v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_34;
    }
    v3[2] = v31;
LABEL_28:
    unint64_t v6 = v34;
    uint64_t v5 = v35;
    if (v34) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_35;
    }
    if (v13 >= v32) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v33 + 8 * v13);
    int64_t v15 = v5 + 1;
    if (!v14)
    {
      int64_t v15 = v5 + 2;
      if (v5 + 2 >= v32) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v5 + 3;
        if (v5 + 3 >= v32) {
          goto LABEL_31;
        }
        unint64_t v14 = *(void *)(v33 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v5 + 4;
          if (v5 + 4 >= v32) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v33 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v5 + 5;
            if (v5 + 5 >= v32) {
              goto LABEL_31;
            }
            unint64_t v14 = *(void *)(v33 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v5 + 6;
              while (v16 < v32)
              {
                unint64_t v14 = *(void *)(v33 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_21;
                }
              }

uint64_t sub_100099600(char a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = dword_10032A27C;
  a3;
  unint64_t v7 = (void *)swift_task_alloc(v6);
  v3[4] = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_100099674;
  return sub_100094944(a1);
}

uint64_t sub_100099674(void *a1)
{
  uint64_t v4 = (const void *)v3[3];
  uint64_t v5 = (void *)v3[2];
  sub_10008750C(v3[4]);

  uint64_t v6 = sub_10009C714();
  v7(v6);
  _Block_release(v4);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t InAppTransactionTask.purchase(_:handle:)(uint64_t a1, uint64_t a2)
{
  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  uint64_t v4 = sub_100086224();
  v3[27] = v4;
  v3[28] = sub_10009BFD0(*(void *)(v4 - 8));
  v3[29] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  uint64_t v4 = sub_100086224();
  v3[27] = v4;
  v3[28] = sub_10009BFD0(*(void *)(v4 - 8));
  v3[29] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  uint64_t v4 = type metadata accessor for Client.Server(0LL);
  v3[31] = sub_10009BFAC(*(void *)(v4 - 8));
  uint64_t v5 = sub_100086224();
  v3[32] = v5;
  v3[33] = sub_10009BFD0(*(void *)(v5 - 8));
  v3[34] = sub_100093010();
  v3[35] = sub_100093010();
  uint64_t v6 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  v3[36] = sub_10009BFAC(*(void *)(v6 - 8));
  unint64_t v7 = type metadata accessor for URL(0LL);
  v3[37] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[38] = v8;
  v3[39] = sub_10009BFD0(v8);
  v3[40] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

#error "100099A58: call analysis failed (funcsize=269)"
uint64_t sub_100099BE8()
{
  sub_10009C3BC();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_100099C24(uint64_t a1, void *a2, void *a3)
{
  return sub_10009B9B0( a1,  a2,  a3,  (uint64_t (*)(void, void *))sub_100121AC4,  (uint64_t (*)(void, void *))sub_100129E34);
}

uint64_t sub_100099C4C(void *a1, void *a2, void *aBlock, void *a4)
{
  void v4[3] = a2;
  void v4[4] = a4;
  void v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_10032A19C;
  id v9 = a1;
  id v10 = a2;
  a4;
  uint64_t v11 = (void *)swift_task_alloc(v8);
  void v4[6] = v11;
  void *v11 = v4;
  v11[1] = sub_10009BF7C;
  return InAppTransactionTask.purchase(_:handle:)((uint64_t)v9, (uint64_t)v10);
}

#error "10009A02C: call analysis failed (funcsize=269)"
uint64_t sub_10009A1BC()
{
  sub_10009C3BC();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10009A1F8()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_unknownObjectRelease(*(void *)(v0 + 240));
  uint64_t v2 = *(void *)(v0 + 152);
  swift_task_dealloc(v1);
  sub_1000931C8();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_10009A24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10009C2E4(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_10009A29C(void *a1, void *a2, void *aBlock, void *a4)
{
  void v4[3] = a2;
  void v4[4] = a4;
  void v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_10032A1B4;
  id v9 = a1;
  id v10 = a2;
  a4;
  uint64_t v11 = (void *)swift_task_alloc(v8);
  void v4[6] = v11;
  void *v11 = v4;
  v11[1] = sub_10009A32C;
  return InAppTransactionTask.purchase(_:handle:)((uint64_t)v9, (uint64_t)v10);
}

uint64_t sub_10009A32C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void **)v2;
  unint64_t v14 = v5;
  uint64_t v7 = (void *)v5[3];
  uint64_t v6 = (void *)v5[4];
  uint64_t v8 = (void *)v5[2];
  sub_10009C788(v5[6], &v14);

  id v9 = (void (**)(void, void, void))v5[5];
  if (v3)
  {
    id v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v9)[2](v9, 0LL, v10);

    _Block_release(v9);
  }

  else
  {
    uint64_t v11 = sub_10009C7C4();
    v12(v11);
    _Block_release(v9);
  }

  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10009A494()
{
  uint64_t v158 = v6;
  uint64_t v159 = v7;
  uint64_t v157 = v0;
  id v8 = [*(id *)(v0 + 232) URL];
  if (v8)
  {
    id v9 = v8;
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 312);
    uint64_t v1 = *(void *)(v0 + 288);
    uint64_t v12 = *(void *)(v0 + 296);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v2(v1, v10, v12);
    sub_10007D0AC(v1, 0LL, 1LL, v12);
    if (sub_10007D824(v1, 1LL, v12) != 1)
    {
      int64_t v13 = *(void **)(v0 + 240);
      uint64_t v14 = ((uint64_t (*)(void, void, void))v2)( *(void *)(v0 + 320),  *(void *)(v0 + 288),  *(void *)(v0 + 296));
      id v15 = sub_1000936AC(v14, "client");
      sub_10009C4C8();
      uint64_t v17 = v16;
      *(void *)(v0 + 32_Block_object_dispose(va, 8) = v16;

      NSString v150 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10032A1D0 + dword_10032A1D0);
      uint64_t v18 = (void *)swift_task_alloc(unk_10032A1D4);
      *(void *)(v0 + 336) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_10009AAA0;
      return v150(*(void *)(v0 + 320), v17);
    }
  }

  else
  {
    sub_10007D0AC(*(void *)(v0 + 288), 1LL, 1LL, *(void *)(v0 + 296));
  }

  sub_100085298(*(void *)(v0 + 288), (uint64_t *)&unk_10032A1C0);
  id v20 = [*(id *)(v0 + 240) dialogContext];
  *(void *)(v0 + 352) = v20;
  if (v20)
  {
    sub_10009C534();
    if (!v21) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v22 = sub_10009C33C();
    uint64_t v23 = sub_100079604(v22, (uint64_t)qword_10033E1A8);
    sub_10009C5F4(v23, v24, type metadata accessor for SKLogger);
    sub_10009C1EC();
    sub_10009C4A8(v25, v26, v27, v28, v29, v30, v31, v32, v125, v131, v136, v143, v149, v154, v155, v156);
    sub_10009C60C();
    *(void *)(v0 + 136) = sub_10009C40C(v33, (SEL *)&selRef_logUUID);
    *(void *)(v0 + 144) = v34;
    uint64_t v35 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
    v160._countAndFlagsBits = sub_10009C4E8(v35);
    sub_10009C048(v160);
    uint64_t v36 = sub_100085FB4();
    uint64_t v37 = v156;
    id v38 = sub_100093DE4(v36, "logKey");
    sub_100086040((uint64_t)v38);
    sub_10009C3EC();
    uint64_t v40 = static os_log_type_t.default.getter(v39);
    sub_100085EE8((uint64_t)v2);
    sub_100085EE8(v156);
    uint64_t v41 = (os_log_s *)sub_10009C5AC();
    if (sub_10009C304(v41))
    {
      uint64_t v144 = v4;
      uint64_t v42 = sub_10007B9FC(22LL);
      uint64_t v137 = sub_10007B9FC(64LL);
      int v43 = sub_10009C024(4.8752e-34);
      sub_100093CBC(v43, v44, v45, v46, v47, v48, v49, v50, v126, v0 + 192, v137, v144, v155, v154, v155);
      sub_100085F14();
      uint64_t v51 = sub_1000930DC();
      uint64_t v59 = sub_10009BF90(v51, v52, v53, v54, v55, v56, v57, v58, v127, v132, v138, v145, v151, v154, v155, v156);
      sub_10009C0E0(v59, v60, v61, v62, v63, v64, v65, v66, v128, v133);
      sub_10007B980();
      sub_10007D974((uint64_t)v2);
      *(_WORD *)(v42 + 12) = 2082;
      uint64_t v67 = sub_10008618C();
      *(void *)(v0 + 192) = sub_10009C298(v67, v68, v69, v70, v71);
      sub_100086194(v40, v0 + 200);
      sub_100085E64(v37);
      sub_100086038((void *)&_mh_execute_header, v3, v5, "%{public}s%{public}s", (uint8_t *)v42);
      sub_10009BFA0(v72, v73, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v139);
      sub_10007B974(v42);

      sub_1000930DC();
      sub_100085FB4();
    }

    else
    {
      sub_100085E64((uint64_t)v2);
      sub_100085E64(v156);
    }

    char v113 = *(void **)(v0 + 240);
    sub_100085BC4(*(void *)(v0 + 272), type metadata accessor for SKLogger);
    id v115 = sub_1000936AC(v114, "client");
    sub_10009C4D0();

    uint64_t v116 = sub_10007B1FC(&qword_10032A028);
    if (sub_10009C250(v116))
    {
      sub_100085BC4(*(void *)(v0 + 248), type metadata accessor for Client.Server);
    }

    else
    {
      uint64_t v117 = sub_10009C194();
      sub_1000931E4(v117, "setAccount:");
    }

    id v118 = sub_10009C180();
    sub_10009C4C8();
    sub_10009C3F4(v119);
    *(void *)(v0 + 56) = v2;
    uint64_t v120 = sub_10009C260((uint64_t)sub_10009B270);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
    uint64_t v121 = sub_1000937B0(v120, (uint64_t)sub_100099C24);
    sub_10009C16C(v121, "handleEngagementRequest:bag:completionHandler:");
    return sub_100093808();
  }

  else
  {
    sub_10009C218();
    if (!v21) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v74 = sub_10009C514();
    uint64_t v75 = sub_100079604(v74, (uint64_t)qword_10033E1A8);
    sub_10009C544(v75, v76, type metadata accessor for SKLogger);
    sub_10009C1D8();
    v161._countAndFlagsBits = sub_10009C594();
    v161._object = (void *)0x800000010029E6A0LL;
    sub_10009C048(v161);
    *(void *)(v0 + 120) = sub_10009C638(v77, (SEL *)&selRef_logUUID);
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = v78;
    uint64_t v79 = sub_10007B1FC((uint64_t *)&unk_10032A1A0);
    v162._countAndFlagsBits = sub_10009C120(v79);
    sub_10009C048(v162);
    uint64_t v80 = sub_10007BA44();
    uint64_t v81 = v156;
    id v82 = sub_100093DE4(v80, "logKey");
    sub_100086040((uint64_t)v82);
    sub_10009C334();
    static os_log_type_t.error.getter(v83);
    sub_100085EE8(v1);
    sub_100085EE8(v156);
    uint64_t v84 = (os_log_s *)sub_10009C414();
    if (sub_10009C270(v84))
    {
      uint64_t v140 = v155;
      unint64_t v85 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v146 = sub_10007B9FC(64LL);
      *(_DWORD *)unint64_t v85 = 136446466;
      int v86 = sub_10009BFE4();
      sub_10009C2C4(v86, v87, v88, v89, v90, v91, v92, v93, v125, (uint64_t)(v85 + 4), v140, v146, v149, v154, v155);
      sub_100085F14();
      uint64_t v94 = sub_100085FB4();
      uint64_t v102 = sub_10009BF90(v94, v95, v96, v97, v98, v99, v100, v101, v129, v134, v141, v147, v152, v154, v155, v156);
      sub_10009C0FC(v102, v103, v104, v105, v106, v107, v108, v109, v130, v135);
      sub_10007B980();
      sub_10007D974(v1);
      sub_10009BFBC();
      *(void *)(v0 + 176) = sub_100086308(v142, v110, &v154);
      sub_100086194(v0 + 176, v153);
      sub_100085E64(v81);
      sub_100086038((void *)&_mh_execute_header, (os_log_s *)v2, (os_log_type_t)v4, "%{public}s%{public}s", v85);
      sub_10009BFA0(v111, v112, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v148);
      sub_10007B974((uint64_t)v85);

      sub_100085FB4();
      sub_10007BA44();
    }

    else
    {
      sub_100085E64(v1);
      sub_100085E64(v156);
    }

    sub_100085BC4(*(void *)(v0 + 264), type metadata accessor for SKLogger);
    unint64_t v122 = sub_10009BB88();
    uint64_t v123 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v122);
    sub_10009C050(v123, v124);
    sub_10009C0A4();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    return sub_100093840(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_10009AAA0(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v6 = v4;
  sub_10009C788(v4[42], &v6);
  swift_unknownObjectRelease(v4[41]);
  if (v1) {
    swift_errorRelease(v1);
  }
  else {
    v4[43] = a1;
  }
  sub_100093420();
  return sub_10009C2D4();
}

#error "10009B03C: call analysis failed (funcsize=436)"
uint64_t sub_10009B270()
{
  uint64_t v0;
  uint64_t v1;
  sub_10009C134();
  *(void *)(v0 + 36_Block_object_dispose(va, 8) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_10009B2B0()
{
  uint64_t v1 = *(void *)(v0 + 248);
  swift_unknownObjectRelease(*(void *)(v0 + 352));
  uint64_t v2 = *(void *)(v0 + 200);
  sub_1000931C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

#error "10009B608: call analysis failed (funcsize=286)"
uint64_t sub_10009B824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
  sub_10009C5A4();
  sub_1000931C0();
  sub_10009C0A4();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  sub_1000931DC();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_10009B8AC(void *a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = (void *)swift_allocObject(a6, 48LL, 7LL);
  id v11[2] = a3;
  v11[3] = a4;
  void v11[4] = v10;
  void v11[5] = a1;
  id v12 = a3;
  id v13 = a4;
  id v14 = a1;
  uint64_t v15 = sub_10009C714();
  return sub_100121B88(v15, v16);
}

uint64_t sub_10009B920(void *a1, void *a2, void *aBlock, void *a4)
{
  void v4[3] = a2;
  void v4[4] = a4;
  void v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  uint64_t v8 = dword_10032A1BC;
  id v9 = a1;
  id v10 = a2;
  a4;
  uint64_t v11 = (void *)swift_task_alloc(v8);
  void v4[6] = v11;
  void *v11 = v4;
  v11[1] = sub_10009BF7C;
  return InAppTransactionTask.purchase(_:handle:)((uint64_t)v9, (uint64_t)v10);
}

uint64_t sub_10009B9B0( uint64_t result, void *a2, void *a3, uint64_t (*a4)(void, void *), uint64_t (*a5)(void, void *))
{
  if (a3) {
    return a4(*(void *)(result + 32), a3);
  }
  a3 = a2;
  a4 = a5;
  if (a2) {
    return a4(*(void *)(result + 32), a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_10009B9FC(void *a1)
{
  id v1 = [a1 requestData];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10009BA5C(void *a1)
{
  id v2 = [a1 dictionary];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8);

  return v3;
}

void sub_10009BAD0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8);
  }

  sub_1000221B0();
}

uint64_t sub_10009BB30(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  return sub_10009C714();
}

unint64_t sub_10009BB88()
{
  unint64_t result = qword_10032BAD0;
  if (!qword_10032BAD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StoreKitInternalError,  &type metadata for StoreKitInternalError);
    atomic_store(result, &qword_10032BAD0);
  }

  return result;
}

uint64_t sub_10009BBC8()
{
  id v1 = (void *)sub_10009C704();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10009C080(v1, (uint64_t)sub_10009BF78);
  return sub_10009C06C(v2, v3, v4, v5, v6);
}

uint64_t sub_10009BC14()
{
  id v1 = (void *)sub_10009C704();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10009C080(v1, (uint64_t)sub_10009BC5C);
  return sub_10009C06C(v2, v3, v4, v5, v6);
}

uint64_t sub_10009BC5C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009BC94()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10009BCD0()
{
  uint64_t v1 = (void *)sub_10009C704();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_10009C080(v1, (uint64_t)sub_10009BF78);
  return sub_10009C06C(v2, v3, v4, v5, v6);
}

uint64_t sub_10009BD18()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10009BD44()
{
  char v2 = *(_BYTE *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_10032A26C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10009BF78;
  return ((uint64_t (*)(char, void *, void *))((char *)&dword_10032A268 + dword_10032A268))(v2, v4, v3);
}

uint64_t sub_10009BDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032A3D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009BDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseIntentInternal(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10009BE3C()
{
  unint64_t result = qword_10032A2A8;
  if (!qword_10032A2A8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSBuyParams);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10032A2A8);
  }

  return result;
}

uint64_t sub_10009BE78(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10007F054(result, a2);
  }
  return result;
}

uint64_t sub_10009BE8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009BEC0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10009BEFC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10009BF04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_1000221B0();
}

void sub_10009BF3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10007B1FC(a3);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_1000221B0();
}

id sub_10009BF84(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v2 + 3944), v1);
}

uint64_t sub_10009BF90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  return sub_10007A488(a15, a16, &a14);
}

uint64_t sub_10009BFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(v3, 2LL, a3);
}

uint64_t sub_10009BFAC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10009BFBC()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10009BFD0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10009BFE4()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_10009C018()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10009C024(float a1)
{
  float *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

void sub_10009C048(Swift::String a1)
{
}

uint64_t sub_10009C050(uint64_t a1, _BYTE *a2)
{
  *a2 = 4;
  return swift_willThrow();
}

NSNumber sub_10009C064()
{
  return Bool._bridgeToObjectiveC()();
}

uint64_t sub_10009C06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_10009C080@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10009C0A4()
{
  return swift_task_dealloc(*(void *)(v0 + 320));
}

uint64_t sub_10009C0B8(uint64_t a1)
{
  return sub_1000DF738(v2, v1);
}

uint64_t sub_10009C0E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v12 + 184) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, a10, v11);
}

uint64_t sub_10009C0FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *uint64_t v10 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, v11, a10);
}

id sub_10009C114()
{
  return [*(id *)(v0 + 816) *(SEL *)(v1 + 1304)];
}

uint64_t sub_10009C120(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

NSString sub_10009C12C()
{
  return String._bridgeToObjectiveC()();
}

void sub_10009C134()
{
  uint64_t v2 = (void *)(v1 - 8);
  void *v2 = *v0;
  void *v2 = *v0;
}

  ;
}

id sub_10009C16C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v5, a2, v2, v4, v3);
}

id sub_10009C180()
{
  return [*(id *)(v0 + 240) *(SEL *)(v1 + 1304)];
}

uint64_t sub_10009C194()
{
  return (*(uint64_t (**)(void, void))(v0[38] + 8LL))(v0[31], v0[37]);
}

uint64_t sub_10009C1A8(float a1)
{
  float *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10009C1CC()
{
  return *(void *)(v0 + 992);
}

void sub_10009C1D8()
{
}

void sub_10009C1EC()
{
}

uint64_t sub_10009C200(uint64_t a1, SEL *a2)
{
  return sub_10009BB30(v2, a2);
}

id sub_10009C208(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

NSString sub_10009C210()
{
  return String._bridgeToObjectiveC()();
}

  ;
}

uint64_t sub_10009C228()
{
  return v0;
}

  ;
}

uint64_t sub_10009C250(uint64_t a1)
{
  return sub_10007D824(v1, 2LL, a1);
}

uint64_t sub_10009C260@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v2;
  *(void *)(v2 + 24) = a1;
  return swift_continuation_init(v1, 1LL);
}

BOOL sub_10009C270(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10009C280(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10009C288()
{
  return sub_1000DF3B4(100LL, v1, v0);
}

uint64_t sub_10009C298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10007A488(a5, v5, (uint64_t *)va);
}

uint64_t sub_10009C2A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

void sub_10009C2C4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  v17._countAndFlagsBits = v16;
  v17._object = v15;
  String.append(_:)(v17);
}

uint64_t sub_10009C2D4()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10009C2E4(uint64_t (*a1)(void))
{
  return a1();
}

id sub_10009C2F4(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

id sub_10009C2FC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

BOOL sub_10009C304(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10009C314(uint64_t a1)
{
  return sub_10007D0AC(a1, 1LL, 1LL, v1);
}

id sub_10009C324(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_10009C32C(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_10009C334()
{
}

uint64_t sub_10009C33C()
{
  return *(void *)(v0 + 256);
}

void sub_10009C350(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_10009C358(uint64_t a1)
{
}

uint64_t sub_10009C360( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *id v13 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v13, a13, v14);
}

  ;
}

uint64_t sub_10009C38C()
{
  return sub_10007A388(5LL);
}

  ;
}

uint64_t sub_10009C3A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *id v9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10, a9);
}

void sub_10009C3BC()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  *uint64_t v3 = *v0;
  *(void *)(v2 + 24_Block_object_dispose(va, 8) = *(void *)(v2 + 48);
}

id sub_10009C3DC(void *a1)
{
  return [a1 *(SEL *)(v1 + 1304)];
}

void sub_10009C3E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_10009C3EC()
{
}

void sub_10009C3F4(uint64_t a1)
{
  *(void *)(v2 + 360) = a1;
}

NSString sub_10009C400()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10009C40C(uint64_t a1, SEL *a2)
{
  return sub_10009BB30(v2, a2);
}

uint64_t sub_10009C414()
{
  return Logger.logObject.getter();
}

uint64_t sub_10009C41C()
{
  return (*(uint64_t (**)(void, void))(v0[38] + 8LL))(v0[40], v0[37]);
}

uint64_t sub_10009C430( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_10007A488(a13, v13, a3);
}

uint64_t sub_10009C43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10009BDB0(a1 + a2, v2);
}

uint64_t sub_10009C448( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return swift_dynamicCast(&a9, &a15, v15 + 8, a4, 6LL);
}

void sub_10009C45C()
{
}

  ;
}

  ;
}

NSString sub_10009C488()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10009C494()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10009C49C()
{
}

uint64_t sub_10009C4A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_bridgeObjectRelease(a16);
}

id sub_10009C4B0(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v2 + 3944), v1);
}

void sub_10009C4BC()
{
}

void sub_10009C4C8()
{
}

void sub_10009C4D0()
{
}

uint64_t sub_10009C4DC()
{
  return sub_10009BE8C(v0);
}

uint64_t sub_10009C4E8(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

BOOL sub_10009C4F4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

BOOL sub_10009C504(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10009C514()
{
  return *(void *)(v0 + 256);
}

BOOL sub_10009C524(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

  ;
}

void sub_10009C544(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_10009C54C()
{
  *(_WORD *)(v0 + 12) = 2082;
}

NSString sub_10009C55C()
{
  return String._bridgeToObjectiveC()();
}

  ;
}

  ;
}

NSString sub_10009C58C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10009C594()
{
  return v0 + 21;
}

uint64_t sub_10009C5A4()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10009C5AC()
{
  return Logger.logObject.getter();
}

id sub_10009C5B4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v4, a2, v2, v3);
}

uint64_t sub_10009C5C4(uint64_t a1)
{
  return sub_10007D824(v1, 1LL, a1);
}

uint64_t sub_10009C5EC()
{
  return swift_release(v0);
}

void sub_10009C5F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_10009C5FC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, Swift::String a12, uint64_t a13, char a14)
{
  v15._countAndFlagsBits = a12._countAndFlagsBits;
  v15._object = v14;
  String.append(_:)(v15);
}

  ;
}

uint64_t sub_10009C61C()
{
  return *(void *)(v0 + 992);
}

id sub_10009C628(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10009C630()
{
  return sub_10007B1A0(v0);
}

uint64_t sub_10009C638(uint64_t a1, SEL *a2)
{
  return sub_10009BB30(v2, a2);
}

uint64_t sub_10009C640()
{
  return *(void *)(v0 + 232);
}

_OWORD *sub_10009C654(_OWORD *a1)
{
  return sub_1000853B0(a1, v1);
}

id sub_10009C65C(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v1 + 3944), v2);
}

id sub_10009C668(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v1 + 3944), v2);
}

void sub_10009C674()
{
}

void sub_10009C67C(id a1)
{
}

uint64_t sub_10009C684()
{
  return Date.init(timeIntervalSinceNow:)();
}

uint64_t sub_10009C68C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_arrayDestroy(a1, 2LL, a15);
}

uint64_t sub_10009C698()
{
  return String.lowercased()()._countAndFlagsBits;
}

void sub_10009C6A0()
{
}

uint64_t sub_10009C6A8()
{
  return type metadata accessor for UUID(0LL);
}

BOOL sub_10009C6B0(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_10009C6BC()
{
  *(void *)(v0 - 12_Block_object_dispose(va, 8) = 91LL;
  *(void *)(v0 - 120) = 0xE100000000000000LL;
}

NSString sub_10009C6D0()
{
  return Substring._bridgeToObjectiveC()();
}

uint64_t sub_10009C6D8()
{
  return swift_task_dealloc(*(void *)(v0 + 232));
}

void sub_10009C6E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_10009BF3C((uint64_t)va, (uint64_t)va1, a3);
}

id sub_10009C6EC()
{
  return [v0 *(SEL *)(v1 + 1496)];
}

id sub_10009C6F8(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, v3);
}

uint64_t sub_10009C704()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10009C70C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10007B1C0(a2 + 32 * v2, a1);
}

uint64_t sub_10009C714()
{
  return v0;
}

uint64_t sub_10009C720@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_10009C72C()
{
}

uint64_t sub_10009C738()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_10009C740(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10009C748()
{
  return sub_10009BE78(v1, v0);
}

NSData sub_10009C754()
{
  return Data._bridgeToObjectiveC()();
}

NSString sub_10009C760()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10009C76C(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

  ;
}

uint64_t sub_10009C788@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10009C794()
{
  return *(void *)(v0 + 216);
}

uint64_t sub_10009C7A8()
{
  return *(void *)(v0 + 208);
}

uint64_t sub_10009C7BC()
{
  return _bridgeAnythingToObjectiveC<A>(_:)(v0);
}

uint64_t sub_10009C7C4()
{
  return v0;
}

uint64_t sub_10009C7D0(uint64_t a1, unint64_t a2)
{
  return sub_100093FCC(a1, a2);
}

unint64_t sub_10009C7DC()
{
  return sub_1000F4060();
}

uint64_t sub_10009C7E4(uint64_t a1)
{
  return String.init<A>(describing:)(v1, a1);
}

NSString sub_10009C7F0()
{
  return String._bridgeToObjectiveC()();
}

void sub_10009C7F8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Insecure.SHA1(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for Insecure.SHA1Digest(0LL);
  __chkstk_darwin(v5);
  swift_bridgeObjectRetain(a2);
  sub_10009C9F4(a1, a2);
  uint64_t v7 = v6;
  uint64_t v8 = sub_10009D5CC( &qword_10032A2C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1,  (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
  dispatch thunk of HashFunction.init()(v4, v8);
  __asm { BR              X10 }

void sub_10009C8FC()
{
}

void sub_10009C9F4(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v18 = a1;
  *((void *)&v18 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v2 = sub_10007B1FC(&qword_10032A2D0);
  if (!swift_dynamicCast(v16, &v18, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v17 = 0LL;
    memset(v16, 0, sizeof(v16));
    sub_10009D728((uint64_t)v16);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v19[0] = a1;
      v19[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v19 + (HIBYTE(a2) & 0xF);
      uint64_t v8 = v19;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }

      if (v5) {
        uint64_t v7 = (char *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      uint64_t v8 = (void *)v5;
    }

    uint64_t v9 = Data._Representation.init(_:)(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      sub_10009D988();
      *(void *)&v16[0] = v9;
      *((void *)&v16[0] + 1) = v11;
      goto LABEL_19;
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v16[0] = Data._Representation.init(count:)(v12);
    *((void *)&v16[0] + 1) = v13;
    __chkstk_darwin(*(void *)&v16[0]);
    sub_10009D244();
    __asm { BR              X12 }
  }

  sub_10009D8A4(v16, (uint64_t)v19);
  uint64_t v3 = v20;
  uint64_t v4 = v21;
  sub_100085B44(v19, v20);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v18,  sub_10009D4E4,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  sub_10009D988();
  v16[0] = v18;
  sub_10007B1A0(v19);
LABEL_19:
  sub_100085E98();
}

uint64_t sub_10009CE6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Insecure.SHA1Digest(0LL);
  uint64_t v10 = v2;
  uint64_t v3 = sub_10009D5CC( &qword_10032A2C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1Digest,  (uint64_t)&protocol conformance descriptor for Insecure.SHA1Digest);
  uint64_t v11 = v3;
  uint64_t v4 = sub_10009D60C(v9);
  uint64_t v5 = *(void *)(v2 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v4, a1, v2);
  sub_100085B44(v9, v10);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v8,  sub_10009D4E4,  0LL,  &type metadata for Data._Representation,  v2,  v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v2);
  uint64_t v6 = v8;
  sub_10007B1A0(v9);
  return v6;
}

Class sub_10009CF7C()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  unint64_t v3 = v2;
  sub_10009C7F8(v1, v2);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  swift_bridgeObjectRelease(v3);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10007F054(v5, v7);
  return isa;
}

uint64_t sub_10009CFDC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v9 = String.UTF16View.index(_:offsetBy:)(15LL, v5, a2);
    sub_10009D940(v9);
    return v10 | 4;
  }

  else
  {
    uint64_t v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v5);
    sub_10009D940(v6);
    return v7 | 8;
  }

uint64_t sub_10009D034(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = sub_10009D974();
  uint64_t v13 = sub_10009D5CC( &qword_10032A2C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1,  (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10009D0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  unint64_t v3 = (char *)&v7 + a3;
  char v12 = BYTE5(a2);
  uint64_t v4 = sub_10009D974();
  uint64_t v5 = sub_10009D5CC( &qword_10032A2C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1,  (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

void *sub_10009D1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_10009D6C8( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10009D8FC,  (uint64_t)v5,  a1,  a2);
}

void sub_10009D244()
{
  __asm { BR              X11 }

void *sub_10009D2A4@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v7 = v4;
  LOWORD(v_Block_object_dispose(va, 8) = a1;
  BYTE2(v_Block_object_dispose(va, 8) = BYTE2(a1);
  HIBYTE(v_Block_object_dispose(va, 8) = BYTE3(a1);
  char v9 = BYTE4(a1);
  char v10 = BYTE5(a1);
  char v11 = BYTE6(a1);
  uint64_t result = sub_10009D814((uint64_t)&v7, v3, v2, BYTE6(a1));
  BOOL v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *uint64_t v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_10009D4E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10009D558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10009D974();
  uint64_t v5 = sub_10009D5CC( &qword_10032A2C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Insecure.SHA1,  (uint64_t)&protocol conformance descriptor for Insecure.SHA1);
  return dispatch thunk of HashFunction.update(bufferPointer:)(a1, a2, v4, v5);
}

uint64_t sub_10009D5CC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_10009D60C(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_10009D648(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain(a4);
    uint64_t result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_10009D6C8( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

uint64_t sub_10009D728(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032A2D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

char *sub_10009D768(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  char v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_10009D814( uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void *sub_10009D858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_10009D1FC(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

void *sub_10009D88C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10009D858(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_10009D8A4(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10009D8BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_10009D648(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

uint64_t sub_10009D8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10009D8BC(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

double sub_10009D918()
{
  __int16 v1 = *(_WORD *)(v0 - 148);
  double result = *(double *)(v0 - 160);
  *(double *)(v0 - 136) = result;
  *(_DWORD *)(v0 - 12_Block_object_dispose(va, 8) = *(_DWORD *)(v0 - 152);
  *(_WORD *)(v0 - 124) = v1;
  return result;
}

uint64_t sub_10009D934()
{
  return sub_10007F054(v0, v1);
}

unint64_t sub_10009D940(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_10009D958()
{
  return sub_10009CFDC(v2, v1, v0);
}

uint64_t sub_10009D968()
{
  return sub_10009BE78(v0, v1);
}

uint64_t sub_10009D974()
{
  return type metadata accessor for Insecure.SHA1(0LL);
}

uint64_t sub_10009D97C(uint64_t a1, uint64_t a2)
{
  return sub_10009D034(a1, a2);
}

uint64_t sub_10009D988()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 216));
}

uint64_t sub_10009D990()
{
  return sub_1000881FC(v0, v1);
}

uint64_t sub_10009D99C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10009D9C8 + 4 * byte_10027AB60[a1]))( 1363432531LL,  0xE400000000000000LL);
}

uint64_t sub_10009D9C8()
{
  return 0x7470697263736564LL;
}

uint64_t sub_10009D9E8()
{
  return 0x746E756F63736964LL;
}

uint64_t sub_10009DA08()
{
  return 0x69642D6563697270LL;
}

uint64_t sub_10009DA2C()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_10009DA44()
{
  return 1702521203LL;
}

unint64_t sub_10009DA50()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10009DA70()
{
  return 0x6574736F682D7369LL;
}

uint64_t sub_10009DA8C()
{
  return 0x64692D6D657469LL;
}

uint64_t sub_10009DAA4()
{
  return 25705LL;
}

uint64_t sub_10009DAB0()
{
  return 0x61636F6C2D756369LL;
}

uint64_t sub_10009DACC()
{
  return 1701667182LL;
}

uint64_t sub_10009DAD8()
{
  return 0x6570795465646F6DLL;
}

void sub_10009DAF0()
{
}

void sub_10009DBB8()
{
}

uint64_t sub_10009DBCC()
{
  return 1701869940LL;
}

void sub_10009DBD8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  BOOL v10 = (char *)&v260 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v273 = (uint64_t)&v260 - v11;
  uint64_t v293 = type metadata accessor for SKLogger(0LL);
  uint64_t v12 = __chkstk_darwin(v293);
  uint64_t v297 = (uint64_t)&v260 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v272 = (uint64_t)&v260 - v14;
  v288 = a1;
  id v15 = [a1 object];
  if (v15)
  {
    id v16 = v15;
    _bridgeAnyObjectToAny(_:)(&v310);
    swift_unknownObjectRelease(v16);
  }

  else
  {
    sub_1000AA5C0();
  }

  sub_1000A9BAC((uint64_t)&v310, (uint64_t)&v312);
  if (!v314) {
    goto LABEL_212;
  }
  v296 = (void *)sub_10007B1FC(&qword_10032A580);
  if ((sub_10009369C((uint64_t)&v306, (uint64_t)&v312, (uint64_t)&type metadata for Any + 8, (uint64_t)v296) & 1) == 0)
  {
LABEL_213:
    sub_100086144();
    sub_1000AAAC0();
    goto LABEL_214;
  }

  sub_1000AAF74();
  sub_1000862B8();
  sub_1000AAA44(v17, v18, &v312);
  sub_100085EF0();
  if (!v314)
  {
LABEL_212:
    sub_100086144();
    sub_1000AAAC0();
    sub_100085298((uint64_t)&v312, (uint64_t *)&unk_100328ED0);
LABEL_214:
    sub_100093420();
    return;
  }

  sub_10007B1FC(&qword_10032A588);
  uint64_t v19 = sub_1000AACB8();
  v295 = (void *)v20;
  if ((sub_10009369C(v19, v21, v22, v20) & 1) == 0) {
    goto LABEL_213;
  }
  uint64_t v23 = v310;
  uint64_t v263 = sub_1000A949C(v288);
  uint64_t v262 = v24;
  uint64_t v281 = *(void *)(v23 + 16);
  if (!v281)
  {
    v301 = _swiftEmptyArrayStorage;
LABEL_216:
    sub_1000AAAC0();
    sub_100086144();
    sub_100085EF0();
    return;
  }

  unint64_t v25 = 0LL;
  uint64_t v280 = v23 + 32;
  v269 = (char *)&v310 + 8;
  unint64_t v279 = (unint64_t)"available-subproducts";
  uint64_t v278 = 0x800000010029EF50LL;
  sub_1000AB058();
  uint64_t v277 = v26;
  uint64_t v287 = a2;
  unint64_t v302 = (unint64_t)"subscriptionFamilyId";
  uint64_t v276 = 0x800000010029EF90LL;
  __int128 v274 = xmmword_10027ACC0;
  __int128 v286 = xmmword_10027A600;
  sub_1000AB058();
  unint64_t v270 = v27;
  uint64_t v268 = v28;
  unint64_t v271 = v28 | 0x8000000000000000LL;
  v267 = (char *)&type metadata for Any + 8;
  uint64_t v260 = v29;
  unint64_t v264 = v29 | 0x8000000000000000LL;
  v301 = v30;
  v300 = (void *)a3;
  v283 = v10;
  uint64_t v275 = v23;
  uint64_t v285 = v6;
  uint64_t v284 = v7;
  while (1)
  {
    if (v25 >= *(void *)(v23 + 16)) {
      goto LABEL_225;
    }
    unint64_t v294 = v25;
    uint64_t v31 = *(void *)(v280 + 8 * v25);
    v309 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain(v31);
    sub_1000AAA44(0x6D614E726566666FLL, 0xE900000000000065LL, &v312);
    sub_10012A9E0((uint64_t)&v312, 0x6D614E726566666FLL, 0xE900000000000065LL);
    sub_1000AAA44(0x656C746974LL, 0xE500000000000000LL, &v312);
    sub_1000AB064((uint64_t)&v312, 1701667182LL);
    uint64_t v303 = v31;
    sub_1000AAA44(0x7470697263736564LL, 0xEB000000006E6F69LL, &v312);
    if (v314)
    {
      uint64_t v32 = sub_1000AACB8();
      if ((sub_10009369C(v32, v33, v34, (uint64_t)&type metadata for String) & 1) != 0)
      {
        __int128 v35 = v310;
        uint64_t v36 = sub_10007B1FC((uint64_t *)&unk_10032A690);
        uint64_t v37 = sub_1000AA314(v36, 64LL);
        *(_OWORD *)(v37 + 16) = v286;
        *(void *)(v37 + 32) = 0x647261646E617473LL;
        *(void *)(v37 + 40) = 0xE800000000000000LL;
        *(_OWORD *)(v37 + 4_Block_object_dispose(va, 8) = v35;
        uint64_t v38 = Dictionary.init(dictionaryLiteral:)( v37,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
        v314 = (void *)sub_10007B1FC((uint64_t *)&unk_10032C450);
        *(void *)&__int128 v312 = v38;
        sub_10012A9E0((uint64_t)&v312, 0x7470697263736564LL, 0xEB000000006E6F69LL);
      }
    }

    else
    {
      sub_100085298((uint64_t)&v312, (uint64_t *)&unk_100328ED0);
    }

    sub_1000AAF74();
    uint64_t v40 = v39 - 10;
    sub_1000AA714(v39 - 10, v278, &v312);
    if (v314)
    {
      uint64_t v41 = sub_1000AACB8();
      else {
        int v44 = 0;
      }
    }

    else
    {
      sub_100085298((uint64_t)&v312, (uint64_t *)&unk_100328ED0);
      int v44 = 0;
    }

    v314 = &type metadata for Bool;
    LOBYTE(v312) = v44;
    sub_10012A9E0((uint64_t)&v312, v40, v279 | 0x8000000000000000LL);
    unint64_t v45 = 0xD000000000000014LL;
    uint64_t v46 = v277;
    sub_1000AA714(0xD000000000000014LL, v277, &v312);
    sub_1000AB034((uint64_t)&v312, (uint64_t)&v310);
    sub_10012A9E0((uint64_t)&v310, 0xD000000000000014LL, v46);
    if (v314)
    {
      v311 = &type metadata for String;
      *(void *)&__int128 v310 = 0xD00000000000001BLL;
      unint64_t v47 = v270;
    }

    else
    {
      v311 = &type metadata for String;
      if (v44)
      {
        *(void *)&__int128 v310 = 0x736E6F432D6E6F4ELL;
        unint64_t v47 = 0xEE00656C62616D75LL;
      }

      else
      {
        *(void *)&__int128 v310 = 0x62616D75736E6F43LL;
        unint64_t v47 = 0xEA0000000000656CLL;
      }
    }

    *((void *)&v310 + 1) = v47;
    sub_1000AB064((uint64_t)&v310, 1684957547LL);
    sub_1000AA714(0x666F2D65726F7473LL, 0xEC00000073726566LL, &v310);
    if (!v311)
    {
      sub_100085298((uint64_t)&v310, (uint64_t *)&unk_100328ED0);
LABEL_33:
      sub_1000AA5C0();
LABEL_34:
      sub_100085298((uint64_t)&v310, (uint64_t *)&unk_100328ED0);
      uint64_t v48 = 0LL;
      goto LABEL_35;
    }

    unint64_t v45 = v306;
    if (!(void)v306) {
      goto LABEL_33;
    }
    sub_1000AAA44(1363432531LL, 0xE400000000000000LL, &v310);
    sub_100085EF0();
    if (!v311) {
      goto LABEL_34;
    }
    uint64_t v48 = sub_10009369C( (uint64_t)&v306,  (uint64_t)&v310,  (uint64_t)&type metadata for Any + 8,  (uint64_t)v296)
        ? v306
        : 0LL;
LABEL_35:
    sub_1000AA714(0x6574736F682D7369LL, 0xE900000000000064LL, &v310);
    if (v311)
    {
      uint64_t v49 = sub_1000AACA8();
      sub_1000AA714(0x6E6F6973726576LL, 0xE700000000000000LL, &v306);
      if (*((void *)&v307 + 1))
      {
        sub_1000853B0(&v306, &v310);
        if (v48)
        {
          sub_10008600C();
          sub_1000AAD44(1702521203LL, 0xE400000000000000LL, &v304);
          sub_100086004();
          if (*((void *)&v305 + 1))
          {
            sub_1000853B0(&v304, &v306);
            v308 = _swiftEmptyDictionarySingleton;
            sub_10007B1C0((uint64_t)&v310, (uint64_t)&v304);
            sub_10012A9E0((uint64_t)&v304, 0x6E6F6973726576LL, 0xE700000000000000LL);
            sub_10007B1C0((uint64_t)&v306, (uint64_t)&v304);
            sub_1000AB064((uint64_t)&v304, 1702521203LL);
            *((void *)&v305 + 1) = v296;
            *(void *)&__int128 v304 = v308;
            sub_10012A9E0((uint64_t)&v304, 0x6F43646574736F68LL, 0xED0000746E65746ELL);
            sub_10007B1A0(&v306);
            sub_10007B1A0(&v310);
            goto LABEL_52;
          }
        }

        else
        {
          __int128 v304 = 0u;
          __int128 v305 = 0u;
        }

        sub_10007B1A0(&v310);
        uint64_t v52 = &v304;
      }

      else
      {
        uint64_t v52 = &v306;
      }

      sub_100085298((uint64_t)v52, (uint64_t *)&unk_100328ED0);
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      sub_100079604(v293, (uint64_t)qword_10033E1A8);
      sub_1000AAFE8();
      sub_1000A9710(v53, v54, type metadata accessor for SKLogger);
      uint64_t v55 = sub_1000AA78C();
      LODWORD(v282) = static os_log_type_t.error.getter(v55);
      uint64_t v56 = sub_1000AAFB8();
      sub_1000AAFA4(v56, v57, v58);
      uint64_t v59 = sub_10007CBFC((uint64_t)&unk_1002EBD68);
      uint64_t v291 = sub_1000AAF54(v59);
      sub_10007CBFC((uint64_t)&unk_1002EBD90);
      sub_1000AAF74();
      uint64_t v61 = v60 + 22;
      uint64_t v265 = v60 + 22;
      unint64_t v62 = v264;
      *(void *)(v63 + 16) = v61;
      *(void *)(v63 + 24) = v62;
      uint64_t v64 = v63;
      uint64_t v292 = v63;
      uint64_t v65 = sub_100085EE8(a3);
      id v298 = (id)Logger.logObject.getter(v65);
      uint64_t v66 = sub_1000AA314((uint64_t)&unk_1002EBDB8, 17LL);
      *(_BYTE *)(v66 + 16) = 34;
      uint64_t v67 = v66;
      uint64_t v266 = sub_1000AA314((uint64_t)&unk_1002EBDE0, 17LL);
      *(_BYTE *)(v266 + 16) = 8;
      uint64_t v68 = sub_10007CBFC((uint64_t)&unk_1002EBE08);
      *(void *)(v68 + 16) = sub_1000AA204;
      *(void *)(v68 + 24) = v45;
      uint64_t v69 = sub_10007CBFC((uint64_t)&unk_1002EBE30);
      *(void *)(v69 + 16) = sub_1000AA200;
      *(void *)(v69 + 24) = v68;
      uint64_t v70 = sub_1000AA314((uint64_t)&unk_1002EBE58, 17LL);
      *(_BYTE *)(v70 + 16) = 34;
      v299 = (_BYTE *)sub_1000AA314((uint64_t)&unk_1002EBE80, 17LL);
      v299[16] = 8;
      uint64_t v71 = sub_10007CBFC((uint64_t)&unk_1002EBEA8);
      *(void *)(v71 + 16) = sub_1000AA208;
      *(void *)(v71 + 24) = v64;
      uint64_t v72 = sub_10007CBFC((uint64_t)&unk_1002EBED0);
      *(void *)(v72 + 16) = sub_1000AA200;
      *(void *)(v72 + 24) = v71;
      uint64_t v73 = sub_10007B1FC(&qword_10032A678);
      uint64_t v74 = (__n128 *)sub_1000AA314(v73, 128LL);
      __n128 v75 = sub_1000AAF1C(v74);
      v76[4] = sub_1000AA210;
      v76[5] = v67;
      uint64_t v77 = v67;
      uint64_t v78 = v266;
      v76[6] = sub_1000AA210;
      v76[7] = v78;
      v76[8] = sub_1000AA20C;
      v76[9] = v69;
      v76[10] = sub_1000AA210;
      v76[11] = v70;
      uint64_t v79 = v299;
      v76[12] = sub_1000AA210;
      v76[13] = v79;
      v76[14] = sub_1000AA20C;
      v76[15] = v72;
      swift_setDeallocating(v75);
      sub_1000AAC80((uint64_t)v315);
      uint64_t v289 = v68;
      swift_retain(v68);
      sub_1000AAC80((uint64_t)&v316);
      swift_retain(v71);
      swift_retain(v77);
      swift_retain(v78);
      sub_1000AAE84();
      uint64_t v290 = v70;
      sub_1000AACD8();
      sub_1000AAC80((uint64_t)&v318);
      swift_retain(v72);
      sub_1000A8808();
      int v80 = v282;
      if (sub_1000AAF3C((uint64_t)&v317))
      {
        uint64_t v81 = (uint8_t *)sub_10007B9FC(22LL);
        uint64_t v282 = sub_10007B9FC(64LL);
        *(void *)&__int128 v306 = v282;
        *(_WORD *)uint64_t v81 = 514;
        v81[2] = 34;
        sub_1000AAC2C();
        int v261 = v80;
        v81[3] = 8;
        sub_1000AAC24();
        sub_1000AABFC();
        uint64_t v83 = *(void **)(v82 - 256);
        sub_10007BA3C();
        v84._countAndFlagsBits = v287;
        v84._object = v83;
        String.append(_:)(v84);
        sub_100085F14();
        sub_10007BA44();
        *(void *)&__int128 v310 = sub_10008620C(v310, v85, (uint64_t *)&v306);
        int v86 = v269;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v310, v269, v81 + 4);
        sub_10007BA44();
        sub_1000AA410((uint64_t)v315);
        sub_1000AA410((uint64_t)v313);
        sub_1000AA71C();
        sub_10007B980();
        v81[12] = 34;
        sub_1000AA410((uint64_t)&v314);
        v81[13] = 8;
        sub_1000AA410((uint64_t)&v318);
        *(void *)&__int128 v310 = sub_10007A488(v265, v260 | 0x8000000000000000LL, (uint64_t *)&v306);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v310, v86, v81 + 14);
        sub_1000AA410((uint64_t)&v316);
        swift_release(v71);
        sub_1000AA668();
        sub_1000AAFE8();
        sub_100086038(v87, v88, (os_log_type_t)v261, "%{public}s%{public}s", v81);
        uint64_t v89 = v282;
        sub_10009BFA0(v90, v91, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v89);
        sub_10007B974((uint64_t)v81);

        uint64_t v92 = v284;
        sub_1000AA658(v273, *(uint64_t (**)(uint64_t, void))(v284 + 8));
        sub_10007BA44();
        a3 = (uint64_t)v83;
      }

      else
      {

        sub_1000AA410((uint64_t)&v316);
        swift_release(v71);
        sub_1000AA668();
        sub_1000AA410((uint64_t)&v318);
        sub_1000AA410((uint64_t)&v314);
        a3 = (uint64_t)v300;
        sub_100086144();
        sub_1000AA410((uint64_t)v315);
        sub_1000AA410((uint64_t)v313);
        sub_1000AA71C();
        sub_1000AAC24();
        sub_1000AAC2C();
        uint64_t v92 = v284;
        sub_1000AA658(v273, *(uint64_t (**)(uint64_t, void))(v284 + 8));
        sub_100086144();
      }

      sub_100085BC4(v272, type metadata accessor for SKLogger);
      BOOL v10 = v283;
      uint64_t v7 = v92;
    }

    else
    {
      sub_100085298((uint64_t)&v310, (uint64_t *)&unk_100328ED0);
    }

LABEL_52:
    *(void *)&__int128 v304 = _swiftEmptyDictionarySingleton;
    uint64_t v93 = v276;
    sub_1000AA714(0xD00000000000001BLL, v276, &v310);
    sub_10012A9E0((uint64_t)&v310, 0xD00000000000001BLL, v93);
    if (v48)
    {
      sub_10008600C();
      uint64_t v94 = sub_1000AA984();
      sub_1000AAD44(v94, v95, v96);
      sub_100086004();
    }

    else
    {
      sub_1000AA5C0();
    }

    sub_10012A9E0((uint64_t)&v310, 0x6563697270LL, 0xE500000000000000LL);
    if (v48)
    {
      uint64_t v97 = sub_1000AA7E8();
      sub_1000AAD44(v97, v98, v99);
      sub_100086004();
    }

    else
    {
      sub_1000AA5C0();
    }

    uint64_t v100 = _swiftEmptyDictionarySingleton;
    sub_10012A9E0((uint64_t)&v310, 0x726F466563697270LL, 0xEE0064657474616DLL);
    sub_1000AA714(0x61636F6C2D756369LL, 0xEA0000000000656CLL, &v310);
    if (v311)
    {
      if ((sub_10009369C( (uint64_t)&v306,  (uint64_t)&v310,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
      {
        __int128 v310 = v306;
        *(void *)&__int128 v306 = 0x636E657272756340LL;
        *((void *)&v306 + 1) = 0xEA00000000003D79LL;
        unint64_t v101 = sub_1000A9B34();
        uint64_t v102 = StringProtocol.components<A>(separatedBy:)( &v306,  &type metadata for String,  &type metadata for String,  v101,  v101);
        sub_100085EF0();
        uint64_t v93 = sub_10009FCD8(v102);
        uint64_t v104 = v103;
        sub_10007BA44();
        if (v104)
        {
          v311 = &type metadata for String;
          *(void *)&__int128 v310 = v93;
          *((void *)&v310 + 1) = v104;
          unint64_t v105 = (unint64_t)&v304;
          sub_10012A9E0((uint64_t)&v310, 0x79636E6572727563LL, 0xEC00000065646F43LL);
          goto LABEL_69;
        }
      }
    }

    else
    {
      sub_100085298((uint64_t)&v310, (uint64_t *)&unk_100328ED0);
    }

    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_100079604(v293, (uint64_t)qword_10033E1A8);
    sub_1000AAFE8();
    sub_1000A9710(v106, v107, type metadata accessor for SKLogger);
    unint64_t v105 = a3;
    uint64_t v108 = sub_1000AA78C();
    LODWORD(v289) = static os_log_type_t.error.getter(v108);
    sub_1000AAFA4((uint64_t)v10, v93, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    uint64_t v109 = sub_10007CBFC((uint64_t)&unk_1002EBBD8);
    id v298 = (id)sub_1000AAF54(v109);
    uint64_t v110 = sub_10007CBFC((uint64_t)&unk_1002EBC00);
    sub_1000AAF74();
    uint64_t v112 = v111 + 2;
    uint64_t v282 = v111 + 2;
    unint64_t v113 = v271;
    *(void *)(v114 + 16) = v112;
    *(void *)(v114 + 24) = v113;
    uint64_t v115 = sub_100085EE8(v105);
    v299 = (_BYTE *)Logger.logObject.getter(v115);
    uint64_t v116 = sub_1000AA314((uint64_t)&unk_1002EBC28, 17LL);
    LOBYTE(v105) = 34;
    *(_BYTE *)(v116 + 16) = 34;
    uint64_t v117 = sub_1000AA314((uint64_t)&unk_1002EBC50, 17LL);
    *(_BYTE *)(v117 + 16) = 8;
    uint64_t v118 = sub_10007CBFC((uint64_t)&unk_1002EBC78);
    *(void *)(v118 + 16) = sub_1000A9FE4;
    *(void *)(v118 + 24) = v93;
    BOOL v10 = (char *)sub_10007CBFC((uint64_t)&unk_1002EBCA0);
    *((void *)v10 + 2) = sub_1000AA004;
    *((void *)v10 + 3) = v118;
    uint64_t v119 = sub_1000AA314((uint64_t)&unk_1002EBCC8, 17LL);
    *(_BYTE *)(v119 + 16) = 34;
    uint64_t v120 = sub_1000AA314((uint64_t)&unk_1002EBCF0, 17LL);
    *(_BYTE *)(v120 + 16) = 8;
    uint64_t v102 = sub_10007CBFC((uint64_t)&unk_1002EBD18);
    *(void *)(v102 + 16) = sub_1000A9FEC;
    *(void *)(v102 + 24) = v110;
    uint64_t v121 = sub_10007CBFC((uint64_t)&unk_1002EBD40);
    *(void *)(v121 + 16) = sub_1000AA200;
    *(void *)(v121 + 24) = v102;
    uint64_t v122 = sub_10007B1FC(&qword_10032A678);
    uint64_t v123 = (__n128 *)sub_1000AA314(v122, 128LL);
    __n128 v124 = sub_1000AAF1C(v123);
    v125[4] = sub_1000A9FF8;
    v125[5] = v116;
    v125[6] = sub_1000AA210;
    v125[7] = v117;
    v125[8] = sub_1000AA028;
    v125[9] = v10;
    v125[10] = sub_1000AA210;
    v125[11] = v119;
    v125[12] = sub_1000AA210;
    v125[13] = v120;
    v125[14] = sub_1000AA20C;
    v125[15] = v121;
    swift_setDeallocating(v124);
    sub_1000AAC80((uint64_t)&v317);
    swift_retain(v118);
    uint64_t v292 = v110;
    swift_retain(v110);
    uint64_t v290 = v102;
    sub_1000AAE84();
    swift_retain(v116);
    swift_retain(v117);
    swift_retain(v10);
    LOBYTE(v102) = v119;
    swift_retain(v119);
    swift_retain(v120);
    uint64_t v291 = v121;
    sub_1000AACD8();
    sub_1000A8808();
    unint64_t v126 = v289;
    if (sub_1000AAF3C((uint64_t)&v318))
    {
      uint64_t v127 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v289 = sub_10007B9FC(64LL);
      *(void *)&__int128 v306 = v289;
      *(_WORD *)uint64_t v127 = 514;
      v127[2] = 34;
      sub_1000AA71C();
      v127[3] = 8;
      sub_1000AAC24();
      sub_1000AABFC();
      swift_bridgeObjectRetain(*(void *)(v128 - 256));
      v129._countAndFlagsBits = v287;
      v129._object = v300;
      String.append(_:)(v129);
      sub_100085F14();
      sub_1000AAE44();
      *(void *)&__int128 v310 = sub_10008620C(v310, v130, (uint64_t *)&v306);
      uint64_t v131 = (uint64_t)v269;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v310, v269, v127 + 4);
      sub_1000AAE44();
      sub_1000AA410((uint64_t)&v317);
      swift_release(v118);
      sub_1000AAC2C();
      sub_10007B980();
      v127[12] = 34;
      sub_1000AAEC8();
      v127[13] = 8;
      sub_1000AA668();
      *(void *)&__int128 v310 = sub_10007A488(v282, v268 | 0x8000000000000000LL, (uint64_t *)&v306);
      sub_100086194((uint64_t)&v310, v131);
      sub_1000AA410((uint64_t)&v316);
      sub_1000AA410((uint64_t)&v314);
      sub_1000AA410((uint64_t)v315);
      sub_1000AAFE8();
      sub_100086038(v132, v133, v134, "%{public}s%{public}s", v127);
      uint64_t v135 = v289;
      swift_arrayDestroy(v289, 2LL, v267);
      sub_10007B974(v135);
      unint64_t v105 = (unint64_t)v300;
      sub_10007B974((uint64_t)v127);

      sub_1000AA5CC();
      a3 = v105;
      unint64_t v136 = v105;
    }

    else
    {

      sub_1000AA410((uint64_t)&v316);
      sub_1000AA410((uint64_t)&v314);
      sub_1000AA410((uint64_t)v315);
      sub_1000AA668();
      sub_1000AAEC8();
      a3 = (uint64_t)v300;
      sub_100086144();
      sub_1000AA410((uint64_t)&v317);
      swift_release(v118);
      sub_1000AAC2C();
      sub_1000AAC24();
      sub_1000AA71C();
      sub_1000AA5CC();
      unint64_t v136 = a3;
    }

    swift_bridgeObjectRelease(v136);
    sub_100085BC4(v297, type metadata accessor for SKLogger);
    uint64_t v100 = _swiftEmptyDictionarySingleton;
    uint64_t v7 = v116;
LABEL_69:
    sub_1000AA714(0x746E756F63736964LL, 0xE900000000000073LL, &v310);
    if (!v311)
    {
      sub_100085298((uint64_t)&v310, (uint64_t *)&unk_100328ED0);
      goto LABEL_196;
    }

    uint64_t v137 = sub_1000AACA8();
    uint64_t v140 = *(void *)(v306 + 16);
    v299 = (_BYTE *)v306;
    if (v140) {
      break;
    }
    uint64_t v142 = _swiftEmptyArrayStorage;
LABEL_195:
    swift_bridgeObjectRelease(v299);
    v311 = v295;
    *(void *)&__int128 v310 = v142;
    sub_10012A9E0((uint64_t)&v310, 0x746E756F63736964LL, 0xE900000000000073LL);
    a3 = (uint64_t)v300;
    uint64_t v7 = v284;
    BOOL v10 = v283;
LABEL_196:
    uint64_t v240 = sub_10007B1FC((uint64_t *)&unk_10032A680);
    uint64_t v241 = sub_1000AA314(v240, 40LL);
    *(_OWORD *)(v241 + 16) = v286;
    *(void *)(v241 + 32) = v304;
    v311 = v295;
    *(void *)&__int128 v310 = v241;
    sub_10012A9E0((uint64_t)&v310, 0x73726566666FLL, 0xE600000000000000LL);
    v308 = _swiftEmptyDictionarySingleton;
    v311 = v296;
    *(void *)&__int128 v310 = v309;
    sub_10012A9E0((uint64_t)&v310, 0x7475626972747461LL, 0xEA00000000007365LL);
    uint64_t v242 = sub_1000AAA98();
    sub_1000AA714(v242, v243, v244);
    if (v311)
    {
      if ((sub_10009369C( (uint64_t)&v306,  (uint64_t)&v310,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
      {
        swift_bridgeObjectRelease(v303);
        v311 = &type metadata for String;
        __int128 v310 = v306;
        goto LABEL_205;
      }
    }

    else
    {
      sub_100085298((uint64_t)&v310, (uint64_t *)&unk_100328ED0);
    }

    uint64_t v245 = sub_1000AAA98();
    sub_10012A674(v245, v246, v303, v247);
    sub_10007B980();
    if (!v311)
    {
      sub_100085298((uint64_t)&v310, (uint64_t *)&unk_100328ED0);
LABEL_204:
      v311 = &type metadata for String;
      *(void *)&__int128 v310 = 0LL;
      *((void *)&v310 + 1) = 0xE000000000000000LL;
      goto LABEL_205;
    }

    uint64_t v248 = sub_1000AACA8();
    *(void *)&__int128 v310 = v306;
    uint64_t v251 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    v311 = &type metadata for String;
    *(void *)&__int128 v310 = v251;
    *((void *)&v310 + 1) = v252;
LABEL_205:
    sub_10012A9E0((uint64_t)&v310, 25705LL, 0xE200000000000000LL);
    v253 = v308;
    if ((swift_isUniquelyReferenced_nonNull_native(v301) & 1) != 0)
    {
      v254 = v301;
    }

    else
    {
      sub_100130E08();
      v254 = v258;
    }

    unint64_t v256 = v254[2];
    unint64_t v255 = v254[3];
    if (v256 >= v255 >> 1)
    {
      sub_1000AA9B8(v255);
      sub_100130E08();
      v254 = v259;
    }

    unint64_t v257 = v294 + 1;
    v254[2] = v256 + 1;
    v301 = v254;
    v254[v256 + 4] = v253;
    unint64_t v25 = v257;
    sub_100085298((uint64_t)&v312, (uint64_t *)&unk_100328ED0);
    uint64_t v23 = v275;
    if (v25 == v281) {
      goto LABEL_216;
    }
  }

  uint64_t v141 = (void *)(v306 + 32);
  uint64_t v142 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v143 = *v141;
    unint64_t v144 = *(void *)(*v141 + 16LL);
    swift_bridgeObjectRetain(*v141);
    if (v144 && (uint64_t v145 = sub_1000AA984(), v147 = sub_1000AA794(v145, v146), (v148 & 1) != 0))
    {
      sub_1000AA3F0(v147);
      char v149 = sub_1000AA388();
      v308 = _swiftEmptyDictionarySingleton;
      sub_1000AABB8();
      uint64_t v150 = _swiftEmptyDictionarySingleton[2];
      BOOL v152 = (v151 & 1) == 0;
      Swift::Int v153 = v150 + v152;
      if (__OFADD__(v150, v152)) {
        goto LABEL_218;
      }
      sub_1000AA8FC();
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      unint64_t v105 = (unint64_t)&v308;
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v149, v153))
      {
        LOBYTE(v105) = (_BYTE)v308;
        sub_1000AABB8();
        sub_1000AA4F4();
        if (!v155) {
          goto LABEL_232;
        }
        unint64_t v144 = v154;
      }

      uint64_t v100 = v308;
      if ((v102 & 1) != 0)
      {
        sub_1000AA2F0();
      }

      else
      {
        sub_1000AA588();
        *uint64_t v163 = v162 & 0xFFFF0000FFFFFFFFLL | 0x6500000000LL;
        sub_1000AA344((uint64_t)v163);
        if (v165) {
          goto LABEL_226;
        }
        v100[2] = v164;
      }

      sub_1000AA47C();
    }

    else
    {
      sub_10008600C();
      uint64_t v156 = sub_1000AA984();
      sub_1000AA4AC(v156, v157);
      sub_1000AA400();
      if ((v105 & 1) != 0)
      {
        sub_1000AA498();
        sub_1000AA5F4();
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        sub_1000AA3CC();
        sub_1000AA3A4();
        sub_1000AA448();
        uint64_t v158 = sub_1000AA418();
        _NativeDictionary._delete(at:)(v158, v159, v160, v161, &protocol witness table for String);
        sub_1000AA47C();
      }

      else
      {
        sub_1000AA5C0();
      }

      sub_1000AA4A0();
    }

    if (*(void *)(v143 + 16) && (v166 = sub_1000AA7E8(), unint64_t v168 = sub_1000AA794(v166, v167), (v169 & 1) != 0))
    {
      sub_1000AA3F0(v168);
      sub_1000AA388();
      sub_1000AAA10();
      sub_1000AA4AC(0x726F466563697270LL, 0xEE0064657474616DLL);
      sub_1000AA468();
      if (v165) {
        goto LABEL_219;
      }
      sub_1000AA8FC();
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      if (sub_1000AA3B8())
      {
        LOBYTE(v105) = (_BYTE)v308;
        sub_100132130(0x726F466563697270LL, 0xEE0064657474616DLL);
        sub_1000AA4F4();
        if (!v155) {
          goto LABEL_232;
        }
        unint64_t v144 = v170;
      }

      uint64_t v100 = v308;
      if ((v102 & 1) != 0)
      {
        sub_1000AA2F0();
      }

      else
      {
        sub_1000AA588();
        *uint64_t v176 = v175 | 0x726F466500000000LL;
        sub_1000AA344((uint64_t)v176);
        if (v165) {
          goto LABEL_227;
        }
        v100[2] = v177;
      }

      sub_1000AA47C();
    }

    else
    {
      sub_10008600C();
      sub_1000AA4AC(0x726F466563697270LL, 0xEE0064657474616DLL);
      sub_1000AA400();
      if ((v105 & 1) != 0)
      {
        sub_1000AA498();
        sub_1000AA5F4();
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        sub_1000AA3CC();
        sub_1000AA3A4();
        sub_1000AA448();
        uint64_t v171 = sub_1000AA418();
        _NativeDictionary._delete(at:)(v171, v172, v173, v174, &protocol witness table for String);
        sub_1000AA47C();
      }

      else
      {
        sub_1000AA5C0();
      }

      sub_1000AA4A0();
    }

    if (*(void *)(v143 + 16)
      && (unint64_t v144 = v302 | 0x8000000000000000LL,
          unint64_t v178 = sub_1000AA794(0xD00000000000001BLL, v302 | 0x8000000000000000LL),
          (v179 & 1) != 0))
    {
      sub_1000AA3F0(v178);
      sub_1000AA388();
      sub_1000AAA10();
      sub_1000AA4AC(0xD00000000000001BLL, v144);
      sub_1000AA468();
      if (v165) {
        goto LABEL_220;
      }
      sub_1000AA8FC();
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      if (sub_1000AA3B8())
      {
        LOBYTE(v105) = (_BYTE)v308;
        unint64_t v180 = sub_1000AAE68();
        sub_100132130(v180, v181);
        sub_1000AA4F4();
        if (!v155) {
          goto LABEL_232;
        }
        unint64_t v144 = v182;
      }

      uint64_t v100 = v308;
      if ((v102 & 1) != 0)
      {
        sub_1000AA2F0();
      }

      else
      {
        sub_1000AA31C();
        unint64_t v189 = v302 | 0x8000000000000000LL;
        *uint64_t v190 = 0xD00000000000001BLL;
        v190[1] = v189;
        sub_1000853B0(&v306, (_OWORD *)(v100[7] + 32 * v144));
        uint64_t v191 = v100[2];
        BOOL v165 = __OFADD__(v191, 1LL);
        uint64_t v192 = v191 + 1;
        if (v165) {
          goto LABEL_228;
        }
        v100[2] = v192;
      }

      sub_1000AA47C();
    }

    else
    {
      sub_10008600C();
      unint64_t v183 = sub_1000AAE68();
      sub_1000AA4AC(v183, v184);
      sub_1000AA400();
      if ((v105 & 1) != 0)
      {
        sub_1000AA498();
        sub_1000AA5F4();
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        sub_1000AA3CC();
        sub_1000AA3A4();
        sub_1000AA448();
        uint64_t v185 = sub_1000AA418();
        _NativeDictionary._delete(at:)(v185, v186, v187, v188, &protocol witness table for String);
        sub_1000AA47C();
      }

      else
      {
        sub_1000AA5C0();
      }

      sub_1000AA4A0();
    }

    if (*(void *)(v143 + 16) && (uint64_t v193 = sub_1000AA914(), v195 = sub_1000AA794(v193, v194), (v196 & 1) != 0))
    {
      sub_1000AA3F0(v195);
      sub_1000AA388();
      sub_1000AAA10();
      sub_1000AA4AC(0x726550664F6D756ELL, 0xEC00000073646F69LL);
      sub_1000AA468();
      if (v165) {
        goto LABEL_221;
      }
      sub_1000AA8FC();
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      if (sub_1000AA3B8())
      {
        LOBYTE(v105) = (_BYTE)v308;
        uint64_t v197 = sub_1000AA914();
        sub_100132130(v197, v198);
        sub_1000AA4F4();
        if (!v155) {
          goto LABEL_232;
        }
        unint64_t v144 = v199;
      }

      uint64_t v100 = v308;
      if ((v102 & 1) != 0)
      {
        sub_1000AA2F0();
      }

      else
      {
        sub_1000AA31C();
        void *v204 = 0x726550664F6D756ELL;
        sub_1000AA344((uint64_t)v204);
        if (v165) {
          goto LABEL_229;
        }
        v100[2] = v205;
      }

      sub_1000AA47C();
    }

    else
    {
      sub_10008600C();
      sub_1000AA4AC(0x726550664F6D756ELL, 0xEC00000073646F69LL);
      sub_1000AA400();
      if ((v105 & 1) != 0)
      {
        sub_1000AA498();
        sub_1000AA5F4();
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        sub_1000AA3CC();
        sub_1000AA3A4();
        sub_1000AA448();
        uint64_t v200 = sub_1000AA418();
        _NativeDictionary._delete(at:)(v200, v201, v202, v203, &protocol witness table for String);
        sub_1000AA47C();
      }

      else
      {
        sub_1000AA5C0();
      }

      sub_1000AA4A0();
    }

    if (*(void *)(v143 + 16) && (uint64_t v206 = sub_1000AAD84(), v208 = sub_1000AA794(v206, v207), (v209 & 1) != 0))
    {
      sub_1000AA3F0(v208);
      sub_1000AA388();
      sub_1000AAA10();
      sub_1000AA4AC(0x6570795465646F6DLL, 0xE800000000000000LL);
      sub_1000AA468();
      if (v165) {
        goto LABEL_222;
      }
      sub_1000AA8FC();
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      if (sub_1000AA3B8())
      {
        LOBYTE(v105) = (_BYTE)v308;
        uint64_t v210 = sub_1000AAD84();
        sub_100132130(v210, v211);
        sub_1000AA4F4();
        if (!v155) {
          goto LABEL_232;
        }
        unint64_t v144 = v212;
      }

      uint64_t v100 = v308;
      if ((v102 & 1) != 0)
      {
        sub_1000AA2F0();
      }

      else
      {
        sub_1000AA31C();
        void *v217 = 0x6570795465646F6DLL;
        sub_1000AA344((uint64_t)v217);
        if (v165) {
          goto LABEL_230;
        }
        v100[2] = v218;
      }

      sub_1000AA47C();
    }

    else
    {
      sub_10008600C();
      sub_1000AA4AC(0x6570795465646F6DLL, 0xE800000000000000LL);
      sub_1000AA400();
      if ((v105 & 1) != 0)
      {
        sub_1000AA498();
        sub_1000AA5F4();
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        sub_1000AA3CC();
        sub_1000AA3A4();
        sub_1000AA448();
        uint64_t v213 = sub_1000AA418();
        _NativeDictionary._delete(at:)(v213, v214, v215, v216, &protocol witness table for String);
        sub_1000AA47C();
      }

      else
      {
        sub_1000AA5C0();
      }

      sub_1000AA4A0();
    }

    if (*(void *)(v143 + 16) && (unint64_t v219 = sub_1000AA794(1701869940LL, 0xE400000000000000LL), (v220 & 1) != 0))
    {
      sub_1000AA3F0(v219);
      sub_1000AA388();
      sub_1000AAA10();
      sub_1000AA4AC(1701869940LL, 0xE400000000000000LL);
      sub_1000AA468();
      if (v165) {
        goto LABEL_223;
      }
      sub_1000AA8FC();
      sub_10007B1FC((uint64_t *)&unk_10032B190);
      if (sub_1000AA3B8())
      {
        LOBYTE(v105) = (_BYTE)v308;
        sub_100132130(1701869940LL, 0xE400000000000000LL);
        sub_1000AA4F4();
        if (!v155) {
          goto LABEL_232;
        }
        unint64_t v144 = v221;
      }

      uint64_t v100 = v308;
      if ((v102 & 1) != 0)
      {
        sub_1000AA2F0();
      }

      else
      {
        sub_1000AA31C();
        void *v226 = 1701869940LL;
        sub_1000AA344((uint64_t)v226);
        if (v165) {
          goto LABEL_231;
        }
        v100[2] = v227;
      }

      sub_1000AA47C();
    }

    else
    {
      sub_10008600C();
      sub_1000AA4AC(1701869940LL, 0xE400000000000000LL);
      sub_1000AA400();
      if ((v105 & 1) != 0)
      {
        sub_1000AA498();
        sub_1000AA5F4();
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        sub_1000AA3CC();
        sub_1000AA3A4();
        sub_1000AA448();
        uint64_t v222 = sub_1000AA418();
        _NativeDictionary._delete(at:)(v222, v223, v224, v225, &protocol witness table for String);
        sub_1000AA47C();
      }

      else
      {
        sub_1000AA5C0();
      }

      sub_1000AA4A0();
    }

    if (*(void *)(v143 + 16) && (unint64_t v228 = sub_1000AA794(25705LL, 0xE200000000000000LL), (v229 & 1) != 0)) {
      sub_1000AA3F0(v228);
    }
    else {
      sub_1000AA5C0();
    }
    sub_10009C494();
    if (!v311)
    {
      sub_1000AA4A0();
      sub_10008600C();
      sub_1000AA4AC(0x6449726566666FLL, 0xE700000000000000LL);
      sub_1000AA400();
      if ((v105 & 1) != 0)
      {
        LOBYTE(v102) = sub_1000AA498();
        v308 = v100;
        Swift::Int v230 = v100[3];
        sub_10007B1FC((uint64_t *)&unk_10032B190);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(v102, v230);
        uint64_t v100 = v308;
        sub_1000AA5B8(v308[6] + 16 * v144);
        sub_1000853B0((_OWORD *)(v100[7] + 32 * v144), &v306);
        uint64_t v231 = sub_1000AA418();
        _NativeDictionary._delete(at:)(v231, v232, v233, v234, &protocol witness table for String);
        sub_1000AA47C();
      }

      else
      {
        __int128 v306 = 0u;
        __int128 v307 = 0u;
      }

      sub_100085298((uint64_t)&v306, (uint64_t *)&unk_100328ED0);
      goto LABEL_187;
    }

    sub_1000AA388();
    sub_1000AAA10();
    sub_1000AA4AC(0x6449726566666FLL, 0xE700000000000000LL);
    sub_1000AA468();
    if (v165) {
      break;
    }
    sub_1000AA8FC();
    sub_10007B1FC((uint64_t *)&unk_10032B190);
    if (sub_1000AA3B8())
    {
      sub_100132130(0x6449726566666FLL, 0xE700000000000000LL);
      sub_1000AA4F4();
      if (!v155) {
        goto LABEL_232;
      }
    }

    uint64_t v100 = v308;
    if ((v102 & 1) != 0)
    {
      sub_1000AA2F0();
    }

    else
    {
      sub_1000AA31C();
      void *v235 = 0x6449726566666FLL;
      sub_1000AA344((uint64_t)v235);
      if (v165) {
        goto LABEL_224;
      }
      v100[2] = v236;
    }

    sub_1000AA47C();
LABEL_187:
    if ((swift_isUniquelyReferenced_nonNull_native(v142) & 1) == 0)
    {
      sub_100130E08();
      uint64_t v142 = v238;
    }

    unint64_t v105 = v142[2];
    unint64_t v237 = v142[3];
    if (v105 >= v237 >> 1)
    {
      sub_1000AA9B8(v237);
      sub_100130E08();
      uint64_t v142 = v239;
    }

    v142[2] = v105 + 1;
    v142[v105 + 4] = v100;
    ++v141;
    --v140;
    uint64_t v100 = _swiftEmptyDictionarySingleton;
    if (!v140) {
      goto LABEL_195;
    }
  }

  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

                uint64_t v74 = 0LL;
                __n128 v75 = 0xE000000000000000LL;
                goto LABEL_53;
              }

uint64_t sub_10009FCD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = a1 + 16 * v1;
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(*(void *)(v2 + 24));
  return v3;
}

uint64_t sub_10009FD1C()
{
  return 1635017060LL;
}

uint64_t sub_10009FD2C(void *a1)
{
  id v2 = [a1 object];
  if (v2)
  {
    id v3 = v2;
    _bridgeAnyObjectToAny(_:)(v8);
    swift_unknownObjectRelease(v3);
  }

  else
  {
    memset(v8, 0, sizeof(v8));
  }

  sub_1000A9BAC((uint64_t)v8, (uint64_t)&v9);
  if (v10)
  {
    uint64_t v4 = sub_10007B1FC(&qword_10032A580);
    if ((sub_10009369C((uint64_t)&v7, (uint64_t)&v9, (uint64_t)&type metadata for Any + 8, v4) & 1) == 0)
    {

LABEL_12:
      sub_100085EF0();
      goto LABEL_13;
    }

    sub_1000AAD44(1635017060LL, 0xE400000000000000LL, &v9);

    sub_100086004();
    if (v10)
    {
      uint64_t v5 = sub_10007B1FC(&qword_10032A588);
      goto LABEL_12;
    }
  }

  else
  {
  }

  sub_100085EF0();
  sub_100085298((uint64_t)&v9, (uint64_t *)&unk_100328ED0);
LABEL_13:
  sub_1000AAC54();
  return sub_1000AAFB8();
}

uint64_t sub_10009FE6C()
{
  uint64_t v0 = type metadata accessor for ProductLoader();
  uint64_t v1 = swift_allocObject(v0, 128LL, 15LL);
  uint64_t result = sub_1000A22E0();
  qword_10033E078 = v1;
  return result;
}

uint64_t sub_10009FEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10007B1FC((uint64_t *)&unk_10032A490);
  __chkstk_darwin(v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  uint64_t v13 = v2;
  (*(void (**)(_BYTE *, void))(v8 + 104))( v7,  enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:));
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)( &type metadata for ProductResponse,  v7,  sub_1000A2308,  v10,  &type metadata for ProductResponse);
}

void sub_10009FF60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = sub_10007B1FC(&qword_10032A4A0);
  __chkstk_darwin(v11);
  uint64_t v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t ProductsTask = type metadata accessor for LoadProductsTask(0LL);
  uint64_t v15 = __chkstk_darwin(ProductsTask);
  uint64_t v17 = &v28[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000A9710(a3, (uint64_t)v17 + *(int *)(v15 + 20), type metadata accessor for ProductRequest);
  uint64_t v18 = (char *)v17 + *(int *)(ProductsTask + 24);
  uint64_t v19 = sub_10007B1FC(&qword_10032A3E0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v18, a1, v19);
  *uint64_t v17 = a2;
  swift_beginAccess(a4 + 112, v28, 33LL, 0LL);
  sub_1000A9710((uint64_t)v17, (uint64_t)v13, type metadata accessor for LoadProductsTask);
  id v20 = a2;
  sub_100133C18(0LL, 0LL, (uint64_t)v13);
  swift_endAccess(v28);
  if (*(void *)(a4 + 120))
  {
    sub_100085BC4((uint64_t)v17, type metadata accessor for LoadProductsTask);
  }

  else
  {
    uint64_t v21 = type metadata accessor for TaskPriority(0LL);
    sub_10007D0AC((uint64_t)v10, 1LL, 1LL, v21);
    unint64_t v22 = sub_1000A893C();
    uint64_t v23 = (void *)swift_allocObject(&unk_1002EB9F0, 40LL, 7LL);
    v23[2] = a4;
    v23[3] = v22;
    v23[4] = a4;
    swift_retain_n(a4, 2LL);
    sub_1000F9480((uint64_t)v10, (uint64_t)&unk_10032A4B8, (uint64_t)v23);
    uint64_t v25 = v24;
    sub_100085BC4((uint64_t)v17, type metadata accessor for LoadProductsTask);
    uint64_t v26 = *(void *)(a4 + 120);
    *(void *)(a4 + 120) = v25;
    swift_release(v26);
  }

uint64_t sub_1000A0190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v6 = sub_10007B1FC(&qword_10032A4C0);
  void v4[6] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ProductsTask = type metadata accessor for LoadProductsTask(0LL);
  v4[7] = ProductsTask;
  uint64_t v8 = *(void *)(ProductsTask - 8);
  v4[8] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[9] = swift_task_alloc(v9);
  v4[10] = swift_task_alloc(v9);
  v4[11] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A0234, a4, 0LL);
}

uint64_t sub_1000A0234()
{
  uint64_t v2 = sub_1000AA8C0();
  uint64_t v3 = *(void *)(v0 + 112);
  if (*(void *)(v3 + 16))
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v3);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1001340B8(v3);
      uint64_t v3 = result;
    }

    uint64_t v5 = *(void *)(v3 + 16);
    if (!v5)
    {
      __break(1u);
      return result;
    }

    sub_1000AA4C4(v5);
    sub_1000AAA84();
    uint64_t v2 = sub_1000AAE98();
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  sub_1000AAA4C(v2, v6);
  sub_1000AAEA4();
  if (v7)
  {
    sub_100085298(*(void *)(v1 + 48), &qword_10032A4C0);
    sub_1000AAF68();
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    return sub_1000AA69C(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    sub_1000AAF30();
    uint64_t v8 = (void *)swift_task_alloc(dword_10032A4CC);
    *(void *)(v1 + 96) = v8;
    sub_1000AAC70(v8, (uint64_t)sub_1000A030C);
    return sub_1000AA684();
  }

uint64_t sub_1000A030C()
{
  return sub_100092F20();
}

uint64_t sub_1000A0348()
{
  uint64_t v2 = sub_1000AA8C0();
  uint64_t v3 = *(void *)(v0 + 112);
  if (*(void *)(v3 + 16))
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v3);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1001340B8(v3);
      uint64_t v3 = result;
    }

    uint64_t v5 = *(void *)(v3 + 16);
    if (!v5)
    {
      __break(1u);
      return result;
    }

    sub_1000AA4C4(v5);
    sub_1000AAA84();
    uint64_t v2 = sub_1000AAE98();
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  sub_1000AAA4C(v2, v6);
  sub_1000AAEA4();
  if (v7)
  {
    sub_100085298(*(void *)(v1 + 48), &qword_10032A4C0);
    sub_1000AAF68();
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    return sub_1000AA69C(*(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    sub_1000AAF30();
    uint64_t v8 = (void *)swift_task_alloc(dword_10032A4CC);
    *(void *)(v1 + 96) = v8;
    sub_1000AAC70(v8, (uint64_t)sub_1000A030C);
    return sub_1000AA684();
  }

uint64_t sub_1000A0430()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  v1[9] = v2;
  unint64_t v3 = (*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v3);
  v1[11] = swift_task_alloc(v3);
  return swift_task_switch(sub_1000A049C, 0LL, 0LL);
}

#error "1000A05B4: call analysis failed (funcsize=268)"
uint64_t sub_1000A0918(char a1)
{
  uint64_t **v1;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v3 = *v1;
  unint64_t v9 = v3;
  sub_10009C788(v3[13], &v9);
  if ((a1 & 1) != 0)
  {
    uint64_t v4 = (void *)swift_task_alloc(dword_10032A4EC);
    v3[14] = (uint64_t)v4;
    uint64_t v5 = sub_1000AAF08(v4, (uint64_t)sub_1000A09B8);
    return sub_1000A2754(v5);
  }

  else
  {
    char v7 = (void *)swift_task_alloc(dword_10032A4E4);
    v3[16] = (uint64_t)v7;
    uint64_t v8 = sub_1000AAF08(v7, (uint64_t)sub_1000A0A48);
    return sub_1000A3064(v8);
  }

uint64_t sub_1000A09B8()
{
  *(void *)(v1 + 120) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A0A04()
{
  *(void *)(v0 + 24) = 0LL;
  uint64_t v2 = sub_10007B1FC(&qword_10032A3E0);
  sub_1000AA7AC(v2);
  sub_1000AAD4C();
  sub_1000939C0();
  return sub_1000AA42C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000A0A48()
{
  *(void *)(v1 + 136) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A0A94()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032A3E0);
  sub_1000AA7AC(v1);
  sub_1000AAD4C();
  sub_1000939C0();
  return sub_1000AA42C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A0AD8()
{
  uint64_t v1 = sub_10007B1FC(&qword_10032A3E0);
  sub_1000AA7AC(v1);
  sub_1000AAD4C();
  sub_1000939C0();
  return sub_1000AA42C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A0B1C()
{
  return v0;
}

uint64_t sub_1000A0B48()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ProductLoader()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd13ProductLoader);
}

void **sub_1000A0B80(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v7 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    char v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (unint64_t *)((char *)a1 + v8);
    uint64_t v10 = (unint64_t *)((char *)a2 + v8);
    uint64_t v11 = (int *)type metadata accessor for ClientOverride(0LL);
    uint64_t v12 = v4;
    if (sub_10007D824((uint64_t)v10, 1LL, (uint64_t)v11))
    {
      uint64_t v13 = sub_10007B1FC(&qword_10032A3D8);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      unint64_t v14 = v10[1];
      if (v14 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
      }

      else
      {
        unint64_t v15 = *v10;
        sub_1000881FC(*v10, v10[1]);
        *unint64_t v9 = v15;
        v9[1] = v14;
      }

      unint64_t v16 = v10[3];
      v9[2] = v10[2];
      void v9[3] = v16;
      unint64_t v17 = v10[5];
      void v9[4] = v10[4];
      void v9[5] = v17;
      uint64_t v18 = v11[7];
      uint64_t v19 = (char *)v9 + v18;
      id v20 = (char *)v10 + v18;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      uint64_t v21 = sub_10007B1FC(&qword_10032A028);
      if (sub_10007D824((uint64_t)v20, 3LL, v21))
      {
        uint64_t v22 = type metadata accessor for ClientOverride.Server(0LL);
        memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64LL));
      }

      else
      {
        uint64_t v23 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v19, v20, v23);
        sub_10007D0AC((uint64_t)v19, 0LL, 3LL, v21);
      }

      uint64_t v24 = v11[8];
      uint64_t v25 = (char *)v9 + v24;
      uint64_t v26 = (char *)v10 + v24;
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = v11[9];
      uint64_t v28 = (char *)v9 + v27;
      uint64_t v29 = (char *)v10 + v27;
      v28[8] = v29[8];
      *(void *)uint64_t v28 = *(void *)v29;
      uint64_t v30 = v11[10];
      uint64_t v31 = (char *)v9 + v30;
      uint64_t v32 = (char *)v10 + v30;
      uint64_t v33 = type metadata accessor for UUID(0LL);
      if (sub_10007D824((uint64_t)v32, 1LL, v33))
      {
        uint64_t v34 = sub_10007B1FC(&qword_10032A3D0);
        memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v31, v32, v33);
        sub_10007D0AC((uint64_t)v31, 0LL, 1LL, v33);
      }

      sub_10007D0AC((uint64_t)v9, 0LL, 1LL, (uint64_t)v11);
    }

    __int128 v35 = (int *)type metadata accessor for ProductRequest(0LL);
    uint64_t v36 = v35[5];
    uint64_t v37 = (char *)v9 + v36;
    uint64_t v38 = (char *)v10 + v36;
    uint64_t v39 = *(void *)v38;
    char v40 = v38[8];
    j__swift_bridgeObjectRetain(*(void *)v38);
    *(void *)uint64_t v37 = v39;
    v37[8] = v40;
    *((_BYTE *)v9 + v35[6]) = *((_BYTE *)v10 + v35[6]);
    uint64_t v41 = v35[7];
    unint64_t v42 = *(unint64_t *)((char *)v10 + v41);
    *(unint64_t *)((char *)v9 + v41) = v42;
    uint64_t v43 = v35[8];
    int v44 = (unint64_t *)((char *)v9 + v43);
    unint64_t v45 = (unint64_t *)((char *)v10 + v43);
    uint64_t v46 = v45[1];
    void *v44 = *v45;
    v44[1] = v46;
    *((_BYTE *)v9 + v35[9]) = *((_BYTE *)v10 + v35[9]);
    uint64_t v47 = *(int *)(a3 + 24);
    uint64_t v48 = (char *)v7 + v47;
    uint64_t v49 = (char *)a2 + v47;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v46);
    uint64_t v50 = sub_10007B1FC(&qword_10032A3E0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16LL))(v48, v49, v50);
  }

  return v7;
}

uint64_t sub_1000A0E90(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)((char *)a1 + *(int *)(a2 + 20));
  uint64_t v5 = type metadata accessor for ClientOverride(0LL);
  if (!sub_10007D824((uint64_t)v4, 1LL, v5))
  {
    unint64_t v6 = v4[1];
    if (v6 >> 60 != 15) {
      sub_10007F054(*v4, v6);
    }
    swift_bridgeObjectRelease(v4[3]);
    swift_bridgeObjectRelease(v4[5]);
    uint64_t v7 = (uint64_t)v4 + *(int *)(v5 + 28);
    uint64_t v8 = sub_10007B1FC(&qword_10032A028);
    if (!sub_10007D824(v7, 3LL, v8))
    {
      uint64_t v9 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v7, v9);
    }

    uint64_t v10 = (uint64_t)v4 + *(int *)(v5 + 40);
    uint64_t v11 = type metadata accessor for UUID(0LL);
  }

  uint64_t v12 = (int *)type metadata accessor for ProductRequest(0LL);
  j__swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v12[5]));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v12[7]));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v4 + v12[8] + 8));
  uint64_t v13 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v14 = sub_10007B1FC(&qword_10032A3E0);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
}

void **sub_1000A0FFC(void **a1, void **a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (unint64_t *)((char *)a1 + v7);
  uint64_t v9 = (unint64_t *)((char *)a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for ClientOverride(0LL);
  id v11 = v6;
  if (sub_10007D824((uint64_t)v9, 1LL, (uint64_t)v10))
  {
    uint64_t v12 = sub_10007B1FC(&qword_10032A3D8);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    unint64_t v13 = v9[1];
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    }

    else
    {
      unint64_t v14 = *v9;
      sub_1000881FC(*v9, v9[1]);
      unint64_t *v8 = v14;
      v8[1] = v13;
    }

    unint64_t v15 = v9[3];
    _OWORD v8[2] = v9[2];
    v8[3] = v15;
    unint64_t v16 = v9[5];
    void v8[4] = v9[4];
    void v8[5] = v16;
    uint64_t v17 = v10[7];
    uint64_t v18 = (char *)v8 + v17;
    uint64_t v19 = (char *)v9 + v17;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    uint64_t v20 = sub_10007B1FC(&qword_10032A028);
    if (sub_10007D824((uint64_t)v19, 3LL, v20))
    {
      uint64_t v21 = type metadata accessor for ClientOverride.Server(0LL);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      uint64_t v22 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v18, v19, v22);
      sub_10007D0AC((uint64_t)v18, 0LL, 3LL, v20);
    }

    uint64_t v23 = v10[8];
    uint64_t v24 = (char *)v8 + v23;
    uint64_t v25 = (char *)v9 + v23;
    *(void *)uint64_t v24 = *(void *)v25;
    v24[8] = v25[8];
    uint64_t v26 = v10[9];
    uint64_t v27 = (char *)v8 + v26;
    uint64_t v28 = (char *)v9 + v26;
    v27[8] = v28[8];
    *(void *)uint64_t v27 = *(void *)v28;
    uint64_t v29 = v10[10];
    uint64_t v30 = (char *)v8 + v29;
    uint64_t v31 = (char *)v9 + v29;
    uint64_t v32 = type metadata accessor for UUID(0LL);
    if (sub_10007D824((uint64_t)v31, 1LL, v32))
    {
      uint64_t v33 = sub_10007B1FC(&qword_10032A3D0);
      memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
      sub_10007D0AC((uint64_t)v30, 0LL, 1LL, v32);
    }

    sub_10007D0AC((uint64_t)v8, 0LL, 1LL, (uint64_t)v10);
  }

  uint64_t v34 = (int *)type metadata accessor for ProductRequest(0LL);
  uint64_t v35 = v34[5];
  uint64_t v36 = (char *)v8 + v35;
  uint64_t v37 = (char *)v9 + v35;
  uint64_t v38 = *(void *)v37;
  char v39 = v37[8];
  j__swift_bridgeObjectRetain(*(void *)v37);
  *(void *)uint64_t v36 = v38;
  v36[8] = v39;
  *((_BYTE *)v8 + v34[6]) = *((_BYTE *)v9 + v34[6]);
  uint64_t v40 = v34[7];
  unint64_t v41 = *(unint64_t *)((char *)v9 + v40);
  *(unint64_t *)((char *)v8 + v40) = v41;
  uint64_t v42 = v34[8];
  uint64_t v43 = (unint64_t *)((char *)v8 + v42);
  int v44 = (unint64_t *)((char *)v9 + v42);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  *((_BYTE *)v8 + v34[9]) = *((_BYTE *)v9 + v34[9]);
  uint64_t v46 = *(int *)(a3 + 24);
  uint64_t v47 = (char *)a1 + v46;
  uint64_t v48 = (char *)a2 + v46;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  uint64_t v49 = sub_10007B1FC(&qword_10032A3E0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16LL))(v47, v48, v49);
  return a1;
}

void **sub_1000A12E0(void **a1, void **a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (uint64_t)a1 + v9;
  id v11 = (uint64_t *)((char *)a2 + v9);
  uint64_t v12 = (int *)type metadata accessor for ClientOverride(0LL);
  int v13 = sub_10007D824(v10, 1LL, (uint64_t)v12);
  int v14 = sub_10007D824((uint64_t)v11, 1LL, (uint64_t)v12);
  if (v13)
  {
    if (!v14)
    {
      unint64_t v15 = v11[1];
      if (v15 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      }

      else
      {
        uint64_t v21 = *v11;
        sub_1000881FC(*v11, v11[1]);
        *(void *)uint64_t v10 = v21;
        *(void *)(v10 + _Block_object_dispose(va, 8) = v15;
      }

      *(void *)(v10 + 16) = v11[2];
      uint64_t v22 = v11[3];
      *(void *)(v10 + 24) = v22;
      *(void *)(v10 + 32) = v11[4];
      uint64_t v23 = v11[5];
      *(void *)(v10 + 40) = v23;
      uint64_t v24 = v12[7];
      uint64_t v25 = (void *)(v10 + v24);
      uint64_t v26 = (char *)v11 + v24;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      uint64_t v27 = sub_10007B1FC(&qword_10032A028);
      if (sub_10007D824((uint64_t)v26, 3LL, v27))
      {
        uint64_t v28 = type metadata accessor for ClientOverride.Server(0LL);
        memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64LL));
      }

      else
      {
        uint64_t v29 = type metadata accessor for URL(0LL);
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v25, v26, v29);
        sub_10007D0AC((uint64_t)v25, 0LL, 3LL, v27);
      }

      uint64_t v30 = v12[8];
      uint64_t v31 = v10 + v30;
      uint64_t v32 = (char *)v11 + v30;
      uint64_t v33 = *(void *)v32;
      *(_BYTE *)(v31 + _Block_object_dispose(va, 8) = v32[8];
      *(void *)uint64_t v31 = v33;
      uint64_t v34 = v12[9];
      uint64_t v35 = v10 + v34;
      uint64_t v36 = (char *)v11 + v34;
      uint64_t v37 = *(void *)v36;
      *(_BYTE *)(v35 + _Block_object_dispose(va, 8) = v36[8];
      *(void *)uint64_t v35 = v37;
      uint64_t v38 = v12[10];
      char v39 = (void *)(v10 + v38);
      uint64_t v40 = (char *)v11 + v38;
      uint64_t v41 = type metadata accessor for UUID(0LL);
      if (sub_10007D824((uint64_t)v40, 1LL, v41))
      {
        uint64_t v42 = sub_10007B1FC(&qword_10032A3D0);
        memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v41 - 8) + 16LL))(v39, v40, v41);
        sub_10007D0AC((uint64_t)v39, 0LL, 1LL, v41);
      }

      uint64_t v43 = v10;
      uint64_t v44 = (uint64_t)v12;
      goto LABEL_20;
    }

    goto LABEL_7;
  }

  if (v14)
  {
    sub_100085BC4(v10, type metadata accessor for ClientOverride);
LABEL_7:
    size_t v16 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D8) - 8) + 64LL);
    uint64_t v17 = (void *)v10;
    uint64_t v18 = v11;
    goto LABEL_8;
  }

  unint64_t v19 = v11[1];
  if (*(void *)(v10 + 8) >> 60 == 15LL)
  {
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = *v11;
      sub_1000881FC(*v11, v11[1]);
      *(void *)uint64_t v10 = v20;
      *(void *)(v10 + _Block_object_dispose(va, 8) = v19;
      goto LABEL_26;
    }

    goto LABEL_24;
  }

  if (v19 >> 60 == 15)
  {
    sub_1000A18B0(v10);
LABEL_24:
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    goto LABEL_26;
  }

  uint64_t v65 = *v11;
  sub_1000881FC(*v11, v11[1]);
  uint64_t v66 = *(void *)v10;
  unint64_t v67 = *(void *)(v10 + 8);
  *(void *)uint64_t v10 = v65;
  *(void *)(v10 + _Block_object_dispose(va, 8) = v19;
  sub_10007F054(v66, v67);
LABEL_26:
  *(void *)(v10 + 16) = v11[2];
  uint64_t v68 = v11[3];
  uint64_t v69 = *(void *)(v10 + 24);
  *(void *)(v10 + 24) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  *(void *)(v10 + 32) = v11[4];
  uint64_t v70 = v11[5];
  uint64_t v71 = *(void *)(v10 + 40);
  *(void *)(v10 + 40) = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  uint64_t v72 = v12[7];
  uint64_t v73 = (void *)(v10 + v72);
  uint64_t v74 = (char *)v11 + v72;
  uint64_t v75 = sub_10007B1FC(&qword_10032A028);
  int v76 = sub_10007D824((uint64_t)v73, 3LL, v75);
  int v77 = sub_10007D824((uint64_t)v74, 3LL, v75);
  if (!v76)
  {
    if (!v77)
    {
      uint64_t v95 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v95 - 8) + 24LL))(v73, v74, v95);
      goto LABEL_32;
    }

    sub_100085298((uint64_t)v73, &qword_10032A028);
    goto LABEL_31;
  }

  if (v77)
  {
LABEL_31:
    uint64_t v79 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v73, v74, *(void *)(*(void *)(v79 - 8) + 64LL));
    goto LABEL_32;
  }

  uint64_t v78 = type metadata accessor for URL(0LL);
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v78 - 8) + 16LL))(v73, v74, v78);
  sub_10007D0AC((uint64_t)v73, 0LL, 3LL, v75);
LABEL_32:
  uint64_t v80 = v12[8];
  uint64_t v81 = v10 + v80;
  uint64_t v82 = (char *)v11 + v80;
  uint64_t v83 = *(void *)v82;
  *(_BYTE *)(v81 + _Block_object_dispose(va, 8) = v82[8];
  *(void *)uint64_t v81 = v83;
  uint64_t v84 = v12[9];
  uint64_t v85 = v10 + v84;
  int v86 = (char *)v11 + v84;
  uint64_t v87 = *(void *)v86;
  *(_BYTE *)(v85 + _Block_object_dispose(va, 8) = v86[8];
  *(void *)uint64_t v85 = v87;
  uint64_t v88 = v12[10];
  uint64_t v89 = v10 + v88;
  uint64_t v90 = (uint64_t)v11 + v88;
  uint64_t v91 = type metadata accessor for UUID(0LL);
  int v92 = sub_10007D824(v89, 1LL, v91);
  int v93 = sub_10007D824(v90, 1LL, v91);
  if (v92)
  {
    if (!v93)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 16LL))(v89, v90, v91);
      uint64_t v43 = v89;
      uint64_t v44 = v91;
LABEL_20:
      sub_10007D0AC(v43, 0LL, 1LL, v44);
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v94 = *(void *)(v91 - 8);
    if (!v93)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 24))(v89, v90, v91);
      goto LABEL_21;
    }

    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v89, v91);
  }

  size_t v16 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D0) - 8) + 64LL);
  uint64_t v17 = (void *)v89;
  uint64_t v18 = (const void *)v90;
LABEL_8:
  memcpy(v17, v18, v16);
LABEL_21:
  uint64_t v45 = (int *)type metadata accessor for ProductRequest(0LL);
  uint64_t v46 = v45[5];
  uint64_t v47 = (uint64_t *)(v10 + v46);
  uint64_t v48 = (char *)v11 + v46;
  uint64_t v49 = *(void *)v48;
  char v50 = v48[8];
  j__swift_bridgeObjectRetain(*(void *)v48);
  uint64_t v51 = *v47;
  *uint64_t v47 = v49;
  *((_BYTE *)v47 + _Block_object_dispose(va, 8) = v50;
  j__swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v10 + v45[6]) = *((_BYTE *)v11 + v45[6]);
  uint64_t v52 = v45[7];
  uint64_t v53 = *(uint64_t *)((char *)v11 + v52);
  uint64_t v54 = *(void *)(v10 + v52);
  *(void *)(v10 + v52) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  uint64_t v55 = v45[8];
  uint64_t v56 = (void *)(v10 + v55);
  uint64_t v57 = (uint64_t *)((char *)v11 + v55);
  void *v56 = *v57;
  uint64_t v58 = v57[1];
  uint64_t v59 = v56[1];
  v56[1] = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  *(_BYTE *)(v10 + v45[9]) = *((_BYTE *)v11 + v45[9]);
  uint64_t v60 = *(int *)(a3 + 24);
  uint64_t v61 = (char *)a1 + v60;
  unint64_t v62 = (char *)a2 + v60;
  uint64_t v63 = sub_10007B1FC(&qword_10032A3E0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 24LL))(v61, v62, v63);
  return a1;
}

uint64_t sub_1000A18B0(uint64_t a1)
{
  return a1;
}

void *sub_1000A18E4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  id v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ClientOverride(0LL);
  if (sub_10007D824((uint64_t)v8, 1LL, (uint64_t)v9))
  {
    uint64_t v10 = sub_10007B1FC(&qword_10032A3D8);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    __int128 v11 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v11;
    void v7[2] = v8[2];
    uint64_t v12 = v9[7];
    int v13 = (char *)v7 + v12;
    int v14 = (char *)v8 + v12;
    uint64_t v15 = sub_10007B1FC(&qword_10032A028);
    if (sub_10007D824((uint64_t)v14, 3LL, v15))
    {
      uint64_t v16 = type metadata accessor for ClientOverride.Server(0LL);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      uint64_t v17 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v13, v14, v17);
      sub_10007D0AC((uint64_t)v13, 0LL, 3LL, v15);
    }

    uint64_t v18 = v9[8];
    unint64_t v19 = (char *)v7 + v18;
    uint64_t v20 = (char *)v8 + v18;
    *(void *)unint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = v9[9];
    uint64_t v22 = (char *)v7 + v21;
    uint64_t v23 = (char *)v8 + v21;
    v22[8] = v23[8];
    *(void *)uint64_t v22 = *(void *)v23;
    uint64_t v24 = v9[10];
    uint64_t v25 = (char *)v7 + v24;
    uint64_t v26 = (char *)v8 + v24;
    uint64_t v27 = type metadata accessor for UUID(0LL);
    if (sub_10007D824((uint64_t)v26, 1LL, v27))
    {
      uint64_t v28 = sub_10007B1FC(&qword_10032A3D0);
      memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32LL))(v25, v26, v27);
      sub_10007D0AC((uint64_t)v25, 0LL, 1LL, v27);
    }

    sub_10007D0AC((uint64_t)v7, 0LL, 1LL, (uint64_t)v9);
  }

  uint64_t v29 = (int *)type metadata accessor for ProductRequest(0LL);
  uint64_t v30 = v29[5];
  uint64_t v31 = (char *)v7 + v30;
  uint64_t v32 = (char *)v8 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  *((_BYTE *)v7 + v29[6]) = *((_BYTE *)v8 + v29[6]);
  *(void *)((char *)v7 + v29[7]) = *(void *)((char *)v8 + v29[7]);
  *(_OWORD *)((char *)v7 + v29[8]) = *(_OWORD *)((char *)v8 + v29[8]);
  *((_BYTE *)v7 + v29[9]) = *((_BYTE *)v8 + v29[9]);
  uint64_t v33 = *(int *)(a3 + 24);
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = sub_10007B1FC(&qword_10032A3E0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32LL))(v34, v35, v36);
  return a1;
}

void **sub_1000A1B64(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for ClientOverride(0LL);
  int v11 = sub_10007D824(v8, 1LL, (uint64_t)v10);
  int v12 = sub_10007D824(v9, 1LL, (uint64_t)v10);
  if (v11)
  {
    if (!v12)
    {
      __int128 v13 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v13;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      uint64_t v14 = v10[7];
      uint64_t v15 = (void *)(v8 + v14);
      uint64_t v16 = (const void *)(v9 + v14);
      uint64_t v17 = sub_10007B1FC(&qword_10032A028);
      if (sub_10007D824((uint64_t)v16, 3LL, v17))
      {
        uint64_t v18 = type metadata accessor for ClientOverride.Server(0LL);
        memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64LL));
      }

      else
      {
        uint64_t v24 = type metadata accessor for URL(0LL);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v15, v16, v24);
        sub_10007D0AC((uint64_t)v15, 0LL, 3LL, v17);
      }

      uint64_t v25 = v10[8];
      uint64_t v26 = v8 + v25;
      uint64_t v27 = v9 + v25;
      *(void *)uint64_t v26 = *(void *)v27;
      *(_BYTE *)(v26 + _Block_object_dispose(va, 8) = *(_BYTE *)(v27 + 8);
      uint64_t v28 = v10[9];
      uint64_t v29 = v8 + v28;
      uint64_t v30 = v9 + v28;
      *(_BYTE *)(v29 + _Block_object_dispose(va, 8) = *(_BYTE *)(v30 + 8);
      *(void *)uint64_t v29 = *(void *)v30;
      uint64_t v31 = v10[10];
      uint64_t v32 = (void *)(v8 + v31);
      uint64_t v33 = (const void *)(v9 + v31);
      uint64_t v34 = type metadata accessor for UUID(0LL);
      if (sub_10007D824((uint64_t)v33, 1LL, v34))
      {
        uint64_t v35 = sub_10007B1FC(&qword_10032A3D0);
        memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v32, v33, v34);
        sub_10007D0AC((uint64_t)v32, 0LL, 1LL, v34);
      }

      uint64_t v36 = v8;
      uint64_t v37 = (uint64_t)v10;
      goto LABEL_18;
    }

    goto LABEL_7;
  }

  if (v12)
  {
    sub_100085BC4(v8, type metadata accessor for ClientOverride);
LABEL_7:
    size_t v19 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D8) - 8) + 64LL);
    uint64_t v20 = (void *)v8;
    uint64_t v21 = (const void *)v9;
    goto LABEL_8;
  }

  unint64_t v22 = *(void *)(v8 + 8);
  if (v22 >> 60 == 15) {
    goto LABEL_12;
  }
  unint64_t v23 = *(void *)(v9 + 8);
  if (v23 >> 60 == 15)
  {
    sub_1000A18B0(v8);
LABEL_12:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_21;
  }

  uint64_t v57 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + _Block_object_dispose(va, 8) = v23;
  sub_10007F054(v57, v22);
LABEL_21:
  uint64_t v58 = *(void *)(v9 + 24);
  uint64_t v59 = *(void *)(v8 + 24);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = v58;
  swift_bridgeObjectRelease(v59);
  uint64_t v60 = *(void *)(v9 + 40);
  uint64_t v61 = *(void *)(v8 + 40);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = v60;
  swift_bridgeObjectRelease(v61);
  uint64_t v62 = v10[7];
  uint64_t v63 = (void *)(v8 + v62);
  uint64_t v64 = (const void *)(v9 + v62);
  uint64_t v65 = sub_10007B1FC(&qword_10032A028);
  int v66 = sub_10007D824((uint64_t)v63, 3LL, v65);
  int v67 = sub_10007D824((uint64_t)v64, 3LL, v65);
  if (!v66)
  {
    if (!v67)
    {
      uint64_t v83 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v83 - 8) + 40LL))(v63, v64, v83);
      goto LABEL_27;
    }

    sub_100085298((uint64_t)v63, &qword_10032A028);
    goto LABEL_26;
  }

  if (v67)
  {
LABEL_26:
    uint64_t v69 = type metadata accessor for ClientOverride.Server(0LL);
    memcpy(v63, v64, *(void *)(*(void *)(v69 - 8) + 64LL));
    goto LABEL_27;
  }

  uint64_t v68 = type metadata accessor for URL(0LL);
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v68 - 8) + 32LL))(v63, v64, v68);
  sub_10007D0AC((uint64_t)v63, 0LL, 3LL, v65);
LABEL_27:
  uint64_t v70 = v10[8];
  uint64_t v71 = v8 + v70;
  uint64_t v72 = v9 + v70;
  *(void *)uint64_t v71 = *(void *)v72;
  *(_BYTE *)(v71 + _Block_object_dispose(va, 8) = *(_BYTE *)(v72 + 8);
  uint64_t v73 = v10[9];
  uint64_t v74 = v8 + v73;
  uint64_t v75 = v9 + v73;
  *(_BYTE *)(v74 + _Block_object_dispose(va, 8) = *(_BYTE *)(v75 + 8);
  *(void *)uint64_t v74 = *(void *)v75;
  uint64_t v76 = v10[10];
  uint64_t v77 = v8 + v76;
  uint64_t v78 = v9 + v76;
  uint64_t v79 = type metadata accessor for UUID(0LL);
  int v80 = sub_10007D824(v77, 1LL, v79);
  int v81 = sub_10007D824(v78, 1LL, v79);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 32LL))(v77, v78, v79);
      uint64_t v36 = v77;
      uint64_t v37 = v79;
LABEL_18:
      sub_10007D0AC(v36, 0LL, 1LL, v37);
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v82 = *(void *)(v79 - 8);
    if (!v81)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 40))(v77, v78, v79);
      goto LABEL_19;
    }

    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v77, v79);
  }

  size_t v19 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D0) - 8) + 64LL);
  uint64_t v20 = (void *)v77;
  uint64_t v21 = (const void *)v78;
LABEL_8:
  memcpy(v20, v21, v19);
LABEL_19:
  uint64_t v38 = (int *)type metadata accessor for ProductRequest(0LL);
  uint64_t v39 = v38[5];
  uint64_t v40 = (uint64_t *)(v8 + v39);
  uint64_t v41 = (uint64_t *)(v9 + v39);
  uint64_t v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  uint64_t v43 = *v40;
  *uint64_t v40 = v42;
  *((_BYTE *)v40 + _Block_object_dispose(va, 8) = (_BYTE)v41;
  j__swift_bridgeObjectRelease(v43);
  *(_BYTE *)(v8 + v38[6]) = *(_BYTE *)(v9 + v38[6]);
  uint64_t v44 = v38[7];
  uint64_t v45 = *(void *)(v8 + v44);
  *(void *)(v8 + v44) = *(void *)(v9 + v44);
  swift_bridgeObjectRelease(v45);
  uint64_t v46 = v38[8];
  uint64_t v47 = (void *)(v8 + v46);
  uint64_t v48 = (uint64_t *)(v9 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  uint64_t v51 = v47[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease(v51);
  *(_BYTE *)(v8 + v38[9]) = *(_BYTE *)(v9 + v38[9]);
  uint64_t v52 = *(int *)(a3 + 24);
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  uint64_t v55 = sub_10007B1FC(&qword_10032A3E0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 40LL))(v53, v54, v55);
  return a1;
}

uint64_t sub_1000A2070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A207C);
}

uint64_t sub_1000A207C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000AA460();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v9 = sub_10007B1FC(&qword_10032A3E0);
      uint64_t v10 = *(int *)(a3 + 24);
    }

    return sub_10007D824((uint64_t)a1 + v10, a2, v9);
  }

uint64_t sub_1000A2114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A2120);
}

void sub_1000A2120(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_1000AB000();
  }

  else
  {
    uint64_t v8 = sub_1000AA460();
    if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v9 = sub_10007B1FC(&qword_10032A3E0);
      uint64_t v10 = *(int *)(a4 + 24);
    }

    sub_10007D0AC((uint64_t)a1 + v10, a2, a2, v9);
  }

uint64_t type metadata accessor for LoadProductsTask(uint64_t a1)
{
  uint64_t result = qword_10032A440;
  if (!qword_10032A440) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LoadProductsTask);
  }
  return result;
}

void sub_1000A21E4(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t v2 = type metadata accessor for ProductRequest(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000A2278(319LL);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

void sub_1000A2278(uint64_t a1)
{
  if (!qword_10032A450[0])
  {
    uint64_t v2 = sub_1000849B4(&qword_100329B90);
    unint64_t v3 = type metadata accessor for AsyncThrowingStream.Continuation( a1,  &type metadata for ProductResponse,  v2,  &protocol self-conformance witness table for Error);
    if (!v4) {
      atomic_store(v3, qword_10032A450);
    }
  }

uint64_t sub_1000A22E0()
{
  *(void *)(v0 + swift_weakDestroy(v0 + 112) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + 120) = 0LL;
  return v0;
}

void sub_1000A2308(uint64_t a1)
{
}

uint64_t sub_1000A2320()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  v1[7] = v2;
  unint64_t v3 = (*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[8] = swift_task_alloc(v3);
  v1[9] = swift_task_alloc(v3);
  return swift_task_switch(sub_1000A238C, 0LL, 0LL);
}

uint64_t sub_1000A238C()
{
  uint64_t v45 = v2;
  uint64_t v46 = v3;
  uint64_t v44 = v0;
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = v4 + *(int *)(sub_1000AA458() + 20);
  uint64_t v6 = sub_1000AA460();
  unsigned int v7 = *(unsigned __int8 *)(v5 + *(int *)(v6 + 24)) - 1;
  if (v7 > 1)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v9 = (uint64_t *)(v0 + 64);
    uint64_t v20 = sub_100079604(*(void *)(v0 + 56), (uint64_t)qword_10033E1A8);
    sub_1000AAD74(v20, v21, type metadata accessor for SKLogger);
    unint64_t v22 = (uint64_t *)(v5 + *(int *)(v6 + 32));
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    sub_100085EE8(v23);
    uint64_t v27 = (os_log_s *)sub_1000935A4();
    if (os_log_type_enabled(v27, v26))
    {
      uint64_t v28 = sub_10007B9FC(22LL);
      uint64_t v39 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v28 = 136446466;
      sub_1000AAE18();
      sub_100093528();
      sub_1000AB094(v24);
      sub_100085F14();
      sub_100093460();
      *(void *)(v0 + 16) = sub_10008620C(v43, v29, &v42);
      sub_1000AB080(v0 + 16, v0 + 24, v30, v28 + 12, v31, v32, v33, v34, v38);
      sub_10007B980();
      sub_10007D974(v23);
      *(_WORD *)(v28 + 12) = 2082;
      *(void *)(v0 + 24) = sub_10007A488(0xD000000000000022LL, 0x800000010029F060LL, &v42);
      sub_100086194(v0 + 24, v0 + 32);
      sub_100086038((void *)&_mh_execute_header, v27, v26, "%{public}s%{public}s", (uint8_t *)v28);
      sub_10009BFA0(v35, v36, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v39);
      sub_10007B974(v28);
    }

    else
    {
      sub_10007D974(v23);
    }
  }

  else
  {
    int v41 = *(unsigned __int8 *)(v5 + *(int *)(v6 + 24)) - 1;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v9 = (uint64_t *)(v0 + 72);
    uint64_t v8 = *(os_log_s **)(v0 + 72);
    uint64_t v10 = sub_100079604(*(void *)(v0 + 56), (uint64_t)qword_10033E1A8);
    sub_1000A9710(v10, (uint64_t)v8, type metadata accessor for SKLogger);
    int v11 = (uint64_t *)(v5 + *(int *)(v6 + 32));
    uint64_t v12 = *v11;
    __int128 v13 = (void *)v11[1];
    static os_log_type_t.default.getter(v14);
    uint64_t v15 = sub_100085EE8((uint64_t)v13);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    if (sub_100093468(v16))
    {
      uint64_t v17 = sub_10007B9FC(22LL);
      uint64_t v40 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v17 = 136446466;
      sub_1000AAE18();
      swift_bridgeObjectRetain(v13);
      v18._countAndFlagsBits = v12;
      v18._object = v13;
      String.append(_:)(v18);
      sub_100085F14();
      sub_10009C494();
      *(void *)(v0 + 32) = sub_10008620C(v43, v19, &v42);
      ((void (*)(uint64_t, uint64_t))UnsafeMutableRawBufferPointer.copyMemory(from:))(v0 + 32, v0 + 40);
      sub_10007B980();
      sub_10007D974((uint64_t)v13);
      *(_WORD *)(v17 + 12) = 2082;
      *(void *)(v0 + 40) = sub_1000AB050(23LL, 0x800000010029F090LL, &v42);
      sub_100086194(v0 + 40, v0 + 48);
      sub_100086038((void *)&_mh_execute_header, v8, v1, "%{public}s%{public}s", (uint8_t *)v17);
      sub_1000AA434((uint64_t)&type metadata for Any, v38, v0 + 40, v40);
      sub_10007B974(v17 + 14);
      sub_10007B974(v17);
    }

    else
    {
      sub_10007D974((uint64_t)v13);
    }

    unsigned int v7 = v41;
  }

  sub_100085BC4(*v9, type metadata accessor for SKLogger);
  sub_1000931C8();
  sub_100093280();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v7 < 2);
}

uint64_t sub_1000A2754(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = sub_10007B1FC(&qword_10032A4F0);
  v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URLQueryItem(0LL);
  v2[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint8_t v2[16] = v6;
  v2[17] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URLComponents(0LL);
  v2[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[19] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v9);
  v2[21] = swift_task_alloc(v9);
  v2[22] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A2824, 0LL, 0LL);
}

uint64_t sub_1000A2824()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_1000DEA24();
  uint64_t v3 = v2;
  *(void *)(v0 + 184) = v2;
  unint64_t v4 = sub_1000A41E8();
  uint64_t v6 = v5;
  id v7 = objc_allocWithZone(&OBJC_CLASS___AMSMediaTokenService);
  swift_unknownObjectRetain(v3);
  sub_1000A8638(v4, v6, v3);
  uint64_t v9 = v8;
  *(void *)(v0 + 192) = v8;
  id v10 = sub_1000DF468();
  sub_1000AAE8C((uint64_t)v10, "setClientInfo:");

  id v11 = [objc_allocWithZone(AMSMediaRequestEncoder) initWithTokenService:v9 bag:v3];
  *(void *)(v0 + 200) = v11;
  id v12 = sub_1000DF468();
  [v11 setClientInfo:v12];

  uint64_t v13 = *(int *)(sub_1000AA458() + 20);
  *(_DWORD *)(v0 + 352) = v13;
  uint64_t v14 = v1 + v13;
  uint64_t v15 = sub_1000AA460();
  *(void *)(v0 + 20_Block_object_dispose(va, 8) = v15;
  uint64_t v16 = (uint64_t *)(v14 + *(int *)(v15 + 32));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_bridgeObjectRetain(v18);
  sub_1000A94FC(v17, v18, v11);
  sub_100085FB4();
  id v19 = [objc_allocWithZone(AMSMediaProtocolHandler) initWithTokenService:v9];
  *(void *)(v0 + 216) = v19;
  id v20 = [objc_allocWithZone(AMSMediaResponseDecoder) init];
  *(void *)(v0 + 224) = v20;
  sub_1000DF67C();
  unint64_t v22 = v21;
  *(void *)(v0 + 232) = v21;
  [v21 setProtocolHandler:v19];
  sub_1000AAE8C((uint64_t)[v22 setResponseDecoder:v20], "setSession:");
  uint64_t v23 = (void *)swift_task_alloc(dword_10032A4FC);
  *(void *)(v0 + 240) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1000A2A08;
  return sub_1000A42CC(*(void *)(v0 + 176));
}

uint64_t sub_1000A2A08()
{
  *(void *)(v1 + 24_Block_object_dispose(va, 8) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A2A54()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 88) + *(int *)(v0 + 352) + *(int *)(*(void *)(v0 + 208) + 20LL));
  uint64_t v2 = *v1;
  if ((v1[1] & 1) != 0)
  {
    uint64_t v3 = *(void (**)(void, void, void))(*(void *)(v0 + 152) + 16LL);
    v3(*(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 144));
    uint64_t v5 = (void (*)(uint64_t, void))URLComponents.queryItems.modify(v0 + 16);
    if (*v4)
    {
      uint64_t v6 = v4;
      uint64_t v8 = *(void *)(v0 + 128);
      uint64_t v7 = *(void *)(v0 + 136);
      uint64_t v24 = *(void *)(v0 + 120);
      *(void *)(v0 + 72) = v2;
      uint64_t v9 = sub_10007B1FC(&qword_10032A500);
      unint64_t v10 = sub_1000A973C();
      BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v9, v10);
      uint64_t v12 = v11;
      sub_1000862B8();
      URLQueryItem.init(name:value:)(0xD00000000000001CLL, v13, v14, v12);
      sub_10007B980();
      sub_1000A8898((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100130EA8);
      uint64_t v15 = *(void *)(*v6 + 16LL);
      sub_1000A88FC(v15, (uint64_t (*)(BOOL))sub_100130EA8);
      uint64_t v16 = *v6;
      *(void *)(v16 + 16) = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))( v16 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v15,
        v7,
        v24);
    }

    v5(v0 + 16, 0LL);
    v3(*(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 144));
    uint64_t v17 = (void *)swift_task_alloc(dword_10032A514);
    *(void *)(v0 + 296) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1000A2DB8;
    sub_1000AA63C();
    return sub_1000A660C(v18, v19, v20);
  }

  else
  {
    unint64_t v22 = (void *)swift_task_alloc(dword_10032A51C);
    *(void *)(v0 + 256) = v22;
    sub_1000AAC70(v22, (uint64_t)sub_1000A2C18);
    sub_1000AA63C();
    return sub_1000A370C(v23);
  }

uint64_t sub_1000A2C18()
{
  uint64_t v4 = v2[32];
  *uint64_t v5 = *v3;
  v2[33] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    v2[34] = v0;
  }
  sub_100093420();
  return sub_10009C2D4();
}

uint64_t sub_1000A2C70()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v7 = (void *)swift_task_alloc(64LL);
  v0[35] = v7;
  void v7[2] = v1;
  v7[3] = v4;
  void v7[4] = v5;
  v7[5] = v2;
  v7[6] = v3;
  v7[7] = v6;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[36] = v8;
  void *v8 = v0;
  v8[1] = sub_1000A2D20;
  sub_1000AB020();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000A2D20()
{
  return sub_1000AA908(v1, v2, v3);
}

uint64_t sub_1000A2D60()
{
  sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_1000AAACC();
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  uint64_t v6 = (uint64_t (*)(void))sub_100093CFC();
  return sub_100093184(v6);
}

uint64_t sub_1000A2DB8()
{
  uint64_t v2 = *(void *)(v1 + 152);
  if (v0) {
    sub_1000AAF8C(v2);
  }
  else {
    sub_1000AAA70(v2);
  }
  sub_100093420();
  return sub_1000AA484(v3, v4, v5);
}

uint64_t sub_1000A2E08()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[21].i64[0];
  uint64_t v2 = v0[19].i64[1];
  uint64_t v4 = (void *)v0[14].i64[0];
  uint64_t v3 = (void *)v0[14].i64[1];
  uint64_t v5 = (void *)v0[13].i64[1];
  uint64_t v6 = (void *)v0[12].i64[1];
  uint64_t v17 = v0[11].i64[0];
  uint64_t v15 = v0[11].i64[1];
  uint64_t v16 = v0[10].i64[1];
  uint64_t v7 = v0[9].i64[0];
  uint64_t v8 = v0[7].i64[0];
  uint64_t v12 = v0[6].i64[1];
  uint64_t v13 = (void *)v0[12].i64[0];
  uint64_t v14 = v0[6].i64[0];
  v0[3] = vextq_s8(v0[20], v0[20], 8uLL);
  v0[4].i64[0] = v2;
  uint64_t v9 = sub_10007B1FC(&qword_10032A3E0);
  AsyncThrowingStream.Continuation.yield(_:)(&v0[3], v9);

  swift_unknownObjectRelease(v15);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v14);
  v1(v16, v7);
  v1(v17, v7);
  sub_1000AAACC();
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  unint64_t v10 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000AA2C4(v10);
}

uint64_t sub_1000A2EFC()
{
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v2 = *(void **)(v0 + 232);
  uint64_t v3 = *(void **)(v0 + 216);
  uint64_t v5 = *(void **)(v0 + 192);
  uint64_t v4 = *(void **)(v0 + 200);
  swift_unknownObjectRelease(*(void *)(v0 + 184));

  sub_1000AA670();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000A2F70()
{
  sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  sub_1000AA670();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  return sub_100093184(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000A2FCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 344);
  uint64_t v15 = *(void **)(v12 + 224);
  uint64_t v14 = *(void **)(v12 + 232);
  uint64_t v16 = *(void **)(v12 + 216);
  uint64_t v17 = *(void **)(v12 + 192);
  uint64_t v18 = *(void *)(v12 + 176);
  uint64_t v19 = *(void *)(v12 + 184);
  uint64_t v20 = *(void *)(v12 + 168);
  uint64_t v21 = *(void *)(v12 + 144);

  swift_unknownObjectRelease(v19);
  v13(v20, v21);
  v13(v18, v21);
  sub_1000AA670();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000AA63C();
  return v22(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12);
}

uint64_t sub_1000A3064(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  v2[6] = v3;
  v2[7] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000A30C0, 0LL, 0LL);
}

uint64_t sub_1000A30C0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = v1 + *(int *)(sub_1000AA458() + 20);
  uint64_t v3 = sub_1000AA460();
  uint64_t v4 = v2 + *(int *)(v3 + 20);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = v3;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v6 = sub_100079604(*(void *)(v0 + 48), (uint64_t)qword_10033E1A8);
    sub_1000AAD74(v6, v7, type metadata accessor for SKLogger);
    uint64_t v8 = (uint64_t *)(v2 + *(int *)(v5 + 32));
    uint64_t v10 = *v8;
    uint64_t v9 = (void *)v8[1];
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    sub_100085EE8((uint64_t)v9);
    uint64_t v13 = (os_log_s *)sub_1000935A4();
    if (os_log_type_enabled(v13, v12))
    {
      uint64_t v14 = sub_10007B9FC(22LL);
      uint64_t v15 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v14 = 136446466;
      v25[0] = v15;
      v25[1] = 91LL;
      v25[2] = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v9);
      v16._countAndFlagsBits = v10;
      v16._object = v9;
      String.append(_:)(v16);
      sub_100085F14();
      sub_1000930DC();
      *(void *)(v0 + 16) = sub_10008620C(91LL, v17, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4);
      sub_10007B980();
      sub_10007D974((uint64_t)v9);
      *(_WORD *)(v14 + 12) = 2082;
      sub_1000862B8();
      *(void *)(v0 + 24) = sub_1000AB050(55LL, v18, v25);
      sub_100086194(v0 + 24, v0 + 32);
      sub_100086038((void *)&_mh_execute_header, v13, v12, "%{public}s%{public}s", (uint8_t *)v14);
      sub_100086030(v15, v19, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v15);
      sub_10007B974(v14);
    }

    else
    {
      sub_10007D974((uint64_t)v9);
    }

    sub_100085BC4(*(void *)(v0 + 56), type metadata accessor for SKLogger);
    unint64_t v23 = sub_1000A9B70();
    sub_100093030((uint64_t)&type metadata for LoadProductsTask.LoadProductsError, v23);
    sub_1000AA7DC(v24, 1);
    swift_task_dealloc(*(void *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v20 = *(void *)v4;
    uint64_t v21 = (void *)swift_task_alloc(dword_10032A51C);
    *(void *)(v0 + 64) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1000A3350;
    return sub_1000A370C(v20);
  }

uint64_t sub_1000A3350()
{
  if (v1)
  {
    swift_task_dealloc(v2[7]);
    return sub_1000AA51C(*(uint64_t (**)(void))(v3 + 8));
  }

  else
  {
    v2[9] = v0;
    sub_100093420();
    return sub_10009C2D4();
  }

uint64_t sub_1000A33A8()
{
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = sub_1000A6F94();
  v0[10] = v4;
  uint64_t v5 = (void *)swift_task_alloc(48LL);
  v0[11] = v5;
  v5[2] = v1;
  void v5[3] = v4;
  void v5[4] = v2;
  void v5[5] = v3;
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[12] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000A344C;
  sub_1000AB020();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000A344C()
{
  return sub_10009C2D4();
}

uint64_t sub_1000A3494()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100093CFC();
  return sub_10008751C(v1);
}

uint64_t sub_1000A34BC()
{
  *(void *)(v1 + 136) = v0;
  return swift_task_switch(sub_1000A34D4, 0LL, 0LL);
}

uint64_t sub_1000A34D4()
{
  uint64_t v2 = v1;
  if (qword_100328CA8 != -1) {
    swift_once(&qword_100328CA8, sub_10012C444);
  }
  id v3 = [v2 integerForKey:qword_10033E330];
  v0[18] = v3;
  swift_unknownObjectRelease(v2);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1000A35C0;
  uint64_t v4 = sub_1000AA7D4((uint64_t)(v0 + 2));
  v0[10] = _NSConcreteStackBlock;
  uint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  sub_1000937B0(v4, (uint64_t)sub_1000A36F8);
  [v3 valueWithCompletion:v5];
  return sub_1000AA79C();
}

uint64_t sub_1000A35C0()
{
  *(void *)(v0 + 152) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A3600()
{
  uint64_t v1 = *(void **)(v0 + 120);

  uint64_t v2 = Int.init(truncating:)(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1000A364C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 144);
  uint64_t v9 = *(void *)(v7 + 152);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  uint64_t v10 = (void *)_convertErrorToNSError(_:)(v9);
  uint64_t v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
  sub_1000D67E8(v11, v12, (id)0xCC);
  char v14 = v13;
  sub_100085EF0();

  uint64_t v21 = *(void *)(v7 + 152);
  if ((v14 & 1) != 0)
  {
    swift_errorRelease(v21);
    return (*(uint64_t (**)(uint64_t))(v7 + 8))(25LL);
  }

  else
  {
    swift_willThrow(v21, v15, v16, v17, v18, v19, v20);
    return (*(uint64_t (**)(void))(v7 + 8))();
  }

uint64_t sub_1000A36F8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return sub_1000A6BD8( a1,  a2,  a3,  a4,  (uint64_t (*)(void))sub_100121AC4,  (uint64_t (*)(uint64_t, void *, uint64_t))sub_100129E0C);
}

uint64_t sub_1000A370C(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  v2[8] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  v2[11] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for CharacterSet(0LL);
  v2[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[13] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v7);
  v2[15] = swift_task_alloc(v7);
  uint8_t v2[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000A37C8, 0LL, 0LL);
}

uint64_t sub_1000A37C8()
{
  uint64_t v3 = v0[6];
  swift_bridgeObjectRetain(v3);
  sub_1000A8A44(&v3);
  v0[17] = v3;
  uint64_t v1 = (void *)swift_task_alloc(dword_10032A55C);
  v0[18] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A3850;
  return sub_1000A34BC();
}

uint64_t sub_1000A3850()
{
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 152) = v4;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_release(*(void *)(v3 + 136));
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    sub_100093420();
    return swift_task_switch(v6, v7, v8);
  }

void sub_1000A3908()
{
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[13];
  static CharacterSet.urlQueryAllowed.getter();
  CharacterSet.init(charactersIn:)(4007487LL, 0xE300000000000000LL);
  CharacterSet.subtracting(_:)(v3);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  uint64_t v121 = v6;
  v6(v2, v4);
  uint64_t v123 = 0LL;
  unint64_t v124 = 0xE000000000000000LL;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v0[17];
  if (!v7)
  {
    swift_release(v8);
    uint64_t v80 = 0LL;
    uint64_t v116 = _swiftEmptyArrayStorage;
    unint64_t v83 = 0xE000000000000000LL;
    goto LABEL_53;
  }

  uint64_t v119 = 0LL;
  uint64_t v110 = (uint64_t)(v0 + 11);
  uint64_t v115 = (uint64_t)(v0 + 10);
  uint64_t v117 = (uint64_t)(v0 + 9);
  uint64_t v9 = (void *)(v8 + 40);
  uint64_t v116 = _swiftEmptyArrayStorage;
  int v118 = 136446466;
  uint64_t v108 = (char *)&type metadata for Any + 8;
  unint64_t v109 = 0x800000010029ED00LL;
  uint64_t v112 = (uint64_t)"Error in request for batch (";
  sub_1000AB058();
  unint64_t v113 = v10;
  uint64_t v114 = v11;
  sub_1000AB058();
  uint64_t v111 = v12;
  while (1)
  {
    uint64_t v13 = v0[15];
    uint64_t v14 = v0[12];
    uint64_t v16 = *(v9 - 1);
    uint64_t v15 = *v9;
    uint64_t v122 = v9;
    v0[2] = v16;
    v0[3] = v15;
    sub_1000AA78C();
    CharacterSet.init(charactersIn:)(44LL, 0xE100000000000000LL);
    unint64_t v17 = sub_1000A9B34();
    uint64_t v18 = StringProtocol.trimmingCharacters(in:)(v13, &type metadata for String, v17);
    unint64_t v20 = v19;
    v121(v13, v14);
    uint64_t v21 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000LL) == 0) {
      uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (v21)
    {
      uint64_t v22 = v0[16];
      v0[4] = v18;
      v0[5] = v20;
      uint64_t v23 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v22, &type metadata for String, v17);
      uint64_t v25 = v24;
      sub_10007BA44();
      if (v25)
      {
        uint64_t v26 = String.count.getter(v23, v25);
        if (v26 <= 256)
        {
          uint64_t v80 = v26;
          uint64_t v81 = v7;
          uint64_t v82 = v0[19];
          sub_100086144();
          uint64_t v84 = v123;
          unint64_t v83 = v124;
          sub_10009C738();
          uint64_t v85 = String.count.getter(v84, v83);
          sub_10007B980();
          if (v119 < v82 && v85 < 1) {
            goto LABEL_34;
          }
          uint64_t v87 = v85 + v80;
          if (__OFADD__(v85, v80)) {
            goto LABEL_64;
          }
          BOOL v88 = __OFADD__(v87, 1LL);
          uint64_t v89 = v87 + 1;
          if (v88) {
            goto LABEL_65;
          }
          if (v89 < 641)
          {
LABEL_34:
            uint64_t v7 = v81;
            if ((v83 & 0x2000000000000000LL) != 0) {
              goto LABEL_36;
            }
            uint64_t v95 = v84 & 0xFFFFFFFFFFFFLL;
          }

          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) != 0) {
              uint64_t v90 = v116;
            }
            else {
              sub_1000AA84C();
            }
            uint64_t v7 = v81;
            unint64_t v92 = v90[2];
            unint64_t v91 = v90[3];
            uint64_t v80 = v92 + 1;
            if (v92 >= v91 >> 1)
            {
              sub_1000AB06C(v91);
              sub_100131058();
            }

            v90[2] = v80;
            uint64_t v116 = v90;
            int v93 = &v90[2 * v92];
            v93[4] = v84;
            v93[5] = v83;
            unint64_t v83 = 0xE000000000000000LL;
            uint64_t v123 = 0LL;
            unint64_t v124 = 0xE000000000000000LL;
LABEL_36:
            uint64_t v95 = HIBYTE(v83) & 0xF;
          }

          BOOL v96 = v95 == 0;
          uint64_t v97 = 44LL;
          if (v96) {
            uint64_t v97 = 0LL;
          }
          uint64_t v98 = (void *)0xE000000000000000LL;
          if (!v96) {
            uint64_t v98 = (void *)0xE100000000000000LL;
          }
          v126._countAndFlagsBits = v97;
          v126._object = v98;
          sub_1000AB094(v23);
          sub_100093460();
          unint64_t v83 = (unint64_t)&v123;
          String.append(_:)(v126);
          sub_100085EF0();
          BOOL v88 = __OFADD__(v119++, 1LL);
          if (v88)
          {
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            sub_1000AA84C();
LABEL_58:
            unint64_t v103 = v101[2];
            unint64_t v102 = v101[3];
            uint64_t v104 = v101;
            if (v103 >= v102 >> 1)
            {
              sub_1000AA9B8(v102);
              sub_100131058();
              uint64_t v104 = v107;
            }

            v104[2] = v103 + 1;
            unint64_t v105 = &v104[2 * v103];
            unint64_t v105[4] = v80;
            v105[5] = v83;
            goto LABEL_62;
          }

          uint64_t v99 = v122;
          goto LABEL_49;
        }

        uint64_t v120 = v7;
        sub_100093460();
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        uint64_t v27 = (os_log_s *)v0[11];
        uint64_t v28 = sub_100079604(v0[8], (uint64_t)qword_10033E1A8);
        sub_1000A9710(v28, (uint64_t)v27, type metadata accessor for SKLogger);
        v126._countAndFlagsBits = 0LL;
        v126._object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(52LL);
        v29._object = (void *)(v112 | 0x8000000000000000LL);
        v29._countAndFlagsBits = 0xD000000000000013LL;
        String.append(_:)(v29);
        sub_100086114(v16);
        sub_100086144();
        v30._countAndFlagsBits = 0xD00000000000001FLL;
        v30._object = v111;
        String.append(_:)(v30);
        object = v126._object;
        sub_1000AA458();
        sub_1000AA460();
        uint64_t v32 = sub_1000AAC14();
        sub_100085EE8(v13);
        sub_100085EE8((uint64_t)object);
        uint64_t v33 = (os_log_s *)sub_1000935A4();
        if (sub_1000AAD34(v33))
        {
          uint64_t v34 = sub_10007B9FC(22LL);
          uint64_t v35 = sub_10007B9FC(64LL);
          sub_1000AA6D8( v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  (uint64_t)v108,  v109,  v110,  (uint64_t)v111,  v112,  (uint64_t)v113,  (uint64_t)v114,  v115,  (uint64_t)v116,  v117,  v118);
          sub_1000AACC8();
          sub_100085F14();
          sub_100085FB4();
          *(void *)(v34 + 4) = sub_10008620C(v126._countAndFlagsBits, v43, &v125);
          sub_10007B980();
          sub_10007D974(v13);
          *(_WORD *)(v34 + 12) = 2082;
          sub_1000AA78C();
          *(void *)(v34 + 14) = sub_1000AAC88();
          sub_100085E64((uint64_t)object);
          sub_100086038((void *)&_mh_execute_header, v27, (os_log_type_t)v7, "%{public}s%{public}s", (uint8_t *)v34);
          sub_100086030(v32, v44, (uint64_t)&type metadata for Any + 8);
          sub_10007B974(v32);
          sub_10007B974(v34);

          sub_100086144();
        }

        else
        {
          sub_10007D974(v13);
          sub_100085E64((uint64_t)object);
        }

        uint64_t v94 = (uint64_t *)v110;
      }

      else
      {
        uint64_t v120 = v7;
        if (qword_100328B40 != -1) {
          swift_once(&qword_100328B40, sub_1000F4208);
        }
        uint64_t v62 = (os_log_s *)v0[10];
        uint64_t v63 = sub_100079604(v0[8], (uint64_t)qword_10033E1A8);
        sub_1000A9710(v63, (uint64_t)v62, type metadata accessor for SKLogger);
        v126._countAndFlagsBits = 0LL;
        v126._object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(58LL);
        v64._countAndFlagsBits = 0xD000000000000013LL;
        v64._object = v114;
        String.append(_:)(v64);
        sub_100086114(v16);
        sub_100086144();
        v65._countAndFlagsBits = 0xD000000000000025LL;
        v65._object = v113;
        String.append(_:)(v65);
        int v66 = v126._object;
        sub_1000AA458();
        sub_1000AA460();
        uint64_t v67 = sub_1000AAC14();
        sub_100085EE8(v13);
        sub_100085EE8((uint64_t)v66);
        uint64_t v68 = (os_log_s *)sub_1000935A4();
        if (sub_1000AAD34(v68))
        {
          uint64_t v69 = sub_10007B9FC(22LL);
          uint64_t v70 = sub_10007B9FC(64LL);
          sub_1000AA6D8( v70,  v71,  v72,  v73,  v74,  v75,  v76,  v77,  (uint64_t)v108,  v109,  v110,  (uint64_t)v111,  v112,  (uint64_t)v113,  (uint64_t)v114,  v115,  (uint64_t)v116,  v117,  v118);
          sub_1000AACC8();
          sub_100085F14();
          sub_100085FB4();
          *(void *)(v69 + 4) = sub_10008620C(v126._countAndFlagsBits, v78, &v125);
          sub_10007B980();
          sub_10007D974(v13);
          *(_WORD *)(v69 + 12) = 2082;
          sub_1000AA78C();
          *(void *)(v69 + 14) = sub_1000AAC88();
          sub_100085E64((uint64_t)v66);
          sub_100086038((void *)&_mh_execute_header, v62, (os_log_type_t)v7, "%{public}s%{public}s", (uint8_t *)v69);
          sub_100086030(v67, v79, (uint64_t)&type metadata for Any + 8);
          sub_10007B974(v67);
          sub_10007B974(v69);

          sub_100086144();
        }

        else
        {
          sub_10007D974(v13);
          sub_100085E64((uint64_t)v66);
        }

        uint64_t v94 = (uint64_t *)v115;
      }

      uint64_t v7 = v120;
    }

    else
    {
      sub_100086144();
      sub_10007BA44();
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v45 = v0[9];
      uint64_t v46 = v0[7];
      uint64_t v47 = sub_100079604(v0[8], (uint64_t)qword_10033E1A8);
      sub_1000A9710(v47, v45, type metadata accessor for SKLogger);
      uint64_t v48 = v46 + *(int *)(sub_1000AA458() + 20);
      uint64_t v49 = sub_1000AA460();
      uint64_t v50 = (uint64_t *)(v48 + *(int *)(v49 + 32));
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      os_log_type_t v53 = static os_log_type_t.default.getter(v49);
      uint64_t v54 = sub_100085EE8(v52);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v56 = v53;
      if (os_log_type_enabled(v55, v53))
      {
        uint64_t v57 = sub_10007B9FC(22LL);
        uint64_t v58 = v7;
        uint64_t v59 = sub_10007B9FC(64LL);
        *(_DWORD *)uint64_t v57 = v118;
        uint64_t v125 = v59;
        v126._countAndFlagsBits = 91LL;
        v126._object = (void *)0xE100000000000000LL;
        sub_100093528();
        sub_1000AB094(v51);
        sub_100085F14();
        sub_100093460();
        *(void *)(v57 + 4) = sub_10008620C(v126._countAndFlagsBits, v60, &v125);
        sub_10007B980();
        sub_10007D974(v52);
        *(_WORD *)(v57 + 12) = 2082;
        *(void *)(v57 + 14) = sub_10007A488(0xD000000000000019LL, v109, &v125);
        sub_100086038((void *)&_mh_execute_header, v55, v56, "%{public}s%{public}s", (uint8_t *)v57);
        swift_arrayDestroy(v59, 2LL, v108);
        uint64_t v61 = v59;
        uint64_t v7 = v58;
        sub_10007B974(v61);
        sub_10007B974(v57);
      }

      else
      {
        sub_10007D974(v52);
      }

      uint64_t v94 = (uint64_t *)v117;
    }

    uint64_t v99 = v122;
    sub_100085BC4(*v94, type metadata accessor for SKLogger);
LABEL_49:
    uint64_t v9 = v99 + 2;
    if (!--v7)
    {
      swift_release(v0[17]);
      uint64_t v80 = v123;
      unint64_t v83 = v124;
LABEL_53:
      uint64_t v100 = HIBYTE(v83) & 0xF;
      if ((v83 & 0x2000000000000000LL) == 0) {
        uint64_t v100 = v80 & 0xFFFFFFFFFFFFLL;
      }
      if (v100)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0) {
          goto LABEL_66;
        }
        unint64_t v101 = v116;
        goto LABEL_58;
      }

      sub_10007B980();
LABEL_62:
      v121(v0[16], v0[12]);
      sub_1000939C0();
      sub_1000931C8();
      sub_100093280();
      sub_100093124();
      sub_1000932CC();
      sub_1000932D4();
      sub_1000AADDC();
      __asm { BR              X1 }
    }
  }

unint64_t sub_1000A41E8()
{
  unint64_t v0 = 0xD000000000000017LL;
  uint64_t v1 = type metadata accessor for Client.Server(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000DE6D4();
  uint64_t v4 = sub_10007B1FC(&qword_10032A028);
  int v5 = sub_10007D824((uint64_t)v3, 2LL, v4);
  if (v5)
  {
    if (v5 != 1) {
      return 0xD00000000000001ALL;
    }
  }

  else
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v3, v6);
    return 0xD000000000000018LL;
  }

  return v0;
}

uint64_t sub_1000A42CC(uint64_t a1)
{
  v2[273] = v1;
  v2[267] = a1;
  uint64_t v3 = type metadata accessor for URLQueryItem(0LL);
  v2[279] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[285] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[291] = swift_task_alloc(v5);
  v2[297] = swift_task_alloc(v5);
  v2[303] = swift_task_alloc(v5);
  v2[309] = swift_task_alloc(v5);
  v2[315] = swift_task_alloc(v5);
  v2[321] = swift_task_alloc(v5);
  uint64_t v6 = sub_10007B1FC(&qword_10032A590);
  v2[327] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URLComponents(0LL);
  v2[333] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[339] = v8;
  v2[345] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = (*(void *)(*(void *)(type metadata accessor for Client.Server(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[351] = swift_task_alloc(v9);
  v2[357] = swift_task_alloc(v9);
  v2[358] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000A43F8, 0LL, 0LL);
}

uint64_t sub_1000A43F8()
{
  uint64_t v1 = v0[358];
  uint64_t v2 = v0[357];
  sub_1000DEA24();
  uint64_t v4 = v3;
  v0[359] = v3;
  sub_1000DE6D4();
  uint64_t v5 = sub_10007B1FC(&qword_10032A028);
  sub_10007D0AC(v2, 1LL, 2LL, v5);
  char v6 = sub_1000DF738(v1, v2);
  sub_100085BC4(v2, type metadata accessor for Client.Server);
  sub_100085BC4(v1, type metadata accessor for Client.Server);
  if ((v6 & 1) != 0)
  {
    if (qword_100328C78 != -1) {
      swift_once(&qword_100328C78, sub_10012C16C);
    }
    uint64_t v7 = &qword_10033E300;
  }

  else
  {
    if (qword_100328C80 != -1) {
      swift_once(&qword_100328C80, sub_10012C1E4);
    }
    uint64_t v7 = &qword_10033E308;
  }

  uint64_t v8 = v0[351];
  unint64_t v9 = (void *)*v7;
  v0[360] = v9;
  id v10 = v9;
  uint64_t v11 = sub_10007CBFC((uint64_t)&unk_1002EBAB0);
  v0[361] = v11;
  *(void *)(v11 + 16) = v4;
  *(void *)(v11 + 24) = v10;
  sub_1000AAED8();
  id v12 = v10;
  sub_1000AAE84();
  uint64_t v13 = sub_1000849B4(&qword_10032A608);
  swift_asyncLet_begin(v0 + 82, 0LL, v13, &unk_10032A600, v11, v0 + 253);
  uint64_t v14 = sub_1000AA314((uint64_t)&unk_1002EBAD8, 24LL);
  v0[362] = v14;
  *(void *)(v14 + 16) = v4;
  sub_1000AAED8();
  sub_1000AACD8();
  uint64_t v15 = sub_1000849B4(&qword_10032A620);
  swift_asyncLet_begin(v0 + 162, 0LL, v15, &unk_10032A618, v14, v0 + 251);
  uint64_t v16 = sub_1000AA314((uint64_t)&unk_1002EBB00, 24LL);
  v0[363] = v16;
  *(void *)(v16 + 16) = v4;
  sub_1000AAED8();
  sub_1000AACD8();
  swift_asyncLet_begin(v0 + 2, 0LL, v15, &unk_10032A630, v16, v0 + 249);
  sub_1000DE6D4();
  if (sub_10007D824(v8, 2LL, v5))
  {
    sub_100085BC4(v0[351], type metadata accessor for Client.Server);
    unint64_t v17 = (void *)0xE500000000000000LL;
    uint64_t v18 = 0x7370747468LL;
  }

  else
  {
    uint64_t v19 = sub_100086318();
    sub_1000AAF98(*(void *)(v19 - 8));
    unint64_t v17 = (void *)0xE400000000000000LL;
    uint64_t v18 = 1886680168LL;
  }

  _StringGuts.grow(_:)(29LL);
  v0[247] = 0LL;
  v0[248] = 0xE000000000000000LL;
  v20._countAndFlagsBits = v18;
  v20._object = v17;
  String.append(_:)(v20);
  sub_100085FB4();
  v21._countAndFlagsBits = 3092282LL;
  v21._object = (void *)0xE300000000000000LL;
  String.append(_:)(v21);
  return sub_1000AA56C();
}

uint64_t sub_1000A46C8()
{
  *(void *)(v1 + 2912) = v0;
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v1 + 1984));
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A470C()
{
  id v1 = *(id *)(v0 + 2024);
  id v2 = [v1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  sub_100086114(v3);
  sub_100086144();

  v4._countAndFlagsBits = 0x617461632F31762FLL;
  v4._object = (void *)0xEC0000002F676F6CLL;
  String.append(_:)(v4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(), uint64_t))swift_asyncLet_get_throwing)( v0 + 1296,  v0 + 2008,  sub_1000A47C8,  v0 + 2384);
}

uint64_t sub_1000A47C8()
{
  *(void *)(v1 + 2920) = v0;
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v1 + 1984));
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A480C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void *)(v12 + 2664);
  uint64_t v14 = *(void *)(v12 + 2616);
  id v15 = *(id *)(v12 + 2008);
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

  sub_1000AAB84(v17);
  sub_1000AABA8();

  v18._countAndFlagsBits = 0x737070612D6E692FLL;
  v18._object = (void *)0xE800000000000000LL;
  String.append(_:)(v18);
  ((void (*)(void, void))URLComponents.init(string:))(*(void *)(v12 + 1976), *(void *)(v12 + 1984));
  sub_10007B980();
  if (sub_10007D824(v14, 1LL, v13) == 1)
  {
    sub_100085298(*(void *)(v12 + 2616), &qword_10032A590);
    unint64_t v19 = sub_1000A9B70();
    *(void *)(v12 + 2984) = sub_100093030((uint64_t)&type metadata for LoadProductsTask.LoadProductsError, v19);
    sub_1000AA7DC(v20, 3);
    return swift_asyncLet_finish(v12 + 16, v12 + 1992, sub_1000A5114, v12 + 2048, v21, v22, v23, v24, a9, a10, a11, a12);
  }

  uint64_t v26 = *(void *)(v12 + 2760);
  uint64_t v27 = *(void *)(v12 + 2664);
  uint64_t v28 = *(void *)(v12 + 2616);
  uint64_t v29 = *(void *)(v12 + 2184);
  Swift::String v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 2712) + 32LL);
  *(void *)(v12 + 292_Block_object_dispose(va, 8) = v30;
  v30(v26, v28, v27);
  uint64_t v31 = sub_10007B1FC((uint64_t *)&unk_10032B180);
  uint64_t v32 = sub_1000AA314(v31, 48LL);
  *(_OWORD *)(v32 + 16) = xmmword_10027A600;
  *(void *)(v32 + 32) = 1684957547LL;
  *(void *)(v32 + 40) = 0xE400000000000000LL;
  unint64_t v33 = v29 + *(int *)(sub_1000AA458() + 20);
  uint64_t v34 = sub_1000AA460();
  if (*(_BYTE *)(v33 + *(int *)(v34 + 24)) == 1)
  {
    sub_100131058();
    uint64_t v32 = v35;
    *(void *)(v35 + 16) = 2LL;
    strcpy((char *)(v35 + 48), "hostedContent");
    *(_WORD *)(v35 + 62) = -4864;
  }

  *(void *)(v12 + 2936) = v32;
  uint64_t v36 = *(void *)(v33 + *(int *)(v34 + 28));
  uint64_t v37 = *(void *)(v36 + 16);
  if (v37)
  {
    unint64_t v72 = v12;
    sub_10007BA3C();
    sub_1000C232C(0, v37, 0);
    int64_t v38 = sub_1000A9624(v36);
    int v40 = v39;
    char v42 = v41 & 1;
    unint64_t v43 = v36 + 56;
    while ((v38 & 0x8000000000000000LL) == 0)
    {
      unint64_t v43 = 1LL << *(_BYTE *)(v36 + 32);
      unint64_t v43 = *(void *)(v36 + 56 + (((unint64_t)v38 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v38;
      if ((v43 & 1) == 0) {
        goto LABEL_26;
      }
      unint64_t v43 = *(unsigned int *)(v36 + 36);
      if ((_DWORD)v43 != v40) {
        goto LABEL_27;
      }
      if (*(_BYTE *)(*(void *)(v36 + 48) + v38)) {
        uint64_t v44 = 0x4F6B6361626E6977LL;
      }
      else {
        uint64_t v44 = 0x66664F636F486461LL;
      }
      if (*(_BYTE *)(*(void *)(v36 + 48) + v38)) {
        unint64_t v12 = 0xED00007372656666LL;
      }
      else {
        unint64_t v12 = 0xEB00000000737265LL;
      }
      unint64_t v33 = _swiftEmptyArrayStorage[2];
      unint64_t v45 = _swiftEmptyArrayStorage[3];
      if (v33 >= v45 >> 1) {
        sub_1000C232C(v45 > 1, v33 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v33 + 1;
      uint64_t v46 = &_swiftEmptyArrayStorage[2 * v33];
      v46[4] = v44;
      v46[5] = v12;
      int64_t v47 = sub_1000A9540(v38, v40, v42 & 1, v36);
      int64_t v38 = v47;
      int v40 = v48;
      char v42 = v49 & 1;
      if (!--v37)
      {
        sub_1000A9D4C(v47, v48, v49 & 1);
        sub_10007BA44();
        unint64_t v12 = v72;
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

uint64_t sub_1000A4CF4()
{
  *(void *)(v1 + 2976) = v0;
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 2944));
    sub_10007B980();
    sub_100085EF0();
  }

  sub_100093420();
  return sub_1000AA908(v2, v3, v4);
}

uint64_t sub_1000A4D48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12[371];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12[249]);
  URLQueryItem.init(name:value:)(108LL, 0xE100000000000000LL, v14, v15);
  sub_10007BA44();
  unint64_t v17 = *(void *)(v13 + 16);
  unint64_t v16 = *(void *)(v13 + 24);
  uint64_t v18 = v12[371];
  if (v17 >= v16 >> 1)
  {
    char v60 = sub_1000AB06C(v16);
    uint64_t v18 = sub_100130EA8(v60, v61, v62, v18);
  }

  sub_1000AA9E0();
  uint64_t v19 = v12[367];
  uint64_t v20 = v12[309];
  uint64_t v21 = v12[279];
  *(void *)(v18 + 16) = v17 + 1;
  v24(v18 + ((v22 + 32) & ~v22) + v23 * v17, v20, v21);
  v12[261] = v19;
  sub_10007B1FC(&qword_10032A500);
  sub_1000A973C();
  uint64_t v25 = sub_1000AAB54();
  uint64_t v27 = v26;
  sub_100093460();
  URLQueryItem.init(name:value:)(0x646E65747865LL, 0xE600000000000000LL, v25, v27);
  sub_10007BA44();
  unint64_t v29 = *(void *)(v18 + 16);
  unint64_t v28 = *(void *)(v18 + 24);
  if (v29 >= v28 >> 1) {
    uint64_t v18 = sub_1000AA554(v28);
  }
  sub_1000AA9E0();
  uint64_t v30 = v12[368];
  sub_1000AA9CC();
  v33(v32 + v31 * v29);
  if (*(void *)(v30 + 16))
  {
    v12[255] = v12[368];
    uint64_t v34 = sub_1000AAB54();
    uint64_t v36 = v35;
    sub_100093460();
    URLQueryItem.init(name:value:)(1752459639LL, 0xE400000000000000LL, v34, v36);
    sub_100085FB4();
    unint64_t v38 = *(void *)(v18 + 16);
    unint64_t v37 = *(void *)(v18 + 24);
    if (v38 >= v37 >> 1) {
      uint64_t v18 = sub_1000AA554(v37);
    }
    sub_1000AA9E0();
    sub_1000AA9CC();
    v41(v40 + v39 * v38);
  }

  else
  {
    sub_100093460();
  }

  URLQueryItem.init(name:value:)(0x7365725B74696D6FLL, 0xEE005D656372756FLL, 0x736F747561LL, 0xE500000000000000LL);
  unint64_t v43 = *(void *)(v18 + 16);
  unint64_t v42 = *(void *)(v18 + 24);
  if (v43 >= v42 >> 1) {
    uint64_t v18 = sub_1000AA554(v42);
  }
  sub_1000AA9E0();
  uint64_t v44 = (void (*)(uint64_t, uint64_t, uint64_t))v12[366];
  uint64_t v45 = v12[345];
  uint64_t v46 = v12[333];
  uint64_t v47 = v12[267];
  sub_1000AA9CC();
  v50(v49 + v48 * v43);
  URLComponents.queryItems.setter(v18);
  v44(v47, v45, v46);
  sub_1000AA63C();
  return swift_asyncLet_finish(v51, v52, v53, v54, v55, v56, v57, v58, v12 + 249, a10, a11, a12);
}

uint64_t sub_1000A4FC4()
{
  return sub_1000AA254((uint64_t)sub_1000A4FD0);
}

uint64_t sub_1000A4FD0()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A5008()
{
  return sub_1000AA254((uint64_t)sub_1000A5014);
}

uint64_t sub_1000A5014()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A504C()
{
  return sub_1000AA254((uint64_t)sub_1000A5058);
}

#error "1000A50EC: call analysis failed (funcsize=47)"
uint64_t sub_1000A5114()
{
  return sub_1000AA254((uint64_t)sub_1000A5120);
}

uint64_t sub_1000A5120()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A5158()
{
  return sub_1000AA254((uint64_t)sub_1000A5164);
}

uint64_t sub_1000A5164()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A519C()
{
  return sub_1000AA254((uint64_t)sub_1000A51A8);
}

#error "1000A51EC: call analysis failed (funcsize=26)"
uint64_t sub_1000A5210( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12)
{
  uint64_t v12;
  return swift_asyncLet_finish(v12 + 16, v12 + 1992, sub_1000A5228, v12 + 2240, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1000A5228()
{
  return sub_1000AA254((uint64_t)sub_1000A5234);
}

uint64_t sub_1000A5234()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A526C()
{
  return sub_1000AA254((uint64_t)sub_1000A5278);
}

uint64_t sub_1000A5278()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A52B0()
{
  return sub_1000AA254((uint64_t)sub_1000A52BC);
}

#error "1000A5300: call analysis failed (funcsize=26)"
uint64_t sub_1000A5324( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12)
{
  uint64_t v12;
  return swift_asyncLet_finish(v12 + 16, v12 + 1992, sub_1000A533C, v12 + 2432, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1000A533C()
{
  return sub_1000AA254((uint64_t)sub_1000A5348);
}

uint64_t sub_1000A5348()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A5380()
{
  return sub_1000AA254((uint64_t)sub_1000A538C);
}

uint64_t sub_1000A538C()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A53C4()
{
  return sub_1000AA254((uint64_t)sub_1000A53D0);
}

#error "1000A5414: call analysis failed (funcsize=26)"
uint64_t sub_1000A5438()
{
  void *v0;
  (*(void (**)(void, void))(v0[339] + 8LL))(v0[345], v0[333]);
  sub_1000AA3E0();
  return sub_1000AA2B4();
}

uint64_t sub_1000A5484()
{
  return sub_1000AA254((uint64_t)sub_1000A5490);
}

uint64_t sub_1000A5490()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A54C8()
{
  return sub_1000AA254((uint64_t)sub_1000A54D4);
}

uint64_t sub_1000A54D4()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000A550C()
{
  return sub_1000AA254((uint64_t)sub_1000A5518);
}

#error "1000A555C: call analysis failed (funcsize=26)"
uint64_t sub_1000A5580( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a3;
  v8[11] = a4;
  v8[9] = a2;
  unint64_t v9 = sub_10007B1FC(&qword_10032A3E0);
  v8[16] = v9;
  id v10 = *(void *)(v9 - 8);
  v8[17] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v8[18] = v11;
  v8[19] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *(void *)(type metadata accessor for LoadProductsTask(0LL) - 8);
  v8[20] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v8[21] = v13;
  v8[22] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URLComponents(0LL);
  v8[23] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[24] = v15;
  unint64_t v16 = *(void *)(v15 + 64);
  v8[25] = v16;
  v8[26] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = (*(void *)(*(void *)(sub_10007B1FC((uint64_t *)&unk_10032BAB0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[27] = swift_task_alloc(v17);
  v8[28] = swift_task_alloc(v17);
  return swift_task_switch(sub_1000A567C, 0LL, 0LL);
}

uint64_t sub_1000A567C()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v1[2];
  v0[29] = v2;
  if (v2)
  {
    uint64_t v61 = v0 + 2;
    uint64_t v64 = (uint64_t)(v0 + 6);
    v0[30] = 0LL;
    v0[31] = 0LL;
    uint64_t v80 = v1[4];
    v0[32] = v80;
    uint64_t v3 = v1[5];
    v0[33] = v3;
    swift_bridgeObjectRetain(v1);
    uint64_t v4 = sub_1000AAD2C();
    char v62 = &type metadata for ()[8];
    uint64_t v63 = v4;
    uint64_t v5 = 1LL;
    while (1)
    {
      uint64_t v65 = v5;
      uint64_t v78 = v0[28];
      uint64_t v79 = v0[27];
      uint64_t v6 = v0[26];
      uint64_t v72 = v6;
      uint64_t v69 = v0[25];
      uint64_t v7 = v0[23];
      uint64_t v81 = v0[24];
      uint64_t v8 = v0[22];
      uint64_t v70 = v0[21];
      uint64_t v71 = v7;
      uint64_t v9 = v0[19];
      uint64_t v68 = v0[20];
      uint64_t v73 = v8;
      uint64_t v74 = v9;
      uint64_t v82 = v0[17];
      uint64_t v66 = v0[15];
      uint64_t v67 = v0[16];
      uint64_t v77 = (void *)v0[14];
      uint64_t v10 = v0[12];
      uint64_t v76 = (void *)v0[13];
      uint64_t v11 = v0[11];
      sub_10009C738();
      sub_1000AAF80();
      sub_10007D0AC(v12, v13, v14, v4);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v6, v11, v7);
      sub_1000A9710(v10, v8, type metadata accessor for LoadProductsTask);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v9, v66, v67);
      unint64_t v15 = (*(unsigned __int8 *)(v81 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
      unint64_t v16 = (v69 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v17 = (*(unsigned __int8 *)(v68 + 80) + v16 + 16) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
      unint64_t v18 = (v70 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v20 = v3;
      unint64_t v21 = (*(unsigned __int8 *)(v82 + 80) + v19 + 8) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      sub_1000AAEE0();
      uint64_t v24 = swift_allocObject(&unk_1002EBA18, v22, v23);
      *(void *)(v24 + 16) = 0LL;
      uint64_t v75 = (uint64_t *)(v24 + 16);
      *(void *)(v24 + 24) = 0LL;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v81 + 32))(v24 + v15, v72, v71);
      uint64_t v25 = (void *)(v24 + v16);
      void *v25 = v80;
      v25[1] = v20;
      sub_1000A96CC(v73, v24 + v17);
      *(void *)(v24 + v1_Block_object_dispose(va, 8) = v76;
      *(void *)(v24 + v19) = v77;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v82 + 32))(v24 + v21, v74, v67);
      sub_1000AB034(v78, v79);
      uint64_t v26 = sub_1000AAFD0();
      uint64_t v4 = v63;
      uint64_t v28 = sub_10007D824(v26, v27, v63);
      id v29 = v76;
      id v30 = v77;
      uint64_t v31 = v0[27];
      if ((_DWORD)v28 == 1)
      {
        sub_1000AA780();
      }

      else
      {
        uint64_t v28 = TaskPriority.rawValue.getter(v30);
        sub_1000AAF98(*(void *)(v63 - 8));
      }

      uint64_t v32 = *v75;
      if (*v75)
      {
        uint64_t v28 = *(void *)(v24 + 24);
        uint64_t v33 = sub_1000AAE7C();
        sub_1000AAED0();
        uint64_t v31 = v32;
        sub_1000AAD7C(v33);
        sub_1000AA744();
      }

      else
      {
        sub_1000AAC54();
      }

      sub_1000AB09C();
      uint64_t v34 = sub_10007CBFC((uint64_t)&unk_1002EBA40);
      *(void *)(v34 + 16) = &unk_10032A548;
      *(void *)(v34 + 24) = v24;
      uint64_t v41 = v28 | v31;
      if (v28 | v31) {
        sub_1000AAC60(v34, v35, v36, v37, v34, v38, v39, v40, v60, v61);
      }
      sub_1000AABE0(v41);
      uint64_t v44 = swift_task_create(v42, v64, v62, &unk_10032A550, v43);
      swift_release(v44);
      sub_1000AA780();
      if (v24 == v28) {
        break;
      }
      sub_1000AA998(v45, v46, v47, v48, v49, v50, v51, v52, v60, (uint64_t)v61, (uint64_t)v62, v63, v64, v65);
      uint64_t v80 = v53;
      v0[32] = v53;
      uint64_t v3 = *(void *)(v54 + 40);
      v0[33] = v3;
      uint64_t v5 = v55 + 1;
      if (v5 == 5)
      {
        uint64_t v56 = async function pointer to TaskGroup.next(isolation:)[1];
        sub_10009C738();
        uint64_t v57 = (void *)swift_task_alloc(v56);
        v0[35] = v57;
        sub_10007B1FC(&qword_10032A540);
        *uint64_t v57 = v0;
        v57[1] = sub_1000A5ABC;
        sub_100093420();
        return TaskGroup.next(isolation:)();
      }
    }

    sub_1000AAD6C();
  }

  v0[34] = swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
  sub_10007B1FC(&qword_10032A540);
  uint64_t v59 = sub_1000AA504((uint64_t)sub_1000A5A68);
  return TaskGroup.awaitAllRemainingTasks(isolation:)(v59);
}

uint64_t sub_1000A5A68()
{
  return sub_1000AA724(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A5ABC()
{
  return sub_100092F20();
}

uint64_t sub_1000A5AF0()
{
  uint64_t v53 = (uint64_t)(v0 + 36);
  uint64_t v54 = v0 + 2;
  uint64_t v56 = (uint64_t)(v0 + 6);
  uint64_t v57 = v0[30];
  uint64_t v74 = sub_1000AAD2C();
  uint64_t v58 = v0[32];
  uint64_t v59 = v0[33];
  uint64_t v55 = &type metadata for ()[8];
  while (1)
  {
    uint64_t v72 = v0[28];
    uint64_t v73 = v0[27];
    uint64_t v1 = v0[26];
    uint64_t v2 = v0[24];
    uint64_t v65 = v0[23];
    uint64_t v66 = v1;
    uint64_t v3 = v0[22];
    uint64_t v67 = v3;
    uint64_t v63 = v0[25];
    uint64_t v64 = v0[21];
    uint64_t v4 = v0[19];
    uint64_t v62 = v0[20];
    uint64_t v69 = v4;
    uint64_t v5 = v0[17];
    uint64_t v6 = v0[16];
    uint64_t v68 = v6;
    uint64_t v60 = v0[15];
    uint64_t v7 = v0[12];
    uint64_t v70 = (void *)v0[13];
    uint64_t v71 = (void *)v0[14];
    uint64_t v8 = v0[11];
    sub_1000AAF80();
    sub_10007D0AC(v9, v10, v11, v74);
    sub_1000AAFA4(v1, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
    sub_1000A9710(v7, v3, type metadata accessor for LoadProductsTask);
    uint64_t v12 = v5;
    uint64_t v61 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v60, v6);
    unint64_t v13 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    unint64_t v14 = (v63 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v15 = (*(unsigned __int8 *)(v62 + 80) + v14 + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    unint64_t v16 = (v64 + v15 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v18 = (*(unsigned __int8 *)(v12 + 80) + v17 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    sub_1000AAEE0();
    uint64_t v21 = swift_allocObject(&unk_1002EBA18, v19, v20);
    *(void *)(v21 + 16) = 0LL;
    uint64_t v22 = (uint64_t *)(v21 + 16);
    *(void *)(v21 + 24) = 0LL;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v21 + v13, v66, v65);
    uint64_t v23 = (void *)(v21 + v14);
    *uint64_t v23 = v58;
    v23[1] = v59;
    sub_1000A96CC(v67, v21 + v15);
    uint64_t v24 = (uint64_t)v71;
    *(void *)(v21 + v16) = v70;
    *(void *)(v21 + v17) = v71;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v61 + 32))(v21 + v18, v69, v68);
    sub_100085384(v72, v73, (uint64_t *)&unk_10032BAB0);
    uint64_t v25 = sub_1000AAFD0();
    uint64_t v27 = sub_10007D824(v25, v26, v74);
    id v28 = v70;
    id v29 = v71;
    uint64_t v30 = v0[27];
    if ((_DWORD)v27 == 1)
    {
      sub_1000AAFAC();
    }

    else
    {
      uint64_t v27 = TaskPriority.rawValue.getter(v29);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8LL))(v30, v74);
    }

    uint64_t v31 = *v22;
    if (*v22)
    {
      uint64_t v27 = *(void *)(v21 + 24);
      uint64_t v24 = sub_1000AAE7C();
      sub_1000AAED0();
      uint64_t v30 = v31;
      sub_1000AAD7C(v24);
      sub_1000AA744();
    }

    else
    {
      sub_1000AAC54();
    }

    sub_1000AB09C();
    uint64_t v32 = sub_10007CBFC((uint64_t)&unk_1002EBA40);
    *(void *)(v32 + 16) = &unk_10032A548;
    *(void *)(v32 + 24) = v21;
    uint64_t v33 = v27 | v30;
    if (v27 | v30)
    {
      uint64_t v33 = (uint64_t)v54;
      *uint64_t v54 = 0LL;
      v54[1] = 0LL;
      v0[4] = v30;
      v0[5] = v27;
    }

    sub_1000AABE0(v33);
    uint64_t v36 = swift_task_create(v34, v56, v55, &unk_10032A550, v35);
    swift_release(v36);
    sub_1000AAFAC();
    if (v24 == v27)
    {
      sub_1000AAD6C();
      v0[34] = swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
      sub_10007B1FC(&qword_10032A540);
      sub_1000AA504((uint64_t)sub_1000A5A68);
      sub_1000AADDC();
      return TaskGroup.awaitAllRemainingTasks(isolation:)();
    }

    sub_1000AA998(v37, v38, v39, v40, v41, v42, v43, v44, v52, v53, (uint64_t)v54, (uint64_t)v55, v56, v57);
    v0[32] = v45;
    uint64_t v48 = *(void *)(v47 + 40);
    v0[33] = v48;
    if (v46 >= 4) {
      break;
    }
    uint64_t v57 = v46 + 1;
    uint64_t v58 = v45;
    uint64_t v59 = v48;
    swift_bridgeObjectRetain(v48);
  }

  uint64_t v50 = async function pointer to TaskGroup.next(isolation:)[1];
  swift_bridgeObjectRetain(v48);
  uint64_t v51 = (void *)swift_task_alloc(v50);
  v0[35] = v51;
  sub_10007B1FC(&qword_10032A540);
  *uint64_t v51 = v0;
  v51[1] = sub_1000A5ABC;
  sub_100093420();
  sub_1000AADDC();
  return TaskGroup.next(isolation:)();
}

uint64_t sub_1000A5E8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[21] = v19;
  v8[22] = v20;
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[16] = a4;
  uint64_t v9 = sub_10007B1FC(&qword_10032A4F0);
  v8[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[24] = v10;
  v8[25] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SKLogger(0LL);
  v8[26] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[27] = swift_task_alloc(v12);
  v8[28] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for URLQueryItem(0LL);
  v8[29] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[30] = v14;
  v8[31] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URLComponents(0LL);
  v8[32] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v8[33] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[34] = swift_task_alloc(v17);
  v8[35] = swift_task_alloc(v17);
  return swift_task_switch(sub_1000A5F94, 0LL, 0LL);
}

uint64_t sub_1000A5F94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 + 264) + 16LL);
  v72(*(void *)(v28 + 280), *(void *)(v28 + 128), *(void *)(v28 + 256));
  uint64_t v32 = (void (*)(uint64_t, void))URLComponents.queryItems.modify(v28 + 16);
  if (*v31)
  {
    uint64_t v33 = v31;
    uint64_t v35 = *(void *)(v28 + 240);
    uint64_t v34 = *(void *)(v28 + 248);
    uint64_t v36 = *(void *)(v28 + 232);
    sub_1000862B8();
    URLQueryItem.init(name:value:)(0xD000000000000011LL, v37, v38, v39);
    sub_1000A8898((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100130EA8);
    uint64_t v40 = *(void *)(*v33 + 16LL);
    sub_1000A88FC(v40, (uint64_t (*)(BOOL))sub_100130EA8);
    uint64_t v41 = *v33;
    *(void *)(v41 + 16) = v40 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 32))( v41 + ((*(unsigned __int8 *)(v35 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
    + *(void *)(v35 + 72) * v40,
      v34,
      v36);
  }

  v32(v28 + 16, 0LL);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v42 = *(os_log_s **)(v28 + 224);
  uint64_t v43 = *(void **)(v28 + 144);
  uint64_t v44 = *(void *)(v28 + 152);
  uint64_t v45 = sub_100079604(*(void *)(v28 + 208), (uint64_t)qword_10033E1A8);
  *(void *)(v28 + 28_Block_object_dispose(va, 8) = v45;
  sub_1000A9710(v45, (uint64_t)v42, type metadata accessor for SKLogger);
  a16 = 0LL;
  a17 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(37LL);
  swift_bridgeObjectRelease(a17);
  v46._countAndFlagsBits = sub_1000AAD9C();
  v46._object = v43;
  String.append(_:)(v46);
  uint64_t v48 = a16;
  unint64_t v47 = a17;
  uint64_t v49 = *(int *)(sub_1000AA458() + 20);
  *(_DWORD *)(v28 + 352) = v49;
  uint64_t v50 = v44 + v49;
  uint64_t v51 = sub_1000AA460();
  uint64_t v52 = *(int *)(v51 + 32);
  *(_DWORD *)(v28 + 356) = v52;
  uint64_t v53 = (uint64_t *)(v50 + v52);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  static os_log_type_t.default.getter(v51);
  sub_100085EE8(v54);
  uint64_t v56 = sub_100085EE8(v47);
  uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
  if (sub_100093468(v57))
  {
    uint64_t v70 = v48;
    uint64_t v58 = sub_10007B9FC(22LL);
    uint64_t v71 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v58 = 136446466;
    sub_1000AAE30();
    sub_1000AA78C();
    sub_100086114(v55);
    sub_100085F14();
    sub_100086144();
    *(void *)(v28 + swift_weakDestroy(v0 + 112) = sub_10008620C(a16, v59, &a15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 112, v28 + 120, v58 + 4);
    sub_10007B980();
    sub_10007D974(v54);
    *(_WORD *)(v58 + 12) = 2082;
    sub_10007BA3C();
    *(void *)(v28 + 120) = sub_10007A488(v70, v47, &a15);
    sub_100086194(v28 + 120, v28 + 128);
    sub_100085E64(v47);
    sub_100086038((void *)&_mh_execute_header, v42, (os_log_type_t)v44, "%{public}s%{public}s", (uint8_t *)v58);
    sub_10009BFA0(v60, v61, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v71);
    sub_10007B974(v58);

    sub_10007BA44();
  }

  else
  {
    sub_10007D974(v54);
    sub_100085E64(v47);
  }

  uint64_t v62 = *(void *)(v28 + 272);
  uint64_t v63 = *(void *)(v28 + 280);
  uint64_t v64 = *(void *)(v28 + 256);
  sub_100085BC4(*(void *)(v28 + 224), type metadata accessor for SKLogger);
  v72(v62, v63, v64);
  uint64_t v65 = (void *)swift_task_alloc(dword_10032A514);
  *(void *)(v28 + 296) = v65;
  *uint64_t v65 = v28;
  v65[1] = sub_1000A62FC;
  sub_1000AA7B8();
  return sub_1000A660C(v66, v67, v68);
}

uint64_t sub_1000A62FC()
{
  uint64_t v2 = *(void *)(v1 + 264);
  if (v0) {
    sub_1000AAF8C(v2);
  }
  else {
    sub_1000AAA70(v2);
  }
  sub_100093420();
  return sub_1000AA484(v3, v4, v5);
}

uint64_t sub_1000A634C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 192);
  *(int8x16_t *)(v0 + 4_Block_object_dispose(va, 8) = vextq_s8(*(int8x16_t *)(v0 + 320), *(int8x16_t *)(v0 + 320), 8uLL);
  *(void *)(v0 + 64) = v2;
  uint64_t v6 = sub_10007B1FC(&qword_10032A3E0);
  AsyncThrowingStream.Continuation.yield(_:)(v0 + 48, v6);
  sub_1000AAA04(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  v1(v3, v4);
  sub_1000AAA1C();
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  return sub_1000AA42C(*(uint64_t (**)(void))(v0 + 8));
}

#error "1000A6580: call analysis failed (funcsize=128)"
uint64_t sub_1000A660C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  v4[32] = a3;
  v4[33] = v3;
  v4[30] = a1;
  v4[31] = a2;
  uint64_t v5 = type metadata accessor for URLRequest(0LL);
  v4[34] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[35] = v6;
  v4[36] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000A6670, 0LL, 0LL);
}

uint64_t sub_1000A6670()
{
  Class isa = URLComponents._bridgeToObjectiveC()().super.isa;
  v0[37] = sub_1000AAE8C((uint64_t)isa, "requestWithComponents:");

  v0[7] = v0 + 28;
  v0[2] = v0;
  v0[3] = sub_1000A6720;
  uint64_t v2 = sub_1000AA7D4((uint64_t)(v0 + 2));
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000LL;
  v0[20] = sub_1000A6A08;
  v0[21] = &unk_1002EBA70;
  v0[22] = v2;
  sub_1000AA9F0(v2, "resultWithTimeout:completion:");
  return sub_1000AA79C();
}

uint64_t sub_1000A6720()
{
  *(void *)(v0 + 304) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A6760()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)(v0 + 10);
  uint64_t v3 = (void *)v1[37];
  uint64_t v4 = v1[33];
  uint64_t v5 = (void *)v1[28];
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v5);

  uint64_t v6 = v4 + *(int *)(sub_1000AA458() + 20);
  else {
    uint64_t v7 = 3157553LL;
  }
  v8._object = (void *)0x800000010029EDD0LL;
  unint64_t v9 = 0xE300000000000000LL;
  v8._countAndFlagsBits = 0xD00000000000001FLL;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&v7, v8);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  v1[39] = sub_1000AAE8C((uint64_t)isa, "dataTaskPromiseWithRequest:");

  v1[15] = v1 + 29;
  v1[10] = v1;
  v1[11] = sub_1000A6880;
  uint64_t v11 = sub_1000AA7D4(v2);
  v1[23] = _NSConcreteStackBlock;
  unint64_t v12 = v1 + 23;
  v12[1] = 0x40000000LL;
  v12[2] = sub_1000A6A1C;
  void v12[3] = &unk_1002EBA88;
  void v12[4] = v11;
  sub_1000AA9F0(v11, "resultWithTimeout:completion:");
  return sub_100092FC4();
}

uint64_t sub_1000A6880()
{
  *(void *)(v0 + 320) = *(void *)(v0 + 112);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A68D0()
{
  uint64_t v1 = *(void **)(v0 + 232);

  id v2 = v1;
  uint64_t v3 = sub_10009FD2C(v2);
  if (v5)
  {
    uint64_t v6 = v3;
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    sub_1000AADCC();

    sub_1000931C8();
    return sub_1000AA6B4(v6, v7, v8, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    unint64_t v10 = sub_1000A9B70();
    sub_100093030((uint64_t)&type metadata for LoadProductsTask.LoadProductsError, v10);
    sub_1000AA7DC(v11, 2);

    sub_1000AADCC();
    sub_1000AAF00();
    return sub_1000AA69C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000A697C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 296);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  sub_1000AAF00();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000A69C0()
{
  uint64_t v1 = *(void **)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 280);
  swift_willThrow(v3, v4, v5, v6, v7, v8, v9);
  sub_1000AAAB4(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));

  sub_1000AAF00();
  return sub_1000AA724(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A6A08(uint64_t a1, void *a2, void *a3)
{
  return sub_1000A6A30(a1, a2, a3, (uint64_t (*)(void))sub_100121AC4, (uint64_t (*)(void))sub_100129E34);
}

uint64_t sub_1000A6A1C(uint64_t a1, void *a2, void *a3)
{
  return sub_1000A6A30(a1, a2, a3, (uint64_t (*)(void))sub_100121AC4, (uint64_t (*)(void))sub_100121B18);
}

uint64_t sub_1000A6A30(uint64_t result, void *a2, void *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  if (a3) {
    return sub_1000AA8D8(*(void *)(result + 32), (uint64_t)a3, a4);
  }
  a3 = a2;
  a4 = a5;
  if (a2) {
    return sub_1000AA8D8(*(void *)(result + 32), (uint64_t)a3, a4);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A6A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  return swift_task_switch(sub_1000A6A90, 0LL, 0LL);
}

uint64_t sub_1000A6A90()
{
  *(void *)(v0 + 160) = [*(id *)(v0 + 144) URLForKey:*(void *)(v0 + 152)];
  *(void *)(v0 + 56) = v0 + 120;
  uint64_t v1 = sub_10009305C((uint64_t)sub_1000A6B24);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
  uint64_t v2 = sub_1000937B0(v1, (uint64_t)sub_1000A6BC4);
  sub_100093238(v2, "valueWithCompletion:");
  return sub_1000AA4B4();
}

uint64_t sub_1000A6B24()
{
  *(void *)(v0 + 16_Block_object_dispose(va, 8) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A6B64()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100093CFC();
  return sub_10008751C(v1);
}

uint64_t sub_1000A6B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 160);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  return sub_1000AA51C(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_1000A6BC4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  return sub_1000A6BD8( a1,  a2,  a3,  a4,  (uint64_t (*)(void))sub_100121AC4,  (uint64_t (*)(uint64_t, void *, uint64_t))sub_100121B28);
}

uint64_t sub_1000A6BD8( uint64_t result, void *a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t, void *, uint64_t))
{
  uint64_t v6 = *(void *)(result + 32);
  if (a4) {
    return sub_1000AA8D8(v6, (uint64_t)a4, a5);
  }
  if (a2) {
    return a6(v6, a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A6C40(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_task_switch(sub_1000A6C58, 0LL, 0LL);
}

uint64_t sub_1000A6C58()
{
  if (qword_100328B98 != -1) {
    swift_once(&qword_100328B98, sub_10012B42C);
  }
  *(void *)(v0 + 152) = [*(id *)(v0 + 144) stringForKey:qword_10033E220];
  *(void *)(v0 + 56) = v0 + 120;
  uint64_t v1 = sub_10009305C((uint64_t)sub_1000A6D1C);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
  uint64_t v2 = sub_1000937B0(v1, (uint64_t)sub_100121C5C);
  sub_100093238(v2, "valueWithCompletion:");
  return sub_1000AA4B4();
}

uint64_t sub_1000A6D1C()
{
  return sub_100092F20();
}

uint64_t sub_1000A6D58()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100093CFC();
  return sub_10008751C(v1);
}

uint64_t sub_1000A6D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 152);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  return sub_1000AA51C(*(uint64_t (**)(void))(v7 + 8));
}

uint64_t sub_1000A6DB8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_task_switch(sub_1000A6DD0, 0LL, 0LL);
}

uint64_t sub_1000A6DD0()
{
  if (qword_100328C50 != -1) {
    swift_once(&qword_100328C50, sub_10012BF10);
  }
  *(void *)(v0 + 152) = [*(id *)(v0 + 144) stringForKey:qword_10033E2D8];
  *(void *)(v0 + 56) = v0 + 120;
  uint64_t v1 = sub_10009305C((uint64_t)sub_1000A6E94);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = 0x40000000LL;
  uint64_t v2 = sub_1000937B0(v1, (uint64_t)sub_100121C5C);
  sub_100093238(v2, "valueWithCompletion:");
  return sub_1000AA4B4();
}

uint64_t sub_1000A6E94()
{
  return sub_100092F20();
}

void sub_1000A6ED0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for LoadProductsTask(0LL) + 20);
  uint64_t v2 = (char *)sub_1000A6F14
     + 4 * byte_10027AB76[*(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for ProductRequest(0LL) + 36))];
  __asm { BR              X10 }

id sub_1000A6F14()
{
  return sub_1000CF050();
}

id sub_1000A6F40()
{
  return AMSMediaTaskPlatformiPad;
}

uint64_t sub_1000A6F94()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  uint64_t v63 = (uint64_t)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Locale(0LL);
  uint64_t v64 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v0;
  uint64_t v8 = (uint64_t *)(*v0 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  swift_bridgeObjectRetain(v10);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  uint64_t v65 = (uint64_t)&_swiftEmptyDictionarySingleton;
  sub_10013340C(v9, v10, 6580578LL, 0xE300000000000000LL, isUniquelyReferenced_nonNull_native);
  uint64_t v12 = v65;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v13 = *(void *)(v7 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion);
  uint64_t v14 = *(void *)(v7 + OBJC_IVAR____TtC9storekitd6Client_requestBundleVersion + 8);
  swift_bridgeObjectRetain(v14);
  char v15 = swift_isUniquelyReferenced_nonNull_native(v12);
  uint64_t v65 = v12;
  sub_10013340C(v13, v14, 1936881250LL, 0xE400000000000000LL, v15);
  uint64_t v16 = v65;
  uint64_t v17 = swift_bridgeObjectRelease(0x8000000000000000LL);
  if (*(void *)(v7 + OBJC_IVAR____TtC9storekitd6Client_storeItemID))
  {
    uint64_t v65 = *(void *)(v7 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v20 = v19;
    char v21 = swift_isUniquelyReferenced_nonNull_native(v16);
    uint64_t v65 = v16;
    sub_10013340C(v18, v20, 0x496D616441707061LL, 0xE900000000000064LL, v21);
    uint64_t v16 = v65;
    uint64_t v17 = swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v7 = *v0;
  }

  if (*(void *)(v7 + OBJC_IVAR____TtC9storekitd6Client_storeExternalVersionID))
  {
    uint64_t v65 = *(void *)(v7 + OBJC_IVAR____TtC9storekitd6Client_storeExternalVersionID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v24 = v23;
    char v25 = swift_isUniquelyReferenced_nonNull_native(v16);
    uint64_t v65 = v16;
    sub_10013340C(v22, v24, 0x7256747845707061LL, 0xEB00000000644973LL, v25);
    uint64_t v16 = v65;
    uint64_t v17 = swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  uint64_t v26 = static Locale.autoupdatingCurrent.getter(v17);
  uint64_t v27 = Locale.identifier.getter(v26);
  uint64_t v29 = v28;
  char v30 = swift_isUniquelyReferenced_nonNull_native(v16);
  uint64_t v65 = v16;
  sub_10013340C(v27, v29, 0x6C61636F4C756369LL, 0xE900000000000065LL, v30);
  uint64_t v31 = v65;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v32 = sub_1000DF87C();
  sub_1000DF90C();
  if (v33)
  {
    id v34 = v33;
    id v35 = v33;
  }

  else
  {
    id v36 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStoreForMediaType:", v32);
    id v35 = objc_msgSend(v36, "ams_localiTunesAccount");

    if (!v35) {
      goto LABEL_11;
    }
    id v34 = v35;
    uint64_t v33 = 0LL;
  }

  id v37 = v33;
  id v38 = objc_msgSend(v34, "ams_storefrontForMediaType:", v32);

  if (v38)
  {
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    uint64_t v41 = v40;

    char v42 = swift_isUniquelyReferenced_nonNull_native(v31);
    uint64_t v65 = v31;
    sub_10013340C(v39, v41, 1682531955LL, 0xE400000000000000LL, v42);
    uint64_t v31 = v65;

    swift_bridgeObjectRelease(0x8000000000000000LL);
    goto LABEL_17;
  }

uint64_t sub_1000A758C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  void v6[10] = a3;
  v6[11] = a4;
  void v6[9] = a2;
  uint64_t v7 = sub_10007B1FC(&qword_10032A3E0);
  v6[14] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[15] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  uint8_t v6[16] = v9;
  v6[17] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(type metadata accessor for LoadProductsTask(0LL) - 8);
  v6[18] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v6[19] = v11;
  v6[20] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (*(void *)(*(void *)(sub_10007B1FC((uint64_t *)&unk_10032BAB0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[21] = swift_task_alloc(v12);
  v6[22] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A7658, 0LL, 0LL);
}

uint64_t sub_1000A7658()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v1[2];
  v0[23] = v2;
  if (v2)
  {
    unint64_t v47 = v0 + 2;
    v0[24] = 0LL;
    v0[25] = 0LL;
    uint64_t v3 = v1[4];
    v0[26] = v3;
    uint64_t v4 = v1[5];
    v0[27] = v4;
    swift_bridgeObjectRetain(v1);
    uint64_t v5 = sub_1000AAD2C();
    uint64_t v6 = 1LL;
    uint64_t v56 = v5;
    while (1)
    {
      uint64_t v48 = v6;
      uint64_t v54 = v0[22];
      uint64_t v55 = v0[21];
      uint64_t v7 = v0[20];
      uint64_t v8 = v0[17];
      uint64_t v49 = v0[18];
      uint64_t v9 = v0[15];
      uint64_t v50 = v0[16];
      uint64_t v51 = v0[19];
      uint64_t v10 = v0[13];
      uint64_t v11 = v0[14];
      uint64_t v52 = v11;
      uint64_t v12 = v0[12];
      uint64_t v53 = v0[11];
      sub_10009C738();
      sub_1000AAF80();
      sub_10007D0AC(v13, v14, v15, v56);
      sub_1000A9710(v12, v7, type metadata accessor for LoadProductsTask);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v10, v11);
      uint64_t v16 = *(unsigned __int8 *)(v49 + 80);
      uint64_t v17 = (v16 + 56) & ~v16;
      uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
      uint64_t v19 = (v51 + v18 + v17) & ~v18;
      uint64_t v20 = (void *)swift_allocObject(&unk_1002EBB70, v19 + v50, v16 | v18 | 7);
      v20[2] = 0LL;
      char v21 = v20 + 2;
      v20[3] = 0LL;
      v20[4] = v53;
      v20[5] = v3;
      v20[6] = v4;
      sub_1000A96CC(v7, (uint64_t)v20 + v17);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))((char *)v20 + v19, v8, v52);
      sub_100085384(v54, v55, (uint64_t *)&unk_10032BAB0);
      uint64_t v22 = sub_1000AAFD0();
      uint64_t v24 = sub_10007D824(v22, v23, v56);
      uint64_t v25 = sub_100093528();
      uint64_t v26 = v0[21];
      if ((_DWORD)v24 == 1)
      {
        sub_1000AAFC4();
      }

      else
      {
        uint64_t v24 = TaskPriority.rawValue.getter(v25);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8LL))(v26, v56);
      }

      uint64_t v27 = *v21;
      if (*v21)
      {
        uint64_t ObjectType = swift_getObjectType(*v21);
        swift_unknownObjectRetain(v27);
        uint64_t v26 = sub_1000AAD7C(ObjectType);
        uint64_t v24 = v29;
        swift_unknownObjectRelease(v27);
      }

      else
      {
        sub_1000AAC54();
      }

      sub_1000AB09C();
      uint64_t v30 = sub_10007CBFC((uint64_t)&unk_1002EBB98);
      *(void *)(v30 + 16) = &unk_10032A660;
      *(void *)(v30 + 24) = v20;
      uint64_t v37 = v24 | v26;
      if (v24 | v26) {
        sub_1000AAC60(v30, v31, v32, v33, v30, v34, v35, v36, v46, v47);
      }
      uint64_t v38 = sub_1000AA80C(v37);
      uint64_t v40 = swift_task_create(v38, v0 + 6, &type metadata for ()[8], &unk_10032A668, v39);
      swift_release(v40);
      sub_1000AAFC4();
      if (v20 == (void *)v24) {
        break;
      }
      uint64_t v41 = v0[25] + 1LL;
      v0[24] = v48;
      v0[25] = v41;
      uint64_t v42 = v0[10] + 16 * v41;
      uint64_t v3 = *(void *)(v42 + 32);
      v0[26] = v3;
      uint64_t v4 = *(void *)(v42 + 40);
      v0[27] = v4;
      uint64_t v6 = v48 + 1;
      if (v48 == 4)
      {
        uint64_t v43 = async function pointer to TaskGroup.next(isolation:)[1];
        sub_10009C738();
        uint64_t v44 = (void *)swift_task_alloc(v43);
        v0[29] = v44;
        sub_10007B1FC(&qword_10032A540);
        void *v44 = v0;
        v44[1] = sub_1000A79D8;
        sub_100093420();
        return sub_1000AA620();
      }
    }

    sub_1000AAD6C();
  }

  v0[28] = swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
  sub_10007B1FC(&qword_10032A540);
  sub_1000AA504((uint64_t)sub_1000A7984);
  return sub_1000AA604();
}

uint64_t sub_1000A7984()
{
  return sub_1000AA42C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000A79D8()
{
  return sub_100092F20();
}

uint64_t sub_1000A7A0C()
{
  uint64_t v40 = (uint64_t)(v0 + 30);
  uint64_t v41 = v0 + 2;
  uint64_t v43 = v0[24];
  uint64_t v42 = sub_1000AAD2C();
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  while (1)
  {
    uint64_t v50 = v0[22];
    uint64_t v51 = v0[21];
    uint64_t v3 = v0[20];
    uint64_t v46 = v0[19];
    uint64_t v4 = v0[17];
    uint64_t v5 = v0[15];
    uint64_t v44 = v0[18];
    uint64_t v45 = v0[16];
    uint64_t v7 = v0[13];
    uint64_t v6 = v0[14];
    uint64_t v47 = v6;
    uint64_t v48 = v4;
    uint64_t v8 = v0[12];
    uint64_t v49 = v0[11];
    sub_1000AAF80();
    sub_10007D0AC(v9, v10, v11, v42);
    sub_1000A9710(v8, v3, type metadata accessor for LoadProductsTask);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    uint64_t v12 = *(unsigned __int8 *)(v44 + 80);
    uint64_t v13 = (v12 + 56) & ~v12;
    uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v15 = (v46 + v14 + v13) & ~v14;
    uint64_t v16 = (void *)swift_allocObject(&unk_1002EBB70, v15 + v45, v12 | v14 | 7);
    __int128 v16[2] = 0LL;
    uint64_t v17 = v16 + 2;
    v16[3] = 0LL;
    void v16[4] = v49;
    void v16[5] = v2;
    v16[6] = v1;
    sub_1000A96CC(v3, (uint64_t)v16 + v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))((char *)v16 + v15, v48, v47);
    sub_1000AB034(v50, v51);
    uint64_t v18 = sub_1000AAFD0();
    uint64_t v20 = sub_10007D824(v18, v19, v42);
    uint64_t v21 = sub_1000AABA0();
    uint64_t v22 = v0[21];
    if ((_DWORD)v20 == 1)
    {
      sub_1000AA780();
    }

    else
    {
      uint64_t v20 = TaskPriority.rawValue.getter(v21);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8LL))(v22, v42);
    }

    uint64_t v23 = *v17;
    if (*v17)
    {
      uint64_t v20 = v16[3];
      uint64_t v17 = (uint64_t *)sub_1000AAE7C();
      sub_1000AAED0();
      uint64_t v22 = v23;
      sub_1000AAD7C((uint64_t)v17);
      sub_1000AA744();
    }

    else
    {
      sub_1000AAC54();
    }

    sub_1000AB09C();
    uint64_t v24 = sub_10007CBFC((uint64_t)&unk_1002EBB98);
    *(void *)(v24 + 16) = &unk_10032A660;
    *(void *)(v24 + 24) = v16;
    uint64_t v31 = v20 | v22;
    if (v20 | v22) {
      sub_1000AAC60(v24, v25, v26, v27, v24, v28, v29, v30, v40, v41);
    }
    uint64_t v32 = sub_1000AA80C(v31);
    uint64_t v34 = swift_task_create(v32, v0 + 6, &type metadata for ()[8], &unk_10032A668, v33);
    swift_release(v34);
    sub_1000AA780();
    if (v17 == (uint64_t *)v20)
    {
      sub_1000AAD6C();
      v0[28] = swift_task_alloc(async function pointer to TaskGroup.awaitAllRemainingTasks(isolation:)[1]);
      sub_10007B1FC(&qword_10032A540);
      sub_1000AA504((uint64_t)sub_1000A7984);
      return sub_1000AA604();
    }

    uint64_t v35 = v0[25] + 1LL;
    v0[24] = v43;
    v0[25] = v35;
    uint64_t v36 = v0[10] + 16 * v35;
    uint64_t v2 = *(void *)(v36 + 32);
    v0[26] = v2;
    uint64_t v1 = *(void *)(v36 + 40);
    v0[27] = v1;
    if (v43 >= 4) {
      break;
    }
    ++v43;
    sub_10009C738();
  }

  uint64_t v38 = async function pointer to TaskGroup.next(isolation:)[1];
  sub_10009C738();
  uint64_t v39 = (void *)swift_task_alloc(v38);
  v0[29] = v39;
  sub_10007B1FC(&qword_10032A540);
  *uint64_t v39 = v0;
  v39[1] = sub_1000A79D8;
  sub_100093420();
  return sub_1000AA620();
}

uint64_t sub_1000A7CF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  uint64_t v9 = sub_10007B1FC(&qword_10032A4F0);
  v8[17] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[18] = v10;
  v8[19] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SKLogger(0LL);
  v8[20] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[21] = swift_task_alloc(v12);
  v8[22] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000A7D94, 0LL, 0LL);
}

#error "1000A7FC0: call analysis failed (funcsize=164)"
uint64_t sub_1000A805C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  sub_1000AAAE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = *(void *)(*(void *)v1 + 200LL);
  uint64_t v8 = *(void **)v1;
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v9);
  if (!v0)
  {
    swift_bridgeObjectRelease(v8[23]);
    v8[27] = v3;
    v8[28] = v5;
    v8[29] = v7;
  }

  sub_100093420();
  return sub_1000AA484(v10, v11, v12);
}

uint64_t sub_1000A80D4()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 136);
  *(int8x16_t *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 224), *(int8x16_t *)(v0 + 224), 8uLL);
  *(void *)(v0 + 32) = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032A3E0);
  AsyncThrowingStream.Continuation.yield(_:)(v0 + 16, v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000AAFDC();
  sub_1000939C0();
  sub_1000931C8();
  return sub_1000AA724(*(uint64_t (**)(void))(v0 + 8));
}

#error "1000A82E0: call analysis failed (funcsize=121)"
uint64_t sub_1000A834C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = a1;
  *(void *)(v2 + 136) = v1;
  return swift_task_switch(sub_1000A8364, 0LL, 0LL);
}

uint64_t sub_1000A8364()
{
  uint64_t v2 = v1;
  v0[18] = v1;
  sub_1000DF9D4();
  uint64_t v4 = v3;
  v0[19] = v3;
  sub_1000DEA24();
  uint64_t v6 = v5;
  if (qword_100328CB0 != -1) {
    swift_once(&qword_100328CB0, sub_10012C4B8);
  }
  id v7 = [v6 URLForKey:qword_10033E338];
  swift_unknownObjectRelease(v6);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v9 = [v4 requestWithMethod:2 bagURL:v7 parameters:isa];
  v0[20] = v9;

  v0[21] = [v2 dataTaskPromiseWithRequestPromise:v9];
  v0[7] = v0 + 15;
  uint64_t v10 = sub_10009305C((uint64_t)sub_1000A84D0);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  uint64_t v11 = sub_1000937B0(v10, (uint64_t)sub_1000A6A1C);
  sub_100093238(v11, "resultWithCompletion:");
  return sub_100092FC4();
}

uint64_t sub_1000A84D0()
{
  *(void *)(v0 + 176) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000A8510()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void **)(v0 + 120);

  uint64_t v3 = v1 + *(int *)(sub_1000AA458() + 20);
  uint64_t v4 = *(void *)(v3 + *(int *)(sub_1000AA460() + 32) + 8);
  id v5 = v2;
  sub_10007BA3C();
  uint64_t v6 = (void *)sub_1000AAFB8();
  sub_10009DBD8(v6, v7, v4);
  uint64_t v11 = *(void **)(v0 + 152);
  unint64_t v12 = *(void **)(v0 + 160);
  uint64_t v13 = *(void **)(v0 + 144);
  if (v10)
  {
    uint64_t v14 = v8;
    uint64_t v15 = v9;
    uint64_t v16 = v10;

    return sub_1000AA6B4(v14, v15, v16, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    unint64_t v18 = sub_1000A9B70();
    sub_100093030((uint64_t)&type metadata for LoadProductsTask.LoadProductsError, v18);
    sub_1000AA7DC(v19, 2);

    return sub_1000AA69C(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000A85F0()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 160);
  uint64_t v4 = *(void **)(v0 + 144);
  swift_willThrow(v5, v6, v7, v8, v9, v10, v11);

  return sub_1000AA724(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000A8638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  sub_10007BA44();
  [v3 initWithClientIdentifier:v5 bag:a3];

  swift_unknownObjectRelease(a3);
  sub_1000AB000();
}

void sub_1000A8690(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000AADB4();
    sub_1000AA96C( (uint64_t)"Fatal error",  v1,  v2,  (uint64_t)"Can't construct Array with count < 0",  v3,  v4,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for String) + 16) = a1;
    }
    sub_100025A70();
  }

void sub_1000A86FC(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000AADB4();
    sub_1000AA96C( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = sub_10007B1FC(&qword_10032A6A8);
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) + 16) = a1;
    }

    sub_100025A70();
  }

uint64_t sub_1000A8770(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000A87D4;
  return v6(a1);
}

uint64_t sub_1000A87D4()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100093CFC();
  return sub_10008751C(v1);
}

uint64_t sub_1000A8808()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_10007B1FC(&qword_10032A6A0);
  swift_arrayDestroy(v0 + 32, v1, v2);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_1000A8858()
{
  uint64_t v1 = sub_1000AA8B0();
  return swift_deallocClassInstance(v1, v2, v3);
}

void sub_1000A8880()
{
}

void sub_1000A888C()
{
}

void sub_1000A8898(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native) {
    *uint64_t v1 = a1(isUniquelyReferenced_nonNull_native, *(void *)(v3 + 16) + 1LL, 1LL, v3);
  }
  sub_1000AB000();
}

uint64_t sub_1000A88E4(uint64_t a1)
{
  return sub_1000A88FC(a1, (uint64_t (*)(BOOL))sub_100130EA8);
}

uint64_t sub_1000A88F0(uint64_t a1)
{
  return sub_1000A88FC(a1, (uint64_t (*)(BOOL))sub_1001310F8);
}

uint64_t sub_1000A88FC(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24LL);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }

  return result;
}

unint64_t sub_1000A893C()
{
  unint64_t result = qword_10032A4B0;
  if (!qword_10032A4B0)
  {
    uint64_t v1 = type metadata accessor for ProductLoader();
    unint64_t result = swift_getWitnessTable(&unk_10027ABC4, v1);
    atomic_store(result, (unint64_t *)&qword_10032A4B0);
  }

  return result;
}

uint64_t sub_1000A8978()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000A89A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = swift_task_alloc(dword_10032A4AC);
  uint64_t v8 = (void *)sub_1000AA6CC(v7);
  void *v8 = v2;
  v8[1] = sub_1000A8A08;
  return sub_1000A0190(a1, v4, v5, v6);
}

uint64_t sub_1000A8A08()
{
  return v0[1]();
}

void sub_1000A8A44(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000A96A4(v2);
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1000A8AAC(v5);
  *a1 = v2;
}

void sub_1000A8AAC(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_1000A9110(0LL, v3, 1LL, a1);
      }
      return;
    }

LABEL_145:
    __break(1u);
    goto LABEL_146;
  }

  Swift::Int v5 = v4;
  sub_1000A8690(v3 / 2);
  uint64_t v107 = v6;
  uint64_t v108 = v3;
  unint64_t v109 = v7;
  unint64_t v105 = a1;
  if (v3 > 0)
  {
    Swift::Int v106 = v5;
    Swift::Int v8 = 0LL;
    uint64_t v9 = *a1;
    uint64_t v104 = *a1 + 8;
    uint64_t v110 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      Swift::Int v10 = v8++;
      if (v8 >= v3) {
        goto LABEL_32;
      }
      uint64_t v11 = (uint64_t *)(v9 + 16 * v8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (void *)(v9 + 16 * v10);
      uint64_t v15 = v14[1];
      if (v12 == *v14 && v13 == v15) {
        break;
      }
      int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 < v3) {
        goto LABEL_13;
      }
LABEL_23:
      Swift::Int v8 = v18;
      if ((v17 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_24:
      if (v18 < v10) {
        goto LABEL_149;
      }
      if (v10 < v18)
      {
        uint64_t v26 = 16 * v18;
        uint64_t v27 = 16 * v10;
        Swift::Int v28 = v18;
        Swift::Int v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9) {
              goto LABEL_153;
            }
            uint64_t v30 = v9 + v26;
            uint64_t v31 = *(void *)(v9 + v27);
            uint64_t v32 = *(void *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
            *(void *)(v30 - 16) = v31;
            *(void *)(v30 - _Block_object_dispose(va, 8) = v32;
          }

          ++v29;
          v26 -= 16LL;
          v27 += 16LL;
        }

        while (v29 < v28);
      }

LABEL_73:
          if ((v63 & 1) != 0) {
            goto LABEL_134;
          }
          uint64_t v71 = &v38[2 * v40];
          uint64_t v73 = *v71;
          uint64_t v72 = v71[1];
          BOOL v51 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v51) {
            goto LABEL_136;
          }
          if (v74 < v62) {
            goto LABEL_90;
          }
LABEL_81:
          unint64_t v79 = v40 - 1;
          if (v40 - 1 >= v37)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }

          if (!v9) {
            goto LABEL_152;
          }
          uint64_t v80 = &v38[2 * v79];
          uint64_t v81 = *v80;
          uint64_t v82 = &v38[2 * v40];
          uint64_t v83 = v82[1];
          sub_1000A91D4((char *)(v9 + 16 * *v80), (char *)(v9 + 16LL * *v82), v9 + 16 * v83, v109);
          if (v1)
          {
            BOOL v96 = v110;
LABEL_107:
            swift_bridgeObjectRelease(v96);
            if (v108 >= -1)
            {
              *(void *)(v107 + 16) = 0LL;
              swift_bridgeObjectRelease(v107);
              return;
            }

LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }

          if (v83 < v81) {
            goto LABEL_125;
          }
          if (v40 > *((void *)v110 + 2)) {
            goto LABEL_126;
          }
          uint64_t *v80 = v81;
          v38[2 * v79 + 1] = v83;
          unint64_t v84 = *((void *)v110 + 2);
          if (v40 >= v84) {
            goto LABEL_127;
          }
          uint64_t v34 = v110;
          unint64_t v37 = v84 - 1;
          memmove(&v38[2 * v40], v82 + 2, 16 * (v84 - 1 - v40));
          *((void *)v110 + 2) = v84 - 1;
          if (v84 <= 2) {
            goto LABEL_90;
          }
        }
      }

      unint64_t v37 = 1LL;
LABEL_90:
      Swift::Int v3 = v108;
      if (v8 >= v108) {
        goto LABEL_111;
      }
    }

    Swift::Int v18 = v10 + 2;
    if (v10 + 2 >= v3) {
      goto LABEL_31;
    }
    int v17 = 0;
LABEL_13:
    uint64_t v19 = (uint64_t *)(v104 + 16 * v18);
    do
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      uint64_t v22 = (void *)(v9 + 16 * v8);
      uint64_t v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0) {
          goto LABEL_24;
        }
      }

      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1LL)) & 1) != 0)
      {
        goto LABEL_23;
      }

      v19 += 2;
      Swift::Int v25 = v18 + 1;
      Swift::Int v8 = v18;
      Swift::Int v18 = v25;
    }

    while (v25 < v3);
    Swift::Int v18 = v25;
    goto LABEL_23;
  }

  uint64_t v110 = (char *)_swiftEmptyArrayStorage;
  unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v37 >= 2)
  {
    uint64_t v97 = *v105;
    while (1)
    {
      unint64_t v98 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v97) {
        goto LABEL_154;
      }
      BOOL v96 = v110;
      uint64_t v99 = *(void *)&v110[16 * v98 + 32];
      uint64_t v100 = *(void *)&v110[16 * v37 + 24];
      sub_1000A91D4( (char *)(v97 + 16 * v99),  (char *)(v97 + 16LL * *(void *)&v110[16 * v37 + 16]),  v97 + 16 * v100,  v109);
      if (v1) {
        goto LABEL_107;
      }
      if (v100 < v99) {
        goto LABEL_140;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v110) & 1) == 0)
      {
        sub_1000A945C((uint64_t)v110);
        BOOL v96 = v103;
      }

      if (v98 >= *((void *)v96 + 2)) {
        goto LABEL_141;
      }
      unint64_t v101 = &v96[16 * v98 + 32];
      *(void *)unint64_t v101 = v99;
      *((void *)v101 + 1) = v100;
      unint64_t v102 = *((void *)v96 + 2);
      if (v37 > v102) {
        goto LABEL_142;
      }
      memmove(&v96[16 * v37 + 16], &v96[16 * v37 + 32], 16 * (v102 - v37));
      uint64_t v110 = v96;
      *((void *)v96 + 2) = v102 - 1;
      unint64_t v37 = v102 - 1;
      Swift::Int v3 = v108;
      if (v102 <= 2) {
        goto LABEL_122;
      }
    }

LABEL_122:
  swift_bridgeObjectRelease(v110);
  if (v3 < -1) {
    goto LABEL_150;
  }
  *(void *)(v107 + 16) = 0LL;
  swift_bridgeObjectRelease(v107);
}

uint64_t sub_1000A9110(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      unint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        unint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_1000A91D4(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_100131864(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      uint64_t v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        uint64_t v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_100131864(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      int v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    int v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

void sub_1000A9378(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC(&qword_10032A568);
    uint64_t v11 = (char *)sub_1000AA314(v10, 16 * v9 + 32);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  sub_100085EF0();
  sub_1000AB000();
}

void sub_1000A945C(uint64_t a1)
{
}

char *sub_1000A9470(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_1000A949C(void *a1)
{
  id v1 = [a1 responseCorrelationId];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_1000A94FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setLogKey:v4];
}

int64_t sub_1000A9540(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000A9624(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 9LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void sub_1000A96A4(uint64_t a1)
{
}

void sub_1000A96B8(uint64_t a1)
{
}

uint64_t sub_1000A96CC(uint64_t a1, uint64_t a2)
{
  uint64_t ProductsTask = type metadata accessor for LoadProductsTask(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ProductsTask - 8) + 32LL))(a2, a1, ProductsTask);
  return a2;
}

void sub_1000A9710(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_1000860BC(v3);
  sub_1000221B0();
}

unint64_t sub_1000A973C()
{
  unint64_t result = qword_10032A508;
  if (!qword_10032A508)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032A500);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_10032A508);
  }

  return result;
}

uint64_t sub_1000A9780()
{
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = swift_task_alloc(dword_10032A524);
  char v5 = (void *)sub_1000AA6CC(v4);
  uint64_t v6 = sub_1000AA94C(v5);
  return sub_1000A5580(v6, v7, v8, v9, v10, v1, v3, v2);
}

uint64_t sub_1000A97F0()
{
  uint64_t v1 = (uint64_t *)type metadata accessor for URLComponents(0LL);
  uint64_t v2 = *(v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = sub_1000AA458();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 16) & ~v8;
  uint64_t v26 = *(void *)(v7 + 64);
  uint64_t v29 = sub_10007B1FC(&qword_10032A3E0);
  uint64_t v10 = *(void *)(v29 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v27 = v10;
  uint64_t v25 = *(void *)(v10 + 64);
  sub_1000AAB68();
  (*(void (**)(uint64_t, uint64_t *))(v2 + 8))(v0 + v4, v1);
  sub_1000AA5B8(v0 + v5);

  uint64_t v28 = v6;
  uint64_t v12 = sub_1000AAFF4();
  if (!sub_1000AAA30(v12))
  {
    unint64_t v13 = v1[1];
    if (v13 >> 60 != 15) {
      sub_10007F054(*v1, v13);
    }
    swift_bridgeObjectRelease(v1[3]);
    swift_bridgeObjectRelease(v1[5]);
    uint64_t v14 = (char *)v1 + *(int *)(v2 + 28);
    uint64_t v15 = sub_10007B1FC(&qword_10032A028);
    if (!sub_1000AACF0(v15))
    {
      uint64_t v16 = sub_100086318();
      sub_1000AAB40(v16);
    }

    uint64_t v17 = sub_1000AACE0();
  }

  uint64_t v18 = v3 | v8 | v11 | 7;
  unint64_t v19 = (v26 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v11 + v20 + 8) & ~v11;
  uint64_t v22 = sub_1000AA460();
  sub_1000AA754(v22);
  sub_1000AA5B8((uint64_t)v1 + *(int *)(v3 + 32));
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v23(v0 + v9 + *(int *)(v28 + 24), v29);

  v23(v0 + v21, v29);
  return swift_deallocObject(v0, v21 + v25, v18);
}

uint64_t sub_1000A99DC()
{
  uint64_t v1 = swift_task_alloc(dword_10032A534);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  void *v2 = v0;
  v2[1] = sub_1000AA218;
  sub_1000AAB24();
  sub_1000AA63C();
  return sub_1000A5E8C(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A9AE0()
{
  uint64_t v1 = swift_task_alloc(dword_10032A53C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  void *v2 = v0;
  v2[1] = sub_1000AA214;
  uint64_t v3 = sub_1000AA89C();
  return sub_100086014(v3, v4, v5, v6);
}

unint64_t sub_1000A9B34()
{
  unint64_t result = qword_10032A560;
  if (!qword_10032A560)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10032A560);
  }

  return result;
}

unint64_t sub_1000A9B70()
{
  unint64_t result = qword_10032A570;
  if (!qword_10032A570)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027AC7C, &type metadata for LoadProductsTask.LoadProductsError);
    atomic_store(result, (unint64_t *)&qword_10032A570);
  }

  return result;
}

uint64_t sub_1000A9BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_100328ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A9BF4()
{
  uint64_t v1 = sub_1000AA8B0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000A9C14()
{
  uint64_t v1 = swift_task_alloc(dword_10032A59C);
  uint64_t v2 = (void *)sub_1000AA6CC(v1);
  void *v2 = v0;
  v2[1] = sub_1000A9C68;
  uint64_t v3 = sub_1000AA89C();
  return sub_1000A6A74(v3, v4, v5);
}

uint64_t sub_1000A9C68()
{
  return sub_10008751C(v0[1]);
}

uint64_t sub_1000A9C9C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000A9CBC()
{
  uint64_t v0 = swift_task_alloc(dword_10032A614);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_1000AB03C(v1);
  return sub_1000A6C40(v2, v3);
}

uint64_t sub_1000A9D04()
{
  uint64_t v0 = swift_task_alloc(dword_10032A62C);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  uint64_t v2 = sub_1000AB03C(v1);
  return sub_1000A6DB8(v2, v3);
}

uint64_t sub_1000A9D4C(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1000A9D58()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc(dword_10032A64C);
  uint64_t v3 = (void *)sub_1000AA6CC(v2);
  uint64_t v4 = sub_1000AA94C(v3);
  return sub_1000A758C(v4, v5, v6, v7, v8, v1);
}

uint64_t sub_1000A9DBC()
{
  uint64_t v2 = sub_1000AA458();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (uint64_t *)((v4 + 56) & ~v4);
  uint64_t v22 = *(void *)(v3 + 64);
  uint64_t v6 = sub_10007B1FC(&qword_10032A3E0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v21 = *(void *)(v7 + 64);
  sub_1000AAB68();
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  uint64_t v9 = sub_1000AAFF4();
  if (!sub_1000AAA30(v9))
  {
    unint64_t v10 = *(void *)(((v4 + 56) & ~v4) + 8);
    if (v10 >> 60 != 15) {
      sub_10007F054(*v5, v10);
    }
    swift_bridgeObjectRelease(*(void *)(((v4 + 56) & ~v4) + 0x18));
    swift_bridgeObjectRelease(*(void *)(((v4 + 56) & ~v4) + 0x28));
    uint64_t v11 = (char *)v5 + *(int *)(v1 + 28);
    uint64_t v12 = sub_10007B1FC(&qword_10032A028);
    if (!sub_1000AACF0(v12))
    {
      uint64_t v13 = sub_100086318();
      sub_1000AAB40(v13);
    }

    uint64_t v14 = sub_1000AACE0();
  }

  uint64_t v15 = v4 | v8 | 7;
  uint64_t v16 = (((v4 + 56) & ~v4) + v22 + v8) & ~v8;
  uint64_t v17 = sub_1000AA460();
  sub_1000AA754(v17);
  sub_1000AA5B8((uint64_t)v5 + *(int *)(v4 + 32));
  uint64_t v18 = (char *)v5 + v0 + *(int *)(v2 + 24);
  unint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v18, v6);
  v19((char *)(v0 + v16), v6);
  return swift_deallocObject(v0, v16 + v21, v15);
}

uint64_t sub_1000A9F34()
{
  uint64_t v2 = *(void *)(sub_1000AA458() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_10007B1FC(&qword_10032A3E0) - 8) + 80LL);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = v0 + ((v4 + v5) & ~v5);
  uint64_t v8 = swift_task_alloc(dword_10032A65C);
  uint64_t v9 = (void *)sub_1000AA6CC(v8);
  *uint64_t v9 = v1;
  v9[1] = sub_1000AA218;
  sub_1000AAB24();
  return sub_1000A7CF4(v10, v11, v12, v13, v14, v15, v6, v7);
}

uint64_t sub_1000A9FE4()
{
  return sub_1000F427C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000A9FEC()
{
  return ProductResponse.serverCorrelationID.getter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

_BYTE **sub_1000A9FF8(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return sub_10007AB88(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_1000AA004()
{
  return sub_10007A408(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000AA00C()
{
  uint64_t v1 = sub_1000AA8B0();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1000AA028(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1000AA038()
{
  uint64_t v1 = sub_1000AA8B0();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t getEnumTagSinglePayload for LoadProductsTask.LoadProductsError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for LoadProductsTask.LoadProductsError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10009C788(v2[8], v4) = 1;
  }
  else {
    LODWORD(sub_10009C788(v2[8], v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000AA138 + 4 * byte_10027AB82[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000AA16C + 4 * byte_10027AB7D[v4]))();
}

uint64_t sub_1000AA16C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AA17CLL);
  }
  return result;
}

uint64_t sub_1000AA188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AA190LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000AA194(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AA19C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LoadProductsTask.LoadProductsError()
{
  return &type metadata for LoadProductsTask.LoadProductsError;
}

unint64_t sub_1000AA1BC()
{
  unint64_t result = qword_10032A6B0;
  if (!qword_10032A6B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027AC54, &type metadata for LoadProductsTask.LoadProductsError);
    atomic_store(result, (unint64_t *)&qword_10032A6B0);
  }

  return result;
}

uint64_t sub_1000AA254(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_1000AA260()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 2872));
}

uint64_t sub_1000AA2B4()
{
  return ((uint64_t (*)(void))swift_asyncLet_finish)();
}

uint64_t sub_1000AA2C4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000AA2E0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

_OWORD *sub_1000AA2F0()
{
  int v3 = (void *)(*(void *)(v1 + 56) + 32 * v0);
  sub_10007B1A0(v3);
  return sub_1000853B0((_OWORD *)(v2 - 208), v3);
}

uint64_t sub_1000AA314(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

void sub_1000AA31C()
{
  *(void *)(v1 + 8 * (v0 >> 6) + 64) |= 1LL << v0;
}

_OWORD *sub_1000AA344@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + _Block_object_dispose(va, 8) = v1;
  return sub_1000853B0((_OWORD *)(v4 - 208), (_OWORD *)(*(void *)(v3 + 56) + 32 * v2));
}

  ;
}

uint64_t sub_1000AA388()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000AA3A4()
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(*(void *)(v1 - 208) + 48LL) + 16 * v0 + 8));
}

BOOL sub_1000AA3B8()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

BOOL sub_1000AA3CC()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

uint64_t sub_1000AA3E0()
{
  return v0;
}

uint64_t sub_1000AA3F0(uint64_t a1)
{
  return sub_10007B1C0(*(void *)(v1 + 56) + 32 * a1, v2 - 160);
}

uint64_t sub_1000AA400()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000AA410@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 - 256));
}

uint64_t sub_1000AA418()
{
  return v0;
}

uint64_t sub_1000AA42C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000AA434@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_arrayDestroy(a4, 2LL, a1 + 8);
}

_OWORD *sub_1000AA448()
{
  return sub_1000853B0((_OWORD *)(*(void *)(v1 + 56) + 32 * v0), (_OWORD *)(v2 - 160));
}

uint64_t sub_1000AA458()
{
  return type metadata accessor for LoadProductsTask(0LL);
}

uint64_t sub_1000AA460()
{
  return type metadata accessor for ProductRequest(0LL);
}

  ;
}

uint64_t sub_1000AA47C()
{
  return swift_bridgeObjectRelease(0x8000000000000000LL);
}

uint64_t sub_1000AA484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000AA498()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_1000AA4A0()
{
}

unint64_t sub_1000AA4AC(uint64_t a1, uint64_t a2)
{
  return sub_100132130(a1, a2);
}

uint64_t sub_1000AA4B4()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_1000AA4C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A96CC( v1 + ((*(unsigned __int8 *)(*(void *)(v2 + 64) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 + 64) + 80LL))
         + *(void *)(*(void *)(v2 + 64) + 72LL) * (a1 - 1),
           *(void *)(v2 + 72));
}

  ;
}

uint64_t sub_1000AA504@<X0>(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
  return 0LL;
}

uint64_t sub_1000AA51C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000AA528()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  uint64_t *v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 296);
  uint64_t *v4 = *v1;
  *(void *)(v3 + 304) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000AA554@<X0>(unint64_t a1@<X8>)
{
  return sub_100130EA8(a1 > 1, v2, 1, v1);
}

uint64_t sub_1000AA56C()
{
  return ((uint64_t (*)(void))swift_asyncLet_get_throwing)();
}

void sub_1000AA588()
{
  *(void *)(v1 + 8 * (v0 >> 6) + 64) |= 1LL << v0;
}

uint64_t sub_1000AA5B8@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

double sub_1000AA5C0()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

uint64_t sub_1000AA5CC()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 416) + 8LL))( *(void *)(v0 - 424),  *(void *)(v0 - 408));
}

void sub_1000AA5F4()
{
  *(void *)(v1 - 20_Block_object_dispose(va, 8) = v0;
}

uint64_t sub_1000AA604()
{
  return ((uint64_t (*)(void))TaskGroup.awaitAllRemainingTasks(isolation:))();
}

uint64_t sub_1000AA620()
{
  return ((uint64_t (*)(void))TaskGroup.next(isolation:))();
}

  ;
}

uint64_t sub_1000AA658@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 408));
}

uint64_t sub_1000AA668()
{
  return swift_release(v0);
}

uint64_t sub_1000AA670()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

uint64_t sub_1000AA684()
{
  return sub_1000A0430();
}

uint64_t sub_1000AA69C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000AA6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1000AA6CC(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000AA6D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  *unint64_t v20 = a19;
  *(void *)(v21 - 104) = a1;
  *(void *)(v21 - 96) = 91LL;
  *(void *)(v21 - 8_Block_object_dispose(va, 8) = 0xE100000000000000LL;
  return swift_bridgeObjectRetain(v19);
}

uint64_t sub_1000AA6FC()
{
  return swift_release(*(void *)(v0 + 2896));
}

uint64_t sub_1000AA708()
{
  return swift_release(*(void *)(v0 + 2904));
}

void sub_1000AA714(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t sub_1000AA71C()
{
  return swift_release(v0);
}

uint64_t sub_1000AA724(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000AA738()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1000AA744()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000AA754(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + *(int *)(a1 + 28)));
}

void sub_1000AA780()
{
}

uint64_t sub_1000AA78C()
{
  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_1000AA794(uint64_t a1, uint64_t a2)
{
  return sub_100132130(a1, a2);
}

uint64_t sub_1000AA79C()
{
  return ((uint64_t (*)(void))swift_continuation_await)();
}

uint64_t sub_1000AA7AC(uint64_t a1)
{
  return AsyncThrowingStream.Continuation.finish(throwing:)(v1, a1);
}

  ;
}

uint64_t sub_1000AA7D4(uint64_t a1)
{
  return swift_continuation_init(a1, 1LL);
}

uint64_t sub_1000AA7DC@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_1000AA7E8()
{
  return 0x69642D6563697270LL;
}

uint64_t sub_1000AA80C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = v3 | 0x3100;
  v2[6] = 1LL;
  v2[7] = a1;
  v2[8] = v1;
  return result;
}

uint64_t sub_1000AA830(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_1000AA84C()
{
}

uint64_t sub_1000AA864()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v0 + 8, v1 + 4);
}

void sub_1000AA87C()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  *uint64_t v3 = *v0;
  *(void *)(v2 + 160) = *(void *)(v2 + 48);
}

uint64_t sub_1000AA89C()
{
  return v0;
}

uint64_t sub_1000AA8B0()
{
  return v0;
}

uint64_t sub_1000AA8C0()
{
  return swift_beginAccess(*(void *)(v1 + 40) + 112LL, v0, 33LL, 0LL);
}

uint64_t sub_1000AA8D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000AA8E4()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 184));
}

  ;
}

uint64_t sub_1000AA908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000AA914()
{
  return 0x726550664F6D756ELL;
}

void sub_1000AA934(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 136);
  char v3 = *(_BYTE *)(v1 + 128);
  *(void *)uint64_t v2 = *(void *)(v1 + 120);
  *(_BYTE *)(v2 + _Block_object_dispose(va, 8) = v3;
}

uint64_t sub_1000AA94C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000AA96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

uint64_t sub_1000AA984()
{
  return 0x6563697270LL;
}

void sub_1000AA998( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = *(void *)(v14 + 248) + 1LL;
  *(void *)(v14 + 240) = a14;
  *(void *)(v14 + 24_Block_object_dispose(va, 8) = v15;
}

BOOL sub_1000AA9B8@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_1000AA9CC()
{
  *(void *)(v0 + 16) = v1;
}

  ;
}

id sub_1000AA9F0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2, 60.0);
}

uint64_t sub_1000AAA04@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

void sub_1000AAA10()
{
  *(void *)(v1 - 176) = v0;
}

uint64_t sub_1000AAA1C()
{
  return swift_task_dealloc(*(void *)(v0 + 280));
}

uint64_t sub_1000AAA30(uint64_t a1)
{
  return sub_10007D824(v1, 1LL, a1);
}

void sub_1000AAA44(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t sub_1000AAA4C(uint64_t a1, uint64_t a2)
{
  return swift_endAccess(v2);
}

uint64_t sub_1000AAA70@<X0>(uint64_t a1@<X8>)
{
  v4[39] = v2;
  v4[40] = v1;
  v4[41] = v3;
  uint64_t v5 = *(uint64_t (**)(void))(a1 + 8);
  v4[42] = v5;
  return v5();
}

uint64_t sub_1000AAA84()
{
  *(void *)(v0 + 16) = v4;
  *(void *)(v3 + swift_weakDestroy(v0 + 112) = v0;
  return sub_1000A96CC(v2, v1);
}

uint64_t sub_1000AAA98()
{
  return 0x64692D6D657469LL;
}

uint64_t sub_1000AAAB4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1000AAAC0()
{
}

uint64_t sub_1000AAACC()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

  ;
}

uint64_t sub_1000AAAF4(uint64_t a1)
{
  return sub_10007D824(v1, 1LL, a1);
}

void sub_1000AAB08(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
}

  ;
}

uint64_t sub_1000AAB40(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000AAB54()
{
  return BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v0, v1);
}

uint64_t sub_1000AAB68()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

void sub_1000AAB70()
{
}

void sub_1000AAB84(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000AAB8C(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v1);
}

uint64_t sub_1000AABA0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000AABA8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000AABB0()
{
  return swift_task_dealloc(v0);
}

unint64_t sub_1000AABB8()
{
  return sub_100132130(0x6563697270LL, 0xE500000000000000LL);
}

uint64_t sub_1000AABCC()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

void sub_1000AABE0(uint64_t a1@<X8>)
{
  v2[6] = 1LL;
  v2[7] = a1;
  v2[8] = v1;
}

void sub_1000AABFC()
{
  *(void *)(v0 - 160) = 91LL;
  *(void *)(v0 - 152) = 0xE100000000000000LL;
}

uint64_t sub_1000AAC14()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000AAC24()
{
  return swift_release(v0);
}

uint64_t sub_1000AAC2C()
{
  return swift_release(v0);
}

uint64_t sub_1000AAC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_10007A488(a2, v4, (uint64_t *)va);
}

void sub_1000AAC44()
{
  v0._countAndFlagsBits = 2112041LL;
  v0._object = (void *)0xE300000000000000LL;
  String.append(_:)(v0);
}

  ;
}

void sub_1000AAC60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *a10 = 0LL;
  a10[1] = 0LL;
  *(void *)(v12 + 32) = v11;
  *(void *)(v12 + 40) = v10;
}

void *sub_1000AAC70@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *uint64_t result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_1000AAC80@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(a1 - 256));
}

uint64_t sub_1000AAC88()
{
  return sub_10007A488(v0, v1, (uint64_t *)(v2 - 104));
}

BOOL sub_1000AAC98(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000AACA8()
{
  return v0 - 208;
}

uint64_t sub_1000AACB8()
{
  return v0 - 160;
}

void sub_1000AACC8()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000AACD8()
{
  return swift_retain(v0);
}

uint64_t sub_1000AACE0()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_1000AACF0(uint64_t a1)
{
  return sub_10007D824(v1, 3LL, a1);
}

  ;
}

BOOL sub_1000AAD1C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000AAD2C()
{
  return type metadata accessor for TaskPriority(0LL);
}

BOOL sub_1000AAD34(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_1000AAD44(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t sub_1000AAD4C()
{
  return swift_task_dealloc(*(void *)(v0 + 88));
}

  ;
}

uint64_t sub_1000AAD6C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 80));
}

void sub_1000AAD74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_1000AAD7C(uint64_t a1)
{
  return dispatch thunk of Actor.unownedExecutor.getter(a1, v1);
}

uint64_t sub_1000AAD84()
{
  return 0x6570795465646F6DLL;
}

uint64_t sub_1000AAD9C()
{
  return v0;
}

  ;
}

uint64_t sub_1000AADCC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

  ;
}

uint64_t sub_1000AADF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000AAE44()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 272));
}

uint64_t sub_1000AAE50()
{
  return _print_unlocked<A, B>(_:_:)(v1, v0);
}

void sub_1000AAE5C()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

unint64_t sub_1000AAE68()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000AAE7C()
{
  return swift_getObjectType(v0);
}

uint64_t sub_1000AAE84()
{
  return swift_retain(v0);
}

id sub_1000AAE8C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000AAE98()
{
  return sub_1000A96CC(v0, v1);
}

uint64_t sub_1000AAEA4()
{
  return sub_10007D824(v1, 1LL, v0);
}

uint64_t sub_1000AAEC8()
{
  return swift_release(v0);
}

uint64_t sub_1000AAED0()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000AAED8()
{
  return swift_unknownObjectRetain(v0);
}

  ;
}

void sub_1000AAEF4()
{
  *uint64_t v0 = *v1;
}

uint64_t sub_1000AAF00()
{
  return swift_task_dealloc(*(void *)(v0 + 288));
}

uint64_t sub_1000AAF08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

__n128 sub_1000AAF1C(__n128 *a1)
{
  __n128 result = *(__n128 *)(v1 - 512);
  a1[1] = result;
  return result;
}

uint64_t sub_1000AAF30()
{
  return sub_1000A96CC(*(void *)(v1 + 48), v0);
}

BOOL sub_1000AAF3C@<W0>(uint64_t a1@<X8>)
{
  return os_log_type_enabled(*(os_log_t *)(a1 - 256), v1);
}

uint64_t sub_1000AAF48()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000AAF54(uint64_t result)
{
  *(void *)(result + 16) = *(void *)(v2 - 376);
  *(void *)(result + 24) = v1;
  return result;
}

uint64_t sub_1000AAF68()
{
  uint64_t v1 = *(void *)(v0 + 120);
  *(void *)(v0 + 120) = 0LL;
  return swift_release(v1);
}

  ;
}

  ;
}

uint64_t sub_1000AAF8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 8);
  *(void *)(v1 + 344) = v2;
  return v2();
}

uint64_t sub_1000AAF98@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000AAFA4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_1000AAFAC()
{
}

uint64_t sub_1000AAFB8()
{
  return v0;
}

void sub_1000AAFC4()
{
}

uint64_t sub_1000AAFD0()
{
  return v0;
}

uint64_t sub_1000AAFDC()
{
  return swift_task_dealloc(*(void *)(v0 + 176));
}

  ;
}

uint64_t sub_1000AAFF4()
{
  return type metadata accessor for ClientOverride(0LL);
}

  ;
}

void sub_1000AB00C()
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
}

  ;
}

void sub_1000AB034(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000AB03C(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000AB050(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return sub_10007A488(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2, a3);
}

  ;
}

void sub_1000AB064(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1000AB06C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000AB080( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a9);
}

uint64_t sub_1000AB088(char a1, uint64_t a2)
{
  return sub_100130EA8(a1, a2, 1, v2);
}

void sub_1000AB094(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

  ;
}

uint64_t sub_1000AB0A8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 44_Block_object_dispose(va, 8) = a3;
  *(void *)(v4 + 456) = a4;
  *(_BYTE *)(v4 + 584) = a2;
  *(void *)(v4 + 440) = a1;
  *(void *)(v4 + 464) = sub_100086224();
  *(void *)(v4 + 472) = sub_100093010();
  *(void *)(v4 + 480) = sub_100093010();
  *(void *)(v4 + 48_Block_object_dispose(va, 8) = sub_100093010();
  uint64_t v5 = *(void *)(sub_100086310() - 8);
  *(void *)(v4 + 496) = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  *(void *)(v4 + 504) = v6;
  *(void *)(v4 + 512) = sub_1000B20E8(v6);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AB128()
{
  if (qword_100328A90 != -1) {
    swift_once(&qword_100328A90, sub_1000AEEE8);
  }
  *(void *)(v0 + 520) = qword_10032A6C0;
  return sub_100092F20();
}

uint64_t sub_1000AB184()
{
  *(void *)(v0 + 52_Block_object_dispose(va, 8) = v1;
  sub_100093420();
  return sub_100092F20();
}

void sub_1000AB1B8()
{
  uint64_t v137 = v3;
  uint64_t v138 = v4;
  unint64_t v136 = v0;
  uint64_t v6 = v0[63];
  uint64_t v5 = v0[64];
  uint64_t v7 = v0[62];
  sub_1000B213C(v0[55], v8, type metadata accessor for PurchaseIntentInternal);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_1002EC280, v10 + v6, v9 | 7);
  v0[67] = v11;
  sub_10009BDF8(v5, v11 + v10);
  uint64_t v12 = sub_1000AA314((uint64_t)&unk_1002EC2A8, 32LL);
  *(void *)(v12 + 16) = sub_1000B1E88;
  *(void *)(v12 + 24) = v11;
  v0[36] = sub_1000B1F9C;
  v0[37] = v12;
  v0[32] = _NSConcreteStackBlock;
  v0[33] = 1107296256LL;
  v0[34] = sub_100121CD4;
  v0[35] = &unk_1002EC2C0;
  uint64_t v13 = _Block_copy(v0 + 32);
  uint64_t v14 = v0[37];
  swift_retain(v12);
  uint64_t v15 = swift_release(v14);
  sub_1000B2198(v15, "modifyUsingTransaction:");
  _Block_release(v13);
  char v16 = sub_1000B22F8(v12, (uint64_t)"", 93LL, 24LL, 22LL);
  swift_release(v12);
  if ((v16 & 1) != 0)
  {
    __break(1u);
LABEL_26:
    swift_once(&qword_100328B40, sub_1000F4208);
    goto LABEL_8;
  }

  if (*((_BYTE *)v0 + 584) == 1 && (sub_1000AF314(*(void *)(v0[55] + 16LL), *(void **)(v0[55] + 24LL)) & 1) != 0)
  {
    uint64_t v17 = sub_10007B1FC((uint64_t *)&unk_10032C440);
    uint64_t v18 = ((uint64_t (*)(uint64_t, void *))swift_initStackObject)(v17, v0 + 10);
    *(_OWORD *)(v18 + 16) = xmmword_10027ACD0;
    *(void *)(v18 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
    *(void *)(v18 + 40) = v19;
    *(void *)(v18 + 72) = &type metadata for Bool;
    *(_BYTE *)(v18 + 4_Block_object_dispose(va, 8) = 1;
    *(void *)(v18 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
    *(void *)(v18 + 8_Block_object_dispose(va, 8) = v20;
    *(void *)(v18 + 120) = &type metadata for Bool;
    *(_BYTE *)(v18 + 96) = 1;
    *(void *)(v18 + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyLaunchOrigin);
    *(void *)(v18 + 136) = v21;
    *(void *)(v18 + 16_Block_object_dispose(va, 8) = &type metadata for String;
    *(void *)(v18 + 144) = 0x74696B65726F7473LL;
    *(void *)(v18 + 152) = 0xE900000000000064LL;
    uint64_t v22 = (void *)Dictionary.init(dictionaryLiteral:)( v18,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    sub_10007CBC0((uint64_t)v22, &qword_10032A828, &OBJC_CLASS___FBSOpenApplicationOptions_ptr);
    sub_100121248(v22);
    uint64_t v24 = v23;
    sub_10007B980();
    id v25 = sub_1000AF644(v24);
    v0[68] = v25;
    id v26 = [(id)objc_opt_self(FBSOpenApplicationService) serviceWithDefaultShellEndpoint];
    v0[69] = v26;
    if (v26)
    {
      id v27 = v26;
      NSString v28 = String._bridgeToObjectiveC()();
      v0[70] = v28;
      v0[7] = v0 + 50;
      v0[2] = v0;
      v0[3] = sub_1000AB8F4;
      uint64_t v29 = sub_1000AA7D4((uint64_t)(v0 + 2));
      v0[38] = _NSConcreteStackBlock;
      v0[39] = 0x40000000LL;
      v0[40] = sub_1000AF6CC;
      v0[41] = &unk_1002EC2E8;
      v0[42] = v29;
      [v27 openApplication:v28 withOptions:v25 completion:v0 + 38];
      ((void (*)(void *))swift_continuation_await)(v0 + 2);
      return;
    }
  }

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_1003281C8);
  uint64_t v14 = v30;
  if (qword_100328B40 != -1) {
    goto LABEL_26;
  }
LABEL_8:
  uint64_t v31 = (os_log_s *)v0[57];
  uint64_t v32 = sub_100079604(v0[58], (uint64_t)qword_10033E1A8);
  sub_1000B233C(v32, v33, type metadata accessor for SKLogger);
  sub_1000B2254();
  int v34 = swift_bridgeObjectRelease(v135);
  sub_1000B2080(v34, v35, v36, v37, v38, v39, v40, v41, v108, v112, v116, v120, v123, v127, v130, v133, v134, v135);
  sub_1000B2000();
  uint64_t v42 = v135;
  static os_log_type_t.default.getter(v43);
  sub_100085EE8((uint64_t)v31);
  uint64_t v44 = sub_100085EE8(v135);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  BOOL v46 = sub_10009332C(v45);
  uint64_t v47 = v0[57];
  if (v46)
  {
    uint64_t v124 = v134;
    uint64_t v48 = v0[56];
    uint64_t v128 = v2;
    uint64_t v49 = sub_10007B9FC(22LL);
    uint64_t v50 = sub_10007B9FC(64LL);
    sub_1000B20C4(4.8752e-34);
    sub_1000B2204(v48);
    sub_100085F14();
    sub_10009C494();
    uint64_t v52 = sub_10008620C(v134, v51, &v133);
    sub_1000B21D4(v52, v53, v54, v55, v56, v57, v58, v59, v109, v113, (uint64_t)(v0 + 48), (uint64_t)(v0 + 47));
    sub_10007B980();
    sub_10007D974(v47);
    *(_WORD *)(v49 + 12) = 2082;
    sub_10007BA3C();
    v0[48] = sub_100086308(v124, v60, &v133);
    sub_100086194(v48, (uint64_t)(v0 + 49));
    sub_100085E64(v42);
    sub_100086038((void *)&_mh_execute_header, v31, v1, "%{public}s%{public}s", (uint8_t *)v49);
    sub_100086030(v50, v61, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v50);
    uint64_t v62 = v49;
    uint64_t v2 = v128;
    sub_10007B974(v62);

    sub_10007BA44();
  }

  else
  {
    sub_10007D974(v0[57]);
    sub_100085E64(v135);
  }

  sub_100085BC4(v0[61], type metadata accessor for SKLogger);
  if ((v14 & 0x1000000000000000LL) != 0 || !(v14 & 0x2000000000000000LL | v2 & 0x1000000000000000LL))
  {
    sub_1000B2214((uint64_t)sub_1000AF718);
    if (v42)
    {
LABEL_17:
      sub_1000B217C();
      return;
    }

    unsigned int v66 = *((_DWORD *)v0 + 144);
  }

  else
  {
    uint64_t v63 = sub_1000B2348();
    *(void *)(v63 + 16) = sub_1000AF718;
    *(void *)(v63 + 24) = 0LL;
    if ((v14 & 0x2000000000000000LL) != 0)
    {
      unsigned int v66 = sub_1000B22AC();
      sub_1000939C0();
    }

    else
    {
      if ((v2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v64 = (v14 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v65 = v2 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v64 = sub_1000B2324();
      }

      unsigned int v66 = sub_1000B2268(v64, v65, (void *(*)(uint64_t *__return_ptr))sub_1000B1F14);
      sub_1000939C0();
      if (v42) {
        goto LABEL_17;
      }
    }
  }

  uint64_t v68 = v0[57];
  sub_1000B213C(v131, v67, type metadata accessor for SKLogger);
  uint64_t v134 = v2;
  uint64_t v135 = v14;
  sub_1000B202C();
  *((_DWORD *)v0 + 145) = v66;
  v139._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  sub_1000B2330(v139);
  uint64_t v69 = sub_100085EF0();
  uint64_t v71 = v134;
  uint64_t v70 = v135;
  os_log_type_t v72 = static os_log_type_t.debug.getter(v69);
  sub_100085EE8(v68);
  sub_100085EE8(v70);
  uint64_t v73 = (os_log_s *)sub_100093C38();
  BOOL v74 = sub_1000B22A4(v73);
  uint64_t v75 = (void *)v0[66];
  uint64_t v76 = v0[57];
  if (v74)
  {
    uint64_t v125 = v71;
    uint64_t v77 = v0[56];
    uint64_t v78 = sub_10007B9FC(22LL);
    uint64_t v79 = sub_10007B9FC(64LL);
    int v80 = sub_1000B211C(4.8752e-34);
    sub_1000B2238( v80,  v81,  v82,  v83,  v84,  v85,  v86,  v87,  v109,  v113,  v117,  (uint64_t)(v0 + 53),  v125,  (uint64_t)(v0 + 52),  v131,  v133,  v134);
    sub_100085F14();
    sub_100086144();
    uint64_t v89 = sub_10008620C(v134, v88, &v133);
    sub_1000B2160(v89, v90, v91, v92, v93, v94, v95, v96, v110, v114, v118, v121);
    sub_10007B980();
    sub_10007D974(v76);
    *(_WORD *)(v78 + 12) = 2082;
    sub_100085FEC();
    v0[52] = sub_1000B20F4(v126, v97, &v133);
    sub_100086194(v129, v77);
    sub_1000B1FD4();
    sub_100086038((void *)&_mh_execute_header, v73, v72, "%{public}s%{public}s", (uint8_t *)v78);
    sub_100086030(v79, v98, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v79);
    sub_10007B974(v78);

    uint64_t v99 = sub_100085EF0();
    sub_1000B22F0(v99, v100, v101, v102, v103, v104, v105, v106, v111, v115, v119, v122, v126, v129, v132);
  }

  else
  {
    sub_10007D974(v0[57]);
    sub_1000B1FD4();
  }

  sub_1000B21B8();
  sub_1000B2300(v107, type metadata accessor for SKLogger);
  sub_10009C5EC();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_100092F68((uint64_t (*)(void))v0[1]);
}

uint64_t sub_1000AB8F4()
{
  *(void *)(v0 + 56_Block_object_dispose(va, 8) = v1;
  sub_100093420();
  return sub_100092F20();
}

#error "1000AB9C0: call analysis failed (funcsize=260)"
uint64_t sub_1000ABD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  os_log_s *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  os_log_s *v41;
  os_log_type_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint32_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  os_log_s *v64;
  os_log_type_t v65;
  BOOL v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  Swift::String v90;
  Swift::String v91;
  int v85 = v7 + 416;
  int v86 = v7 + 392;
  uint64_t v8 = *(void **)(v7 + 560);
  uint64_t v9 = *(void **)(v7 + 552);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v10 = *(void *)(v7 + 568);
  uint64_t v11 = *(void *)(v7 + 456);
  uint64_t v12 = *(void *)(v7 + 440);
  uint64_t v13 = sub_100079604(*(void *)(v7 + 464), (uint64_t)qword_10033E1A8);
  sub_1000B224C(v13, v14, type metadata accessor for SKLogger);
  uint64_t v88 = 0LL;
  uint64_t v89 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(62LL);
  *(void *)(v7 + 344) = 0LL;
  *(void *)(v7 + 352) = 0xE000000000000000LL;
  sub_1000862B8();
  v90._countAndFlagsBits = 0xD00000000000001BLL;
  sub_1000B2024(v90);
  uint64_t v15 = *(void *)(v12 + 16);
  char v16 = *(void **)(v12 + 24);
  sub_10007BA3C();
  v91._countAndFlagsBits = v15;
  v91._object = v16;
  sub_1000B2024(v91);
  sub_10007BA44();
  sub_100085F08(0xD00000000000001FLL, (uint64_t)" after adding purchase intent: ");
  *(void *)(v7 + 432) = v10;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v17 = sub_1000B235C(v7 + 432);
  uint64_t v18 = *(void *)(v7 + 352);
  int v82 = *(void *)(v7 + 344);
  uint64_t v19 = static os_log_type_t.error.getter(v17);
  sub_100085EE8(v11);
  sub_100085EE8(v18);
  uint64_t v20 = (os_log_s *)sub_100093B00();
  uint64_t v21 = v19;
  uint64_t v22 = os_log_type_enabled(v20, v19);
  uint64_t v23 = *(void *)(v7 + 568);
  uint64_t v24 = *(void **)(v7 + 552);
  id v25 = *(void **)(v7 + 544);
  id v26 = *(void *)(v7 + 456);
  if (v22)
  {
    uint64_t v78 = *(void **)(v7 + 544);
    id v27 = *(void *)(v7 + 448);
    int v80 = *(void **)(v7 + 552);
    NSString v28 = sub_10007B9FC(22LL);
    uint64_t v77 = v23;
    uint64_t v29 = sub_10007B9FC(64LL);
    *(_DWORD *)NSString v28 = 136446466;
    sub_1000B21A4();
    sub_1000930E4();
    sub_10009C350(v27);
    sub_100085F14();
    sub_1000930DC();
    *(void *)(v7 + 40_Block_object_dispose(va, 8) = sub_10008620C(v88, v30, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 + 408, v85, v28 + 4);
    sub_10007B980();
    sub_10007D974(v26);
    *(_WORD *)(v28 + 12) = 2082;
    sub_10007BA3C();
    *(void *)(v7 + 392) = sub_100086308(v82, v31, &v87);
    sub_100086194(v86, v7 + 400);
    sub_100085E64(v18);
    sub_100086038((void *)&_mh_execute_header, v20, v21, "%{public}s%{public}s", (uint8_t *)v28);
    sub_100086030(v29, v32, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v29);
    sub_10007B974(v28);

    sub_10007BA44();
    swift_errorRelease(v77);
  }

  else
  {
    sub_10007D974(v26);
    sub_100085E64(v18);

    swift_errorRelease(v23);
  }

  sub_100085BC4(*(void *)(v7 + 472), type metadata accessor for SKLogger);
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(off_1003281C8);
  int v35 = v34;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  int v36 = *(void *)(v7 + 456);
  int v83 = sub_100079604(*(void *)(v7 + 464), (uint64_t)qword_10033E1A8);
  sub_1000B2364(v83, v37, type metadata accessor for SKLogger);
  uint64_t v88 = 0LL;
  uint64_t v89 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease(v89);
  uint64_t v88 = 0x20676E6974736F50LL;
  uint64_t v89 = 0xE800000000000000LL;
  sub_1000B2204(v33);
  sub_1000B2000();
  int v38 = v89;
  int v81 = v88;
  int v40 = static os_log_type_t.default.getter(v39);
  sub_100085EE8(v36);
  sub_100085EE8(v38);
  int v41 = (os_log_s *)sub_1000935A4();
  uint64_t v42 = v40;
  uint64_t v43 = sub_1000B22E8(v41);
  uint64_t v44 = *(void *)(v7 + 456);
  if (v43)
  {
    uint64_t v45 = v33;
    BOOL v46 = *(void *)(v7 + 448);
    uint64_t v47 = sub_10007B9FC(22LL);
    uint64_t v79 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v47 = 136446466;
    sub_1000B21A4();
    sub_100085FEC();
    uint64_t v48 = v46;
    uint64_t v33 = v45;
    sub_1000935BC(v48);
    sub_100085F14();
    sub_100085EF0();
    *(void *)(v7 + 376) = sub_10008620C(v88, v49, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 + 376, v7 + 384, v47 + 4);
    sub_10007B980();
    sub_10007D974(v44);
    *(_WORD *)(v47 + 12) = 2082;
    sub_10007BA3C();
    *(void *)(v7 + 384) = sub_100086308(v81, v50, &v87);
    sub_100086194(v7 + 384, v86);
    sub_100085E64(v38);
    sub_100086038((void *)&_mh_execute_header, v41, v42, "%{public}s%{public}s", (uint8_t *)v47);
    sub_100086030(v79, v51, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v79);
    sub_10007B974(v47);

    sub_10007BA44();
  }

  else
  {
    sub_10007D974(*(void *)(v7 + 456));
    sub_100085E64(v38);
  }

  sub_100085BC4(*(void *)(v7 + 488), type metadata accessor for SKLogger);
  if ((v35 & 0x1000000000000000LL) != 0 || !(v35 & 0x2000000000000000LL | v33 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_1000AF718, 0LL, v33, v35);
    uint64_t v55 = *(_DWORD *)(v7 + 576);
    goto LABEL_19;
  }

  uint64_t v52 = sub_1000B2348();
  *(void *)(v52 + 16) = sub_1000AF718;
  *(void *)(v52 + 24) = 0LL;
  if ((v35 & 0x2000000000000000LL) != 0)
  {
    *(void *)(v7 + 360) = v33;
    *(void *)(v7 + 36_Block_object_dispose(va, 8) = v35 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v55 = notify_post((const char *)(v7 + 360));
    sub_1000939C0();
LABEL_19:
    uint64_t v58 = *(void *)(v7 + 456);
    sub_1000B224C(v83, v57, type metadata accessor for SKLogger);
    uint64_t v88 = v33;
    uint64_t v89 = v35;
    sub_1000B202C();
    *(_DWORD *)(v7 + 580) = v55;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    String.append(_:)(v59);
    uint64_t v60 = sub_100085EF0();
    uint64_t v61 = v88;
    uint64_t v62 = v89;
    uint64_t v63 = static os_log_type_t.debug.getter(v60);
    sub_100085EE8(v58);
    sub_100085EE8(v62);
    uint64_t v64 = (os_log_s *)sub_100093B00();
    uint64_t v65 = v63;
    unsigned int v66 = sub_1000B22E8(v64);
    uint64_t v67 = *(void **)(v7 + 528);
    uint64_t v68 = *(void **)(v7 + 456);
    if (v66)
    {
      int v84 = v61;
      uint64_t v69 = *(void *)(v7 + 448);
      uint64_t v70 = sub_10007B9FC(22LL);
      uint64_t v71 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v70 = 136446466;
      sub_1000B21A4();
      swift_bridgeObjectRetain(v68);
      v72._countAndFlagsBits = v69;
      v72._object = v68;
      String.append(_:)(v72);
      sub_100085F14();
      sub_1000AABA8();
      *(void *)(v7 + 424) = sub_10008620C(v88, v73, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 + 424, v7 + 432, v70 + 4);
      sub_10007B980();
      sub_10007D974((uint64_t)v68);
      *(_WORD *)(v70 + 12) = 2082;
      sub_10007BA3C();
      *(void *)(v7 + 416) = sub_100086308(v84, v74, &v87);
      sub_100086194(v85, v7 + 424);
      sub_100085E64(v62);
      sub_100086038((void *)&_mh_execute_header, v64, v65, "%{public}s%{public}s", (uint8_t *)v70);
      sub_100086030(v71, v75, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v71);
      sub_10007B974(v70);

      sub_10007BA44();
    }

    else
    {
      sub_10007D974(*(void *)(v7 + 456));
      sub_100085E64(v62);
    }

    sub_1000B21B8();
    sub_1000B2300(v76, type metadata accessor for SKLogger);
    sub_10009C5EC();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    return (*(uint64_t (**)(void))(v7 + 8))();
  }

  if ((v33 & 0x1000000000000000LL) != 0)
  {
    uint64_t v53 = (v35 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v54 = v33 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v53 = _StringObject.sharedUTF8.getter(v33, v35);
  }

  uint64_t v55 = sub_1000B2268(v53, v54, (void *(*)(uint64_t *__return_ptr))sub_1000B1F14);
  __n128 result = sub_1000939C0();
  if (!v38) {
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1000AC564(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 120);
  *(void *)(v2 + swift_weakDestroy(v0 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000AC590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[110] = a3;
  v3[109] = a2;
  v3[108] = a1;
  v3[111] = sub_100086224();
  v3[112] = sub_100093010();
  v3[113] = sub_100093010();
  v3[114] = sub_100093010();
  v3[115] = sub_100093010();
  v3[116] = sub_100093010();
  v3[117] = sub_100093010();
  v3[118] = sub_100093010();
  v3[119] = sub_100093010();
  v3[120] = sub_100093010();
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032A280);
  v3[121] = sub_1000B20E8(*(void *)(*(void *)(v4 - 8) + 64LL));
  uint64_t v5 = sub_100086310();
  v3[122] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[123] = v6;
  v3[124] = sub_1000B20E8(*(void *)(v6 + 64));
  uint64_t v7 = sub_1000B2290();
  v3[125] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[126] = v8;
  v3[127] = sub_1000B20E8(*(void *)(v8 + 64));
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AC678()
{
  if (qword_100328D48 != -1) {
    swift_once(&qword_100328D48, sub_10012D118);
  }
  uint64_t v1 = (void *)qword_10033E3D0;
  v0[128] = qword_10033E3D0;
  uint64_t v2 = qword_100328BB8;
  swift_unknownObjectRetain(v1);
  if (v2 != -1) {
    swift_once(&qword_100328BB8, sub_10012B620);
  }
  uint64_t v3 = v0 + 10;
  id v4 = [v1 BOOLForKey:qword_10033E240];
  v0[129] = v4;
  v0[15] = v0 + 86;
  v0[10] = v0;
  v0[11] = sub_1000AC798;
  uint64_t v5 = sub_1000AA7D4((uint64_t)(v0 + 10));
  v0[18] = _NSConcreteStackBlock;
  uint64_t v6 = v0 + 18;
  v6[1] = 0x40000000LL;
  void v6[2] = sub_1000A36F8;
  void v6[3] = &unk_1002EC240;
  void v6[4] = v5;
  [v4 valueWithCompletion:v6];
  return swift_continuation_await(v3);
}

uint64_t sub_1000AC798()
{
  *(void *)(*(void *)v0 + 104sub_1000E0FD8(v1, v0, 0LL) = *(void *)(*(void *)v0 + 112LL);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AC7EC()
{
  uint64_t v2 = *(void **)(v0 + 688);

  unsigned __int8 v3 = [v2 BOOLValue];
  if ((v3 & 1) != 0)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v4 = sub_1000B222C();
    uint64_t v5 = sub_100079604(v4, (uint64_t)qword_10033E1A8);
    sub_1000B213C(v5, v6, type metadata accessor for SKLogger);
    uint64_t v36 = 0LL;
    unint64_t v37 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(72LL);
    *(void *)(v0 + 224) = 0LL;
    *(void *)(v0 + 232) = 0xE000000000000000LL;
    sub_1000862B8();
    v38._countAndFlagsBits = 0xD000000000000046LL;
    sub_1000B2024(v38);
    *(void *)(v0 + 840) = qword_10033E240;
    type metadata accessor for AMSBagKey(0LL);
    uint64_t v7 = sub_1000B235C(v0 + 840);
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 232);
    os_log_type_t v10 = static os_log_type_t.default.getter(v7);
    sub_100085EE8(v1);
    sub_100085EE8(v8);
    uint64_t v11 = (os_log_s *)sub_100093C38();
    BOOL v12 = sub_10009396C(v11);
    uint64_t v13 = *(void *)(v0 + 1024);
    uint64_t v14 = *(void *)(v0 + 880);
    if (v12)
    {
      uint64_t v15 = *(void *)(v0 + 872);
      uint64_t v32 = v9;
      uint64_t v16 = sub_10007B9FC(22LL);
      uint64_t v17 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v16 = 136446466;
      sub_1000B2110();
      uint64_t v35 = v18;
      uint64_t v36 = v19;
      unint64_t v37 = v20;
      sub_1000930E4();
      sub_10009C350(v15);
      sub_100085F14();
      sub_1000930DC();
      *(void *)(v0 + 84_Block_object_dispose(va, 8) = sub_10008620C(v36, v21, &v35);
      sub_1000B21CC(v0 + 848, v0 + 856);
      sub_10007B980();
      sub_10007D974(v14);
      *(_WORD *)(v16 + 12) = 2082;
      sub_100085FEC();
      *(void *)(v0 + 856) = sub_1000B20F4(v32, v22, &v35);
      sub_100086194(v0 + 856, v0 + 864);
      sub_1000B1FD4();
      sub_100086038((void *)&_mh_execute_header, v11, v10, "%{public}s%{public}s", (uint8_t *)v16);
      sub_100086030(v17, v23, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v17);
      sub_10007B974(v16);

      sub_100085EF0();
    }

    else
    {
      sub_10007D974(*(void *)(v0 + 880));
      sub_1000B1FD4();
    }

    swift_unknownObjectRelease(v13);
    sub_100085BC4(*(void *)(v0 + 912), type metadata accessor for SKLogger);
    goto LABEL_13;
  }

  uint64_t v24 = *(void *)(*(void *)(v0 + 864) + 16LL);
  *(void *)(v0 + 104_Block_object_dispose(va, 8) = v24;
  if (!v24)
  {
    swift_unknownObjectRelease(*(void *)(v0 + 1024));
LABEL_13:
    uint64_t v29 = sub_1000B1FA0();
    uint64_t v33 = v31;
    uint64_t v34 = v30;
    swift_task_dealloc(v29);
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    sub_1000AABB0();
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(void *)(v0 + 1056) = @"sk-notification-category-purchase-intent";
  uint64_t v25 = sub_1000B2274((uint64_t)@"date");
  uint64_t v26 = qword_100328A98;
  swift_bridgeObjectRetain(v25);
  sub_10009C738();
  if (v26 != -1) {
    swift_once(&qword_100328A98, sub_1000AEF34);
  }
  uint64_t v27 = qword_10032A6C8;
  *(void *)(v0 + 1096) = qword_10032A6C8;
  return swift_task_switch(sub_1000ACB6C, v27, 0LL);
}

uint64_t sub_1000ACB6C()
{
  uint64_t v1 = v0[137];
  v0[138] = *(void *)(v1 + 112);
  uint64_t v2 = *(void *)(v1 + 120);
  v0[139] = v2;
  swift_bridgeObjectRetain(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000ACBAC()
{
  uint64_t v2 = *(void *)(v0 + 1112);
  if (!v2)
  {
    uint64_t v8 = *(void *)(v0 + 1088);
    uint64_t v4 = v8;
    goto LABEL_9;
  }

  uint64_t v3 = *(void *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 1088);
  uint64_t v5 = *(void *)(v0 + 1080);
  BOOL v6 = v3 == v5 && v2 == v4;
  if (v6)
  {
    sub_100085EF0();
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(void *)(v0 + 1112), v5, *(void *)(v0 + 1088), 0LL);
    sub_100085EF0();
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = *(void *)(v0 + 1088);
LABEL_9:
      uint64_t v9 = swift_bridgeObjectRetain(v8);
      static Date.distantPast.getter(v9);
      os_log_type_t v10 = (void *)swift_task_alloc(dword_10032A7DC);
      *(void *)(v0 + 1120) = v10;
      *os_log_type_t v10 = v0;
      v10[1] = sub_1000ACF1C;
      return sub_1000AEA20( *(void *)(v0 + 1080),  v4,  *(void *)(v0 + 1016),  *(void *)(v0 + 872),  *(void *)(v0 + 880));
    }
  }

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v12 = *(void *)(v0 + 1080);
  uint64_t v13 = sub_1000B222C();
  uint64_t v14 = sub_100079604(v13, (uint64_t)qword_10033E1A8);
  sub_1000B213C(v14, v15, type metadata accessor for SKLogger);
  *(void *)(v0 + 256) = 0LL;
  *(void *)(v0 + 264) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(81LL);
  uint64_t v16 = *(void *)(v0 + 264);
  *(void *)(v0 + 272) = *(void *)(v0 + 256);
  *(void *)(v0 + 280) = v16;
  v44._countAndFlagsBits = 0xD00000000000002DLL;
  v44._object = (void *)0x800000010029F440LL;
  sub_1000B2024(v44);
  sub_10009C32C(v12);
  sub_100085FB4();
  sub_1000862B8();
  v17._countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v17);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 280);
  LOBYTE(v12) = static os_log_type_t.default.getter(v20);
  sub_100085EE8(v1);
  sub_100085EE8(v18);
  uint64_t v21 = (os_log_s *)sub_100093C38();
  os_log_type_t v22 = v12;
  BOOL v23 = sub_1000B22A4(v21);
  uint64_t v24 = *(void **)(v0 + 880);
  if (v23)
  {
    uint64_t v25 = *(void *)(v0 + 872);
    uint64_t v26 = sub_10007B9FC(22LL);
    uint64_t v27 = sub_10007B9FC(64LL);
    uint64_t v43 = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    sub_1000B2110();
    *(void *)(v0 + 240) = v28;
    *(void *)(v0 + 24_Block_object_dispose(va, 8) = v29;
    swift_bridgeObjectRetain(v24);
    v30._countAndFlagsBits = v25;
    v30._object = v24;
    String.append(_:)(v30);
    sub_100085F14();
    sub_100086144();
    *(void *)(v26 + 4) = sub_10008620C(*(void *)(v0 + 240), v31, &v43);
    sub_10007B980();
    sub_10007D974((uint64_t)v24);
    *(_WORD *)(v26 + 12) = 2082;
    sub_100085FEC();
    *(void *)(v26 + 14) = sub_1000B20F4(v19, v32, &v43);
    sub_1000B1FD4();
    sub_100086038((void *)&_mh_execute_header, v21, v22, "%{public}s%{public}s", (uint8_t *)v26);
    sub_100086030(v27, v33, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v27);
    sub_10007B974(v26);

    sub_100085EF0();
  }

  else
  {
    sub_10007D974(*(void *)(v0 + 880));
    sub_1000B1FD4();
  }

  sub_100085BC4(*(void *)(v0 + 920), type metadata accessor for SKLogger);
  sub_1000B20FC();
  if (v6)
  {
    sub_1000B2144();
    sub_1000931C0();
    uint64_t v35 = sub_1000B1FA0();
    uint64_t v41 = v37;
    uint64_t v42 = v36;
    swift_task_dealloc(v35);
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    sub_1000AABB0();
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return sub_1000B2064(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v38 = sub_1000B1FE0(v34);
    uint64_t v39 = qword_100328A98;
    swift_bridgeObjectRetain(v38);
    if (v39 != -1) {
      swift_once(&qword_100328A98, sub_1000AEF34);
    }
    uint64_t v40 = qword_10032A6C8;
    *(void *)(v0 + 1096) = qword_10032A6C8;
    return sub_1000B2048((uint64_t)sub_1000ACB6C, v40, 0LL);
  }

uint64_t sub_1000ACF1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1120LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 1016LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 1008LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 1000LL);
  *(void *)(*(void *)v1 + 1128LL) = a1;
  swift_task_dealloc(v2);
  sub_10007B980();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100093420();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000ACFA0()
{
  uint64_t v2 = v0[141];
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = *(unsigned __int8 *)(v0[123] + 80LL);
    sub_1000B1D7C(v2 + ((v3 + 32) & ~v3), v0[121], type metadata accessor for PurchaseIntentInternal);
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 1LL;
  }

  uint64_t v5 = v0[122];
  uint64_t v6 = v0[121];
  sub_10007D0AC(v6, v4, 1LL, v5);
  sub_10007B980();
  if (sub_10007D824(v6, 1LL, v5) == 1)
  {
    sub_100085298(v0[121], (uint64_t *)&unk_10032A280);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v7 = v0[110];
    uint64_t v8 = sub_100079604(v0[111], (uint64_t)qword_10033E1A8);
    sub_1000B224C(v8, v9, type metadata accessor for SKLogger);
    v0[38] = 0LL;
    v0[39] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(77LL);
    uint64_t v10 = v0[39];
    v0[36] = v0[38];
    v0[37] = v10;
    v191._countAndFlagsBits = 0xD00000000000002DLL;
    v191._object = (void *)0x800000010029F440LL;
    sub_1000B2024(v191);
    sub_1000B2350();
    sub_10007BA44();
    sub_100085F08(0xD00000000000001ELL, (uint64_t)" because no intents were found");
    uint64_t v12 = v0[36];
    uint64_t v11 = v0[37];
    os_log_type_t v14 = static os_log_type_t.debug.getter(v13);
    sub_100085EE8(v7);
    sub_100085EE8(v11);
    uint64_t v15 = (os_log_s *)sub_100093B00();
    BOOL v16 = sub_10009396C(v15);
    Swift::String v17 = (void *)v0[110];
    if (v16)
    {
      uint64_t v181 = v12;
      uint64_t v18 = v0[109];
      uint64_t v19 = sub_10007B9FC(22LL);
      uint64_t v190 = sub_10007B9FC(64LL);
      uint64_t v20 = v190;
      *(_DWORD *)uint64_t v19 = 136446466;
      sub_1000B2110();
      v0[40] = v21;
      v0[41] = v22;
      swift_bridgeObjectRetain(v17);
      v23._countAndFlagsBits = v18;
      v23._object = v17;
      String.append(_:)(v23);
      sub_100085F14();
      sub_1000AABA8();
      v0[98] = sub_10008620C(v0[40], v24, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 98, v0 + 99, v19 + 4);
      sub_10007B980();
      sub_10007D974((uint64_t)v17);
      *(_WORD *)(v19 + 12) = 2082;
      sub_10007BA3C();
      v0[95] = sub_100086308(v181, v25, &v190);
      sub_100086194((uint64_t)(v0 + 95), (uint64_t)(v0 + 96));
      sub_100085E64(v11);
      sub_100086038((void *)&_mh_execute_header, v15, v14, "%{public}s%{public}s", (uint8_t *)v19);
      sub_100086030(v20, v26, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v20);
      sub_10007B974(v19);

      sub_10007BA44();
    }

    else
    {
      sub_10007D974(v0[110]);
      sub_100085E64(v11);
    }

    uint64_t v86 = v0[116];
    int v87 = type metadata accessor for SKLogger;
    goto LABEL_40;
  }

  uint64_t v27 = (uint64_t *)v0[124];
  sub_10009BDF8(v0[121], (uint64_t)v27);
  uint64_t v28 = v27[1];
  if (!v28 || (uint64_t v29 = (void *)v0[124], (v30 = v29[7]) == 0))
  {
    sub_1000B231C();
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v65 = v0[124];
    uint64_t v66 = sub_1000B222C();
    uint64_t v67 = sub_100079604(v66, (uint64_t)qword_10033E1A8);
    sub_1000B213C(v67, v68, type metadata accessor for SKLogger);
    v0[48] = 0LL;
    v0[49] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(75LL);
    uint64_t v69 = v0[49];
    v0[46] = v0[48];
    v0[47] = v69;
    v192._object = (void *)0x800000010029F490LL;
    v192._countAndFlagsBits = 0xD00000000000001DLL;
    sub_1000B2024(v192);
    uint64_t v70 = *(void *)(v65 + 16);
    uint64_t v71 = *(void **)(v65 + 24);
    sub_10008618C();
    v193._countAndFlagsBits = v70;
    v193._object = v71;
    sub_1000B2024(v193);
    sub_100085FB4();
    sub_100085F08(0xD00000000000002CLL, (uint64_t)" because the app or product name are missing");
    uint64_t v73 = v0[46];
    uint64_t v72 = v0[47];
    os_log_type_t v75 = static os_log_type_t.error.getter(v74);
    sub_100085EE8(v1);
    sub_100085EE8(v72);
    uint64_t v76 = (os_log_s *)sub_100093C38();
    BOOL v77 = sub_1000B22A4(v76);
    uint64_t v78 = v0[110];
    if (v77)
    {
      uint64_t v187 = v73;
      uint64_t v79 = sub_10007B9FC(22LL);
      uint64_t v80 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v79 = 136446466;
      uint64_t v190 = v80;
      sub_1000B2110();
      v0[50] = v81;
      v0[51] = v82;
      sub_100093528();
      sub_1000B2308();
      sub_100085F14();
      sub_100093460();
      v0[93] = sub_10008620C(v0[50], v83, &v190);
      sub_1000B21CC((uint64_t)(v0 + 93), (uint64_t)(v0 + 94));
      sub_10007B980();
      sub_10007D974(v78);
      *(_WORD *)(v79 + 12) = 2082;
      sub_100085FEC();
      v0[92] = sub_1000B20F4(v187, v84, &v190);
      sub_100086194((uint64_t)(v0 + 92), (uint64_t)(v0 + 93));
      sub_1000B1FD4();
      sub_100086038((void *)&_mh_execute_header, v76, v75, "%{public}s%{public}s", (uint8_t *)v79);
      sub_100086030(v80, v85, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v80);
      sub_10007B974(v79);

      sub_100085EF0();
    }

    else
    {
      sub_10007D974(v0[110]);
      sub_1000B1FD4();
    }

    uint64_t v88 = v0[124];
    uint64_t v89 = v0[117];
    goto LABEL_39;
  }

  uint64_t v185 = (uint64_t)(v0 + 90);
  uint64_t v183 = *v27;
  uint64_t v31 = v29[6];
  uint64_t v32 = v29[2];
  uint64_t v33 = (void *)v29[3];
  sub_10008618C();
  sub_10007BA3C();
  sub_100093528();
  char v34 = sub_1000AF314(v32, v33);
  uint64_t v35 = sub_100093460();
  if ((v34 & 1) == 0)
  {
    sub_1000B231C();
    sub_100085FB4();
    sub_10007BA44();
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v90 = v0[124];
    uint64_t v91 = sub_1000B222C();
    uint64_t v92 = sub_100079604(v91, (uint64_t)qword_10033E1A8);
    sub_1000B213C(v92, v93, type metadata accessor for SKLogger);
    v0[58] = 0LL;
    v0[59] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(64LL);
    uint64_t v94 = v0[59];
    v0[56] = v0[58];
    v0[57] = v94;
    v194._object = (void *)0x800000010029F490LL;
    v194._countAndFlagsBits = 0xD00000000000001DLL;
    sub_1000B2024(v194);
    uint64_t v95 = *(void *)(v90 + 16);
    uint64_t v96 = *(void **)(v90 + 24);
    sub_10008618C();
    v195._countAndFlagsBits = v95;
    v195._object = v96;
    sub_1000B2024(v195);
    sub_100085FB4();
    sub_100085F08(0xD000000000000021LL, (uint64_t)" because the app is not installed");
    uint64_t v98 = v0[56];
    uint64_t v97 = v0[57];
    os_log_type_t v99 = static os_log_type_t.info.getter();
    sub_100085EE8(v32);
    sub_100085EE8(v97);
    uint64_t v100 = (os_log_s *)sub_100093C38();
    os_log_type_t v101 = v99;
    BOOL v102 = os_log_type_enabled(v100, v99);
    uint64_t v103 = v0[110];
    if (v102)
    {
      uint64_t v104 = sub_10007B9FC(22LL);
      uint64_t v105 = sub_10007B9FC(64LL);
      uint64_t v190 = v105;
      *(_DWORD *)uint64_t v104 = 136446466;
      sub_1000B2110();
      v0[60] = v106;
      v0[61] = v107;
      sub_100093528();
      sub_1000B2308();
      sub_100085F14();
      sub_100093460();
      v0[91] = sub_10008620C(v0[60], v108, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 91, v0 + 92, v104 + 4);
      sub_10007B980();
      sub_10007D974(v103);
      *(_WORD *)(v104 + 12) = 2082;
      sub_100085FEC();
      v0[90] = sub_1000B20F4(v98, v109, &v190);
      sub_100086194(v185, (uint64_t)(v0 + 91));
      sub_1000B1FD4();
      sub_100086038((void *)&_mh_execute_header, v100, v101, "%{public}s%{public}s", (uint8_t *)v104);
      sub_100086030(v105, v110, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v105);
      sub_10007B974(v104);

      sub_100085EF0();
    }

    else
    {
      sub_10007D974(v0[110]);
      sub_1000B1FD4();
    }

    uint64_t v88 = v0[124];
    uint64_t v89 = v0[118];
    goto LABEL_39;
  }

  sub_10007CBC0(v35, &qword_10032A7E8, &OBJC_CLASS___NSBundle_ptr);
  sub_1000862B8();
  id v38 = sub_1000AFC0C(v36, v37);
  v0[142] = v38;
  if (!v38)
  {
    sub_100085FB4();
    sub_10007BA44();
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v111 = v0[135];
    uint64_t v112 = sub_1000B222C();
    uint64_t v113 = sub_100079604(v112, (uint64_t)qword_10033E1A8);
    sub_1000B213C(v113, v114, type metadata accessor for SKLogger);
    v0[68] = 0LL;
    v0[69] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(93LL);
    uint64_t v115 = v0[69];
    v0[66] = v0[68];
    v0[67] = v115;
    v196._countAndFlagsBits = 0xD00000000000002DLL;
    v196._object = (void *)0x800000010029F440LL;
    sub_1000B2024(v196);
    sub_10009C32C(v111);
    sub_100085FB4();
    sub_100085F08(0xD00000000000002ELL, (uint64_t)" because the format strings could not be found");
    uint64_t v116 = v0[66];
    uint64_t v117 = v0[67];
    os_log_type_t v119 = static os_log_type_t.default.getter(v118);
    sub_100085EE8(v32);
    sub_100085EE8(v117);
    uint64_t v120 = (os_log_s *)sub_100093C38();
    BOOL v121 = sub_10009396C(v120);
    uint64_t v122 = v0[110];
    if (v121)
    {
      uint64_t v184 = v116;
      uint64_t v123 = v0[109];
      uint64_t v124 = sub_10007B9FC(22LL);
      uint64_t v125 = sub_10007B9FC(64LL);
      uint64_t v190 = v125;
      *(_DWORD *)uint64_t v124 = 136446466;
      v0[70] = 91LL;
      v0[71] = 0xE100000000000000LL;
      sub_1000930E4();
      sub_10009C350(v123);
      sub_100085F14();
      sub_1000930DC();
      v0[89] = sub_10008620C(v0[70], v126, &v190);
      sub_1000B21CC((uint64_t)(v0 + 89), v185);
      sub_10007B980();
      sub_10007D974(v122);
      *(_WORD *)(v124 + 12) = 2082;
      sub_100085FEC();
      v0[88] = sub_1000B20F4(v184, v127, &v190);
      sub_100086194((uint64_t)(v0 + 88), (uint64_t)(v0 + 89));
      sub_1000B1FD4();
      sub_100086038((void *)&_mh_execute_header, v120, v119, "%{public}s%{public}s", (uint8_t *)v124);
      sub_100086030(v125, v128, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v125);
      sub_10007B974(v124);

      sub_100085EF0();
    }

    else
    {
      sub_10007D974(v0[110]);
      sub_1000B1FD4();
    }

    uint64_t v88 = v0[124];
    uint64_t v89 = v0[119];
LABEL_39:
    sub_100085BC4(v89, type metadata accessor for SKLogger);
    int v87 = type metadata accessor for PurchaseIntentInternal;
    uint64_t v86 = v88;
LABEL_40:
    sub_100085BC4(v86, v87);
    sub_1000B20FC();
    if (v160)
    {
      sub_1000B2144();
      sub_1000931C0();
      uint64_t v161 = sub_1000B1FA0();
      uint64_t v188 = v163;
      uint64_t v189 = v162;
      swift_task_dealloc(v161);
      sub_1000939C0();
      sub_1000931C8();
      sub_100093280();
      sub_100093124();
      sub_1000932CC();
      sub_1000932D4();
      sub_1000931DC();
      sub_100093288();
      sub_1000AABB0();
      swift_task_dealloc(v188);
      swift_task_dealloc(v189);
      sub_1000B22BC();
      __asm { BR              X0 }
    }

    uint64_t v165 = sub_1000B1FE0(v159);
    uint64_t v166 = qword_100328A98;
    swift_bridgeObjectRetain(v165);
    if (v166 != -1) {
      swift_once(&qword_100328A98, sub_1000AEF34);
    }
    v0[137] = qword_10032A6C8;
    sub_1000B22BC();
    return swift_task_switch(v167, v168, v169);
  }

  uint64_t v186 = v31;
  sub_1000B231C();
  sub_1000862B8();
  NSString v39 = String._bridgeToObjectiveC()();
  id v40 = sub_1000B21EC();

  uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  uint64_t v182 = v41;

  sub_1000862B8();
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = sub_1000B21EC();

  uint64_t v178 = sub_1000B2314();
  uint64_t v179 = v44;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v45 = v0[124];
  uint64_t v46 = v0[110];
  uint64_t v47 = sub_100079604(v0[111], (uint64_t)qword_10033E1A8);
  v0[143] = v47;
  sub_1000B2364(v47, v48, type metadata accessor for SKLogger);
  v0[78] = 0LL;
  v0[79] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease(v0[79]);
  v0[76] = 0xD000000000000029LL;
  v0[77] = 0x800000010029F5D0LL;
  uint64_t v49 = *(void *)(v45 + 16);
  uint64_t v50 = *(void **)(v45 + 24);
  sub_100093528();
  v51._countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  uint64_t v52 = sub_100093460();
  uint64_t v53 = v0[76];
  unint64_t v54 = v0[77];
  os_log_type_t v55 = static os_log_type_t.default.getter(v52);
  sub_100085EE8(v46);
  sub_100085EE8(v54);
  uint64_t v56 = (os_log_s *)sub_1000935A4();
  BOOL v57 = os_log_type_enabled(v56, v55);
  uint64_t v58 = v0[110];
  if (v57)
  {
    uint64_t v59 = v0[109];
    uint64_t v174 = v53;
    uint64_t v60 = sub_10007B9FC(22LL);
    uint64_t v176 = sub_10007B9FC(64LL);
    uint64_t v190 = v176;
    *(_DWORD *)uint64_t v60 = 136446466;
    sub_1000B2110();
    v0[42] = v61;
    v0[43] = v62;
    sub_100085FEC();
    sub_1000935BC(v59);
    sub_100085F14();
    sub_100085EF0();
    v0[99] = sub_10008620C(v0[42], v63, &v190);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 99, v0 + 100, v60 + 4);
    sub_10007B980();
    sub_10007D974(v58);
    *(_WORD *)(v60 + 12) = 2082;
    sub_100093528();
    v0[100] = sub_10007A488(v174, v54, &v190);
    sub_100086194((uint64_t)(v0 + 100), (uint64_t)(v0 + 101));
    sub_100085E64(v54);
    sub_100086038((void *)&_mh_execute_header, v56, v55, "%{public}s%{public}s", (uint8_t *)v60);
    sub_100086030(v176, v64, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v176);
    sub_10007B974(v60);

    sub_100093460();
  }

  else
  {
    sub_10007D974(v0[110]);
    sub_100085E64(v54);
  }

  uint64_t v171 = v0[132];
  uint64_t v175 = v0[133];
  uint64_t v177 = v0[125];
  uint64_t v129 = (void *)v0[124];
  sub_100085BC4(v0[120], type metadata accessor for SKLogger);
  uint64_t v130 = v129[4];
  uint64_t v170 = v130;
  v0[80] = sub_1000B2314();
  v0[81] = v131;
  sub_1000B220C();
  v132._countAndFlagsBits = 45LL;
  v132._object = (void *)0xE100000000000000LL;
  String.append(_:)(v132);
  sub_1000B2204(v130);
  sub_10009C494();
  uint64_t v172 = v0[81];
  uint64_t v173 = v0[80];
  uint64_t v133 = sub_10007B1FC(&qword_10032A7F0);
  uint64_t v134 = sub_1000AA314(v133, 72LL);
  *(_OWORD *)(v134 + 16) = xmmword_10027A600;
  *(void *)(v134 + 56) = &type metadata for String;
  unint64_t v135 = sub_1000B1DBC();
  *(void *)(v134 + 64) = v135;
  *(void *)(v134 + 32) = v183;
  *(void *)(v134 + 40) = v28;
  String.init(format:_:)(v180, v182, v134);
  sub_1000AABA8();
  uint64_t v136 = sub_1000AA314(v133, 72LL);
  *(_OWORD *)(v136 + 16) = xmmword_10027A600;
  *(void *)(v136 + 56) = &type metadata for String;
  *(void *)(v136 + 64) = v135;
  *(void *)(v136 + 32) = v186;
  *(void *)(v136 + 40) = v30;
  String.init(format:_:)(v178, v179, v136);
  sub_10007B980();
  v0[84] = 0LL;
  v0[85] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(71LL);
  uint64_t v137 = v0[85];
  v0[82] = v0[84];
  v0[83] = v137;
  sub_1000862B8();
  String.append(_:)(v138);
  uint64_t v139 = v129[2];
  uint64_t v140 = (void *)v129[3];
  sub_100093528();
  v141._countAndFlagsBits = v139;
  v141._object = v140;
  String.append(_:)(v141);
  sub_100093460();
  sub_100085F08(0xD000000000000013LL, (uint64_t)"&productIdentifier=");
  sub_1000B220C();
  sub_1000B2204(v170);
  sub_10009C494();
  uint64_t v142 = v0[82];
  uint64_t v143 = v0[83];
  id v144 = [objc_allocWithZone(UNMutableNotificationContent) init];
  v0[144] = v144;
  [v144 setCategoryIdentifier:v171];
  NSString v145 = String._bridgeToObjectiveC()();
  uint64_t v146 = sub_100085FB4();
  sub_1000B2198(v146, "setTitle:");

  NSString v147 = String._bridgeToObjectiveC()();
  uint64_t v148 = sub_10007BA44();
  sub_1000B2198(v148, "setBody:");

  uint64_t v149 = sub_10007B1FC(&qword_10032A800);
  uint64_t v150 = sub_1000AA314(v149, 248LL);
  *(_OWORD *)(v150 + 16) = xmmword_10027ACD0;
  v0[54] = 7107189LL;
  v0[55] = 0xE300000000000000LL;
  sub_1000B2298((uint64_t)(v0 + 54));
  *(void *)(v150 + 96) = &type metadata for String;
  *(void *)(v150 + 72) = v142;
  *(void *)(v150 + 80) = v143;
  v0[74] = 6580594LL;
  v0[75] = 0xE300000000000000LL;
  sub_1000B2298((uint64_t)(v0 + 74));
  *(void *)(v150 + 16_Block_object_dispose(va, 8) = &type metadata for String;
  *(void *)(v150 + 144) = v173;
  *(void *)(v150 + 152) = v172;
  v0[72] = static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
  v0[73] = v151;
  sub_1000B220C();
  sub_1000B2298((uint64_t)(v0 + 72));
  *(void *)(v150 + 240) = v177;
  sub_10009D60C((void *)(v150 + 216));
  static Date.now.getter();
  Dictionary.init(dictionaryLiteral:)( v150,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100085EF0();
  [v144 setUserInfo:isa];

  id v153 = [(id)objc_opt_self(UNNotificationSound) defaultSound];
  sub_1000B2198((uint64_t)v153, "setSound:");

  [v144 setInterruptionLevel:2];
  sub_10007CBC0( (uint64_t)[v144 setShouldBackgroundDefaultAction:1],  &qword_10032A808,  UNNotificationRequest_ptr);
  id v154 = sub_1000AFC6C(v173, v172, v144, 0LL);
  v0[145] = v154;
  id v155 = [(id)objc_opt_self(NotificationManager) sharedManager];
  v0[146] = v155;
  v0[2] = v0;
  v0[3] = sub_1000AE1A4;
  uint64_t v156 = sub_1000AA7D4((uint64_t)(v0 + 2));
  v0[23] = _NSConcreteStackBlock;
  uint64_t v157 = v0 + 23;
  v157[1] = 0x40000000LL;
  v157[2] = sub_1000AFCEC;
  v157[3] = &unk_1002EC258;
  v157[4] = v156;
  [v155 postNotificationRequest:v154 withCompletionHandler:v157];
  sub_1000B22BC();
  return swift_continuation_await();
}

uint64_t sub_1000AE1A4()
{
  *(void *)(v0 + 1176) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AE1E4()
{
  uint64_t v1 = *(void **)(v0 + 1168);
  uint64_t v2 = *(void **)(v0 + 1152);
  uint64_t v3 = *(void **)(v0 + 1136);
  uint64_t v4 = *(void *)(v0 + 992);

  sub_100085BC4(v4, type metadata accessor for PurchaseIntentInternal);
  sub_1000B20FC();
  if (v6)
  {
    sub_1000B2144();
    sub_1000931C0();
    uint64_t v7 = sub_1000B1FA0();
    uint64_t v14 = v9;
    uint64_t v15 = v8;
    swift_task_dealloc(v7);
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    sub_1000AABB0();
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return sub_1000B2064(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v11 = sub_1000B1FE0(v5);
    uint64_t v12 = qword_100328A98;
    swift_bridgeObjectRetain(v11);
    if (v12 != -1) {
      swift_once(&qword_100328A98, sub_1000AEF34);
    }
    uint64_t v13 = qword_10032A6C8;
    *(void *)(v0 + 1096) = qword_10032A6C8;
    return sub_1000B2048((uint64_t)sub_1000ACB6C, v13, 0LL);
  }

uint64_t sub_1000AE2E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  a29 = v32;
  a30 = v33;
  a28 = v30;
  uint64_t v34 = *(void *)(v30 + 1040);
  uint64_t v35 = *(void **)(v30 + 1032);
  swift_willThrow(v33, v36, v37, v38, v39, v40, v41);

  NSString v42 = (void *)_convertErrorToNSError(_:)(v34);
  id v43 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
  sub_1000D67E8(v43, v44, (id)0xCC);
  char v46 = v45;

  sub_100085EF0();
  if ((v46 & 1) == 0)
  {
    uint64_t v52 = (void *)(v30 + 832);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v53 = *(void *)(v30 + 1040);
    uint64_t v54 = sub_1000B222C();
    uint64_t v55 = sub_100079604(v54, (uint64_t)qword_10033E1A8);
    sub_1000B224C(v55, v56, type metadata accessor for SKLogger);
    a17 = 0LL;
    a18 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(71LL);
    unint64_t v57 = a18;
    *(void *)(v30 + 496) = a17;
    *(void *)(v30 + 504) = v57;
    sub_1000862B8();
    v79._countAndFlagsBits = 0xD000000000000039LL;
    sub_1000B2024(v79);
    *(void *)(v30 + 832) = qword_10033E240;
    type metadata accessor for AMSBagKey(0LL);
    sub_1000B22D8(v30 + 832);
    v58._countAndFlagsBits = 0x79656B2067616220LL;
    v58._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v58);
    *(void *)(v30 + 824) = v53;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v59 = sub_1000B22D8(v30 + 824);
    uint64_t v60 = *(void *)(v30 + 504);
    uint64_t v77 = *(void *)(v30 + 496);
    static os_log_type_t.error.getter(v59);
    sub_100085EE8(v31);
    sub_100085EE8(v60);
    uint64_t v61 = (os_log_s *)sub_100093B00();
    BOOL v62 = sub_10009332C(v61);
    uint64_t v63 = *(void *)(v30 + 1040);
    uint64_t v64 = *(void *)(v30 + 1024);
    uint64_t v65 = *(void *)(v30 + 880);
    if (v62)
    {
      uint64_t v75 = *(void *)(v30 + 1040);
      uint64_t v66 = *(void *)(v30 + 872);
      uint64_t v67 = sub_10007B9FC(22LL);
      uint64_t v68 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v67 = 136446466;
      a16 = v68;
      a17 = 91LL;
      a18 = 0xE100000000000000LL;
      sub_1000930E4();
      sub_10009C350(v66);
      sub_100085F14();
      sub_1000930DC();
      *(void *)(v30 + 816) = sub_10008620C(a17, v69, &a16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v30 + 816, v30 + 824, v67 + 4);
      sub_10007D974(v65);
      sub_10007B980();
      *(_WORD *)(v67 + 12) = 2082;
      sub_100085FEC();
      *(void *)(v30 + 80_Block_object_dispose(va, 8) = sub_1000B20F4(v77, v70, &a16);
      sub_100086194(v30 + 808, v30 + 816);
      sub_1000B1FD4();
      sub_100086038( (void *)&_mh_execute_header,  (os_log_s *)(v30 + 832),  (os_log_type_t)&protocol witness table for DefaultStringInterpolation,  "%{public}s%{public}s",  (uint8_t *)v67);
      sub_100086030(v68, v71, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v68);
      sub_10007B974(v67);

      swift_errorRelease(v75);
    }

    else
    {

      sub_10007D974(v60);
      sub_10007D974(v65);
      swift_errorRelease(v63);
    }

    swift_unknownObjectRelease(v64);
    sub_100085EF0();
    sub_100085BC4(*(void *)(v30 + 904), type metadata accessor for SKLogger);
    goto LABEL_13;
  }

  swift_errorRelease(*(void *)(v30 + 1040));
  uint64_t v47 = *(void *)(*(void *)(v30 + 864) + 16LL);
  *(void *)(v30 + 104_Block_object_dispose(va, 8) = v47;
  if (!v47)
  {
    swift_unknownObjectRelease(*(void *)(v30 + 1024));
LABEL_13:
    uint64_t v72 = sub_1000B1FA0();
    uint64_t v76 = v74;
    uint64_t v78 = v73;
    swift_task_dealloc(v72);
    sub_1000939C0();
    sub_1000931C8();
    sub_100093280();
    sub_100093124();
    sub_1000932CC();
    sub_1000932D4();
    sub_1000931DC();
    sub_100093288();
    sub_1000AABB0();
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    return sub_100092F68(*(uint64_t (**)(void))(v30 + 8));
  }

  *(void *)(v30 + 1056) = @"sk-notification-category-purchase-intent";
  uint64_t v48 = sub_1000B2274((uint64_t)@"date");
  uint64_t v49 = qword_100328A98;
  swift_bridgeObjectRetain(v48);
  sub_10009C738();
  if (v49 != -1) {
    swift_once(&qword_100328A98, sub_1000AEF34);
  }
  uint64_t v50 = qword_10032A6C8;
  *(void *)(v30 + 1096) = qword_10032A6C8;
  return sub_1000B20A8((uint64_t)sub_1000ACB6C, v50, 0LL);
}

#error "1000AE900: call analysis failed (funcsize=207)"
uint64_t sub_1000AEA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  void v5[9] = a1;
  char v6 = sub_1000B2290();
  v5[14] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[15] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v5[16] = v8;
  v5[17] = sub_1000B20E8(v8);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AEA74()
{
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  if (qword_100328A90 != -1) {
    swift_once(&qword_100328A90, sub_1000AEEE8);
  }
  *(void *)(v0 + 144) = qword_10032A6C0;
  return sub_100092F20();
}

uint64_t sub_1000AEADC()
{
  *(void *)(v0 + 152) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AEB10()
{
  id v22 = (id)v0[19];
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v20 = v0[12];
  uint64_t v21 = v0[13];
  uint64_t v5 = v0[9];
  uint64_t v19 = v0[10];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v2, v0[11], v3);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 16) & ~v6;
  unint64_t v8 = (v1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_1002EC160, v10 + 16, v6 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v7, v2, v3);
  uint64_t v12 = (void *)(v11 + v8);
  *uint64_t v12 = v5;
  v12[1] = v19;
  *(void *)(v11 + v9) = v0 + 8;
  uint64_t v13 = (void *)(v11 + v10);
  *uint64_t v13 = v20;
  v13[1] = v21;
  uint64_t v14 = sub_1000AA314((uint64_t)&unk_1002EC188, 32LL);
  v0[2] = _NSConcreteStackBlock;
  *(void *)(v14 + 16) = sub_1000B1CC8;
  *(void *)(v14 + 24) = v11;
  v0[6] = sub_1000B1D38;
  v0[7] = v14;
  v0[3] = 1107296256LL;
  v0[4] = sub_100121E00;
  v0[5] = &unk_1002EC1A0;
  uint64_t v15 = _Block_copy(v0 + 2);
  uint64_t v16 = v0[7];
  sub_10007BA3C();
  sub_10009C738();
  swift_retain(v14);
  swift_release(v16);
  [v22 readUsingSession:v15];

  _Block_release(v15);
  LOBYTE(dispatch thunk of HashFunction.finalize()(v0, v5) = sub_1000B22F8(v14, (uint64_t)"", 93LL, 206LL, 20LL);
  uint64_t result = swift_release(v14);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = v0[8];
    swift_release(v11);
    sub_1000939C0();
    return ((uint64_t (*)(uint64_t))v0[1])(v18);
  }

  return result;
}

uint64_t sub_1000AECF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  void v6[4] = a3;
  void v6[5] = a4;
  void v6[2] = a1;
  void v6[3] = a2;
  return sub_1000AA254((uint64_t)sub_1000AED08);
}

uint64_t sub_1000AED08(uint64_t a1)
{
  uint64_t v2 = v1[5];
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = sub_10007CBC0(a1, &qword_10032A7B8, off_1002E5C70);
  id v22 = &type metadata for String;
  uint64_t v20 = v4;
  uint64_t v21 = v3;
  sub_100085FEC();
  id v6 = sub_100121D10(0x695F656C646E7562LL, 0xE900000000000064LL, &v20);
  uint64_t v7 = v6;
  v1[8] = v6;
  if (v2)
  {
    uint64_t v9 = v1[4];
    uint64_t v8 = v1[5];
    id v22 = &type metadata for String;
    uint64_t v20 = v9;
    uint64_t v21 = v8;
    swift_bridgeObjectRetain(v8);
    id v10 = sub_100121D10(0x5F746375646F7270LL, 0xEA00000000006469LL, &v20);
    sub_10007CBC0((uint64_t)v10, &qword_10032A7C8, off_1002E5C78);
    uint64_t v11 = sub_10007B1FC((uint64_t *)&unk_10032C520);
    uint64_t v12 = sub_1000AA314(v11, 96LL);
    *(_OWORD *)(v12 + 16) = xmmword_10027A330;
    *(void *)(v12 + 32) = v7;
    *(void *)(v12 + 8_Block_object_dispose(va, 8) = v5;
    *(void *)(v12 + 56) = v5;
    *(void *)(v12 + 64) = v10;
    id v13 = v7;
    sub_1000B6DE8();
  }

  else
  {
    id v14 = v6;
  }

  uint64_t v15 = (uint64_t)v14;
  v1[9] = v14;
  uint64_t v16 = dword_10032A7C4;
  id v17 = v14;
  uint64_t v18 = (void *)swift_task_alloc(v16);
  v1[10] = v18;
  *uint64_t v18 = v1;
  v18[1] = sub_1000AEE68;
  return sub_1000AF744(v15, v1[6], v1[7]);
}

uint64_t sub_1000AEE68()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 72LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 80LL));

  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AEEB4()
{
  uint64_t v1 = *(void **)(v0 + 64);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000AEEE8()
{
  uint64_t v0 = sub_10007B1FC(&qword_10032A7D0);
  uint64_t v1 = swift_allocObject(v0, 120LL, 15LL);
  swift_defaultActor_initialize(v1);
  uint64_t result = swift_unknownObjectWeakInit(v1 + 112, 0LL);
  qword_10032A6C0 = v1;
  return result;
}

uint64_t sub_1000AEF34()
{
  uint64_t v0 = sub_10007B1FC(&qword_10032A810);
  uint64_t v1 = swift_allocObject(v0, 128LL, 15LL);
  uint64_t result = swift_defaultActor_initialize(v1);
  *(void *)(v1 + swift_weakDestroy(v0 + 112) = 0LL;
  *(void *)(v1 + 120) = 0LL;
  qword_10032A6C8 = v1;
  return result;
}

BOOL sub_1000AEF78(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseIntentInternal(0LL);
  __chkstk_darwin(v4);
  id v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  type metadata accessor for PurchaseIntentEntity();
  sub_1000B1D7C(a2, (uint64_t)v6, type metadata accessor for PurchaseIntentInternal);
  id v7 = sub_1000AF04C(v6, [a1 connection]);
  id v8 = [v7 persistentID];

  return v8 != 0LL;
}

id sub_1000AF04C(uint64_t *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v32 = &type metadata for String;
  uint64_t v33 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  unint64_t v6 = a1[3];
  uint64_t v30 = a1[2];
  unint64_t v31 = v6;
  swift_bridgeObjectRetain(v6);
  sub_10012A9E0((uint64_t)&v30, 0x695F656C646E7562LL, 0xE900000000000064LL);
  uint64_t v8 = a1[4];
  unint64_t v7 = a1[5];
  uint64_t v32 = &type metadata for String;
  uint64_t v30 = v8;
  unint64_t v31 = v7;
  swift_bridgeObjectRetain(v7);
  sub_10012A9E0((uint64_t)&v30, 0x5F746375646F7270LL, 0xEA00000000006469LL);
  uint64_t v9 = type metadata accessor for PurchaseIntentInternal(0LL);
  uint64_t v10 = (char *)a1 + *(int *)(v9 + 32);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v32 = (void *)v11;
  uint64_t v12 = sub_10009D60C(&v30);
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v12, v10, v11);
  sub_10012A9E0((uint64_t)&v30, 0x6D617473656D6974LL, 0xE900000000000070LL);
  unint64_t v13 = a1[1];
  if (v13)
  {
    uint64_t v14 = *a1;
    uint64_t v15 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000LL) == 0) {
      uint64_t v15 = *a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
      uint64_t v32 = &type metadata for String;
      uint64_t v30 = v14;
      unint64_t v31 = v13;
      swift_bridgeObjectRetain(v13);
      sub_10012A9E0((uint64_t)&v30, 0x656D616E5F707061LL, 0xE800000000000000LL);
    }
  }

  unint64_t v16 = a1[7];
  if (v16)
  {
    uint64_t v17 = a1[6];
    uint64_t v18 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000LL) == 0) {
      uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
      uint64_t v32 = &type metadata for String;
      uint64_t v30 = v17;
      unint64_t v31 = v16;
      swift_bridgeObjectRetain(v16);
      sub_10012A9E0((uint64_t)&v30, 0x5F746375646F7270LL, 0xEC000000656D616ELL);
    }
  }

  uint64_t v19 = (uint64_t *)((char *)a1 + *(int *)(v9 + 36));
  unint64_t v20 = v19[1];
  if (v20)
  {
    uint64_t v21 = *v19;
    uint64_t v22 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000LL) == 0) {
      uint64_t v22 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (v22)
    {
      uint64_t v32 = &type metadata for String;
      uint64_t v30 = v21;
      unint64_t v31 = v20;
      swift_bridgeObjectRetain(v20);
      sub_10012A9E0((uint64_t)&v30, 0x617261705F797562LL, 0xEA0000000000736DLL);
    }
  }

  id v23 = objc_allocWithZone(v3);
  uint64_t v24 = v33;
  sub_100121248(v33);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease(v24);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  id v28 = [v23 initWithPropertyValues:isa onConnection:a2];

  sub_100085BC4((uint64_t)a1, type metadata accessor for PurchaseIntentInternal);
  return v28;
}

uint64_t sub_1000AF314(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v4);
  sub_10007CB7C(0LL, (unint64_t *)&unk_10032BAF0, &OBJC_CLASS___LSBundleRecord_ptr);
  swift_bridgeObjectRetain(a2);

  return 1LL;
}

id sub_1000AF644(uint64_t a1)
{
  if (a1)
  {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    v3.super.Class isa = 0LL;
  }

  id v4 = [(id)swift_getObjCClassFromMetadata(v1) optionsWithDictionary:v3.super.isa];

  return v4;
}

uint64_t sub_1000AF6CC(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_100121AC4(v3, a3);
  }
  if (a2) {
    return sub_100129E34(v3, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AF718@<X0>(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = notify_post(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AF744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return sub_1000AA254((uint64_t)sub_1000AF758);
}

uint64_t sub_1000AF758()
{
  if (qword_100328A90 != -1) {
    swift_once(&qword_100328A90, sub_1000AEEE8);
  }
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = qword_10032A6C0;
  return sub_100092F20();
}

uint64_t sub_1000AF7B4()
{
  *(void *)(v0 + 96) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AF7E8()
{
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  id v4 = (void *)v0[8];
  uint64_t v5 = (void *)sub_1000AA314((uint64_t)&unk_1002EC070, 40LL);
  uint64_t v5[2] = v4;
  void v5[3] = v2;
  void v5[4] = v3;
  uint64_t v6 = sub_1000AA314((uint64_t)&unk_1002EC098, 32LL);
  v0[2] = _NSConcreteStackBlock;
  *(void *)(v6 + 16) = sub_1000B1BF0;
  *(void *)(v6 + 24) = v5;
  v0[6] = sub_1000B1C00;
  v0[7] = v6;
  v0[3] = 1107296256LL;
  v0[4] = sub_100121CD4;
  v0[5] = &unk_1002EC0B0;
  unint64_t v7 = _Block_copy(v0 + 2);
  uint64_t v8 = v0[7];
  id v9 = v4;
  sub_10008618C();
  swift_retain(v6);
  swift_release(v8);
  [v1 modifyUsingTransaction:v7];

  _Block_release(v7);
  LOBYTE(sub_100085298(v0, v1) = sub_1000B22F8(v6, (uint64_t)"", 93LL, 84LL, 22LL);
  swift_release(v6);
  uint64_t result = sub_10009C5EC();
  __break(1u);
  return result;
}

uint64_t sub_1000AF928(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PurchaseIntentEntity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v8);
  id v10 = [a1 connection];
  id v11 = [ObjCClassFromMetadata queryOnConnection:v10 predicate:a2];

  uint64_t v12 = (void *)swift_allocObject(&unk_1002EC0E8, 40LL, 7LL);
  v12[2] = a1;
  void v12[3] = a3;
  void v12[4] = a4;
  uint64_t v13 = swift_allocObject(&unk_1002EC110, 32LL, 7LL);
  *(void *)(v13 + 16) = sub_1000B1C38;
  *(void *)(v13 + 24) = v12;
  void v18[4] = sub_1000B1C48;
  uint64_t v19 = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256LL;
  v18[2] = sub_100121DBC;
  v18[3] = &unk_1002EC128;
  uint64_t v14 = _Block_copy(v18);
  uint64_t v15 = v19;
  id v16 = a1;
  swift_bridgeObjectRetain(a4);
  swift_retain(v13);
  swift_release(v15);
  [v11 enumeratePersistentIDsUsingBlock:v14];

  _Block_release(v14);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation(v13, "", 93LL, 86LL, 42LL, 1LL);
  swift_release(v12);
  uint64_t result = swift_release(v13);
  if ((a4 & 1) == 0) {
    return 1LL;
  }
  __break(1u);
  return result;
}

void sub_1000AFACC(uint64_t a1, int a2, int a3, id a4)
{
  id v5 = [a4 connection];
  id v14 = [objc_allocWithZone((Class)type metadata accessor for PurchaseIntentEntity()) initWithPersistentID:a1 onConnection:v5];

  uint64_t v6 = sub_1000B162C();
  uint64_t v8 = v7;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sk-notification-category-purchase-intent");
  uint64_t v17 = v9;
  v10._countAndFlagsBits = 45LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v6;
  v11._object = v8;
  String.append(_:)(v11);
  id v12 = [(id)objc_opt_self(NotificationManager) sharedManager];
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  [v12 removeNotificationRequestWithIdentifier:v13];
  swift_bridgeObjectRelease(v8);

  objc_msgSend(v14, "deleteFromDatabase", v14, v16);
}

id sub_1000AFC0C(uint64_t a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v5 = [(id)swift_getObjCClassFromMetadata(v2) bundleWithIdentifier:v4];

  return v5;
}

id sub_1000AFC6C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v9 = [(id)swift_getObjCClassFromMetadata(v4) requestWithIdentifier:v8 content:a3 trigger:a4];

  return v9;
}

uint64_t sub_1000AFCEC(uint64_t a1, void *a2)
{
  if (a2) {
    return sub_100121AC4(*(void *)(a1 + 32), a2);
  }
  else {
    return j__swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
}

uint64_t sub_1000AFD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a3;
  v4[9] = a4;
  void v4[6] = a1;
  v4[7] = a2;
  v4[10] = sub_100086224();
  v4[11] = sub_100093010();
  v4[12] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000AFD80()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t)(v0 + 4);
  if (v0[7])
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v3 = v0 + 12;
    uint64_t v4 = v1[9];
    uint64_t v5 = sub_100079604(v1[10], (uint64_t)qword_10033E1A8);
    sub_1000B2364(v5, v6, type metadata accessor for SKLogger);
    _StringGuts.grow(_:)(46LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v42 = 0xD00000000000002CLL;
    unint64_t v43 = 0x800000010029F780LL;
    sub_1000B2350();
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    sub_100085EE8(v4);
    sub_100085EE8(0x800000010029F780LL);
    id v9 = (os_log_s *)sub_1000935A4();
    BOOL v10 = sub_10009396C(v9);
    uint64_t v11 = v1[9];
    if (v10)
    {
      uint64_t v12 = v1[8];
      uint64_t v13 = sub_10007B9FC(22LL);
      uint64_t v39 = sub_10007B9FC(64LL);
      uint64_t v41 = v39;
      *(_DWORD *)uint64_t v13 = 136446466;
      sub_1000B2110();
      uint64_t v42 = v14;
      unint64_t v43 = v15;
      sub_100085FEC();
      sub_1000935BC(v12);
      sub_100085F14();
      sub_100085EF0();
      v1[4] = sub_10008620C(v42, v16, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 5, v13 + 4);
      sub_10007B980();
      sub_10007D974(v11);
      *(_WORD *)(v13 + 12) = 2082;
      sub_10007BA3C();
      v1[5] = sub_100086308(0xD00000000000002CLL, v17, &v41);
      sub_100086194((uint64_t)(v1 + 5), (uint64_t)(v1 + 6));
      sub_100085E64(0x800000010029F780LL);
      sub_100086038((void *)&_mh_execute_header, v9, v8, "%{public}s%{public}s", (uint8_t *)v13);
      sub_100086030(v39, v18, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v39);
      sub_10007B974(v13);

      sub_10007BA44();
    }

    else
    {
      sub_10007D974(*(v3 - 3));
      sub_100085E64(0x800000010029F780LL);
    }
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v3 = v0 + 11;
    uint64_t v19 = v1[11];
    uint64_t v20 = v1[9];
    uint64_t v21 = sub_100079604(v1[10], (uint64_t)qword_10033E1A8);
    sub_1000B1D7C(v21, v19, type metadata accessor for SKLogger);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    uint64_t v24 = sub_100085EE8(v20);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    BOOL v26 = sub_1000B22E8(v25);
    uint64_t v27 = v1[9];
    if (v26)
    {
      uint64_t v40 = v2;
      uint64_t v28 = v1[8];
      uint64_t v29 = sub_10007B9FC(22LL);
      uint64_t v30 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v29 = 136446466;
      sub_1000B2110();
      uint64_t v41 = v31;
      uint64_t v42 = v32;
      unint64_t v43 = v33;
      sub_1000B220C();
      sub_1000B2204(v28);
      sub_100085F14();
      sub_10009C494();
      v1[2] = sub_10008620C(v42, v34, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v29 + 4);
      sub_10007B980();
      sub_10007D974(v27);
      *(_WORD *)(v29 + 12) = 2082;
      sub_1000862B8();
      v1[3] = sub_10007A488(0xD00000000000002CLL, v35, &v41);
      sub_100086194((uint64_t)(v1 + 3), v40);
      sub_100086038((void *)&_mh_execute_header, v25, v23, "%{public}s%{public}s", (uint8_t *)v29);
      sub_100086030(v30, v36, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v30);
      sub_10007B974(v29);
    }

    else
    {
      sub_10007D974(*(v3 - 2));
    }
  }

  sub_100085BC4(*v3, type metadata accessor for SKLogger);
  if (qword_100328A98 != -1) {
    swift_once(&qword_100328A98, sub_1000AEF34);
  }
  uint64_t v37 = qword_10032A6C8;
  v1[13] = qword_10032A6C8;
  return swift_task_switch(sub_1000B01C0, v37, 0LL);
}

uint64_t sub_1000B01C0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B0208(void *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_10007CB7C(0LL, &qword_10032A7B8, off_1002E5C70);
  uint64_t v36 = &type metadata for Double;
  unint64_t v33 = COERCE_VOID_(Date.timeIntervalSinceReferenceDate.getter());
  id v14 = sub_1000B04D4(0x6D617473656D6974LL, 0xE900000000000070LL, &v33, 5LL);
  unint64_t v15 = v14;
  if (a4)
  {
    uint64_t v36 = &type metadata for String;
    unint64_t v33 = a3;
    uint64_t v34 = a4;
    swift_bridgeObjectRetain(a4);
    id v16 = sub_100121D10(0x695F656C646E7562LL, 0xE900000000000064LL, &v33);
    sub_10007CB7C(0LL, &qword_10032A7C8, off_1002E5C78);
    uint64_t v17 = sub_10007B1FC((uint64_t *)&unk_10032C520);
    uint64_t v18 = swift_allocObject(v17, 96LL, 7LL);
    *(_OWORD *)(v18 + 16) = xmmword_10027A330;
    *(void *)(v18 + 32) = v15;
    *(void *)(v18 + 8_Block_object_dispose(va, 8) = v13;
    *(void *)(v18 + 56) = v13;
    *(void *)(v18 + 64) = v16;
    id v19 = v15;
    sub_1000B6DE8();
  }

  else
  {
    id v20 = v14;
  }

  uint64_t v21 = v20;
  uint64_t v22 = type metadata accessor for PurchaseIntentEntity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v22);
  id v24 = [a1 connection];
  id v25 = [ObjCClassFromMetadata queryOnConnection:v24 predicate:v21];

  BOOL v26 = (void *)swift_allocObject(&unk_1002EC1D8, 48LL, 7LL);
  v26[2] = a1;
  v26[3] = a5;
  v26[4] = a6;
  v26[5] = a7;
  uint64_t v27 = swift_allocObject(&unk_1002EC200, 32LL, 7LL);
  *(void *)(v27 + 16) = sub_1000B1D6C;
  *(void *)(v27 + 24) = v26;
  uint64_t v37 = sub_1000B1F7C;
  uint64_t v38 = v27;
  unint64_t v33 = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256LL;
  unint64_t v35 = sub_100121DBC;
  uint64_t v36 = &unk_1002EC218;
  uint64_t v28 = _Block_copy(&v33);
  uint64_t v29 = v38;
  id v30 = a1;
  swift_bridgeObjectRetain(a7);
  swift_retain(v27);
  swift_release(v29);
  [v25 enumeratePersistentIDsUsingBlock:v28];

  _Block_release(v28);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v27, "", 93LL, 218LL, 42LL, 1LL);
  swift_release(v26);
  uint64_t result = swift_release(v27);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

id sub_1000B04D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v9 = sub_100085B44(a3, a3[3]);
  uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9);
  id v11 =  [(id)swift_getObjCClassFromMetadata(v4) predicateWithProperty:v8 value:v10 comparisonType:a4];
  swift_unknownObjectRelease(v10);

  sub_10007B1A0(a3);
  return v11;
}

void sub_1000B0578(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for PurchaseIntentInternal(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v13 = [a4 connection];
  id v14 = [objc_allocWithZone((Class)type metadata accessor for PurchaseIntentEntity()) initWithPersistentID:a1 onConnection:v13];

  id v15 = v14;
  sub_1000B09BC(v15, v12);
  sub_1000A888C();
  uint64_t v16 = *(void *)(*a5 + 16);
  sub_1000A88F0(v16);
  uint64_t v17 = *a5;
  *(void *)(v17 + 16) = v16 + 1;
  sub_10009BDF8( (uint64_t)v12,  v17 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
  + *(void *)(v10 + 72) * v16);
}

uint64_t sub_1000B09BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000B15E8();
  uint64_t v10 = v9;
  uint64_t v11 = sub_1000B1600();
  if (v2)
  {

    return swift_bridgeObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    uint64_t v24 = sub_1000B162C();
    uint64_t v25 = v15;
    uint64_t v16 = sub_1000B1710();
    uint64_t v22 = v17;
    uint64_t v23 = v16;
    sub_1000B1730((uint64_t)v7);
    uint64_t v21 = sub_1000B18CC();
    uint64_t v19 = v18;

    return PurchaseIntentInternal.init(appName:bundleID:productID:productName:timestamp:additionalBuyParams:)( v8,  v10,  v13,  v14,  v24,  v25,  v23,  v22,  a2,  (uint64_t)v7,  v21,  v19);
  }

unint64_t sub_1000B0AEC()
{
  return 0xD000000000000014LL;
}

void sub_1000B0B08()
{
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  v0._object = (void *)0x800000010029F240LL;
  String.append(_:)(v0);
  v1._object = (void *)0x800000010029F1C0LL;
  v1._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 665632LL;
  v2._object = (void *)0xE300000000000000LL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x695F656C646E7562LL;
  v3._object = (void *)0xE900000000000064LL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xA2C5458455420LL;
  v4._object = (void *)0xE700000000000000LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x5F746375646F7270LL;
  v5._object = (void *)0xEA00000000006469LL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xA2C5458455420LL;
  v6._object = (void *)0xE700000000000000LL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x656D616E5F707061LL;
  v7._object = (void *)0xE800000000000000LL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xA2C5458455420LL;
  v8._object = (void *)0xE700000000000000LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x5F746375646F7270LL;
  v9._object = (void *)0xEC000000656D616ELL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xA2C5458455420LL;
  v10._object = (void *)0xE700000000000000LL;
  String.append(_:)(v10);
  v11._object = (void *)0xE900000000000070LL;
  v11._countAndFlagsBits = 0x6D617473656D6974LL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xD00000000000002ELL;
  v12._object = (void *)0x800000010029F260LL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x5F746375646F7270LL;
  v13._object = (void *)0xEA00000000006469LL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 8236LL;
  v14._object = (void *)0xE200000000000000LL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x695F656C646E7562LL;
  v15._object = (void *)0xE900000000000064LL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0xD000000000000017LL;
  v16._object = (void *)0x800000010029F290LL;
  String.append(_:)(v16);
  qword_10032A6D0 = 0LL;
  *(void *)algn_10032A6D8 = 0xE000000000000000LL;
}

void sub_1000B0D50(void *a1)
{
  if (qword_100328AA0 != -1) {
    swift_once(&qword_100328AA0, sub_1000B0B08);
  }
  id v2 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v2];
}

void sub_1000B0DC8(void *a1)
{
  id v2 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v2];
}

void sub_1000B0E40(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v2];

  _StringGuts.grow(_:)(44LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  NSString v3 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v3];

  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  id v4 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v4];
}

id sub_1000B0F84()
{
  id v0 = [objc_allocWithZone((Class)SQLiteDatabaseStoreDescriptor) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setSchemaName:v1];

  uint64_t v2 = sub_10007CB7C(0LL, &qword_10032A7A0, off_1002E5C80);
  [v0 setSessionClass:swift_getObjCClassFromMetadata(v2)];
  uint64_t v3 = sub_10007CB7C(0LL, &qword_10032A7A8, off_1002E5C88);
  [v0 setTransactionClass:swift_getObjCClassFromMetadata(v3)];
  return v0;
}

uint64_t sub_1000B1054(void *a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  id v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = v4;
  while (1)
  {
    id v5 = objc_msgSend(a1, "currentSchemaVersion", v27, aBlock, v29, v30);
    if (!v5)
    {
      uint64_t v32 = sub_1000B0D50;
      uint64_t v33 = 0LL;
      uint64_t aBlock = _NSConcreteStackBlock;
      unint64_t v29 = 1107296256LL;
      id v30 = sub_1000DC508;
      uint64_t v31 = &unk_1002EC038;
      Swift::String v6 = _Block_copy(&aBlock);
      swift_release(v33);
      unsigned __int8 v7 = [a1 migrateToVersion:14000 usingBlock:v6];
      goto LABEL_12;
    }

    if (v5 != (id)14000) {
      break;
    }
    uint64_t v32 = sub_1000B0DC8;
    uint64_t v33 = 0LL;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v29 = 1107296256LL;
    id v30 = sub_1000DC508;
    Swift::String v8 = &unk_1002EC010;
LABEL_11:
    uint64_t v31 = v8;
    Swift::String v6 = _Block_copy(&aBlock);
    swift_release(v33);
    unsigned __int8 v7 = [a1 migrateToVersion:17201 usingBlock:v6];
LABEL_12:
    unsigned __int8 v9 = v7;
    _Block_release(v6);
    if ((v9 & 1) == 0) {
      return 0LL;
    }
LABEL_13:
  }

  if (v5 == (id)17200)
  {
    uint64_t v32 = sub_1000B0E40;
    uint64_t v33 = 0LL;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v29 = 1107296256LL;
    id v30 = sub_1000DC508;
    Swift::String v8 = &unk_1002EBFE8;
    goto LABEL_11;
  }

  if (v5 == (id)17201) {
    goto LABEL_13;
  }
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v11 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
  uint64_t v12 = (uint64_t)v27;
  sub_1000B1D7C(v11, (uint64_t)v27, type metadata accessor for SKLogger);
  uint64_t aBlock = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease(v29);
  uint64_t aBlock = (void **)0xD000000000000021LL;
  unint64_t v29 = 0x800000010029F1E0LL;
  uint64_t v34 = (uint64_t)[a1 currentSchemaVersion];
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 540949792LL;
  v15._object = (void *)0xE400000000000000LL;
  String.append(_:)(v15);
  uint64_t v34 = 17201LL;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  uint64_t v17 = v16._object;
  String.append(_:)(v16);
  uint64_t v18 = swift_bridgeObjectRelease(v17);
  uint64_t v20 = (uint64_t)aBlock;
  unint64_t v19 = v29;
  os_log_type_t v21 = static os_log_type_t.error.getter(v18);
  uint64_t v22 = swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = v21;
  if (os_log_type_enabled(v23, v21))
  {
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    BOOL v26 = (void **)swift_slowAlloc(64LL, -1LL);
    uint64_t aBlock = v26;
    *(_DWORD *)uint64_t v25 = 136446466;
    uint64_t v34 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v25 + 4);
    *(_WORD *)(v25 + 12) = 2082;
    swift_bridgeObjectRetain(v19);
    uint64_t v34 = sub_10007A488(v20, v19, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v25 + 14);
    swift_bridgeObjectRelease_n(v19, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s%{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_bridgeObjectRelease(v19);
  }

  else
  {

    swift_bridgeObjectRelease_n(v19, 3LL);
  }

  sub_100085BC4(v12, type metadata accessor for SKLogger);
  return 0LL;
}

id sub_1000B14DC(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for PurchaseIntentStore();
  id v3 = objc_msgSendSuper2(&v5, "initWithDatabase:", a1);

  return v3;
}

id sub_1000B157C()
{
  return sub_1000B1B48((uint64_t (*)(void))type metadata accessor for PurchaseIntentStore);
}

uint64_t type metadata accessor for PurchaseIntentStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitdP33_E619F6C7E2B7960B25E94D759ACE384B19PurchaseIntentStore);
}

uint64_t sub_1000B15E8()
{
  return sub_1000B18E8();
}

uint64_t sub_1000B1600()
{
  return sub_1000B1658(0x695F656C646E7562LL, 0xE900000000000064LL);
}

uint64_t sub_1000B162C()
{
  return sub_1000B1658(0x5F746375646F7270LL, 0xEA00000000006469LL);
}

uint64_t sub_1000B1658(uint64_t a1, uint64_t a2)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 stringValueForProperty:v5];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    return v7;
  }

  else
  {
    unint64_t v9 = sub_1000B1B98();
    uint64_t v10 = swift_allocError(&_s11EntityErrorON, v9, 0LL, 0LL);
    void *v11 = a1;
    v11[1] = a2;
    return swift_willThrow(v10, v11, v12, v13, v14, v15, v16);
  }

uint64_t sub_1000B1710()
{
  return sub_1000B18E8();
}

void sub_1000B1730(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032C410);
  __chkstk_darwin(v4);
  id v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v2 valueForProperty:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v13);
    swift_unknownObjectRelease(v8);
  }

  else
  {
    memset(v13, 0, sizeof(v13));
  }

  sub_1000A9BAC((uint64_t)v13, (uint64_t)v14);
  if (v15)
  {
    uint64_t v9 = type metadata accessor for Date(0LL);
    int v10 = swift_dynamicCast(v6, v14, (char *)&type metadata for Any + 8, v9, 6LL);
    sub_10007D0AC((uint64_t)v6, v10 ^ 1u, 1LL, v9);
    uint64_t v11 = sub_10007D824((uint64_t)v6, 1LL, v9);
    if ((_DWORD)v11 != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(a1, v6, v9);
      return;
    }
  }

  else
  {
    sub_100085298((uint64_t)v14, (uint64_t *)&unk_100328ED0);
    uint64_t v12 = type metadata accessor for Date(0LL);
    uint64_t v11 = sub_10007D0AC((uint64_t)v6, 1LL, 1LL, v12);
  }

  static Date.distantPast.getter(v11);
  sub_100085298((uint64_t)v6, (uint64_t *)&unk_10032C410);
}

uint64_t sub_1000B18CC()
{
  return sub_1000B18E8();
}

uint64_t sub_1000B18E8()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringValueForProperty:v1];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_1000B2314();

  return v3;
}

id sub_1000B195C(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for PurchaseIntentEntity();
  id v6 = objc_msgSendSuper2(&v8, "initWithPropertyValues:onConnection:", isa, a2);

  return v6;
}

id sub_1000B1A50(uint64_t a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for PurchaseIntentEntity();
  id v5 = objc_msgSendSuper2(&v7, "initWithPersistentID:onConnection:", a1, a2);

  return v5;
}

id sub_1000B1AE0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)sub_1000B2380(a1);
  return objc_msgSendSuper2(&v3, "init");
}

id sub_1000B1B3C()
{
  return sub_1000B1B48((uint64_t (*)(void))type metadata accessor for PurchaseIntentEntity);
}

id sub_1000B1B48(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)sub_1000B2380(a1);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for PurchaseIntentEntity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitdP33_E619F6C7E2B7960B25E94D759ACE384B20PurchaseIntentEntity);
}

unint64_t sub_1000B1B98()
{
  unint64_t result = qword_10032A798;
  if (!qword_10032A798)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B688, &_s11EntityErrorON);
    atomic_store(result, (unint64_t *)&qword_10032A798);
  }

  return result;
}

uint64_t sub_1000B1BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B1BE4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000B1BF0(void *a1)
{
  return sub_1000AF928(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000B1C00(uint64_t a1)
{
  return sub_100121CB0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000B1C0C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000B1C38(uint64_t a1, int a2, int a3)
{
}

void sub_1000B1C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000B1C50()
{
  uint64_t v3 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v4);
  sub_1000AA5B8(v0 + v5);
  sub_1000AA5B8(v0 + v6);
  return sub_1000B2150(v0, v6 + 16, v3);
}

uint64_t sub_1000B1CC8(void *a1)
{
  uint64_t v3 = *(void *)(sub_1000B2290() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1000B0208( a1,  v1 + v4,  *(void ***)(v1 + v5),  *(void *)(v1 + v5 + 8),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

void sub_1000B1D38(uint64_t a1)
{
}

uint64_t sub_1000B1D40()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000B1D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000B1D7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_1000221B0();
}

unint64_t sub_1000B1DBC()
{
  unint64_t result = qword_10032A7F8;
  if (!qword_10032A7F8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10032A7F8);
  }

  return result;
}

uint64_t sub_1000B1DF8()
{
  uint64_t v1 = sub_100086310();
  sub_1000B236C();
  uint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v6 = v5 | 7;
  objc_super v7 = (void *)(v0 + v3);
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 8));
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  swift_bridgeObjectRelease(v7[7]);
  objc_super v8 = (char *)v7 + *(int *)(v1 + 32);
  uint64_t v9 = sub_1000B2290();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  sub_1000AA5B8((uint64_t)v7 + *(int *)(v1 + 36));
  return sub_1000B2150(v0, v4, v6);
}

BOOL sub_1000B1E88(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_100086310() - 8) + 80LL);
  return sub_1000AEF78(a1, v1 + ((v3 + 16) & ~v3));
}

void *sub_1000B1EC4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    unint64_t result = a3(&v5);
    if (!v3) {
      return (void *)v5;
    }
  }

  else
  {
    unint64_t result = ((void *(*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&v5 + 4), 0LL, 0LL);
    if (!v3) {
      return (void *)HIDWORD(v5);
    }
  }

  return result;
}

void *sub_1000B1F14@<X0>(_DWORD *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

ValueMetadata *type metadata accessor for PurchaseIntentManager()
{
  return &type metadata for PurchaseIntentManager;
}

uint64_t sub_1000B1FA0()
{
  return *(void *)(v0 + 1016);
}

uint64_t sub_1000B1FD4()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_1000B1FE0@<X0>(uint64_t a1@<X8>)
{
  v1[134] = a1;
  uint64_t v2 = v1[108] + 16 * a1;
  v1[135] = *(void *)(v2 + 32);
  uint64_t result = *(void *)(v2 + 40);
  v1[136] = result;
  return result;
}

void sub_1000B2000()
{
  v0._countAndFlagsBits = 0x63696669746F6E20LL;
  v0._object = (void *)0xED00006E6F697461LL;
  String.append(_:)(v0);
}

void sub_1000B2024(Swift::String a1)
{
}

void sub_1000B202C()
{
  v0._countAndFlagsBits = 0x3A73757461747320LL;
  v0._object = (void *)0xE900000000000020LL;
  String.append(_:)(v0);
}

uint64_t sub_1000B2048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000B2064(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000B2080( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  v20._countAndFlagsBits = v19;
  v20._object = v18;
  String.append(_:)(v20);
}

uint64_t sub_1000B20A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000B20C4(float a1)
{
  float *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000B20E8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1000B20F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(a1, v3, a3);
}

  ;
}

  ;
}

uint64_t sub_1000B211C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_1000B213C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_1000B2144()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 864));
}

uint64_t sub_1000B2150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000B2160( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 424) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, v12 + 432, v13);
}

  ;
}

id sub_1000B2198(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

  ;
}

  ;
}

uint64_t sub_1000B21CC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000B21D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 376) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, a11, a10);
}

id sub_1000B21EC()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 984), v1, 0, 0);
}

void sub_1000B2204(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000B220C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000B2214(uint64_t a1)
{
  return _StringGuts._slowWithCString<A>(_:)(a1, 0LL, v2, v1);
}

uint64_t sub_1000B222C()
{
  return *(void *)(v0 + 888);
}

void sub_1000B2238( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
}

void sub_1000B224C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

void sub_1000B2254()
{
}

void *sub_1000B2268(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr))
{
  return sub_1000B1EC4(a1, a2, a3);
}

uint64_t sub_1000B2274@<X0>(uint64_t a1@<X8>)
{
  v2[133] = a1;
  v2[134] = 0LL;
  v2[135] = *(void *)(v1 + 32);
  uint64_t result = *(void *)(v1 + 40);
  v2[136] = result;
  return result;
}

uint64_t sub_1000B2290()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_1000B2298(uint64_t a1)
{
  return AnyHashable.init<A>(_:)(a1, v2, v1);
}

BOOL sub_1000B22A4(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000B22AC()
{
  *(void *)(v0 + 360) = v2;
  *(void *)(v0 + 36_Block_object_dispose(va, 8) = v1 & 0xFFFFFFFFFFFFFFLL;
  return notify_post((const char *)(v0 + 360));
}

  ;
}

uint64_t sub_1000B22D8(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1);
}

BOOL sub_1000B22E8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_1000B22F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t sub_1000B22F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_isEscapingClosureAtFileLocation(a1, a2, a3, a4, a5, 1LL);
}

void sub_1000B2300(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_1000B2308()
{
  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000B2314()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_1000B231C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 1088));
}

uint64_t sub_1000B2324()
{
  return _StringObject.sharedUTF8.getter(v1, v0);
}

void sub_1000B2330(Swift::String a1)
{
}

void sub_1000B233C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_1000B2348()
{
  return swift_task_alloc(32LL);
}

void sub_1000B2350()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1000B235C(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1);
}

void sub_1000B2364(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

  ;
}

uint64_t sub_1000B2380(uint64_t (*a1)(void))
{
  return a1(0LL);
}

void sub_1000B238C(uint64_t a1)
{
}

void sub_1000B23A4(uint64_t a1)
{
}

void sub_1000B23BC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, void *a4)
{
  id v6 = (id)a2();
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *a3 = v7;
  *a4 = v9;
}

id sub_1000B2414(uint64_t a1)
{
  Swift::String v2 = v1;
  unint64_t v3 = 0x800000010029F840LL;
  uint64_t v4 = 1LL;
  uint64_t v5 = 500LL;
  switch(a1)
  {
    case 1LL:
      goto LABEL_7;
    case 2LL:
      uint64_t v5 = 907LL;
      goto LABEL_7;
    case 3LL:
      uint64_t v5 = 511LL;
      goto LABEL_7;
    case 4LL:
      uint64_t v5 = 537LL;
      goto LABEL_7;
    case 5LL:
      uint64_t v5 = 1054LL;
      goto LABEL_7;
    case 6LL:
      uint64_t v5 = 505LL;
LABEL_7:
      type metadata accessor for ASDError(0LL);
      uint64_t v7 = v6;
      uint64_t v17 = v5;
      unint64_t v8 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v9 = sub_1000B25DC();
      _BridgedStoredNSError.init(_:userInfo:)(&v17, v8, v7, v9);
      int v10 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
      unint64_t v3 = v11;
      uint64_t v18 = v10;
      uint64_t v4 = _BridgedStoredNSError.errorCode.getter(v7, v9);

      goto LABEL_8;
    case 15LL:
      goto LABEL_8;
    case 16LL:
      static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
      unint64_t v3 = v16;
      uint64_t v4 = 500LL;
LABEL_8:
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v3);
      id v13 = [v2 initWithDomain:v12 code:v4 userInfo:0];

      break;
    default:
      uint64_t ObjectType = swift_getObjectType(v2);
      swift_deallocPartialClassInstance(v2, ObjectType, 8LL, 7LL);
      id v13 = 0LL;
      break;
  }

  return v13;
}

unint64_t sub_1000B25DC()
{
  unint64_t result = qword_100328DE8;
  if (!qword_100328DE8)
  {
    type metadata accessor for ASDError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10027950C, v1);
    atomic_store(result, (unint64_t *)&qword_100328DE8);
  }

  return result;
}

void sub_1000B2640()
{
}

id sub_1000B2670(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v5 = sub_1000B4134();
  a3();

  uint64_t v6 = sub_100086318();
  sub_1000B4164(v6);
  if (!v8)
  {
    sub_1000B424C(v7);
    sub_1000B414C();
  }

  return v5;
}

void sub_1000B26E4()
{
  uint64_t v4 = v0;
  v50[0] = v5;
  type metadata accessor for SKLogger(0LL);
  sub_100085E74();
  __chkstk_darwin(v6);
  sub_1000B41B8();
  __chkstk_darwin(v7);
  unint64_t v9 = (os_log_s *)((char *)v50 - v8);
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v10);
  sub_1000B41D4();
  __chkstk_darwin(v11);
  id v13 = (char *)v50 - v12;
  uint64_t v14 = sub_100086318();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_1000875A4();
  sub_1000B2A30(v3);
  sub_1000B419C(v3);
  if (v16)
  {
    sub_1000B3FC4(v3);
    sub_1000862D0((uint64_t)v13, 1LL);
  }

  else
  {
    URL.appendingPathComponent(_:)(0xD000000000000015LL, 0x800000010029F960LL);
    sub_1000B423C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
    sub_1000862D0((uint64_t)v13, 0LL);
    sub_1000B419C((uint64_t)v13);
    if (!v16)
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v27(v1, v13, v14);
      URL._bridgeToObjectiveC()(v28);
      id v30 = v29;
      id v51 = 0LL;
      unsigned int v31 = [v4 createDirectoryAtURL:v29 withIntermediateDirectories:1 attributes:0 error:&v51];

      id v32 = v51;
      if (v31)
      {
        id v33 = v51;
        uint64_t v24 = v50[0];
      }

      else
      {
        id v34 = v51;
        uint64_t v35 = _convertNSErrorToError(_:)(v32);

        uint64_t v43 = swift_willThrow(v36, v37, v38, v39, v40, v41, v42);
        uint64_t v24 = v50[0];
        if (qword_100328B40 != -1) {
          uint64_t v43 = swift_once(&qword_100328B40, sub_1000F4208);
        }
        uint64_t v44 = sub_1000B4228(v43, (uint64_t)qword_10033E1A8);
        uint64_t v45 = sub_10007961C(v44, (uint64_t)v2);
        Logger.logObject.getter(v45);
        sub_1000B41F0();
        sub_1000B4218();
        uint64_t v47 = v46(v2);
        os_log_type_t v48 = static os_log_type_t.error.getter(v47);
        if (sub_1000B4208(v48))
        {
          uint64_t v49 = (uint8_t *)sub_1000B41FC();
          *(_WORD *)uint64_t v49 = 0;
          sub_1000B4244( (void *)&_mh_execute_header,  v2,  (os_log_type_t)v35,  "Unable to create StoreKit persistant data directory",  v49);
          sub_10007B974((uint64_t)v49);
        }

        swift_errorRelease(v35);
      }

      v27((char *)v24, v1, v14);
      uint64_t v26 = 0LL;
      goto LABEL_19;
    }
  }

  uint64_t v17 = sub_1000B3FC4((uint64_t)v13);
  if (qword_100328B40 != -1) {
    uint64_t v17 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v18 = sub_1000B4228(v17, (uint64_t)qword_10033E1A8);
  uint64_t v19 = sub_10007961C(v18, (uint64_t)v9);
  Logger.logObject.getter(v19);
  sub_1000B41F0();
  sub_1000B4218();
  uint64_t v21 = v20(v9);
  os_log_type_t v22 = static os_log_type_t.fault.getter(v21);
  BOOL v23 = sub_1000B4208(v22);
  uint64_t v24 = v50[0];
  if (v23)
  {
    uint64_t v25 = (uint8_t *)sub_1000B41FC();
    *(_WORD *)uint64_t v25 = 0;
    sub_1000B4244( (void *)&_mh_execute_header,  v9,  (os_log_type_t)v9,  "Unable to determine path for StoreKit persistant data directory",  v25);
    sub_10007B974((uint64_t)v25);
  }

  uint64_t v26 = 1LL;
LABEL_19:
  sub_1000862D0(v24, v26);
  sub_100085E98();
}

uint64_t sub_1000B2A30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v120 = a1;
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v142 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v133 = (char *)&v118 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = type metadata accessor for SKLogger(0LL);
  uint64_t v3 = __chkstk_darwin(v136);
  uint64_t v132 = (uint64_t)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t inited = (char *)&v118 - v5;
  uint64_t v7 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v121 = *(void *)(v7 - 8);
  uint64_t v122 = v7;
  __chkstk_darwin(v7);
  uint64_t v123 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v140 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v134 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v118 - v13;
  __chkstk_darwin(v12);
  Swift::String v138 = (char *)&v118 - v15;
  uint64_t v16 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  os_log_type_t v119 = (char *)&v118 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v118 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v118 - v25;
  if (qword_100328AB8 != -1) {
LABEL_51:
  }
    swift_once(&qword_100328AB8, sub_1000B4004);
  uint64_t v27 = sub_100079604(v16, (uint64_t)qword_10032A830);
  swift_beginAccess(v27, v152, 0LL, 0LL);
  sub_1000B4064(v27, (uint64_t)v26);
  int v28 = sub_10007D824((uint64_t)v26, 1LL, v9);
  sub_1000B3FC4((uint64_t)v26);
  if (v28 == 1)
  {
    unint64_t v135 = (char *)v27;
    uint64_t v16 = (uint64_t)[(id)objc_opt_self(NSFileManager) defaultManager];
    uint64_t v26 = (char *)String._bridgeToObjectiveC()();
    id v29 = [(id)v16 containerURLForSecurityApplicationGroupIdentifier:v26];

    if (v29)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

      uint64_t v19 = *(char **)(v140 + 32);
      ((void (*)(char *, char *, uint64_t))v19)(v24, v14, v9);
      sub_10007D0AC((uint64_t)v24, 0LL, 1LL, v9);
      if (sub_10007D824((uint64_t)v24, 1LL, v9) != 1)
      {
        uint64_t v118 = v19;
        ((void (*)(char *, char *, uint64_t))v19)(v138, v24, v9);
        uint64_t v30 = sub_10007B1FC(&qword_10032A848);
        uint64_t inited = (char *)swift_initStackObject(v30, v151);
        *((_OWORD *)inited + 1) = xmmword_10027ACD0;
        *((void *)inited + 4) = 0x746E656D75636F44LL;
        *((void *)inited + 5) = 0xE900000000000073LL;
        *((void *)inited + 6) = NSFileProtectionNone;
        inited[56] = 1;
        *((void *)inited + _Block_object_dispose(va, 8) = 0x7972617262694CLL;
        *((void *)inited + 9) = 0xE700000000000000LL;
        *((void *)inited + 10) = NSFileProtectionNone;
        inited[88] = 0;
        strcpy(inited + 96, "Library/Caches");
        inited[111] = -18;
        *((void *)inited + 14) = NSFileProtectionNone;
        inited[120] = 1;
        unsigned int v31 = NSFileProtectionNone;
        uint64_t v32 = sub_10007B1FC(&qword_10032A850);
        uint64_t v33 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v32,  &protocol witness table for String);
        int64_t v34 = 0LL;
        uint64_t v139 = 0LL;
        uint64_t v35 = *(void *)(v33 + 64);
        uint64_t v129 = v33 + 64;
        uint64_t v131 = v33;
        uint64_t v36 = 1LL << *(_BYTE *)(v33 + 32);
        uint64_t v37 = -1LL;
        if (v36 < 64) {
          uint64_t v37 = ~(-1LL << v36);
        }
        unint64_t v38 = v37 & v35;
        int64_t v130 = (unint64_t)(v36 + 63) >> 6;
        NSFileAttributeKey v127 = NSFileProtectionKey;
        *((void *)&v39 + 1) = 2LL;
        __int128 v126 = xmmword_10027A600;
        uint64_t v125 = (char *)&type metadata for Any + 8;
        *(void *)&__int128 v39 = 136446466LL;
        __int128 v124 = v39;
        uint64_t v141 = v9;
        uint64_t v40 = v134;
        while (1)
        {
          uint64_t v14 = v135;
          if (v38)
          {
            uint64_t v144 = (v38 - 1) & v38;
            int64_t v145 = v34;
            unint64_t v41 = __clz(__rbit64(v38)) | (v34 << 6);
          }

          else
          {
            BOOL v42 = __OFADD__(v34, 1LL);
            int64_t v43 = v34 + 1;
            if (v42)
            {
              __break(1u);
              goto LABEL_51;
            }

            if (v43 >= v130) {
              goto LABEL_47;
            }
            unint64_t v44 = *(void *)(v129 + 8 * v43);
            if (!v44)
            {
              int64_t v45 = v43 + 1;
              if (v43 + 1 >= v130) {
                goto LABEL_47;
              }
              unint64_t v44 = *(void *)(v129 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v43 + 2;
                if (v43 + 2 >= v130) {
                  goto LABEL_47;
                }
                unint64_t v44 = *(void *)(v129 + 8 * v45);
                if (!v44)
                {
                  int64_t v45 = v43 + 3;
                  if (v43 + 3 >= v130)
                  {
LABEL_47:
                    swift_release(v131);
                    uint64_t v116 = (uint64_t)v119;
                    uint64_t v117 = v138;
                    (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v119, v138, v9);
                    sub_10007D0AC(v116, 0LL, 1LL, v9);
                    swift_beginAccess(v14, v148, 33LL, 0LL);
                    sub_1000B40AC(v116, (uint64_t)v14);
                    swift_endAccess(v148);
                    uint64_t v107 = v120;
                    ((void (*)(uint64_t, char *, uint64_t))v118)(v120, v117, v9);
                    goto LABEL_48;
                  }

                  unint64_t v44 = *(void *)(v129 + 8 * v45);
                  if (!v44)
                  {
                    while (1)
                    {
                      int64_t v43 = v45 + 1;
                      if (__OFADD__(v45, 1LL)) {
                        break;
                      }
                      if (v43 >= v130) {
                        goto LABEL_47;
                      }
                      unint64_t v44 = *(void *)(v129 + 8 * v43);
                      ++v45;
                      if (v44) {
                        goto LABEL_20;
                      }
                    }

                    __break(1u);
LABEL_53:
                    swift_once(&qword_100328B40, sub_1000F4208);
LABEL_44:
                    uint64_t v108 = sub_100079604(v136, (uint64_t)qword_10033E1A8);
                    uint64_t v109 = sub_10007961C(v108, (uint64_t)inited);
                    uint64_t v110 = (os_log_s *)Logger.logObject.getter(v109);
                    uint64_t v111 = (*(uint64_t (**)(char *, uint64_t))(v142 + 8))(inited, v1);
                    os_log_type_t v112 = static os_log_type_t.fault.getter(v111);
                    if (os_log_type_enabled(v110, v112))
                    {
                      uint64_t v113 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                      *(_WORD *)uint64_t v113 = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v110,  v112,  "Unable to determine StoreKit container URL",  v113,  2u);
                      swift_slowDealloc(v113, -1LL, -1LL);
                    }

                    uint64_t v114 = v120;
                    uint64_t v115 = 1LL;
                    return sub_10007D0AC(v114, v115, 1LL, v9);
                  }
                }
              }

              int64_t v43 = v45;
            }

LABEL_20:
            uint64_t v144 = (v44 - 1) & v44;
            int64_t v145 = v43;
            unint64_t v41 = __clz(__rbit64(v44)) + (v43 << 6);
          }

          char v46 = (uint64_t *)(*(void *)(v131 + 48) + 16 * v41);
          uint64_t v47 = *v46;
          uint64_t v48 = v46[1];
          uint64_t v49 = *(void *)(v131 + 56) + 16 * v41;
          uint64_t v50 = *(void **)v49;
          uint64_t v16 = *(unsigned __int8 *)(v49 + 8);
          swift_bridgeObjectRetain(v48);
          id v51 = v50;
          URL.appendingPathComponent(_:)(v47, v48);
          swift_bridgeObjectRelease(v48);
          swift_beginAccess(v40, &v150, 0LL, 0LL);
          URL._bridgeToObjectiveC()(v52);
          uint64_t v54 = v53;
          v148[0] = 0LL;
          id v55 = v137;
          LODWORD(v4_Block_object_dispose(va, 8) = [v137 createDirectoryAtURL:v53 withIntermediateDirectories:1 attributes:0 error:v148];

          id v56 = v148[0];
          id v143 = v51;
          if (!(_DWORD)v48) {
            break;
          }
          unint64_t v57 = v51;
          uint64_t v26 = (char *)v1;
          uint64_t v58 = sub_10007B1FC(&qword_10032A860);
          uint64_t v59 = swift_initStackObject(v58, &v149);
          *(_OWORD *)(v59 + 16) = v126;
          NSFileAttributeKey v60 = v127;
          *(void *)(v59 + 32) = v127;
          type metadata accessor for FileProtectionType(0LL);
          *(void *)(v59 + 64) = v61;
          *(void *)(v59 + 40) = v57;
          type metadata accessor for FileAttributeKey(0LL);
          uint64_t v63 = v62;
          uint64_t v64 = sub_10009D5CC( &qword_100329048,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10027A174);
          id v128 = v57;
          uint64_t v65 = v60;
          uint64_t v66 = Dictionary.init(dictionaryLiteral:)(v59, v63, v125, v64);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          uint64_t v68 = swift_bridgeObjectRelease(v66);
          URL.path.getter(v68);
          uint64_t v70 = v69;
          NSString v71 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v70);
          v148[0] = 0LL;
          LODWORD(v57) = [v55 setAttributes:isa ofItemAtPath:v71 error:v148];

          id v72 = v148[0];
          if (!(_DWORD)v57)
          {
            uint64_t v83 = v72;
            uint64_t v16 = _convertNSErrorToError(_:)(v72);

            uint64_t v24 = (char *)v16;
            swift_willThrow(v84, v85, v86, v87, v88, v89, v90);
            uint64_t v139 = 0LL;
            uint64_t v9 = v141;
            uint64_t v1 = (uint64_t)v26;
            goto LABEL_27;
          }

          uint64_t v19 = v40;
          uint64_t v73 = v123;
          URLResourceValues.init()(v72);
          URLResourceValues.isExcludedFromBackup.setter(v16);
          swift_beginAccess(v19, v148, 33LL, 0LL);
          uint64_t inited = v19;
          uint64_t v24 = v139;
          URL.setResourceValues(_:)(v73);
          uint64_t v1 = (uint64_t)v26;
          uint64_t v74 = v142;
          if (!v24)
          {
            uint64_t v139 = 0LL;
            swift_endAccess(v148);

            (*(void (**)(char *, uint64_t))(v121 + 8))(v73, v122);
            uint64_t v9 = v141;
            (*(void (**)(char *, uint64_t))(v140 + 8))(v19, v141);
            uint64_t v40 = v19;
            goto LABEL_34;
          }

          swift_endAccess(v148);
          (*(void (**)(char *, uint64_t))(v121 + 8))(v73, v122);
          uint64_t v16 = (uint64_t)v24;
          uint64_t v139 = 0LL;
          uint64_t v9 = v141;
LABEL_28:
          uint64_t v91 = v133;
          if (qword_100328B40 != -1) {
            swift_once(&qword_100328B40, sub_1000F4208);
          }
          uint64_t v92 = sub_100079604(v136, (uint64_t)qword_10033E1A8);
          uint64_t v93 = v132;
          sub_10007961C(v92, v132);
          (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v91, v93, v1);
          swift_errorRetain(v16);
          uint64_t v94 = swift_errorRetain(v16);
          uint64_t inited = v91;
          uint64_t v19 = (char *)Logger.logObject.getter(v94);
          uint64_t v26 = (char *)v1;
          os_log_type_t v95 = static os_log_type_t.fault.getter(v19);
          if (os_log_type_enabled((os_log_t)v19, v95))
          {
            uint64_t v96 = swift_slowAlloc(22LL, -1LL);
            uint64_t v97 = (void *)swift_slowAlloc(64LL, -1LL);
            v148[0] = v97;
            *(_DWORD *)uint64_t v96 = v124;
            uint64_t v98 = sub_10009D5CC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
            uint64_t v24 = v134;
            uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v141, v98);
            unint64_t v101 = v100;
            *(void *)(v96 + 4) = sub_10007A488(v99, v100, (uint64_t *)v148);
            swift_bridgeObjectRelease(v101);
            *(_WORD *)(v96 + 12) = 2082;
            swift_getErrorValue(v16, &v147, v146);
            uint64_t v102 = Error.localizedDescription.getter(v146[1], v146[2]);
            uint64_t inited = (char *)v103;
            *(void *)(v96 + 14) = sub_10007A488(v102, v103, (uint64_t *)v148);
            swift_bridgeObjectRelease(inited);
            swift_errorRelease(v16);
            swift_errorRelease(v16);
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  v95,  "Failed to create directory %{public}s and set attributes: %{public}s",  (uint8_t *)v96,  0x16u);
            swift_arrayDestroy(v97, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v97, -1LL, -1LL);
            uint64_t v104 = v96;
            uint64_t v9 = v141;
            swift_slowDealloc(v104, -1LL, -1LL);

            swift_errorRelease(v16);
            uint64_t v105 = v91;
            uint64_t v40 = v24;
            (*(void (**)(char *, char *))(v142 + 8))(v105, v26);
            (*(void (**)(char *, uint64_t))(v140 + 8))(v24, v9);
          }

          else
          {

            swift_errorRelease(v16);
            swift_errorRelease(v16);
            swift_errorRelease(v16);

            (*(void (**)(char *, char *))(v74 + 8))(v91, v26);
            uint64_t v40 = v134;
            (*(void (**)(char *, uint64_t))(v140 + 8))(v134, v9);
          }

          uint64_t v1 = (uint64_t)v26;
LABEL_34:
          unint64_t v38 = v144;
          int64_t v34 = v145;
        }

        uint64_t v75 = v56;
        uint64_t v16 = _convertNSErrorToError(_:)(v56);

        uint64_t v24 = (char *)v16;
        swift_willThrow(v76, v77, v78, v79, v80, v81, v82);
        uint64_t v139 = 0LL;
LABEL_27:
        uint64_t v74 = v142;
        goto LABEL_28;
      }
    }

    else
    {
      sub_10007D0AC((uint64_t)v24, 1LL, 1LL, v9);
    }

    sub_1000B3FC4((uint64_t)v24);
    if (qword_100328B40 != -1) {
      goto LABEL_53;
    }
    goto LABEL_44;
  }

  sub_1000B4064(v27, (uint64_t)v19);
  uint64_t result = sub_10007D824((uint64_t)v19, 1LL, v9);
  if ((_DWORD)result != 1)
  {
    uint64_t v107 = v120;
    (*(void (**)(uint64_t, char *, uint64_t))(v140 + 32))(v120, v19, v9);
LABEL_48:
    uint64_t v114 = v107;
    uint64_t v115 = 0LL;
    return sub_10007D0AC(v114, v115, 1LL, v9);
  }

  __break(1u);
  return result;
}

    uint64_t v11 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    uint64_t v86 = v17;
  }

  int64_t v34 = sub_100132130(v22, v9);
  if ((v33 & 1) == (v35 & 1))
  {
    uint64_t v32 = v34;
    goto LABEL_25;
  }

  _Block_release(v78);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  __break(1u);
  return result;
}

    v8[(v25 >> 6) + 8] |= 1LL << v25;
    sub_10009BEC0((uint64_t)v56, v8[6] + 40 * v25);
    sub_1000853B0(v53, (_OWORD *)(v8[7] + 32 * v25));
    uint64_t v36 = v8[2];
    uint64_t v37 = __OFADD__(v36, 1LL);
    unint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_40;
    }
    _OWORD v8[2] = v38;
    goto LABEL_5;
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

id sub_1000B36E8()
{
  id v1 = sub_1000B4134();
  sub_1000B3788();

  uint64_t v2 = sub_100086318();
  sub_1000B4164(v2);
  if (!v4)
  {
    sub_1000B424C(v3);
    sub_1000B414C();
  }

  return sub_1000B418C(v1);
}

void sub_1000B376C()
{
}

void sub_1000B3788()
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  sub_1000B4230();
  sub_1000B4260();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v27 - v18;
  id v20 = [v10 *v9];
  if (v20)
  {
    uint64_t v21 = v20;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    uint64_t v22 = sub_100086318();
    uint64_t v23 = (uint64_t)v17;
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v22 = type metadata accessor for URL(0LL);
    uint64_t v23 = (uint64_t)v17;
    uint64_t v24 = 1LL;
  }

  sub_1000B4254(v23, v24);
  sub_10008521C((uint64_t)v17, (uint64_t)v19);
  sub_100086318();
  if (sub_10007D824((uint64_t)v19, 1LL, v22) == 1)
  {
    sub_1000B3FC4((uint64_t)v19);
    uint64_t v25 = 1LL;
  }

  else
  {
    uint64_t v27 = v7;
    uint64_t v28 = v5;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))( v13,  enum case for URL.DirectoryHint.isDirectory(_:),  v2);
    unint64_t v26 = sub_1000A9B34();
    URL.appending<A>(component:directoryHint:)(&v27, v13, &type metadata for String, v26);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v13, v2);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8LL))(v19, v22);
    uint64_t v25 = 0LL;
  }

  sub_1000B4254(v0, v25);
  sub_100085E98();
}

#error "1000B39C4: call analysis failed (funcsize=34)"
void sub_1000B39F0( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  sub_1000B3C58( (uint64_t)sub_1000B2A30,  0x2F7972617262694CLL,  0xEE00736568636143LL,  (uint64_t)"Unable to determine path for StoreKit caches directory",  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20);
}

void sub_1000B3A30()
{
  uint64_t v6 = v1;
  uint64_t v7 = sub_1000B4230();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000875A4();
  sub_100086318();
  sub_1000B4260();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v12);
  sub_1000B41B8();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v21 - v14;
  id v16 = objc_msgSend(v6, "sk_cachedDataURL");
  if (v16)
  {
    uint64_t v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = 1LL;
  }

  uint64_t v19 = 1LL;
  sub_10007D0AC((uint64_t)v15, v18, 1LL, v2);
  sub_1000B4064((uint64_t)v15, v4);
  if (sub_10007D824(v4, 1LL, v2) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v11, v4, v2);
    strcpy((char *)&v21, "storeUser.db");
    BYTE13(v21) = 0;
    HIWORD(v21) = -5120;
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))( v3,  enum case for URL.DirectoryHint.notDirectory(_:),  v7);
    unint64_t v20 = sub_1000A9B34();
    URL.appending<A>(component:directoryHint:)(&v21, v3, &type metadata for String, v20);
    sub_1000B423C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    swift_bridgeObjectRelease(*((void *)&v21 + 1));
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v2);
    uint64_t v19 = 0LL;
  }

  sub_10007D0AC(v0, v19, 1LL, v2);
  sub_1000B3FC4((uint64_t)v15);
  sub_100085E98();
}

void sub_1000B3C2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_1000B3C58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  unsigned int v31 = v30;
  uint64_t v33 = v32;
  type metadata accessor for SKLogger(0LL);
  sub_100085E74();
  __chkstk_darwin(v34);
  sub_1000875A4();
  sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_100085E74();
  __chkstk_darwin(v35);
  sub_1000B41D4();
  uint64_t v37 = __chkstk_darwin(v36);
  __int128 v39 = (char *)&a9 - v38;
  v31(v37);
  uint64_t v40 = sub_100086318();
  sub_1000B419C(v21);
  if (v42)
  {
    sub_1000B3FC4(v21);
    sub_1000862D0((uint64_t)v39, 1LL);
  }

  else
  {
    URL.appendingPathComponent(_:)(v29, v27);
    uint64_t v41 = *(void *)(v40 - 8);
    sub_1000B423C(v21, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
    sub_1000862D0((uint64_t)v39, 0LL);
    sub_1000B419C((uint64_t)v39);
    if (!v42)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v33, v39, v40);
      uint64_t v51 = v33;
      uint64_t v52 = 0LL;
      goto LABEL_11;
    }
  }

  uint64_t v43 = sub_1000B3FC4((uint64_t)v39);
  if (qword_100328B40 != -1) {
    uint64_t v43 = swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v44 = sub_1000B4228(v43, (uint64_t)qword_10033E1A8);
  uint64_t v45 = sub_10007961C(v44, v20);
  char v46 = (os_log_s *)v20;
  Logger.logObject.getter(v45);
  sub_1000B41F0();
  sub_1000B4218();
  uint64_t v48 = v47(v20);
  os_log_type_t v49 = static os_log_type_t.fault.getter(v48);
  if (os_log_type_enabled(v46, v49))
  {
    uint64_t v50 = (uint8_t *)sub_1000B41FC();
    *(_WORD *)uint64_t v50 = 0;
    sub_1000B4244((void *)&_mh_execute_header, v46, v49, v25, v50);
    sub_10007B974((uint64_t)v50);
  }

  uint64_t v51 = v33;
  uint64_t v52 = 1LL;
LABEL_11:
  sub_1000862D0(v51, v52);
  sub_100085E98();
}

void *sub_1000B3E28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)CPSharedResourcesDirectory(v3);
  if (result)
  {
    id v7 = result;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v17);

    uint64_t v8 = v18;
    if (v18)
    {
      URL.init(string:)(v17, v18);
      return (void *)swift_bridgeObjectRelease(v8);
    }

    else
    {
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v9 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
      uint64_t v10 = sub_10007961C(v9, (uint64_t)v5);
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
      uint64_t v12 = type metadata accessor for Logger(0LL);
      uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8LL))(v5, v12);
      os_log_type_t v14 = static os_log_type_t.fault.getter(v13);
      if (os_log_type_enabled(v11, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  v14,  "Unable to determine path for shared resources directory",  v15,  2u);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      uint64_t v16 = type metadata accessor for URL(0LL);
      return (void *)sub_10007D0AC(a1, 1LL, 1LL, v16);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000B3FC4(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000B4004()
{
  uint64_t v0 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  sub_1000B40F4(v0, qword_10032A830);
  uint64_t v1 = sub_100079604(v0, (uint64_t)qword_10032A830);
  uint64_t v2 = type metadata accessor for URL(0LL);
  return sub_10007D0AC(v1, 1LL, 1LL, v2);
}

uint64_t sub_1000B4064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B40AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000B40F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

id sub_1000B4134()
{
  return v0;
}

uint64_t sub_1000B414C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_1000B4164(uint64_t a1)
{
  return sub_10007D824(v1, 1LL, a1);
}

id sub_1000B418C(id a1)
{
  return a1;
}

uint64_t sub_1000B419C(uint64_t a1)
{
  return sub_10007D824(a1, 1LL, v1);
}

  ;
}

  ;
}

uint64_t sub_1000B41F0()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t sub_1000B41FC()
{
  return swift_slowAlloc(2LL, -1LL);
}

BOOL sub_1000B4208(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_1000B4228(uint64_t a1, uint64_t a2)
{
  return sub_100079604(v2, a2);
}

uint64_t sub_1000B4230()
{
  return type metadata accessor for URL.DirectoryHint(0LL);
}

uint64_t sub_1000B423C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_1000B4244(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000B424C(NSURL *retstr@<X8>)
{
}

uint64_t sub_1000B4254(uint64_t a1, uint64_t a2)
{
  return sub_10007D0AC(a1, a2, 1LL, v2);
}

  ;
}

uint64_t ContiguousBytes.stableHashValue.getter(uint64_t a1, uint64_t a2)
{
  return v3;
}

uint64_t sub_1000B42C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1000B42EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000B42EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SHA256(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  SHA256.init()(v10);
  uint64_t v13 = SHA256.update(bufferPointer:)(a1, a2);
  SHA256.finalize()(v13);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v16, sub_1000B4434, 0LL, &type metadata for Int);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v16;
}

uint64_t ContiguousArray<A>.stableHashValue.getter(uint64_t a1)
{
  return sub_1000B42EC(a1 + 32, a1 + 32 + *(void *)(a1 + 16));
}

uint64_t UnsafeBufferPointer.stableHashValue.getter()
{
  uint64_t v0 = UnsafeRawBufferPointer.init<A>(_:)();
  return sub_1000B42EC(v0, v1);
}

void *sub_1000B4434@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (result && a2 - (void)result == 32) {
    *a3 = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t *sub_1000B4454(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = type metadata accessor for AcknowledgeMessageRequest(0LL);
    uint64_t v11 = *(int *)(v10 + 28);
    uint64_t v12 = (unint64_t *)((char *)v4 + v11);
    uint64_t v13 = (unint64_t *)((char *)a2 + v11);
    os_log_type_t v14 = (int *)type metadata accessor for ClientOverride(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (sub_10007D824((uint64_t)v13, 1LL, (uint64_t)v14))
    {
      uint64_t v15 = sub_10007B1FC(&qword_10032A3D8);
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      unint64_t v17 = v13[1];
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      }

      else
      {
        unint64_t v18 = *v13;
        sub_1000881FC(*v13, v13[1]);
        *uint64_t v12 = v18;
        v12[1] = v17;
      }

      unint64_t v19 = v13[3];
      v12[2] = v13[2];
      void v12[3] = v19;
      unint64_t v20 = v13[5];
      void v12[4] = v13[4];
      v12[5] = v20;
      uint64_t v21 = v14[7];
      uint64_t v22 = (char *)v12 + v21;
      uint64_t v23 = (char *)v13 + v21;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      uint64_t v24 = sub_10007B1FC(&qword_10032A028);
      if (sub_10007D824((uint64_t)v23, 3LL, v24))
      {
        uint64_t v25 = type metadata accessor for ClientOverride.Server(0LL);
        memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64LL));
      }

      else
      {
        uint64_t v26 = type metadata accessor for URL(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v22, v23, v26);
        sub_10007D0AC((uint64_t)v22, 0LL, 3LL, v24);
      }

      uint64_t v27 = v14[8];
      uint64_t v28 = (char *)v12 + v27;
      uint64_t v29 = (char *)v13 + v27;
      *(void *)uint64_t v28 = *(void *)v29;
      v28[8] = v29[8];
      uint64_t v30 = v14[9];
      unsigned int v31 = (char *)v12 + v30;
      uint64_t v32 = (char *)v13 + v30;
      v31[8] = v32[8];
      *(void *)unsigned int v31 = *(void *)v32;
      uint64_t v33 = v14[10];
      uint64_t v34 = (char *)v12 + v33;
      uint64_t v35 = (char *)v13 + v33;
      uint64_t v36 = type metadata accessor for UUID(0LL);
      if (sub_10007D824((uint64_t)v35, 1LL, v36))
      {
        uint64_t v37 = sub_10007B1FC(&qword_10032A3D0);
        memcpy(v34, v35, *(void *)(*(void *)(v37 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16LL))(v34, v35, v36);
        sub_10007D0AC((uint64_t)v34, 0LL, 1LL, v36);
      }

      sub_10007D0AC((uint64_t)v12, 0LL, 1LL, (uint64_t)v14);
    }

    uint64_t v38 = *(int *)(v10 + 32);
    __int128 v39 = (uint64_t *)((char *)v4 + v38);
    uint64_t v40 = (uint64_t *)((char *)a2 + v38);
    uint64_t v41 = v40[1];
    *__int128 v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = *(int *)(a3 + 20);
    uint64_t v43 = *(int *)(a3 + 24);
    uint64_t v44 = *(void **)((char *)a2 + v42);
    *(uint64_t *)((char *)v4 + v42) = (uint64_t)v44;
    uint64_t v45 = (char *)v4 + v43;
    char v46 = (char *)a2 + v43;
    uint64_t v47 = type metadata accessor for Logger(0LL);
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16LL);
    swift_bridgeObjectRetain(v41);
    id v49 = v44;
    v48(v45, v46, v47);
  }

  return v4;
}

uint64_t sub_1000B4744(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  int v5 = (void *)((char *)a1 + *(int *)(v4 + 28));
  uint64_t v6 = type metadata accessor for ClientOverride(0LL);
  if (!sub_10007D824((uint64_t)v5, 1LL, v6))
  {
    unint64_t v7 = v5[1];
    if (v7 >> 60 != 15) {
      sub_10007F054(*v5, v7);
    }
    swift_bridgeObjectRelease(v5[3]);
    swift_bridgeObjectRelease(v5[5]);
    uint64_t v8 = (uint64_t)v5 + *(int *)(v6 + 28);
    uint64_t v9 = sub_10007B1FC(&qword_10032A028);
    if (!sub_10007D824(v8, 3LL, v9))
    {
      uint64_t v10 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
    }

    uint64_t v11 = (uint64_t)v5 + *(int *)(v6 + 40);
    uint64_t v12 = type metadata accessor for UUID(0LL);
  }

  swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(v4 + 32) + 8));

  uint64_t v13 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
}

void *sub_1000B48A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v10 = *(int *)(v9 + 28);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for ClientOverride(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (sub_10007D824((uint64_t)v12, 1LL, (uint64_t)v13))
  {
    uint64_t v14 = sub_10007B1FC(&qword_10032A3D8);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    unint64_t v15 = v12[1];
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    }

    else
    {
      unint64_t v16 = *v12;
      sub_1000881FC(*v12, v12[1]);
      unint64_t *v11 = v16;
      v11[1] = v15;
    }

    unint64_t v17 = v12[3];
    id v11[2] = v12[2];
    v11[3] = v17;
    unint64_t v18 = v12[5];
    void v11[4] = v12[4];
    void v11[5] = v18;
    uint64_t v19 = v13[7];
    unint64_t v20 = (char *)v11 + v19;
    uint64_t v21 = (char *)v12 + v19;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    uint64_t v22 = sub_10007B1FC(&qword_10032A028);
    if (sub_10007D824((uint64_t)v21, 3LL, v22))
    {
      uint64_t v23 = type metadata accessor for ClientOverride.Server(0LL);
      memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      uint64_t v24 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v20, v21, v24);
      sub_10007D0AC((uint64_t)v20, 0LL, 3LL, v22);
    }

    uint64_t v25 = v13[8];
    uint64_t v26 = (char *)v11 + v25;
    uint64_t v27 = (char *)v12 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    uint64_t v28 = v13[9];
    uint64_t v29 = (char *)v11 + v28;
    uint64_t v30 = (char *)v12 + v28;
    v29[8] = v30[8];
    *(void *)uint64_t v29 = *(void *)v30;
    uint64_t v31 = v13[10];
    uint64_t v32 = (char *)v11 + v31;
    uint64_t v33 = (char *)v12 + v31;
    uint64_t v34 = type metadata accessor for UUID(0LL);
    if (sub_10007D824((uint64_t)v33, 1LL, v34))
    {
      uint64_t v35 = sub_10007B1FC(&qword_10032A3D0);
      memcpy(v32, v33, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16LL))(v32, v33, v34);
      sub_10007D0AC((uint64_t)v32, 0LL, 1LL, v34);
    }

    sub_10007D0AC((uint64_t)v11, 0LL, 1LL, (uint64_t)v13);
  }

  uint64_t v36 = *(int *)(v9 + 32);
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = *(int *)(a3 + 20);
  uint64_t v41 = *(int *)(a3 + 24);
  uint64_t v42 = *(void **)((char *)a2 + v40);
  *(void *)((char *)a1 + v40) = v42;
  uint64_t v43 = (char *)a1 + v41;
  uint64_t v44 = (char *)a2 + v41;
  uint64_t v45 = type metadata accessor for Logger(0LL);
  char v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16LL);
  swift_bridgeObjectRetain(v39);
  id v47 = v42;
  v46(v43, v44, v45);
  return a1;
}

void *sub_1000B4B68(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v13 = *(int *)(v12 + 28);
  uint64_t v14 = (uint64_t)a1 + v13;
  unint64_t v15 = (void *)((char *)a2 + v13);
  unint64_t v16 = (int *)type metadata accessor for ClientOverride(0LL);
  int v17 = sub_10007D824(v14, 1LL, (uint64_t)v16);
  int v18 = sub_10007D824((uint64_t)v15, 1LL, (uint64_t)v16);
  if (v17)
  {
    if (!v18)
    {
      unint64_t v19 = v15[1];
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      }

      else
      {
        uint64_t v25 = *v15;
        sub_1000881FC(*v15, v15[1]);
        *(void *)uint64_t v14 = v25;
        *(void *)(v14 + _Block_object_dispose(va, 8) = v19;
      }

      *(void *)(v14 + 16) = v15[2];
      uint64_t v26 = v15[3];
      *(void *)(v14 + 24) = v26;
      *(void *)(v14 + 32) = v15[4];
      uint64_t v27 = v15[5];
      *(void *)(v14 + 40) = v27;
      uint64_t v28 = v16[7];
      uint64_t v29 = (void *)(v14 + v28);
      uint64_t v30 = (char *)v15 + v28;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      uint64_t v31 = sub_10007B1FC(&qword_10032A028);
      if (sub_10007D824((uint64_t)v30, 3LL, v31))
      {
        uint64_t v32 = type metadata accessor for ClientOverride.Server(0LL);
        memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64LL));
      }

      else
      {
        uint64_t v33 = type metadata accessor for URL(0LL);
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v29, v30, v33);
        sub_10007D0AC((uint64_t)v29, 0LL, 3LL, v31);
      }

      uint64_t v34 = v16[8];
      uint64_t v35 = v14 + v34;
      uint64_t v36 = (char *)v15 + v34;
      uint64_t v37 = *(void *)v36;
      *(_BYTE *)(v35 + _Block_object_dispose(va, 8) = v36[8];
      *(void *)uint64_t v35 = v37;
      uint64_t v38 = v16[9];
      uint64_t v39 = v14 + v38;
      uint64_t v40 = (char *)v15 + v38;
      uint64_t v41 = *(void *)v40;
      *(_BYTE *)(v39 + _Block_object_dispose(va, 8) = v40[8];
      *(void *)uint64_t v39 = v41;
      uint64_t v42 = v16[10];
      uint64_t v43 = (void *)(v14 + v42);
      uint64_t v44 = (char *)v15 + v42;
      uint64_t v45 = type metadata accessor for UUID(0LL);
      if (sub_10007D824((uint64_t)v44, 1LL, v45))
      {
        uint64_t v46 = sub_10007B1FC(&qword_10032A3D0);
        memcpy(v43, v44, *(void *)(*(void *)(v46 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v45 - 8) + 16LL))(v43, v44, v45);
        sub_10007D0AC((uint64_t)v43, 0LL, 1LL, v45);
      }

      uint64_t v47 = v14;
      uint64_t v48 = (uint64_t)v16;
      goto LABEL_20;
    }

    goto LABEL_7;
  }

  if (v18)
  {
    sub_1000B6274(v14, type metadata accessor for ClientOverride);
LABEL_7:
    size_t v20 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D8) - 8) + 64LL);
    uint64_t v21 = (void *)v14;
    uint64_t v22 = v15;
    goto LABEL_8;
  }

  unint64_t v23 = v15[1];
  if (*(void *)(v14 + 8) >> 60 == 15LL)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *v15;
      sub_1000881FC(*v15, v15[1]);
      *(void *)uint64_t v14 = v24;
      *(void *)(v14 + _Block_object_dispose(va, 8) = v23;
      goto LABEL_26;
    }

    goto LABEL_24;
  }

  if (v23 >> 60 == 15)
  {
    sub_1000A18B0(v14);
LABEL_24:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_26;
  }

  uint64_t v63 = *v15;
  sub_1000881FC(*v15, v15[1]);
  uint64_t v64 = *(void *)v14;
  unint64_t v65 = *(void *)(v14 + 8);
  *(void *)uint64_t v14 = v63;
  *(void *)(v14 + _Block_object_dispose(va, 8) = v23;
  sub_10007F054(v64, v65);
LABEL_26:
  *(void *)(v14 + 16) = v15[2];
  uint64_t v66 = v15[3];
  uint64_t v67 = *(void *)(v14 + 24);
  *(void *)(v14 + 24) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  *(void *)(v14 + 32) = v15[4];
  uint64_t v68 = v15[5];
  uint64_t v69 = *(void *)(v14 + 40);
  *(void *)(v14 + 40) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  uint64_t v70 = v16[7];
  uint64_t v71 = v14 + v70;
  id v72 = (char *)v15 + v70;
  uint64_t v73 = sub_10007B1FC(&qword_10032A028);
  uint64_t v94 = v71;
  LODWORD(v71) = sub_10007D824(v71, 3LL, v73);
  int v74 = sub_10007D824((uint64_t)v72, 3LL, v73);
  if ((_DWORD)v71)
  {
    if (!v74)
    {
      uint64_t v77 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v77 - 8) + 16LL))(v94, v72, v77);
      sub_10007D0AC(v94, 0LL, 3LL, v73);
      goto LABEL_34;
    }

    size_t v75 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
    uint64_t v76 = (void *)v94;
  }

  else
  {
    if (!v74)
    {
      uint64_t v78 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v78 - 8) + 24LL))(v94, v72, v78);
      goto LABEL_34;
    }

    sub_1000B5150(v94);
    size_t v75 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
    uint64_t v76 = (void *)v94;
  }

  memcpy(v76, v72, v75);
LABEL_34:
  uint64_t v79 = v16[8];
  uint64_t v80 = v14 + v79;
  uint64_t v81 = (char *)v15 + v79;
  uint64_t v82 = *(void *)v81;
  *(_BYTE *)(v80 + _Block_object_dispose(va, 8) = v81[8];
  *(void *)uint64_t v80 = v82;
  uint64_t v83 = v16[9];
  uint64_t v84 = v14 + v83;
  uint64_t v85 = (char *)v15 + v83;
  uint64_t v86 = *(void *)v85;
  *(_BYTE *)(v84 + _Block_object_dispose(va, 8) = v85[8];
  *(void *)uint64_t v84 = v86;
  uint64_t v87 = v16[10];
  uint64_t v88 = v14 + v87;
  uint64_t v89 = (uint64_t)v15 + v87;
  uint64_t v90 = type metadata accessor for UUID(0LL);
  int v91 = sub_10007D824(v88, 1LL, v90);
  int v92 = sub_10007D824(v89, 1LL, v90);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 16LL))(v88, v89, v90);
      uint64_t v47 = v88;
      uint64_t v48 = v90;
LABEL_20:
      sub_10007D0AC(v47, 0LL, 1LL, v48);
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v93 = *(void *)(v90 - 8);
    if (!v92)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 24))(v88, v89, v90);
      goto LABEL_21;
    }

    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v88, v90);
  }

  size_t v20 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D0) - 8) + 64LL);
  uint64_t v21 = (void *)v88;
  uint64_t v22 = (const void *)v89;
LABEL_8:
  memcpy(v21, v22, v20);
LABEL_21:
  uint64_t v49 = *(int *)(v12 + 32);
  uint64_t v50 = (void *)((char *)a1 + v49);
  uint64_t v51 = (void *)((char *)a2 + v49);
  *uint64_t v50 = *v51;
  uint64_t v52 = v51[1];
  uint64_t v53 = v50[1];
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  uint64_t v54 = *(int *)(a3 + 20);
  id v55 = *(void **)((char *)a2 + v54);
  id v56 = *(void **)((char *)a1 + v54);
  *(void *)((char *)a1 + v54) = v55;
  id v57 = v55;

  uint64_t v58 = *(int *)(a3 + 24);
  uint64_t v59 = (char *)a1 + v58;
  NSFileAttributeKey v60 = (char *)a2 + v58;
  uint64_t v61 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 24LL))(v59, v60, v61);
  return a1;
}

uint64_t sub_1000B5150(uint64_t a1)
{
  uint64_t v2 = sub_10007B1FC(&qword_10032A028);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

_OWORD *sub_1000B5190(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v8 = *(int *)(v7 + 28);
  uint64_t v9 = (_OWORD *)((char *)a1 + v8);
  uint64_t v10 = (_OWORD *)((char *)a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for ClientOverride(0LL);
  if (sub_10007D824((uint64_t)v10, 1LL, (uint64_t)v11))
  {
    uint64_t v12 = sub_10007B1FC(&qword_10032A3D8);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    __int128 v13 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v13;
    v9[2] = v10[2];
    uint64_t v14 = v11[7];
    unint64_t v15 = (char *)v9 + v14;
    unint64_t v16 = (char *)v10 + v14;
    uint64_t v17 = sub_10007B1FC(&qword_10032A028);
    if (sub_10007D824((uint64_t)v16, 3LL, v17))
    {
      uint64_t v18 = type metadata accessor for ClientOverride.Server(0LL);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      uint64_t v19 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v15, v16, v19);
      sub_10007D0AC((uint64_t)v15, 0LL, 3LL, v17);
    }

    uint64_t v20 = v11[8];
    uint64_t v21 = (char *)v9 + v20;
    uint64_t v22 = (char *)v10 + v20;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = v11[9];
    uint64_t v24 = (char *)v9 + v23;
    uint64_t v25 = (char *)v10 + v23;
    v24[8] = v25[8];
    *(void *)uint64_t v24 = *(void *)v25;
    uint64_t v26 = v11[10];
    uint64_t v27 = (char *)v9 + v26;
    uint64_t v28 = (char *)v10 + v26;
    uint64_t v29 = type metadata accessor for UUID(0LL);
    if (sub_10007D824((uint64_t)v28, 1LL, v29))
    {
      uint64_t v30 = sub_10007B1FC(&qword_10032A3D0);
      memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v27, v28, v29);
      sub_10007D0AC((uint64_t)v27, 0LL, 1LL, v29);
    }

    sub_10007D0AC((uint64_t)v9, 0LL, 1LL, (uint64_t)v11);
  }

  *(_OWORD *)((char *)a1 + *(int *)(v7 + swift_release(*(void *)(v0 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 32));
  uint64_t v31 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v32, v33, v34);
  return a1;
}

void *sub_1000B53E0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v13 = *(int *)(v12 + 28);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  unint64_t v16 = (int *)type metadata accessor for ClientOverride(0LL);
  int v17 = sub_10007D824(v14, 1LL, (uint64_t)v16);
  int v18 = sub_10007D824(v15, 1LL, (uint64_t)v16);
  if (v17)
  {
    if (!v18)
    {
      __int128 v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v19;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
      uint64_t v20 = v16[7];
      uint64_t v21 = (void *)(v14 + v20);
      uint64_t v22 = (const void *)(v15 + v20);
      uint64_t v23 = sub_10007B1FC(&qword_10032A028);
      if (sub_10007D824((uint64_t)v22, 3LL, v23))
      {
        uint64_t v24 = type metadata accessor for ClientOverride.Server(0LL);
        memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        uint64_t v30 = type metadata accessor for URL(0LL);
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 32LL))(v21, v22, v30);
        sub_10007D0AC((uint64_t)v21, 0LL, 3LL, v23);
      }

      uint64_t v31 = v16[8];
      uint64_t v32 = v14 + v31;
      uint64_t v33 = v15 + v31;
      *(void *)uint64_t v32 = *(void *)v33;
      *(_BYTE *)(v32 + _Block_object_dispose(va, 8) = *(_BYTE *)(v33 + 8);
      uint64_t v34 = v16[9];
      uint64_t v35 = v14 + v34;
      uint64_t v36 = v15 + v34;
      *(_BYTE *)(v35 + _Block_object_dispose(va, 8) = *(_BYTE *)(v36 + 8);
      *(void *)uint64_t v35 = *(void *)v36;
      uint64_t v37 = v16[10];
      uint64_t v38 = (void *)(v14 + v37);
      uint64_t v39 = (const void *)(v15 + v37);
      uint64_t v40 = type metadata accessor for UUID(0LL);
      if (sub_10007D824((uint64_t)v39, 1LL, v40))
      {
        uint64_t v41 = sub_10007B1FC(&qword_10032A3D0);
        memcpy(v38, v39, *(void *)(*(void *)(v41 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v40 - 8) + 32LL))(v38, v39, v40);
        sub_10007D0AC((uint64_t)v38, 0LL, 1LL, v40);
      }

      uint64_t v42 = v14;
      uint64_t v43 = (uint64_t)v16;
      goto LABEL_18;
    }

    goto LABEL_7;
  }

  if (v18)
  {
    sub_1000B6274(v14, type metadata accessor for ClientOverride);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D8) - 8) + 64LL);
    uint64_t v26 = (void *)v14;
    uint64_t v27 = (const void *)v15;
    goto LABEL_8;
  }

  unint64_t v28 = *(void *)(v14 + 8);
  if (v28 >> 60 == 15) {
    goto LABEL_12;
  }
  unint64_t v29 = *(void *)(v15 + 8);
  if (v29 >> 60 == 15)
  {
    sub_1000A18B0(v14);
LABEL_12:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_21;
  }

  uint64_t v57 = *(void *)v14;
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + _Block_object_dispose(va, 8) = v29;
  sub_10007F054(v57, v28);
LABEL_21:
  uint64_t v58 = *(void *)(v15 + 24);
  uint64_t v59 = *(void *)(v14 + 24);
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(void *)(v14 + 24) = v58;
  swift_bridgeObjectRelease(v59);
  uint64_t v60 = *(void *)(v15 + 40);
  uint64_t v61 = *(void *)(v14 + 40);
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  *(void *)(v14 + 40) = v60;
  swift_bridgeObjectRelease(v61);
  uint64_t v62 = v16[7];
  uint64_t v63 = v14 + v62;
  uint64_t v64 = (const void *)(v15 + v62);
  uint64_t v65 = sub_10007B1FC(&qword_10032A028);
  uint64_t v84 = v63;
  LODWORD(v63) = sub_10007D824(v63, 3LL, v65);
  int v66 = sub_10007D824((uint64_t)v64, 3LL, v65);
  if ((_DWORD)v63)
  {
    if (!v66)
    {
      uint64_t v69 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, const void *, uint64_t))(*(void *)(v69 - 8) + 32LL))(v84, v64, v69);
      sub_10007D0AC(v84, 0LL, 3LL, v65);
      goto LABEL_29;
    }

    size_t v67 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
    uint64_t v68 = (void *)v84;
  }

  else
  {
    if (!v66)
    {
      uint64_t v70 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, const void *, uint64_t))(*(void *)(v70 - 8) + 40LL))(v84, v64, v70);
      goto LABEL_29;
    }

    sub_1000B5150(v84);
    size_t v67 = *(void *)(*(void *)(type metadata accessor for ClientOverride.Server(0LL) - 8) + 64LL);
    uint64_t v68 = (void *)v84;
  }

  memcpy(v68, v64, v67);
LABEL_29:
  uint64_t v71 = v16[8];
  uint64_t v72 = v14 + v71;
  uint64_t v73 = v15 + v71;
  *(void *)uint64_t v72 = *(void *)v73;
  *(_BYTE *)(v72 + _Block_object_dispose(va, 8) = *(_BYTE *)(v73 + 8);
  uint64_t v74 = v16[9];
  uint64_t v75 = v14 + v74;
  uint64_t v76 = v15 + v74;
  *(_BYTE *)(v75 + _Block_object_dispose(va, 8) = *(_BYTE *)(v76 + 8);
  *(void *)uint64_t v75 = *(void *)v76;
  uint64_t v77 = v16[10];
  uint64_t v78 = v14 + v77;
  uint64_t v79 = v15 + v77;
  uint64_t v80 = type metadata accessor for UUID(0LL);
  int v81 = sub_10007D824(v78, 1LL, v80);
  int v82 = sub_10007D824(v79, 1LL, v80);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 32LL))(v78, v79, v80);
      uint64_t v42 = v78;
      uint64_t v43 = v80;
LABEL_18:
      sub_10007D0AC(v42, 0LL, 1LL, v43);
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v83 = *(void *)(v80 - 8);
    if (!v82)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 40))(v78, v79, v80);
      goto LABEL_19;
    }

    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v78, v80);
  }

  size_t v25 = *(void *)(*(void *)(sub_10007B1FC(&qword_10032A3D0) - 8) + 64LL);
  uint64_t v26 = (void *)v78;
  uint64_t v27 = (const void *)v79;
LABEL_8:
  memcpy(v26, v27, v25);
LABEL_19:
  uint64_t v44 = *(int *)(v12 + 32);
  uint64_t v45 = (void *)((char *)a1 + v44);
  uint64_t v46 = (void *)((char *)a2 + v44);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  uint64_t v49 = v45[1];
  *uint64_t v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease(v49);
  uint64_t v50 = *(int *)(a3 + 20);
  uint64_t v51 = *(void **)((char *)a1 + v50);
  *(void *)((char *)a1 + v50) = *(void *)((char *)a2 + v50);

  uint64_t v52 = *(int *)(a3 + 24);
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  uint64_t v55 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 40LL))(v53, v54, v55);
  return a1;
}

uint64_t sub_1000B58E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B58F4);
}

uint64_t sub_1000B58F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000B62C0();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v6;
    uint64_t v8 = v4;
    return sub_10007D824(v8, v3, v7);
  }

  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    uint64_t v7 = sub_100086224();
    uint64_t v8 = v4 + *(int *)(a3 + 24);
    return sub_10007D824(v8, v3, v7);
  }

  unint64_t v9 = *(void *)(v4 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1000B5980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B598C);
}

uint64_t sub_1000B598C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000B62C0();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = v5;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(v5 + *(int *)(a4 + 20)) = (v4 - 1);
      return result;
    }

    uint64_t v9 = sub_100086224();
    uint64_t v10 = v5 + *(int *)(a4 + 24);
  }

  return sub_10007D0AC(v10, v4, v4, v9);
}

uint64_t type metadata accessor for AcknowledgeMessageTask(uint64_t a1)
{
  uint64_t result = qword_10032A8C0;
  if (!qword_10032A8C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AcknowledgeMessageTask);
  }
  return result;
}

uint64_t sub_1000B5A4C(uint64_t a1)
{
  uint64_t result = type metadata accessor for AcknowledgeMessageRequest(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v5[2] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000B5ADC()
{
  v1[34] = v0;
  uint64_t v2 = sub_100086224();
  v1[35] = sub_10009344C(v2);
  uint64_t v3 = type metadata accessor for AcknowledgeMessageTask(0LL);
  v1[36] = v3;
  v1[37] = sub_10009344C(v3);
  return sub_100092F20();
}

uint64_t sub_1000B5B2C()
{
  uint64_t v1 = v0[34];
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void **)(v1 + 24);
  sub_1000B6230(v1, v0[37], type metadata accessor for AcknowledgeMessageTask);
  uint64_t v5 = v0[36];
  uint64_t v4 = v0[37];
  if (v2)
  {
    uint64_t v6 = v2;
  }

  else
  {
    uint64_t v7 = (uint64_t *)(*(void *)(v4 + *(int *)(v5 + 20)) + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
    uint64_t v3 = *v7;
    uint64_t v6 = (void *)v7[1];
    swift_bridgeObjectRetain(v6);
  }

  uint64_t v9 = v0[34];
  uint64_t v8 = v0[35];
  swift_bridgeObjectRetain(v2);
  sub_1000B6274(v4, type metadata accessor for AcknowledgeMessageTask);
  sub_1000B6230(v9 + *(int *)(v5 + 24), v8, type metadata accessor for SKLogger);
  _StringGuts.grow(_:)(46LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  *(void *)uint64_t v86 = 0xD000000000000016LL;
  unint64_t v87 = 0x800000010029F980LL;
  uint64_t v10 = *(void *)(v9 + 8);
  int v11 = swift_bridgeObjectRetain(v10);
  sub_1000B62B0( v11,  v12,  v13,  v14,  v15,  v16,  v17,  v18,  v64,  v66,  v68,  v70,  v72,  v74,  v77,  v79,  v81,  (uint64_t)(v0 + 10),  v85,  22);
  swift_bridgeObjectRelease(v10);
  v19._countAndFlagsBits = 0x20726F6620LL;
  v19._object = (void *)0xE500000000000000LL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v3;
  v20._object = v6;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 0x696C6320726F6620LL;
  v21._object = (void *)0xED0000203A746E65LL;
  String.append(_:)(v21);
  uint64_t v78 = *(int *)(v5 + 20);
  uint64_t v22 = *(void *)(*(void *)(v9 + v78) + OBJC_IVAR____TtC9storekitd6Client_requestBundleID + 8);
  int v23 = swift_bridgeObjectRetain(v22);
  sub_1000B62B0( v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  v65,  v67,  v69,  v71,  v73,  v75,  v78,  (uint64_t)v6,  v3,  v83,  v85,  v86[0]);
  swift_bridgeObjectRelease(v22);
  uint64_t v31 = *(void *)v86;
  uint64_t v32 = type metadata accessor for AcknowledgeMessageRequest(0LL);
  uint64_t v33 = (uint64_t *)(v9 + *(int *)(v32 + 32));
  uint64_t v35 = *v33;
  uint64_t v34 = (void *)v33[1];
  LOBYTE(v22) = static os_log_type_t.default.getter(v32);
  swift_bridgeObjectRetain_n(v34, 2LL);
  uint64_t v36 = swift_bridgeObjectRetain_n(0x800000010029F980LL, 2LL);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = v22;
  if (os_log_type_enabled(v37, (os_log_type_t)v22))
  {
    uint64_t v39 = v35;
    uint64_t v40 = swift_slowAlloc(22LL, -1LL);
    uint64_t v76 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v40 = 136446466;
    uint64_t v85 = v76;
    *(void *)uint64_t v86 = 91LL;
    unint64_t v87 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v34);
    v41._countAndFlagsBits = v39;
    v41._object = v34;
    String.append(_:)(v41);
    v42._countAndFlagsBits = 8285LL;
    v42._object = (void *)0xE200000000000000LL;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v34);
    v0[32] = sub_10007A488(91LL, 0xE100000000000000LL, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v40 + 4);
    swift_bridgeObjectRelease(0xE100000000000000LL);
    sub_100085FA8();
    *(_WORD *)(v40 + 12) = 2082;
    swift_bridgeObjectRetain(0x800000010029F980LL);
    v0[33] = sub_10007A488(v31, 0x800000010029F980LL, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v40 + 14);
    sub_1000B62D0();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s%{public}s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v76, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v76);
    sub_10007B974(v40);

    swift_bridgeObjectRelease(0x800000010029F980LL);
  }

  else
  {
    sub_100085FA8();
    sub_1000B62D0();
  }

  uint64_t v43 = (uint64_t *)v0[34];
  sub_1000B6274(v0[35], type metadata accessor for SKLogger);
  sub_1000DEA24();
  uint64_t v45 = v44;
  v0[38] = v44;
  sub_1000DF67C();
  uint64_t v47 = v46;
  v0[39] = v46;
  sub_1000DF9D4();
  uint64_t v49 = v48;
  v0[40] = v48;
  [v48 setRequestEncoding:3];
  uint64_t v50 = sub_10007B1FC((uint64_t *)&unk_10032A690);
  uint64_t inited = swift_initStackObject(v50, v84);
  *(_OWORD *)(inited + 16) = xmmword_10027ACD0;
  *(void *)(inited + 32) = 0x6449656C646E7562LL;
  *(void *)(inited + 40) = 0xE800000000000000LL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v82;
  *(void *)(inited + 56) = v80;
  *(void *)(inited + 64) = 0x6449726566666FLL;
  *(void *)(inited + 72) = 0xE700000000000000LL;
  uint64_t v52 = v43[5];
  *(void *)(inited + 80) = v43[4];
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v52;
  *(void *)(inited + 96) = 0x546567617373656DLL;
  *(void *)(inited + 104) = 0xEB00000000657079LL;
  uint64_t v53 = *v43;
  uint64_t v54 = *(void *)(v9 + 8);
  *(void *)(inited + swift_weakDestroy(v0 + 112) = v53;
  *(void *)(inited + 120) = v54;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v54);
  uint64_t v55 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  if (qword_100328B60 != -1) {
    swift_once(&qword_100328B60, sub_10012B128);
  }
  id v56 = v0 + 2;
  id v57 = [v45 URLForKey:qword_10033E1E8];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v55);
  id v59 = [v49 requestWithMethod:4 bagURL:v57 parameters:isa];
  v0[41] = v59;

  id v60 = [v47 dataTaskPromiseWithRequestPromise:v59];
  v0[42] = v60;
  v0[7] = v0 + 31;
  v0[2] = v0;
  v0[3] = sub_1000B60D0;
  uint64_t v61 = swift_continuation_init(v0 + 2, 1LL);
  v0[26] = _NSConcreteStackBlock;
  uint64_t v62 = v0 + 26;
  v62[1] = 0x40000000LL;
  v62[2] = sub_1000A6A1C;
  v62[3] = &unk_1002EC380;
  v62[4] = v61;
  [v60 resultWithCompletion:v62];
  return swift_continuation_await(v56);
}

uint64_t sub_1000B60D0()
{
  *(void *)(*(void *)v0 + 344LL) = *(void *)(*(void *)v0 + 48LL);
  return sub_100092F20();
}

uint64_t sub_1000B6128()
{
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v3 = *(void **)(v0 + 312);
  uint64_t v2 = *(void **)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 280);

  swift_unknownObjectRelease(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B61A4()
{
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v3 = *(void **)(v0 + 320);
  uint64_t v2 = *(void **)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = *(void **)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 280);
  swift_willThrow();

  swift_unknownObjectRelease(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B6230(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B6274(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

void sub_1000B62B0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
}

uint64_t sub_1000B62C0()
{
  return type metadata accessor for AcknowledgeMessageRequest(0LL);
}

uint64_t sub_1000B62D0()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_1000B62DC()
{
  uint64_t v1 = type metadata accessor for StoreKitMessageAnalyticsEvent(0LL);
  NSString v2 = String._bridgeToObjectiveC()();
  sub_1000B6C9C();
  sub_1000B6C8C();
  sub_100133514((uint64_t)v2, 7368801LL, 0xE300000000000000LL);
  sub_1000AA47C();
  sub_1000B648C(*(void *)(v0 + *(int *)(v1 + 24)));
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  sub_1000B6C9C();
  sub_1000B6C8C();
  sub_100133514((uint64_t)v5, 0x456567617373656DLL, 0xEC000000746E6576LL);
  sub_1000AA47C();
  sub_1000DFA50();
  uint64_t v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  swift_isUniquelyReferenced_nonNull_native();
  sub_100133514((uint64_t)v8, 0x6D6E6F7269766E65LL, 0xEB00000000746E65LL);
  sub_1000AA47C();
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  sub_1000B6C9C();
  sub_1000B6C8C();
  sub_100133514((uint64_t)isa, 0x546567617373656DLL, 0xEB00000000657079LL);
  sub_1000AA47C();
  return v11;
}

uint64_t type metadata accessor for StoreKitMessageAnalyticsEvent(uint64_t a1)
{
  uint64_t result = qword_10032A960;
  if (!qword_10032A960) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StoreKitMessageAnalyticsEvent);
  }
  return result;
}

unint64_t sub_1000B648C(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  unint64_t result = 0x736964206F747541LL;
  switch(v1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0xD000000000000011LL;
      break;
    case 2LL:
    case 3LL:
      unint64_t result = 0xD000000000000010LL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E55LL;
      break;
  }

  return result;
}

uint64_t *sub_1000B652C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    NSString v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_10007B1FC(&qword_10032A028);
    if (sub_10007D824((uint64_t)v9, 2LL, v10))
    {
      uint64_t v11 = type metadata accessor for Client.Server(0LL);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      uint64_t v13 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v8, v9, v13);
      sub_10007D0AC((uint64_t)v8, 0LL, 2LL, v10);
    }

    uint64_t v14 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    int v15 = (uint64_t *)((char *)v4 + v14);
    int v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *int v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }

  return v4;
}

uint64_t sub_1000B663C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10007B1FC(&qword_10032A028);
  if (!sub_10007D824(v4, 2LL, v5))
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v4, v6);
  }

  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28) + 8));
}

void *sub_1000B66B4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  NSString v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10007B1FC(&qword_10032A028);
  if (sub_10007D824((uint64_t)v8, 2LL, v9))
  {
    uint64_t v10 = type metadata accessor for Client.Server(0LL);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v7, v8, v11);
    sub_10007D0AC((uint64_t)v7, 0LL, 2LL, v9);
  }

  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

void *sub_1000B6798(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  NSString v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10007B1FC(&qword_10032A028);
  int v10 = sub_10007D824((uint64_t)v7, 2LL, v9);
  int v11 = sub_10007D824((uint64_t)v8, 2LL, v9);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v20 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 24LL))(v7, v8, v20);
      goto LABEL_7;
    }

    sub_1000B5150((uint64_t)v7);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = type metadata accessor for Client.Server(0LL);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v7, v8, v12);
  sub_10007D0AC((uint64_t)v7, 0LL, 2LL, v9);
LABEL_7:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  int v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

void *sub_1000B68E4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  NSString v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10007B1FC(&qword_10032A028);
  if (sub_10007D824((uint64_t)v8, 2LL, v9))
  {
    uint64_t v10 = type metadata accessor for Client.Server(0LL);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    uint64_t v11 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v7, v8, v11);
    sub_10007D0AC((uint64_t)v7, 0LL, 2LL, v9);
  }

  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

void *sub_1000B69BC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  NSString v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10007B1FC(&qword_10032A028);
  int v10 = sub_10007D824((uint64_t)v7, 2LL, v9);
  int v11 = sub_10007D824((uint64_t)v8, 2LL, v9);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v21 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40LL))(v7, v8, v21);
      goto LABEL_7;
    }

    sub_1000B5150((uint64_t)v7);
    goto LABEL_6;
  }

  if (v11)
  {
LABEL_6:
    uint64_t v13 = type metadata accessor for Client.Server(0LL);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v7, v8, v12);
  sub_10007D0AC((uint64_t)v7, 0LL, 2LL, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v15 = (void *)((char *)a1 + v14);
  int v16 = (void *)((char *)a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = v15[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  return a1;
}

uint64_t sub_1000B6AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6B00);
}

uint64_t sub_1000B6B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Client.Server(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_10007D824(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v_Block_object_dispose(va, 8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1000B6B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6B8C);
}

uint64_t sub_1000B6B8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Client.Server(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_10007D0AC(a1 + *(int *)(a4 + 20), a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + _Block_object_dispose(va, 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000B6C08(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Client.Server(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[3] = &unk_10027ADC0;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

  ;
}

uint64_t sub_1000B6C9C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_1000B6CA4()
{
}

void sub_1000B6CB0(uint64_t (*a1)(void))
{
  if (!swift_unknownObjectWeakLoadStrong(v1 + 112))
  {
    uint64_t v3 = a1();
    id v4 = [(id)objc_opt_self(Environment) sharedInstance];
    id v5 = [v4 userDatabase];

    [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)) initWithDatabase:v5];
    uint64_t v6 = sub_10009C714();
    swift_unknownObjectWeakAssign(v6);
  }

  sub_1000AB000();
}

uint64_t sub_1000B6D58()
{
  uint64_t v1 = swift_weakInit(v0 + 112, 0LL);
  swift_weakAssign(v1, 0LL);
  return v0;
}

void *sub_1000B6D88()
{
  uint64_t v1 = v0 + 112;
  Strong = (void *)swift_weakLoadStrong(v0 + 112);
  if (!Strong)
  {
    uint64_t v3 = sub_10007B1FC(&qword_10032AAB0);
    swift_allocObject(v3, 136LL, 15LL);
    Strong = sub_1000C1540();
    swift_weakAssign(v1, Strong);
  }

  return Strong;
}

void sub_1000B6DE8()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100085EF0();
  id v2 = [(id)swift_getObjCClassFromMetadata(v0) predicateMatchingAllPredicates:isa];

  sub_1000AB000();
}

uint64_t sub_1000B6E48()
{
  uint64_t v0 = sub_10007B1FC(&qword_10032AA88);
  uint64_t v1 = swift_allocObject(v0, 120LL, 15LL);
  swift_defaultActor_initialize(v1);
  uint64_t result = swift_unknownObjectWeakInit(v1 + 112, 0LL);
  qword_10032A9A0 = v1;
  return result;
}

uint64_t sub_1000B6E94()
{
  uint64_t v0 = sub_10007B1FC(&qword_10032AAE0);
  swift_allocObject(v0, 120LL, 15LL);
  uint64_t result = sub_1000B6D58();
  qword_10032A9A8 = result;
  return result;
}

BOOL static PurchaseIntentRequest.Kind.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_1000B6EE4(uint64_t a1, char a2)
{
}

Swift::Int PurchaseIntentRequest.Kind.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000B6F48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PurchaseIntentRequest.Kind.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000B6F54()
{
  return PurchaseIntentRequest.Kind.hashValue.getter(*v0);
}

void sub_1000B6F5C(uint64_t a1)
{
}

uint64_t sub_1000B6F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[23] = a4;
  v5[24] = a5;
  v5[21] = a2;
  v5[22] = a3;
  v5[20] = a1;
  uint64_t v6 = sub_100086224();
  v5[25] = v6;
  v5[26] = sub_10009344C(v6);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000B6FA8()
{
  uint64_t v1 = (void *)v0[21];
  if ((*(_BYTE *)v1 & 1) != 0)
  {
    id v5 = (void *)v0[22];
    sub_1000C49D4(v1);
    id v6 = v5;
    uint64_t v7 = (void *)sub_100093010();
    v0[27] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000B7028;
    uint64_t v8 = sub_1000C6298(v0[21]);
    return sub_1000B7630(v8, v9);
  }

  else
  {
    uint64_t v2 = v0[20];
    *(void *)(v2 + 32) = 0LL;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    sub_1000C626C();
    uint64_t v3 = (uint64_t (*)(void))sub_100093CFC();
    return sub_1000C5EB8(v3);
  }

uint64_t sub_1000B7028(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *(uint64_t **)v3;
  id v6 = v12;
  sub_1000C666C(&v12);
  v6[28] = a1;
  v6[29] = v7;
  swift_task_dealloc(v8);
  if (v2)
  {
    swift_task_dealloc(v6[26]);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else if (a2 >= 2)
  {
    int v11 = (void *)swift_task_alloc(dword_10032AB1C);
    v6[30] = (uint64_t)v11;
    void *v11 = v3;
    v11[1] = sub_1000B7128;
    return sub_1000B8108((uint64_t)(v6 + 7), a1, a2, v6[21], v6[22], v6[23], v6[24]);
  }

  else
  {
    int v10 = (void *)swift_task_alloc(dword_10032AB24);
    v6[32] = (uint64_t)v10;
    *int v10 = v3;
    v10[1] = sub_1000B7174;
    return sub_1000BA428((uint64_t)(v6 + 12), (void *)v6[21], (void *)v6[22], v6[23], v6[24]);
  }

uint64_t sub_1000B7128()
{
  *(void *)(v1 + 24_Block_object_dispose(va, 8) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000B7174()
{
  *(void *)(v1 + 264) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000B71C0()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100093CFC();
  return v1();
}

uint64_t sub_1000B7208()
{
  uint64_t v1 = (__int128 *)sub_10009C714();
  sub_10009D8A4(v1, v2);
  sub_10009D8A4((__int128 *)(v0 + 16), *(void *)(v0 + 160));
  sub_1000C626C();
  uint64_t v3 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000C5EB8(v3);
}

#error "1000B732C: call analysis failed (funcsize=115)"
#error "1000B7518: call analysis failed (funcsize=113)"
uint64_t sub_1000B7630(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  v2[27] = a1;
  v2[28] = a2;
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  v2[29] = v3;
  id v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v4);
  v2[31] = swift_task_alloc(v4);
  v2[32] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000B76A8, 0LL, 0LL);
}

uint64_t sub_1000B76A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1000B76E8 + dword_1000B7B0C[*(unsigned __int8 *)(*(void *)(v18 + 216) + 1LL)]))( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18);
}

uint64_t sub_1000B76F8()
{
  sub_1000C4DC0(v1);
  sub_1000C6554(*(void *)(v0 + 256));
  sub_1000939C0();
  sub_100093280();
  sub_1000C60EC();
  return v2();
}

uint64_t sub_1000B7750@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v13 = *(void *)(v9 + 128);
  *(void *)(v9 + 264) = *(void *)(v9 + 120);
  *(void *)(v9 + 272) = v13;
  if (v13)
  {
    sub_1000C6354();
    BOOL v16 = v14 == v15 && v13 == 0xE800000000000000LL;
    if (v16 || (sub_1000C6320(v14, v13, 0x54554F5F4B4E494CLL, 0xE800000000000000LL) & 1) != 0)
    {

      sub_100093460();
      JUMPOUT(0x1000B7700LL);
    }

    sub_1000DEA24();
    uint64_t v51 = v50;
    if (qword_100328C28 != -1) {
      swift_once(&qword_100328C28, sub_10012BCA4);
    }
    *(void *)(v9 + 280) = [v51 arrayForKey:qword_10033E2B0];
    swift_unknownObjectRelease(v51);
    *(void *)(v9 + 56) = v12;
    uint64_t v52 = sub_10009C260((uint64_t)sub_1000B7B1C);
    *(void *)(v9 + 80) = _NSConcreteStackBlock;
    uint64_t v53 = (void *)(v9 + 80);
    v53[1] = 0x40000000LL;
    v53[2] = sub_100098FC4;
    v53[3] = &unk_1002EC6F8;
    uint8_t v53[4] = v52;
    sub_1000C66D4(v52, "valueWithCompletion:");
    sub_1000C60EC();
    return swift_continuation_await(v54);
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v17 = *(void *)(v9 + 216);
    sub_100079604(*(void *)(v9 + 232), (uint64_t)qword_10033E1A8);
    sub_1000C2198();
    a6 = 0LL;
    a7 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    unint64_t v18 = a7;
    *(void *)(v9 + 136) = a6;
    *(void *)(v9 + 144) = v18;
    sub_1000862B8();
    v19._countAndFlagsBits = 0xD000000000000022LL;
    String.append(_:)(v19);
    *(_BYTE *)(v9 + 161) = 3;
    uint64_t v20 = _print_unlocked<A, B>(_:_:)(v11, v10);
    uint64_t v21 = *(void *)(v9 + 144);
    uint64_t v22 = *(void *)(v17 + 16);
    uint64_t v55 = *(void *)(v17 + 8);
    uint64_t v56 = *(void *)(v9 + 136);
    LOBYTE(v17) = static os_log_type_t.error.getter(v20);
    sub_100085EE8(v22);
    uint64_t v23 = sub_100085EE8(v21);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = v17;
    if (sub_100093764(v24))
    {
      uint64_t v26 = sub_10007B9FC(22LL);
      uint64_t v27 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v26 = 136446466;
      sub_1000B2110();
      a5 = v28;
      a6 = v29;
      a7 = v30;
      swift_bridgeObjectRetain(v22);
      sub_1000AAB84(v55);
      sub_100085F14();
      sub_1000AABA8();
      *(void *)(v9 + 176) = sub_10008620C(a6, v31, &a5);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8, v9 + 184, v26 + 4);
      sub_10007B980();
      sub_10007D974(v22);
      *(_WORD *)(v26 + 12) = 2082;
      sub_10008618C();
      *(void *)(v9 + 16_Block_object_dispose(va, 8) = sub_1000C6228(v56, v32, &a5);
      sub_100086194(v7, v8);
      sub_100085E64(v21);
      sub_100086038((void *)&_mh_execute_header, v24, v25, "%{public}s%{public}s", (uint8_t *)v26);
      sub_100086030(v27, v33, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v27);
      sub_10007B974(v26);

      sub_100085FB4();
    }

    else
    {
      sub_10007D974(v22);
      sub_100085E64(v21);
    }

    uint64_t v34 = *(void **)(v9 + 224);
    sub_100085BC4(*(void *)(v9 + 256), type metadata accessor for SKLogger);
    unint64_t v35 = sub_10009BB88();
    uint64_t v36 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v35);
    *uint64_t v37 = 7;
    sub_1000C62B4(v36, (uint64_t)v37, v38, v39, v40, v41, v42);

    sub_1000C6714();
    sub_1000C6554(*(void *)(v9 + 256));
    sub_1000939C0();
    sub_100093280();
    sub_1000C60EC();
    return v43(v43, v44, v45, v46, v47, v48);
  }

uint64_t sub_1000B7B1C()
{
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = v1;
  if (v1) {
    swift_bridgeObjectRelease(*(void *)(v0 + 272));
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000B7B64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t *a13, uint64_t a14, void *a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  uint64_t v31 = *(void **)(v28 + 152);

  a15 = 0LL;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v31, &a15, &type metadata for String);
  uint64_t v32 = *(void *)(v28 + 272);
  if (a15)
  {
    char v33 = sub_10012AC8C(*(void *)(v28 + 264), v32, a15);
    sub_10007B980();
    if ((v33 & 1) != 0)
    {

      sub_1000C6714();
      swift_task_dealloc(*(void *)(v28 + 256));
      sub_100093280();
      sub_100093124();
      sub_10009C714();
      sub_1000AA7B8();
      return v36(v34, v35, v36, v37, v38, v39, v40, v41, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
    }

    a13 = (uint64_t *)(v28 + 200);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v55 = *(void *)(v28 + 216);
    id v57 = *(void **)(v28 + 264);
    unint64_t v56 = *(void *)(v28 + 272);
    sub_100079604(*(void *)(v28 + 232), (uint64_t)qword_10033E1A8);
    sub_1000C64EC();
    a15 = 0LL;
    a16 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(28LL);
    swift_bridgeObjectRelease(a16);
    a15 = v57;
    a16 = v56;
    v58._object = (void *)0x80000001002A0210LL;
    v58._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v58);
    uint64_t v59 = a16;
    uint64_t v60 = *(void *)(v55 + 16);
    a10 = *(void *)(v55 + 8);
    a11 = a15;
    os_log_type_t v62 = static os_log_type_t.error.getter(v61);
    sub_100085EE8(v60);
    sub_100085EE8(v59);
    uint64_t v63 = (os_log_s *)sub_100093C38();
    if (os_log_type_enabled(v63, v62))
    {
      a12 = v31;
      uint64_t v64 = sub_10007B9FC(22LL);
      a9 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v64 = 136446466;
      sub_1000B2110();
      a14 = v65;
      a15 = v66;
      a16 = v67;
      swift_bridgeObjectRetain(v60);
      sub_1000B2204(a10);
      sub_100085F14();
      sub_10009C494();
      *a13 = sub_10008620C((uint64_t)a15, v68, &a14);
      sub_1000C6390((uint64_t)a13, v28 + 208);
      sub_10007B980();
      sub_10007D974(v60);
      *(_WORD *)(v64 + 12) = 2082;
      sub_10008618C();
      *(void *)(v28 + 20_Block_object_dispose(va, 8) = sub_1000C6228((uint64_t)a11, v69, &a14);
      sub_100086194(v28 + 208, v28 + 216);
      sub_100085E64(v59);
      sub_100086038((void *)&_mh_execute_header, v63, v62, "%{public}s%{public}s", (uint8_t *)v64);
      sub_100086030(a9, v70, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(a9);
      uint64_t v71 = v64;
      uint64_t v31 = a12;
      sub_10007B974(v71);

      sub_100085FB4();
    }

    else
    {
      sub_10007D974(v60);
      sub_100085E64(v59);
    }

    uint64_t v73 = *(void **)(v28 + 216);
    uint64_t v72 = *(void **)(v28 + 224);
    sub_100085BC4(*(void *)(v28 + 240), type metadata accessor for SKLogger);
    unint64_t v83 = sub_1000C4C38();
    uint64_t v75 = sub_100093030((uint64_t)&unk_1002EC8A0, v83);
    char v82 = 0;
  }

  else
  {
    swift_bridgeObjectRelease(v32);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_100079604(*(void *)(v28 + 232), (uint64_t)qword_10033E1A8);
    sub_1000C64EC();
    a15 = 0LL;
    a16 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(59LL);
    v43._countAndFlagsBits = 0xD000000000000039LL;
    v43._object = (void *)0x80000001002A01D0LL;
    String.append(_:)(v43);
    id v44 = [v31 description];
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);

    sub_10009C350(v45);
    uint64_t v46 = sub_1000930DC();
    uint64_t v47 = a15;
    uint64_t v48 = a16;
    os_log_type_t v49 = static os_log_type_t.error.getter(v46);
    sub_100085EE8(v48);
    uint64_t v50 = (os_log_s *)sub_100093C38();
    if (sub_1000B22A4(v50))
    {
      a12 = v31;
      uint64_t v51 = sub_10007B9FC(22LL);
      uint64_t v52 = (void *)sub_10007B9FC(64LL);
      a15 = v52;
      *(_DWORD *)uint64_t v51 = 136446466;
      a13 = (uint64_t *)(v28 + 200);
      *(void *)(v28 + 184) = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&a15);
      sub_1000C6390(v28 + 184, v28 + 192);
      *(_WORD *)(v51 + 12) = 2082;
      sub_10008618C();
      *(void *)(v28 + 192) = sub_1000C6228((uint64_t)v47, v53, (uint64_t *)&a15);
      sub_1000C6390(v28 + 192, v28 + 200);
      sub_100085E64(v48);
      sub_100086038((void *)&_mh_execute_header, v50, v49, "%{public}s%{public}s", (uint8_t *)v51);
      sub_100086030((uint64_t)v52, v54, (uint64_t)&type metadata for Any + 8);
      sub_10007B974((uint64_t)v52);
      sub_10007B974(v51);

      sub_100085FB4();
    }

    else
    {
      sub_100085E64(v48);
    }

    uint64_t v73 = *(void **)(v28 + 216);
    uint64_t v72 = *(void **)(v28 + 224);
    sub_100085BC4(*(void *)(v28 + 248), type metadata accessor for SKLogger);
    unint64_t v74 = sub_10009BB88();
    uint64_t v75 = sub_100093030((uint64_t)&type metadata for StoreKitInternalError, v74);
    char v82 = 7;
  }

  *uint64_t v76 = v82;
  swift_willThrow(v75, v76, v77, v78, v79, v80, v81);

  sub_1000C4DC0(v73);
  sub_1000C6554(*(void *)(v28 + 256));
  sub_1000931C8();
  sub_100093280();
  sub_1000AA7B8();
  return v84(v84, v85, v86, v87, v88, v89, v90, v91, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t sub_1000B80A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 280);
  uint64_t v9 = *(void **)(v7 + 224);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  sub_1000C6714();
  sub_1000C6554(*(void *)(v7 + 256));
  sub_1000931C8();
  sub_100093280();
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000B8108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  v7[16] = a2;
  v7[17] = a3;
  v7[15] = a1;
  uint64_t v8 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  v7[22] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  v7[23] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[24] = swift_task_alloc(v10);
  v7[25] = swift_task_alloc(v10);
  v7[26] = swift_task_alloc(v10);
  v7[27] = swift_task_alloc(v10);
  v7[28] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  v7[29] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[30] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[31] = swift_task_alloc(v13);
  v7[32] = swift_task_alloc(v13);
  unint64_t v14 = (*(void *)(*(void *)(sub_10007B1FC(&qword_10032C480) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[33] = swift_task_alloc(v14);
  v7[34] = swift_task_alloc(v14);
  v7[35] = swift_task_alloc(v14);
  v7[36] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  v7[37] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v7[38] = v16;
  uint64_t v17 = *(void *)(v16 + 64);
  v7[39] = v17;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v7[40] = swift_task_alloc(v18);
  v7[41] = swift_task_alloc(v18);
  v7[42] = swift_task_alloc(v18);
  v7[43] = swift_task_alloc(v18);
  return swift_task_switch(sub_1000B82A0, 0LL, 0LL);
}

#error "1000B83E4: call analysis failed (funcsize=91)"
uint64_t sub_1000B8418()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v2 = (void *)*v1;
  uint64_t v9 = v2;
  sub_10009C788(v2[49], &v9);
  uint64_t v3 = v2[30];
  if (v0)
  {
    sub_1000C6290();
    id v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    v2[65] = v4;
  }

  else
  {
    id v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    v2[50] = v4;
  }

  sub_1000C6730(v4);
  sub_100093420();
  return sub_1000AA484(v5, v6, v7);
}

#error "1000B864C: call analysis failed (funcsize=254)"
uint64_t sub_1000B88CC()
{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sub_1000C6454();
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[51];
  uint64_t v2 = v0[31];
  uint64_t v3 = v0[29];
  sub_1000C651C();
  *(void *)(v6 + 424) = v4;
  *(void *)(v6 + 432) = v5;
  sub_1000C652C(v7);
  sub_10007B980();
  v1(v2, v3);
  sub_100093420();
  return sub_1000C5F5C(v8, v9, v10);
}

uint64_t sub_1000B8930( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void), uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28)
{
  a27 = v29;
  a28 = v30;
  a26 = v28;
  sub_1000875FC(v28[35], v31, v32, v28[37]);
  v28[4] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_1000C65D4();
  sub_1000C65D4();
  char v33 = (os_log_s *)v28[2];
  if (v33 && *((void *)v33 + 2))
  {
    sub_10007B980();
    uint64_t v34 = (void *)swift_task_alloc(dword_10032AB34);
    v28[55] = v34;
    *uint64_t v34 = v28;
    v34[1] = sub_1000B8F64;
    sub_1000AA7B8();
    return sub_1000BC6B0(v35, v36, v37);
  }

  else
  {
    uint64_t v40 = v28[44];
    uint64_t v39 = v28[45];
    uint64_t v41 = v28[19];
    a16 = &type metadata for String;
    a13 = v40;
    a14 = v39;
    swift_bridgeObjectRetain(v39);
    sub_1000C5F40((uint64_t)&a13);
    uint64_t v42 = *(void *)(v41 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
    if (v42)
    {
      a16 = &type metadata for UInt64;
      a13 = v42;
      sub_1000C5F20((uint64_t)&a13);
    }

    uint64_t v43 = v28[54];
    if (v43)
    {
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v44 = v28[21];
      v28[57] = sub_100079604(v28[23], (uint64_t)qword_10033E1A8);
      sub_1000C600C();
      os_log_type_t v46 = static os_log_type_t.default.getter(v45);
      uint64_t v47 = sub_100085EE8(v44);
      uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
      BOOL v49 = sub_1000B22A4(v48);
      uint64_t v50 = v28[21];
      if (v49)
      {
        uint64_t v51 = v28[20];
        uint64_t v52 = (uint8_t *)sub_10007B9FC(22LL);
        a12 = (uint64_t (*)(void))sub_10007B9FC(64LL);
        a17 = (uint64_t)a12;
        *(_DWORD *)uint64_t v52 = 136446466;
        sub_1000C616C();
        sub_1000AAB84(v51);
        sub_100085F14();
        sub_1000AABA8();
        v28[11] = sub_10008620C(a13, v53, &a17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 11, v28 + 12, v52 + 4);
        sub_10007B980();
        sub_10007D974(v50);
        sub_1000861F0();
        v28[12] = sub_1000AB050(44LL, 0x80000001002A00C0LL, &a17);
        sub_100086194((uint64_t)(v28 + 12), (uint64_t)(v28 + 13));
        sub_100086038((void *)&_mh_execute_header, v48, v46, "%{public}s%{public}s", v52);
        sub_100086030((uint64_t)a12, v54, (uint64_t)&type metadata for Any + 8);
        sub_10007B974((uint64_t)a12);
        sub_10007B974((uint64_t)v52);
      }

      else
      {
        sub_10007D974(v28[21]);
      }

      uint64_t v70 = v28[53];
      uint64_t v71 = (void *)v28[19];
      sub_100085BC4(v28[27], type metadata accessor for SKLogger);
      a16 = &type metadata for String;
      a13 = v70;
      a14 = v43;
      sub_1000C5F88((uint64_t)&a13, 0x6D61466E656B6F74LL, 0xED00006449796C69LL);
      uint64_t v72 = qword_100328C08;
      id v73 = v71;
      if (v72 != -1) {
        swift_once(&qword_100328C08, sub_10012BAC4);
      }
      uint64_t v75 = v28[20];
      uint64_t v74 = v28[21];
      uint64_t v76 = (void *)v28[19];
      uint64_t v77 = (void *)qword_10033E290;
      v28[58] = v28[4];
      objc_allocWithZone((Class)sub_1000C61F4());
      id v78 = v77;
      sub_10007BA3C();
      sub_1000C6014(v76, v78, 4LL, 0);
      v28[59] = v79;
      uint64_t v80 = (void *)(v79 + OBJC_IVAR____TtC9storekitd7Request_logKey);
      void *v80 = v75;
      v80[1] = v74;
      sub_100085FEC();
      sub_10007BA44();
      uint64_t v81 = (void *)sub_1000C5FBC((uint64_t)&unk_10032A080);
      v28[60] = v81;
      *uint64_t v81 = v28;
      v81[1] = sub_1000B9538;
      uint64_t v82 = v28[42];
    }

    else
    {
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v55 = sub_1000C66B8();
      sub_100079604(v55, (uint64_t)qword_10033E1A8);
      sub_1000C61DC();
      sub_1000C6410();
      unint64_t v56 = sub_1000C6534();
      sub_1000C6424(v56, (uint64_t)"Requesting new token family and refreshing tokens for ");
      sub_10007BA3C();
      sub_100093624((uint64_t)&unk_10032AB28);
      uint64_t v57 = sub_10007BA44();
      uint64_t v59 = a13;
      uint64_t v58 = a14;
      os_log_type_t v60 = static os_log_type_t.default.getter(v57);
      sub_100085EE8((uint64_t)(v28 + 3));
      sub_100085EE8(v58);
      uint64_t v61 = (os_log_s *)sub_100093B00();
      BOOL v62 = sub_1000C6084(v61);
      uint64_t v63 = v28[21];
      if (v62)
      {
        a12 = (uint64_t (*)(void))(v28 + 7);
        uint64_t v64 = v28[20];
        uint64_t v65 = sub_10007B9FC(22LL);
        uint64_t v66 = sub_10007B9FC(64LL);
        a17 = v66;
        *(_DWORD *)uint64_t v65 = 136446466;
        sub_1000C616C();
        sub_1000AAB84(v64);
        sub_100085F14();
        sub_1000AABA8();
        v28[7] = sub_10008620C(a13, v67, &a17);
        sub_1000C6004((uint64_t)(v28 + 7), (uint64_t)(v28 + 8));
        sub_10007B980();
        sub_10007D974(v63);
        *(_WORD *)(v65 + 12) = 2082;
        sub_10007BA3C();
        v28[8] = sub_100086308(v59, v68, &a17);
        sub_100086194((uint64_t)(v28 + 8), (uint64_t)(v28 + 9));
        sub_100085E64(v58);
        sub_100086038((void *)&_mh_execute_header, v33, v60, "%{public}s%{public}s", (uint8_t *)v65);
        sub_100086030(v66, v69, (uint64_t)&type metadata for Any + 8);
        sub_10007B974(v66);
        sub_10007B974(v65);

        sub_10007BA44();
      }

      else
      {
        sub_10007D974(v28[21]);
        sub_100085E64(v58);
      }

      unint64_t v83 = (void *)v28[19];
      sub_100085BC4(v28[25], type metadata accessor for SKLogger);
      uint64_t v84 = qword_100328C10;
      id v85 = v83;
      if (v84 != -1) {
        swift_once(&qword_100328C10, sub_10012BB3C);
      }
      id v86 = objc_allocWithZone((Class)sub_1000C61F4());
      id v87 = sub_1000C6474();
      sub_1000C5FA0(v87);
      v28[62] = v88;
      sub_1000C5FD0(v88, OBJC_IVAR____TtC9storekitd7Request_logKey);
      sub_10007BA44();
      uint64_t v89 = (void *)sub_1000C5FBC((uint64_t)&dword_10032A090);
      v28[63] = v89;
      *uint64_t v89 = v28;
      v89[1] = sub_1000B9E28;
      uint64_t v82 = v28[34];
    }

    return sub_1000C6094(v82, a12);
  }

uint64_t sub_1000B8F64()
{
  *(void *)(v1 + 44_Block_object_dispose(va, 8) = v0;
  sub_1000C652C(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000B8FA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void), uint64_t a13, unint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28)
{
  a27 = v31;
  a28 = v32;
  a26 = v28;
  v28[4] = v28[56];
  uint64_t v34 = v28[44];
  unint64_t v33 = v28[45];
  uint64_t v35 = v28[19];
  a16 = &type metadata for String;
  a13 = v34;
  a14 = v33;
  swift_bridgeObjectRetain(v33);
  sub_1000C5F40((uint64_t)&a13);
  uint64_t v36 = *(void *)(v35 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
  if (v36)
  {
    a16 = &type metadata for UInt64;
    a13 = v36;
    sub_1000C5F20((uint64_t)&a13);
  }

  unint64_t v37 = v28[54];
  if (v37)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v38 = v28[21];
    v28[57] = sub_100079604(v28[23], (uint64_t)qword_10033E1A8);
    sub_1000C600C();
    os_log_type_t v40 = static os_log_type_t.default.getter(v39);
    uint64_t v41 = sub_100085EE8(v38);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    BOOL v43 = sub_1000C63C8(v42);
    uint64_t v44 = v28[21];
    if (v43)
    {
      a12 = (uint64_t (*)(void))(v28 + 11);
      uint64_t v45 = v28[20];
      uint64_t v46 = sub_10007B9FC(22LL);
      uint64_t v47 = sub_10007B9FC(64LL);
      a17 = v47;
      *(_DWORD *)uint64_t v46 = 136446466;
      a13 = 91LL;
      a14 = 0xE100000000000000LL;
      sub_1000AA78C();
      sub_100086114(v45);
      sub_100085F14();
      sub_100086144();
      v28[11] = sub_10008620C(a13, v48, &a17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28 + 11, v28 + 12, v46 + 4);
      sub_10007B980();
      sub_10007D974(v44);
      *(_WORD *)(v46 + 12) = 2082;
      v28[12] = sub_1000AB050(44LL, 0x80000001002A00C0LL, &a17);
      sub_100086194((uint64_t)(v28 + 12), (uint64_t)(v28 + 13));
      sub_100086038((void *)&_mh_execute_header, v42, v40, "%{public}s%{public}s", (uint8_t *)v46);
      sub_100086030(v47, v49, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v47);
      sub_10007B974(v46);
    }

    else
    {
      sub_10007D974(v28[21]);
    }

    uint64_t v65 = v28[53];
    uint64_t v66 = (void *)v28[19];
    sub_100085BC4(v28[27], type metadata accessor for SKLogger);
    a16 = &type metadata for String;
    a13 = v65;
    a14 = v37;
    sub_1000C5F88((uint64_t)&a13, 0x6D61466E656B6F74LL, 0xED00006449796C69LL);
    uint64_t v67 = qword_100328C08;
    id v68 = v66;
    if (v67 != -1) {
      swift_once(&qword_100328C08, sub_10012BAC4);
    }
    uint64_t v70 = v28[20];
    uint64_t v69 = v28[21];
    uint64_t v71 = (void *)v28[19];
    uint64_t v72 = (void *)qword_10033E290;
    v28[58] = v28[4];
    objc_allocWithZone((Class)sub_1000C61F4());
    id v73 = v72;
    sub_10007BA3C();
    sub_1000C6014(v71, v73, 4LL, 0);
    v28[59] = v74;
    uint64_t v75 = (void *)(v74 + OBJC_IVAR____TtC9storekitd7Request_logKey);
    *uint64_t v75 = v70;
    v75[1] = v69;
    sub_100085FEC();
    sub_10007BA44();
    uint64_t v76 = (void *)sub_1000C5FBC((uint64_t)&unk_10032A080);
    v28[60] = v76;
    *uint64_t v76 = v28;
    v76[1] = sub_1000B9538;
    uint64_t v77 = v28[42];
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v50 = sub_1000C66B8();
    sub_100079604(v50, (uint64_t)qword_10033E1A8);
    sub_1000C61DC();
    sub_1000C6410();
    unint64_t v51 = sub_1000C6534();
    sub_1000C6424(v51, (uint64_t)"Requesting new token family and refreshing tokens for ");
    sub_10007BA3C();
    sub_100093624(v30);
    uint64_t v52 = sub_10007BA44();
    uint64_t v54 = a13;
    uint64_t v53 = a14;
    os_log_type_t v55 = static os_log_type_t.default.getter(v52);
    sub_100085EE8((uint64_t)&type metadata for String);
    sub_100085EE8(v53);
    unint64_t v56 = (os_log_s *)sub_100093B00();
    BOOL v57 = sub_1000C6084(v56);
    uint64_t v58 = v28[21];
    if (v57)
    {
      uint64_t v59 = v28[20];
      uint64_t v60 = sub_10007B9FC(22LL);
      a12 = (uint64_t (*)(void))v54;
      uint64_t v61 = sub_10007B9FC(64LL);
      a17 = v61;
      *(_DWORD *)uint64_t v60 = 136446466;
      sub_1000C616C();
      sub_1000AAB84(v59);
      sub_100085F14();
      sub_1000AABA8();
      v28[7] = sub_10008620C(a13, v62, &a17);
      sub_1000C6004((uint64_t)(v28 + 7), (uint64_t)(v28 + 8));
      sub_10007B980();
      sub_10007D974(v58);
      *(_WORD *)(v60 + 12) = 2082;
      sub_10007BA3C();
      v28[8] = sub_100086308((uint64_t)a12, v63, &a17);
      sub_100086194((uint64_t)(v28 + 8), (uint64_t)(v28 + 9));
      sub_100085E64(v53);
      sub_100086038((void *)&_mh_execute_header, v29, v55, "%{public}s%{public}s", (uint8_t *)v60);
      sub_100086030(v61, v64, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v61);
      sub_10007B974(v60);

      sub_10007BA44();
    }

    else
    {
      sub_10007D974(v28[21]);
      sub_100085E64(v53);
    }

    id v78 = (void *)v28[19];
    sub_100085BC4(v28[25], type metadata accessor for SKLogger);
    uint64_t v79 = qword_100328C10;
    id v80 = v78;
    if (v79 != -1) {
      swift_once(&qword_100328C10, sub_10012BB3C);
    }
    id v81 = objc_allocWithZone((Class)sub_1000C61F4());
    id v82 = sub_1000C6474();
    sub_1000C5FA0(v82);
    v28[62] = v83;
    sub_1000C5FD0(v83, OBJC_IVAR____TtC9storekitd7Request_logKey);
    sub_10007BA44();
    uint64_t v84 = (void *)sub_1000C5FBC((uint64_t)&dword_10032A090);
    v28[63] = v84;
    *uint64_t v84 = v28;
    v84[1] = sub_1000B9E28;
    uint64_t v77 = v28[34];
  }

  return sub_1000C6094(v77, a12);
}

uint64_t sub_1000B9538()
{
  *(void *)(v0 + 48_Block_object_dispose(va, 8) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 464));
    sub_10007B980();
  }

  sub_100093420();
  return sub_1000C5F5C(v4, v5, v6);
}

#error "1000B9828: call analysis failed (funcsize=504)"
uint64_t sub_1000B9E28()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sub_1000C61E4();
  sub_1000C666C(v2);
  *(void *)(v0 + 512) = v1;
  swift_task_dealloc(v3);
  if (v1) {
    swift_bridgeObjectRelease(*(void *)(v0 + 360));
  }
  sub_100093420();
  return sub_1000C5F5C(v4, v5, v6);
}

#error "1000B9F80: call analysis failed (funcsize=231)"
uint64_t sub_1000BA278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  sub_1000875FC(v3[36], a2, a3, v3[37]);
  v3[51] = v3[65];
  sub_100085298(v3[36], &qword_10032C480);
  static Date.now.getter();
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_10032AB4C);
  v3[52] = (uint64_t)v4;
  uint64_t *v4 = v3;
  v4[1] = (uint64_t *)sub_1000B88CC;
  uint64_t v5 = sub_1000C6298(v3[44]);
  return sub_1000BD624(v5, v6, v7, v8, v9, v10, v11);
}

#error "1000BA36C: call analysis failed (funcsize=37)"
#error "1000BA404: call analysis failed (funcsize=37)"
uint64_t sub_1000BA428(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  uint64_t v8 = type metadata accessor for SKLogger(0LL);
  v5[16] = v8;
  v5[17] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v5[18] = v9;
  unint64_t v10 = *(void *)(v9 - 8);
  v5[19] = v10;
  v5[20] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000C49D4(a2);
  uint64_t v11 = dword_10032AB14;
  uint64_t v12 = a3;
  unint64_t v13 = (void *)swift_task_alloc(v11);
  v5[21] = v13;
  *unint64_t v13 = v5;
  v13[1] = sub_1000BA4F0;
  return sub_1000B7630((uint64_t)a2, (uint64_t)v12);
}

uint64_t sub_1000BA4F0()
{
  uint64_t v3 = v0[21];
  uint64_t v4 = *v2;
  v0[22] = v5;
  v0[23] = v6;
  sub_1000C652C(v3);
  if (v1)
  {
    swift_task_dealloc(v0[20]);
    sub_1000931C8();
    return sub_1000C5EB8(*(uint64_t (**)(void))(v4 + 8));
  }

  else
  {
    sub_100093420();
    return sub_1000C5F5C(v8, v9, v10);
  }

#error "1000BA8C8: call analysis failed (funcsize=268)"
uint64_t sub_1000BA9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_1000C6454();
  sub_1000C651C();
  *(void *)(v1 + 200) = v0;
  sub_1000C652C(v2);
  sub_100093420();
  return sub_100092F20();
}

#error "1000BACF0: call analysis failed (funcsize=230)"
uint64_t sub_1000BAE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v16 = (void *)*v5;
  uint64_t v10 = v16;
  sub_1000C666C(&v16);
  v10[28] = v4;
  swift_task_dealloc(v11);
  if (!v4)
  {
    v10[29] = a4;
    v10[30] = a3;
    v10[31] = a2;
    v10[32] = a1;
  }

  sub_100093420();
  return sub_1000C5F5C(v12, v13, v14);
}

uint64_t sub_1000BAE8C()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v4 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v5 = (void *)v0[26];
  uint64_t v6 = (void *)v0[11];
  void v6[3] = &type metadata for ExternalPurchaseTokenV1Response;
  void v6[4] = &off_1002EC9F0;
  uint64_t v7 = (void *)sub_1000AA314((uint64_t)&unk_1002EC588, 48LL);
  *uint64_t v6 = v7;

  void v7[2] = v1;
  v7[3] = v2;
  void v7[4] = v3;
  v7[5] = v4;
  sub_1000939C0();
  sub_1000931C8();
  uint64_t v8 = (uint64_t (*)(void))sub_100093CFC();
  return v8();
}

uint64_t sub_1000BAF2C()
{
  swift_task_dealloc(*(void *)(v0 + 160));
  sub_1000931C8();
  return sub_1000C5EB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BAF68(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 344) = a4;
  *(void *)(v5 + 352) = a5;
  *(_BYTE *)(v5 + 424) = a2;
  *(void *)(v5 + 32_Block_object_dispose(va, 8) = a1;
  *(void *)(v5 + 336) = a3;
  *(void *)(v5 + 360) = sub_100086224();
  *(void *)(v5 + 36_Block_object_dispose(va, 8) = sub_100093010();
  *(void *)(v5 + 376) = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000BAFC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  sub_1000C4990(*(void *)(v26 + 328), v26 + 192);
  sub_10007B1FC(&qword_10032AB00);
  uint64_t v29 = sub_10009C714();
  if (sub_10009369C(v29, v30, v31, v32))
  {
    uint64_t v33 = *(void *)(v26 + 336);
    char v34 = *(_BYTE *)(v26 + 424);
    uint64_t v35 = *(void *)(v26 + 248);
    uint64_t v36 = *(void *)(v26 + 256);
    uint64_t v37 = sub_10007B1FC((uint64_t *)&unk_10032C440);
    uint64_t inited = swift_initStackObject(v37, v26 + 16);
    *(_OWORD *)(inited + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = xmmword_10027ACD0;
    *(void *)(inited + 32) = 0x6449656C646E7562LL;
    *(void *)(inited + 40) = 0xE800000000000000LL;
    uint64_t v39 = v33 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID;
    uint64_t v40 = *(void *)(v33 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
    *(void *)(v26 + 384) = v40;
    uint64_t v41 = *(void *)(v39 + 8);
    *(void *)(v26 + 392) = v41;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = v40;
    *(void *)(inited + 56) = v41;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = 0xD000000000000012LL;
    *(void *)(inited + 8_Block_object_dispose(va, 8) = 0x800000010029CCB0LL;
    *(void *)(inited + 96) = v35;
    *(void *)(inited + 104) = v36;
    *(void *)(inited + 120) = &type metadata for String;
    *(void *)(inited + 12_Block_object_dispose(va, 8) = 0x6174536E656B6F74LL;
    unint64_t v42 = 0xD00000000000001CLL;
    if ((v34 & 1) == 0) {
      unint64_t v42 = 0xD000000000000017LL;
    }
    unint64_t v43 = 0x800000010029CC70LL;
    if ((v34 & 1) == 0) {
      unint64_t v43 = 0x800000010029CC50LL;
    }
    *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for String;
    *(void *)(inited + 136) = 0xEB00000000737574LL;
    *(void *)(inited + 144) = v42;
    *(void *)(inited + 152) = v43;
    swift_bridgeObjectRetain(v41);
    sub_10007B980();
    *(void *)(v26 + 280) = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    uint64_t v44 = *(void *)(v33 + OBJC_IVAR____TtC9storekitd6Client_storeItemID);
    if (v44)
    {
      a15 = &type metadata for UInt64;
      a12 = v44;
      sub_10012A9E0((uint64_t)&a12, 0x496D616441707061LL, 0xE900000000000064LL);
    }

    uint64_t v45 = qword_100328C18;
    id v46 = *(id *)(v26 + 336);
    if (v45 == -1)
    {
      uint64_t v47 = v46;
    }

    else
    {
      swift_once(&qword_100328C18, sub_10012BBB4);
      uint64_t v47 = *(void **)(v26 + 336);
    }

    id v48 = objc_allocWithZone((Class)sub_1000C61F4());
    id v49 = sub_1000C6474();
    sub_1000C6014(v47, v49, 4LL, 0);
    *(void *)(v26 + 400) = v50;
    sub_1000C5FD0(v50, OBJC_IVAR____TtC9storekitd7Request_logKey);
    sub_10007BA44();
    id v68 = (uint64_t (*)(void))((char *)&dword_10032A060 + dword_10032A060);
    unint64_t v51 = (void *)swift_task_alloc(unk_10032A064);
    *(void *)(v26 + 40_Block_object_dispose(va, 8) = v51;
    *unint64_t v51 = v26;
    v51[1] = sub_1000BB3F4;
    return sub_1000AA2C4(v68);
  }

  else
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v52 = *(os_log_s **)(v26 + 352);
    sub_100079604(*(void *)(v26 + 360), (uint64_t)qword_10033E1A8);
    sub_1000C600C();
    os_log_type_t v54 = static os_log_type_t.fault.getter(v53);
    uint64_t v55 = sub_100085EE8((uint64_t)v52);
    unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    BOOL v57 = sub_1000C5F64(v56);
    uint64_t v58 = *(void *)(v26 + 352);
    if (v57)
    {
      uint64_t v59 = *(void *)(v26 + 344);
      uint64_t v60 = (uint8_t *)sub_10007B9FC(22LL);
      uint64_t v61 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v60 = 136446466;
      a11 = v61;
      a12 = 91LL;
      a13 = 0xE100000000000000LL;
      sub_1000AA78C();
      sub_100086114(v59);
      sub_100085F14();
      sub_100086144();
      *(void *)(v26 + 296) = sub_10008620C(a12, v62, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26 + 296, v26 + 304, v60 + 4);
      sub_10007B980();
      sub_10007D974(v58);
      sub_1000C5FF4();
      sub_1000C6444();
      *(void *)(v26 + 28_Block_object_dispose(va, 8) = sub_10007A488(v63, v64, v65);
      sub_100086194(v26 + 288, v26 + 296);
      sub_100086038((void *)&_mh_execute_header, v52, v54, "%{public}s%{public}s", v60);
      sub_100086030(v61, v66, (uint64_t)&type metadata for Any + 8);
      sub_10007B974(v61);
      sub_10007B974((uint64_t)v60);
    }

    else
    {
      sub_10007D974(*(void *)(v26 + 352));
    }

    sub_100085BC4(*(void *)(v26 + 376), type metadata accessor for SKLogger);
    sub_1000C66E0();
    sub_1000939C0();
    return sub_1000AA2C4(*(uint64_t (**)(void))(v26 + 8));
  }

uint64_t sub_1000BB3F4()
{
  *(void *)(v1 + 4sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = v0;
  swift_task_dealloc(v2);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000BB440()
{
  sub_1000C66E0();
  sub_1000939C0();
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

#error "1000BB6A4: call analysis failed (funcsize=159)"
unint64_t sub_1000BB714(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD00000000000001CLL;
  }
  else {
    return 0xD000000000000017LL;
  }
}

uint64_t sub_1000BB750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  void v6[4] = a3;
  void v6[5] = a4;
  void v6[2] = a1;
  void v6[3] = a2;
  sub_100093420();
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000BB774()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = sub_1000D8434();
  uint64_t v4 = v3;
  v0[8] = v2;
  v0[9] = v3;
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v0[2];
  if (v5)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = v6 + *(int *)(sub_1000C654C() + 24);
    uint64_t v9 = (uint64_t **)swift_task_alloc(dword_10032AA84);
    v0[10] = (uint64_t)v9;
    *uint64_t v9 = v0;
    v9[1] = (uint64_t *)sub_1000BB8B0;
    return sub_1000BB9AC(v7, v5, v0[3], v0[4], v2, v4, v8, v0[6]);
  }

  else if ((*(_BYTE *)v6 & 1) != 0)
  {
    uint64_t v11 = (uint64_t **)swift_task_alloc(dword_10032AA7C);
    v0[12] = (uint64_t)v11;
    void *v11 = v0;
    v11[1] = (uint64_t *)sub_1000BB970;
    uint64_t v12 = sub_1000C6298(v0[2]);
    return sub_1000BC23C(v12, v13, v14, v15, v16, v17, v18);
  }

  else
  {
    Swift::String v19 = (uint64_t **)swift_task_alloc(dword_10032AA74);
    v0[11] = (uint64_t)v19;
    *Swift::String v19 = v0;
    v19[1] = (uint64_t *)sub_1000BB910;
    sub_1000C6298(v0[3]);
    sub_1000C65F0();
    return sub_1000BBE08(v20, v21, v22, v23, v24, v25);
  }

uint64_t sub_1000BB8B0()
{
  uint64_t v1 = *v0;
  uint64_t v11 = v1;
  sub_10009C788(v1[10], &v11);
  uint64_t v2 = (uint64_t ***)swift_task_alloc(dword_10032AA7C);
  v1[12] = (uint64_t)v2;
  uint64_t *v2 = v0;
  v2[1] = (uint64_t **)sub_1000BB970;
  uint64_t v3 = sub_1000C6298(v1[2]);
  return sub_1000C6314(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000BB910()
{
  uint64_t v1 = *v0;
  uint64_t v11 = v1;
  sub_10009C788(v1[11], &v11);
  uint64_t v2 = (uint64_t ***)swift_task_alloc(dword_10032AA7C);
  v1[12] = (uint64_t)v2;
  uint64_t *v2 = v0;
  v2[1] = (uint64_t **)sub_1000BB970;
  uint64_t v3 = sub_1000C6298(v1[2]);
  return sub_1000C6314(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000BB970()
{
  if (v1) {
    sub_1000C6290();
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  uint64_t v3 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000C5EB8(v3);
}

uint64_t sub_1000BB9AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v14;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  v8[11] = a2;
  v8[12] = a3;
  v8[10] = a1;
  uint64_t v9 = type metadata accessor for Date(0LL);
  v8[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[20] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v8[21] = v11;
  v8[22] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SKLogger(0LL);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000BBA48, 0LL, 0LL);
}

#error "1000BBAE4: call analysis failed (funcsize=103)"
uint64_t sub_1000BBC10()
{
  uint64_t v0;
  uint64_t v1;
  sub_1000B6CB0(type metadata accessor for ExternalGatewayTokenFamilyStore);
  *(void *)(v0 + 20_Block_object_dispose(va, 8) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000BBC4C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  uint64_t v27 = v26[21];
  uint64_t v28 = v26[22];
  uint64_t v29 = v26[19];
  uint64_t v30 = v26[20];
  uint64_t v47 = v26[18];
  id v48 = (id)v26[26];
  uint64_t v31 = v26[15];
  uint64_t v45 = v26[14];
  uint64_t v46 = v26[17];
  uint64_t v32 = v26[13];
  uint64_t v33 = v26[11];
  uint64_t v43 = v26[12];
  uint64_t v44 = v26[10];
  (*(void (**)(uint64_t, void, uint64_t))(v30 + 16))(v28, v26[16], v29);
  uint64_t v34 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v35 = (v34 + 64) & ~v34;
  unint64_t v36 = (v27 + v35 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v37 = (char *)swift_allocObject(&unk_1002EC3D0, v36 + 16, v34 | 7);
  *((void *)v37 + 2) = v43;
  *((void *)v37 + 3) = v32;
  *((void *)v37 + 4) = v45;
  *((void *)v37 + 5) = v31;
  *((void *)v37 + 6) = v44;
  *((void *)v37 + 7) = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(&v37[v35], v28, v29);
  uint64_t v38 = (uint64_t *)&v37[v36];
  uint64_t *v38 = v46;
  v38[1] = v47;
  uint64_t v39 = sub_1000AA314((uint64_t)&unk_1002EC3F8, 32LL);
  v26[2] = _NSConcreteStackBlock;
  *(void *)(v39 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = sub_1000C211C;
  *(void *)(v39 + 24) = v37;
  v26[6] = sub_1000B1C00;
  v26[7] = v39;
  v26[3] = 1107296256LL;
  v26[4] = sub_100121CD4;
  v26[5] = &unk_1002EC410;
  uint64_t v40 = _Block_copy(v26 + 2);
  uint64_t v41 = v26[7];
  sub_10009C738();
  sub_1000930E4();
  sub_10007BA3C();
  sub_10008618C();
  swift_retain(v39);
  swift_release(v41);
  [v48 modifyUsingTransaction:v40];

  _Block_release(v40);
  LOBYTE(v35) = sub_1000B22F8(v39, (uint64_t)"", 115LL, 488LL, 22LL);
  swift_release(v39);
  uint64_t result = sub_1000C6388();
  if ((v35 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    swift_task_dealloc(v26[24]);
    sub_1000939C0();
    return sub_1000AA2C4((uint64_t (*)(void))v26[1]);
  }

  return result;
}

uint64_t sub_1000BBE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  void v6[10] = a1;
  v6[11] = a2;
  uint64_t v7 = sub_100086224();
  uint8_t v6[16] = v7;
  v6[17] = sub_10009344C(v7);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000BBE4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v29 = v26[10];
  uint64_t v30 = (os_log_s *)v26[17];
  uint64_t v31 = v26[15];
  sub_100079604(v26[16], (uint64_t)qword_10033E1A8);
  sub_1000C61DC();
  a14 = 0LL;
  a15 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(47LL);
  swift_bridgeObjectRelease(a15);
  a14 = 0xD00000000000002DLL;
  a15 = 0x800000010029FC90LL;
  sub_1000AB094(v29);
  uint64_t v33 = a14;
  uint64_t v32 = a15;
  os_log_type_t v35 = static os_log_type_t.debug.getter(v34);
  sub_100085EE8(v31);
  sub_100085EE8(v32);
  unint64_t v36 = (os_log_s *)sub_100093B00();
  BOOL v37 = sub_1000C6084(v36);
  uint64_t v38 = v26[15];
  if (v37)
  {
    uint64_t v39 = v26[14];
    uint64_t v50 = v33;
    uint64_t v40 = sub_10007B9FC(22LL);
    uint64_t v51 = sub_10007B9FC(64LL);
    a13 = v51;
    *(_DWORD *)uint64_t v40 = 136446466;
    sub_1000B2110();
    a14 = v41;
    a15 = v42;
    sub_1000930E4();
    sub_10009C350(v39);
    sub_100085F14();
    sub_1000930DC();
    v26[8] = sub_10008620C(a14, v43, &a13);
    sub_1000C6004((uint64_t)(v26 + 8), (uint64_t)(v26 + 9));
    sub_10007B980();
    sub_10007D974(v38);
    *(_WORD *)(v40 + 12) = 2082;
    sub_100085FEC();
    v26[9] = sub_1000B20F4(v50, v44, &a13);
    sub_100086194((uint64_t)(v26 + 9), (uint64_t)(v26 + 10));
    sub_100085E64(v32);
    sub_100086038((void *)&_mh_execute_header, v30, v35, "%{public}s%{public}s", (uint8_t *)v40);
    sub_100086030(v51, v45, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v51);
    sub_10007B974(v40);

    sub_100085EF0();
  }

  else
  {
    sub_10007D974(v26[15]);
    sub_100085E64(v32);
  }

  sub_100085BC4(v26[17], type metadata accessor for SKLogger);
  if (qword_100328AC0 != -1) {
    swift_once(&qword_100328AC0, sub_1000B6E48);
  }
  v26[18] = qword_10032A9A0;
  sub_1000C60EC();
  return swift_task_switch(v46, v47, v48);
}

uint64_t sub_1000BC0B8()
{
  *(void *)(v0 + 152) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000BC0F4()
{
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v6 = (void *)sub_1000AA314((uint64_t)&unk_1002EC4C0, 48LL);
  void v6[2] = v5;
  void v6[3] = v4;
  void v6[4] = v2;
  void v6[5] = v3;
  uint64_t v7 = sub_1000AA314((uint64_t)&unk_1002EC4E8, 32LL);
  v0[2] = _NSConcreteStackBlock;
  *(void *)(v7 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = sub_1000C4980;
  *(void *)(v7 + 24) = v6;
  v0[6] = sub_1000B1F9C;
  v0[7] = v7;
  v0[3] = 1107296256LL;
  v0[4] = sub_100121CD4;
  v0[5] = &unk_1002EC500;
  uint64_t v8 = _Block_copy(v0 + 2);
  uint64_t v9 = v0[7];
  sub_1000930E4();
  swift_retain(v7);
  sub_10008618C();
  swift_release(v9);
  [v1 modifyUsingTransaction:v8];

  _Block_release(v8);
  LOBYTE(sub_100085298(v0, v1) = sub_1000B22F8(v7, (uint64_t)"", 115LL, 513LL, 22LL);
  swift_release(v7);
  uint64_t result = sub_10009C5EC();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    swift_task_dealloc(v0[17]);
    return ((uint64_t (*)(void))v0[1])();
  }

  return result;
}

uint64_t sub_1000BC23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  uint64_t v8 = sub_10007B1FC(&qword_10032C480);
  v7[12] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  v7[13] = v9;
  v7[14] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000BC2C8, 0LL, 0LL);
}

#error "1000BC364: call analysis failed (funcsize=103)"
uint64_t sub_1000BC490()
{
  uint64_t v0;
  *(void *)(v0 + 12_Block_object_dispose(va, 8) = sub_1000B6D88();
  return sub_100092F20();
}

uint64_t sub_1000BC4C8()
{
  *(void *)(v0 + 136) = sub_1000C0DA0();
  *(void *)(v0 + 144) = 0LL;
  sub_100093420();
  return sub_1000C5FE4(v1, v2, v3);
}

uint64_t sub_1000BC518()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = (void *)v0[17];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  if (!v1) {
    uint64_t v1 = _swiftEmptyDictionarySingleton;
  }
  v0[2] = v1;
  sub_1000C2198();
  uint64_t v6 = sub_1000C654C();
  sub_10007D0AC(v3, 0LL, 1LL, v6);
  sub_10007BA3C();
  sub_10012AA54(v3, v5, v4);
  v0[19] = v0[2];
  return sub_1000AA484((uint64_t)sub_1000BC5B8, v2, 0LL);
}

uint64_t sub_1000BC5B8()
{
  uint64_t v1 = v0[18];
  sub_1000C1184(v0[19]);
  v0[20] = v1;
  swift_bridgeObjectRelease(v0[19]);
  sub_100093420();
  return sub_1000C5FE4(v2, v3, v4);
}

uint64_t sub_1000BC610()
{
  uint64_t v1 = (uint64_t (*)(void))sub_100093CFC();
  return sub_1000C5EB8(v1);
}

uint64_t sub_1000BC648()
{
  return sub_10009C2E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BC67C()
{
  return sub_10009C2E4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BC6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[36] = a2;
  v3[37] = a3;
  v3[35] = a1;
  uint64_t v4 = type metadata accessor for SKLogger(0LL);
  v3[38] = v4;
  unint64_t v5 = (*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[39] = swift_task_alloc(v5);
  v3[40] = swift_task_alloc(v5);
  v3[41] = swift_task_alloc(v5);
  v3[42] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000BC738, 0LL, 0LL);
}

uint64_t sub_1000BC738()
{
  v0[43] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (qword_100328D48 != -1) {
    swift_once(&qword_100328D48, sub_10012D118);
  }
  uint64_t v1 = (void *)qword_10033E3D0;
  uint64_t v2 = qword_100328B70;
  swift_unknownObjectRetain(qword_10033E3D0);
  if (v2 != -1) {
    swift_once(&qword_100328B70, sub_10012B1C8);
  }
  uint64_t v3 = v0 + 2;
  v0[44] = [v1 arrayForKey:qword_10033E1F8];
  swift_unknownObjectRelease(v1);
  v0[7] = v0 + 21;
  uint64_t v4 = sub_10009C260((uint64_t)sub_1000BC878);
  v0[10] = _NSConcreteStackBlock;
  unint64_t v5 = v0 + 10;
  v5[1] = 0x40000000LL;
  uint64_t v5[2] = sub_100098FC4;
  void v5[3] = &unk_1002EC5A0;
  void v5[4] = v4;
  sub_1000C66D4(v4, "valueWithCompletion:");
  return swift_continuation_await(v3);
}

uint64_t sub_1000BC878()
{
  *(void *)(v0 + 360) = v1;
  sub_100093420();
  return sub_100092F20();
}

#error "1000BCCC4: call analysis failed (funcsize=327)"
#error "1000BD200: call analysis failed (funcsize=311)"
uint64_t sub_1000BD36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  v6[6] = a5;
  v6[7] = a6;
  void v6[4] = a3;
  void v6[5] = a4;
  void v6[2] = a1;
  void v6[3] = a2;
  uint64_t v7 = sub_10007B1FC(&qword_10032C480);
  v6[8] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  void v6[9] = v8;
  void v6[10] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000BD3F4, 0LL, 0LL);
}

uint64_t sub_1000BD3F4()
{
  if (qword_100328AC8 != -1) {
    swift_once(&qword_100328AC8, sub_1000B6E94);
  }
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = qword_10032A9A8;
  return sub_100092F20();
}

uint64_t sub_1000BD450()
{
  *(void *)(v0 + 96) = sub_1000B6D88();
  return sub_100092F20();
}

uint64_t sub_1000BD488()
{
  *(void *)(v0 + 104) = sub_1000C0DA0();
  *(void *)(v0 + swift_weakDestroy(v0 + 112) = 0LL;
  sub_100093420();
  return sub_1000C5FE4(v1, v2, v3);
}

uint64_t sub_1000BD4D8()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[8];
  if (!v1)
  {
    sub_10007D0AC(v0[8], 1LL, 1LL, v0[9]);
    goto LABEL_6;
  }

  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  sub_10008618C();
  sub_10012A744(v4, v3, v1, v2);
  sub_10007BA44();
  sub_100085FB4();
  sub_1000C6368();
  if (v5)
  {
LABEL_6:
    uint64_t v11 = swift_release(v0[12]);
    sub_10009C740(v11, &qword_10032C480);
LABEL_7:
    uint64_t v10 = 1LL;
    goto LABEL_8;
  }

  uint64_t v7 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[7];
  sub_1000C4A8C(v0[8], v6);
  LOBYTE(v6) = static Date.> infix(_:_:)(v6 + *(int *)(v7 + 24), v8);
  sub_10009C5EC();
  uint64_t v9 = v0[10];
  if ((v6 & 1) == 0)
  {
    sub_100085BC4(v9, type metadata accessor for ExternalPurchaseTokenV2Response);
    goto LABEL_7;
  }

  sub_1000C4A8C(v9, v0[2]);
  uint64_t v10 = 0LL;
LABEL_8:
  sub_10007D0AC(v0[2], v10, 1LL, v0[9]);
  sub_1000939C0();
  sub_1000931C8();
  uint64_t v12 = (uint64_t (*)(void))sub_100093CFC();
  return v12();
}

uint64_t sub_1000BD5E8()
{
  return sub_1000C5EB8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000BD624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[15] = a6;
  v7[16] = a7;
  v7[13] = a4;
  v7[14] = a5;
  v7[11] = a2;
  v7[12] = a3;
  v7[10] = a1;
  uint64_t v8 = type metadata accessor for Date(0LL);
  v7[17] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[18] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v7[19] = v10;
  v7[20] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000BD694, 0LL, 0LL);
}

uint64_t sub_1000BD694()
{
  v0[8] = 0LL;
  v0[9] = 0LL;
  if (qword_100328AC0 != -1) {
    swift_once(&qword_100328AC0, sub_1000B6E48);
  }
  v0[21] = qword_10032A9A0;
  return sub_100092F20();
}

uint64_t sub_1000BD6F4()
{
  *(void *)(v0 + 176) = v1;
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000BD730( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  id v56 = (id)v26[22];
  uint64_t v27 = v26[19];
  uint64_t v28 = v26[20];
  uint64_t v29 = v26[17];
  uint64_t v30 = v26[18];
  uint64_t v53 = v26[15];
  uint64_t v54 = v26[16];
  uint64_t v31 = v26[13];
  uint64_t v32 = v26[11];
  uint64_t v55 = v32;
  uint64_t v51 = v26[10];
  uint64_t v52 = v26[12];
  (*(void (**)(uint64_t, void, uint64_t))(v30 + 16))(v28, v26[14], v29);
  uint64_t v33 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v34 = (v33 + 48) & ~v33;
  unint64_t v35 = (v27 + v34 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  BOOL v37 = (char *)swift_allocObject(&unk_1002EC618, v36 + 16, v33 | 7);
  *((void *)v37 + 2) = v51;
  *((void *)v37 + 3) = v32;
  *((void *)v37 + 4) = v52;
  *((void *)v37 + 5) = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(&v37[v34], v28, v29);
  *(void *)&v37[v35] = v26 + 8;
  uint64_t v38 = (uint64_t *)&v37[v36];
  uint64_t *v38 = v53;
  v38[1] = v54;
  uint64_t v39 = sub_1000AA314((uint64_t)&unk_1002EC640, 32LL);
  v26[2] = _NSConcreteStackBlock;
  *(void *)(v39 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = sub_1000C4D20;
  *(void *)(v39 + 24) = v37;
  v26[6] = sub_1000B1D38;
  v26[7] = v39;
  v26[3] = 1107296256LL;
  v26[4] = sub_100121E00;
  v26[5] = &unk_1002EC658;
  uint64_t v40 = _Block_copy(v26 + 2);
  uint64_t v41 = v26[7];
  swift_bridgeObjectRetain(v55);
  sub_10007BA3C();
  sub_10009C738();
  swift_retain(v39);
  swift_release(v41);
  [v56 readUsingSession:v40];

  _Block_release(v40);
  LOBYTE(v35) = sub_1000B22F8(v39, (uint64_t)"", 115LL, 442LL, 20LL);
  uint64_t result = swift_release(v39);
  if ((v35 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_1000C6388();
    sub_1000939C0();
    sub_1000C60EC();
    return v45(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v26 + 8, v56, a16, a17, a18);
  }

  return result;
}

uint64_t sub_1000BD908( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = a1;
  uint64_t v14 = (void *)swift_task_alloc(dword_10032AA6C);
  *(void *)(v8 + 24) = v14;
  *uint64_t v14 = v8;
  v14[1] = sub_1000BD994;
  return sub_1000BB750(a6, a7, a8, v16, a4, a5);
}

uint64_t sub_1000BD994()
{
  *(void *)(v1 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    sub_1000C6290();
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000BD9E4()
{
  **(_BYTE **)(v0 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = *(void *)(v0 + 32) != 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BDA00(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16));
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1000C29A0(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    sub_100085EF0();
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    sub_100085EF0();
  }

  return v7;
}

uint64_t sub_1000BDAA8(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100085FEC();
    _CocoaArrayWrapper.endIndex.getter(v10);
    sub_100085EF0();
  }

  sub_10007CB7C(0LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
  sub_1000C4E08();
  uint64_t v3 = sub_1000C6708();
  uint64_t result = Set.init(minimumCapacity:)(v3);
  uint64_t v5 = result;
  uint64_t v12 = result;
  if (!v2)
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v6) {
      goto LABEL_4;
    }
LABEL_15:
    sub_100085EF0();
    return v5;
  }

  if (a1 < 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100085FEC();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v9);
  uint64_t result = sub_100085EF0();
  if (!v6) {
    goto LABEL_15;
  }
LABEL_4:
  if (v6 >= 1)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else {
        id v8 = *(id *)(a1 + 8 * i + 32);
      }
      sub_1000C2B4C((Swift::Int *)&v11, v8);
    }

    sub_100085EF0();
    return v12;
  }

  __break(1u);
  return result;
}

void sub_1000BDBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21);
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_1000C6340();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      id v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_1000C6320(*v11, v12, a1, a2) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_1000C6340();
        if ((v16 & 1) != 0)
        {
          do
          {
            uint64_t v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_1000C6320(*v17, v18, a1, a2) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_1000C6340();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

void *sub_1000BDCEC(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = sub_100085B44(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v15, v3, v4);
  if (!v1)
  {
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    sub_100085B44(v15, v16);
    uint64_t v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7);
    uint64_t v5 = (void *)v8;
    unint64_t v11 = v9;
    if (v8 == 0x5050415F4E49LL && v9 == 0xE600000000000000LL)
    {
      unint64_t v13 = 0xE600000000000000LL;
    }

    else if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5050415F4E49LL, 0xE600000000000000LL, v8, v9, 0LL) & 1) != 0)
    {
      unint64_t v13 = v11;
    }

    else if (v5 == (void *)0x54554F5F4B4E494CLL && v11 == 0xE800000000000000LL)
    {
      unint64_t v13 = 0xE800000000000000LL;
    }

    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54554F5F4B4E494CLL, 0xE800000000000000LL, v5, v11, 0LL) & 1) == 0) {
        goto LABEL_13;
      }
      unint64_t v13 = v11;
    }

    swift_bridgeObjectRelease(v13);
    uint64_t v5 = 0LL;
LABEL_13:
    sub_10007B1A0(v15);
    sub_10007B1A0(a1);
    return v5;
  }

  sub_10007B1A0(a1);
  return v5;
}

uint64_t sub_1000BDE70(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100085B44(a1, v5);
  dispatch thunk of Encoder.singleValueContainer()(v14, v5, v6);
  unint64_t v7 = 0xE800000000000000LL;
  uint64_t v8 = 0x54554F5F4B4E494CLL;
  if (a3 != 1)
  {
    uint64_t v8 = a2;
    unint64_t v7 = a3;
  }

  if (a3) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0x5050415F4E49LL;
  }
  if (a3) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = 0xE600000000000000LL;
  }
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  sub_1000C59AC((uint64_t)v14, v15);
  sub_1000C4A2C(a2, a3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v9, v10, v11, v12);
  swift_bridgeObjectRelease(v10);
  return sub_10007B1A0(v14);
}

uint64_t sub_1000BDF64(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    return !a4;
  }
  if (a2 == 1) {
    return a4 == 1;
  }
  if (a4 < 2) {
    return 0LL;
  }
  if (a1 != a3 || a2 != a4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
  return 1LL;
}

void *sub_1000BDFB0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000BDCEC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1000BDFD8(void *a1)
{
  return sub_1000BDE70(a1, *(void *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1000BDFF0(uint64_t *a1, uint64_t a2)
{
  return sub_1000BDF64(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_1000BE004(Swift::String a1)
{
  v1._rawValue = &off_1002EA290;
  return sub_1000BE2B8(a1, v1);
}

void sub_1000BE010(char *a1, unsigned __int8 *a2)
{
}

void sub_1000BE01C()
{
}

uint64_t sub_1000BE024(uint64_t a1)
{
  return sub_1000CD0B0(a1, *v1);
}

void sub_1000BE02C(uint64_t a1)
{
}

uint64_t sub_1000BE034@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002EA290;
  uint64_t result = sub_1000BE2B8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000BE068()
{
  char v1 = sub_1000C668C();
  *uint64_t v0 = sub_1000BB714(v1);
  v0[1] = v2;
  sub_1000221B0();
}

uint64_t sub_1000BE088(void *a1)
{
  uint64_t v3 = sub_10007B1FC(&qword_10032AC78);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100085B44(a1, v7);
  unint64_t v9 = sub_1000C5934();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ExternalPurchaseTokenV1Response.CodingKeys,  &type metadata for ExternalPurchaseTokenV1Response.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_10007B1A0(a1);
  }

  else
  {
    char v17 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    uint64_t v12 = v11;
    char v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_10007B1A0(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }

  return v8;
}

uint64_t sub_1000BE234(Swift::String a1)
{
  v1._rawValue = &off_1002EA2E0;
  return sub_1000BE2B8(a1, v1);
}

uint64_t sub_1000BE250()
{
  return 2LL;
}

unint64_t sub_1000BE258(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000012LL;
  }
  else {
    return 0xD000000000000015LL;
  }
}

uint64_t sub_1000BE294(void *a1)
{
  return sub_10007B1A0(a1);
}

uint64_t sub_1000BE2B8(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  sub_100085EF0();
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000BE300(Swift::String a1)
{
  v1._rawValue = &off_1002EA330;
  return sub_1000BE2B8(a1, v1);
}

uint64_t sub_1000BE31C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x7079546E656B6F74LL;
  }
  else {
    return 0xD000000000000015LL;
  }
}

void sub_1000BE35C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10007B1FC(&qword_10032AC98);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100085FDC();
  uint64_t v13 = v12 - v11;
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100085B44(a1, v15);
  unint64_t v16 = sub_1000C5970();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys,  &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys,  v16,  v15,  v14);
  char v20 = 0;
  sub_1000C6494(a2, a3, (uint64_t)&v20);
  if (!v5)
  {
    char v19 = 1;
    sub_1000C6494(a4, a5, (uint64_t)&v19);
  }

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  sub_100086084();
}

uint64_t sub_1000BE450(void *a1)
{
  uint64_t v3 = sub_10007B1FC(&qword_10032AC88);
  __chkstk_darwin(v3);
  sub_100085FDC();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100085B44(a1, v4);
  unint64_t v6 = sub_1000C5970();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys,  &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_1000C671C();
  }

  else
  {
    char v12 = 0;
    uint64_t v5 = sub_1000C64A4((uint64_t)&v12);
    char v11 = 1;
    swift_bridgeObjectRetain(v8);
    sub_1000C64A4((uint64_t)&v11);
    uint64_t v10 = v9;
    sub_1000C6230();
    sub_1000AA78C();
    sub_1000C671C();
    swift_bridgeObjectRelease(v10);
    sub_1000930DC();
  }

  return v5;
}

void sub_1000BE59C(char *a1, unsigned __int8 *a2)
{
}

void sub_1000BE5A8()
{
}

uint64_t sub_1000BE5B0(uint64_t a1)
{
  return sub_1000CD05C(a1, *v1);
}

void sub_1000BE5B8(uint64_t a1)
{
}

uint64_t sub_1000BE5C0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002EA2E0;
  uint64_t result = sub_1000BE2B8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000BE5F4()
{
  char v1 = sub_1000C668C();
  *uint64_t v0 = sub_1000BE258(v1);
  v0[1] = v2;
  sub_1000221B0();
}

unint64_t sub_1000BE614()
{
  return sub_1000BE258(*v0);
}

uint64_t sub_1000BE61C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000BE234(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE640@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000BE250();
  *a1 = result;
  return result;
}

uint64_t sub_1000BE664(uint64_t a1)
{
  unint64_t v2 = sub_1000C5934();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BE68C(uint64_t a1)
{
  unint64_t v2 = sub_1000C5934();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BE6B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000BE7F4((uint64_t (*)(void))sub_1000BE088, a1);
}

uint64_t sub_1000BE6D0(void *a1)
{
  return sub_1000BE294(a1);
}

void sub_1000BE6E4(char *a1, unsigned __int8 *a2)
{
}

void sub_1000BE6F0()
{
}

uint64_t sub_1000BE6F8(uint64_t a1)
{
  return sub_1000CD004(a1, *v1);
}

void sub_1000BE700(uint64_t a1)
{
}

uint64_t sub_1000BE708@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1002EA330;
  uint64_t result = sub_1000BE2B8(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000BE73C()
{
  char v1 = sub_1000C668C();
  *uint64_t v0 = sub_1000BE31C(v1);
  v0[1] = v2;
  sub_1000221B0();
}

uint64_t sub_1000BE75C()
{
  return sub_1000BE31C(*v0);
}

uint64_t sub_1000BE764@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000BE300(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BE788(uint64_t a1)
{
  unint64_t v2 = sub_1000C5970();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BE7B0(uint64_t a1)
{
  unint64_t v2 = sub_1000C5970();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BE7D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000BE7F4((uint64_t (*)(void))sub_1000BE450, a1);
}

uint64_t sub_1000BE7F4@<X0>(uint64_t (*a1)(void)@<X4>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

void sub_1000BE824(void *a1)
{
}

void sub_1000BE840(void *a1)
{
  uint64_t v3 = sub_10007B1FC(&qword_10032AC38);
  __chkstk_darwin(v3);
  sub_100085FDC();
  uint64_t v21 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  __chkstk_darwin(v21);
  sub_100085FDC();
  uint64_t v6 = v5 - v4;
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  sub_100085B44(a1, v8);
  unint64_t v9 = sub_1000C5818();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ExternalPurchaseTokenV2Response.CodingKeys,  &type metadata for ExternalPurchaseTokenV2Response.CodingKeys,  v9,  v8,  v7);
  if (v1)
  {
    sub_1000C6608();
  }

  else
  {
    sub_1000C64C4();
    *(_BYTE *)uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    sub_1000C64C4();
    double v10 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)());
    if ((v11 & 1) != 0) {
      static Date.distantPast.getter(*(void *)&v10);
    }
    else {
      Date.init(timeIntervalSince1970:)(v10 / 1000.0);
    }
    sub_1000C64C4();
    *(void *)(v6 + _Block_object_dispose(va, 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v13);
    *(void *)(v6 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = v14;
    sub_10007B1FC(&qword_10032AC48);
    sub_1000C5890( &qword_10032AC50,  (void (*)(void))sub_1000C5854,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_1000C65F0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v15, v16, v17, v18, v19);
    if (v22) {
      char v20 = v22;
    }
    else {
      char v20 = _swiftEmptyArrayStorage;
    }
    sub_1000C5F90();
    *(void *)(v6 + *(int *)(v21 + 28)) = v20;
    sub_1000C2198();
    sub_1000C6608();
    sub_100085BC4(v6, type metadata accessor for ExternalPurchaseTokenV2Response);
  }

  sub_100086084();
}

uint64_t sub_1000BEAE0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10007B1FC(&qword_10032AC60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100085FDC();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100085B44(a1, v10);
  unint64_t v12 = sub_1000C5818();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ExternalPurchaseTokenV2Response.CodingKeys,  &type metadata for ExternalPurchaseTokenV2Response.CodingKeys,  v12,  v10,  v11);
  sub_1000C66FC();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    sub_1000C66FC();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v15, v16);
    uint64_t v17 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
    Date.timeIntervalSince1970.getter();
    sub_1000C66FC();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (*(void *)(*(void *)(v3 + *(int *)(v17 + 28)) + 16LL))
    {
      sub_10007B1FC(&qword_10032AC48);
      sub_1000C5890( &qword_10032AC68,  (void (*)(void))sub_1000C58F8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
      sub_1000C65F0();
      sub_1000C66FC();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_1000BEC90(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002EA380, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000BECDC()
{
  return 4LL;
}

uint64_t sub_1000BECE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000BED24 + 4 * byte_10027AE10[a1]))( 0x7669746341736168LL,  0xEE006E656B6F5465LL);
}

uint64_t sub_1000BED24()
{
  return 0x6D61466E656B6F74LL;
}

unint64_t sub_1000BED48()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1000BED68()
{
  return 0x746E456E656B6F74LL;
}

uint64_t sub_1000BED88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000BEDC8 + 4 * byte_10027AE14[a1]))( 0x7669746341736168LL,  0xEE006E656B6F5465LL);
}

uint64_t sub_1000BEDC8()
{
  return 0x6D61466E656B6F74LL;
}

unint64_t sub_1000BEDEC()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1000BEE08()
{
  return 0x746E456E656B6F74LL;
}

void sub_1000BEE28(char *a1)
{
}

void sub_1000BEE34()
{
}

void sub_1000BEE3C(uint64_t a1)
{
}

void sub_1000BEE44(uint64_t a1)
{
}

unint64_t sub_1000BEE4C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000BEC90(*a1);
  *a2 = result;
  return result;
}

void sub_1000BEE78()
{
  unsigned __int8 v1 = sub_1000C668C();
  *uint64_t v0 = sub_1000BECE4(v1);
  v0[1] = v2;
  sub_1000221B0();
}

uint64_t sub_1000BEE98()
{
  return sub_1000BED88(*v0);
}

uint64_t sub_1000BEEA0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000BECD8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BEEC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000BECDC();
  *a1 = result;
  return result;
}

uint64_t sub_1000BEEE8(uint64_t a1)
{
  unint64_t v2 = sub_1000C5818();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BEF10(uint64_t a1)
{
  unint64_t v2 = sub_1000C5818();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000BEF38(void *a1)
{
}

uint64_t sub_1000BEF4C(void *a1)
{
  return sub_1000BEAE0(a1);
}

uint64_t sub_1000BEF60( void *a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = sub_10007B1FC(&qword_10032AAE8);
  uint64_t inited = swift_initStackObject(v14, v47);
  *(_OWORD *)(inited + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = xmmword_10027ADF0;
  sub_10007CB7C(0LL, &qword_10032A7B8, off_1002E5C70);
  uint64_t v44 = &type metadata for String;
  uint64_t aBlock = (uint64_t)a2;
  uint64_t v42 = a3;
  swift_bridgeObjectRetain(a3);
  *(void *)(inited + 32) = sub_100121D10(0x695F656C646E7562LL, 0xE900000000000064LL, &aBlock);
  uint64_t v44 = &type metadata for String;
  uint64_t aBlock = (uint64_t)a4;
  uint64_t v42 = a5;
  swift_bridgeObjectRetain(a5);
  *(void *)(inited + 40) = sub_100121D10(0x5F746E756F636361LL, 0xEA00000000006469LL, &aBlock);
  double v16 = Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v44 = &type metadata for Double;
  uint64_t aBlock = *(void *)&v16;
  id v17 = sub_1000B04D4(0x6974617269707865LL, 0xEA00000000006E6FLL, &aBlock, 5LL);
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v17;
  uint64_t aBlock = inited;
  specialized Array._endMutation()(v17, v18, v19, v20, v21, v22, v23, v24);
  uint64_t v25 = aBlock;
  uint64_t v26 = type metadata accessor for ExternalGatewayTokenFamilyEntity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v26);
  id v28 = [a1 connection];
  sub_10007CB7C(0LL, &qword_10032A7C8, off_1002E5C78);
  sub_1000BF284(v25, &qword_10032AB68, &off_1002E5C90);
  swift_bridgeObjectRelease(v25);
  sub_1000B6DE8();
  uint64_t v30 = v29;
  id v31 = [ObjCClassFromMetadata queryOnConnection:v28 predicate:v29];

  uint64_t v32 = (void *)swift_allocObject(&unk_1002EC690, 48LL, 7LL);
  v32[2] = a1;
  v32[3] = a7;
  v32[4] = a8;
  v32[5] = a9;
  uint64_t v33 = swift_allocObject(&unk_1002EC6B8, 32LL, 7LL);
  *(void *)(v33 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = sub_1000C4DB0;
  *(void *)(v33 + 24) = v32;
  uint64_t v45 = sub_1000B1C48;
  uint64_t v46 = v33;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v42 = 1107296256LL;
  uint64_t v43 = sub_100121DBC;
  uint64_t v44 = &unk_1002EC6D0;
  uint64_t v34 = _Block_copy(&aBlock);
  uint64_t v35 = v46;
  id v36 = a1;
  swift_bridgeObjectRetain(a9);
  swift_retain(v33);
  swift_release(v35);
  [v31 enumeratePersistentIDsUsingBlock:v34];

  _Block_release(v34);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v33, "", 115LL, 463LL, 42LL, 1LL);
  swift_release(v32);
  uint64_t result = swift_release(v33);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

char *sub_1000BF284(uint64_t a1, unint64_t *a2, void *a3)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v7 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (char *)v7;
  }
  id v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000C2384(0LL, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000LL) == 0)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else {
        id v10 = *(id *)(a1 + 8 * i + 32);
      }
      id v15 = v10;
      uint64_t v11 = sub_10007CB7C(0LL, a2, a3);
      swift_dynamicCast(v16, &v15, v11, (char *)&type metadata for Any + 8, 7LL);
      uint64_t v7 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_1000C2384(0LL, v7[2] + 1LL, 1);
        uint64_t v7 = v17;
      }

      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000C2384((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v7 = v17;
      }

      void v7[2] = v13 + 1;
      sub_1000853B0(v16, &v7[4 * v13 + 4]);
    }

    return (char *)v7;
  }

  __break(1u);
  return result;
}

void sub_1000BF41C(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4, uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v9);
  id v10 = [a4 connection];
  id v14 = [objc_allocWithZone((Class)type metadata accessor for ExternalGatewayTokenFamilyEntity()) initWithPersistentID:a1 onConnection:v10];

  uint64_t v11 = sub_1000BF824();
  uint64_t v12 = a5[1];
  *a5 = v11;
  a5[1] = v13;
  swift_bridgeObjectRelease(v12);
  *a3 = 1;
}

uint64_t sub_1000BF824()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringValueForProperty:v1];

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

    return v3;
  }

  else
  {
    unint64_t v5 = sub_1000B1B98();
    uint64_t v6 = swift_allocError(&_s11EntityErrorON, v5, 0LL, 0LL);
    *uint64_t v7 = 0x61665F6E656B6F74LL;
    v7[1] = 0xEF64695F796C696DLL;
    return swift_willThrow(v6, v7, v8, v9, v10, v11, v12);
  }

BOOL sub_1000BF910( void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v42 = a4;
  uint64_t v43 = a6;
  uint64_t v41 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v41);
  uint64_t v44 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for ExternalGatewayTokenFamilyEntity();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a8, v17);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a7);
  id v21 = [a1 connection];
  id v22 = sub_1000BFD14(a2, (uint64_t)a3, v42, a5, v43, a7, (uint64_t)v20, v21);
  if (([v22 existsInDatabase] & 1) == 0)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_100079604(v41, (uint64_t)qword_10033E1A8);
    sub_1000C2198();
    uint64_t v46 = 0LL;
    unint64_t v47 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease(v47);
    uint64_t v46 = 0xD000000000000023LL;
    unint64_t v47 = 0x800000010029FAE0LL;
    v23._countAndFlagsBits = a2;
    v23._object = a3;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 0x61746164206E6920LL;
    v24._object = (void *)0xEC00000065736162LL;
    String.append(_:)(v24);
    uint64_t v26 = v46;
    unint64_t v25 = v47;
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    swift_bridgeObjectRetain_n(a10, 2LL);
    uint64_t v29 = swift_bridgeObjectRetain_n(v25, 2LL);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = v28;
    if (os_log_type_enabled(v30, v28))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v43 = v26;
      uint64_t v33 = v32;
      uint64_t v34 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v33 = 136446466;
      uint64_t v45 = v34;
      uint64_t v46 = 91LL;
      unint64_t v47 = 0xE100000000000000LL;
      swift_bridgeObjectRetain(a10);
      v35._countAndFlagsBits = a9;
      v35._object = a10;
      String.append(_:)(v35);
      v36._countAndFlagsBits = 8285LL;
      v36._object = (void *)0xE200000000000000LL;
      String.append(_:)(v36);
      swift_bridgeObjectRelease(a10);
      unint64_t v37 = v47;
      uint64_t v46 = sub_10007A488(v46, v47, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v33 + 4);
      swift_bridgeObjectRelease_n(a10, 2LL);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v33 + 12) = 2082;
      swift_bridgeObjectRetain(v25);
      uint64_t v46 = sub_10007A488(v43, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v33 + 14);
      swift_bridgeObjectRelease_n(v25, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s%{public}s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_bridgeObjectRelease(v25);
    }

    else
    {

      swift_bridgeObjectRelease_n(v25, 3LL);
      swift_bridgeObjectRelease_n(a10, 2LL);
    }

    sub_100085BC4(v44, type metadata accessor for SKLogger);
  }

  id v38 = [v22 persistentID];

  return v38 != 0LL;
}

id sub_1000BFD14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v29 = &type metadata for String;
  uint64_t v30 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  sub_10012A9E0((uint64_t)&v27, 0x695F656C646E7562LL, 0xE900000000000064LL);
  uint64_t v29 = &type metadata for String;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  sub_10012A9E0((uint64_t)&v27, 0x5F746E756F636361LL, 0xEA00000000006469LL);
  uint64_t v29 = &type metadata for String;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  sub_10012A9E0((uint64_t)&v27, 0x61665F6E656B6F74LL, 0xEF64695F796C696DLL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v29 = (void *)v16;
  uint64_t v17 = sub_10009D60C(&v27);
  uint64_t v18 = *(void *)(v16 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v18 + 16))(v17, a7, v16);
  sub_10012A9E0((uint64_t)&v27, 0x6974617269707865LL, 0xEA00000000006E6FLL);
  id v19 = objc_allocWithZone(v26);
  uint64_t v20 = v30;
  sub_100121248(v30);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v20);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  id v24 = [v19 initWithPropertyValues:isa onConnection:a8];

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a7, v16);
  return v24;
}

id sub_1000BFF10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10007B1FC(&qword_10032AAE8);
  uint64_t v11 = swift_allocObject(v10, 40LL, 7LL);
  *(_OWORD *)(v11 + sub_10009D8A4((__int128 *)(v0 + 96), v0 + 16) = xmmword_10027AE00;
  sub_10007CB7C(0LL, &qword_10032A7B8, off_1002E5C70);
  uint64_t v42 = &type metadata for String;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  swift_bridgeObjectRetain(a3);
  id v12 = sub_100121D10(0x695F656C646E7562LL, 0xE900000000000064LL, &v40);
  *(void *)(v11 + 32) = v12;
  uint64_t v40 = v11;
  specialized Array._endMutation()(v12, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v20 = v40;
  uint64_t v43 = v40;
  if (a5)
  {
    uint64_t v42 = &type metadata for String;
    uint64_t v40 = a4;
    uint64_t v41 = a5;
    swift_bridgeObjectRetain(a5);
    id v21 = sub_100121D10(0x5F746E756F636361LL, 0xEA00000000006469LL, &v40);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v23 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v22 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v23 >= v22 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1LL);
    }
    uint64_t v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
    specialized Array._endMutation()(v24, v25, v26, v27, v28, v29, v30, v31);
    uint64_t v20 = v43;
  }

  uint64_t v32 = type metadata accessor for ExternalGatewayTokenFamilyEntity();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v32);
  id v34 = [a1 connection];
  sub_10007CB7C(0LL, &qword_10032A7C8, off_1002E5C78);
  sub_1000BF284(v20, &qword_10032A7B8, off_1002E5C70);
  swift_bridgeObjectRelease(v20);
  sub_1000B6DE8();
  Swift::String v36 = v35;
  id v37 = [ObjCClassFromMetadata queryOnConnection:v34 predicate:v35];

  id v38 = [v37 deleteAllEntities];
  return v38;
}

void sub_1000C0148(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v2];

  _StringGuts.grow(_:)(165LL);
  v3._countAndFlagsBits = 0xD00000000000001BLL;
  v3._object = (void *)0x800000010029F240LL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xD00000000000001FLL;
  v4._object = (void *)0x800000010029FCC0LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 665632LL;
  v5._object = (void *)0xE300000000000000LL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x695F656C646E7562LL;
  v6._object = (void *)0xE900000000000064LL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0xD000000000000010LL;
  v7._object = (void *)0x800000010029FDA0LL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x5F746E756F636361LL;
  v8._object = (void *)0xEA00000000006469LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0xD000000000000010LL;
  v9._object = (void *)0x800000010029FDA0LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x61665F6E656B6F74LL;
  v10._object = (void *)0xEF64695F796C696DLL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0xD000000000000010LL;
  v11._object = (void *)0x800000010029FDA0LL;
  String.append(_:)(v11);
  v12._object = (void *)0xEA00000000006E6FLL;
  v12._countAndFlagsBits = 0x6974617269707865LL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0xD00000000000002FLL;
  v13._object = (void *)0x800000010029FDC0LL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x695F656C646E7562LL;
  v14._object = (void *)0xE900000000000064LL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 2604LL;
  v15._object = (void *)0xE200000000000000LL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x5F746E756F636361LL;
  v16._object = (void *)0xEA00000000006469LL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0xD000000000000018LL;
  v17._object = (void *)0x800000010029FDF0LL;
  String.append(_:)(v17);
  id v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000LL);
  [a1 executeStatement:v18];
}

unint64_t sub_1000C03B4()
{
  return 0xD00000000000001FLL;
}

void sub_1000C03D0(void *a1)
{
  v2._countAndFlagsBits = 0x4154205245544C41LL;
  v2._object = (void *)0xEC00000020454C42LL;
  String.append(_:)(v2);
  v3._object = (void *)0x800000010029FCC0LL;
  v3._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x4C4F43204444410ALL;
  v4._object = (void *)0xEC000000204E4D55LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6974617269707865LL;
  v5._object = (void *)0xEA00000000006E6FLL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD000000000000020LL;
  v6._object = (void *)0x800000010029FE10LL;
  String.append(_:)(v6);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000LL);
  [a1 executeStatement:v7];

  _StringGuts.grow(_:)(48LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  id v8 = String._bridgeToObjectiveC()();
  [a1 executeStatement:v8];
}

id sub_1000C0568()
{
  id v0 = [objc_allocWithZone((Class)SQLiteDatabaseStoreDescriptor) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setSchemaName:v1];

  uint64_t v2 = sub_10007CB7C(0LL, &qword_10032A7A0, off_1002E5C80);
  [v0 setSessionClass:swift_getObjCClassFromMetadata(v2)];
  uint64_t v3 = sub_10007CB7C(0LL, &qword_10032A7A8, off_1002E5C88);
  [v0 setTransactionClass:swift_getObjCClassFromMetadata(v3)];
  return v0;
}

uint64_t sub_1000C0638(void *a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  Swift::String v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = v2;
  uint64_t v27 = v4;
  while (1)
  {
    id v5 = [a1 currentSchemaVersion];
    if (!v5)
    {
      uint64_t v32 = sub_1000C0148;
      uint64_t v33 = 0LL;
      uint64_t aBlock = _NSConcreteStackBlock;
      unint64_t v29 = 1107296256LL;
      uint64_t v30 = sub_1000DC508;
      uint64_t v31 = &unk_1002EC550;
      goto LABEL_9;
    }

    if (v5 != (id)18000) {
      break;
    }
    uint64_t v32 = sub_1000C03D0;
    uint64_t v33 = 0LL;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v29 = 1107296256LL;
    uint64_t v30 = sub_1000DC508;
    uint64_t v31 = &unk_1002EC528;
LABEL_9:
    Swift::String v6 = _Block_copy(&aBlock);
    swift_release(v33);
    unsigned __int8 v7 = [a1 migrateToVersion:18001 usingBlock:v6];
    _Block_release(v6);
    if ((v7 & 1) == 0) {
      return 0LL;
    }
LABEL_10:
  }

  if (v5 == (id)18001) {
    goto LABEL_10;
  }
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  sub_100079604(v26, (uint64_t)qword_10033E1A8);
  uint64_t v9 = (uint64_t)v27;
  sub_1000C2198();
  uint64_t aBlock = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(52LL);
  v10._object = (void *)0x800000010029FCE0LL;
  v10._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v10);
  uint64_t v34 = (uint64_t)[a1 currentSchemaVersion];
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 540949792LL;
  v13._object = (void *)0xE400000000000000LL;
  String.append(_:)(v13);
  uint64_t v34 = 18001LL;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  Swift::String v15 = v14._object;
  String.append(_:)(v14);
  uint64_t v16 = swift_bridgeObjectRelease(v15);
  uint64_t v18 = (uint64_t)aBlock;
  unint64_t v17 = v29;
  os_log_type_t v19 = static os_log_type_t.error.getter(v16);
  uint64_t v20 = swift_bridgeObjectRetain_n(v17, 2LL);
  id v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = v19;
  if (os_log_type_enabled(v21, v19))
  {
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = (void **)swift_slowAlloc(64LL, -1LL);
    uint64_t aBlock = v24;
    *(_DWORD *)uint64_t v23 = 136446466;
    uint64_t v34 = sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v23 + 4);
    *(_WORD *)(v23 + 12) = 2082;
    swift_bridgeObjectRetain(v17);
    uint64_t v34 = sub_10007A488(v18, v17, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v23 + 14);
    swift_bridgeObjectRelease_n(v17, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_bridgeObjectRelease(v17);
  }

  else
  {

    swift_bridgeObjectRelease_n(v17, 3LL);
  }

  sub_100085BC4(v9, type metadata accessor for SKLogger);
  return 0LL;
}

id sub_1000C0A6C(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType(v1);
  id v3 = objc_msgSendSuper2(&v5, "initWithDatabase:", a1);

  return v3;
}

uint64_t type metadata accessor for ExternalGatewayTokenFamilyStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitdP33_A0B67E5E835CE5C4351F500DE01F7FFD31ExternalGatewayTokenFamilyStore);
}

id sub_1000C0B60(uint64_t a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = v2;
  v9.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v9, "initWithPropertyValues:onConnection:", isa, a2);

  return v7;
}

id sub_1000C0C64(uint64_t a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType(v2);
  id v5 = objc_msgSendSuper2(&v7, "initWithPersistentID:onConnection:", a1, a2);

  return v5;
}

id sub_1000C0CF4()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for ExternalGatewayTokenFamilyEntity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitdP33_A0B67E5E835CE5C4351F500DE01F7FFD32ExternalGatewayTokenFamilyEntity);
}

uint64_t type metadata accessor for ExternalPurchaseTokenV2Response(uint64_t a1)
{
  uint64_t result = qword_10032ABE8;
  if (!qword_10032ABE8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ExternalPurchaseTokenV2Response);
  }
  return result;
}

uint64_t sub_1000C0DA0()
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  Swift::String v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = *(id *)(v0 + 128);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 dataForKey:v6];

  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  unint64_t v10 = v9;

  uint64_t v11 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = JSONDecoder.init()();
  uint64_t v13 = sub_10007B1FC(&qword_10032AA90);
  unint64_t v14 = sub_1000C2248();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v42, v13, v8, v10, v13, v14);
  if (v1)
  {
    swift_release(v12);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_100079604(v2, (uint64_t)qword_10033E1A8);
    sub_1000C2198();
    uint64_t v40 = 0LL;
    unint64_t v41 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    v15._object = (void *)0x800000010029E420LL;
    v15._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD000000000000033LL;
    v16._object = (void *)0x800000010029FB50LL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 8250LL;
    v17._object = (void *)0xE200000000000000LL;
    String.append(_:)(v17);
    uint64_t v39 = v1;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v18 = _print_unlocked<A, B>(_:_:)(&v39, &v40);
    unint64_t v19 = v41;
    uint64_t v38 = v40;
    os_log_type_t v20 = static os_log_type_t.error.getter(v18);
    uint64_t v21 = swift_bridgeObjectRetain_n(v19, 2LL);
    os_log_type_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = v20;
    if (os_log_type_enabled(v22, v20))
    {
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = v8;
      uint64_t v25 = v24;
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v26;
      *(_DWORD *)uint64_t v25 = 136446466;
      unint64_t v37 = v10;
      uint64_t v39 = sub_10007A488(0LL, 0xE000000000000000LL, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 4);
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain(v19);
      uint64_t v39 = sub_10007A488(v38, v19, &v40);
      unint64_t v10 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 14);
      swift_bridgeObjectRelease_n(v19, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s%{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      uint64_t v27 = v25;
      uint64_t v8 = v36;
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_bridgeObjectRelease(v19);
    }

    else
    {

      swift_bridgeObjectRelease_n(v19, 3LL);
    }

    sub_100085BC4((uint64_t)v4, type metadata accessor for SKLogger);
    swift_willThrow(v29, v30, v31, v32, v33, v34, v35);
    return sub_10007F054(v8, v10);
  }

  else
  {
    sub_10007F054(v8, v10);
    swift_release(v12);
    return v42;
  }

uint64_t sub_1000C1184(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v5);
  id v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = a1;
  uint64_t v8 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = JSONEncoder.init()();
  uint64_t v10 = sub_10007B1FC(&qword_10032AA90);
  unint64_t v11 = sub_1000C21CC();
  uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v44, v10, v11);
  if (v2)
  {
    swift_release(v9);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    sub_100079604(v5, (uint64_t)qword_10033E1A8);
    sub_1000C2198();
    uint64_t v42 = 0LL;
    unint64_t v43 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    v14._object = (void *)0x800000010029FB30LL;
    v14._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 0xD000000000000033LL;
    v15._object = (void *)0x800000010029FB50LL;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 8250LL;
    v16._object = (void *)0xE200000000000000LL;
    String.append(_:)(v16);
    uint64_t v41 = v2;
    sub_10007B1FC(&qword_100329B90);
    uint64_t v17 = _print_unlocked<A, B>(_:_:)(&v41, &v42);
    uint64_t v19 = v42;
    unint64_t v18 = v43;
    os_log_type_t v20 = static os_log_type_t.error.getter(v17);
    uint64_t v21 = swift_bridgeObjectRetain_n(v18, 2LL);
    os_log_type_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = v20;
    if (os_log_type_enabled(v22, v20))
    {
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v25 = swift_slowAlloc(64LL, -1LL);
      uint64_t v40 = v19;
      uint64_t v26 = v25;
      uint64_t v42 = v25;
      *(_DWORD *)uint64_t v24 = 136446466;
      uint64_t v41 = sub_10007A488(0LL, 0xE000000000000000LL, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v24 + 4);
      *(_WORD *)(v24 + 12) = 2082;
      swift_bridgeObjectRetain(v18);
      uint64_t v41 = sub_10007A488(v40, v18, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v24 + 14);
      swift_bridgeObjectRelease_n(v18, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s%{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_bridgeObjectRelease(v18);
    }

    else
    {

      swift_bridgeObjectRelease_n(v18, 3LL);
    }

    sub_100085BC4((uint64_t)v7, type metadata accessor for SKLogger);
    return swift_willThrow(v33, v34, v35, v36, v37, v38, v39);
  }

  else
  {
    uint64_t v27 = v12;
    unint64_t v28 = v13;
    swift_release(v9);
    id v29 = *(id *)(v3 + 128);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v31 = String._bridgeToObjectiveC()();
    [v29 setData:isa forKey:v31];

    return sub_10007F054(v27, v28);
  }

void *sub_1000C1540()
{
  uint64_t v1 = v0;
  swift_defaultActor_initialize(v0);
  v0[14] = 0xD00000000000002BLL;
  v0[15] = 0x800000010029FB90LL;
  sub_10007CB7C(0LL, &qword_10032AAB8, &OBJC_CLASS___NSUbiquitousKeyValueStore_ptr);
  v0[16] = sub_1000C16F4(0xD00000000000002BLL, 0x800000010029FB90LL, 2LL);
  id v2 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSOperationQueue);
  swift_retain(v1);
  id v4 = [v3 currentQueue];
  uint64_t v5 = swift_allocObject(&unk_1002EC448, 24LL, 7LL);
  swift_weakInit(v5 + 16, v1);
  void v9[4] = sub_1000C2324;
  uint64_t v10 = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  uint64_t v9[2] = sub_1000C202C;
  void v9[3] = &unk_1002EC460;
  uint64_t v6 = _Block_copy(v9);
  swift_release(v10);
  id v7 =  [v2 addObserverForName:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:v1 queue:v4 usingBlock:v6];
  _Block_release(v6);
  swift_unknownObjectRelease(v7);

  swift_release(v1);
  return v1;
}

id sub_1000C16F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v8 = [v6 initWithStoreIdentifier:v7 type:a3];

  return v8;
}

uint64_t sub_1000C176C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10007B1FC((uint64_t *)&unk_10032BAB0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  sub_10007D0AC((uint64_t)v9, 1LL, 1LL, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (v11 + 40) & ~v11;
  unint64_t v13 = (char *)swift_allocObject(&unk_1002EC498, v12 + v6, v11 | 7);
  *((void *)v13 + 2) = 0LL;
  *((void *)v13 + 3) = 0LL;
  *((void *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))( &v13[v12],  (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  swift_retain(a2);
  sub_1000F9554((uint64_t)v9, (uint64_t)&unk_10032AAC8, (uint64_t)v13);
  return swift_release(v14);
}

uint64_t sub_1000C18A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 4_Block_object_dispose(va, 8) = a4;
  return swift_task_switch(sub_1000C18C0, 0LL, 0LL);
}

uint64_t sub_1000C18C0()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  *(void *)(v0 + 56) = Strong;
  if (!Strong) {
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
  }
  uint64_t v3 = (void *)swift_task_alloc(dword_10032AADC);
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000C1950;
  uint64_t v4 = sub_1000C6298(*(void *)(v0 + 48));
  return sub_1000C1994(v4);
}

uint64_t sub_1000C1950()
{
  return (*(uint64_t (**)(BOOL))(v1 + 8))(*(void *)(v0 + 56) == 0LL);
}

uint64_t sub_1000C1994(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  v2[29] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v4);
  v2[31] = swift_task_alloc(v4);
  v2[32] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000C1A0C, v1, 0LL);
}

uint64_t sub_1000C1A0C()
{
  uint64_t v52 = v1;
  uint64_t v53 = v2;
  uint64_t v51 = v0;
  uint64_t v3 = ((uint64_t (*)(void))Notification.object.getter)();
  if (!*(void *)(v0 + 80))
  {
    sub_1000C65DC(v3, (uint64_t *)&unk_100328ED0);
    goto LABEL_6;
  }

  uint64_t v4 = sub_10007CB7C(0LL, &qword_10032AAB8, &OBJC_CLASS___NSUbiquitousKeyValueStore_ptr);
  if ((sub_10009369C(v0 + 192, v0 + 56, (uint64_t)&type metadata for Any + 8, v4) & 1) != 0)
  {
    uint64_t v5 = *(void **)(v0 + 192);
    if (*(void **)(*(void *)(v0 + 224) + 128LL) != v5)
    {

      goto LABEL_6;
    }

    uint64_t v49 = *(void **)(v0 + 192);
    uint64_t v17 = Notification.userInfo.getter();
    if (v17)
    {
      uint64_t v18 = v17;
      *(void *)(v0 + 120) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangeReasonKey);
      *(void *)(v0 + 12_Block_object_dispose(va, 8) = v19;
      AnyHashable.init<A>(_:)(v0 + 120, &type metadata for String, &protocol witness table for String);
      sub_10012A6B0(v0 + 16, v18, (_OWORD *)(v0 + 88));
      sub_10007B980();
      uint64_t v17 = sub_100087388(v0 + 16);
      if (*(void *)(v0 + 112))
      {
        if ((sub_10009369C(v0 + 184, v0 + 88, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int) & 1) != 0)
        {
          char v20 = sub_1000D0E60(*(void *)(v0 + 184));
          if (v20 == 5) {
            char v21 = 4;
          }
          else {
            char v21 = v20;
          }
          if (qword_100328B40 != -1) {
            swift_once(&qword_100328B40, sub_1000F4208);
          }
          uint64_t v6 = (uint64_t *)(v0 + 248);
          uint64_t v22 = *(void *)(v0 + 224);
          sub_100079604(*(void *)(v0 + 232), (uint64_t)qword_10033E1A8);
          sub_1000C61DC();
          v50[0] = 0LL;
          v50[1] = 0xE000000000000000LL;
          _StringGuts.grow(_:)(37LL);
          *(void *)(v0 + 136) = 0LL;
          *(void *)(v0 + 144) = 0xE000000000000000LL;
          v54._countAndFlagsBits = 0x74732064756F6C43LL;
          v54._object = (void *)0xEC0000002065726FLL;
          sub_1000C62F4(v54);
          uint64_t v23 = *(void *)(v22 + 112);
          uint64_t v24 = *(void **)(v22 + 120);
          swift_bridgeObjectRetain(v24);
          v55._countAndFlagsBits = v23;
          v55._object = v24;
          sub_1000C62F4(v55);
          sub_100093460();
          sub_1000862B8();
          v25._countAndFlagsBits = 0xD000000000000015LL;
          String.append(_:)(v25);
          *(_BYTE *)(v0 + 264) = v21;
          uint64_t v26 = sub_1000C6664(v0 + 264);
          uint64_t v28 = *(void *)(v0 + 136);
          uint64_t v27 = *(void *)(v0 + 144);
          os_log_type_t v29 = static os_log_type_t.debug.getter(v26);
          sub_100085EE8(v27);
          uint64_t v30 = (os_log_s *)sub_100093B00();
          os_log_type_t v31 = v29;
          if (os_log_type_enabled(v30, v29))
          {
            uint64_t v32 = sub_10007B9FC(22LL);
            uint64_t v33 = sub_10007B9FC(64LL);
            v50[0] = v33;
            *(_DWORD *)uint64_t v32 = 136446466;
            *(void *)(v0 + 20_Block_object_dispose(va, 8) = sub_1000C625C(v33, v34, v35);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v32 + 4);
            *(_WORD *)(v32 + 12) = 2082;
            sub_10007BA3C();
            *(void *)(v0 + 200) = sub_100086308(v28, v36, v50);
            sub_1000C6390(v0 + 200, v0 + 208);
            sub_100085E64(v27);
            sub_100086038((void *)&_mh_execute_header, v30, v31, "%{public}s%{public}s", (uint8_t *)v32);
            sub_100086030(v33, v37, (uint64_t)&type metadata for Any + 8);
            sub_10007B974(v33);
            sub_10007B974(v32);

            sub_10007BA44();
LABEL_29:

            goto LABEL_11;
          }

          sub_100085E64(v27);
LABEL_28:

          goto LABEL_29;
        }

uint64_t sub_1000C202C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000C20D0()
{
  uint64_t v1 = sub_1000C6584();
  return sub_1000C5F74(v1, v2, v3);
}

BOOL sub_1000C211C(void *a1)
{
  return sub_1000BF910( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  v1 + v3,  *(void *)(v1 + v4),  *(void **)(v1 + v4 + 8));
}

uint64_t sub_1000C2180(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C2190(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000C2198()
{
  uint64_t v1 = v0(0LL);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL));
  sub_1000221B0();
}

unint64_t sub_1000C21CC()
{
  unint64_t result = qword_10032AA98;
  if (!qword_10032AA98)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032AA90);
    sub_1000C22C4(&qword_10032AAA0, (uint64_t)&unk_10027B23C);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10032AA98);
  }

  return result;
}

unint64_t sub_1000C2248()
{
  unint64_t result = qword_10032AAA8;
  if (!qword_10032AAA8)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032AA90);
    sub_1000C22C4((unint64_t *)&qword_10032A088, (uint64_t)&unk_10027B264);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_10032AAA8);
  }

  return result;
}

void sub_1000C22C4(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    uint64_t v4 = type metadata accessor for ExternalPurchaseTokenV2Response(255LL);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }

  sub_1000221B0();
}

uint64_t sub_1000C2300()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000C2324(uint64_t a1)
{
  return sub_1000C176C(a1, v1);
}

void sub_1000C232C(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000C2348(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

char *sub_1000C2384(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_1000C251C(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000C23A0(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000C23D4(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void *sub_1000C2408(void *a1, int64_t a2, char a3)
{
  unint64_t result = sub_1000C2780(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000C2424(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000C2460(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v7 != v8)
    {
      sub_1000C65E4();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10007B1FC((uint64_t *)&unk_10032B180);
    uint64_t v12 = (char *)sub_1000AA314(v11, 16 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 16);
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  uint64_t v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_100131864(v15, v9, v14);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100131BD0((unint64_t)v15, v9, (unint64_t)v14);
  }

  sub_1000C6388();
  sub_1000AB000();
}

char *sub_1000C251C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC((uint64_t *)&unk_10032C520);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1001318C8(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100131C68((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release(a4);
  return v11;
}

void sub_1000C25FC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v7 != v8)
    {
      sub_1000C65E4();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10007B1FC(&qword_10032AB88);
    size_t v12 = (char *)sub_1000AA314(v11, 48 * v10 + 32);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 48);
  }

  else
  {
    size_t v12 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_100131A28(v14, v9, v12 + 32);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100131DB0((uint64_t)v14, v9);
  }

  sub_1000C6388();
  sub_1000C6594();
}

void sub_1000C26BC( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  if ((a3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v12 != v13)
    {
      sub_1000C65E4();
      if (v12)
      {
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = sub_10007B1FC(a5);
    uint64_t v17 = (void *)sub_1000AA314(v16, 8 * v15 + 32);
    size_t v18 = j__malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 8);
  }

  else
  {
    uint64_t v17 = &_swiftEmptyArrayStorage;
  }

  uint64_t v19 = v17 + 4;
  uint64_t v20 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    a6(v20, v14, v19);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    a7(v20, v14, v19);
  }

  sub_1000C6388();
  sub_1000C6594();
}

void *sub_1000C2780(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10007B1FC((uint64_t *)&unk_10032BAA0);
    uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    id v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    sub_100131A94(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100131EEC(v14, v8, v13);
  }

  swift_release(a4);
  return v11;
}

void sub_1000C2868( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  if ((a3 & 1) != 0)
  {
    sub_1000C62E4();
    if (v14 != v15)
    {
      sub_1000C65E4();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }

      sub_1000C62BC();
    }
  }

  else
  {
    uint64_t v13 = a2;
  }

  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v18 = sub_10007B1FC(a5);
  uint64_t v19 = *(void *)(a6(0LL) - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  uint64_t v23 = (void *)swift_allocObject(v18, v22 + v20 * v17, v21 | 7);
  size_t v24 = j__malloc_size(v23);
  if (!v20)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v24 - v22 == 0x8000000000000000LL && v20 == -1) {
    goto LABEL_23;
  }
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(a6(0LL) - 8) + 80LL);
  uint64_t v27 = (v26 + 32) & ~v26;
  uint64_t v28 = (char *)v23 + v27;
  uint64_t v29 = a4 + v27;
  if ((a1 & 1) != 0)
  {
    a7(v29, v16, v28);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    a8(v29, v16, v28);
  }

  sub_1000C6388();
}

uint64_t sub_1000C29A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    size_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      char v15 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000C3C48(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_1000C2B4C(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v31 = v9;
      uint64_t v10 = sub_10007CB7C(0LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_1000C3474(v7, result + 1);
    Swift::Int v32 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v29 = v24 + 1;
      id v30 = v8;
      sub_1000C3930(v29);
      uint64_t v25 = v32;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    sub_1000C3BC8((uint64_t)v8, v25);
    uint64_t v28 = *v3;
    *uint64_t v3 = v25;
  }

  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
    {
      sub_10007CB7C(0LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = (Swift::Int)v20;
        id v21 = v20;
        return 0LL;
      }

      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v32 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_1000C3DE0((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v3;
    *uint64_t v3 = v32;
  }

  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1LL;
}

uint64_t sub_1000C2DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1LL << v5) + 63) >> 6;
  uint64_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2LL);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v10 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_10013F128(0LL, v7, v10);
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = sub_1000C2FA0((uint64_t)v10, v7, v4, a2);
    if (v2) {
      swift_willThrow(v11, v12, v13, v14, v15, v16, v17);
    }
    else {
      uint64_t v4 = v11;
    }
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  else
  {
    id v18 = (void *)swift_slowAlloc(v8, -1LL);
    sub_10013F128(0LL, v7, v18);
    swift_bridgeObjectRetain(a2);
    uint64_t v4 = sub_1000C2FA0((uint64_t)v18, v7, v4, a2);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  swift_bridgeObjectRelease(a2);
  return v4;
}

uint64_t sub_1000C2FA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::Int v23 = (unint64_t *)result;
  uint64_t v24 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v28 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_20;
    }

    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v13 >= v28) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v13);
    ++v6;
    if (!v14)
    {
      int64_t v6 = v13 + 1;
      if (v13 + 1 >= v28) {
        goto LABEL_24;
      }
      unint64_t v14 = *(void *)(v7 + 8 * v6);
      if (!v14)
      {
        int64_t v6 = v13 + 2;
        if (v13 + 2 >= v28) {
          goto LABEL_24;
        }
        unint64_t v14 = *(void *)(v7 + 8 * v6);
        if (!v14) {
          break;
        }
      }
    }

uint64_t sub_1000C31BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_10007B1FC(&qword_10032A2B0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v30) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v30) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v30) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v30) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_41;
                }
                if (v10 >= v30) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v10 = v16;
          }
        }
      }

Swift::Int sub_1000C3474(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  sub_10007B1FC(&qword_10032AB78);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v23 = v4;
  uint64_t v5 = __CocoaSet.makeIterator()(a1);
  uint64_t v6 = __CocoaSet.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v7 = v6;
  uint64_t v8 = sub_10007CB7C(0LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
  while (1)
  {
    uint64_t v21 = v7;
    swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
    uint64_t v4 = v23;
    unint64_t v9 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v9)
    {
      sub_1000C3930(v9 + 1);
      uint64_t v4 = v23;
    }

    uint64_t v10 = v22;
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v12 = v4 + 56;
    uint64_t v13 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6))) == 0) {
      break;
    }
    unint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v4 + 48) + 8 * vswift_weakDestroy(v0 + 16) = v10;
    ++*(void *)(v4 + 16);
    uint64_t v7 = __CocoaSet.Iterator.next()();
    if (!v7) {
      goto LABEL_16;
    }
  }

  char v17 = 0;
  unint64_t v18 = (unint64_t)(63 - v13) >> 6;
  while (++v15 != v18 || (v17 & 1) == 0)
  {
    BOOL v19 = v15 == v18;
    if (v15 == v18) {
      unint64_t v15 = 0LL;
    }
    v17 |= v19;
    uint64_t v20 = *(void *)(v12 + 8 * v15);
    if (v20 != -1)
    {
      unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

Swift::Int sub_1000C3658(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10007B1FC(&qword_10032AB38);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    Swift::Int v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      BOOL v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      void *v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_10013F128(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

Swift::Int sub_1000C3930(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10007B1FC(&qword_10032AB78);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(void *)(*(void *)(v6 + 48) + 8 * v24) = v20;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = v8[v14];
        if (!v18)
        {
          int64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v18 = v8[v14];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v30;
              uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
              if (v29 > 63) {
                sub_10013F128(0LL, (unint64_t)(v29 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                void *v8 = -1LL << v29;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v19;
          }
        }
      }

unint64_t sub_1000C3BC8(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_1000C3C48(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000C3658(v11);
  }

  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)sub_1000C3F64();
      goto LABEL_22;
    }

    sub_1000C42BC(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  unint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    int64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void sub_1000C3DE0(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C3930(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_1000C4114();
      goto LABEL_14;
    }

    sub_1000C4564(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = sub_10007CB7C(0LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_1000C3F64()
{
  uint64_t v1 = v0;
  sub_10007B1FC(&qword_10032AB38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    void *v22 = *v20;
    v22[1] = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

id sub_1000C4114()
{
  uint64_t v1 = v0;
  sub_10007B1FC(&qword_10032AB78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_1000C42BC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10007B1FC(&qword_10032AB38);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    int64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    void *v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_1000C4564(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10007B1FC(&qword_10032AB78);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    Swift::Int v20 = *(void *)(v6 + 40);
    id v21 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    Swift::Int result = NSObject._rawHashValue(seed:)(v20);
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    *(void *)(*(void *)(v6 + 48) + 8 * v25) = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_39;
    }
    if (v17 >= v11) {
      goto LABEL_35;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000C47D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  unint64_t v10 = (void *)swift_task_alloc(dword_10032AAD4);
  *(void *)(v5 + 24) = v10;
  *unint64_t v10 = v5;
  v10[1] = sub_1000C4848;
  return sub_1000C18A8(a2, a3, a4, a5);
}

uint64_t sub_1000C4848(char a1)
{
  uint64_t v4 = *(_BYTE **)(v3 + 16);
  sub_10008750C(*(void *)(v3 + 24));
  _BYTE *v4 = a1 & 1;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000C4888()
{
  uint64_t v2 = v1 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  sub_1000C6218();
  uint64_t v3 = sub_1000C6708();
  return swift_deallocObject(v3, v4, v2);
}

uint64_t sub_1000C48EC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10032AAC4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000874DC;
  uint64_t v2 = sub_1000C65A4();
  return v3(v2);
}

id sub_1000C4980(void *a1)
{
  return sub_1000BFF10(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000C4990(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_1000C49D4(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1000C4A18(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1000C4A2C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000C4A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032C480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C4A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C4AD0()
{
  uint64_t v1 = sub_1000C654C();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  sub_1000C6398();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease(*(void *)(v0 + v3 + 16));
  unint64_t v6 = v0 + v3 + *(int *)(v1 + 24);
  uint64_t v7 = sub_1000B2290();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_bridgeObjectRelease(*(void *)(v5 + *(int *)(v1 + 28)));
  swift_bridgeObjectRelease(*(void *)(v0 + v4 + 8));

  uint64_t v8 = sub_1000C6584();
  return sub_1000C5F74(v8, v9, v10);
}

uint64_t sub_1000C4B84()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = v0 + v3;
  unint64_t v6 = (uint64_t *)(v0 + v5);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc(dword_10032AB54);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100087508;
  uint64_t v10 = sub_1000C65A4();
  return sub_1000BD908(v10, v11, v12, v13, v2, v4, v7, v8);
}

unint64_t sub_1000C4C38()
{
  unint64_t result = qword_10032AB60;
  if (!qword_10032AB60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B19C, &unk_1002EC8A0);
    atomic_store(result, (unint64_t *)&qword_10032AB60);
  }

  return result;
}

uint64_t sub_1000C4C78()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000C4CA0()
{
  uint64_t v1 = sub_10007B1FC(v0);
  sub_10009C720(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL));
  sub_1000221B0();
}

uint64_t sub_1000C4CD4()
{
  uint64_t v0 = sub_1000C6584();
  return sub_1000C5F74(v0, v1, v2);
}

uint64_t sub_1000C4D20(void *a1)
{
  return sub_1000BEF60( a1,  *(void ***)(v1 + 16),  *(void *)(v1 + 24),  *(void ***)(v1 + 32),  *(void *)(v1 + 40),  v1 + v3,  *(void *)(v1 + v4),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1000C4D88()
{
  sub_1000C6398();
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000C4DB0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
}

void *sub_1000C4DC0(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[6];
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

unint64_t sub_1000C4E08()
{
  unint64_t result = qword_10032AB70;
  if (!qword_10032AB70)
  {
    uint64_t v1 = sub_10007CB7C(255LL, (unint64_t *)&qword_100329340, &OBJC_CLASS___NSNumber_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10032AB70);
  }

  return result;
}

__n128 initializeWithTake for MessageServerResponse.ProductOffer(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for ExternalPurchaseTokenV2Response.Token()
{
}

unint64_t destroy for ExternalPurchaseTokenType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void _s9storekitd25ExternalPurchaseTokenTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  sub_1000221B0();
}

void *assignWithCopy for ExternalPurchaseTokenType(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for ExternalPurchaseTokenType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalPurchaseTokenType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ExternalPurchaseTokenType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_1000C5098(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(sub_100085298(v0, v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000C50B0(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenType()
{
  return &type metadata for ExternalPurchaseTokenType;
}

_BYTE *sub_1000C50E8(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for ExternalGatewayTokenManager.TokenError()
{
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV1UpdateResponse()
{
  return &type metadata for ExternalPurchaseTokenV1UpdateResponse;
}

uint64_t destroy for MessageServerResponse.ProductOffer(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void _s9storekitd31ExternalPurchaseTokenV1ResponseVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  sub_10009C738();
  sub_1000221B0();
}

void _s9storekitd31ExternalPurchaseTokenV1ResponseVwca_0()
{
  *uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  v1[1] = v4;
  swift_bridgeObjectRetain(v4);
  sub_10007BA44();
  v1[2] = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  v1[3] = v5;
  swift_bridgeObjectRetain(v5);
  sub_100085EF0();
  sub_1000AB000();
}

void _s9storekitd31ExternalPurchaseTokenV1ResponseVwta_0()
{
  uint64_t v3 = v2[1];
  uint64_t v5 = *(void *)(v4 + 8);
  *unint64_t v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = v1[3];
  v1[2] = *(void *)(v0 + 16);
  v1[3] = v6;
  swift_bridgeObjectRelease(v7);
  sub_1000221B0();
}

uint64_t getEnumTagSinglePayload for MessageServerResponse.ProductOffer(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(sub_10009C788(*(void *)(v0 + 64), v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10009C788(*(void *)(v0 + 64), v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10009C788(*(void *)(v0 + 64), v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageServerResponse.ProductOffer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV1Response()
{
  return &type metadata for ExternalPurchaseTokenV1Response;
}

void type metadata accessor for ExternalPurchaseTokenStatus()
{
}

uint64_t *sub_1000C529C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = v14;
    swift_bridgeObjectRetain(v14);
  }

  return v4;
}

uint64_t sub_1000C5360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28)));
}

uint64_t sub_1000C53BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = *(void *)(a2 + v12);
  *(void *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_1000C5454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = *(void *)(a2 + v12);
  uint64_t v14 = *(void *)(a1 + v12);
  *(void *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_1000C54FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1000C557C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = *(void *)(a1 + v12);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_1000C560C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C5618);
}

uint64_t sub_1000C5618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000B2290();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_10007D824(a1 + *(int *)(a3 + 24), a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v_Block_object_dispose(va, 8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1000C5690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C569C);
}

uint64_t sub_1000C569C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000B2290();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_10007D0AC(a1 + *(int *)(a4 + 24), a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_1000C5710(uint64_t a1)
{
  v4[0] = &unk_10027AF70;
  v4[1] = &unk_10027AF88;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_1000C579C()
{
  unint64_t result = qword_10032AC28;
  if (!qword_10032AC28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B034, &unk_1002EC9D0);
    atomic_store(result, (unint64_t *)&qword_10032AC28);
  }

  return result;
}

unint64_t sub_1000C57DC()
{
  unint64_t result = qword_10032AC30;
  if (!qword_10032AC30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B09C, &unk_1002EC8A0);
    atomic_store(result, (unint64_t *)&qword_10032AC30);
  }

  return result;
}

unint64_t sub_1000C5818()
{
  unint64_t result = qword_10032AC40;
  if (!qword_10032AC40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B608, &type metadata for ExternalPurchaseTokenV2Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032AC40);
  }

  return result;
}

unint64_t sub_1000C5854()
{
  unint64_t result = qword_10032AC58;
  if (!qword_10032AC58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B164, &unk_1002EC778);
    atomic_store(result, (unint64_t *)&qword_10032AC58);
  }

  return result;
}

uint64_t sub_1000C5890(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000849B4(&qword_10032AC48);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000C58F8()
{
  unint64_t result = qword_10032AC70;
  if (!qword_10032AC70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B13C, &unk_1002EC778);
    atomic_store(result, (unint64_t *)&qword_10032AC70);
  }

  return result;
}

unint64_t sub_1000C5934()
{
  unint64_t result = qword_10032AC80;
  if (!qword_10032AC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B5B8, &type metadata for ExternalPurchaseTokenV1Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032AC80);
  }

  return result;
}

unint64_t sub_1000C5970()
{
  unint64_t result = qword_10032AC90;
  if (!qword_10032AC90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B568, &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032AC90);
  }

  return result;
}

uint64_t sub_1000C59AC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Response.Token.CodingKeys()
{
  return &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys;
}

uint64_t getEnumTagSinglePayload for URLParserHelper.ParserError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t _s9storekitd31ExternalPurchaseTokenV2ResponseV5TokenV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10009C788(v2[8], v4) = 1;
  }
  else {
    LODWORD(sub_10009C788(v2[8], v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000C5AB8 + 4 * byte_10027AE1D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C5AEC + 4 * byte_10027AE18[v4]))();
}

uint64_t sub_1000C5AEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C5AF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C5AFCLL);
  }
  return result;
}

uint64_t sub_1000C5B08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C5B10LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000C5B14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C5B1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV1Response.CodingKeys()
{
  return &type metadata for ExternalPurchaseTokenV1Response.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ExternalPurchaseTokenV2Response.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10009C788(v2[8], v4) = 1;
  }
  else {
    LODWORD(sub_10009C788(v2[8], v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000C5B84 + 4 * byte_10027AE27[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C5BB8 + 4 * byte_10027AE22[v4]))();
}

uint64_t sub_1000C5BB8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C5BC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C5BC8LL);
  }
  return result;
}

uint64_t sub_1000C5BD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C5BDCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000C5BE0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C5BE8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Response.CodingKeys()
{
  return &type metadata for ExternalPurchaseTokenV2Response.CodingKeys;
}

unint64_t sub_1000C5C08()
{
  unint64_t result = qword_10032ACA0;
  if (!qword_10032ACA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B360, &type metadata for ExternalPurchaseTokenV2Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACA0);
  }

  return result;
}

unint64_t sub_1000C5C48()
{
  unint64_t result = qword_10032ACA8;
  if (!qword_10032ACA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B450, &type metadata for ExternalPurchaseTokenV1Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACA8);
  }

  return result;
}

unint64_t sub_1000C5C88()
{
  unint64_t result = qword_10032ACB0;
  if (!qword_10032ACB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B540, &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACB0);
  }

  return result;
}

unint64_t sub_1000C5CC8()
{
  unint64_t result = qword_10032ACB8;
  if (!qword_10032ACB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B478, &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACB8);
  }

  return result;
}

unint64_t sub_1000C5D08()
{
  unint64_t result = qword_10032ACC0;
  if (!qword_10032ACC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B4A0, &type metadata for ExternalPurchaseTokenV2Response.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACC0);
  }

  return result;
}

unint64_t sub_1000C5D48()
{
  unint64_t result = qword_10032ACC8;
  if (!qword_10032ACC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B388, &type metadata for ExternalPurchaseTokenV1Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACC8);
  }

  return result;
}

unint64_t sub_1000C5D88()
{
  unint64_t result = qword_10032ACD0;
  if (!qword_10032ACD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B3B0, &type metadata for ExternalPurchaseTokenV1Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACD0);
  }

  return result;
}

unint64_t sub_1000C5DC8()
{
  unint64_t result = qword_10032ACD8;
  if (!qword_10032ACD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B298, &type metadata for ExternalPurchaseTokenV2Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACD8);
  }

  return result;
}

unint64_t sub_1000C5E08()
{
  unint64_t result = qword_10032ACE0;
  if (!qword_10032ACE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B2C0, &type metadata for ExternalPurchaseTokenV2Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ACE0);
  }

  return result;
}

uint64_t sub_1000C5E90(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_1000C5EB8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000C5EC4()
{
  return swift_task_dealloc(*(void *)(v0 + 344));
}

uint64_t sub_1000C5F00(float a1)
{
  *__int16 v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_1000C5F20(uint64_t a1)
{
}

void sub_1000C5F40(uint64_t a1)
{
}

uint64_t sub_1000C5F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

BOOL sub_1000C5F64(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000C5F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void sub_1000C5F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000C5F90()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000C5FA0(void *a1)
{
}

uint64_t sub_1000C5FBC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_1000C5FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)(a1 + a2);
  void *v4 = v3;
  v4[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000C5FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void sub_1000C5FF4()
{
  *(_WORD *)(v0 + 12) = 2082;
}

uint64_t sub_1000C6004(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void sub_1000C600C()
{
}

void sub_1000C6014(void *a1, void *a2, uint64_t a3, char a4)
{
}

uint64_t sub_1000C6020()
{
  return sub_1000C4A8C(*(void *)(v0 + 264), *(void *)(v0 + 328));
}

uint64_t sub_1000C604C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000C6064(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1);
}

void sub_1000C6074( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  v14._countAndFlagsBits = v13;
  v14._object = v12;
  String.append(_:)(v14);
}

BOOL sub_1000C6084(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000C6094(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000C60B0@<X0>( uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W8>)
{
  *a2 = a8;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000C6108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000C6124(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_1000C616C()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

void sub_1000C6194()
{
  v2._countAndFlagsBits = 0x646F6D20726F6620LL;
  v2._object = (void *)0xEA00000000002065LL;
  String.append(_:)(v2);
}

  ;
}

void sub_1000C61DC()
{
}

void sub_1000C61E4()
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
}

uint64_t sub_1000C61F4()
{
  return type metadata accessor for Request();
}

uint64_t sub_1000C61FC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a1[2] = 0LL;
  a1[3] = 0LL;
  a1[4] = a13;
  a1[5] = v13;
  return sub_1000C4A8C(v14, (uint64_t)a1 + v15);
}

uint64_t sub_1000C6218()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_1000C6228(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(a1, v3, a3);
}

uint64_t sub_1000C6230()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000C6240(void *a1)
{
}

uint64_t sub_1000C625C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return sub_10007A488(0LL, 0xE000000000000000LL, (uint64_t *)va);
}

uint64_t sub_1000C626C()
{
  return swift_task_dealloc(*(void *)(v0 + 208));
}

uint64_t sub_1000C6274(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000C6290()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000C6298@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1000C62A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, a3, a4, 0LL);
}

uint64_t sub_1000C62B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
}

  ;
}

void sub_1000C62CC(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v1);
}

  ;
}

void sub_1000C62F4(Swift::String a1)
{
}

uint64_t sub_1000C62FC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000C6314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000BC23C(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1000C6320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_1000C6328( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a12, a11, v13);
}

  ;
}

  ;
}

uint64_t sub_1000C6368()
{
  return sub_10007D824(v0, 1LL, v1);
}

uint64_t sub_1000C6388()
{
  return swift_release(v0);
}

uint64_t sub_1000C6390(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000C6398()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

uint64_t sub_1000C63A0()
{
  return sub_1000C4A44(*(void *)(v0 + 280), *(void *)(v0 + 264));
}

uint64_t sub_1000C63B4()
{
  *(void *)(v1 + 136) = v0;
  return swift_errorRetain(v0);
}

BOOL sub_1000C63C8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000C63D4@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_1000C63E8()
{
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
  *(void *)(v0 + 32) = 0LL;
  return swift_errorRelease(*(void *)(v1 + 136));
}

void sub_1000C63FC()
{
}

void sub_1000C6410()
{
}

void sub_1000C6424(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1000C6434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10007A488(a1, (a2 - 32) | 0x8000000000000000LL, (uint64_t *)va);
}

  ;
}

void sub_1000C6454()
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
}

BOOL sub_1000C6464(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

id sub_1000C6474()
{
  return v0;
}

  ;
}

uint64_t sub_1000C6494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000C64A4(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_1000C64B4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

  ;
}

uint64_t sub_1000C64D4()
{
  return *(void *)(v0 + 128);
}

void sub_1000C64EC()
{
}

uint64_t sub_1000C64F4(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1);
}

  ;
}

void sub_1000C651C()
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = *v0;
}

uint64_t sub_1000C652C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

unint64_t sub_1000C6534()
{
  return 0xD000000000000036LL;
}

uint64_t sub_1000C654C()
{
  return type metadata accessor for ExternalPurchaseTokenV2Response(0LL);
}

uint64_t sub_1000C6554(uint64_t a1)
{
  return swift_task_dealloc(a1);
}

uint64_t sub_1000C655C()
{
  return swift_release(*(void *)(v0 + 128));
}

  ;
}

void sub_1000C657C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t sub_1000C6584()
{
  return v0;
}

  ;
}

uint64_t sub_1000C65A4()
{
  return v0;
}

void sub_1000C65BC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000C65C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4, v5, a3, a4, 0LL);
}

void sub_1000C65D4()
{
}

void sub_1000C65DC(uint64_t a1, uint64_t *a2)
{
}

  ;
}

  ;
}

unint64_t sub_1000C65FC()
{
  return sub_1000C4C38();
}

uint64_t sub_1000C6608()
{
  return sub_10007B1A0(*(void **)(v0 - 96));
}

uint64_t sub_1000C6610()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + v1 + 8));
}

  ;
}

  ;
}

uint64_t sub_1000C6644()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 360));
}

  ;
}

void sub_1000C665C()
{
}

uint64_t sub_1000C6664(uint64_t a1)
{
  return _print_unlocked<A, B>(_:_:)(a1, v1);
}

void sub_1000C666C(void *a1@<X8>)
{
  *a1 = *v1;
}

  ;
}

uint64_t sub_1000C668C()
{
  return *v0;
}

uint64_t sub_1000C6698(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

  ;
}

void sub_1000C66AC(void *a1@<X8>)
{
}

uint64_t sub_1000C66B8()
{
  return *(void *)(v0 + 184);
}

void sub_1000C66CC()
{
}

id sub_1000C66D4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1000C66E0()
{
  return swift_task_dealloc(*(void *)(v0 + 376));
}

  ;
}

  ;
}

uint64_t sub_1000C6708()
{
  return v0;
}

void *sub_1000C6714()
{
  return sub_1000C4DC0(v0);
}

uint64_t sub_1000C671C()
{
  return sub_10007B1A0(v0);
}

void sub_1000C6724()
{
}

uint64_t sub_1000C6730@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000C673C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URL.init(fileURLWithPath:)(a1, a2);
  sub_1000C67E0((uint64_t)v9, a3);
  char v11 = v10;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v11 & 1;
}

void sub_1000C67E0(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10007B1FC(&qword_10032ACE8);
  uint64_t inited = swift_initStackObject(v6, v58);
  uint64_t v8 = inited;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10027A330;
  uint64_t v9 = (void *)kMISValidationOptionOnlineAuthorization;
  *(void *)(inited + 32) = kMISValidationOptionOnlineAuthorization;
  *(void *)(inited + 40) = kCFBooleanFalse;
  char v10 = (void *)kMISValidationOptionValidateSignatureOnly;
  CFBooleanRef v11 = kCFBooleanTrue;
  if ((a2 & 1) == 0) {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  *(void *)(inited + 4_Block_object_dispose(va, 8) = kMISValidationOptionValidateSignatureOnly;
  *(void *)(inited + 56) = v11;
  uint64_t v12 = v11;
  id v13 = v9;
  uint64_t v14 = kCFBooleanFalse;
  id v15 = v10;
  uint64_t v16 = sub_10007B1FC(&qword_10032ACF0);
  uint64_t v17 = sub_10007B1FC(&qword_10032ACF8);
  unint64_t v18 = sub_1000C6D70();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)(v8, v16, v17, v18);
  v20.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  BOOL v57 = 0LL;
  URL.path(percentEncoded:)(0);
  NSString v21 = String._bridgeToObjectiveC()();
  sub_10007B980();
  uint64_t v22 = MISValidateSignatureAndCopyInfo(v21, v20.super.isa, &v57);
  if ((_DWORD)v22) {
    goto LABEL_4;
  }
  uint64_t v43 = v57;
  if (!v57) {
    goto LABEL_4;
  }
  uint64_t v55 = 0LL;
  type metadata accessor for CFString(0LL);
  uint64_t v45 = v44;
  uint64_t v46 = sub_10009D5CC( &qword_100329010,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10027A1E4);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v43,  &v55,  v45,  (char *)&type metadata for Swift.AnyObject + 8,  v46);

  uint64_t v47 = v55;
  if (!v55) {
    goto LABEL_4;
  }
  if (!kMISValidationInfoSignerType)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if ((v55 & 0xC000000000000001LL) != 0)
  {
    id v48 = kMISValidationInfoSignerType;
    uint64_t v49 = __CocoaDictionary.lookup(_:)();

    sub_10007B980();
    if (!v49) {
      goto LABEL_4;
    }
    goto LABEL_20;
  }

  if (!*(void *)(v55 + 16))
  {
LABEL_23:
    sub_10007B980();
    goto LABEL_4;
  }

  id v50 = kMISValidationInfoSignerType;
  unint64_t v51 = sub_100132290((uint64_t)v50);
  if ((v52 & 1) == 0)
  {

    goto LABEL_23;
  }

  uint64_t v49 = *(void *)(*(void *)(v47 + 56) + 8 * v51);
  swift_unknownObjectRetain(v49);

  sub_10007B980();
LABEL_20:
  uint64_t v55 = v49;
  if ((swift_dynamicCast(&v54, &v55, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int, 6LL) & 1) != 0)
  {

    return;
  }

LABEL_4:
  uint64_t v23 = MISCopyErrorStringForErrorCodeUnlocalized(v22);
  if (!v23)
  {
    __break(1u);
    goto LABEL_25;
  }

  unint64_t v24 = (void *)v23;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  unint64_t v27 = v26;

  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v28 = sub_100079604(v3, (uint64_t)qword_10033E1A8);
  sub_10007961C(v28, (uint64_t)v5);
  uint64_t v55 = 0LL;
  unint64_t v56 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease(v56);
  uint64_t v55 = 0xD00000000000001BLL;
  unint64_t v56 = 0x80000001002A0250LL;
  uint64_t v29 = type metadata accessor for URL(0LL);
  uint64_t v30 = sub_10009D5CC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
  object = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  v33._countAndFlagsBits = 8250LL;
  v33._object = (void *)0xE200000000000000LL;
  String.append(_:)(v33);
  v34._countAndFlagsBits = v25;
  v34._object = v27;
  String.append(_:)(v34);
  uint64_t v35 = swift_bridgeObjectRelease(v27);
  uint64_t v37 = v55;
  unint64_t v36 = v56;
  LOBYTE(v29) = static os_log_type_t.error.getter(v35);
  uint64_t v38 = swift_bridgeObjectRetain_n(v36, 2LL);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = v29;
  if (os_log_type_enabled(v39, (os_log_type_t)v29))
  {
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = swift_slowAlloc(64LL, -1LL);
    uint64_t v55 = v42;
    *(_DWORD *)uint64_t v41 = 136446466;
    uint64_t v53 = v5;
    uint64_t v54 = sub_10007A488(0LL, 0xE000000000000000LL, &v55);
    sub_1000C6DEC();
    *(_WORD *)(v41 + 12) = 2082;
    swift_bridgeObjectRetain(v36);
    uint64_t v54 = sub_10007A488(v37, v36, &v55);
    sub_1000C6DEC();
    sub_1000C6DFC();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s%{public}s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v42);
    sub_10007B974(v41);

    uint64_t v5 = v53;
    swift_bridgeObjectRelease(v36);
  }

  else
  {

    sub_1000C6DFC();
  }

  sub_10007A3CC((uint64_t)v5);
}

unint64_t sub_1000C6D70()
{
  unint64_t result = qword_10032AD00;
  if (!qword_10032AD00)
  {
    uint64_t v1 = sub_1000849B4(&qword_10032ACF0);
    sub_10009D5CC( &qword_100329010,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10027A1E4);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10032AD00);
  }

  return result;
}

uint64_t sub_1000C6DEC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 184, v0, v1);
}

uint64_t sub_1000C6DFC()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

NSString sub_1000C6E08()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_10033E0A0 = (uint64_t)result;
  return result;
}

id sub_1000C6E3C()
{
  if (qword_100328AD0 != -1) {
    swift_once(&qword_100328AD0, sub_1000C6E08);
  }
  return (id)qword_10033E0A0;
}

void sub_1000C6E90(uint64_t a1)
{
  if (qword_100328AD0 != -1) {
    swift_once(&qword_100328AD0, sub_1000C6E08);
  }
  uint64_t v2 = (void *)qword_10033E0A0;
  qword_10033E0A0 = a1;
}

uint64_t sub_1000C6EF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  if (qword_100328AD0 != -1) {
    swift_once(&qword_100328AD0, sub_1000C6E08);
  }
  CFPropertyListRef v3 = CFPreferencesCopyAppValue(v2, (CFStringRef)qword_10033E0A0);

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = (const void *)swift_unknownObjectRetain(v3);
  CFTypeID v5 = CFGetTypeID(v4);
  if (v5 != CFDataGetTypeID())
  {
    sub_1000C7574();
    return 0LL;
  }

  type metadata accessor for CFData(0LL);
  uint64_t v7 = v6;
  uint64_t v8 = swift_unknownObjectRetain(v3);
  uint64_t v9 = (void *)swift_dynamicCastUnknownClassUnconditional(v8, v7, 0LL, 0LL, 0LL);
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  sub_1000C7574();

  return v10;
}

uint64_t sub_1000C6FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  sub_1000E8F90(v7);
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
  }

  else
  {
    if (qword_100328AD8 != -1) {
      swift_once(&qword_100328AD8, sub_1000CF428);
    }
    uint64_t v10 = 0x797A7A7978LL;
    if ((byte_10033E0A8 & 1) == 0)
    {
      if (qword_100328B40 != -1) {
        swift_once(&qword_100328B40, sub_1000F4208);
      }
      uint64_t v12 = sub_100079604(v4, (uint64_t)qword_10033E1A8);
      uint64_t v13 = sub_10007961C(v12, (uint64_t)v6);
      uint64_t v14 = static os_log_type_t.fault.getter(v13);
      os_log_type_t v15 = v14;
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v17 = v15;
      if (os_log_type_enabled(v16, v15))
      {
        uint64_t v18 = swift_slowAlloc(22LL, -1LL);
        uint64_t v19 = swift_slowAlloc(64LL, -1LL);
        uint64_t v27 = v19;
        *(_DWORD *)uint64_t v18 = 136446466;
        uint64_t v26 = sub_10007A488(0LL, 0xE000000000000000LL, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 4);
        *(_WORD *)(v18 + 12) = 2082;
        uint64_t v26 = sub_10007A488(0xD000000000000034LL, 0x80000001002A0330LL, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 14);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s%{public}s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1LL, -1LL);
        swift_slowDealloc(v18, -1LL, -1LL);
      }

      sub_10007A3CC((uint64_t)v6);
    }

    uint64_t v11 = 0xE500000000000000LL;
  }

  uint64_t v20 = sub_10012AD48(v10, v11, a1, a2);
  uint64_t v22 = v21;
  swift_bridgeObjectRelease(v11);
  uint64_t v23 = String.utf8CString.getter(v20, v22);
  swift_bridgeObjectRelease(v22);
  uint64_t v24 = ContiguousArray<A>.stableHashValue.getter(v23);
  swift_release(v23);
  uint64_t v27 = v24;
  return dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
}

void sub_1000C7320()
{
  uint64_t v0 = (__CFString *)sub_1000C7550();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  String._bridgeToObjectiveC()();
  sub_1000C7580();
  uint64_t v2 = qword_100328AD0;
  CFPropertyListRef v3 = isa;
  uint64_t v4 = v3;
  if (v2 != -1)
  {
    swift_once(&qword_100328AD0, sub_1000C6E08);
    CFPropertyListRef v3 = v4;
  }

  CFPreferencesSetAppValue(v0, v3, (CFStringRef)qword_10033E0A0);

  CFPreferencesAppSynchronize((CFStringRef)qword_10033E0A0);
}

uint64_t sub_1000C7478()
{
  if (qword_100328AD0 != -1) {
    swift_once(&qword_100328AD0, sub_1000C6E08);
  }
  CFPreferencesSetAppValue(v0, 0LL, (CFStringRef)qword_10033E0A0);

  return CFPreferencesAppSynchronize((CFStringRef)qword_10033E0A0);
}

unint64_t sub_1000C7514()
{
  unint64_t result = qword_10032AD08;
  if (!qword_10032AD08)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_10032AD08);
  }

  return result;
}

uint64_t sub_1000C7550()
{
  return sub_1000C6FEC(v1, v0);
}

unint64_t sub_1000C7564()
{
  return sub_1000C7514();
}

uint64_t sub_1000C7574()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000C7580()
{
  return swift_bridgeObjectRelease(v0);
}

id sub_1000C758C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  os_log_type_t v15 = (char *)&v77 - v14;
  __chkstk_darwin(v13);
  os_log_type_t v17 = (char *)&v77 - v16;
  id v18 = [a1 object];
  uint64_t v78 = a2;
  if (v18)
  {
    id v19 = v18;
    _bridgeAnyObjectToAny(_:)(v79);
    swift_unknownObjectRelease(v19);
  }

  else
  {
    memset(v79, 0, sizeof(v79));
  }

  sub_1000CB2E0((uint64_t)v79, (uint64_t)&v80, (uint64_t *)&unk_100328ED0);
  if (!v82)
  {
    sub_100085298((uint64_t)&v80, (uint64_t *)&unk_100328ED0);
    goto LABEL_19;
  }

  uint64_t v20 = sub_10007B1FC(&qword_10032A580);
  uint64_t v21 = swift_dynamicCast(&v85, &v80, (char *)&type metadata for Any + 8, v20, 6LL);
  if ((v21 & 1) == 0)
  {
LABEL_19:
    __int128 v83 = 0u;
    __int128 v84 = 0u;
    goto LABEL_20;
  }

  uint64_t v77 = v12;
  sub_1000CB984(1635017060LL, 0xE400000000000000LL, &v83);
  uint64_t v21 = sub_10007B980();
  if (!*((void *)&v84 + 1))
  {
LABEL_20:
    sub_1000CB740(v21, (uint64_t *)&unk_100328ED0);
    goto LABEL_21;
  }

  uint64_t v22 = sub_10007B1FC(&qword_10032A588);
  uint64_t v24 = v80;
  if (!*(void *)(v80 + 16))
  {
    uint64_t v21 = swift_bridgeObjectRelease(v80);
    goto LABEL_19;
  }

  swift_bridgeObjectRetain(*(void *)(v80 + 32));
  swift_bridgeObjectRelease(v24);
  sub_1000CB984(0x7475626972747461LL, 0xEA00000000007365LL, &v83);
  uint64_t v21 = sub_10007B980();
  if (!*((void *)&v84 + 1)) {
    goto LABEL_20;
  }
  if ((sub_1000CB604() & 1) != 0)
  {
    uint64_t v25 = v80;
    uint64_t v26 = type metadata accessor for URL(0LL);
    sub_10007D0AC((uint64_t)v17, 1LL, 1LL, v26);
    sub_10012A674(1634497893LL, 0xE400000000000000LL, v25, &v83);
    if (*((void *)&v84 + 1))
    {
      int v29 = sub_1000CB658(v27, v28, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
      if (v29) {
        uint64_t v30 = v80;
      }
      else {
        uint64_t v30 = 0LL;
      }
      if (v29) {
        uint64_t v31 = v81;
      }
      else {
        uint64_t v31 = 0LL;
      }
    }

    else
    {
      sub_1000CB740(v27, (uint64_t *)&unk_100328ED0);
      uint64_t v30 = 0LL;
      uint64_t v31 = 0LL;
    }

    uint64_t v54 = (uint64_t)v77;
    sub_1000CB908();
    sub_10012A674(v55, v56, v25, v57);
    uint64_t v58 = swift_bridgeObjectRelease(v25);
    if (*((void *)&v84 + 1))
    {
      if ((sub_1000CB604() & 1) != 0)
      {
        sub_1000CB984(1936684660LL, 0xE400000000000000LL, &v83);
        uint64_t v59 = sub_10007B980();
        if (*((void *)&v84 + 1))
        {
          uint64_t v60 = sub_1000CB604();
          if ((v60 & 1) != 0)
          {
            uint64_t v61 = v80;
            if (v80)
            {
              swift_bridgeObjectRetain(v80);
              sub_1000CB908();
              sub_10012A674(v62, v63, v61, v64);
              uint64_t v60 = sub_1000AABA8();
              if (*((void *)&v84 + 1))
              {
                int v66 = sub_1000CB658(v60, v65, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
                if (v66) {
                  uint64_t v67 = v80;
                }
                else {
                  uint64_t v67 = 0LL;
                }
                if (v66) {
                  uint64_t v68 = v81;
                }
                else {
                  uint64_t v68 = 0LL;
                }
                goto LABEL_48;
              }

              char v69 = 0;
LABEL_46:
              sub_1000CB740(v60, (uint64_t *)&unk_100328ED0);
              uint64_t v68 = 0LL;
              uint64_t v67 = 0LL;
              if ((v69 & 1) != 0)
              {
                __int128 v83 = 0u;
                __int128 v84 = 0u;
                goto LABEL_51;
              }

LABEL_48:
              sub_1000CB908();
              sub_10012A674(0xD000000000000010LL, v71, v61, v72);
              uint64_t v70 = sub_1000AABA8();
              if (*((void *)&v84 + 1))
              {
                if (sub_1000CB658( v70,  v73,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String))
                {
                  uint64_t v74 = v80;
                  unint64_t v75 = v81;
LABEL_53:
                  URL.init(string:)(v74, v75);
                  sub_1000AABA8();
                  sub_100085298((uint64_t)v17, (uint64_t *)&unk_10032A1C0);
                  sub_1000CB2E0((uint64_t)v15, (uint64_t)v17, (uint64_t *)&unk_10032A1C0);
                  uint64_t v54 = (uint64_t)v77;
                  goto LABEL_54;
                }

LABEL_51:
              sub_1000CB740(v70, (uint64_t *)&unk_100328ED0);
              goto LABEL_52;
            }
          }
        }

        else
        {
          sub_1000CB740(v59, (uint64_t *)&unk_100328ED0);
        }

        uint64_t v61 = 0LL;
        __int128 v83 = 0u;
        __int128 v84 = 0u;
        char v69 = 1;
        goto LABEL_46;
      }
    }

    else
    {
      sub_1000CB740(v58, (uint64_t *)&unk_100328ED0);
    }

    uint64_t v67 = 0LL;
    uint64_t v68 = 0LL;
LABEL_54:
    sub_1000B4064((uint64_t)v17, v54);
    id v76 = objc_allocWithZone((Class)&OBJC_CLASS___PolicyResponse);
    id v36 = sub_1000CB1A0(v30, v31, v67, v68, v54);
    sub_100085298((uint64_t)v17, (uint64_t *)&unk_10032A1C0);
    return v36;
  }

  __break(1u);
}

uint64_t sub_1000C7C6C()
{
  uint64_t v0 = type metadata accessor for Client.Server(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000DE6D4();
  uint64_t v3 = sub_10007B1FC(&qword_10032A028);
  if (sub_10007D824((uint64_t)v2, 2LL, v3))
  {
    sub_100085BC4((uint64_t)v2, type metadata accessor for Client.Server);
    return 0x2F2F3A7370747468LL;
  }

  else
  {
    uint64_t v5 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v2, v5);
    return 0x2F2F3A70747468LL;
  }

uint64_t sub_1000C7D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[164] = a4;
  v4[163] = a3;
  v4[162] = a2;
  v4[161] = a1;
  uint64_t v5 = type metadata accessor for URLComponents(0LL);
  v4[165] = v5;
  v4[166] = *(void *)(v5 - 8);
  v4[167] = sub_100093010();
  v4[168] = sub_100093010();
  v4[169] = type metadata accessor for SKLogger(0LL);
  v4[170] = sub_100093010();
  v4[171] = sub_100093010();
  v4[172] = sub_100093010();
  v4[173] = sub_100093010();
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000C7DE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v28;
  a24 = v26;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v29 = v26[173];
  uint64_t v30 = v26[164];
  uint64_t v31 = sub_100079604(v26[169], (uint64_t)qword_10033E1A8);
  v26[174] = v31;
  uint64_t v32 = sub_10007961C(v31, v29);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  uint64_t v34 = sub_100085EE8(v30);
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  BOOL v36 = os_log_type_enabled(v35, v33);
  uint64_t v37 = (void *)v26[164];
  if (v36)
  {
    uint64_t v38 = v26[163];
    uint64_t v39 = sub_10007B9FC(22LL);
    uint64_t v40 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v39 = 136446466;
    a13 = v40;
    a14 = 91LL;
    a15 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v37);
    v41._countAndFlagsBits = v38;
    v41._object = v37;
    String.append(_:)(v41);
    sub_100085F14();
    swift_bridgeObjectRelease(v37);
    v26[159] = sub_10008620C(a14, v42, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v26 + 159, v26 + 160, v39 + 4);
    sub_10007B980();
    sub_10007D974((uint64_t)v37);
    *(_WORD *)(v39 + 12) = 2082;
    sub_1000862B8();
    v26[160] = sub_10007A488(v43, v44, &a13);
    sub_100086194((uint64_t)(v26 + 160), (uint64_t)(v26 + 161));
    sub_100086038((void *)&_mh_execute_header, v35, v33, "%{public}s%{public}s", (uint8_t *)v39);
    sub_100086030(v40, v45, (uint64_t)&type metadata for Any + 8);
    sub_10007B974(v40);
    sub_10007B974(v39);
  }

  else
  {
    sub_10007D974(v26[164]);
  }

  uint64_t v71 = v26[168];
  uint64_t v70 = v26[165];
  uint64_t v46 = v26[164];
  uint64_t v47 = v26[163];
  uint64_t v48 = (void *)v26[162];
  uint64_t v49 = (void *)v26[161];
  sub_100085BC4(v26[173], type metadata accessor for SKLogger);
  sub_1000DEA24();
  uint64_t v51 = v50;
  id v52 = objc_allocWithZone(&OBJC_CLASS___AMSMediaTokenService);
  sub_1000862B8();
  sub_1000A8638(0xD000000000000017LL, v53, v51);
  uint64_t v55 = v54;
  v26[175] = v54;
  id v56 = sub_1000DF468();
  sub_1000875F4(v55, "setClientInfo:");

  id v57 = v55;
  sub_1000DEA24();
  uint64_t v59 = v58;
  id v60 = [objc_allocWithZone(AMSMediaRequestEncoder) initWithTokenService:v57 bag:v58];
  v26[176] = v60;
  swift_unknownObjectRelease(v59);

  id v61 = sub_1000DF468();
  sub_1000875F4(v60, "setClientInfo:");

  sub_1000A94FC(v47, v46, v60);
  id v62 = [objc_allocWithZone(AMSMediaProtocolHandler) initWithTokenService:v57];
  v26[177] = v62;
  id v63 = [objc_allocWithZone(AMSMediaResponseDecoder) init];
  v26[178] = v63;
  sub_1000DF67C();
  uint64_t v65 = v64;
  v26[179] = v64;
  [v64 setProtocolHandler:v62];
  [v65 setResponseDecoder:v63];
  sub_1000875F4(v57, "setSession:");
  int v66 = (void *)sub_1000CB734((uint64_t)&unk_1002ECCB8);
  v26[180] = v66;
  v66[2] = v49;
  v66[3] = v48;
  v66[4] = v47;
  v66[5] = v46;
  swift_bridgeObjectRetain(v46);
  id v67 = v49;
  id v68 = v48;
  sub_1000CB8E8();
  swift_asyncLet_begin(v26 + 2, 0LL, v70, &unk_10032AD20, v66, v71);
  return sub_1000AA56C();
}

uint64_t sub_1000C81A8()
{
  *(void *)(v1 + 144_Block_object_dispose(va, 8) = v0;
  if (v0) {
    return sub_1000AA254((uint64_t)sub_1000C8B5C);
  }
  else {
    return sub_1000AA254((uint64_t)sub_1000C81C8);
  }
}

uint64_t sub_1000C81C8()
{
  uint64_t v1 = (void *)v0[176];
  uint64_t v2 = v0[167];
  uint64_t v3 = v0[166];
  uint64_t v4 = v0[165];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v2, v0[168], v4);
  Class isa = URLComponents._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  id v6 = [v1 requestWithComponents:isa];
  v0[182] = v6;

  v0[90] = v0;
  v0[95] = v0 + 147;
  v0[91] = sub_1000C82E8;
  v0[117] = swift_continuation_init(v0 + 90, 1LL);
  v0[113] = _NSConcreteStackBlock;
  v0[114] = 0x40000000LL;
  v0[115] = sub_1000A6A08;
  v0[116] = &unk_1002ECCD0;
  [v6 resultWithTimeout:v0 + 113 completion:60.0];
  return swift_continuation_await(v0 + 90);
}

uint64_t sub_1000C82E8()
{
  *(void *)(v0 + 1464) = *(void *)(v0 + 752);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000C832C()
{
  uint64_t v1 = (void *)v0[182];
  uint64_t v2 = (void *)v0[147];
  v0[184] = v2;
  id v3 = v2;

  sub_1000CB760();
  return sub_1000AA2B4();
}

uint64_t sub_1000C8378()
{
  return sub_1000AA254((uint64_t)sub_1000C8384);
}

uint64_t sub_1000C8384()
{
  uint64_t v1 = (void *)v0[184];
  uint64_t v2 = (void *)v0[179];
  swift_release(v0[180]);
  id v3 = [v2 dataTaskPromiseWithRequest:v1];
  v0[185] = v3;

  v0[82] = v0;
  v0[87] = v0 + 152;
  v0[83] = sub_1000C8468;
  v0[107] = swift_continuation_init(v0 + 82, 1LL);
  v0[103] = _NSConcreteStackBlock;
  v0[104] = 0x40000000LL;
  v0[105] = sub_1000A6A1C;
  v0[106] = &unk_1002ECCE8;
  [v3 resultWithTimeout:v0 + 103 completion:60.0];
  sub_1000CB9C4();
  return swift_continuation_await(v4);
}

uint64_t sub_1000C8468()
{
  *(void *)(v0 + 148_Block_object_dispose(va, 8) = *(void *)(v0 + 688);
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000C84AC()
{
  uint64_t v184 = v1;
  uint64_t v185 = v2;
  uint64_t v183 = v0;
  id v3 = *(void **)(v0 + 1448);
  uint64_t v4 = *(void **)(v0 + 1312);
  uint64_t v5 = *(void *)(v0 + 1304);
  id v6 = *(void **)(v0 + 1216);

  sub_10007CB7C(0LL, &qword_10032AD28, &off_1002E5C48);
  id v7 = sub_1000C758C(v6, v5, v4);
  if (!v3)
  {
    id v22 = v7;
    uint64_t v23 = *(void *)(v0 + 1440);
    uint64_t v24 = *(void **)(v0 + 1432);
    uint64_t v25 = *(void **)(v0 + 1424);
    uint64_t v26 = *(void **)(v0 + 1416);
    uint64_t v27 = *(void **)(v0 + 1408);
    uint64_t v28 = *(void **)(v0 + 1400);
    uint64_t v156 = *(void *)(v0 + 1376);
    uint64_t v162 = *(void *)(v0 + 1368);
    uint64_t v168 = *(void *)(v0 + 1360);
    uint64_t v173 = *(void *)(v0 + 1344);
    uint64_t v176 = *(void *)(v0 + 1336);

    swift_release(v23);
    uint64_t v29 = sub_100093124();
    uint64_t v37 = sub_100093B38(v29, v30, v31, v32, v33, v34, v35, v36, v141, v146, v151, v156);
    uint64_t v45 = sub_100093AB8(v37, v38, v39, v40, v41, v42, v43, v44, v142, v147, v152, v157, v162);
    uint64_t v53 = sub_100093AD0(v45, v46, v47, v48, v49, v50, v51, v52, v143, v148, v153, v158, v163, v168);
    uint64_t v61 = sub_100093AF8(v53, v54, v55, v56, v57, v58, v59, v60, v144, v149, v154, v159, v164, v169, v173);
    sub_1000CB828(v61, v62, v63, v64, v65, v66, v67, v68, v145, v150, v155, v160, v165, v170, v174, v176);
    return (*(uint64_t (**)(id))(v0 + 8))(v22);
  }

  uint64_t v8 = v3;

  uint64_t v9 = (void *)_convertErrorToNSError(_:)(v3);
  id v10 = [v9 userInfo];
  uint64_t v11 = &type metadata for Any;
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v10,  &type metadata for String,  (char *)&type metadata for Any + 8);

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorUserInfoKeyServerPayload);
  sub_1000938B8(v13, v14);
  sub_100085FB4();
  sub_10007BA44();
  uint64_t v175 = v9;
  if (!*(void *)(v0 + 1008))
  {
    uint64_t v70 = (char *)(v0 + 984);
LABEL_12:
    sub_100085298((uint64_t)v70, (uint64_t *)&unk_100328ED0);
    goto LABEL_13;
  }

  uint64_t v15 = sub_10007B1FC(&qword_10032A580);
  if ((sub_1000CB748(v15) & 1) == 0) {
    goto LABEL_13;
  }
  sub_1000CB61C();
  if (!*(void *)(v0 + 1072))
  {
    sub_10007B980();
    uint64_t v70 = (char *)&type metadata for Any + 8;
    goto LABEL_12;
  }

  if ((sub_1000CB678(v0 + 1224, v16, v17, (uint64_t)&type metadata for Int) & 1) != 0)
  {
    sub_1000CB59C();
    sub_10007B980();
    if (*(void *)(v0 + 1040))
    {
      if (sub_1000CB678(v0 + 1080, v18, v19, (uint64_t)&type metadata for String))
      {
        uint64_t v20 = *(void *)(v0 + 1080);
        uint64_t v21 = *(os_log_s **)(v0 + 1088);
LABEL_21:
        sub_1000CB964();
        sub_100093664();
        swift_bridgeObjectRelease(v182);
        sub_1000CB5D0();
        v186._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        sub_100093A60(v186);
        sub_100085EF0();
        uint64_t v111 = v181;
        uint64_t v179 = v181;
        uint64_t v180 = v182;
        uint64_t v171 = v8;
        uint64_t v161 = (uint64_t)v21;
        uint64_t v167 = v20;
        if (v21)
        {
          sub_1000CB6E8( v181,  v104,  v105,  v106,  v107,  v108,  v109,  v110,  v141,  v146,  v151,  (uint64_t)v21,  v20,  (uint64_t)v8,  v12,  (uint64_t)v9,  v177,  (uint64_t)v178,  v179,  v180,  v181,  v182);
          sub_1000937E8();
          sub_1000935BC(v181);
          sub_100085EF0();
          uint64_t v111 = v179;
        }

        os_log_type_t v112 = *(void **)(v0 + 1312);
        sub_1000935BC(v111);
        uint64_t v113 = sub_100085EF0();
        uint64_t v114 = (void *)v177;
        static os_log_type_t.error.getter(v113);
        sub_100085EE8((uint64_t)v112);
        uint64_t v115 = sub_100085EE8((uint64_t)v178);
        uint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
        BOOL v117 = sub_1000938C8(v116);
        uint64_t v118 = *(void **)(v0 + 1312);
        if (v117)
        {
          uint64_t v119 = *(void *)(v0 + 1304);
          uint64_t v120 = (uint8_t *)sub_10007B9FC(22LL);
          uint64_t v151 = v177;
          uint64_t v114 = (void *)sub_10007B9FC(64LL);
          uint64_t v179 = (uint64_t)v114;
          *(_DWORD *)uint64_t v120 = 136446466;
          os_log_type_t v112 = v120 + 4;
          uint64_t v181 = 91LL;
          uint64_t v182 = 0xE100000000000000LL;
          swift_bridgeObjectRetain(v118);
          v121._countAndFlagsBits = v119;
          v121._object = v118;
          String.append(_:)(v121);
          sub_100085F14();
          swift_bridgeObjectRelease(v118);
          *(void *)(v0 + 124_Block_object_dispose(va, 8) = sub_10008620C(91LL, v122, &v179);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1248, v0 + 1256, v120 + 4);
          sub_10007B980();
          sub_10007D974((uint64_t)v118);
          uint64_t v123 = sub_1000CB83C();
          *(void *)(v0 + 1256) = sub_1000CB930(v123, v124, v125, v126, v127, v128, v129, v130, v0 + 1256, v0 + 1248);
          sub_100086194(v0 + 1256, v0 + 1264);
          sub_100085E64((uint64_t)v178);
          sub_100086038((void *)&_mh_execute_header, v21, (os_log_type_t)v8, "%{public}s%{public}s", v120);
          sub_100086030((uint64_t)v114, v131, (uint64_t)&type metadata for Any + 8);
          sub_10007B974((uint64_t)v114);
          sub_10007B974((uint64_t)v120);

          sub_100093460();
        }

        else
        {
          sub_10007D974(*(void *)(v0 + 1312));
          sub_100085E64((uint64_t)v178);
        }

        uint64_t v132 = sub_1000CB6B8();
        sub_100085BC4(v132, type metadata accessor for SKLogger);
        unint64_t v133 = sub_100092B3C();
        uint64_t v134 = sub_100093030((uint64_t)&unk_1002EED98, v133);
        sub_1000CB89C(v134, v135, v136, v137, v138, v139, v140, v167, v141, v146, v151, v161);

        swift_errorRelease(v171);
        sub_10009C5EC();
        unint64_t v103 = v175;
        goto LABEL_17;
      }
    }

    else
    {
      sub_100085298((uint64_t)&type metadata for Any + 8, (uint64_t *)&unk_100328ED0);
    }

    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    goto LABEL_21;
  }

  sub_10007B980();
LABEL_13:
  uint64_t v71 = sub_1000CB8B8();
  uint64_t v72 = *(void *)(v0 + 1312);
  sub_10007961C(v71, (uint64_t)&type metadata for Any + 8);
  sub_10009363C();
  uint64_t v73 = v182;
  *(void *)(v0 + 1swift_weakDestroy(v0 + 112) = v181;
  *(void *)(v0 + 1120) = v73;
  sub_100093478((uint64_t)"Request failed: ");
  *(void *)(v0 + 1184) = v8;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v74 = sub_1000C6664(v12);
  unint64_t v75 = *(void **)(v0 + 1112);
  id v76 = *(void **)(v0 + 1120);
  os_log_type_t v77 = static os_log_type_t.error.getter(v74);
  sub_100085EE8(v72);
  uint64_t v78 = sub_100085EE8((uint64_t)v76);
  uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
  BOOL v80 = os_log_type_enabled(v79, v77);
  unint64_t v81 = *(void **)(v0 + 1312);
  if (v80)
  {
    uint64_t v11 = *(void **)(v0 + 1304);
    uint64_t v82 = sub_10007B9FC(22LL);
    uint64_t v166 = (uint64_t)v75;
    unint64_t v75 = (void *)sub_10007B9FC(64LL);
    uint64_t v179 = (uint64_t)v75;
    *(_DWORD *)uint64_t v82 = 136446466;
    sub_1000CB880();
    sub_1000935BC((uint64_t)v11);
    sub_100085F14();
    sub_100085EF0();
    uint64_t v84 = sub_10008620C(v181, v83, &v179);
    uint64_t v92 = sub_1000CB9B0(v84, v85, v86, v87, v88, v89, v90, v91, v141, v146, v0 + 1200, v0 + 1192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, v93, v82 + 4);
    sub_10007B980();
    sub_10007D974((uint64_t)v81);
    *(_WORD *)(v82 + 12) = 2082;
    sub_1000930E4();
    *(void *)(v0 + 1200) = sub_10007A488(v166, (unint64_t)v76, &v179);
    sub_100086194((uint64_t)v11, v172);
    sub_100085E64((uint64_t)v76);
    sub_100086038((void *)&_mh_execute_header, v79, v77, "%{public}s%{public}s", (uint8_t *)v82);
    sub_100086030((uint64_t)v75, v94, (uint64_t)&type metadata for Any + 8);
    sub_10007B974((uint64_t)v75);
    sub_10007B974(v82);

    swift_bridgeObjectRelease(v76);
  }

  else
  {
    sub_10007D974(*(void *)(v0 + 1312));
    sub_100085E64((uint64_t)v76);
  }

  uint64_t v95 = sub_1000CB7B4();
  sub_100085BC4(v95, type metadata accessor for SKLogger);
  swift_willThrow(v96, v97, v98, v99, v100, v101, v102);

  sub_10009C5EC();
  unint64_t v103 = *(void **)(v0 + 1472);
LABEL_17:
  sub_1000CB51C(v103);
  sub_1000939C0();
  sub_1000931C8();
  sub_100093280();
  sub_100093124();
  sub_1000932CC();
  sub_1000932D4();
  return sub_100093934(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C8B5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_asyncLet_finish( v12 + 16,  *(void *)(v12 + 1344),  sub_1000C8B74,  v12 + 784,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12);
}

uint64_t sub_1000C8B74()
{
  return sub_1000AA254((uint64_t)sub_1000C8B80);
}

#error "1000C8C54: call analysis failed (funcsize=111)"
uint64_t sub_1000C8D50( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v13 = *(void **)(v12 + 1456);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  uint64_t v14 = sub_1000CB760();
  return swift_asyncLet_finish(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
}

uint64_t sub_1000C8DAC()
{
  return sub_1000AA254((uint64_t)sub_1000C8DB8);
}

#error "1000C8E8C: call analysis failed (funcsize=111)"
#error "1000C91D4: call analysis failed (funcsize=351)"
uint64_t sub_1000C9544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v11;
  uint64_t v11 = (void *)swift_task_alloc(dword_10032AD34);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v11;
  void *v11 = v5;
  v11[1] = sub_1000C95C4;
  return sub_1000C95E8(a1, a2, a3, a4, a5);
}

uint64_t sub_1000C95C4()
{
  return sub_10008751C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C95E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[309] = a5;
  v5[303] = a4;
  v5[297] = a3;
  v5[291] = a2;
  v5[285] = a1;
  uint64_t v6 = type metadata accessor for URLError.Code(0LL);
  v5[315] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URLError(0LL);
  v5[321] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[327] = v8;
  v5[333] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SKLogger(0LL);
  v5[339] = v9;
  unint64_t v10 = (*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[345] = swift_task_alloc(v10);
  v5[351] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for URLQueryItem(0LL);
  v5[357] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[358] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[359] = swift_task_alloc(v13);
  v5[360] = swift_task_alloc(v13);
  v5[361] = swift_task_alloc(v13);
  v5[362] = swift_task_alloc(v13);
  v5[363] = swift_task_alloc(v13);
  uint64_t v14 = sub_10007B1FC(&qword_10032A590);
  v5[364] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URLComponents(0LL);
  v5[365] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[366] = v16;
  v5[367] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  v5[368] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v5[369] = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[370] = swift_task_alloc(v19);
  v5[371] = swift_task_alloc(v19);
  return swift_task_switch(sub_1000C978C, 0LL, 0LL);
}

uint64_t sub_1000C978C()
{
  uint64_t v1 = v0[371];
  uint64_t v2 = v0[309];
  uint64_t v3 = v0[303];
  uint64_t v4 = (void *)v0[297];
  uint64_t v5 = (void *)sub_1000CB734((uint64_t)&unk_1002ECD10);
  v0[372] = v5;
  sub_1000CB9D8(v5);
  id v6 = v4;
  sub_1000930E4();
  sub_1000CB8E8();
  sub_1000CB940();
  swift_asyncLet_begin(v7, v8, v9, v10, v11, v1);
  uint64_t v12 = (void *)sub_1000CB734((uint64_t)&unk_1002ECD38);
  v0[373] = v12;
  id v13 = sub_1000CB9D8(v12);
  id v14 = v6;
  sub_1000930E4();
  sub_1000CB8E8();
  sub_1000CB940();
  swift_asyncLet_begin(v15, v16, v17, v18, v19, v0 + 247);
  uint64_t v20 = (void *)sub_1000CB734((uint64_t)&unk_1002ECD60);
  v0[374] = v20;
  v20[2] = v13;
  v20[3] = v14;
  v20[4] = v3;
  v20[5] = v2;
  v13;
  id v21 = v14;
  sub_1000930E4();
  sub_1000CB8E8();
  sub_1000CB940();
  swift_asyncLet_begin(v22, v23, v24, v25, v26, v27);
  _StringGuts.grow(_:)(23LL);
  v0[249] = 0LL;
  v0[250] = 0xE000000000000000LL;
  v28._countAndFlagsBits = sub_1000C7C6C();
  String.append(_:)(v28);
  sub_100085EF0();
  return sub_1000AA56C();
}

uint64_t sub_1000C991C()
{
  *(void *)(v1 + 3000) = v0;
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v1 + 2000));
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000C9960()
{
  uint64_t v1 = v0[370];
  uint64_t v2 = v0[369];
  uint64_t v3 = v0[368];
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, v0[371], v3);
  sub_10007ACCC( (unint64_t *)&qword_10032A858,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7._countAndFlagsBits = 0x617461632F31762FLL;
  v7._object = (void *)0xEC0000002F676F6CLL;
  String.append(_:)(v7);
  return swift_asyncLet_get_throwing(v0 + 162, v0 + 247, sub_1000C9A58, v0 + 316);
}

uint64_t sub_1000C9A58()
{
  *(void *)(v1 + 300_Block_object_dispose(va, 8) = v0;
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v1 + 2000));
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000C9A9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v89 = v13;
  uint64_t v90 = v14;
  uint64_t v88 = v12;
  uint64_t v15 = v12 + 656;
  uint64_t v16 = v12 + 2008;
  uint64_t v17 = *(void *)(v12 + 2920);
  uint64_t v18 = *(void *)(v12 + 2912);
  uint64_t v19 = *(void *)(v12 + 1976);
  uint64_t v20 = *(void **)(v12 + 1984);
  sub_10007BA3C();
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  sub_10007BA44();
  v22._countAndFlagsBits = 0x737070612FLL;
  v22._object = (void *)0xE500000000000000LL;
  String.append(_:)(v22);
  uint64_t v23 = *(void *)(v12 + 1992);
  ((void (*)(uint64_t, void))URLComponents.init(string:))(v23, *(void *)(v12 + 2000));
  if (sub_10007D824(v18, 1LL, v17) == 1)
  {
    sub_100085298(*(void *)(v12 + 2912), &qword_10032A590);
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v24 = *(void *)(v12 + 2472);
    sub_1000CB720(*(void *)(v12 + 2712), (uint64_t)qword_10033E1A8);
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v86 = 0xD000000000000019LL;
    unint64_t v87 = 0x80000001002A0420LL;
    sub_1000935BC(v23);
    uint64_t v25 = sub_100085EF0();
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    sub_100085EE8(v24);
    sub_100085EE8(0x80000001002A0420LL);
    uint64_t v27 = (os_log_s *)sub_100093B00();
    BOOL v28 = os_log_type_enabled(v27, v26);
    uint64_t v29 = *(void **)(v12 + 2472);
    if (v28)
    {
      uint64_t v30 = *(void *)(v12 + 2424);
      uint64_t v31 = sub_10007B9FC(22LL);
      uint64_t v32 = sub_10007B9FC(64LL);
      *(_DWORD *)uint64_t v31 = 136446466;
      uint64_t v85 = v32;
      unint64_t v86 = 91LL;
      unint64_t v87 = 0xE100000000000000LL;
      swift_bridgeObjectRetain(v29);
      v33._countAndFlagsBits = v30;
      v33._object = v29;
      String.append(_:)(v33);
      sub_100085F14();
      sub_100085FB4();
      *(void *)(v12 + 2040) = sub_10008620C(91LL, v34, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 + 2040, v12 + 2048, v31 + 4);
      sub_10007B980();
      sub_10007D974((uint64_t)v29);
      *(_WORD *)(v31 + 12) = 2082;
      sub_10007BA3C();
      *(void *)(v12 + 2184) = sub_100086308(0xD000000000000019LL, v35, &v85);
      sub_100086194(v12 + 2184, v12 + 2192);
      sub_10007BA30();
      sub_100086038((void *)&_mh_execute_header, v27, v26, "%{public}s%{public}s", (uint8_t *)v31);
      sub_100086030(v32, v36, (uint64_t)&type metadata for Any + 8);
      uint64_t v37 = v32;
      uint64_t v15 = v12 + 656;
      sub_10007B974(v37);
      uint64_t v38 = v31;
      uint64_t v16 = v12 + 2008;
      sub_10007B974(v38);

      sub_10007BA44();
    }

    else
    {
      sub_10007D974(*(void *)(v12 + 2472));
      sub_10007BA30();
    }

    uint64_t v67 = *(void *)(v12 + 2664);
    uint64_t v68 = *(void *)(v12 + 2616);
    uint64_t v69 = *(void *)(v12 + 2568);
    uint64_t v70 = *(void *)(v12 + 2520);
    sub_100085BC4(*(void *)(v12 + 2808), type metadata accessor for SKLogger);
    ((void (*)(void))static URLError.Code.badURL.getter)();
    unint64_t v71 = sub_100084308((uint64_t)_swiftEmptyArrayStorage);
    sub_10007ACCC( &qword_10032AD68,  (uint64_t (*)(uint64_t))&type metadata accessor for URLError,  (uint64_t)&protocol conformance descriptor for URLError);
    uint64_t v73 = _BridgedStoredNSError.init(_:userInfo:)(v70, v71, v69, v72);
    *(void *)(v12 + 3056) = ((uint64_t (*)(uint64_t))URLError._nsError.getter)(v73);
    uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    swift_willThrow(v74, v75, v76, v77, v78, v79, v80);
    return swift_asyncLet_finish(v15, v16, sub_1000CA348, v12 + 2720, v81, v82, v83, v84, a9, a10, a11, a12);
  }

  else
  {
    uint64_t v39 = *(void *)(v12 + 2936);
    uint64_t v40 = *(void *)(v12 + 2928);
    uint64_t v41 = *(void *)(v12 + 2920);
    uint64_t v42 = *(void *)(v12 + 2912);
    sub_100085EF0();
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
    *(void *)(v12 + 30swift_weakDestroy(v0 + 16) = v43;
    v43(v39, v42, v41);
    sub_1000862B8();
    URLQueryItem.init(name:value:)(v44, v45, v46, v47);
    uint64_t v48 = sub_100130EA8(0, 1LL, 1, (uint64_t)_swiftEmptyArrayStorage);
    unint64_t v50 = *(void *)(v48 + 16);
    unint64_t v49 = *(void *)(v48 + 24);
    if (v50 >= v49 >> 1) {
      uint64_t v48 = sub_1000CB784(v49);
    }
    uint64_t v51 = *(void *)(v12 + 2904);
    uint64_t v52 = *(void *)(v12 + 2864);
    uint64_t v53 = *(void *)(v12 + 2856);
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = v50 + 1;
    int v54 = *(_DWORD *)(v52 + 80);
    *(_DWORD *)(v12 + 3064) = v54;
    unint64_t v55 = (v54 + 32LL) & ~(unint64_t)v54;
    uint64_t v56 = *(void *)(v52 + 72);
    *(void *)(v12 + 3024) = v56;
    uint64_t v57 = *(void (**)(unint64_t, uint64_t, uint64_t))(v52 + 32);
    *(void *)(v12 + 3032) = v57;
    v57(v48 + v55 + v56 * v50, v51, v53);
    sub_1000CB86C(0x646E65747865LL);
    unint64_t v59 = *(void *)(v48 + 16);
    unint64_t v58 = *(void *)(v48 + 24);
    if (v59 >= v58 >> 1) {
      uint64_t v48 = sub_100130EA8(v58 > 1, v59 + 1, 1, v48);
    }
    uint64_t v60 = *(void *)(v12 + 2896);
    uint64_t v61 = *(void *)(v12 + 2856);
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = v59 + 1;
    v57(v48 + v55 + v59 * v56, v60, v61);
    sub_1000CB86C(0x73646C656966LL);
    unint64_t v63 = *(void *)(v48 + 16);
    unint64_t v62 = *(void *)(v48 + 24);
    if (v63 >= v62 >> 1) {
      uint64_t v48 = sub_1000CB784(v62);
    }
    *(void *)(v12 + 3040) = v48;
    uint64_t v64 = *(void *)(v12 + 2888);
    uint64_t v65 = *(void *)(v12 + 2856);
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = v63 + 1;
    v57(v48 + v55 + v63 * v56, v64, v65);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(), uint64_t))swift_asyncLet_get_throwing)( v12 + 656,  v12 + 2008,  sub_1000C9FE8,  v12 + 2576);
  }

uint64_t sub_1000C9FE8()
{
  *(void *)(v1 + 304_Block_object_dispose(va, 8) = v0;
  if (v0) {
    swift_bridgeObjectRelease(*(void *)(v1 + 3040));
  }
  sub_100093420();
  return sub_100092F20();
}

uint64_t sub_1000CA02C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12[380];
  uint64_t v14 = v12[251];
  uint64_t v15 = v12[252];
  swift_bridgeObjectRetain(v15);
  URLQueryItem.init(name:value:)(108LL, 0xE100000000000000LL, v14, v15);
  sub_100085FB4();
  unint64_t v17 = *(void *)(v13 + 16);
  unint64_t v16 = *(void *)(v13 + 24);
  uint64_t v18 = v12[380];
  if (v17 >= v16 >> 1) {
    uint64_t v18 = sub_1000CB76C(v16);
  }
  sub_1000CB970();
  v21(v20 + v19 * v17);
  sub_10007CB7C(0LL, &qword_10032A640, &OBJC_CLASS___AMSDevice_ptr);
  id v22 = sub_1000CF050();
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  URLQueryItem.init(name:value:)(0x6D726F6674616C70LL, 0xE800000000000000LL, v23, v25);
  sub_100093460();
  unint64_t v27 = *(void *)(v18 + 16);
  unint64_t v26 = *(void *)(v18 + 24);
  if (v27 >= v26 >> 1) {
    uint64_t v18 = sub_1000CB76C(v26);
  }
  BOOL v28 = (void (*)(uint64_t, uint64_t, uint64_t))v12[377];
  uint64_t v29 = v12[367];
  uint64_t v30 = v12[365];
  uint64_t v31 = v12[285];
  sub_1000CB970();
  v34(v33 + v32 * v27);
  URLComponents.queryItems.setter(v18);
  v28(v31, v29, v30);
  return swift_asyncLet_finish(v12 + 82, v12 + 251, sub_1000CA1D0, v12 + 292, v35, v36, v37, v38, a9, a10, a11, a12);
}

uint64_t sub_1000CA1D0()
{
  return sub_1000AA254((uint64_t)sub_1000CA1DC);
}

uint64_t sub_1000CA1DC()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000CA214()
{
  return sub_1000AA254((uint64_t)sub_1000CA220);
}

uint64_t sub_1000CA220()
{
  return sub_1000CB510();
}

uint64_t sub_1000CA258()
{
  return sub_1000AA254((uint64_t)sub_1000CA264);
}

uint64_t sub_1000CA264()
{
  uint64_t v1 = *(void *)(v0 + 2992);
  uint64_t v2 = *(void *)(v0 + 2984);
  uint64_t v3 = *(void *)(v0 + 2936);
  uint64_t v4 = *(void *)(v0 + 2912);
  uint64_t v5 = *(void *)(v0 + 2904);
  uint64_t v61 = *(void *)(v0 + 2880);
  uint64_t v67 = *(void *)(v0 + 2872);
  uint64_t v72 = *(void *)(v0 + 2808);
  uint64_t v76 = *(void *)(v0 + 2760);
  uint64_t v79 = *(void *)(v0 + 2664);
  uint64_t v81 = *(void *)(v0 + 2520);
  swift_release_n(*(void *)(v0 + 2976), 2LL);
  swift_release(v2);
  swift_release(v1);
  sub_1000932CC();
  sub_1000932D4();
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  sub_1000939C0();
  uint64_t v6 = sub_1000931C8();
  uint64_t v14 = sub_100093AE0(v6, v7, v8, v9, v10, v11, v12, v13, v55, v61);
  uint64_t v22 = sub_100093AD8(v14, v15, v16, v17, v18, v19, v20, v21, v56, v62, v67);
  uint64_t v30 = sub_100093B38(v22, v23, v24, v25, v26, v27, v28, v29, v57, v63, v68, v72);
  uint64_t v38 = sub_100093AB8(v30, v31, v32, v33, v34, v35, v36, v37, v58, v64, v69, v73, v76);
  uint64_t v46 = sub_100093AD0(v38, v39, v40, v41, v42, v43, v44, v45, v59, v65, v70, v74, v77, v79);
  sub_100093AF8(v46, v47, v48, v49, v50, v51, v52, v53, v60, v66, v71, v75, v78, v80, v81);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CA348()
{
  return sub_1000AA254((uint64_t)sub_1000CA354);
}

uint64_t sub_1000CA354()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000CA38C()
{
  return sub_1000AA254((uint64_t)sub_1000CA398);
}

uint64_t sub_1000CA398()
{
  return sub_1000CB510();
}

uint64_t sub_1000CA3D0()
{
  return sub_1000AA254((uint64_t)sub_1000CA3DC);
}

#error "1000CA424: call analysis failed (funcsize=111)"
uint64_t sub_1000CA5B4( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12)
{
  uint64_t v12;
  return swift_asyncLet_finish(v12 + 656, v12 + 2008, sub_1000CA5CC, v12 + 2192, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1000CA5CC()
{
  return sub_1000AA254((uint64_t)sub_1000CA5D8);
}

uint64_t sub_1000CA5D8()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000CA610()
{
  return sub_1000AA254((uint64_t)sub_1000CA61C);
}

uint64_t sub_1000CA61C()
{
  return sub_1000CB510();
}

uint64_t sub_1000CA654()
{
  return sub_1000AA254((uint64_t)sub_1000CA660);
}

#error "1000CA6A8: call analysis failed (funcsize=111)"
uint64_t sub_1000CA838( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12)
{
  uint64_t v12;
  return swift_asyncLet_finish(v12 + 656, v12 + 2008, sub_1000CA850, v12 + 1936, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1000CA850()
{
  return sub_1000AA254((uint64_t)sub_1000CA85C);
}

uint64_t sub_1000CA85C()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000CA894()
{
  return sub_1000AA254((uint64_t)sub_1000CA8A0);
}

uint64_t sub_1000CA8A0()
{
  return sub_1000CB510();
}

uint64_t sub_1000CA8D8()
{
  return sub_1000AA254((uint64_t)sub_1000CA8E4);
}

#error "1000CA92C: call analysis failed (funcsize=111)"
uint64_t sub_1000CAABC()
{
  void *v0;
  (*(void (**)(void, void))(v0[366] + 8LL))(v0[367], v0[365]);
  sub_1000AA3E0();
  return sub_1000AA2B4();
}

uint64_t sub_1000CAB08()
{
  return sub_1000AA254((uint64_t)sub_1000CAB14);
}

uint64_t sub_1000CAB14()
{
  return sub_1000AA2B4();
}

uint64_t sub_1000CAB4C()
{
  return sub_1000AA254((uint64_t)sub_1000CAB58);
}

uint64_t sub_1000CAB58()
{
  return sub_1000CB510();
}

uint64_t sub_1000CAB90()
{
  return sub_1000AA254((uint64_t)sub_1000CAB9C);
}

#error "1000CABE4: call analysis failed (funcsize=111)"
uint64_t sub_1000CAD74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_task_switch(sub_1000CAD8C, 0LL, 0LL);
}

uint64_t sub_1000CAD8C()
{
  if (qword_100328C78 != -1) {
    uint64_t v2 = swift_once(&qword_100328C78, sub_10012C16C);
  }
  id v3 = sub_1000936AC(v2, "URLForKey:");
  sub_1000CB704((uint64_t)v3);
  *(void *)(v0 + 56) = v1;
  uint64_t v4 = sub_10009C260((uint64_t)sub_1000CAE50);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v5 = (void *)(v0 + 80);
  v5[1] = 0x40000000LL;
  uint64_t v5[2] = sub_1000A6BC4;
  void v5[3] = &unk_1002ECDA8;
  void v5[4] = v4;
  sub_1000C66D4(v4, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_1000CAE50()
{
  return sub_100092F20();
}

uint64_t sub_1000CAE8C()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void **)(v0 + 120);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CAED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void **)(v7 + 152);
  swift_willThrow(a1, a2, a3, a4, a5, a6, a7);

  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000CAF14(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_task_switch(sub_1000CAF2C, 0LL, 0LL);
}

uint64_t sub_1000CAF2C()
{
  if (qword_100328B98 != -1) {
    uint64_t v2 = swift_once(&qword_100328B98, sub_10012B42C);
  }
  id v3 = sub_1000936AC(v2, "stringForKey:");
  sub_1000CB704((uint64_t)v3);
  *(void *)(v0 + 56) = v1;
  uint64_t v4 = sub_10009C260((uint64_t)sub_1000CAFF0);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v5 = (void *)(v0 + 80);
  v5[1] = 0x40000000LL;
  uint64_t v5[2] = sub_100121C5C;
  void v5[3] = &unk_1002ECD90;
  void v5[4] = v4;
  sub_1000C66D4(v4, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_1000CAFF0()
{
  return sub_100092F20();
}

uint64_t sub_1000CB02C()
{
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = (uint64_t *)v0[17];
  id v3 = (void *)v0[15];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  uint64_t *v2 = v4;
  v2[1] = v6;

  sub_1000CB9C4();
  return v7(v7, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1000CB088(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_task_switch(sub_1000CB0A0, 0LL, 0LL);
}

uint64_t sub_1000CB0A0()
{
  if (qword_100328C50 != -1) {
    uint64_t v2 = swift_once(&qword_100328C50, sub_10012BF10);
  }
  id v3 = sub_1000936AC(v2, "stringForKey:");
  sub_1000CB704((uint64_t)v3);
  *(void *)(v0 + 56) = v1;
  uint64_t v4 = sub_10009C260((uint64_t)sub_1000CB164);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v5 = (void *)(v0 + 80);
  v5[1] = 0x40000000LL;
  uint64_t v5[2] = sub_100121C5C;
  void v5[3] = &unk_1002ECD78;
  void v5[4] = v4;
  sub_1000C66D4(v4, "valueWithCompletion:");
  return sub_1000AA79C();
}

uint64_t sub_1000CB164()
{
  return sub_100092F20();
}

id sub_1000CB1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    if (a4)
    {
LABEL_3:
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a4);
      goto LABEL_6;
    }
  }

  else
  {
    NSString v10 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
  }

  NSString v11 = 0LL;
LABEL_6:
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v14 = 0LL;
  if (sub_10007D824(a5, 1LL, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v13);
    uint64_t v14 = v15;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a5, v12);
  }

  id v16 = [v6 initWithTermsOfService:v10 privacyPolicyText:v11 privacyPolicyURL:v14];

  return v16;
}

uint64_t sub_1000CB294()
{
  uint64_t v0 = swift_task_alloc(dword_10032AD1C);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  sub_1000CB538(v1);
  sub_1000CB9C4();
  return sub_1000C9544(v2, v3, v4, v5, v6);
}

void sub_1000CB2E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10007B1FC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_1000221B0();
}

uint64_t sub_1000CB324()
{
  uint64_t v0 = swift_task_alloc(dword_10032AD3C);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  sub_1000CB538(v1);
  sub_1000CB9C4();
  return sub_1000CAD74(v2, v3);
}

uint64_t sub_1000CB374()
{
  uint64_t v0 = swift_task_alloc(dword_10032AD4C);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  sub_1000CB538(v1);
  sub_1000CB9C4();
  return sub_1000CAF14(v2, v3);
}

uint64_t sub_1000CB3C4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000CB3F8()
{
  uint64_t v0 = swift_task_alloc(dword_10032AD5C);
  uint64_t v1 = (void *)sub_1000AA6CC(v0);
  sub_1000CB538(v1);
  sub_1000CB9C4();
  return sub_1000CB088(v2, v3);
}

  ;
}

void sub_1000CB4A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  *(void *)(v22 + 2024) = a21;
  *(void *)(v22 + 2032) = a22;
  v23._countAndFlagsBits = 0x2067616220534D41LL;
  v23._object = (void *)0xEF203A726F727265LL;
  String.append(_:)(v23);
}

uint64_t sub_1000CB4DC(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

void sub_1000CB4FC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000CB510()
{
  return ((uint64_t (*)(void))swift_asyncLet_finish)();
}

void sub_1000CB51C(void *a1@<X8>)
{
}

uint64_t sub_1000CB538(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000CB558( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  *(void *)(v19 + 2136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a18, v19 + 2144, v18);
}

uint64_t sub_1000CB570( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 + 2232) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a16, v16 + 2240, v17);
}

void sub_1000CB588()
{
}

void sub_1000CB59C()
{
}

void sub_1000CB5D0()
{
  *(void *)(v0 + 1240) = v1;
}

uint64_t sub_1000CB604()
{
  return swift_dynamicCast(v2 - 144, v2 - 112, v0 + 8, v1, 6LL);
}

void sub_1000CB61C()
{
}

void sub_1000CB648( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  v23._countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
}

uint64_t sub_1000CB658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v4 - 144, v4 - 112, a3, a4, 6LL);
}

uint64_t sub_1000CB668( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  return sub_10007A488(a9, v11, (uint64_t *)va);
}

uint64_t sub_1000CB678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, v4, v5 + 8, a4, 6LL);
}

uint64_t sub_1000CB688(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000CB6AC()
{
  return swift_release(*(void *)(v0 + 2992));
}

uint64_t sub_1000CB6B8()
{
  return *(void *)(v0 + 1368);
}

uint64_t sub_1000CB6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1000CB6E8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  v24._countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
}

uint64_t sub_1000CB704(uint64_t a1)
{
  *(void *)(v2 + 152) = a1;
  return swift_unknownObjectRelease(v1);
}

uint64_t sub_1000CB714()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1000CB720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100079604(a1, a2);
  return sub_10007961C(v3, v2);
}

uint64_t sub_1000CB734(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

void sub_1000CB740(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000CB748(uint64_t a1)
{
  return swift_dynamicCast(v3, v2, v1, a1, 6LL);
}

uint64_t sub_1000CB760()
{
  return v0;
}

uint64_t sub_1000CB76C@<X0>(unint64_t a1@<X8>)
{
  return sub_100130EA8(a1 > 1, v1, 1, v2);
}

uint64_t sub_1000CB784@<X0>(unint64_t a1@<X8>)
{
  return sub_100130EA8(a1 > 1, v1, 1, v2);
}

uint64_t sub_1000CB79C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 + 1264) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a11, v12 + 1272, v11);
}

uint64_t sub_1000CB7B4()
{
  return *(void *)(v0 + 1360);
}

uint64_t sub_1000CB7D4()
{
  return *(void *)(v0 + 2712);
}

  ;
}

uint64_t sub_1000CB7F4()
{
  return swift_release(*(void *)(v0 + 1440));
}

void sub_1000CB808()
{
}

void sub_1000CB81C()
{
}

uint64_t sub_1000CB828( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_task_dealloc(a16);
}

uint64_t sub_1000CB830()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000CB83C()
{
  *(_WORD *)(v0 + 12) = 2082;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_1000CB850()
{
  return *(void *)(v0 + 1376);
}

uint64_t sub_1000CB86C(uint64_t a1)
{
  return URLQueryItem.init(name:value:)(a1, 0xE600000000000000LL, 0xD000000000000015LL, v1);
}

uint64_t sub_1000CB880()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000CB894()
{
  return swift_release(*(void *)(v0 + 2984));
}

uint64_t sub_1000CB89C@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *a2 = v12;
  a2[1] = a8;
  a2[2] = a12;
  return swift_willThrow(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1000CB8B0()
{
  return swift_release(v0);
}

uint64_t sub_1000CB8B8()
{
  return *(void *)(v0 + 1392);
}

void sub_1000CB8D0()
{
  uint64_t v2 = (void *)(v1 - 8);
  void *v2 = *v0;
  void *v2 = *v0;
}

uint64_t sub_1000CB8E8()
{
  return swift_retain(v0);
}

uint64_t sub_1000CB8F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return swift_task_dealloc(a18);
}

uint64_t sub_1000CB8F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_task_dealloc(a17);
}

void sub_1000CB900(uint64_t a1, uint64_t (*a2)(void))
{
}

  ;
}

uint64_t sub_1000CB918()
{
  return swift_release(v0);
}

void sub_1000CB920( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
}

uint64_t sub_1000CB930( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10007A488(a3, v10, (uint64_t *)va);
}

  ;
}

uint64_t sub_1000CB950()
{
  return swift_release(*(void *)(v0 + 2976));
}

uint64_t sub_1000CB958()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000CB964()
{
  return sub_10007961C(*(void *)(v0 + 1392), *(void *)(v0 + 1368));
}

void sub_1000CB970()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
}

void sub_1000CB984(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

void sub_1000CB98C()
{
  *(void *)(v1 + 208_Block_object_dispose(va, 8) = v0;
}

uint64_t sub_1000CB998()
{
  return static os_log_type_t.error.getter();
}

  ;
}

uint64_t sub_1000CB9B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 1192) = a1;
  return a12;
}

  ;
}

id sub_1000CB9D8(void *a1)
{
  a1[2] = v4;
  a1[3] = v1;
  a1[4] = v3;
  a1[5] = v2;
  return v4;
}

ValueMetadata *_s11EntityErrorOMa()
{
  return &_s11EntityErrorON;
}

Class sub_1000CB9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v28 = a3;
  uint64_t v6 = sub_10007B1FC(&qword_10032AD70);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Locale.Components(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = type metadata accessor for Locale(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v30[2] = a1;
  v30[3] = a2;
  v30[0] = 45LL;
  v30[1] = 0xE100000000000000LL;
  v29[0] = 95LL;
  v29[1] = 0xE100000000000000LL;
  unint64_t v20 = sub_1000A9B34();
  uint64_t v21 = v27;
  swift_bridgeObjectRetain(v27);
  uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v30,  v29,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v20,  v20,  v20);
  Locale.Components.init(identifier:)(v22, v23);
  Locale.Currency.init(_:)(v28, v21);
  uint64_t v24 = type metadata accessor for Locale.Currency(0LL);
  sub_10007D0AC((uint64_t)v8, 0LL, 1LL, v24);
  Locale.Components.currency.setter(v8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  Locale.init(components:)(v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return isa;
}

uint64_t sub_1000CBC68()
{
  return 1LL;
}

void sub_1000CBC70()
{
}

uint64_t sub_1000CBC94(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x626967696C457369LL && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease(0xEA0000000000656CLL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x626967696C457369LL, 0xEA0000000000656CLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

Swift::Int sub_1000CBD24()
{
  return Hasher._finalize()();
}

uint64_t sub_1000CBD64()
{
  return 0x626967696C457369LL;
}

uint64_t sub_1000CBD80(void *a1)
{
  uint64_t v3 = sub_10007B1FC(&qword_10032AD80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unsigned __int8 v9 = sub_100085B44(a1, v7);
  unint64_t v10 = sub_1000CCA28();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BindPaymentAccountEligibilityResponse.CodingKeys,  &type metadata for BindPaymentAccountEligibilityResponse.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    unsigned __int8 v9 = KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_10007B1A0(a1);
  return v9 & 1;
}

Swift::Int sub_1000CBE90()
{
  return Hasher._finalize()();
}

uint64_t sub_1000CBED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000CBC94(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000CBEF8()
{
  return variable initialization expression of ClientOverride.storeExternalVersion();
}

uint64_t sub_1000CBF10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000CBC68();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000CBF38(uint64_t a1)
{
  unint64_t v2 = sub_1000CCA28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CBF60(uint64_t a1)
{
  unint64_t v2 = sub_1000CCA28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CBF88@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000CBD80(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1000CBFB4()
{
  v1[24] = v0;
  v1[25] = type metadata accessor for SKLogger(0LL);
  v1[26] = sub_100093010();
  v1[27] = sub_100093010();
  v1[28] = sub_100093010();
  return sub_100092F20();
}

uint64_t sub_1000CC018()
{
  uint64_t v1 = v0 + 2;
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[28];
  uint64_t v4 = sub_100079604(v0[25], (uint64_t)qword_10033E1A8);
  v0[29] = v4;
  uint64_t v5 = sub_10007961C(v4, v3);
  uint64_t v6 = *(void *)(v2 + 24);
  v0[30] = v6;
  uint64_t v7 = *(void **)(v2 + 32);
  v0[31] = v7;
  os_log_type_t v8 = static os_log_type_t.default.getter(v5);
  uint64_t v9 = sub_100085EE8((uint64_t)v7);
  unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v50 = v6;
  if (os_log_type_enabled(v10, v8))
  {
    uint64_t v11 = sub_10007B9FC(22LL);
    uint64_t v47 = sub_10007B9FC(64LL);
    *(_DWORD *)uint64_t v11 = 136446466;
    sub_1000CCCB4();
    swift_bridgeObjectRetain(v7);
    v12._countAndFlagsBits = v6;
    v12._object = v7;
    String.append(_:)(v12);
    sub_100085F14();
    uint64_t v13 = swift_bridgeObjectRelease(v7);
    v0[22] = sub_1000CCC68( v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v11 + 4,  v47,  (uint64_t)(v0 + 2),  v6,  v52[0],  v52[1],  v52[2]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v46);
    sub_10007B980();
    sub_10007D974((uint64_t)v7);
    *(_WORD *)(v11 + 12) = 2082;
    v0[23] = sub_10007A488(0xD00000000000002ALL, 0x80000001002A0480LL, v52);
    uint64_t v1 = v49;
    sub_100086194((uint64_t)(v0 + 23), (uint64_t)(v0 + 24));
    _os_log_impl((void *)&_mh_execute_header, v10, v8, "%{public}s%{public}s", (uint8_t *)v11, 0x16u);
    sub_1000CCC2C((uint64_t)&type metadata for Any, v46, v48);
    sub_10007B974(v11 + 14);
    sub_10007B974(v11);
  }

  else
  {
    sub_10007D974((uint64_t)v7);
  }

  uint64_t v21 = v0[24];
  sub_10007A3CC(v0[28]);
  uint64_t v22 = sub_10007B1FC((uint64_t *)&unk_10032A690);
  uint64_t inited = swift_initStackObject(v22, v1);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10027A330;
  *(void *)(inited + 32) = 0x6449656C646E7562LL;
  *(void *)(inited + 40) = 0xE800000000000000LL;
  uint64_t v24 = *(void **)v21;
  uint64_t v25 = (void *)(*(void *)v21 + OBJC_IVAR____TtC9storekitd6Client_requestBundleID);
  uint64_t v26 = v25[1];
  *(void *)(inited + 4_Block_object_dispose(va, 8) = *v25;
  *(void *)(inited + 56) = v26;
  strcpy((char *)(inited + 64), "inAppPinningId");
  *(_BYTE *)(inited + 79) = -18;
  uint64_t v27 = *(void **)(v21 + 8);
  swift_bridgeObjectRetain(v26);
  id v28 = [v27 pinningID];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;

  *(void *)(inited + 80) = v29;
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v31;
  uint64_t v32 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v33 = qword_100328C88;
  id v34 = v24;
  if (v33 != -1) {
    swift_once(&qword_100328C88, sub_10012C258);
  }
  uint64_t v35 = v0[24];
  id v36 = (id)qword_10033E310;
  sub_10012150C(v32);
  uint64_t v38 = v37;
  swift_bridgeObjectRelease(v32);
  id v39 = objc_allocWithZone((Class)type metadata accessor for Request());
  sub_10011E6C4(v34, v36, 4LL, 2, v38);
  uint64_t v41 = v40;
  v0[32] = v40;
  sub_100092A28(v35 + 16, (uint64_t)(v0 + 16));
  uint64_t v42 = *(void *)(v41 + OBJC_IVAR____TtC9storekitd7Request_dialogContext);
  sub_100092A28((uint64_t)(v0 + 16), v41 + OBJC_IVAR____TtC9storekitd7Request_dialogContext);
  sub_100092A70(v0 + 16);
  swift_unknownObjectRelease(v42);
  uint64_t v43 = (uint64_t *)(v41 + OBJC_IVAR____TtC9storekitd7Request_logKey);
  *uint64_t v43 = v50;
  v43[1] = (uint64_t)v7;
  swift_bridgeObjectRetain(v7);
  sub_100085EF0();
  uint64_t v51 = (uint64_t (__cdecl *)())((char *)&dword_10032A050 + dword_10032A050);
  uint64_t v44 = (void *)swift_task_alloc(unk_10032A054);
  v0[33] = v44;
  void *v44 = v0;
  v44[1] = sub_1000CC410;
  return v51();
}

uint64_t sub_1000CC410(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 264);
  *(_BYTE *)(v3 + 280) = a1;
  *(void *)(v3 + 272) = v1;
  swift_task_dealloc(v4);
  return sub_100092F20();
}

uint64_t sub_1000CC478()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + 280);
  int v2 = *(unsigned __int8 *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void **)(v0 + 216);
  sub_10007961C(*(void *)(v0 + 232), (uint64_t)v4);
  _StringGuts.grow(_:)(31LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v41 = 0xD00000000000001DLL;
  uint64_t v42 = 0x80000001002A04E0LL;
  if (v2) {
    uint64_t v5 = 1702195828LL;
  }
  else {
    uint64_t v5 = 0x65736C6166LL;
  }
  if (v2) {
    unint64_t v6 = 0xE400000000000000LL;
  }
  else {
    unint64_t v6 = 0xE500000000000000LL;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  uint64_t v8 = sub_100085EF0();
  static os_log_type_t.default.getter(v8);
  sub_100085EE8(v3);
  uint64_t v9 = sub_100085EE8(v42);
  unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  if (sub_1000CCC78(v10))
  {
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v38 = *(void *)(v0 + 256);
    Swift::String v12 = (_DWORD *)sub_10007B9FC(22LL);
    uint64_t v35 = sub_10007B9FC(64LL);
    *Swift::String v12 = 136446466;
    sub_1000CCCB4();
    swift_bridgeObjectRetain(v11);
    sub_1000CCC94();
    sub_100085F14();
    uint64_t v13 = swift_bridgeObjectRelease(v11);
    *(void *)(v0 + 160) = sub_1000CCC68(v13, v14, v15, v16, v17, v18, v19, v20, v33, v35, v37, v38, v40, v41, v42);
    sub_1000CCC14();
    sub_10007B980();
    sub_10007D974(v11);
    uint64_t v21 = sub_1000CCC54();
    uint64_t v23 = sub_1000CCC88(v21, v22, &v40);
    uint64_t v24 = sub_1000CCCA0(v23);
    uint64_t v1 = (unsigned __int8 *)(v0 + 280);
    sub_100086194(v24, v25);
    sub_1000B1FD4();
    sub_1000CCC40((void *)&_mh_execute_header, v26, v27, "%{public}s%{public}s");
    sub_1000CCC2C((uint64_t)&type metadata for Any, v34, v36);
    sub_10007B974((uint64_t)&v41);
    sub_10007B974((uint64_t)v12);

    sub_100085EF0();
  }

  else
  {
    id v28 = *(void **)(v0 + 256);
    sub_10007D974(*(void *)(v0 + 248));
    sub_1000B1FD4();
  }

  uint64_t v29 = *(void *)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 224);
  uint64_t v31 = *(void *)(v0 + 208);
  sub_10007A3CC(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))(*v1);
}

uint64_t sub_1000CC690()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void **)(v0 + 208);
  sub_10007961C(*(void *)(v0 + 232), (uint64_t)v3);
  uint64_t v32 = 0LL;
  unint64_t v33 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(44LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 112) = 0LL;
  *(void *)(v0 + 120) = 0xE000000000000000LL;
  v4._object = (void *)0x80000001002A04B0LL;
  v4._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v4);
  *(void *)(v0 + 136) = v1;
  sub_10007B1FC(&qword_100329B90);
  uint64_t v5 = _print_unlocked<A, B>(_:_:)(v0 + 136, v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  static os_log_type_t.error.getter(v5);
  sub_100085EE8(v2);
  uint64_t v7 = sub_100085EE8(v6);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  if (sub_1000CCC78(v8))
  {
    uint64_t v9 = *(void *)(v0 + 248);
    unint64_t v10 = (_DWORD *)sub_10007B9FC(22LL);
    uint64_t v30 = sub_10007B9FC(64LL);
    uint64_t v31 = v30;
    *unint64_t v10 = 136446466;
    uint64_t v32 = 91LL;
    unint64_t v33 = 0xE100000000000000LL;
    swift_bridgeObjectRetain(v9);
    sub_1000CCC94();
    sub_100085F14();
    swift_bridgeObjectRelease(v9);
    *(void *)(v0 + 144) = sub_10007A488(91LL, 0xE100000000000000LL, &v31);
    sub_1000CCC14();
    sub_10007B980();
    sub_10007D974(v9);
    uint64_t v11 = sub_1000CCC54();
    uint64_t v13 = sub_1000CCC88(v11, v12, &v31);
    uint64_t v14 = sub_1000CCCA0(v13);
    sub_100086194(v14, v15);
    sub_1000B1FD4();
    sub_1000CCC40((void *)&_mh_execute_header, v16, v17, "%{public}s%{public}s");
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v30);
    sub_10007B974((uint64_t)v10);

    sub_100085EF0();
  }

  else
  {
    sub_10007D974(*(void *)(v0 + 248));
    sub_1000B1FD4();
  }

  uint64_t v18 = *(void **)(v0 + 256);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v22 = sub_10007A3CC(v21);
  swift_willThrow(v22, v23, v24, v25, v26, v27, v28);

  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t getEnumTagSinglePayload for BindPaymentAccountEligibilityResponse( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for BindPaymentAccountEligibilityResponse( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10009C788(v2[8], v4) = 1;
  }
  else {
    LODWORD(sub_10009C788(v2[8], v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000CC9A8 + 4 * byte_10027B6D5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000CC9DC + 4 * byte_10027B6D0[v4]))();
}

uint64_t sub_1000CC9DC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC9E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000CC9ECLL);
  }
  return result;
}

uint64_t sub_1000CC9F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000CCA00LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000CCA04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CCA0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BindPaymentAccountEligibilityResponse()
{
  return &type metadata for BindPaymentAccountEligibilityResponse;
}

unint64_t sub_1000CCA28()
{
  unint64_t result = qword_10032AD88;
  if (!qword_10032AD88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B834, &type metadata for BindPaymentAccountEligibilityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032AD88);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for BindPaymentAccountEligibilityResponse.CodingKeys( unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for BindPaymentAccountEligibilityResponse.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_10009C788(v2[8], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000CCAF8 + 4 * byte_10027B6DA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000CCB18 + 4 * byte_10027B6DF[v4]))();
  }
}

_BYTE *sub_1000CCAF8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000CCB18(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000CCB20(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000CCB28(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000CCB30(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000CCB38(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BindPaymentAccountEligibilityResponse.CodingKeys()
{
  return &type metadata for BindPaymentAccountEligibilityResponse.CodingKeys;
}

unint64_t sub_1000CCB58()
{
  unint64_t result = qword_10032AD90;
  if (!qword_10032AD90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B80C, &type metadata for BindPaymentAccountEligibilityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032AD90);
  }

  return result;
}

unint64_t sub_1000CCB98()
{
  unint64_t result = qword_10032AD98;
  if (!qword_10032AD98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B77C, &type metadata for BindPaymentAccountEligibilityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032AD98);
  }

  return result;
}

unint64_t sub_1000CCBD8()
{
  unint64_t result = qword_10032ADA0;
  if (!qword_10032ADA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B7A4, &type metadata for BindPaymentAccountEligibilityResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10032ADA0);
  }

  return result;
}

uint64_t sub_1000CCC14()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v1 + 8, v0 + 4);
}

uint64_t sub_1000CCC2C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a3, 2LL, a1 + 8);
}

void sub_1000CCC40(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000CCC54()
{
  *(_WORD *)(v1 + 12) = 2082;
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000CCC68( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  return sub_10007A488(a14, a15, &a13);
}

BOOL sub_1000CCC78(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000CCC88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10007A488(v4, v3, a3);
}

void sub_1000CCC94()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

uint64_t sub_1000CCCA0(uint64_t a1)
{
  *(void *)(v2 + _Block_object_dispose(va, 8) = a1;
  return v1;
}

  ;
}

void sub_1000CCCC8(char a1)
{
}

void sub_1000CCCD4(char a1)
{
}

void sub_1000CCCE0(char a1)
{
}

void sub_1000CCCEC(uint64_t a1)
{
}

Swift::Int sub_1000CCCF8(Swift::UInt a1)
{
  return Hasher._finalize()();
}

void sub_1000CCD3C(uint64_t a1)
{
}

void sub_1000CCD68(uint64_t a1)
{
  char v1 = a1;
  sub_1000CEF78(a1);
  sub_1000CF008(qword_10027BA00[v1]);
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CCDA0(uint64_t a1)
{
}

void sub_1000CCDAC(uint64_t a1)
{
  char v1 = sub_1000CEF78(a1);
  sub_1000CF038((uint64_t)v1);
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CCDD8(uint64_t a1)
{
  int v1 = sub_1000CEF78(a1);
  sub_1000CF02C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CCE00(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_1000CEF78(a1);
  uint64_t v2 = sub_1000E9A14(v1);
  sub_1000CEF84((uint64_t)v3, v2);
  sub_100085EF0();
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CCE44(uint64_t a1)
{
  char v1 = a1;
  sub_1000CEF78(a1);
  sub_1000CF008(v1 & 1);
  sub_1000CEF70();
  sub_1000CEF64();
}

uint64_t sub_1000CCE70(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_1000E9A14(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return sub_10007B9AC(v5);
}

void sub_1000CCEAC(int a1, Swift::UInt8 a2)
{
}

void sub_1000CCECC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000CCF04(uint64_t a1)
{
  return sub_10007B9AC(0xE700000000000000LL);
}

void sub_1000CCF4C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1000CCF98(uint64_t a1)
{
  return sub_10007B9AC(0xED00006449796C69LL);
}

uint64_t sub_1000CD004(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x7079546E656B6F74LL;
  }
  else {
    uint64_t v3 = 0xD000000000000015LL;
  }
  if (v2) {
    uint64_t v4 = 0x800000010029CC90LL;
  }
  else {
    uint64_t v4 = 0xE900000000000065LL;
  }
  sub_1000CEF84(a1, v3);
  return sub_10007B9AC(v4);
}

uint64_t sub_1000CD05C(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD000000000000012LL;
  }
  else {
    uint64_t v3 = 0xD000000000000015LL;
  }
  if (v2) {
    uint64_t v4 = 0x800000010029CC90LL;
  }
  else {
    uint64_t v4 = 0x800000010029CCB0LL;
  }
  sub_1000CEF84(a1, v3);
  return sub_10007B9AC(v4);
}

uint64_t sub_1000CD0B0(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD00000000000001CLL;
  }
  else {
    uint64_t v3 = 0xD000000000000017LL;
  }
  if (v2) {
    uint64_t v4 = 0x800000010029CC50LL;
  }
  else {
    uint64_t v4 = 0x800000010029CC70LL;
  }
  sub_1000CEF84(a1, v3);
  return sub_10007B9AC(v4);
}

void sub_1000CD104(int a1, Swift::UInt a2)
{
}

void sub_1000CD128(uint64_t a1, char a2)
{
}

uint64_t sub_1000CD154(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000018LL, 0x800000010029CD20LL);
}

void sub_1000CD170(uint64_t a1)
{
}

void sub_1000CD19C(uint64_t a1, char a2)
{
}

void sub_1000CD1C8(uint64_t a1, char a2)
{
}

Swift::Int sub_1000CD200(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

void sub_1000CD240(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD00000000000001CLL;
  }
  else {
    uint64_t v3 = 0xD000000000000017LL;
  }
  sub_1000CEF84((uint64_t)v4, v3);
  sub_100085EF0();
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CD2A8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0xD000000000000012LL;
  }
  else {
    uint64_t v3 = 0xD000000000000015LL;
  }
  sub_1000CEF84((uint64_t)v4, v3);
  sub_100085EF0();
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CD310(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x7079546E656B6F74LL;
  }
  else {
    uint64_t v3 = 0xD000000000000015LL;
  }
  sub_1000CEF84((uint64_t)v4, v3);
  sub_100085EF0();
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CD37C(uint64_t a1)
{
}

void sub_1000CD388(uint64_t a1)
{
}

void sub_1000CD394(uint64_t a1)
{
  uint64_t v1 = sub_1000CEF8C(a1);
  sub_1000CF038((uint64_t)v1);
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CD3C0(uint64_t a1)
{
  int v1 = sub_1000CEF8C(a1);
  sub_1000CF02C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CD3E8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_1000E9A14(a2);
  sub_1000CEF84((uint64_t)v4, v3);
  sub_100085EF0();
  sub_1000CEF70();
  sub_1000CEF64();
}

void sub_1000CD42C(uint64_t a1, uint64_t a2)
{
  int v5 = (void *)objc_opt_self(&OBJC_CLASS___SKAnalyticsManager);
  (*(void (**)(void))(v2 + 104))();
  NSString v6 = String._bridgeToObjectiveC()();
  sub_100085FB4();
  uint64_t v7 = swift_allocObject(&unk_1002ED058, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  void v10[4] = sub_1000CEF04;
  uint64_t v11 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  id v10[2] = sub_1000CD520;
  v10[3] = &unk_1002ED070;
  int v8 = _Block_copy(v10);
  uint64_t v9 = v11;
  swift_retain(a2);
  swift_release(v9);
  [v5 sendEventLazyWithName:v6 buildEvent:v8];
  _Block_release(v8);
}

id sub_1000CD520(uint64_t a1)
{
  int v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  int v4 = (void *)v1(v3);
  swift_release(v2);
  return v4;
}

id sub_1000CD5C4(uint64_t a1)
{
  return (id)(*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1000CD640()
{
  uint64_t v1 = type metadata accessor for Mirror(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10007B1FC(&qword_10032AF30);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v28 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v25 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - v11;
  *((void *)&v32 + 1) = type metadata accessor for AnalyticsEvent();
  *(void *)&__int128 v31 = v0;
  id v13 = v0;
  uint64_t v14 = v1;
  Mirror.init(reflecting:)(&v31);
  sub_10007D0AC((uint64_t)v12, 0LL, 1LL, v1);
  unint64_t v15 = sub_1000CEDDC();
  uint64_t v29 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v15,  &protocol witness table for String);
  sub_1000CEE18((uint64_t)v12, (uint64_t)v10);
  if (sub_10007D824((uint64_t)v10, 1LL, v1) != 1)
  {
    uint64_t v26 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    uint64_t v27 = v10;
    do
    {
      uint64_t v16 = v14;
      uint64_t v17 = v26(v4, v10, v14);
      uint64_t v18 = Mirror.children.getter(v17);
      uint64_t v34 = v29;
      swift_retain(v18);
      uint64_t v19 = dispatch thunk of _AnySequenceBox._makeIterator()();
      uint64_t v20 = swift_release(v18);
      dispatch thunk of _AnyIteratorBoxBase.next()(&v31, v20);
      if (*((void *)&v33 + 1))
      {
        do
        {
          v30[0] = v31;
          v30[1] = v32;
          v30[2] = v33;
          sub_1000CD928((uint64_t)&v34, v30);
          sub_1000CEEA8((uint64_t)v30, &qword_10032AF38);
          dispatch thunk of _AnyIteratorBoxBase.next()(&v31, v21);
        }

        while (*((void *)&v33 + 1));
        uint64_t v29 = v34;
      }

      swift_release(v18);
      uint64_t v22 = swift_release(v19);
      uint64_t v23 = (uint64_t)v28;
      Mirror.superclassMirror.getter(v22);
      uint64_t v14 = v16;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v16);
      sub_1000CEEA8((uint64_t)v12, &qword_10032AF30);
      sub_1000CEE60(v23, (uint64_t)v12);
      char v10 = v27;
      sub_1000CEE18((uint64_t)v12, (uint64_t)v27);
    }

    while (sub_10007D824((uint64_t)v10, 1LL, v16) != 1);
  }

  sub_1000CEEA8((uint64_t)v12, &qword_10032AF30);
  sub_1000CEEA8((uint64_t)v10, &qword_10032AF30);
  return v29;
}

void sub_1000CD928(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = (uint64_t)(a2 + 2);
  *(void *)&__int128 v17 = *a2;
  *((void *)&v17 + 1) = v3;
  sub_10007B1C0((uint64_t)(a2 + 2), (uint64_t)v18);
  if (!v3)
  {
    uint64_t v7 = (id *)v18;
LABEL_9:
    sub_10007B1A0(v7);
    return;
  }

  swift_bridgeObjectRetain(v3);
  sub_10007B1A0(v18);
  __int128 v17 = *(_OWORD *)a2;
  sub_10007B1C0(v4, (uint64_t)v18);
  unint64_t v5 = sub_1000CEDDC();
  if ((swift_dynamicCast(v14, v18, (char *)&type metadata for Any + 8, v5, 6LL) & 1) != 0)
  {
    id v6 = v14[0];
    sub_100132FD8();

    swift_bridgeObjectRelease(v3);
    return;
  }

  __int128 v17 = *(_OWORD *)a2;
  sub_10007B1C0(v4, (uint64_t)v18);
  uint64_t v8 = sub_10007B1FC(&qword_10032AF40);
  if ((swift_dynamicCast(v12, v18, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
  {
    sub_10009D8A4(v12, (uint64_t)v14);
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    sub_100085B44(v14, v15);
    sub_1000CDAF0(v5, v9, v10, (uint64_t)&v17);
    if ((void)v17)
    {
      id v11 = (id)v17;
      sub_100132FD8();
    }

    swift_bridgeObjectRelease(v3);
    uint64_t v7 = v14;
    goto LABEL_9;
  }

  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  swift_bridgeObjectRelease(v3);
  sub_1000CEEA8((uint64_t)v12, &qword_10032AF48);
}

void sub_1000CDAF0(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a3);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  dispatch thunk of RawRepresentable.rawValue.getter(a2, a3);
  int v11 = swift_dynamicCast(a4, v10, AssociatedTypeWitness, a1, 6LL);
  sub_10007D0AC(a4, v11 ^ 1u, 1LL, a1);
  sub_1000CEFEC();
}

uint64_t sub_1000CDBF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100328B40 != -1) {
    swift_once(&qword_100328B40, sub_1000F4208);
  }
  uint64_t v5 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
  sub_10007961C(v5, (uint64_t)v4);
  uint64_t v22 = 0LL;
  unint64_t v23 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  unint64_t v6 = v23;
  uint64_t v7 = _typeName(_:qualified:)(v1, 0LL);
  unint64_t v9 = v8;
  swift_bridgeObjectRelease(v6);
  uint64_t v22 = v7;
  unint64_t v23 = v9;
  v10._object = (void *)0x80000001002A0850LL;
  v10._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v10);
  uint64_t v12 = v22;
  unint64_t v11 = v23;
  LOBYTE(v9) = static os_log_type_t.fault.getter(v13);
  uint64_t v14 = swift_bridgeObjectRetain_n(v11, 2LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = v9;
  if (os_log_type_enabled(v15, (os_log_type_t)v9))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(64LL, -1LL);
    uint64_t v22 = v18;
    *(_DWORD *)uint64_t v17 = 136446466;
    uint64_t v21 = sub_10007A488(0LL, 0xE000000000000000LL, &v22);
    sub_10007CBC8();
    *(_WORD *)(v17 + 12) = 2082;
    swift_bridgeObjectRetain(v11);
    uint64_t v21 = sub_10007A488(v12, v11, &v22);
    sub_10007CBC8();
    sub_10007BA30();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2LL, (char *)&type metadata for Any + 8);
    sub_10007B974(v18);
    sub_10007B974(v17);
    sub_10007BA44();
  }

  else
  {

    sub_10007BA30();
  }

  sub_10007A3CC((uint64_t)v4);
  return 0LL;
}

void sub_1000CDE34()
{
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for AnalyticsEvent();
  sub_1000CEFE4((uint64_t)v7.super_class, "init", v1, v2, v3, v4, v5, v6, v7);
  sub_100032318();
}

id sub_1000CDE7C()
{
  return sub_1000CE204(type metadata accessor for AnalyticsEvent);
}

uint64_t type metadata accessor for AnalyticsEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd14AnalyticsEvent);
}

void sub_1000CDF74()
{
  uint64_t v0 = sub_1000CEFA8();
  (*(void (**)(void))(v0 + 104))();
  sub_1000221B0();
}

unint64_t sub_1000CDF98()
{
  return sub_1000CF000(30LL);
}

void sub_1000CE008()
{
}

uint64_t sub_1000CE080(uint64_t a1, uint64_t a2)
{
  return sub_1000CE5E0(a1, a2, &OBJC_IVAR____TtC9storekitd19BaseManualSyncEvent_app);
}

void sub_1000CE08C(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10009C7F8( *(void *)(a1 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID),  *(void *)(a1 + OBJC_IVAR____TtC9storekitd6Client_callerBundleID + 8));
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  Swift::String v7 = Data.base64EncodedString(options:)(0LL);
  sub_10007F054(v4, v6);
  sub_1000CE080(v7._countAndFlagsBits, (uint64_t)v7._object);
  sub_1000DFAF0();
  unint64_t v8 = (_BYTE *)(v2 + OBJC_IVAR____TtC9storekitd19BaseManualSyncEvent_environment);
  _BYTE *v8 = v9;
  v8[1] = 0;
}

void sub_1000CE180()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC9storekitd19BaseManualSyncEvent_app];
  *(void *)uint64_t v1 = 0LL;
  *((void *)v1 + 1) = 0LL;
  *(_WORD *)&v0[OBJC_IVAR____TtC9storekitd19BaseManualSyncEvent_environment] = 256;
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for BaseManualSyncEvent();
  sub_1000CEFE4((uint64_t)v8.super_class, "init", v2, v3, v4, v5, v6, v7, v8);
  sub_100032318();
}

uint64_t sub_1000CE1E8()
{
  return sub_1000AA5B8(v0 + OBJC_IVAR____TtC9storekitd19BaseManualSyncEvent_app);
}

id sub_1000CE1F8()
{
  return sub_1000CE204(type metadata accessor for BaseManualSyncEvent);
}

id sub_1000CE204(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for BaseManualSyncEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd19BaseManualSyncEvent);
}

unint64_t sub_1000CE278()
{
  return sub_1000CF000(38LL);
}

uint64_t sub_1000CE2B0()
{
  return sub_10007F198(OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_transactionsCountDifference);
}

uint64_t sub_1000CE2E0(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_transactionsCountDifference);
}

uint64_t sub_1000CE30C()
{
  return sub_10007F198(OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_modifiedOrAddedTransactionsCount);
}

uint64_t sub_1000CE33C(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_modifiedOrAddedTransactionsCount);
}

uint64_t sub_1000CE368()
{
  return sub_10007F198(OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_modifiedOrAddedStatusesCount);
}

uint64_t sub_1000CE398(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_modifiedOrAddedStatusesCount);
}

id sub_1000CE3A4()
{
  uint64_t v1 = (objc_class *)sub_1000CEFA8();
  uint64_t v2 = v0;
  *(void *)&v2[OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_transactionsCountDifference] = NSNotFound.getter();
  *(void *)&v2[OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_modifiedOrAddedTransactionsCount] = NSNotFound.getter();
  *(void *)&v2[OBJC_IVAR____TtC9storekitd22ManualSyncSuccessEvent_modifiedOrAddedStatusesCount] = NSNotFound.getter();

  v11.receiver = v2;
  v11.super_class = v1;
  return sub_1000CEFE4(v3, "init", v4, v5, v6, v7, v8, v9, v11);
}

uint64_t type metadata accessor for ManualSyncSuccessEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd22ManualSyncSuccessEvent);
}

unint64_t sub_1000CE45C(unint64_t result)
{
  if (result > 2) {
    return 0LL;
  }
  return result;
}

Swift::Int sub_1000CE46C()
{
  return sub_1000CCCF8(*v0);
}

void sub_1000CE474(int a1)
{
}

Swift::Int sub_1000CE47C(uint64_t a1)
{
  return sub_1000CD200(a1, *v1);
}

unint64_t sub_1000CE484@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000CE45C(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

unint64_t sub_1000CE4C8()
{
  return sub_1000CF000(39LL);
}

void sub_1000CE530()
{
}

void sub_1000CE53C(uint64_t *a1)
{
}

uint64_t sub_1000CE5D4(uint64_t a1, uint64_t a2)
{
  return sub_1000CE5E0(a1, a2, &OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_errorDomain);
}

uint64_t sub_1000CE5E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000CEF94(a1, a2, *a3);
}

void sub_1000CE5E8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)_convertErrorToNSError(_:)(a1);
    id v3 = [v2 domain];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v6 = v5;

    uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_errorDomain);
    uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_errorDomain + 8);
    *uint64_t v7 = v4;
    v7[1] = v6;
    uint64_t v9 = swift_bridgeObjectRelease(v8);
    id v10 = sub_100093DE4(v9, "code");
    uint64_t v11 = v1 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_errorCode;
    *(void *)uint64_t v11 = v10;
    *(_BYTE *)(v11 + _Block_object_dispose(va, 8) = 0;
    uint64_t v12 = (uint64_t)sub_100093DE4((uint64_t)v10, "code");
    if (v12 != 100) {
      goto LABEL_8;
    }
    id v13 = sub_100093DE4(100LL, "domain");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    sub_1000CF044();
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
    if (v4 == v14 && v3 == (id)v15)
    {

      sub_1000CF020();
LABEL_21:
      uint64_t v22 = v1 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_result;
      uint64_t v23 = 2LL;
      goto LABEL_22;
    }

    uint64_t v4 = sub_1000CEFB0(v14, v15);
    sub_10007BA44();
    uint64_t v12 = sub_100085FB4();
    if ((v4 & 1) == 0)
    {
LABEL_8:
      if (sub_100093DE4(v12, "code") != (id)907)
      {

        goto LABEL_17;
      }

      id v17 = sub_100093DE4(907LL, "domain");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      sub_1000CF044();
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
      if (v4 != v18 || v3 != (id)v19)
      {
        char v21 = sub_1000CEFB0(v18, v19);
        sub_10007BA44();
        sub_100085FB4();

        if ((v21 & 1) != 0) {
          goto LABEL_21;
        }
LABEL_17:
        uint64_t v22 = v1 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_result;
        uint64_t v23 = 1LL;
LABEL_22:
        *(void *)uint64_t v22 = v23;
        goto LABEL_23;
      }

      sub_1000CF020();
    }

    goto LABEL_21;
  }

  uint64_t v22 = v1 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_result;
  *(void *)(v1 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_result) = 0LL;
LABEL_23:
  *(_BYTE *)(v22 + _Block_object_dispose(va, 8) = 0;
  sub_1000CEFEC();
}

void sub_1000CE7D0()
{
  uint64_t v1 = (objc_class *)sub_1000CEFA8();
  uint64_t v2 = &v0[OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_result];
  *(void *)uint64_t v2 = 0LL;
  v2[8] = 1;
  id v3 = &v0[OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_errorDomain];
  *(void *)id v3 = 0LL;
  *((void *)v3 + 1) = 0LL;
  uint64_t v4 = &v0[OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_errorCode];
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  v11.receiver = v0;
  v11.super_class = v1;
  sub_1000CEFE4((uint64_t)v1, "init", v5, v6, v7, v8, v9, v10, v11);
  sub_100032318();
}

uint64_t sub_1000CE854()
{
  return sub_1000AA5B8(v0 + OBJC_IVAR____TtC9storekitd23ManualSyncFinishedEvent_errorDomain);
}

uint64_t type metadata accessor for ManualSyncFinishedEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd23ManualSyncFinishedEvent);
}

id sub_1000CE8A8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

unint64_t sub_1000CE8E4()
{
  return sub_1000CF000(40LL);
}

void sub_1000CE934()
{
}

uint64_t sub_1000CE9B8(uint64_t a1, uint64_t a2)
{
  return sub_1000CEF94(a1, a2, OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorDomain);
}

uint64_t sub_1000CE9E4()
{
  return sub_10007F198(OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorCode);
}

uint64_t sub_1000CEA14(uint64_t a1)
{
  return sub_10007F1A0(a1, OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorCode);
}

id sub_1000CEA20(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (objc_class *)sub_1000CEFA8();
  NSString v5 = &v2[OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_securityErrorCode];
  *(_DWORD *)NSString v5 = 0;
  void v5[4] = 1;
  uint64_t v6 = v2;
  id v7 = sub_100093DE4((uint64_t)v6, "domain");
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  objc_super v11 = (uint64_t *)&v6[OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorDomain];
  uint64_t *v11 = v8;
  v11[1] = v10;
  id v13 = sub_100093DE4(v12, "code");
  *(void *)&v6[OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorCode] = v13;
  id v14 = sub_100093DE4((uint64_t)v13, "userInfo");
  uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for String,  (char *)&type metadata for Any + 8);

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"SKUnderlyingSecErr");
  sub_10012A674(v16, v17, v15, &v22);
  sub_100085FB4();
  swift_bridgeObjectRelease(v15);
  if (v23)
  {
    if ((swift_dynamicCast(&v20, &v22, (char *)&type metadata for Any + 8, &type metadata for Int32, 6LL) & 1) != 0)
    {
      *(_DWORD *)NSString v5 = v20;
      void v5[4] = 0;
    }
  }

  else
  {

    sub_1000CEEA8((uint64_t)&v22, (uint64_t *)&unk_100328ED0);
  }

  v21.receiver = v6;
  v21.super_class = v4;
  id v18 = objc_msgSendSuper2(&v21, "init");

  return v18;
}

id sub_1000CEBDC()
{
  uint64_t v1 = (objc_class *)sub_1000CEFA8();
  uint64_t v2 = &v0[OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_securityErrorCode];
  *(_DWORD *)uint64_t v2 = 0;
  v2[4] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorDomain];
  *(void *)uint64_t v3 = 0LL;
  *((void *)v3 + 1) = 0xE000000000000000LL;
  uint64_t v4 = v0;
  *(void *)&v4[OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorCode] = NSNotFound.getter();
  *(_DWORD *)uint64_t v2 = 0;
  v2[4] = 1;

  v13.receiver = v4;
  v13.super_class = v1;
  return sub_1000CEFE4(v5, "init", v6, v7, v8, v9, v10, v11, v13);
}

BOOL sub_1000CECBC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorCode);
  return v1 != NSNotFound.getter();
}

uint64_t sub_1000CECEC()
{
  return sub_1000AA5B8(v0 + OBJC_IVAR____TtC9storekitd24KeychainWriteFailedEvent_errorDomain);
}

id sub_1000CECFC()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_1000CEFA8();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for KeychainWriteFailedEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC9storekitd24KeychainWriteFailedEvent);
}

ValueMetadata *type metadata accessor for ManualSyncFinishedEvent.Result()
{
  return &type metadata for ManualSyncFinishedEvent.Result;
}

unint64_t sub_1000CED70()
{
  unint64_t result = qword_10032AF28;
  if (!qword_10032AF28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10027B9D0, &type metadata for ManualSyncFinishedEvent.Result);
    atomic_store(result, (unint64_t *)&qword_10032AF28);
  }

  return result;
}

void sub_1000CEDAC(void *a1)
{
}

BOOL sub_1000CEDD0(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t sub_1000CEDDC()
{
  unint64_t result = qword_10032B170;
  if (!qword_10032B170)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10032B170);
  }

  return result;
}

uint64_t sub_1000CEE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032AF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CEE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10007B1FC(&qword_10032AF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_1000CEEA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10007B1FC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_1000221B0();
}

uint64_t sub_1000CEEE0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000CEF04()
{
}

uint64_t sub_1000CEF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000CEF30(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000CEF38()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1000CEF5C()
{
  return sub_1000CD5C4(*(void *)(v0 + 16));
}

  ;
}

Swift::Int sub_1000CEF70()
{
  return Hasher._finalize()();
}

void *sub_1000CEF78(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000CEF84(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

void *sub_1000CEF8C(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_1000CEF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(v3 + a3);
  uint64_t v5 = *(void *)(v3 + a3 + 8);
  void *v4 = a1;
  v4[1] = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000CEFA8()
{
  return swift_getObjectType(v0);
}

uint64_t sub_1000CEFB0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

uint64_t sub_1000CEFCC@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  return String.hash(into:)(va, 0xD000000000000018LL, (a1 - 32) | 0x8000000000000000LL);
}

id sub_1000CEFE4( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2);
}

  ;
}

unint64_t sub_1000CF000(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

void sub_1000CF008(Swift::UInt a1)
{
}

uint64_t sub_1000CF010@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(v1 + a1 + 8));
}

uint64_t sub_1000CF020()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

void sub_1000CF02C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1000CF038(uint64_t a1, ...)
{
  return v1(va, v2);
}

void sub_1000CF044()
{
}

id sub_1000CF050()
{
  unsigned int v0 = [(id)objc_opt_self(AMSDevice) deviceIsAudioAccessory];
  uint64_t v1 = (id *)&AMSMediaTaskPlatformAppleTV;
  if (v0) {
    uint64_t v1 = (id *)&AMSMediaTaskPlatformHomePod;
  }
  return *v1;
}

uint64_t sub_1000CF140@<X0>(uint64_t a1@<X8>)
{
  size_t v4 = 37LL;
  sub_1000CF1F4(&v4, v5, &v6);
  if (v7)
  {
    UUID.init(uuidString:)(v6, v7);
    return sub_10007B980();
  }

  else
  {
    uint64_t v3 = type metadata accessor for UUID(0LL);
    return sub_10007D0AC(a1, 1LL, 1LL, v3);
  }

uint64_t sub_1000CF1F4@<X0>(size_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sysctlbyname("kern.bootsessionuuid", a2, a1, 0LL, 0LL);
  if ((_DWORD)result)
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v10 = sub_100079604(v6, (uint64_t)qword_10033E1A8);
    uint64_t v11 = sub_10007961C(v10, (uint64_t)v8);
    uint64_t v12 = static os_log_type_t.error.getter(v11);
    os_log_type_t v13 = v12;
    id v14 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v17 = swift_slowAlloc(64LL, -1LL);
      uint64_t v22 = v17;
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v20 = sub_10007A488(0LL, 0xE000000000000000LL, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4);
      *(_WORD *)(v16 + 12) = 2082;
      uint64_t v20 = sub_10007A488(0xD000000000000027LL, 0x80000001002A09C0LL, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 14);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s%{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    uint64_t result = sub_10007A3CC((uint64_t)v8);
    goto LABEL_7;
  }

  if (!a2)
  {
LABEL_7:
    *a3 = 0LL;
    a3[1] = 0LL;
    return result;
  }

  uint64_t result = String.init(cString:)(a2);
  *a3 = result;
  a3[1] = v18;
  return result;
}

BOOL sub_1000CF428()
{
  BOOL result = sub_1000CF448();
  byte_10033E0A8 = result;
  return result;
}

BOOL sub_1000CF448()
{
  uint64_t v0 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  size_t v4 = (size_t *)swift_slowAlloc(8LL, -1LL);
  if (sysctlbyname("kern.hv_vmm_present", v3, v4, 0LL, 0LL))
  {
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v5 = sub_100079604(v0, (uint64_t)qword_10033E1A8);
    uint64_t v6 = sub_10007961C(v5, (uint64_t)v2);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v2, v8);
    os_log_type_t v10 = static os_log_type_t.fault.getter(v9);
    if (os_log_type_enabled(v7, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v10, "Failed to get kern.hv_vmm_present", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    swift_slowDealloc(v4, -1LL, -1LL);
    swift_slowDealloc(v3, -1LL, -1LL);
    return 0LL;
  }

  else
  {
    BOOL v12 = *v3 != 0;
    swift_slowDealloc(v4, -1LL, -1LL);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  return v12;
}

uint64_t sub_1000CF60C()
{
  if (qword_100328AD8 != -1) {
    swift_once(&qword_100328AD8, sub_1000CF428);
  }
  return byte_10033E0A8;
}

void sub_1000CF664(char a1)
{
  if (qword_100328AD8 != -1) {
    swift_once(&qword_100328AD8, sub_1000CF428);
  }
  byte_10033E0A8 = a1 & 1;
  sub_1000221B0();
}

uint64_t sub_1000CF6D4()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  uint64_t v2 = sub_1000CFCAC(v0);
  unint64_t v3 = v1;
  if (v1)
  {
    uint64_t v4 = HIBYTE(v1) & 0xF;
    if ((v1 & 0x2000000000000000LL) == 0) {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (v4)
    {
      uint64_t v5 = 4 * v4;
      unint64_t v6 = 15LL;
      do
      {
        swift_bridgeObjectRetain(v3);
        uint64_t v7 = String.subscript.getter(v6, v2, v3);
        uint64_t v9 = v8;
        sub_10007B980();
        LOBYTE(v7) = Character.isNumber.getter(v7, v9);
        swift_bridgeObjectRelease(v9);
        if ((v7 & 1) != 0) {
          break;
        }
        unint64_t v6 = String.index(after:)(v6, v2, v3);
      }

      while (v5 != v6 >> 14);
    }

    else
    {
      unint64_t v6 = 15LL;
    }

    uint64_t v10 = String.subscript.getter(15LL, v6);
    uint64_t v12 = v11;
    sub_10007B980();
    uint64_t v2 = static String._fromSubstring(_:)(v10);
    swift_bridgeObjectRelease(v12);
  }

  return v2;
}

id sub_1000CF7F8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (v3)
  {
    uint64_t v4 = v3;
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    NSString v5 = 0LL;
  }

  return v5;
}

void sub_1000CF838()
{
  NSString v0 = String._bridgeToObjectiveC()();
  uint64_t v1 = MGCopyAnswer(v0, 0LL);

  if (v1)
  {
    uint64_t v3 = v1;
    swift_dynamicCast(&v2, &v3, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6LL);
  }

  else
  {
    __break(1u);
  }

void sub_1000CF8CC()
{
  byte_10033E0A9 = sub_1000CF904((uint64_t)&off_1002EA400);
  sub_1000221B0();
}

BOOL sub_1000CF904(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SKLogger(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = 0LL;
  int v5 = amfi_interface_query_bootarg_state(&v27);
  if (v5)
  {
    int v6 = v5;
    if (qword_100328B40 != -1) {
      swift_once(&qword_100328B40, sub_1000F4208);
    }
    uint64_t v7 = sub_100079604(v2, (uint64_t)qword_10033E1A8);
    sub_10007961C(v7, (uint64_t)v4);
    uint64_t v28 = 0LL;
    unint64_t v29 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(38LL);
    uint64_t v8 = swift_bridgeObjectRelease(v29);
    uint64_t v28 = 0xD000000000000024LL;
    unint64_t v29 = 0x80000001002A0950LL;
    __chkstk_darwin(v8);
    strerror_r(v6, (char *)&v25 - 256, 0x100uLL);
    v9._countAndFlagsBits = String.init(cString:)(&v25 - 32);
    object = v9._object;
    String.append(_:)(v9);
    uint64_t v11 = swift_bridgeObjectRelease(object);
    uint64_t v13 = v28;
    unint64_t v12 = v29;
    os_log_type_t v14 = static os_log_type_t.error.getter(v11);
    uint64_t v15 = swift_bridgeObjectRetain_n(v12, 2LL);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = v14;
    if (os_log_type_enabled(v16, v14))
    {
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      uint64_t v19 = swift_slowAlloc(64LL, -1LL);
      uint64_t v28 = v19;
      *(_DWORD *)uint64_t v18 = 136446466;
      uint64_t v26 = sub_10007A488(0LL, 0xE000000000000000LL, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 4);
      *(_WORD *)(v18 + 12) = 2082;
      swift_bridgeObjectRetain(v12);
      uint64_t v26 = sub_10007A488(v13, v12, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 14);
      swift_bridgeObjectRelease_n(v12, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s%{public}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_bridgeObjectRelease(v12);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 3LL);
    }

    sub_10007A3CC((uint64_t)v4);
    return 0LL;
  }

  else
  {
    uint64_t v20 = *(void *)(a1 + 16);
    if (v20)
    {
      uint64_t v21 = 0LL;
      uint64_t v22 = (unsigned int *)(a1 + 32);
      do
      {
        unsigned int v23 = *v22++;
        v21 |= v23;
        --v20;
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    return (v27 & v21) != 0;
  }

void sub_1000CFC24()
{
  byte_10033E0AA = sub_1000CF904((uint64_t)&off_1002EA1B8);
  sub_1000221B0();
}

unint64_t sub_1000CFC70()
{
  unint64_t result = qword_10032A640;
  if (!qword_10032A640)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSDevice);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_10032A640);
  }

  return result;
}

uint64_t sub_1000CFCAC(void *a1)
{
  id v1 = objc_msgSend(a1, "sk_hardwareModel");
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1000CFD94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC9storekitd26objc_MessageServerResponse_url;
  uint64_t v4 = sub_100086318();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000CFDF8()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC9storekitd26objc_MessageServerResponse_shouldAllowDeveloperControl);
}

uint64_t sub_1000CFE28()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9storekitd26objc_MessageServerResponse_messageType);
}

id sub_1000CFE38(uint64_t a1, char a2, void *a3)
{
  uint64_t v7 = sub_10007B1FC((uint64_t *)&unk_10032A1C0);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100086318();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000B4064(a1, (uint64_t)v9);
  if (sub_10007D824((uint64_t)v9, 1LL, v10) == 1)
  {

    sub_1000D0D94();
    sub_1000B3FC4((uint64_t)v9);
LABEL_6:
    uint64_t v18 = sub_1000D0160();
    swift_deallocPartialClassInstance( v3,  v18,  *(unsigned int *)((swift_isaMask & *v3) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v3) + 0x34LL));
    return 0LL;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  if (!a3)
  {
    sub_1000D0D94();
    sub_1000D0D84();
    goto LABEL_6;
  }

  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))( (uint64_t)v3 + OBJC_IVAR____TtC9storekitd26objc_MessageServerResponse_url,  v13,  v10);
  os_log_type_t v14 = v3;
  id v15 = [a3 integerValue];
  sub_1000D0D84();
  *(void *)((char *)v14 + OBJC_IVAR____TtC9storekitd26objc_MessageServerResponse_messageType) = v15;
  *((_BYTE *)v14 + OBJC_IVAR____TtC9storekitd26objc_MessageServerResponse_shouldAllowDeveloperControl) = a2 & 1;

  uint64_t v16 = (objc_class *)sub_1000D0160();
  v20.receiver = v14;
  v20.super_class = v16;
  id v17 = objc_msgSendSuper2(&v20, "init");

  sub_1000D0D94();
  return v17;
}

void sub_1000D00C0()
{
}

id sub_1000D00F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_1000D0160();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000D0160()
{
  return type metadata accessor for objc_MessageServerResponse(0LL);
}

uint64_t type metadata accessor for objc_MessageServerResponse(uint64_t a1)
{
  return sub_1000D0BD8(a1, (uint64_t *)&unk_10032AF78, (uint64_t)&nominal type descriptor for objc_MessageServerResponse);
}

uint64_t sub_1000D017C(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10027BA60;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1000D0200(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      uint64_t v14 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_1000D02CC(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    return swift_bridgeObjectRelease(*(void *)(a1 + 24));
  }

  else
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

void *sub_1000D0324(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = a1;
    uint64_t v10 = a3;
    uint64_t v11 = 1LL;
  }

  else
  {
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
    uint64_t v9 = a1;
    uint64_t v10 = a3;
    uint64_t v11 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v9, v10, v11);
  return a1;
}

void *sub_1000D03C4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10007D540((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = a2[1];
      a1[1] = v6;
      a1[2] = a2[2];
      uint64_t v7 = a2[3];
      a1[3] = v7;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v11 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t type metadata accessor for MessageServerResponse.MessageItem(uint64_t a1)
{
  return sub_1000D0BD8(a1, qword_10032AFF8, (uint64_t)&nominal type descriptor for MessageServerResponse.MessageItem);
}

void *sub_1000D0498(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_1000D0520(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10007D540((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1000D05C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000D05D4(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = " ";
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

void *sub_1000D0640(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      uint64_t v10 = a1;
      uint64_t v11 = v7;
      uint64_t v12 = 1LL;
    }

    else
    {
      uint64_t v14 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16LL))(a1, a2, v14);
      uint64_t v10 = a1;
      uint64_t v11 = v7;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
    uint64_t v15 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  }

  return a1;
}

uint64_t sub_1000D0734(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    return swift_bridgeObjectRelease(*(void *)(a1 + 24));
  }

  else
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

void *sub_1000D079C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = a1;
    uint64_t v10 = v6;
    uint64_t v11 = 1LL;
  }

  else
  {
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
    uint64_t v9 = a1;
    uint64_t v10 = v6;
    uint64_t v11 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

void *sub_1000D0864(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10007D540((uint64_t)a1);
    uint64_t v6 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      a1[2] = a2[2];
      uint64_t v8 = a2[3];
      a1[3] = v8;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      uint64_t v9 = a1;
      uint64_t v10 = v6;
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v12 = type metadata accessor for URL(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
      uint64_t v9 = a1;
      uint64_t v10 = v6;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *sub_1000D0950(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  if (swift_getEnumCaseMultiPayload(a2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 0LL);
  }

  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  return a1;
}

char *sub_1000D09F8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10007D540((uint64_t)a1);
    uint64_t v6 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
    if (swift_getEnumCaseMultiPayload(a2, v6))
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 0LL);
    }
  }

  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  return a1;
}

uint64_t sub_1000D0AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D0ABC);
}

uint64_t sub_1000D0ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_10007D824(a1, a2, v6);
  }
  unsigned int v8 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 2) {
    return ((v8 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000D0B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D0B50);
}

uint64_t sub_1000D0B50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for MessageServerResponse.MessageItem(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_10007D0AC(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for MessageServerResponse(uint64_t a1)
{
  return sub_1000D0BD8(a1, qword_10032B088, (uint64_t)&nominal type descriptor for MessageServerResponse);
}

uint64_t sub_1000D0BD8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_1000D0C08(uint64_t a1)
{
  uint64_t result = type metadata accessor for MessageServerResponse.MessageItem(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10027BA60;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *initializeWithCopy for MessageServerResponse.ProductOffer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for MessageServerResponse.ProductOffer(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for MessageServerResponse.ProductOffer(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for MessageServerResponse.ProductOffer()
{
  return &type metadata for MessageServerResponse.ProductOffer;
}

uint64_t sub_1000D0D84()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000D0D94()
{
  return sub_1000B3FC4(v0);
}

uint64_t sub_1000D0D9C(uint64_t a1)
{
  v2[1] = &unk_10027BB28;
  void v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 104);
}

unint64_t sub_1000D0DF4()
{
  return 0xD000000000000018LL;
}

BOOL sub_1000D0E10(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002EA428, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

_UNKNOWN **sub_1000D0E54()
{
  return &off_1002EA460;
}

uint64_t sub_1000D0E60(uint64_t a1)
{
  uint64_t result = 1LL;
  switch(a1)
  {
    case 0LL:
      uint64_t result = 0LL;
      break;
    case 1LL:
      return result;
    case 2LL:
      uint64_t result = 2LL;
      break;
    case 3LL:
      uint64_t result = 3LL;
      break;
    default:
      if (a1 == 999) {
        uint64_t result = 4LL;
      }
      else {
        uint64_t result = 5LL;
      }
      break;
  }

  return result;
}

uint64_t sub_1000D0EB4(char a1)
{
  return qword_10027BD40[a1];
}

BOOL sub_1000D0ED4@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_1000D0E10(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000D0F08@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_1000D0DF4();
  *a1 = 0xD000000000000018LL;
  a1[1] = v3;
  return result;
}

void sub_1000D0F34(void *a1@<X8>)
{
  *a1 = &off_1002EA460;
}

BOOL sub_1000D0F44(char *a1, char *a2)
{
  return sub_1000F9330(*a1, *a2);
}

void sub_1000D0F50()
{
}

void sub_1000D0F58(uint64_t a1)
{
}

void sub_1000D0F60(uint64_t a1)
{
}

uint64_t sub_1000D0F68@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000D0E60(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D0F90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000D0EB4(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000D0FB8()
{
  id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v1 removeObserver:v0];

  swift_bridgeObjectRelease(*(void *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000D1024()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CloudStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100086574(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CloudStore);
}

uint64_t sub_1000D1048(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_10009C788(v2[8], v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000D1088 + 4 * byte_10027BAD4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000D10A8 + 4 * byte_10027BAD9[v4]))();
  }
}

_BYTE *sub_1000D1088(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}