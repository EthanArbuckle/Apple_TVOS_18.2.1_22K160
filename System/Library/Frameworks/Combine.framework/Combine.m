void PassthroughSubject.send(_:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    v4 = v1 + *(void *)(*(void *)v1 + 128LL);
    swift_beginAccess();
    v5 = *(void *)v4;
    LOBYTE(v4) = *(_BYTE *)(v4 + 8);
    outlined copy of ConduitList<A, Never><A>(v5, v4);
    os_unfair_lock_unlock(v3);
    MEMORY[0x1895F8858](v6);
    v7[2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v7, v5, v4);
    outlined consume of ConduitList<A, Never><A>(v5, v4);
  }

  else
  {
    os_unfair_lock_unlock(v3);
  }
}

uint64_t outlined copy of ConduitList<A, Never><A>(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!a2) {
    return swift_retain();
  }
  return result;
}

uint64_t ConduitList.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  v5 = (void (*)(uint64_t))result;
  if (a4)
  {
    if (a4 == 1)
    {
      MEMORY[0x1895F8858](result);
      uint64_t v9 = type metadata accessor for ConduitBase(255LL, v6, v7, v8);
      MEMORY[0x186E22960](&protocol conformance descriptor for ConduitBase<A, B>, v9);
      uint64_t v10 = type metadata accessor for Set();
      MEMORY[0x186E22960](MEMORY[0x189618708], v10);
      return Sequence.forEach(_:)();
    }
  }

  else
  {
    uint64_t v11 = swift_retain();
    v5(v11);
    return outlined consume of ConduitList<A, Never><A>(a3, 0);
  }

  return result;
}

uint64_t partial apply for closure #1 in PublishedSubject.send(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104LL))(*(void *)(v1 + 16));
}

void PassthroughSubject.Conduit.offer(_:)(uint64_t a1)
{
  v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 176);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v8);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 216));
  os_unfair_lock_lock(v14);
  uint64_t v15 = *v2;
  uint64_t v16 = *(void *)(*v2 + 208);
  uint64_t v17 = *(uint64_t *)((char *)v2 + v16);
  if (v17 != 0x8000000000000000LL)
  {
    if (v17 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }

    if (!v17)
    {
      os_unfair_lock_unlock(v14);
      return;
    }
  }

  uint64_t v26 = a1;
  uint64_t v27 = v16;
  uint64_t v18 = (uint64_t)v2 + *(void *)(v15 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v18, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    os_unfair_lock_unlock(v14);
    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
  uint64_t v19 = v27;
  uint64_t v20 = *(uint64_t *)((char *)v2 + v27);
  if (v20 != 0x8000000000000000LL)
  {
    if ((v20 & 0x8000000000000000LL) == 0)
    {
      if (v20)
      {
        *(uint64_t *)((char *)v2 + v27) = v20 - 1;
        goto LABEL_10;
      }

LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    v54 = dispatch thunk of BinaryInteger._lowWord.getter();
    v32(v23, a2);
    if (v54 < v75) {
      goto LABEL_36;
    }
    goto LABEL_10;
  }

  v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v48 & 1) == 0)
  {
    v34 = v70;
    if (v49 >= 64)
    {
      v32(v23, a2);
      goto LABEL_10;
    }

    goto LABEL_28;
  }

  if (v49 <= 64)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E22564](&unk_183BA3910, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
    v58 = v68;
    MEMORY[0x186E22504](v9, a2, v67);
    v59 = dispatch thunk of static Comparable.< infix(_:_:)();
    v32(v58, a2);
    v60 = v65;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v65, v23, a2);
    if ((v59 & 1) != 0)
    {
      v32(v60, a2);
    }

    else
    {
      v61 = v75;
      v62 = dispatch thunk of BinaryInteger._lowWord.getter();
      v32(v60, a2);
      v34 = v70;
      if (v62 >= v61) {
        goto LABEL_10;
      }
    }

      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( ((unint64_t)a1 + v11) & v24,  ((unint64_t)a2 + v11) & v24,  v5);
  if (!v14) {
    *((_BYTE *)a1 + v12) = 0;
  }
  return a1;
}

  v71 = v43(v69, 1LL, v54);
  v72 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v72(v69, v70);
  v73 = v71 == 1;
  v74 = v70;
  if (!v73)
  {
    v79 = *(void *)(v5 - 224);
LABEL_41:
    (*(void (**)(void, uint64_t))(*(void *)(v5 - 248) + 8LL))(*(void *)(v5 - 232), v79);
    (*(void (**)(void, void))(*(void *)(v5 - 464) + 8LL))(*(void *)(v5 - 432), *(void *)(v5 - 392));
    (*(void (**)(void, void))(*(void *)(v5 - 264) + 8LL))(*(void *)(v5 - 272), *(void *)(v5 - 256));
    v72(v62, v74);
    return;
  }

  v75 = *(os_unfair_lock_s **)(v5 - 408);
  os_unfair_lock_lock(v75);
  v76 = *(void *)(*v42 + 152);
  v77 = *(uint64_t *)((char *)v42 + v76);
  v78 = 0x8000000000000000LL;
  v79 = *(void *)(v5 - 224);
  if (v77 == 0x8000000000000000LL)
  {
LABEL_40:
    os_unfair_lock_unlock(v75);
    goto LABEL_41;
  }

  if (v57 == 0x8000000000000000LL)
  {
LABEL_39:
    *(uint64_t *)((char *)v42 + v76) = v78;
    goto LABEL_40;
  }

  if ((v77 | v57) < 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  v78 = v77 + v57;
  if (__OFADD__(v77, v57))
  {
    v78 = 0x8000000000000000LL;
    goto LABEL_39;
  }

  if ((v78 & 0x8000000000000000LL) == 0) {
    goto LABEL_39;
  }
LABEL_45:
  __break(1u);
}

LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

    __break(1u);
    goto LABEL_28;
  }

    v13 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_retain();
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    uint64_t v10 = v19;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t result = (void *)swift_unknownObjectRetain();
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

    __break(1u);
    goto LABEL_28;
  }

  if ((_DWORD)v8 == v12)
  {
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v28 = a1;
    v14 = v8;
    uint64_t v15 = v6;
    return v27(v28, v14, v15);
  }

  v28 = (v17 + a1) & ~v16;
  if (v11 == v12)
  {
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v14 = *(unsigned int *)(v10 + 84);
    return v27(v28, v14, v15);
  }

  v28 = (v28 + v18 + v19) & ~v19;
  if ((_DWORD)v14 == v12)
  {
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    uint64_t v15 = v5;
    return v27(v28, v14, v15);
  }

  v30 = *(unsigned __int8 *)(v28 + v20);
  if (v30 < 2) {
    return 0LL;
  }
  v31 = (v30 + 2147483646) & 0x7FFFFFFF;
  return (v31 + 1);
}

      uint64_t v10 = 0LL;
      uint64_t v23 = 0u;
      BOOL v24 = 0u;
      unint64_t v22 = 0u;
    }

    uint64_t v18 = *(void *)(v7 + 8 * v19);
    if (v18)
    {
LABEL_16:
      uint64_t v17 = v19;
LABEL_13:
      uint64_t v10 = (v18 - 1) & v18;
      uint64_t v15 = __clz(__rbit64(v18)) + (v17 << 6);
      uint64_t v6 = v17;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v11)
    {
      uint64_t v6 = v11 - 1;
      goto LABEL_27;
    }

    uint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_13;
    }
  }

LABEL_10:
  os_unfair_lock_unlock(v14);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 + 184) + 48LL))(v26, v5);
  os_unfair_recursive_lock_unlock();
  if (v21 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v14);
    unint64_t v22 = 0x8000000000000000LL;
    goto LABEL_22;
  }

  if (v21 < 0) {
    goto LABEL_29;
  }
  if (v21)
  {
    os_unfair_lock_lock(v14);
    uint64_t v23 = *(uint64_t *)((char *)v2 + v19);
    if (v23 == 0x8000000000000000LL)
    {
LABEL_23:
      os_unfair_lock_unlock(v14);
      goto LABEL_24;
    }

    if (((v23 | v21) & 0x8000000000000000LL) == 0)
    {
      BOOL v24 = __OFADD__(v23, v21);
      unint64_t v22 = v23 + v21;
      if (v24)
      {
        unint64_t v22 = 0x8000000000000000LL;
LABEL_22:
        *(uint64_t *)((char *)v2 + v19) = v22;
        goto LABEL_23;
      }

      if ((v22 & 0x8000000000000000LL) == 0) {
        goto LABEL_22;
      }
LABEL_31:
      __break(1u);
      return;
    }

    v40 = v6;
    v41 = v17;
    v42 = v65;
    v43 = v66;
    __swift_project_boxed_opaque_existential_1(v64, v65);
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 24);
    v45 = v42;
    uint64_t v17 = v41;
    uint64_t v6 = v40;
    v35 = v50;
    v46 = v43;
    v28 = v51;
    v44(v37, v45, v46);
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

    uint64_t v7 = v16;
    uint64_t v8 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v6, v7, v8);
    goto LABEL_11;
  }

  __break(1u);
}

    uint64_t v9 = *(unsigned __int8 *)(a2 + v7);
    if (v9 < 3) {
      goto LABEL_19;
    }
LABEL_15:
    else {
      uint64_t v10 = 4LL;
    }
    __asm { BR              X12 }
  }

  uint64_t v9 = *(_DWORD *)(a2 + v7);
  if (v9 >= 3) {
    goto LABEL_15;
  }
LABEL_19:
  if (v9 != 2)
  {
    if (v9 != 1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
      {
        memcpy((void *)a1, (const void *)a2, v6);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_35:
          *(_BYTE *)(a1 + v7) = 0;
          return a1;
        }
      }

      uint64_t v16 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v16 > 0xFFFC)
      {
        *(_DWORD *)(a1 + v7) = 0;
        return a1;
      }

      if (v16 > 0xFC)
      {
        *(_WORD *)(a1 + v7) = 0;
        return a1;
      }

      goto LABEL_35;
    }

    v13 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
    v14 = 1;
    uint64_t v15 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v15 <= 0xFFFC)
    {
      if (v15 <= 0xFC)
      {
LABEL_31:
        *(_BYTE *)(a1 + v7) = 1;
        return a1;
      }

    uint64_t v9 = *((unsigned __int8 *)a2 + v7);
    if (v9 < 3) {
      goto LABEL_19;
    }
LABEL_15:
    else {
      uint64_t v10 = 4LL;
    }
    __asm { BR              X12 }
  }

  uint64_t v9 = *(_DWORD *)((char *)a2 + v7);
  if (v9 >= 3) {
    goto LABEL_15;
  }
LABEL_19:
  if (v9 != 2)
  {
    if (v9 != 1)
    {
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v6);
      }

      else
      {
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_35:
          *((_BYTE *)a1 + v7) = 0;
          return a1;
        }
      }

      uint64_t v16 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v16 > 0xFFFC)
      {
        *(_DWORD *)((char *)a1 + v7) = 0;
        return a1;
      }

      if (v16 > 0xFC)
      {
        *(_WORD *)((char *)a1 + v7) = 0;
        return a1;
      }

      goto LABEL_35;
    }

    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    *((void *)a1 + 4) = *((void *)a2 + 4);
    v14 = 1;
    uint64_t v15 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v15 <= 0xFFFC)
    {
      if (v15 <= 0xFC)
      {
LABEL_31:
        *((_BYTE *)a1 + v7) = 1;
        return a1;
      }

LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (!v14) {
    return 0LL;
  }
  if ((_DWORD)v8 == v14)
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v27 = a1;
    v28 = v8;
    v29 = v6;
    return v26(v27, v28, v29);
  }

  uint64_t v27 = (v17 + a1) & ~v16;
  if ((_DWORD)v10 == v14)
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v28 = v10;
    v29 = v5;
    return v26(v27, v28, v29);
  }

  v30 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v27 + v18 + v19) & ~v19);
  if (v30 >= 2) {
    return v30 - 1;
  }
  else {
    return 0LL;
  }
}

    __break(1u);
    goto LABEL_31;
  }

            outlined consume of Set<ObservableObjectPublisher.Conduit>.Iterator._Variant();
            return;
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if (!v14) {
    return 0LL;
  }
  if ((_DWORD)v8 == v14)
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v27 = a1;
    v28 = v8;
    v29 = v6;
    return v26(v27, v28, v29);
  }

  uint64_t v27 = (v17 + a1) & ~v16;
  if ((_DWORD)v10 == v14)
  {
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v28 = v10;
    v29 = v5;
    return v26(v27, v28, v29);
  }

  v30 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v27 + v18 + v19) & ~v19);
  if (v30 >= 2) {
    return v30 - 1;
  }
  else {
    return 0LL;
  }
}

    __break(1u);
    goto LABEL_31;
  }

  if (v15) {
    v33 = v14;
  }
  else {
    v33 = v14 + 1;
  }
  memcpy(v4, v3, v33);
  return v4;
}

  if (v15) {
    v33 = v14;
  }
  else {
    v33 = v14 + 1;
  }
  memcpy(v4, v3, v33);
  return v4;
}

LABEL_24:
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
}

  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v4);
}

  if (v5 < 2) {
    return 0LL;
  }
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0LL;
  }
}

  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
}

  if (v5 < 2) {
    return 0LL;
  }
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2) {
    return v14 - 1;
  }
  else {
    return 0LL;
  }
}

  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v4);
}

uint64_t getEnumTagSinglePayload for Publishers.CompactMap.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AE2AF0 + 4 * byte_183BA243F[v10]))();
  }

uint64_t initializeWithCopy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  return a1;
}

void storeEnumTagSinglePayload for Publishers.CompactMap.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 32) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AE2CE8()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x183AE2D60LL);
}

void sub_183AE2CF0(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AE2CF8LL);
  }
  JUMPOUT(0x183AE2D60LL);
}

void sub_183AE2D38()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x183AE2D60LL);
}

void sub_183AE2D40()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x183AE2D60LL);
}

uint64_t sub_183AE2D48(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + v6) = 0;
  if (!a2) {
    JUMPOUT(0x183AE2D60LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183AE2D5CLL);
    }
    JUMPOUT(0x183AE2D54LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t Publishers.CompactMap.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  unsigned int v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v8);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(v2 + *(int *)(a2 + 60)))(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 1LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
    uint64_t v14 = (*(uint64_t (**)(char *, void))(*(void *)(a2 + 48) + 48LL))(v13, *(void *)(a2 + 32));
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  }

  return v14;
}

uint64_t destroy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t outlined consume of ConduitList<A, Never><A>(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!a2) {
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Subscribers.Sink<A, B>(uint64_t a1)
{
  return 0LL;
}

uint64_t Subscribers.Sink.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 96);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 16);
  swift_retain();
  os_unfair_lock_unlock(v3);
  v4(a1);
  swift_release();
  return 0LL;
}

unint64_t static Subscribers.Demand.unlimited.getter()
{
  return 0x8000000000000000LL;
}

uint64_t getEnumTagSinglePayload for Publishers.Filter.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AE303C + 4 * byte_183B9E197[v10]))();
  }

uint64_t initializeWithCopy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  return a1;
}

void storeEnumTagSinglePayload for Publishers.Filter.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AE3234()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x183AE32ACLL);
}

void sub_183AE323C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AE3244LL);
  }
  JUMPOUT(0x183AE32ACLL);
}

void sub_183AE3284()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x183AE32ACLL);
}

void sub_183AE328C()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x183AE32ACLL);
}

uint64_t sub_183AE3294(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + v6) = 0;
  if (!a2) {
    JUMPOUT(0x183AE32ACLL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183AE32A8LL);
    }
    JUMPOUT(0x183AE32A0LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t dispatch thunk of Subscriber.receive(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t Publishers.Filter.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  else {
    return 1LL;
  }
}

unint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByCount<A>.Inner<A1>( uint64_t a1)
{
  return Publishers.CollectByCount.Inner.receive(_:)(a1);
}

unint64_t Publishers.CollectByCount.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v8 = (char *)v18 - v7;
  int v9 = *(os_unfair_lock_s **)((char *)v2 + v4[20]);
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t)v2 + *(void *)(*v2 + 136LL);
  swift_beginAccess();
  outlined init with copy of Any?(v10, (uint64_t)v18, &demangling cache variable for type metadata for Subscription?);
  uint64_t v11 = v18[3];
  outlined destroy of CustomStringConvertible?( (uint64_t)v18,  &demangling cache variable for type metadata for Subscription?);
  if (!v11) {
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
  unint64_t v12 = (void *)((char *)v2 + *(void *)(*v2 + 128LL));
  swift_beginAccess();
  type metadata accessor for Array();
  Array.append(_:)();
  swift_endAccess();
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = MEMORY[0x186E22090](v13, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v14 == *(void *)((char *)v2 + *(void *)(*v2 + 120LL)))
  {
    uint64_t v15 = *v12;
    swift_bridgeObjectRetain();
    *unint64_t v12 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v9);
    v18[0] = v15;
    uint64_t v16 = (*(uint64_t (**)(void *, void))(v4[13] + 48LL))(v18, v4[11]);
    swift_bridgeObjectRelease();
    unint64_t result = 0x8000000000000000LL;
    if (v16 != 0x8000000000000000LL)
    {
      if (v16 < 0)
      {
LABEL_11:
        __break(1u);
        return result;
      }

      unint64_t result = v16 * v14;
      if ((result & 0x8000000000000000LL) != 0)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
  }

  else
  {
LABEL_7:
    os_unfair_lock_unlock(v9);
    return 0LL;
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E22948]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t destroy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t getEnumTagSinglePayload for Publishers._Merged.Side(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t destroy for Deferred()
{
  return swift_release();
}

void Publishers._Merged.Side.receive(_:)(Swift::Int a1)
{
}

void Publishers._Merged.receive(_:_:)(Swift::Int a1, Swift::Int a2)
{
  v24[0] = a2;
  uint64_t v4 = *v2;
  Swift::Int v5 = *(void *)(*v2 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  int v9 = (char *)v24 - v8;
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 176));
  os_unfair_lock_lock(v10);
  uint64_t v11 = *(void *)(*v2 + 120);
  uint64_t v12 = *(uint64_t *)((char *)v2 + v11);
  if (v12 == 0x8000000000000000LL)
  {
    os_unfair_lock_unlock(v10);
    MEMORY[0x1895F8858](v13);
    v24[-6] = v5;
    *(_OWORD *)&v24[-5] = *(_OWORD *)(v4 + 88);
    v24[-3] = *(void *)(v4 + 104);
    v24[-2] = a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
    return;
  }

  if (v12 < 0) {
    goto LABEL_20;
  }
  if (v12)
  {
    os_unfair_lock_unlock(v10);
    MEMORY[0x1895F8858](v14);
    v24[-6] = v5;
    *(_OWORD *)&v24[-5] = *(_OWORD *)(v4 + 88);
    v24[-3] = *(void *)(v4 + 104);
    v24[-2] = a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
    Swift::Int v15 = v24[1];
    os_unfair_lock_lock(v10);
    if (v15 == 0x8000000000000000LL) {
      goto LABEL_9;
    }
    if (v15 < 0)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    uint64_t v16 = v12 - 1 + v15;
    if (__OFADD__(v12 - 1, v15))
    {
LABEL_9:
      uint64_t v17 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 200));
    }

    else
    {
      if (v16 < 0)
      {
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }

      uint64_t v17 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 200));
      uint64_t v23 = *v17;
      unint64_t v18 = 0x8000000000000000LL;
      if (*v17 == 0x8000000000000000LL) {
        goto LABEL_11;
      }
      if (v23 < 0)
      {
LABEL_23:
        __break(1u);
        return;
      }

      unint64_t v18 = v16 + v23;
      if (!__OFADD__(v16, v23))
      {
        if ((v18 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }

LABEL_11:
        *(uint64_t *)((char *)v2 + v11) = v18;
        *uint64_t v17 = 0LL;
        os_unfair_lock_unlock(v10);
        return;
      }
    }

    unint64_t v18 = 0x8000000000000000LL;
    goto LABEL_11;
  }

  uint64_t v19 = *(void *)(v5 - 8);
  (*(void (**)(char *, Swift::Int, Swift::Int))(v19 + 16))(v9, a1, v5);
  (*(void (**)(char *, void, uint64_t, Swift::Int))(v19 + 56))(v9, 0LL, 1LL, v5);
  uint64_t v20 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 168));
  swift_beginAccess();
  type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  uint64_t v21 = *v20;
  Swift::Int v22 = v24[0];
  Array._checkSubscript_mutating(_:)(v24[0]);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 40))( v21 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v22,
    v9,
    v6);
  swift_endAccess();
  os_unfair_lock_unlock(v10);
}

  *((_BYTE *)v2 + *(void *)(*v2 + 224)) = 1;
  os_unfair_lock_unlock(v13);
  os_unfair_recursive_lock_lock_with_options();
  Swift::Int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 + 176) + 48LL))(v27, v4);
  os_unfair_recursive_lock_unlock();
  if (v22 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v13);
    uint64_t v23 = 0x8000000000000000LL;
    goto LABEL_22;
  }

  if (v22 < 0) {
    goto LABEL_29;
  }
  if (v22)
  {
    os_unfair_lock_lock(v13);
    BOOL v24 = *(uint64_t *)((char *)v2 + v15);
    if (v24 == 0x8000000000000000LL)
    {
LABEL_23:
      os_unfair_lock_unlock(v13);
      goto LABEL_24;
    }

    if (((v24 | v22) & 0x8000000000000000LL) == 0)
    {
      uint64_t v25 = __OFADD__(v24, v22);
      uint64_t v23 = v24 + v22;
      if (v25)
      {
        uint64_t v23 = 0x8000000000000000LL;
LABEL_22:
        *(uint64_t *)((char *)v2 + v15) = v23;
        goto LABEL_23;
      }

      if ((v23 & 0x8000000000000000LL) == 0) {
        goto LABEL_22;
      }
LABEL_31:
      __break(1u);
      return;
    }

  swift_beginAccess();
  v23[2] = *(void *)v13;
  type metadata accessor for UnsafeContinuation();
  uint64_t v19 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v19);
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    swift_beginAccess();
    MEMORY[0x186E22960](MEMORY[0x189618490], v19);
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    uint64_t v20 = v23[1];
    os_unfair_lock_unlock((os_unfair_lock_t)v10);
    uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v9, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v9, 0LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v7 + 32))(*(void *)(*(void *)(v20 + 64) + 40LL), v9, v6);
    swift_continuation_resume();
LABEL_14:
    (*(void (**)(_BYTE *, uint64_t))(v23[0] + 8LL))(v24, v12);
    return 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  *((_BYTE *)v2 + *(void *)(*v2 + 232)) = 1;
  os_unfair_lock_unlock(v13);
  os_unfair_recursive_lock_lock_with_options();
  Swift::Int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 + 184) + 48LL))(v27, v4);
  os_unfair_recursive_lock_unlock();
  if (v22 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v13);
    uint64_t v23 = 0x8000000000000000LL;
    goto LABEL_22;
  }

  if (v22 < 0) {
    goto LABEL_29;
  }
  if (v22)
  {
    os_unfair_lock_lock(v13);
    BOOL v24 = *(uint64_t *)((char *)v2 + v15);
    if (v24 == 0x8000000000000000LL)
    {
LABEL_23:
      os_unfair_lock_unlock(v13);
      goto LABEL_24;
    }

    if (((v24 | v22) & 0x8000000000000000LL) == 0)
    {
      uint64_t v25 = __OFADD__(v24, v22);
      uint64_t v23 = v24 + v22;
      if (v25)
      {
        uint64_t v23 = 0x8000000000000000LL;
LABEL_22:
        *(uint64_t *)((char *)v2 + v15) = v23;
        goto LABEL_23;
      }

      if ((v23 & 0x8000000000000000LL) == 0) {
        goto LABEL_22;
      }
LABEL_31:
      __break(1u);
      return;
    }

  if (result >= 3)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X12 }
  }

  return result;
}

void Publishers._Merged.guardedApplyDownstream<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + *(void *)(*(void *)v2 + 176LL));
  os_unfair_lock_lock(v4);
  uint64_t v5 = *(void *)(*(void *)v1 + 192LL);
  *(_BYTE *)(v1 + v5) = 1;
  os_unfair_lock_unlock(v4);
  os_unfair_recursive_lock_lock_with_options();
  a1(v2 + *(void *)(*(void *)v2 + 112LL));
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v4);
  *(_BYTE *)(v1 + v5) = 0;
  os_unfair_lock_unlock(v4);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.FlatMap<A, B>.Outer<A1>( uint64_t a1)
{
}

void Publishers.FlatMap.Outer.receive(_:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  MEMORY[0x1895F8858](a1);
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  char v5 = *((_BYTE *)v1 + *(void *)(*v1 + 232LL));
  os_unfair_lock_unlock(v4);
  if ((v5 & 1) == 0)
  {
    (*(void (**)(uint64_t))(v2 + *(void *)(*(void *)v2 + 224LL)))(a1);
    uint64_t v6 = *(void *)(*(void *)v2 + 192LL);
    uint64_t v7 = *(void *)(v2 + v6);
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v2 + v6) = v7 + 1;
      os_unfair_lock_lock(v4);
      uint64_t v8 = *(void *)(*(void *)v2 + 200LL);
      uint64_t v9 = *(void *)(v2 + v8);
      BOOL v10 = __OFADD__(v9, 1LL);
      uint64_t v11 = v9 + 1;
      if (!v10)
      {
        *(void *)(v2 + v8) = v11;
        os_unfair_lock_unlock(v4);
        swift_retain();
        Publishers._Merged.Side.init(index:merger:)(v7, v2, &v12);
        type metadata accessor for Publishers.FlatMap.Outer.Side();
      }
    }

    __break(1u);
  }

uint64_t Just.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t Publisher.eraseToAnyPublisher()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  return AnyPublisher.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, v9, a1, a2);
}

uint64_t initializeWithCopy for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t AnyPublisher.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v12);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for AnyPublisher(0LL, a2, a3, AssociatedConformanceWitness);
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v15 = v17[1];
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  }

  else
  {
    type metadata accessor for PublisherBox(0LL, a4, a5, v14);
    uint64_t v15 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v15 + 120LL) - 8LL) + 32LL))( v15 + *(void *)(*(void *)v15 + 136LL),  a1);
  }

  return v15;
}

uint64_t type metadata accessor for AnyPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyPublisher);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x186E228DC](a1, v6, a5);
}

uint64_t destroy for Just(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t type metadata accessor for PublisherBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublisherBox);
}

uint64_t PublisherBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 120LL) - 8LL) + 32LL))( v2 + *(void *)(*(void *)v2 + 136LL),  a1);
  return v2;
}

uint64_t Publisher.merge(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  swift_allocObject();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v4, a2);
  v13(v12 + v9, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v16 = v10;
  uint64_t v14 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618470], v14);
  return Publishers.MergeMany.init<A>(_:)((uint64_t)&v16, v14, a3);
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v3 = 0LL;
  }
  if (v3) {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else {
    return type metadata accessor for _ContiguousArrayStorage();
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v0);
}

uint64_t Publishers.MergeMany.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1);
  uint64_t v8 = Array.init<A>(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v8;
  return result;
}

void Publishers._Merged.Side.init(index:merger:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v5 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v4);
    a3[2] = v5;
  }

void type metadata accessor for Publishers.FlatMap.Outer.Side()
{
}

uint64_t Publisher.subscribe<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a4;
  uint64_t v47 = a5;
  uint64_t v48 = a2;
  uint64_t v7 = type metadata accessor for SubscriberTap(0LL, a3, a5, a4);
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v39 - v15;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v17 = static DebugHook.globalHook;
  unint64_t v18 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v18);
  if (!v17) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 32))(a1, a3, v47, v48);
  }
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19(v16, a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriberTapMarker);
  if (swift_dynamicCast())
  {
    uint64_t v46 = a1;
    outlined init with take of Subscription(&v51, (uint64_t)v58);
    uint64_t v20 = v59;
    uint64_t v21 = v60;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v58, v59);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 8))(v57, v20, v21);
    uint64_t v22 = v48;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v24 = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v26 = type metadata accessor for AnySubscriber(0LL, AssociatedTypeWitness, v24, AssociatedConformanceWitness);
    if (swift_dynamicCast())
    {
      v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))*((void *)&v51 + 1);
      uint64_t v41 = v51;
      uint64_t v44 = *((void *)&v52 + 1);
      uint64_t v27 = v52;
      uint64_t v28 = v53;
      uint64_t v43 = v54;
      uint64_t v29 = v55;
      uint64_t v42 = v56;
      uint64_t v40 = MEMORY[0x186E22960](&protocol conformance descriptor for AnySubscriber<A, B>, v26);
      uint64_t v30 = v49;
      uint64_t v31 = v50;
      DebugHook.willReceive<A, B>(publisher:subscriber:)(v49, (uint64_t)&v51, v22, v26, v50, v40);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 32))(v46, a3, v47, v22, v31);
      *(void *)&__int128 v51 = v41;
      *((void *)&v51 + 1) = v45;
      *(void *)&__int128 v52 = v27;
      *((void *)&v52 + 1) = v44;
      uint64_t v53 = v28;
      uint64_t v54 = v43;
      uint64_t v55 = v29;
      uint64_t v56 = v42;
      DebugHook.didReceive<A, B>(publisher:subscriber:)(v30, (uint64_t)&v51, v22, v26, v31, v40);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    }

    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }

  else
  {
    uint64_t v53 = 0LL;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    outlined destroy of SubscriberTapMarker?((uint64_t)&v51);
    v19(v14, a1, a3);
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    uint64_t v33 = v50;
    uint64_t v34 = a1;
    uint64_t v35 = v47;
    SubscriberTap.init(subscriber:inner:)((uint64_t)v14, (uint64_t)&v51, a3, v47, (uint64_t)v10);
    uint64_t v37 = v48;
    uint64_t v36 = v49;
    DebugHook.willReceive<A, B>(publisher:subscriber:)(v49, v34, v48, a3, v33, v35);
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 32);
    uint64_t v38 = MEMORY[0x186E22960](&protocol conformance descriptor for SubscriberTap<A>, v7);
    v45(v10, v7, v38, v37, v33);
    DebugHook.didReceive<A, B>(publisher:subscriber:)(v36, v34, v37, a3, v33, v35);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v10, v7);
  }

  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v7 = type metadata accessor for SubjectSubscriber(0LL, a3, a5, a4);
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v8 = specialized SubjectSubscriber.init(_:)();
  swift_unknownObjectRelease();
  uint64_t v11 = v8;
  uint64_t v9 = MEMORY[0x186E22960](&protocol conformance descriptor for SubjectSubscriber<A>, v7);
  Publisher.subscribe<A>(_:)((uint64_t)&v11, a2, v7, a4, v9);
  type metadata accessor for AnyCancellable();
  uint64_t v11 = v8;
  return AnyCancellable.__allocating_init<A>(_:)( (uint64_t)&v11,  v7,  (uint64_t)&protocol witness table for SubjectSubscriber<A>);
}

uint64_t type metadata accessor for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubscriberTap);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance AnyPublisher<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyPublisher.receive<A>(subscriber:)(a1, *v4, a3, a4, a2, a3);
}

uint64_t AnyPublisher.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 112LL))(a1, a5, a6);
}

uint64_t PublisherBox.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)v3 + 128LL) + 32LL))( a1,  a2,  a3,  *(void *)(*(void *)v3 + 120LL));
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MergeMany<A>( uint64_t a1)
{
}

void Publishers.MergeMany.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = MEMORY[0x1895F8858](v1);
  MEMORY[0x1895F8858](v2);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Publishers._Merged();
}

uint64_t sub_183AE48F8(uint64_t a1)
{
  uint64_t v10 = MEMORY[0x186E22090](v2, v3);
  swift_allocObject();
  uint64_t v11 = specialized Publishers._Merged.init(downstream:count:)(*(void *)(v8 - 240), v10);
  *(void *)(v8 - 104) = a1;
  *(void *)(v8 - 96) = &protocol witness table for Publishers._Merged<A, B, C>;
  *(void *)(v8 - 128) = v11;
  uint64_t v12 = *(void *)(v8 - 184);
  *(void *)(v8 - 256) = *(void *)(v12 + 40);
  swift_retain();
  (*(void (**)(uint64_t, void, uint64_t))(v8 - 256))(v8 - 128, *(void *)(v8 - 192), v12);
  __swift_destroy_boxed_opaque_existential_1(v8 - 128);
  *(void *)(v8 - 152) = *(void *)(v8 - 248);
  uint64_t v13 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618470], v13);
  Sequence.enumerated()();
  *(void *)(v8 - 176) = *(void *)(v8 - 128);
  type metadata accessor for EnumeratedSequence();
  EnumeratedSequence.makeIterator()();
  type metadata accessor for EnumeratedSequence.Iterator();
  EnumeratedSequence.Iterator.next()();
  (*(void (**)(uint64_t *, uint64_t, void))(*(void *)(v8 - 208) + 32LL))(v7, v6, *(void *)(v8 - 200));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v7, 1LL, v5) != 1)
  {
    uint64_t v14 = *v7;
    (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v4, (char *)v7 + *(int *)(v5 + 48), v3);
    swift_retain();
    Publishers._Merged.Side.init(index:merger:)(v14, (uint64_t)v11, (void *)(v8 - 128));
    uint64_t v15 = *(void *)(v8 - 120);
    uint64_t v16 = *(void *)(v8 - 112);
    *(void *)(v8 - 176) = *(void *)(v8 - 128);
    *(void *)(v8 - 168) = v15;
    *(void *)(v8 - 160) = v16;
    uint64_t v17 = *(void *)(v8 - 232);
    *(void *)(v8 - 128) = *(void *)(v8 - 224);
    *(void *)(v8 - 120) = v17;
    uint64_t v18 = *(void *)(v8 - 184);
    *(void *)(v8 - 112) = *(void *)(v8 - 192);
    *(void *)(v8 - 104) = v18;
    type metadata accessor for Publishers._Merged.Side();
  }

  swift_release();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for Publishers._Merged()
{
}

uint64_t *specialized Publishers._Merged.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v17 - v9;
  *(uint64_t *)((char *)v2 + *(void *)(v5 + 120)) = 0LL;
  *((_BYTE *)v2 + *(void *)(*v2 + 128)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 144)) = 0LL;
  *((_BYTE *)v2 + *(void *)(*v2 + 152)) = 0;
  uint64_t v11 = *(void *)(*v2 + 176);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *uint64_t v12 = 0;
  *(uint64_t *)((char *)v2 + v11) = (uint64_t)v12;
  uint64_t v13 = *(void *)(*v2 + 184);
  uint64_t v14 = (void *)swift_slowAlloc();
  void *v14 = 0LL;
  *(uint64_t *)((char *)v2 + v13) = (uint64_t)v14;
  *((_BYTE *)v2 + *(void *)(*v2 + 192)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 200)) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 96) - 8LL) + 16LL))( (uint64_t)v2 + *(void *)(*v2 + 112),  a1);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 136)) = a2;
  uint64_t v18 = 0LL;
  memset(v17, 0, sizeof(v17));
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 160)) = specialized Array.init(repeating:count:)((uint64_t)v17, a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v10, 1LL, 1LL, v6);
  uint64_t v15 = specialized Array.init(repeating:count:)((uint64_t)v10, a2, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 168)) = v15;
  return v2;
}

uint64_t outlined init with copy of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Subscription?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined destroy of CustomStringConvertible?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = result;
    if (a2)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a3 - 8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      uint64_t v12 = a2 - 1;
      if (v12)
      {
        uint64_t v13 = *(void *)(v10 + 72);
        uint64_t v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }

        while (v12);
      }
    }

    type metadata accessor for Array();
    return v8;
  }

  return result;
}

void Publishers.FlatMap.Outer.Side.receive(subscription:)(void *a1)
{
}

void Publishers.FlatMap.Outer.receiveInner(subscription:_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (os_unfair_lock_s *)v3[2];
  os_unfair_lock_lock(v6);
  uint64_t v7 = *(void *)(*v3 + 200LL);
  uint64_t v8 = *(void *)((char *)v3 + v7);
  BOOL v9 = __OFSUB__(v8, 1LL);
  uint64_t v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }

  else
  {
    *(void *)((char *)v3 + v7) = v10;
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v14, a2);
    swift_endAccess();
    else {
      unint64_t v11 = 1LL;
    }
    os_unfair_lock_unlock(v6);
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v12);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
  }

uint64_t outlined init with copy of Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Subscription((__int128 *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v12;
    return swift_bridgeObjectRelease();
  }

  else
  {
    outlined destroy of Subscription?(a1);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000LL;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }

      outlined init with take of Subscription((__int128 *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v15 = 0LL;
      memset(v14, 0, sizeof(v14));
    }

    return outlined destroy of Subscription?((uint64_t)v14);
  }

uint64_t outlined init with take of Subscription(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int128 *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7] + 40 * v10;
        __swift_destroy_boxed_opaque_existential_1(v17);
        return outlined init with take of Subscription(a1, v17);
      }

      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }

    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }

  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if ((v14 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of ObservableObjectTable.Storage(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Subscription(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t result = outlined init with take of ObservableObjectTable.Storage(a2, a4[6] + 16 * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers._Merged<A, B, C>(uint64_t a1)
{
}

void Publishers._Merged.request(_:)(uint64_t a1)
{
  __int128 v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t v112 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  v111 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  v106 = (char *)&v92 - v9;
  uint64_t v103 = v10;
  MEMORY[0x1895F8858](v8);
  v104 = (char *)&v92 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v110 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  v105 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v92 - v16;
  MEMORY[0x1895F8858](v15);
  unint64_t v19 = (char *)&v92 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v108 = *(void *)(v21 - 8);
  uint64_t v109 = v21;
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v26 = (unint64_t *)((char *)&v92 - v25);
  uint64_t v107 = v4;
  uint64_t v27 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 176));
  os_unfair_lock_lock(v27);
  uint64_t v28 = (void *)*v2;
  if ((*((_BYTE *)v2 + *(void *)(*v2 + 128)) & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v29 = v28[19];
  if ((*((_BYTE *)v2 + v29) & 1) != 0) {
    goto LABEL_7;
  }
  if (a1 != 0x8000000000000000LL)
  {
    if (a1 < 0)
    {
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }

    if (!a1)
    {
LABEL_7:
      os_unfair_lock_unlock(v27);
      return;
    }
  }

  uint64_t v102 = v28[15];
  uint64_t v30 = *(uint64_t *)((char *)v2 + v102);
  if (v30 == 0x8000000000000000LL) {
    goto LABEL_7;
  }
  if ((*((_BYTE *)v2 + v28[24]) & 1) != 0)
  {
    uint64_t v31 = v28[25];
    uint64_t v32 = *(uint64_t *)((char *)v2 + v31);
    unint64_t v33 = 0x8000000000000000LL;
    if (v32 == 0x8000000000000000LL) {
      goto LABEL_7;
    }
    if (a1 == 0x8000000000000000LL)
    {
LABEL_77:
      *(uint64_t *)((char *)v2 + v31) = v33;
      goto LABEL_7;
    }

    if (((v32 | a1) & 0x8000000000000000LL) == 0)
    {
      unint64_t v33 = v32 + a1;
      if (__OFADD__(v32, a1))
      {
        unint64_t v33 = 0x8000000000000000LL;
      }

      else if ((v33 & 0x8000000000000000LL) != 0)
      {
        goto LABEL_110;
      }

      goto LABEL_77;
    }

    goto LABEL_105;
  }

  if (a1 != 0x8000000000000000LL)
  {
    if (((v30 | a1) & 0x8000000000000000LL) == 0)
    {
      uint64_t v93 = v29;
      unint64_t v46 = 0x8000000000000000LL;
      BOOL v47 = __OFADD__(v30, a1);
      unint64_t v48 = v30 + a1;
      if (v47 || (unint64_t v46 = v48, (v48 & 0x8000000000000000LL) == 0))
      {
        *(uint64_t *)((char *)v2 + v102) = v46;
        uint64_t v118 = static Array._allocateUninitialized(_:)();
        uint64_t v49 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 168));
        swift_beginAccess();
        v95 = v49;
        uint64_t v117 = *v49;
        uint64_t v98 = type metadata accessor for Array();
        uint64_t v96 = MEMORY[0x186E22960](MEMORY[0x189618470], v98);
        Sequence.enumerated()();
        uint64_t v116 = v113[0];
        type metadata accessor for EnumeratedSequence();
        EnumeratedSequence.makeIterator()();
        uint64_t v94 = (uint64_t)v2 + *(void *)(*v2 + 160);
        swift_beginAccess();
        uint64_t v100 = type metadata accessor for EnumeratedSequence.Iterator();
        v97 = (void *)MEMORY[0x18961AFE8];
        while (1)
        {
          EnumeratedSequence.Iterator.next()();
          (*(void (**)(unint64_t *, char *, uint64_t))(v108 + 32))(v26, v24, v109);
          if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8)
                                                                                    + 48LL))( v26,  1LL,  TupleTypeMetadata2) == 1)
            goto LABEL_47;
          unint64_t v101 = *v26;
          uint64_t v50 = v110;
          (*(void (**)(char *, char *, uint64_t))(v110 + 32))( v19,  (char *)v26 + *(int *)(TupleTypeMetadata2 + 48),  v12);
          uint64_t v51 = *(uint64_t *)((char *)v2 + v102);
          if (v51 != 0x8000000000000000LL)
          {
            if (v51 < 0)
            {
              __break(1u);
LABEL_99:
              __break(1u);
              goto LABEL_100;
            }

            if (!v51)
            {
              (*(void (**)(char *, uint64_t))(v50 + 8))(v19, v12);
LABEL_47:
              swift_bridgeObjectRelease();
              v113[0] = *v95;
              MEMORY[0x1895F8858](v113[0]);
              *(&v92 - 4) = v5;
              uint64_t v66 = v107;
              *(_OWORD *)(&v92 - 3) = *(_OWORD *)(v107 + 88);
              *(&v92 - 1) = *(void *)(v66 + 104);
              swift_bridgeObjectRetain();
              char v67 = Sequence.allSatisfy(_:)();
              swift_bridgeObjectRelease();
              if ((v67 & 1) != 0)
              {
                LODWORD(v110) = 1;
                *((_BYTE *)v2 + v93) = 1;
              }

              else
              {
LABEL_50:
                LODWORD(v110) = 0;
              }

              os_unfair_lock_unlock(v27);
              uint64_t v68 = v118;
              if (!MEMORY[0x186E220A8](v118, v5)) {
                goto LABEL_69;
              }
              uint64_t v69 = 0LL;
              unint64_t v70 = 0LL;
              v99 = v27;
              while (1)
              {
                Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
                Array._checkSubscript(_:wasNativeTypeChecked:)();
                if (IsNativeType)
                {
                  (*(void (**)(char *, unint64_t, uint64_t))(v112 + 16))( v111,  v68 + ((*(unsigned __int8 *)(v112 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))
                  + *(void *)(v112 + 72) * v69,
                    v5);
                  uint64_t v27 = (os_unfair_lock_s *)(v69 + 1);
                  if (__OFADD__(v69, 1LL)) {
                    goto LABEL_68;
                  }
                }

                else
                {
                  uint64_t v80 = _ArrayBuffer._getElementSlowPath(_:)();
                  if (v103 != 8) {
                    goto LABEL_114;
                  }
                  v113[0] = v80;
                  (*(void (**)(char *, void *, uint64_t))(v112 + 16))(v111, v113, v5);
                  swift_unknownObjectRelease();
                  uint64_t v27 = (os_unfair_lock_s *)(v69 + 1);
                  if (__OFADD__(v69, 1LL))
                  {
LABEL_68:
                    __break(1u);
LABEL_69:
                    unint64_t v79 = 0LL;
LABEL_70:
                    swift_bridgeObjectRelease();
                    os_unfair_lock_lock(v27);
                    uint64_t v81 = *(void *)(*v2 + 200);
                    unint64_t v82 = 0x8000000000000000LL;
                    if (v79 == 0x8000000000000000LL) {
                      goto LABEL_79;
                    }
                    uint64_t v83 = *(uint64_t *)((char *)v2 + v81);
                    if (v83 == 0x8000000000000000LL) {
                      goto LABEL_79;
                    }
                    if ((v83 & 0x8000000000000000LL) == 0)
                    {
                      unint64_t v82 = v79 + v83;
                      if (__OFADD__(v79, v83))
                      {
                        unint64_t v82 = 0x8000000000000000LL;
                        goto LABEL_79;
                      }

                      if ((v82 & 0x8000000000000000LL) == 0)
                      {
LABEL_79:
                        *(uint64_t *)((char *)v2 + v81) = 0LL;
                        os_unfair_lock_unlock(v27);
                        if ((v110 & 1) != 0) {
                          goto LABEL_80;
                        }
                        os_unfair_lock_lock(v27);
                        uint64_t v86 = *(uint64_t *)((char *)v2 + v102);
                        unint64_t v87 = 0x8000000000000000LL;
                        if (v86 == 0x8000000000000000LL) {
                          goto LABEL_90;
                        }
                        if (v82 == 0x8000000000000000LL) {
                          goto LABEL_89;
                        }
                        if ((v86 & 0x8000000000000000LL) == 0)
                        {
                          unint64_t v87 = v86 + v82;
                          if (__OFADD__(v86, v82))
                          {
                            unint64_t v87 = 0x8000000000000000LL;
                            goto LABEL_89;
                          }

                          if ((v87 & 0x8000000000000000LL) == 0)
                          {
LABEL_89:
                            *(uint64_t *)((char *)v2 + v102) = v87;
LABEL_90:
                            os_unfair_lock_unlock(v27);
LABEL_91:
                            uint64_t v88 = v97[2];
                            if (v88)
                            {
                              v89 = v97 + 4;
                              do
                              {
                                outlined init with copy of Any?( (uint64_t)v89,  (uint64_t)v113,  &demangling cache variable for type metadata for Subscription?);
                                uint64_t v91 = v114;
                                if (v114)
                                {
                                  uint64_t v90 = v115;
                                  __swift_project_boxed_opaque_existential_1(v113, v114);
                                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 24))(1LL, v91, v90);
                                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
                                }

                                else
                                {
                                  outlined destroy of CustomStringConvertible?( (uint64_t)v113,  &demangling cache variable for type metadata for Subscription?);
                                }

                                v89 += 5;
                                --v88;
                              }

                              while (v88);
                            }

LABEL_97:
                            swift_bridgeObjectRelease();
                            return;
                          }

LABEL_113:
                          __break(1u);
LABEL_114:
                          __break(1u);
                          return;
                        }

LABEL_112:
                        __break(1u);
                        goto LABEL_113;
                      }

  __break(1u);
LABEL_113:
  __break(1u);
}

LABEL_111:
                      __break(1u);
                      goto LABEL_112;
                    }

LABEL_107:
                    __break(1u);
LABEL_108:
                    __break(1u);
LABEL_109:
                    __break(1u);
LABEL_110:
                    __break(1u);
                    goto LABEL_111;
                  }
                }

                uint64_t v73 = v112;
                v74 = v2;
                v75 = v106;
                uint64_t v76 = (*(uint64_t (**)(char *, char *, uint64_t))(v112 + 32))(v106, v111, v5);
                MEMORY[0x1895F8858](v76);
                *(&v92 - 6) = v5;
                uint64_t v77 = v107;
                *(_OWORD *)(&v92 - 5) = *(_OWORD *)(v107 + 88);
                *(&v92 - 3) = *(void *)(v77 + 104);
                *(&v92 - 2) = (uint64_t)v75;
                v78 = v74;
                Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
                (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v5);
                unint64_t v79 = 0x8000000000000000LL;
                if (v70 == 0x8000000000000000LL)
                {
                  __int128 v2 = v78;
                }

                else
                {
                  __int128 v2 = v78;
                  if (v113[0] != 0x8000000000000000LL)
                  {
                    if ((v113[0] & 0x8000000000000000LL) != 0) {
                      goto LABEL_99;
                    }
                    unint64_t v79 = v70 + v113[0];
                    if (__OFADD__(v70, v113[0]))
                    {
                      unint64_t v79 = 0x8000000000000000LL;
                    }

                    else if ((v79 & 0x8000000000000000LL) != 0)
                    {
                      goto LABEL_101;
                    }
                  }
                }

                ++v69;
                unint64_t v70 = v79;
                BOOL v71 = v27 == (os_unfair_lock_s *)MEMORY[0x186E220A8](v68, v5);
                uint64_t v27 = v99;
                if (v71) {
                  goto LABEL_70;
                }
              }
            }
          }

          (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v17, v19, v12);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v17, 1LL, v5) == 1)
          {
            __int128 v52 = *(void (**)(char *, uint64_t))(v50 + 8);
            v52(v19, v12);
            v52(v17, v12);
          }

          else
          {
            uint64_t v53 = v112;
            (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v104, v17, v5);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v105, 1LL, 1LL, v5);
            uint64_t v54 = v95;
            swift_beginAccess();
            Array._makeMutableAndUnique()();
            uint64_t v55 = *v54;
            Array._checkSubscript_mutating(_:)(v101);
            (*(void (**)(unint64_t, char *, uint64_t))(v110 + 40))( v55 + ((*(unsigned __int8 *)(v110 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80))
            + *(void *)(v110 + 72) * v101,
              v105,
              v12);
            swift_endAccess();
            uint64_t v56 = *(uint64_t *)((char *)v2 + v102);
            if (v56 != 0x8000000000000000LL)
            {
              if (v56 < 0) {
                goto LABEL_108;
              }
              if (!v56) {
                goto LABEL_109;
              }
              *(uint64_t *)((char *)v2 + v102) = v56 - 1;
            }

            (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v106, v104, v5);
            type metadata accessor for Array();
            Array.append(_:)();
            if ((v101 & 0x8000000000000000LL) != 0) {
              goto LABEL_103;
            }
            if (v101 >= *(void *)(*(void *)v94 + 16LL)) {
              goto LABEL_104;
            }
            outlined init with copy of Any?( *(void *)v94 + 40 * v101 + 32,  (uint64_t)v113,  &demangling cache variable for type metadata for Subscription?);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v97[2] + 1LL,  1,  v97);
            }
            v57 = v97;
            unint64_t v59 = v97[2];
            unint64_t v58 = v97[3];
            unint64_t v60 = v59 + 1;
            if (v59 >= v58 >> 1)
            {
              unint64_t v101 = v59 + 1;
              v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v58 > 1),  v59 + 1,  1,  v97);
              unint64_t v60 = v101;
              v57 = v61;
            }

            v57[2] = v60;
            v97 = v57;
            outlined init with take of Subscription?((uint64_t)v113, (uint64_t)&v57[5 * v59 + 4]);
            (*(void (**)(char *, uint64_t))(v112 + 8))(v104, v5);
            (*(void (**)(char *, uint64_t))(v110 + 8))(v19, v12);
          }
        }
      }

LABEL_106:
      __break(1u);
      goto LABEL_107;
    }

    goto LABEL_102;
  }

  *(uint64_t *)((char *)v2 + v102) = 0x8000000000000000LL;
  uint64_t v34 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 168));
  swift_beginAccess();
  uint64_t v35 = *v34;
  uint64_t v36 = (uint64_t)v105;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56))(v105, 1LL, 1LL, v5);
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = MEMORY[0x186E22090](v37, v12);
  uint64_t v39 = specialized Array.init(repeating:count:)(v36, v38, v12);
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v36, v12);
  *uint64_t v34 = v39;
  swift_bridgeObjectRelease();
  uint64_t v40 = v27;
  uint64_t v41 = *(uint64_t *)((char *)v2 + *(void *)(*v2 + 144));
  uint64_t v42 = *(uint64_t *)((char *)v2 + *(void *)(*v2 + 136));
  uint64_t v43 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 160));
  swift_beginAccess();
  uint64_t v44 = *v43;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v40);
  v113[0] = v35;
  uint64_t v45 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618470], v45);
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  if (v41 != v42)
  {
    uint64_t v62 = *(void *)(v44 + 16);
    if (v62)
    {
      uint64_t v63 = v44 + 32;
      do
      {
        outlined init with copy of Any?( v63,  (uint64_t)v113,  &demangling cache variable for type metadata for Subscription?);
        uint64_t v65 = v114;
        if (v114)
        {
          uint64_t v64 = v115;
          __swift_project_boxed_opaque_existential_1(v113, v114);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v64 + 24))(0x8000000000000000LL, v65, v64);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
        }

        else
        {
          outlined destroy of CustomStringConvertible?( (uint64_t)v113,  &demangling cache variable for type metadata for Subscription?);
        }

        v63 += 40LL;
        --v62;
      }

      while (v62);
    }

    goto LABEL_97;
  }

    __break(1u);
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }

  uint64_t v27 = v22[29];
  if (*((_BYTE *)v2 + v27) == 1) {
    goto LABEL_12;
  }
  uint64_t v28 = v22[20];
  uint64_t v29 = 0x8000000000000000LL;
  uint64_t v90 = v2;
  uint64_t v84 = v27;
  if (a1 != 0x8000000000000000LL) {
    goto LABEL_24;
  }
  *(void *)((char *)v2 + v28) = 0x8000000000000000LL;
  uint64_t v30 = (void *)((char *)v2 + *(void *)(*v2 + 208LL));
  swift_beginAccess();
  uint64_t v28 = *v30;
  swift_bridgeObjectRetain();
  *uint64_t v30 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = (char **)((char *)v2 + *(void *)(*v2 + 184LL));
  swift_beginAccess();
  uint64_t v96 = *v31;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v98);
  os_unfair_recursive_lock_lock_with_options();
  v94[(void)v2] = 1;
  if (MEMORY[0x186E220A8](v28, TupleTypeMetadata2))
  {
    __int128 v2 = 0LL;
    uint64_t v93 = (char *)v19 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v92 = *(void **)(v97 + 120);
    uint64_t v91 = (_BYTE *)v92[6];
    a1 = (unint64_t)v90 + *(void *)(*v90 + 152LL);
    do
    {
      Swift::Bool IsNativeType = (uint64_t *)Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if ((IsNativeType & 1) != 0)
      {
        (*(void (**)(void *, unint64_t, uint64_t))(v10 + 16))( v19,  v28 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
        + *(void *)(v10 + 72) * (void)v2,
          TupleTypeMetadata2);
        uint64_t v32 = (char *)v2 + 1;
        if (__OFADD__(v2, 1LL)) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t v34 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v85 != 8) {
          goto LABEL_113;
        }
        *(void *)&v102[0] = v34;
        (*(void (**)(void *, __int128 *, uint64_t))(v10 + 16))(v19, v102, TupleTypeMetadata2);
        swift_unknownObjectRelease();
        uint64_t v32 = (char *)v2 + 1;
        if (__OFADD__(v2, 1LL))
        {
LABEL_23:
          __break(1u);
LABEL_24:
          uint64_t v35 = *(void *)((char *)v2 + v28);
          if (v35 != v29)
          {
            if (((v35 | a1) & 0x8000000000000000LL) == 0)
            {
              uint64_t v36 = v35 + a1;
              if (__OFADD__(v35, a1))
              {
                uint64_t v36 = 0x8000000000000000LL;
                goto LABEL_60;
              }

              if ((v36 & 0x8000000000000000LL) == 0)
              {
LABEL_60:
                *(void *)((char *)v2 + v28) = v36;
                uint64_t v22 = (void *)*v2;
                goto LABEL_61;
              }

LABEL_80:
  swift_bridgeObjectRelease();
  uint64_t v84 = Publishers._Merged.guardedBecomeTerminal()();
  MEMORY[0x1895F8858](v84);
  *(&v92 - 4) = v5;
  uint64_t v85 = v107;
  *(_OWORD *)(&v92 - 3) = *(_OWORD *)(v107 + 88);
  *(&v92 - 1) = *(void *)(v85 + 104);
  Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #5 in Publishers._Merged.request(_:));
}

uint64_t partial apply for closure #1 in Publishers._Merged.request(_:)(uint64_t a1)
{
  return closure #1 in Publishers._Merged.request(_:)(a1, v1);
}

uint64_t closure #1 in Publishers._Merged.request(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
  MEMORY[0x1895F8858](v14);
  *(&v15 - 6) = v4;
  *(_OWORD *)(&v15 - 5) = *(_OWORD *)(v3 + 88);
  *(&v15 - 3) = *(void *)(v3 + 104);
  *(&v15 - 2) = (uint64_t)v12;
  Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #1 in closure #1 in Publishers._Merged.request(_:));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v4);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void type metadata accessor for Publishers._Merged.Side()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Just<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Just.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Just.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v23[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v16 = (char *)&v23[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Just.Inner(0LL, v8, v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
  swift_allocObject();
  char v20 = Just.Inner.init(downstream:value:)((uint64_t)v16, (uint64_t)v12);
  v23[3] = v19;
  v23[4] = &protocol witness table for Just<A>.Inner<A1>;
  v23[0] = v20;
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 40))(v23, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
}

uint64_t type metadata accessor for Just.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Just.Inner);
}

uint64_t *Just.Inner.init(downstream:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = (uint64_t)v2 + *(void *)(v4 + 104);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1LL, 1LL, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, a1, v5);
  v12((uint64_t)v9, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + 80) - 8LL) + 32LL))( (uint64_t)v2 + *(void *)(*v2 + 112),  v14);
  return v2;
}

uint64_t storeEnumTagSinglePayload for Publishers._Merged.Side(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t Publishers._Merged.Side.receive(subscription:)(void *a1)
{
  return Publishers._Merged.receive(subscription:_:)(a1, *v1);
}

uint64_t Publishers._Merged.receive(subscription:_:)(void *a1, unint64_t a2)
{
  uint64_t v6 = *(os_unfair_lock_s **)(v2 + *(void *)(*(void *)v2 + 176LL));
  os_unfair_lock_lock(v6);
  if ((*(_BYTE *)(v2 + *(void *)(*(void *)v2 + 128LL)) & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v7 = v2 + *(void *)(*(void *)v2 + 160LL);
  swift_beginAccess();
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (*(void *)(*(void *)v7 + 16LL) <= a2)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    *(void *)uint64_t v7 = result;
    goto LABEL_8;
  }

  outlined init with copy of Any?( *(void *)v7 + 40 * a2 + 32,  (uint64_t)v15,  &demangling cache variable for type metadata for Subscription?);
  uint64_t v8 = v16;
  outlined destroy of CustomStringConvertible?( (uint64_t)v15,  &demangling cache variable for type metadata for Subscription?);
  if (v8)
  {
LABEL_5:
    os_unfair_lock_unlock(v6);
    uint64_t v10 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v10);
  }

  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v15);
  swift_beginAccess();
  uint64_t v3 = *(void **)v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v7 = v3;
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  if (v3[2] <= a2)
  {
    __break(1u);
  }

  else
  {
    outlined assign with take of Subscription?((uint64_t)v15, (uint64_t)&v3[5 * a2 + 4]);
    swift_endAccess();
    if (*(void *)(v2 + *(void *)(*(void *)v2 + 120LL)) == 0x8000000000000000LL) {
      unint64_t v12 = 0x8000000000000000LL;
    }
    else {
      unint64_t v12 = 1LL;
    }
    os_unfair_lock_unlock(v6);
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(v12, v13, v14);
  }

  return result;
}

uint64_t protocol witness for Subscription.request(_:) in conformance Just<A>.Inner<A1>(uint64_t a1)
{
  return Just.Inner.request(_:)(a1);
}

uint64_t Just.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  unint64_t v12 = &v19[-v11];
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1895F8858](v10);
  uint64_t v16 = &v19[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (!a1)
  {
LABEL_9:
    __break(1u);
    return result;
  }

LABEL_4:
  uint64_t v17 = (uint64_t)v1 + *(void *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v12, v17, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v16, v12, v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1LL, 1LL, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 40))(v17, v9, v5);
  swift_endAccess();
  uint64_t v18 = *(void *)(v3 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))((uint64_t)v1 + *(void *)(*v1 + 112), v4, v18);
  v19[0] = 1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 56))(v19, v4, v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v4);
}

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + *(void *)(*(void *)v1 + 152LL)));
  swift_beginAccess();
  type metadata accessor for FilterProducer.State();
}

  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }

  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }

  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }

  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }

  uint64_t v44 = v4;
  uint64_t v45 = v6;
  uint64_t v19 = v5;
  char v20 = v8;
  uint64_t v21 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 208));
  os_unfair_lock_lock(v21);
  uint64_t v22 = (char *)v2 + *(void *)(*v2 + 192LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v22, v13);
  uint64_t v24 = v51;
  uint64_t v23 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v17, 1LL, v52) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    os_unfair_lock_unlock(v21);
    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v50, v17, v23);
  uint64_t v25 = *v2;
  uint64_t v26 = *(void *)(*v2 + 224LL);
  if ((*((_BYTE *)v2 + v26) & 1) != 0)
  {
    uint64_t v27 = *(void *)(v25 + 200);
    uint64_t v28 = *(void *)((char *)v2 + v27);
    uint64_t v29 = 0x8000000000000000LL;
    if (v28 == 0x8000000000000000LL)
    {
LABEL_24:
      os_unfair_lock_unlock(v21);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v50, v23);
      return;
    }

    if (a1.rawValue == 0x8000000000000000LL) {
      goto LABEL_23;
    }
    if (((v28 | a1.rawValue) & 0x8000000000000000LL) == 0)
    {
      uint64_t v29 = v28 + a1.rawValue;
      if (!__OFADD__(v28, a1.rawValue))
      {
        if ((v29 & 0x8000000000000000LL) == 0) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }

      uint64_t v29 = 0x8000000000000000LL;
LABEL_23:
      *(void *)((char *)v2 + v27) = v29;
      goto LABEL_24;
    }

    goto LABEL_47;
  }

  uint64_t v30 = 0x8000000000000000LL;
  if (a1.rawValue != 0x8000000000000000LL)
  {
    uint64_t v31 = (void *)((char *)v2 + *(void *)(v25 + 200));
    uint64_t v38 = *v31;
    uint64_t v32 = v20;
    uint64_t v35 = v48;
    uint64_t v37 = (uint64_t)v49;
    if (*v31 == 0x8000000000000000LL)
    {
      unint64_t v33 = v19;
      uint64_t v34 = v45;
      uint64_t v36 = v47;
      goto LABEL_27;
    }

    uint64_t v36 = v47;
    if ((v38 & 0x8000000000000000LL) != 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    unint64_t v33 = v19;
    uint64_t v30 = v38 + a1.rawValue - 1;
    uint64_t v34 = v45;
    if (__OFADD__(v38, a1.rawValue - 1))
    {
      uint64_t v30 = 0x8000000000000000LL;
    }

    else if ((v30 & 0x8000000000000000LL) != 0)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }

    goto LABEL_26;
  }

  uint64_t v31 = (void *)((char *)v2 + *(void *)(v25 + 200));
  uint64_t v32 = v20;
  unint64_t v33 = v19;
  uint64_t v34 = v45;
  uint64_t v36 = v47;
  uint64_t v35 = v48;
  uint64_t v37 = (uint64_t)v49;
  if (*v31 != 0x8000000000000000LL) {
LABEL_26:
  }
    *uint64_t v31 = v30;
LABEL_27:
  *((_BYTE *)v2 + v26) = 1;
  if (v2[2])
  {
    swift_retain();
    PublishedSubject.value.getter(v37);
    swift_release();
  }

  (*(void (**)(uint64_t))(v34 + 56))(v37);
  os_unfair_lock_unlock(v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v37, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v35, 1LL, v33) == 1)
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v39(v37, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    v39((uint64_t)v35, v32);
    return;
  }

  uint64_t v40 = v46;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v46, v35, v33);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v44 + 176) + 48LL))(v40, v52);
  os_unfair_recursive_lock_unlock();
  uint64_t v42 = 0x8000000000000000LL;
  if (v41 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v21);
    if (*v31 == 0x8000000000000000LL) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

  if (v41 < 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  if (!v41)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v33);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v49, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    return;
  }

  os_unfair_lock_lock(v21);
  uint64_t v43 = *v31;
  if (*v31 == 0x8000000000000000LL)
  {
LABEL_43:
    os_unfair_lock_unlock(v21);
    goto LABEL_44;
  }

  if (((v43 | v41) & 0x8000000000000000LL) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  uint64_t v42 = v43 + v41;
  if (__OFADD__(v43, v41))
  {
    uint64_t v42 = 0x8000000000000000LL;
LABEL_42:
    *uint64_t v31 = v42;
    goto LABEL_43;
  }

  if ((v42 & 0x8000000000000000LL) == 0) {
    goto LABEL_42;
  }
LABEL_53:
  __break(1u);
}

  uint64_t v9 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v3 + 216));
  os_unfair_lock_lock(v9);
  uint64_t v10 = (char *)v1 + *(void *)(*v1 + 200LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v8, 1LL, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v11 == 1)
  {
    os_unfair_lock_unlock(v9);
    return;
  }

  unint64_t v12 = *(void *)(*v1 + 208LL);
  uint64_t v13 = *(void *)((char *)v1 + v12);
  uint64_t v14 = 0x8000000000000000LL;
  if (v13 == 0x8000000000000000LL) {
    goto LABEL_14;
  }
  if (a1.rawValue == 0x8000000000000000LL) {
    goto LABEL_13;
  }
  if (((v13 | a1.rawValue) & 0x8000000000000000LL) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v14 = v13 + a1.rawValue;
  if (!__OFADD__(v13, a1.rawValue))
  {
    if ((v14 & 0x8000000000000000LL) == 0) {
      goto LABEL_13;
    }
LABEL_20:
    __break(1u);
    return;
  }

  uint64_t v14 = 0x8000000000000000LL;
LABEL_13:
  *(void *)((char *)v1 + v12) = v14;
LABEL_14:
  os_unfair_lock_unlock(v9);
  if (v1[2])
  {
    swift_retain();
    PassthroughSubject.acknowledgeDownstreamDemand()();
    swift_release();
  }

  uint64_t v3 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 184));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *v1;
  if ((*((_BYTE *)v1 + *(void *)(*v1 + 160)) & 1) != 0 || (*((_BYTE *)v1 + *(void *)(v4 + 152)) & 1) != 0)
  {
    os_unfair_lock_unlock(v3);
    return;
  }

  uint64_t v5 = (uint64_t *)((char *)v1 + *(void *)(v4 + 128));
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*v1 + 136);
  uint64_t v8 = *(uint64_t *)((char *)v1 + v7);
  uint64_t v9 = 0x8000000000000000LL;
  if (v8 == 0x8000000000000000LL) {
    goto LABEL_15;
  }
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_14;
  }
  if ((v8 | a1) < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v9 = v8 + a1;
  if (!__OFADD__(v8, a1))
  {
    if ((v9 & 0x8000000000000000LL) == 0) {
      goto LABEL_14;
    }
LABEL_25:
    __break(1u);
    return;
  }

  uint64_t v9 = 0x8000000000000000LL;
LABEL_14:
  *(uint64_t *)((char *)v1 + v7) = v9;
LABEL_15:
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  uint64_t v10 = *(void *)(v6 + 16);
  if (v10)
  {
    uint64_t v11 = v6 + 32;
    do
    {
      outlined init with copy of Any?(v11, (uint64_t)v14, &demangling cache variable for type metadata for Subscription?);
      uint64_t v13 = v15;
      if (v15)
      {
        unint64_t v12 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(a1, v13, v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      }

      else
      {
        outlined destroy of CustomStringConvertible?( (uint64_t)v14,  &demangling cache variable for type metadata for Subscription?);
      }

      v11 += 40LL;
      --v10;
    }

    while (v10);
  }

  swift_bridgeObjectRelease();
}

  char v20 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v4 + 208));
  os_unfair_lock_lock(v20);
  uint64_t v21 = (char *)v1 + *(void *)(*v1 + 200LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v8 + 16))(v17, v21, a1);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v17, a1);
    os_unfair_lock_unlock(v20);
    return;
  }

  *(void *)(v6 - 328) = v20;
  *(void *)(v6 - 336) = v2;
  uint64_t v22 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32);
  uint64_t v23 = *(void *)(v6 - 184);
  uint64_t v24 = v18;
  uint64_t v25 = *(void *)(v6 - 176);
  v22(v23, v17, v25);
  uint64_t v26 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  *(void *)(v6 - 320) = v24;
  uint64_t v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v28 = v1;
  v27(v14, v23, v25);
  v14[v26] = 1;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v11, v14, a1);
  swift_beginAccess();
  uint64_t v29 = *(void (**)(char *, _BYTE *, uint64_t))(v8 + 40);
  v29(v21, v11, a1);
  swift_endAccess();
  uint64_t v30 = v1[2];
  if (!v30)
  {
    uint64_t v34 = *(void *)(v6 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v6 - 200) + 56LL))( v34,  1LL,  1LL,  *(void *)(v6 - 192));
    unint64_t v33 = *(void *)(v6 - 224);
    uint64_t v32 = *(void *)(v6 - 216);
    goto LABEL_11;
  }

  uint64_t v31 = v30 + *(void *)(*(void *)v30 + 120LL);
  swift_beginAccess();
  unint64_t v33 = *(void *)(v6 - 224);
  uint64_t v32 = *(void *)(v6 - 216);
  uint64_t v34 = *(void *)(v6 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v34, v31, v32);
  uint64_t v36 = *(void *)(v6 - 200);
  uint64_t v35 = *(void *)(v6 - 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1LL, v35) == 1)
  {
LABEL_11:
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 328));
    (*(void (**)(void, void))(*(void *)(v6 - 320) + 8LL))(*(void *)(v6 - 184), *(void *)(v6 - 176));
    return;
  }

  uint64_t v37 = *(void *)(v6 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v37, v34, v35);
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  v29(v21, v14, a1);
  swift_endAccess();
  uint64_t v38 = v28[2];
  v28[2] = 0LL;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 328));
  uint64_t v39 = *(void *)((char *)v28 + *(void *)(*v28 + 216LL));
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v40 = *(void *)(v6 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v40, v37, v35);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v41 = *(void *)(v6 - 240);
    uint64_t v42 = *(void *)(v6 - 288);
    uint64_t v43 = *(void *)(v6 - 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v42, v40, v43);
    uint64_t v44 = *(void *)(v6 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v44, v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v44, 0LL, 1LL, v43);
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 248) + 56LL))(v44, *(void *)(v6 - 176));
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 264) + 8LL))(v44, *(void *)(v6 - 256));
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
  }

  else
  {
    *(void *)(v6 - 216) = v39;
    uint64_t v45 = *(void *)(v6 - 304);
    unint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
    *(void *)(v6 - 208) = v38;
    BOOL v47 = *(void *)(v6 - 312);
    unint64_t v48 = *(void *)(v6 - 296);
    v46(v47, v40, v48);
    uint64_t v49 = *(void *)(v6 - 248);
    uint64_t v50 = *(void *)(v6 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, v50, v49);
    uint64_t v51 = *(void *)(v6 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v6 - 240) + 56LL))( v51,  1LL,  1LL,  *(void *)(v6 - 336));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 56))(v51, v50, v49);
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 264) + 8LL))(v51, *(void *)(v6 - 256));
    __int128 v52 = v47;
    uint64_t v38 = *(void *)(v6 - 208);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v52, v48);
  }

  os_unfair_recursive_lock_unlock();
  uint64_t v53 = *(void *)(v6 - 320);
  if (v38)
  {
    swift_retain();
    Future.disassociate(_:)((uint64_t)v28);
    swift_release_n();
  }

  (*(void (**)(void, uint64_t))(v36 + 8))(*(void *)(v6 - 232), v35);
  (*(void (**)(void, void))(v53 + 8))(*(void *)(v6 - 184), *(void *)(v6 - 176));
}

  unint64_t v12 = *(void *)(v6 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v4 + v12));
  uint64_t v13 = (uint64_t)v4 + *(void *)(*v4 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v13, (uint64_t)v26);
  if (v27)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v26);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v4 + v12));
    return;
  }

  outlined init with take of Subscription(v26, (uint64_t)v28);
  uint64_t v14 = *v4;
  uint64_t v15 = *(void *)(*v4 + 192);
  uint64_t v16 = 0x8000000000000000LL;
  if (a1 != 0x8000000000000000LL)
  {
    uint64_t v17 = *(uint64_t *)((char *)v4 + v15);
    if (v17 == 0x8000000000000000LL)
    {
LABEL_15:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v4 + *(void *)(v14 + 136), v8);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (EnumCaseMultiPayload != 1)
      {
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( &v11[*(int *)(TupleTypeMetadata2 + 48)],  AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v11, v7);
        uint64_t v16 = 1LL;
        goto LABEL_21;
      }

      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v22 = *(void *)&v11[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v16 = a1 * v22;
      if ((unsigned __int128)(a1 * (__int128)v22) >> 64 != (a1 * v22) >> 63)
      {
        uint64_t v16 = 0x8000000000000000LL;
LABEL_20:
        (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( &v11[*(int *)(TupleTypeMetadata3 + 48)],  AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v11, v7);
        goto LABEL_21;
      }

      if ((v16 & 0x8000000000000000LL) == 0) {
        goto LABEL_20;
      }
LABEL_27:
      __break(1u);
      return;
    }

    if (((v17 | a1) & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v17 + a1;
      if (__OFADD__(v17, a1))
      {
        uint64_t v18 = 0x8000000000000000LL;
LABEL_14:
        *(uint64_t *)((char *)v4 + v15) = v18;
        uint64_t v14 = *v4;
        goto LABEL_15;
      }

      if ((v18 & 0x8000000000000000LL) == 0) {
        goto LABEL_14;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 160LL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 136LL);
  swift_beginAccess();
  outlined init with copy of Any?(v4, (uint64_t)&v9, &demangling cache variable for type metadata for Subscription?);
  if (!v10)
  {
    outlined destroy of CustomStringConvertible?( (uint64_t)&v9,  &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(v3);
    return;
  }

  outlined init with take of Subscription(&v9, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t v7 = 0x8000000000000000LL;
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v1 + *(void *)(*(void *)v1 + 120LL));
  uint64_t v7 = a1 * v8;
  if ((unsigned __int128)(a1 * (__int128)v8) >> 64 == (a1 * v8) >> 63)
  {
    if ((v7 & 0x8000000000000000LL) == 0) {
      goto LABEL_10;
    }
LABEL_14:
    __break(1u);
    return;
  }

  uint64_t v7 = 0x8000000000000000LL;
LABEL_10:
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 24))(v7, v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

  uint64_t v31 = v16;
  uint64_t v34 = v18;
  unint64_t v33 = *(os_unfair_lock_t *)((char *)v1 + v3[19]);
  os_unfair_lock_lock(v33);
  uint64_t v19 = *v1;
  char v20 = *(void *)(*v1 + 192);
  uint64_t v21 = *(uint64_t *)((char *)v1 + v20);
  if (v21 == 0x8000000000000000LL) {
    goto LABEL_12;
  }
  uint64_t v22 = 0x8000000000000000LL;
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_11;
  }
  if ((v21 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v22 = v21 + a1;
  if (!__OFADD__(v21, a1))
  {
    if ((v22 & 0x8000000000000000LL) == 0) {
      goto LABEL_11;
    }
LABEL_19:
    __break(1u);
    return;
  }

  uint64_t v22 = 0x8000000000000000LL;
LABEL_11:
  *(uint64_t *)((char *)v1 + v20) = v22;
  uint64_t v19 = *v1;
LABEL_12:
  uint64_t v23 = (uint64_t)v1 + *(void *)(v19 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v23, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1LL, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    os_unfair_lock_unlock(v33);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v34, v14, v8);
    uint64_t v24 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 168));
    swift_beginAccess();
    uint64_t v25 = *v24;
    swift_getAssociatedTypeWitness();
    swift_bridgeObjectRetain();
    *uint64_t v24 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    uint64_t v26 = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v31, 1LL, 1LL, v8);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v23, v26, v9);
    swift_endAccess();
    os_unfair_lock_unlock(v33);
    os_unfair_recursive_lock_lock_with_options();
    v35[0] = v25;
    uint64_t v27 = v3[15];
    uint64_t v28 = v3[12];
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v35, v28, v27);
    swift_bridgeObjectRelease();
    uint64_t v29 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 56))(v34, v28, v27);
    os_unfair_recursive_lock_unlock();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v8);
  }

  uint64_t v22 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 176));
  os_unfair_lock_lock(v22);
  uint64_t v23 = *v2;
  uint64_t v24 = *(void *)(*v2 + 184);
  if ((*((_BYTE *)v2 + v24) & 1) != 0
    || (*((_BYTE *)v2 + *(void *)(v23 + 192)) & 1) != 0
    || (uint64_t v25 = *(void *)(v23 + 200), (*((_BYTE *)v2 + v25) & 1) != 0)
    || (*((_BYTE *)v2 + v24) = 1, *((_BYTE *)v2 + *(void *)(*v2 + 208)) != 1))
  {
    os_unfair_lock_unlock(v22);
  }

  else
  {
    *((_BYTE *)v2 + v25) = 1;
    uint64_t v32 = (uint64_t)v2 + *(void *)(*v2 + 136);
    swift_beginAccess();
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
    v26(v38, v32, v37);
    os_unfair_lock_unlock(v22);
    uint64_t v27 = v37;
    v26(v20, (uint64_t)v38, v37);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v20, 1LL, v13) == 1)
    {
      uint64_t v28 = v36;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v27);
      uint64_t v30 = v34;
      uint64_t v29 = v35;
      uint64_t v31 = v33;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v20, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, v6, v5);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      uint64_t v30 = v34;
      uint64_t v29 = v35;
      uint64_t v31 = v33;
      uint64_t v28 = v36;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v31,  1LL,  1LL,  AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 56))(v31, v6, v5);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v38, v27);
  }

  uint64_t v22 = (uint64_t)v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, v22, v10);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v17, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1LL, 1LL, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v22, v14, v10);
  swift_endAccess();
  uint64_t v23 = v30;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))((uint64_t)v1 + *(void *)(*v1 + 120), v4, v30);
  uint64_t v24 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v26, 1LL, 1LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 56))(v24, v4, v23);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v4);
}

  uint64_t v44 = v4;
  uint64_t v45 = v6;
  uint64_t v19 = v5;
  char v20 = v8;
  uint64_t v21 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 216));
  os_unfair_lock_lock(v21);
  uint64_t v22 = (char *)v2 + *(void *)(*v2 + 200LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v22, v13);
  uint64_t v24 = v51;
  uint64_t v23 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v17, 1LL, v52) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    os_unfair_lock_unlock(v21);
    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v50, v17, v23);
  uint64_t v25 = *v2;
  uint64_t v26 = *(void *)(*v2 + 232LL);
  if ((*((_BYTE *)v2 + v26) & 1) != 0)
  {
    uint64_t v27 = *(void *)(v25 + 208);
    uint64_t v28 = *(void *)((char *)v2 + v27);
    uint64_t v29 = 0x8000000000000000LL;
    if (v28 == 0x8000000000000000LL)
    {
LABEL_24:
      os_unfair_lock_unlock(v21);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v50, v23);
      return;
    }

    if (a1.rawValue == 0x8000000000000000LL) {
      goto LABEL_23;
    }
    if (((v28 | a1.rawValue) & 0x8000000000000000LL) == 0)
    {
      uint64_t v29 = v28 + a1.rawValue;
      if (!__OFADD__(v28, a1.rawValue))
      {
        if ((v29 & 0x8000000000000000LL) == 0) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }

      uint64_t v29 = 0x8000000000000000LL;
LABEL_23:
      *(void *)((char *)v2 + v27) = v29;
      goto LABEL_24;
    }

    goto LABEL_47;
  }

  uint64_t v30 = 0x8000000000000000LL;
  if (a1.rawValue != 0x8000000000000000LL)
  {
    uint64_t v31 = (void *)((char *)v2 + *(void *)(v25 + 208));
    uint64_t v38 = *v31;
    uint64_t v32 = v20;
    uint64_t v35 = v48;
    uint64_t v37 = (uint64_t)v49;
    if (*v31 == 0x8000000000000000LL)
    {
      unint64_t v33 = v19;
      uint64_t v34 = v45;
      uint64_t v36 = v47;
      goto LABEL_27;
    }

    uint64_t v36 = v47;
    if ((v38 & 0x8000000000000000LL) != 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    unint64_t v33 = v19;
    uint64_t v30 = v38 + a1.rawValue - 1;
    uint64_t v34 = v45;
    if (__OFADD__(v38, a1.rawValue - 1))
    {
      uint64_t v30 = 0x8000000000000000LL;
    }

    else if ((v30 & 0x8000000000000000LL) != 0)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }

    goto LABEL_26;
  }

  uint64_t v31 = (void *)((char *)v2 + *(void *)(v25 + 208));
  uint64_t v32 = v20;
  unint64_t v33 = v19;
  uint64_t v34 = v45;
  uint64_t v36 = v47;
  uint64_t v35 = v48;
  uint64_t v37 = (uint64_t)v49;
  if (*v31 != 0x8000000000000000LL) {
LABEL_26:
  }
    *uint64_t v31 = v30;
LABEL_27:
  *((_BYTE *)v2 + v26) = 1;
  if (v2[2])
  {
    swift_retain();
    CurrentValueSubject.value.getter(v37);
    swift_release();
  }

  (*(void (**)(uint64_t))(v34 + 56))(v37);
  os_unfair_lock_unlock(v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v37, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v35, 1LL, v33) == 1)
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v39(v37, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    v39((uint64_t)v35, v32);
    return;
  }

  uint64_t v40 = v46;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v46, v35, v33);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v44 + 184) + 48LL))(v40, v52);
  os_unfair_recursive_lock_unlock();
  uint64_t v42 = 0x8000000000000000LL;
  if (v41 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v21);
    if (*v31 == 0x8000000000000000LL) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

  if (v41 < 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  if (!v41)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v33);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v49, v32);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    return;
  }

  os_unfair_lock_lock(v21);
  uint64_t v43 = *v31;
  if (*v31 == 0x8000000000000000LL)
  {
LABEL_43:
    os_unfair_lock_unlock(v21);
    goto LABEL_44;
  }

  if (((v43 | v41) & 0x8000000000000000LL) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  uint64_t v42 = v43 + v41;
  if (__OFADD__(v43, v41))
  {
    uint64_t v42 = 0x8000000000000000LL;
LABEL_42:
    *uint64_t v31 = v42;
    goto LABEL_43;
  }

  if ((v42 & 0x8000000000000000LL) == 0) {
    goto LABEL_42;
  }
LABEL_53:
  __break(1u);
}

  uint64_t v3 = *(void *)(*v1 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v3));
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 216);
  uint64_t v6 = *(uint64_t *)((char *)v1 + v5);
  if (v6 == 0x8000000000000000LL) {
    goto LABEL_12;
  }
  uint64_t v7 = 0x8000000000000000LL;
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_11;
  }
  if ((v6 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v7 = v6 + a1;
  if (!__OFADD__(v6, a1))
  {
    if ((v7 & 0x8000000000000000LL) == 0) {
      goto LABEL_11;
    }
LABEL_19:
    __break(1u);
    return;
  }

  uint64_t v7 = 0x8000000000000000LL;
LABEL_11:
  *(uint64_t *)((char *)v1 + v5) = v7;
  uint64_t v4 = *v1;
LABEL_12:
  uint64_t v8 = (uint64_t)v1 + *(void *)(v4 + 144);
  swift_beginAccess();
  outlined init with copy of Subscription?(v8, (uint64_t)&v11);
  if (v12)
  {
    outlined init with take of Subscription(&v11, (uint64_t)v13);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(a1, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

  else
  {
    outlined destroy of Subscription?((uint64_t)&v11);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
  }

  uint64_t v11 = *(os_unfair_lock_s **)(v1 + v3[17]);
  os_unfair_lock_lock(v11);
  if (*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 152LL)) == 1)
  {
    os_unfair_lock_unlock(v11);
    unint64_t v12 = v3[13];
    uint64_t v13 = v3[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v1 + *(void *)(*(void *)v1 + 112LL), v13, v12);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v10,  1LL,  1LL,  AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 56))(v10, v13, v12);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  else
  {
    uint64_t v14 = v1 + *(void *)(*(void *)v1 + 160LL);
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus(v14, (uint64_t)v17);
    if (v18)
    {
      outlined destroy of SubscriptionStatus((uint64_t)v17);
      *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 144LL)) = 1;
      os_unfair_lock_unlock(v11);
    }

    else
    {
      outlined init with take of Subscription(v17, (uint64_t)v19);
      *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 144LL)) = 1;
      os_unfair_lock_unlock(v11);
      uint64_t v15 = v20;
      uint64_t v16 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(a1, v15, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
  }

  uint64_t v4 = *(os_unfair_lock_s **)(v1 + v3[19]);
  os_unfair_lock_lock(v4);
  uint64_t v5 = *(void **)v1;
  if (*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 136LL)) == 1)
  {
    uint64_t v15 = 1LL;
    uint64_t v16 = 0u;
    uint64_t v17 = 0u;
    uint64_t v18 = 2;
    uint64_t v6 = v1 + v5[16];
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v15, v6);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v7 = v3[13];
    uint64_t v8 = v3[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v1 + *(void *)(*(void *)v1 + 112LL), v8, v7);
    LOBYTE(v15) = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 56))(&v15, v8, v7);
    return;
  }

  uint64_t v9 = v5[18];
  uint64_t v10 = *(void *)(v1 + v9);
  uint64_t v11 = 0x8000000000000000LL;
  if (v10 == 0x8000000000000000LL) {
    goto LABEL_14;
  }
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_13;
  }
  if ((v10 | a1) < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v11 = v10 + a1;
  if (!__OFADD__(v10, a1))
  {
    if ((v11 & 0x8000000000000000LL) == 0) {
      goto LABEL_13;
    }
LABEL_21:
    __break(1u);
    return;
  }

  uint64_t v11 = 0x8000000000000000LL;
LABEL_13:
  *(void *)(v1 + v9) = v11;
  uint64_t v5 = *(void **)v1;
LABEL_14:
  unint64_t v12 = v1 + v5[16];
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)&v15);
  if (v18)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    os_unfair_lock_unlock(v4);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v15, (uint64_t)v19);
    os_unfair_lock_unlock(v4);
    uint64_t v13 = v20;
    uint64_t v14 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(a1, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }

    uint64_t v6 = *(void *)(v2 + 16);
    if (v6)
    {
      uint64_t v7 = v2 + 32;
      do
      {
        outlined init with copy of Subscription?(v7, (uint64_t)v10);
        uint64_t v9 = v11;
        if (v11)
        {
          uint64_t v8 = v12;
          __swift_project_boxed_opaque_existential_1(v10, v11);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v4, v9, v8);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
        }

        else
        {
          outlined destroy of Subscription?((uint64_t)v10);
        }

        v7 += 40LL;
        --v6;
      }

      while (v6);
    }

    goto LABEL_10;
  }

  __break(1u);
}

  uint64_t v3 = *(void *)(*(void *)v1 + 176LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  uint64_t v4 = *(void **)v1;
  if ((*(_BYTE *)(v1 + *(void *)(*(void *)v1 + 192LL)) & 1) != 0)
  {
    uint64_t v5 = v4[25];
    uint64_t v6 = *(void *)(v1 + v5);
    uint64_t v7 = 0x8000000000000000LL;
    if (v6 == 0x8000000000000000LL)
    {
LABEL_23:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      return;
    }

    if (a1 == 0x8000000000000000LL) {
      goto LABEL_22;
    }
    if (((v6 | a1) & 0x8000000000000000LL) == 0)
    {
      uint64_t v7 = v6 + a1;
      if (!__OFADD__(v6, a1))
      {
        if ((v7 & 0x8000000000000000LL) == 0) {
          goto LABEL_22;
        }
        goto LABEL_27;
      }

      uint64_t v7 = 0x8000000000000000LL;
LABEL_22:
      *(void *)(v1 + v5) = v7;
      goto LABEL_23;
    }

  os_unfair_lock_lock(v2[2]);
  uint64_t v7 = (char *)v2 + *(void *)&(*v2)[36]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, a1);
  uint64_t v8 = (char *)&loc_183B90474 + dword_183B905DC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

  os_unfair_lock_lock(v2[2]);
  uint64_t v7 = (char *)v2 + *(void *)&(*v2)[36]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, a1);
  uint64_t v8 = (char *)&loc_183B92074 + *((int *)qword_183B921D8 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 120LL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 128LL);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)&v10);
  if (v11)
  {
    outlined init with take of Subscription(&v10, (uint64_t)v12);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v13;
    uint64_t v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return;
  }

  outlined destroy of Subscription?((uint64_t)&v10);
  uint64_t v7 = *(void *)(*(void *)v1 + 136LL);
  uint64_t v8 = *(void *)(v1 + v7);
  uint64_t v9 = 0x8000000000000000LL;
  if (v8 == 0x8000000000000000LL) {
    goto LABEL_14;
  }
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_13;
  }
  if ((v8 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v9 = v8 + a1;
  if (!__OFADD__(v8, a1))
  {
    if ((v9 & 0x8000000000000000LL) == 0) {
      goto LABEL_13;
    }
LABEL_19:
    __break(1u);
    return;
  }

  uint64_t v9 = 0x8000000000000000LL;
LABEL_13:
  *(void *)(v1 + v7) = v9;
LABEL_14:
  os_unfair_lock_unlock(v3);
}

void Publishers.FlatMap.Outer.Side.receive(_:)(uint64_t a1)
{
}

void Publishers.FlatMap.Outer.receiveInner(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (uint64_t *)((char *)&v20 - v9);
  uint64_t v11 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v11);
  uint64_t v12 = *(void *)(*v2 + 160LL);
  uint64_t v13 = *(void *)((char *)v2 + v12);
  if (v13 == 0x8000000000000000LL)
  {
    os_unfair_lock_unlock(v11);
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v14 = *(void *)(*v2 + 168LL);
    *((_BYTE *)v2 + v14) = 1;
    (*(void (**)(uint64_t, void))(*(void *)(v6 + 120) + 48LL))(a1, *(void *)(v6 + 96));
    *((_BYTE *)v2 + v14) = 0;
    os_unfair_recursive_lock_unlock();
    return;
  }

  if (v13 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (!v13 || (*((_BYTE *)v2 + *(void *)(*v2 + 176LL)) & 1) != 0)
  {
    uint64_t v15 = (char *)v10 + *(int *)(TupleTypeMetadata2 + 48);
    *uint64_t v10 = a2;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( v15,  a1,  AssociatedTypeWitness);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    return;
  }

  *(void *)((char *)v2 + v12) = v13 - 1;
  os_unfair_lock_unlock(v11);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v16 = *(void *)(*v2 + 168LL);
  *((_BYTE *)v2 + v16) = 1;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v6 + 120) + 48LL))(a1, *(void *)(v6 + 96));
  *((_BYTE *)v3 + v16) = 0;
  os_unfair_recursive_lock_unlock();
  unint64_t v18 = 0x8000000000000000LL;
  if (v17 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v11);
    goto LABEL_19;
  }

  if (v17 < 0) {
    goto LABEL_22;
  }
  if (v17)
  {
    os_unfair_lock_lock(v11);
    uint64_t v19 = *(void *)((char *)v3 + v12);
    if (v19 == 0x8000000000000000LL)
    {
LABEL_20:
      os_unfair_lock_unlock(v11);
      return;
    }

    if (((v19 | v17) & 0x8000000000000000LL) == 0)
    {
      unint64_t v18 = v19 + v17;
      if (__OFADD__(v19, v17))
      {
        unint64_t v18 = 0x8000000000000000LL;
LABEL_19:
        *(void *)((char *)v3 + v12) = v18;
        goto LABEL_20;
      }

      if ((v18 & 0x8000000000000000LL) == 0) {
        goto LABEL_19;
      }
      goto LABEL_24;
    }

LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }

              BOOL v47 = v49;
LABEL_20:
              uint64_t v42 = (v48 - 1) & v48;
              uint64_t v45 = __clz(__rbit64(v48)) + (v47 << 6);
              uint64_t v38 = v47;
LABEL_16:
              unint64_t v46 = *(void *)(v37 + 56);
              *(void *)&uint64_t v68 = *(void *)(*(void *)(v37 + 48) + 8 * v45);
              outlined init with copy of Subscription(v46 + 40 * v45, (uint64_t)&v68 + 8);
              goto LABEL_35;
            }
          }
        }
      }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    uint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
    uint64_t result = swift_retain();
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v3 = v2;
    goto LABEL_35;
  }

  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v25 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v25);
    uint64_t result = Hasher._finalize()();
    unint64_t v18 = -1LL << *(_BYTE *)(v4 + 32);
    uint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1LL << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v21 = 0;
      uint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v23 = v20 == v22;
        if (v20 == v22) {
          uint64_t v20 = 0LL;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v11 + 8 * v20);
      }

      while (v24 == -1);
      uint64_t v12 = __clz(__rbit64(~v24)) + (v20 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v12) = v25;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_unknownObjectRetain();
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }

  uint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

        uint64_t v9 = (v16 - 1) & v16;
        uint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }

      uint64_t v26 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      unint64_t v18 = -1LL << *(_BYTE *)(v4 + 32);
      uint64_t v19 = result & ~v18;
      uint64_t v20 = v19 >> 6;
      if (((-1LL << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }

          uint64_t v23 = v20 == v22;
          if (v20 == v22) {
            uint64_t v20 = 0LL;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v11 + 8 * v20);
        }

        while (v24 == -1);
        uint64_t v12 = __clz(__rbit64(~v24)) + (v20 << 6);
      }

      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      *(_OWORD *)(*(void *)(v4 + 48) + 16 * v12) = v26;
      ++*(void *)(v4 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

    __break(1u);
    goto LABEL_24;
  }

  if (v11 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v11) {
    goto LABEL_12;
  }
}

    __break(1u);
    goto LABEL_24;
  }

void Publishers._Merged.Side.receive(completion:)(void *a1)
{
}

void Publishers._Merged.receive(completion:_:)(void *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 104);
  uint64_t v8 = *(void *)(*v3 + 88);
  uint64_t v33 = *(void *)(*v3 + 96);
  uint64_t v34 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = (void **)type metadata accessor for Subscribers.Completion(0LL, v8, AssociatedConformanceWitness, v10);
  uint64_t v12 = (uint64_t)*(v11 - 1);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v33 - v13;
  (*(void (**)(char *, void *, void **))(v12 + 16))((char *)&v33 - v13, a1, v11);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v14, 1LL, v8);
  uint64_t v16 = *(os_unfair_lock_s **)((char *)v3 + *(void *)(*v3 + 176));
  os_unfair_lock_lock(v16);
  uint64_t v17 = *v3;
  if (v15 == 1)
  {
    uint64_t v18 = *(void *)(v17 + 144);
    uint64_t v19 = *(uint64_t *)((char *)v3 + v18);
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
    }

    else
    {
      *(uint64_t *)((char *)v3 + v18) = v21;
      uint64_t v37 = 0LL;
      memset(v36, 0, sizeof(v36));
      uint64_t v11 = (void **)((char *)v3 + *(void *)(*v3 + 160));
      swift_beginAccess();
      a1 = *v11;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v11 = a1;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((a2 & 0x8000000000000000LL) == 0) {
          goto LABEL_5;
        }
        goto LABEL_16;
      }
    }

    a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
    *uint64_t v11 = a1;
    if ((a2 & 0x8000000000000000LL) == 0)
    {
LABEL_5:
      if (a1[2] > a2)
      {
        outlined assign with take of Subscription?((uint64_t)v36, (uint64_t)&a1[5 * a2 + 4]);
        swift_endAccess();
        uint64_t v23 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 168));
        uint64_t v24 = swift_beginAccess();
        uint64_t v35 = *v23;
        MEMORY[0x1895F8858](v24);
        uint64_t v25 = *(void *)(v6 + 80);
        *(&v33 - 4) = v25;
        *(&v33 - 3) = v8;
        uint64_t v26 = v34;
        *(&v33 - 2) = v33;
        *(&v33 - 1) = v26;
        type metadata accessor for Optional();
        uint64_t v27 = type metadata accessor for Array();
        swift_bridgeObjectRetain();
        MEMORY[0x186E22960](MEMORY[0x189618470], v27);
        LOBYTE(v23) = Sequence.allSatisfy(_:)();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
        {
          *((_BYTE *)v3 + *(void *)(*v3 + 152)) = 1;
          os_unfair_lock_unlock(v16);
          uint64_t v28 = Publishers._Merged.guardedBecomeTerminal()();
          MEMORY[0x1895F8858](v28);
          *(&v33 - 4) = v25;
          *(&v33 - 3) = v8;
          uint64_t v29 = v34;
          *(&v33 - 2) = v33;
          *(&v33 - 1) = v29;
          Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #3 in Publishers._Merged.receive(completion:_:));
        }

        else
        {
LABEL_12:
          os_unfair_lock_unlock(v16);
        }

        return;
      }

LABEL_17:
      __break(1u);
      return;
    }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 3;
  uint64_t v8 = v6 - 3;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  uint64_t v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  char v30 = *((_BYTE *)v3 + *(void *)(v17 + 128));
  os_unfair_lock_unlock(v16);
  if ((v30 & 1) == 0)
  {
    uint64_t v31 = Publishers._Merged.guardedBecomeTerminal()();
    MEMORY[0x1895F8858](v31);
    *(&v33 - 6) = *(void *)(v6 + 80);
    *(&v33 - 5) = v8;
    uint64_t v32 = v34;
    *(&v33 - 4) = v33;
    *(&v33 - 3) = v32;
    *(&v33 - 2) = (uint64_t)a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #1 in Publishers._Merged.receive(completion:_:));
  }

  (*(void (**)(char *, void **))(v12 + 8))(v14, v11);
}

  if (v17 != 0x8000000000000000LL)
  {
    if ((v17 & 0x8000000000000000LL) == 0)
    {
      if (v17)
      {
        *(void *)(v5 + v16) = v17 - 1;
        goto LABEL_20;
      }

    *((_BYTE *)v3 + *(void *)(*v3 + 192)) = v26 ^ 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v7));
    if ((v26 & 1) == 0)
    {
      os_unfair_recursive_lock_lock_with_options();
      v34[0] = v6[10];
      v34[1] = v8;
      v34[2] = v33;
      uint64_t v35 = v30;
      type metadata accessor for AbstractZip();
    }
  }

uint64_t type metadata accessor for Subscribers.Completion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Subscribers.Completion);
}

uint64_t Just.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t *Just.Inner.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 104);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 112));
  return v0;
}

BOOL partial apply for closure #3 in implicit closure #4 in Publishers._Merged.request(_:)(uint64_t a1)
{
  return partial apply for closure #3 in implicit closure #4 in Publishers._Merged.request(_:)(a1);
}

{
  uint64_t v1;
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v1 + 16) - 8LL) + 48LL))(a1, 1LL) == 1;
}

uint64_t Publishers._Merged.guardedBecomeTerminal()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v20 - v5;
  uint64_t v7 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 176));
  os_unfair_lock_lock(v7);
  *((_BYTE *)v0 + *(void *)(*v0 + 128)) = 1;
  uint64_t v8 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 160));
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v24 = 0LL;
  memset(v23, 0, sizeof(v23));
  uint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  *uint64_t v8 = specialized Array.init(repeating:count:)((uint64_t)v23, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v6, 1LL, 1LL, v2);
  uint64_t v11 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 168));
  swift_beginAccess();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = MEMORY[0x186E22090](v12, v3);
  swift_bridgeObjectRelease();
  uint64_t v14 = specialized Array.init(repeating:count:)((uint64_t)v6, v13, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *uint64_t v11 = v14;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);
  uint64_t v15 = *(void *)(v9 + 16);
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = v9 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of Any?(v16, (uint64_t)v23, &demangling cache variable for type metadata for Subscription?);
    outlined init with copy of Any?( (uint64_t)v23,  (uint64_t)v20,  &demangling cache variable for type metadata for Subscription?);
    uint64_t v17 = v21;
    if (v21)
    {
      uint64_t v18 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t))(*(void *)(v18 + 8) + 8LL))(v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }

    else
    {
      outlined destroy of CustomStringConvertible?( (uint64_t)v20,  &demangling cache variable for type metadata for Subscription?);
    }

    outlined destroy of CustomStringConvertible?( (uint64_t)v23,  &demangling cache variable for type metadata for Subscription?);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t partial apply for closure #3 in Publishers._Merged.receive(completion:_:)(uint64_t a1)
{
  return closure #3 in Publishers._Merged.receive(completion:_:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t closure #3 in Publishers._Merged.receive(completion:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Subscribers.Completion(0LL, a3, AssociatedConformanceWitness, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56LL))( (char *)&v15 - v12,  1LL,  1LL,  a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 56))(v13, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void Publishers.FlatMap.Outer.Side.receive(completion:)(uint64_t a1)
{
}

void Publishers.FlatMap.Outer.receiveInner(completion:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v59 - v8;
  uint64_t v11 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v64 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v65 = v20;
  uint64_t v66 = v19;
  (*(void (**)(char *, uint64_t))(v20 + 16))((char *)&v59 - v17, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1LL, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v18, AssociatedTypeWitness);
    uint64_t v34 = (os_unfair_lock_s *)v3[2];
    os_unfair_lock_lock(v34);
    uint64_t v35 = *(void *)(*v3 + 232LL);
    if (*((_BYTE *)v3 + v35) == 1)
    {
      os_unfair_lock_unlock(v34);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, AssociatedTypeWitness);
      return;
    }

    unint64_t v60 = v9;
    uint64_t v61 = v11;
    uint64_t v62 = v6;
    uint64_t v63 = AssociatedTypeWitness;
    *((_BYTE *)v3 + v35) = 1;
    uint64_t v36 = (void *)((char *)v3 + *(void *)(*v3 + 184LL));
    swift_beginAccess();
    unint64_t v37 = *v36;
    *uint64_t v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x18961AFE8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v34);
    int64_t v38 = 0LL;
    uint64_t v39 = *(void *)(v37 + 64);
    unint64_t v67 = v37 + 64;
    uint64_t v40 = 1LL << *(_BYTE *)(v37 + 32);
    uint64_t v41 = -1LL;
    if (v40 < 64) {
      uint64_t v41 = ~(-1LL << v40);
    }
    unint64_t v42 = v41 & v39;
    int64_t v43 = (unint64_t)(v40 + 63) >> 6;
    int64_t v59 = v43 - 1;
    while (!v42)
    {
      int64_t v47 = v38 + 1;
      if (__OFADD__(v38, 1LL))
      {
        __break(1u);
        goto LABEL_48;
      }

      if (v47 < v43)
      {
        unint64_t v48 = *(void *)(v67 + 8 * v47);
        if (v48) {
          goto LABEL_20;
        }
        int64_t v49 = v38 + 2;
        ++v38;
        if (v47 + 1 < v43)
        {
          unint64_t v48 = *(void *)(v67 + 8 * v49);
          if (v48) {
            goto LABEL_23;
          }
          int64_t v38 = v47 + 1;
          if (v47 + 2 < v43)
          {
            unint64_t v48 = *(void *)(v67 + 8 * (v47 + 2));
            if (v48)
            {
              v47 += 2LL;
              goto LABEL_20;
            }

            int64_t v49 = v47 + 3;
            int64_t v38 = v47 + 2;
            if (v47 + 3 < v43)
            {
              unint64_t v48 = *(void *)(v67 + 8 * v49);
              if (!v48)
              {
                while (1)
                {
                  int64_t v47 = v49 + 1;
                  if (__OFADD__(v49, 1LL)) {
                    break;
                  }
                  if (v47 >= v43)
                  {
                    int64_t v38 = v59;
                    goto LABEL_34;
                  }

                  unint64_t v48 = *(void *)(v67 + 8 * v47);
                  ++v49;
                  if (v48) {
                    goto LABEL_20;
                  }
                }

LABEL_49:
                __break(1u);
                return;
              }

LABEL_34:
      unint64_t v42 = 0LL;
      __int128 v69 = 0u;
      __int128 v70 = 0u;
      __int128 v68 = 0u;
LABEL_35:
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v68, (uint64_t)&v71);
      if (!v74)
      {
        swift_release();
        os_unfair_recursive_lock_lock_with_options();
        uint64_t v53 = v61;
        uint64_t v54 = v64;
        uint64_t v55 = v60;
        uint64_t v56 = v63;
        (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v64, v60, v63);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v54, 0LL, 1LL, v56);
        (*(void (**)(char *, void))(*(void *)(v62 + 120) + 56LL))(v54, *(void *)(v62 + 96));
        (*(void (**)(char *, uint64_t))(v65 + 8))(v54, v66);
        os_unfair_recursive_lock_unlock();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v56);
        return;
      }

      uint64_t v50 = v71;
      outlined init with take of Subscription(&v72, (uint64_t)&v68);
      if (v50 != a2)
      {
        uint64_t v52 = *((void *)&v69 + 1);
        uint64_t v51 = v70;
        __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
        (*(void (**)(uint64_t))(*(void *)(v51 + 8) + 8LL))(v52);
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    }

    unint64_t v44 = __clz(__rbit64(v42));
    v42 &= v42 - 1;
    unint64_t v45 = v44 | (v38 << 6);
    goto LABEL_16;
  }

  uint64_t v21 = v11;
  uint64_t v22 = v6;
  uint64_t v23 = (os_unfair_lock_s *)v3[2];
  os_unfair_lock_lock(v23);
  uint64_t v24 = (char *)v3 + *(void *)(*v3 + 184LL);
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)&v71);
  swift_endAccess();
  outlined destroy of Subscription?((uint64_t)&v71);
  uint64_t v25 = (void *)*v3;
  uint64_t v26 = *(void *)(*v3 + 232LL);
  if ((*((_BYTE *)v3 + v26) & 1) == 0 && *((_BYTE *)v3 + v25[30]) == 1)
  {
    uint64_t v27 = *(void *)(*(void *)v24 + 16LL);
    uint64_t v28 = *(void *)((char *)v3 + v25[25]);
    BOOL v29 = __OFADD__(v27, v28);
    uint64_t v30 = v27 + v28;
    if (v29)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    if (!v30)
    {
      uint64_t v31 = (void *)((char *)v3 + v25[26]);
      swift_beginAccess();
      uint64_t v71 = *v31;
      swift_getAssociatedTypeWitness();
      swift_getTupleTypeMetadata2();
      uint64_t v32 = type metadata accessor for Array();
      MEMORY[0x186E22960](MEMORY[0x189618488], v32);
      if ((Collection.isEmpty.getter() & 1) != 0)
      {
        *((_BYTE *)v3 + v26) = 1;
        os_unfair_lock_unlock(v23);
        os_unfair_recursive_lock_lock_with_options();
        uint64_t v33 = v64;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v64, 1LL, 1LL, AssociatedTypeWitness);
        (*(void (**)(char *, void))(*(void *)(v22 + 120) + 56LL))(v33, *(void *)(v22 + 96));
        (*(void (**)(char *, uint64_t))(v65 + 8))(v33, v66);
        os_unfair_recursive_lock_unlock();
        return;
      }

      uint64_t v25 = (void *)*v3;
    }
  }

  if (*(void *)((char *)v3 + v25[27]) != 0x8000000000000000LL)
  {
    swift_beginAccess();
    outlined init with copy of Any?( (uint64_t)(v3 + 3),  (uint64_t)&v68,  &demangling cache variable for type metadata for Subscription?);
    if (*((void *)&v69 + 1))
    {
      outlined init with take of Subscription(&v68, (uint64_t)&v71);
      os_unfair_lock_unlock(v23);
      uint64_t v57 = v73;
      uint64_t v58 = v74;
      __swift_project_boxed_opaque_existential_1(&v71, v73);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 24))(1LL, v57, v58);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
      return;
    }

    outlined destroy of Subscription?((uint64_t)&v68);
  }

  os_unfair_lock_unlock(v23);
}

  if ((_DWORD)v5 == v16) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v5, v32);
  }
  uint64_t v28 = (v19 + a1) & ~v18;
  if (v15 <= 0xFE)
  {
    BOOL v29 = *(unsigned __int8 *)(v28 + v11);
    if (v29 >= 2) {
      return (v29 ^ 0xFF) + 1;
    }
    else {
      return 0LL;
    }
  }

  if (v13 < 2) {
    return 0LL;
  }
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(v12 + 48))((v21 + v28) & ~v20);
  if (v30 >= 2) {
    return v30 - 1;
  }
  else {
    return 0LL;
  }
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }

    outlined init with take of Subscription((__int128 *)(*(void *)(v9 + 56) + 40 * v7), a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return result;
}

uint64_t Publishers._Merged.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t *Publishers._Merged.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1LL, -1LL);
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 184)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PublisherBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.SubscribeOn.Inner.receive(_:)(a1);
}

uint64_t Publishers.SubscribeOn.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v7);
  LODWORD(v5) = v7[40];
  outlined destroy of SubscriptionStatus((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  uint64_t result = 0LL;
  if (!(_DWORD)v5) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 120) + 48LL))(a1, *(void *)(v3 + 96));
  }
  return result;
}

uint64_t outlined init with copy of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }

  else if (v3)
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }

  return a1;
}

uint64_t outlined destroy of SubscriptionStatus(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SubscriptionStatus(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 <= 1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t type metadata instantiation function for Publishers.CombineLatest3()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata instantiation function for Publishers.DropWhile()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for SubscriberTap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t type metadata completion function for Publishers._Merged()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata instantiation function for Publishers.SubscribeOn()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Just.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.CombineLatest3<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.ReceiveOn.Inner.receive(_:)(a1);
}

uint64_t Publishers.ReceiveOn.Inner.receive(_:)(uint64_t a1)
{
  unsigned int v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 80LL);
  uint64_t v21 = *(void *)(*v1 + 104LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v8 = (char *)v20 - v7;
  uint64_t v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v10, (uint64_t)v22);
  LODWORD(v10) = v22[40];
  outlined destroy of SubscriptionStatus((uint64_t)v22);
  os_unfair_lock_unlock(v9);
  if (!(_DWORD)v10)
  {
    uint64_t v11 = *(void *)(*v1 + 152LL);
    v20[1] = (char *)v1 + *(void *)(*v1 + 144LL);
    uint64_t v12 = (char *)v1 + v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
    unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = v4;
    uint64_t v15 = v3[11];
    *((void *)v14 + 3) = v15;
    uint64_t v16 = v21;
    *((void *)v14 + 4) = v3[12];
    *((void *)v14 + 5) = v16;
    uint64_t v17 = v3[14];
    *((void *)v14 + 6) = v17;
    *((void *)v14 + 7) = v3[15];
    *((void *)v14 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], v8, AssociatedTypeWitness);
    uint64_t v18 = *(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v17 + 56);
    swift_retain();
    v18(v12, partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(_:), v14, v15, v17);
    swift_release();
  }

  return 0LL;
}

void partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(_:)()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 80LL);
  closure #1 in Publishers.ReceiveOn.Inner.receive(_:)(*(void **)(v0 + 64), v0 + ((v1 + 72) & ~v1));
}

void closure #1 in Publishers.ReceiveOn.Inner.receive(_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  __int128 v5 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v19);
  outlined init with copy of SubscriptionStatus((uint64_t)v19, (uint64_t)v17);
  unsigned int v7 = v18;
  outlined destroy of SubscriptionStatus((uint64_t)v17);
  outlined destroy of SubscriptionStatus((uint64_t)v19);
  os_unfair_lock_unlock(v5);
  if (v7 <= 1)
  {
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 120) + 48LL))(a2, *(void *)(v4 + 96));
    os_unfair_recursive_lock_unlock();
    if (v8 == 0x8000000000000000LL) {
      goto LABEL_5;
    }
    if (v8 < 0)
    {
      __break(1u);
      return;
    }

    if (v8)
    {
LABEL_5:
      os_unfair_lock_lock(v5);
      outlined init with copy of SubscriptionStatus(v6, (uint64_t)v19);
      outlined init with copy of SubscriptionStatus((uint64_t)v19, (uint64_t)v17);
      if (v18 != 1 && v18)
      {
        uint64_t v13 = 0LL;
        __int128 v11 = 0u;
        __int128 v12 = 0u;
        outlined destroy of SubscriptionStatus((uint64_t)v17);
      }

      else
      {
        outlined init with take of Subscription(v17, (uint64_t)&v11);
      }

      outlined destroy of SubscriptionStatus((uint64_t)v19);
      if (*((void *)&v12 + 1))
      {
        outlined init with take of Subscription(&v11, (uint64_t)v14);
        os_unfair_lock_unlock(v5);
        uint64_t v9 = v15;
        uint64_t v10 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      }

      else
      {
        outlined destroy of Subscription?((uint64_t)&v11);
        os_unfair_lock_unlock(v5);
      }
    }
  }

uint64_t observableObservableObjectAvailableCheck()
{
  return dyld_program_sdk_at_least();
}

void Publisher.multicast<A>(_:)(uint64_t a1)
{
}

uint64_t sub_183AE85BC()
{
  uint64_t v6 = swift_allocObject();
  swift_retain();
  Publishers.Multicast.init(upstream:createSubject:)(v4, v3, v2);
  return v6;
}

void type metadata accessor for Publishers.Multicast()
{
}

uint64_t Publishers.Multicast.__allocating_init(upstream:createSubject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  Publishers.Multicast.init(upstream:createSubject:)(a1, a2, a3);
  return v6;
}

void Publisher.multicast<A>(subject:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v10[6] = a1;
  swift_unknownObjectRetain();
  Publisher.multicast<A>(_:)((uint64_t)partial apply for closure #1 in Publisher.multicast<A>(subject:));
}

uint64_t sub_183AE86F8(uint64_t a1)
{
  return a1;
}

uint64_t Publishers.Multicast.upstream.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80LL) - 8LL) + 16LL))( a1,  v1 + *(void *)(*(void *)v1 + 112LL));
}

uint64_t Publishers.Multicast.createSubject.getter()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 120LL));
  swift_retain();
  return v1;
}

uint64_t *Publishers.Multicast.init(upstream:createSubject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 128);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 136)) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 80) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 112),  a1);
  uint64_t v10 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 120));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return v3;
}

uint64_t sub_183AE8808()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher.multicast<A>(subject:)()
{
  return swift_unknownObjectRetain();
}

uint64_t Publishers.Multicast.lazySubject.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 128));
  os_unfair_lock_lock(v2);
  uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(*v0 + 136);
  uint64_t v5 = *(uint64_t *)((char *)v0 + v4);
  if (!v5)
  {
    uint64_t v6 = (*(uint64_t (**)(void))((char *)v1 + *(void *)(v3 + 120)))();
    uint64_t v5 = v6;
    uint64_t v7 = *(uint64_t *)((char *)v1 + v4);
    if (v7)
    {
      swift_unknownObjectRetain();
      os_unfair_lock_unlock(v2);
      swift_unknownObjectRelease();
      return v7;
    }

    *(uint64_t *)((char *)v1 + v4) = v6;
  }

  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v2);
  return v5;
}

uint64_t *Publishers.Multicast.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 112));
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Publishers.Multicast.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void Publishers.Multicast.receive<A>(subscriber:)(uint64_t a1)
{
}

uint64_t sub_183AE8A14(uint64_t a1)
{
  *(void *)(v7 - 136) = Publishers.Multicast.Inner.init(_:)(v3);
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Multicast<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v7 - 136, v4, a1, v9, v10);
  swift_unknownObjectRelease();
  return swift_release();
}

void type metadata accessor for Publishers.Multicast.Inner()
{
}

char *Publishers.Multicast.Inner.__allocating_init(_:)(uint64_t a1)
{
  return Publishers.Multicast.Inner.init(_:)(a1);
}

uint64_t Publishers.Multicast.connect()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = Publishers.Multicast.lazySubject.getter();
  uint64_t v5 = Publisher.subscribe<A>(_:)(v4, v3[10], v3[11], v3[12], v3[13]);
  a1[3] = type metadata accessor for AnyCancellable();
  a1[4] = (uint64_t)&protocol witness table for AnyCancellable;
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v5;
  return result;
}

char *Publishers.Multicast.Inner.init(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  *((void *)v1 + 2) = v4;
  uint64_t v5 = &v1[*(void *)(*(void *)v1 + 144LL)];
  *((void *)v5 + 4) = 0LL;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[40] = 2;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 96) - 8LL) + 32LL))( &v1[*(void *)(*(void *)v1 + 136LL)],  a1);
  return v1;
}

char *Publishers.Multicast.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x186E22A2C](*((void *)v0 + 2), -1LL, -1LL);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 136LL)]);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 144LL)]);
  return v0;
}

uint64_t Publishers.Multicast.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void Publishers.Multicast.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 144LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }

  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

void Publishers.Multicast.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 144LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    uint64_t v5 = 1LL;
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

uint64_t Publishers.Multicast.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Multicast<A, B>.Inner<A1>;
    uint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v7);
  }

uint64_t Publishers.Multicast.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v10);
  if (v11)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v10);
    os_unfair_lock_unlock(v4);
    return 0LL;
  }

  outlined init with take of Subscription(v10, (uint64_t)v12);
  os_unfair_lock_unlock(v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 120) + 48LL))(a1, *(void *)(v3 + 96));
  uint64_t v7 = result;
  if (result == 0x8000000000000000LL) {
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000LL) == 0)
  {
    if (!result)
    {
LABEL_7:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      return 0LL;
    }

LABEL_6:
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v7, v8, v9);
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0LL, MEMORY[0x18961AFC8] + 8LL, v22, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

void Publishers.Multicast.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v7);
  int v6 = v10;
  outlined destroy of SubscriptionStatus((uint64_t)&v7);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }

  else
  {
    uint64_t v7 = 1LL;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    unsigned __int8 v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56LL))(a1, *(void *)(v3 + 96));
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Multicast<A, B>.Inner<A1>( void *a1)
{
  return Publishers.Multicast.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Multicast<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.Multicast.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Multicast<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Multicast<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for ConnectablePublisher.connect() in conformance Publishers.Multicast<A, B>@<X0>( uint64_t *a1@<X8>)
{
  return Publishers.Multicast.connect()(a1);
}

uint64_t instantiation function for generic protocol witness table for Publishers.Multicast<A, B>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Multicast<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Multicast<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Multicast<A, B>( uint64_t a1)
{
}

  ;
}

uint64_t type metadata completion function for Publishers.Multicast()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for Publishers.Multicast()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Publishers.Multicast.__allocating_init(upstream:createSubject:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t type metadata completion function for Publishers.Multicast.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t Publishers.Multicast.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v1);
  char v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v4);
  int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Multicast.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x73616369746C754DLL;
  a1[1] = 0xE900000000000074LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
  return 0x73616369746C754DLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
  return Publishers.Multicast.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Multicast<A, B>.Inner<A1>( void *a1@<X8>)
{
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Multicast<A, B>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t outlined assign with take of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static Subscriptions.empty.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  return outlined init with copy of Subscription((uint64_t)&static Subscriptions._EmptySubscription.singleton, a1);
}

void one-time initialization function for singleton()
{
  qword_18C44B428 = (uint64_t)&unk_189D222F8;
  unk_18C44B430 = &protocol witness table for Subscriptions._EmptySubscription;
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v1 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v0);
    static Subscriptions._EmptySubscription.singleton = v1;
  }

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscriptions._EmptySubscription()
{
  return 0x7974706D45LL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscriptions._EmptySubscription()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v10[1] = *v0;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscriptions._EmptySubscription( void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x7974706D45LL;
  a1[1] = 0xE500000000000000LL;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Subscriptions._EmptySubscription( void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t AnyCancellable.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 56) = 0;
  return v4;
}

uint64_t AnyCancellable.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(void *)(v2 + 64) = v5;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  *(_BYTE *)(v2 + 56) = 0;
  return v2;
}

uint64_t AnyCancellable.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  AnyCancellable.init<A>(_:)(a1, a2, a3);
  return v6;
}

uint64_t AnyCancellable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *uint64_t v7 = 0;
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(boxed_opaque_existential_1, a1, a2);
  *(_BYTE *)(v3 + 56) = 1;
  return v3;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

uint64_t AnyCancellable.deinit()
{
  return v0;
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 64);
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  outlined init with copy of AnyCancellable.Storage(v0 + 16, (uint64_t)v12);
  if (v13)
  {
    if (v13 == 1)
    {
      outlined init with take of Subscription(v12, (uint64_t)v9);
      uint64_t v7 = 0LL;
      __int128 v5 = 0u;
      __int128 v6 = 0u;
      char v8 = 2;
      swift_beginAccess();
      outlined assign with take of AnyCancellable.Storage((uint64_t)&v5, v0 + 16);
      swift_endAccess();
      os_unfair_lock_unlock(v1);
      uint64_t v2 = v10;
      uint64_t v3 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }

    else
    {
      os_unfair_lock_unlock(v1);
    }
  }

  else
  {
    __int128 v4 = v12[0];
    uint64_t v7 = 0LL;
    __int128 v5 = 0u;
    __int128 v6 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of AnyCancellable.Storage((uint64_t)&v5, v0 + 16);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    ((void (*)(void))v4)();
    *(_OWORD *)(swift_allocObject() + outlined destroy of AnyCancellable.Storage(v0 + 16) = v4;
    swift_release();
  }

uint64_t outlined destroy of AnyCancellable.Storage(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AnyCancellable.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_183AE9CE4()
{
  return swift_deallocObject();
}

void AnyCancellable.hash(into:)()
{
}

BOOL static AnyCancellable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int AnyCancellable.hashValue.getter()
{
  return Hasher._finalize()();
}

void protocol witness for Cancellable.cancel() in conformance AnyCancellable()
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyCancellable()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyCancellable()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyCancellable()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnyCancellable( void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t AnyCancellable.store<A>(in:)()
{
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t AnyCancellable.store(in:)()
{
  return swift_release();
}

uint64_t Cancellable.store<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AnyCancellable();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, a2);
  uint64_t v10 = swift_allocObject();
  AnyCancellable.init<A>(_:)((uint64_t)v9, a2, a4);
  v12[1] = v10;
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t Cancellable.store(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AnyCancellable();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  Swift::UInt v9 = swift_allocObject();
  AnyCancellable.init<A>(_:)((uint64_t)v8, a2, a3);
  specialized Set._Variant.insert(_:)(&v12, v9);
  return swift_release();
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for ObservableObjectPublisher.Conduit();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v23 = v17;
    unint64_t v18 = *(void *)(v17 + 16);
    if (*(void *)(v17 + 24) <= v18)
    {
      uint64_t v20 = v18 + 1;
      swift_retain();
      specialized _NativeSet.resize(capacity:)(v20);
      Swift::Int v19 = v23;
    }

    else
    {
      Swift::Int v19 = v17;
      swift_retain();
    }

    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
  }

  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
    {
      uint64_t v13 = *(void *)(v6 + 48);
      if (*(void *)(v13 + 8 * v12) == a2)
      {
LABEL_12:
        swift_release();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0LL;
      }

      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 8 * v12) == a2) {
          goto LABEL_12;
        }
      }
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v22 = *v2;
    Swift::Int *v2 = 0x8000000000000000LL;
    Swift::Int v16 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v12, isUniquelyReferenced_nonNull_native);
    Swift::Int *v2 = v22;
  }

  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1LL;
}

{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v23 = v17;
    unint64_t v18 = *(void *)(v17 + 16);
    if (*(void *)(v17 + 24) <= v18)
    {
      uint64_t v20 = v18 + 1;
      swift_retain();
      specialized _NativeSet.resize(capacity:)(v20);
      Swift::Int v19 = v23;
    }

    else
    {
      Swift::Int v19 = v17;
      swift_retain();
    }

    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
  }

  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
    {
      uint64_t v13 = *(void *)(v6 + 48);
      if (*(void *)(v13 + 8 * v12) == a2)
      {
LABEL_12:
        swift_release();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0LL;
      }

      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 8 * v12) == a2) {
          goto LABEL_12;
        }
      }
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v22 = *v2;
    Swift::Int *v2 = 0x8000000000000000LL;
    Swift::Int v16 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v12, isUniquelyReferenced_nonNull_native);
    Swift::Int *v2 = v22;
  }

  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1LL;
}

uint64_t type metadata accessor for AnyCancellable()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable;
  if (!lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable)
  {
    uint64_t v1 = type metadata accessor for AnyCancellable();
    unint64_t result = MEMORY[0x186E22960](&protocol conformance descriptor for AnyCancellable, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable);
  }

  return result;
}

uint64_t dispatch thunk of Cancellable.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Subscription.request(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for Subscriptions()
{
  return &type metadata for Subscriptions;
}

uint64_t method lookup function for AnyCancellable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyCancellable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AnyCancellable.__allocating_init<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t assignWithCopy for SubscriptionStatus(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else if (v5)
    {
      __int128 v8 = *a2;
      __int128 v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v9;
    }

    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }

  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }

  return a1;
}

ValueMetadata *type metadata accessor for SubscriptionStatus()
{
  return &type metadata for SubscriptionStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyCancellable.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AnyCancellable.Storage(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  if (!v1) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }

  else if (v3)
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain();
  }

  return a1;
}

uint64_t assignWithCopy for AnyCancellable.Storage(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }

    else if (!v4)
    {
      swift_release();
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else if (v5)
    {
      __int128 v8 = *a2;
      __int128 v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v9;
    }

    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain();
    }
  }

  return a1;
}

uint64_t assignWithTake for AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }

    else if (!v4)
    {
      swift_release();
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else if (v5)
    {
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }

    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SubscriptionStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for AnyCancellable.Storage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t destructiveInjectEnumTag for AnyCancellable.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyCancellable.Storage()
{
  return &type metadata for AnyCancellable.Storage;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    while (*(void *)(*(void *)(v7 + 48) + 16 * v10) != a2)
    {
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }

    swift_unknownObjectRelease();
    *(_OWORD *)a1 = *(_OWORD *)(*(void *)(*v3 + 48) + 16 * v10);
    swift_unknownObjectRetain();
    return 0LL;
  }

  else
  {
LABEL_5:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *unsigned int v3 = 0x8000000000000000LL;
    Swift::Int v13 = swift_unknownObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v13, a3, v10, isUniquelyReferenced_nonNull_native);
    *unsigned int v3 = v15;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    return 1LL;
  }

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }

    specialized _NativeSet.copyAndResize(capacity:)( v8,  &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t result = type metadata accessor for ObservableObjectPublisher.Conduit();
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }

    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_12;
        }
      }
    }
  }

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }

    specialized _NativeSet.copyAndResize(capacity:)( v8,  &demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t result = type metadata accessor for AnyCancellable();
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }

    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_12;
        }
      }
    }
  }

LABEL_13:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v15;
  }
  return result;
}

  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v15;
  }
  return result;
}

    *(void *)((char *)v1 + v24) = v26;
    Swift::Int v23 = *v1;
  }

  uint64_t v33 = (char *)v1 + *(void *)(v23 + 160);
  swift_beginAccess();
  uint64_t v34 = *(void *)(v6 - 248);
  uint64_t v35 = *(void *)(v6 - 240);
  uint64_t v36 = *(void *)(v6 - 224);
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v34, v33, v36);
  LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v6 - 232) - 8LL) + 48LL))( v34,  1LL);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
  if ((_DWORD)v33 == 1 || (unint64_t v37 = *(void *)(*v1 + 176LL), (*((_BYTE *)v1 + v37) & 1) != 0))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 312) + 8LL))(v29, a1);
  }

  else
  {
    *((_BYTE *)v1 + v37) = 1;
    int64_t v38 = v30;
    (*(void (**)(void))(v27 + 16))();
    uint64_t v39 = v28;
    (*(void (**)(uint64_t, uint64_t))(v28 + 40))(v38, v28);
    uint64_t v40 = *(void *)(*v1 + 168LL);
    *(void *)(v6 - 224) = a1;
    uint64_t v41 = (char *)v1 + v40;
    swift_beginAccess();
    *(void *)(v6 - 232) = v29;
    unint64_t v42 = *(void *)(v6 - 296);
    int64_t v43 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 16);
    unint64_t v44 = *(void *)(v6 - 288);
    unint64_t v45 = *(void *)(v6 - 280);
    v43(v44, v41, v45);
    swift_getAssociatedConformanceWitness();
    uint64_t v46 = dispatch thunk of static Comparable.>= infix(_:_:)();
    int64_t v47 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v47(v44, v45);
    if ((v46 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
      swift_retain();
      unint64_t v48 = *(void *)(v6 - 264);
      Scheduler.schedule(_:)( (uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:),  (uint64_t)v1,  v38,  v39);
      swift_release();
    }

    else
    {
      v43(v44, v41, v45);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
      swift_retain();
      unint64_t v48 = *(void *)(v6 - 264);
      Scheduler.schedule(after:_:)( v44,  (uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:),  (uint64_t)v1,  v38,  v39);
      swift_release();
      v47(v44, v45);
    }

    v47(*(void *)(v6 - 272), v45);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 200) + 8LL))(v48, v38);
    (*(void (**)(void, void))(*(void *)(v6 - 312) + 8LL))(*(void *)(v6 - 232), *(void *)(v6 - 224));
  }

  uint64_t v10 = 0x7FFFFFFF;
LABEL_17:
  uint64_t v12 = 1LL;
LABEL_18:
  if (!a2) {
    return 0LL;
  }
  if (a2 <= v10) {
    goto LABEL_36;
  }
  uint64_t v13 = v12 + v6;
  BOOL v14 = 8 * v13;
  if (v13 <= 3)
  {
    Swift::Int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      uint64_t v15 = *(_DWORD *)(a1 + v13);
      if (!v15) {
        goto LABEL_36;
      }
      goto LABEL_29;
    }

    if (v16 > 0xFF)
    {
      uint64_t v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13)) {
        goto LABEL_36;
      }
      goto LABEL_29;
    }

    if (v16 < 2)
    {
LABEL_36:
      if (v10)
      {
        if (v6 <= 3)
        {
          uint64_t v24 = ((1 << (8 * v6)) + 1) >> (8 * v6);
          if (v24 > 0xFFFC)
          {
            Swift::Int v19 = *(_DWORD *)(a1 + v6);
            uint64_t v20 = ~v19;
LABEL_46:
            uint64_t v27 = 0x7FFFFFFF;
LABEL_47:
            if (v27 > v20) {
              return -v19;
            }
            else {
              return 0LL;
            }
          }

          Swift::Int v22 = v24 + 3;
          if (v24 > 0xFC)
          {
            uint64_t v26 = *(unsigned __int16 *)(a1 + v6);
            Swift::Int v19 = v26 | 0xFFFF0000;
            uint64_t v20 = v26 ^ 0xFFFF;
            Swift::UInt v21 = 16;
          }

          else
          {
            uint64_t v25 = *(unsigned __int8 *)(a1 + v6);
            Swift::Int v19 = v25 | 0xFFFFFF00;
            uint64_t v20 = v25 ^ 0xFF;
            Swift::UInt v21 = 8;
          }
        }

        else
        {
          unint64_t v18 = *(unsigned __int8 *)(a1 + v6);
          Swift::Int v19 = v18 | 0xFFFFFF00;
          uint64_t v20 = v18 ^ 0xFF;
          Swift::UInt v21 = 8;
          Swift::Int v22 = 4;
        }

        uint64_t v27 = (1 << v21) - v22;
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_47;
        }
        goto LABEL_46;
      }

      return 0LL;
    }
  }

  uint64_t v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13)) {
    goto LABEL_36;
  }
LABEL_29:
  Swift::Int v17 = (v15 - 1) << v14;
  if ((_DWORD)v13)
  {
    __asm { BR              X12 }
  }

  return v10 + v17 + 1;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)( Swift::Int result, Swift::UInt a2, unint64_t a3, char a4)
{
  Swift::UInt v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }

  else
  {
    if (v9 > v8)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }

    specialized _NativeSet.copyAndResize(capacity:)();
  }

  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v10 + 32);
  a3 = result & ~v11;
  if (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v12 = ~v11;
    while (*(void *)(*(void *)(v10 + 48) + 16 * a3) != v7)
    {
      a3 = (a3 + 1) & v12;
      if (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
        goto LABEL_12;
      }
    }

    goto LABEL_15;
  }

LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  BOOL v14 = (Swift::UInt *)(*(void *)(v13 + 48) + 16 * a3);
  Swift::UInt *v14 = v7;
  v14[1] = a2;
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (!v16)
  {
    *(void *)(v13 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v17;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  if (v5 >= 3)
  {
    else {
      Swift::UInt v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v5 == 2 || v5 == 1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1LL, AssociatedTypeWitness);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
  return result;
}

            os_unfair_lock_unlock(v98);
            return;
          }

          uint64_t v96 = (char *)v2 + v53;
          uint64_t v93 = (char *)v2 + v52;
          uint64_t v92 = v51;
          while (2)
          {
            __int128 v69 = *(void *)((char *)v2 + v28);
            if (v69 != 0x8000000000000000LL)
            {
              if (v69 < 0) {
                goto LABEL_99;
              }
              if (!v69) {
                goto LABEL_62;
              }
            }

            swift_beginAccess();
            MEMORY[0x186E22960](MEMORY[0x189618490], v54);
            RangeReplaceableCollection.removeFirst()();
            swift_endAccess();
            __int128 v70 = *(void *)((char *)v2 + v28);
            if (v70 != 0x8000000000000000LL)
            {
              if (v70 < 0) {
                goto LABEL_100;
              }
              if (!v70)
              {
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
                goto LABEL_104;
              }

              *(void *)((char *)v2 + v28) = v70 - 1;
            }

            uint64_t v71 = v28;
            __int128 v72 = *IsNativeType;
            uint64_t v73 = (uint64_t *)v96;
            swift_beginAccess();
            uint64_t v74 = *v73;
            if (*(void *)(v74 + 16) && (v75 = specialized __RawDictionaryStorage.find<A>(_:)(v72), (v76 & 1) != 0))
            {
              outlined init with copy of Subscription(*(void *)(v74 + 56) + 40 * v75, (uint64_t)v102);
            }

            else
            {
              uint64_t v103 = 0LL;
              memset(v102, 0, sizeof(v102));
            }

            swift_endAccess();
            uint64_t v77 = v98;
            os_unfair_lock_unlock(v98);
            os_unfair_recursive_lock_lock_with_options();
            v78 = v94;
            v94[(void)v2] = 1;
            unint64_t v79 = (*(uint64_t (**)(char *, void))(*(void *)(v97 + 120) + 48LL))( (char *)IsNativeType + *(int *)(TupleTypeMetadata2 + 48),  *(void *)(v97 + 96));
            v78[(void)v2] = 0;
            os_unfair_recursive_lock_unlock();
            if (v79 == 0x8000000000000000LL)
            {
              os_unfair_lock_lock(v77);
              uint64_t v28 = v71;
              uint64_t v80 = 0x8000000000000000LL;
              if (*(void *)((char *)v2 + v71) == 0x8000000000000000LL)
              {
LABEL_94:
                os_unfair_lock_unlock(v98);
                goto LABEL_95;
              }
            }

            else
            {
              if (v79 < 0) {
                goto LABEL_102;
              }
              uint64_t v28 = v71;
              if (!v79)
              {
LABEL_95:
                outlined init with copy of Any?( (uint64_t)v102,  (uint64_t)&v104,  &demangling cache variable for type metadata for Subscription?);
                if (v105)
                {
                  outlined init with take of Subscription(&v104, (uint64_t)&v99);
                  uint64_t v63 = v91;
                  v91[(void)v2] = 1;
                  uint64_t v64 = *((void *)&v100 + 1);
                  uint64_t v65 = v101;
                  __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
                  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 24);
                  unint64_t v67 = v64;
                  uint64_t v28 = v71;
                  __int128 v68 = v65;
                  uint64_t v2 = v90;
                  v66(1LL, v67, v68);
                  v63[(void)v2] = 0;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
                }

                else
                {
                  outlined destroy of Subscription?((uint64_t)&v104);
                }

                os_unfair_lock_lock(v98);
                outlined destroy of Subscription?((uint64_t)v102);
                (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(IsNativeType, TupleTypeMetadata2);
                *(void *)&v102[0] = *v92;
                MEMORY[0x186E22960](MEMORY[0x189618488], v54);
                if ((Collection.isEmpty.getter() & 1) != 0) {
                  goto LABEL_62;
                }
                continue;
              }

              os_unfair_lock_lock(v98);
              uint64_t v81 = *(void *)((char *)v2 + v71);
              if (v81 == 0x8000000000000000LL) {
                goto LABEL_94;
              }
              if ((v81 | v79) < 0) {
                goto LABEL_105;
              }
              uint64_t v61 = __OFADD__(v81, v79);
              uint64_t v80 = v81 + v79;
              if (v61)
              {
                uint64_t v80 = 0x8000000000000000LL;
              }

              else if ((v80 & 0x8000000000000000LL) != 0)
              {
                goto LABEL_107;
              }
            }

            break;
          }

          *(void *)((char *)v2 + v28) = v80;
          goto LABEL_94;
        }
      }

      uint64_t v33 = (char *)v16 + *(int *)(TupleTypeMetadata2 + 48);
      *BOOL v16 = *v19;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v33, v93, v8);
      ((void (*)(char *, void, void *))v91)(v33, *(void *)(v97 + 96), v92);
      (*(void (**)(void *, uint64_t))(v10 + 8))(v16, TupleTypeMetadata2);
      uint64_t v2 = (void *)((char *)v2 + 1);
    }

    while (v32 != (char *)MEMORY[0x186E220A8](v28, TupleTypeMetadata2));
  }

  swift_bridgeObjectRelease();
  v94[(void)v90] = 0;
  os_unfair_recursive_lock_unlock();
  unint64_t v37 = 0LL;
  int64_t v38 = *((void *)v96 + 8);
  uint64_t v94 = v96 + 64;
  uint64_t v39 = 1LL << v96[32];
  uint64_t v40 = -1LL;
  if (v39 < 64) {
    uint64_t v40 = ~(-1LL << v39);
  }
  uint64_t v41 = v40 & v38;
  unint64_t v42 = (unint64_t)(v39 + 63) >> 6;
  uint64_t v93 = (char *)(v42 - 1);
  if ((v40 & v38) == 0) {
    goto LABEL_36;
  }
LABEL_34:
  unint64_t v45 = __clz(__rbit64(v41));
  v41 &= v41 - 1;
  uint64_t v46 = v45 | (v37 << 6);
  while (2)
  {
    int64_t v47 = *((void *)v96 + 7);
    *(void *)&v99 = *(void *)(*((void *)v96 + 6) + 8 * v46);
    outlined init with copy of Subscription(v47 + 40 * v46, (uint64_t)&v99 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v99, (uint64_t)v102);
      if (!v103)
      {
        swift_release();
        os_unfair_lock_lock(v98);
        uint64_t v2 = v90;
        goto LABEL_62;
      }

      outlined init with take of Subscription((__int128 *)((char *)v102 + 8), (uint64_t)&v99);
      int64_t v43 = *((void *)&v100 + 1);
      unint64_t v44 = v101;
      __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v44 + 24))(0x8000000000000000LL, v43, v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
      if (v41) {
        goto LABEL_34;
      }
LABEL_36:
      unint64_t v48 = v37 + 1;
      if (__OFADD__(v37, 1LL))
      {
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }

      if (v48 < v42)
      {
        int64_t v49 = *(void *)&v94[8 * v48];
        if (v49) {
          goto LABEL_39;
        }
        uint64_t v50 = v37 + 2;
        ++v37;
        if (v48 + 1 < v42)
        {
          int64_t v49 = *(void *)&v94[8 * v50];
          if (v49) {
            goto LABEL_42;
          }
          unint64_t v37 = v48 + 1;
          if (v48 + 2 < v42)
          {
            int64_t v49 = *(void *)&v94[8 * v48 + 16];
            if (v49)
            {
              v48 += 2LL;
              goto LABEL_39;
            }

            uint64_t v50 = v48 + 3;
            unint64_t v37 = v48 + 2;
            if (v48 + 3 < v42) {
              break;
            }
          }
        }
      }

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unsigned int v3 = v6;
    return result;
  }

  int64_t v7 = 0LL;
  uint64_t v8 = v4 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v17 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

LABEL_37:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if ((_DWORD)result)
  {
    if (v9 == (_DWORD)result)
    {
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
      unint64_t v42 = a1;
      char v24 = *(unsigned int *)(v8 + 84);
      unint64_t v25 = v6;
      return v41(v42, v24, v25);
    }

    int64_t v43 = *(unsigned __int8 *)(v17 + 80);
    unint64_t v44 = v19;
    unint64_t v45 = (v63 + a1) & ~v62;
    if ((_DWORD)v11 != (_DWORD)result)
    {
      if (v16 == (_DWORD)result)
      {
        uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
        unint64_t v42 = (v45 + v60 + v61) & ~v61;
        char v24 = *(unsigned int *)(v15 + 84);
        unint64_t v25 = v13;
      }

      else
      {
        uint64_t v46 = ((v45 + v60 + v61) & ~v61) + v59 + v33;
        if (v18 == (_DWORD)result)
        {
          uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
          unint64_t v42 = v46 & ~v43;
          char v24 = *(unsigned int *)(v17 + 84);
          unint64_t v25 = v51;
        }

        else
        {
          int64_t v47 = (v58 + (v46 & ~v43)) & ~v32;
          if (v22 == (_DWORD)result)
          {
            uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
            unint64_t v42 = v47;
            char v24 = *(unsigned int *)(v21 + 84);
            unint64_t v25 = v50;
          }

          else
          {
            unint64_t v48 = (v56 + v47) & ~v57;
            if ((_DWORD)v24 == (_DWORD)result)
            {
              uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
              unint64_t v42 = (v56 + v47) & ~v57;
              unint64_t v25 = v44;
            }

            else if (v28 == (_DWORD)result)
            {
              uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
              unint64_t v42 = (v54 + v48) & ~v55;
              char v24 = *(unsigned int *)(v27 + 84);
            }

            else
            {
              unint64_t v42 = (v52 + ((v54 + v48) & ~v55)) & ~v53;
              uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
              char v24 = *(unsigned int *)(v29 + 84);
              unint64_t v25 = v49;
            }
          }
        }
      }

      return v41(v42, v24, v25);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))((v63 + a1) & ~v62, v11, v7);
  }

  return result;
}

    *(_DWORD *)(a1 + v7) = v14;
    return a1;
  }

  unint64_t v11 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
  if (v7 <= 3)
  {
    int64_t v12 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v12 > 0xFFFC)
    {
      unint64_t v14 = 2;
      goto LABEL_37;
    }

    if (v12 > 0xFC)
    {
      LOWORD(v14) = 2;
      goto LABEL_40;
    }
  }

  *(_BYTE *)(a1 + v7) = 2;
  return a1;
}

    *(_DWORD *)((char *)a1 + v7) = v14;
    return a1;
  }

  unint64_t v11 = a2[1];
  *a1 = *a2;
  a1[1] = v11;
  *((void *)a1 + 4) = *((void *)a2 + 4);
  if (v7 <= 3)
  {
    int64_t v12 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v12 > 0xFFFC)
    {
      unint64_t v14 = 2;
      goto LABEL_37;
    }

    if (v12 > 0xFC)
    {
      LOWORD(v14) = 2;
      goto LABEL_40;
    }
  }

  *((_BYTE *)a1 + v7) = 2;
  return a1;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  unsigned int v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unsigned int v1 = v4;
    return result;
  }

  int64_t v5 = 0LL;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }

    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }

void *type metadata accessor for Subscriptions._EmptySubscription()
{
  return &unk_189D222F8;
}

void Publisher.subscribe<A>(on:options:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  unint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v12);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  unint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v7, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v23, v10);
  Publishers.SubscribeOn.init(upstream:scheduler:options:)((uint64_t)v20, a3, v24);
}

  ;
}

void Publishers.SubscribeOn.init(upstream:scheduler:options:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_183AEB700(uint64_t a1)
{
  uint64_t v6 = v4 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, v1, v7);
}

void type metadata accessor for Publishers.SubscribeOn()
{
}

uint64_t Publishers.SubscribeOn.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.SubscribeOn.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.SubscribeOn.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t Publishers.SubscribeOn.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v43 = a3;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v47 = a4;
  uint64_t v48 = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v45 = a1;
  uint64_t v46 = v8;
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v38 = v11;
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64LL);
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v39 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = *(void *)(v15 + 40);
  uint64_t v16 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v40 = v17;
  uint64_t v41 = v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v44 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v23, v5 + *(int *)(a2 + 52), v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v5 + *(int *)(a2 + 56), v17);
  uint64_t v25 = v14;
  uint64_t v37 = v14;
  BOOL v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v27 = v39;
  v26(v39, v5, a2);
  uint64_t v28 = v48;
  uint64_t v29 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v11, v45, v43);
  unint64_t v30 = (*(unsigned __int8 *)(v25 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v31 = (v13 + *(unsigned __int8 *)(v28 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v32 = (char *)swift_allocObject();
  *((void *)v32 + 2) = *(void *)(a2 + 16);
  *((void *)v32 + 3) = v16;
  uint64_t v33 = *(void *)(a2 + 32);
  *((void *)v32 + 4) = v29;
  *((void *)v32 + 5) = v33;
  uint64_t v34 = v42;
  uint64_t v35 = v47;
  *((void *)v32 + 6) = v42;
  *((void *)v32 + 7) = v35;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v32[v30], v27, a2);
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v32[v31], v38, v29);
  (*(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v34 + 56))( v21,  partial apply for closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:),  v32,  v16,  v34);
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v23, v16);
}

void closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v18[2] = a2;
  void v18[5] = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  v18[3] = *(void *)(v14 - 8);
  v18[4] = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  v18[1] = (char *)v18 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  MEMORY[0x1895F8858](v17);
  v18[0] = a3;
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = a5;
  v18[9] = a6;
  v18[10] = a7;
  v18[11] = a8;
  type metadata accessor for Publishers.SubscribeOn.Inner();
}

void sub_183AEBBCC()
{
  *(void *)(v7 - 128) = v2;
  *(void *)(v7 - 120) = v1;
  *(void *)(v7 - 112) = v6;
  *(void *)(v7 - 104) = v3;
  type metadata accessor for Publishers.SubscribeOn();
}

uint64_t sub_183AEBBF8(uint64_t a1)
{
  uint64_t v9 = *(void *)(v7 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v9 + *(int *)(a1 + 52), v2);
  uint64_t v10 = *(void *)(v7 - 168);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v7 - 152) + 16LL))( v10,  v9 + *(int *)(a1 + 56),  *(void *)(v7 - 144));
  swift_allocObject();
  *(void *)(v7 - 128) = Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(v1, v5, v10);
  uint64_t v11 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.SubscribeOn<A, B>.Inner<A1>, v4);
  Publisher.subscribe<A>(_:)(v7 - 128, *(void *)(v7 - 176), v4, v6, v11);
  return swift_release();
}

void sub_183AEBCB4()
{
}

uint64_t sub_183AEBCF4(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(void *)(v6 + 64);
  uint64_t v15 = v1;
  uint64_t v8 = *(void *)(v1 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2 + v7, v3);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2 + v7 + *(int *)(a1 + 52), v4);
  unint64_t v10 = v2 + v7 + *(int *)(a1 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v2 + ((v7 + v14 + v9) & ~v9), v15);
  return swift_deallocObject();
}

void partial apply for closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)()
{
}

void sub_183AEBE40(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL);
  closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)( v2 + v9,  v2 + ((v9 + *(void *)(v8 + 64) + v10) & ~v10),  v1,  v3,  v4,  v5,  v6,  v7);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.SubscribeOn<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

char *Publishers.SubscribeOn.Inner.__allocating_init(_:scheduler:options:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(a1, a2, a3);
}

char *Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *uint64_t v8 = 0;
  *((void *)v3 + 2) = v8;
  unint64_t v9 = &v3[*(void *)(*(void *)v3 + 160LL)];
  *((void *)v9 + 4) = 0LL;
  *(_OWORD *)unint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[40] = 2;
  uint64_t v10 = *(void *)(*(void *)v3 + 168LL);
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(void *)&v3[v10] = v11;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8LL) + 32LL))( &v3[*(void *)(*(void *)v3 + 136LL)],  a1);
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v7 + 88) - 8LL) + 32LL))( &v3[*(void *)(*(void *)v3 + 144LL)],  a2,  *(void *)(v7 + 88));
  uint64_t v12 = &v3[*(void *)(*(void *)v3 + 152LL)];
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a3, v13);
  return v3;
}

char *Publishers.SubscribeOn.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x186E22A2C](*((void *)v0 + 2), -1LL, -1LL);
  MEMORY[0x186E22A2C](*(void *)&v0[*(void *)(*(void *)v0 + 168LL)], -1LL, -1LL);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 136LL)]);
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))( &v0[*(void *)(*(void *)v0 + 144LL)],  *(void *)(v1 + 88));
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 152LL)];
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 160LL)]);
  return v0;
}

uint64_t Publishers.SubscribeOn.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void Publishers.SubscribeOn.Inner.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  uint64_t v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v2 + *(void *)(*v2 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v13);
  if (v14)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v13);
    os_unfair_lock_unlock(v5);
  }

  else
  {
    outlined init with take of Subscription(v13, (uint64_t)v15);
    os_unfair_lock_unlock(v5);
    uint64_t v7 = (char *)v2 + *(void *)(*v2 + 152LL);
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of Subscription((uint64_t)v15, (uint64_t)v13);
    unint64_t v9 = (void *)swift_allocObject();
    v9[2] = v4[10];
    uint64_t v10 = v4[11];
    void v9[3] = v10;
    v9[4] = v4[12];
    v9[5] = v4[13];
    uint64_t v11 = v4[14];
    v9[6] = v11;
    v9[7] = v4[15];
    v9[8] = v8;
    outlined init with take of Subscription(v13, (uint64_t)(v9 + 9));
    v9[14] = a1;
    uint64_t v12 = *(void (**)(char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v11 + 56);
    swift_retain();
    v12(v7, partial apply for closure #1 in Publishers.SubscribeOn.Inner.request(_:), v9, v10, v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    swift_release();
  }

uint64_t closure #1 in Publishers.SubscribeOn.Inner.request(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = *(os_unfair_lock_s **)(result + *(void *)(*(void *)result + 168LL));
    os_unfair_lock_lock(v6);
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(a3, v7, v8);
    os_unfair_lock_unlock(v6);
    return swift_release();
  }

  return result;
}

void Publishers.SubscribeOn.Inner.cancel()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)&v10);
  if (v13)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v2);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v10, (uint64_t)v14);
    uint64_t v10 = 1LL;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    char v13 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v3);
    swift_endAccess();
    os_unfair_lock_unlock(v2);
    uint64_t v4 = (char *)v0 + *(void *)(*v0 + 152LL);
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of Subscription((uint64_t)v14, (uint64_t)&v10);
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = v1[10];
    uint64_t v7 = v1[11];
    void v6[3] = v7;
    v6[4] = v1[12];
    v6[5] = v1[13];
    uint64_t v8 = v1[14];
    v6[6] = v8;
    v6[7] = v1[15];
    v6[8] = v5;
    outlined init with take of Subscription((__int128 *)&v10, (uint64_t)(v6 + 9));
    unint64_t v9 = *(void (**)(char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v8 + 56);
    swift_retain();
    v9(v4, partial apply for closure #1 in Publishers.SubscribeOn.Inner.cancel(), v6, v7, v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_release();
  }

uint64_t closure #1 in Publishers.SubscribeOn.Inner.cancel()(uint64_t a1, void *a2)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(os_unfair_lock_s **)(result + *(void *)(*(void *)result + 168LL));
    os_unfair_lock_lock(v4);
    uint64_t v5 = a2[3];
    uint64_t v6 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v5);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v5);
    os_unfair_lock_unlock(v4);
    return swift_release();
  }

  return result;
}

uint64_t Publishers.SubscribeOn.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.SubscribeOn<A, B>.Inner<A1>;
    char v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    __int128 v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v7);
  }

void Publishers.SubscribeOn.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v7);
  int v6 = v10;
  outlined destroy of SubscriptionStatus((uint64_t)&v7);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }

  else
  {
    uint64_t v7 = 1LL;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    unsigned __int8 v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56LL))(a1, *(void *)(v3 + 96));
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>( void *a1)
{
  return Publishers.SubscribeOn.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SubscribeOn<A, B>.Inner<A1>()
{
  return 0x6269726373627553LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.SubscribeOn<A, B>.Inner<A1>( void *a1@<X8>)
{
}

void Publishers.SubscribeOn.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x6269726373627553LL;
  a1[1] = 0xEB000000006E4F65LL;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.SubscribeOn<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SubscribeOn<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.SubscribeOn.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata completion function for Publishers.SubscribeOn()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SubscribeOn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v3 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v5 + 64) + v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11;
  uint64_t v13 = v9 + v11;
  size_t v14 = *(void *)(v10 + 64);
  if (!*(_DWORD *)(v10 + 84)) {
    ++v14;
  }
  int v15 = v7 | *(_DWORD *)(v5 + 80) | v11;
  uint64_t v16 = (v7 | *(_BYTE *)(v5 + 80) | v11);
  int v17 = v15 & 0x100000;
  if (v16 <= 7
    && v14 + ((v13 + (v8 & ~(unint64_t)v7)) & ~v12) <= 0x18
    && v17 == 0)
  {
    size_t __n = v14;
    unint64_t v22 = ~(unint64_t)v7;
    uint64_t v23 = ~v12;
    uint64_t v24 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    uint64_t v21 = a1;
    v24(a1, a2, v4);
    unint64_t v25 = ((unint64_t)a1 + v8) & v22;
    unint64_t v26 = ((unint64_t)a2 + v8) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v25, v26, v3);
    uint64_t v27 = (void *)((v25 + v13) & v23);
    uint64_t v28 = (const void *)((v26 + v13) & v23);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v28, 1LL, AssociatedTypeWitness))
    {
      memcpy(v27, v28, __n);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v27, v28, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0LL, 1LL, AssociatedTypeWitness);
    }
  }

  else
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    uint64_t v21 = (uint64_t *)(v20 + ((v16 + 16) & ~v16));
    swift_retain();
  }

  return v21;
}

uint64_t destroy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8LL);
  unint64_t v6 = (*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, void))(v5 + 8))(v6, *(void *)(a2 + 24));
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1LL, AssociatedTypeWitness);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))(v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v10, v11, *(void *)(a3 + 24));
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  int v17 = (void *)((v12 + v15 + v10) & ~v15);
  uint64_t v18 = (const void *)((v16 + v11) & ~v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v18, 1LL, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v14 + 84)) {
      size_t v19 = *(void *)(v14 + 64);
    }
    else {
      size_t v19 = *(void *)(v14 + 64) + 1LL;
    }
    memcpy(v17, v18, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0LL, 1LL, AssociatedTypeWitness);
  }

  return a1;
}

uint64_t assignWithCopy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 24))(v10, v11, *(void *)(a3 + 24));
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (void *)((v12 + v15 + v10) & ~v15);
  int v17 = (void *)((v12 + v15 + v11) & ~v15);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v10) = v18(v16, 1LL, AssociatedTypeWitness);
  int v19 = v18(v17, 1LL, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0LL, 1LL, AssociatedTypeWitness);
      return a1;
    }
  }

  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v16, v17, AssociatedTypeWitness);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }

  if (*(_DWORD *)(v14 + 84)) {
    size_t v20 = *(void *)(v14 + 64);
  }
  else {
    size_t v20 = *(void *)(v14 + 64) + 1LL;
  }
  memcpy(v16, v17, v20);
  return a1;
}

uint64_t initializeWithTake for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 32))(v10, v11, *(void *)(a3 + 24));
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  int v17 = (void *)((v12 + v15 + v10) & ~v15);
  uint64_t v18 = (const void *)((v16 + v11) & ~v15);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v18, 1LL, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v14 + 84)) {
      size_t v19 = *(void *)(v14 + 64);
    }
    else {
      size_t v19 = *(void *)(v14 + 64) + 1LL;
    }
    memcpy(v17, v18, v19);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0LL, 1LL, AssociatedTypeWitness);
  }

  return a1;
}

uint64_t assignWithTake for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 40))(v10, v11, *(void *)(a3 + 24));
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (void *)((v12 + v15 + v10) & ~v15);
  int v17 = (void *)((v12 + v15 + v11) & ~v15);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v10) = v18(v16, 1LL, AssociatedTypeWitness);
  int v19 = v18(v17, 1LL, AssociatedTypeWitness);
  if ((_DWORD)v10)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0LL, 1LL, AssociatedTypeWitness);
      return a1;
    }
  }

  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v16, v17, AssociatedTypeWitness);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }

  if (*(_DWORD *)(v14 + 84)) {
    size_t v20 = *(void *)(v14 + 64);
  }
  else {
    size_t v20 = *(void *)(v14 + 64) + 1LL;
  }
  memcpy(v16, v17, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.SubscribeOn(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v13 = *(_DWORD *)(v12 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v11) {
    unsigned int v14 = v11;
  }
  if (v13) {
    uint64_t v15 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v12 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = *(void *)(v7 + 64) + v16;
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v14) {
    goto LABEL_30;
  }
  uint64_t v20 = v15 + ((v18 + v19 + (v17 & ~v16)) & ~v19);
  char v21 = 8 * v20;
  unsigned int v23 = ((a2 - v14 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v23))
  {
    int v22 = *(_DWORD *)(a1 + v20);
    if (!v22) {
      goto LABEL_30;
    }
    goto LABEL_21;
  }

  if (v23 > 0xFF)
  {
    int v22 = *(unsigned __int16 *)(a1 + v20);
    if (!*(_WORD *)(a1 + v20)) {
      goto LABEL_30;
    }
    goto LABEL_21;
  }

  if (v23 >= 2)
  {
LABEL_14:
    int v22 = *(unsigned __int8 *)(a1 + v20);
    if (!*(_BYTE *)(a1 + v20)) {
      goto LABEL_30;
    }
LABEL_21:
    int v24 = (v22 - 1) << v21;
    if ((_DWORD)v20)
    {
      else {
        int v25 = 4;
      }
      __asm { BR              X12 }
    }

    return v14 + v24 + 1;
  }

void storeEnumTagSinglePayload for Publishers.SubscribeOn( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v7 + 84)) {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  unsigned int v10 = 0u;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v12 = *(_DWORD *)(v11 + 84);
  unsigned int v13 = v12 - 1;
  if (!v12) {
    unsigned int v13 = 0;
  }
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  if (v12) {
    uint64_t v19 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v11 + 64) + 1LL;
  }
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v16 = *(void *)(v7 + 64) + v15;
  unsigned int v20 = ((v17 + v18 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v18) + v19;
  if (a3 > v14)
  {
    if (v20 > 3)
    {
      unsigned int v10 = 1u;
      if (v14 >= a2) {
LABEL_28:
      }
        __asm { BR              X0 }

LABEL_21:
      unsigned int v22 = ~v14 + a2;
      if (v20 < 4)
      {
        if (v20)
        {
          int v23 = v22 & ~(-1 << (8 * v20));
          bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
          if (v20 == 3)
          {
            *(_WORD *)a1 = v23;
            a1[2] = BYTE2(v23);
          }

          else if (v20 == 2)
          {
            *(_WORD *)a1 = v23;
          }

          else
          {
            *a1 = v23;
          }
        }
      }

      else
      {
        bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
        *(_DWORD *)a1 = v22;
      }

      __asm { BR              X10 }
    }

    unsigned int v21 = ((a3 - v14 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      unsigned int v10 = 4u;
      if (v14 >= a2) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

    if (v21 >= 0x100) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = v21 > 1;
    }
  }

  if (v14 >= a2) {
    goto LABEL_28;
  }
  goto LABEL_21;
}

    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    return a1;
  }

  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }

  unsigned int v20 = v18[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    return a1;
  }

  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }

  unsigned int v20 = v18[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  swift_release();
  return a1;
}

    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_22;
  }

  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }

  unsigned int v20 = v18[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  swift_retain();
  swift_release();
LABEL_22:
  *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_22;
  }

  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }

  unsigned int v20 = v18[1];
  *uint64_t v17 = v19;
  v17[1] = v20;
  swift_release();
LABEL_22:
  *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }

      unsigned int v20 = *(void *)(v5 + 48) + 16 * v16;
      if ((a2 & 1) != 0)
      {
        outlined init with take of ObservableObjectTable.Storage(v20, (uint64_t)v32);
        unsigned int v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      }

      else
      {
        outlined init with copy of ObservableObjectTable.Storage(v20, (uint64_t)v32);
        unsigned int v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
        swift_retain();
      }

      Hasher.init(_seed:)();
      Hasher._combine(_:)(v33);
      uint64_t result = Hasher._finalize()();
      unsigned int v22 = -1LL << *(_BYTE *)(v7 + 32);
      int v23 = result & ~v22;
      int v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unsigned int v14 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            int v24 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }

        while (v28 == -1);
        unsigned int v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t result = outlined init with take of ObservableObjectTable.Storage((uint64_t)v32, *(void *)(v7 + 48) + 16 * v14);
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }

      unsigned int v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      unsigned int v21 = (__int128 *)(*(void *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0) {
        outlined init with take of Subscription(v21, (uint64_t)v31);
      }
      else {
        outlined init with copy of Subscription((uint64_t)v21, (uint64_t)v31);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unsigned int v22 = -1LL << *(_BYTE *)(v7 + 32);
      int v23 = result & ~v22;
      int v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unsigned int v14 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            int v24 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }

        while (v28 == -1);
        unsigned int v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = outlined init with take of Subscription(v31, *(void *)(v7 + 56) + 40 * v14);
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

      __asm { BR              X11 }
    }

    if (v13 >= 0x100) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = v13 > 1;
    }
  }

  if (v9 < a2) {
    goto LABEL_14;
  }
  goto LABEL_21;
}

      __break(1u);
      return result;
    }

      unsigned int v22 = ~v14 + a2;
      if (v20 < 4)
      {
        if (v20)
        {
          int v23 = v22 & ~(-1 << (8 * v20));
          bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
          if (v20 == 3)
          {
            *(_WORD *)a1 = v23;
            a1[2] = BYTE2(v23);
          }

          else if (v20 == 2)
          {
            *(_WORD *)a1 = v23;
          }

          else
          {
            *a1 = v23;
          }
        }
      }

      else
      {
        bzero(a1, ((v17 + v18 + (v16 & ~v15)) & ~v18) + v19);
        *(_DWORD *)a1 = v22;
      }

      __asm { BR              X10 }
    }

    unsigned int v21 = ((a3 - v14 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      unsigned int v10 = 4u;
      if (v14 >= a2) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

    if (v21 >= 0x100) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = v21 > 1;
    }
  }

  if (v14 >= a2) {
    goto LABEL_28;
  }
  goto LABEL_21;
}

      __asm { BR              X11 }
    }

    if (v13 >= 0x100) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = v13 > 1;
    }
  }

  if (v9 < a2) {
    goto LABEL_14;
  }
  goto LABEL_21;
}

void sub_183AED6D4()
{
  *(_BYTE *)(v2 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v0;
}

void sub_183AED6DC()
{
  *(_WORD *)(v2 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v0;
}

void sub_183AED734()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_183AED744()
{
  *uint64_t v0 = v1;
}

void sub_183AED74C()
{
  *uint64_t v0 = v1;
}

uint64_t type metadata completion function for Publishers.SubscribeOn.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }

  return v0;
}

void type metadata accessor for Publishers.SubscribeOn.Inner()
{
}

uint64_t sub_183AED860()
{
  return swift_deallocObject();
}

uint64_t sub_183AED884()
{
  return objectdestroy_5Tm();
}

uint64_t partial apply for closure #1 in Publishers.SubscribeOn.Inner.request(_:)()
{
  return closure #1 in Publishers.SubscribeOn.Inner.request(_:)(v0[8], v0 + 9, v0[14]);
}

uint64_t sub_183AED8C4()
{
  return objectdestroy_5Tm();
}

uint64_t objectdestroy_5Tm()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.SubscribeOn.Inner.cancel()()
{
  return closure #1 in Publishers.SubscribeOn.Inner.cancel()(*(void *)(v0 + 64), (void *)(v0 + 72));
}

uint64_t type metadata completion function for FilterProducer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t FilterProducer.description.getter()
{
  return 0x72507265746C6946LL;
}

void FilterProducer.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + outlined destroy of AnyCancellable.Storage(v0 + 16) = xmmword_183B9D5B0;
  *(void *)(v6 + 32) = 0x657274736E776F64LL;
  *(void *)(v6 + 40) = 0xEA00000000006D61LL;
  uint64_t v7 = (char *)v0 + *(void *)(v1 + 144);
  uint64_t v8 = *(void *)(v1 + 80);
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(boxed_opaque_existential_1, v7, v8);
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v5, 1LL, 1LL, v10);
  uint64_t v11 = v8;
  __int128 v12 = *(_OWORD *)(v1 + 88);
  __int128 v13 = *(_OWORD *)(v1 + 104);
  __int128 v14 = *(_OWORD *)(v1 + 120);
  type metadata accessor for FilterProducer();
}

uint64_t sub_183AEDB38()
{
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t FilterProducer.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 168LL))();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t *FilterProducer.init(downstream:filter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 152);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *uint64_t v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  uint64_t v8 = (uint64_t)v2 + *(void *)(*v2 + 160);
  *(void *)(v8 + 32) = 0LL;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0u;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 80) - 8LL) + 32LL))( (uint64_t)v2 + *(void *)(*v2 + 144),  a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 112) - 8LL) + 32LL))( (uint64_t)v2 + *(void *)(*v2 + 136),  a2);
  return v2;
}

void FilterProducer.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1LL, -1LL);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 112) - 8LL) + 8LL))( (uint64_t)v0 + *(void *)(*v0 + 136),  *(void *)(v1 + 112));
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))( (uint64_t)v0 + *(void *)(*v0 + 144),  *(void *)(v1 + 80));
  type metadata accessor for FilterProducer.State();
}

uint64_t sub_183AEDD08(uint64_t a1)
{
  return v1;
}

void FilterProducer.__deallocating_deinit()
{
}

uint64_t sub_183AEDD44()
{
  return swift_deallocClassInstance();
}

void type metadata accessor for FilterProducer()
{
}

void FilterProducer.receive(newValue:)()
{
}

Swift::Void __swiftcall FilterProducer.cancel()()
{
}

uint64_t sub_183AEDE34(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 - 8);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v4 + 16))(&v11, v2, a1);
  if (v12 >= 2)
  {
    outlined init with take of Subscription(&v11, (uint64_t)v9);
    memset(v7, 0, sizeof(v7));
    __int128 v8 = xmmword_183B9D5C0;
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 40))(v2, v7, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    __int128 v6 = v10;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL) + 8LL))(v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
    __int128 v10 = xmmword_183B9D5C0;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v4 + 40))(v2, v9, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    return (*(uint64_t (**)(__int128 *, uint64_t))(v4 + 8))(&v11, a1);
  }

Swift::Void __swiftcall FilterProducer.request(_:)(Combine::Subscribers::Demand a1)
{
  if (a1.rawValue != 0x8000000000000000LL)
  {
    if ((a1.rawValue & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (a1.rawValue)
    {
      goto LABEL_4;
    }

    __break(1u);
    JUMPOUT(0x183AEE06CLL);
  }

void FilterProducer.receive(subscription:)()
{
}

uint64_t sub_183AEE14C(uint64_t a1)
{
  uint64_t v10 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8 - 128, v4, a1);
  uint64_t v11 = *(void *)(v8 - 104);
  if (v11 != 1)
  {
    if (!v11)
    {
      outlined init with copy of Subscription((uint64_t)v3, (uint64_t)v19);
      (*(void (**)(_BYTE *, void *, uint64_t))(v10 + 32))(v18, v19, a1);
      swift_beginAccess();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 40))(v4, v18, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v2);
      v19[0] = v17;
      v19[1] = v5;
      v19[2] = v6;
      v19[3] = v7;
      v19[4] = v16;
      v19[5] = v1;
      v19[6] = v15;
      type metadata accessor for FilterProducer();
    }

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8 - 128, a1);
  }

  os_unfair_lock_unlock(v2);
  uint64_t v12 = v3[3];
  uint64_t v13 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v12);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8LL))(v12);
}

void FilterProducer.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 120);
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  v22[6] = (char *)v22 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v23 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v22[8] = *(void *)(v23 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v23);
  v22[7] = (char *)v22 - v11;
  uint64_t v12 = *(void *)(v3 + 96);
  v22[5] = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v10);
  v22[1] = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Optional();
  v22[4] = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  v22[2] = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  v22[3] = (char *)v22 - v17;
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t v29 = type metadata accessor for PartialCompletion(0LL, v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v31 = *(void *)(v29 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v29);
  MEMORY[0x1895F8858](v18);
  unsigned int v30 = (char *)v22 - v19;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + *(void *)(v3 + 152)));
  swift_beginAccess();
  uint64_t v20 = *(void *)(v3 + 88);
  uint64_t v21 = *(void *)(v3 + 128);
  uint64_t v26 = v5;
  uint64_t v32 = v5;
  uint64_t v33 = v20;
  uint64_t v34 = v12;
  __int128 v35 = *(_OWORD *)(v3 + 104);
  uint64_t v27 = v4;
  uint64_t v36 = v4;
  uint64_t v37 = v21;
  type metadata accessor for FilterProducer.State();
}

uint64_t sub_183AEE534(uint64_t a1)
{
  uint64_t v9 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7 - 168, v1, a1);
  uint64_t v10 = *(void *)(v7 - 144);
  if (v10 == 1)
  {
    os_unfair_lock_unlock(v3);
    return 0LL;
  }

  if (v10)
  {
    outlined init with take of Subscription((__int128 *)(v7 - 168), v7 - 208);
    os_unfair_lock_unlock(v3);
    uint64_t v11 = *(void *)(v7 - 288);
    (*(void (**)(void))(*(void *)v2 + 224LL))(*(void *)(v7 - 304));
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v7 - 296);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 280) + 16LL))(v5, v12, v13);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      uint64_t v21 = *(void *)(v7 - 384);
      uint64_t v22 = *(void *)(v7 - 392);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v22, v5, v4);
      uint64_t v23 = *(void *)(v7 - 400);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v23, v22, v4);
      uint64_t v24 = *(void *)(v7 - 376);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1LL, v6) == 1)
      {
        uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v25(v22, v4);
        (*(void (**)(void, uint64_t))(*(void *)(v7 - 280) + 8LL))(*(void *)(v7 - 288), v13);
        v25(v23, v4);
        __swift_destroy_boxed_opaque_existential_1(v7 - 208);
        return 1LL;
      }

      else
      {
        uint64_t v31 = *(void *)(v7 - 408);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v31, v23, v6);
        uint64_t v26 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v7 - 312) + 48LL))(v31, *(void *)(v7 - 320));
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v31, v6);
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v4);
        (*(void (**)(void, uint64_t))(*(void *)(v7 - 280) + 8LL))(*(void *)(v7 - 288), v13);
        __swift_destroy_boxed_opaque_existential_1(v7 - 208);
      }

      return v26;
    }

    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = *(void *)(v7 - 336);
      uint64_t v16 = *(void *)(v7 - 328);
      (*(void (**)(void, uint64_t, uint64_t))(v15 + 32))(*(void *)(v7 - 368), v5, v16);
      os_unfair_lock_lock(v3);
      *(void *)(v7 - 248) = 0LL;
      *(void *)(v7 - 240) = 0LL;
      *(void *)(v7 - 232) = 0LL;
      *(_OWORD *)(v7 - 224) = xmmword_183B9D5C0;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v1, v7 - 248, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v3);
      uint64_t v17 = *(void *)(v7 - 184);
      uint64_t v18 = *(void *)(v7 - 176);
      __swift_project_boxed_opaque_existential_1((void *)(v7 - 208), v17);
      (*(void (**)(uint64_t))(*(void *)(v18 + 8) + 8LL))(v17);
      uint64_t v19 = *(void *)(v7 - 360);
      uint64_t v20 = *(void *)(v7 - 368);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v19, v20, v16);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v19, 0LL, 1LL, v16);
      (*(void (**)(uint64_t, void))(*(void *)(v7 - 312) + 56LL))(v19, *(void *)(v7 - 320));
      (*(void (**)(uint64_t, void))(*(void *)(v7 - 352) + 8LL))(v19, *(void *)(v7 - 344));
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v16);
    }

    else
    {
      os_unfair_lock_lock(v3);
      *(void *)(v7 - 248) = 0LL;
      *(void *)(v7 - 240) = 0LL;
      *(void *)(v7 - 232) = 0LL;
      *(_OWORD *)(v7 - 224) = xmmword_183B9D5C0;
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v1, v7 - 248, a1);
      swift_endAccess();
      os_unfair_lock_unlock(v3);
      uint64_t v27 = *(void *)(v7 - 184);
      uint64_t v28 = *(void *)(v7 - 176);
      __swift_project_boxed_opaque_existential_1((void *)(v7 - 208), v27);
      (*(void (**)(uint64_t))(*(void *)(v28 + 8) + 8LL))(v27);
      uint64_t v29 = *(void *)(v7 - 360);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v7 - 336) + 56LL))( v29,  1LL,  1LL,  *(void *)(v7 - 328));
      (*(void (**)(uint64_t, void))(*(void *)(v7 - 312) + 56LL))(v29, *(void *)(v7 - 320));
      (*(void (**)(uint64_t, void))(*(void *)(v7 - 352) + 8LL))(v29, *(void *)(v7 - 344));
    }

    (*(void (**)(void, uint64_t))(*(void *)(v7 - 280) + 8LL))(*(void *)(v7 - 288), v13);
    __swift_destroy_boxed_opaque_existential_1(v7 - 208);
    return 0LL;
  }

  os_unfair_lock_unlock(v3);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void FilterProducer.receive(completion:)(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  v18[3] = (char *)v18 - v7;
  uint64_t v8 = *(void *)(v2 + 104);
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  v18[1] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  v18[2] = (char *)v18 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v23 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  uint64_t v22 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v21 = (char *)v18 - v14;
  uint64_t v15 = *(void *)(v2 + 128);
  uint64_t v19 = type metadata accessor for Subscribers.Completion(0LL, v8, v15, v16);
  MEMORY[0x1895F8858](v19);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 152)));
  swift_beginAccess();
  uint64_t v17 = *(void *)(v2 + 112);
  uint64_t v27 = v4;
  uint64_t v28 = v4;
  __int128 v29 = *(_OWORD *)(v2 + 88);
  uint64_t v30 = v8;
  uint64_t v31 = v17;
  uint64_t v32 = v3;
  uint64_t v33 = v15;
  type metadata accessor for FilterProducer.State();
}

void sub_183AEEBE4(uint64_t a1)
{
  uint64_t v9 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7 - 168, v2, a1);
  uint64_t v10 = *(void *)(v7 - 144);
  if (v10 == 1)
  {
    os_unfair_lock_unlock(v6);
  }

  else if (v10)
  {
    *(void *)(v7 - 208) = 0LL;
    *(void *)(v7 - 200) = 0LL;
    *(void *)(v7 - 192) = 0LL;
    *(_OWORD *)(v7 - 184) = xmmword_183B9D5C0;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v2, v7 - 208, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v6);
    (*(void (**)(uint64_t, void, void))(v1 + 16))(v3, *(void *)(v7 - 296), *(void *)(v7 - 304));
    uint64_t v11 = *(void *)(v7 - 264);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v3, 1LL, v4) == 1)
    {
      uint64_t v12 = *(void *)(v7 - 288);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v7 - 256) + 56LL))( v12,  1LL,  1LL,  *(void *)(v7 - 248));
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 56))(v12, *(void *)(v7 - 240), v5);
      (*(void (**)(uint64_t, void))(*(void *)(v7 - 280) + 8LL))(v12, *(void *)(v7 - 272));
    }

    else
    {
      uint64_t v13 = *(void *)(v7 - 320);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v13, v3, v4);
      (*(void (**)(void, uint64_t, uint64_t))(v11 + 16))(*(void *)(v7 - 328), v13, v4);
      *(void *)(v7 - 296) = v9;
      uint64_t v14 = *(void *)(v7 - 312);
      uint64_t v15 = *(void *)(v7 - 248);
      swift_dynamicCast();
      uint64_t v16 = *(void *)(v7 - 256);
      uint64_t v17 = *(void *)(v7 - 288);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v14, v15);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v17, 0LL, 1LL, v15);
      (*(void (**)(uint64_t, void, uint64_t))(v5 + 56))(v17, *(void *)(v7 - 240), v5);
      (*(void (**)(uint64_t, void))(*(void *)(v7 - 280) + 8LL))(v17, *(void *)(v7 - 272));
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v4);
      uint64_t v18 = v14;
      uint64_t v9 = *(void *)(v7 - 296);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
    }

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7 - 168, a1);
  }

  else
  {
    os_unfair_lock_unlock(v6);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

uint64_t type metadata instantiation function for FilterProducer.State()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for FilterProducer.State(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for FilterProducer.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }

  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }

  return a1;
}

uint64_t assignWithCopy for FilterProducer.State(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }

LABEL_7:
    __int128 v5 = *a2;
    __int128 v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v6;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

  __break(1u);
  return result;
}

    uint64_t v7 = *a2;
    uint64_t v8 = a2[2];
    *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    goto LABEL_7;
  }

  *(void *)a1 = *(void *)a2;
  __swift_assign_boxed_opaque_existential_1(v4, (uint64_t *)a2 + 1);
  return a1;
}

    uint64_t v14 = *(_OWORD *)v12;
    uint64_t v15 = *(_OWORD *)(v12 + 16);
    *(void *)(v11 + 32) = *(void *)(v12 + 32);
    *(_OWORD *)uint64_t v11 = v14;
    *(_OWORD *)(v11 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v15;
    return a1;
  }

  if (v13 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v11);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_1((uint64_t *)v11, (uint64_t *)v12);
  return a1;
}

    uint64_t v10 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v10;
    return a1;
  }

  if (v9 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v7);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_0((uint64_t *)v7, (uint64_t *)v8);
  return a1;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  os_unfair_lock_unlock(v13);
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v3 - 256) + 48LL))(*(void *)(v3 - 248), v9);
  uint64_t v19 = v18;
  if (v18 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v13);
    uint64_t v20 = 0x8000000000000000LL;
LABEL_18:
    *(void *)((char *)v1 + voutlined destroy of AnyCancellable.Storage(v0 + 16) = v20;
    goto LABEL_19;
  }

  if (v18 < 0) {
    goto LABEL_25;
  }
  if (!v18)
  {
LABEL_22:
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    return;
  }

  os_unfair_lock_lock(v13);
  uint64_t v21 = *(void *)((char *)v1 + v16);
  if (v21 == 0x8000000000000000LL)
  {
LABEL_19:
    uint64_t v23 = (uint64_t)v1 + *(void *)(*v1 + 128LL);
    swift_beginAccess();
    outlined init with copy of Subscription?(v23, v3 - 216);
    if (*(void *)(v3 - 192))
    {
      outlined init with take of Subscription((__int128 *)(v3 - 216), v3 - 152);
      os_unfair_lock_unlock(v13);
      uint64_t v24 = *(void *)(v3 - 128);
      uint64_t v25 = *(void *)(v3 - 120);
      __swift_project_boxed_opaque_existential_1((void *)(v3 - 152), v24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24))(v19, v24, v25);
      __swift_destroy_boxed_opaque_existential_1(v3 - 152);
    }

    else
    {
      outlined destroy of Subscription?(v3 - 216);
      os_unfair_lock_unlock(v13);
    }

    goto LABEL_22;
  }

  if ((v21 | v19) < 0) {
    goto LABEL_26;
  }
  uint64_t v22 = __OFADD__(v21, v19);
  uint64_t v20 = v21 + v19;
  if (v22)
  {
    uint64_t v20 = 0x8000000000000000LL;
    goto LABEL_18;
  }

  if ((v20 & 0x8000000000000000LL) == 0) {
    goto LABEL_18;
  }
LABEL_27:
  __break(1u);
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }

  __int128 v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }

  __int128 v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    return a1;
  }

  if (v13 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v14 = v12[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    return a1;
  }

  if (v13 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }

  uint64_t v14 = v12[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  swift_release();
  return a1;
}

  __break(1u);
  return result;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v10 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *unint64_t v3 = v10;
      }

      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (uint64_t *)swift_release();
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *unint64_t v3 = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }

  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FilterProducer.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterProducer.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for FilterProducer.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0LL;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }

  return result;
}

uint64_t getEnumTag for FilterProducer.State(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for FilterProducer.State(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }

  return result;
}

void type metadata accessor for FilterProducer.State()
{
}

void protocol witness for Subscriber.receive(subscription:) in conformance FilterProducer<A, B, C, D, E>()
{
}

  ;
}

void protocol witness for Subscriber.receive(_:) in conformance FilterProducer<A, B, C, D, E>( uint64_t a1)
{
}

  ;
}

void protocol witness for Subscriber.receive(completion:) in conformance FilterProducer<A, B, C, D, E>( uint64_t a1)
{
}

  ;
}

void protocol witness for Subscription.request(_:) in conformance FilterProducer<A, B, C, D, E>( Combine::Subscribers::Demand a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FilterProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168LL))();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance FilterProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance FilterProducer<A, B, C, D, E>@<X0>( uint64_t *a1@<X8>)
{
  return FilterProducer.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance FilterProducer<A, B, C, D, E>()
{
}

  ;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in FilterProducer<A, B, C, D, E>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 128);
}

void Publisher.measureInterval<A>(using:options:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v19 = (char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v17 + 16))(v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  v20[0] = a2;
  v20[1] = a3;
  void v20[2] = a4;
  void v20[3] = a5;
  type metadata accessor for Publishers.MeasureInterval();
}

uint64_t sub_183AEF468(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.MeasureInterval.init(upstream:scheduler:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183AEF4F8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

void type metadata accessor for Publishers.MeasureInterval()
{
}

uint64_t Publishers.MeasureInterval.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.MeasureInterval.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

void Publishers.MeasureInterval.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  MEMORY[0x1895F8858](v1);
  type metadata accessor for Publishers.MeasureInterval.Inner();
}

uint64_t sub_183AEF620(uint64_t a1)
{
  *(void *)(v10 - 128) = Publishers.MeasureInterval.Inner.init(_:scheduler:)(v8, v7);
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.MeasureInterval<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 128, v3, a1, *(void *)(v10 - 144), v12);
  return swift_release();
}

void type metadata accessor for Publishers.MeasureInterval.Inner()
{
}

char *Publishers.MeasureInterval.Inner.__allocating_init(_:scheduler:)(uint64_t a1, uint64_t a2)
{
  return Publishers.MeasureInterval.Inner.init(_:scheduler:)(a1, a2);
}

char *Publishers.MeasureInterval.Inner.init(_:scheduler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  *((void *)v2 + 2) = v6;
  uint64_t v7 = &v2[*(void *)(*(void *)v2 + 152LL)];
  *((void *)v7 + 4) = 0LL;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[40] = 2;
  uint64_t v8 = &v2[*(void *)(*(void *)v2 + 160LL)];
  uint64_t v9 = *(void *)(v5 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v8,  1LL,  1LL,  AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v5 + 96) - 8LL) + 32LL))( &v2[*(void *)(*(void *)v2 + 136LL)],  a1);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( &v2[*(void *)(*(void *)v2 + 144LL)],  a2,  v9);
  return v2;
}

char *Publishers.MeasureInterval.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x186E22A2C](*((void *)v0 + 2), -1LL, -1LL);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 136LL)]);
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))( &v0[*(void *)(*(void *)v0 + 144LL)],  *(void *)(v1 + 88));
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 152LL)]);
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 160LL)];
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return v0;
}

uint64_t Publishers.MeasureInterval.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void Publishers.MeasureInterval.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 152LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }

  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

void Publishers.MeasureInterval.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 152LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)v5);
  if (v6)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v5);
    os_unfair_lock_unlock(v1);
  }

  else
  {
    outlined init with take of Subscription(v5, (uint64_t)v7);
    Publishers.MeasureInterval.Inner.locked_terminate()();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v8;
    uint64_t v4 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }

uint64_t Publishers.MeasureInterval.Inner.receive(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88LL);
  uint64_t v24 = *(void *)(*v2 + 112LL);
  *(void *)&__int128 v25 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v14);
  uint64_t v15 = (uint64_t)v2 + *(void *)(*v2 + 152LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v15, (uint64_t)&v31);
  if (v34 == 2)
  {
    int8x16_t v16 = vorrq_s8(v32, v33);
    if (!(*(void *)&vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)) | v31))
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v26);
      LOBYTE(v29) = 0;
      outlined init with take of SubscriptionStatus((uint64_t)v26, (uint64_t)v30);
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)v30, v15);
      swift_endAccess();
      uint64_t v20 = v24;
      (*(void (**)(void, uint64_t))(v24 + 40))(v25, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v13,  0LL,  1LL,  AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
      uint64_t v21 = (char *)v2 + *(void *)(*v2 + 160LL);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v21, v11, v7);
      swift_endAccess();
      os_unfair_lock_unlock(v14);
      uint64_t v22 = *(void *)(v4 + 120);
      v26[0] = *(void *)(v4 + 80);
      v26[1] = v25;
      __int128 v25 = *(_OWORD *)(v4 + 96);
      __int128 v27 = v25;
      uint64_t v28 = v20;
      uint64_t v29 = v22;
      type metadata accessor for Publishers.MeasureInterval.Inner();
    }
  }

  os_unfair_lock_unlock(v14);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  (*(void (**)(uint64_t))(*(void *)(v18 + 8) + 8LL))(v17);
  return outlined destroy of SubscriptionStatus((uint64_t)&v31);
}

void Publishers.MeasureInterval.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 152LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v6);
  LODWORD((*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v6[40];
  outlined destroy of SubscriptionStatus((uint64_t)v6);
  if ((_DWORD)v5)
  {
    os_unfair_lock_unlock(v4);
  }

  else
  {
    Publishers.MeasureInterval.Inner.locked_terminate()();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56LL))(a1, *(void *)(v3 + 96));
  }

uint64_t Publishers.MeasureInterval.Inner.locked_terminate()()
{
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  char v6 = (char *)&v10 - v5;
  uint64_t v11 = 1LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  char v14 = 2;
  uint64_t v7 = (uint64_t)v0 + *(void *)(v1 + 152);
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v11, v7);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v6,  1LL,  1LL,  AssociatedTypeWitness);
  uint64_t v8 = (uint64_t)v0 + *(void *)(*v0 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v8, v6, v3);
  return swift_endAccess();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>( void *a1)
{
  return Publishers.MeasureInterval.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  return specialized Publishers.MeasureInterval.Inner.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MeasureInterval<A, B>( uint64_t a1)
{
}

uint64_t type metadata instantiation function for Publishers.MeasureInterval()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.MeasureInterval()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MeasureInterval( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(void *)(v7 + 64) > 0x18)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }

  else
  {
    uint64_t v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v14,  ((unint64_t)a2 + v9) & v14,  v5);
  }

  return v4;
}

uint64_t destroy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

uint64_t initializeWithCopy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MeasureInterval(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183AF046C + 4 * byte_183B9D708[v17 - 1]))();
}

void storeEnumTagSinglePayload for Publishers.MeasureInterval( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t type metadata completion function for Publishers.MeasureInterval.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }

  return v0;
}

void Publishers.MeasureInterval.Inner.customMirror.getter()
{
  unint64_t v1 = (_OWORD *)*v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v9 = v0;
  uint64_t v6 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  __int128 v7 = v1[6];
  v8[0] = v1[5];
  v8[1] = v7;
  v8[2] = v1[7];
  type metadata accessor for Publishers.MeasureInterval.Inner();
}

uint64_t sub_183AF08AC()
{
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MeasureInterval.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x496572757361654DLL;
  a1[1] = 0xEF6C61767265746ELL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  return 0x496572757361654DLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
}

  ;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>( void *a1@<X8>)
{
}

uint64_t specialized Publishers.MeasureInterval.Inner.receive(_:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 96LL);
  uint64_t v55 = *(void *)(*v0 + 120LL);
  uint64_t v54 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v56 = (char *)&v48 - v4;
  uint64_t v5 = *(void *)(v2 + 88);
  uint64_t v58 = *(void *)(v2 + 112);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  unsigned int v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  char v13 = (char *)&v48 - v12;
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  int v16 = (char *)&v48 - v15;
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v14);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v48 - v21;
  os_unfair_lock_t v61 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v61);
  uint64_t v23 = (uint64_t)v1 + *(void *)(*v1 + 152LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v23, (uint64_t)v62);
  if (v63)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v62);
LABEL_5:
    os_unfair_lock_unlock(v61);
    return 0LL;
  }

  uint64_t v48 = v13;
  int64_t v49 = v10;
  uint64_t v52 = v5;
  uint64_t v24 = v58;
  uint64_t v50 = v22;
  uint64_t v51 = v20;
  outlined init with take of Subscription(v62, (uint64_t)v64);
  __int128 v25 = (char *)v1 + *(void *)(*v1 + 160LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v16, v25, v60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1LL, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    goto LABEL_5;
  }

  __int128 v27 = v50;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v50, v16, v6);
  uint64_t v28 = v51;
  (*(void (**)(uint64_t, uint64_t))(v24 + 40))(v52, v24);
  uint64_t v29 = v48;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v48, v28, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v29, 0LL, 1LL, v6);
  uint64_t v30 = v59;
  uint64_t v31 = v49;
  int8x16_t v32 = v29;
  uint64_t v33 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v49, v32, v60);
  swift_beginAccess();
  char v34 = v25;
  __int128 v35 = v27;
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v34, v31, v33);
  swift_endAccess();
  os_unfair_lock_unlock(v61);
  swift_getAssociatedConformanceWitness();
  uint64_t v36 = v56;
  dispatch thunk of Strideable.distance(to:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 48))(v36, v54);
  uint64_t v37 = result;
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v39 = v57;
  if (result == 0x8000000000000000LL) {
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000LL) == 0)
  {
    if (!result)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v17 + 8);
      v47(v28, v6);
      v47(v35, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      return 0LL;
    }

uint64_t outlined init with take of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Publisher.drop(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.DropWhile,  a5);
}

uint64_t Publishers.DropWhile.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.DropWhile,  a6);
}

uint64_t type metadata accessor for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.DropWhile);
}

uint64_t Publisher.tryDrop(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryDropWhile,  a5);
}

uint64_t Publisher.drop(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  int v16 = (void *)(a6 + *(int *)(a5(0LL, a3, a4) + 36));
  *int v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t Publishers.TryDropWhile.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryDropWhile,  a6);
}

uint64_t Publishers.DropWhile.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t result = a6(0LL, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  void *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryDropWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TryDropWhile);
}

uint64_t Publishers.DropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)( a1,  a2,  a3,  a4,  (uint64_t)type metadata accessor for Publishers.DropWhile.Inner,  (uint64_t (*)(char *, uint64_t, uint64_t))Publishers.DropWhile.Inner.init(downstream:predicate:),  (uint64_t)&protocol conformance descriptor for Publishers.DropWhile<A>.Inner<A1>);
}

void type metadata accessor for Publishers.DropWhile.Inner()
{
}

uint64_t Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.DropWhile.Inner.init(downstream:predicate:));
}

void Publishers.DropWhile.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x6C696857706F7244LL;
  a1[1] = 0xE900000000000065LL;
}

uint64_t *Publishers.DropWhile.Inner.init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[6] = 0LL;
  *((_BYTE *)v3 + 56) = 2;
  uint64_t v8 = (uint64_t *)((char *)v3 + *(void *)(v7 + 128));
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  *((_BYTE *)v3 + *(void *)(*v3 + 136)) = 1;
  uint64_t v9 = *(void *)(*v3 + 144);
  unsigned int v10 = (_DWORD *)swift_slowAlloc();
  *unsigned int v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 88) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 120),  a1);
  uint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 128));
  uint64_t v12 = *v11;
  *uint64_t v11 = a2;
  v11[1] = a3;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  return v3;
}

uint64_t *Publishers.DropWhile.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1LL, -1LL);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 120));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)));
  return v0;
}

uint64_t Publishers.DropWhile.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.DropWhile.Inner.deinit);
}

void Publishers.DropWhile.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 16, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v6, (uint64_t)v10);
    uint64_t v6 = 1LL;
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v0 + 16);
    swift_endAccess();
    uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128LL));
    uint64_t v3 = *v2;
    uint64_t *v2 = 0LL;
    v2[1] = 0LL;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }

void Publishers.DropWhile.Inner.request(_:)(uint64_t a1)
{
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (!a1)
  {
LABEL_9:
    __break(1u);
    return;
  }

uint64_t Publishers.DropWhile.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v12);
  if (v15 == 2
    && (int8x16_t v5 = vorrq_s8(v13, v14),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | (unint64_t)v12)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
    char v15 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v14.i64[0] = v3;
    v14.i64[1] = (uint64_t)&protocol witness table for Publishers.DropWhile<A>.Inner<A1>;
    uint64_t v12 = v1;
    uint64_t v9 = *(void *)(v3 + 104);
    uint64_t v10 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 88);
    swift_retain();
    v10(&v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
  }

uint64_t Publishers.DropWhile.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v5));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)v14);
  int v6 = v14[40];
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (!v6)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t))((char *)v2 + *(void *)(*v2 + 128));
    if (v9)
    {
      uint64_t v10 = *(void *)(*v2 + 136);
      if (*((_BYTE *)v2 + v10) == 1)
      {
        uint64_t v11 = *(os_unfair_lock_s **)((char *)v2 + v5);
        swift_retain();
        os_unfair_lock_unlock(v11);
        if ((v9(a1) & 1) != 0)
        {
          _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
          return 1LL;
        }

        os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
        *((_BYTE *)v2 + v10) = 0;
        int8x16_t v13 = *(os_unfair_lock_s **)((char *)v2 + v5);
      }

      else
      {
        uint64_t v12 = *(os_unfair_lock_s **)((char *)v2 + v5);
        swift_retain();
        int8x16_t v13 = v12;
      }

      os_unfair_lock_unlock(v13);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 104) + 48LL))(a1, *(void *)(v4 + 88));
      _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
      return v7;
    }
  }

  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
  return 0LL;
}

void Publishers.DropWhile.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v8);
  int v5 = v11;
  outlined destroy of SubscriptionStatus((uint64_t)&v8);
  if (v5)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  }

  else
  {
    uint64_t v8 = 1LL;
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    unsigned __int8 v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v8, (uint64_t)(v1 + 2));
    swift_endAccess();
    int v6 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 128));
    uint64_t v7 = *v6;
    *int v6 = 0LL;
    v6[1] = 0LL;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v7);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 104) + 56LL))(a1, *(void *)(v3 + 88));
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.DropWhile<A>.Inner<A1>( void *a1)
{
  return Publishers.DropWhile.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.DropWhile<A>.Inner<A1>( uint64_t a1)
{
  return Publishers.DropWhile.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.DropWhile<A>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.DropWhile<A>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.DropWhile<A>.Inner<A1>()
{
  return 0x6C696857706F7244LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.DropWhile<A>.Inner<A1>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.DropWhile<A>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.DropWhile<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryDropWhile.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.DropWhile.predicate.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t Publishers.TryDropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)( a1,  a2,  a3,  a4,  (uint64_t)type metadata accessor for Publishers.TryDropWhile.Inner,  (uint64_t (*)(char *, uint64_t, uint64_t))Publishers.TryDropWhile.Inner.init(downstream:predicate:),  (uint64_t)&protocol conformance descriptor for Publishers.TryDropWhile<A>.Inner<A1>);
}

uint64_t Publishers.DropWhile.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v29 = a7;
  uint64_t v9 = v7;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  char v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 + 24);
  v30[0] = *(void *)(v16 + 16);
  uint64_t v18 = v30[0];
  v30[1] = v19;
  v30[2] = v17;
  v30[3] = v20;
  uint64_t v22 = v21(0LL, v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  uint64_t v23 = (uint64_t *)(v9 + *(int *)(a2 + 36));
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  swift_allocObject();
  swift_retain();
  v30[0] = a6(v15, v24, v25);
  uint64_t v26 = MEMORY[0x186E22960](v29, v22);
  Publisher.subscribe<A>(_:)((uint64_t)v30, v18, v22, v17, v26);
  return swift_release();
}

void type metadata accessor for Publishers.TryDropWhile.Inner()
{
}

uint64_t Publishers.TryDropWhile.Inner.__allocating_init(downstream:predicate:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.TryDropWhile.Inner.init(downstream:predicate:));
}

uint64_t Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a1, a2, a3);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.DropWhile<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.TryDropWhile<A>()
{
  return MEMORY[0x18961A3E8];
}

void Publishers.TryDropWhile.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "TryDropWhile");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t *Publishers.TryDropWhile.Inner.init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[6] = 0LL;
  *((_BYTE *)v3 + 56) = 2;
  uint64_t v8 = (uint64_t *)((char *)v3 + *(void *)(v7 + 128));
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  *((_BYTE *)v3 + *(void *)(*v3 + 136)) = 1;
  *((_BYTE *)v3 + *(void *)(*v3 + 144)) = 0;
  uint64_t v9 = *(void *)(*v3 + 152);
  __int128 v10 = (_DWORD *)swift_slowAlloc();
  *__int128 v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 88) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 120),  a1);
  unsigned __int8 v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 128));
  uint64_t v12 = *v11;
  *unsigned __int8 v11 = a2;
  v11[1] = a3;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  return v3;
}

uint64_t *Publishers.TryDropWhile.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1LL, -1LL);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 120));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)));
  return v0;
}

uint64_t Publishers.TryDropWhile.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.TryDropWhile.Inner.deinit);
}

uint64_t Publishers.DropWhile.Inner.__deallocating_deinit(void (*a1)(void))
{
  return swift_deallocClassInstance();
}

void Publishers.TryDropWhile.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 16, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v6, (uint64_t)v10);
    uint64_t v6 = 1LL;
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v0 + 16);
    swift_endAccess();
    uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128LL));
    uint64_t v3 = *v2;
    uint64_t *v2 = 0LL;
    v2[1] = 0LL;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 144LL)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }

void Publishers.TryDropWhile.Inner.request(_:)(uint64_t a1)
{
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (!a1)
  {
LABEL_9:
    __break(1u);
    return;
  }

uint64_t Publishers.TryDropWhile.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v12);
  if (v15 == 2
    && (int8x16_t v5 = vorrq_s8(v13, v14),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | (unint64_t)v12)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
    char v15 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v14.i64[0] = v3;
    v14.i64[1] = (uint64_t)&protocol witness table for Publishers.TryDropWhile<A>.Inner<A1>;
    uint64_t v12 = v1;
    uint64_t v9 = *(void *)(v3 + 104);
    uint64_t v10 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 88);
    swift_retain();
    v10(&v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
  }

uint64_t Publishers.TryDropWhile.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v5));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)v14);
  int v6 = v15;
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (v6 || (uint64_t v9 = *(uint64_t (**)(uint64_t))((char *)v1 + *(void *)(*v1 + 128))) == 0LL)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v5));
    return 0LL;
  }

  else
  {
    uint64_t v10 = *(void *)(*v1 + 136);
    if (*((_BYTE *)v1 + v10) == 1)
    {
      uint64_t v11 = *(os_unfair_lock_s **)((char *)v1 + v5);
      swift_retain();
      os_unfair_lock_unlock(v11);
      if ((v9(a1) & 1) != 0)
      {
        _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
        return 1LL;
      }

      os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
      *((_BYTE *)v2 + v10) = 0;
      int8x16_t v13 = *(os_unfair_lock_s **)((char *)v2 + v5);
    }

    else
    {
      uint64_t v12 = *(os_unfair_lock_s **)((char *)v1 + v5);
      swift_retain();
      int8x16_t v13 = v12;
    }

    os_unfair_lock_unlock(v13);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 104) + 48LL))(a1, *(void *)(v4 + 88));
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
  }

  return v7;
}

void Publishers.TryDropWhile.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v21 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = v2[19];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v11));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)&v28);
  int v12 = v31;
  outlined destroy of SubscriptionStatus((uint64_t)&v28);
  if (v12)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v11));
  }

  else
  {
    uint64_t v22 = v8;
    uint64_t v23 = v10;
    uint64_t v24 = v7;
    uint64_t v21 = AssociatedConformanceWitness;
    uint64_t v13 = v27;
    uint64_t v28 = 1LL;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    unsigned __int8 v31 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v28, v1 + 16);
    swift_endAccess();
    uint64_t v14 = *(void *)(*(void *)v1 + 144LL);
    char v15 = *(_BYTE *)(v1 + v14);
    *(_BYTE *)(v1 + v14) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v11));
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = v23;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v23, v26, v24);
      uint64_t v17 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v16, 1LL, AssociatedTypeWitness) == 1)
      {
        uint64_t v28 = 0LL;
        (*(void (**)(uint64_t *, void))(v2[13] + 56LL))(&v28, v2[11]);
      }

      else
      {
        uint64_t v18 = v25;
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v25, v16, AssociatedTypeWitness);
        uint64_t v19 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(v20, v18, AssociatedTypeWitness);
        uint64_t v28 = v19;
        (*(void (**)(uint64_t *, void))(v2[13] + 56LL))(&v28, v2[11]);
        MEMORY[0x186E22870](v19);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v18, AssociatedTypeWitness);
      }
    }
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryDropWhile<A>.Inner<A1>( void *a1)
{
  return Publishers.TryDropWhile.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryDropWhile<A>.Inner<A1>( uint64_t a1)
{
  return Publishers.TryDropWhile.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryDropWhile<A>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryDropWhile<A>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.TryDropWhile<A>.Inner<A1>()
{
  return 0x57706F7244797254LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryDropWhile<A>.Inner<A1>( uint64_t a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryDropWhile<A>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryDropWhile<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryDropWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata completion function for Publishers.DropWhile.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata completion function for Publishers.DropWhile()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.DropWhile(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v11 = v10[1];
    int v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *int v12 = *v10;
    v12[1] = v11;
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.DropWhile(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.DropWhile(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AF28C8 + 4 * byte_183B9D880[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.DropWhile( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AF2A40()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF2AB8LL);
}

void sub_183AF2A48(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AF2A50LL);
  }
  JUMPOUT(0x183AF2AB8LL);
}

void sub_183AF2A90()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF2AB8LL);
}

void sub_183AF2A98()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF2AB8LL);
}

uint64_t sub_183AF2AA0(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183AF2AB8LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183AF2AB4LL);
    }
    JUMPOUT(0x183AF2AACLL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.TryDropWhile.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe( uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t Record.recording.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Record.Recording(0LL, a1[2], a1[3], a1[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, v2, v4);
}

uint64_t type metadata accessor for Record.Recording(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Record.Recording);
}

uint64_t Record.init(record:)@<X0>( uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return a1(a5);
}

uint64_t Record.Recording.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = static Array._allocateUninitialized(_:)();
  uint64_t v8 = type metadata accessor for Record.Recording(0LL, a1, a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a4 + *(int *)(v8 + 48),  1LL,  1LL,  a2);
  *(_BYTE *)a4 = 0;
  return result;
}

uint64_t Record.init(recording:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = type metadata accessor for Record.Recording(0LL, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a5, a1, v7);
}

uint64_t Record.Recording.init(output:completion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)(a6 + 8) = a1;
  uint64_t v10 = a6 + *(int *)(type metadata accessor for Record.Recording(0LL, a3, a4, a5) + 48);
  uint64_t v12 = type metadata accessor for Subscribers.Completion(0LL, a4, a5, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, a2, v12);
  *(_BYTE *)a6 = 1;
  return result;
}

uint64_t Record.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t v9 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v9);
  if ((Collection.isEmpty.getter() & 1) == 0) {
    type metadata accessor for Record.Inner();
  }
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))( &static Subscriptions._EmptySubscription.singleton,  a3,  a4);
  uint64_t v10 = type metadata accessor for Record.Recording(0LL, v8, a2[3], a2[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 56))(v4 + *(int *)(v10 + 48), a3, a4);
}

BOOL static Record.Recording.State.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Record.Recording.State.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int Record.Recording.State.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.Recording.State( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Record.Recording.State.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.Recording.State()
{
  return Record.Recording.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Record<A, B>.Recording.State(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.Recording.State()
{
  return Hasher._finalize()();
}

uint64_t Record.Recording.output.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Record.Recording.completion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 48);
  uint64_t v6 = type metadata accessor for Subscribers.Completion(0LL, *(void *)(a1 + 24), *(void *)(a1 + 32), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t Record.Recording.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = MEMORY[0x1895F8858](a1);
  if ((*v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5,  v3);
    type metadata accessor for Array();
    return Array.append(_:)();
  }

  return result;
}

uint64_t Record.Recording.receive(completion:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*v4 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = result;
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    *uint64_t v4 = 1;
    uint64_t v8 = &v4[*(int *)(a2 + 48)];
    uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, v7, v6, a4);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24LL))(v8, v5, v9);
  }

  return result;
}

uint64_t Record.Inner.description.getter()
{
  uint64_t v1 = *v0;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168LL)));
  if (v0[2])
  {
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = MEMORY[0x186E22030](v3, v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v4 = 0xD000000000000010LL;
  }

  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168LL)));
  return v4;
}

void Record.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 168)));
  uint64_t v19 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + outlined destroy of AnyCancellable.Storage(v0 + 16) = xmmword_183B9DB50;
  *(void *)(v8 + 32) = 0x65636E6575716573LL;
  *(void *)(v8 + 40) = 0xE800000000000000LL;
  uint64_t v9 = v0[2];
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = type metadata accessor for Array();
  swift_retain();
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = static Array._allocateUninitialized(_:)();
  }
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 80) = 0x6974656C706D6F63LL;
  *(void *)(v8 + 88) = 0xEA00000000006E6FLL;
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 120LL);
  uint64_t v12 = *(void *)(v1 + 88);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Subscribers.Completion(0LL, v12, AssociatedConformanceWitness, v14);
  *(void *)(v8 + 120) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))( boxed_opaque_existential_1,  v11,  v15);
  uint64_t v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v7, 1LL, 1LL, v17);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168LL)));
}

uint64_t Record.Inner.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Record.Inner.description.getter();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t *Record.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 168)), -1LL, -1LL);
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 120);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion(0LL, v3, AssociatedConformanceWitness, v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v2, v6);
  uint64_t v7 = (uint64_t)v0 + *(void *)(*v0 + 128);
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t)v0 + *(void *)(*v0 + 144);
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  return v0;
}

uint64_t Record.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Record.Inner.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 96LL);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v8 - v5;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 168)));
  v0[2] = 0LL;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v6, 1LL, 1LL, v2);
  uint64_t v7 = (char *)v0 + *(void *)(*v0 + 128LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168LL)));
}

Swift::Void __swiftcall Record.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  Swift::UInt rawValue = a1.rawValue;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96LL);
  uint64_t v4 = *(void *)(*v1 + 88LL);
  uint64_t v107 = *(void *)(*v1 + 104LL);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v98 = type metadata accessor for Subscribers.Completion(0LL, v4, AssociatedConformanceWitness, v6);
  uint64_t v97 = *(void *)(v98 - 8);
  MEMORY[0x1895F8858](v98);
  uint64_t v96 = (char *)&v91 - v7;
  uint64_t v8 = *(void *)(v2 + 80);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v113 = *(void *)(v9 - 8);
  uint64_t v114 = v9;
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  v105 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v110 = (char *)&v91 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  v106 = (char *)&v91 - v15;
  uint64_t v116 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v93 = v16;
  uint64_t v117 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  v95 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v91 - v22;
  uint64_t v24 = *(void *)(v3 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v21);
  uint64_t v27 = (char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = *(void *)(v2 + 168);
  uint64_t v29 = v25;
  __int128 v30 = *(os_unfair_lock_s **)((char *)v1 + v28);
  os_unfair_lock_lock(v30);
  unsigned __int8 v31 = (char *)v1 + *(void *)(*v1 + 128LL);
  swift_beginAccess();
  int8x16_t v32 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  uint64_t v94 = v31;
  v32(v23, v31, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1LL, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v29);
    os_unfair_lock_unlock(v30);
    return;
  }

  uint64_t v102 = v18;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v104 = v27;
  uint64_t v103 = v3;
  v33(v27, v23, v3);
  char v34 = (void *)*v1;
  uint64_t v35 = *(void *)(*v1 + 152LL);
  uint64_t v36 = *(void *)((char *)v1 + v35);
  unint64_t v37 = 0x8000000000000000LL;
  if (v36 != 0x8000000000000000LL)
  {
    if (rawValue != 0x8000000000000000LL)
    {
      if (((v36 | rawValue) & 0x8000000000000000LL) != 0) {
        goto LABEL_52;
      }
      unint64_t v37 = v36 + rawValue;
      if (__OFADD__(v36, rawValue))
      {
        unint64_t v37 = 0x8000000000000000LL;
      }

      else if ((v37 & 0x8000000000000000LL) != 0)
      {
        goto LABEL_53;
      }
    }

    *(void *)((char *)v1 + v35) = v37;
    char v34 = (void *)*v1;
  }

  if ((*((_BYTE *)v1 + v34[20]) & 1) != 0)
  {
    uint64_t v38 = v30;
LABEL_42:
    os_unfair_lock_unlock(v38);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v104, v103);
    return;
  }

  uint64_t v109 = v34[20];
  os_unfair_lock_t v101 = v30;
  uint64_t v92 = v29;
  uint64_t v39 = (char *)v1 + v34[18];
  uint64_t v40 = (void *)((char *)v1 + v34[17]);
  swift_beginAccess();
  uint64_t v41 = v116;
  uint64_t v42 = v113;
  uint64_t v43 = v114;
  uint64_t v108 = v39;
  Swift::UInt rawValue = (Swift::UInt)v1;
  v99 = v40;
  uint64_t v100 = v24;
  uint64_t v112 = v35;
  while (1)
  {
    uint64_t v44 = *(void *)((char *)v1 + v35);
    if (v44 == 0x8000000000000000LL) {
      goto LABEL_17;
    }
    if (v44 < 0) {
      break;
    }
    if (!v44) {
      goto LABEL_41;
    }
LABEL_17:
    if (!v1[2])
    {
LABEL_41:
      uint64_t v38 = v101;
      goto LABEL_42;
    }

    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    uint64_t v46 = v106;
    v111 = v45;
    v45(v106, v39, v43);
    uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    if (v47(v46, 1LL, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v113 + 8))(v46, v114);
      v1[2] = 0LL;
      swift_bridgeObjectRelease();
      uint64_t v74 = v95;
      uint64_t v75 = v103;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v95, 1LL, 1LL, v103);
      uint64_t v76 = v94;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v102 + 40))(v76, v74, v92);
      swift_endAccess();
      os_unfair_lock_unlock(v101);
      uint64_t v77 = v97;
      v78 = v96;
      uint64_t v79 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v96, (char *)v1 + *(void *)(*v1 + 120LL), v98);
      uint64_t v80 = v104;
      (*(void (**)(char *, uint64_t))(v107 + 56))(v78, v75);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v80, v75);
      return;
    }

    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v117, v46, v8);
    uint64_t v48 = *(void *)((char *)v1 + v35);
    if (v48 != 0x8000000000000000LL)
    {
      if (v48 < 0) {
        goto LABEL_47;
      }
      if (!v48) {
        goto LABEL_48;
      }
      *(void *)((char *)v1 + v35) = v48 - 1;
    }

    swift_beginAccess();
    uint64_t v49 = v40[1];
    if (v49 == MEMORY[0x186E220A8](*v40, v8))
    {
      uint64_t v50 = 1LL;
      uint64_t v51 = v116;
      uint64_t v52 = v103;
    }

    else
    {
      uint64_t v53 = v103;
      uint64_t v54 = *v40;
      uint64_t v55 = v40[1];
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v51 = v116;
        (*(void (**)(char *, unint64_t, uint64_t))(v116 + 16))( v110,  v54 + ((*(unsigned __int8 *)(v51 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
        + *(void *)(v116 + 72) * v55,
          v8);
      }

      else
      {
        uint64_t v73 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v93 != 8) {
          goto LABEL_54;
        }
        uint64_t v118 = v73;
        uint64_t v51 = v116;
        (*(void (**)(char *, uint64_t *, uint64_t))(v116 + 16))(v110, &v118, v8);
        swift_unknownObjectRelease();
      }

      uint64_t v52 = v53;
      uint64_t v57 = v40[1];
      BOOL v58 = __OFADD__(v57, 1LL);
      uint64_t v59 = v57 + 1;
      if (v58) {
        goto LABEL_49;
      }
      uint64_t v50 = 0LL;
      v40[1] = v59;
    }

    uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    os_unfair_lock_t v61 = v110;
    v60(v110, v50, 1LL, v8);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v42 = v113;
    uint64_t v43 = v114;
    (*(void (**)(char *, char *, uint64_t))(v113 + 40))(v39, v61, v114);
    swift_endAccess();
    uint64_t v62 = v39;
    uint64_t v63 = v8;
    uint64_t v64 = v109;
    Swift::UInt v65 = rawValue;
    *(_BYTE *)(rawValue + v109) = 1;
    uint64_t v66 = v101;
    os_unfair_lock_unlock(v101);
    uint64_t v67 = (*(uint64_t (**)(char *, uint64_t))(v107 + 48))(v117, v52);
    os_unfair_lock_lock(v66);
    uint64_t v68 = *(void *)(v65 + v112);
    uint64_t v69 = v102;
    if (v68 != 0x8000000000000000LL)
    {
      unint64_t v70 = 0x8000000000000000LL;
      if (v67 != 0x8000000000000000LL)
      {
        if ((v68 | v67) < 0) {
          goto LABEL_50;
        }
        unint64_t v70 = v68 + v67;
        if (__OFADD__(v68, v67))
        {
          unint64_t v70 = 0x8000000000000000LL;
        }

        else if ((v70 & 0x8000000000000000LL) != 0)
        {
          goto LABEL_51;
        }
      }

      *(void *)(v65 + v112) = v70;
      uint64_t v42 = v113;
      uint64_t v43 = v114;
      uint64_t v62 = v108;
      uint64_t v64 = v109;
    }

    *(_BYTE *)(v65 + v64) = 0;
    uint64_t v71 = v105;
    v111(v105, v62, v43);
    unsigned int v72 = v47(v71, 1LL, v63);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v71, v43);
    uint64_t v8 = v63;
    if (v72 == 1)
    {
      Swift::UInt v81 = rawValue;
      *(void *)(rawValue + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0LL;
      swift_bridgeObjectRelease();
      uint64_t v82 = v100;
      uint64_t v83 = v95;
      uint64_t v84 = v103;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v95, 1LL, 1LL, v103);
      uint64_t v85 = v94;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v69 + 40))(v85, v83, v92);
      swift_endAccess();
      os_unfair_lock_unlock(v101);
      Swift::UInt v86 = v81 + *(void *)(*(void *)v81 + 120LL);
      uint64_t v87 = v97;
      uint64_t v88 = v96;
      uint64_t v89 = v98;
      (*(void (**)(char *, Swift::UInt, uint64_t))(v97 + 16))(v96, v86, v98);
      uint64_t v90 = v104;
      (*(void (**)(char *, uint64_t))(v107 + 56))(v88, v84);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v63);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v90, v84);
      return;
    }

    uint64_t v41 = v116;
    (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v63);
    uint64_t v24 = v100;
    uint64_t v35 = v112;
    uint64_t v39 = v108;
    uint64_t v1 = (void *)rawValue;
    uint64_t v40 = v99;
  }

  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
}

uint64_t Record.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6964726F636572LL && a2 == 0xE900000000000067LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

void protocol witness for Subscription.request(_:) in conformance Record<A, B>.Inner<A1>( Combine::Subscribers::Demand a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.Inner<A1>()
{
  return Record.Inner.description.getter();
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Record<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Record<A, B>.Inner<A1>@<X0>( uint64_t *a1@<X8>)
{
  return Record.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Record<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.CodingKeys()
{
  return 1LL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.CodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Record<A, B>.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Record<A, B>.CodingKeys()
{
  return 0x6E6964726F636572LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Record<A, B>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = Record.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Record<A, B>.CodingKeys()
{
  return 0LL;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Record<A, B>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.CodingKeys();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Record<A, B>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t Record.Recording<>.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Record.Recording<>.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t Record.Recording<>.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6974656C706D6F63LL;
  }
  else {
    return 0x74757074756FLL;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Record<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Record.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.Recording<>.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.Recording<>.CodingKeys( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Record<A, B>.Recording<>.CodingKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.Recording<>.CodingKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = Record.Recording<>.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Record<A, B>.Recording<>.CodingKeys@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Record.Recording<>.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Record<A, B>.Recording<>.CodingKeys()
{
  return Record.Recording<>.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = Record.Recording<>.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized Record.Recording<>.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.Recording<>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Record<A, B>.Recording<>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

void Record.Recording<>.init(from:)( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  v16[3] = a8;
  uint64_t v17 = type metadata accessor for Subscribers.Completion(0LL, a2, a7, a3);
  v16[2] = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  v16[6] = (char *)v16 - v15;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v19 = a3;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v18 = a5;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  type metadata accessor for Record.Recording<>.CodingKeys();
}

uint64_t sub_183AF456C(uint64_t a1)
{
  uint64_t v6 = type metadata accessor for KeyedDecodingContainer();
  *(void *)(v5 - 184) = v6;
  *(void *)(v5 - 232) = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = &v24[-v7];
  *(void *)(v5 - 200) = v3;
  uint64_t v9 = type metadata accessor for Record.Recording(0LL, v3, v4, v2);
  *(void *)(v5 - 240) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = &v24[-v11];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  *(void *)(v5 - 176) = v8;
  uint64_t v13 = *(void *)(v5 - 168);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
  {
    uint64_t v23 = (uint64_t)v1;
  }

  else
  {
    *(void *)(v5 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 72) = v12;
    *(void *)(v5 - 264) = v10;
    uint64_t v14 = *(void *)(v5 - 240);
    uint64_t v15 = *(void *)(v5 - 232);
    uint64_t v16 = *(void *)(v5 - 224);
    *(void *)(v5 - 168) = v1;
    uint64_t v17 = *(void *)(v5 - 216);
    uint64_t v18 = *(void *)(v5 - 208);
    uint64_t v19 = type metadata accessor for Array();
    *(_BYTE *)(v5 - 65) = 0;
    *(void *)(v5 - 152) = *(void *)(v5 - 192);
    MEMORY[0x186E22960](MEMORY[0x189618478], v19, v5 - 152);
    uint64_t v20 = *(void *)(v5 - 184);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v5 - 192) = *(void *)(v5 - 144);
    *(_BYTE *)(v5 - 144) = 1;
    *(void *)(v5 - 160) = v18;
    MEMORY[0x186E22960](&protocol conformance descriptor for <> Subscribers.Completion<A>, v17, v5 - 160);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(void, uint64_t))(v15 + 8))(*(void *)(v5 - 176), v20);
    uint64_t v22 = *(void *)(v5 - 272);
    *(void *)(v22 + 8) = *(void *)(v5 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 256) + 32LL))( v22 + *(int *)(v14 + 48),  v16,  v17);
    *(_BYTE *)uint64_t v22 = 1;
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v5 - 264) + 32LL))(*(void *)(v5 - 248), v22, v14);
    uint64_t v23 = *(void *)(v5 - 168);
  }

  return __swift_destroy_boxed_opaque_existential_1(v23);
}

void Record.Recording<>.encode(into:)()
{
}

uint64_t sub_183AF4840(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v13 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v7 = *(void *)(v2 - 184);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)(v2 - 136) = *(void *)(v7 + 8);
  *(_BYTE *)(v2 - 65) = 0;
  uint64_t v8 = type metadata accessor for Array();
  *(void *)(v2 - 144) = *(void *)(v2 - 168);
  MEMORY[0x186E22960](MEMORY[0x189618448], v8, v2 - 144);
  uint64_t v9 = *(void *)(v2 - 160);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    *(_BYTE *)(v2 - 136) = 1;
    uint64_t v11 = type metadata accessor for Subscribers.Completion(0LL, *(void *)(v2 - 200), *(void *)(v2 - 208), v10);
    *(void *)(v2 - 152) = *(void *)(v2 - 192);
    MEMORY[0x186E22960](&protocol conformance descriptor for <> Subscribers.Completion<A>, v11, v2 - 152);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void Record.Recording<>.encode(to:)()
{
}

uint64_t sub_183AF4A18(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v13 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v7 = *(void *)(v2 - 184);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)(v2 - 136) = *(void *)(v7 + 8);
  *(_BYTE *)(v2 - 65) = 0;
  uint64_t v8 = type metadata accessor for Array();
  *(void *)(v2 - 144) = *(void *)(v2 - 168);
  MEMORY[0x186E22960](MEMORY[0x189618448], v8, v2 - 144);
  uint64_t v9 = *(void *)(v2 - 160);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    *(_BYTE *)(v2 - 136) = 1;
    uint64_t v11 = type metadata accessor for Subscribers.Completion(0LL, *(void *)(v2 - 200), *(void *)(v2 - 208), v10);
    *(void *)(v2 - 152) = *(void *)(v2 - 192);
    MEMORY[0x186E22960](&protocol conformance descriptor for <> Subscribers.Completion<A>, v11, v2 - 152);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording( uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Record.Recording<>.init(from:));
}

void protocol witness for Encodable.encode(to:) in conformance <> Record<A, B>.Recording()
{
}

  ;
}

uint64_t Record<>.encode(to:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v18 = a3;
  uint64_t v7 = a2[3];
  uint64_t v16 = a2[2];
  uint64_t v8 = a2[4];
  uint64_t v9 = type metadata accessor for Record.CodingKeys(255LL, v16, v7, v8);
  MEMORY[0x186E22960](&protocol conformance descriptor for Record<A, B>.CodingKeys, v9);
  uint64_t v10 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v17 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v15 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = type metadata accessor for Record.Recording(0LL, v16, v7, v8);
  v22[0] = v18;
  v22[1] = v19;
  v22[2] = v20;
  v22[3] = v21;
  MEMORY[0x186E22960](&protocol conformance descriptor for <> Record<A, B>.Recording, v13, v22);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v12, v10);
}

uint64_t Record<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v31 = a9;
  uint64_t v36 = type metadata accessor for Record.Recording(0LL, a2, a3, a8);
  uint64_t v30 = *(void *)(v36 - 8);
  MEMORY[0x1895F8858](v36);
  unint64_t v37 = (char *)&v27 - v13;
  uint64_t v14 = type metadata accessor for Record.CodingKeys(255LL, a2, a3, a8);
  MEMORY[0x186E22960](&protocol conformance descriptor for Record<A, B>.CodingKeys, v14);
  uint64_t v38 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v28 = *(void *)(v38 - 8);
  MEMORY[0x1895F8858](v38);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v27 = type metadata accessor for Record(0LL, a2, a3, a8);
  uint64_t v17 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v19 = (char *)&v27 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v29 = v16;
  uint64_t v20 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    uint64_t v40 = v17;
    uint64_t v21 = v28;
    uint64_t v22 = v30;
    uint64_t v23 = v31;
    v39[0] = v32;
    v39[1] = v33;
    uint64_t v24 = v36;
    v39[2] = v34;
    v39[3] = v35;
    MEMORY[0x186E22960](&protocol conformance descriptor for <> Record<A, B>.Recording, v36, v39);
    uint64_t v25 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v38);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v37, v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v23, v19, v27);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>( uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Record<>.init(from:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording( uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4( a1,  a2[2],  a2[3],  *(void *)(a3 - 8),  *(void *)(a3 - 16),  *(void *)(a3 - 24),  *(void *)(a3 - 32),  a2[4]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Record<A, B>( void *a1, void *a2, uint64_t a3)
{
  return Record<>.encode(to:)( a1,  a2,  *(void *)(a3 - 8),  *(void *)(a3 - 16),  *(void *)(a3 - 24),  *(void *)(a3 - 32));
}

void type metadata accessor for Record.Inner()
{
}

uint64_t specialized Record.Inner.init(downstream:sequence:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a3;
  uint64_t v50 = a1;
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = *(void *)(*(void *)v3 + 80LL);
  uint64_t v51 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v51 - 8);
  MEMORY[0x1895F8858](v51);
  uint64_t v8 = (char *)&v42 - v7;
  uint64_t v9 = v5[12];
  uint64_t v49 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v49 - 8);
  MEMORY[0x1895F8858](v49);
  uint64_t v11 = (char *)&v42 - v10;
  *((void *)v3 + 2) = 0LL;
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(&v3[v5[16]], 1LL, 1LL, v9);
  uint64_t v14 = &v3[*(void *)(*(void *)v3 + 144LL)];
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v45(v14, 1LL, 1LL, v6);
  *(void *)&v3[*(void *)(*(void *)v3 + 152LL)] = 0LL;
  v3[*(void *)(*(void *)v3 + 160LL)] = 0;
  uint64_t v15 = *(void *)(*(void *)v3 + 168LL);
  uint64_t v16 = (_DWORD *)swift_slowAlloc();
  *uint64_t v16 = 0;
  *(void *)&v3[v15] = v16;
  uint64_t v44 = a2;
  *((void *)v3 + 2) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = &v3[*(void *)(*(void *)v3 + 120LL)];
  uint64_t v18 = v5[11];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = v18;
  uint64_t v21 = v8;
  uint64_t v23 = type metadata accessor for Subscribers.Completion(0LL, v20, AssociatedConformanceWitness, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL))(v17, v47, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v50, v9);
  v13(v11, 0LL, 1LL, v9);
  uint64_t v24 = v48;
  uint64_t v25 = &v3[*(void *)(*(void *)v3 + 128LL)];
  swift_beginAccess();
  uint64_t v26 = v11;
  uint64_t v27 = v45;
  (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v25, v26, v49);
  swift_endAccess();
  uint64_t v28 = &v3[*(void *)(*(void *)v3 + 136LL)];
  *(void *)uint64_t v28 = v44;
  *((void *)v28 + 1) = 0LL;
  swift_beginAccess();
  uint64_t v29 = *((void *)v28 + 1);
  uint64_t v30 = MEMORY[0x186E220A8](*(void *)v28, v6);
  uint64_t v31 = 1LL;
  BOOL v32 = v29 == v30;
  uint64_t v33 = v51;
  if (v32) {
    goto LABEL_6;
  }
  uint64_t v35 = *(void *)v28;
  uint64_t v34 = *((void *)v28 + 1);
  Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
  Array._checkSubscript(_:wasNativeTypeChecked:)();
  if (IsNativeType)
  {
    uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v43 + 16))( v21,  v35 + ((*(unsigned __int8 *)(v43 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
             + *(void *)(v43 + 72) * v34,
               v6);
  }

  else
  {
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (*(void *)(v43 + 64) != 8LL) {
      goto LABEL_10;
    }
    uint64_t v52 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v43 + 16))(v21, &v52, v6);
    uint64_t result = swift_unknownObjectRelease();
  }

  uint64_t v38 = *((void *)v28 + 1);
  BOOL v39 = __OFADD__(v38, 1LL);
  uint64_t v40 = v38 + 1;
  if (!v39)
  {
    uint64_t v31 = 0LL;
    *((void *)v28 + 1) = v40;
LABEL_6:
    v27(v21, v31, 1LL, v6);
    swift_endAccess();
    uint64_t v41 = &v3[*(void *)(*(void *)v3 + 144LL)];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v41, v21, v33);
    swift_endAccess();
    return (uint64_t)v3;
  }

  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

void type metadata accessor for Record.Recording<>.CodingKeys()
{
}

uint64_t type metadata accessor for Record.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Record.CodingKeys);
}

uint64_t type metadata accessor for Record(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Record);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Record<A, B>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t type metadata instantiation function for Record()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Record(uint64_t *a1)
{
  uint64_t result = type metadata accessor for Record.Recording(319LL, a1[2], a1[3], a1[4]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Record(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v5) {
    uint64_t v8 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v8 = *(void *)(v4 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v8 + ((v9 + 16) & ~v9);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)(a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

    if (v15 < 2)
    {
LABEL_28:
      unint64_t v17 = a1 & 0xFFFFFFFFFFFFFFF8LL;
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v9 + 16) & ~v9);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0LL;
        }
      }

      else
      {
        unint64_t v18 = *(void *)(v17 + 8);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }

  int v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11)) {
    goto LABEL_28;
  }
LABEL_21:
  int v16 = (v13 - 1) << v12;
  if ((_DWORD)v11)
  {
    __asm { BR              X12 }
  }

  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for Record(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6 = 0u;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((*(unsigned __int8 *)(v7 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  BOOL v13 = a3 >= v10;
  unsigned int v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      unsigned int v6 = 1u;
      if (v10 < a2) {
        goto LABEL_19;
      }
      goto LABEL_26;
    }

    unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        unsigned int v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            int v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }

            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }

            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }

        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }

        __asm { BR              X10 }
      }

LABEL_26:
      __asm { BR              X15 }
    }

    if (v15 >= 0x100) {
      unsigned int v6 = 2;
    }
    else {
      unsigned int v6 = v15 > 1;
    }
  }

  if (v10 < a2) {
    goto LABEL_19;
  }
  goto LABEL_26;
}

      __asm { BR              X15 }
    }

    if (v15 >= 0x100) {
      unsigned int v6 = 2;
    }
    else {
      unsigned int v6 = v15 > 1;
    }
  }

  if (v10 < a2) {
    goto LABEL_19;
  }
  goto LABEL_26;
}

    size_t v12 = (v18 - 1) & v18;
    BOOL v13 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_27:
    unsigned int v15 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
    unsigned int v16 = swift_retain();
    if (!v15) {
      goto LABEL_30;
    }
    while (1)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 80LL))(v16);
      swift_release();
      unsigned int v6 = v14;
      uint64_t v7 = v12;
      if ((v3 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ObservableObjectPublisher.Conduit();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unsigned int v15 = v20;
        unsigned int v16 = swift_unknownObjectRelease();
        unsigned int v14 = v6;
        size_t v12 = v7;
        if (v20) {
          continue;
        }
      }

      goto LABEL_30;
    }
  }

  __break(1u);
}

  if (v8 < 2) {
    return 0LL;
  }
  if (v5 >= v7) {
    uint64_t v20 = (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(v6 + 48))((v12 + a1) & ~v11);
  }
  if (v20 >= 2) {
    return v20 - 1;
  }
  else {
    return 0LL;
  }
}

    __break(1u);
LABEL_27:
    __break(1u);
    return;
  }

  if ((*(_BYTE *)(v1 + v4[17]) & 1) != 0 || (*(_BYTE *)(v1 + v4[18]) & 1) != 0 || (*(_BYTE *)(v1 + v4[19]) & 1) != 0) {
    goto LABEL_23;
  }
  int v8 = (uint64_t *)(v1 + v4[16]);
  swift_beginAccess();
  unsigned int v9 = *v8;
  unsigned int v10 = *(os_unfair_lock_s **)(v1 + v3);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10);
  uint64_t v11 = *(void *)(v9 + 16);
  if (v11)
  {
    size_t v12 = v9 + 32;
    do
    {
      outlined init with copy of Subscription?(v12, (uint64_t)v15);
      unsigned int v14 = v16;
      if (v16)
      {
        BOOL v13 = v17;
        __swift_project_boxed_opaque_existential_1(v15, v16);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(a1, v14, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      }

      else
      {
        outlined destroy of Subscription?((uint64_t)v15);
      }

      v12 += 40LL;
      --v11;
    }

    while (v11);
  }

  swift_bridgeObjectRelease();
}

void sub_183AF5824()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
}

void sub_183AF582C()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
}

void sub_183AF584C()
{
  *uint64_t v0 = v1;
}

void sub_183AF5854()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_183AF5864()
{
  *uint64_t v0 = v1;
}

uint64_t type metadata completion function for Record.Recording( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Subscribers.Completion(319LL, *(void *)(a1 + 24), *(void *)(a1 + 32), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1LL;
  }
  int v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    uint64_t v12 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
    BOOL v13 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8LL) + v7 + 16) & ~v7);
    unsigned int v14 = (const void *)(((a2 & 0xFFFFFFFFFFFFFFF8LL) + v7 + 16) & ~v7);
    unsigned int v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v15(v14, 1LL, v4))
    {
      memcpy(v13, v14, v8);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v13, v14, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v13, 0LL, 1LL, v4);
    }
  }

  return v3;
}

uint64_t destroy for Record(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1LL, v4);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  }
  return result;
}

unint64_t initializeWithCopy for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)((v6 + 16 + (a1 & 0xFFFFFFFFFFFFFFF8LL)) & ~v6);
  size_t v8 = (const void *)((v6 + 16 + (a2 & 0xFFFFFFFFFFFFFFF8LL)) & ~v6);
  int v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  if (v9(v8, 1LL, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v10 = *(void *)(v5 + 64);
    }
    else {
      size_t v10 = *(void *)(v5 + 64) + 1LL;
    }
    memcpy(v7, v8, v10);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0LL, 1LL, v4);
  }

  return a1;
}

unint64_t assignWithCopy for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)((v9 + 16 + v5) & ~v9);
  uint64_t v11 = (void *)((v9 + 16 + v6) & ~v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD((*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = v12(v10, 1LL, v7);
  int v13 = v12(v11, 1LL, v7);
  if ((_DWORD)v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0LL, 1LL, v7);
      return a1;
    }
  }

  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }

  if (*(_DWORD *)(v8 + 84)) {
    size_t v14 = *(void *)(v8 + 64);
  }
  else {
    size_t v14 = *(void *)(v8 + 64) + 1LL;
  }
  memcpy(v10, v11, v14);
  return a1;
}

unint64_t initializeWithTake for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)((v6 + 16 + (a1 & 0xFFFFFFFFFFFFFFF8LL)) & ~v6);
  uint64_t v8 = (const void *)((v6 + 16 + (a2 & 0xFFFFFFFFFFFFFFF8LL)) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1LL, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1LL;
    }
    memcpy(v7, v8, v9);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0LL, 1LL, v4);
  }

  return a1;
}

unint64_t assignWithTake for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8LL) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)((v9 + 16 + v5) & ~v9);
  uint64_t v11 = (void *)((v9 + 16 + v6) & ~v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD((*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = v12(v10, 1LL, v7);
  int v13 = v12(v11, 1LL, v7);
  if ((_DWORD)v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0LL, 1LL, v7);
      return a1;
    }
  }

  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, v7);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  }

  if (*(_DWORD *)(v8 + 84)) {
    size_t v14 = *(void *)(v8 + 64);
  }
  else {
    size_t v14 = *(void *)(v8 + 64) + 1LL;
  }
  memcpy(v10, v11, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Record.Recording(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v5) {
    uint64_t v8 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v8 = *(void *)(v4 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v8 + ((v9 + 16) & ~v9);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)(a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }

    if (v15 < 2)
    {
LABEL_28:
      unint64_t v17 = a1 & 0xFFFFFFFFFFFFFFF8LL;
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v9 + 16) & ~v9);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0LL;
        }
      }

      else
      {
        unint64_t v18 = *(void *)(v17 + 8);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }

  int v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11)) {
    goto LABEL_28;
  }
LABEL_21:
  int v16 = (v13 - 1) << v12;
  if ((_DWORD)v11)
  {
    __asm { BR              X12 }
  }

  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for Record.Recording(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6 = 0u;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((*(unsigned __int8 *)(v7 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  BOOL v13 = a3 >= v10;
  unsigned int v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      unsigned int v6 = 1u;
      if (v10 < a2) {
        goto LABEL_19;
      }
      goto LABEL_26;
    }

    unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        unsigned int v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            int v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }

            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }

            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }

        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }

        __asm { BR              X10 }
      }

void sub_183AF6254()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
}

void sub_183AF625C()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
}

void sub_183AF627C()
{
  *uint64_t v0 = v1;
}

void sub_183AF6284()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_183AF6294()
{
  *uint64_t v0 = v1;
}

uint64_t type metadata completion function for Record.Inner(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for Subscribers.Completion(319LL, v1, AssociatedConformanceWitness, v3);
  if (v5 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v6 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Optional();
      if (v7 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }

  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTag for Record.Recording.State(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for Record.Recording.State(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for Record.Recording.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Record.Recording.State);
}

uint64_t getEnumTagSinglePayload for Record.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for Record.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_183AF647C + 4 * byte_183B9DB84[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183AF649C + 4 * byte_183B9DB89[v4]))();
  }
}

_BYTE *sub_183AF647C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_183AF649C(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183AF64A4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183AF64AC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_183AF64B4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_183AF64BC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t getEnumTag for Record.CodingKeys()
{
  return 0LL;
}

uint64_t getEnumTagSinglePayload for Record.Recording.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for Record.Recording.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183AF65AC + 4 * byte_183B9DB93[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183AF65E0 + 4 * byte_183B9DB8E[v4]))();
}

uint64_t sub_183AF65E0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183AF65E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183AF65F0LL);
  }
  return result;
}

uint64_t sub_183AF65FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183AF6604LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183AF6608(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183AF6610(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Record<A, B>.Recording<>.CodingKeys()
{
}

void base witness table accessor for Equatable in Record<A, B>.CodingKeys()
{
}

void base witness table accessor for Equatable in Record<A, B>.Recording.State()
{
}

void base witness table accessor for CustomDebugStringConvertible in Record<A, B>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Record<A, B>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in Record<A, B>.Recording<>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Record<A, B>.Recording<>.CodingKeys()
{
}

uint64_t specialized Record.Recording<>.CodingKeys.init(intValue:)()
{
  return 2LL;
}

uint64_t Publisher.filter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.Filter,  a5);
}

uint64_t Publishers.Filter.init(upstream:isIncluded:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.Filter,  a6);
}

uint64_t type metadata accessor for Publishers.Filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Filter);
}

uint64_t Publisher.tryFilter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryFilter,  a5);
}

uint64_t Publishers.TryFilter.init(upstream:isIncluded:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryFilter,  a6);
}

uint64_t type metadata accessor for Publishers.TryFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryFilter);
}

uint64_t Publishers.Filter.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.Filter.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183AF6770( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v11, *(void *)(v12 - 128), v9);
  swift_retain();
  Publishers.Filter.Inner.init(downstream:filter:)(v11, v9, (uint64_t)v14);
}

uint64_t sub_183AF67E8()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Filter<A>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v4, v2, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

void type metadata accessor for Publishers.Filter.Inner()
{
}

void Publishers.Filter.Inner.init(downstream:filter:)( uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

void sub_183AF68B0(uint64_t a1)
{
  uint64_t v4 = (void *)(v1 + *(int *)(a1 + 52));
  *uint64_t v4 = v3;
  v4[1] = v2;
  uint64_t v5 = *(int *)(a1 + 56);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  unsigned int v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(void *)(v1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v7;
  }

uint64_t Publishers.Filter.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v9, 1LL, 1LL, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Filter.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x7265746C6946LL;
  a1[1] = 0xE600000000000000LL;
}

uint64_t Publishers.Filter.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 40LL))(a1, *(void *)(a2 + 24));
}

uint64_t Publishers.Filter.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 56LL))(a1, *(void *)(a2 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Filter<A>.Inner<A1>()
{
  return 0x7265746C6946LL;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Filter<A>.Inner<A1>@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 56));
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Filter<A>( uint64_t a1)
{
}

void Publishers.TryFilter.receive<A>(subscriber:)()
{
}

uint64_t sub_183AF6B3C(uint64_t a1)
{
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(v2 + 36));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  swift_allocObject();
  swift_retain();
  uint64_t v12 = specialized Publishers.TryFilter.Inner.init(downstream:filter:)(v3, v8, v9);
  uint64_t v10 = MEMORY[0x186E22960](&protocol conformance descriptor for FilterProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v12, v4, a1, v5, v10);
  return swift_release();
}

void type metadata accessor for Publishers.TryFilter.Inner()
{
}

uint64_t Publishers.TryFilter.Inner.description.getter()
{
  return 0x65746C6946797254LL;
}

uint64_t Publishers.TryFilter.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v11);
  int v5 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (v5 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a2, 0LL, 1LL, AssociatedTypeWitness);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, 1LL, 1LL, AssociatedTypeWitness);
  }

  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0LL, v8, v9, MEMORY[0x18961A3E8]);
  return swift_storeEnumTagMultiPayload();
}

void Publishers.TryFilter.Inner.__deallocating_deinit()
{
}

uint64_t sub_183AF6D6C()
{
  return swift_deallocClassInstance();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryFilter<A>()
{
}

uint64_t Publishers.Filter.filter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  uint64_t v20 = (uint64_t (**)(uint64_t))(a4
                                         + *(int *)(type metadata accessor for Publishers.Filter(0LL, v8, v18, v19) + 36));
  *uint64_t v20 = partial apply for closure #1 in Publishers.Filter.filter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.Filter.filter(_:)( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  char v11 = a2(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, AssociatedTypeWitness);
  if ((v11 & 1) != 0) {
    char v12 = a4(v10);
  }
  else {
    char v12 = 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return v12 & 1;
}

uint64_t Publishers.Filter.tryFilter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](a1);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  uint64_t v20 = (uint64_t (**)(uint64_t))(a4
  *uint64_t v20 = partial apply for closure #1 in Publishers.Filter.tryFilter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t Publishers.TryFilter.filter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](a1);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  uint64_t v20 = (uint64_t (**)(uint64_t))(a4
  *uint64_t v20 = partial apply for closure #1 in Publishers.TryFilter.filter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t Publishers.TryFilter.tryFilter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](a1);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  uint64_t v20 = (uint64_t (**)(uint64_t))(a4
  *uint64_t v20 = partial apply for closure #1 in Publishers.TryFilter.tryFilter(_:);
  v20[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t *specialized Publishers.TryFilter.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 280LL);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v10 + 16))(v9);
  char v11 = (void *)swift_allocObject();
  v11[2] = v6[34];
  v11[3] = v7;
  v11[4] = v6[36];
  v11[5] = v6[37];
  v11[6] = a2;
  v11[7] = a3;
  v13[0] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error);
  v13[1] = v11;
  return FilterProducer.init(downstream:filter:)((uint64_t)v9, (uint64_t)v13);
}

uint64_t partial apply for closure #1 in Publishers.Filter.filter(_:)(uint64_t a1)
{
  return closure #1 in Publishers.Filter.filter(_:)( a1,  *(uint64_t (**)(uint64_t))(v1 + 32),  *(void *)(v1 + 40),  *(uint64_t (**)(char *))(v1 + 48));
}

uint64_t partial apply for closure #1 in Publishers.Filter.tryFilter(_:)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 48);
  else {
    return 0LL;
  }
}

uint64_t partial apply for closure #1 in Publishers.TryFilter.filter(_:)(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 48);
  char v5 = (*(uint64_t (**)(void))(v1 + 32))();
  if (v2 || (v5 & 1) == 0) {
    return 0LL;
  }
  else {
    return v4(a1) & 1;
  }
}

uint64_t objectdestroyTm()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.TryFilter.tryFilter(_:)(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 48);
  char v5 = (*(uint64_t (**)(void))(v1 + 32))();
  if (!v2)
  {
    if ((v5 & 1) != 0) {
      char v5 = v4(a1);
    }
    else {
      char v5 = 0;
    }
  }

  return v5 & 1;
}

uint64_t getEnumTagSinglePayload for Publishers.Filter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AF7574 + 4 * byte_183B9E188[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.Filter( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AF76EC()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF7764LL);
}

void sub_183AF76F4(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AF76FCLL);
  }
  JUMPOUT(0x183AF7764LL);
}

void sub_183AF773C()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF7764LL);
}

void sub_183AF7744()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF7764LL);
}

uint64_t sub_183AF774C(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183AF7764LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183AF7760LL);
    }
    JUMPOUT(0x183AF7758LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.TryFilter.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Publishers.Filter.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Filter.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    char v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v12 = v11[1];
    *unsigned int v10 = *v11;
    v10[1] = v12;
    *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8LL);
  }

  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8LL);
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(v9 & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x186E22954](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_183AF7AB4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>( _BYTE *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)( *(uint64_t (**)(void))(v1 + 48),  a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2) {
    *a1 = result & 1;
  }
  return result;
}

uint64_t Publisher.breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v29 = a8;
  uint64_t v17 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v21, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9, v19, a7);
  uint64_t v23 = (int *)type metadata accessor for Publishers.Breakpoint(0LL, a7, v29, v22);
  uint64_t v24 = (uint64_t *)(a9 + v23[9]);
  *uint64_t v24 = a1;
  v24[1] = a2;
  uint64_t v25 = (uint64_t *)(a9 + v23[10]);
  *uint64_t v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (uint64_t *)(a9 + v23[11]);
  *uint64_t v26 = a5;
  v26[1] = a6;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a1);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a3);
  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a5);
}

int *Publishers.Breakpoint.init(upstream:receiveSubscription:receiveOutput:receiveCompletion:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t result = (int *)type metadata accessor for Publishers.Breakpoint(0LL, a8, a10, v18);
  uint64_t v20 = (void *)(a9 + result[9]);
  *uint64_t v20 = a2;
  v20[1] = a3;
  uint64_t v21 = (void *)(a9 + result[10]);
  *uint64_t v21 = a4;
  v21[1] = a5;
  uint64_t v22 = (void *)(a9 + result[11]);
  *uint64_t v22 = a6;
  v22[1] = a7;
  return result;
}

uint64_t type metadata accessor for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Breakpoint);
}

uint64_t Publisher.breakpointOnError()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + outlined destroy of AnyCancellable.Storage(v0 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  Publisher.breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)( 0LL,  0LL,  0LL,  0LL,  (uint64_t)partial apply for closure #1 in Publisher.breakpointOnError(),  v6,  a1,  a2,  a3);
  return swift_release();
}

BOOL closure #1 in Publisher.breakpointOnError()(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - v7, a1, v5);
  BOOL v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48LL))( v8,  1LL,  AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t sub_183AF7E44()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Publisher.breakpointOnError()(uint64_t a1)
{
  return closure #1 in Publisher.breakpointOnError()(a1);
}

uint64_t Publishers.Breakpoint.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.Breakpoint.receiveSubscription.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.Breakpoint.receiveOutput.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 40));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.Breakpoint.receiveCompletion.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 44));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

void Publishers.Breakpoint.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v2 = (char *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 16);
  v7[1] = v2;
  __int128 v7[2] = v4;
  uint64_t v9 = v8;
  uint64_t v10 = v5;
  uint64_t v11 = v4;
  uint64_t v12 = v6;
  type metadata accessor for Publishers.Breakpoint.Inner();
}

void sub_183AF7F98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v15 - 136) = a1;
  *(void *)(v15 - 120) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&a9 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v14, v12);
  uint64_t v18 = *(void *)(v10 + v13[9]);
  uint64_t v19 = *(void *)(v10 + v13[10]);
  uint64_t v20 = *(void *)(v10 + v13[11]);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v18);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v19);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v20);
  Publishers.Breakpoint.Inner.init(downstream:receiveSubscription:receiveOutput:receiveCompletion:)( *(void *)(v15 - 152),  (uint64_t)v17,  v12);
}

uint64_t sub_183AF805C()
{
  uint64_t v4 = *(void *)(v3 - 136);
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Breakpoint<A>.Inner<A1>, v4);
  Publisher.subscribe<A>(_:)(v2, v0, v4, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 120) + 8LL))(v2, v4);
}

void type metadata accessor for Publishers.Breakpoint.Inner()
{
}

void Publishers.Breakpoint.Inner.init(downstream:receiveSubscription:receiveOutput:receiveCompletion:)( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
}

void sub_183AF8140(int *a1)
{
  uint64_t v7 = (void *)(v1 + a1[13]);
  *uint64_t v7 = v6;
  v7[1] = v5;
  uint64_t v8 = (void *)(v1 + a1[14]);
  *uint64_t v8 = v4;
  v8[1] = v3;
  uint64_t v9 = (void *)(v1 + a1[15]);
  *uint64_t v9 = v2;
  v9[1] = v13;
  uint64_t v10 = a1[16];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v11 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v12 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v11);
    *(void *)(v1 + v10) = v12;
  }

uint64_t outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>( uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void Publishers.Breakpoint.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x696F706B61657242LL;
  a1[1] = 0xEA0000000000746ELL;
}

uint64_t Publishers.Breakpoint.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 52));
  if (v5)
  {
    swift_retain();
    if ((v5(a1) & 1) != 0) {
      raise(5);
    }
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }

  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 40LL))(a1, *(void *)(a2 + 24));
}

uint64_t Publishers.Breakpoint.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 56));
  if (v5)
  {
    swift_retain();
    if ((v5(a1) & 1) != 0) {
      raise(5);
    }
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }

  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 48LL))(a1, *(void *)(a2 + 24));
}

uint64_t Publishers.Breakpoint.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 60));
  if (v5)
  {
    swift_retain();
    if ((v5(a1) & 1) != 0) {
      raise(5);
    }
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }

  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 56LL))(a1, *(void *)(a2 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Breakpoint<A>.Inner<A1>()
{
  return 0x696F706B61657242LL;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Breakpoint<A>.Inner<A1>@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 64));
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Breakpoint<A>( uint64_t a1)
{
}

uint64_t type metadata completion function for Publishers.Breakpoint()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Breakpoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }

    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain();
    }

    unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    }

    else
    {
      uint64_t v15 = *(void *)(v14 + 8);
      *(void *)unint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v15;
      swift_retain();
    }

    unint64_t v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
      return v4;
    }

    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = v18;
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.Breakpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  uint64_t result = (*(uint64_t (**)(void))(v3 + 8))();
  uint64_t v5 = (void *)((a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v5 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  uint64_t v6 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v6 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }

  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }

  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    swift_retain();
  }

  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
    swift_retain();
  }

  return a1;
}

uint64_t assignWithCopy for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }

  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_15;
    }
  }

  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      swift_retain();
      return a1;
    }

uint64_t initializeWithTake for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }

  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }

  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
  }

  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (uint64_t *)((v11 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v15 = *v14;
  if ((unint64_t)*v14 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = v14[1];
    *(void *)unint64_t v13 = v15;
    *(void *)(v13 + 8) = v16;
  }

  return a1;
}

uint64_t assignWithTake for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }

  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      goto LABEL_15;
    }
  }

  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      return a1;
    }

uint64_t getEnumTagSinglePayload for Publishers.Breakpoint(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AF8BE0 + 4 * byte_183B9E318[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.Breakpoint( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero( a1,  ((((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
    + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AF8D70()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF8DF4LL);
}

void sub_183AF8D78(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AF8D80LL);
  }
  JUMPOUT(0x183AF8DF4LL);
}

void sub_183AF8DC8()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF8DF4LL);
}

void sub_183AF8DD0()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF8DF4LL);
}

uint64_t sub_183AF8DD8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_WORD *)(v6 + v7) = 0;
  if (!a2) {
    goto LABEL_6;
  }
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE) {
      JUMPOUT(0x183AF8DE4LL);
    }
    *(void *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) = a2;
LABEL_6:
    JUMPOUT(0x183AF8DF4LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata completion function for Publishers.Breakpoint.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Breakpoint.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }

    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain();
    }

    unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    }

    else
    {
      uint64_t v15 = *(void *)(v14 + 8);
      *(void *)unint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v15;
      swift_retain();
    }

    unint64_t v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    if (*(void *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    }

    else
    {
      uint64_t v18 = *(void *)(v17 + 8);
      *(void *)unint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v18;
      swift_retain();
    }

    *(void *)((v16 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v17 + 23) & 0xFFFFFFFFFFFFF8LL);
  }

  return v4;
}

uint64_t destroy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8LL);
  uint64_t result = (*(uint64_t (**)(void))(v3 + 8))();
  uint64_t v5 = (void *)((a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v5 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  uint64_t v6 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  if (*v6 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }

  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }

  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    swift_retain();
  }

  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
    swift_retain();
  }

  *(void *)((v13 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v14 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithCopy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }

  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_15;
    }
  }

  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      swift_retain();
      goto LABEL_22;
    }

uint64_t initializeWithTake for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }

  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }

  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
  }

  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
  }

  *(void *)((v13 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v14 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }

  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }

    swift_release();
  }

  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      goto LABEL_15;
    }
  }

  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_release();
      goto LABEL_15;
    }

    swift_release();
  }

  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      goto LABEL_22;
    }

uint64_t getEnumTagSinglePayload for Publishers.Breakpoint.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 8) & 0xFFFFFFF8) != 0)
      unsigned int v8 = 2;
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AF9694 + 4 * byte_183B9E327[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.Breakpoint.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero( a1,  ((((((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 23) & 0xFFFFFFFFFFFFFFF8LL)
    + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AF982C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF98B0LL);
}

void sub_183AF9834(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AF983CLL);
  }
  JUMPOUT(0x183AF98B0LL);
}

void sub_183AF9884()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF98B0LL);
}

void sub_183AF988C()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AF98B0LL);
}

uint64_t sub_183AF9894(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_WORD *)(v6 + v7) = 0;
  if (!a2) {
    goto LABEL_6;
  }
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE) {
      JUMPOUT(0x183AF98A0LL);
    }
    *(void *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) = a2;
LABEL_6:
    JUMPOUT(0x183AF98B0LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata completion function for Publishers.WeakSubscriber()
{
  return swift_initClassMetadata2();
}

void Publishers.WeakSubscriber.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v9 = v0;
  uint64_t v6 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  __int128 v7 = *(_OWORD *)(v1 + 96);
  v8[0] = *(_OWORD *)(v1 + 80);
  v8[1] = v7;
  type metadata accessor for Publishers.WeakSubscriber();
}

uint64_t sub_183AF99D8()
{
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.WeakSubscriber.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "WeakSubscriber");
  *(_BYTE *)(a1 + 15) = -18;
}

uint64_t Publishers.WeakSubscriber.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = MEMORY[0x186E22ABC](v1 + 2);
  if (v4)
  {
    uint64_t v5 = v4;
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v10);
    outlined init with take of Subscription?((uint64_t)v10, (uint64_t)v9);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v9, (uint64_t)(v1 + 3));
    swift_endAccess();
    v10[0] = v5;
    (*(void (**)(void *, void))(*(void *)(v3 + 104) + 40LL))(a1, *(void *)(v3 + 88));
    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v8);
  }

uint64_t Publishers.WeakSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = MEMORY[0x186E22ABC](v1 + 2);
  if (v4)
  {
    v13[0] = v4;
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 104) + 48LL))(a1, *(void *)(v3 + 88));
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v6 = (uint64_t)(v1 + 3);
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 3), (uint64_t)&v10);
    if (*((void *)&v11 + 1))
    {
      outlined init with take of Subscription(&v10, (uint64_t)v13);
      uint64_t v8 = v14;
      uint64_t v7 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v8);
      uint64_t v12 = 0LL;
      __int128 v10 = 0u;
      __int128 v11 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v10, v6);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }

    else
    {
      outlined destroy of Subscription?((uint64_t)&v10);
    }

    return 0LL;
  }

  return v5;
}

uint64_t Publishers.WeakSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t)(v1 + 3);
  uint64_t v4 = *v1;
  uint64_t v14 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v12, (uint64_t)(v1 + 3));
  swift_endAccess();
  uint64_t v5 = MEMORY[0x186E22ABC](v1 + 2);
  if (v5)
  {
    *(void *)&__int128 v12 = v5;
    (*(void (**)(uint64_t, void))(*(void *)(v4 + 104) + 56LL))(a1, *(void *)(v4 + 88));
    return swift_unknownObjectRelease();
  }

  else
  {
    outlined init with copy of Subscription?((uint64_t)(v1 + 3), (uint64_t)&v9);
    if (*((void *)&v10 + 1))
    {
      outlined init with take of Subscription(&v9, (uint64_t)&v12);
      uint64_t v8 = *((void *)&v13 + 1);
      uint64_t v7 = v14;
      __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
      (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v8);
      uint64_t v11 = 0LL;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v9, v3);
      swift_endAccess();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
    }

    else
    {
      return outlined destroy of Subscription?((uint64_t)&v9);
    }
  }

uint64_t Publishers.WeakSubscriber.deinit()
{
  return v0;
}

uint64_t Publishers.WeakSubscriber.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void type metadata accessor for Publishers.WeakSubscriber()
{
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.WeakSubscriber<A, B>( void *a1)
{
  return Publishers.WeakSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.WeakSubscriber<A, B>( uint64_t a1)
{
  return Publishers.WeakSubscriber.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.WeakSubscriber<A, B>( uint64_t a1)
{
  return Publishers.WeakSubscriber.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.WeakSubscriber<A, B>()
{
  return 0x736275536B616557LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.WeakSubscriber<A, B>()
{
}

  ;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.WeakSubscriber<A, B>( uint64_t a1@<X8>)
{
}

uint64_t outlined assign with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t Deferred.createPublisher.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t Deferred.init(createPublisher:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Deferred.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  __int128 v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*v4)(v11);
  Publisher.subscribe<A>(_:)(a1, v9, a3, *(void *)(a2 + 24), a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Deferred<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deferred.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void *initializeBufferWithCopyOfBuffer for Deferred(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for Deferred(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for Deferred(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Deferred(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Deferred(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + outlined destroy of AnyCancellable.Storage(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for Deferred(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Deferred);
}

uint64_t Publisher.allSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.AllSatisfy,  a5);
}

uint64_t Publishers.AllSatisfy.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.AllSatisfy,  a6);
}

uint64_t type metadata accessor for Publishers.AllSatisfy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.AllSatisfy);
}

uint64_t Publisher.tryAllSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryAllSatisfy,  a5);
}

uint64_t Publishers.TryAllSatisfy.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryAllSatisfy,  a6);
}

uint64_t type metadata accessor for Publishers.TryAllSatisfy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TryAllSatisfy);
}

uint64_t Publishers.AllSatisfy.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.AllSatisfy.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.AllSatisfy.Inner()
{
}

uint64_t Publishers.AllSatisfy.Inner.description.getter()
{
  return 0x73697461536C6C41LL;
}

uint64_t Publishers.AllSatisfy.Inner.receive(newValue:)()
{
  (*(void (**)(void *__return_ptr))(v0 + 24))(v4);
  if ((v4[0] & 1) == 0)
  {
    swift_beginAccess();
    *(_BYTE *)(v0 + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0;
  }

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion( 0LL,  MEMORY[0x18961AFC8] + 8LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.AllSatisfy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.TryAllSatisfy.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.AllSatisfy.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void *))
{
  uint64_t v5 = *(void *)(a2 + 24);
  v6[0] = *(void *)(a2 + 16);
  v6[1] = a3;
  __int128 v6[2] = v5;
  void v6[3] = a4;
  a5(0LL, v6);
  JUMPOUT(0x183AFA3D8LL);
}

uint64_t Publishers.TryAllSatisfy.Inner.description.getter()
{
  return 0x61536C6C41797254LL;
}

uint64_t Publishers.TryAllSatisfy.Inner.receive(newValue:)()
{
  (*(void (**)(void *__return_ptr))(v0 + 24))(v2);
  if ((v2[0] & 1) != 0) {
    return 0LL;
  }
  swift_beginAccess();
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + outlined destroy of AnyCancellable.Storage(v0 + 16) = 0;
  return result;
}

uint64_t Publishers.AllSatisfy.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryAllSatisfy.Inner.receive(newValue:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = Publishers.TryAllSatisfy.Inner.receive(newValue:)();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryAllSatisfy<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.TryAllSatisfy.Inner()
{
}

uint64_t *specialized Publishers.AllSatisfy.Inner.init(downstream:initial:reduce:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void **)v6;
  uint64_t v12 = *(void *)(*(void *)v6 + 448LL);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v15 + 16))(v14);
  char v20 = a2;
  unint64_t v16 = (void *)swift_allocObject();
  v16[2] = v11[55];
  v16[3] = v12;
  v16[4] = v11[57];
  v16[5] = v11[58];
  v16[6] = a3;
  void v16[7] = a4;
  v19[0] = a6;
  v19[1] = v16;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v14, (uint64_t)&v20, (uint64_t)v19);
}

uint64_t getEnumTagSinglePayload for Publishers.AllSatisfy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AFA6F0 + 4 * byte_183B9E5D0[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.AllSatisfy( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AFA868()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AFA8E0LL);
}

void sub_183AFA870(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AFA878LL);
  }
  JUMPOUT(0x183AFA8E0LL);
}

void sub_183AFA8B8()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AFA8E0LL);
}

void sub_183AFA8C0()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AFA8E0LL);
}

uint64_t sub_183AFA8C8(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183AFA8E0LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183AFA8DCLL);
    }
    JUMPOUT(0x183AFA8D4LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.AllSatisfy.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t sub_183AFA92C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>( _BYTE *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)( *(uint64_t (**)(void))(v1 + 48),  a1);
}

uint64_t default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x18961A748];
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Subscribers.Sink(0LL, AssociatedTypeWitness, v13, AssociatedConformanceWitness);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(void *)(v16 + 80) = 0LL;
  *(_BYTE *)(v16 + 88) = 2;
  swift_retain();
  swift_retain();
  unint64_t v17 = (_DWORD *)swift_slowAlloc();
  *unint64_t v17 = 0;
  *(void *)(v16 + 96) = v17;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  *(void *)(v16 + outlined destroy of AnyCancellable.Storage(v0 + 16) = a3;
  *(void *)(v16 + outlined destroy of Subscription?(v0 + 24) = a4;
  uint64_t v20 = v16;
  uint64_t v18 = MEMORY[0x186E22960](&protocol conformance descriptor for Subscribers.Sink<A, B>, v15);
  Publisher.subscribe<A>(_:)((uint64_t)&v20, a5, v15, a6, v18);
  type metadata accessor for AnyCancellable();
  uint64_t v20 = v16;
  return AnyCancellable.__allocating_init<A>(_:)( (uint64_t)&v20,  v15,  (uint64_t)&protocol witness table for Subscribers.Sink<A, B>);
}

uint64_t type metadata accessor for Subscribers.Sink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscribers.Sink);
}

uint64_t Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(void *)(v8 + 80) = 0LL;
  *(_BYTE *)(v8 + 88) = 2;
  int v9 = (_DWORD *)swift_slowAlloc();
  *int v9 = 0;
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  *(void *)(v8 + outlined destroy of AnyCancellable.Storage(v0 + 16) = a3;
  *(void *)(v8 + outlined destroy of Subscription?(v0 + 24) = a4;
  return v8;
}

uint64_t Publisher<>.sink(receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Sink(0LL, AssociatedTypeWitness, MEMORY[0x18961A520], MEMORY[0x18961A528]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 80) = 0LL;
  *(_BYTE *)(v10 + 88) = 2;
  swift_retain();
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(void *)(v10 + 96) = v11;
  *(void *)(v10 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(v10 + 40) = 0LL;
  *(void *)(v10 + outlined destroy of AnyCancellable.Storage(v0 + 16) = a1;
  *(void *)(v10 + outlined destroy of Subscription?(v0 + 24) = a2;
  uint64_t v14 = v10;
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Subscribers.Sink<A, B>, v9);
  Publisher.subscribe<A>(_:)((uint64_t)&v14, a3, v9, a4, v12);
  type metadata accessor for AnyCancellable();
  uint64_t v14 = v10;
  return AnyCancellable.__allocating_init<A>(_:)( (uint64_t)&v14,  v9,  (uint64_t)&protocol witness table for Subscribers.Sink<A, B>);
}

uint64_t key path getter for Subscribers.Sink.receiveValue : <A, B>Subscribers.Sink<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v6 = *a1;
  __int128 v11 = *(_OWORD *)(a3 + a2 - 24);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v11;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a4[1] = v9;
  return swift_retain();
}

uint64_t key path setter for Subscribers.Sink.receiveValue : <A, B>Subscribers.Sink<A, B>( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + outlined destroy of AnyCancellable.Storage(v0 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  uint64_t v10 = *a2;
  swift_beginAccess();
  *(void *)(v10 + outlined destroy of AnyCancellable.Storage(v0 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ();
  *(void *)(v10 + outlined destroy of Subscription?(v0 + 24) = v9;
  swift_retain();
  return swift_release();
}

uint64_t Subscribers.Sink.receiveValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t key path getter for Subscribers.Sink.receiveCompletion : <A, B>Subscribers.Sink<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v6 = *a1;
  __int128 v11 = *(_OWORD *)(a3 + a2 - 24);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v11;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a4[1] = v9;
  return swift_retain();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()( uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t key path setter for Subscribers.Sink.receiveCompletion : <A, B>Subscribers.Sink<A, B>( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + outlined destroy of AnyCancellable.Storage(v0 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  uint64_t v10 = *a2;
  swift_beginAccess();
  *(void *)(v10 + 32) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ());
  *(void *)(v10 + 40) = v9;
  swift_retain();
  return swift_release();
}

uint64_t Subscribers.Sink.receiveCompletion.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t Subscribers.Sink.description.getter()
{
  return 1802398035LL;
}

uint64_t Subscribers.Sink.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v0;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Subscribers.Sink.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 1802398035LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t Subscribers.Sink.init(receiveCompletion:receiveValue:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = 0LL;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_BYTE *)(v4 + 88) = 2;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + outlined destroy of AnyCancellable.Storage(v0 + 16) = a3;
  *(void *)(v4 + outlined destroy of Subscription?(v0 + 24) = a4;
  return v4;
}

uint64_t Subscribers.Sink.deinit()
{
  return v0;
}

uint64_t Subscribers.Sink.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Subscribers.Sink.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 96);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 48, (uint64_t)&v10);
  if (v13 == 2
    && (int8x16_t v4 = vorrq_s8(v11, v12),
        !(*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v10)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v10);
    char v13 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v1 + 48);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(0x8000000000000000LL, v8, v9);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v3);
    uint64_t v6 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v6);
  }

uint64_t Subscribers.Sink.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 96));
  uint64_t v17 = 1LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  char v20 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v17, v1 + 48);
  swift_endAccess();
  swift_beginAccess();
  int8x16_t v4 = *(void (**)(uint64_t))(v1 + 32);
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = v3[10];
  __int128 v5[2] = v6;
  uint64_t v7 = v3[11];
  v5[3] = v7;
  uint64_t v8 = v3[12];
  v5[4] = v8;
  *(void *)(v1 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(v1 + 40) = v5;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  int8x16_t v11 = (void *)swift_allocObject();
  v11[2] = v6;
  v11[3] = v7;
  v11[4] = v8;
  v11[5] = v10;
  v11[6] = v9;
  v16[0] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  v16[1] = v11;
  uint64_t v12 = MEMORY[0x18961AFC8] + 8LL;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  swift_retain();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( (uint64_t)v16,  (uint64_t)partial apply for closure #2 in Subscribers.Sink.receive(completion:),  v1,  FunctionTypeMetadata1,  MEMORY[0x18961A520],  v12,  MEMORY[0x18961A528],  v14);
  swift_release();
  v4(a1);
  return swift_release();
}

uint64_t sub_183AFB4CC()
{
  return swift_deallocObject();
}

void closure #2 in Subscribers.Sink.receive(completion:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + outlined destroy of AnyCancellable.Storage(v0 + 16) = *(_OWORD *)(v2 + 80);
  *(void *)(v3 + 32) = *(void *)(v2 + 96);
  swift_beginAccess();
  a1[2] = (uint64_t)specialized closure #1 in Publisher.multicast<A>(subject:);
  a1[3] = v3;
  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)a1[12]);
}

void partial apply for closure #2 in Subscribers.Sink.receive(completion:)()
{
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858]();
  char v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

Swift::Void __swiftcall Subscribers.Sink.cancel()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (os_unfair_lock_s *)v0[12];
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v0 + 6), (uint64_t)&v18);
  if (v21)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v18);
    os_unfair_lock_unlock(v2);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v18, (uint64_t)v22);
    uint64_t v18 = 1LL;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    char v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, (uint64_t)(v0 + 6));
    swift_endAccess();
    swift_beginAccess();
    uint64_t v4 = v0[4];
    uint64_t v3 = v0[5];
    swift_beginAccess();
    uint64_t v6 = v0[2];
    uint64_t v5 = v0[3];
    uint64_t v7 = (void *)swift_allocObject();
    uint64_t v8 = v1[10];
    __int128 v7[2] = v8;
    uint64_t v9 = v1[11];
    void v7[3] = v9;
    uint64_t v10 = v1[12];
    void v7[4] = v10;
    v7[5] = v4;
    v7[6] = v3;
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = v8;
    v11[3] = v9;
    v11[4] = v10;
    v11[5] = v6;
    v11[6] = v5;
    uint64_t v18 = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ();
    *(void *)&__int128 v19 = v7;
    *((void *)&v19 + 1) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
    *(void *)&__int128 v20 = v11;
    type metadata accessor for Subscribers.Completion(255LL, v9, v10, v12);
    uint64_t v13 = MEMORY[0x18961AFC8] + 8LL;
    swift_getFunctionTypeMetadata1();
    swift_getFunctionTypeMetadata1();
    swift_retain();
    swift_retain();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( (uint64_t)&v18,  (uint64_t)partial apply for closure #1 in Subscribers.Sink.cancel(),  (uint64_t)v0,  TupleTypeMetadata2,  MEMORY[0x18961A520],  v13,  MEMORY[0x18961A528],  v15);
    swift_release();
    swift_release();
    uint64_t v16 = v23;
    uint64_t v17 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    (*(void (**)(uint64_t))(*(void *)(v17 + 8) + 8LL))(v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

void closure #1 in Subscribers.Sink.cancel()(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = (void *)swift_allocObject();
  uint64_t v4 = v2[10];
  v3[2] = v4;
  uint64_t v5 = v2[11];
  v3[3] = v5;
  uint64_t v6 = v2[12];
  v3[4] = v6;
  swift_beginAccess();
  *(void *)(a1 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(a1 + 40) = v3;
  swift_release();
  uint64_t v7 = (void *)swift_allocObject();
  __int128 v7[2] = v4;
  void v7[3] = v5;
  void v7[4] = v6;
  swift_beginAccess();
  *(void *)(a1 + outlined destroy of AnyCancellable.Storage(v0 + 16) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = v7;
  swift_release();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 96));
}

void partial apply for closure #1 in Subscribers.Sink.cancel()()
{
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Subscribers.Sink<A, B>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Subscribers.Sink<A, B>( void *a1)
{
  return Subscribers.Sink.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Subscribers.Sink<A, B>( uint64_t a1)
{
  return Subscribers.Sink.receive(completion:)(a1);
}

void protocol witness for Cancellable.cancel() in conformance Subscribers.Sink<A, B>()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Sink<A, B>()
{
  return 1802398035LL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscribers.Sink<A, B>()
{
  return Subscribers.Sink.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscribers.Sink<A, B>( void *a1@<X8>)
{
}

uint64_t sub_183AFBA44()
{
  return 24LL;
}

__n128 sub_183AFBA50(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_183AFBA6C()
{
  return 24LL;
}

__n128 sub_183AFBA78(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for Subscribers.Sink()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for Subscribers.Sink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_183AFBAFC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ())( uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()( a1,  *(uint64_t (**)(void))(v1 + 40));
}

uint64_t sub_183AFBB30()
{
  return swift_deallocObject();
}

uint64_t sub_183AFBB40()
{
  return swift_deallocObject();
}

uint64_t sub_183AFBB50()
{
  return swift_deallocObject();
}

uint64_t AnySubscriberBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnySubscriberBase.init()()
{
  return v0;
}

uint64_t AnySubscriberBase.deinit()
{
  return v0;
}

uint64_t AnySubscriberBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void AnySubscriberBase.receive(subscription:)()
{
}

void AnySubscriberBase.receive(_:)()
{
}

void AnySubscriberBase.receive(completion:)()
{
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance AnySubscriberBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AnySubscriberBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AnySubscriberBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

uint64_t AnySubscriberBox.base.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 136LL) - 8LL) + 16LL))( a1,  v1 + *(void *)(*(void *)v1 + 152LL));
}

uint64_t AnySubscriberBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 136LL) - 8LL) + 32LL))( v2 + *(void *)(*(void *)v2 + 152LL),  a1);
  return v2;
}

uint64_t AnySubscriberBox.init(_:)(uint64_t a1)
{
  return v1;
}

uint64_t AnySubscriberBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136LL) - 8LL) + 8LL))(v0 + *(void *)(*(void *)v0 + 152LL));
}

uint64_t AnySubscriberBox.deinit()
{
  return v0;
}

uint64_t AnySubscriberBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AnySubscriberBox.receive(subscription:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144LL) + 40LL))( a1,  *(void *)(*(void *)v1 + 136LL));
}

uint64_t AnySubscriberBox.receive(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144LL) + 48LL))( a1,  *(void *)(*(void *)v1 + 136LL));
}

uint64_t AnySubscriberBox.receive(completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144LL) + 56LL))( a1,  *(void *)(*(void *)v1 + 136LL));
}

void AnySubscriberBox.__allocating_init()()
{
}

void AnySubscriberBox.init()()
{
}

uint64_t ClosureBasedAnySubscriber.receiveSubscriptionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t ClosureBasedAnySubscriber.receiveValueThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t ClosureBasedAnySubscriber.receiveCompletionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  return v1;
}

void *ClosureBasedAnySubscriber.__allocating_init(_:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  return result;
}

void *ClosureBasedAnySubscriber.init(_:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v6[2] = a1;
  void v6[3] = a2;
  void v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  v6[7] = a6;
  return v6;
}

uint64_t ClosureBasedAnySubscriber.__ivar_destroyer()
{
  return swift_release();
}

uint64_t ClosureBasedAnySubscriber.deinit()
{
  return v0;
}

uint64_t ClosureBasedAnySubscriber.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ClosureBasedAnySubscriber.receive(subscription:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t ClosureBasedAnySubscriber.receive(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t ClosureBasedAnySubscriber.receive(completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

void ClosureBasedAnySubscriber.__allocating_init()()
{
}

void ClosureBasedAnySubscriber.init()()
{
}

uint64_t AnySubscriber.box.getter()
{
  return swift_retain();
}

uint64_t AnySubscriber.descriptionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t AnySubscriber.customMirrorThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t AnySubscriber.playgroundDescriptionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

void AnySubscriber.combineIdentifier.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56);
}

uint64_t AnySubscriber.description.getter()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnySubscriber.customMirror.getter()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t AnySubscriber.playgroundDescription.getter()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t AnySubscriber.init<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10 = a1;
  os_unfair_lock_t v61 = a6;
  uint64_t v11 = *(void *)(*(void *)(a4 - 8) + 64LL);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  uint64_t v57 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v60 = (char *)&v53 - v14;
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v53 - v16;
  uint64_t v18 = MEMORY[0x1895F8858](v15);
  __int128 v20 = (char *)&v53 - v19;
  MEMORY[0x1895F8858](v18);
  uint64_t v62 = v21;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v22((char *)&v53 - v23, v10, v24);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  type metadata accessor for AnySubscriber(0LL, a2, a3, AssociatedConformanceWitness);
  if ((swift_dynamicCast() & 1) != 0)
  {
    uint64_t v26 = v67;
    uint64_t v27 = v68;
    uint64_t v29 = v69;
    uint64_t v28 = v70;
    uint64_t v31 = v71;
    uint64_t v30 = v72;
    uint64_t v32 = v73;
    uint64_t v33 = v62;
  }

  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(a5 + 8) + 8LL))(&v74, a4);
    uint64_t v54 = a5;
    type metadata accessor for AnySubscriberBox(0LL, a4, a5, v34);
    v22(v20, v10, a4);
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = *(void *)v35;
    uint64_t v37 = *(void *)(*(void *)v35 + 152LL);
    uint64_t v56 = v35;
    (*(void (**)(uint64_t, char *))(*(void *)(*(void *)(v36 + 136) - 8LL) + 32LL))(v35 + v37, v20);
    v22(v17, v10, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of Subscription(&v63, (uint64_t)v66);
      outlined init with take of Subscription(v66, (uint64_t)&v63);
      uint64_t v55 = swift_allocObject();
      outlined init with take of Subscription(&v63, v55 + 16);
      uint64_t v27 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    }

    else
    {
      uint64_t v65 = 0LL;
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      outlined destroy of CustomStringConvertible?( (uint64_t)&v63,  &demangling cache variable for type metadata for CustomStringConvertible?);
      swift_getDynamicType();
      uint64_t v38 = _typeName(_:qualified:)();
      uint64_t v40 = v39;
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v38;
      *(void *)(v41 + outlined destroy of Subscription?(v0 + 24) = v40;
      uint64_t v55 = v41;
      uint64_t v27 = partial apply for closure #2 in AnySubscriber.init<A>(_:);
    }

    uint64_t v33 = v62;
    v22(v20, v10, a4);
    uint64_t v42 = v10;
    unint64_t v43 = (*(unsigned __int8 *)(v33 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v31 = (void *)swift_allocObject();
    uint64_t v44 = v59;
    v31[2] = v58;
    v31[3] = v44;
    uint64_t v45 = v54;
    v31[4] = a4;
    v31[5] = v45;
    uint64_t v46 = (char *)v31 + v43;
    uint64_t v10 = v42;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v46, v20, a4);
    v22(v60, v42, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of Subscription(&v63, (uint64_t)v66);
      outlined init with take of Subscription(v66, (uint64_t)&v63);
      uint64_t v32 = swift_allocObject();
      outlined init with take of Subscription(&v63, v32 + 16);
      uint64_t v30 = (uint64_t (*)@<X0>(uint64_t *@<X8>))partial apply for closure #4 in AnySubscriber.init<A>(_:);
    }

    else
    {
      uint64_t v65 = 0LL;
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      outlined destroy of CustomStringConvertible?( (uint64_t)&v63,  &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
      v22(v57, v42, a4);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of Subscription(&v63, (uint64_t)v66);
        outlined init with take of Subscription(v66, (uint64_t)&v63);
        uint64_t v32 = swift_allocObject();
        outlined init with take of Subscription(&v63, v32 + 16);
        uint64_t v30 = partial apply for closure #5 in AnySubscriber.init<A>(_:);
      }

      else
      {
        uint64_t v65 = 0LL;
        __int128 v63 = 0u;
        __int128 v64 = 0u;
        outlined destroy of CustomStringConvertible?( (uint64_t)&v63,  &demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        uint64_t v47 = _typeName(_:qualified:)();
        uint64_t v49 = v48;
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v47;
        *(void *)(v32 + outlined destroy of Subscription?(v0 + 24) = v49;
        uint64_t v30 = partial apply for closure #6 in AnySubscriber.init<A>(_:);
      }
    }

    uint64_t v28 = partial apply for closure #3 in AnySubscriber.init<A>(_:);
    uint64_t v26 = v56;
    uint64_t v29 = v55;
  }

  uint64_t v50 = v74;
  uint64_t v51 = v61;
  uint64_t *v61 = v26;
  v51[1] = (uint64_t)v27;
  v51[2] = v29;
  v51[3] = (uint64_t)v28;
  v51[4] = (uint64_t)v31;
  v51[5] = (uint64_t)v30;
  v51[6] = v32;
  v51[7] = v50;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v10, a4);
}

uint64_t closure #1 in AnySubscriber.init<A>(_:)(void *a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t closure #2 in AnySubscriber.init<A>(_:)(uint64_t a1)
{
  return a1;
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17((char *)v21 - v18, a1, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of Subscription(v21, (uint64_t)v23);
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    dispatch thunk of CustomReflectable.customMirror.getter();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }

  else
  {
    uint64_t v22 = 0LL;
    memset(v21, 0, sizeof(v21));
    outlined destroy of CustomStringConvertible?( (uint64_t)v21,  &demangling cache variable for type metadata for CustomReflectable?);
    v17(v15, a1, a4);
    uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v12, 1LL, 1LL, v20);
    default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v8);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }

uint64_t closure #4 in AnySubscriber.init<A>(_:)(void *a1)
{
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t closure #5 in AnySubscriber.init<A>(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  a2[3] = MEMORY[0x189617FA8];
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t closure #6 in AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = MEMORY[0x189617FA8];
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t AnySubscriber.init<A>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v8 = type metadata accessor for SubjectSubscriber(0LL, a3, a4, a3);
  uint64_t v9 = specialized SubjectSubscriber.__allocating_init(_:)();
  *(void *)&__int128 v23 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for AnySubscriber(0LL, a1, a2, AssociatedConformanceWitness);
  swift_retain();
  if (swift_dynamicCast())
  {
    uint64_t v12 = v26;
    uint64_t v11 = v27;
    uint64_t v14 = v28;
    uint64_t v13 = v29;
    uint64_t v16 = v30;
    uint64_t v15 = v31;
    uint64_t v17 = v32;
    uint64_t v18 = v33;
    swift_unknownObjectRelease();
    uint64_t result = swift_release();
  }

  else
  {
    CustomCombineIdentifierConvertible<>.combineIdentifier.getter(&v33);
    uint64_t v20 = MEMORY[0x186E22960](&protocol conformance descriptor for SubjectSubscriber<A>, v8);
    type metadata accessor for AnySubscriberBox(0LL, v8, v20, v21);
    *(void *)&__int128 v23 = v9;
    uint64_t v12 = swift_allocObject();
    (*(void (**)(uint64_t, __int128 *))(*(void *)(*(void *)(*(void *)v12 + 136LL) - 8LL) + 32LL))( v12 + *(void *)(*(void *)v12 + 152LL),  &v23);
    uint64_t v26 = v12;
    uint64_t v24 = v8;
    uint64_t v25 = MEMORY[0x186E22960](&protocol conformance descriptor for SubjectSubscriber<A>, v8);
    *(void *)&__int128 v23 = v9;
    outlined init with take of Subscription(&v23, (uint64_t)v22);
    uint64_t v14 = swift_allocObject();
    outlined init with take of Subscription(v22, v14 + 16);
    uint64_t v11 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    uint64_t v27 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    uint64_t v28 = v14;
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = a1;
    v16[3] = a2;
    v16[4] = v8;
    v16[5] = v20;
    v16[6] = v9;
    uint64_t v13 = closure #3 in AnySubscriber.init<A>(_:)partial apply;
    uint64_t v29 = closure #3 in AnySubscriber.init<A>(_:)partial apply;
    uint64_t v30 = v16;
    uint64_t v24 = v8;
    uint64_t v25 = MEMORY[0x186E22960](&protocol conformance descriptor for SubjectSubscriber<A>, v8);
    *(void *)&__int128 v23 = v9;
    outlined init with take of Subscription(&v23, (uint64_t)v22);
    uint64_t v17 = swift_allocObject();
    outlined init with take of Subscription(v22, v17 + 16);
    swift_retain_n();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v15 = partial apply for closure #4 in AnySubscriber.init<A>(_:);
    uint64_t v18 = v33;
  }

  *a5 = v12;
  a5[1] = (uint64_t)v11;
  a5[2] = v14;
  a5[3] = (uint64_t)v13;
  a5[4] = (uint64_t)v16;
  a5[5] = (uint64_t)v15;
  a5[6] = v17;
  a5[7] = v18;
  return result;
}

void AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  if (a1)
  {
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + outlined destroy of AnyCancellable.Storage(v0 + 16) = a1;
    *(void *)(v18 + outlined destroy of Subscription?(v0 + 24) = a2;
    uint64_t v19 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ());
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = (uint64_t (*)())specialized closure #1 in Publisher.multicast<A>(subject:);
  }

  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + outlined destroy of AnyCancellable.Storage(v0 + 16) = v19;
  *(void *)(v20 + outlined destroy of Subscription?(v0 + 24) = v18;
  uint64_t v21 = (void *)swift_allocObject();
  __int128 v21[2] = a7;
  v21[3] = a8;
  v21[4] = a10;
  if (a3)
  {
    v21[5] = a3;
    uint64_t v22 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Subscribers.Demand);
    v21[6] = a4;
  }

  else
  {
    uint64_t v22 = partial apply for closure #2 in implicit closure #2 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
  }

  __int128 v23 = (void *)swift_allocObject();
  _OWORD v23[2] = a7;
  v23[3] = a8;
  void v23[4] = a10;
  void v23[5] = v22;
  v23[6] = v21;
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = a7;
  v24[3] = a8;
  Swift::Int v24[4] = a10;
  if (a5)
  {
    v24[5] = a5;
    uint64_t v25 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ());
    v24[6] = a6;
  }

  else
  {
    uint64_t v25 = specialized closure #1 in Publisher.multicast<A>(subject:);
  }

  type metadata accessor for ClosureBasedAnySubscriber(0LL, a7, a8, a10);
  uint64_t v26 = (void *)swift_allocObject();
  void v26[2] = a7;
  v26[3] = a8;
  v26[4] = a10;
  v26[5] = v25;
  v26[6] = v24;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ());
  v27[3] = v20;
  v27[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Subscribers.Demand);
  v27[5] = v23;
  v27[6] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ();
  v27[7] = v26;
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v28 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v29 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v28);
    *a9 = v27;
    a9[1] = closure #4 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[2] = 0LL;
    a9[3] = closure #5 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[4] = 0LL;
    a9[5] = closure #6 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[6] = 0LL;
    a9[7] = v29;
  }

unint64_t closure #4 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)()
{
  return 0xD000000000000017LL;
}

uint64_t closure #5 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)()
{
  return Mirror.init(reflecting:)();
}

void closure #6 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0xD000000000000017LL;
  a1[1] = 0x8000000183BA7980LL;
}

uint64_t AnySubscriber.receive(subscription:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t AnySubscriber.receive(_:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120LL))();
}

uint64_t AnySubscriber.receive(completion:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128LL))();
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AnySubscriber<A, B>( void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56);
}

uint64_t _ReferencedBasedAnySubscriber.description.getter()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t _ReferencedBasedAnySubscriber.customMirror.getter()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t _ReferencedBasedAnySubscriber.playgroundDescription.getter()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t _ReferencedBasedAnySubscriber.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance _ReferencedBasedAnySubscriber<A, B>( uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)(*(void *)v1 + 16LL) + 112LL);
  swift_unknownObjectRetain();
  v3(a1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance _ReferencedBasedAnySubscriber<A, B>( uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)v1 + 16LL) + 120LL);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(a1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance _ReferencedBasedAnySubscriber<A, B>( uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)(*(void *)v1 + 16LL) + 128LL);
  swift_unknownObjectRetain();
  v3(a1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.description.getter();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.customMirror.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.playgroundDescription.getter();
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance _ReferencedBasedAnySubscriber<A, B>( void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 72LL);
}

void specialized AnySubscriberBox.init()()
{
}

void specialized ClosureBasedAnySubscriber.init()()
{
}

uint64_t type metadata accessor for AnySubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySubscriber);
}

uint64_t type metadata accessor for AnySubscriberBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySubscriberBox);
}

uint64_t sub_183AFD304()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AnySubscriber.init<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_183AFD354()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnySubscriber.init<A>(_:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  return closure #3 in AnySubscriber.init<A>(_:)((uint64_t)v0 + ((v2 + 48) & ~v2), v0[2], v0[3], v1);
}

uint64_t partial apply for closure #6 in AnySubscriber.init<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  a1[3] = MEMORY[0x189617FA8];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #5 in AnySubscriber.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_183AFD438()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnySubscriber.init<A>(_:)()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_183AFD4A4()
{
  return swift_deallocObject();
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)partial apply()
{
  return closure #3 in AnySubscriber.init<A>(_:)((uint64_t)(v0 + 6), v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #4 in AnySubscriber.init<A>(_:)()
{
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t sub_183AFD520()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_183AFD564()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in implicit closure #2 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)( void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Subscribers.Demand)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 40))(&v2);
  return v2;
}

uint64_t sub_183AFD5AC()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for ClosureBasedAnySubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ClosureBasedAnySubscriber);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Subscribers.Demand)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t type metadata completion function for AnySubscriberBase()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnySubscriberBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnySubscriberBase);
}

uint64_t method lookup function for AnySubscriberBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnySubscriberBase.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(subscription:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112LL))();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128LL))();
}

uint64_t type metadata completion function for AnySubscriberBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for AnySubscriberBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnySubscriberBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t type metadata completion function for ClosureBasedAnySubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ClosureBasedAnySubscriber()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClosureBasedAnySubscriber.__allocating_init(_:_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t destroy for AnySubscriber()
{
  return swift_release();
}

uint64_t initializeWithCopy for AnySubscriber(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + outlined destroy of SubscriptionStatus(v0 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AnySubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + outlined destroy of SubscriptionStatus(v0 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnySubscriber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + outlined destroy of SubscriptionStatus(v0 + 48) = v4;
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySubscriber(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySubscriber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + outlined destroy of Subscription?(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata completion function for _ReferencedBasedAnySubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _ReferencedBasedAnySubscriber( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _ReferencedBasedAnySubscriber);
}

uint64_t Publisher<>.removeDuplicates()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a1);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = swift_getAssociatedTypeWitness();
  *(void *)(v12 + outlined destroy of Subscription?(v0 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a1);
  uint64_t result = type metadata accessor for Publishers.RemoveDuplicates(0LL, a1, a2, v13);
  uint64_t v15 = (uint64_t (**)())(a4 + *(int *)(result + 36));
  *uint64_t v15 = partial apply for basicEquality<A>(_:_:);
  v15[1] = (uint64_t (*)())v12;
  return result;
}

uint64_t sub_183AFDB2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for basicEquality<A>(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t Publishers.RemoveDuplicates.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.RemoveDuplicates,  a6);
}

uint64_t type metadata accessor for Publishers.RemoveDuplicates( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.RemoveDuplicates);
}

uint64_t Publisher.removeDuplicates(by:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a3);
  uint64_t v15 = (void *)(a5 + *(int *)(type metadata accessor for Publishers.RemoveDuplicates(0LL, a3, a4, v14) + 36));
  *uint64_t v15 = a1;
  v15[1] = a2;
  return swift_retain();
}

uint64_t Publisher.tryRemoveDuplicates(by:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v5);
  uint64_t v14 = (uint64_t (*)())swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a1;
  *((void *)v14 + 5) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a3);
  uint64_t v16 = (uint64_t (**)())(a5 + *(int *)(type metadata accessor for Publishers.TryRemoveDuplicates(0LL, a3, a4, v15) + 36));
  *uint64_t v16 = partial apply for closure #1 in Publisher.tryRemoveDuplicates(by:);
  v16[1] = v14;
  return swift_retain();
}

uint64_t sub_183AFDD1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher.tryRemoveDuplicates(by:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t Publishers.TryRemoveDuplicates.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryRemoveDuplicates,  a6);
}

uint64_t type metadata accessor for Publishers.TryRemoveDuplicates( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TryRemoveDuplicates);
}

uint64_t Publishers.RemoveDuplicates.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.RemoveDuplicates.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.RemoveDuplicates.Inner()
{
}

unint64_t Publishers.RemoveDuplicates.Inner.description.getter()
{
  return 0xD000000000000010LL;
}

uint64_t Publishers.RemoveDuplicates.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  void (**v2)(uint64_t *__return_ptr, char *, uint64_t);
  void (*v3)(uint64_t *__return_ptr, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, void, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28[3];
  uint64_t v25 = a1;
  uint64_t v27 = a2;
  __int128 v3 = *v2;
  uint64_t v26 = *((void *)*v2 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = (char *)v2 + *((void *)v3 + 38);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v16, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    uint64_t v17 = v25;
LABEL_5:
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v18(v9, v17, AssociatedTypeWitness);
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    v19(v9, 0LL, 1LL, AssociatedTypeWitness);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v16, v9, v5);
    swift_endAccess();
    uint64_t v20 = v27;
    v18(v27, v17, AssociatedTypeWitness);
    v19(v20, 0LL, 1LL, AssociatedTypeWitness);
    goto LABEL_6;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
  uint64_t v17 = v25;
  v2[2](v28, v15, v25);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  if (LOBYTE(v28[0]) != 1) {
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v27, 1LL, 1LL, AssociatedTypeWitness);
LABEL_6:
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0LL, v5, v21, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.RemoveDuplicates<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.TryRemoveDuplicates.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.RemoveDuplicates.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void *))
{
  uint64_t v5 = *(void *)(a2 + 24);
  v6[0] = *(void *)(a2 + 16);
  v6[1] = a3;
  __int128 v6[2] = v5;
  void v6[3] = a4;
  a5(0LL, v6);
  JUMPOUT(0x183AFE11CLL);
}

unint64_t Publishers.TryRemoveDuplicates.Inner.description.getter()
{
  return 0xD000000000000013LL;
}

uint64_t Publishers.RemoveDuplicates.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9DB50;
  *(void *)(v8 + 32) = 0x657274736E776F64LL;
  *(void *)(v8 + 40) = 0xEA00000000006D61LL;
  uint64_t v9 = (uint64_t)v0 + *(void *)(v1 + 144);
  uint64_t v10 = *(void *)(v1 + 280);
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v9,  v10);
  *(void *)(v8 + 80) = 1953718636LL;
  *(void *)(v8 + 88) = 0xE400000000000000LL;
  uint64_t v12 = (uint64_t)v0 + *(void *)(*v0 + 304);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  *(void *)(v8 + 120) = v13;
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v7, 1LL, 1LL, v15);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.TryRemoveDuplicates.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v23[0] = a2;
  uint64_t v4 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)v23 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)v23 - v15;
  uint64_t v17 = (uint64_t)v2 + *(void *)(v4 + 304);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v17, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    uint64_t v18 = (char *)v23[0];
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
    ((void (*)(void *__return_ptr, char *, uint64_t))v2[2])(v24, v16, a1);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
    uint64_t v18 = (char *)v23[0];
    if (LOBYTE(v24[0]) == 1)
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v14 + 56))(v23[0], 1LL, 1LL, AssociatedTypeWitness);
      goto LABEL_4;
    }
  }

  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v19(v10, a1, AssociatedTypeWitness);
  uint64_t v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
  v20(v10, 0LL, 1LL, AssociatedTypeWitness);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v17, v10, v6);
  swift_endAccess();
  v19(v18, a1, AssociatedTypeWitness);
  v20(v18, 0LL, 1LL, AssociatedTypeWitness);
LABEL_4:
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0LL, v6, v21, MEMORY[0x18961A3E8]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.RemoveDuplicates.Inner.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 304LL);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
}

void Publishers.RemoveDuplicates.Inner.deinit()
{
}

uint64_t sub_183AFE710(uint64_t a1)
{
  uint64_t v2 = a1 + *(void *)(*(void *)a1 + 304LL);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return a1;
}

void Publishers.RemoveDuplicates.Inner.__deallocating_deinit()
{
}

uint64_t sub_183AFE780()
{
  return swift_deallocClassInstance();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryRemoveDuplicates<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.TryRemoveDuplicates.Inner()
{
}

uint64_t *specialized Publishers.RemoveDuplicates.Inner.init(downstream:filter:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a3;
  uint64_t v22 = a5;
  uint64_t v20 = a2;
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void *)(*(void *)v5 + 280LL);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = v5 + v7[38];
  uint64_t v13 = v7[36];
  uint64_t v14 = v7[34];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v12,  1LL,  1LL,  AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v14;
  v16[3] = v8;
  v16[4] = v13;
  uint64_t v17 = v20;
  v16[5] = v7[37];
  v16[6] = v17;
  void v16[7] = v21;
  v23[0] = v22;
  v23[1] = v16;
  return FilterProducer.init(downstream:filter:)((uint64_t)v11, (uint64_t)v23);
}

uint64_t getEnumTagSinglePayload for Publishers.RemoveDuplicates(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183AFE960 + 4 * byte_183B9EAD0[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.RemoveDuplicates( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183AFEAD8()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AFEB50LL);
}

void sub_183AFEAE0(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183AFEAE8LL);
  }
  JUMPOUT(0x183AFEB50LL);
}

void sub_183AFEB28()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AFEB50LL);
}

void sub_183AFEB30()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183AFEB50LL);
}

uint64_t sub_183AFEB38(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183AFEB50LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183AFEB4CLL);
    }
    JUMPOUT(0x183AFEB44LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.RemoveDuplicates.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_183AFEBF8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>( _BYTE *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)( *(uint64_t (**)(void))(v1 + 48),  a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>( _BYTE *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)( *(uint64_t (**)(void))(v1 + 48),  a1);
}

uint64_t Publishers.Decode.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.Decode.init(upstream:decoder:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15 = *(void *)(a5 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = a5;
  *((void *)v17 + 5) = a6;
  *((void *)v17 + 6) = a7;
  *((void *)v17 + 7) = a8;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(&v17[v16], a2, a5);
  type metadata accessor for Publishers.Decode();
}

uint64_t sub_183AFED24(uint64_t result)
{
  uint64_t v3 = (uint64_t (**)(uint64_t))(v1 + *(int *)(result + 68));
  *uint64_t v3 = partial apply for closure #1 in Publishers.Decode.init(upstream:decoder:);
  v3[1] = v2;
  return result;
}

uint64_t sub_183AFED58()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.Decode.init(upstream:decoder:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(v1[7] + 16LL))(v1[3], a1, v1[3], v1[6]);
}

void type metadata accessor for Publishers.Decode()
{
}

void Publishers.Decode.receive<A>(subscriber:)(uint64_t a1)
{
}

uint64_t sub_183AFEE88(uint64_t a1)
{
  int v9 = (uint64_t *)(v1 + *(int *)(v3 + 68));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_allocObject();
  swift_retain();
  *(void *)(v7 - 128) = Publishers.Decode.Inner.init(_:decode:)(v5, v10, v11);
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Decode<A, B, C>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v7 - 128, *(void *)(v7 - 144), a1, *(void *)(v7 - 160), v12);
  return swift_release();
}

void type metadata accessor for Publishers.Decode.Inner()
{
}

uint64_t Publishers.Decode.Inner.__allocating_init(_:decode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.Decode.Inner.init(_:decode:));
}

void Publishers.Decode.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 160)));
  __int128 v23 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9EBF0;
  *(void *)(v6 + 32) = 0x657274736E776F64LL;
  *(void *)(v6 + 40) = 0xEA00000000006D61LL;
  uint64_t v7 = (uint64_t)v0 + *(void *)(*v0 + 144);
  uint64_t v8 = *(void *)(v1 + 104);
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(boxed_opaque_existential_1, v7, v8);
  *(void *)(v6 + 80) = 0x64656873696E6966LL;
  *(void *)(v6 + 88) = 0xE800000000000000LL;
  uint64_t v10 = *v0;
  uint64_t v11 = MEMORY[0x1896184C8];
  *(_BYTE *)(v6 + 96) = *((_BYTE *)v0 + *(void *)(*v0 + 168));
  *(void *)(v6 + 120) = v11;
  *(void *)(v6 + 128) = 0xD000000000000014LL;
  *(void *)(v6 + 136) = 0x8000000183BA7A30LL;
  *(void *)(v6 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v12 + 16;
  *(void *)(v6 + 144) = v12;
  uint64_t v14 = (uint64_t)v0 + *(void *)(v10 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v14, v13);
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v5, 1LL, 1LL, v15);
  uint64_t v16 = *(void *)(v1 + 96);
  __int128 v18 = *(_OWORD *)(v1 + 80);
  uint64_t v19 = v16;
  uint64_t v20 = v8;
  __int128 v17 = *(_OWORD *)(v1 + 128);
  __int128 v21 = *(_OWORD *)(v1 + 112);
  __int128 v22 = v17;
  type metadata accessor for Publishers.Decode.Inner();
}

void sub_183AFF158()
{
}

void Publishers.Decode.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x65646F636544LL;
  a1[1] = 0xE600000000000000LL;
}

uint64_t *Publishers.Decode.Inner.init(_:decode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 160);
  int v9 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *int v9 = 0;
  *((_BYTE *)v3 + *(void *)(*v3 + 168)) = 0;
  uint64_t v10 = (uint64_t)v3 + *(void *)(*v3 + 176);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v10 + 32) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 104) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 144),  a1);
  uint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 152));
  *uint64_t v11 = a2;
  v11[1] = a3;
  return v3;
}

uint64_t *Publishers.Decode.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 160)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 104) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 144));
  swift_release();
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 176));
  return v0;
}

uint64_t Publishers.Decode.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.Decode.Inner.deinit);
}

uint64_t Publishers.Decode.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  if ((*((_BYTE *)v1 + *(void *)(*v1 + 168)) & 1) == 0)
  {
    uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 176);
    swift_beginAccess();
    outlined init with copy of Subscription?(v5, (uint64_t)&v13);
    uint64_t v6 = v15;
    outlined destroy of Subscription?((uint64_t)&v13);
    if (!v6)
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
      outlined init with take of Subscription?((uint64_t)&v13, (uint64_t)v18);
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)v18, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      uint64_t v10 = *(void *)(v3 + 136);
      __int128 v11 = *(_OWORD *)(v3 + 80);
      uint64_t v14 = *(void *)(v3 + 96);
      __int128 v12 = *(_OWORD *)(v3 + 104);
      __int128 v13 = v11;
      __int128 v15 = v12;
      __int128 v16 = *(_OWORD *)(v3 + 120);
      uint64_t v17 = v10;
      type metadata accessor for Publishers.Decode.Inner();
    }
  }

  os_unfair_lock_unlock(v4);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v7);
}

uint64_t Publishers.Decode.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v9 = *(os_unfair_lock_s **)(v1 + v4[20]);
  os_unfair_lock_lock(v9);
  char v10 = *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 168LL));
  os_unfair_lock_unlock(v9);
  uint64_t v11 = 0LL;
  if ((v10 & 1) == 0)
  {
    (*(void (**)(uint64_t))(v2 + *(void *)(*(void *)v2 + 152LL)))(a1);
    uint64_t v11 = (*(uint64_t (**)(char *, void))(v4[17] + 48LL))(v8, v4[13]);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  return v11;
}

void Publishers.Decode.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  __int128 v12 = (char *)&v19 - v11;
  uint64_t v13 = *(os_unfair_lock_s **)(v1 + v2[20]);
  os_unfair_lock_lock(v13);
  uint64_t v14 = *(void *)(*(void *)v1 + 168LL);
  if ((*(_BYTE *)(v1 + v14) & 1) != 0)
  {
    os_unfair_lock_unlock(v13);
  }

  else
  {
    uint64_t v20 = v6;
    *(_BYTE *)(v1 + v14) = 1;
    uint64_t v23 = 0LL;
    memset(v22, 0, sizeof(v22));
    uint64_t v15 = v1 + *(void *)(*(void *)v1 + 176LL);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v22, v15);
    swift_endAccess();
    os_unfair_lock_unlock(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1LL, AssociatedTypeWitness) == 1)
    {
      *(void *)&v22[0] = 0LL;
      (*(void (**)(_OWORD *, void))(v2[17] + 56LL))(v22, v2[13]);
    }

    else
    {
      __int128 v16 = v20;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v20, v12, AssociatedTypeWitness);
      uint64_t v17 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v18, v16, AssociatedTypeWitness);
      *(void *)&v22[0] = v17;
      (*(void (**)(_OWORD *, void))(v2[17] + 56LL))(v22, v2[13]);
      MEMORY[0x186E22870](v17);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v16, AssociatedTypeWitness);
    }
  }

uint64_t Publishers.Decode.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 160LL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 176LL);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  outlined init with copy of Subscription?((uint64_t)v11, (uint64_t)v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    outlined destroy of Subscription?((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }

  else
  {
    outlined destroy of Subscription?((uint64_t)v11);
    return outlined destroy of Subscription?((uint64_t)v8);
  }

void Publishers.Decode.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 160LL));
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*(void *)v0 + 168LL);
  if ((*(_BYTE *)(v0 + v2) & 1) == 0)
  {
    uint64_t v3 = v0 + *(void *)(*(void *)v0 + 176LL);
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((void *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      uint64_t v8 = 0LL;
      __int128 v6 = 0u;
      __int128 v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2) = 1;
      os_unfair_lock_unlock(v1);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }

    outlined destroy of Subscription?((uint64_t)&v6);
  }

  os_unfair_lock_unlock(v1);
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Decode<A, B, C>.Inner<A1>( uint64_t a1)
{
  return Publishers.Decode.Inner.request(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Decode<A, B, C>.Inner<A1>( void *a1)
{
  return Publishers.Decode.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Decode<A, B, C>.Inner<A1>( uint64_t a1)
{
  return Publishers.Decode.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Decode<A, B, C>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
  return 0x65646F636544LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
}

  ;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Decode<A, B, C>( uint64_t a1)
{
}

void Publishers.Encode.init(upstream:encoder:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14 = *(void *)(a4 - 8);
  unint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  __int128 v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a3;
  *((void *)v16 + 3) = a4;
  *((void *)v16 + 4) = a5;
  *((void *)v16 + 5) = a6;
  *((void *)v16 + 6) = a7;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v16[v15], a2, a4);
  type metadata accessor for Publishers.Encode();
}

uint64_t sub_183AFFCA8(uint64_t result)
{
  uint64_t v3 = (uint64_t (**)(uint64_t))(v1 + *(int *)(result + 60));
  *uint64_t v3 = partial apply for closure #1 in Publishers.Encode.init(upstream:encoder:);
  v3[1] = v2;
  return result;
}

uint64_t sub_183AFFCDC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.Encode.init(upstream:encoder:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  __int128 v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v6(a1, AssociatedTypeWitness, v5, v3, v4);
}

void type metadata accessor for Publishers.Encode()
{
}

void Publishers.Encode.receive<A>(subscriber:)(uint64_t a1)
{
}

uint64_t sub_183AFFE58(uint64_t a1)
{
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(v3 + 60));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_allocObject();
  swift_retain();
  *(void *)(v7 - 128) = Publishers.Encode.Inner.init(_:encode:)(v5, v10, v11);
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Encode<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v7 - 128, *(void *)(v7 - 144), a1, *(void *)(v7 - 160), v12);
  return swift_release();
}

void type metadata accessor for Publishers.Encode.Inner()
{
}

uint64_t Publishers.Encode.Inner.__allocating_init(_:encode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.Encode.Inner.init(_:encode:));
}

void Publishers.Encode.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 152)));
  uint64_t v20 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9EBF0;
  *(void *)(v6 + 32) = 0x657274736E776F64LL;
  *(void *)(v6 + 40) = 0xEA00000000006D61LL;
  uint64_t v7 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v8 = *(void *)(v1 + 96);
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(boxed_opaque_existential_1, v7, v8);
  *(void *)(v6 + 80) = 0x64656873696E6966LL;
  *(void *)(v6 + 88) = 0xE800000000000000LL;
  uint64_t v10 = *v0;
  uint64_t v11 = MEMORY[0x1896184C8];
  *(_BYTE *)(v6 + 96) = *((_BYTE *)v0 + *(void *)(*v0 + 160));
  *(void *)(v6 + 120) = v11;
  *(void *)(v6 + 128) = 0xD000000000000014LL;
  *(void *)(v6 + 136) = 0x8000000183BA7A30LL;
  *(void *)(v6 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v12 + 16;
  *(void *)(v6 + 144) = v12;
  uint64_t v14 = (uint64_t)v0 + *(void *)(v10 + 168);
  swift_beginAccess();
  outlined init with copy of Subscription?(v14, v13);
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v5, 1LL, 1LL, v15);
  __int128 v16 = *(_OWORD *)(v1 + 80);
  uint64_t v17 = v8;
  __int128 v18 = *(_OWORD *)(v1 + 104);
  __int128 v19 = *(_OWORD *)(v1 + 120);
  type metadata accessor for Publishers.Encode.Inner();
}

void sub_183B0012C()
{
}

void Publishers.Encode.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x65646F636E45LL;
  a1[1] = 0xE600000000000000LL;
}

uint64_t *Publishers.Encode.Inner.init(_:encode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 152);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *uint64_t v9 = 0;
  *((_BYTE *)v3 + *(void *)(*v3 + 160)) = 0;
  uint64_t v10 = (uint64_t)v3 + *(void *)(*v3 + 168);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v10 + 32) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 136),  a1);
  uint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 144));
  *uint64_t v11 = a2;
  v11[1] = a3;
  return v3;
}

uint64_t *Publishers.Encode.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 136));
  swift_release();
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 168));
  return v0;
}

uint64_t Publishers.Encode.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.Encode.Inner.deinit);
}

uint64_t Publishers.Encode.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v4);
  if ((*((_BYTE *)v1 + *(void *)(*v1 + 160)) & 1) == 0)
  {
    uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 168);
    swift_beginAccess();
    outlined init with copy of Subscription?(v5, (uint64_t)&v12);
    uint64_t v6 = *((void *)&v13 + 1);
    outlined destroy of Subscription?((uint64_t)&v12);
    if (!v6)
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
      outlined init with take of Subscription?((uint64_t)&v12, (uint64_t)v16);
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)v16, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      uint64_t v10 = *(void *)(v3 + 112);
      __int128 v11 = *(_OWORD *)(v3 + 96);
      __int128 v12 = *(_OWORD *)(v3 + 80);
      __int128 v13 = v11;
      uint64_t v14 = v10;
      __int128 v15 = *(_OWORD *)(v3 + 120);
      type metadata accessor for Publishers.Encode.Inner();
    }
  }

  os_unfair_lock_unlock(v4);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v7);
}

uint64_t Publishers.Encode.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + v4[19]);
  os_unfair_lock_lock(v9);
  char v10 = *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 160LL));
  os_unfair_lock_unlock(v9);
  uint64_t v11 = 0LL;
  if ((v10 & 1) == 0)
  {
    (*(void (**)(uint64_t))(v2 + *(void *)(*(void *)v2 + 144LL)))(a1);
    uint64_t v11 = (*(uint64_t (**)(char *, void))(v4[15] + 48LL))(v8, v4[12]);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }

  return v11;
}

void Publishers.Encode.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  __int128 v12 = (char *)&v19 - v11;
  uint64_t v13 = *(os_unfair_lock_s **)(v1 + v2[19]);
  os_unfair_lock_lock(v13);
  uint64_t v14 = *(void *)(*(void *)v1 + 160LL);
  if ((*(_BYTE *)(v1 + v14) & 1) != 0)
  {
    os_unfair_lock_unlock(v13);
  }

  else
  {
    uint64_t v20 = v6;
    *(_BYTE *)(v1 + v14) = 1;
    uint64_t v23 = 0LL;
    memset(v22, 0, sizeof(v22));
    uint64_t v15 = v1 + *(void *)(*(void *)v1 + 168LL);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v22, v15);
    swift_endAccess();
    os_unfair_lock_unlock(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1LL, AssociatedTypeWitness) == 1)
    {
      *(void *)&v22[0] = 0LL;
      (*(void (**)(_OWORD *, void))(v2[15] + 56LL))(v22, v2[12]);
    }

    else
    {
      __int128 v16 = v20;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v20, v12, AssociatedTypeWitness);
      uint64_t v17 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v18, v16, AssociatedTypeWitness);
      *(void *)&v22[0] = v17;
      (*(void (**)(_OWORD *, void))(v2[15] + 56LL))(v22, v2[12]);
      MEMORY[0x186E22870](v17);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v16, AssociatedTypeWitness);
    }
  }

uint64_t Publishers.Encode.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 152LL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 168LL);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  outlined init with copy of Subscription?((uint64_t)v11, (uint64_t)v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    outlined destroy of Subscription?((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }

  else
  {
    outlined destroy of Subscription?((uint64_t)v11);
    return outlined destroy of Subscription?((uint64_t)v8);
  }

void Publishers.Encode.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152LL));
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*(void *)v0 + 160LL);
  if ((*(_BYTE *)(v0 + v2) & 1) == 0)
  {
    uint64_t v3 = v0 + *(void *)(*(void *)v0 + 168LL);
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((void *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      uint64_t v8 = 0LL;
      __int128 v6 = 0u;
      __int128 v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2) = 1;
      os_unfair_lock_unlock(v1);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }

    outlined destroy of Subscription?((uint64_t)&v6);
  }

  os_unfair_lock_unlock(v1);
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Encode<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.Encode.Inner.request(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Encode<A, B>.Inner<A1>( void *a1)
{
  return Publishers.Encode.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Encode<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.Encode.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Encode<A, B>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Encode<A, B>.Inner<A1>()
{
  return 0x65646F636E45LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Encode<A, B>.Inner<A1>()
{
}

  ;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Encode<A, B>.Inner<A1>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Encode<A, B>.Inner<A1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Encode<A, B>( uint64_t a1)
{
}

void Publisher.decode<A, B>(type:decoder:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v16 = *(void *)(a5 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](a1);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a2, a5);
  Publishers.Decode.init(upstream:decoder:)((uint64_t)v21, (uint64_t)v19, a3, a4, a5, a6, v23, v24, a9);
}

  ;
}

void Publisher<>.encode<A>(encoder:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v7, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, a3);
  Publishers.Encode.init(upstream:encoder:)((uint64_t)v19, (uint64_t)v17, a2, a3, a4, a5, v22, a7);
}

  ;
}

uint64_t dispatch thunk of TopLevelDecoder.decode<A>(_:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of TopLevelEncoder.encode<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t type metadata completion function for Publishers.Decode()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t type metadata completion function for Publishers.Decode.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata completion function for Publishers.Encode()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Decode(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B01024 + 4 * byte_183B9EC00[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.Decode( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B0119C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B01214LL);
}

void sub_183B011A4(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B011ACLL);
  }
  JUMPOUT(0x183B01214LL);
}

void sub_183B011EC()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B01214LL);
}

void sub_183B011F4()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B01214LL);
}

uint64_t sub_183B011FC(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B01214LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B01210LL);
    }
    JUMPOUT(0x183B01208LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.Encode.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Decode<A, B, C>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_183B012EC()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return swift_deallocObject();
}

uint64_t Just.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t *Just.Inner.__allocating_init(downstream:value:)(uint64_t a1, uint64_t a2)
{
  return Just.Inner.init(downstream:value:)(a1, a2);
}

uint64_t Just.Inner.customMirror.getter()
{
  unint64_t v1 = *(void **)v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  unsigned int v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v15[0] = v0;
  uint64_t v8 = v1[10];
  getContiguousArrayStorageType<A>(for:)(v8, v8);
  uint64_t v9 = *(void *)(v8 - 8);
  swift_allocObject();
  swift_retain();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, v0 + *(void *)(*(void *)v0 + 112LL), v8);
  v15[1] = v10;
  uint64_t v12 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v12);
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v7, 1LL, 1LL, v13);
  type metadata accessor for Just.Inner(0LL, v8, v1[11], v1[12]);
  MEMORY[0x186E22960](MEMORY[0x189618488], v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Just.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 1953723722LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t Just.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56LL))( (char *)&v8 - v4,  1LL,  1LL,  v1);
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 104LL);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v6, v5, v2);
  return swift_endAccess();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Just<A>.Inner<A1>()
{
  return 1953723722LL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Just<A>.Inner<A1>()
{
  return Just.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Just<A>.Inner<A1>( void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Just<A>.Inner<A1>()
{
  return Just.Inner.cancel()();
}

uint64_t static Just<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Just<A>()
{
  return static Just<A>.== infix(_:_:)();
}

uint64_t Just<A>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Just<A>.contains(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t Just.allSatisfy(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = a1(v2);
  *a2 = result & 1;
  return result;
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>( void (*a1)(_BYTE *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t Just.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  uint64_t v6 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t v10 = v6;
  uint64_t v8 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a2, &v10, v8);
}

uint64_t Just.compactMap<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - v7;
  a1(v2);
  Optional.publisher.getter(v5, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Just.prepend(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v4);
  uint64_t v7 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v7);
  static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x186E22960](MEMORY[0x189618470], v7);
  Sequence.publisher.getter(v7, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.prepend<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Array();
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v6 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v4);
  specialized closure #1 in Publisher.multicast<A>(subject:)(v5);
  MEMORY[0x186E22960](MEMORY[0x189618490], v5);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x186E22960](MEMORY[0x189618470], v5);
  Sequence.publisher.getter(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.append(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v4);
  uint64_t v7 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v7);
  static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x186E22960](MEMORY[0x189618470], v7);
  Sequence.publisher.getter(v7, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.append<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Array();
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v6 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v4);
  specialized closure #1 in Publisher.multicast<A>(subject:)(v5);
  MEMORY[0x186E22960](MEMORY[0x189618490], v5);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  swift_bridgeObjectRelease();
  MEMORY[0x186E22960](MEMORY[0x189618470], v5);
  Sequence.publisher.getter(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.tryAllSatisfy(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v2);
  *(void *)a2 = result & 1;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void Just.count()(void *a1@<X8>)
{
  *a1 = 1LL;
}

uint64_t Just.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = *(void *)(v6 - 8);
    if (a1)
    {
      uint64_t v12 = 1LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      uint64_t v12 = 0LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, v12, 1LL, v6);
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }

  return result;
}

uint64_t Just.drop(while:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v15 - v9;
  char v11 = a1(v3);
  uint64_t v12 = *(void *)(v7 - 8);
  if ((v11 & 1) != 0)
  {
    uint64_t v13 = 1LL;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v4, v7);
    uint64_t v13 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v13, 1LL, v7);
  return Optional.Publisher.init(_:)((uint64_t)v10, a3);
}

uint64_t Just.last()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Just.ignoreOutput()@<X0>(_BYTE *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1LL, a1);
}

uint64_t Just.map<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v8(v2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, a1);
}

uint64_t Just.tryMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for Result();
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = &v15[-v12];
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = a4;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = v5;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC( (void (*)(_BYTE *))partial apply for closure #1 in Just.tryMap<A>(_:),  (uint64_t)&v15[-v12]);
  return Result.Publisher.init(_:)((uint64_t)v13, a5);
}

uint64_t Just.mapError<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  return Result.Publisher.init(_:)((uint64_t)v6, v4, a3);
}

uint64_t Just.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = *(void *)(v6 - 8);
    if (a1)
    {
      uint64_t v12 = 1LL;
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      uint64_t v12 = 0LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, v12, 1LL, v6);
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }

  return result;
}

uint64_t Just.output<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v12 - v7;
  __int128 v12 = xmmword_183B9EED0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v9 = *(void *)(v5 - 8);
  if (v13)
  {
    uint64_t v10 = 1LL;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, v5);
    uint64_t v10 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, v10, 1LL, v5);
  return Optional.Publisher.init(_:)((uint64_t)v8, a2);
}

uint64_t Just.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = *(void *)(v6 - 8);
    if (a1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, v12, 1LL, v6);
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }

  return result;
}

uint64_t Just.first(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v15 - v9;
  char v11 = a1(v3);
  uint64_t v12 = *(void *)(v7 - 8);
  if ((v11 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v4, v7);
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v13, 1LL, v7);
  return Optional.Publisher.init(_:)((uint64_t)v10, a3);
}

uint64_t Just.tryReduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Just.tryReduce<A>(_:_:)( a1,  a2,  a3,  a4,  a5,  (void (*)(_BYTE *))partial apply for closure #1 in Just.tryReduce<A>(_:_:),  a6);
}

uint64_t Just.removeDuplicates(by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Just.tryRemoveDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v9(v3, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return Result.Publisher.init(_:)((uint64_t)v8, v5, a3);
}

uint64_t Just.replaceEmpty(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t Just.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t Just.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v9(v6, v3);
  return Result.Publisher.init(_:)((uint64_t)v8, a2, a3);
}

uint64_t Just.tryScan<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Just.tryReduce<A>(_:_:)( a1,  a2,  a3,  a4,  a5,  (void (*)(_BYTE *))partial apply for closure #1 in Just.tryReduce<A>(_:_:),  a6);
}

uint64_t Just.tryReduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(_BYTE *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v19 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v14 = type metadata accessor for Result();
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v18 - v15;
  uint64_t v20 = *(void *)(a4 + 16);
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = v7;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC(v19, (uint64_t)&v18 - v15);
  return Result.Publisher.init(_:)((uint64_t)v16, a7);
}

uint64_t Just.setFailureType<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v3, v5);
  return Result.Publisher.init(_:)((uint64_t)v7, v5, a3);
}

uint64_t partial apply for closure #1 in Just.tryMap<A>(_:)(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))(*(void *)(v1 + 48));
  if (v2) {
    *a1 = v2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x189618780];
    v3[1] = v2;
    unint64_t result = MEMORY[0x186E22960](MEMORY[0x189618A60], v1, v3);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = MEMORY[0x186E22960](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = MEMORY[0x186E22960](MEMORY[0x189618788], MEMORY[0x189618740]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }

  return result;
}

uint64_t partial apply for closure #1 in Just.tryReduce<A>(_:_:)(void *a1)
{
  return partial apply for closure #1 in Just.tryReduce<A>(_:_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t result = (*(uint64_t (**)(void, void))(v1 + 32))(*(void *)(v1 + 48), *(void *)(v1 + 56));
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Just<A>()
{
  return MEMORY[0x18961A528];
}

uint64_t type metadata instantiation function for Just()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Just()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Just(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t assignWithCopy for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for Just(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B02CCC + 4 * byte_183B9EEE0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Just(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for Just(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Just);
}

uint64_t type metadata completion function for PublishedSubject()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void PublishedSubject.value.getter(uint64_t a1@<X8>)
{
  os_unfair_lock_t v3 = *v1;
  os_unfair_lock_lock(v1[2]);
  uint64_t v4 = (char *)v1 + *(void *)&(*v1)[26]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)&v3[20]._os_unfair_lock_opaque - 8LL) + 16LL))( a1,  v4);
  os_unfair_lock_unlock(v1[2]);
}

uint64_t PublishedSubject.objectWillChange.getter()
{
  uint64_t v1 = *(uint64_t *)((char *)v0 + *(void *)&(*v0)[32]._os_unfair_lock_opaque);
  unint64_t v2 = v0[2];
  swift_retain();
  os_unfair_lock_unlock(v2);
  return v1;
}

uint64_t PublishedSubject.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  PublishedSubject.init(_:)(a1);
  return v2;
}

uint64_t *PublishedSubject.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  v1[2] = (uint64_t)v4;
  uint64_t v5 = *(void *)(v3 + 80);
  v1[3] = ConduitList.init()();
  *((_BYTE *)v1 + 32) = v6;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112)) = MEMORY[0x18961AFE8];
  *((_BYTE *)v1 + *(void *)(*v1 + 120)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 128)) = 0LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))( (uint64_t)v1 + *(void *)(*v1 + 104),  a1,  v5);
  return v1;
}

uint64_t *PublishedSubject.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 112));
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v9);
      uint64_t v7 = v10;
      uint64_t v6 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      v5 += 40LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

  MEMORY[0x186E22A2C](v1[2], -1LL, -1LL);
  outlined consume of ConduitList<A, Never><A>(v1[3], *((_BYTE *)v1 + 32));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8LL) + 8LL))((uint64_t)v1 + *(void *)(*v1 + 104));
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PublishedSubject.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PublishedSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublishedSubject);
}

uint64_t PublishedSubject.send(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  uint64_t v4 = *(void *)(*v1 + 112LL);
  uint64_t v5 = *(void **)((char *)v1 + v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5);
    *(void *)((char *)v1 + v4) = v5;
  }

  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v8 + 1,  1,  v5);
    *(void *)((char *)v1 + v4) = v5;
  }

  __int128 v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  os_unfair_lock_unlock(v3);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000LL, v9, v10);
}

uint64_t PublishedSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v20[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v12 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v12);
  uint64_t v13 = *(void *)(v8 + 80);
  uint64_t v14 = type metadata accessor for PublishedSubject.Conduit(0LL, v13, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  swift_allocObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = PublishedSubject.Conduit.init(_:_:)(v15, (uint64_t)v11);
  swift_beginAccess();
  uint64_t v17 = (uint64_t *)type metadata accessor for ConduitList(0LL, v13, MEMORY[0x18961A520], MEMORY[0x18961A528]);
  ConduitList.insert(_:)(v16, v17);
  swift_endAccess();
  os_unfair_lock_unlock(v12);
  void v20[3] = v14;
  void v20[4] = &protocol witness table for ConduitBase<A, B>;
  v20[0] = v16;
  (*(void (**)(void *, uint64_t, uint64_t))(a3 + 40))(v20, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t PublishedSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return PublishedSubject.Conduit.init(_:_:)(a1, a2);
}

uint64_t PublishedSubject.send(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = *(void *)((char *)v1 + *(void *)(*v1 + 128LL));
  swift_beginAccess();
  uint64_t v7 = v2[3];
  char v8 = *((_BYTE *)v2 + 32);
  swift_retain();
  outlined copy of ConduitList<A, Never><A>(v7, v8);
  os_unfair_lock_unlock(v5);
  if (v6)
  {
    swift_retain();
    ObservableObjectPublisher.send()();
    uint64_t v9 = swift_release();
  }

  MEMORY[0x1895F8858](v9);
  void v13[2] = a1;
  uint64_t v10 = *(void *)(v4 + 80);
  ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v13, v7, v8);
  os_unfair_lock_lock(v5);
  uint64_t v11 = (char *)v2 + *(void *)(*v2 + 104LL);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v11, a1, v10);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  outlined consume of ConduitList<A, Never><A>(v7, v8);
  return swift_release();
}

void PublishedSubject.disassociate(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  uint64_t v5 = (uint64_t *)type metadata accessor for ConduitList( 0LL,  *(void *)(v3 + 80),  MEMORY[0x18961A520],  MEMORY[0x18961A528]);
  ConduitList.remove(_:)(a1, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
}

uint64_t type metadata completion function for PublishedSubject.Conduit()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t PublishedSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 168LL);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - v8;
  v2[2] = 0LL;
  uint64_t v10 = (char *)v2 + *(void *)(v4 + 192);
  uint64_t v11 = *(void *)(v5 - 8);
  unsigned int v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1LL, 1LL, v5);
  *(void *)((char *)v2 + *(void *)(*v2 + 200LL)) = 0LL;
  uint64_t v13 = *(void *)(*v2 + 208LL);
  swift_retain();
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  _DWORD *v14 = 0;
  *(void *)((char *)v2 + v13) = v14;
  uint64_t v15 = *(void *)(*v2 + 216LL);
  uint64_t v16 = (void *)swift_slowAlloc();
  *uint64_t v16 = 0LL;
  *(void *)((char *)v2 + v15) = v16;
  *((_BYTE *)v2 + *(void *)(*v2 + 224LL)) = 0;
  v2[2] = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, v18, v5);
  v12(v9, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

uint64_t PublishedSubject.Conduit.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 192LL);
  uint64_t v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
}

uint64_t PublishedSubject.Conduit.deinit()
{
  uint64_t v1 = ConduitBase.init()();
  swift_release();
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 192LL);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return v1;
}

uint64_t PublishedSubject.Conduit.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PublishedSubject.Conduit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PublishedSubject.Conduit);
}

void PublishedSubject.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v27 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v7);
  unsigned int v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v3 + 208));
  os_unfair_lock_lock(v13);
  uint64_t v14 = *v2;
  uint64_t v15 = *(void *)(*v2 + 200);
  uint64_t v16 = *(uint64_t *)((char *)v2 + v15);
  if (v16 != 0x8000000000000000LL)
  {
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }

    if (!v16)
    {
LABEL_6:
      *((_BYTE *)v2 + *(void *)(v14 + 224)) = 0;
      os_unfair_lock_unlock(v13);
      return;
    }
  }

  uint64_t v17 = *(void *)(v14 + 192);
  uint64_t v28 = v10;
  uint64_t v18 = (uint64_t)v2 + v17;
  swift_beginAccess();
  uint64_t v19 = v18;
  uint64_t v20 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v19, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1LL, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v14 = *v2;
    goto LABEL_6;
  }

  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v12, v9, v4);
  uint64_t v21 = *(uint64_t *)((char *)v2 + v15);
  if (v21 != 0x8000000000000000LL)
  {
    if ((v21 & 0x8000000000000000LL) == 0)
    {
      if (v21)
      {
        *(uint64_t *)((char *)v2 + v15) = v21 - 1;
        goto LABEL_11;
      }

void PublishedSubject.Conduit.finish(completion:)(int a1)
{
  uint64_t v2 = v1;
  int v20 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 168LL);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  unsigned int v12 = (char *)&v18 - v11;
  uint64_t v13 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_t v21 = *(os_unfair_lock_t *)((char *)v2 + *(void *)(v3 + 208));
  os_unfair_lock_lock(v21);
  uint64_t v16 = (char *)v2 + *(void *)(*v2 + 192LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v16, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    os_unfair_lock_unlock(v21);
  }

  else
  {
    uint64_t v19 = v3;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1LL, 1LL, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v16, v9, v5);
    swift_endAccess();
    uint64_t v17 = v2[2];
    v2[2] = 0LL;
    os_unfair_lock_unlock(v21);
    if (v17)
    {
      swift_retain();
      PublishedSubject.disassociate(_:)((uint64_t)v2);
      swift_release();
    }

    os_unfair_recursive_lock_lock_with_options();
    v22[0] = v20 & 1;
    (*(void (**)(char *, uint64_t))(*(void *)(v19 + 176) + 56LL))(v22, v4);
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v4);
  }

Swift::Void __swiftcall PublishedSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 160LL);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](a1.rawValue);
  uint64_t v46 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v49 = (char *)&v44 - v11;
  uint64_t v12 = *(void *)(v4 + 168);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v52 = v12;
  MEMORY[0x1895F8858](v15);
  uint64_t v50 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1.rawValue != 0x8000000000000000LL)
  {
    if ((a1.rawValue & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (a1.rawValue)
    {
      goto LABEL_4;
    }

    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

Swift::Void __swiftcall PublishedSubject.Conduit.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 168LL);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v15[-v8];
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 208));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 192LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  uint64_t v12 = *(void *)(v2 - 8);
  int v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1LL, v2);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1LL, 1LL, v2);
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    uint64_t v14 = v0[2];
    v0[2] = 0LL;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      PublishedSubject.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }

void vtable thunk for ConduitBase.finish(completion:) dispatching to PublishedSubject.Conduit.finish(completion:)( unsigned __int8 *a1)
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PublishedSubject<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PublishedSubject.receive<A>(subscriber:)(a1, a2, a3);
}

void PublishedSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  v19[1] = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 208)));
  uint64_t v20 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v9 + 32) = 0x746E65726170LL;
  *(void *)(v9 + 40) = 0xE600000000000000LL;
  uint64_t v10 = v1[2];
  type metadata accessor for PublishedSubject(255LL, *(void *)(v2 + 160), v11, v12);
  uint64_t v13 = type metadata accessor for Optional();
  *(void *)(v9 + outlined destroy of SubscriptionStatus(v0 + 48) = v10;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v13;
  *(void *)(v9 + 80) = 0x657274736E776F64LL;
  *(void *)(v9 + 88) = 0xEA00000000006D61LL;
  uint64_t v14 = (char *)v1 + *(void *)(*v1 + 192LL);
  swift_beginAccess();
  uint64_t v15 = type metadata accessor for Optional();
  *(void *)(v9 + 120) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))( boxed_opaque_existential_1,  v14,  v15);
  *(void *)(v9 + 128) = 0x646E616D6564LL;
  *(void *)(v9 + 136) = 0xE600000000000000LL;
  *(void *)(v9 + 144) = *(void *)((char *)v1 + *(void *)(*v1 + 200LL));
  *(void *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 176) = 0x7463656A627573LL;
  uint64_t v17 = v1[2];
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
  *(void *)(v9 + 184) = 0xE700000000000000LL;
  *(void *)(v9 + 192) = v17;
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v8, 1LL, 1LL, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 208LL)));
}

void PublishedSubject.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0xD000000000000010LL;
  a1[1] = 0x8000000183B9F050LL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PublishedSubject<A>.Conduit<A1>()
{
  return 0xD000000000000010LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance PublishedSubject<A>.Conduit<A1>( uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance PublishedSubject<A>.Conduit<A1>( void *a1@<X8>)
{
}

uint64_t instantiation function for generic protocol witness table for PublishedSubject<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E22960](&protocol conformance descriptor for PublishedSubject<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void specialized PublishedSubject.objectWillChange.setter(os_unfair_lock_s *a1)
{
  *(os_unfair_lock_t *)((char *)v1 + *(void *)&(*v1)[32]._os_unfair_lock_opaque) = a1;
  swift_retain();
  swift_release();
  os_unfair_lock_unlock(v1[2]);
}

uint64_t PassthroughSubject.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  PassthroughSubject.init()();
  return v0;
}

uint64_t *PassthroughSubject.init()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  _DWORD *v2 = 0;
  v0[2] = (uint64_t)v2;
  *((_BYTE *)v0 + outlined destroy of Subscription?(v0 + 24) = 1;
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 120);
  uint64_t v5 = type metadata accessor for Subscribers.Completion(0LL, *(void *)(v1 + 88), *(void *)(v1 + 96), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v3, 1LL, 1LL, v5);
  uint64_t v6 = (uint64_t)v0 + *(void *)(*v0 + 128);
  *(void *)uint64_t v6 = ConduitList.init()();
  *(_BYTE *)(v6 + 8) = v7;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 + 136)) = MEMORY[0x18961AFE8];
  *((_BYTE *)v0 + *(void *)(*v0 + 144)) = 0;
  return v0;
}

void *PassthroughSubject.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)((char *)v0 + *(void *)(*v0 + 136LL));
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v12);
      uint64_t v7 = v13;
      uint64_t v6 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v5 += 40LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

  MEMORY[0x186E22A2C](v1[2], -1LL, -1LL);
  uint64_t v8 = (char *)v1 + *(void *)(*v1 + 120LL);
  type metadata accessor for Subscribers.Completion(255LL, *(void *)(v2 + 88), *(void *)(v2 + 96), v9);
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
  outlined consume of ConduitList<A, Never><A>( *(void *)((char *)v1 + *(void *)(*v1 + 128LL)),  *((_BYTE *)v1 + *(void *)(*v1 + 128LL) + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PassthroughSubject.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void PassthroughSubject.send(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  uint64_t v4 = *(void *)(*v1 + 136LL);
  uint64_t v5 = *(void **)((char *)v1 + v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5);
    *(void *)((char *)v1 + v4) = v5;
  }

  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v8 + 1,  1,  v5);
    *(void *)((char *)v1 + v4) = v5;
  }

  __int128 v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  int v9 = *((unsigned __int8 *)v1 + *(void *)(*v1 + 144LL));
  os_unfair_lock_unlock(v3);
  if (v9 == 1)
  {
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(0x8000000000000000LL, v10, v11);
  }

Swift::Void __swiftcall PassthroughSubject.acknowledgeDownstreamDemand()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*v0 + 144LL);
  if (*((_BYTE *)v0 + v2) == 1)
  {
    os_unfair_lock_unlock(v1);
  }

  else
  {
    *((_BYTE *)v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2) = 1;
    uint64_t v3 = *(void *)((char *)v0 + *(void *)(*v0 + 136LL));
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v1);
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v5 = v3 + 32;
      do
      {
        outlined init with copy of Subscription(v5, (uint64_t)v8);
        uint64_t v6 = v9;
        uint64_t v7 = v10;
        __swift_project_boxed_opaque_existential_1(v8, v9);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(0x8000000000000000LL, v6, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        v5 += 40LL;
        --v4;
      }

      while (v4);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

uint64_t PassthroughSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 88);
  uint64_t v26 = *(void *)(*v4 + 96);
  uint64_t v27 = v8;
  uint64_t v9 = type metadata accessor for Subscribers.Completion(255LL, v8, v26, a4);
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v25 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v25);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v10);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (os_unfair_lock_s *)v5[2];
  os_unfair_lock_lock(v18);
  if (*((_BYTE *)v5 + 24) == 1)
  {
    uint64_t v28 = *(void *)(v7 + 80);
    uint64_t v31 = v28;
    uint64_t v32 = v27;
    uint64_t v33 = a2;
    uint64_t v34 = v29;
    type metadata accessor for PassthroughSubject.Conduit();
  }

  uint64_t v19 = v30;
  uint64_t v20 = (uint64_t)v5 + *(void *)(*v5 + 120);
  swift_beginAccess();
  uint64_t v21 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v12, v20, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, v9) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v12, v21);
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v9);
    os_unfair_lock_unlock(v18);
    uint64_t v22 = v29;
    if (one-time initialization token for singleton != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 40))( &static Subscriptions._EmptySubscription.singleton,  a2,  v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 56))(v16, a2, v22);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v9);
  }

  return result;
}

uint64_t PassthroughSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return PassthroughSubject.Conduit.init(_:_:)(a1, a2);
}

void PassthroughSubject.send(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 88);
  uint64_t v8 = *(void *)(*v4 + 96);
  uint64_t v9 = type metadata accessor for Subscribers.Completion(255LL, v7, v8, a4);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v14);
  if (*((_BYTE *)v4 + 24) == 1)
  {
    *((_BYTE *)v4 + outlined destroy of Subscription?(v0 + 24) = 0;
    uint64_t v15 = a1;
    uint64_t v23 = a1;
    uint64_t v16 = *(void *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v9);
    uint64_t v17 = (uint64_t)v4 + *(void *)(*v4 + 120);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v17, v13, v10);
    swift_endAccess();
    uint64_t v18 = (uint64_t)v4 + *(void *)(*v4 + 128);
    swift_beginAccess();
    uint64_t v19 = *(void *)v18;
    char v20 = *(_BYTE *)(v18 + 8);
    outlined copy of ConduitList<A, Never><A>(*(void *)v18, v20);
    type metadata accessor for ConduitList(0LL, *(void *)(v6 + 80), v7, v8);
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v14);
    MEMORY[0x1895F8858](v21);
    *(&v22 - 2) = v23;
    ConduitList.forEach(_:)( (uint64_t)partial apply for closure #1 in PassthroughSubject.send(completion:),  (uint64_t)(&v22 - 4),  v19,  v20);
    outlined consume of ConduitList<A, Never><A>(v19, v20);
  }

  else
  {
    os_unfair_lock_unlock(v14);
  }

void PassthroughSubject.disassociate(_:)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v4);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    swift_beginAccess();
    uint64_t v5 = (uint64_t *)type metadata accessor for ConduitList(0LL, v3[10], v3[11], v3[12]);
    ConduitList.remove(_:)(a1, v5);
    swift_endAccess();
  }

  os_unfair_lock_unlock(v4);
}

uint64_t PassthroughSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 176LL);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - v8;
  v2[2] = 0LL;
  uint64_t v10 = (char *)v2 + *(void *)(v4 + 200);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1LL, 1LL, v5);
  *(void *)((char *)v2 + *(void *)(*v2 + 208LL)) = 0LL;
  uint64_t v13 = *(void *)(*v2 + 216LL);
  swift_retain();
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  _DWORD *v14 = 0;
  *(void *)((char *)v2 + v13) = v14;
  uint64_t v15 = *(void *)(*v2 + 224LL);
  uint64_t v16 = (void *)swift_slowAlloc();
  *uint64_t v16 = 0LL;
  *(void *)((char *)v2 + v15) = v16;
  v2[2] = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, v18, v5);
  v12(v9, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

uint64_t PassthroughSubject.Conduit.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 200LL);
  uint64_t v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
}

uint64_t PassthroughSubject.Conduit.deinit()
{
  uint64_t v1 = ConduitBase.init()();
  swift_release();
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 200LL);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return v1;
}

uint64_t PassthroughSubject.Conduit.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void PassthroughSubject.Conduit.finish(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 176LL);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v22 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v3 + 216));
  os_unfair_lock_lock(v15);
  uint64_t v16 = (char *)v2 + *(void *)(*v2 + 200LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v16, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    os_unfair_lock_unlock(v15);
  }

  else
  {
    uint64_t v21 = v3;
    uint64_t v17 = v14;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v4);
    uint64_t v18 = v22;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v22, 1LL, 1LL, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v16, v18, v5);
    swift_endAccess();
    uint64_t v19 = v2[2];
    v2[2] = 0LL;
    os_unfair_lock_unlock(v15);
    if (v19)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v2);
      swift_release();
    }

    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 + 184) + 56LL))(v23, v4);
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v4);
  }

Swift::Void __swiftcall PassthroughSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 176LL);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v15 - v7;
  if (a1.rawValue != 0x8000000000000000LL)
  {
    if ((a1.rawValue & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (a1.rawValue)
    {
      goto LABEL_4;
    }

    __break(1u);
    goto LABEL_19;
  }

Swift::Void __swiftcall PassthroughSubject.Conduit.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176LL);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](v3);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v15[-v8];
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 216));
  os_unfair_lock_lock(v10);
  int v11 = (char *)v0 + *(void *)(*v0 + 200LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  uint64_t v12 = *(void *)(v2 - 8);
  int v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1LL, v2);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1LL, 1LL, v2);
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    uint64_t v14 = v0[2];
    v0[2] = 0LL;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PassthroughSubject<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  return PassthroughSubject.receive<A>(subscriber:)((uint64_t)v6, a2, a3, v8);
}

void PassthroughSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  v20[1] = a1;
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v2[27]));
  uint64_t v21 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v9 + 32) = 0x746E65726170LL;
  *(void *)(v9 + 40) = 0xE600000000000000LL;
  uint64_t v10 = v1[2];
  uint64_t v11 = v2[20];
  uint64_t v12 = v2[21];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PassthroughSubject(255LL, v11, v12, AssociatedConformanceWitness);
  uint64_t v14 = type metadata accessor for Optional();
  *(void *)(v9 + outlined destroy of SubscriptionStatus(v0 + 48) = v10;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v14;
  *(void *)(v9 + 80) = 0x657274736E776F64LL;
  *(void *)(v9 + 88) = 0xEA00000000006D61LL;
  uint64_t v15 = (char *)v1 + *(void *)(*v1 + 200LL);
  swift_beginAccess();
  uint64_t v16 = type metadata accessor for Optional();
  *(void *)(v9 + 120) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))( boxed_opaque_existential_1,  v15,  v16);
  *(void *)(v9 + 128) = 0x646E616D6564LL;
  *(void *)(v9 + 136) = 0xE600000000000000LL;
  *(void *)(v9 + 144) = *(void *)((char *)v1 + *(void *)(*v1 + 208LL));
  *(void *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 176) = 0x7463656A627573LL;
  uint64_t v18 = v1[2];
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v14;
  *(void *)(v9 + 184) = 0xE700000000000000LL;
  *(void *)(v9 + 192) = v18;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v8, 1LL, 1LL, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 216LL)));
}

void PassthroughSubject.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0xD000000000000012LL;
  a1[1] = 0x8000000183B9F220LL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PassthroughSubject<A, B>.Conduit<A1>()
{
  return 0xD000000000000012LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance PassthroughSubject<A, B>.Conduit<A1>( uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance PassthroughSubject<A, B>.Conduit<A1>( void *a1@<X8>)
{
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Subscription?>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Subscription>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObservableObjectTable.Storage>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }

  else
  {
    uint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 < a4 || v10 + 4 >= &a4[2 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }

    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

void type metadata accessor for PassthroughSubject.Conduit()
{
}

uint64_t partial apply for closure #1 in PassthroughSubject.send(completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112LL))(*(void *)(v1 + 16));
}

uint64_t instantiation function for generic protocol witness table for PassthroughSubject<A, B>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E22960](&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for PassthroughSubject( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for PassthroughSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PassthroughSubject);
}

uint64_t method lookup function for PassthroughSubject()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PassthroughSubject.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t type metadata completion function for PassthroughSubject.Conduit()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  int v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  int v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t Result.tryMap<A>(_:)@<X0>( void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v26 = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v7);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v17, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v20(v9, v17, v5);
    uint64_t v21 = swift_allocError();
    v20(v22, v9, v5);
    *a4 = v21;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v25(v15);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publisher<>.contains(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v20 - v14;
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v5, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, AssociatedTypeWitness);
  return Publishers.Contains.init(upstream:output:)((uint64_t)v17, (uint64_t)v15, a2, a3, a4, a5);
}

uint64_t Publishers.Contains.init(upstream:output:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = a6 + *(int *)(type metadata accessor for Publishers.Contains(0LL, a3, a4, a5) + 44);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v11,  a2,  AssociatedTypeWitness);
}

uint64_t type metadata accessor for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Contains);
}

uint64_t Publishers.Contains.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.Contains.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a2,  v4,  AssociatedTypeWitness);
}

void Publishers.Contains.receive<A>(subscriber:)()
{
}

uint64_t sub_183B06CF4(uint64_t a1)
{
  uint64_t v7 = v1 + *(int *)(v2 + 44);
  swift_allocObject();
  uint64_t v10 = specialized Publishers.Contains.Inner.init(downstream:output:)(v3, v7);
  uint64_t v8 = MEMORY[0x186E22960](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v10, v4, a1, v5, v8);
  return swift_release();
}

void type metadata accessor for Publishers.Contains.Inner()
{
}

uint64_t Publishers.Contains.Inner.description.getter()
{
  return 0x736E6961746E6F43LL;
}

uint64_t Publishers.Contains.Inner.receive(newValue:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v11 - v5;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))( (char *)&v11 - v5,  (char *)v0 + *(void *)(v2 + 480),  AssociatedTypeWitness);
  char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  if ((v7 & 1) != 0)
  {
    swift_beginAccess();
    *((_BYTE *)v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  }

  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0LL, MEMORY[0x18961AFC8] + 8LL, v8, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.Contains.Inner.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 480LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( v1,  AssociatedTypeWitness);
}

uint64_t *Publishers.Contains.Inner.deinit()
{
  uint64_t v0 = ReduceProducer.deinit();
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + 480);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t Publishers.Contains.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Contains<A>()
{
}

uint64_t static Publishers.Contains<>.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v20[1] = a6;
  uint64_t v8 = type metadata accessor for Publishers.Contains(0LL, a3, a4, a6);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)v20 - v13;
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v14, a1, v8);
  v16(v12, a2, v8);
  if ((v15 & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  }

  else
  {
    char v17 = 0;
  }

  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v18(v14, v8);
  return v17 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Contains<A>( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Contains<>.== infix(_:_:)(a1, a2, a3[2], a3[3], *(void *)(a4 - 8), a3[4]);
}

uint64_t *specialized Publishers.Contains.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 448LL);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v2 + *(void *)(v9 + 480);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( v10,  a2,  AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  char v15 = 0;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v8, (uint64_t)&v15, v12);
}

uint64_t type metadata completion function for Publishers.Contains()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Contains(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(v9 + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }

  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( ((unint64_t)a1 + v11) & v17,  ((unint64_t)a2 + v11) & v17,  v16);
  }

  return a1;
}

uint64_t destroy for Publishers.Contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(uint64_t, void))(v3 + 8))(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 64) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( (v4 + *(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80LL),  AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(uint64_t, uint64_t, void))(v5 + 16))(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(uint64_t, uint64_t, void))(v5 + 24))(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(uint64_t, uint64_t, void))(v5 + 32))(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(uint64_t, uint64_t, void))(v5 + 40))(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Contains(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_23;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)(a1 + v14);
      if (!v16) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))( (v13 + a1) & ~v12,  v10,  AssociatedTypeWitness);
        }
      }

      return 0LL;
    }
  }

  int v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14)) {
    goto LABEL_23;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if ((_DWORD)v14)
  {
    else {
      int v19 = 4;
    }
    __asm { BR              X12 }
  }

  return v11 + v18 + 1;
}

void storeEnumTagSinglePayload for Publishers.Contains( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v9 + 84) <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  if (a3 <= v10)
  {
    unsigned int v12 = 0u;
  }

  else if (v11 <= 3)
  {
    unsigned int v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      unsigned int v12 = 4u;
    }

    else if (v14 >= 0x100)
    {
      unsigned int v12 = 2;
    }

    else
    {
      unsigned int v12 = v14 > 1;
    }
  }

  else
  {
    unsigned int v12 = 1u;
  }

  if (v10 < a2)
  {
    unsigned int v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }

        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }

        else
        {
          *a1 = v15;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t type metadata completion function for Publishers.Contains.Inner()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void Publisher.combineLatest<A>(_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  int v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v13);
  int v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = v21;
  type metadata accessor for Publishers.CombineLatest();
}

uint64_t sub_183B07C1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.CombineLatest.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B07CAC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

void type metadata accessor for Publishers.CombineLatest()
{
}

void Publisher.combineLatest<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  MEMORY[0x1895F8858](v1);
  type metadata accessor for Publishers.CombineLatest();
}

void sub_183B07D98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v17 - 152) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  int v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v14, *(void *)(v17 - 160), v16);
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v11, *(void *)(v17 - 168), v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v19, v14, v16);
  *(void *)(v17 - 112) = v16;
  *(void *)(v17 - 104) = v15;
  *(void *)(v17 - 96) = v13;
  *(void *)(v17 - 88) = v12;
  type metadata accessor for Publishers.CombineLatest();
}

uint64_t sub_183B07E18(uint64_t a1)
{
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v6;
  void v10[3] = v5;
  uint64_t v11 = *(void *)(v9 - 144);
  uint64_t v12 = *(void *)(v9 - 136);
  v10[4] = v12;
  void v10[5] = v4;
  v10[6] = v3;
  v10[7] = v11;
  v10[8] = *(void *)(v9 - 128);
  uint64_t v13 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.CombineLatest<A, B>, v7);
  Publisher.map<A>(_:)( (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1),  (uint64_t)v10,  v7,  v12,  v13,  *(void *)(v9 - 120));
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 152) + 8LL))(v8, v7);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_183B07F9C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)( uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)( a1,  *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56));
}

void Publisher.combineLatest<A, B>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v27[1] = a8;
  v27[2] = a6;
  v27[3] = a7;
  v27[0] = a9;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v15);
  uint64_t v22 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  Publishers.CombineLatest3.init(_:_:_:)((uint64_t)v24, a3, v27[0]);
}

  ;
}

void Publishers.CombineLatest3.init(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B08198(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v5 + *(int *)(a1 + 72),  v3,  v1);
}

void type metadata accessor for Publishers.CombineLatest3()
{
}

void Publisher.combineLatest<A, B, C>(_:_:_:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  uint64_t v2 = MEMORY[0x1895F8858](v1);
  MEMORY[0x1895F8858](v2);
  type metadata accessor for Publishers.CombineLatest3();
}

void sub_183B082EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v17 - 176) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 16))(v11, *(void *)(v17 - 192), v14);
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 16))(v10, *(void *)(v17 - 200), v13);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v17 - 208) + 16LL))(v9, *(void *)(v17 - 184), v12);
  Publishers.CombineLatest3.init(_:_:_:)(v11, v14, (uint64_t)v19);
}

uint64_t sub_183B08390()
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v4;
  void v9[3] = v3;
  uint64_t v10 = *(void *)(v8 - 168);
  uint64_t v11 = *(void *)(v8 - 160);
  v9[4] = v2;
  v9[5] = v11;
  v9[6] = v6;
  v9[7] = v1;
  v9[8] = v5;
  v9[9] = v10;
  v9[10] = *(void *)(v8 - 152);
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>, v7);
  Publisher.map<A>(_:)( (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1),  (uint64_t)v9,  v7,  v11,  v12,  *(void *)(v8 - 144));
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 176) + 8LL))(v0, v7);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata3 + 48), a1 + *(int *)(TupleTypeMetadata3 + 64));
}

uint64_t sub_183B08534()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)( uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)( a1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 72));
}

void Publisher.combineLatest<A, B, C>(_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v41 = a9;
  uint64_t v42 = a8;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  __int128 v40 = a10;
  uint64_t v39 = a11;
  uint64_t v15 = *(void *)(a7 - 8);
  uint64_t v35 = a1;
  uint64_t v36 = v15;
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v16);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v21);
  uint64_t v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  uint64_t v30 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v35, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v37, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v18, v38, a7);
  Publishers.CombineLatest4.init(_:_:_:_:)((uint64_t)v30, a4, v41);
}

  ;
}

void Publishers.CombineLatest4.init(_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B087CC(int *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(v7 + a1[23], v4, v1);
}

void type metadata accessor for Publishers.CombineLatest4()
{
}

void Publisher.combineLatest<A, B, C, D>(_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v25[11] = a1;
  v25[18] = a4;
  v25[19] = a5;
  v25[16] = a3;
  v25[14] = a2;
  v25[20] = a6;
  v25[4] = a12;
  v25[5] = a11;
  v25[6] = a10;
  v25[7] = a9;
  v25[17] = a8;
  v25[13] = *(void *)(a7 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](a1);
  v25[9] = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  v25[8] = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  v25[0] = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  v25[21] = v18;
  v25[22] = v19;
  v25[2] = v18;
  v25[1] = v19;
  v25[23] = v20;
  v25[24] = a7;
  v25[25] = v22;
  v25[26] = v21;
  v25[27] = v23;
  v25[28] = v24;
  type metadata accessor for Publishers.CombineLatest4();
}

void sub_183B089B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v18 - 240) = a1;
  *(void *)(v18 - 200) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v20 = (char *)&a9 - v19;
  *(void *)(v18 - 296) = (char *)&a9 - v19;
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 16))(v9, *(void *)(v18 - 224), v12);
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 16))(v17, *(void *)(v18 - 232), v16);
  (*(void (**)(void, void, uint64_t))(v14 + 16))(*(void *)(v18 - 256), *(void *)(v18 - 208), v13);
  (*(void (**)(void, void, uint64_t))(*(void *)(v18 - 216) + 16LL))( *(void *)(v18 - 248),  *(void *)(v18 - 192),  v15);
  Publishers.CombineLatest4.init(_:_:_:_:)(v9, *(void *)(v18 - 304), (uint64_t)v20);
}

uint64_t sub_183B08AC0()
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v0;
  void v9[3] = v2;
  v9[4] = v7;
  v9[5] = v5;
  uint64_t v11 = *(void *)(v8 - 184);
  uint64_t v10 = *(void *)(v8 - 176);
  v9[6] = v11;
  v9[7] = v6;
  v9[8] = v4;
  v9[9] = v3;
  v9[10] = v1;
  v9[11] = v10;
  v9[12] = *(void *)(v8 - 168);
  uint64_t v12 = *(void *)(v8 - 240);
  uint64_t v13 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>, v12);
  uint64_t v14 = *(void *)(v8 - 296);
  Publisher.map<A>(_:)( (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1),  (uint64_t)v9,  v12,  v11,  v13,  *(void *)(v8 - 160));
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 200) + 8LL))(v14, v12);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return a2(a1, a1 + TupleTypeMetadata[12], a1 + TupleTypeMetadata[16], a1 + TupleTypeMetadata[20]);
}

uint64_t sub_183B08C98()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)( uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)( a1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 88));
}

uint64_t Publishers.CombineLatest.a.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.CombineLatest.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

void Publishers.CombineLatest.receive<A>(subscriber:)()
{
}

void sub_183B08DF0()
{
}

void sub_183B08E54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = MEMORY[0x186E22960](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a14, v19, a1, v18, v21);
  swift_release();
  a14 = 1LL;
  swift_retain();
  a18 = a9;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_183B08EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v8 = MEMORY[0x186E22960](v6, a1);
  Publisher.subscribe<A>(_:)((uint64_t)va, a5, a1, a6, v8);
  swift_release();
  AbstractCombineLatest.subscribe()();
}

uint64_t sub_183B08EF8()
{
  return swift_release();
}

void type metadata accessor for CombineLatest2Inner()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest<A, B>()
{
}

uint64_t Publishers.CombineLatest3.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

uint64_t Publishers.CombineLatest3.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 72));
}

void Publishers.CombineLatest3.receive<A>(subscriber:)()
{
}

void sub_183B0906C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_183B090D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v26 = MEMORY[0x186E22960](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a19, v24, a1, a12, v26);
  swift_release();
  a19 = 1LL;
  swift_retain();
  a24 = a9;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_183B09148( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v25 = MEMORY[0x186E22960](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a19, a15, a1, a16, v25);
  swift_release();
  a19 = 2LL;
  swift_retain();
  a24 = a13;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_183B091AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)va, a10, a1, a11, v12);
  swift_release();
  AbstractCombineLatest.subscribe()();
}

uint64_t sub_183B091E4()
{
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest3<A, B, C>()
{
}

uint64_t Publishers.CombineLatest4.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.CombineLatest4.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.CombineLatest4.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 92));
}

void Publishers.CombineLatest4.receive<A>(subscriber:)()
{
}

void sub_183B09390( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_183B093FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  uint64_t v31 = MEMORY[0x186E22960](&protocol conformance descriptor for AbstractCombineLatest<A, B, C>.Side<A1>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a25, a13, a1, a14, v31);
  swift_release();
  a25 = 1LL;
  swift_retain();
  a30 = a12;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_183B09470( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  uint64_t v32 = MEMORY[0x186E22960](v30, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a25, a19, a1, a20, v32);
  swift_release();
  a25 = 2LL;
  swift_retain();
  a30 = a16;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_183B094D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
  uint64_t v32 = MEMORY[0x186E22960](v30, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&a25, a21, a1, a22, v32);
  swift_release();
  a25 = 3LL;
  swift_retain();
  a30 = a17;
  type metadata accessor for AbstractCombineLatest.Side();
}

void sub_183B09530( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v19 = MEMORY[0x186E22960](v17, a1);
  Publisher.subscribe<A>(_:)((uint64_t)va, a16, a1, a17, v19);
  swift_release();
  AbstractCombineLatest.subscribe()();
}

uint64_t sub_183B09564()
{
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest4<A, B, C, D>()
{
}

void static Publishers.CombineLatest<>.== infix(_:_:)()
{
}

uint64_t sub_183B095EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v15[-v8];
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v11(v9, v2, a1);
  v11(v7, v1, a1);
  if ((v10 & 1) != 0) {
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v12 = 0;
  }
  uint64_t v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v7, a1);
  v13(v9, a1);
  return v12 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest<A, B>()
{
  static Publishers.CombineLatest<>.== infix(_:_:)();
}

void static Publishers.CombineLatest3<>.== infix(_:_:)()
{
}

uint64_t sub_183B09744(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  char v10 = &v22[-v9];
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = &v22[-v12];
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = &v22[-v14];
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v17(v15, v2, a1);
  v17(v13, v1, a1);
  if ((v16 & 1) != 0) {
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v18 = 0;
  }
  uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v19(v13, a1);
  v19(v15, a1);
  v17(v10, v2, a1);
  v17(v7, v1, a1);
  if ((v18 & 1) != 0) {
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v20 = 0;
  }
  v19(v7, a1);
  v19(v10, a1);
  return v20 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest3<A, B, C>()
{
  static Publishers.CombineLatest3<>.== infix(_:_:)();
}

uint64_t sub_183B09904(char a1)
{
  return a1 & 1;
}

void static Publishers.CombineLatest4<>.== infix(_:_:)()
{
}

uint64_t sub_183B09974(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  *(void *)(v3 - 160) = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  *(void *)(v3 - 168) = &v32[-v9];
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = &v32[-v11];
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = &v32[-v14];
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  char v18 = &v32[-v17];
  MEMORY[0x1895F8858](v16);
  char v20 = &v32[-v19];
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v3 - 152) = v2;
  v22(v20, v2, a1);
  uint64_t v23 = v1;
  v22(v18, v1, a1);
  if ((v21 & 1) != 0) {
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v24 = 0;
  }
  uint64_t v25 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v25(v18, a1);
  v25(v20, a1);
  uint64_t v26 = *(void *)(v3 - 152);
  v22(v15, v26, a1);
  v22(v12, v23, a1);
  if ((v24 & 1) == 0)
  {
    v25(v12, a1);
    v25(v15, a1);
    uint64_t v28 = *(_BYTE **)(v3 - 168);
    v22(v28, v26, a1);
    uint64_t v29 = *(_BYTE **)(v3 - 160);
    v22(v29, v23, a1);
    goto LABEL_8;
  }

  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25(v12, a1);
  v25(v15, a1);
  uint64_t v28 = *(_BYTE **)(v3 - 168);
  v22(v28, v26, a1);
  uint64_t v29 = *(_BYTE **)(v3 - 160);
  v22(v29, v23, a1);
  if ((v27 & 1) == 0)
  {
LABEL_8:
    char v30 = 0;
    goto LABEL_9;
  }

  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_9:
  v25(v29, a1);
  v25(v28, a1);
  return v30 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest4<A, B, C, D>()
{
  static Publishers.CombineLatest4<>.== infix(_:_:)();
}

uint64_t sub_183B09C2C(char a1)
{
  return a1 & 1;
}

void AbstractCombineLatest.Side.combineIdentifier.getter()
{
}

void sub_183B09C68()
{
}

void AbstractCombineLatest.Side.receive(subscription:)(void *a1, uint64_t a2)
{
}

uint64_t AbstractCombineLatest.Side.receive(_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v14[3] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16LL))(boxed_opaque_existential_1, a1, a7);
  AbstractCombineLatest.receive(_:index:)(v14, a2);
  uint64_t v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

void AbstractCombineLatest.Side.receive(completion:)(unint64_t a1, unint64_t a2)
{
}

void protocol witness for Subscriber.receive(subscription:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>( void *a1)
{
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>( uint64_t a1, uint64_t *a2)
{
  return AbstractCombineLatest.Side.receive(_:)(a1, *(void *)v2, *(void *)(v2 + 8), a2[2], a2[3], a2[4], a2[5]);
}

void protocol witness for Subscriber.receive(completion:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>( unint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbstractCombineLatest<A, B, C>.Side<A1>()
{
  return 0x4C656E69626D6F43LL;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AbstractCombineLatest<A, B, C>.Side<A1>()
{
}

void AbstractCombineLatest.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 184)));
  char v21 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v6 + 32) = 0x657274736E776F64LL;
  *(void *)(v6 + 40) = 0xEA00000000006D61LL;
  uint64_t v7 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v8 = *(void *)(v1 + 96);
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(boxed_opaque_existential_1, v7, v8);
  *(void *)(v6 + 80) = 0xD000000000000015LL;
  *(void *)(v6 + 88) = 0x8000000183BA7A60LL;
  uint64_t v10 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 128));
  swift_beginAccess();
  uint64_t v11 = *v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Subscription?]);
  *(void *)(v6 + 96) = v11;
  *(void *)(v6 + 120) = v12;
  *(void *)(v6 + 128) = 0x646E616D6564LL;
  *(void *)(v6 + 136) = 0xE600000000000000LL;
  uint64_t v13 = *v0;
  *(void *)(v6 + 144) = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 136));
  *(void *)(v6 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v6 + 176) = 0x73726566667562LL;
  *(void *)(v6 + 184) = 0xE700000000000000LL;
  uint64_t v14 = (uint64_t *)((char *)v0 + *(void *)(v13 + 120));
  swift_beginAccess();
  uint64_t v15 = *v14;
  *(void *)(v6 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  *(void *)(v6 + 192) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v5, 1LL, 1LL, v16);
  uint64_t v17 = *(void *)(v1 + 104);
  __int128 v18 = *(_OWORD *)(v1 + 80);
  uint64_t v19 = v8;
  uint64_t v20 = v17;
  type metadata accessor for AbstractCombineLatest();
}

void sub_183B09FE8()
{
}

void AbstractCombineLatest.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "CombineLatest");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t *AbstractCombineLatest.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 184)), -1LL, -1LL);
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 192)), -1LL, -1LL);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))( (uint64_t)v0 + *(void *)(*v0 + 112),  *(void *)(v1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 208);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255LL, v3, AssociatedConformanceWitness, v5);
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v2, v6);
  return v0;
}

uint64_t AbstractCombineLatest.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void AbstractCombineLatest.receive(subscription:index:)(void *a1, uint64_t a2)
{
  if (*(void *)(v3 + *(void *)(*(void *)v3 + 168LL)) <= a2)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  unint64_t v6 = a2;
  uint64_t v4 = a1;
  uint64_t v2 = *(os_unfair_lock_s **)(v3 + *(void *)(*(void *)v3 + 184LL));
  os_unfair_lock_lock(v2);
  if ((*(_BYTE *)(v3 + *(void *)(*(void *)v3 + 160LL)) & 1) != 0)
  {
LABEL_6:
    os_unfair_lock_unlock(v2);
    uint64_t v8 = v4[3];
    uint64_t v9 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v8);
    (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v8);
    return;
  }

  uint64_t v5 = v3 + *(void *)(*(void *)v3 + 128LL);
  swift_beginAccess();
  if ((v6 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
  if (*(void *)(*(void *)v5 + 16LL) <= v6)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
    *(void *)uint64_t v5 = v4;
    goto LABEL_9;
  }

  outlined init with copy of Any?( *(void *)v5 + 40 * v6 + 32,  (uint64_t)v11,  &demangling cache variable for type metadata for Subscription?);
  uint64_t v7 = v12;
  outlined destroy of CustomStringConvertible?( (uint64_t)v11,  &demangling cache variable for type metadata for Subscription?);
  if (v7) {
    goto LABEL_6;
  }
  outlined init with copy of Subscription((uint64_t)v4, (uint64_t)v11);
  swift_beginAccess();
  uint64_t v4 = *(void **)v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v5 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  if (v4[2] <= v6)
  {
    __break(1u);
  }

  else
  {
    outlined assign with take of Subscription?( (uint64_t)v11,  (uint64_t)&v4[5 * v6 + 4],  &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    os_unfair_lock_unlock(v2);
  }

void AbstractCombineLatest.receive(_:index:)(void *a1, unint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v7 = a1;
  uint64_t v8 = *(void **)v5;
  uint64_t v9 = *(void *)(*(void *)v5 + 80LL);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(v5 + v8[21]) <= v13)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v5 + v8[23]);
    os_unfair_lock_lock(v3);
    if ((*(_BYTE *)(v5 + *(void *)(*(void *)v5 + 160LL)) & 1) != 0
      || (*(_BYTE *)(v5 + *(void *)(*(void *)v5 + 152LL)) & 1) != 0)
    {
      goto LABEL_31;
    }

    outlined init with copy of Any((uint64_t)v7, (uint64_t)v33);
    uint64_t v7 = (void *)(v5 + *(void *)(*(void *)v5 + 120LL));
    swift_beginAccess();
    uint64_t v4 = (void *)*v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v7 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((a2 & 0x8000000000000000LL) == 0) {
        goto LABEL_6;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }

  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  *uint64_t v7 = v4;
  if ((a2 & 0x8000000000000000LL) != 0) {
    goto LABEL_37;
  }
LABEL_6:
  if (v4[2] <= a2)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  outlined assign with take of Subscription?( (uint64_t)v33,  (uint64_t)&v4[4 * a2 + 4],  &demangling cache variable for type metadata for Any?);
  uint64_t v15 = (void *)*v7;
  swift_endAccess();
  if ((*(_BYTE *)(v5 + *(void *)(*(void *)v5 + 144LL)) & 1) != 0)
  {
LABEL_31:
    os_unfair_lock_unlock(v3);
    return;
  }

  uint64_t v16 = *(void *)(*(void *)v5 + 136LL);
  uint64_t v17 = *(void *)(v5 + v16);
  if (v17 == 0x8000000000000000LL) {
    goto LABEL_11;
  }
  if (v17 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (!v17) {
    goto LABEL_31;
  }
LABEL_11:
  uint64_t v32 = *(void *)(*(void *)v5 + 144LL);
  uint64_t v18 = v15[2];
  if (v18)
  {
    uint64_t v29 = v16;
    uint64_t v30 = v9;
    uint64_t v19 = v15;
    uint64_t v20 = (uint64_t)(v15 + 4);
    uint64_t v31 = v19;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Any?(v20, (uint64_t)v33, &demangling cache variable for type metadata for Any?);
      uint64_t v21 = v34;
      outlined destroy of CustomStringConvertible?((uint64_t)v33, &demangling cache variable for type metadata for Any?);
      if (!v21) {
        break;
      }
      v20 += 32LL;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = v29;
        uint64_t v9 = v30;
        uint64_t v17 = *(void *)(v5 + v29);
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_31;
  }

LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }

LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

          (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v65, v63);
          return;
        }

        uint64_t v50 = v77;
        outlined init with take of Subscription?( (uint64_t)&v77 + 8,  (uint64_t)&v74,  &demangling cache variable for type metadata for Subscription?);
        uint64_t v49 = (uint64_t *)&v74;
        if (v50 == a2) {
          goto LABEL_28;
        }
        outlined init with copy of Any?( (uint64_t)&v74,  (uint64_t)&v70,  &demangling cache variable for type metadata for Subscription?);
        uint64_t v18 = v72;
        if (!v72) {
          break;
        }
        uint64_t v51 = v73;
        __swift_project_boxed_opaque_existential_1(&v70, (uint64_t)v72);
        (*(void (**)(void (*)(char *, unint64_t, uint64_t)))(*(void *)(v51 + 8) + 8LL))(v18);
        outlined destroy of CustomStringConvertible?( (uint64_t)&v74,  &demangling cache variable for type metadata for Subscription?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
        if (v25 == v23) {
          goto LABEL_29;
        }
LABEL_30:
        if (v25 >= *(void *)(v69 + 16)) {
          goto LABEL_44;
        }
        outlined init with copy of Any?( v67 + 40 * v25,  (uint64_t)v71,  &demangling cache variable for type metadata for Subscription?);
        *(void *)&uint64_t v74 = v25;
        outlined init with take of Subscription?( (uint64_t)v71,  (uint64_t)&v74 + 8,  &demangling cache variable for type metadata for Subscription?);
        ++v25;
      }

      outlined destroy of CustomStringConvertible?( (uint64_t)&v74,  &demangling cache variable for type metadata for Subscription?);
      uint64_t v49 = &v70;
LABEL_28:
      outlined destroy of CustomStringConvertible?( (uint64_t)v49,  &demangling cache variable for type metadata for Subscription?);
      if (v25 == v23) {
        continue;
      }
      goto LABEL_30;
    }
  }

  uint64_t v34 = (char *)(v2 + *(void *)(v22 + 128));
  swift_beginAccess();
  uint64_t v23 = *(void *)v34;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v21);
  a1 = 0LL;
  unint64_t v25 = *(void *)(v23 + 16);
  *(void *)&uint64_t v68 = v23 + 32;
  uint64_t v5 = (uint64_t **)v71;
  uint64_t v67 = (uint64_t)&v74 + 8;
  uint64_t v14 = (char *)&v77 + 8;
  uint64_t v69 = xmmword_183B9D5C0;
  uint64_t v21 = (os_unfair_lock_s *)&demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
  uint64_t v20 = &demangling cache variable for type metadata for Subscription?;
  if (v25) {
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v74 = 0u;
  uint64_t v75 = 0u;
  a1 = v25;
  uint64_t v76 = v69;
  while (1)
  {
    outlined init with take of Subscription?( (uint64_t)&v74,  (uint64_t)&v77,  &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
    if (v79 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }

    uint64_t v36 = v77;
    outlined init with take of Subscription?( (uint64_t)&v77 + 8,  (uint64_t)&v74,  &demangling cache variable for type metadata for Subscription?);
    uint64_t v35 = (uint64_t *)&v74;
    if (v36 == a2) {
      goto LABEL_14;
    }
    outlined init with copy of Any?( (uint64_t)&v74,  (uint64_t)&v70,  &demangling cache variable for type metadata for Subscription?);
    uint64_t v18 = v72;
    if (!v72)
    {
      outlined destroy of CustomStringConvertible?( (uint64_t)&v74,  &demangling cache variable for type metadata for Subscription?);
      uint64_t v35 = &v70;
LABEL_14:
      outlined destroy of CustomStringConvertible?( (uint64_t)v35,  &demangling cache variable for type metadata for Subscription?);
      if (a1 == v25) {
        goto LABEL_15;
      }
      goto LABEL_16;
    }

    uint64_t v37 = v73;
    __swift_project_boxed_opaque_existential_1(&v70, (uint64_t)v72);
    (*(void (**)(void (*)(char *, unint64_t, uint64_t)))(*(void *)(v37 + 8) + 8LL))(v18);
    outlined destroy of CustomStringConvertible?( (uint64_t)&v74,  &demangling cache variable for type metadata for Subscription?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
    if (a1 == v25) {
      goto LABEL_15;
    }
LABEL_16:
    if (a1 >= *(void *)(v23 + 16)) {
      break;
    }
    outlined init with copy of Any?( v68 + 40 * a1,  (uint64_t)v71,  &demangling cache variable for type metadata for Subscription?);
    *(void *)&uint64_t v74 = a1;
    outlined init with take of Subscription?( (uint64_t)v71,  v67,  &demangling cache variable for type metadata for Subscription?);
    ++a1;
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
  *uint64_t v5 = v20;
LABEL_5:
  uint64_t v30 = v60;
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_48;
  }

  if (v20[2] <= a2)
  {
LABEL_48:
    __break(1u);
    return;
  }

  outlined assign with take of Subscription?( (uint64_t)&v77,  (uint64_t)&v20[5 * a2 + 4],  &demangling cache variable for type metadata for Subscription?);
  swift_endAccess();
  uint64_t v31 = *(void *)(a1 + v25);
  if (v31 == *(void *)(a1 + *(void *)(*(void *)a1 + 168LL)))
  {
    *(_BYTE *)(a1 + v23) = 1;
    uint64_t v77 = 0u;
    v78 = 0u;
    uint64_t v32 = specialized Array.init(repeating:count:)((uint64_t)&v77, v31);
    uint64_t v33 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 120LL));
    swift_beginAccess();
    *uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a1 + *(void *)(*(void *)a1 + 200LL)) & 1) != 0)
    {
      os_unfair_lock_unlock(v21);
      os_unfair_recursive_lock_lock_with_options();
      ((void (*)(unint64_t, uint64_t, uint64_t **))v30[7])(v59, v61, v30);
      os_unfair_recursive_lock_unlock();
      return;
    }

    uint64_t v52 = v63;
    v18(v14, v59, v63);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v14, 0LL, 1LL, v52);
    uint64_t v53 = v67;
    uint64_t v54 = v62;
    uint64_t v55 = v68;
    (*(void (**)(_BYTE *, char *, void))(v67 + 32))(v62, v14, v68);
    uint64_t v56 = (char *)(a1 + *(void *)(*(void *)a1 + 208LL));
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v53 + 40))(v56, v54, v55);
    swift_endAccess();
  }

    if (v13 != 2)
    {
      if (v13 != 1)
      {
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1LL, AssociatedTypeWitness))
        {
          memcpy(a1, a2, v6);
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, AssociatedTypeWitness);
          if (v7 > 3)
          {
LABEL_56:
            *((_BYTE *)a1 + v7) = 0;
            return a1;
          }
        }

        uint64_t v24 = ((1 << (8 * v7)) + 1) >> (8 * v7);
        if (v24 > 0xFFFC)
        {
          *(_DWORD *)((char *)a1 + v7) = 0;
          return a1;
        }

        if (v24 > 0xFC)
        {
          *(_WORD *)((char *)a1 + v7) = 0;
          return a1;
        }

        goto LABEL_56;
      }

      uint64_t v21 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v21;
      (**(void (***)(uint64_t *, uint64_t *))(v21 - 8))(a1, a2);
      if (v7 > 3)
      {
LABEL_52:
        *((_BYTE *)a1 + v7) = 1;
        return a1;
      }

      uint64_t v22 = 1;
      uint64_t v23 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v23 <= 0xFFFC)
      {
        if (v23 <= 0xFC) {
          goto LABEL_52;
        }
LABEL_61:
        *(_WORD *)((char *)a1 + v7) = v22;
        return a1;
      }

      *(_WORD *)(a1 + v7) = v14;
      return a1;
    }

      *(_WORD *)((char *)a1 + v7) = v14;
      return a1;
    }

LABEL_20:
  uint64_t v22 = (void *)*v7;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  (*(void (**)(void *))(*(void *)v5 + 480LL))(v22);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v3);
  uint64_t v23 = v32;
  *(_BYTE *)(v5 + v32) = 1;
  os_unfair_lock_unlock(v3);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v24 = (*(uint64_t (**)(char *, void))(v8[13] + 48LL))(v12, v8[12]);
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v3);
  *(_BYTE *)(v5 + v23) = 0;
  unint64_t v25 = 0x8000000000000000LL;
  if (v24 == 0x8000000000000000LL)
  {
    if (*(void *)(v5 + v16) == 0x8000000000000000LL) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  if (v24 < 0) {
    goto LABEL_42;
  }
  if (!v24) {
    goto LABEL_34;
  }
  uint64_t v26 = *(void *)(v5 + v16);
  if (v26 == 0x8000000000000000LL) {
    goto LABEL_34;
  }
  if ((v26 | v24) < 0) {
    goto LABEL_43;
  }
  BOOL v27 = __OFADD__(v26, v24);
  unint64_t v25 = v26 + v24;
  if (v27)
  {
    unint64_t v25 = 0x8000000000000000LL;
LABEL_33:
    *(void *)(v5 + v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
LABEL_34:
    os_unfair_lock_unlock(v3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return;
  }

  if ((v25 & 0x8000000000000000LL) == 0) {
    goto LABEL_33;
  }
LABEL_44:
  __break(1u);
}

    __break(1u);
    goto LABEL_21;
  }

  outlined destroy of SubscriptionStatus((uint64_t)v62);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
  return 0LL;
}

    __break(1u);
    return;
  }

    __break(1u);
    return;
  }

              uint64_t v44 = v46;
LABEL_17:
              uint64_t v36 = (v45 - 1) & v45;
              uint64_t v42 = __clz(__rbit64(v45)) + (v44 << 6);
              uint64_t v38 = v44;
              goto LABEL_13;
            }
          }
        }
      }

void AbstractCombineLatest.convert(values:)()
{
}

void AbstractCombineLatest.receive(completion:index:)(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(uint64_t ***)(*(void *)v2 + 104LL);
  uint64_t v6 = *(void *)(*(void *)v2 + 88LL);
  uint64_t v61 = *(void *)(*(void *)v2 + 96LL);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion(255LL, v6, AssociatedConformanceWitness, v8);
  *(void *)&__int128 v68 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v68 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v68);
  uint64_t v62 = &v57[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = &v57[-v13];
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = &v57[-v15];
  uint64_t v66 = v17;
  uint64_t v18 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v17 + 16);
  v18(&v57[-v15], a1, v9);
  uint64_t v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL);
  uint64_t v65 = v16;
  uint64_t v20 = (uint64_t *)v19(v16, 1LL, v6);
  uint64_t v21 = *(os_unfair_lock_s **)(v2 + *(void *)(*(void *)v2 + 184LL));
  os_unfair_lock_lock(v21);
  uint64_t v22 = *(void *)v2;
  uint64_t v23 = *(void *)(*(void *)v2 + 152LL);
  char v24 = *(_BYTE *)(v2 + v23);
  if ((_DWORD)v20 == 1)
  {
    if ((*(_BYTE *)(v2 + v23) & 1) == 0)
    {
      uint64_t v63 = v9;
      unint64_t v25 = *(void *)(v22 + 176);
      uint64_t v26 = *(void *)(v2 + v25);
      BOOL v27 = __OFADD__(v26, 1LL);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_45;
      }
      uint64_t v60 = v5;
      unint64_t v59 = a1;
      *(void *)(v2 + v25) = v28;
      uint64_t v79 = 0LL;
      __int128 v77 = 0u;
      __int128 v78 = 0u;
      a1 = v2;
      uint64_t v5 = (uint64_t **)(v2 + *(void *)(*(void *)v2 + 128LL));
      swift_beginAccess();
      uint64_t v20 = *v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v5 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_5;
    }

    goto LABEL_42;
  }

  uint64_t v63 = v9;
  if ((v24 & 1) == 0)
  {
    uint64_t v60 = v5;
    *(_BYTE *)(v2 + v23) = 1;
    uint64_t v38 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 128LL));
    swift_beginAccess();
    uint64_t v39 = *v38;
    uint64_t v79 = 0LL;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    uint64_t v40 = *(void *)(*(void *)v2 + 168LL);
    unint64_t v64 = v2;
    uint64_t v41 = *(void *)(v2 + v40);
    *(void *)&__int128 v69 = v39;
    swift_bridgeObjectRetain();
    *uint64_t v38 = specialized Array.init(repeating:count:)((uint64_t)&v77, v41);
    swift_bridgeObjectRelease();
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    uint64_t v42 = specialized Array.init(repeating:count:)((uint64_t)&v77, v41);
    unint64_t v43 = (uint64_t *)(v64 + *(void *)(*(void *)v64 + 120LL));
    swift_beginAccess();
    *unint64_t v43 = v42;
    unint64_t v44 = v64;
    swift_bridgeObjectRelease();
    int v58 = *(unsigned __int8 *)(v44 + *(void *)(*(void *)v44 + 200LL));
    if ((v58 & 1) == 0)
    {
      v18(v14, a1, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v14, 0LL, 1LL, v9);
      uint64_t v45 = v67;
      uint64_t v46 = v62;
      uint64_t v47 = v68;
      (*(void (**)(_BYTE *, char *, void))(v67 + 32))(v62, v14, v68);
      unint64_t v48 = v44 + *(void *)(*(void *)v44 + 208LL);
      swift_beginAccess();
      (*(void (**)(unint64_t, _BYTE *, uint64_t))(v45 + 40))(v48, v46, v47);
      swift_endAccess();
    }

    unint64_t v59 = a1;
    os_unfair_lock_unlock(v21);
    unint64_t v25 = 0LL;
    uint64_t v23 = *(void *)(v69 + 16);
    uint64_t v67 = v69 + 32;
    uint64_t v14 = v71;
    uint64_t v21 = (os_unfair_lock_s *)&v74 + 2;
    a1 = (unint64_t)&v77 + 8;
    __int128 v68 = xmmword_183B9D5C0;
    uint64_t v5 = (uint64_t **)&demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
    uint64_t v20 = &demangling cache variable for type metadata for Subscription?;
    if (v23) {
      goto LABEL_30;
    }
LABEL_29:
    while (2)
    {
      __int128 v74 = 0u;
      __int128 v75 = 0u;
      unint64_t v25 = v23;
      __int128 v76 = v68;
      while (1)
      {
        outlined init with take of Subscription?( (uint64_t)&v74,  (uint64_t)&v77,  &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
        if (v79 == 1)
        {
          swift_bridgeObjectRelease();
          if (v58)
          {
            os_unfair_recursive_lock_lock_with_options();
            ((void (*)(unint64_t, uint64_t))v60[7])(v59, v61);
            os_unfair_recursive_lock_unlock();
          }

LABEL_42:
  os_unfair_lock_unlock(v21);
}

uint64_t AbstractCombineLatest.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 184LL));
  os_unfair_lock_lock(v1);
  unint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128LL));
  swift_beginAccess();
  uint64_t v3 = *v2;
  *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 160LL)) = 1;
  uint64_t v14 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v4 = *(void *)(v0 + *(void *)(*(void *)v0 + 168LL));
  swift_bridgeObjectRetain();
  uint64_t *v2 = specialized Array.init(repeating:count:)((uint64_t)&v12, v4);
  swift_bridgeObjectRelease();
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v5 = specialized Array.init(repeating:count:)((uint64_t)&v12, v4);
  uint64_t v6 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 120LL));
  swift_beginAccess();
  *uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v1);
  uint64_t v7 = *(void *)(v3 + 16);
  if (v7)
  {
    uint64_t v8 = v3 + 32;
    do
    {
      outlined init with copy of Any?(v8, (uint64_t)&v12, &demangling cache variable for type metadata for Subscription?);
      uint64_t v10 = *((void *)&v13 + 1);
      if (*((void *)&v13 + 1))
      {
        uint64_t v9 = v14;
        __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
        (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
      }

      else
      {
        outlined destroy of CustomStringConvertible?( (uint64_t)&v12,  &demangling cache variable for type metadata for Subscription?);
      }

      v8 += 40LL;
      --v7;
    }

    while (v7);
  }

  return swift_bridgeObjectRelease();
}

void AbstractCombineLatest.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000LL)
  {
    if (a1 < 0)
    {
      __break(1u);
    }

    else if (a1)
    {
      goto LABEL_4;
    }

    __break(1u);
    goto LABEL_24;
  }

void AbstractCombineLatest.subscribe()()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *(void *)(*v0 + 96);
  uint64_t v2 = *(void *)(*v0 + 104);
  uint64_t v4 = *(void *)(*v0 + 88);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion(0LL, v4, AssociatedConformanceWitness, v6);
  v14[7] = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  v14[1] = (char *)v14 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  v14[6] = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14[4] = (char *)v14 - v13;
  MEMORY[0x1895F8858](v12);
  v14[11] = *(void *)(v1 + 80);
  v14[12] = v4;
  v14[13] = v3;
  v14[14] = v2;
  type metadata accessor for AbstractCombineLatest();
}

uint64_t sub_183B0B46C(uint64_t a1)
{
  *(void *)(v9 - 96) = a1;
  *(void *)(v9 - 88) = &protocol witness table for AbstractCombineLatest<A, B, C>;
  *(void *)(v9 - 120) = v3;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 40);
  swift_retain();
  *(void *)(v9 - 208) = v2;
  *(void *)(v9 - 192) = v6;
  *(void *)(v9 - 184) = v1;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v4;
  v10(v9 - 120, v11, v1);
  __swift_destroy_boxed_opaque_existential_1(v9 - 120);
  uint64_t v14 = *(os_unfair_lock_s **)(v3 + *(void *)(*(void *)v3 + 184LL));
  os_unfair_lock_lock(v14);
  *(_BYTE *)(v3 + *(void *)(*(void *)v3 + 200LL)) = 1;
  uint64_t v15 = v3 + *(void *)(*(void *)v3 + 208LL);
  swift_beginAccess();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v16(v7, v15, v8);
  uint64_t v17 = *(void *)(v9 - 152);
  uint64_t v18 = *(void *)(v9 - 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1LL, 1LL, v13);
  swift_beginAccess();
  *(void *)(v9 - 168) = v5;
  uint64_t v19 = v15;
  uint64_t v20 = *(void *)(v9 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v19, v18, v8);
  swift_endAccess();
  os_unfair_lock_unlock(v14);
  v16(v20, v12, v8);
  uint64_t v21 = v13;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v20, 1LL, v13) == 1)
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 168) + 8LL);
    v22(v12, v8);
    return ((uint64_t (*)(uint64_t, uint64_t))v22)(v20, v8);
  }

  else
  {
    uint64_t v24 = *(void *)(v9 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v24, v20, v21);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void))(*(void *)(v9 - 184) + 56LL))(v24, *(void *)(v9 - 192));
    os_unfair_recursive_lock_unlock();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v24, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 168) + 8LL))(v12, v8);
  }

void protocol witness for Subscription.request(_:) in conformance AbstractCombineLatest<A, B, C>(uint64_t a1)
{
}

void protocol witness for CustomReflectable.customMirror.getter in conformance AbstractCombineLatest<A, B, C>()
{
}

  ;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance AbstractCombineLatest<A, B, C>( uint64_t a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance AbstractCombineLatest<A, B, C>()
{
  return AbstractCombineLatest.cancel()();
}

uint64_t CombineLatest2Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    outlined init with copy of Any?(a3 + 32, (uint64_t)v7, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    uint64_t result = swift_dynamicCast();
    if (v3 != 1)
    {
      outlined init with copy of Any?(a3 + 64, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
      return swift_dynamicCast();
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest2Inner.convert(values:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  return CombineLatest2Inner.convert(values:)(a2, v4, a1);
}

uint64_t CombineLatest3Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }

  outlined init with copy of Any?(a4 + 32, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v4 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  outlined init with copy of Any?(a4 + 64, (uint64_t)v8, &demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v4 >= 3)
  {
    outlined init with copy of Any?(a4 + 96, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
    return swift_dynamicCast();
  }

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest3Inner.convert(values:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return CombineLatest3Inner.convert(values:)( a2,  a2 + *(int *)(TupleTypeMetadata3 + 48),  a2 + *(int *)(TupleTypeMetadata3 + 64),  a1);
}

uint64_t CombineLatest4Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a5 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }

  outlined init with copy of Any?(a5 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v5 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  outlined init with copy of Any?(a5 + 64, (uint64_t)v10, &demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v5 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  outlined init with copy of Any?(a5 + 96, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v5 != 3)
  {
    outlined init with copy of Any?(a5 + 128, (uint64_t)&v8, &demangling cache variable for type metadata for Any?);
    return swift_dynamicCast();
  }

LABEL_9:
  __break(1u);
  return result;
}

  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v7));
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v6 + 120) + 48LL))(a1, *(void *)(v6 + 96));
  os_unfair_recursive_lock_unlock();
  if (v11 == 0x8000000000000000LL)
  {
LABEL_12:
    os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v7));
    uint64_t v12 = *(uint64_t *)((char *)v3 + v9);
    uint64_t v13 = 0x8000000000000000LL;
    if (v12 == 0x8000000000000000LL)
    {
LABEL_3:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v7));
      return;
    }

    if (v11 == 0x8000000000000000LL) {
      goto LABEL_19;
    }
    if (((v12 | v11) & 0x8000000000000000LL) == 0)
    {
      uint64_t v13 = v12 + v11;
      if (!__OFADD__(v12, v11))
      {
        if ((v13 & 0x8000000000000000LL) == 0) {
          goto LABEL_19;
        }
LABEL_24:
        __break(1u);
        return;
      }

      uint64_t v13 = 0x8000000000000000LL;
LABEL_19:
      *(uint64_t *)((char *)v3 + v9) = v13;
      goto LABEL_3;
    }

  __break(1u);
  return result;
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest4Inner.convert(values:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return CombineLatest4Inner.convert(values:)( a2,  a2 + TupleTypeMetadata[12],  a2 + TupleTypeMetadata[16],  a2 + TupleTypeMetadata[20],  a1);
}

uint64_t *specialized AbstractCombineLatest.init(downstream:upstreamCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 136)) = 0LL;
  *((_BYTE *)v2 + *(void *)(*v2 + 144)) = 0;
  *((_BYTE *)v2 + *(void *)(*v2 + 152)) = 0;
  *((_BYTE *)v2 + *(void *)(*v2 + 160)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 176)) = 0LL;
  uint64_t v6 = *(void *)(*v2 + 184);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *uint64_t v7 = 0;
  *(uint64_t *)((char *)v2 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = (uint64_t)v7;
  uint64_t v8 = *(void *)(*v2 + 192);
  uint64_t v9 = (void *)swift_slowAlloc();
  *uint64_t v9 = 0LL;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  *((_BYTE *)v2 + *(void *)(*v2 + 200)) = 0;
  uint64_t v10 = (uint64_t)v2 + *(void *)(*v2 + 208);
  uint64_t v11 = *(void *)(v5 + 88);
  uint64_t v12 = *(void *)(v5 + 96);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Subscribers.Completion(0LL, v11, AssociatedConformanceWitness, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v10, 1LL, 1LL, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))( (uint64_t)v2 + *(void *)(*v2 + 112),  a1,  v12);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 168)) = a2;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)) = specialized Array.init(repeating:count:)((uint64_t)&v17, a2);
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 128)) = specialized Array.init(repeating:count:)((uint64_t)&v17, a2);
  return v2;
}

void type metadata accessor for AbstractCombineLatest.Side()
{
}

void type metadata accessor for CombineLatest3Inner()
{
}

void type metadata accessor for CombineLatest4Inner()
{
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.CombineLatest4<A, B, C, D>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B0BDCC + 4 * byte_183B9F410[v17 - 1]))();
}

void storeEnumTagSinglePayload for Publishers.CombineLatest( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t type metadata completion function for Publishers.CombineLatest3()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CombineLatest3( uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = a3[3];
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = *(void *)(a3[4] - 8LL);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *(void *)(v7 + 64) + v11;
  uint64_t v13 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80) | v11);
  if (v13 <= 7
    && ((v12 + (v9 & ~v8)) & ~(unint64_t)v11) + *(void *)(v10 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | v11) & 0x100000) == 0)
  {
    uint64_t v17 = ~v8;
    unint64_t v18 = ~(unint64_t)v11;
    uint64_t v21 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    unint64_t v19 = ((unint64_t)a2 + v9) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v17,  v19,  v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))( ((((unint64_t)v4 + v9) & v17) + v12) & v18,  (v19 + v12) & v18,  v21);
  }

  else
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }

  return v4;
}

uint64_t destroy for Publishers.CombineLatest3(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  return (*(uint64_t (**)(unint64_t))(*(void *)(a2[4] - 8LL) + 8LL))((v7
                                                                                       + *(void *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(void *)(a2[4] - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[4] - 8LL) + 80LL));
}

uint64_t initializeWithCopy for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(a3[4] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))( (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80),  (*(void *)(v7 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest3(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = a3[4];
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8) {
    unsigned int v8 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + v11;
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  unsigned int v15 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_25;
  }
  uint64_t v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(void *)(v10 + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)(a1 + v16);
      if (!v18) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16)) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        uint64_t v22 = (v12 + a1) & ~v11;
        if (v7 == v8) {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        }
        else {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 48))( (v22 + v13 + v14) & ~v14,  *(unsigned int *)(v10 + 84),  v9);
        }
      }

      return 0LL;
    }
  }

  int v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16)) {
    goto LABEL_25;
  }
LABEL_16:
  int v20 = (v18 - 1) << v17;
  if ((_DWORD)v16)
  {
    else {
      int v21 = 4;
    }
    __asm { BR              X11 }
  }

  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for Publishers.CombineLatest3( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v8 + 84) > v7) {
    unsigned int v7 = *(_DWORD *)(v8 + 84);
  }
  size_t v9 = ((*(void *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        unsigned int v10 = 4u;
      }

      else if (v12 >= 0x100)
      {
        unsigned int v10 = 2;
      }

      else
      {
        unsigned int v10 = v12 > 1;
      }
    }

    else
    {
      unsigned int v10 = 1u;
    }
  }

  else
  {
    unsigned int v10 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }

        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X21 }

uint64_t type metadata instantiation function for Publishers.CombineLatest4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.CombineLatest4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0LL;
        }
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CombineLatest4( uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8LL);
  uint64_t v5 = *(void *)(a3[3] - 8LL);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v4 + 64) + v6;
  uint64_t v8 = *(void *)(a3[4] - 8LL);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v5 + 64) + v9;
  uint64_t v11 = *(void *)(a3[5] - 8LL);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v8 + 64) + v12;
  int v14 = *(_DWORD *)(v4 + 80);
  uint64_t v15 = (*(_BYTE *)(v5 + 80) | v14 | *(_BYTE *)(v8 + 80) | v12);
  if (v15 <= 7
    && ((v13 + ((v10 + (v7 & ~v6)) & ~v9)) & ~(unint64_t)v12) + *(void *)(v11 + 64) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | v14 | *(_DWORD *)(v8 + 80) | v12) & 0x100000) == 0)
  {
    uint64_t v20 = ~v6;
    uint64_t v21 = ~v9;
    uint64_t v30 = a3[4];
    unint64_t v31 = ~(unint64_t)v12;
    uint64_t v32 = a3[5];
    uint64_t v29 = a3[3];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    uint64_t v33 = a1;
    unint64_t v23 = ((unint64_t)a1 + v7) & v20;
    unint64_t v24 = ((unint64_t)a2 + v7) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v23, v24, v29);
    uint64_t v25 = v23 + v10;
    unsigned int v19 = v33;
    uint64_t v26 = v25 & v21;
    unint64_t v27 = (v24 + v10) & v21;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v25 & v21, v27, v30);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))( (v26 + v13) & v31,  (v27 + v13) & v31,  v32);
  }

  else
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    unsigned int v19 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }

  return v19;
}

uint64_t destroy for Publishers.CombineLatest4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(a2[4] - 8LL);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  return (*(uint64_t (**)(unint64_t))(*(void *)(a2[5] - 8LL) + 8LL))((v10
                                                                                       + *(void *)(v9 + 64)
                                                                                       + *(unsigned __int8 *)(*(void *)(a2[5] - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[5] - 8LL) + 80LL));
}

uint64_t initializeWithCopy for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(a3[5] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v18 + 16))( (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),  (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(a3[5] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))( (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),  (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  uint64_t v18 = *(void *)(a3[5] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))( (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),  (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  uint64_t v18 = *(void *)(a3[5] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))( (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),  (*(void *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest4(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = a3[4];
  uint64_t v13 = a3[5];
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = *(unsigned int *)(v14 + 84);
  uint64_t v16 = *(void *)(v13 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  if (!a2) {
    return 0LL;
  }
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(v7 + 64) + v18;
  uint64_t v20 = *(void *)(v9 + 64);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v22 = *(void *)(v14 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
  int v24 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_27;
  }
  uint64_t v25 = ((v22 + v23 + ((v20 + v21 + (v19 & ~v18)) & ~v21)) & ~v23) + *(void *)(v16 + 64);
  char v26 = 8 * v25;
  if (v25 <= 3)
  {
    unsigned int v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)(a1 + v25);
      if (!v27) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)(a1 + v25);
      if (!*(_WORD *)(a1 + v25)) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v28 < 2)
    {
LABEL_27:
      if (v11)
      {
        if (v8 == v11) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
        }
        uint64_t v31 = (v19 + a1) & ~v18;
        if (v10 == v11) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 48))(v31, *(unsigned int *)(v9 + 84), v5);
        }
        uint64_t v32 = (v31 + v20 + v21) & ~v21;
        if ((_DWORD)v15 == v11) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v32, v15, v12);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))((v32 + v22 + v23) & ~v23, v17, v13);
        }
      }

      return 0LL;
    }
  }

  int v27 = *(unsigned __int8 *)(a1 + v25);
  if (!*(_BYTE *)(a1 + v25)) {
    goto LABEL_27;
  }
LABEL_18:
  int v29 = (v27 - 1) << v26;
  if ((_DWORD)v25)
  {
    else {
      int v30 = 4;
    }
    __asm { BR              X11 }
  }

  return v11 + v29 + 1;
}

void storeEnumTagSinglePayload for Publishers.CombineLatest4( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(a4[5] - 8LL);
  if (*(_DWORD *)(v10 + 84) > v9) {
    unsigned int v9 = *(_DWORD *)(v10 + 84);
  }
  size_t v11 = ((*(void *)(v8 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(void *)(v6 + 64)
          + *(unsigned __int8 *)(v8 + 80)
  if (a3 > v9)
  {
    if (v11 <= 3)
    {
      unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v14))
      {
        unsigned int v12 = 4u;
      }

      else
      {
        unsigned int v12 = v14 > 1;
        if (v14 >= 0x100) {
          unsigned int v12 = 2;
        }
      }
    }

    else
    {
      unsigned int v12 = 1u;
    }
  }

  else
  {
    unsigned int v12 = 0u;
  }

  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }

        else if ((_DWORD)v11 == 2)
        {
          *a1 = v15;
        }

        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X27 }

uint64_t type metadata completion function for AbstractCombineLatest(uint64_t a1)
{
  uint64_t v2 = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion(255LL, v4, AssociatedConformanceWitness, v6);
    uint64_t v2 = type metadata accessor for Optional();
    if (v7 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }

  return v2;
}

void type metadata accessor for AbstractCombineLatest()
{
}

uint64_t type metadata completion function for CombineLatest2Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for CombineLatest3Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for CombineLatest4Inner()
{
  return swift_initClassMetadata2();
}

void *assignWithCopy for AbstractCombineLatest.Side(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AbstractCombineLatest.Side(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AbstractCombineLatest.Side(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AbstractCombineLatest.Side(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AbstractCombineLatest<A, B, C>.Side<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + outlined destroy of Subscription?(v0 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined assign with take of Subscription?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t Publisher.prefix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    v7[0] = 0LL;
    v7[1] = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
    return Publisher.output<A>(in:)((uint64_t)v7, a2, a3, a4);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    unint64_t result = MEMORY[0x186E22960](MEMORY[0x189618A48], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>);
  }

  return result;
}

uint64_t Publisher.label(_:category:dsoHandle:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  unsigned int v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v6, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a6, v14, a4);
  uint64_t v20 = (int *)type metadata accessor for Publishers.Label(0LL, a4, a5, v19);
  uint64_t v21 = (void *)(a6 + v20[9]);
  *uint64_t v21 = a1;
  v21[1] = a2;
  uint64_t v22 = (void *)(a6 + v20[10]);
  *uint64_t v22 = v16;
  v22[1] = v17;
  *(void *)(a6 + v20[11]) = v25;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

int *Publishers.Label.init(upstream:name:category:dsoHandle:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(a8, a1, a6);
  unint64_t result = (int *)type metadata accessor for Publishers.Label(0LL, a6, a7, v16);
  uint64_t v18 = (void *)(a8 + result[9]);
  *uint64_t v18 = a2;
  v18[1] = a3;
  uint64_t v19 = (void *)(a8 + result[10]);
  *uint64_t v19 = v14;
  v19[1] = v15;
  *(void *)(a8 + result[11]) = a5;
  return result;
}

uint64_t type metadata accessor for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Label);
}

uint64_t Publisher.label(_:dsoHandle:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v16(v15, v6, v17);
  swift_bridgeObjectRetain();
  v16(a6, (uint64_t)v15, a4);
  uint64_t v19 = (int *)type metadata accessor for Publishers.Label(0LL, a4, a5, v18);
  uint64_t v20 = &a6[v19[9]];
  *(void *)uint64_t v20 = a1;
  *((void *)v20 + 1) = a2;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a4);
  uint64_t v22 = &a6[v19[10]];
  *(void *)uint64_t v22 = 0x6C616D726F6ELL;
  *((void *)v22 + 1) = 0xE600000000000000LL;
  *(void *)&a6[v19[11]] = a3;
  return result;
}

uint64_t Publishers.Label.init(upstream:name:dsoHandle:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a7, a1, a5);
  uint64_t v16 = (int *)type metadata accessor for Publishers.Label(0LL, a5, a6, v15);
  uint64_t v17 = (void *)(a7 + v16[9]);
  *uint64_t v17 = a2;
  v17[1] = a3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a5);
  uint64_t v19 = (void *)(a7 + v16[10]);
  *uint64_t v19 = 0x6C616D726F6ELL;
  v19[1] = 0xE600000000000000LL;
  *(void *)(a7 + v16[11]) = a4;
  return result;
}

uint64_t Publishers.Label.Category.rawValue.getter()
{
  uint64_t v0 = specialized Publishers.Label.Category.rawValue.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t Publishers.Label.Category.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Publishers.Label.Category.init(rawValue:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void static Publishers.Label.Category.normal.getter(void *a1@<X8>)
{
  *a1 = 0x6C616D726F6ELL;
  a1[1] = 0xE600000000000000LL;
}

void static Publishers.Label.Category.important.getter(void *a1@<X8>)
{
  *a1 = 0x6E6174726F706D69LL;
  a1[1] = 0xE900000000000074LL;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Publishers.Label<A>.Category@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return Publishers.Label.Category.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Publishers.Label<A>.Category@<X0>( uint64_t *a1@<X8>)
{
  *a1 = specialized Publishers.Label.Category.rawValue.getter();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.Label.name.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Publishers.Label.category.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(v2 + *(int *)(a1 + 40));
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.dsoHandle.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

void Publishers.Label.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B0DDD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v15 - 120) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&a9 - v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v14, v9);
  uint64_t v18 = (void *)(v10 + *(int *)(v13 + 40));
  uint64_t v19 = v18[1];
  *(void *)(v15 - 112) = *v18;
  *(void *)(v15 - 104) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Publishers.Label.Inner.init(downstream:name:category:dsoHandle:)(v12, v9, (uint64_t)v17);
}

uint64_t sub_183B0DE78()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Label<A>.Inner<A1>, v2);
  Publisher.subscribe<A>(_:)(v3, v1, v2, v0, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 120) + 8LL))(v3, v2);
}

void Publishers.Label.Inner.init(downstream:name:category:dsoHandle:)( uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
}

void sub_183B0DF48(int *a1)
{
  unint64_t v7 = (void *)(v1 + a1[13]);
  *unint64_t v7 = v4;
  v7[1] = v3;
  uint64_t v8 = (void *)(v1 + a1[14]);
  *uint64_t v8 = v5;
  v8[1] = v6;
  *(void *)(v1 + a1[15]) = v2;
  uint64_t v9 = a1[16];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v10 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v11 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v10);
    *(void *)(v1 + v9) = v11;
  }

uint64_t Publishers.Label.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v12 + 32) = 0xD00000000000001ALL;
  *(void *)(v12 + 40) = 0x8000000183BA7BA0LL;
  uint64_t v13 = MEMORY[0x189617FA8];
  *(void *)(v12 + outlined destroy of SubscriptionStatus(v0 + 48) = 0x6C6562614CLL;
  *(void *)(v12 + 56) = 0xE500000000000000LL;
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v13;
  *(void *)(v12 + 80) = 1701667182LL;
  uint64_t v14 = *(int *)(a1 + 56);
  uint64_t v15 = (uint64_t *)(v1 + *(int *)(a1 + 52));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  *(void *)(v12 + 88) = 0xE400000000000000LL;
  *(void *)(v12 + 96) = v16;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 120) = v13;
  *(void *)(v12 + 128) = 0x79726F6765746163LL;
  *(void *)(v12 + 136) = 0xE800000000000000LL;
  uint64_t v19 = *(void *)(v1 + v14);
  uint64_t v18 = *(void *)(v1 + v14 + 8);
  uint64_t v21 = type metadata accessor for Publishers.Label.Category(0LL, *(void *)(a1 + 16), *(void *)(a1 + 32), v20);
  *(void *)(v12 + 144) = v19;
  *(void *)(v12 + 152) = v18;
  *(void *)(v12 + 168) = v21;
  *(void *)(v12 + 176) = 7304036LL;
  *(void *)(v12 + 184) = 0xE300000000000000LL;
  uint64_t v22 = *(void *)(v1 + *(int *)(a1 + 60));
  *(void *)(v12 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeRawPointer?);
  *(void *)(v12 + 192) = v22;
  uint64_t v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v9, 1LL, 1LL, v23);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.Label.Inner.playgroundDescription.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a1 + 52));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  a2[3] = MEMORY[0x189617FA8];
  *a2 = v5;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 48LL))(a1, *(void *)(a2 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Label<A>.Inner<A1>( uint64_t a1)
{
  uint64_t v1 = specialized Publishers.Label.Inner.description.getter(a1);
  swift_bridgeObjectRetain();
  return v1;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Label<A>( uint64_t a1)
{
}

uint64_t specialized Publishers.Label.Category.rawValue.getter()
{
  return *(void *)v0;
}

void type metadata accessor for Publishers.Label.Inner()
{
}

uint64_t type metadata completion function for Publishers.Label()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Label(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v10 = *v11;
    v10[1] = v11[1];
    uint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    *(void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t destroy for Publishers.Label(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Label(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL) + 8);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B0E7B4 + 4 * byte_183B9F878[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.Label( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero( a1,  ((((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
    + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B0E93C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B0E9B4LL);
}

void sub_183B0E944(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B0E94CLL);
  }
  JUMPOUT(0x183B0E9B4LL);
}

void sub_183B0E990()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B0E9B4LL);
}

void sub_183B0E998()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B0E9B4LL);
}

uint64_t sub_183B0E9A0(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v6 + v7) = 0;
  if (!a2) {
    goto LABEL_6;
  }
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0) {
      JUMPOUT(0x183B0E9ACLL);
    }
    *(void *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x183B0E9B4LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void *initializeBufferWithCopyOfBuffer for Publishers.Label.Category(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Publishers.Label.Category()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Publishers.Label.Category(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Publishers.Label.Category(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for Publishers.Label.Category(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.Label.Category);
}

uint64_t type metadata completion function for Publishers.Label.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Label.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *unsigned int v10 = *v11;
    v10[1] = v11[1];
    unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8LL);
    *unint64_t v12 = *v13;
    v12[1] = v13[1];
    uint64_t v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8LL);
    void *v14 = *v15;
    *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8LL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return v4;
}

uint64_t destroy for Publishers.Label.Inner(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Label.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL) + 8);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
         + 8) & 0xFFFFFFF8) != 0)
      unsigned int v8 = 2;
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B0EFD8 + 4 * byte_183B9F887[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.Label.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero( a1,  ((((((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
      + 15) & 0xFFFFFFFFFFFFFFF8LL)
    + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B0F168()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B0F1E0LL);
}

void sub_183B0F170(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B0F178LL);
  }
  JUMPOUT(0x183B0F1E0LL);
}

void sub_183B0F1BC()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B0F1E0LL);
}

void sub_183B0F1C4()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B0F1E0LL);
}

uint64_t sub_183B0F1CC(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v6 + v7) = 0;
  if (!a2) {
    goto LABEL_6;
  }
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0) {
      JUMPOUT(0x183B0F1D8LL);
    }
    *(void *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x183B0F1E0LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t specialized Publishers.Label.Inner.description.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 52));
}

uint64_t ConnectablePublisher.autoconnect()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Publishers.Autoconnect(0LL, a1, v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  uint64_t v8 = swift_allocObject();
  Publishers.Autoconnect.init(upstream:)((uint64_t)v5);
  return v8;
}

uint64_t type metadata accessor for Publishers.Autoconnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.Autoconnect);
}

uint64_t Publishers.Autoconnect.__allocating_init(upstream:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Publishers.Autoconnect.init(upstream:)(a1);
  return v2;
}

uint64_t Publishers.Autoconnect.upstream.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80LL) - 8LL) + 16LL))( a1,  v1 + *(void *)(*(void *)v1 + 96LL));
}

uint64_t Publishers.Autoconnect.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for Publishers.Autoconnect.State(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, v4, v6);
}

uint64_t Publishers.Autoconnect.state.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for Publishers.Autoconnect.State(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(v4, a1, v6);
  return swift_endAccess();
}

uint64_t *Publishers.Autoconnect.init(upstream:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(uint64_t *)((char *)v1 + v4) = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 32LL))( (uint64_t)v1 + *(void *)(*v1 + 96),  a1);
  uint64_t v6 = (_OWORD *)((char *)v1 + *(void *)(*v1 + 112));
  v6[1] = 0u;
  __int128 v6[2] = 0u;
  *uint64_t v6 = 0u;
  return v1;
}

uint64_t *Publishers.Autoconnect.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 104)), -1LL, -1LL);
  uint64_t v2 = *(void *)(v1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 96), v2);
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v5 = type metadata accessor for Publishers.Autoconnect.State(0LL, v2, *(void *)(v1 + 88), v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v3, v5);
  return v0;
}

uint64_t type metadata accessor for Publishers.Autoconnect.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.Autoconnect.State);
}

uint64_t Publishers.Autoconnect.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void Publishers.Autoconnect.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B0F5B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v13 - 2outlined destroy of Subscription?(v0 + 24) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (uint64_t *)((char *)&a9 - v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v9);
  uint64_t v16 = swift_retain();
  Publishers.Autoconnect.Inner.init(_:_:)(v16, v15);
}

uint64_t sub_183B0F610()
{
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 104LL));
  os_unfair_lock_lock(v6);
  Publishers.Autoconnect.state.getter(v5 - 128);
  if (*(void *)(v5 - 96))
  {
    uint64_t v7 = *(void *)(v5 - 224);
    uint64_t v8 = *(void *)(v5 - 128);
    uint64_t result = outlined init with take of Subscription((__int128 *)(v5 - 120), v5 - 168);
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v5 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8 + 1;
      outlined init with copy of Subscription(v5 - 168, v5 - 208);
      Publishers.Autoconnect.state.setter(v5 - 216);
      os_unfair_lock_unlock(v6);
      uint64_t v10 = *(void *)(v3 + 8);
      uint64_t v11 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Autoconnect<A>.Inner<A1>, v0);
      Publisher.subscribe<A>(_:)(v2, v4, v0, v10, v11);
      __swift_destroy_boxed_opaque_existential_1(v5 - 168);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v2, v0);
    }
  }

  else
  {
    os_unfair_lock_unlock(v6);
    uint64_t v12 = *(void *)(v3 + 8);
    uint64_t v13 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Autoconnect<A>.Inner<A1>, v0);
    Publisher.subscribe<A>(_:)(v2, v4, v0, v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3);
    os_unfair_lock_lock(v6);
    *(void *)(v5 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1LL;
    outlined init with copy of Subscription(v5 - 168, v5 - 208);
    Publishers.Autoconnect.state.setter(v5 - 216);
    os_unfair_lock_unlock(v6);
    __swift_destroy_boxed_opaque_existential_1(v5 - 168);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 224) + 8LL))(v2, v0);
  }

  return result;
}

void type metadata accessor for Publishers.Autoconnect.Inner()
{
}

void Publishers.Autoconnect.Inner.init(_:_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v5 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() != -1)
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v4);
    *a2 = v5;
    a2[1] = a1;
    type metadata accessor for Publishers.Autoconnect.Inner();
  }

  __break(1u);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Autoconnect<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void Publishers.Autoconnect.inner_cancelled()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 104LL));
  os_unfair_lock_lock(v1);
  Publishers.Autoconnect.state.getter((uint64_t)&v9);
  if (v11)
  {
    uint64_t v2 = v9;
    outlined init with take of Subscription(&v10, (uint64_t)v6);
    if (v2 < 2)
    {
      memset(v5, 0, sizeof(v5));
      Publishers.Autoconnect.state.setter((uint64_t)v5);
      os_unfair_lock_unlock(v1);
      uint64_t v3 = v7;
      uint64_t v4 = v8;
      __swift_project_boxed_opaque_existential_1(v6, v7);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    }

    else
    {
      *(void *)&v5[0] = v2 - 1;
      outlined init with copy of Subscription((uint64_t)v6, (uint64_t)v5 + 8);
      Publishers.Autoconnect.state.setter((uint64_t)v5);
      os_unfair_lock_unlock(v1);
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }

  else
  {
    os_unfair_lock_unlock(v1);
  }

uint64_t Publishers.Autoconnect.SideEffectSubscription.combineIdentifier.getter()
{
  uint64_t v1 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 8LL))(v3);
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.request(_:)(uint64_t a1)
{
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.cancel()()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8LL))(v2);
}

uint64_t Publishers.Autoconnect.Inner.receive(subscription:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[5];
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = v5;
  void v7[3] = v6;
  void v7[4] = v4;
  void v12[3] = type metadata accessor for Publishers.Autoconnect.SideEffectSubscription(0LL, a2[2], a2[4], v8);
  v12[4] = &protocol witness table for Publishers.Autoconnect<A>.SideEffectSubscription;
  uint64_t v9 = swift_allocObject();
  v12[0] = v9;
  swift_retain();
  outlined init with take of Subscription(v11, v9 + 32);
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = partial apply for implicit closure #2 in implicit closure #1 in Publishers.Autoconnect.Inner.receive(subscription:);
  *(void *)(v9 + outlined destroy of Subscription?(v0 + 24) = v7;
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 40))(v12, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t Publishers.Autoconnect.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 48LL))(a1, *(void *)(a2 + 24));
}

uint64_t Publishers.Autoconnect.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 56LL))(a1, *(void *)(a2 + 24));
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Autoconnect<A>( uint64_t a1)
{
}

  ;
}

uint64_t type metadata completion function for Publishers.Autoconnect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for Publishers.Autoconnect()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Publishers.Autoconnect.__allocating_init(upstream:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Publishers.Autoconnect.receive<A>(subscriber:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152LL))();
}

uint64_t type metadata completion function for Publishers.Autoconnect.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Autoconnect.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }

  else
  {
    uint64_t v11 = *a2;
    unint64_t v10 = (unint64_t)a2 + 15;
    *a1 = v11;
    uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v12 = *(void *)(v10 & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v13 = ((unint64_t)v12 + v6 + 8) & ~v6;
    unint64_t v14 = ((v10 & 0xFFFFFFFFFFFFFFF8LL) + v6 + 8) & ~v6;
    uint64_t v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v15(v13, v14, v4);
  }

  return v3;
}

uint64_t destroy for Publishers.Autoconnect.Inner(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((v3 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

void *initializeWithCopy for Publishers.Autoconnect.Inner(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8LL)) & ~v9;
  uint64_t v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v12(v10, v11, v7);
  return a1;
}

void *assignWithCopy for Publishers.Autoconnect.Inner(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v5 = *v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))( ((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *initializeWithTake for Publishers.Autoconnect.Inner(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))( ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithTake for Publishers.Autoconnect.Inner(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v5 = *v6;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))( ((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80),  ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v9 = ((v7 + 16) & ~v7) + *(void *)(v4 + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 < 2)
    {
LABEL_22:
      uint64_t v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8LL);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = -1;
      }
      return (v16 + 1);
    }
  }

  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9)) {
    goto LABEL_22;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (!(_DWORD)v9) {
    return v6 + v14 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B1010C + 4 * byte_183B9FA30[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.Autoconnect.Inner( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      unsigned int v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        unsigned int v8 = 4u;
      }

      else if (v10 >= 0x100)
      {
        unsigned int v8 = 2;
      }

      else
      {
        unsigned int v8 = v10 > 1;
      }
    }

    else
    {
      unsigned int v8 = 1u;
    }
  }

  else
  {
    unsigned int v8 = 0u;
  }

  if (v6 < a2)
  {
    int v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        int v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }

        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }

        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }

    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t destroy for Publishers.Autoconnect.State(uint64_t result)
{
  if (*(void *)(result + 32) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.Autoconnect.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 32);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v3;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }

  return a1;
}

uint64_t assignWithCopy for Publishers.Autoconnect.State(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  unint64_t v5 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v6 = *((void *)a2 + 4);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      (**(void (***)(uint64_t *, uint64_t))(v6 - 8))(v4, (uint64_t)a2 + 8);
      return a1;
    }

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Publishers.Autoconnect.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a2 + 32) < 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
LABEL_5:
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + outlined destroy of Subscription?(v0 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Publishers.Autoconnect.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + outlined destroy of SubscriptionStatus(v0 + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + outlined destroy of SubscriptionStatus(v0 + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }

  return result;
}

uint64_t getEnumTag for Publishers.Autoconnect.State(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for Publishers.Autoconnect.State(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + outlined destroy of Subscription?(v0 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 32) = (a2 - 1);
  }

  return result;
}

uint64_t Publishers.Autoconnect.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  __int128 v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  int v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9DB50;
  *(void *)(v12 + 32) = 0x746E65726170LL;
  *(void *)(v12 + 40) = 0xE600000000000000LL;
  uint64_t v13 = *(void *)(v1 + 8);
  uint64_t v15 = type metadata accessor for Publishers.Autoconnect(0LL, *(void *)(a1 + 16), *(void *)(a1 + 32), v14);
  *(void *)(v12 + outlined destroy of SubscriptionStatus(v0 + 48) = v13;
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v15;
  *(void *)(v12 + 80) = 0x657274736E776F64LL;
  *(void *)(v12 + 88) = 0xEA00000000006D61LL;
  uint64_t v16 = v1 + *(int *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 24);
  *(void *)(v12 + 120) = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v12 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))( boxed_opaque_existential_1,  v16,  v17);
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v9, 1LL, 1LL, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Autoconnect.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x6E6E6F636F747541LL;
  a1[1] = 0xEB00000000746365LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Autoconnect<A>.Inner<A1>()
{
  return 0x6E6E6F636F747541LL;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.description.getter()
{
  return 0LL;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Publishers.Autoconnect.SideEffectSubscription.description.getter();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Autoconnect<A>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata accessor for Publishers.Autoconnect.SideEffectSubscription( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.Autoconnect.SideEffectSubscription);
}

uint64_t sub_183B1094C()
{
  return swift_deallocObject();
}

uint64_t sub_183B10978()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in Publishers.Autoconnect.Inner.receive(subscription:)()
{
}

uint64_t destroy for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 16;
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 16, v4, v6);
  return a1;
}

void *assignWithCopy for Publishers.Autoconnect.SideEffectSubscription(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + outlined destroy of SubscriptionStatus(v0 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v4;
  *(void *)(a1 + outlined destroy of SubscriptionStatus(v0 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.SideEffectSubscription(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Publishers.Autoconnect.SideEffectSubscription( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + outlined destroy of Subscription?(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t Publisher.print(_:to:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v6, v16);
  outlined init with copy of TextOutputStream?(a3, (uint64_t)v21);
  uint64_t v18 = type metadata accessor for Publishers.Print(0LL, a4, a5, v17);
  (*(void (**)(char *, _BYTE *, uint64_t))(v13 + 32))(&a6[*(int *)(v18 + 36)], v15, a4);
  *(void *)a6 = a1;
  *((void *)a6 + 1) = a2;
  outlined init with take of TextOutputStream?((uint64_t)v21, (uint64_t)&a6[*(int *)(v18 + 40)]);
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with copy of TextOutputStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t Publishers.Print.init(upstream:prefix:to:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v13 = type metadata accessor for Publishers.Print(0LL, a5, a6, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(&a7[*(int *)(v13 + 36)], a1, a5);
  *(void *)a7 = a2;
  *((void *)a7 + 1) = a3;
  return outlined init with take of TextOutputStream?(a4, (uint64_t)&a7[*(int *)(v13 + 40)]);
}

uint64_t type metadata accessor for Publishers.Print(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Print);
}

uint64_t outlined init with take of TextOutputStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t Publishers.Print.prefix.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Publishers.Print.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 36));
}

uint64_t Publishers.Print.stream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextOutputStream?(v2 + *(int *)(a1 + 40), a2);
}

void Publishers.Print.receive<A>(subscriber:)()
{
}

void sub_183B10E44(uint64_t a1, ...)
{
  uint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  outlined init with copy of TextOutputStream?((uint64_t)v2 + *(int *)(v3 + 40), (uint64_t)va);
  swift_allocObject();
  swift_bridgeObjectRetain();
  specialized Publishers.Print.Inner.init(downstream:prefix:to:)(v1, v4, v5, (uint64_t)va);
}

uint64_t sub_183B10E90(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v4 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)((uint64_t)&v6, v2, v3, v1, v4);
  return swift_release();
}

void type metadata accessor for Publishers.Print.Inner()
{
}

double Publishers.Print.Inner.PrintTarget.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Subscription((__int128 *)a1, (uint64_t)v4);
    outlined init with take of Subscription(v4, a2);
  }

  else
  {
    outlined destroy of TextOutputStream?(a1);
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  }

  return result;
}

uint64_t Publishers.Print.Inner.PrintTarget.write(_:)()
{
  return dispatch thunk of TextOutputStream.write(_:)();
}

void Publishers.Print.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x746E697250LL;
  a1[1] = 0xE500000000000000LL;
}

void Publishers.Print.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1LL, -1LL);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))( (uint64_t)v0 + *(void *)(*v0 + 112),  *(void *)(v1 + 88));
  swift_bridgeObjectRelease();
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

uint64_t sub_183B11064()
{
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  outlined destroy of SubscriptionStatus(v0 + *(void *)(*(void *)v0 + 136LL));
  return v0;
}

void Publishers.Print.Inner.__deallocating_deinit()
{
}

uint64_t sub_183B110B8()
{
  return swift_deallocClassInstance();
}

void Publishers.Print.Inner.receive(subscription:)()
{
}

uint64_t sub_183B11128(uint64_t a1)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v8 + 16))(&v34, v4, v7);
  if (*((void *)&v35 + 1))
  {
    *(_OWORD *)uint64_t v32 = v34;
    *(_OWORD *)&v32[16] = v35;
    *(void *)&v32[32] = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)&__int128 v34 = 0LL;
    *((void *)&v34 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(28LL);
    uint64_t v10 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 120LL));
    uint64_t v11 = *v10;
    uint64_t v12 = (void *)v10[1];
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = v11;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._object = (void *)0x8000000183BA7C30LL;
    v14._countAndFlagsBits = 0xD000000000000017LL;
    String.append(_:)(v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    _print_unlocked<A, B>(_:_:)();
    v15._countAndFlagsBits = 41LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    __int128 v16 = v34;
    *(void *)(v9 + 56) = MEMORY[0x189617FA8];
    *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v16;
    MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(a1 - 8) + 8LL))(v32, a1);
  }

  else
  {
    (*(void (**)(__int128 *, uint64_t))(v8 + 8))(&v34, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)uint64_t v32 = 0LL;
    *(void *)&v32[8] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(28LL);
    uint64_t v18 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 120LL));
    uint64_t v19 = *v18;
    uint64_t v20 = (void *)v18[1];
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000183BA7C30LL;
    v22._countAndFlagsBits = 0xD000000000000017LL;
    String.append(_:)(v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 41LL;
    v23._object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    *(void *)(v17 + 56) = MEMORY[0x189617FA8];
    *(void *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0LL;
    *(void *)(v17 + 40) = 0xE000000000000000LL;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }

  uint64_t v24 = *(os_unfair_lock_s **)(v2 + *(void *)(*(void *)v2 + 144LL));
  os_unfair_lock_lock(v24);
  uint64_t v25 = v2 + *(void *)(*(void *)v2 + 136LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v25, (uint64_t)v32);
  if (v33 == 2
    && (int8x16_t v26 = vorrq_s8(*(int8x16_t *)&v32[8], *(int8x16_t *)&v32[24]),
        !(*(void *)&vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)) | *(void *)v32)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v32);
    outlined init with copy of Subscription((uint64_t)v3, (uint64_t)v32);
    char v33 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v32, v25);
    swift_endAccess();
    os_unfair_lock_unlock(v24);
    *(void *)&v32[24] = v5;
    *(void *)&v32[32] = &protocol witness table for Publishers.Print<A>.Inner<A1>;
    *(void *)uint64_t v32 = v2;
    int v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 40);
    swift_retain();
    v30(v32, v31, v1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v32);
    os_unfair_lock_unlock(v24);
    uint64_t v27 = v3[3];
    uint64_t v28 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v27);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v28 + 8) + 8LL))(v27);
  }

void Publishers.Print.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v5 = v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v9 = (char *)v20 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  MEMORY[0x1895F8858](v12);
  Swift::String v14 = (char *)v20 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)v20 - v13, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1LL, AssociatedTypeWitness) == 1)
  {
    uint64_t v16 = v3[11];
    uint64_t v17 = v3[13];
    uint64_t v21 = v5;
    uint64_t v22 = v16;
    uint64_t v23 = v4;
    uint64_t v24 = v17;
    type metadata accessor for Publishers.Print.Inner.PrintTarget();
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, AssociatedTypeWitness);
  uint64_t v18 = v3[11];
  uint64_t v19 = v3[13];
  uint64_t v21 = v5;
  uint64_t v22 = v18;
  uint64_t v23 = v4;
  uint64_t v24 = v19;
  v20[1] = v19;
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

void sub_183B117B4(uint64_t a1)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6 - 120, v5, v8);
  if (*(void *)(v6 - 96))
  {
    __int128 v10 = *(_OWORD *)(v6 - 104);
    *(_OWORD *)(v6 - 208) = *(_OWORD *)(v6 - 120);
    *(_OWORD *)(v6 - 192) = v10;
    *(void *)(v6 - 176) = *(void *)(v6 - 88);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)(v6 - 120) = 0LL;
    *(void *)(v6 - 112) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    uint64_t v12 = *(void *)(v6 - 112);
    *(void *)(v6 - 120) = *(void *)(v6 - 120);
    *(void *)(v6 - 112) = v12;
    uint64_t v13 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 120LL));
    *(void *)(v6 - 2outlined destroy of Subscription?(v0 + 24) = v2;
    uint64_t v15 = *v13;
    Swift::String v14 = (void *)v13[1];
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = v15;
    v16._object = v14;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x8000000183BA7BD0LL;
    v17._countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v17);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v18._countAndFlagsBits = 41LL;
    v18._object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    uint64_t v19 = *(void *)(v6 - 120);
    uint64_t v20 = *(void *)(v6 - 112);
    *(void *)(v11 + 56) = MEMORY[0x189617FA8];
    *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v19;
    *(void *)(v11 + 40) = v20;
    MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v6 - 208, a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 224) + 8LL))(v4, v3);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6 - 120, v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)(v6 - 208) = 0LL;
    *(void *)(v6 - 200) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    uint64_t v22 = *(void *)(v6 - 200);
    *(void *)(v6 - 208) = *(void *)(v6 - 208);
    *(void *)(v6 - 200) = v22;
    uint64_t v23 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 120LL));
    uint64_t v24 = *v23;
    uint64_t v25 = (void *)v23[1];
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = v24;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._object = (void *)0x8000000183BA7BD0LL;
    v27._countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v27);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v28._countAndFlagsBits = 41LL;
    v28._object = (void *)0xE100000000000000LL;
    String.append(_:)(v28);
    uint64_t v29 = *(void *)(v6 - 208);
    uint64_t v30 = *(void *)(v6 - 200);
    *(void *)(v21 + 56) = MEMORY[0x189617FA8];
    *(void *)(v21 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v29;
    *(void *)(v21 + 40) = v30;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  }

  JUMPOUT(0x183B11AF4LL);
}

void Publishers.Print.Inner.receive(_:)()
{
}

uint64_t sub_183B11BF4(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v42 = *(void (**)(__int128 *, uint64_t, uint64_t))(v6 + 16);
  v42(&v46, v1, v5);
  uint64_t v41 = v6;
  if (*((void *)&v47 + 1))
  {
    __int128 v49 = v46;
    __int128 v50 = v47;
    uint64_t v51 = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)&__int128 v46 = 0LL;
    *((void *)&v46 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    uint64_t v8 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 120LL));
    uint64_t v10 = *v8;
    uint64_t v9 = (void *)v8[1];
    swift_bridgeObjectRetain();
    uint64_t v43 = v10;
    v11._countAndFlagsBits = v10;
    v11._object = v9;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x8000000183BA7C10LL;
    v12._countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v12);
    swift_getAssociatedTypeWitness();
    uint64_t v13 = v45;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v14._countAndFlagsBits = 41LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    __int128 v15 = v46;
    uint64_t v16 = MEMORY[0x189617FA8];
    *(void *)(v7 + 56) = MEMORY[0x189617FA8];
    *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v15;
    MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(__int128 *, uint64_t))(*(void *)(a1 - 8) + 8LL))(&v49, a1);
  }

  else
  {
    (*(void (**)(__int128 *, uint64_t))(v6 + 8))(&v46, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)&__int128 v49 = 0LL;
    *((void *)&v49 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    Swift::String v18 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 120LL));
    uint64_t v19 = *v18;
    uint64_t v9 = (void *)v18[1];
    swift_bridgeObjectRetain();
    uint64_t v43 = v19;
    v20._countAndFlagsBits = v19;
    v20._object = v9;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x8000000183BA7C10LL;
    v21._countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v21);
    swift_getAssociatedTypeWitness();
    uint64_t v13 = v45;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v22._countAndFlagsBits = 41LL;
    v22._object = (void *)0xE100000000000000LL;
    String.append(_:)(v22);
    __int128 v23 = v49;
    uint64_t v16 = MEMORY[0x189617FA8];
    *(void *)(v17 + 56) = MEMORY[0x189617FA8];
    *(_OWORD *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v23;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v13, v44, v3);
  uint64_t v25 = result;
  if (result == 0x8000000000000000LL)
  {
    uint64_t v26 = v16;
    Swift::String v27 = (void *)0xE900000000000064LL;
    uint64_t v28 = 0x6574696D696C6E75LL;
    goto LABEL_9;
  }

  if ((result & 0x8000000000000000LL) == 0)
  {
    if (!result) {
      return v25;
    }
    uint64_t v26 = v16;
    *(void *)&__int128 v49 = 0x28203A78616DLL;
    *((void *)&v49 + 1) = 0xE600000000000000LL;
    *(void *)&__int128 v46 = result;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 41LL;
    v30._object = (void *)0xE100000000000000LL;
    String.append(_:)(v30);
    Swift::String v27 = (void *)*((void *)&v49 + 1);
    uint64_t v28 = v49;
LABEL_9:
    v42(&v46, v1, v5);
    if (*((void *)&v47 + 1))
    {
      __int128 v49 = v46;
      __int128 v50 = v47;
      uint64_t v51 = v48;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
      *(void *)&__int128 v46 = 0LL;
      *((void *)&v46 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(26LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&__int128 v46 = v43;
      *((void *)&v46 + 1) = v9;
      v32._countAndFlagsBits = 0x2074736575716572LL;
      v32._object = (void *)0xE800000000000000LL;
      String.append(_:)(v32);
      v33._countAndFlagsBits = v28;
      v33._object = v27;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 0x7268636E79732820LL;
      v34._object = (void *)0xEE002973756F6E6FLL;
      String.append(_:)(v34);
      __int128 v35 = v46;
      *(void *)(v31 + 56) = v26;
      *(_OWORD *)(v31 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v35;
      MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      (*(void (**)(__int128 *, uint64_t))(*(void *)(a1 - 8) + 8LL))(&v49, a1);
    }

    else
    {
      (*(void (**)(__int128 *, uint64_t))(v41 + 8))(&v46, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
      *(void *)&__int128 v49 = 0LL;
      *((void *)&v49 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(26LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&__int128 v49 = v43;
      *((void *)&v49 + 1) = v9;
      v37._countAndFlagsBits = 0x2074736575716572LL;
      v37._object = (void *)0xE800000000000000LL;
      String.append(_:)(v37);
      v38._countAndFlagsBits = v28;
      v38._object = v27;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x7268636E79732820LL;
      v39._object = (void *)0xEE002973756F6E6FLL;
      String.append(_:)(v39);
      __int128 v40 = v49;
      *(void *)(v36 + 56) = v26;
      *(_OWORD *)(v36 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v40;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }

    return v25;
  }

  __break(1u);
  return result;
}

uint64_t Publishers.Print.Inner.request(_:)(uint64_t result)
{
  if (result == 0x8000000000000000LL) {
LABEL_4:
  }
    type metadata accessor for Publishers.Print.Inner.PrintTarget();
  if ((result & 0x8000000000000000LL) == 0)
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 41LL;
    v2._object = (void *)0xE100000000000000LL;
    String.append(_:)(v2);
    goto LABEL_4;
  }

  __break(1u);
  return result;
}

void Publishers.Print.Inner.cancel()()
{
}

void sub_183B12558(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3 - 88, v2, v5);
  if (*(void *)(v3 - 64))
  {
    __int128 v7 = *(_OWORD *)(v3 - 72);
    *(_OWORD *)uint64_t v24 = *(_OWORD *)(v3 - 88);
    *(_OWORD *)&v24[16] = v7;
    *(void *)&v24[32] = *(void *)(v3 - 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)(v3 - 88) = 0LL;
    *(void *)(v3 - 80) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    uint64_t v9 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 120LL));
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 - 88) = v11;
    *(void *)(v3 - 80) = v10;
    v12._countAndFlagsBits = 0x2065766965636572LL;
    v12._object = (void *)0xEE006C65636E6163LL;
    String.append(_:)(v12);
    uint64_t v13 = *(void *)(v3 - 88);
    uint64_t v14 = *(void *)(v3 - 80);
    *(void *)(v8 + 56) = MEMORY[0x189617FA8];
    *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v13;
    *(void *)(v8 + 40) = v14;
    MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Print<A>.Inner<A1>.PrintTarget, a1);
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(a1 - 8) + 8LL))(v24, a1);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3 - 88, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)uint64_t v24 = 0LL;
    *(void *)&v24[8] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    uint64_t v16 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 120LL));
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v24 = v18;
    *(void *)&v24[8] = v17;
    v19._countAndFlagsBits = 0x2065766965636572LL;
    v19._object = (void *)0xEE006C65636E6163LL;
    String.append(_:)(v19);
    *(void *)(v15 + 56) = MEMORY[0x189617FA8];
    *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v18;
    *(void *)(v15 + 40) = v17;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }

  Swift::String v20 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 144LL));
  os_unfair_lock_lock(v20);
  uint64_t v21 = v1 + *(void *)(*(void *)v1 + 136LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v21, (uint64_t)v24);
  if (v25)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v24);
    os_unfair_lock_unlock(v20);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)v24, v3 - 88);
    *(void *)uint64_t v24 = 1LL;
    memset(&v24[8], 0, 32);
    char v25 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v24, v21);
    swift_endAccess();
    os_unfair_lock_unlock(v20);
    uint64_t v22 = *(void *)(v3 - 64);
    uint64_t v23 = *(void *)(v3 - 56);
    __swift_project_boxed_opaque_existential_1((void *)(v3 - 88), v22);
    (*(void (**)(uint64_t))(*(void *)(v23 + 8) + 8LL))(v22);
    __swift_destroy_boxed_opaque_existential_1(v3 - 88);
  }

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Print<A>.Inner<A1>()
{
}

  ;
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Print<A>.Inner<A1>()
{
}

  ;
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Print<A>.Inner<A1>( uint64_t a1)
{
}

  ;
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Print<A>.Inner<A1>( uint64_t a1)
{
  return Publishers.Print.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Print<A>.Inner<A1>()
{
  return 0x746E697250LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Print<A>.Inner<A1>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Print<A>.Inner<A1>()
{
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Print<A>()
{
}

void specialized Publishers.Print.Inner.init(downstream:prefix:to:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void **)v5;
  uint64_t v11 = v5 + *(void *)(*(void *)v5 + 136LL);
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0LL;
  *(_BYTE *)(v11 + 40) = 2;
  uint64_t v12 = *(void *)(*(void *)v5 + 144LL);
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  _DWORD *v13 = 0;
  *(void *)(v5 + v12) = v13;
  uint64_t v14 = v10[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))( v5 + *(void *)(*(void *)v5 + 112LL),  a1,  v14);
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
  }

  else
  {
    v23[0] = a2;
    v23[1] = a3;
    v15._countAndFlagsBits = 8250LL;
    v15._object = (void *)0xE200000000000000LL;
    String.append(_:)(v15);
    uint64_t v16 = a2;
    unint64_t v17 = a3;
  }

  uint64_t v18 = (void *)(v5 + *(void *)(*(void *)v5 + 120LL));
  *uint64_t v18 = v16;
  v18[1] = v17;
  outlined init with copy of TextOutputStream?(a4, (uint64_t)v22);
  uint64_t v19 = v10[10];
  uint64_t v20 = v10[12];
  uint64_t v21 = v10[13];
  Publishers.Print.Inner.PrintTarget.init(_:)((uint64_t)v22, (uint64_t)v23);
  outlined destroy of TextOutputStream?(a4);
  v22[0] = v19;
  v22[1] = v14;
  _OWORD v22[2] = v20;
  void v22[3] = v21;
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
}

uint64_t sub_183B12A7C()
{
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v2 - 8) + 32LL))(v1, &v4, v2);
  return v0;
}

uint64_t type metadata completion function for Publishers.Print()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Print(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7LL;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8LL) + 40 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }

  else
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    unint64_t v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v17 = *(void *)(v16 + 24);
    if (v17 < 0xFFFFFFFF)
    {
      __int128 v18 = *(_OWORD *)v16;
      __int128 v19 = *(_OWORD *)(v16 + 16);
      *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(v16 + 32);
      *(_OWORD *)unint64_t v15 = v18;
      *(_OWORD *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v19;
    }

    else
    {
      *(void *)(v15 + outlined destroy of Subscription?(v0 + 24) = v17;
      *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(v16 + 32);
      (**(void (***)(void))(v17 - 8))();
    }
  }

  return a1;
}

unint64_t destroy for Publishers.Print(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  unint64_t result = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)(result + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

void *initializeWithCopy for Publishers.Print(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  uint64_t v11 = *(void *)(v6 + 64) + 7LL;
  unint64_t v12 = (v11 + v8) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = *(void *)(v13 + 24);
  if (v14 < 0xFFFFFFFF)
  {
    __int128 v15 = *(_OWORD *)v13;
    __int128 v16 = *(_OWORD *)(v13 + 16);
    *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(v13 + 32);
    *(_OWORD *)unint64_t v12 = v15;
    *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
  }

  else
  {
    *(void *)(v12 + outlined destroy of Subscription?(v0 + 24) = v14;
    *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(v13 + 32);
    (**(void (***)(void))(v14 - 8))();
  }

  return a1;
}

void *assignWithCopy for Publishers.Print(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 64) + 7LL;
  unint64_t v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = *(void *)(v12 + 24);
  if (*(void *)(v11 + 24) < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *(void *)(v11 + outlined destroy of Subscription?(v0 + 24) = v13;
      *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(v12 + 32);
      (**(void (***)(unint64_t, unint64_t))(v13 - 8))(v11, v12);
      return a1;
    }

_OWORD *initializeWithTake for Publishers.Print(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  uint64_t v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  uint64_t v8 = *(void *)(v4 + 64) + 7LL;
  unint64_t v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = *(void *)(v10 + 32);
  __int128 v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v11;
  return a1;
}

void *assignWithTake for Publishers.Print(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 64) + 7LL;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)(v12 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1((v11 + v9) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8LL;
  __int128 v14 = *(_OWORD *)v13;
  __int128 v15 = *(_OWORD *)(v13 + 16);
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(v13 + 32);
  *(_OWORD *)unint64_t v12 = v14;
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Print(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
    }

    else
    {
      unint64_t v12 = *(void *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }
  }

  else
  {
    if (((((*(void *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 40) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B1307C + 4 * byte_183B9FC30[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.Print( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    int v10 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v8 = a3 - v6 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v9 = 1;
    }
    if (v8 >= 2) {
      int v10 = v9;
    }
    else {
      int v10 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X13 }
  }

  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    unsigned int v11 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 40);
    *a1 = v11;
  }

  __asm { BR              X10 }

void sub_183B13204()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B13270LL);
}

void sub_183B1320C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B13214LL);
  }
  JUMPOUT(0x183B13270LL);
}

void sub_183B13228()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B13270LL);
}

void sub_183B13230()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B13270LL);
}

void sub_183B13238(uint64_t a1, int a2, int a3)
{
  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0) {
      JUMPOUT(0x183B13244LL);
    }
    if (a2 < 0) {
      JUMPOUT(0x183B13268LL);
    }
    *(void *)(v3 + 8) = (a2 - 1);
  }

  JUMPOUT(0x183B13270LL);
}

uint64_t type metadata completion function for Publishers.Print.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t initializeWithCopy for Publishers.Print.Inner.PrintTarget(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + outlined destroy of Subscription?(v0 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for Publishers.Print.Inner.PrintTarget(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for Publishers.Print.Inner.PrintTarget(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Print.Inner.PrintTarget(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Publishers.Print.Inner.PrintTarget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + outlined destroy of Subscription?(v0 + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + outlined destroy of Subscription?(v0 + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for Publishers.Print.Inner.PrintTarget()
{
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t outlined destroy of TextOutputStream?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  if ((v3 & 0xC000000000000001LL) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for ObservableObjectPublisher.Conduit();
    lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit( &lazy protocol witness table cache variable for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit,  (uint64_t)&protocol conformance descriptor for ObservableObjectPublisher.Conduit);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    uint64_t v5 = v23;
    uint64_t v6 = v24;
    unint64_t v7 = v25;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = -1LL << *(_BYTE *)(v3 + 32);
    uint64_t v4 = v3 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v7 = v10 & *(void *)(v3 + 56);
  }

  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v14 = v6;
      goto LABEL_27;
    }

    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v17 >= v11) {
      goto LABEL_30;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    uint64_t v14 = v6 + 1;
    if (!v18)
    {
      uint64_t v14 = v6 + 2;
      if (v6 + 2 >= v11) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(v4 + 8 * v14);
      if (!v18)
      {
        uint64_t v14 = v6 + 3;
        if (v6 + 3 >= v11) {
          goto LABEL_30;
        }
        unint64_t v18 = *(void *)(v4 + 8 * v14);
        if (!v18)
        {
          uint64_t v14 = v6 + 4;
          if (v6 + 4 >= v11) {
            goto LABEL_30;
          }
          unint64_t v18 = *(void *)(v4 + 8 * v14);
          if (!v18)
          {
            uint64_t v19 = v6 + 5;
            while (v11 != v19)
            {
              unint64_t v18 = *(void *)(v4 + 8 * v19++);
              if (v18)
              {
                uint64_t v14 = v19 - 1;
                goto LABEL_26;
              }
            }

uint64_t type metadata accessor for ObservableObjectPublisher.Conduit()
{
  return objc_opt_self();
}

uint64_t outlined consume of Set<ObservableObjectPublisher.Conduit>.Iterator._Variant()
{
  return swift_release();
}

uint64_t ObservableObjectPublisher.Conduit.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectPublisher.Conduit()
{
  return Hasher._finalize()();
}

uint64_t ObservableObjectPublisher.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

BOOL static ObservableObjectPublisher.Inner.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ObservableObjectPublisher.Inner.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ObservableObjectPublisher.Inner.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ObservableObjectPublisher.Inner<A>.State( char *a1, char *a2)
{
  return static ObservableObjectPublisher.Inner.State.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ObservableObjectPublisher.Inner<A>.State()
{
  return ObservableObjectPublisher.Inner.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ObservableObjectPublisher.Inner<A>.State( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectPublisher.Inner<A>.State()
{
  return Hasher._finalize()();
}

uint64_t ObservableObjectPublisher.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x657274736E776F64LL;
  *(void *)(v8 + 40) = 0xEA00000000006D61LL;
  uint64_t v9 = (char *)v0 + *(void *)(v1 + 136);
  uint64_t v10 = *(void *)(v1 + 112);
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v9,  v10);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v7, 1LL, 1LL, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void ObservableObjectPublisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0xD000000000000019LL;
  a1[1] = 0x8000000183B9FEA0LL;
}

uint64_t ObservableObjectPublisher.Inner.__ivar_destroyer()
{
  uint64_t v1 = *v0;
  swift_weakDestroy();
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 112) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 136));
}

uint64_t *ObservableObjectPublisher.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1LL, -1LL);
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1LL, -1LL);
  swift_weakDestroy();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 112) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t ObservableObjectPublisher.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ObservableObjectPublisher.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152LL));
  os_unfair_lock_lock(v1);
  *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 160LL)) = 2;
  os_unfair_lock_unlock(v1);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    ObservableObjectPublisher.remove(_:)(v0);
    return swift_release();
  }

  return result;
}

void ObservableObjectPublisher.remove(_:)(Swift::UInt a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v4);
  uint64_t v5 = v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections;
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a1);
  swift_endAccess();
  swift_release();
  if ((*(void *)v5 & 0xC000000000000001LL) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16LL);
  }

  os_unfair_lock_unlock(v4);
  if (!v6)
  {
    uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier);
    if (v7)
    {
      if (one-time initialization token for lock != -1) {
        swift_once();
      }
      os_unfair_lock_lock((os_unfair_lock_t)static ObservableObjectTable.lock);
      if (one-time initialization token for contents != -1) {
        swift_once();
      }
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      uint64_t v10 = v7;
      outlined init with take of ObservableObjectTable.Storage((uint64_t)v9, (uint64_t)v8);
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v8);
      swift_endAccess();
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v8);
      swift_release();
      os_unfair_lock_unlock((os_unfair_lock_t)static ObservableObjectTable.lock);
    }
  }

void ObservableObjectPublisher.Inner.send()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 152));
  os_unfair_lock_lock(v2);
  if (*((_BYTE *)v0 + *(void *)(*v0 + 160)) == 1)
  {
    uint64_t v5 = v1 + 112;
    uint64_t v4 = *(void *)(v1 + 112);
    uint64_t v3 = *(void *)(v5 + 8);
    os_unfair_lock_unlock(v2);
    os_unfair_recursive_lock_lock_with_options();
    Subscriber<>.receive()(v4, v3);
    os_unfair_recursive_lock_unlock();
  }

  else
  {
    os_unfair_lock_unlock(v2);
  }

void protocol witness for Subscription.request(_:) in conformance ObservableObjectPublisher.Inner<A>()
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ObservableObjectPublisher.Inner<A>()
{
  return 0xD000000000000019LL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ObservableObjectPublisher.Inner<A>()
{
  return ObservableObjectPublisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ObservableObjectPublisher.Inner<A>( void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance ObservableObjectPublisher.Inner<A>()
{
  return ObservableObjectPublisher.Inner.cancel()();
}

uint64_t ObservableObjectPublisher.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  _DWORD *v2 = 0;
  *(void *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x18961AFF8];
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0LL;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t ObservableObjectPublisher.init()()
{
  uint64_t v1 = type metadata accessor for ObservationRegistrar();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  *(void *)(v0 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v6;
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x18961AFF8];
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0LL;
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))( v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar,  v4,  v1);
  return v0;
}

uint64_t ObservableObjectPublisher.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ObservableObjectPublisher.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObservableObjectPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ObservableObjectPublisher.Inner(0LL, v11, v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  swift_retain();
  uint64_t v15 = specialized ObservableObjectPublisher.Inner.__allocating_init(_:parent:)((uint64_t)v10, v4);
  swift_release();
  uint64_t v16 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v16);
  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)(&v19, (Swift::UInt)v15);
  swift_endAccess();
  swift_release();
  os_unfair_lock_unlock(v16);
  v18[3] = v14;
  void v18[4] = &protocol witness table for ObservableObjectPublisher.Inner<A>;
  v18[0] = v15;
  (*(void (**)(void *, uint64_t, uint64_t))(a3 + 40))(v18, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t type metadata accessor for ObservableObjectPublisher.Inner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ObservableObjectPublisher.Inner);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance ObservableObjectPublisher( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ObservableObjectPublisher.receive<A>(subscriber:)(a1, a2, a3);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ObservableObjectTable.Storage()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ObservableObjectTable.Storage()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectTable.Storage()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ObservableObjectTable.Storage( uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

_DWORD *one-time initialization function for lock()
{
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  static ObservableObjectTable.lock = (uint64_t)result;
  return result;
}

{
  _DWORD *result;
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  static lock in Global #1 in CombineIdentifier.init() = (uint64_t)result;
  return result;
}

void one-time initialization function for contents()
{
  static ObservableObjectTable.contents = (_UNKNOWN *)MEMORY[0x18961AFF0];
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v9 = (void *)MEMORY[0x18961AFE8];
  if (v5) {
    goto LABEL_31;
  }
LABEL_6:
  int64_t v10 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v10 < v6)
    {
      unint64_t v11 = *(void *)(v2 + 8 * v10);
      ++v8;
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 2;
      if (v10 + 2 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 3;
      if (v10 + 3 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11)
      {
LABEL_21:
        unint64_t v5 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v8 << 6); ; unint64_t i = v17 | (v8 << 6))
        {
          outlined init with copy of ObservableObjectTable.Storage(*(void *)(a1 + 48) + 16 * i, (uint64_t)v22);
          outlined init with take of ObservableObjectTable.Storage((uint64_t)v22, (uint64_t)v21);
          uint64_t v14 = MEMORY[0x186E22ABC](v21);
          swift_unknownObjectRelease();
          if (v14)
          {
            uint64_t v18 = 0LL;
            uint64_t v19 = 0LL;
          }

          else
          {
            outlined init with copy of ObservableObjectTable.Storage((uint64_t)v21, (uint64_t)&v18);
          }

          outlined destroy of ObservableObjectTable.Storage((uint64_t)v21);
          if (v19)
          {
            outlined init with take of ObservableObjectTable.Storage((uint64_t)&v18, (uint64_t)v20);
            outlined init with take of ObservableObjectTable.Storage((uint64_t)v20, (uint64_t)&v18);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
            }
            unint64_t v16 = v9[2];
            unint64_t v15 = v9[3];
            if (v16 >= v15 >> 1) {
              uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16 + 1,  1,  v9);
            }
            v9[2] = v16 + 1;
            uint64_t result = outlined init with take of ObservableObjectTable.Storage((uint64_t)&v18, (uint64_t)&v9[2 * v16 + 4]);
            if (!v5) {
              goto LABEL_6;
            }
          }

          else
          {
            uint64_t result = outlined destroy of ObservableObjectTable.Storage?((uint64_t)&v18);
            if (!v5) {
              goto LABEL_6;
            }
          }

LABEL_31:
          unint64_t v17 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }

      int64_t v12 = v10 + 4;
      if (v12 < v6)
      {
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11)
        {
          int64_t v8 = v12;
          goto LABEL_21;
        }

        while (1)
        {
          int64_t v8 = v12 + 1;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_34;
          }
          if (v8 >= v6) {
            break;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v8);
          ++v12;
          if (v11) {
            goto LABEL_21;
          }
        }
      }
    }

    __break(1u);
    goto LABEL_32;
  }

      uint64_t v36 = 0LL;
      uint64_t v65 = 0u;
      uint64_t v66 = 0u;
      unint64_t v64 = 0u;
    }

    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }

LABEL_32:
    swift_release();
    return (uint64_t)v9;
  }

  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t static ObservableObjectTable.subscript.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  unint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_unknownObjectWeakInit();
  uint64_t v6 = swift_unknownObjectWeakAssign();
  uint64_t v19 = a1;
  outlined init with take of ObservableObjectTable.Storage(v6, (uint64_t)v20);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static ObservableObjectTable.lock);
  specialized static ObservableObjectTable.collect()();
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static ObservableObjectTable.contents;
  if (*((void *)static ObservableObjectTable.contents + 2)
    && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(v7[7] + 8 * v8);
    swift_endAccess();
    unint64_t v11 = (os_unfair_lock_s *)static ObservableObjectTable.lock;
    swift_retain();
  }

  else
  {
    swift_endAccess();
    type metadata accessor for ObservableObjectPublisher();
    uint64_t v10 = swift_allocObject();
    uint64_t v12 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
    uint64_t v13 = (_DWORD *)swift_slowAlloc();
    _DWORD *v13 = 0;
    *(void *)(v10 + v12) = v13;
    *(void *)(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x18961AFF8];
    *(void *)(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0LL;
    ObservationRegistrar.init()();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))( v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar,  v5,  v2);
    swift_unknownObjectWeakInit();
    uint64_t v14 = swift_unknownObjectWeakAssign();
    uint64_t v19 = a1;
    outlined init with take of ObservableObjectTable.Storage(v14, (uint64_t)v18);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v17 = static ObservableObjectTable.contents;
    static ObservableObjectTable.contents = (_UNKNOWN *)0x8000000000000000LL;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    static ObservableObjectTable.contents = v17;
    swift_bridgeObjectRelease();
    outlined destroy of ObservableObjectTable.Storage((uint64_t)v18);
    swift_endAccess();
    unint64_t v11 = (os_unfair_lock_s *)static ObservableObjectTable.lock;
  }

  os_unfair_lock_unlock(v11);
  outlined destroy of ObservableObjectTable.Storage((uint64_t)v20);
  return v10;
}

uint64_t ObservableObject<>.applyFields(_:_:type:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_conformsToProtocol2();
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (v11) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v13) {
    return project #1 <A><A1>(type:) in ObservableObject<>.applyFields(_:_:type:)(v13, v5, a2, a1, a4, v13, a5, v12);
  }
  else {
    return 1LL;
  }
}

uint64_t project #1 <A><A1>(type:) in ObservableObject<>.applyFields(_:_:type:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = type metadata accessor for ObservationRegistrar();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*a4) {
    goto LABEL_2;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a6, a8);
  if (v18)
  {
    *a4 = v18;
    swift_release();
    return 0LL;
  }

  else
  {
    type metadata accessor for ObservableObjectPublisher();
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
    uint64_t v21 = (_DWORD *)swift_slowAlloc();
    *uint64_t v21 = 0;
    *(void *)(v19 + v20) = v21;
    *(void *)(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x18961AFF8];
    *(void *)(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0LL;
    ObservationRegistrar.init()();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))( v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar,  v14,  v11);
    *a4 = v19;
    swift_release();
    uint64_t result = *a4;
    if (*a4)
    {
LABEL_2:
      unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 16);
      uint64_t v16 = swift_retain();
      v15(v16, a6, a8);
      return 1LL;
    }

    __break(1u);
  }

  return result;
}

uint64_t ObservableObject<>.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for _EachFieldOptions();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  char v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = 0LL;
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_EachFieldOptions>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9DB50;
  static _EachFieldOptions.classType.getter();
  static _EachFieldOptions.ignoreUnknown.getter();
  uint64_t v17 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_EachFieldOptions]);
  lazy protocol witness table accessor for type [_EachFieldOptions] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v15 = v3;
  uint64_t v16 = &v18;
  _forEachField(of:options:body:)();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = v18;
  if (!v18) {
    return static ObservableObjectTable.subscript.getter(v3);
  }
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)( a1,  a2,  &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>,  (void (*)(void))type metadata accessor for ObservableObjectPublisher.Conduit);
}

{
  return specialized _NativeSet.init(_:capacity:)( a1,  a2,  &demangling cache variable for type metadata for _SetStorage<AnyCancellable>,  (void (*)(void))type metadata accessor for AnyCancellable);
}

Swift::Int specialized _NativeSet.init(_:capacity:)( uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0LL);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          uint64_t v6 = v19;
        }

        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        Swift::Int result = Hasher._finalize()();
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1LL << *(_BYTE *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1LL << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1LL << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0LL;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }

          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }

        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }

      while (__CocoaSet.Iterator.next()());
    }

    swift_release();
  }

  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x18961AFF8];
  }

  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)( a1,  &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
}

{
  return specialized _NativeSet.resize(capacity:)( a1,  &demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v4 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_33;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                uint64_t v28 = 1LL << *(_BYTE *)(v4 + 32);
                if (v28 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                uint64_t v3 = v2;
                *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_39;
                  }
                  if (v7 >= v12) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0LL;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1LL << *(_BYTE *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }

      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1LL))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }

        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v25 = 1LL << *(_BYTE *)(v2 + 32);
                if (v25 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v6 = -1LL << v25;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
                break;
              }

              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v5 = v17;
            }
          }
        }

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(Swift::UInt a1, uint64_t a2)
{
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  unint64_t v9 = 0LL;
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      unint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        unint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }

  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

unint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *v1;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v5 = __CocoaSet.contains(_:)();
    swift_release();
    if ((v5 & 1) != 0)
    {
      unint64_t v6 = specialized Set._Variant._migrateToNative(_:removing:)(v4, a1);
      swift_bridgeObjectRelease();
      return v6;
    }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
    return 0LL;
  }
  uint64_t v10 = *(void *)(v3 + 48);
  if (*(void *)(v10 + 8 * v9) != a1)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a1);
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v1;
  uint64_t v15 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
    uint64_t v13 = v15;
  }

  unint64_t v6 = *(void *)(*(void *)(v13 + 48) + 8 * v9);
  specialized _NativeSet._delete(at:)(v9);
  *uint64_t v1 = v15;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v7 = ~v5;
  while (*(void *)(*(void *)(v3 + 48) + 16 * v6) != a1)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
      return 0LL;
    }
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v12 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeSet.copy()();
    uint64_t v10 = v12;
  }

  uint64_t v8 = *(void *)(*(void *)(v10 + 48) + 16 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *uint64_t v1 = v12;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, Swift::UInt a2)
{
  uint64_t v4 = __CocoaSet.count.getter();
  uint64_t v5 = swift_unknownObjectRetain();
  Swift::Int v6 = specialized _NativeSet.init(_:capacity:)( v5,  v4,  &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>,  (void (*)(void))type metadata accessor for ObservableObjectPublisher.Conduit);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t result = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v10 = *(void *)(v6 + 48);
    if (*(void *)(v10 + 8 * result) == a2)
    {
LABEL_6:
      specialized _NativeSet._delete(at:)(result);
      Swift::Int *v2 = v6;
      return a2;
    }

    uint64_t v11 = ~v8;
    while (1)
    {
      unint64_t result = (result + 1) & v11;
      if (((*(void *)(v6 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) == 0) {
        break;
      }
      if (*(void *)(v10 + 8 * result) == a2) {
        goto LABEL_6;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          int64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            void *v13 = *v14;
            int64_t v2 = v6;
          }
        }

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 16 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }

        else if (v11 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          int64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            void *v13 = *v14;
            int64_t v2 = v6;
          }
        }

LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release();
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1LL);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    unint64_t result = swift_release();
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1LL);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v16 = *v15;
    uint64_t v17 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v17 = *v15;
    BOOL v16 = (-1LL << result) - 1;
  }

  *uint64_t v15 = v17 & v16;
  unint64_t v18 = *(void *)(a2 + 16);
  int64_t v19 = __OFSUB__(v18, 1LL);
  unint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v20;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    if (v26 >= *(void *)(v54 + 16)) {
      goto LABEL_18;
    }
    outlined init with copy of Subscription?(v52 + 40 * v26, (uint64_t)v58);
    *(void *)&v61[0] = v26;
    outlined init with take of Subscription?( (uint64_t)v58,  v51,  &demangling cache variable for type metadata for Subscription?);
    ++v26;
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
}

  os_unfair_lock_unlock(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 120) + 48LL))(a1, *(void *)(v4 + 96));
  os_unfair_lock_lock(v5);
  uint64_t v8 = v2[3];
  if (v8 == 0x8000000000000000LL)
  {
LABEL_13:
    os_unfair_lock_unlock(v5);
    return;
  }

  unint64_t v9 = 0x8000000000000000LL;
  if (v7 == 0x8000000000000000LL)
  {
LABEL_12:
    v2[3] = v9;
    goto LABEL_13;
  }

  if ((v8 | v7) < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v9 = v8 + v7;
  if (__OFADD__(v8, v7))
  {
    unint64_t v9 = 0x8000000000000000LL;
    goto LABEL_12;
  }

  if ((v9 & 0x8000000000000000LL) == 0) {
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
}

  os_unfair_lock_unlock((os_unfair_lock_t)v1[2]);
  unint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 120) + 48LL))(a1, *(void *)(v4 + 96));
  os_unfair_lock_lock((os_unfair_lock_t)v2[2]);
  uint64_t v7 = v2[3];
  if (v7 == 0x8000000000000000LL)
  {
LABEL_13:
    os_unfair_lock_unlock((os_unfair_lock_t)v2[2]);
    return;
  }

  uint64_t v8 = 0x8000000000000000LL;
  if (v6 == 0x8000000000000000LL)
  {
LABEL_12:
    v2[3] = v8;
    goto LABEL_13;
  }

  if ((v7 | v6) < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
    uint64_t v8 = 0x8000000000000000LL;
    goto LABEL_12;
  }

  if ((v8 & 0x8000000000000000LL) == 0) {
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  int64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }

  outlined destroy of ObservableObjectTable.Storage(*(void *)(v7 + 48) + 16 * v4);
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObservableObjectTable.Storage, ObservableObjectPublisher>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0LL;
    Swift::String v30 = v2;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }

      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_41;
              }

              uint64_t v29 = 1LL << *(_BYTE *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v31 = -1LL << v29;
              }
              uint64_t v3 = v30;
              *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v8 = v19;
          }
        }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  __int128 v31[2];
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0LL;
    Swift::String v30 = (void *)(v5 + 64);
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }

      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) != 0)
              {
                uint64_t v29 = 1LL << *(_BYTE *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *Swift::String v30 = -1LL << v29;
                }
                *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }

            int64_t v8 = v19;
          }
        }

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of ObservableObjectTable.Storage(*(void *)(a2 + 48) + 16 * v6, (uint64_t)v21);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v22);
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = outlined destroy of ObservableObjectTable.Storage((uint64_t)v21);
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t result = v11 + 16 * v3;
          if (v3 < (uint64_t)v6 || result >= v11 + 16 * v6 + 16)
          {
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
          }

          else if (v3 != v6)
          {
            uint64_t result = swift_arrayInitWithTakeBackToFront();
          }

          uint64_t v12 = *(void *)(a2 + 56);
          uint64_t v13 = (void *)(v12 + 8 * v3);
          unint64_t v14 = (void *)(v12 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v13 >= v14 + 1))
          {
            void *v13 = *v14;
            int64_t v3 = v6;
          }
        }

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            uint64_t v16 = (void *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1) {
              *uint64_t v16 = *v12;
            }
            uint64_t v17 = *(void *)(a2 + 56);
            uint64_t v18 = v17 + 40 * v3;
            BOOL v19 = (__int128 *)(v17 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              Swift::Int v9 = *v19;
              unint64_t v10 = v19[1];
              *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *((void *)v19 + 4);
              *(_OWORD *)uint64_t v18 = v9;
              *(_OWORD *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    Swift::UInt v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    Swift::UInt v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  unint64_t v23 = *(void *)(a2 + 16);
  unint64_t v24 = __OFSUB__(v23, 1LL);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObservableObjectTable.Storage, ObservableObjectPublisher>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    outlined init with copy of ObservableObjectTable.Storage(*(void *)(v2 + 48) + 16 * v15, (uint64_t)v22);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    outlined init with take of ObservableObjectTable.Storage((uint64_t)v22, *(void *)(v4 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    uint64_t result = (void *)swift_retain();
  }

  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    outlined init with copy of Subscription(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    uint64_t result = (void *)outlined init with take of Subscription(v22, *(void *)(v4 + 56) + v18);
  }

  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    __break(1u);
    goto LABEL_26;
  }

  *(uint64_t *)((char *)v4 + v15) = 0x8000000000000000LL;
LABEL_21:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v4 + v12));
  unint64_t v24 = v29;
  char v25 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v25 + 24))(v16, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

  uint64_t v52 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v53 = 0;
LABEL_37:
  v32(v28, a2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v32)(v40, a2);
  *(void *)Swift::String v39 = v52;
  *(_BYTE *)(v39 + 8) = v53;
  return result;
}

  if (v8 == v11)
  {
    Swift::UInt v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    unint64_t v23 = a1;
    uint64_t v10 = *(unsigned int *)(v7 + 84);
    return v22(v23, v10, v12);
  }

  unint64_t v23 = (v14 + a1) & ~v13;
  if ((_DWORD)v10 == v11)
  {
    Swift::UInt v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    unint64_t v12 = v5;
    return v22(v23, v10, v12);
  }

  char v25 = *(unsigned __int8 *)(v23 + v15);
  if (v25 < 2) {
    return 0LL;
  }
  unint64_t v26 = (v25 + 2147483646) & 0x7FFFFFFF;
  return (v26 + 1);
}

void specialized ObservableObjectPublisher.Inner.request(_:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152LL));
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*(void *)v0 + 160LL);
  if (!*(_BYTE *)(v0 + v2)) {
    *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2) = 1;
  }
  os_unfair_lock_unlock(v1);
}

uint64_t *specialized ObservableObjectPublisher.Inner.init(_:parent:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  swift_weakInit();
  uint64_t v6 = *(void *)(*a3 + 144);
  swift_retain();
  unint64_t v7 = (void *)swift_slowAlloc();
  *unint64_t v7 = 0LL;
  *(uint64_t *)((char *)a3 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = (uint64_t)v7;
  uint64_t v8 = *(void *)(*a3 + 152);
  int64_t v9 = (_DWORD *)swift_slowAlloc();
  *int64_t v9 = 0;
  *(uint64_t *)((char *)a3 + v8) = (uint64_t)v9;
  *((_BYTE *)a3 + *(void *)(*a3 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 112) - 8LL) + 32LL))( (uint64_t)a3 + *(void *)(*a3 + 136),  a1);
  swift_weakAssign();
  return a3;
}

uint64_t *specialized ObservableObjectPublisher.Inner.__allocating_init(_:parent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)swift_allocObject();
  uint64_t v5 = specialized ObservableObjectPublisher.Inner.init(_:parent:)(a1, a2, v4);
  swift_release();
  return v5;
}

unint64_t lazy protocol witness table accessor for type [_EachFieldOptions] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [_EachFieldOptions]);
    unint64_t result = MEMORY[0x186E22960](MEMORY[0x189618470], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A]);
  }

  return result;
}

uint64_t partial apply for closure #1 in ObservableObject<>.objectWillChange.getter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ObservableObject<>.applyFields(_:_:type:)( *(uint64_t **)(v3 + 40),  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24)) & 1;
}

_UNKNOWN **default associated conformance accessor for ObservableObject.ObservableObject.ObjectWillChangePublisher: Publisher()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t ObjC metadata update function for ObservableObjectPublisher()
{
  return type metadata accessor for ObservableObjectPublisher();
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  uint64_t result = type metadata singleton initialization cache for ObservableObjectPublisher;
  if (!type metadata singleton initialization cache for ObservableObjectPublisher) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ObservableObjectPublisher()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for ObservableObjectPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ObservableObjectPublisher.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for ObservableObjectPublisher.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.setter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.modify( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t getEnumTagSinglePayload for ObservableObjectPublisher.Inner.State( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for ObservableObjectPublisher.Inner.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_183B17054 + 4 * byte_183B9FE45[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_183B17088 + 4 * byte_183B9FE40[v4]))();
}

uint64_t sub_183B17088(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183B17090(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183B17098LL);
  }
  return result;
}

uint64_t sub_183B170A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183B170ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_183B170B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183B170B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for ObservableObjectPublisher.Inner.State(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t type metadata accessor for ObservableObjectPublisher.Inner.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ObservableObjectPublisher.Inner.State);
}

void base witness table accessor for Equatable in ObservableObjectPublisher.Inner<A>.State()
{
}

uint64_t base witness table accessor for Equatable in ObservableObjectPublisher.Conduit()
{
  return lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit( &lazy protocol witness table cache variable for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit,  (uint64_t)&protocol conformance descriptor for ObservableObjectPublisher.Conduit);
}

uint64_t lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for ObservableObjectPublisher.Conduit();
    uint64_t result = MEMORY[0x186E22960](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t outlined init with take of ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t outlined destroy of ObservableObjectTable.Storage(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t partial apply for closure #1 in ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t specialized static ObservableObjectTable.collect()()
{
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized Sequence.compactMap<A>(_:)(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      outlined init with copy of ObservableObjectTable.Storage(v3, (uint64_t)v11);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
      char v6 = v5;
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        int v8 = static ObservableObjectTable.contents;
        uint64_t v10 = static ObservableObjectTable.contents;
        static ObservableObjectTable.contents = (_UNKNOWN *)0x8000000000000000LL;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          int v8 = v10;
        }

        outlined destroy of ObservableObjectTable.Storage(v8[6] + 16 * v4);
        specialized _NativeDictionary._delete(at:)(v4, (uint64_t)v8);
        static ObservableObjectTable.contents = v8;
        swift_bridgeObjectRelease();
      }

      swift_endAccess();
      swift_release();
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v11);
      v3 += 16LL;
      --v2;
    }

    while (v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of ObservableObjectTable.Storage?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObservableObjectTable.Storage?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for ObservableObjectTable()
{
  return &type metadata for ObservableObjectTable;
}

uint64_t initializeWithCopy for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for ObservableObjectTable.Storage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ObservableObjectTable.Storage( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 2) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ObservableObjectTable.Storage()
{
  return &type metadata for ObservableObjectTable.Storage;
}

unint64_t lazy protocol witness table accessor for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage;
  if (!lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ObservableObjectTable.Storage,  &type metadata for ObservableObjectTable.Storage);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage);
  }

  return result;
}

uint64_t Publisher.prefix(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.PrefixWhile,  a5);
}

uint64_t Publishers.PrefixWhile.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.PrefixWhile,  a6);
}

uint64_t type metadata accessor for Publishers.PrefixWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.PrefixWhile);
}

uint64_t Publisher.tryPrefix(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryPrefixWhile,  a5);
}

uint64_t Publishers.TryPrefixWhile.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryPrefixWhile,  a6);
}

uint64_t type metadata accessor for Publishers.TryPrefixWhile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TryPrefixWhile);
}

uint64_t Publishers.PrefixWhile.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.PrefixWhile.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.PrefixWhile.Inner()
{
}

uint64_t Publishers.PrefixWhile.Inner.description.getter()
{
  return 0x6857786966657250LL;
}

uint64_t Publishers.PrefixWhile.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v14);
  if (v14 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a2, 0LL, 1LL, AssociatedTypeWitness);
    uint64_t v7 = type metadata accessor for Optional();
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0LL, v7, v8, AssociatedConformanceWitness);
  }

  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t v10 = type metadata accessor for Optional();
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v12 = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0LL, v10, v11, v12);
  }

  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.PrefixWhile<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.TryPrefixWhile.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.PrefixWhile.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void *))
{
  uint64_t v5 = *(void *)(a2 + 24);
  v6[0] = *(void *)(a2 + 16);
  v6[1] = a3;
  __int128 v6[2] = v5;
  void v6[3] = a4;
  a5(0LL, v6);
  JUMPOUT(0x183B17844LL);
}

uint64_t Publishers.TryPrefixWhile.Inner.description.getter()
{
  return 0x6966657250797254LL;
}

uint64_t Publishers.TryPrefixWhile.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v10);
  if (v10 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a2, 0LL, 1LL, AssociatedTypeWitness);
  }

  else
  {
    swift_getAssociatedTypeWitness();
  }

  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0LL, v7, v8, MEMORY[0x18961A3E8]);
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryPrefixWhile<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.TryPrefixWhile.Inner()
{
}

uint64_t *specialized Publishers.PrefixWhile.Inner.init(downstream:filter:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v9 = *(void **)v5;
  uint64_t v10 = *(void *)(*(void *)v5 + 280LL);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v14 = (void *)swift_allocObject();
  __int128 v14[2] = v9[34];
  void v14[3] = v10;
  uint64_t v14[4] = v9[36];
  void v14[5] = v9[37];
  v14[6] = a2;
  v14[7] = a3;
  v16[0] = a5;
  v16[1] = v14;
  return FilterProducer.init(downstream:filter:)((uint64_t)v12, (uint64_t)v16);
}

uint64_t getEnumTagSinglePayload for Publishers.PrefixWhile(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B17C20 + 4 * byte_183BA0198[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.PrefixWhile( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B17D98()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B17E10LL);
}

void sub_183B17DA0(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B17DA8LL);
  }
  JUMPOUT(0x183B17E10LL);
}

void sub_183B17DE8()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B17E10LL);
}

void sub_183B17DF0()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v1) = v2;
  JUMPOUT(0x183B17E10LL);
}

uint64_t sub_183B17DF8(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B17E10LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B17E0CLL);
    }
    JUMPOUT(0x183B17E04LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_183B17E28()
{
  return swift_deallocObject();
}

uint64_t Future.__allocating_init(_:)(void (*a1)(uint64_t (*)(), void *))
{
  uint64_t v2 = swift_allocObject();
  Future.init(_:)(a1);
  return v2;
}

uint64_t Future.init(_:)(void (*a1)(uint64_t (*)(), void *))
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  uint64_t v5 = v3[10];
  uint64_t v6 = v3[11];
  uint64_t v7 = v3[12];
  *(void *)(v1 + outlined destroy of Subscription?(v0 + 24) = ConduitList.init()();
  *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v8;
  uint64_t v9 = v1 + *(void *)(*(void *)v1 + 120LL);
  uint64_t v10 = type metadata accessor for Result();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = (void *)swift_allocObject();
  __int128 v11[2] = v5;
  v11[3] = v6;
  v11[4] = v7;
  v11[5] = partial apply for implicit closure #2 in implicit closure #1 in Future.init(_:);
  v11[6] = v1;
  swift_retain_n();
  a1(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (), v11);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

void Future.promise(_:)(uint64_t a1)
{
  uint64_t v42 = a1;
  uint64_t v40 = *(void *)(*(void *)(*(void *)v1 + 88LL) - 8LL);
  uint64_t v2 = MEMORY[0x1895F8858](a1);
  Swift::String v39 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = *(void *)(*(void *)(v4 + 80) - 8LL);
  MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v7 + 96);
  uint64_t v44 = v9;
  uint64_t v45 = v10;
  uint64_t v43 = v8;
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v41 = (char *)&v36 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  unint64_t v20 = (char *)&v36 - v19;
  os_unfair_lock_t v46 = *(os_unfair_lock_t *)(v1 + 16);
  os_unfair_lock_lock(v46);
  uint64_t v21 = v1 + *(void *)(*(void *)v1 + 120LL);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, v21, v14);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1LL, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  if (v22 == 1)
  {
    Swift::String v37 = v6;
    unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v24 = v42;
    v23(v18, v42, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v18, 0LL, 1LL, v11);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v21, v18, v14);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v25 = *(void *)(v1 + 24);
    char v26 = *(_BYTE *)(v1 + 32);
    outlined copy of ConduitList<A, Never><A>(v25, v26);
    uint64_t v28 = v44;
    uint64_t v27 = v45;
    type metadata accessor for ConduitList(0LL, v44, v45, v43);
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v46);
    uint64_t v29 = v41;
    v23(v41, v24, v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v31 = v39;
      uint64_t v30 = v40;
      uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))(v39, v29, v27);
      MEMORY[0x1895F8858](v32);
      *(&v36 - 2) = (uint64_t)v31;
      ConduitList.forEach(_:)( (uint64_t)partial apply for closure #2 in Future.promise(_:),  (uint64_t)(&v36 - 4),  v25,  v26);
      outlined consume of ConduitList<A, Never><A>(v25, v26);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v27);
    }

    else
    {
      Swift::String v34 = v37;
      uint64_t v33 = v38;
      uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v37, v29, v28);
      MEMORY[0x1895F8858](v35);
      *(&v36 - 2) = (uint64_t)v34;
      ConduitList.forEach(_:)( (uint64_t)partial apply for closure #1 in PublishedSubject.send(_:),  (uint64_t)(&v36 - 4),  v25,  v26);
      outlined consume of ConduitList<A, Never><A>(v25, v26);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v28);
    }
  }

  else
  {
    os_unfair_lock_unlock(v46);
  }

uint64_t sub_183B18364()
{
  return swift_deallocObject();
}

uint64_t Future.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120LL);
  type metadata accessor for Result();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t Future.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t closure #2 in Future.promise(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)a1 + 88LL);
  uint64_t v7 = type metadata accessor for Subscribers.Completion(0LL, v6, *(void *)(*(void *)a1 + 96LL), a4);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0LL, 1LL, v6);
  (*(void (**)(char *))(*(void *)a1 + 112LL))(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void Future.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v19[2] = a1;
  uint64_t v5 = *(void *)(a2 - 8);
  v19[0] = a3;
  v19[1] = v5;
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = v6[10];
  uint64_t v8 = v6[12];
  uint64_t v22 = v6[11];
  uint64_t v23 = v7;
  uint64_t v21 = v8;
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)v19 - v13;
  uint64_t v15 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)v19 - v16;
  os_unfair_lock_t v20 = (os_unfair_lock_t)v3[2];
  os_unfair_lock_lock(v20);
  uint64_t v18 = (char *)v3 + *(void *)(*v3 + 120LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1LL, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    uint64_t v24 = v23;
    uint64_t v25 = v22;
    uint64_t v26 = a2;
    uint64_t v27 = v19[0];
    type metadata accessor for Future.Conduit();
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v9);
  uint64_t v24 = v23;
  uint64_t v25 = v22;
  uint64_t v26 = a2;
  uint64_t v27 = v19[0];
  type metadata accessor for Future.Conduit();
}

void sub_183B18738()
{
  uint64_t v3 = swift_retain();
  Future.Conduit.init(_:_:)(v3, v0);
}

void sub_183B18778(uint64_t a1)
{
  uint64_t v6 = (uint64_t *)type metadata accessor for ConduitList(0LL, v1, v2, *(void *)(v4 - 160));
  ConduitList.insert(_:)(a1, v6);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 - 168));
  Future.Conduit.fulfill(_:)(v3);
}

void sub_183B187D4()
{
}

void type metadata accessor for Future.Conduit()
{
}

void Future.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
}

  ;
}

void Future.disassociate(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  uint64_t v5 = (uint64_t *)type metadata accessor for ConduitList(0LL, v3[10], v3[11], v3[12]);
  ConduitList.remove(_:)(a1, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
}

void Future.Conduit.State.downstream.getter(uint64_t a1)
{
  uint64_t v3 = (char *)sub_183B18964 + 4 * byte_183BA0288[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_183B18964()
{
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0, v1, v3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v0, 0LL, 1LL, v3);
}

uint64_t Future.Conduit.State.hasAnyDemand.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
    return 0LL;
  }

  return v6;
}

uint64_t Future.Conduit.State.fulfill(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v2, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  if (EnumCaseMultiPayload) {
    return v9(v7, a2);
  }
  v9(v2, a2);
  uint64_t v11 = *(void *)(a2 + 32);
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = &v2[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v2, v7, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v13, a1, v12);
  return swift_storeEnumTagMultiPayload();
}

void Future.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)v2;
  *((void *)v2 + 2) = 0LL;
  uint64_t v6 = *(void *)(v5 + 208);
  swift_retain();
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *uint64_t v7 = 0;
  *(void *)&v2[v6] = v7;
  uint64_t v8 = *(void *)(*(void *)v2 + 216LL);
  uint64_t v9 = (void *)swift_slowAlloc();
  *uint64_t v9 = 0LL;
  *(void *)&v2[v8] = v9;
  *((void *)v2 + 2) = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v5 + 176) - 8LL) + 32LL))( &v2[*(void *)(*(void *)v2 + 200LL)],  a2,  *(void *)(v5 + 176));
  type metadata accessor for Future.Conduit.State();
}

uint64_t sub_183B18D40()
{
  return ConduitBase.init()();
}

void Future.Conduit.__ivar_destroyer()
{
}

uint64_t sub_183B18DB4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

void Future.Conduit.deinit()
{
}

uint64_t sub_183B18E50(uint64_t a1)
{
  return v1;
}

void Future.Conduit.__deallocating_deinit()
{
}

uint64_t sub_183B18E88()
{
  return swift_deallocClassInstance();
}

void Future.Conduit.subscribe()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = v1[20];
  uint64_t v3 = v1[21];
  uint64_t v4 = v1[22];
  uint64_t v5 = v1[23];
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Result();
  v10[4] = *(void *)(v6 - 8);
  void v10[5] = v6;
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  void v10[3] = (char *)v10 - v8;
  v10[9] = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v7);
  v10[7] = v5;
  v10[8] = (char *)v10 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v10[6] = v2;
  v10[10] = v2;
  v10[11] = v3;
  v10[12] = v4;
  v10[13] = v5;
  type metadata accessor for Future.Conduit.State();
}

uint64_t sub_183B18F7C(uint64_t a1)
{
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = &v35[-v12];
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = &v35[-v14];
  uint64_t v16 = *(os_unfair_lock_s **)(v3 + *(void *)(v2 + 208));
  os_unfair_lock_lock(v16);
  uint64_t v17 = v3 + *(void *)(*(void *)v3 + 200LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v15, v17, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v27 = *(void *)(v5 - 184);
    *(void *)(v5 - 208) = v4;
    uint64_t v28 = v27;
    uint64_t v29 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    *(void *)(v5 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16;
    uint64_t v30 = &v15[v29];
    (*(void (**)(void, _BYTE *, uint64_t))(*(void *)(v5 - 152) + 32LL))(*(void *)(v5 - 160), v15, v1);
    (*(void (**)(void, _BYTE *, uint64_t))(*(void *)(v5 - 192) + 32LL))(*(void *)(v5 - 200), v30, v28);
    uint64_t v31 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(_BYTE *, void, uint64_t))(*(void *)(v5 - 152) + 16LL))(v13, *(void *)(v5 - 160), v1);
    v13[v31] = 0;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v13, a1);
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 40))(v17, v10, a1);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 - 216));
    uint64_t v32 = *(void *)(v5 - 168);
    uint64_t v33 = *(void *)(v5 - 208);
    *(void *)(v5 - 144) = *(void *)(v5 - 176);
    *(void *)(v5 - 136) = v33;
    *(void *)(v5 - 128) = v1;
    *(void *)(v5 - 120) = v32;
    type metadata accessor for Future.Conduit();
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v19 = *(void *)(v5 - 160);
    uint64_t v20 = *(void *)(v5 - 152);
    uint64_t v21 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v20 + 32);
    *(void *)(v5 - 184) = v10;
    uint64_t v22 = v20;
    v21(v19, v15, v1);
    uint64_t v23 = v16;
    uint64_t v24 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(_BYTE *, void, uint64_t))(v22 + 16))(v13, *(void *)(v5 - 160), v1);
    v13[v24] = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = *(void *)(v5 - 184);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 32))(v25, v13, a1);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v17, v25, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v23);
    uint64_t v26 = *(void *)(v5 - 168);
    *(void *)(v5 - 144) = *(void *)(v5 - 176);
    *(void *)(v5 - 136) = v4;
    *(void *)(v5 - 128) = v1;
    *(void *)(v5 - 120) = v26;
    type metadata accessor for Future.Conduit();
  }

  os_unfair_lock_unlock(v16);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v15, a1);
}

void Future.Conduit.request(_:)(uint64_t a1)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  uint64_t v23 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](a1);
  v20[6] = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v2[22];
  uint64_t v5 = v2[23];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v21 = type metadata accessor for Subscribers.Completion(0LL, v3, AssociatedConformanceWitness, v8);
  v20[9] = *(void *)(v21 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v21);
  v20[8] = (char *)v20 - v10;
  uint64_t v11 = v2[20];
  void v20[4] = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v9);
  void v20[3] = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v14 - 8);
  uint64_t v26 = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v27 = (char *)v20 - v16;
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v29 = v13;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  v20[7] = (char *)v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v24 = (char *)v20 - v19;
  void v20[5] = v11;
  uint64_t v30 = v11;
  uint64_t v31 = v3;
  uint64_t v32 = v6;
  uint64_t v33 = v5;
  uint64_t v22 = v5;
  type metadata accessor for Future.Conduit.State();
}

void sub_183B194F4(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = &v54[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = &v54[-v13];
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = &v54[-v16];
  *(void *)(v6 - 176) = v5;
  uint64_t v18 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v15);
  *(void *)(v6 - 184) = &v54[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (v3 != 0x8000000000000000LL)
  {
    if (v3 < 0)
    {
      __break(1u);
    }

    else if (v3)
    {
      goto LABEL_4;
    }

    __break(1u);
    return;
  }

void Future.Conduit.fulfill(_:)(uint64_t a1)
{
  v18[19] = a1;
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = v2[21];
  void v18[12] = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](a1);
  v18[9] = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v2[22];
  uint64_t v5 = v2[23];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, v3, AssociatedConformanceWitness, v8);
  v18[14] = *(void *)(v9 - 8);
  v18[15] = v9;
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  v18[13] = (char *)v18 - v11;
  uint64_t v12 = v2[20];
  v18[8] = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v10);
  v18[7] = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Result();
  v18[17] = *(void *)(v14 - 8);
  v18[18] = v14;
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  v18[10] = (char *)v18 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  _BYTE v18[16] = (char *)v18 - v17;
  v18[25] = v12;
  v18[26] = v3;
  v18[27] = v6;
  v18[28] = v5;
  v18[11] = v5;
  type metadata accessor for Future.Conduit.State();
}

void sub_183B19B90(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  uint64_t v11 = &v48[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = &v48[-v13];
  *(void *)(v6 - 152) = v3;
  uint64_t v15 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v12);
  *(void *)(v6 - 160) = &v48[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = *(os_unfair_lock_s **)(v4 + *(void *)(v1 + 208));
  os_unfair_lock_lock(v17);
  uint64_t v18 = v4 + *(void *)(*(void *)v4 + 200LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v14, v18, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    *(void *)(v6 - 296) = v11;
    *(void *)(v6 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 72) = v17;
    *(void *)(v6 - 288) = v8;
    *(void *)(v6 - 320) = v5;
    *(void *)(v6 - 280) = v2;
    *(void *)(v6 - 304) = v4;
    uint64_t v19 = *(void *)(v6 - 152);
    char v20 = v14[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v21 = *(void *)(v6 - 160);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(v21, v14, v19);
    uint64_t v23 = *(void *)(v6 - 192);
    uint64_t v22 = *(void *)(v6 - 184);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    uint64_t v26 = *(void *)(v6 - 176);
    uint64_t v25 = *(void *)(v6 - 168);
    *(void *)(v6 - 312) = v24;
    v24(v23, v25, v26);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v26);
    BOOL v28 = EnumCaseMultiPayload == 1;
    uint64_t v29 = v25;
    if (v28 || (v20 & 1) != 0)
    {
      *(void *)(v6 - 184) = v15;
      uint64_t v30 = *(void *)(v6 - 296);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 288) + 40LL))(v18, v30, a1);
      swift_endAccess();
      uint64_t v31 = *(void **)(v6 - 304);
      uint64_t v32 = v31[2];
      v31[2] = 0LL;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 272));
      uint64_t v33 = *(void *)((char *)v31 + *(void *)(*v31 + 216LL));
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v34 = *(void *)(v6 - 240);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 312))(v34, v29, v26);
      int v35 = swift_getEnumCaseMultiPayload();
      uint64_t v37 = *(void *)(v6 - 232);
      uint64_t v36 = *(void *)(v6 - 224);
      uint64_t v38 = *(void *)(v6 - 200);
      uint64_t v39 = *(void *)(v6 - 280);
      if (v35 == 1)
      {
        uint64_t v40 = *(void *)(v6 - 248);
        (*(void (**)(uint64_t, uint64_t, void))(v36 + 32))(v40, v34, *(void *)(v6 - 280));
        uint64_t v41 = *(void *)(v6 - 216);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v41, v40, v39);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v41, 0LL, 1LL, v39);
        (*(void (**)(uint64_t, void, uint64_t))(v37 + 56))(v41, *(void *)(v6 - 152), v37);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 208) + 8LL))(v41, v38);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v40, v39);
      }

      else
      {
        *(void *)(v6 - 168) = v33;
        uint64_t v42 = *(void *)(v6 - 256);
        uint64_t v43 = *(void *)(v6 - 264);
        uint64_t v44 = *(void *)(v6 - 320);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v43, v34, v44);
        uint64_t v45 = *(void *)(v6 - 152);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v43, v45, v37);
        os_unfair_lock_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
        uint64_t v47 = *(void *)(v6 - 216);
        v46(v47, 1LL, 1LL, v39);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 56))(v47, v45, v37);
        (*(void (**)(uint64_t, void))(*(void *)(v6 - 208) + 8LL))(v47, *(void *)(v6 - 200));
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
      }

      os_unfair_recursive_lock_unlock();
      if (v32)
      {
        swift_retain();
        Future.disassociate(_:)((uint64_t)v31);
        swift_release_n();
      }

      (*(void (**)(void, void))(*(void *)(v6 - 184) + 8LL))( *(void *)(v6 - 160),  *(void *)(v6 - 152));
    }

    else
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 272));
      (*(void (**)(uint64_t, void))(v15 + 8))(v21, *(void *)(v6 - 152));
    }
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v14, a1);
    Future.Conduit.State.fulfill(_:)(*(void *)(v6 - 168), a1);
    os_unfair_lock_unlock(v17);
  }

void Future.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 160LL);
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Result();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v7 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))((char *)&v7 - v5, a1, v3);
  swift_storeEnumTagMultiPayload();
  Future.Conduit.fulfill(_:)((uint64_t)v6);
}

uint64_t sub_183B1A058()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t Future.Conduit.finish(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Result();
  v18[1] = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v18 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Subscribers.Completion(0LL, v3, AssociatedConformanceWitness, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v18 - v15, a1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1LL, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v3);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v8, v11, v3);
    swift_storeEnumTagMultiPayload();
    Future.Conduit.fulfill(_:)((uint64_t)v8);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void Future.Conduit.cancel()()
{
}

void sub_183B1A270(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v14[-v8];
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v2 + 208));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v1 + *(void *)(*v1 + 200LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, a1);
  if (EnumCaseMultiPayload == 3)
  {
    os_unfair_lock_unlock(v10);
  }

  else
  {
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, a1);
    swift_endAccess();
    uint64_t v13 = v1[2];
    v1[2] = 0LL;
    os_unfair_lock_unlock(v10);
    if (v13)
    {
      swift_retain();
      Future.disassociate(_:)((uint64_t)v1);
      swift_release_n();
    }
  }

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Future<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

  ;
}

uint64_t type metadata completion function for Future()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for Future(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Future);
}

uint64_t method lookup function for Future()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Future.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

void type metadata completion function for Future.Conduit()
{
}

void type metadata accessor for Future.Conduit.State()
{
}

uint64_t type metadata completion function for Future.Conduit.State()
{
  uint64_t v0 = swift_checkMetadataState();
  uint64_t v1 = v0;
  if (v2 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v0 - 8) + 64LL;
    swift_getAssociatedConformanceWitness();
    uint64_t v1 = type metadata accessor for Result();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v8 = &v6;
      swift_getTupleTypeLayout2();
      uint64_t v9 = &v5;
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return v1;
}

void *initializeBufferWithCopyOfBuffer for Future.Conduit.State(void *__dst, _BYTE *__src, void *a3)
{
  uint64_t v4 = __dst;
  uint64_t v5 = *(void *)(a3[4] - 8LL);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3[2] - 8LL);
  uint64_t v8 = *(void *)(a3[3] - 8LL);
  int v9 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80);
  uint64_t v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v7 + 80));
  uint64_t v11 = v6 + v10;
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v12 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v8 + 64);
  }
  uint64_t v13 = v12 + ((v6 + v10) & ~v10);
  if (v13 + 1 > v6) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = *(void *)(v5 + 64);
  }
  if (v6 + 1 > v14) {
    unint64_t v15 = v6 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  int v16 = *(_DWORD *)(v5 + 80) | v9;
  uint64_t v17 = (*(_BYTE *)(v5 + 80) | v9);
  int v18 = v16 & 0x100000;
  if (v17 <= 7 && v18 == 0 && v15 + 1 <= 0x18)
  {
    unsigned int v22 = __src[v15];
    if (v22 >= 3)
    {
      else {
        uint64_t v23 = 4LL;
      }
      __asm { BR              X15 }
    }

    if (v22 == 2)
    {
      (*(void (**)(void *, _BYTE *))(v5 + 16))(__dst, __src);
      *((_BYTE *)v4 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = __src[v6];
      char v27 = 2;
    }

    else
    {
      if (v22 != 1)
      {
        (*(void (**)(void *, _BYTE *))(v5 + 16))(__dst, __src);
        *((_BYTE *)v4 + v15) = 0;
        return v4;
      }

      uint64_t v24 = ~v10;
      (*(void (**)(void *, _BYTE *))(v5 + 16))(__dst, __src);
      unsigned int v25 = *(unsigned __int8 *)(((unint64_t)&__src[v11] & v24) + v12);
      if (v25 >= 2)
      {
        else {
          uint64_t v26 = 4LL;
        }
        __asm { BR              X12 }
      }

      BOOL v28 = v25 == 1;
      if (v25 == 1) {
        uint64_t v29 = v8;
      }
      else {
        uint64_t v29 = v7;
      }
      (*(void (**)(unint64_t))(v29 + 16))(((unint64_t)v4 + v11) & v24);
      *(_BYTE *)((((unint64_t)v4 + v11) & v24) + v12) = v28;
      char v27 = 1;
    }

    *((_BYTE *)v4 + v15) = v27;
    return v4;
  }

  uint64_t v21 = *(void *)__src;
  *uint64_t v4 = *(void *)__src;
  uint64_t v4 = (void *)(v21 + ((v17 + 16) & ~v17));
  swift_retain();
  return v4;
}

uint64_t destroy for Future.Conduit.State(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a2[4] - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(a2[2] - 8LL);
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80) | *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v4 + v7;
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v9 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v6 + 64);
  }
  uint64_t v10 = v9 + ((v4 + v7) & ~v7);
  if (v10 + 1 > v4) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = *(void *)(v3 + 64);
  }
  if (v4 + 1 > v11) {
    unint64_t v12 = v4 + 1;
  }
  else {
    unint64_t v12 = v11;
  }
  unsigned int v13 = *(unsigned __int8 *)(a1 + v12);
  if (v13 >= 3)
  {
    else {
      uint64_t v14 = 4LL;
    }
    __asm { BR              X15 }
  }

  if (v13 == 1)
  {
    uint64_t v16 = ~v7;
    (*(void (**)(uint64_t))(v3 + 8))(a1);
    unsigned int v17 = *(unsigned __int8 *)(((v8 + a1) & v16) + v9);
    if (v17 >= 2)
    {
      else {
        uint64_t v18 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v17 == 1) {
      unint64_t v15 = *(uint64_t (**)(void))(v6 + 8);
    }
    else {
      unint64_t v15 = *(uint64_t (**)(void))(v5 + 8);
    }
  }

  else
  {
    unint64_t v15 = *(uint64_t (**)(void))(v3 + 8);
  }

  return v15();
}

_BYTE *initializeWithCopy for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, void *a3)
{
  uint64_t v5 = *(void *)(a3[4] - 8LL);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3[2] - 8LL);
  uint64_t v8 = *(void *)(a3[3] - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v6 + v9;
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v11 = *(void *)(v8 + 64);
  }
  uint64_t v12 = v11 + ((v6 + v9) & ~v9);
  if (v12 + 1 > v6) {
    unint64_t v13 = v12 + 1;
  }
  else {
    unint64_t v13 = *(void *)(v5 + 64);
  }
  if (v6 + 1 > v13) {
    unint64_t v14 = v6 + 1;
  }
  else {
    unint64_t v14 = v13;
  }
  unsigned int v15 = __src[v14];
  if (v15 >= 3)
  {
    else {
      uint64_t v16 = 4LL;
    }
    __asm { BR              X14 }
  }

  if (v15 == 2)
  {
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 16))(__dst, __src);
    __dst[v6] = __src[v6];
    char v20 = 2;
LABEL_28:
    __dst[v14] = v20;
    return __dst;
  }

  if (v15 == 1)
  {
    uint64_t v17 = ~v9;
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 16))(__dst, __src);
    unsigned int v18 = *(unsigned __int8 *)(((unint64_t)&__src[v10] & v17) + v11);
    if (v18 >= 2)
    {
      else {
        uint64_t v19 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v21 = v18 == 1;
    if (v18 == 1) {
      uint64_t v22 = v8;
    }
    else {
      uint64_t v22 = v7;
    }
    (*(void (**)(unint64_t))(v22 + 16))((unint64_t)&__dst[v10] & v17);
    *(_BYTE *)(((unint64_t)&__dst[v10] & v17) + v11) = v21;
    char v20 = 1;
    goto LABEL_28;
  }

  (*(void (**)(_BYTE *, _BYTE *))(v5 + 16))(__dst, __src);
  __dst[v14] = 0;
  return __dst;
}

_BYTE *assignWithCopy for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, void *a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = a3[4];
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(void *)(a3[2] - 8LL);
    uint64_t v9 = *(void *)(a3[3] - 8LL);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80) | *(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = v7 + v10;
    if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
      uint64_t v12 = *(void *)(v8 + 64);
    }
    else {
      uint64_t v12 = *(void *)(v9 + 64);
    }
    uint64_t v13 = v12 + ((v7 + v10) & ~v10);
    if (v13 + 1 > v7) {
      unint64_t v14 = v13 + 1;
    }
    else {
      unint64_t v14 = *(void *)(v6 + 64);
    }
    if (v7 + 1 > v14) {
      unint64_t v15 = v7 + 1;
    }
    else {
      unint64_t v15 = v14;
    }
    unsigned int v16 = __dst[v15];
    if (v16 >= 3)
    {
      else {
        uint64_t v17 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v29 = ~v10;
    if (v16 == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(__dst, v5);
      unsigned int v19 = *(unsigned __int8 *)(((unint64_t)&__dst[v11] & v29) + v12);
      if (v19 >= 2)
      {
        else {
          uint64_t v20 = 4LL;
        }
        __asm { BR              X12 }
      }

      if (v19 == 1) {
        unsigned int v18 = *(void (**)(void))(v9 + 8);
      }
      else {
        unsigned int v18 = *(void (**)(void))(v8 + 8);
      }
    }

    else
    {
      unsigned int v18 = *(void (**)(void))(v6 + 8);
    }

    v18();
    unsigned int v21 = __src[v15];
    if (v21 >= 3)
    {
      else {
        uint64_t v22 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v21 == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = __src[v7];
      char v25 = 2;
    }

    else
    {
      if (v21 != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(__dst, __src, v5);
        __dst[v15] = 0;
        return __dst;
      }

      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(__dst, __src, v5);
      unsigned int v23 = *(unsigned __int8 *)(((unint64_t)&__src[v11] & v29) + v12);
      if (v23 >= 2)
      {
        else {
          uint64_t v24 = 4LL;
        }
        __asm { BR              X12 }
      }

      BOOL v26 = v23 == 1;
      if (v23 == 1) {
        uint64_t v27 = v9;
      }
      else {
        uint64_t v27 = v8;
      }
      (*(void (**)(unint64_t))(v27 + 16))((unint64_t)&__dst[v11] & v29);
      *(_BYTE *)(((unint64_t)&__dst[v11] & v29) + v12) = v26;
      char v25 = 1;
    }

    __dst[v15] = v25;
  }

  return __dst;
}

_BYTE *initializeWithTake for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, void *a3)
{
  uint64_t v5 = *(void *)(a3[4] - 8LL);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3[2] - 8LL);
  uint64_t v8 = *(void *)(a3[3] - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v6 + v9;
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v11 = *(void *)(v8 + 64);
  }
  uint64_t v12 = v11 + ((v6 + v9) & ~v9);
  if (v12 + 1 > v6) {
    unint64_t v13 = v12 + 1;
  }
  else {
    unint64_t v13 = *(void *)(v5 + 64);
  }
  if (v6 + 1 > v13) {
    unint64_t v14 = v6 + 1;
  }
  else {
    unint64_t v14 = v13;
  }
  unsigned int v15 = __src[v14];
  if (v15 >= 3)
  {
    else {
      uint64_t v16 = 4LL;
    }
    __asm { BR              X14 }
  }

  if (v15 == 2)
  {
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 32))(__dst, __src);
    __dst[v6] = __src[v6];
    char v20 = 2;
LABEL_28:
    __dst[v14] = v20;
    return __dst;
  }

  if (v15 == 1)
  {
    uint64_t v17 = ~v9;
    (*(void (**)(_BYTE *, _BYTE *))(v5 + 32))(__dst, __src);
    unsigned int v18 = *(unsigned __int8 *)(((unint64_t)&__src[v10] & v17) + v11);
    if (v18 >= 2)
    {
      else {
        uint64_t v19 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v21 = v18 == 1;
    if (v18 == 1) {
      uint64_t v22 = v8;
    }
    else {
      uint64_t v22 = v7;
    }
    (*(void (**)(unint64_t))(v22 + 32))((unint64_t)&__dst[v10] & v17);
    *(_BYTE *)(((unint64_t)&__dst[v10] & v17) + v11) = v21;
    char v20 = 1;
    goto LABEL_28;
  }

  (*(void (**)(_BYTE *, _BYTE *))(v5 + 32))(__dst, __src);
  __dst[v14] = 0;
  return __dst;
}

_BYTE *assignWithTake for Future.Conduit.State(_BYTE *__dst, _BYTE *__src, void *a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = a3[4];
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(void *)(a3[2] - 8LL);
    uint64_t v9 = *(void *)(a3[3] - 8LL);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80) | *(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = v7 + v10;
    if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
      uint64_t v12 = *(void *)(v8 + 64);
    }
    else {
      uint64_t v12 = *(void *)(v9 + 64);
    }
    uint64_t v13 = v12 + ((v7 + v10) & ~v10);
    if (v13 + 1 > v7) {
      unint64_t v14 = v13 + 1;
    }
    else {
      unint64_t v14 = *(void *)(v6 + 64);
    }
    if (v7 + 1 > v14) {
      unint64_t v15 = v7 + 1;
    }
    else {
      unint64_t v15 = v14;
    }
    unsigned int v16 = __dst[v15];
    if (v16 >= 3)
    {
      else {
        uint64_t v17 = 4LL;
      }
      __asm { BR              X13 }
    }

    uint64_t v29 = ~v10;
    if (v16 == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(__dst, v5);
      unsigned int v19 = *(unsigned __int8 *)(((unint64_t)&__dst[v11] & v29) + v12);
      if (v19 >= 2)
      {
        else {
          uint64_t v20 = 4LL;
        }
        __asm { BR              X12 }
      }

      if (v19 == 1) {
        unsigned int v18 = *(void (**)(void))(v9 + 8);
      }
      else {
        unsigned int v18 = *(void (**)(void))(v8 + 8);
      }
    }

    else
    {
      unsigned int v18 = *(void (**)(void))(v6 + 8);
    }

    v18();
    unsigned int v21 = __src[v15];
    if (v21 >= 3)
    {
      else {
        uint64_t v22 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v21 == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = __src[v7];
      char v25 = 2;
    }

    else
    {
      if (v21 != 1)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(__dst, __src, v5);
        __dst[v15] = 0;
        return __dst;
      }

      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(__dst, __src, v5);
      unsigned int v23 = *(unsigned __int8 *)(((unint64_t)&__src[v11] & v29) + v12);
      if (v23 >= 2)
      {
        else {
          uint64_t v24 = 4LL;
        }
        __asm { BR              X12 }
      }

      BOOL v26 = v23 == 1;
      if (v23 == 1) {
        uint64_t v27 = v9;
      }
      else {
        uint64_t v27 = v8;
      }
      (*(void (**)(unint64_t))(v27 + 32))((unint64_t)&__dst[v11] & v29);
      *(_BYTE *)(((unint64_t)&__dst[v11] & v29) + v12) = v26;
      char v25 = 1;
    }

    __dst[v15] = v25;
  }

  return __dst;
}

uint64_t getEnumTagSinglePayload for Future.Conduit.State(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[4] - 8LL) + 64LL);
  uint64_t v4 = *(void *)(a3[2] - 8LL);
  uint64_t v5 = *(void *)(a3[3] - 8LL);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80) | *(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (v3 + v6) & ~v6;
  unint64_t v8 = *(void *)(v4 + 64);
  unint64_t v9 = *(void *)(v5 + 64);
  if (v9 > v8) {
    unint64_t v8 = v9;
  }
  unint64_t v10 = v8 + v7;
  if (v10 + 1 > v3) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(a3[4] - 8LL) + 64LL);
  }
  if (v3 + 1 > v11) {
    unint64_t v11 = v3 + 1;
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_26;
  }
  unint64_t v12 = v11 + 1;
  char v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    unsigned int v16 = ((a2 + ~(-1 << v13) - 252) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_19;
    }

    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_26;
      }
      goto LABEL_19;
    }

    if (v16 < 2)
    {
LABEL_26:
      unsigned int v18 = *(unsigned __int8 *)(a1 + v11);
      if (v18 >= 4) {
        return (v18 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_26;
  }
LABEL_19:
  int v17 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return (v17 + 253);
  }
  return ((uint64_t (*)(void))((char *)&loc_183B1B790 + 4 * byte_183BA02DC[(v12 - 1)]))();
}

void storeEnumTagSinglePayload for Future.Conduit.State( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[4] - 8LL) + 64LL);
  uint64_t v6 = *(void *)(a4[2] - 8LL);
  uint64_t v7 = *(void *)(a4[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (v5 + v8) & ~v8;
  unint64_t v10 = *(void *)(v6 + 64);
  unint64_t v11 = *(void *)(v7 + 64);
  if (v11 > v10) {
    unint64_t v10 = v11;
  }
  unint64_t v12 = v10 + v9;
  if (v12 + 1 > v5) {
    unint64_t v13 = v12 + 1;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(a4[4] - 8LL) + 64LL);
  }
  if (v5 + 1 > v13) {
    unint64_t v14 = v5 + 1;
  }
  else {
    unint64_t v14 = v13;
  }
  size_t v15 = v14 + 1;
  if (a3 < 0xFD)
  {
    unsigned int v16 = 0u;
  }

  else if (v15 <= 3)
  {
    unsigned int v18 = ((a3 + ~(-1 << (8 * v15)) - 252) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      unsigned int v16 = 4u;
    }

    else if (v18 >= 0x100)
    {
      unsigned int v16 = 2;
    }

    else
    {
      unsigned int v16 = v18 > 1;
    }
  }

  else
  {
    unsigned int v16 = 1u;
  }

  if (a2 <= 0xFC) {
    __asm { BR              X11 }
  }

  unsigned int v17 = a2 - 253;
  if (v15 < 4)
  {
    if ((_DWORD)v14 != -1)
    {
      int v19 = v17 & ~(-1 << (8 * v15));
      bzero(a1, v15);
      if ((_DWORD)v15 == 3)
      {
        *a1 = v19;
        *((_BYTE *)a1 + 2) = BYTE2(v19);
      }

      else if ((_DWORD)v15 == 2)
      {
        *a1 = v19;
      }

      else
      {
        *(_BYTE *)a1 = v19;
      }
    }
  }

  else
  {
    bzero(a1, v14 + 1);
    *(_DWORD *)a1 = v17;
  }

  __asm { BR              X10 }

uint64_t getEnumTag for Future.Conduit.State(uint64_t a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[4] - 8LL) + 64LL);
  uint64_t v3 = *(void *)(a2[2] - 8LL);
  uint64_t v4 = *(void *)(a2[3] - 8LL);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80) | *(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (v2 + v5) & ~v5;
  unint64_t v7 = *(void *)(v3 + 64);
  unint64_t v8 = *(void *)(v4 + 64);
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  unint64_t v9 = v7 + v6;
  if (v9 + 1 > v2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(a2[4] - 8LL) + 64LL);
  }
  if (v2 + 1 > v10) {
    unint64_t v10 = v2 + 1;
  }
  else {
    uint64_t v11 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B1BA4C + 4 * byte_183BA02EA[v11]))();
}

void destructiveInjectEnumTag for Future.Conduit.State(_BYTE *a1, unsigned int a2, void *a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3[4] - 8LL) + 64LL);
  uint64_t v5 = *(void *)(a3[2] - 8LL);
  uint64_t v6 = *(void *)(a3[3] - 8LL);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80) | *(unsigned __int8 *)(v5 + 80);
  unint64_t v8 = (v4 + v7) & ~v7;
  unint64_t v9 = *(void *)(v5 + 64);
  unint64_t v10 = *(void *)(v6 + 64);
  if (v10 > v9) {
    unint64_t v9 = v10;
  }
  unint64_t v11 = v9 + v8;
  if (v11 + 1 > v4) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(a3[4] - 8LL) + 64LL);
  }
  if (v4 + 1 > v12) {
    size_t v13 = v4 + 1;
  }
  else {
    size_t v13 = v12;
  }
  if (a2 > 2)
  {
    unsigned int v14 = a2 - 3;
    if (v13 < 4)
    {
      unsigned int v15 = v14 >> (8 * v13);
      int v16 = v14 & ~(-1 << (8 * v13));
      a1[v13] = v15 + 3;
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }

      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v16;
      }

      else
      {
        *a1 = v16;
      }
    }

    else
    {
      a1[v13] = 3;
      bzero(a1, v13);
      *(_DWORD *)a1 = v14;
    }
  }

  else
  {
    a1[v13] = a2;
  }

void Future.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  v10[8] = a1;
  unint64_t v2 = (void *)*v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  v10[7] = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  v10[6] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v2[21];
  uint64_t v11 = v2[20];
  uint64_t v9 = v2[22];
  uint64_t v8 = v2[23];
  uint64_t v12 = v11;
  uint64_t v13 = v7;
  uint64_t v14 = v9;
  uint64_t v15 = v8;
  void v10[5] = v8;
  type metadata accessor for Future.Conduit.State();
}

void sub_183B1BC60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(a1 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  *(void *)(v13 - 192) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  int v19 = (char *)&a9 - v18;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v9 + *(void *)(v10 + 208)));
  *(void *)(v13 - 120) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x746E65726170LL;
  *(void *)(v20 + 40) = 0xE600000000000000LL;
  uint64_t v21 = v9[2];
  *(void *)(v13 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
  *(void *)(v13 - 200) = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Future(255LL, *(void *)(v13 - 152), v11, AssociatedConformanceWitness);
  uint64_t v23 = type metadata accessor for Optional();
  *(void *)(v13 - 208) = v23;
  *(void *)(v20 + outlined destroy of SubscriptionStatus(v0 + 48) = v21;
  *(void *)(v20 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v23;
  *(void *)(v20 + 80) = 0x657274736E776F64LL;
  *(void *)(v20 + 88) = 0xEA00000000006D61LL;
  uint64_t v24 = (char *)v9 + *(void *)(*v9 + 200LL);
  swift_beginAccess();
  char v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v25(v19, v24, a1);
  *(void *)(v20 + 120) = type metadata accessor for Optional();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v20 + 96));
  swift_retain();
  swift_retain();
  Future.Conduit.State.downstream.getter(a1);
  BOOL v26 = *(void (**)(char *, uint64_t))(v15 + 8);
  v26(v19, a1);
  strcpy((char *)(v20 + 128), "hasAnyDemand");
  *(_BYTE *)(v20 + 141) = 0;
  *(_WORD *)(v20 + 142) = -5120;
  uint64_t v27 = *(char **)(v13 - 192);
  v25(v27, v24, a1);
  LOBYTE(v19) = Future.Conduit.State.hasAnyDemand.getter(a1);
  v26(v27, a1);
  uint64_t v28 = MEMORY[0x1896184C8];
  *(_BYTE *)(v20 + 144) = v19 & 1;
  *(void *)(v20 + 168) = v28;
  *(void *)(v20 + 176) = 0x7463656A627573LL;
  uint64_t v29 = v9[2];
  *(void *)(v20 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(v13 - 208);
  *(void *)(v20 + 184) = 0xE700000000000000LL;
  *(void *)(v20 + 192) = v29;
  uint64_t v30 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))( *(void *)(v13 - 176),  1LL,  1LL,  v30);
  uint64_t v31 = *(void *)(v13 - 200);
  *(void *)(v13 - 112) = *(void *)(v13 - 152);
  *(void *)(v13 - 104) = v31;
  uint64_t v32 = *(void *)(v13 - 184);
  *(void *)(v13 - 96) = *(void *)(v13 - 216);
  *(void *)(v13 - 88) = v32;
  type metadata accessor for Future.Conduit();
}

void sub_183B1BEC4()
{
}

void Future.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x657275747546LL;
  a1[1] = 0xE600000000000000LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Future<A, B>.Conduit<A1>()
{
  return 0x657275747546LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Future<A, B>.Conduit<A1>( uint64_t a1@<X8>)
{
}

  ;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Future<A, B>.Conduit<A1>( void *a1@<X8>)
{
}

uint64_t partial apply for closure #2 in Future.promise(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #2 in Future.promise(_:)(a1, *(void *)(v4 + 16), a3, a4);
}

uint64_t Empty.init(completeImmediately:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Empty.init(completeImmediately:outputType:failureType:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Empty.completeImmediately.getter()
{
  return *v0;
}

uint64_t Empty.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Subscribers.Completion(0LL, v7, *(void *)(a2 + 32), a4);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v14 - v10;
  int v12 = *v4;
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))( &static Subscriptions._EmptySubscription.singleton,  a3,  a4);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v11, 1LL, 1LL, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 56))(v11, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return result;
}

BOOL static Empty.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Empty<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Empty.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t getEnumTagSinglePayload for Empty(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for Empty(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183B1C1F8 + 4 * byte_183BA0455[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183B1C22C + 4 * byte_183BA0450[v4]))();
}

uint64_t sub_183B1C22C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183B1C234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183B1C23CLL);
  }
  return result;
}

uint64_t sub_183B1C248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183B1C250LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183B1C254(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183B1C25C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for Empty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Empty);
}

uint64_t Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858]();
  BOOL v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, a1);
}

uint64_t Publishers.SetFailureType.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t Publishers.SetFailureType.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.SetFailureType.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B1C3A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v11, *(void *)(v12 - 152), v10);
  Publishers.SetFailureType.Inner.init(downstream:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_183B1C410()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.SetFailureType<A, B>.Inner<A1, B1>, v4);
  Publisher.subscribe<A>(_:)(v1, v2, v4, v3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v4);
}

void type metadata accessor for Publishers.SetFailureType.Inner()
{
}

void Publishers.SetFailureType.Inner.init(downstream:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

void sub_183B1C4E8(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 76);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v3 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v4 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v3);
    *(void *)(v1 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v2) = v4;
  }

void Publishers.SetFailureType.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "SetFailureType");
  *(_BYTE *)(a1 + 15) = -18;
}

uint64_t Publishers.SetFailureType.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 40LL))(a1, *(void *)(a2 + 32));
}

uint64_t Publishers.SetFailureType.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 48LL))(a1, *(void *)(a2 + 32));
}

uint64_t Publishers.SetFailureType.Inner.receive(completion:)(char a1, void *a2)
{
  uint64_t v3 = a2[8];
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[5];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion(0LL, v5, AssociatedConformanceWitness, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v13 - v10;
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v11, 1LL, 1LL, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 56))(v11, v4, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<Never>);
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }

  return result;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>( char *a1, void *a2)
{
  return Publishers.SetFailureType.Inner.receive(completion:)(*a1, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>()
{
  return 0x756C696146746553LL;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 76));
  return result;
}

uint64_t Publishers.SetFailureType.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858]();
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SetFailureType<A, B>( uint64_t a1)
{
}

uint64_t static Publishers.SetFailureType<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.SetFailureType<A, B>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.SetFailureType<A, B>()
{
  return static Publishers.SetFailureType<>.== infix(_:_:)();
}

uint64_t type metadata completion function for Publishers.SetFailureType()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.SetFailureType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B1C8EC + 4 * byte_183BA04D8[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.SetFailureType( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void type metadata accessor for Publishers.SetFailureType()
{
}

uint64_t type metadata completion function for Publishers.SetFailureType.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SetFailureType.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
  }

  return v4;
}

uint64_t destroy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 32) - 8LL) + 8LL))();
}

uint64_t initializeWithCopy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithCopy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.SetFailureType.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0LL;
  }

  if (((((*(void *)(v4 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = a2 - v5 + 1;
  }
  if (v6 >= 0x10000) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v6 < 0x100) {
    unsigned int v7 = 1;
  }
  if (v6 >= 2) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B1CE10 + 4 * byte_183BA04E6[v8]))();
}

void storeEnumTagSinglePayload for Publishers.SetFailureType.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }

  else
  {
    unsigned int v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_14:
    }
      __asm { BR              X11 }
  }

  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183B1CF50()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B1CF58(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B1CF60LL);
  }
}

void sub_183B1CF7C()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B1CF84()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

uint64_t sub_183B1CF8C(uint64_t a1, int a2)
{
  *(_WORD *)(v4 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = 0;
  if (!a2) {
    JUMPOUT(0x183B1CF94LL);
  }
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t Optional.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v5 + 16))(v4);
  uint64_t v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a2, v4, v6);
}

uint64_t Optional.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = a3;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  unsigned int v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    }
    uint64_t v22 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(a6, v22, 1LL);
}

uint64_t Optional.Publisher.output.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t Optional.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v28 = a1;
  uint64_t v29 = a4;
  uint64_t v27 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = *(void *)(v10 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v13);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v27 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, v10) == 1)
  {
    uint64_t v22 = v29;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (one-time initialization token for singleton != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 40))( &static Subscriptions._EmptySubscription.singleton,  a3,  v22);
    LOBYTE(v30[0]) = 1;
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 56))(v30, a3, v22);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, v10);
    uint64_t v24 = v29;
    uint64_t v25 = type metadata accessor for Optional.Publisher.Inner(0LL, v10, a3, v29);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v8, v28, a3);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v10);
    swift_allocObject();
    uint64_t v26 = Just.Inner.init(downstream:value:)((uint64_t)v8, (uint64_t)v19);
    v30[3] = v25;
    void v30[4] = &protocol witness table for A?.Publisher.Inner<A1>;
    v30[0] = v26;
    (*(void (**)(void *, uint64_t, uint64_t))(v24 + 40))(v30, a3, v24);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }

uint64_t type metadata accessor for Optional.Publisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Optional.Publisher.Inner);
}

uint64_t Optional.Publisher.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = v0;
  uint64_t v9 = *(void *)(v1 + 80);
  getContiguousArrayStorageType<A>(for:)(v9, v9);
  uint64_t v10 = *(void *)(v9 - 8);
  swift_allocObject();
  swift_retain();
  uint64_t v11 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, (uint64_t)v0 + *(void *)(*v0 + 112), v9);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v16 = v11;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v8, 1LL, 1LL, v13);
  uint64_t v14 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v14);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v2);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Optional.Publisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x6C616E6F6974704FLL;
  a1[1] = 0xE800000000000000LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance A?.Publisher.Inner<A1>()
{
  return 0x6C616E6F6974704FLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance A?.Publisher.Inner<A1>()
{
  return Optional.Publisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance A?.Publisher.Inner<A1>( void *a1@<X8>)
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance A?.Publisher( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional.Publisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Optional.Publisher<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v32 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v9);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v31 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21((char *)&v31 - v19, v35, v7);
  v21(v18, v36, v7);
  uint64_t v35 = TupleTypeMetadata2;
  uint64_t v22 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v21(v11, (uint64_t)v20, v7);
  v21(v22, (uint64_t)v18, v7);
  uint64_t v36 = v5;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v23(v11, 1LL, a3) != 1)
  {
    v21(v15, (uint64_t)v11, v7);
    if (v23(v22, 1LL, a3) != 1)
    {
      uint64_t v27 = v32;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v32, v22, a3);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v36 + 8);
      v28(v27, a3);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
      v29(v18, v7);
      v29(v20, v7);
      v28(v15, a3);
      v29(v11, v7);
      return v25 & 1;
    }

    uint64_t v26 = *(void (**)(char *, uint64_t))(v12 + 8);
    v26(v18, v7);
    v26(v20, v7);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, a3);
    goto LABEL_6;
  }

  uint64_t v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v18, v7);
  v24(v20, v7);
  if (v23(v22, 1LL, a3) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v35);
    char v25 = 0;
    return v25 & 1;
  }

  v24(v11, v7);
  char v25 = 1;
  return v25 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> A?.Publisher( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Optional.Publisher<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t Optional.Publisher<A>.contains(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = &v15[-v11];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(&v15[-v11], v4, v9);
  uint64_t v16 = v8;
  uint64_t v17 = a3;
  uint64_t v18 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher<A>.contains(_:),  (uint64_t)v15,  MEMORY[0x18961A520],  MEMORY[0x1896184C8],  v13,  (uint64_t)&v19);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  *a4 = v19;
  return result;
}

uint64_t partial apply for closure #1 in Optional.Publisher<A>.contains(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t Optional.Publisher<A>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Optional.Publisher.allSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  return Optional.Publisher.allSatisfy(_:)( a1,  a2,  a3,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.allSatisfy(_:),  a4);
}

uint64_t partial apply for closure #1 in Optional.Publisher.allSatisfy(_:)@<X0>(_BYTE *a1@<X8>)
{
  return partial apply for closure #1 in Optional.Publisher.allSatisfy(_:)(a1);
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  *a1 = result & 1;
  return result;
}

uint64_t Optional.Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v14 = static Array._allocateUninitialized(_:)();
  }

  else
  {
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v15(v13, v10, v5);
    getContiguousArrayStorageType<A>(for:)(v5, v5);
    swift_allocObject();
    uint64_t v16 = static Array._adoptStorage(_:count:)();
    v15(v17, v13, v5);
    uint64_t v14 = v16;
    _finalizeUninitializedArray<A>(_:)();
  }

  uint64_t v21 = v14;
  type metadata accessor for Array();
  uint64_t v18 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 32LL))(a2, &v21, v18);
}

uint64_t Optional.Publisher.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional.Publisher.compactMap<A>(_:)( a1,  a2,  a3,  a4,  (uint64_t)partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:),  (void (*)(uint64_t, _BYTE *, uint64_t, void, uint64_t, void))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF,  a5);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>( void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v10);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))( v29,  1LL,  1LL,  a4);
  }
  uint64_t v25 = a3;
  uint64_t v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  }
  return result;
}

uint64_t Optional.Publisher.contains(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  return Optional.Publisher.allSatisfy(_:)( a1,  a2,  a3,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.allSatisfy(_:),  a4);
}

uint64_t Optional.Publisher.allSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = &v17[-v13];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(&v17[-v13], v5, v11);
  uint64_t v18 = v10;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( a4,  (uint64_t)v17,  MEMORY[0x18961A520],  MEMORY[0x1896184C8],  v15,  (uint64_t)&v21);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  *a5 = v21;
  return result;
}

uint64_t Optional.Publisher.count()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v12[-v7];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v12[-v7], v2, v5);
  uint64_t v13 = v4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.count(),  (uint64_t)v12,  MEMORY[0x18961A520],  MEMORY[0x189618740],  v9,  (uint64_t)&v14);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  char v11 = v15;
  *(void *)a2 = v14;
  *(_BYTE *)(a2 + 8) = v11;
  return result;
}

uint64_t Optional.Publisher.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1895F8858](v7);
  char v11 = (char *)&v12 - v10;
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    if (a1) {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v11, 1LL, 1LL, v6);
    }
    else {
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3, v7);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v11, v7);
  }

  return result;
}

uint64_t Optional.Publisher.drop(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)( a1,  a2,  a3,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.drop(while:),  a4);
}

uint64_t Optional.Publisher.first(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)( a1,  a2,  a3,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:),  a4);
}

uint64_t Optional.Publisher.drop(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  char v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = &v21[-v16];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v15, v5, v11);
  uint64_t v22 = v10;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( a4,  (uint64_t)v21,  MEMORY[0x18961A520],  v10,  v18,  (uint64_t)v17);
  uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v19(v15, v11);
  Optional.publisher.getter(v11, a5);
  return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v17, v11);
}

uint64_t Optional.Publisher.last()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Optional.Publisher.last(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)( a1,  a2,  a3,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:),  a4);
}

uint64_t Optional.Publisher.filter(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)( a1,  a2,  a3,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:),  a4);
}

uint64_t Optional.Publisher.ignoreOutput()@<X0>(_BYTE *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1LL, a1);
}

uint64_t Optional.Publisher.map<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional.Publisher.compactMap<A>(_:)( a1,  a2,  a3,  a4,  (uint64_t)partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:),  (void (*)(uint64_t, _BYTE *, uint64_t, void, uint64_t, void))_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF,  a5);
}

uint64_t Optional.Publisher.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t, _BYTE *, uint64_t, void, uint64_t, void)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v8 = v7;
  uint64_t v21 = a2;
  uint64_t v24 = a7;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  char v15 = (char *)&v21 - v14;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v8, v12);
  uint64_t v26 = v11;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = v21;
  v23(v22, v25, v12, MEMORY[0x18961A520], a4, MEMORY[0x18961A528]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  Optional.publisher.getter(v16, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t Optional.Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional.Publisher.output(at:)( a1,  a2,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.output(at:),  a3);
}

uint64_t Optional.Publisher.output<A>(in:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  v22[0] = a4;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  char v15 = (char *)v22 - v14;
  __int128 v23 = xmmword_183B9EED0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v17 = v24;
  if (v24 < 0 || (uint64_t v18 = v25, v25 > 0x7FFFFFFFFFFFFFFDLL))
  {
    __break(1u);
  }

  else if (v24 == v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v15, 1LL, 1LL, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22[0], v15, v9);
  }

  else
  {
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5, v9);
    MEMORY[0x1895F8858](v19);
    v22[-6] = v8;
    v22[-5] = a2;
    v22[-4] = a3;
    v22[-3] = v17;
    v22[-2] = v18;
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.output<A>(in:),  (uint64_t)&v22[-8],  MEMORY[0x18961A520],  v8,  v20,  (uint64_t)v15);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, v9);
    Optional.publisher.getter(v9, v22[0]);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, v9);
  }

  return result;
}

uint64_t Optional.Publisher.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional.Publisher.output(at:)( a1,  a2,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.prefix(_:),  a3);
}

uint64_t Optional.Publisher.output(at:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t result = MEMORY[0x1895F8858](v11);
  uint64_t v16 = &v20[-v15];
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v13, v4, v9);
    MEMORY[0x1895F8858](v17);
    *(void *)&v20[-16] = v8;
    *(void *)&v20[-8] = a1;
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( a3,  (uint64_t)&v20[-32],  MEMORY[0x18961A520],  v8,  v18,  (uint64_t)v16);
    uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v19(v13, v9);
    Optional.publisher.getter(v9, a4);
    return ((uint64_t (*)(_BYTE *, uint64_t))v19)(v16, v9);
  }

  return result;
}

uint64_t Optional.Publisher.prefix(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)( a1,  a2,  a3,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:),  a4);
}

uint64_t Optional.Publisher.reduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Optional.Publisher.reduce<A>(_:_:)( a1,  a2,  a3,  a4,  a5,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:),  a6);
}

uint64_t Optional.Publisher.removeDuplicates(by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Optional.Publisher.replaceError(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t Optional.Publisher.replaceEmpty(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v10);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1LL, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v7);
  }

  else
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v19(v18, v12, v7);
    v19(v16, v18, v7);
  }

  return Just.init(_:)((uint64_t)v16, v7, a3);
}

uint64_t Optional.Publisher.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t Optional.Publisher.scan<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Optional.Publisher.reduce<A>(_:_:)( a1,  a2,  a3,  a4,  a5,  (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:),  a6);
}

uint64_t Optional.Publisher.reduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *, char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a6;
  uint64_t v8 = v7;
  uint64_t v22 = a1;
  uint64_t v25 = a7;
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v8, v12);
  uint64_t v27 = v11;
  uint64_t v28 = a5;
  uint64_t v29 = a2;
  uint64_t v30 = v23;
  uint64_t v31 = v22;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( v24,  (uint64_t)v26,  MEMORY[0x18961A520],  a5,  v20,  (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  Optional.publisher.getter(v16, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:)()
{
  return partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:)();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 32))();
}

void partial apply for closure #1 in Optional.Publisher.count()(void *a1@<X8>)
{
  *a1 = 1LL;
}

uint64_t partial apply for closure #1 in Optional.Publisher.drop(while:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  char v6 = (*(uint64_t (**)(void))(v2 + 24))();
  uint64_t v7 = *(void *)(v5 - 8);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v5);
    uint64_t v8 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1LL, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.first(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in Optional.Publisher.first(where:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v5 = *(void *)(v2 + 16);
  char v6 = (*(uint64_t (**)(void))(v2 + 24))();
  uint64_t v7 = *(void *)(v5 - 8);
  if ((v6 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v5);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1LL, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.output(at:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if (v4)
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v5);
    uint64_t v7 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1LL, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.output<A>(in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v4 - 8);
  if (v5)
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v4);
    uint64_t v7 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1LL, v4);
}

uint64_t partial apply for closure #1 in Optional.Publisher.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if (v4 < 1)
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v5);
    uint64_t v7 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1LL, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:)(uint64_t a1)
{
  return partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:)(a1);
}

{
  uint64_t v1;
  return (*(uint64_t (**)(void, uint64_t))(v1 + 32))(*(void *)(v1 + 48), a1);
}

uint64_t type metadata completion function for Optional.Publisher()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Optional.Publisher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1LL;
  }
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16LL) & ~(unint64_t)v7));
    swift_retain();
  }

  else if ((*(unsigned int (**)(uint64_t *, uint64_t, void))(v6 + 48))(a2, 1LL, *(void *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
  }

  return a1;
}

uint64_t destroy for Optional.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for Optional.Publisher(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1LL, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1LL;
    }
    memcpy(a1, a2, v7);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
  }

  return a1;
}

void *assignWithCopy for Optional.Publisher(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1LL, v5);
  int v9 = v7(a2, 1LL, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
      return a1;
    }
  }

  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }

  if (*(_DWORD *)(v6 + 84)) {
    size_t v10 = *(void *)(v6 + 64);
  }
  else {
    size_t v10 = *(void *)(v6 + 64) + 1LL;
  }
  memcpy(a1, a2, v10);
  return a1;
}

void *initializeWithTake for Optional.Publisher(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1LL, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1LL;
    }
    memcpy(a1, a2, v7);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
  }

  return a1;
}

void *assignWithTake for Optional.Publisher(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1LL, v5);
  int v9 = v7(a2, 1LL, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 1LL, v5);
      return a1;
    }
  }

  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }

  if (*(_DWORD *)(v6 + 84)) {
    size_t v10 = *(void *)(v6 + 64);
  }
  else {
    size_t v10 = *(void *)(v6 + 64) + 1LL;
  }
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Optional.Publisher(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0LL;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)(a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_24;
        }
LABEL_8:
        int v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7)) {
          goto LABEL_24;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if ((_DWORD)v7)
        {
          else {
            int v13 = 4;
          }
          __asm { BR              X12 }
        }

        return v6 + v12 + 1;
      }

      int v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7)) {
        goto LABEL_15;
      }
    }
  }

void storeEnumTagSinglePayload for Optional.Publisher( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6 = 0u;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }

  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1LL;
  }

  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      unsigned int v6 = 1u;
      if (v9 < a2) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }

    unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      unsigned int v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        unsigned int v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            int v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }

            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }

            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }

        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }

        __asm { BR              X10 }
      }

void sub_183B1F53C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B1F544()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

uint64_t type metadata accessor for Optional.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Optional.Publisher);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>( uint64_t (*a1)(void)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result & 1;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>( uint64_t (*a1)(void)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t Publisher.contains(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ContainsWhere,  a5);
}

uint64_t Publishers.ContainsWhere.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ContainsWhere,  a6);
}

uint64_t type metadata accessor for Publishers.ContainsWhere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.ContainsWhere);
}

uint64_t Publisher.tryContains(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryContainsWhere,  a5);
}

uint64_t Publishers.TryContainsWhere.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryContainsWhere,  a6);
}

uint64_t type metadata accessor for Publishers.TryContainsWhere( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TryContainsWhere);
}

uint64_t Publishers.ContainsWhere.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.ContainsWhere.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.ContainsWhere.Inner()
{
}

uint64_t Publishers.ContainsWhere.Inner.description.getter()
{
  return 0x736E6961746E6F43LL;
}

void *Publishers.ContainsWhere.Inner.receive(newValue:)()
{
  uint64_t v1 = v0;
  uint64_t result = (*(void *(**)(void *__return_ptr))(v0 + 24))(v9);
  if (LOBYTE(v9[0]) == 1)
  {
    int v3 = *(unsigned __int8 *)(v0 + 17);
    if (v3 == 2)
    {
      __break(1u);
    }

    else
    {
      BOOL v4 = (v3 & 1) == 0;
      swift_beginAccess();
      *(_BYTE *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      type metadata accessor for PartialCompletion( 0LL,  MEMORY[0x18961AFC8] + 8LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      return (void *)swift_storeEnumTagMultiPayload();
    }
  }

  else
  {
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0LL, MEMORY[0x18961AFC8] + 8LL, v7, v8);
    return (void *)swift_storeEnumTagMultiPayload();
  }

  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ContainsWhere<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.TryContainsWhere.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.ContainsWhere.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void *))
{
  uint64_t v5 = *(void *)(a2 + 24);
  v6[0] = *(void *)(a2 + 16);
  v6[1] = a3;
  __int128 v6[2] = v5;
  void v6[3] = a4;
  a5(0LL, v6);
  JUMPOUT(0x183B1F89CLL);
}

unint64_t Publishers.TryContainsWhere.Inner.description.getter()
{
  return 0xD000000000000010LL;
}

uint64_t Publishers.TryContainsWhere.Inner.receive(newValue:)()
{
  (*(void (**)(void *__return_ptr))(v0 + 24))(v2);
  if (LOBYTE(v2[0]) != 1) {
    return 0LL;
  }
  swift_beginAccess();
  uint64_t result = 0LL;
  *(_BYTE *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryContainsWhere.Inner.receive(newValue:)@<X0>( uint64_t a1@<X8>)
{
  uint64_t result = Publishers.TryContainsWhere.Inner.receive(newValue:)();
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryContainsWhere<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.TryContainsWhere.Inner()
{
}

uint64_t getEnumTagSinglePayload for Publishers.ContainsWhere(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B1FAB0 + 4 * byte_183BA07A0[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.ContainsWhere( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B1FC28()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B1FCA0LL);
}

void sub_183B1FC30(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B1FC38LL);
  }
  JUMPOUT(0x183B1FCA0LL);
}

void sub_183B1FC78()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B1FCA0LL);
}

void sub_183B1FC80()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B1FCA0LL);
}

uint64_t sub_183B1FC88(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B1FCA0LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B1FC9CLL);
    }
    JUMPOUT(0x183B1FC94LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_183B1FCB8()
{
  return swift_deallocObject();
}

uint64_t _s6Output7Combine9PublisherPQzSbIegnd_AESbIegnr_AbCRzAB10SubscriberRd__7FailureQyd__AGRtzSb5InputRtd__r__lTRTA_0@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result & 1;
  return result;
}

uint64_t outlined destroy of SubscriberTapMarker?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriberTapMarker?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for Publishers()
{
  return &type metadata for Publishers;
}

uint64_t dispatch thunk of Publisher.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t Published.objectWillChange.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Published.Storage(0LL, *(void *)(a1 + 16), a3, a4);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  int v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - v8, v5, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    uint64_t v10 = PublishedSubject.objectWillChange.getter();
    swift_release_n();
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0LL;
  }

  return v10;
}

uint64_t type metadata accessor for Published.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Published.Storage);
}

uint64_t Published.objectWillChange.setter(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  int v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  BOOL v11 = (char *)&v20 - v10;
  uint64_t v14 = type metadata accessor for Published.Storage(0LL, v5, v12, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 16))((char *)&v20 - v16, v3, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    specialized PublishedSubject.objectWillChange.setter(a1);
    swift_release_n();
    return swift_release();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v17, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    Published.Publisher.init(_:)((uint64_t)v9, v5, &v21);
    uint64_t v19 = v21;
    swift_retain();
    specialized PublishedSubject.objectWillChange.setter(a1);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    (*(void (**)(uint64_t *, uint64_t))(v15 + 8))(v3, v14);
    *uint64_t v3 = v19;
    return swift_storeEnumTagMultiPayload();
  }

void (*protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>( uint64_t **a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t)Published.objectWillChange.modify(v4, a2, v5, v6);
  return protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>;
}

void protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>( void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t (*Published.objectWillChange.modify( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  a1[1] = a2;
  a1[2] = v4;
  *a1 = Published.objectWillChange.getter(a2, a2, a3, a4);
  return Published.objectWillChange.modify;
}

uint64_t Published.objectWillChange.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((a2 & 1) == 0) {
    return Published.objectWillChange.setter(*(os_unfair_lock_s **)a1, v2);
  }
  uint64_t v3 = (os_unfair_lock_s *)swift_retain();
  Published.objectWillChange.setter(v3, v2);
  return swift_release();
}

void PublishedSubscriber.init(_:)(uint64_t *a1@<X8>)
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v3 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v2);
    *a1 = v3;
    swift_weakInit();
    swift_weakAssign();
    swift_release();
  }

uint64_t PublishedSubscriber.receive(subscription:)(void *a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PublishedSubject.send(subscription:)(a1);
    return swift_release();
  }

  return result;
}

uint64_t PublishedSubscriber.receive(_:)(uint64_t a1)
{
  if (swift_weakLoadStrong())
  {
    PublishedSubject.send(_:)(a1);
    swift_release();
  }

  return 0LL;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance PublishedSubscriber<A>(uint64_t a1)
{
  return 0LL;
}

uint64_t Publisher<>.assign(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for PublishedSubscriber(0LL, AssociatedTypeWitness, v6, v7);
  uint64_t v9 = MEMORY[0x186E22960](&protocol conformance descriptor for PublishedSubscriber<A>, v8);
  Publisher.subscribe<A>(_:)((uint64_t)v11, a2, v8, a3, v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v11, v8);
}

uint64_t key path setter for Published.objectWillChange : <A>Published<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for Published(0LL, *(void *)(a4 + a3 - 8), a3, a4);
  uint64_t v5 = (os_unfair_lock_s *)swift_retain();
  return Published.objectWillChange.setter(v5, v4);
}

uint64_t Published.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for PublishedSubject(0LL, v9, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v12 = PublishedSubject.__allocating_init(_:)((uint64_t)v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v12;
  return result;
}

uint64_t Published.init(initialValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

void Published.wrappedValue.getter()
{
}

void Published.wrappedValue.setter()
{
}

void Published.wrappedValue.modify()
{
}

uint64_t static Published.enableObservableInteraction.getter()
{
  if (one-time initialization token for observableObservableObjectAvailable != -1) {
    swift_once();
  }
  return static CombineFeatures.observableObservableObjectAvailable;
}

uint64_t applyAcess #1 <A><A1><A2>(_:) in static Published.access<A>(_:keyPath:storage:)()
{
  return ObservableObjectPublisher.access<A, B>(_:keyPath:)();
}

uint64_t applyMutation #1 <A><A1><A2>(_:) in static Published.withMutation<A>(of:keyPath:storage:apply:)()
{
  return ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)();
}

uint64_t static Published.subscript.getter@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *(void *)(*MEMORY[0x189619CF8] + *a2 + 8LL);
  uint64_t v8 = type metadata accessor for Published.Storage(0LL, v7, a3, a4);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v18 - v10;
  uint64_t v14 = type metadata accessor for Published(0LL, v7, v12, v13);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)v18 - v15;
  specialized static Published.access<A>(_:keyPath:storage:)(a1);
  v18[1] = a1;
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v8);
  swift_retain();
  PublishedSubject.value.getter(a5);
  return swift_release_n();
}

uint64_t static Published.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  specialized static Published.subscript.setter(a1, a2, (uint64_t)a3);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x189619CF8] + v4 + 8) - 8LL) + 8LL))(a1);
}

uint64_t closure #1 in static Published.subscript.setter(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(*MEMORY[0x189619CF8] + *a2 + 8LL) + 16LL);
  uint64_t v7 = type metadata accessor for Published.Storage(0LL, v6, a3, a4);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = &v20[-v13];
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = &v20[-v15];
  uint64_t v22 = a1;
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v14, v16, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    protocol witness for Subject.send(_:) in conformance PublishedSubject<A>(a3);
    return swift_release_n();
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v11, a3, v6);
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a1;
    swift_unknownObjectRetain();
    uint64_t v18 = (void (*)(_BYTE *, void))swift_modifyAtReferenceWritableKeyPath();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 40))(v19, v11, v7);
    v18(v20, 0LL);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v14, v7);
  }

void (*static Published.subscript.modify( void *a1, uint64_t a2, void *a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v8 = malloc(0x88uLL);
  *a1 = v8;
  v8[11] = a3;
  v8[12] = a4;
  v8[5] = a2;
  uint64_t v9 = *(void *)(*MEMORY[0x189619CF8] + *a3 + 8LL);
  v8[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[14] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v8[15] = malloc(v11);
  uint64_t v12 = malloc(v11);
  _BYTE v8[16] = v12;
  static Published.subscript.getter(a2, a3, a4, v13, (uint64_t)v12);
  return static Published.subscript.modify;
}

void static Published.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 120LL);
  uint64_t v3 = *(void **)(*(void *)a1 + 128LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[13];
    uint64_t v6 = v2[14];
    uint64_t v8 = v2[11];
    uint64_t v7 = v2[12];
    uint64_t v9 = v2[5];
    (*(void (**)(void, void, uint64_t))(v6 + 16))(v2[15], v2[16], v5);
    swift_retain();
    swift_retain();
    uint64_t v10 = swift_unknownObjectRetain();
    v2[2] = v9;
    v2[3] = v7;
    void v2[4] = v4;
    specialized static Published.withMutation<A>(of:keyPath:storage:apply:)( v10,  v8,  (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    size_t v11 = *(void (**)(void *, uint64_t))(v6 + 8);
    v11(v4, v5);
    v11(v3, v5);
  }

  else
  {
    uint64_t v12 = v2[13];
    uint64_t v13 = v2[14];
    uint64_t v15 = v2[11];
    uint64_t v14 = v2[12];
    uint64_t v16 = v2[5];
    swift_retain();
    swift_retain();
    uint64_t v17 = swift_unknownObjectRetain();
    v2[8] = v16;
    v2[9] = v14;
    v2[10] = v3;
    specialized static Published.withMutation<A>(of:keyPath:storage:apply:)( v17,  v15,  (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    (*(void (**)(void *, uint64_t))(v13 + 8))(v3, v12);
  }

  free(v3);
  free(v4);
  free(v2);
}

uint64_t Published.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PublishedSubject.receive<A>(subscriber:)(a1, a3, a4);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Published<A>.Publisher( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Published.Publisher.receive<A>(subscriber:)(a1, a2, a2, a3);
}

uint64_t Published.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v13 = type metadata accessor for Published.Storage(0LL, v4, v11, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (uint64_t *)((char *)&v19 - v15);
  (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 16))((char *)&v19 - v15, v2, v13);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    uint64_t v18 = *v16;
  }

  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v10, v16, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    Published.Publisher.init(_:)((uint64_t)v8, v4, &v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v18 = v20;
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v2, v13);
    uint64_t *v2 = v18;
    swift_storeEnumTagMultiPayload();
    uint64_t result = swift_retain();
  }

  *a2 = v18;
  return result;
}

void (*Published.projectedValue.modify(void *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = malloc(v8);
  __int128 v5[2] = v9;
  uint64_t v10 = malloc(v8);
  _OWORD v5[3] = v10;
  uint64_t v13 = type metadata accessor for Published.Storage(0LL, v6, v11, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = malloc(*(void *)(v14 + 64));
  v5[4] = v15;
  (*(void (**)(void))(v14 + 16))();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v5 = *v15;
    return Published.projectedValue.modify;
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v10, v15, v6);
    (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
    Published.Publisher.init(_:)((uint64_t)v9, v6, v5 + 1);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(void *, uint64_t))(v14 + 8))(v2, v13);
    void *v2 = v5[1];
    swift_storeEnumTagMultiPayload();
    swift_retain();
    return Published.projectedValue.modify;
  }

void Published.projectedValue.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_release();
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  free(*(void **)(v1 + 32));
  free(v2);
  free(v3);
  free((void *)v1);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v1 = *a1;
  swift_release();
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  free(*(void **)(v1 + 32));
  free(v2);
  free(v3);
  free((void *)v1);
}

uint64_t Published.projectedValue.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = Published.projectedValue.modify(v6, a2);
  *uint64_t v4 = v2;
  swift_release();
  return ((uint64_t (*)(void *, void))v3)(v6, 0LL);
}

uint64_t type metadata accessor for PublishedSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PublishedSubscriber);
}

void specialized Published.wrappedValue.setter()
{
}

uint64_t type metadata accessor for Published(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Published);
}

uint64_t specialized static Published.access<A>(_:keyPath:storage:)(uint64_t result)
{
  uint64_t v1 = result;
  if (one-time initialization token for observableObservableObjectAvailable != -1) {
    uint64_t result = swift_once();
  }
  if (static CombineFeatures.observableObservableObjectAvailable == 1)
  {
    swift_unknownObjectRetain();
    swift_getObjectType();
    if (dynamic_cast_existential_2_conditional(v1))
    {
      uint64_t v3 = v2;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 24);
      void v6[3] = swift_getAssociatedTypeWitness();
      void v6[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v6);
      v5(ObjectType, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publisher);
      type metadata accessor for ObservableObjectPublisher();
      if ((swift_dynamicCast() & 1) != 0)
      {
        applyAcess #1 <A><A1><A2>(_:) in static Published.access<A>(_:keyPath:storage:)();
        swift_unknownObjectRelease();
        return swift_release();
      }

      else
      {
        return swift_unknownObjectRelease();
      }
    }

    else
    {
      return swift_unknownObjectRelease();
    }
  }

  return result;
}

uint64_t specialized static Published.withMutation<A>(of:keyPath:storage:apply:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a1;
  if (one-time initialization token for observableObservableObjectAvailable != -1) {
    a1 = swift_once();
  }
  if (static CombineFeatures.observableObservableObjectAvailable == 1)
  {
    swift_unknownObjectRetain();
    swift_getObjectType();
    if (dynamic_cast_existential_2_conditional(v4))
    {
      uint64_t v6 = v5;
      uint64_t ObjectType = swift_getObjectType();
      size_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
      void v10[3] = swift_getAssociatedTypeWitness();
      v10[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v10);
      v8(ObjectType, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publisher);
      type metadata accessor for ObservableObjectPublisher();
      if ((swift_dynamicCast() & 1) != 0)
      {
        applyMutation #1 <A><A1><A2>(_:) in static Published.withMutation<A>(of:keyPath:storage:apply:)();
        swift_unknownObjectRelease();
        return swift_release();
      }
    }

    a1 = swift_unknownObjectRelease();
  }

  return a3(a1);
}

uint64_t specialized static Published.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static Published.withMutation<A>(of:keyPath:storage:apply:)( a2,  a3,  (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
}

uint64_t sub_183B21440@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5 = type metadata accessor for Published(0LL, *(void *)(a2 + a1 - 8), a2, a3);
  uint64_t result = Published.objectWillChange.getter(v5, v6, v7, v8);
  *a4 = result;
  return result;
}

uint64_t sub_183B2147C()
{
  return 8LL;
}

void *sub_183B21488(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_183B21494()
{
}

void sub_183B214A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

  ;
}

uint64_t sub_183B214D0()
{
  return 8LL;
}

uint64_t type metadata completion function for Published(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Published.Storage(319LL, *(void *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t destroy for Published(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 8) {
    unint64_t v3 = 8LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return swift_release();
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B21594 + 4 * byte_183BA08C0[v5]))();
  }

void *initializeWithCopy for Published(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    swift_retain();
    char v8 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v8;
  return a1;
}

void *assignWithCopy for Published(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  return a1;
}

void *initializeWithTake for Published(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    char v8 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 32))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v8;
  return a1;
}

void *assignWithTake for Published(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *((_BYTE *)a1 + v7) = v12;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for Published(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 8LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) > 8uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_183B21B78 + 4 * byte_183BA08E3[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for Published(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 8) {
    unint64_t v5 = 8LL;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0u;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = 4u;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = 1u;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

uint64_t type metadata accessor for Published.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Published.Publisher);
}

uint64_t destroy for PublishedSubscriber()
{
  return swift_weakDestroy();
}

void *initializeWithCopy for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakCopyInit();
  return a1;
}

void *assignWithCopy for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakCopyAssign();
  return a1;
}

void *initializeWithTake for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

void *assignWithTake for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for PublishedSubscriber(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for PublishedSubscriber(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  return result;
}

uint64_t type metadata completion function for Published.Storage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Published(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }

  else
  {
    unsigned int v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X13 }
    }

    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = 0;
      return v3;
    }

    *a1 = *a2;
    *((_BYTE *)a1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = 1;
  }

  swift_retain();
  return v3;
}

uint64_t destroy for Published.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 8) {
    unint64_t v3 = 8LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return swift_release();
    }
    else {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B22048 + 4 * byte_183BA08F6[v5]))();
  }

void *initializeWithCopy for Published.Storage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    swift_retain();
    char v8 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v8;
  return a1;
}

void *assignWithCopy for Published.Storage(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }

  return a1;
}

void *initializeWithTake for Published.Storage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    *a1 = *a2;
    char v8 = 1;
  }

  else
  {
    (*(void (**)(void *))(v4 + 32))(a1);
    char v8 = 0;
  }

  *((_BYTE *)a1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v8;
  return a1;
}

void *assignWithTake for Published.Storage(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 16));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      *a1 = *a2;
      char v12 = 1;
    }

    else
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 0;
    }

    *((_BYTE *)a1 + v7) = v12;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for Published.Storage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 8LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) > 8uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_183B2262C + 4 * byte_183BA0919[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for Published.Storage( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (v5 <= 8) {
    unint64_t v5 = 8LL;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0u;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = 4u;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = 1u;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

uint64_t getEnumTag for Published.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 8LL;
  if (*(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL) > 8uLL) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B22868 + 4 * byte_183BA0927[v3]))();
}

void destructiveInjectEnumTag for Published.Storage(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL) <= 8uLL) {
    size_t v4 = 8LL;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }

      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }

      else
      {
        *a1 = v7;
      }
    }

    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }

  else
  {
    a1[v4] = a2;
  }

uint64_t partial apply for closure #1 in static Published.subscript.setter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in static Published.subscript.setter( *(void *)(v4 + 16),  *(void **)(v4 + 24),  *(void *)(v4 + 32),  a4);
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

void Publisher<>.makeConnectable()(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  Publishers.MakeConnectable.init(upstream:)((uint64_t)v6, a1, a2);
}

  ;
}

void Publishers.MakeConnectable.init(upstream:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for PassthroughSubject(0LL, AssociatedTypeWitness, v6, AssociatedConformanceWitness);
  uint64_t v9 = PassthroughSubject.__allocating_init()();
  uint64_t v10 = MEMORY[0x186E22960](&protocol conformance descriptor for PassthroughSubject<A, B>, v8);
  Publisher.multicast<A>(subject:)(v9, a2, v8, a3, v10);
}

uint64_t sub_183B22B58(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v3, v2);
  *unint64_t v1 = a1;
  return result;
}

void Publishers.MakeConnectable.receive<A>(subscriber:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for PassthroughSubject(255LL, AssociatedTypeWitness, v1, AssociatedConformanceWitness);
  MEMORY[0x186E22960](&protocol conformance descriptor for PassthroughSubject<A, B>, v3);
  type metadata accessor for Publishers.Multicast();
}

uint64_t sub_183B22C68(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Multicast<A, B>, a1);
  return Publisher.subscribe<A>(_:)(v3, a1, v2, v5, v1);
}

uint64_t Publishers.MakeConnectable.connect()@<X0>(uint64_t *a1@<X8>)
{
  return Publishers.Multicast.connect()(a1);
}

uint64_t instantiation function for generic protocol witness table for Publishers.MakeConnectable<A>( uint64_t a1)
{
  uint64_t result = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.MakeConnectable<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MakeConnectable<A>()
{
}

uint64_t dispatch thunk of ConnectablePublisher.connect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for Publishers.MakeConnectable( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.MakeConnectable);
}

uint64_t Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publishers.Collect.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t Publisher.collect(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  uint64_t result = type metadata accessor for Publishers.CollectByCount(0LL, a2, a3, v12);
  *(void *)(a4 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t Publishers.CollectByCount.init(upstream:count:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = type metadata accessor for Publishers.CollectByCount(0LL, a3, a4, v9);
  *(void *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t type metadata accessor for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.CollectByCount);
}

void Publisher.collect<A>(_:options:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v26 = a7;
  uint64_t v27 = a5;
  uint64_t v25 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v23 - v12;
  uint64_t v15 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, a4, a6, v14);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)v23 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v22 + 16))(v21, v23[1], a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v24, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, v10);
  Publishers.CollectByTime.init(upstream:strategy:options:)((uint64_t)v21, a3, v26);
}

  ;
}

uint64_t type metadata accessor for Publishers.TimeGroupingStrategy( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TimeGroupingStrategy);
}

void Publishers.CollectByTime.init(upstream:strategy:options:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B230C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = v8 + *(int *)(a1 + 52);
  uint64_t v11 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v6, v5, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v10, v7, v11);
  uint64_t v12 = v8 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, v4, v13);
}

void type metadata accessor for Publishers.CollectByTime()
{
}

uint64_t Publishers.TimeGroupingStrategy.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v6 + 16))(v5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = *(void *)(a1 + 16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32LL);
  if (EnumCaseMultiPayload == 1) {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  }
  else {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata2();
  }
  uint64_t v12 = &v5[*(int *)(TupleTypeMetadata3 + 48)];
  v10(a2, v5, v8);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( v12,  AssociatedTypeWitness);
}

uint64_t Publishers.CollectByTime.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.CollectByTime.strategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *(int *)(a1 + 52);
  uint64_t v6 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, *(void *)(a1 + 24), *(void *)(a1 + 40), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t Publishers.CollectByTime.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

void Publishers.CollectByTime.receive<A>(subscriber:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v7);
  uint64_t v5 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v3, v2, v4);
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  MEMORY[0x1895F8858](v6);
  type metadata accessor for Publishers.CollectByTime.Inner();
}

uint64_t sub_183B234C0(uint64_t a1)
{
  uint64_t v11 = *(void *)(v9 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v11 + *(int *)(v2 + 52), v1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v9 - 168) + 16LL))( v3,  v11 + *(int *)(v2 + 56),  *(void *)(v9 - 152));
  swift_allocObject();
  *(void *)(v9 - 128) = Publishers.CollectByTime.Inner.init(downstream:strategy:options:)(v6, v5, v3);
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.CollectByTime<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v9 - 128, *(void *)(v9 - 176), a1, *(void *)(v9 - 184), v12);
  return swift_release();
}

void type metadata accessor for Publishers.CollectByTime.Inner()
{
}

uint64_t **Publishers.CollectByTime.Inner.__allocating_init(downstream:strategy:options:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.CollectByTime.Inner.init(downstream:strategy:options:)(a1, a2, a3);
}

void Publishers.CollectByTime.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v2[22]));
  uint64_t v27 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183BA0AC0;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x657274736E776F64LL;
  *(void *)(v9 + 40) = 0xEA00000000006D61LL;
  uint64_t v10 = (char *)v1 + (*v1)[16];
  uint64_t v11 = v2[12];
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))( boxed_opaque_existential_1,  v10,  v11);
  *(void *)(v9 + 80) = 0x7967657461727473LL;
  *(void *)(v9 + 88) = 0xE800000000000000LL;
  uint64_t v13 = (char *)v1 + (*v1)[17];
  uint64_t v15 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v2[11], v2[14], v14);
  *(void *)(v9 + 120) = v15;
  uint64_t v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v16, v13, v15);
  *(void *)(v9 + 128) = 0x736E6F6974706FLL;
  *(void *)(v9 + 136) = 0xE700000000000000LL;
  uint64_t v17 = (char *)v1 + (*v1)[18];
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  *(void *)(v9 + 168) = v18;
  uint64_t v19 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 144));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v19, v17, v18);
  *(void *)(v9 + 176) = 0x737574617473LL;
  *(void *)(v9 + 184) = 0xE600000000000000LL;
  uint64_t v20 = (uint64_t)v1 + (*v1)[20];
  swift_beginAccess();
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = &type metadata for SubscriptionStatus;
  uint64_t v21 = swift_allocObject();
  *(void *)(v9 + 192) = v21;
  outlined init with copy of SubscriptionStatus(v20, v21 + 16);
  *(void *)(v9 + 2outlined destroy of Subscription?(v0 + 24) = 0x656C756465686373LL;
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0xE900000000000064LL;
  uint64_t v22 = (uint64_t)v1 + (*v1)[23];
  swift_beginAccess();
  *(void *)(v9 + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  uint64_t v23 = swift_allocObject();
  *(void *)(v9 + 240) = v23;
  outlined init with copy of Any?(v22, v23 + 16, &demangling cache variable for type metadata for Cancellable?);
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 72) = 0x646E616D6564LL;
  *(void *)(v9 + 280) = 0xE600000000000000LL;
  uint64_t v24 = *(uint64_t *)((char *)v1 + (*v1)[24]);
  *(void *)(v9 + 312) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 288) = v24;
  uint64_t v25 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v8, 1LL, 1LL, v25);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + (*v1)[22]));
}

void Publishers.CollectByTime.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "CollectByTime");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t **Publishers.CollectByTime.Inner.init(downstream:strategy:options:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (*v3)[19];
  swift_getAssociatedTypeWitness();
  *(uint64_t **)((char *)v3 + v8) = (uint64_t *)static Array._allocateUninitialized(_:)();
  uint64_t v9 = (char *)v3 + (*v3)[20];
  *((void *)v9 + 4) = 0LL;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  _BYTE v9[40] = 2;
  *((_BYTE *)v3 + (*v3)[21]) = 0;
  uint64_t v10 = (*v3)[22];
  uint64_t v11 = (uint64_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v11 = 0;
  *(uint64_t **)((char *)v3 + v10) = v11;
  uint64_t v12 = (char *)v3 + (*v3)[23];
  *((void *)v12 + 4) = 0LL;
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(uint64_t **)((char *)v3 + (*v3)[24]) = 0LL;
  (*(void (**)(char *, uint64_t))(*(void *)(v7[12] - 8) + 32LL))((char *)v3 + (*v3)[16], a1);
  uint64_t v13 = (char *)v3 + (*v3)[17];
  uint64_t v15 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v7[11], v7[14], v14);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, a2, v15);
  uint64_t v16 = (char *)v3 + (*v3)[18];
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32LL))(v16, a3, v17);
  return v3;
}

uint64_t **Publishers.CollectByTime.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t **)((char *)v0 + (*v0)[22]), -1LL, -1LL);
  (*(void (**)(char *))(*(void *)(v1[12] - 8) + 8LL))((char *)v0 + (*v0)[16]);
  uint64_t v2 = (char *)v0 + (*v0)[17];
  uint64_t v4 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v1[11], v1[14], v3);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
  uint64_t v5 = (char *)v0 + (*v0)[18];
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  swift_bridgeObjectRelease();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + (*v0)[20]);
  outlined destroy of CustomStringConvertible?( (uint64_t)v0 + (*v0)[23],  &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t Publishers.CollectByTime.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.CollectByTime.Inner.deinit);
}

void Publishers.CollectByTime.Inner.schedulerTimerFired()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + v3));
  uint64_t v4 = *(void *)(*v0 + 192);
  uint64_t v5 = *(uint64_t *)((char *)v0 + v4);
  if (v5 != 0x8000000000000000LL)
  {
    if (v5 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }

    if (!v5)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + v3));
      return;
    }
  }

  uint64_t v6 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 152));
  swift_beginAccess();
  uint64_t v14 = *v6;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v7);
  if ((Collection.isEmpty.getter() & 1) != 0) {
    goto LABEL_24;
  }
  uint64_t v8 = *(uint64_t *)((char *)v0 + v4);
  if (v8 != 0x8000000000000000LL)
  {
    if ((v8 & 0x8000000000000000LL) == 0)
    {
      if (!v8) {
        goto LABEL_24;
      }
      goto LABEL_8;
    }

LABEL_8:
  uint64_t v9 = *v6;
  swift_bridgeObjectRetain();
  *uint64_t v6 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(uint64_t *)((char *)v0 + v4);
  if (v10 == 0x8000000000000000LL) {
    goto LABEL_12;
  }
  if (v10 < 0) {
    goto LABEL_28;
  }
  if (!v10)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  *(uint64_t *)((char *)v0 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v10 - 1;
LABEL_12:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + v3));
  uint64_t v14 = v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t *, void))(*(void *)(v2 + 120) + 48LL))(&v14, *(void *)(v2 + 96));
  swift_bridgeObjectRelease();
  if (v11 == 0x8000000000000000LL) {
    goto LABEL_15;
  }
  if (v11 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (!v11) {
    return;
  }
LABEL_15:
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v3));
  uint64_t v12 = *(uint64_t *)((char *)v1 + v4);
  if (v12 != 0x8000000000000000LL)
  {
    unint64_t v13 = 0x8000000000000000LL;
    if (v11 == 0x8000000000000000LL) {
      goto LABEL_23;
    }
    if (((v12 | v11) & 0x8000000000000000LL) == 0)
    {
      unint64_t v13 = v12 + v11;
      if (!__OFADD__(v12, v11))
      {
        if ((v13 & 0x8000000000000000LL) == 0) {
          goto LABEL_23;
        }
LABEL_32:
        __break(1u);
        return;
      }

      unint64_t v13 = 0x8000000000000000LL;
LABEL_23:
      *(uint64_t *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v13;
      goto LABEL_24;
    }

    *uint64_t result = v3;
  }

  return result;
}

  os_unfair_lock_unlock(v5);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 104) + 48LL))(a1, *(void *)(v4 + 88));
  uint64_t v11 = v10;
  if (v10 == 0x8000000000000000LL)
  {
    os_unfair_lock_lock(v5);
    uint64_t v12 = 0x8000000000000000LL;
LABEL_2:
    os_unfair_lock_unlock(v5);
    return;
  }

  if (v10 < 0) {
    goto LABEL_22;
  }
  if (v10)
  {
    os_unfair_lock_lock(v5);
    unint64_t v13 = *(uint64_t *)((char *)v2 + v8);
    if (v13 == 0x8000000000000000LL) {
      goto LABEL_2;
    }
    if (((v13 | v11) & 0x8000000000000000LL) == 0)
    {
      uint64_t v14 = __OFADD__(v13, v11);
      uint64_t v12 = v13 + v11;
      if (v14)
      {
        uint64_t v12 = 0x8000000000000000LL;
LABEL_19:
        *(uint64_t *)((char *)v2 + v8) = v12;
        goto LABEL_2;
      }

      if ((v12 & 0x8000000000000000LL) == 0) {
        goto LABEL_19;
      }
LABEL_24:
      __break(1u);
      return;
    }

  *(uint64_t *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v7;
  uint64_t v4 = *v1;
LABEL_9:
  uint64_t v8 = (uint64_t)v1 + *(void *)(v4 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v8, (uint64_t)&v11);
  if (v12)
  {
    outlined init with take of Subscription(&v11, (uint64_t)v13);
    os_unfair_lock_unlock(v3);
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(a1, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

  else
  {
    outlined destroy of Subscription?((uint64_t)&v11);
    os_unfair_lock_unlock(v3);
  }

    *(uint64_t *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = v7;
    uint64_t v4 = *v1;
  }

  uint64_t v8 = (uint64_t)v1 + *(void *)(v4 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v8, (uint64_t)v12);
  if (v13
    && (outlined destroy of SubscriptionStatus((uint64_t)v12),
        uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 144),
        swift_beginAccess(),
        outlined init with copy of SubscriptionStatus(v9, (uint64_t)v12),
        v13))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v12);
    os_unfair_lock_unlock(v3);
  }

  else
  {
    outlined init with take of Subscription(v12, (uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v11 + 24))(a1.rawValue, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }

void Publishers.CollectByTime.Inner.request(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 88);
  uint64_t v8 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v7, *(void *)(*v4 + 112), a4);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v26 - v10;
  if (a1 != 0x8000000000000000LL)
  {
    if (a1 < 0)
    {
      __break(1u);
    }

    else if (a1)
    {
      goto LABEL_4;
    }

    __break(1u);
    goto LABEL_25;
  }

void Publishers.CollectByTime.Inner.cancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 176LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v2));
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)v10);
  if (v11)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v10);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v2));
  }

  else
  {
    outlined init with take of Subscription((__int128 *)v10, (uint64_t)v12);
    swift_getAssociatedTypeWitness();
    uint64_t v4 = static Array._allocateUninitialized(_:)();
    uint64_t v5 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 152LL));
    swift_beginAccess();
    *uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v10 = 1LL;
    memset(&v10[8], 0, 32);
    char v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v10, v3);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v2));
    uint64_t v7 = v13;
    uint64_t v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
    uint64_t v8 = v1 + *(void *)(*(void *)v1 + 184LL);
    swift_beginAccess();
    if (*(void *)(v8 + 24))
    {
      outlined init with copy of Subscription(v8, (uint64_t)v10);
      __int128 v9 = *(_OWORD *)&v10[24];
      __swift_project_boxed_opaque_existential_1(v10, *(uint64_t *)&v10[24]);
      (*(void (**)(void, void))(*((void *)&v9 + 1) + 8LL))(v9, *((void *)&v9 + 1));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    }

    memset(v10, 0, sizeof(v10));
    swift_beginAccess();
    outlined assign with take of Subscription?( (uint64_t)v10,  v8,  &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }

uint64_t Publishers.CollectByTime.Inner.receive(subscription:)(void *a1)
{
  void (*v38)(uint64_t **__return_ptr, char *, char *, char *, uint64_t, uint64_t (*)(), uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t **, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t AssociatedConformanceWitness;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  char v59;
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 112);
  uint64_t v6 = *(void *)(*v1 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v48 = (char *)&AssociatedConformanceWitness - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v50 = (char *)&AssociatedConformanceWitness - v10;
  uint64_t v12 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v6, v5, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&AssociatedConformanceWitness - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(v16 - 8);
  uint64_t v54 = v16;
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  os_unfair_lock_t v46 = (char *)&AssociatedConformanceWitness - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v47 = (char *)&AssociatedConformanceWitness - v20;
  uint64_t v52 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&AssociatedConformanceWitness - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = v4;
  uint64_t v55 = *(void *)(v4 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v55));
  uint64_t v23 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v23, (uint64_t)&v56);
  if (v59 == 2
    && (int8x16_t v24 = vorrq_s8(v57, v58),
        !(*(void *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)) | (unint64_t)v56)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v56);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v56);
    unint64_t v59 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v56, v23);
    swift_endAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, (uint64_t)v2 + *(void *)(*v2 + 136), v12);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
    uint64_t v30 = v54;
    if (EnumCaseMultiPayload == 1) {
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    }
    else {
      TupleTypeMetadata3 = swift_getTupleTypeMetadata2();
    }
    uint64_t v32 = &v15[*(int *)(TupleTypeMetadata3 + 48)];
    v29(v22, v15, v6);
    uint64_t v33 = v47;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v47, v32, v30);
    uint64_t v34 = v48;
    (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v6, v5);
    uint64_t v35 = v50;
    dispatch thunk of Strideable.advanced(by:)();
    uint64_t v49 = *(void *)(v49 + 8);
    ((void (*)(char *, uint64_t))v49)(v34, AssociatedTypeWitness);
    uint64_t v36 = v46;
    (*(void (**)(uint64_t, uint64_t))(v5 + 48))(v6, v5);
    uint64_t v37 = (uint64_t)v2 + *(void *)(*v2 + 144);
    uint64_t v38 = *(void (**)(uint64_t **__return_ptr, char *, char *, char *, uint64_t, uint64_t (*)(), uint64_t *, uint64_t, uint64_t))(v5 + 72);
    swift_retain();
    v38( &v56,  v35,  v33,  v36,  v37,  partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(subscription:),  v2,  v6,  v5);
    swift_release();
    uint64_t v39 = v54;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v53 + 8);
    v40(v36, v54);
    ((void (*)(char *, uint64_t))v49)(v35, AssociatedTypeWitness);
    v40(v33, v39);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v6);
    uint64_t v41 = (uint64_t)v2 + *(void *)(*v2 + 184);
    swift_beginAccess();
    outlined assign with take of Subscription?( (uint64_t)&v56,  v41,  &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v55));
    v58.i64[0] = v51;
    v58.i64[1] = (uint64_t)&protocol witness table for Publishers.CollectByTime<A, B>.Inner<A1>;
    uint64_t v56 = v2;
    uint64_t v42 = *(void *)(v51 + 120);
    uint64_t v43 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v42 + 40);
    uint64_t v44 = *(void *)(v51 + 96);
    swift_retain();
    v43(&v56, v44, v42);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v56);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v55));
    uint64_t v25 = a1[3];
    uint64_t v26 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v25);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v26 + 8) + 8LL))(v25);
  }

uint64_t Publishers.CollectByTime.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v57 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*(void *)(*v1 + 88) - 8LL);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v3 + 112);
  uint64_t v58 = v8;
  uint64_t v60 = v7;
  uint64_t v10 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v8, v7, v9);
  unint64_t v59 = *(char **)(v10 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v51 - v17;
  uint64_t v19 = *(void *)(v3 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v19));
  uint64_t v20 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v20, (uint64_t)v62);
  if (!v63)
  {
    uint64_t v54 = v13;
    uint64_t v52 = v6;
    uint64_t v56 = v4;
    outlined init with take of Subscription(v62, (uint64_t)v64);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v57, AssociatedTypeWitness);
    uint64_t v22 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 152));
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v23 = (void (*)(char *, uint64_t, uint64_t))*((void *)v59 + 2);
    uint64_t v55 = (uint64_t)v2 + *(void *)(*v2 + 136);
    uint64_t v53 = v23;
    ((void (*)(char *))v23)(v15);
    uint64_t v57 = v10;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v25 = v58;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v26 = swift_getAssociatedTypeWitness();
    char v27 = v15;
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v36 = &v15[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v36, v26);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v15, v25);
      return 1LL;
    }

    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    uint64_t v29 = &v15[*(int *)(TupleTypeMetadata3 + 48)];
    uint64_t v30 = *(void *)&v27[*(int *)(TupleTypeMetadata3 + 64)];
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v32 = MEMORY[0x186E22090](v31, AssociatedTypeWitness);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v51 = v30;
    if (v32 < v30) {
      goto LABEL_7;
    }
    uint64_t v37 = *(void *)(*v2 + 192);
    uint64_t v38 = *(uint64_t *)((char *)v2 + v37);
    if (v38 != 0x8000000000000000LL)
    {
      if (v38 < 0)
      {
        __break(1u);
        goto LABEL_20;
      }

      if (!v38)
      {
LABEL_7:
        uint64_t v33 = v29;
        uint64_t v34 = v54;
        uint64_t v35 = v57;
        v53(v54, v55, v57);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          uint64_t v48 = &v34[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
          uint64_t v49 = *(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL);
          v49(v48, v26);
          uint64_t v50 = *(void (**)(char *, uint64_t))(v56 + 8);
          v50(v34, v25);
          v49(v33, v26);
          v50(v27, v25);
          return 1LL;
        }

        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
        (*((void (**)(char *, uint64_t))v59 + 1))(v34, v35);
        (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v33, v26);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v25);
        return 0LL;
      }
    }

    unint64_t v59 = v27;
    uint64_t v39 = *v22;
    swift_bridgeObjectRetain();
    *uint64_t v22 = static Array._allocateUninitialized(_:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v40 = *(uint64_t *)((char *)v2 + v37);
    uint64_t v41 = v56;
    uint64_t v42 = (uint64_t)v52;
    if (v40 == 0x8000000000000000LL)
    {
LABEL_17:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v19));
      Publishers.TimeGroupingStrategy.scheduler.getter(v57, v42);
      uint64_t v43 = (uint64_t)v2 + *(void *)(*v2 + 144);
      outlined init with copy of Subscription((uint64_t)v64, (uint64_t)v62);
      uint64_t v44 = (void *)swift_allocObject();
      v44[2] = v2;
      v44[3] = v39;
      outlined init with take of Subscription(v62, (uint64_t)(v44 + 4));
      v44[9] = v51;
      uint64_t v45 = v60;
      os_unfair_lock_t v46 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v60 + 56);
      swift_retain();
      v46(v43, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(_:), v44, v25, v45);
      swift_release();
      uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v47(v42, v25);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
      (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v29, v26);
      v47((uint64_t)v59, v25);
      return 0LL;
    }

    if ((v40 & 0x8000000000000000LL) == 0)
    {
      if (v40)
      {
        *(uint64_t *)((char *)v2 + v37) = v40 - 1;
        goto LABEL_17;
      }

uint64_t closure #1 in Publishers.CollectByTime.Inner.receive(_:)( uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 120);
  uint64_t v12 = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void))(v7 + 48))(&v12, *(void *)(v6 + 96));
  if (result != 0x8000000000000000LL)
  {
    uint64_t v11 = result;
    if ((result & 0x8000000000000000LL) == 0)
    {
      if (!result) {
        return result;
      }
      uint64_t v9 = a3[3];
      uint64_t v10 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v9);
      uint64_t result = v11 * a4;
      if ((result & 0x8000000000000000LL) == 0) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(result, v9, v10);
      }
      __break(1u);
    }

    __break(1u);
    return result;
  }

  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v9);
LABEL_6:
  uint64_t result = 0x8000000000000000LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(result, v9, v10);
}

void Publishers.CollectByTime.Inner.receive(completion:)(void (*a1)(char *, char *, uint64_t))
{
  uint64_t v2 = v1;
  uint64_t v61 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(void *)(v65 + 64);
  uint64_t v8 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v56 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v62 = (char *)&v55 - v10;
  uint64_t v60 = *(void *)(v3 + 88);
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v58 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = v5;
  uint64_t v64 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v55 - v16;
  uint64_t v57 = v3;
  uint64_t v18 = (uint64_t)v1 + *(void *)(v3 + 184);
  swift_beginAccess();
  if (*(void *)(v18 + 24))
  {
    outlined init with copy of Subscription(v18, (uint64_t)v67);
    __int128 v19 = *(_OWORD *)&v67[24];
    __swift_project_boxed_opaque_existential_1(v67, *(uint64_t *)&v67[24]);
    (*(void (**)(void, void))(*((void *)&v19 + 1) + 8LL))(v19, *((void *)&v19 + 1));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  }

  memset(v67, 0, sizeof(v67));
  swift_beginAccess();
  outlined assign with take of Subscription?( (uint64_t)v67,  v18,  &demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  uint64_t v20 = *(void *)(*v1 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v20));
  uint64_t v21 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v21, (uint64_t)v67);
  int v22 = v68;
  outlined destroy of SubscriptionStatus((uint64_t)v67);
  if (v22)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
  }

  else
  {
    *(void *)uint64_t v67 = 1LL;
    memset(&v67[8], 0, 32);
    unsigned __int8 v68 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v67, v21);
    swift_endAccess();
    (*(void (**)(char *, void, uint64_t))(v15 + 16))(v17, v61, v14);
    uint64_t v23 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v17, 1LL, AssociatedTypeWitness) == 1)
    {
      int8x16_t v24 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 152));
      swift_beginAccess();
      uint64_t v66 = *v24;
      swift_getAssociatedTypeWitness();
      uint64_t v25 = type metadata accessor for Array();
      MEMORY[0x186E22960](MEMORY[0x189618488], v25);
      char v26 = Collection.isEmpty.getter();
      uint64_t v27 = v60;
      uint64_t v28 = v59;
      uint64_t v29 = v58;
      uint64_t v30 = v57;
      if ((v26 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
        uint64_t v31 = *(void *)(v30 + 112);
        uint64_t v33 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v27, v31, v32);
      }

      else
      {
        uint64_t v48 = *v24;
        swift_bridgeObjectRetain();
        *int8x16_t v24 = static Array._allocateUninitialized(_:)();
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
        uint64_t v31 = *(void *)(v30 + 112);
        uint64_t v33 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v27, v31, v49);
        Publishers.TimeGroupingStrategy.scheduler.getter(v33, v29);
        uint64_t v50 = (uint64_t)v2 + *(void *)(*v2 + 144);
        uint64_t v51 = swift_allocObject();
        *(void *)(v51 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
        *(void *)(v51 + outlined destroy of Subscription?(v0 + 24) = v48;
        uint64_t v52 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v31 + 56);
        swift_retain();
        v52(v50, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(completion:), v51, v27, v31);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
      }

      Publishers.TimeGroupingStrategy.scheduler.getter(v33, v29);
      uint64_t v53 = (uint64_t)v2 + *(void *)(*v2 + 144);
      uint64_t v54 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t *, uint64_t, uint64_t))(v31 + 56);
      swift_retain();
      v54(v53, partial apply for closure #2 in Publishers.CollectByTime.Inner.receive(completion:), v2, v27, v31);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
    }

    else
    {
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v61(v62, v17, AssociatedTypeWitness);
      swift_getAssociatedTypeWitness();
      uint64_t v34 = v23;
      uint64_t v35 = static Array._allocateUninitialized(_:)();
      uint64_t v36 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 152));
      swift_beginAccess();
      *uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v20));
      uint64_t v37 = v57;
      uint64_t v38 = *(void *)(v57 + 112);
      uint64_t v39 = v60;
      uint64_t v41 = type metadata accessor for Publishers.TimeGroupingStrategy(0LL, v60, v38, v40);
      uint64_t v42 = v58;
      Publishers.TimeGroupingStrategy.scheduler.getter(v41, v58);
      uint64_t v55 = (uint64_t)v2 + *(void *)(*v2 + 144);
      uint64_t v43 = v56;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v56, v62, AssociatedTypeWitness);
      unint64_t v44 = (*(unsigned __int8 *)(v34 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      uint64_t v45 = (char *)swift_allocObject();
      *((void *)v45 + 2) = v63;
      *((void *)v45 + 3) = v39;
      uint64_t v46 = v64;
      *((void *)v45 + 4) = *(void *)(v37 + 96);
      *((void *)v45 + 5) = v46;
      *((void *)v45 + 6) = v38;
      *((void *)v45 + 7) = *(void *)(v37 + 120);
      *((void *)v45 + 8) = v2;
      v61(&v45[v44], v43, AssociatedTypeWitness);
      uint64_t v47 = *(void (**)(uint64_t, uint64_t (*)(), char *, uint64_t, uint64_t))(v38 + 56);
      swift_retain();
      v47(v55, partial apply for closure #3 in Publishers.CollectByTime.Inner.receive(completion:), v45, v39, v38);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v42, v39);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v62, AssociatedTypeWitness);
    }
  }

uint64_t closure #2 in Publishers.CollectByTime.Inner.receive(completion:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v4);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( (char *)&v10 - v7,  1LL,  1LL,  AssociatedTypeWitness);
  (*(void (**)(char *, void))(*(void *)(v1 + 120) + 56LL))(v8, *(void *)(v1 + 96));
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t closure #3 in Publishers.CollectByTime.Inner.receive(completion:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, a2, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0LL, 1LL, AssociatedTypeWitness);
  (*(void (**)(char *, void))(*(void *)(v3 + 120) + 56LL))(v10, *(void *)(v3 + 96));
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>( void *a1)
{
  return Publishers.CollectByTime.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.CollectByTime.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>( void (*a1)(char *, char *, uint64_t))
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>()
{
  return 0x427463656C6C6F43LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>( uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>( uint64_t a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByTime<A, B>.Inner<A1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CollectByTime<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.Collect.receive<A>(subscriber:)()
{
}

uint64_t sub_183B25900(uint64_t a1)
{
  uint64_t v5 = static Array._allocateUninitialized(_:)();
  swift_allocObject();
  uint64_t v8 = specialized Publishers.Collect.Inner.init(downstream:initial:reduce:)(v1, v5);
  uint64_t v6 = MEMORY[0x186E22960](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v2, v6);
  return swift_release();
}

void type metadata accessor for Publishers.Collect.Inner()
{
}

uint64_t Publishers.Collect.Inner.description.getter()
{
  return 0x7463656C6C6F43LL;
}

uint64_t Publishers.Collect.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = MEMORY[0x186E22090](v8, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    uint64_t v13 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
    *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x746E756F63LL;
    *(void *)(v10 + 40) = 0xE500000000000000LL;
    *(void *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = MEMORY[0x189618740];
    *(void *)(v10 + outlined destroy of SubscriptionStatus(v0 + 48) = v9;
  }

  else
  {
    uint64_t v13 = v0;
  }

  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v6, 1LL, 1LL, v11);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.Collect.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, a1, AssociatedTypeWitness);
  uint64_t result = swift_beginAccess();
  if (*(void *)(v1 + 16))
  {
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion(0LL, MEMORY[0x18961AFC8] + 8LL, v7, AssociatedConformanceWitness);
    return swift_storeEnumTagMultiPayload();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Collect<A>()
{
}

uint64_t Publishers.CollectByCount.count.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

void Publishers.CollectByCount.receive<A>(subscriber:)(uint64_t a1)
{
}

uint64_t sub_183B25DC8(uint64_t a1)
{
  uint64_t v11 = *(void *)(v1 + *(int *)(v3 + 36));
  swift_allocObject();
  *(void *)(v9 - 112) = Publishers.CollectByCount.Inner.init(downstream:count:)(v5, v11);
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.CollectByCount<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v9 - 112, v6, a1, v7, v12);
  return swift_release();
}

uint64_t *Publishers.CollectByCount.Inner.__allocating_init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  return Publishers.CollectByCount.Inner.init(downstream:count:)(a1, a2);
}

void Publishers.CollectByCount.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 160)));
  uint64_t v20 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x657274736E776F64LL;
  *(void *)(v8 + 40) = 0xEA00000000006D61LL;
  uint64_t v9 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v10 = *(void *)(v1 + 88);
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v9,  v10);
  *(void *)(v8 + 80) = 0xD000000000000014LL;
  *(void *)(v8 + 88) = 0x8000000183BA7A30LL;
  uint64_t v12 = (uint64_t)v0 + *(void *)(*v0 + 136);
  swift_beginAccess();
  *(void *)(v8 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v13 = swift_allocObject();
  *(void *)(v8 + 96) = v13;
  outlined init with copy of Any?(v12, v13 + 16, &demangling cache variable for type metadata for Subscription?);
  *(void *)(v8 + 128) = 0x726566667562LL;
  *(void *)(v8 + 136) = 0xE600000000000000LL;
  uint64_t v14 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 128));
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Array();
  *(void *)(v8 + 144) = v15;
  *(void *)(v8 + 168) = v16;
  *(void *)(v8 + 176) = 0x746E756F63LL;
  *(void *)(v8 + 184) = 0xE500000000000000LL;
  uint64_t v17 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 120));
  *(void *)(v8 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x189618740];
  *(void *)(v8 + 192) = v17;
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v7, 1LL, 1LL, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 160)));
}

void Publishers.CollectByCount.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "CollectByCount");
  *(_BYTE *)(a1 + 15) = -18;
}

uint64_t *Publishers.CollectByCount.Inner.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 128);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v2 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = static Array._allocateUninitialized(_:)();
  uint64_t v7 = (uint64_t)v2 + *(void *)(*v2 + 136);
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0LL;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *((_BYTE *)v2 + *(void *)(*v2 + 144)) = 0;
  *((_BYTE *)v2 + *(void *)(*v2 + 152)) = 0;
  uint64_t v8 = *(void *)(*v2 + 160);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 88) - 8LL) + 32LL))( (uint64_t)v2 + *(void *)(*v2 + 112),  a1);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)) = a2;
  return v2;
}

uint64_t *Publishers.CollectByCount.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 160)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 112));
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?( (uint64_t)v0 + *(void *)(*v0 + 136),  &demangling cache variable for type metadata for Subscription?);
  return v0;
}

uint64_t Publishers.CollectByCount.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.CollectByCount.Inner.deinit);
}

void Publishers.CollectByCount.Inner.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000LL)
  {
    if (a1 < 0)
    {
      __break(1u);
    }

    else if (a1)
    {
      goto LABEL_4;
    }

    __break(1u);
    goto LABEL_14;
  }

void Publishers.CollectByCount.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 160LL));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 136LL);
  swift_beginAccess();
  outlined init with copy of Any?(v2, (uint64_t)&v7, &demangling cache variable for type metadata for Subscription?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of Subscription(&v7, (uint64_t)v10);
    swift_getAssociatedTypeWitness();
    uint64_t v3 = static Array._allocateUninitialized(_:)();
    uint64_t v4 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128LL));
    swift_beginAccess();
    *uint64_t v4 = v3;
    swift_bridgeObjectRelease();
    uint64_t v9 = 0LL;
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    swift_beginAccess();
    outlined assign with take of Subscription?( (uint64_t)&v7,  v2,  &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 144LL)) = 1;
    os_unfair_lock_unlock(v1);
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }

  else
  {
    outlined destroy of CustomStringConvertible?( (uint64_t)&v7,  &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(v1);
  }

uint64_t Publishers.CollectByCount.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  if ((*((_BYTE *)v1 + *(void *)(*v1 + 144)) & 1) != 0
    || (uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 136),
        swift_beginAccess(),
        outlined init with copy of Any?( v5,  (uint64_t)v13,  &demangling cache variable for type metadata for Subscription?),  uint64_t v6 = v14,  outlined destroy of CustomStringConvertible?( (uint64_t)v13,  &demangling cache variable for type metadata for Subscription?),  v6))
  {
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v7);
  }

  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v13);
    swift_beginAccess();
    outlined assign with take of Subscription?( (uint64_t)v13,  v5,  &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v14 = v3;
    uint64_t v15 = &protocol witness table for Publishers.CollectByCount<A>.Inner<A1>;
    v13[0] = v1;
    uint64_t v10 = *(void *)(v3 + 104);
    uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 88);
    swift_retain();
    v11(v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

uint64_t Publishers.CollectByCount.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v34 = a1;
  uint64_t v3 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v31 = (char *)&v30 - v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  uint64_t v10 = *(char **)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v33 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v30 - v13;
  os_unfair_lock_t v32 = *(os_unfair_lock_t *)(v1 + v3[20]);
  os_unfair_lock_lock(v32);
  uint64_t v37 = 0LL;
  memset(v36, 0, sizeof(v36));
  uint64_t v15 = v2 + *(void *)(*(void *)v2 + 136LL);
  swift_beginAccess();
  outlined assign with take of Subscription?( (uint64_t)v36,  v15,  &demangling cache variable for type metadata for Subscription?);
  swift_endAccess();
  *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 144LL)) = 1;
  uint64_t v16 = (void (*)(char *, uint64_t, uint64_t))*((void *)v10 + 2);
  uint64_t v17 = v34;
  uint64_t v34 = v9;
  v16(v14, v17, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1LL, AssociatedTypeWitness) == 1)
  {
    uint64_t v31 = v10;
    uint64_t v18 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 128LL));
    swift_beginAccess();
    v35[0] = *v18;
    swift_getAssociatedTypeWitness();
    uint64_t v19 = type metadata accessor for Array();
    MEMORY[0x186E22960](MEMORY[0x189618488], v19);
    char v20 = Collection.isEmpty.getter();
    uint64_t v21 = v33;
    uint64_t v22 = v34;
    uint64_t v23 = v32;
    if ((v20 & 1) != 0)
    {
      os_unfair_lock_unlock(v32);
    }

    else
    {
      uint64_t v29 = *v18;
      swift_bridgeObjectRetain();
      *uint64_t v18 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v23);
      v35[0] = v29;
      (*(void (**)(uint64_t *, void))(v3[13] + 48LL))(v35, v3[11]);
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v21, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, void))(v3[13] + 56LL))(v21, v3[11]);
    return (*((uint64_t (**)(char *, uint64_t))v31 + 1))(v21, v22);
  }

  else
  {
    int8x16_t v24 = v31;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v31, v14, AssociatedTypeWitness);
    swift_getAssociatedTypeWitness();
    uint64_t v25 = static Array._allocateUninitialized(_:)();
    char v26 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 128LL));
    swift_beginAccess();
    *char v26 = v25;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v32);
    uint64_t v27 = v33;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v33, v24, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v27, 0LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, void))(v3[13] + 56LL))(v27, v3[11]);
    (*((void (**)(char *, uint64_t))v10 + 1))(v27, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v24, AssociatedTypeWitness);
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByCount<A>.Inner<A1>( void *a1)
{
  return Publishers.CollectByCount.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByCount<A>.Inner<A1>( uint64_t a1)
{
  return Publishers.CollectByCount.Inner.receive(completion:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByCount<A>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
  return 0x427463656C6C6F43LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.CollectByCount<A>.Inner<A1>( uint64_t a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CollectByCount<A>( uint64_t a1)
{
}

uint64_t *Publishers.CollectByTrigger.Inner.__allocating_init(downstream:trigger:sendOnFailure:)( uint64_t a1, uint64_t a2, char a3)
{
  return Publishers.CollectByTrigger.Inner.init(downstream:trigger:sendOnFailure:)(a1, a2, a3);
}

uint64_t *Publishers.CollectByTrigger.Inner.init(downstream:trigger:sendOnFailure:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 152);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  uint64_t v10 = *(void *)(*v3 + 160);
  uint64_t v11 = (void *)swift_slowAlloc();
  *uint64_t v11 = 0LL;
  *(uint64_t *)((char *)v3 + v10) = (uint64_t)v11;
  uint64_t v12 = *(void *)(*v3 + 168);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v3 + v12) = static Array._allocateUninitialized(_:)();
  uint64_t v13 = (uint64_t)v3 + *(void *)(*v3 + 176);
  *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0LL;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(_BYTE *)(v13 + 40) = 2;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 184)) = 0LL;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 192)) = 0LL;
  uint64_t v14 = (uint64_t)v3 + *(void *)(*v3 + 200);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v14, 1LL, 1LL, v18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 128),  a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 88) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 136),  a2);
  *((_BYTE *)v3 + *(void *)(*v3 + 144)) = a3;
  return v3;
}

uint64_t *Publishers.CollectByTrigger.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1LL, -1LL);
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 160)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 128));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 136));
  swift_bridgeObjectRelease();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 176));
  swift_release();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 200);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255LL, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v2, v6);
  return v0;
}

uint64_t Publishers.CollectByTrigger.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.CollectByTrigger.Inner.deinit);
}

void Publishers.CollectByTrigger.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion(255LL, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v18 = (char *)&v30 - v17;
  if (a1 != 0x8000000000000000LL)
  {
    if (a1 < 0)
    {
      __break(1u);
    }

    else if (a1)
    {
      goto LABEL_4;
    }

    __break(1u);
    goto LABEL_18;
  }

void Publishers.CollectByTrigger.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152LL));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 176LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)v9);
  if (v10)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v9);
    os_unfair_lock_unlock(v1);
  }

  else
  {
    outlined init with take of Subscription(v9, (uint64_t)v11);
    uint64_t v3 = *(void *)(*(void *)v0 + 184LL);
    uint64_t v4 = *(void *)(v0 + v3);
    swift_getAssociatedTypeWitness();
    swift_retain();
    uint64_t v5 = static Array._allocateUninitialized(_:)();
    uint64_t v6 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 168LL));
    swift_beginAccess();
    *uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    *(void *)(v0 + v3) = 0LL;
    swift_release();
    os_unfair_lock_unlock(v1);
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v7);
    if (v4)
    {
      swift_retain();
      Subscribers.Sink.cancel()();
      swift_release_n();
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }

uint64_t Publishers.CollectByTrigger.Inner.receive(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 152LL));
  os_unfair_lock_lock(v5);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 176LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v25);
  if (v28 == 2
    && (int8x16_t v7 = vorrq_s8(v26, v27),
        !(*(void *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | v25)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v25);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v25);
    char v28 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v25, v6);
    swift_endAccess();
    uint64_t v11 = v4[14];
    uint64_t v12 = v4[11];
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v16 = type metadata accessor for Subscribers.Sink(0LL, AssociatedTypeWitness, v14, AssociatedConformanceWitness);
    uint64_t v17 = (void *)swift_allocObject();
    __int128 v17[2] = v4[10];
    v17[3] = v12;
    uint64_t v24 = v4[12];
    v17[4] = v24;
    v17[5] = v4[13];
    v17[6] = v11;
    uint64_t v23 = v4[15];
    v17[7] = v23;
    swift_retain();
    uint64_t v18 = Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)( (uint64_t)specialized closure #1 in Publisher.multicast<A>(subject:),  (uint64_t)v17,  (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in Publishers.CollectByTrigger.Inner.receive(subscription:),  v2);
    *(void *)(v2 + *(void *)(*(void *)v2 + 184LL)) = v18;
    swift_retain();
    swift_release();
    uint64_t v25 = v18;
    uint64_t v19 = MEMORY[0x186E22960](&protocol conformance descriptor for Subscribers.Sink<A, B>, v16);
    Publisher.subscribe<A>(_:)((uint64_t)&v25, v12, v16, v11, v19);
    os_unfair_lock_unlock(v5);
    v27.i64[0] = (uint64_t)v4;
    v27.i64[1] = (uint64_t)&protocol witness table for Publishers.CollectByTrigger<A, B>.Inner<A1>;
    uint64_t v25 = v2;
    uint64_t v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 40);
    swift_retain();
    v20(&v25, v24, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
    uint64_t v21 = a1[3];
    uint64_t v22 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v21);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 24))(0x8000000000000000LL, v21, v22);
    return swift_release();
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v25);
    os_unfair_lock_unlock(v5);
    uint64_t v9 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v9);
  }

uint64_t Publishers.CollectByTrigger.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  int8x16_t v7 = &v12[-v6 - 8];
  uint64_t v8 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v3 + 152));
  os_unfair_lock_lock(v8);
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v9, (uint64_t)v12);
  LODWORD(v9) = v12[40];
  outlined destroy of SubscriptionStatus((uint64_t)v12);
  if (!(_DWORD)v9)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, AssociatedTypeWitness);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
  }

  os_unfair_lock_unlock(v8);
  return 0LL;
}

void Publishers.CollectByTrigger.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v41 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion(255LL, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v36 = (char *)&v36 - v10;
  uint64_t v39 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v40 = (char *)&v36 - v11;
  uint64_t v12 = v3[23];
  uint64_t v13 = v3;
  if (*(uint64_t *)((char *)v1 + v12))
  {
    swift_retain();
    Subscribers.Sink.cancel()();
    swift_release();
    uint64_t v13 = (void *)*v1;
  }

  uint64_t v14 = *(os_unfair_lock_s **)((char *)v1 + v13[19]);
  os_unfair_lock_lock(v14);
  uint64_t v15 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v15, (uint64_t)&v43);
  int v16 = v46;
  outlined destroy of SubscriptionStatus((uint64_t)&v43);
  if (v16) {
    goto LABEL_4;
  }
  uint64_t v43 = 1LL;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  unsigned __int8 v46 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v43, v15);
  swift_endAccess();
  *(uint64_t *)((char *)v2 + v12) = 0LL;
  swift_release();
  uint64_t v17 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 168));
  swift_beginAccess();
  v42[0] = *v17;
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v18);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    os_unfair_lock_unlock(v14);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void, void))(v3[15] + 56LL))(v41, v3[12], v3[15]);
LABEL_12:
    os_unfair_recursive_lock_unlock();
    return;
  }

  uint64_t v19 = v39;
  uint64_t v20 = v40;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v21(v40, v41, v7);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48LL))( v20,  1LL,  AssociatedTypeWitness);
  uint64_t v23 = *v2;
  if (v22 == 1)
  {
    uint64_t v24 = *(uint64_t *)((char *)v2 + *(void *)(v23 + 192));
    if (v24 == 0x8000000000000000LL)
    {
LABEL_11:
      uint64_t v25 = *v17;
      swift_bridgeObjectRetain();
      *uint64_t v17 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v14);
      os_unfair_recursive_lock_lock_with_options();
      v42[0] = v25;
      uint64_t v26 = v3[15];
      uint64_t v27 = v3[12];
      (*(void (**)(void *, uint64_t, uint64_t))(v26 + 48))(v42, v27, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 56))(v41, v27, v26);
      goto LABEL_12;
    }

    if ((v24 & 0x8000000000000000LL) == 0)
    {
      if (!v24)
      {
        uint64_t v32 = v36;
        v21(v36, v41, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v32, 0LL, 1LL, v7);
        uint64_t v33 = (uint64_t)v2 + *(void *)(*v2 + 200);
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v37 + 40))(v33, v32, v38);
        swift_endAccess();
LABEL_4:
        os_unfair_lock_unlock(v14);
        return;
      }

      goto LABEL_11;
    }

    __break(1u);
    goto LABEL_25;
  }

  if (*((_BYTE *)v2 + *(void *)(v23 + 144)) == 1)
  {
    uint64_t v28 = *(uint64_t *)((char *)v2 + *(void *)(v23 + 192));
    if (v28 != 0x8000000000000000LL)
    {
      if (v28 < 0)
      {
LABEL_25:
        __break(1u);
        return;
      }

      if (!v28)
      {
        uint64_t v34 = v36;
        v21(v36, v41, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v34, 0LL, 1LL, v7);
        uint64_t v35 = (uint64_t)v2 + *(void *)(*v2 + 200);
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v37 + 40))(v35, v34, v38);
        swift_endAccess();
        os_unfair_lock_unlock(v14);
        goto LABEL_20;
      }
    }

    uint64_t v29 = *v17;
    swift_bridgeObjectRetain();
    *uint64_t v17 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v14);
    os_unfair_recursive_lock_lock_with_options();
    v42[0] = v29;
    uint64_t v30 = v3[15];
    uint64_t v31 = v3[12];
    (*(void (**)(void *, uint64_t, uint64_t))(v30 + 48))(v42, v31, v30);
    uint64_t v19 = v39;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 56))(v41, v31, v30);
  }

  else
  {
    *uint64_t v17 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v14);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void, void))(v3[15] + 56LL))(v41, v3[12], v3[15]);
  }

  os_unfair_recursive_lock_unlock();
LABEL_20:
  (*(void (**)(char *, uint64_t))(v19 + 8))(v40, v7);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>( void *a1)
{
  return Publishers.CollectByTrigger.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.CollectByTrigger.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>( uint64_t a1)
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>()
{
  return 0xD000000000000010LL;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>()
{
}

uint64_t static Publishers.Collect<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Collect<A>()
{
  return static Publishers.Collect<>.== infix(_:_:)();
}

BOOL static Publishers.CollectByCount<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Publishers.CollectByCount(0LL, a3, a4, a4);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v20 - v11;
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v10, a2, v6);
  if ((v13 & 1) != 0)
  {
    uint64_t v15 = *(void *)&v12[*(int *)(v6 + 36)];
    int v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v12, v6);
    uint64_t v17 = *(void *)&v10[*(int *)(v6 + 36)];
    v16(v10, v6);
    return v15 == v17;
  }

  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v10, v6);
    v19(v12, v6);
    return 0LL;
  }

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CollectByCount<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Publishers.CollectByCount<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t *specialized Publishers.Collect.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v5 + 16))(v4);
  uint64_t v9 = a2;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v4, (uint64_t)&v9, v6);
}

void type metadata accessor for Publishers.CollectByCount.Inner()
{
}

uint64_t type metadata completion function for Publishers.TimeGroupingStrategy()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F)
    {
      return AssociatedTypeWitness;
    }

    else
    {
      swift_getTupleTypeLayout2();
      uint64_t v7 = &v6;
      swift_getTupleTypeLayout3();
      uint64_t v8 = &v5;
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.TimeGroupingStrategy( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = *(void *)(v9 + 64);
  unint64_t v13 = (v11 & ~v10) + v12;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v13) {
    unint64_t v14 = (v11 & ~v10) + v12;
  }
  else {
    unint64_t v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  int v15 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80);
  if ((v15 & 0x1000F8) != 0 || v14 + 1 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v15 & 0xF8 | 7u) + 16LL) & ~(unint64_t)(v15 & 0xF8 | 7u)));
    swift_retain();
  }

  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v23 = ~v10;
    unsigned int v19 = *((unsigned __int8 *)a2 + v14);
    if (v19 >= 2)
    {
      else {
        uint64_t v20 = 4LL;
      }
      __asm { BR              X11 }
    }

    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v21 = ((unint64_t)a2 + v11) & v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( ((unint64_t)a1 + v11) & v23,  v21,  v18);
    if (v19 == 1)
    {
      *(void *)((v12 + 7 + (((unint64_t)a1 + v11) & v23)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v12 + 7 + v21) & 0xFFFFFFFFFFFFF8LL);
      *((_BYTE *)a1 + v14) = 1;
    }

    else
    {
      *((_BYTE *)a1 + v14) = 0;
    }
  }

  return a1;
}

uint64_t destroy for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))((v5 + a1 + v8) & ~v8, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v20 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = v6 + v9;
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v13 = ((v6 + v9) & ~v9) + v12;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  unsigned int v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    else {
      uint64_t v16 = 4LL;
    }
    __asm { BR              X11 }
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, a2, v5);
  uint64_t v17 = (v11 + a2) & v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v11 + a1) & v10, v17, AssociatedTypeWitness);
  if (v15 == 1)
  {
    *(void *)((v12 + 7 + ((v11 + a1) & v10)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v12 + 7 + v17) & 0xFFFFFFFFFFFFF8LL);
    char v18 = 1;
  }

  else
  {
    char v18 = 0;
  }

  *(_BYTE *)(a1 + v14) = v18;
  return a1;
}

uint64_t assignWithCopy for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v21 = ~v10;
    uint64_t v11 = v7 + v10;
    uint64_t v20 = *(void *)(v9 + 64);
    unint64_t v12 = ((v7 + v10) & ~v10) + v20;
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v12) {
      unint64_t v13 = ((v7 + v10) & ~v10) + v20;
    }
    else {
      unint64_t v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = (v11 + a1) & ~v10;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    unsigned int v15 = *(unsigned __int8 *)(a2 + v13);
    if (v15 >= 2)
    {
      else {
        uint64_t v16 = 4LL;
      }
      __asm { BR              X11 }
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v17 = (v11 + a2) & v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v14, v17, AssociatedTypeWitness);
    if (v15 == 1)
    {
      *(void *)((v20 + 7 + v14) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v20 + 7 + v17) & 0xFFFFFFFFFFFFF8LL);
      char v18 = 1;
    }

    else
    {
      char v18 = 0;
    }

    *(_BYTE *)(a1 + v13) = v18;
  }

  return a1;
}

uint64_t initializeWithTake for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v20 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = v6 + v9;
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v13 = ((v6 + v9) & ~v9) + v12;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  unsigned int v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    else {
      uint64_t v16 = 4LL;
    }
    __asm { BR              X11 }
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(a1, a2, v5);
  uint64_t v17 = (v11 + a2) & v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v11 + a1) & v10, v17, AssociatedTypeWitness);
  if (v15 == 1)
  {
    *(void *)((v12 + 7 + ((v11 + a1) & v10)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v12 + 7 + v17) & 0xFFFFFFFFFFFFF8LL);
    char v18 = 1;
  }

  else
  {
    char v18 = 0;
  }

  *(_BYTE *)(a1 + v14) = v18;
  return a1;
}

uint64_t assignWithTake for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v21 = ~v10;
    uint64_t v11 = v7 + v10;
    uint64_t v20 = *(void *)(v9 + 64);
    unint64_t v12 = ((v7 + v10) & ~v10) + v20;
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v12) {
      unint64_t v13 = ((v7 + v10) & ~v10) + v20;
    }
    else {
      unint64_t v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    uint64_t v14 = (v11 + a1) & ~v10;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    unsigned int v15 = *(unsigned __int8 *)(a2 + v13);
    if (v15 >= 2)
    {
      else {
        uint64_t v16 = 4LL;
      }
      __asm { BR              X11 }
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    uint64_t v17 = (v11 + a2) & v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v14, v17, AssociatedTypeWitness);
    if (v15 == 1)
    {
      *(void *)((v20 + 7 + v14) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v20 + 7 + v17) & 0xFFFFFFFFFFFFF8LL);
      char v18 = 1;
    }

    else
    {
      char v18 = 0;
    }

    *(_BYTE *)(a1 + v13) = v18;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.TimeGroupingStrategy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  if (v8 <= v7) {
  if (!a2)
  }
    return 0LL;
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  unint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v13 < 2)
    {
LABEL_21:
      unsigned int v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9)) {
    goto LABEL_21;
  }
LABEL_14:
  int v14 = (v11 - 1) << v10;
  if ((_DWORD)v9)
  {
    __asm { BR              X11 }
  }

  return (v14 + 255);
}

void storeEnumTagSinglePayload for Publishers.TimeGroupingStrategy( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > v9) {
    unint64_t v9 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  size_t v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v11 = 0u;
  }

  else if (v10 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      unsigned int v11 = 4u;
    }

    else if (v13 >= 0x100)
    {
      unsigned int v11 = 2;
    }

    else
    {
      unsigned int v11 = v13 > 1;
    }
  }

  else
  {
    unsigned int v11 = 1u;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      int v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }

      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }

      else
      {
        *a1 = v14;
      }
    }
  }

  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }

  __asm { BR              X10 }

uint64_t getEnumTag for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > v5) {
    unint64_t v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  uint64_t result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X12 }
  }

  return result;
}

void destructiveInjectEnumTag for Publishers.TimeGroupingStrategy(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  if (a2 > 1)
  {
    if (v8 <= v7) {
    else
    }
      size_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    unsigned int v10 = a2 - 2;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 2;
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }

      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }

      else
      {
        *a1 = v12;
      }
    }

    else
    {
      a1[v9] = 2;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }

  else
  {
    if (v8 > v7) {
      unint64_t v7 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    }
    a1[v7] = a2;
  }

uint64_t type metadata completion function for Publishers.CollectByTime(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Publishers.TimeGroupingStrategy( 319LL,  *(void *)(a1 + 24),  *(void *)(a1 + 40),  v3);
    if (v5 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t result = type metadata accessor for Optional();
      if (v6 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CollectByTime(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v37 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v37 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(v3 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = v6;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  int v10 = *(_DWORD *)(v8 + 80) | v7;
  uint64_t v11 = v10 & 0xF8 | 7u;
  uint64_t v12 = v5 + v11;
  uint64_t v38 = *(void *)(v6 + 64) + v9;
  uint64_t v39 = v8;
  uint64_t v36 = *(void *)(v8 + 64);
  unint64_t v13 = (v38 & ~v9) + v36;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v13) {
    unint64_t v14 = (v38 & ~v9) + v36;
  }
  else {
    unint64_t v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  uint64_t v42 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v42 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  if (*(_DWORD *)(v15 + 84)) {
    uint64_t v17 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v15 + 64) + 1LL;
  }
  uint64_t v18 = v11 | *(_DWORD *)(v4 + 80) | v16;
  if ((_DWORD)v18 != 7
    || ((*(_DWORD *)(v15 + 80) | *(_DWORD *)(v4 + 80) | v10) & 0x100000) != 0
    || ((v14 + v16 + 1 + (v12 & ~v11)) & ~v16) + v17 > 0x18)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v23 = (uint64_t *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
  }

  else
  {
    size_t __n = v17;
    uint64_t v22 = ~v11;
    uint64_t v34 = ~v9;
    uint64_t v35 = v14 + v16 + 1;
    uint64_t v23 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v37);
    unint64_t v24 = ((unint64_t)a1 + v12) & v22;
    unint64_t v25 = ((unint64_t)a2 + v12) & v22;
    unsigned int v26 = *(unsigned __int8 *)(v25 + v14);
    if (v26 >= 2)
    {
      else {
        uint64_t v27 = 4LL;
      }
      __asm { BR              X11 }
    }

    uint64_t v28 = ~v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16))( ((unint64_t)a1 + v12) & v22,  v25,  v3);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))( (v38 + v24) & v34,  (v38 + v25) & v34,  AssociatedTypeWitness);
    if (v26 == 1)
    {
      *(void *)((v36 + 7 + ((v38 + v24) & v34)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v36 + 7 + ((v38 + v25) & v34)) & 0xFFFFFFFFFFFFF8LL);
      char v29 = 1;
    }

    else
    {
      char v29 = 0;
    }

    *(_BYTE *)(v24 + v14) = v29;
    uint64_t v30 = (void *)((v35 + v24) & v28);
    uint64_t v31 = (const void *)((v35 + v25) & v28);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v31, 1LL, v42))
    {
      memcpy(v30, v31, __n);
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v30, v31, v42);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v30, 0LL, 1LL, v42);
    }
  }

  return v23;
}

uint64_t destroy for Publishers.CollectByTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = (*(_DWORD *)(v10 + 80) | v8) & 0xF8 | 7u;
  uint64_t v13 = (v5 + v12) & ~v12;
  uint64_t v14 = *(void *)(v7 + 64) + v11;
  unint64_t v15 = (v14 & ~v11) + *(void *)(v10 + 64);
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v15) {
    unint64_t v16 = (v14 & ~v11) + *(void *)(v10 + 64);
  }
  else {
    unint64_t v16 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v14 + v13) & ~v11, AssociatedTypeWitness);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (v16 + v13 + *(unsigned __int8 *)(v18 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1LL, v17);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(unint64_t, uint64_t))(v18 + 8))(v19, v17);
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = (*(_DWORD *)(v12 + 80) | v10) & 0xF8 | 7u;
  uint64_t v35 = a1;
  uint64_t v15 = (v7 + v14 + a1) & ~v14;
  uint64_t v16 = (v7 + v14 + a2) & ~v14;
  uint64_t v17 = ~v13;
  uint64_t v18 = *(void *)(v9 + 64) + v13;
  uint64_t v34 = *(void *)(v12 + 64);
  unint64_t v19 = (v18 & ~v13) + v34;
  if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v19) {
    unint64_t v20 = (v18 & ~v13) + v34;
  }
  else {
    unint64_t v20 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  unsigned int v21 = *(unsigned __int8 *)(v16 + v20);
  if (v21 >= 2)
  {
    else {
      uint64_t v22 = 4LL;
    }
    __asm { BR              X11 }
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v15, v16, v8);
  uint64_t v23 = (v18 + v15) & v17;
  uint64_t v24 = (v18 + v16) & v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v23, v24, AssociatedTypeWitness);
  if (v21 == 1)
  {
    *(void *)((v34 + 7 + v23) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v34 + 7 + v24) & 0xFFFFFFFFFFFFF8LL);
    char v25 = 1;
  }

  else
  {
    char v25 = 0;
  }

  *(_BYTE *)(v15 + v20) = v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v20 + v28 + 1;
  uint64_t v30 = (void *)((v29 + v15) & ~v28);
  uint64_t v31 = (const void *)((v29 + v16) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v31, 1LL, v26))
  {
    if (*(_DWORD *)(v27 + 84)) {
      size_t v32 = *(void *)(v27 + 64);
    }
    else {
      size_t v32 = *(void *)(v27 + 64) + 1LL;
    }
    memcpy(v30, v31, v32);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v30, v31, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0LL, 1LL, v26);
  }

  return v35;
}

uint64_t assignWithCopy for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v39 = *(void *)(v6 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = (*(_DWORD *)(v11 + 80) | v9) & 0xF8 | 7u;
  uint64_t v14 = v39 + v13;
  uint64_t v40 = a1;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  uint64_t v17 = *(void *)(v8 + 64);
  if (v15 == v16)
  {
    unint64_t v24 = ((v17 + v12) & ~v12) + *(void *)(v11 + 64);
    if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v24) {
      unint64_t v21 = ((v17 + v12) & ~v12) + *(void *)(v11 + 64);
    }
    else {
      unint64_t v21 = ((v24 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    }
  }

  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v19 = v8;
    uint64_t v37 = *(void *)(v11 + 64);
    unint64_t v20 = ((v17 + v12) & ~v12) + v37;
    if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v20) {
      unint64_t v21 = ((v17 + v12) & ~v12) + v37;
    }
    else {
      unint64_t v21 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v7);
    uint64_t v38 = (v15 + v12 + v17) & ~v12;
    (*(void (**)(void))(v11 + 8))();
    unsigned int v22 = *(unsigned __int8 *)(v16 + v21);
    if (v22 >= 2)
    {
      else {
        uint64_t v23 = 4LL;
      }
      __asm { BR              X11 }
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v15, v16, v7);
    uint64_t v25 = (v16 + v12 + v17) & ~v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v38, v25, v18);
    if (v22 == 1)
    {
      *(void *)((v37 + 7 + v38) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v37 + 7 + v25) & 0xFFFFFFFFFFFFF8LL);
      *(_BYTE *)(v15 + v21) = 1;
    }

    else
    {
      *(_BYTE *)(v15 + v21) = 0;
    }
  }

  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v21 + v28 + 1;
  uint64_t v30 = (void *)((v29 + v15) & ~v28);
  uint64_t v31 = (void *)((v29 + v16) & ~v28);
  size_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v33 = v32(v30, 1LL, v26);
  int v34 = v32(v31, 1LL, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v30, v31, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0LL, 1LL, v26);
      return v40;
    }
  }

  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v30, v31, v26);
      return v40;
    }

    (*(void (**)(void *, uint64_t))(v27 + 8))(v30, v26);
  }

  if (*(_DWORD *)(v27 + 84)) {
    size_t v35 = *(void *)(v27 + 64);
  }
  else {
    size_t v35 = *(void *)(v27 + 64) + 1LL;
  }
  memcpy(v30, v31, v35);
  return v40;
}

uint64_t initializeWithTake for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = (*(_DWORD *)(v12 + 80) | v10) & 0xF8 | 7u;
  uint64_t v35 = a1;
  uint64_t v15 = (v7 + v14 + a1) & ~v14;
  uint64_t v16 = (v7 + v14 + a2) & ~v14;
  uint64_t v17 = ~v13;
  uint64_t v18 = *(void *)(v9 + 64) + v13;
  uint64_t v34 = *(void *)(v12 + 64);
  unint64_t v19 = (v18 & ~v13) + v34;
  if (((v19 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v19) {
    unint64_t v20 = (v18 & ~v13) + v34;
  }
  else {
    unint64_t v20 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  unsigned int v21 = *(unsigned __int8 *)(v16 + v20);
  if (v21 >= 2)
  {
    else {
      uint64_t v22 = 4LL;
    }
    __asm { BR              X11 }
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v15, v16, v8);
  uint64_t v23 = (v18 + v15) & v17;
  uint64_t v24 = (v18 + v16) & v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v23, v24, AssociatedTypeWitness);
  if (v21 == 1)
  {
    *(void *)((v34 + 7 + v23) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v34 + 7 + v24) & 0xFFFFFFFFFFFFF8LL);
    char v25 = 1;
  }

  else
  {
    char v25 = 0;
  }

  *(_BYTE *)(v15 + v20) = v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v20 + v28 + 1;
  uint64_t v30 = (void *)((v29 + v15) & ~v28);
  uint64_t v31 = (const void *)((v29 + v16) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v31, 1LL, v26))
  {
    if (*(_DWORD *)(v27 + 84)) {
      size_t v32 = *(void *)(v27 + 64);
    }
    else {
      size_t v32 = *(void *)(v27 + 64) + 1LL;
    }
    memcpy(v30, v31, v32);
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v30, v31, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0LL, 1LL, v26);
  }

  return v35;
}

uint64_t assignWithTake for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v39 = *(void *)(v6 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = (*(_DWORD *)(v11 + 80) | v9) & 0xF8 | 7u;
  uint64_t v14 = v39 + v13;
  uint64_t v40 = a1;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  uint64_t v17 = *(void *)(v8 + 64);
  if (v15 == v16)
  {
    unint64_t v24 = ((v17 + v12) & ~v12) + *(void *)(v11 + 64);
    if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v24) {
      unint64_t v21 = ((v17 + v12) & ~v12) + *(void *)(v11 + 64);
    }
    else {
      unint64_t v21 = ((v24 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    }
  }

  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v19 = v8;
    uint64_t v37 = *(void *)(v11 + 64);
    unint64_t v20 = ((v17 + v12) & ~v12) + v37;
    if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v20) {
      unint64_t v21 = ((v17 + v12) & ~v12) + v37;
    }
    else {
      unint64_t v21 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v7);
    uint64_t v38 = (v15 + v12 + v17) & ~v12;
    (*(void (**)(void))(v11 + 8))();
    unsigned int v22 = *(unsigned __int8 *)(v16 + v21);
    if (v22 >= 2)
    {
      else {
        uint64_t v23 = 4LL;
      }
      __asm { BR              X11 }
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v15, v16, v7);
    uint64_t v25 = (v16 + v12 + v17) & ~v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v38, v25, v18);
    if (v22 == 1)
    {
      *(void *)((v37 + 7 + v38) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v37 + 7 + v25) & 0xFFFFFFFFFFFFF8LL);
      *(_BYTE *)(v15 + v21) = 1;
    }

    else
    {
      *(_BYTE *)(v15 + v21) = 0;
    }
  }

  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v21 + v28 + 1;
  uint64_t v30 = (void *)((v29 + v15) & ~v28);
  uint64_t v31 = (void *)((v29 + v16) & ~v28);
  size_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v33 = v32(v30, 1LL, v26);
  int v34 = v32(v31, 1LL, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v30, v31, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0LL, 1LL, v26);
      return v40;
    }
  }

  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v30, v31, v26);
      return v40;
    }

    (*(void (**)(void *, uint64_t))(v27 + 8))(v30, v26);
  }

  if (*(_DWORD *)(v27 + 84)) {
    size_t v35 = *(void *)(v27 + 64);
  }
  else {
    size_t v35 = *(void *)(v27 + 64) + 1LL;
  }
  memcpy(v30, v31, v35);
  return v40;
}

uint64_t getEnumTagSinglePayload for Publishers.CollectByTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v32 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v32 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  unint64_t v10 = ((v7 + v9) & ~(unint64_t)v9) + *(void *)(v8 + 64);
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v10) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v15 = v5;
  }
  if (v15 <= 0xFE) {
    unsigned int v16 = 254;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v13) {
    uint64_t v17 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v12 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v18 = (*(_DWORD *)(v6 + 80) | v9) & 0xF8 | 7u;
  uint64_t v19 = *(void *)(v4 + 64) + v18;
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = v11 + v20 + 1;
  if (a2 > v16)
  {
    uint64_t v22 = v17 + ((v21 + (v19 & ~v18)) & ~v20);
    char v23 = 8 * v22;
    unsigned int v25 = ((a2 - v16 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v25))
    {
      int v24 = *(_DWORD *)(a1 + v22);
      if (v24) {
        goto LABEL_25;
      }
    }

    else
    {
      if (v25 <= 0xFF)
      {
        if (v25 < 2) {
          goto LABEL_34;
        }
LABEL_18:
        int v24 = *(unsigned __int8 *)(a1 + v22);
        if (!*(_BYTE *)(a1 + v22)) {
          goto LABEL_34;
        }
LABEL_25:
        int v26 = (v24 - 1) << v23;
        if ((_DWORD)v22)
        {
          else {
            int v27 = 4;
          }
          __asm { BR              X12 }
        }

        return v16 + v26 + 1;
      }

      int v24 = *(unsigned __int16 *)(a1 + v22);
      if (*(_WORD *)(a1 + v22)) {
        goto LABEL_25;
      }
    }
  }

void storeEnumTagSinglePayload for Publishers.CollectByTime( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8LL);
  uint64_t v9 = *(void *)(v8 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  unint64_t v12 = ((v9 + v11) & ~(unint64_t)v11) + *(void *)(v10 + 64);
  if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 <= v12) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  }
  unsigned int v14 = 0u;
  uint64_t v15 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v16 = *(_DWORD *)(v15 + 84);
  unsigned int v17 = v16 - 1;
  if (!v16) {
    unsigned int v17 = 0;
  }
  if (v7 > v17) {
    unsigned int v17 = v7;
  }
  if (v17 <= 0xFE) {
    unsigned int v18 = 254;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v20 = *(void *)(v15 + 64);
  if (!v16) {
    ++v20;
  }
  uint64_t v19 = (*(_DWORD *)(v8 + 80) | v11) & 0xF8 | 7u;
  size_t v21 = v20
      + ((v13 + 1 + *(unsigned __int8 *)(v15 + 80) + ((*(void *)(v6 + 64) + v19) & ~v19)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  if (a3 > v18)
  {
    if (v21 > 3)
    {
      unsigned int v14 = 1u;
      if (v18 >= a2) {
LABEL_29:
      }
        __asm { BR              X17 }

LABEL_22:
      unsigned int v23 = ~v18 + a2;
      if (v21 < 4)
      {
        if ((_DWORD)v21)
        {
          int v24 = v23 & ~(-1 << (8 * v21));
          bzero(a1, v21);
          if ((_DWORD)v21 == 3)
          {
            *(_WORD *)a1 = v24;
            a1[2] = BYTE2(v24);
          }

          else if ((_DWORD)v21 == 2)
          {
            *(_WORD *)a1 = v24;
          }

          else
          {
            *a1 = v24;
          }
        }
      }

      else
      {
        bzero(a1, v21);
        *(_DWORD *)a1 = v23;
      }

      __asm { BR              X10 }
    }

    unsigned int v22 = ((a3 - v18 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v22))
    {
      unsigned int v14 = 4u;
      if (v18 >= a2) {
        goto LABEL_29;
      }
      goto LABEL_22;
    }

    if (v22 >= 0x100) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v22 > 1;
    }
  }

  if (v18 >= a2) {
    goto LABEL_29;
  }
  goto LABEL_22;
}

void sub_183B2AC0C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v4, v2) = v1;
}

void sub_183B2AC14()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, v4, v2) = v1;
}

void sub_183B2AC90()
{
  *__int16 v1 = v0;
}

void sub_183B2AC98()
{
  *(_WORD *)uint64_t v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_183B2ACA8()
{
  *uint64_t v1 = v0;
}

void sub_183B2ACB0()
{
  *uint64_t v1 = v0;
}

uint64_t type metadata completion function for Publishers.CollectByTime.Inner(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Publishers.TimeGroupingStrategy( 319LL,  *(void *)(a1 + 88),  *(void *)(a1 + 112),  v3);
    if (v5 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t result = type metadata accessor for Optional();
      if (v6 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }

  return result;
}

uint64_t type metadata completion function for Publishers.Collect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Collect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B2AF00 + 4 * byte_183BA0B27[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.Collect( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for Publishers.Collect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Collect);
}

uint64_t type metadata completion function for Publishers.CollectByCount()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CollectByCount( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
  }

  return v4;
}

uint64_t initializeWithCopy for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithCopy for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CollectByCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0LL;
  }

  if (((((*(void *)(v4 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = a2 - v5 + 1;
  }
  if (v6 >= 0x10000) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v6 < 0x100) {
    unsigned int v7 = 1;
  }
  if (v6 >= 2) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B2B414 + 4 * byte_183BA0B35[v8]))();
}

void storeEnumTagSinglePayload for Publishers.CollectByCount( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }

  else
  {
    unsigned int v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_14:
    }
      __asm { BR              X11 }
  }

  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183B2B554()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B2B55C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183B2B564LL);
  }
}

void sub_183B2B580()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B2B588()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

uint64_t sub_183B2B590(uint64_t a1, int a2)
{
  *(_WORD *)(v4 + (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v0, *(void *)(v7 - 160), v5) = 0;
  if (!a2) {
    JUMPOUT(0x183B2B598LL);
  }
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata completion function for Publishers.CollectByCount.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata completion function for Publishers.CollectByTrigger.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      type metadata accessor for Subscribers.Completion(255LL, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
      uint64_t result = type metadata accessor for Optional();
      if (v6 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }

  return result;
}

void type metadata accessor for Publishers.CollectByTrigger.Inner()
{
}

uint64_t sub_183B2B7CC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 80LL);
  return closure #3 in Publishers.CollectByTime.Inner.receive(completion:)( *(uint64_t **)(v0 + 64),  v0 + ((v1 + 72) & ~v1));
}

uint64_t sub_183B2B8A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v5 = *(void *)(v0 + 24);
  return (*(uint64_t (**)(uint64_t *, void))(v3 + 48))(&v5, *(void *)(v2 + 96));
}

uint64_t partial apply for closure #2 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  return closure #2 in Publishers.CollectByTime.Inner.receive(completion:)(v0);
}

uint64_t sub_183B2B918()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(_:)()
{
  return closure #1 in Publishers.CollectByTime.Inner.receive(_:)( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  (void *)(v0 + 32),  *(void *)(v0 + 72));
}

uint64_t sub_183B2B960()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_11Tm()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return swift_deallocObject();
}

uint64_t sub_183B2B9C4()
{
  return swift_deallocObject();
}

void specialized Publishers.CollectByTrigger.Inner.send(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 152));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(*v0 + 192);
  uint64_t v5 = *(uint64_t *)((char *)v0 + v4);
  if (v5 != 0x8000000000000000LL)
  {
    if (v5 < 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }

    if (!v5) {
      goto LABEL_17;
    }
  }

  unint64_t v6 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 168));
  swift_beginAccess();
  uint64_t v13 = *v6;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v7);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
LABEL_17:
    os_unfair_lock_unlock(v3);
    return;
  }

  uint64_t v8 = *(uint64_t *)((char *)v0 + v4);
  if (v8 == 0x8000000000000000LL) {
    goto LABEL_9;
  }
  if (v8 < 0) {
    goto LABEL_19;
  }
  if (!v8)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  *(uint64_t *)((char *)v0 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v8 - 1;
LABEL_9:
  uint64_t v9 = *v6;
  swift_bridgeObjectRetain();
  *unint64_t v6 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v3);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v13 = v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t *, void))(*(void *)(v2 + 120) + 48LL))(&v13, *(void *)(v2 + 96));
  swift_bridgeObjectRelease();
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v3);
  uint64_t v11 = *(uint64_t *)((char *)v1 + v4);
  if (v11 == 0x8000000000000000LL) {
    goto LABEL_17;
  }
  unint64_t v12 = 0x8000000000000000LL;
  if (v10 == 0x8000000000000000LL)
  {
LABEL_16:
    *(uint64_t *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v12;
    goto LABEL_17;
  }

  if ((v11 | v10) < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  unint64_t v12 = v11 + v10;
  if (__OFADD__(v11, v10))
  {
    unint64_t v12 = 0x8000000000000000LL;
    goto LABEL_16;
  }

  if ((v12 & 0x8000000000000000LL) == 0) {
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
}

void Publisher.receive<A>(on:options:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  int v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v12);
  unsigned int v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v7, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v23, v10);
  Publishers.ReceiveOn.init(upstream:scheduler:options:)((uint64_t)v20, a3, v24);
}

  ;
}

void Publishers.ReceiveOn.init(upstream:scheduler:options:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B2BDA4(uint64_t a1)
{
  uint64_t v6 = v4 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v6, v1, v7);
}

void type metadata accessor for Publishers.ReceiveOn()
{
}

uint64_t Publishers.ReceiveOn.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.ReceiveOn.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.ReceiveOn.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

void Publishers.ReceiveOn.receive<A>(subscriber:)()
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v0 = MEMORY[0x1895F8858](v2);
  uint64_t v1 = MEMORY[0x1895F8858](v0);
  MEMORY[0x1895F8858](v1);
  type metadata accessor for Publishers.ReceiveOn.Inner();
}

uint64_t sub_183B2BFE0(uint64_t a1)
{
  uint64_t v12 = *(void *)(v10 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v12 + *(int *)(v2 + 52), v3);
  (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(v4, v12 + *(int *)(v2 + 56), *(void *)(v10 - 152));
  swift_allocObject();
  *(void *)(v10 - 128) = Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(v1, v9, v4);
  uint64_t v13 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.ReceiveOn<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 128, *(void *)(v10 - 160), a1, *(void *)(v10 - 168), v13);
  return swift_release();
}

void type metadata accessor for Publishers.ReceiveOn.Inner()
{
}

char *Publishers.ReceiveOn.Inner.__allocating_init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(a1, a2, a3);
}

char *Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *uint64_t v8 = 0;
  *((void *)v3 + 2) = v8;
  uint64_t v9 = &v3[*(void *)(*(void *)v3 + 160LL)];
  *((void *)v9 + 4) = 0LL;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  _BYTE v9[40] = 2;
  uint64_t v10 = *(void *)(*(void *)v3 + 168LL);
  uint64_t v11 = (void *)swift_slowAlloc();
  *uint64_t v11 = 0LL;
  *(void *)&v3[v10] = v11;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8LL) + 32LL))( &v3[*(void *)(*(void *)v3 + 136LL)],  a1);
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v7 + 88) - 8LL) + 32LL))( &v3[*(void *)(*(void *)v3 + 144LL)],  a2,  *(void *)(v7 + 88));
  uint64_t v12 = &v3[*(void *)(*(void *)v3 + 152LL)];
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a3, v13);
  return v3;
}

void Publishers.ReceiveOn.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }

  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

void Publishers.ReceiveOn.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    uint64_t v5 = 1LL;
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

uint64_t Publishers.ReceiveOn.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.ReceiveOn<A, B>.Inner<A1>;
    uint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
    return os_unfair_recursive_lock_unlock();
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8LL))(v7);
  }

void Publishers.ReceiveOn.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 104LL);
  uint64_t v4 = *(void *)(*v1 + 80LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v12);
  uint64_t v13 = (uint64_t)v1 + *(void *)(*v1 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v13, (uint64_t)v25);
  if (v26)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v25);
    os_unfair_lock_unlock(v12);
  }

  else
  {
    outlined init with take of Subscription(v25, (uint64_t)v27);
    outlined init with copy of Subscription((uint64_t)v27, (uint64_t)v25);
    char v26 = 1;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v25, v13);
    swift_endAccess();
    os_unfair_lock_unlock(v12);
    int8x16_t v14 = (char *)v1 + *(void *)(*v1 + 144LL);
    uint64_t v22 = (char *)v1 + *(void *)(*v1 + 152LL);
    uint64_t v23 = v14;
    uint64_t v15 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v24, v8);
    unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v17 = (char *)swift_allocObject();
    *((void *)v17 + 2) = v4;
    uint64_t v18 = v2[11];
    *((void *)v17 + 3) = v18;
    *((void *)v17 + 4) = v2[12];
    *((void *)v17 + 5) = v3;
    uint64_t v19 = v2[14];
    *((void *)v17 + 6) = v19;
    *((void *)v17 + 7) = v2[15];
    *((void *)v17 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v17[v16], v11, v15);
    uint64_t v20 = *(void (**)(char *, uint64_t (*)(), char *, uint64_t, uint64_t))(v19 + 56);
    swift_retain();
    v20(v22, partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(completion:), v17, v18, v19);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }

uint64_t closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v5);
  uint64_t v8 = 1LL;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  char v11 = 2;
  uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 + 160LL);
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v8, v6);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  os_unfair_recursive_lock_lock_with_options();
  (*(void (**)(uint64_t, void))(*(void *)(v4 + 120) + 56LL))(a2, *(void *)(v4 + 96));
  return os_unfair_recursive_lock_unlock();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>( void *a1)
{
  return Publishers.ReceiveOn.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.ReceiveOn<A, B>.Inner<A1>()
{
  return 0x4F65766965636552LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.ReceiveOn<A, B>.Inner<A1>( void *a1@<X8>)
{
}

void Publishers.ReceiveOn.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x4F65766965636552LL;
  a1[1] = 0xE90000000000006ELL;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.ReceiveOn<A, B>.Inner<A1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ReceiveOn<A, B>()
{
}

uint64_t getEnumTagSinglePayload for Publishers.ReceiveOn(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v13 = *(_DWORD *)(v12 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v11) {
    unsigned int v14 = v11;
  }
  if (v13) {
    uint64_t v15 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v12 + 64) + 1LL;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = *(void *)(v7 + 64) + v16;
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  if (a2 <= v14) {
    goto LABEL_30;
  }
  uint64_t v20 = v15 + ((v18 + v19 + (v17 & ~v16)) & ~v19);
  char v21 = 8 * v20;
  unsigned int v23 = ((a2 - v14 + ~(-1 << v21)) >> v21) + 1;
  if (HIWORD(v23))
  {
    int v22 = *(_DWORD *)(a1 + v20);
    if (!v22) {
      goto LABEL_30;
    }
    goto LABEL_21;
  }

  if (v23 > 0xFF)
  {
    int v22 = *(unsigned __int16 *)(a1 + v20);
    if (!*(_WORD *)(a1 + v20)) {
      goto LABEL_30;
    }
    goto LABEL_21;
  }

  if (v23 >= 2)
  {
LABEL_14:
    int v22 = *(unsigned __int8 *)(a1 + v20);
    if (!*(_BYTE *)(a1 + v20)) {
      goto LABEL_30;
    }
LABEL_21:
    int v24 = (v22 - 1) << v21;
    if ((_DWORD)v20)
    {
      else {
        int v25 = 4;
      }
      __asm { BR              X12 }
    }

    return v14 + v24 + 1;
  }

void storeEnumTagSinglePayload for Publishers.ReceiveOn( _BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v7 + 84)) {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  unsigned int v10 = 0u;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v12 = *(_DWORD *)(v11 + 84);
  unsigned int v13 = v12 - 1;
  if (!v12) {
    unsigned int v13 = 0;
  }
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  if (v12) {
    uint64_t v19 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v11 + 64) + 1LL;
  }
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v16 = *(void *)(v7 + 64) + v15;
  unsigned int v20 = ((v17 + v18 + (v16 & ~(_DWORD)v15)) & ~(_DWORD)v18) + v19;
  if (a3 > v14)
  {
    if (v20 > 3)
    {
      unsigned int v10 = 1u;
      if (v14 >= a2) {
LABEL_28:
      }
        __asm { BR              X0 }

void sub_183B2CE6C()
{
  *(_BYTE *)(v2 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v0;
}

void sub_183B2CE74()
{
  *(_WORD *)(v2 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v0;
}

void sub_183B2CECC()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_183B2CEDC()
{
  *uint64_t v0 = v1;
}

void sub_183B2CEE4()
{
  *uint64_t v0 = v1;
}

uint64_t type metadata completion function for Publishers.ReceiveOn.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }

  return v0;
}

uint64_t sub_183B2CFEC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Subscribers.Completion( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v3)
                                      - 8)
                          + 80LL);
  uint64_t v5 = (v4 + 72) & ~v4;
  swift_release();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Subscribers.Completion( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v3)
                                      - 8)
                          + 80LL);
  return closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)(*(void **)(v0 + 64), v0 + ((v4 + 72) & ~v4));
}

uint64_t sub_183B2D16C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t static Subscribers.Demand.> infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000LL) {
    return 1LL;
  }
  if ((result & 0x8000000000000000LL) == 0) {
    return a2 < result;
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.max(_:)(uint64_t result)
{
  if (result < 0) {
    __break(1u);
  }
  return result;
}

unint64_t *static Subscribers.Demand.+= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000LL;
  if (*result != 0x8000000000000000LL)
  {
    if (a2 != 0x8000000000000000LL)
    {
      if (((v2 | a2) & 0x8000000000000000LL) != 0)
      {
        __break(1u);
        goto LABEL_11;
      }

      unint64_t v3 = v2 + a2;
      if (!__OFADD__(v2, a2))
      {
        if ((v3 & 0x8000000000000000LL) == 0) {
          goto LABEL_8;
        }
LABEL_11:
        __break(1u);
        return result;
      }

      unint64_t v3 = 0x8000000000000000LL;
    }

{
  unint64_t v2;
  unint64_t v3;
  unint64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000LL;
  if (*result == 0x8000000000000000LL)
  {
LABEL_7:
    *uint64_t result = v3;
    return result;
  }

  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = v2 + a2;
    if (__OFADD__(v2, a2))
    {
      *uint64_t result = 0x8000000000000000LL;
      return result;
    }

    if ((v3 & 0x8000000000000000LL) == 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t *static Subscribers.Demand.-= infix(_:_:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result != 0x8000000000000000LL)
  {
    if (v2 < 0)
    {
      __break(1u);
    }

    else
    {
      BOOL v3 = __OFSUB__(v2, a2);
      uint64_t v4 = v2 - a2;
      if (v3)
      {
        uint64_t v4 = 0LL;
LABEL_7:
        *uint64_t result = v4;
        return result;
      }

      if ((v4 & 0x8000000000000000LL) == 0) {
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t static Subscribers.Demand.none.getter()
{
  return 0LL;
}

unint64_t static Subscribers.Demand.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x8000000000000000LL;
  if (a1 == 0x8000000000000000LL) {
    return result;
  }
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }

  unint64_t result = a1 - a2;
  if (__OFSUB__(a1, a2)) {
    return 0LL;
  }
  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  unint64_t result;
  unint64_t result = 0x8000000000000000LL;
  if (a1 != 0x8000000000000000LL)
  {
    if (a2 == 0x8000000000000000LL) {
      return 0LL;
    }
    if ((a2 | a1) < 0)
    {
      __break(1u);
    }

    else
    {
      unint64_t result = a1 - a2;
      if (a1 - a2 >= 0) {
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t Subscribers.Demand.max.getter(uint64_t result)
{
  if (result == 0x8000000000000000LL) {
    return 0LL;
  }
  uint64_t v1 = result;
  if ((result & 0x8000000000000000LL) == 0) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t Subscriber<>.receive()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 48))(a1, a1, a2);
}

BOOL static Subscribers.Demand.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if (result == 0x8000000000000000LL) {
    return 0LL;
  }
  if ((result & 0x8000000000000000LL) == 0) {
    return result == a2;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

{
  return a2 != 0x8000000000000000LL && a1 >= 0 && a2 == a1;
}

unint64_t static Subscribers.Demand.* infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x8000000000000000LL;
  if (a1 == 0x8000000000000000LL) {
    return result;
  }
  if (a1 < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  unint64_t result = a1 * a2;
  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_8;
  }
  return result;
}

uint64_t static Subscribers.Completion<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v26[1] = a4;
  uint64_t v28 = a2;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  v26[0] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Subscribers.Completion(0LL, v8, v10, v9);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  unsigned int v14 = (char *)v26 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v27 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v18 = (char *)v26 - v17;
  uint64_t v19 = (char *)v26 + *(int *)(v16 + 48) - v17;
  unsigned int v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20((char *)v26 - v17, a1, v11);
  v20(v19, v28, v11);
  unsigned int v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v21(v18, 1LL, a3) == 1)
  {
    char v22 = 1;
    if (v21(v19, 1LL, a3) == 1) {
      goto LABEL_8;
    }
  }

  else
  {
    v20(v14, (uint64_t)v18, v11);
    if (v21(v19, 1LL, a3) != 1)
    {
      int v23 = (char *)v26[0];
      (*(void (**)(void, char *, uint64_t))(v6 + 32))(v26[0], v19, a3);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v24 = *(void (**)(char *, uint64_t))(v6 + 8);
      v24(v23, a3);
      v24(v14, a3);
      goto LABEL_8;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, a3);
  }

  char v22 = 0;
  uint64_t v12 = v27;
  uint64_t v11 = TupleTypeMetadata2;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  return v22 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Subscribers.Completion<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Subscribers.Completion<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

void Subscribers.Completion<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) == 1)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    Hasher._combine(_:)(1uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

Swift::Int Subscribers.Completion<>.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t Subscribers.Completion.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Subscribers.Completion.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t Subscribers.Completion.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x726F727265LL;
  }
  else {
    return 0x73736563637573LL;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Subscribers.Completion<A>( uint64_t a1)
{
  return Subscribers.Completion<>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <> Subscribers.Completion<A>( uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Subscribers.Completion<A>( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Subscribers.Completion<A>.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Subscribers.Completion<A>.CodingKeys( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Subscribers.Completion<A>.CodingKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Subscribers.Completion<A>.CodingKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>( uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::Int v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  uint64_t result = Subscribers.Completion.CodingKeys.init(rawValue:)(v5);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Subscribers.Completion<A>.CodingKeys@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Subscribers.Completion.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Subscribers.Completion<A>.CodingKeys()
{
  return Subscribers.Completion.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = Subscribers.Completion.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized Record.Recording<>.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Completion<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Subscribers.Completion<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t Subscribers.Completion<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  v24[1] = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  int v25 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Subscribers.Completion.CodingKeys(255LL, v5, *(void *)(v11 + 24), v12);
  MEMORY[0x186E22960](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, v13);
  uint64_t v14 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  uint64_t v29 = v15;
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)v24 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v27 = v17;
  uint64_t v18 = v31;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v10, v32, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1LL, v5) == 1)
  {
    char v33 = 0;
    unsigned int v20 = v27;
    uint64_t v19 = v28;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  else
  {
    unsigned int v21 = v25;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v10, v5);
    char v35 = 0;
    unsigned int v20 = v27;
    uint64_t v19 = v28;
    uint64_t v22 = v26;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v22)
    {
      char v34 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v20, v19);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Subscribers.Completion<A>( void *a1, uint64_t a2, uint64_t a3)
{
  return Subscribers.Completion<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t Subscribers.Completion<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v32 = a5;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Subscribers.Completion.CodingKeys(255LL, v9, v10, v10);
  MEMORY[0x186E22960](&protocol conformance descriptor for Subscribers.Completion<A>.CodingKeys, v11);
  uint64_t v12 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v34 = *(void *)(v12 - 8);
  uint64_t v35 = v12;
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v38 = a2;
  uint64_t v33 = type metadata accessor for Subscribers.Completion(0LL, a2, a4, v15);
  uint64_t v16 = *(void *)(v33 - 8);
  MEMORY[0x1895F8858](v33);
  uint64_t v18 = (char *)&v30 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    uint64_t v30 = v18;
    uint64_t v39 = v16;
    uint64_t v20 = v38;
    char v41 = 0;
    uint64_t v22 = v34;
    uint64_t v21 = v35;
    if ((KeyedDecodingContainer.decode(_:forKey:)() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
      uint64_t v23 = 1LL;
      uint64_t v25 = v31;
      uint64_t v24 = v32;
      uint64_t v26 = v33;
      uint64_t v27 = v39;
      uint64_t v28 = v30;
    }

    else
    {
      char v40 = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
      uint64_t v25 = v31;
      uint64_t v28 = v30;
      (*(void (**)(void))(v31 + 32))();
      uint64_t v23 = 0LL;
      uint64_t v24 = v32;
      uint64_t v26 = v33;
      uint64_t v27 = v39;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v28, v23, 1LL, v20);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v24, v28, v26);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Subscribers.Completion<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Subscribers.Completion<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24), a4);
}

Combine::Subscribers::Demand __swiftcall Subscribers.Demand.init(rawValue:)(Combine::Subscribers::Demand rawValue)
{
  if (rawValue.rawValue >= 0x8000000000000000LL) {
    return (Combine::Subscribers::Demand)0x8000000000000000LL;
  }
  return rawValue;
}

uint64_t Subscribers.Demand.description.getter(uint64_t a1)
{
  if (a1 == 0x8000000000000000LL) {
    return 0x6574696D696C6E75LL;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 678977901LL;
}

unint64_t static Subscribers.Demand.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x8000000000000000LL;
  if (a1 == 0x8000000000000000LL || a2 == 0x8000000000000000LL) {
    return result;
  }
  if ((a2 | a1) < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2)) {
    return 0x8000000000000000LL;
  }
  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
  return result;
}

{
  unint64_t result;
  unint64_t result = 0x8000000000000000LL;
  if (a1 == 0x8000000000000000LL) {
    return result;
  }
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }

  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2)) {
    return 0x8000000000000000LL;
  }
  if ((result & 0x8000000000000000LL) != 0) {
    goto LABEL_9;
  }
  return result;
}

uint64_t type metadata accessor for Subscribers.Completion.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Subscribers.Completion.CodingKeys);
}

unint64_t *static Subscribers.Demand.*= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  int64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000LL;
  if (*result == 0x8000000000000000LL)
  {
LABEL_6:
    *unint64_t result = v3;
    return result;
  }

  if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = v2 * a2;
    if ((unsigned __int128)(v2 * (__int128)a2) >> 64 != (v2 * a2) >> 63)
    {
      *unint64_t result = 0x8000000000000000LL;
      return result;
    }

    if ((v3 & 0x8000000000000000LL) == 0) {
      goto LABEL_6;
    }
  }

  __break(1u);
  return result;
}

unint64_t *static Subscribers.Demand.-= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000LL;
  if (*result == 0x8000000000000000LL) {
    goto LABEL_6;
  }
  if (a2 == 0x8000000000000000LL)
  {
    *unint64_t result = 0LL;
    return result;
  }

  if (((v2 | a2) & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = v2 - a2;
    if ((uint64_t)(v2 - a2) >= 0)
    {
LABEL_6:
      *unint64_t result = v3;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.>= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000LL) {
    return 1LL;
  }
  if ((result & 0x8000000000000000LL) == 0) {
    return result >= a2;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.> infix(_:_:)(BOOL result, uint64_t a2)
{
  if (a2 == 0x8000000000000000LL) {
    return 0LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0) {
    return a2 < result;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.>= infix(_:_:)(BOOL result, uint64_t a2)
{
  if (a2 == 0x8000000000000000LL) {
    return 0LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0) {
    return result >= a2;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if (result == 0x8000000000000000LL) {
    return 0LL;
  }
  if ((result & 0x8000000000000000LL) == 0) {
    return result < a2;
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.< infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 == 0x8000000000000000LL) {
    return 1LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0) {
    return result < a2;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.<= infix(_:_:)(BOOL result, uint64_t a2)
{
  if (result == 0x8000000000000000LL) {
    return 0LL;
  }
  if ((result & 0x8000000000000000LL) == 0) {
    return a2 >= result;
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.<= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 == 0x8000000000000000LL) {
    return 1LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0) {
    return a2 >= result;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 == 0x8000000000000000LL || a1 < a2;
  return a1 != 0x8000000000000000LL && v3;
}

BOOL static Subscribers.Demand.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 == 0x8000000000000000LL || a2 >= a1;
  if (a1 == 0x8000000000000000LL) {
    return a2 == 0x8000000000000000LL;
  }
  else {
    return v3;
  }
}

uint64_t static Subscribers.Demand.>= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 != 0x8000000000000000LL && a1 >= a2;
  return a1 == 0x8000000000000000LL || v3;
}

BOOL static Subscribers.Demand.> infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 != 0x8000000000000000LL && a2 < a1;
  if (a1 == 0x8000000000000000LL) {
    return a2 != 0x8000000000000000LL;
  }
  else {
    return v3;
  }
}

uint64_t static Subscribers.Demand.!= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000LL) {
    return 1LL;
  }
  if ((result & 0x8000000000000000LL) == 0) {
    return result != a2;
  }
  __break(1u);
  return result;
}

{
  if (a2 == 0x8000000000000000LL) {
    return 1LL;
  }
  if ((a2 & 0x8000000000000000LL) == 0) {
    return a2 != result;
  }
  __break(1u);
  return result;
}

void *Subscribers.Demand.init(from:)(void *a1)
{
  BOOL v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    unint64_t v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (v4 >= 0x8000000000000000LL) {
      BOOL v3 = (void *)0x8000000000000000LL;
    }
    else {
      BOOL v3 = (void *)v4;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  return v3;
}

uint64_t Subscribers.Demand.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void Subscribers.Demand.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int Subscribers.Demand.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Subscribers.Demand( void *a1, void *a2)
{
  if (*a1 == 0x8000000000000000LL) {
    return 0LL;
  }
  return *a2 == 0x8000000000000000LL || *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Subscribers.Demand( unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  BOOL v4 = *a2 == 0x8000000000000000LL || *a2 >= v2;
  if (v2 == 0x8000000000000000LL) {
    return *a2 == 0x8000000000000000LL;
  }
  else {
    return v4;
  }
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Subscribers.Demand( void *a1, void *a2)
{
  if (*a1 == 0x8000000000000000LL) {
    return 1LL;
  }
  return *a2 != 0x8000000000000000LL && *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Subscribers.Demand( unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  BOOL v4 = *a2 != 0x8000000000000000LL && *a2 < v2;
  if (v2 == 0x8000000000000000LL) {
    return *a2 != 0x8000000000000000LL;
  }
  else {
    return v4;
  }
}

uint64_t base witness table accessor for Equatable in <> Subscribers.Completion<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 - 8) + 8LL);
  return MEMORY[0x186E22960](&protocol conformance descriptor for <> Subscribers.Completion<A>, a1, &v4);
}

unint64_t lazy protocol witness table accessor for type Subscribers.Demand and conformance Subscribers.Demand()
{
  unint64_t result = lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand;
  if (!lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for Subscribers.Demand,  &type metadata for Subscribers.Demand);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand);
  }

  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Subscribers.Demand@<X0>( void *a1@<X0>, unint64_t *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  unint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  if (v5 >= 0x8000000000000000LL) {
    unint64_t v7 = 0x8000000000000000LL;
  }
  else {
    unint64_t v7 = v5;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v7;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Subscribers.Demand(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Demand()
{
  return Subscribers.Demand.description.getter(*v0);
}

ValueMetadata *type metadata accessor for Subscribers()
{
  return &type metadata for Subscribers;
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t type metadata completion function for Subscribers.Completion()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Subscribers.Completion(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0LL;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)(a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }

    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_24;
        }
LABEL_8:
        int v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7)) {
          goto LABEL_24;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if ((_DWORD)v7)
        {
          else {
            int v13 = 4;
          }
          __asm { BR              X12 }
        }

        return v6 + v12 + 1;
      }

      int v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7)) {
        goto LABEL_15;
      }
    }
  }

void storeEnumTagSinglePayload for Subscribers.Completion( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6 = 0u;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8LL);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }

  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1LL;
  }

  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      unsigned int v6 = 1u;
      if (v9 < a2) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }

    unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      unsigned int v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        unsigned int v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            int v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }

            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }

            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }

        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }

        __asm { BR              X10 }
      }

void sub_183B2EB2C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B2EB34()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

uint64_t getEnumTag for Subscribers.Completion(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 48LL))(a1, 1LL);
}

uint64_t destructiveInjectEnumTag for Subscribers.Completion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8LL) + 56LL))( a1,  a2,  1LL);
}

ValueMetadata *type metadata accessor for Subscribers.Demand()
{
  return &type metadata for Subscribers.Demand;
}

uint64_t storeEnumTagSinglePayload for Subscribers.Completion.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD((*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = 1;
  }
  else {
    LODWORD((*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183B2EBDC + 4 * byte_183BA1163[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183B2EC10 + 4 * byte_183BA115E[v4]))();
}

uint64_t sub_183B2EC10(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183B2EC18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183B2EC20LL);
  }
  return result;
}

uint64_t sub_183B2EC2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183B2EC34LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183B2EC38(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183B2EC40(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Subscribers.Completion<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in Subscribers.Completion<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Subscribers.Completion<A>.CodingKeys()
{
}

uint64_t type metadata completion function for ReduceProducer()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }

  return result;
}

uint64_t *ReduceProducer.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(*v3 + 96) - 8LL) + 56LL))( v8,  1LL,  1LL,  *(void *)(*v3 + 96));
  uint64_t v9 = (uint64_t)v3 + *(void *)(*v3 + 160);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0LL;
  *(_BYTE *)(v9 + 40) = 2;
  uint64_t v10 = *(void *)(*v3 + 176);
  BOOL v11 = (_DWORD *)swift_slowAlloc();
  *BOOL v11 = 0;
  *(uint64_t *)((char *)v3 + v10) = (uint64_t)v11;
  *((_BYTE *)v3 + *(void *)(*v3 + 184)) = 0;
  *((_BYTE *)v3 + *(void *)(*v3 + 192)) = 0;
  *((_BYTE *)v3 + *(void *)(*v3 + 200)) = 0;
  *((_BYTE *)v3 + *(void *)(*v3 + 20Hasher._combine(_:)(*(void *)(v0 + 8)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 80) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 168),  a1);
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v8, a2, v12);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))((uint64_t)v3 + *(void *)(*v3 + 144), a2, v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 112) - 8LL) + 32LL))( (uint64_t)v3 + *(void *)(*v3 + 152),  a3);
  return v3;
}

uint64_t *ReduceProducer.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1LL, -1LL);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL);
  v4(v2, v3);
  v4((uint64_t)v0 + *(void *)(*v0 + 144), v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 112) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 152));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 160));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 168));
  return v0;
}

void ReduceProducer.customMirror.getter(uint64_t a1@<X8>)
{
  v24[1] = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  v24[0] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 176)));
  uint64_t v27 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x657274736E776F64LL;
  *(void *)(v8 + 40) = 0xEA00000000006D61LL;
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 168);
  uint64_t v10 = *(void *)(v2 + 80);
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v9,  v10);
  *(void *)(v8 + 80) = 0x746C75736572LL;
  *(void *)(v8 + 88) = 0xE600000000000000LL;
  uint64_t v12 = *(void *)(v2 + 96);
  uint64_t v13 = type metadata accessor for Optional();
  *(void *)(v8 + 120) = v13;
  unsigned int v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  uint64_t v15 = (uint64_t)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  uint64_t v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  v16(v14, v15, v13);
  *(void *)(v8 + 128) = 0x6C616974696E69LL;
  *(void *)(v8 + 136) = 0xE700000000000000LL;
  uint64_t v17 = (uint64_t)v1 + *(void *)(*v1 + 144);
  *(void *)(v8 + 168) = v13;
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 144));
  v16(v18, v17, v13);
  *(void *)(v8 + 176) = 0x737574617473LL;
  *(void *)(v8 + 184) = 0xE600000000000000LL;
  *(void *)(v8 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = &type metadata for SubscriptionStatus;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v19 + 16;
  *(void *)(v8 + 192) = v19;
  uint64_t v21 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v21, v20);
  uint64_t v22 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v7, 1LL, 1LL, v22);
  uint64_t v23 = *(void *)(v2 + 88);
  void v24[2] = v10;
  void v24[3] = v23;
  Swift::Int v24[4] = v12;
  __int128 v25 = *(_OWORD *)(v2 + 104);
  __int128 v26 = *(_OWORD *)(v2 + 120);
  type metadata accessor for ReduceProducer();
}

void sub_183B2F220()
{
}

uint64_t ReduceProducer.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 360LL))();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall ReduceProducer.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 176LL));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 192LL)) = 1;
    uint64_t v5 = 1LL;
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

Swift::Void __swiftcall ReduceProducer.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 120);
  uint64_t v6 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v33 = (char *)&v32 - v12;
  uint64_t v13 = *(void *)(v4 + 96);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v17 - 8);
  uint64_t v37 = v17;
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v18);
  uint64_t v38 = (char *)&v32 - v21;
  if (a1.rawValue != 0x8000000000000000LL)
  {
    if ((a1.rawValue & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (a1.rawValue)
    {
      goto LABEL_4;
    }

    __break(1u);
    return;
  }

uint64_t ReduceProducer.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 176));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v12);
  if (v13 == 2)
  {
    int8x16_t v6 = vorrq_s8(*(int8x16_t *)&v12[8], *(int8x16_t *)&v12[24]);
    if (!(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | *(void *)v12))
    {
      outlined destroy of SubscriptionStatus((uint64_t)v12);
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
      LOBYTE(v13) = 0;
      outlined init with take of SubscriptionStatus((uint64_t)v12, (uint64_t)v14);
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)v14, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      uint64_t v10 = *(void *)(v3 + 112);
      __int128 v11 = *(_OWORD *)(v3 + 96);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)(v3 + 80);
      *(_OWORD *)&_BYTE v12[16] = v11;
      *(void *)&v12[32] = v10;
      __int128 v13 = *(_OWORD *)(v3 + 120);
      type metadata accessor for ReduceProducer();
    }
  }

  outlined destroy of SubscriptionStatus((uint64_t)v12);
  os_unfair_lock_unlock(v4);
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v8);
}

uint64_t ReduceProducer.receive(_:)(uint64_t a1)
{
  uint64_t v79 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v70 = (char *)&v63 - v6;
  uint64_t v77 = v3;
  uint64_t v76 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v74 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  uint64_t v73 = *(void *)(v74 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v74);
  unsigned int v72 = (char *)&v63 - v10;
  uint64_t v11 = *(void *)(v2 + 96);
  uint64_t v69 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v9);
  unsigned __int8 v68 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for Optional();
  uint64_t v78 = *(void *)(v71 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v71);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v18 = type metadata accessor for PartialCompletion( 0LL,  MEMORY[0x18961AFC8] + 8LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v80 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v63 - v22;
  uint64_t v24 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v2 + 176));
  os_unfair_lock_lock(v24);
  uint64_t v25 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v25, (uint64_t)&v81);
  if (!v84)
  {
    uint64_t v64 = v15;
    uint64_t v65 = v11;
    uint64_t v66 = v17;
    uint64_t v67 = AssociatedTypeWitness;
    outlined init with take of Subscription((__int128 *)&v81, (uint64_t)v85);
    os_unfair_lock_unlock(v24);
    (*(void (**)(uint64_t))(*v1 + 392))(v79);
    uint64_t v26 = v80;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v21, v23, v18);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v28 = v26;
    uint64_t v29 = v23;
    if (EnumCaseMultiPayload)
    {
      uint64_t v30 = v1;
      uint64_t v31 = v24;
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v42 = v23;
        uint64_t v79 = v18;
        os_unfair_lock_lock(v24);
        *((_BYTE *)v30 + *(void *)(*v30 + 20Hasher._combine(_:)(*(void *)(v0 + 8)) = 1;
        int v43 = *((unsigned __int8 *)v30 + *(void *)(*v30 + 184));
        __int128 v44 = v24;
        if (v43 == 1) {
          *((_BYTE *)v30 + *(void *)(*v30 + 200)) = 1;
        }
        uint64_t v81 = 1LL;
        __int128 v82 = 0u;
        __int128 v83 = 0u;
        char v84 = 2;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v81, v25);
        swift_endAccess();
        uint64_t v45 = (uint64_t)v30 + *(void *)(*v30 + 136);
        swift_beginAccess();
        uint64_t v46 = v78;
        uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
        uint64_t v48 = v66;
        uint64_t v49 = v71;
        v47(v66, v45, v71);
        os_unfair_lock_unlock(v44);
        uint64_t v50 = v86;
        uint64_t v51 = v87;
        __swift_project_boxed_opaque_existential_1(v85, v86);
        (*(void (**)(uint64_t))(*(void *)(v51 + 8) + 8LL))(v50);
        uint64_t v52 = v67;
        if (v43)
        {
          uint64_t v53 = v64;
          v47(v64, (uint64_t)v48, v49);
          uint64_t v54 = v69;
          uint64_t v55 = v65;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v53, 1LL, v65) == 1)
          {
            (*(void (**)(char *, uint64_t))(v78 + 8))(v53, v49);
            uint64_t v56 = v77;
            uint64_t v57 = v76;
          }

          else
          {
            uint64_t v58 = v68;
            (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v68, v53, v55);
            uint64_t v56 = v77;
            uint64_t v57 = v76;
            (*(void (**)(char *, uint64_t, uint64_t))(v77 + 48))(v58, v76, v77);
            (*(void (**)(char *, uint64_t))(v54 + 8))(v58, v55);
          }

          uint64_t v59 = v74;
          uint64_t v60 = v73;
          uint64_t v61 = v72;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v72, 1LL, 1LL, v52);
          (*(void (**)(char *, uint64_t, uint64_t))(v56 + 56))(v61, v57, v56);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v59);
          uint64_t v49 = v71;
          uint64_t v46 = v78;
          uint64_t v48 = v66;
        }

        (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v49);
        uint64_t v41 = v79;
        uint64_t v39 = *(void (**)(char *, uint64_t))(v80 + 8);
        char v40 = v42;
        goto LABEL_16;
      }

      uint64_t v32 = v75;
      uint64_t v33 = v28;
      uint64_t v34 = v70;
      uint64_t v35 = v67;
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v70, v21, v67);
      os_unfair_lock_lock(v31);
      *((_BYTE *)v30 + *(void *)(*v30 + 20Hasher._combine(_:)(*(void *)(v0 + 8)) = 1;
      *((_BYTE *)v30 + *(void *)(*v30 + 200)) = 1;
      uint64_t v81 = 1LL;
      __int128 v82 = 0u;
      __int128 v83 = 0u;
      char v84 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v81, v25);
      swift_endAccess();
      os_unfair_lock_unlock(v31);
      uint64_t v36 = v86;
      uint64_t v37 = v87;
      __swift_project_boxed_opaque_existential_1(v85, v86);
      (*(void (**)(uint64_t))(*(void *)(v37 + 8) + 8LL))(v36);
      uint64_t v38 = v72;
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v72, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v38, 0LL, 1LL, v35);
      (*(void (**)(char *, uint64_t))(v77 + 56))(v38, v76);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v74);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v35);
      uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
    }

    else
    {
      uint64_t v39 = *(void (**)(char *, uint64_t))(v26 + 8);
    }

    char v40 = v29;
    uint64_t v41 = v18;
LABEL_16:
    v39(v40, v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
    return 0LL;
  }

  outlined destroy of SubscriptionStatus((uint64_t)&v81);
  os_unfair_lock_unlock(v24);
  return 0LL;
}

void ReduceProducer.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v91 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = v3[15];
  uint64_t v5 = v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v87 = (char *)&v71 - v8;
  uint64_t v9 = v3[13];
  uint64_t v89 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v77 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v86 = (char *)&v71 - v12;
  uint64_t v78 = v4;
  uint64_t v79 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v82 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  uint64_t v81 = *(void *)(v82 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v82);
  uint64_t v80 = (char *)&v71 - v16;
  uint64_t v17 = v3[12];
  uint64_t v76 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v75 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v71 - v24;
  uint64_t v26 = v3[16];
  uint64_t v90 = v9;
  uint64_t v28 = type metadata accessor for Subscribers.Completion(0LL, v9, v26, v27);
  uint64_t v83 = *(void *)(v28 - 8);
  uint64_t v84 = v28;
  MEMORY[0x1895F8858](v28);
  uint64_t v85 = (char *)&v71 - v29;
  uint64_t v30 = *(os_unfair_lock_s **)((char *)v2 + v3[22]);
  os_unfair_lock_lock(v30);
  uint64_t v31 = (uint64_t)v2 + *(void *)(*v2 + 160LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v31, (uint64_t)&v92);
  LODWORD(v9) = v95;
  outlined destroy of SubscriptionStatus((uint64_t)&v92);
  if ((_DWORD)v9)
  {
    uint64_t v32 = v30;
LABEL_3:
    os_unfair_lock_unlock(v32);
    return;
  }

  os_unfair_lock_t v74 = v30;
  uint64_t v71 = v23;
  unsigned int v72 = v25;
  uint64_t v33 = v86;
  uint64_t v73 = v20;
  uint64_t v35 = v87;
  uint64_t v34 = v88;
  uint64_t v92 = 1LL;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  unsigned __int8 v95 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v92, v31);
  swift_endAccess();
  uint64_t v36 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v85, v91, v84);
  uint64_t v37 = v89;
  uint64_t v38 = v90;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v36, 1LL, v90) == 1)
  {
    uint64_t v39 = *v2;
    uint64_t v32 = v74;
    if ((*((_BYTE *)v2 + *(void *)(*v2 + 192LL)) & 1) != 0) {
      goto LABEL_3;
    }
    uint64_t v40 = *(void *)(v39 + 200);
    if ((*((_BYTE *)v2 + v40) & 1) != 0) {
      goto LABEL_3;
    }
    uint64_t v41 = *(void *)(v39 + 208);
    if ((*((_BYTE *)v2 + v41) & 1) != 0) {
      goto LABEL_3;
    }
    *((_BYTE *)v2 + v41) = 1;
    uint64_t v42 = *v2;
    int v43 = *((unsigned __int8 *)v2 + *(void *)(*v2 + 184LL));
    if (v43 == 1)
    {
      *((_BYTE *)v2 + v40) = 1;
      uint64_t v42 = *v2;
    }

    __int128 v44 = (char *)v2 + *(void *)(v42 + 136);
    swift_beginAccess();
    uint64_t v45 = v73;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v47 = v72;
    uint64_t v48 = v44;
    uint64_t v49 = v19;
    v46(v72, v48, v19);
    os_unfair_lock_unlock(v74);
    if (v43)
    {
      uint64_t v50 = v17;
      uint64_t v51 = v71;
      v46(v71, v47, v49);
      uint64_t v52 = v76;
      int v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48))(v51, 1LL, v50);
      uint64_t v54 = v78;
      uint64_t v55 = v79;
      uint64_t v91 = AssociatedTypeWitness;
      uint64_t v56 = v51;
      uint64_t v57 = v34;
      uint64_t v58 = v82;
      uint64_t v59 = v80;
      if (v53 == 1)
      {
        uint64_t v60 = v73;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v56, v49);
        uint64_t v61 = v49;
      }

      else
      {
        uint64_t v69 = v75;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v75, v56, v50);
        uint64_t v61 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 48))(v69, v55, v54);
        uint64_t v70 = v69;
        uint64_t v58 = v82;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v70, v50);
        uint64_t v60 = v73;
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v59, 1LL, 1LL, v91);
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 56))(v59, v55, v54);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v59, v58);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v72, v61);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v19);
    }
  }

  else
  {
    uint64_t v62 = v33;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v33, v36, v38);
    uint64_t v63 = *v2;
    if ((*((_BYTE *)v2 + *(void *)(*v2 + 192LL)) & 1) != 0
      || (uint64_t v64 = *(void *)(v63 + 200), (*((_BYTE *)v2 + v64) & 1) != 0)
      || (uint64_t v65 = *(void *)(v63 + 208), (*((_BYTE *)v2 + v65) & 1) != 0))
    {
      os_unfair_lock_unlock(v74);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v38);
    }

    else
    {
      *((_BYTE *)v2 + v65) = 1;
      *((_BYTE *)v2 + v64) = 1;
      os_unfair_lock_unlock(v74);
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v77, v33, v38);
      swift_dynamicCast();
      uint64_t v66 = v34;
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      unsigned __int8 v68 = v80;
      v67(v80, v35, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v68, 0LL, 1LL, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v78 + 56))(v68, v79);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v68, v82);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v62, v38);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v35, AssociatedTypeWitness);
    }
  }

uint64_t ReduceProducer.description.getter()
{
  return 0x656375646552LL;
}

uint64_t ReduceProducer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void type metadata accessor for ReduceProducer()
{
}

void ReduceProducer.receive(newValue:)()
{
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance ReduceProducer<A, B, C, D, E>( void *a1)
{
  return ReduceProducer.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance ReduceProducer<A, B, C, D, E>(uint64_t a1)
{
  return 0LL;
}

void protocol witness for Subscriber.receive(completion:) in conformance ReduceProducer<A, B, C, D, E>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance ReduceProducer<A, B, C, D, E>( Combine::Subscribers::Demand a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReduceProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 360LL))();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ReduceProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 368LL))();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ReduceProducer<A, B, C, D, E>@<X0>( uint64_t *a1@<X8>)
{
  return ReduceProducer.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance ReduceProducer<A, B, C, D, E>()
{
}

uint64_t sub_183B30820()
{
  return swift_deallocObject();
}

uint64_t Publisher.map<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  uint64_t v12 = *a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  *(void *)(a4
            + *(int *)(type metadata accessor for Publishers.MapKeyPath( 0LL,  a2,  *(void *)(*MEMORY[0x18961A9A8] + v12 + 8),  a3)
                     + 44)) = a1;
  return swift_retain();
}

uint64_t Publishers.MapKeyPath.init(upstream:keyPath:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))(a5, a1);
  uint64_t result = type metadata accessor for Publishers.MapKeyPath(0LL, a3, *(void *)(*MEMORY[0x18961A9A8] + v9 + 8), a4);
  *(void *)(a5 + *(int *)(result + 44)) = a2;
  return result;
}

void Publisher.map<A, B>(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, v3);
  Publishers.MapKeyPath2.init(upstream:keyPath0:keyPath1:)((uint64_t)v7, a2, a3);
}

uint64_t sub_183B30A20()
{
  return swift_retain();
}

void Publishers.MapKeyPath2.init(upstream:keyPath0:keyPath1:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B30AC8(uint64_t result)
{
  *(void *)(v3 + *(int *)(result + 52)) = v2;
  *(void *)(v3 + *(int *)(result + 56)) = v1;
  return result;
}

void Publisher.map<A, B, C>(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v3, v9);
  Publishers.MapKeyPath3.init(upstream:keyPath0:keyPath1:keyPath2:)((uint64_t)v7, a2, a3);
}

uint64_t sub_183B30B84()
{
  return swift_retain();
}

void Publishers.MapKeyPath3.init(upstream:keyPath0:keyPath1:keyPath2:)( uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

int *sub_183B30C48(int *result)
{
  *(void *)(v4 + result[15]) = v3;
  *(void *)(v4 + result[16]) = v2;
  *(void *)(v4 + result[17]) = v1;
  return result;
}

uint64_t Publishers.MapKeyPath.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.MapKeyPath.keyPath.getter()
{
  return swift_retain();
}

void Publishers.MapKeyPath.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B30D24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v9);
  swift_retain();
  Publishers.MapKeyPath.Inner.init(downstream:keyPath:)(v11, v9, (uint64_t)v14);
}

uint64_t sub_183B30D9C()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.MapKeyPath<A, B>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v4, v2, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

void type metadata accessor for Publishers.MapKeyPath.Inner()
{
}

void Publishers.MapKeyPath.Inner.init(downstream:keyPath:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

void sub_183B30E7C(uint64_t a1)
{
  *(void *)(v1 + *(int *)(a1 + 60)) = v2;
  uint64_t v3 = *(int *)(a1 + 64);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v5 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v4);
    *(void *)(v1 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v5;
  }

uint64_t Publishers.MapKeyPath.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x6874615079656BLL;
  *(void *)(v12 + 40) = 0xE700000000000000LL;
  uint64_t v13 = *(void *)(v1 + *(int *)(a1 + 60));
  swift_getAssociatedTypeWitness();
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = type metadata accessor for KeyPath();
  *(void *)(v12 + outlined destroy of SubscriptionStatus(v0 + 48) = v13;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v9, 1LL, 1LL, v14);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MapKeyPath.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x726F4665756C6156LL;
  a1[1] = 0xEB0000000079654BLL;
}

uint64_t Publishers.MapKeyPath.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 48) + 40LL))(a1, *(void *)(a2 + 32));
}

uint64_t Publishers.MapKeyPath.Inner.receive(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getAtKeyPath();
  uint64_t v7 = (*(uint64_t (**)(char *, void))(a2[6] + 48LL))(v6, a2[4]);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t Publishers.MapKeyPath.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 48) + 56LL))(a1, *(void *)(a2 + 32));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapKeyPath<A, B>.Inner<A1>()
{
  return 0x726F4665756C6156LL;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath<A, B>( uint64_t a1)
{
}

uint64_t Publishers.MapKeyPath2.keyPath0.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath2.keyPath1.getter()
{
  return swift_retain();
}

void Publishers.MapKeyPath2.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B3128C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v10, v9);
  swift_retain();
  swift_retain();
  Publishers.MapKeyPath2.Inner.init(downstream:keyPath0:keyPath1:)(v11, v9, (uint64_t)v14);
}

uint64_t sub_183B31314()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.MapKeyPath2<A, B, C>.Inner<A1>, v2);
  Publisher.subscribe<A>(_:)(v3, v4, v2, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v2);
}

void type metadata accessor for Publishers.MapKeyPath2.Inner()
{
}

void Publishers.MapKeyPath2.Inner.init(downstream:keyPath0:keyPath1:)( uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

void sub_183B31404(int *a1)
{
  *(void *)(v1 + a1[17]) = v3;
  *(void *)(v1 + a1[18]) = v2;
  uint64_t v4 = a1[19];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v5 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v6 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v5);
    *(void *)(v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v6;
  }

uint64_t Publishers.MapKeyPath2.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9DB50;
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x306874615079656BLL;
  *(void *)(v12 + 40) = 0xE800000000000000LL;
  uint64_t v13 = *(void *)(v1 + *(int *)(a1 + 68));
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for KeyPath();
  *(void *)(v12 + outlined destroy of SubscriptionStatus(v0 + 48) = v13;
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v14;
  *(void *)(v12 + 80) = 0x316874615079656BLL;
  *(void *)(v12 + 88) = 0xE800000000000000LL;
  uint64_t v15 = *(void *)(v1 + *(int *)(a1 + 72));
  *(void *)(v12 + 120) = type metadata accessor for KeyPath();
  *(void *)(v12 + 96) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v9, 1LL, 1LL, v16);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MapKeyPath2.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "ValueForKeys");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t Publishers.MapKeyPath2.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 56) + 40LL))(a1, *(void *)(a2 + 40));
}

uint64_t Publishers.MapKeyPath2.Inner.receive(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = a2[3];
  uint64_t v5 = a2[4];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v24 = TupleTypeMetadata2;
  uint64_t v25 = v8;
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)v23 - v10;
  uint64_t v12 = *(void *)(v5 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v9);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[1] = v3;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  uint64_t v19 = v24;
  uint64_t v20 = &v11[*(int *)(v24 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v11, v18, v6);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v15, v5);
  uint64_t v21 = (*(uint64_t (**)(char *, void))(a2[7] + 48LL))(v11, a2[5]);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v19);
  return v21;
}

uint64_t Publishers.MapKeyPath2.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 56) + 56LL))(a1, *(void *)(a2 + 40));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapKeyPath2<A, B, C>.Inner<A1>()
{
  return 0x726F4665756C6156LL;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath2<A, B, C>( uint64_t a1)
{
}

uint64_t Publishers.MapKeyPath3.keyPath0.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath3.keyPath1.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath3.keyPath2.getter()
{
  return swift_retain();
}

void Publishers.MapKeyPath3.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B31958( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v13 - 152) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&a9 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v11, v10);
  swift_retain();
  swift_retain();
  swift_retain();
  Publishers.MapKeyPath3.Inner.init(downstream:keyPath0:keyPath1:keyPath2:)(v12, v10, (uint64_t)v15);
}

uint64_t sub_183B319F8()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>, v2);
  Publisher.subscribe<A>(_:)(v3, v0, v2, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 152) + 8LL))(v3, v2);
}

void type metadata accessor for Publishers.MapKeyPath3.Inner()
{
}

void Publishers.MapKeyPath3.Inner.init(downstream:keyPath0:keyPath1:keyPath2:)( uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
}

void sub_183B31B00(int *a1)
{
  *(void *)(v1 + a1[19]) = v4;
  *(void *)(v1 + a1[20]) = v3;
  *(void *)(v1 + a1[21]) = v2;
  uint64_t v5 = a1[22];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(void *)(v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v1, *(void *)(v10 - 144), v5) = v7;
  }

uint64_t Publishers.MapKeyPath3.Inner.customMirror.getter@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v8 = MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  (*(void (**)(char *, uint64_t, int *))(v12 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9EBF0;
  *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0x306874615079656BLL;
  *(void *)(v13 + 40) = 0xE800000000000000LL;
  uint64_t v14 = *(void *)(v2 + a1[19]);
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for KeyPath();
  *(void *)(v13 + outlined destroy of SubscriptionStatus(v0 + 48) = v14;
  *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v15;
  *(void *)(v13 + 80) = 0x316874615079656BLL;
  *(void *)(v13 + 88) = 0xE800000000000000LL;
  uint64_t v16 = *(void *)(v2 + a1[20]);
  uint64_t v17 = type metadata accessor for KeyPath();
  *(void *)(v13 + 96) = v16;
  *(void *)(v13 + 120) = v17;
  *(void *)(v13 + 128) = 0x326874615079656BLL;
  *(void *)(v13 + 136) = 0xE800000000000000LL;
  uint64_t v18 = *(void *)(v2 + a1[21]);
  *(void *)(v13 + 168) = type metadata accessor for KeyPath();
  *(void *)(v13 + 144) = v18;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v10, 1LL, 1LL, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v6);
  swift_retain();
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.MapKeyPath3.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 40LL))(a1, *(void *)(a2 + 48));
}

uint64_t Publishers.MapKeyPath3.Inner.receive(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[4];
  uint64_t v5 = a2[5];
  uint64_t v26 = a2[3];
  uint64_t v4 = v26;
  uint64_t v6 = v3;
  uint64_t v28 = v3;
  uint64_t v7 = v5;
  uint64_t v31 = v5;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v32 = *(void *)(TupleTypeMetadata3 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata3);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  uint64_t v20 = TupleTypeMetadata3;
  uint64_t v21 = &v10[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v22 = &v10[*(int *)(TupleTypeMetadata3 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v10, v19, v26);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v21, v16, v28);
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v22, v13, v31);
  uint64_t v23 = (*(uint64_t (**)(char *, void))(a2[8] + 48LL))(v10, a2[6]);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v20);
  return v23;
}

uint64_t Publishers.MapKeyPath3.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 56LL))(a1, *(void *)(a2 + 48));
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 88));
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath3<A, B, C, D>( uint64_t a1)
{
}

uint64_t type metadata completion function for Publishers.MapKeyPath()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B32338 + 4 * byte_183BA1668[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapKeyPath( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B324B0()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B32524LL);
}

void sub_183B324B8(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B324C0LL);
  }
  JUMPOUT(0x183B32524LL);
}

void sub_183B32500()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B32524LL);
}

void sub_183B32508()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B32524LL);
}

uint64_t sub_183B32510(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B32524LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B32520LL);
    }
    JUMPOUT(0x183B3251CLL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata accessor for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.MapKeyPath);
}

uint64_t type metadata completion function for Publishers.MapKeyPath2()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    *unsigned int v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL);
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)(v9 & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B32950 + 4 * byte_183BA1677[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapKeyPath2( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B32AD0()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B32B44LL);
}

void sub_183B32AD8(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B32AE0LL);
  }
  JUMPOUT(0x183B32B44LL);
}

void sub_183B32B20()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B32B44LL);
}

void sub_183B32B28()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B32B44LL);
}

uint64_t sub_183B32B30(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B32B44LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B32B40LL);
    }
    JUMPOUT(0x183B32B3CLL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for Publishers.MapKeyPath2()
{
}

uint64_t type metadata completion function for Publishers.MapKeyPath3()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    *unsigned int v10 = *v11;
    unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL);
    *unint64_t v12 = *v13;
    *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8LL);
    swift_retain();
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  unsigned int v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *unsigned int v10 = *(void *)v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((v9 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v9 = *v10;
  swift_release();
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath3(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B33004 + 4 * byte_183BA1686[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapKeyPath3( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero( a1,  ((((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
    + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B3318C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33200LL);
}

void sub_183B33194(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B3319CLL);
  }
  JUMPOUT(0x183B33200LL);
}

void sub_183B331DC()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33200LL);
}

void sub_183B331E4()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33200LL);
}

uint64_t sub_183B331EC(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B33200LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B331FCLL);
    }
    JUMPOUT(0x183B331F8LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for Publishers.MapKeyPath3()
{
}

uint64_t type metadata completion function for Publishers.MapKeyPath3.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath3.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    *unsigned int v10 = *v11;
    unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL);
    *unint64_t v12 = *v13;
    uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8LL);
    void *v14 = *v15;
    *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8LL);
    swift_retain();
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  unsigned int v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *unsigned int v10 = *(void *)v9;
  swift_retain();
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v9 = *v10;
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  *uint64_t v11 = *v12;
  swift_release();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath3.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 48) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
         + 8) & 0xFFFFFFF8) != 0)
      unsigned int v8 = 2;
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B33730 + 4 * byte_183BA1695[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapKeyPath3.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 48) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero( a1,  ((((((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
      + 15) & 0xFFFFFFFFFFFFFFF8LL)
    + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B338C0()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33934LL);
}

void sub_183B338C8(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B338D0LL);
  }
  JUMPOUT(0x183B33934LL);
}

void sub_183B33910()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33934LL);
}

void sub_183B33918()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33934LL);
}

uint64_t sub_183B33920(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B33934LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B33930LL);
    }
    JUMPOUT(0x183B3392CLL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.MapKeyPath2.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath2.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    *unsigned int v10 = *v11;
    unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL);
    *unint64_t v12 = *v13;
    *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8LL);
    swift_retain();
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  unsigned int v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  v9 &= 0xFFFFFFFFFFFFF8uLL;
  *unsigned int v10 = *(void *)v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v9 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  *unint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  *unint64_t v9 = *v10;
  swift_release();
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath2.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 40) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B33DC0 + 4 * byte_183BA16A4[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapKeyPath2.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 40) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero( a1,  ((((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
    + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B33F48()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33FBCLL);
}

void sub_183B33F50(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B33F58LL);
  }
  JUMPOUT(0x183B33FBCLL);
}

void sub_183B33F98()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33FBCLL);
}

void sub_183B33FA0()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B33FBCLL);
}

uint64_t sub_183B33FA8(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B33FBCLL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B33FB8LL);
    }
    JUMPOUT(0x183B33FB4LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.MapKeyPath.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
    *unsigned int v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8LL);
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(v9 & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B343B4 + 4 * byte_183BA16B3[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapKeyPath.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 32) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B34534()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B345A8LL);
}

void sub_183B3453C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B34544LL);
  }
  JUMPOUT(0x183B345A8LL);
}

void sub_183B34584()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B345A8LL);
}

void sub_183B3458C()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B345A8LL);
}

uint64_t sub_183B34594(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B345A8LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B345A4LL);
    }
    JUMPOUT(0x183B345A0LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t DebugHook.willReceive<A, B>(publisher:subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = DebugHook.debugHandlers.getter();
  uint64_t v10 = *(void *)(v16 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(v16 + 40);
    do
    {
      uint64_t v12 = *v11;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
      swift_unknownObjectRetain();
      v14(a1, a2, a3, a4, a5, a6, ObjectType, v12);
      swift_unknownObjectRelease();
      v11 += 2;
      --v10;
    }

    while (v10);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A, B>(publisher:subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = DebugHook.debugHandlers.getter();
  uint64_t v10 = *(void *)(v16 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(v16 + 40);
    do
    {
      uint64_t v12 = *v11;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16);
      swift_unknownObjectRetain();
      v14(a1, a2, a3, a4, a5, a6, ObjectType, v12);
      swift_unknownObjectRelease();
      v11 += 2;
      --v10;
    }

    while (v10);
  }

  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.init(subscriber:inner:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a5 + *(int *)(type metadata accessor for SubscriberTap(0LL, a3, a4, v9) + 36);
  return outlined init with take of Any?(a2, v10);
}

Swift::Void __swiftcall _Introspection.enable()()
{
  Swift::UInt v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for DebugHook();
  specialized static DebugHook.enable(_:)(v2, v5, v4, v3);
}

uint64_t type metadata accessor for DebugHook()
{
  return objc_opt_self();
}

Swift::Void __swiftcall _Introspection.disable()()
{
}

BOOL _Introspection.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DebugHook();
  return specialized static DebugHook.handlerIsEnabled(_:)(v2, v5, a1, a2);
}

uint64_t SubscriberTap.combineIdentifier.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 24) + 8LL) + 8LL))(*(void *)(a1 + 16));
}

_OWORD *SubscriberTap.inner.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v75 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v75 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v65 - v8;
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (uint64_t (*)())((char *)&v65 - v11);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v65 - v14;
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v77 = (char *)&v65 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v76 = (char *)&v65 - v19;
  uint64_t v20 = v2 + *(int *)(v18 + 36);
  outlined init with copy of Any?(v20, (uint64_t)v83);
  if (v84)
  {
    uint64_t v21 = v83;
  }

  else
  {
    uint64_t v69 = v5;
    uint64_t v70 = v12;
    uint64_t v71 = v15;
    unsigned int v72 = v9;
    unsigned __int8 v68 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v73 = v20;
    outlined destroy of CustomStringConvertible?((uint64_t)v83, &demangling cache variable for type metadata for Any?);
    uint64_t v74 = v4;
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v23 = v76;
    uint64_t v24 = v2;
    uint64_t v25 = v75;
    v22(v76, v24, v75);
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v28 = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v89[3] = type metadata accessor for AnySubscriber(0LL, AssociatedTypeWitness, v28, AssociatedConformanceWitness);
    uint64_t v30 = (void *)swift_allocObject();
    v89[0] = v30;
    v22(v77, (uint64_t)v23, v25);
    uint64_t v31 = v25;
    if (swift_dynamicCast())
    {
      uint64_t v32 = v83[0];
      uint64_t v33 = (uint64_t (*)())v83[1];
      uint64_t v35 = v83[2];
      uint64_t v34 = v84;
      uint64_t v37 = v85;
      uint64_t v36 = v86;
      uint64_t v38 = v87;
      uint64_t v39 = v74;
      uint64_t v40 = v73;
      uint64_t v41 = v23;
    }

    else
    {
      uint64_t v77 = (char *)v28;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v26 + 8) + 8LL))(&v88, v25);
      type metadata accessor for AnySubscriberBox(0LL, v25, v26, v42);
      uint64_t v43 = (uint64_t)v71;
      v22(v71, (uint64_t)v23, v25);
      uint64_t v44 = AnySubscriberBox.__allocating_init(_:)(v43);
      v22((char *)v70, (uint64_t)v23, v31);
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
      char v45 = swift_dynamicCast();
      uint64_t v46 = v23;
      uint64_t v66 = v44;
      uint64_t v67 = AssociatedTypeWitness;
      if ((v45 & 1) != 0)
      {
        outlined init with take of Subscription(&v79, (uint64_t)v82);
        outlined init with take of Subscription(v82, (uint64_t)&v79);
        uint64_t v35 = swift_allocObject();
        outlined init with take of Subscription(&v79, v35 + 16);
        uint64_t v47 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU_TA_0;
      }

      else
      {
        uint64_t v81 = 0LL;
        __int128 v80 = 0u;
        __int128 v79 = 0u;
        outlined destroy of CustomStringConvertible?( (uint64_t)&v79,  &demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        uint64_t v48 = _typeName(_:qualified:)();
        uint64_t v49 = v22;
        uint64_t v51 = v50;
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v48;
        *(void *)(v35 + outlined destroy of Subscription?(v0 + 24) = v51;
        uint64_t v22 = v49;
        uint64_t v47 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU0_TA_0;
      }

      uint64_t v70 = v47;
      v22((char *)v43, (uint64_t)v46, v31);
      uint64_t v52 = v43;
      int v53 = v46;
      uint64_t v54 = v74;
      uint64_t v55 = v22;
      unint64_t v56 = (*(unsigned __int8 *)(v74 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
      uint64_t v37 = (void *)swift_allocObject();
      uint64_t v57 = v77;
      v37[2] = v67;
      v37[3] = v57;
      v37[4] = v31;
      v37[5] = v26;
      uint64_t v58 = (char *)v37 + v56;
      uint64_t v59 = (void (*)(char *, char *, uint64_t))v55;
      uint64_t v41 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v58, v52, v31);
      v59(v72, v53, v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
      if (swift_dynamicCast())
      {
        outlined init with take of Subscription(&v79, (uint64_t)v82);
        outlined init with take of Subscription(v82, (uint64_t)&v79);
        uint64_t v38 = swift_allocObject();
        outlined init with take of Subscription(&v79, v38 + 16);
        uint64_t v36 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU2_TA_0;
      }

      else
      {
        uint64_t v81 = 0LL;
        __int128 v80 = 0u;
        __int128 v79 = 0u;
        outlined destroy of CustomStringConvertible?( (uint64_t)&v79,  &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
        v59(v68, v53, v31);
        if (swift_dynamicCast())
        {
          outlined init with take of Subscription(&v79, (uint64_t)v82);
          outlined init with take of Subscription(v82, (uint64_t)&v79);
          uint64_t v38 = swift_allocObject();
          outlined init with take of Subscription(&v79, v38 + 16);
          uint64_t v36 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU3_TA_0;
        }

        else
        {
          uint64_t v81 = 0LL;
          __int128 v80 = 0u;
          __int128 v79 = 0u;
          outlined destroy of CustomStringConvertible?( (uint64_t)&v79,  &demangling cache variable for type metadata for CustomStringConvertible?);
          swift_getDynamicType();
          uint64_t v60 = _typeName(_:qualified:)();
          uint64_t v62 = v61;
          uint64_t v38 = swift_allocObject();
          *(void *)(v38 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v60;
          *(void *)(v38 + outlined destroy of Subscription?(v0 + 24) = v62;
          uint64_t v41 = v53;
          uint64_t v36 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU4_TA_0;
        }
      }

      uint64_t v34 = partial apply for closure #3 in AnySubscriber.init<A>(_:);
      uint64_t v39 = v74;
      uint64_t v40 = v73;
      uint64_t v32 = v66;
      uint64_t v33 = v70;
    }

    uint64_t v63 = v88;
    v30[2] = v32;
    v30[3] = v33;
    void v30[4] = v35;
    void v30[5] = v34;
    v30[6] = v37;
    v30[7] = v36;
    v30[8] = v38;
    v30[9] = v63;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v31);
    outlined destroy of CustomStringConvertible?(v40, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Any((uint64_t)v89, v40);
    uint64_t v21 = v89;
  }

  return outlined init with take of Any(v21, v78);
}

uint64_t SubscriberTap.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  outlined init with copy of Subscription(a1, (uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
  if (swift_dynamicCast())
  {
    v31[0] = v25;
    v31[1] = v26;
    uint64_t v32 = v27;
    if (one-time initialization token for globalLock != -1) {
      swift_once();
    }
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    uint64_t v6 = static DebugHook.globalHook;
    uint64_t v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v7);
    if (v6)
    {
      DebugHook.willReceive<A>(subscriber:subscription:)(v3, (uint64_t)v31, *(void *)(a2 + 16), *(void *)(a2 + 24));
      swift_release();
    }

    uint64_t v29 = &type metadata for SubscriptionTap;
    uint64_t v30 = &protocol witness table for SubscriptionTap;
    v28[0] = swift_allocObject();
    outlined init with copy of SubscriptionTap((uint64_t)v31, v28[0] + 16LL);
    uint64_t v10 = a2 + 16;
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(v10 + 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v9 + 40))(v28, v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    uint64_t v11 = static DebugHook.globalHook;
    uint64_t v12 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v12);
    if (v11)
    {
      uint64_t v13 = v31;
      uint64_t v14 = v3;
      uint64_t v15 = v8;
      uint64_t v16 = v9;
LABEL_14:
      DebugHook.didReceive<A>(subscriber:subscription:)(v14, (uint64_t)v13, v15, v16);
      swift_release();
    }
  }

  else
  {
    uint64_t v27 = 0LL;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    outlined destroy of CustomStringConvertible?( (uint64_t)&v25,  &demangling cache variable for type metadata for SubscriptionTap?);
    outlined init with copy of Subscription(a1, (uint64_t)v31);
    if (one-time initialization token for globalLock != -1) {
      swift_once();
    }
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    uint64_t v17 = static DebugHook.globalHook;
    uint64_t v18 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v18);
    if (v17)
    {
      DebugHook.willReceive<A>(subscriber:subscription:)(v3, a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
      swift_release();
    }

    uint64_t v29 = &type metadata for SubscriptionTap;
    uint64_t v30 = &protocol witness table for SubscriptionTap;
    v28[0] = swift_allocObject();
    outlined init with copy of SubscriptionTap((uint64_t)v31, v28[0] + 16LL);
    uint64_t v21 = a2 + 16;
    uint64_t v19 = *(void *)(a2 + 16);
    uint64_t v20 = *(void *)(v21 + 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v20 + 40))(v28, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    uint64_t v22 = static DebugHook.globalHook;
    uint64_t v23 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v23);
    if (v22)
    {
      uint64_t v14 = v3;
      uint64_t v13 = (_OWORD *)a1;
      uint64_t v15 = v19;
      uint64_t v16 = v20;
      goto LABEL_14;
    }
  }

  return outlined destroy of SubscriptionTap((uint64_t)v31);
}

uint64_t DebugHook.willReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = DebugHook.debugHandlers.getter();
  uint64_t v8 = *(void *)(v14 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v10 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 24);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }

    while (v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = DebugHook.debugHandlers.getter();
  uint64_t v8 = *(void *)(v14 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v10 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }

    while (v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = static DebugHook.globalHook;
  uint64_t v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v7);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  if (v6)
  {
    DebugHook.willReceive<A>(subscriber:input:)(v3, a1, v9, v8);
    swift_release();
  }

  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, v9, v8);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v11 = static DebugHook.globalHook;
  uint64_t v12 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v12);
  if (v11)
  {
    DebugHook.didReceive<A>(subscriber:input:resultingDemand:)(v3, a1, v10, v9, v8);
    swift_release();
  }

  return v10;
}

uint64_t DebugHook.willReceive<A>(subscriber:input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = DebugHook.debugHandlers.getter();
  uint64_t v8 = *(void *)(v14 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v10 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }

    while (v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:input:resultingDemand:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = DebugHook.debugHandlers.getter();
  uint64_t v9 = *(void *)(v15 + 16);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v15 + 40);
    do
    {
      uint64_t v11 = *v10;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
      swift_unknownObjectRetain();
      v13(a1, a2, a3, a4, a5, ObjectType, v11);
      swift_unknownObjectRelease();
      v10 += 2;
      --v9;
    }

    while (v9);
  }

  return swift_bridgeObjectRelease();
}

void SubscriberTap.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = static DebugHook.globalHook;
  uint64_t v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v7);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  if (v6)
  {
    DebugHook.willReceive<A>(subscriber:completion:)(v3, a1, v9, v8);
    swift_release();
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v9, v8);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v10 = static DebugHook.globalHook;
  uint64_t v11 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v11);
  if (v10)
  {
    DebugHook.didReceive<A>(subscriber:completion:)(v3, a1, v9, v8);
    swift_release();
  }

uint64_t DebugHook.willReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = DebugHook.debugHandlers.getter();
  uint64_t v8 = *(void *)(v14 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v10 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }

    while (v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = DebugHook.debugHandlers.getter();
  uint64_t v8 = *(void *)(v14 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v10 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }

    while (v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.description.getter()
{
  return 0LL;
}

Swift::Void __swiftcall SubscriptionTap.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v4 = static DebugHook.globalHook;
  uint64_t v5 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v5);
  if (v4)
  {
    uint64_t v6 = DebugHook.debugHandlers.getter();
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = (uint64_t *)(v6 + 40);
      do
      {
        uint64_t v9 = *v8;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v11 = *(void (**)(void *, Swift::UInt, uint64_t, uint64_t))(v9 + 72);
        swift_unknownObjectRetain();
        v11(v2, a1.rawValue, ObjectType, v9);
        swift_unknownObjectRelease();
        v8 += 2;
        --v7;
      }

      while (v7);
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

  uint64_t v12 = v2[3];
  uint64_t v13 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v12);
  (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v13 + 24))(a1.rawValue, v12, v13);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v14 = static DebugHook.globalHook;
  uint64_t v15 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v15);
  if (v14)
  {
    uint64_t v16 = DebugHook.debugHandlers.getter();
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = (uint64_t *)(v16 + 40);
      do
      {
        uint64_t v19 = *v18;
        uint64_t v20 = swift_getObjectType();
        uint64_t v21 = *(void (**)(void *, Swift::UInt, uint64_t, uint64_t))(v19 + 80);
        swift_unknownObjectRetain();
        v21(v2, a1.rawValue, v20, v19);
        swift_unknownObjectRelease();
        v18 += 2;
        --v17;
      }

      while (v17);
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

Swift::Void __swiftcall SubscriptionTap.cancel()()
{
  Swift::UInt v1 = v0;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v2 = static DebugHook.globalHook;
  uint64_t v3 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v3);
  if (v2)
  {
    uint64_t v4 = DebugHook.debugHandlers.getter();
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(v4 + 40);
      do
      {
        uint64_t v7 = *v6;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 88);
        swift_unknownObjectRetain();
        v9(v1, ObjectType, v7);
        swift_unknownObjectRelease();
        v6 += 2;
        --v5;
      }

      while (v5);
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

  uint64_t v11 = v1[3];
  uint64_t v10 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v11);
  (*(void (**)(uint64_t))(*(void *)(v10 + 8) + 8LL))(v11);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v12 = static DebugHook.globalHook;
  uint64_t v13 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v13);
  if (v12)
  {
    uint64_t v14 = DebugHook.debugHandlers.getter();
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(v14 + 40);
      do
      {
        uint64_t v17 = *v16;
        uint64_t v18 = swift_getObjectType();
        uint64_t v19 = *(void (**)(void *, uint64_t, uint64_t))(v17 + 96);
        swift_unknownObjectRetain();
        v19(v1, v18, v17);
        swift_unknownObjectRelease();
        v16 += 2;
        --v15;
      }

      while (v15);
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SubscriptionTap()
{
  return 0LL;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance SubscriptionTap()
{
  Swift::UInt v1 = v0;
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 8LL))(v3);
}

_DWORD *one-time initialization function for globalLock()
{
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  static DebugHook.globalLock = (uint64_t)result;
  return result;
}

uint64_t DebugHook.debugHandlers.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x18961AFE8];
  if (v2)
  {
    uint64_t v15 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0);
    uint64_t v3 = v15;
    uint64_t result = specialized Set.startIndex.getter(v1);
    int64_t v5 = result;
    int v7 = v6;
    char v9 = v8 & 1;
    while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(v1 + 32))
    {
      if (*(_DWORD *)(v1 + 36) != v7) {
        goto LABEL_14;
      }
      unint64_t v10 = *(void *)(v15 + 16);
      unint64_t v11 = *(void *)(v15 + 24);
      __int128 v14 = *(_OWORD *)(*(void *)(v1 + 48) + 16 * v5);
      swift_unknownObjectRetain();
      if (v10 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v10 + 1,  1);
      }
      *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10 + 1;
      *(_OWORD *)(v15 + 16 * v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v14;
      uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, v1);
      int64_t v5 = result;
      int v7 = v12;
      char v9 = v13 & 1;
      if (!--v2)
      {
        outlined consume of Set<DebugHook.Handler>.Index._Variant(result, v12, v13 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  else
  {
LABEL_11:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
    return v3;
  }

  return result;
}

uint64_t DebugHook.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1LL << *(_BYTE *)(a3 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(a3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = ~v6;
  do
  {
    uint64_t v9 = *(void *)(*(void *)(a3 + 48) + 16 * v7);
    BOOL result = v9 == a1;
    if (v9 == a1) {
      break;
    }
    unint64_t v7 = (v7 + 1) & v8;
  }

  while (((*(void *)(a3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0);
  return result;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( void *a1, int64_t a2, char a3)
{
  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = result;
  return result;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Introspection>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }

  else
  {
    unint64_t v10 = (void *)MEMORY[0x18961AFE8];
  }

  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _Introspection);
    swift_arrayInitWithCopy();
  }

  swift_release();
  return v10;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (BOOL result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

void specialized static DebugHook.enable(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = (os_unfair_lock_t *)static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    unint64_t v7 = (os_unfair_lock_s *)*((void *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v10, a1, a4);
    swift_endAccess();
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(v6[2]);
  }

  else
  {
    uint64_t v8 = swift_allocObject();
    unint64_t v9 = (os_unfair_lock_s *)swift_slowAlloc();
    v9->_os_unfair_lock_opaque = 0;
    *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
    *(void *)(v8 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x18961AFF8];
    os_unfair_lock_lock(v9);
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v10, a1, a4);
    swift_endAccess();
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    static DebugHook.globalHook = (_UNKNOWN *)v8;
  }

  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
}

void specialized static DebugHook.disable(_:)()
{
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v0 = static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    unint64_t v1 = (os_unfair_lock_s *)*((void *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v1);
    swift_beginAccess();
    Swift::UInt v2 = swift_unknownObjectRetain();
    specialized Set._Variant.remove(_:)(v2);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v3 = *(void *)(*((void *)v0 + 3) + 16LL);
    os_unfair_lock_unlock(*((os_unfair_lock_t *)v0 + 2));
    if (!v3)
    {
      static DebugHook.globalHook = 0LL;
      swift_release();
    }

    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  }

BOOL specialized static DebugHook.handlerIsEnabled(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    unint64_t v7 = (os_unfair_lock_s *)*((void *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    BOOL v8 = specialized Set.contains(_:)(a1, a4, *((void *)v6 + 3));
    os_unfair_lock_unlock(*((os_unfair_lock_t *)v6 + 2));
    swift_release();
  }

  else
  {
    BOOL v8 = 0;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  return v8;
}

uint64_t dispatch thunk of _Introspection.willReceive<A, B>(publisher:subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A, B>(publisher:subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:subscription:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:subscription:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:input:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:input:resultingDemand:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:completion:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of _Introspection.willRequest(subscription:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of _Introspection.didRequest(subscription:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of _Introspection.willCancel(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of _Introspection.didCancel(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of SubscriberTapMarker.inner.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_OWORD *initializeBufferWithCopyOfBuffer for DebugHook.Handler(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for DebugHook.Handler()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for DebugHook.Handler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for DebugHook.Handler(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for DebugHook.Handler()
{
  return &type metadata for DebugHook.Handler;
}

uint64_t *initializeBufferWithCopyOfBuffer for SubscriberTap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v12 = *(void *)(v11 + 24);
    if (v12 < 0xFFFFFFFF)
    {
      __int128 v13 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
    }

    else
    {
      *(void *)(v10 + outlined destroy of Subscription?(v0 + 24) = v12;
      (**(void (***)(void))(v12 - 8))();
    }
  }

  return v4;
}

unint64_t destroy for SubscriberTap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  unint64_t result = (a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)(result + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = *(void *)(v8 + 24);
  if (v9 < 0xFFFFFFFF)
  {
    __int128 v10 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
  }

  else
  {
    *(void *)(v7 + outlined destroy of Subscription?(v0 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }

  return a1;
}

uint64_t assignWithCopy for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      *(void *)(v7 + outlined destroy of Subscription?(v0 + 24) = v9;
      (**(void (***)(unint64_t, unint64_t))(v9 - 8))(v7, v8);
      return a1;
    }

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v10 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v10;
      }

      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (uint64_t *)swift_release();
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }

        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }

  return result;
}

uint64_t initializeWithTake for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  __int128 v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithTake for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  }
  int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  __int128 v9 = v8[1];
  *(_OWORD *)unint64_t v7 = *v8;
  *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriberTap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      unint64_t v12 = *(void *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL) + 0x18);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      else {
        return 0LL;
      }
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 32) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B36CB4 + 4 * byte_183BA19F0[v10]))();
  }

void storeEnumTagSinglePayload for SubscriberTap( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 32);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B36E34()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B36EBCLL);
}

void sub_183B36E3C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B36E44LL);
  }
  JUMPOUT(0x183B36EBCLL);
}

void sub_183B36E8C()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B36EBCLL);
}

void sub_183B36E94()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B36EBCLL);
}

uint64_t sub_183B36E9C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(_WORD *)(v6 + v7) = 0;
  if (!a2) {
    goto LABEL_6;
  }
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE) {
      JUMPOUT(0x183B36EA8LL);
    }
    *(void *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL) + outlined destroy of Subscription?(v0 + 24) = a2;
LABEL_6:
    JUMPOUT(0x183B36EBCLL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

unint64_t lazy protocol witness table accessor for type DebugHook.Handler and conformance DebugHook.Handler()
{
  unint64_t result = lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler;
  if (!lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for DebugHook.Handler,  &type metadata for DebugHook.Handler);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler);
  }

  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in SubscriberTap<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t outlined consume of Set<DebugHook.Handler>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_183B36F44()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of SubscriptionTap(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + outlined destroy of Subscription?(v0 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of SubscriptionTap(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_183B37014()
{
  return swift_deallocObject();
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU0_TA_0()
{
  return closure #2 in AnySubscriber.init<A>(_:)(*(void *)(v0 + 16));
}

uint64_t sub_183B37058()
{
  return swift_deallocObject();
}

uint64_t sub_183B370B0()
{
  return swift_deallocObject();
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU4_TA_0@<X0>( void *a1@<X8>)
{
  return closure #6 in AnySubscriber.init<A>(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU3_TA_0@<X0>( uint64_t *a1@<X8>)
{
  return closure #5 in AnySubscriber.init<A>(_:)((void *)(v1 + 16), a1);
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU2_TA_0()
{
  return closure #4 in AnySubscriber.init<A>(_:)((void *)(v0 + 16));
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU_TA_0()
{
  return closure #1 in AnySubscriber.init<A>(_:)((void *)(v0 + 16));
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SubscriptionTap(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

ValueMetadata *type metadata accessor for SubscriptionTap()
{
  return &type metadata for SubscriptionTap;
}

uint64_t ConduitList.init()()
{
  return 0LL;
}

uint64_t ConduitList.insert(_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = result;
  uint64_t v6 = *(void *)v3;
  if (*(_BYTE *)(v3 + 8))
  {
    if (*(_BYTE *)(v3 + 8) == 1)
    {
      uint64_t v13 = *(void *)v3;
      swift_retain();
      outlined copy of ConduitList<A, Never><A>(v6, 1);
      uint64_t v7 = type metadata accessor for ConduitBase(255LL, a2[2], a2[3], a2[4]);
      MEMORY[0x186E22960](&protocol conformance descriptor for ConduitBase<A, B>, v7);
      type metadata accessor for Set();
      Set.insert(_:)();
      swift_release();
      uint64_t v8 = *(void *)v3;
      *(void *)uint64_t v3 = v13;
      char v9 = *(_BYTE *)(v3 + 8);
      *(_BYTE *)(v3 + 8) = 1;
      swift_bridgeObjectRetain();
      outlined consume of ConduitList<A, Never><A>(v8, v9);
      return swift_bridgeObjectRelease();
    }

    else
    {
      *(void *)uint64_t v3 = result;
      *(_BYTE *)(v3 + 8) = 0;
      return swift_retain();
    }
  }

  else if (v6 != result)
  {
    uint64_t v10 = type metadata accessor for ConduitBase(0LL, a2[2], a2[3], a2[4]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    swift_allocObject();
    static Array._adoptStorage(_:count:)();
    *unint64_t v11 = v6;
    v11[1] = v5;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v12 = type metadata accessor for Array();
    swift_retain();
    MEMORY[0x186E22960](&protocol conformance descriptor for ConduitBase<A, B>, v10);
    MEMORY[0x186E22960](MEMORY[0x189618470], v12);
    uint64_t result = Set.init<A>(_:)();
    *(void *)uint64_t v3 = result;
    *(_BYTE *)(v3 + 8) = 1;
  }

  return result;
}

uint64_t ConduitList.remove(_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)v2;
  if (!*(_BYTE *)(v2 + 8))
  {
    if (v4 != result) {
      return result;
    }
    uint64_t result = outlined consume of ConduitList<A, Never><A>(*(void *)v2, 0);
    goto LABEL_11;
  }

  if (*(_BYTE *)(v2 + 8) != 1) {
    return result;
  }
  uint64_t v9 = *(void *)v2;
  uint64_t v5 = type metadata accessor for ConduitBase(255LL, a2[2], a2[3], a2[4]);
  swift_bridgeObjectRetain();
  MEMORY[0x186E22960](&protocol conformance descriptor for ConduitBase<A, B>, v5);
  uint64_t v6 = type metadata accessor for Set();
  Set.remove(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v7 = Set.count.getter();
  swift_bridgeObjectRelease();
  if (v7 != 1)
  {
    uint64_t result = outlined consume of ConduitList<A, Never><A>(v4, 1);
    if (v7)
    {
      *(void *)uint64_t v3 = v9;
      *(_BYTE *)(v3 + 8) = 1;
      return result;
    }

    uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
    *(void *)uint64_t v3 = 0LL;
    *(_BYTE *)(v3 + 8) = 2;
    return result;
  }

  MEMORY[0x186E22960](MEMORY[0x189618718], v6);
  uint64_t result = Collection.first.getter();
  if (v8)
  {
    outlined consume of ConduitList<A, Never><A>(v4, 1);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v3 = v8;
    *(_BYTE *)(v3 + 8) = 0;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t ConduitBase.init()()
{
  return v0;
}

void ConduitBase.hash(into:)()
{
}

Swift::Int ConduitBase.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Void __swiftcall ConduitList.removeAll()()
{
  *(void *)uint64_t v0 = 0LL;
  *(_BYTE *)(v0 + 8) = 2;
}

BOOL static ConduitBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t type metadata accessor for ConduitBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConduitBase);
}

uint64_t initializeBufferWithCopyOfBuffer for ConduitList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConduitList<A, Never><A>(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ConduitList(uint64_t a1)
{
  return outlined consume of ConduitList<A, Never><A>(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ConduitList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConduitList<A, Never><A>(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ConduitList<A, Never><A>(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ConduitList(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of ConduitList<A, Never><A>(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConduitList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConduitList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for ConduitList(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for ConduitList(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t type metadata accessor for ConduitList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConduitList);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConduitBase<A, B>()
{
  return ConduitBase.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ConduitBase<A, B>()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConduitBase<A1, B1>()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConduitBase<A, B>( uint64_t *a1, uint64_t *a2)
{
  return static ConduitBase.== infix(_:_:)(*a1, *a2);
}

void base witness table accessor for Equatable in ConduitBase<A, B>()
{
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed ConduitBase<A, B>) -> (@error @owned Error)( void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 40))(*a1);
}

uint64_t AsyncPublisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t Publisher<>.values.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  char v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t AsyncPublisher.Iterator.Inner.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AsyncPublisher.Iterator.Inner.init()();
  return v0;
}

uint64_t AsyncPublisher.Iterator.Inner.init()()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *uint64_t v1 = 0;
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  *(void *)(v0 + outlined destroy of Subscription?(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0u;
  *(_OWORD *)(v0 + outlined destroy of SubscriptionStatus(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  return v0;
}

uint64_t *AsyncPublisher.Iterator.Inner.deinit()
{
  return AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(void, void, void))type metadata accessor for AsyncPublisher.Iterator.Inner.State);
}

uint64_t AsyncPublisher.Iterator.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void AsyncPublisher.Iterator.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for AsyncPublisher.Iterator.Inner.State( 0LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v5);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v7 + 16))(v14, v1 + 4, v6);
  uint64_t v8 = v15;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v14, v6);
  if (v8)
  {
    os_unfair_lock_unlock(v4);
    uint64_t v10 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v10);
  }

  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v7 + 40))(v1 + 4, v14, v6);
    swift_endAccess();
    uint64_t v11 = v1[9];
    v1[9] = 0LL;
    os_unfair_lock_unlock(v4);
    if (v11)
    {
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
    }
  }

uint64_t AsyncPublisher.Iterator.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v1 + 80LL);
  uint64_t v3 = *(void *)(*v1 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)v23 - v8;
  uint64_t v10 = v1[2];
  os_unfair_lock_lock((os_unfair_lock_t)v10);
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0LL, v4, v3, v11);
  v23[0] = *(void *)(v12 - 8);
  (*(void (**)(_BYTE *, void *, uint64_t))(v23[0] + 16LL))(v24, v1 + 4, v12);
  uint64_t v13 = (uint64_t)(v1 + 3);
  if (v25 < 2)
  {
    swift_beginAccess();
    a1 = *(void *)v13;
    swift_beginAccess();
    uint64_t v14 = type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)v10);
    if (MEMORY[0x186E220A8](a1, v14))
    {
      uint64_t v13 = 4LL;
      do
      {
        uint64_t v15 = v13 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v10 = *(void *)(a1 + 8 * v13);
          BOOL v17 = __OFADD__(v15, 1LL);
          uint64_t v18 = v13 - 3;
          if (v17) {
            goto LABEL_10;
          }
        }

        else
        {
          uint64_t v10 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v17 = __OFADD__(v15, 1LL);
          uint64_t v18 = v13 - 3;
          if (v17)
          {
LABEL_10:
            __break(1u);
            goto LABEL_11;
          }
        }

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v9,  1LL,  1LL,  AssociatedTypeWitness);
        (*(void (**)(void, char *, uint64_t))(v7 + 32))(*(void *)(*(void *)(v10 + 64) + 40LL), v9, v6);
        swift_continuation_resume();
        ++v13;
      }

      while (v18 != MEMORY[0x186E220A8](a1, v14));
    }

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }

Swift::Void __swiftcall AsyncPublisher.Iterator.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*v0 + 80LL);
  uint64_t v24 = *(void *)(*v0 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v22 - v5;
  os_unfair_lock_t v23 = (os_unfair_lock_t)v0[2];
  os_unfair_lock_lock(v23);
  swift_beginAccess();
  uint64_t v7 = v0[3];
  swift_beginAccess();
  uint64_t v8 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  uint64_t v9 = (uint64_t)(v0 + 4);
  swift_beginAccess();
  uint64_t v11 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0LL, v1, v24, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(v12 + 16))(&v29, v9, v11);
  if (v30 >= 2)
  {
LABEL_11:
    outlined init with take of Subscription(&v29, (uint64_t)v27);
    memset(v25, 0, sizeof(v25));
    __int128 v26 = xmmword_183B9D5C0;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v12 + 40))(v9, v25, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v23);
    __int128 v17 = v28;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(void))(*(void *)(*((void *)&v17 + 1) + 8LL) + 8LL))(v17);
    if (MEMORY[0x186E220A8](v7, v8))
    {
      uint64_t v18 = 4LL;
      do
      {
        uint64_t v19 = v18 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v21 = *(void *)(v7 + 8 * v18);
          BOOL v16 = __OFADD__(v19, 1LL);
          uint64_t v11 = v18 - 3;
          if (v16) {
            goto LABEL_19;
          }
        }

        else
        {
          uint64_t v21 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v16 = __OFADD__(v19, 1LL);
          uint64_t v11 = v18 - 3;
          if (v16)
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v6,  1LL,  1LL,  AssociatedTypeWitness);
        (*(void (**)(void, char *, uint64_t))(v4 + 32))(*(void *)(*(void *)(v21 + 64) + 40LL), v6, v3);
        swift_continuation_resume();
        ++v18;
      }

      while (v11 != MEMORY[0x186E220A8](v7, v8));
    }

    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }

  else
  {
    memset(v27, 0, sizeof(v27));
    __int128 v28 = xmmword_183B9D5C0;
    swift_beginAccess();
    uint64_t v24 = v12;
    (*(void (**)(uint64_t, void *, uint64_t))(v12 + 40))(v9, v27, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v23);
    if (!MEMORY[0x186E220A8](v7, v8)) {
      goto LABEL_20;
    }
    uint64_t v9 = 4LL;
    do
    {
      uint64_t v13 = v9 - 4;
      Swift::Bool v14 = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (v14)
      {
        uint64_t v15 = *(void *)(v7 + 8 * v9);
        BOOL v16 = __OFADD__(v13, 1LL);
        uint64_t v12 = v9 - 3;
        if (v16) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v15 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        BOOL v16 = __OFADD__(v13, 1LL);
        uint64_t v12 = v9 - 3;
        if (v16)
        {
LABEL_10:
          __break(1u);
          goto LABEL_11;
        }
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v6,  1LL,  1LL,  AssociatedTypeWitness);
      (*(void (**)(void, char *, uint64_t))(v4 + 32))(*(void *)(*(void *)(v15 + 64) + 40LL), v6, v3);
      swift_continuation_resume();
      ++v9;
    }

    while (v12 != MEMORY[0x186E220A8](v7, v8));
LABEL_20:
    swift_bridgeObjectRelease();
    (*(void (**)(__int128 *, uint64_t))(v24 + 8))(&v29, v11);
  }

uint64_t AsyncPublisher.Iterator.Inner.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  void v2[4] = *v1;
  return swift_task_switch();
}

uint64_t AsyncPublisher.Iterator.Inner.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  *uint64_t v1 = v0;
  v1[1] = AsyncPublisher.Iterator.Inner.next();
  return ((uint64_t (*)(void, void, void, void (*)(uint64_t), void, uint64_t))v4)( v0[2],  0LL,  0LL,  partial apply for closure #1 in AsyncPublisher.Iterator.Inner.next(),  v0[3],  v2);
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in AsyncPublisher.Iterator.Inner.next()(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(*a2 + 80LL);
  uint64_t v4 = *(void *)(*a2 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v11 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  uint64_t v13 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0LL, v5, v4, v12);
  (*(void (**)(__int128 *, void *, uint64_t))(*(void *)(v13 - 8) + 16LL))(&v24, a2 + 4, v13);
  if (!v25)
  {
    v20[1] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v14 = a2[9];
    unint64_t v15 = 0x8000000000000000LL;
    if (v14 != 0x8000000000000000LL)
    {
      if (v14 < 0)
      {
        __break(1u);
        return;
      }

      BOOL v16 = __OFADD__(v14, 1LL);
      unint64_t v17 = v14 + 1;
      if (!v16) {
        unint64_t v15 = v17;
      }
    }

    a2[9] = v15;
    os_unfair_lock_unlock(v11);
    return;
  }

  if (v25 == 1)
  {
    os_unfair_lock_unlock(v11);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v10,  1LL,  1LL,  AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v8 + 32))(*(void *)(*(void *)(a1 + 64) + 40LL), v10, v7);
    swift_continuation_resume();
  }

  else
  {
    outlined init with take of Subscription(&v24, (uint64_t)v21);
    void v20[4] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    uint64_t v18 = v22;
    uint64_t v19 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 24))(1LL, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }

void protocol witness for Subscriber.receive(subscription:) in conformance AsyncPublisher<A>.Iterator.Inner( void *a1)
{
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AsyncPublisher<A>.Iterator.Inner( uint64_t a1)
{
  return 0LL;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AsyncPublisher<A>.Iterator.Inner()
{
  return specialized AsyncPublisher.Iterator.Inner.receive(completion:)();
}

void protocol witness for Cancellable.cancel() in conformance AsyncPublisher<A>.Iterator.Inner()
{
}

uint64_t AsyncPublisher.Iterator.init(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = type metadata accessor for AsyncPublisher.Iterator.Inner(0LL, a2, a3, a4);
  uint64_t v10 = swift_allocObject();
  AsyncPublisher.Iterator.Inner.init()();
  type metadata accessor for AnyCancellable();
  uint64_t v14 = v10;
  swift_retain_n();
  uint64_t v11 = AnyCancellable.__allocating_init<A>(_:)( (uint64_t)&v14,  v9,  (uint64_t)&protocol witness table for AsyncPublisher<A>.Iterator.Inner);
  uint64_t v14 = v10;
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for AsyncPublisher<A>.Iterator.Inner, v9);
  Publisher.subscribe<A>(_:)((uint64_t)&v14, a2, v9, a3, v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  uint64_t result = swift_release();
  *a5 = v10;
  a5[1] = v11;
  return result;
}

uint64_t AsyncPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  return swift_task_switch();
}

uint64_t AsyncPublisher.Iterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)v0[4];
  uint64_t v3 = *v2;
  v0[5] = *v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  __int128 v4[2] = *(void *)(v1 + 16);
  void v4[3] = *(void *)(v1 + 24);
  v4[4] = v2;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  *uint64_t v5 = v0;
  v5[1] = AsyncPublisher.Iterator.next();
  return v8( v0[2],  (uint64_t)partial apply for closure #1 in AsyncPublisher.Iterator.next(),  v3,  (uint64_t)&async function pointer to partial apply for closure #2 in AsyncPublisher.Iterator.next(),  (uint64_t)v4,  v6);
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #2 in AsyncPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  *(void *)(v2 + outlined destroy of Subscription?(v0 + 24) = a2;
  return swift_task_switch();
}

uint64_t closure #2 in AsyncPublisher.Iterator.next()()
{
  uint64_t v1 = **(void ***)(v0 + 24);
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  void *v2 = v0;
  v2[1] = closure #2 in AsyncPublisher.Iterator.next();
  v2[2] = *(void *)(v0 + 16);
  v2[3] = v1;
  void v2[4] = *v1;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for closure #2 in AsyncPublisher.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AsyncPublisher.Iterator.next();
  __int128 v5[2] = a1;
  _OWORD v5[3] = v4;
  return swift_task_switch();
}

uint64_t partial apply for closure #2 in AsyncPublisher.Iterator.next()()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v13;
  void *v13 = v6;
  v13[1] = withTaskCancellationHandler<A>(handler:operation:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))v15)( a1,  a4,  a5,  a2,  a3,  0LL,  0LL,  a6);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator;
  void v6[3] = a2;
  void v6[4] = v2;
  __int128 v6[2] = a1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t AsyncPublisher.makeAsyncIterator()(uint64_t a1)
{
  return AsyncPublisher.makeAsyncIterator()( a1,  (uint64_t (*)(char *, uint64_t, void))AsyncPublisher.Iterator.init(_:));
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>( a1,  a2,  (void (*)(void))AsyncPublisher.makeAsyncIterator());
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AsyncThrowingPublisher.Iterator.Inner.init()();
  return v0;
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.init()()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *uint64_t v1 = 0;
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for UnsafeContinuation();
  *(void *)(v0 + outlined destroy of Subscription?(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0u;
  *(_OWORD *)(v0 + outlined destroy of SubscriptionStatus(v0 + 48) = 0u;
  *(void *)(v0 + 64) = 0LL;
  *(_BYTE *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = 2;
  *(void *)(v0 + 80) = 0LL;
  return v0;
}

uint64_t *AsyncThrowingPublisher.Iterator.Inner.deinit()
{
  return AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(void, void, void))type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State);
}

uint64_t *AsyncPublisher.Iterator.Inner.deinit(uint64_t (*a1)(void, void, void))
{
  uint64_t v3 = *v1;
  MEMORY[0x186E22A2C](v1[2], -1LL, -1LL);
  swift_bridgeObjectRelease();
  uint64_t v4 = a1(0LL, *(void *)(v3 + 80), *(void *)(v3 + 88));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v1 + 4, v4);
  return v1;
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void AsyncThrowingPublisher.Iterator.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State( 0LL,  *(void *)(v3 + 80),  *(void *)(v3 + 88),  v5);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(&v14, v1 + 4, v6);
  if (v17 == 2
    && (int8x16_t v8 = vorrq_s8(v15, v16),
        !(*(void *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)) | v14)))
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(&v14, v6);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v14);
    char v17 = 0;
    swift_beginAccess();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 40))(v1 + 4, &v14, v6);
    swift_endAccess();
    uint64_t v11 = v1[10];
    v1[10] = 0LL;
    os_unfair_lock_unlock(v4);
    if (v11)
    {
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
    }
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(&v14, v6);
    os_unfair_lock_unlock(v4);
    uint64_t v10 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v10);
  }

uint64_t AsyncThrowingPublisher.Iterator.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0LL, v4, v3, v11);
  uint64_t v27 = *(void *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v27 + 16))(v30, v1 + 4, v12);
  uint64_t v13 = v1 + 3;
  if (v30[40])
  {
    swift_beginAccess();
    uint64_t v14 = *v13;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    uint64_t v15 = type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    if (!MEMORY[0x186E220A8](v14, v15)) {
      goto LABEL_11;
    }
    uint64_t v16 = 4LL;
    while (1)
    {
      uint64_t v17 = v16 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v19 = *(void *)(v14 + 8 * v16);
        BOOL v20 = __OFADD__(v17, 1LL);
        uint64_t v21 = v16 - 3;
        if (v20) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v19 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        BOOL v20 = __OFADD__(v17, 1LL);
        uint64_t v21 = v16 - 3;
        if (v20)
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
LABEL_14:
          (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v30, v12);
          return 0LL;
        }
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v9,  1LL,  1LL,  AssociatedTypeWitness);
      (*(void (**)(void, char *, uint64_t))(v7 + 32))(*(void *)(*(void *)(v19 + 64) + 40LL), v9, v6);
      swift_continuation_throwingResume();
      ++v16;
      if (v21 == MEMORY[0x186E220A8](v14, v15)) {
        goto LABEL_11;
      }
    }
  }

  swift_beginAccess();
  uint64_t v29 = *v13;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for UnsafeContinuation();
  uint64_t v22 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v22);
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    swift_beginAccess();
    MEMORY[0x186E22960](MEMORY[0x189618490], v22);
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    uint64_t v23 = v28;
    os_unfair_lock_unlock(v10);
    uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v9, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v9, 0LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v7 + 32))(*(void *)(*(void *)(v23 + 64) + 40LL), v9, v6);
    swift_continuation_throwingResume();
    goto LABEL_14;
  }

  os_unfair_lock_unlock(v10);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UnsafeContinuation.resume(returning:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_continuation_throwingResume();
}

void AsyncThrowingPublisher.Iterator.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v61 = a1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v56 = (char *)&v52 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  int v53 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v58 = (char *)&v52 - v15;
  uint64_t v16 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v16);
  uint64_t v17 = (uint64_t)(v1 + 4);
  swift_beginAccess();
  uint64_t v19 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0LL, v3, v2, v18);
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(void *, uint64_t *, uint64_t))(v20 + 16))(v65, v1 + 4, v19);
  os_unfair_lock_t v63 = v16;
  if (v66)
  {
    if (v66 == 1)
    {
      MEMORY[0x186E22870](v65[0]);
      swift_beginAccess();
      uint64_t AssociatedTypeWitness = v1[3];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
      uint64_t v21 = type metadata accessor for UnsafeContinuation();
      type metadata accessor for Array();
      Array.removeAll(keepingCapacity:)(0);
      swift_endAccess();
      os_unfair_lock_unlock(v63);
      if (MEMORY[0x186E220A8](AssociatedTypeWitness, v21))
      {
        uint64_t v20 = 4LL;
        while (1)
        {
          uint64_t v22 = v20 - 4;
          Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)();
          if (IsNativeType)
          {
            uint64_t v17 = *(void *)(AssociatedTypeWitness + 8 * v20);
            BOOL v24 = __OFADD__(v22, 1LL);
            uint64_t v1 = (uint64_t *)(v20 - 3);
            if (v24) {
              goto LABEL_11;
            }
          }

          else
          {
            uint64_t v17 = _ArrayBuffer._getElementSlowPath(_:)();
            swift_unknownObjectRelease();
            BOOL v24 = __OFADD__(v22, 1LL);
            uint64_t v1 = (uint64_t *)(v20 - 3);
            if (v24)
            {
LABEL_11:
              __break(1u);
              goto LABEL_12;
            }
          }

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v10, 1LL, 1LL, v6);
          (*(void (**)(void, char *, uint64_t))(v8 + 32))( *(void *)(*(void *)(v17 + 64) + 40LL),  v10,  v7);
          swift_continuation_throwingResume();
          ++v20;
        }
      }

      goto LABEL_29;
    }
  }

  else
  {
LABEL_12:
    (*(void (**)(void *, uint64_t))(v20 + 8))(v65, v19);
  }

  uint64_t v54 = v20;
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t v25 = v1 + 3;
  swift_beginAccess();
  uint64_t v26 = v1[3];
  swift_bridgeObjectRetain();
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v27 = type metadata accessor for UnsafeContinuation();
  uint64_t v28 = MEMORY[0x186E22090](v26, v27);
  swift_bridgeObjectRelease();
  if (v28 >= 1)
  {
    v65[0] = 0LL;
    char v66 = 1;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v54 + 40))(v17, v65, v19);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v29 = type metadata accessor for Array();
    MEMORY[0x186E22960](MEMORY[0x189618490], v29);
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    uint64_t v54 = v64;
    uint64_t v30 = *v25;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock(v63);
    uint64_t v31 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v61, v60);
    uint64_t v32 = v62;
    uint64_t v33 = v57;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v31, 1LL, v57) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v10, 1LL, 1LL, v6);
      (*(void (**)(void, char *, uint64_t))(v8 + 32))(*(void *)(*(void *)(v54 + 64) + 40LL), v10, v7);
      swift_continuation_throwingResume();
    }

    else
    {
      uint64_t v37 = v31;
      uint64_t v38 = v56;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v56, v37, v33);
      uint64_t v39 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v40, v38, v33);
      v65[0] = v39;
      uint64_t v41 = v52;
      swift_allocError();
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v41 - 8) + 32LL))(v42, v65, v41);
      swift_continuation_throwingResumeWithError();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v33);
    }

    if (MEMORY[0x186E220A8](v30, v27))
    {
      uint64_t v43 = 4LL;
      do
      {
        uint64_t v44 = v43 - 4;
        Swift::Bool v45 = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (v45)
        {
          uint64_t v46 = *(void *)(v30 + 8 * v43);
          BOOL v24 = __OFADD__(v44, 1LL);
          uint64_t v47 = v43 - 3;
          if (v24) {
            goto LABEL_28;
          }
        }

        else
        {
          uint64_t v46 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v24 = __OFADD__(v44, 1LL);
          uint64_t v47 = v43 - 3;
          if (v24)
          {
LABEL_28:
            __break(1u);
            break;
          }
        }

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v10, 1LL, 1LL, v6);
        (*(void (**)(void, char *, uint64_t))(v8 + 32))(*(void *)(*(void *)(v46 + 64) + 40LL), v10, v7);
        swift_continuation_throwingResume();
        ++v43;
      }

      while (v47 != MEMORY[0x186E220A8](v30, v27));
    }

LABEL_29:
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v34 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v53, v61, v60);
  uint64_t v35 = v62;
  uint64_t v36 = v57;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v34, 1LL, v57) == 1)
  {
    v65[0] = 0LL;
  }

  else
  {
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v49 = v56;
    v48(v56, v34, v36);
    uint64_t v50 = swift_allocError();
    v48(v51, v49, v36);
    v65[0] = v50;
  }

  char v66 = 1;
  swift_beginAccess();
  (*(void (**)(uint64_t, void *, uint64_t))(v54 + 40))(v17, v65, v19);
  swift_endAccess();
  os_unfair_lock_unlock(v63);
}

    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v4, v6);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&v4[v38] & v12, v39);
    goto LABEL_30;
  }

  uint64_t v25 = 8 * v14;
  if (!a1[v14]) {
    goto LABEL_41;
  }
  uint64_t v26 = (a1[v14] - 1) << v25;
  if ((_DWORD)v14)
  {
    else {
      uint64_t v27 = 4;
    }
    __asm { BR              X12 }
  }

  if (v26 == -1)
  {
LABEL_41:
    if (!a2[v14]) {
      goto LABEL_34;
    }
    uint64_t v31 = (a2[v14] - 1) << v25;
    if ((_DWORD)v14)
    {
      else {
        uint64_t v32 = 4;
      }
      __asm { BR              X11 }
    }

    uint64_t v7 = *(void *)(v6 - 8);
    if (v31 == -1) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }

  if (!a2[v14] || (a2[v14] - 1) << v25 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v37 + 16))(v4, v3, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( (unint64_t)&v4[v38] & v12,  ((unint64_t)v3 + v38) & v12,  v39);
    if (!v15) {
      v4[v14] = 0;
    }
    return v4;
  }

    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v4, v6);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&v4[v38] & v12, v39);
    goto LABEL_30;
  }

  uint64_t v25 = 8 * v14;
  if (!a1[v14]) {
    goto LABEL_41;
  }
  uint64_t v26 = (a1[v14] - 1) << v25;
  if ((_DWORD)v14)
  {
    else {
      uint64_t v27 = 4;
    }
    __asm { BR              X12 }
  }

  if (v26 == -1)
  {
LABEL_41:
    if (!a2[v14]) {
      goto LABEL_34;
    }
    uint64_t v31 = (a2[v14] - 1) << v25;
    if ((_DWORD)v14)
    {
      else {
        uint64_t v32 = 4;
      }
      __asm { BR              X11 }
    }

    uint64_t v7 = *(void *)(v6 - 8);
    if (v31 == -1) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }

  if (!a2[v14] || (a2[v14] - 1) << v25 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v37 + 32))(v4, v3, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))( (unint64_t)&v4[v38] & v12,  ((unint64_t)v3 + v38) & v12,  v39);
    if (!v15) {
      v4[v14] = 0;
    }
    return v4;
  }

uint64_t UnsafeContinuation.resume(throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_continuation_throwingResumeWithError();
}

Swift::Void __swiftcall AsyncThrowingPublisher.Iterator.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*v0 + 80LL);
  uint64_t v2 = *(void *)(*v0 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v27 - v6;
  os_unfair_lock_t v29 = (os_unfair_lock_t)v0[2];
  os_unfair_lock_lock(v29);
  swift_beginAccess();
  uint64_t v8 = v0[3];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v9 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  uint64_t v10 = v0 + 4;
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0LL, v1, v2, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(__int128 *, void *, uint64_t))(v13 + 16))(v35, v10, v12);
  if (!v36)
  {
    outlined init with take of Subscription(v35, (uint64_t)v30);
    v33[0] = 0LL;
    char v34 = 1;
    swift_beginAccess();
    (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v33, v12);
    swift_endAccess();
    os_unfair_lock_unlock(v29);
    uint64_t v21 = v31;
    uint64_t v20 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(uint64_t))(*(void *)(v20 + 8) + 8LL))(v21);
    if (MEMORY[0x186E220A8](v8, v9))
    {
      uint64_t v22 = 4LL;
      do
      {
        uint64_t v23 = v22 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v25 = *(void *)(v8 + 8 * v22);
          BOOL v18 = __OFADD__(v23, 1LL);
          uint64_t v26 = v22 - 3;
          if (v18) {
            goto LABEL_20;
          }
        }

        else
        {
          uint64_t v25 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v18 = __OFADD__(v23, 1LL);
          uint64_t v26 = v22 - 3;
          if (v18)
          {
LABEL_20:
            __break(1u);
            break;
          }
        }

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v7,  1LL,  1LL,  AssociatedTypeWitness);
        (*(void (**)(void, char *, uint64_t))(v5 + 32))(*(void *)(*(void *)(v25 + 64) + 40LL), v7, v4);
        swift_continuation_throwingResume();
        ++v22;
      }

      while (v26 != MEMORY[0x186E220A8](v8, v9));
    }

    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return;
  }

  v33[0] = 0LL;
  char v34 = 1;
  swift_beginAccess();
  uint64_t v28 = v13;
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v33, v12);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  if (!MEMORY[0x186E220A8](v8, v9)) {
    goto LABEL_11;
  }
  uint64_t v14 = 4LL;
  while (1)
  {
    uint64_t v15 = v14 - 4;
    Swift::Bool v16 = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!v16) {
      break;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v14);
    BOOL v18 = __OFADD__(v15, 1LL);
    uint64_t v19 = v14 - 3;
    if (v18) {
      goto LABEL_10;
    }
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v7,  1LL,  1LL,  AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v5 + 32))(*(void *)(*(void *)(v17 + 64) + 40LL), v7, v4);
    swift_continuation_throwingResume();
    ++v14;
    if (v19 == MEMORY[0x186E220A8](v8, v9)) {
      goto LABEL_11;
    }
  }

  uint64_t v17 = _ArrayBuffer._getElementSlowPath(_:)();
  swift_unknownObjectRelease();
  BOOL v18 = __OFADD__(v15, 1LL);
  uint64_t v19 = v14 - 3;
  if (!v18) {
    goto LABEL_6;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_bridgeObjectRelease();
  (*(void (**)(__int128 *, uint64_t))(v28 + 8))(v35, v12);
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  void v2[4] = *v1;
  return swift_task_switch();
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  *uint64_t v1 = v0;
  v1[1] = AsyncThrowingPublisher.Iterator.Inner.next();
  return ((uint64_t (*)(void, void, void, void (*)(uint64_t), void, uint64_t))v4)( v0[2],  0LL,  0LL,  partial apply for closure #1 in AsyncThrowingPublisher.Iterator.Inner.next(),  v0[3],  v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + outlined destroy of SubscriptionStatus(v0 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(*a2 + 80LL);
  uint64_t v4 = *(void *)(*a2 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t v11 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v11);
  uint64_t v12 = a2 + 4;
  swift_beginAccess();
  uint64_t v14 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State(0LL, v5, v4, v13);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(__int128 *, void *, uint64_t))(v15 + 16))(v31, a2 + 4, v14);
  if (!v32)
  {
    outlined init with take of Subscription(v31, (uint64_t)v25);
    uint64_t v30 = a1;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    uint64_t v19 = v26;
    uint64_t v20 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 24))(1LL, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    return;
  }

  if (v32 != 1)
  {
    uint64_t v29 = a1;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v21 = a2[10];
    unint64_t v22 = 0x8000000000000000LL;
    if (v21 != 0x8000000000000000LL)
    {
      if (v21 < 0)
      {
        __break(1u);
        return;
      }

      BOOL v23 = __OFADD__(v21, 1LL);
      unint64_t v24 = v21 + 1;
      if (!v23) {
        unint64_t v22 = v24;
      }
    }

    a2[10] = v22;
    os_unfair_lock_unlock(v11);
    return;
  }

  uint64_t v16 = *(void *)&v31[0];
  v25[0] = 0LL;
  char v28 = 1;
  swift_beginAccess();
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v25, v14);
  swift_endAccess();
  os_unfair_lock_unlock(v11);
  if (v16)
  {
    v25[0] = v16;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_allocError();
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v17 - 8) + 32LL))(v18, v25, v17);
    swift_continuation_throwingResumeWithError();
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v10,  1LL,  1LL,  AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v8 + 32))(*(void *)(*(void *)(a1 + 64) + 40LL), v10, v7);
    swift_continuation_throwingResume();
  }

void protocol witness for Subscriber.receive(subscription:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner( void *a1)
{
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner( uint64_t a1)
{
  return 0LL;
}

void protocol witness for Subscriber.receive(completion:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner( uint64_t a1)
{
}

void protocol witness for Cancellable.cancel() in conformance AsyncThrowingPublisher<A>.Iterator.Inner()
{
}

uint64_t AsyncThrowingPublisher.Iterator.init(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner(0LL, a2, a3, a4);
  uint64_t v10 = swift_allocObject();
  AsyncThrowingPublisher.Iterator.Inner.init()();
  type metadata accessor for AnyCancellable();
  uint64_t v14 = v10;
  swift_retain_n();
  uint64_t v11 = AnyCancellable.__allocating_init<A>(_:)( (uint64_t)&v14,  v9,  (uint64_t)&protocol witness table for AsyncThrowingPublisher<A>.Iterator.Inner);
  uint64_t v14 = v10;
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for AsyncThrowingPublisher<A>.Iterator.Inner, v9);
  Publisher.subscribe<A>(_:)((uint64_t)&v14, a2, v9, a3, v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  uint64_t result = swift_release();
  *a5 = v10;
  a5[1] = v11;
  return result;
}

uint64_t AsyncThrowingPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  void v3[2] = a1;
  return swift_task_switch();
}

uint64_t AsyncThrowingPublisher.Iterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)v0[4];
  uint64_t v3 = *v2;
  v0[5] = *v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  __int128 v4[2] = *(void *)(v1 + 16);
  void v4[3] = *(void *)(v1 + 24);
  v4[4] = v2;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  *uint64_t v5 = v0;
  v5[1] = AsyncThrowingPublisher.Iterator.next();
  return v8( v0[2],  (uint64_t)partial apply for closure #1 in AsyncThrowingPublisher.Iterator.next(),  v3,  (uint64_t)&async function pointer to partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next(),  (uint64_t)v4,  v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in AsyncThrowingPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  *(void *)(v2 + outlined destroy of Subscription?(v0 + 24) = a2;
  return swift_task_switch();
}

uint64_t closure #2 in AsyncThrowingPublisher.Iterator.next()()
{
  uint64_t v1 = **(void ***)(v0 + 24);
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  void *v2 = v0;
  v2[1] = closure #2 in AsyncThrowingPublisher.Iterator.next();
  v2[2] = *(void *)(v0 + 16);
  v2[3] = v1;
  void v2[4] = *v1;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + outlined destroy of SubscriptionStatus(v0 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = withTaskCancellationHandler<A>(handler:operation:);
  __int128 v5[2] = a1;
  _OWORD v5[3] = v4;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingPublisher<A>.Iterator( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #2 in AsyncPublisher.Iterator.next();
  void v6[3] = a2;
  void v6[4] = v2;
  __int128 v6[2] = a1;
  return swift_task_switch();
}

uint64_t _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + outlined destroy of Subscription?(v0 + 24) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = v5;
  *uint64_t v5 = v4;
  v5[1] = _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0) {
    **(void **)(v2 + outlined destroy of Subscription?(v0 + 24) = *(void *)(v2 + 16);
  }
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t AsyncThrowingPublisher.makeAsyncIterator()(uint64_t a1)
{
  return AsyncPublisher.makeAsyncIterator()( a1,  (uint64_t (*)(char *, uint64_t, void))AsyncThrowingPublisher.Iterator.init(_:));
}

uint64_t AsyncPublisher.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  return a2(v6, v4, *(void *)(a1 + 24));
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncPublisher<A>()
{
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingPublisher<A>()
{
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncThrowingPublisher<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>( a1,  a2,  (void (*)(void))AsyncThrowingPublisher.makeAsyncIterator());
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>( uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v3, a1);
}

uint64_t type metadata accessor for AsyncPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncPublisher);
}

uint64_t destroy for AsyncPublisher.Iterator()
{
  return swift_release();
}

uint64_t type metadata accessor for AsyncPublisher.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncPublisher.Iterator);
}

uint64_t type metadata completion function for AsyncPublisher.Iterator.Inner()
{
  return type metadata completion function for AsyncPublisher.Iterator.Inner();
}

{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncPublisher.Iterator.Inner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncPublisher.Iterator.Inner);
}

uint64_t getEnumTagSinglePayload for AsyncPublisher(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B3AD4C + 4 * byte_183BA1CC0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncPublisher(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for AsyncThrowingPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncThrowingPublisher);
}

void *initializeBufferWithCopyOfBuffer for AsyncPublisher.Iterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AsyncPublisher.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AsyncPublisher.Iterator(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncThrowingPublisher.Iterator);
}

uint64_t type metadata completion function for AsyncThrowingPublisher.Iterator.Inner()
{
  return type metadata completion function for AsyncPublisher.Iterator.Inner();
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator.Inner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncThrowingPublisher.Iterator.Inner);
}

uint64_t destroy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    JUMPOUT(0x186E22870LL);
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *a2;
    MEMORY[0x186E2287C](*a2);
    *(void *)a1 = v5;
    *(_BYTE *)(a1 + 40) = 1;
  }

  else if (v3)
  {
    __int128 v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + outlined destroy of Subscription?(v0 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      MEMORY[0x186E22870](*(void *)a1);
    }

    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }

    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *a2;
      MEMORY[0x186E2287C](v7);
      *(void *)a1 = v7;
      *(_BYTE *)(a1 + 40) = 1;
    }

    else if (v5)
    {
      __int128 v8 = *(_OWORD *)a2;
      __int128 v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
    }

    else
    {
      uint64_t v6 = a2[3];
      *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = v6;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }

  return a1;
}

uint64_t assignWithTake for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      MEMORY[0x186E22870](*(void *)a1);
    }

    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }

    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(_BYTE *)(a1 + 40) = 1;
    }

    else
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = *(void *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }

  return a1;
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncThrowingPublisher.Iterator.Inner.State);
}

uint64_t type metadata accessor for AsyncPublisher.Iterator.Inner.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncPublisher.Iterator.Inner.State);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AsyncThrowingPublisher<A>.Iterator.Inner()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  unsigned int v1 = (void *)swift_task_alloc();
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  *unsigned int v1 = v0;
  v1[1] = withTaskCancellationHandler<A>(handler:operation:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  return MEMORY[0x18961BF58]();
}

uint64_t specialized AsyncPublisher.Iterator.Inner.receive(completion:)()
{
  uint64_t v2 = *(void *)(*v0 + 80LL);
  uint64_t v1 = *(void *)(*v0 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v20[-v6];
  __int128 v8 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v8);
  memset(v21, 0, sizeof(v21));
  __int128 v22 = xmmword_183B9D5C0;
  swift_beginAccess();
  uint64_t v10 = type metadata accessor for AsyncPublisher.Iterator.Inner.State(0LL, v2, v1, v9);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v0 + 4, v21, v10);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v11 = v0[3];
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v8);
  if (MEMORY[0x186E220A8](v11, v12))
  {
    uint64_t v13 = 4LL;
    do
    {
      uint64_t v14 = v13 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v16 = *(void *)(v11 + 8 * v13);
        BOOL v17 = __OFADD__(v14, 1LL);
        uint64_t v18 = v13 - 3;
        if (v17) {
          goto LABEL_9;
        }
      }

      else
      {
        uint64_t v16 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        BOOL v17 = __OFADD__(v14, 1LL);
        uint64_t v18 = v13 - 3;
        if (v17)
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }

      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v7,  1LL,  1LL,  AssociatedTypeWitness);
      (*(void (**)(void, _BYTE *, uint64_t))(v5 + 32))(*(void *)(*(void *)(v16 + 64) + 40LL), v7, v4);
      swift_continuation_resume();
      ++v13;
    }

    while (v18 != MEMORY[0x186E220A8](v11, v12));
  }

  return swift_bridgeObjectRelease();
}

void partial apply for closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1)
{
}

void partial apply for closure #1 in AsyncPublisher.Iterator.Inner.next()(uint64_t a1)
{
}

void Publisher.prefix<A>(untilOutputFrom:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = v21;
  type metadata accessor for Publishers.PrefixUntilOutput();
}

uint64_t sub_183B3B748(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.PrefixUntilOutput.init(upstream:other:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B3B7D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

void type metadata accessor for Publishers.PrefixUntilOutput()
{
}

uint64_t Publishers.PrefixUntilOutput.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.PrefixUntilOutput.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

void Publishers.PrefixUntilOutput.receive<A>(subscriber:)()
{
}

void sub_183B3B894()
{
}

uint64_t sub_183B3B8C0(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v4 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>, v3);
  Publisher.subscribe<A>(_:)((uint64_t)&v6, v1, v3, v2, v4);
  return swift_release();
}

void type metadata accessor for Publishers.PrefixUntilOutput.Inner()
{
}

void Publishers.PrefixUntilOutput.Inner.Termination.combineIdentifier.getter()
{
}

void sub_183B3B958()
{
}

uint64_t Publishers.PrefixUntilOutput.Inner.Termination.receive(subscription:)(void *a1)
{
  return Publishers.PrefixUntilOutput.Inner.terminationReceive(subscription:)(a1);
}

uint64_t Publishers.PrefixUntilOutput.Inner.terminationReceive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 72, (uint64_t)&v10);
  if (v13 == 2
    && (int8x16_t v4 = vorrq_s8(v11, v12),
        !(*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v10)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v10);
    char v13 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v1 + 72);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(1LL, v8, v9);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v3);
    uint64_t v6 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v6);
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination( void *a1)
{
  return Publishers.PrefixUntilOutput.Inner.Termination.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  return specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
}

  ;
}

char *Publishers.PrefixUntilOutput.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x186E22A2C](*((void *)v0 + 15), -1LL, -1LL);
  swift_release();
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 24));
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 72));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 184LL)]);
  return v0;
}

uint64_t Publishers.PrefixUntilOutput.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall Publishers.PrefixUntilOutput.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 24, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(v3);
  }

  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v5 + 24))(a1.rawValue, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }

Swift::Void __swiftcall Publishers.PrefixUntilOutput.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 120);
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 24, (uint64_t)&v4);
  if (v7)
  {
    uint64_t v13 = 0LL;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v4);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v4, (uint64_t)&v11);
  }

  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 72, (uint64_t)&v4);
  if (v7)
  {
    uint64_t v10 = 0LL;
    __int128 v9 = 0u;
    __int128 v8 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v4);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v4, (uint64_t)&v8);
  }

  uint64_t v4 = 1LL;
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  char v7 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v4, v0 + 24);
  swift_endAccess();
  uint64_t v4 = 1LL;
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  char v7 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v4, v0 + 72);
  swift_endAccess();
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  swift_release();
  os_unfair_lock_unlock(v1);
  if (*((void *)&v12 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v11, (uint64_t)&v4);
    __int128 v2 = v6;
    __swift_project_boxed_opaque_existential_1(&v4, v6);
    (*(void (**)(void))(*(void *)(*((void *)&v2 + 1) + 8LL) + 8LL))(v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
  }

  if (*((void *)&v9 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v8, (uint64_t)&v4);
    __int128 v3 = v6;
    __swift_project_boxed_opaque_existential_1(&v4, v6);
    (*(void (**)(void))(*(void *)(*((void *)&v3 + 1) + 8LL) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
  }

  outlined destroy of Subscription?((uint64_t)&v8);
  outlined destroy of Subscription?((uint64_t)&v11);
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v21 - v9;
  __int128 v11 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 24, (uint64_t)&v23);
  if (v26 == 2
    && (int8x16_t v12 = vorrq_s8(v24, v25),
        !(*(void *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | v23)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v23);
    int v22 = *(unsigned __int8 *)(v1 + 113);
    if (v22 == 1)
    {
      uint64_t v23 = 1LL;
      int8x16_t v24 = 0u;
      int8x16_t v25 = 0u;
      char v26 = 2;
    }

    else
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v23);
      char v26 = 0;
    }

    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v23, v1 + 24);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    v25.i64[0] = v3;
    v25.i64[1] = (uint64_t)&protocol witness table for Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>;
    uint64_t v23 = v1;
    uint64_t v16 = *(void *)(v3 + 128);
    uint64_t v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 40);
    uint64_t v18 = *(void *)(v3 + 96);
    swift_retain();
    v17(&v23, v18, v16);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    if (v22)
    {
      uint64_t v20 = a1[3];
      uint64_t v19 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v20);
      (*(void (**)(uint64_t))(*(void *)(v19 + 8) + 8LL))(v20);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v10,  1LL,  1LL,  AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 56))(v10, v18, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v23);
    os_unfair_lock_unlock(v11);
    uint64_t v14 = a1[3];
    uint64_t v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v14);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8LL))(v14);
  }

  return result;
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[15];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 3), (uint64_t)v7);
  int v5 = v7[40];
  outlined destroy of SubscriptionStatus((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  uint64_t result = 0LL;
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 128) + 48LL))(a1, *(void *)(v3 + 96));
  }
  return result;
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(completion:)(uint64_t a1)
{
  __int128 v2 = v1;
  uint64_t v4 = *v1;
  int v5 = (os_unfair_lock_s *)v1[15];
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v2 + 3), (uint64_t)&v9);
  if (v12)
  {
    uint64_t v17 = 0LL;
    memset(v16, 0, sizeof(v16));
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v9, (uint64_t)v16);
  }

  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v2 + 9), (uint64_t)&v9);
  if (v12)
  {
    uint64_t v15 = 0LL;
    __int128 v14 = 0u;
    __int128 v13 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v9, (uint64_t)&v13);
  }

  uint64_t v9 = 1LL;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  char v12 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v9, (uint64_t)(v2 + 3));
  swift_endAccess();
  uint64_t v9 = 1LL;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  char v12 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v9, (uint64_t)(v2 + 9));
  swift_endAccess();
  v2[2] = 0LL;
  swift_release();
  os_unfair_lock_unlock(v5);
  if (*((void *)&v14 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v13, (uint64_t)&v9);
    __int128 v6 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v11);
    (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL) + 8LL))(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }

  outlined init with copy of Subscription?((uint64_t)v16, (uint64_t)&v9);
  uint64_t v7 = v11;
  outlined destroy of Subscription?((uint64_t)&v9);
  if (v7) {
    (*(void (**)(uint64_t, void))(*(void *)(v4 + 128) + 56LL))(a1, *(void *)(v4 + 96));
  }
  outlined destroy of Subscription?((uint64_t)v16);
  return outlined destroy of Subscription?((uint64_t)&v13);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>( Combine::Subscribers::Demand a1)
{
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>( void *a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>( uint64_t a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>( uint64_t a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(completion:)(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.PrefixUntilOutput<A, B>()
{
}

void specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(completion:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 120);
  os_unfair_lock_lock(v1);
  uint64_t v2 = 1LL;
  __int128 v3 = 0u;
  __int128 v4 = 0u;
  char v5 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v2, v0 + 72);
  swift_endAccess();
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  swift_release();
  os_unfair_lock_unlock(v1);
}

void specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(completion:)()
{
}

void specialized Publishers.PrefixUntilOutput.Inner.init(_:trigger:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_BYTE *)v1 + 64) = 2;
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 11) = 0u;
  v1[13] = 0LL;
  *((_WORD *)v1 + 56) = 2;
  __int128 v4 = (_DWORD *)swift_slowAlloc();
  *__int128 v4 = 0;
  v1[15] = (uint64_t)v4;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(v3 + 96) - 8LL) + 16LL))( (uint64_t)v1 + *(void *)(*v1 + 184),  a1,  *(void *)(v3 + 96));
  v1[2] = (uint64_t)v1;
  swift_retain_n();
  swift_release();
  type metadata accessor for Publishers.PrefixUntilOutput.Inner.Termination();
}

uint64_t sub_183B3C664(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960]( &protocol conformance descriptor for Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination,  a1);
  Publisher.subscribe<A>(_:)(v3 - 56, v7, a1, v2, v5);
  swift_release();
  return v1;
}

uint64_t getEnumTagSinglePayload for Publishers.PrefixUntilOutput(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B3C794 + 4 * byte_183BA2010[v17 - 1]))();
}

void storeEnumTagSinglePayload for Publishers.PrefixUntilOutput( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t type metadata completion function for Publishers.PrefixUntilOutput.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata instantiation function for Publishers.PrefixUntilOutput.Inner.Termination()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Publishers.PrefixUntilOutput.Inner.Termination()
{
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(_:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  unsigned int v9 = &v14[-v8];
  unsigned int v10 = (os_unfair_lock_s *)v0[15];
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 9), (uint64_t)&v18);
  int v11 = v21;
  outlined destroy of SubscriptionStatus((uint64_t)&v18);
  if (v11)
  {
    os_unfair_lock_unlock(v10);
  }

  else
  {
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 3), (uint64_t)&v18);
    if (v21)
    {
      uint64_t v17 = 0LL;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      outlined destroy of SubscriptionStatus((uint64_t)&v18);
    }

    else
    {
      outlined init with take of Subscription((__int128 *)&v18, (uint64_t)&v15);
    }

    uint64_t v18 = 1LL;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    unsigned __int8 v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, (uint64_t)(v1 + 3));
    swift_endAccess();
    uint64_t v18 = 1LL;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    unsigned __int8 v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, (uint64_t)(v1 + 9));
    swift_endAccess();
    v1[2] = 0LL;
    swift_release();
    *((_BYTE *)v1 + 113) = 1;
    os_unfair_lock_unlock(v10);
    if (*((void *)&v16 + 1))
    {
      outlined init with copy of Subscription((uint64_t)&v15, (uint64_t)&v18);
      __int128 v12 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, v20);
      (*(void (**)(void))(*(void *)(*((void *)&v12 + 1) + 8LL) + 8LL))(v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v9,  1LL,  1LL,  AssociatedTypeWitness);
    (*(void (**)(_BYTE *, void))(*(void *)(v2 + 128) + 56LL))(v9, *(void *)(v2 + 96));
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    outlined destroy of Subscription?((uint64_t)&v15);
  }

  return 0LL;
}

uint64_t specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(_:)()
{
  return specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(_:)();
}

uint64_t type metadata accessor for SubjectSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SubjectSubscriber);
}

uint64_t Subject<>.send()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(a1, a1, a2);
}

void SubjectSubscriber.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v1);
  uint64_t v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
  uint64_t v14 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9EBF0;
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 32) = 0xD000000000000011LL;
  *(void *)(v7 + 40) = 0x8000000183BA8090LL;
  uint64_t v8 = MEMORY[0x186E22ABC](v0 + 24);
  uint64_t v9 = type metadata accessor for Optional();
  *(void *)(v7 + outlined destroy of SubscriptionStatus(v0 + 48) = v8;
  *(void *)(v7 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v9;
  *(void *)(v7 + 80) = 0xD000000000000014LL;
  *(void *)(v7 + 88) = 0x8000000183BA7A30LL;
  swift_beginAccess();
  *(void *)(v7 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v10 = swift_allocObject();
  *(void *)(v7 + 96) = v10;
  outlined init with copy of Subscription?(v0 + 32, v10 + 16);
  *(void *)(v7 + 128) = 0x7463656A627573LL;
  *(void *)(v7 + 136) = 0xE700000000000000LL;
  uint64_t v11 = MEMORY[0x186E22ABC](v0 + 24);
  *(void *)(v7 + 168) = v9;
  *(void *)(v7 + 144) = v11;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 1LL, 1LL, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
}

void SubjectSubscriber.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x7463656A627553LL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t SubjectSubscriber.deinit()
{
  return v0;
}

uint64_t SubjectSubscriber.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SubjectSubscriber.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (!MEMORY[0x186E22ABC](v1 + 3)) {
    goto LABEL_4;
  }
  swift_beginAccess();
  outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)v11);
  if (v12)
  {
    swift_unknownObjectRelease();
    outlined destroy of Subscription?((uint64_t)v11);
LABEL_4:
    os_unfair_lock_unlock(v4);
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v5);
  }

  outlined destroy of Subscription?((uint64_t)v11);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v11, (uint64_t)(v1 + 4));
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  uint64_t v12 = v3;
  char v13 = &protocol witness table for SubjectSubscriber<A>;
  v11[0] = v1;
  uint64_t v9 = *(void *)(v3 + 80);
  uint64_t v8 = *(void *)(v3 + 88);
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v8 + 32);
  swift_retain();
  v10(v11, v9, v8);
  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t SubjectSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (MEMORY[0x186E22ABC](v1 + 3))
  {
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)v7);
    uint64_t v5 = v7[3];
    outlined destroy of Subscription?((uint64_t)v7);
    os_unfair_lock_unlock(v4);
    if (v5) {
      (*(void (**)(uint64_t, void))(*(void *)(v3 + 88) + 16LL))(a1, *(void *)(v3 + 80));
    }
    swift_unknownObjectRelease();
  }

  else
  {
    os_unfair_lock_unlock(v4);
  }

  return 0LL;
}

void SubjectSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (MEMORY[0x186E22ABC](v1 + 3))
  {
    swift_unknownObjectWeakAssign();
    uint64_t v5 = (uint64_t)(v1 + 4);
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)&v7);
    uint64_t v6 = *((void *)&v8 + 1);
    outlined destroy of Subscription?((uint64_t)&v7);
    if (v6)
    {
      uint64_t v9 = 0LL;
      __int128 v7 = 0u;
      __int128 v8 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v7, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      (*(void (**)(uint64_t, void))(*(void *)(v3 + 88) + 24LL))(a1, *(void *)(v3 + 80));
    }

    else
    {
      os_unfair_lock_unlock(v4);
    }

    swift_unknownObjectRelease();
  }

  else
  {
    os_unfair_lock_unlock(v4);
  }

Swift::Void __swiftcall SubjectSubscriber.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1);
  uint64_t v2 = MEMORY[0x186E22ABC](v0 + 24);
  swift_unknownObjectRelease();
  if (v2)
  {
    swift_unknownObjectWeakAssign();
    uint64_t v3 = v0 + 32;
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((void *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      uint64_t v8 = 0LL;
      __int128 v6 = 0u;
      __int128 v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      os_unfair_lock_unlock(v1);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }

    else
    {
      outlined destroy of Subscription?((uint64_t)&v6);
      os_unfair_lock_unlock(v1);
    }
  }

  else
  {
    os_unfair_lock_unlock(v1);
  }

Swift::Void __swiftcall SubjectSubscriber.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of Subscription?(v1 + 32, (uint64_t)&v6);
  if (v7)
  {
    outlined init with take of Subscription(&v6, (uint64_t)v8);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v5 + 24))(a1.rawValue, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }

  else
  {
    outlined destroy of Subscription?((uint64_t)&v6);
    os_unfair_lock_unlock(v3);
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance SubjectSubscriber<A>( void *a1)
{
  return SubjectSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance SubjectSubscriber<A>(uint64_t a1)
{
  return 0LL;
}

void protocol witness for Subscriber.receive(completion:) in conformance SubjectSubscriber<A>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance SubjectSubscriber<A>( Combine::Subscribers::Demand a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SubjectSubscriber<A>()
{
  return 0x7463656A627553LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance SubjectSubscriber<A>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance SubjectSubscriber<A>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance SubjectSubscriber<A>()
{
}

uint64_t specialized SubjectSubscriber.init(_:)()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *uint64_t v1 = 0;
  *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 64) = 0LL;
  *(_OWORD *)(v0 + outlined destroy of Subscription?(v0 + 32) = 0u;
  *(_OWORD *)(v0 + outlined destroy of SubscriptionStatus(v0 + 48) = 0u;
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t specialized SubjectSubscriber.__allocating_init(_:)()
{
  return specialized SubjectSubscriber.init(_:)();
}

uint64_t dispatch thunk of Subject.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Subject.send(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Subject.send(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata completion function for SubjectSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t sub_183B3D73C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return swift_deallocObject();
}

uint64_t Publisher.reduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.Reduce, a7);
}

uint64_t Publishers.Reduce.init(upstream:initial:nextPartialResult:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  type metadata accessor for Publishers.Reduce,  a8);
}

uint64_t type metadata accessor for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Reduce);
}

uint64_t Publisher.tryReduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.TryReduce, a7);
}

uint64_t Publisher.reduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v27 = a7;
  uint64_t v28 = a2;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v15);
  unsigned __int8 v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v23, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, a5);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a8, v21, a4);
  uint64_t v24 = v27(0LL, a4, a5, a6);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a8 + *(int *)(v24 + 44), v17, a5);
  int8x16_t v25 = (void *)(a8 + *(int *)(v24 + 48));
  *int8x16_t v25 = v28;
  v25[1] = a3;
  return swift_retain();
}

uint64_t Publishers.TryReduce.init(upstream:initial:nextPartialResult:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  type metadata accessor for Publishers.TryReduce,  a8);
}

uint64_t Publishers.Reduce.init(upstream:initial:nextPartialResult:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17 = a8(0LL, a5, a6, a7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))( a9 + *(int *)(v17 + 44),  a2,  a6);
  uint64_t v19 = (void *)(a9 + *(int *)(v17 + 48));
  *uint64_t v19 = a3;
  v19[1] = a4;
  return result;
}

uint64_t type metadata accessor for Publishers.TryReduce(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryReduce);
}

uint64_t Publishers.Reduce.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.Reduce.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void type metadata accessor for Publishers.Reduce.Inner()
{
}

uint64_t Publishers.Reduce.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 448);
  uint64_t v5 = type metadata accessor for Optional();
  __int128 v6 = *(void (***)(void, void, void))(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v20 - v11;
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v20 - v13;
  unsigned __int8 v21 = *(void (**)(char *, uint64_t))((char *)v2 + *(void *)(v3 + 152));
  uint64_t v15 = (uint64_t)v2 + *(void *)(v3 + 136);
  swift_beginAccess();
  ((void (**)(char *, uint64_t, uint64_t))v6)[2](v12, v15, v5);
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1LL, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    v21(v12, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0LL, 1LL, v4);
    ((void (**)(char *, char *, uint64_t))v6)[4](v9, v14, v5);
    swift_beginAccess();
    ((void (**)(uint64_t, char *, uint64_t))v6)[5](v15, v9, v5);
    swift_endAccess();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion( 0LL,  MEMORY[0x18961AFC8] + 8LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    return swift_storeEnumTagMultiPayload();
  }

  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Reduce<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

uint64_t Publishers.Reduce.initial.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 44));
}

uint64_t Publishers.Reduce.nextPartialResult.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  swift_retain();
  return v2;
}

void Publishers.TryReduce.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void Publishers.Reduce.receive<A>(subscriber:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void, void *))
{
  uint64_t v9 = a2[3];
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v10);
  uint64_t v11 = a2[4];
  v12[0] = a2[2];
  v12[1] = v9;
  __int128 v12[2] = a3;
  void v12[3] = v11;
  v12[4] = a4;
  a5(0LL, v12);
  JUMPOUT(0x183B3DCF8LL);
}

uint64_t Publishers.TryReduce.Inner.description.getter()
{
  return 0x6375646552797254LL;
}

uint64_t Publishers.TryReduce.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 448);
  uint64_t v5 = type metadata accessor for Optional();
  __int128 v6 = *(void (***)(void, void, void))(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v19 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  uint64_t v11 = (char *)&v19 - v10;
  MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))((char *)v1 + *(void *)(v3 + 152));
  uint64_t v15 = (uint64_t)v1 + *(void *)(v3 + 136);
  swift_beginAccess();
  ((void (**)(char *, uint64_t, uint64_t))v6)[2](v11, v15, v5);
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1LL, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    v14(v11, a1);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v4);
    uint64_t v18 = v19;
    ((void (**)(char *, char *, uint64_t))v6)[4](v19, v13, v5);
    swift_beginAccess();
    ((void (**)(uint64_t, char *, uint64_t))v6)[5](v15, v18, v5);
    swift_endAccess();
    return 0LL;
  }

  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryReduce.Inner.receive(newValue:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = Publishers.TryReduce.Inner.receive(newValue:)(a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryReduce<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void type metadata accessor for Publishers.TryReduce.Inner()
{
}

uint64_t *specialized Publishers.Reduce.Inner.init(downstream:initial:reduce:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)v17 - v11;
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  v17[0] = a3;
  v17[1] = a4;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v14, (uint64_t)v12, (uint64_t)v17);
}

uint64_t type metadata completion function for Publishers.Reduce()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Reduce(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = *(void *)(v7 + 64) + 7LL;
  unsigned int v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v14 = *a2;
    *char v4 = *a2;
    char v4 = (uint64_t *)(v14 + (((v11 | 7) + 16LL) & ~(unint64_t)(v11 | 7)));
  }

  else
  {
    uint64_t v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    unint64_t v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v15,  v16,  v5);
    uint64_t v17 = (void *)((v10 + v16) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8LL);
    *uint64_t v19 = *v17;
    v19[1] = v18;
  }

  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.Reduce(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((*(void *)(v4 + 64)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
  return swift_release();
}

uint64_t initializeWithCopy for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 64) + 7LL;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 64) + 7LL;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(_OWORD *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(_OWORD *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFFFF8LL) = *(_OWORD *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Reduce(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v5 + 64) + v10;
  uint64_t v12 = *(void *)(v7 + 64) + 7LL;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }

    else
    {
      uint64_t v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }

      else
      {
        unint64_t v18 = *(void *)((v12 + v17) & 0xFFFFFFFFFFFFF8LL);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }

  else
  {
    if (((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a2 - v9 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B3E640 + 4 * byte_183BA2328[v15]))();
  }

void storeEnumTagSinglePayload for Publishers.Reduce( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_19;
    }
  }

  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v9 = a3 - v7 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_19:
    }
      __asm { BR              X0 }
  }

  if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + 7LL + ((*(void *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183B3E804()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B3E894LL);
}

void sub_183B3E80C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B3E814LL);
  }
  JUMPOUT(0x183B3E894LL);
}

void sub_183B3E858()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B3E894LL);
}

void sub_183B3E860()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B3E894LL);
}

uint64_t sub_183B3E868(uint64_t a1, int a2, int a3)
{
  *(_WORD *)(v12 + v13) = 0;
  if (!a2) {
    JUMPOUT(0x183B3E894LL);
  }
  if (v6 == v9)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    uint64_t v4 = v12;
  }

  else
  {
    uint64_t v4 = (v11 + v12) & v7;
    if (a3 != v9) {
      JUMPOUT(0x183B3E874LL);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }

  return v3(v4);
}

uint64_t type metadata completion function for Publishers.Reduce.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t Publisher.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for Publishers.CompactMap, a6);
}

uint64_t Publishers.CompactMap.init(upstream:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.CompactMap.init(upstream:transform:)( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for Publishers.CompactMap,  a7);
}

uint64_t type metadata accessor for Publishers.CompactMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.CompactMap);
}

uint64_t Publisher.tryCompactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, type metadata accessor for Publishers.TryCompactMap, a6);
}

uint64_t Publisher.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v17, a3);
  unint64_t v18 = (void *)(a7 + *(int *)(a6(0LL, a3, a4, a5) + 44));
  *unint64_t v18 = a1;
  v18[1] = a2;
  return swift_retain();
}

uint64_t Publishers.TryCompactMap.init(upstream:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.CompactMap.init(upstream:transform:)( a1,  a2,  a3,  a4,  a5,  a6,  type metadata accessor for Publishers.TryCompactMap,  a7);
}

uint64_t Publishers.CompactMap.init(upstream:transform:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t result = a7(0LL, a4, a5, a6);
  uint64_t v16 = (void *)(a8 + *(int *)(result + 44));
  *uint64_t v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryCompactMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TryCompactMap);
}

uint64_t Publishers.CompactMap.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.CompactMap.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B3EB18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v12 - 128) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  unsigned int v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v11, *(void *)(v12 - 144), v10);
  swift_retain();
  Publishers.CompactMap.Inner.init(downstream:filter:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_183B3EB98()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.CompactMap<A, B>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v2, v0, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 128) + 8LL))(v2, v3);
}

void type metadata accessor for Publishers.CompactMap.Inner()
{
}

void Publishers.CompactMap.Inner.init(downstream:filter:)( uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
}

void sub_183B3EC70(uint64_t a1)
{
  uint64_t v4 = (void *)(v1 + *(int *)(a1 + 60));
  *uint64_t v4 = v3;
  v4[1] = v2;
  uint64_t v5 = *(int *)(a1 + 64);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  int v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(void *)(v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v1, *(void *)(v10 - 144), v5) = v7;
  }

void Publishers.CompactMap.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x4D746361706D6F43LL;
  a1[1] = 0xEA00000000007061LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CompactMap<A, B>.Inner<A1>()
{
  return 0x4D746361706D6F43LL;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CompactMap<A, B>( uint64_t a1)
{
}

uint64_t Publishers.CompactMap.transform.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 44));
  swift_retain();
  return v2;
}

void Publishers.TryCompactMap.receive<A>(subscriber:)()
{
}

uint64_t sub_183B3EDD8(uint64_t a1)
{
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(v2 + 44));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  swift_allocObject();
  swift_retain();
  uint64_t v12 = specialized Publishers.TryCompactMap.Inner.init(downstream:filter:)(v3, v8, v9);
  uint64_t v10 = MEMORY[0x186E22960](&protocol conformance descriptor for FilterProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v12, v4, a1, v5, v10);
  return swift_release();
}

void type metadata accessor for Publishers.TryCompactMap.Inner()
{
}

uint64_t Publishers.TryCompactMap.Inner.description.getter()
{
  return 0x61706D6F43797254LL;
}

uint64_t Publishers.TryCompactMap.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t))(v2 + 16))(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion(0LL, v5, v9, MEMORY[0x18961A3E8]);
  return swift_storeEnumTagMultiPayload();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryCompactMap<A, B>()
{
}

uint64_t Publishers.CompactMap.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v9 = a3[2];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  unint64_t v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v9;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v16;
  *((void *)v18 + 7) = v17;
  *((void *)v18 + 8) = v24;
  *((void *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  unsigned __int8 v21 = (uint64_t (**)(uint64_t))(a5
  *unsigned __int8 v21 = partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.CompactMap.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v20 - v16;
  a2(a1);
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = a9;
  uint64_t v29 = v21;
  uint64_t v30 = v22;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)partial apply,  (uint64_t)v24,  MEMORY[0x18961A520],  a7,  v18,  v23);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t Publishers.CompactMap.map<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v9 = a3[2];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  uint64_t v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v9;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v16;
  *((void *)v18 + 7) = v17;
  *((void *)v18 + 8) = v24;
  *((void *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  uint64_t v21 = (uint64_t (**)(uint64_t))(a5
  *uint64_t v21 = partial apply for closure #1 in Publishers.CompactMap.map<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.CompactMap.map<A>(_:)@<X0>( uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v20 - v16;
  a2(a1);
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a9;
  uint64_t v36 = v21;
  uint64_t v37 = v22;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = a9;
  uint64_t v29 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed B) -> (@out A1);
  uint64_t v30 = &v31;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?),  (uint64_t)v24,  MEMORY[0x18961A520],  a7,  v18,  v23);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t Publishers.TryCompactMap.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v9 = a3[2];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  uint64_t v18 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v9;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v16;
  *((void *)v18 + 7) = v17;
  *((void *)v18 + 8) = v24;
  *((void *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  uint64_t v21 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(a5
                                                                 + *(int *)(type metadata accessor for Publishers.TryCompactMap( 0LL,  v9,  a4,  v20)
                                                                          + 44));
  *uint64_t v21 = partial apply for closure #1 in Publishers.TryCompactMap.compactMap<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v24 = a8;
  uint64_t v25 = a7;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t result = a2(a1);
  if (!v8)
  {
    MEMORY[0x1895F8858](result);
    *(&v22 - 6) = a5;
    *(&v22 - 5) = a6;
    uint64_t v18 = v25;
    *(&v22 - 4) = v25;
    *(&v22 - 3) = v19;
    uint64_t v20 = v23;
    *(&v22 - 2) = v22;
    *(&v22 - 1) = v20;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF( (void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?, @error @owned Error),  (uint64_t)(&v22 - 8),  v21,  v18,  (uint64_t)&v26,  v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

  return result;
}

uint64_t *specialized Publishers.TryCompactMap.Inner.init(downstream:filter:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  v9[0] = a2;
  v9[1] = a3;
  return FilterProducer.init(downstream:filter:)((uint64_t)v6, (uint64_t)v9);
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in Publishers.CompactMap.compactMap<A>(_:));
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.map<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in Publishers.CompactMap.map<A>(_:));
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t objectdestroyTm_0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)( a1,  *(uint64_t (**)(uint64_t))(v2 + 48),  *(void *)(v2 + 64),  *(void *)(v2 + 72),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  a2);
}

uint64_t type metadata completion function for Publishers.CompactMap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.CompactMap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B3F8DC + 4 * byte_183BA2430[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.CompactMap( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B3FA54()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B3FACCLL);
}

void sub_183B3FA5C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B3FA64LL);
  }
  JUMPOUT(0x183B3FACCLL);
}

void sub_183B3FAA4()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B3FACCLL);
}

void sub_183B3FAAC()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B3FACCLL);
}

uint64_t sub_183B3FAB4(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B3FACCLL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B3FAC8LL);
    }
    JUMPOUT(0x183B3FAC0LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Publishers.TryCompactMap.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Publishers.CompactMap.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CompactMap.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    uint64_t v12 = v11[1];
    *unsigned int v10 = *v11;
    v10[1] = v12;
    *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFF8LL);
  }

  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8LL);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8LL) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8LL);
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFF8LL) = *(void *)(v9 & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?, @error @owned Error)( uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 48))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed B) -> (@out A1)@<X0>( uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  (*(void (**)(void))(v1 + 48))();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a1, 0LL, 1LL, v3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)partial apply()
{
  return partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)();
}

uint64_t specialized Array.init(repeating:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Any?(v3, v5, &demangling cache variable for type metadata for Any?);
        v5 += 32LL;
        --v2;
      }

      while (v2);
    }

    else
    {
      uint64_t v4 = MEMORY[0x18961AFE8];
    }

    outlined destroy of CustomStringConvertible?(v3, &demangling cache variable for type metadata for Any?);
    return v4;
  }

  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Any?(v3, v5, &demangling cache variable for type metadata for Subscription?);
        v5 += 40LL;
        --v2;
      }

      while (v2);
    }

    else
    {
      uint64_t v4 = MEMORY[0x18961AFE8];
    }

    outlined destroy of CustomStringConvertible?(v3, &demangling cache variable for type metadata for Subscription?);
    return v4;
  }

  return result;
}

void *specialized Array.init(repeating:count:)(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4;
      __int128 v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          int v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            swift_bridgeObjectRetain();
            --v6;
          }

          while (v6);
        }

        swift_bridgeObjectRetain();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x18961AFE8];
    }

    return v5;
  }

  return result;
}

void Publisher.merge<A>(with:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v19 = (char *)&v20 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a6, v19, a2);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = v21;
  type metadata accessor for Publishers.Merge();
}

uint64_t sub_183B40158(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void Publishers.Merge.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B401E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 52),  v2,  v1);
}

void type metadata accessor for Publishers.Merge()
{
}

void Publisher.merge<A, B>(with:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v27[1] = a8;
  v27[2] = a6;
  void v27[3] = a7;
  v27[0] = a9;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](a1);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v15);
  uint64_t v22 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  Publishers.Merge3.init(_:_:_:)((uint64_t)v24, a3, v27[0]);
}

  ;
}

void Publishers.Merge3.init(_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B403EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v5 + *(int *)(a1 + 72),  v3,  v1);
}

void type metadata accessor for Publishers.Merge3()
{
}

void Publisher.merge<A, B, C>(with:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v41 = a9;
  uint64_t v42 = a8;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  __int128 v40 = a10;
  uint64_t v39 = a11;
  uint64_t v15 = *(void *)(a7 - 8);
  uint64_t v35 = a1;
  uint64_t v36 = v15;
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v16);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v21);
  uint64_t v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  uint64_t v30 = (char *)&v34 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v35, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v37, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v18, v38, a7);
  Publishers.Merge4.init(_:_:_:_:)((uint64_t)v30, a4, v41);
}

  ;
}

void Publishers.Merge4.init(_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B40694(int *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(v7 + a1[23], v4, v1);
}

void type metadata accessor for Publishers.Merge4()
{
}

void Publisher.merge<A, B, C, D>(with:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12)
{
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v48 = a8;
  __int128 v46 = a11;
  __int128 v47 = a10;
  uint64_t v44 = a12;
  uint64_t v45 = a4;
  uint64_t v42 = *(void *)(a9 - 8);
  uint64_t v43 = a3;
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v13);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v18);
  uint64_t v25 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1895F8858](v23);
  uint64_t v30 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = v31;
  MEMORY[0x1895F8858](v28);
  uint64_t v33 = (char *)&v36 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v34 + 16))(v33, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v40, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v41, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v43, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v15, v45, a9);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v33, v37, v48);
}

  ;
}

void Publishers.Merge5.init(_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B409BC(int *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(v2 + a1[28], v11, v1);
}

void type metadata accessor for Publishers.Merge5()
{
}

void Publisher.merge<A, B, C, D, E>(with:_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, __int128 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v44 = a7;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a1;
  uint64_t v60 = a8;
  __int128 v58 = a13;
  __int128 v59 = a12;
  uint64_t v56 = a14;
  uint64_t v57 = a5;
  uint64_t v55 = a15;
  uint64_t v46 = a9;
  uint64_t v49 = a10;
  uint64_t v50 = a11;
  uint64_t v52 = *(void *)(a11 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v51 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v16);
  uint64_t v22 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v20);
  uint64_t v27 = (char *)v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v43[1] = v27;
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v25);
  uint64_t v32 = (char *)v43 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x1895F8858](v30);
  uint64_t v37 = (char *)v43 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = v38;
  MEMORY[0x1895F8858](v35);
  uint64_t v40 = (char *)v43 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v41 + 16))(v40, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v37, v48, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v47, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v53, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v54, v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v57, v50);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v40, v45, v60);
}

  ;
}

void Publishers.Merge6.init(_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B40D7C(int *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(v3 + a1[33], v13, v2);
}

void type metadata accessor for Publishers.Merge6()
{
}

void Publisher.merge<A, B, C, D, E, F>(with:_:_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17)
{
  uint64_t v66 = a6;
  uint64_t v59 = a4;
  uint64_t v56 = a3;
  uint64_t v57 = a2;
  uint64_t v53 = a1;
  uint64_t v68 = a8;
  __int128 v67 = a14;
  __int128 v64 = a16;
  __int128 v65 = a15;
  uint64_t v62 = a5;
  uint64_t v63 = a17;
  uint64_t v48 = a9;
  uint64_t v50 = a10;
  uint64_t v51 = a11;
  uint64_t v55 = a12;
  uint64_t v61 = a13;
  uint64_t v60 = *(void *)(a13 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](a9);
  __int128 v58 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v52 = (char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v21);
  uint64_t v27 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v47[1] = v27;
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v25);
  uint64_t v32 = (char *)v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v47[2] = v32;
  uint64_t v33 = *(void *)(v30 - 8);
  uint64_t v34 = MEMORY[0x1895F8858](v30);
  uint64_t v36 = (char *)v47 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v47[3] = v36;
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = MEMORY[0x1895F8858](v34);
  uint64_t v41 = (char *)v47 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = v42;
  MEMORY[0x1895F8858](v39);
  uint64_t v44 = (char *)v47 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v45 + 16))(v44, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v53, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v57, v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v56, v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v59, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, v62, v55);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v58, v66, v61);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v44, v49, v68);
}

  ;
}

void Publishers.Merge7.init(_:_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B41214(int *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL))(v4 + a1[38], v15, v3);
}

void type metadata accessor for Publishers.Merge7()
{
}

void Publisher.merge<A, B, C, D, E, F, G>(with:_:_:_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 a16, __int128 a17, __int128 a18, uint64_t a19, uint64_t a20)
{
  uint64_t v79 = a7;
  uint64_t v74 = a6;
  uint64_t v71 = a5;
  uint64_t v68 = a4;
  uint64_t v69 = a3;
  uint64_t v66 = a2;
  uint64_t v64 = a1;
  uint64_t v81 = a8;
  __int128 v80 = a16;
  __int128 v77 = a18;
  __int128 v78 = a17;
  uint64_t v75 = a20;
  uint64_t v76 = a19;
  uint64_t v52 = a10;
  uint64_t v58 = a11;
  uint64_t v59 = a12;
  uint64_t v62 = a13;
  uint64_t v67 = a14;
  uint64_t v73 = a15;
  uint64_t v72 = *(void *)(a15 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](a11);
  uint64_t v70 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v63 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  uint64_t v60 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1895F8858](v26);
  uint64_t v32 = (char *)&v51 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = v32;
  uint64_t v33 = *(void *)(v30 - 8);
  uint64_t v34 = MEMORY[0x1895F8858](v30);
  uint64_t v36 = (char *)&v51 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = v36;
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = MEMORY[0x1895F8858](v34);
  uint64_t v41 = (char *)&v51 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = v41;
  uint64_t v55 = a9;
  uint64_t v42 = *(void *)(a9 - 8);
  uint64_t v43 = MEMORY[0x1895F8858](v39);
  uint64_t v45 = (char *)&v51 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = v45;
  uint64_t v57 = v46;
  MEMORY[0x1895F8858](v43);
  uint64_t v48 = (char *)&v51 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v49 + 16))(v48, v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v45, v64, a9);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v66, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v69, v58);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v68, v59);
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v71, v62);
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v63, v74, v67);
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v70, v79, v73);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v48, v81, v57);
}

  ;
}

void Publishers.Merge8.init(_:_:_:_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
}

uint64_t sub_183B41794(int *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(v2 + a1[43], v17, v4);
}

void type metadata accessor for Publishers.Merge8()
{
}

uint64_t Publishers.Merge.a.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.Merge.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 52));
}

void Publishers.Merge.receive<A>(subscriber:)()
{
}

void sub_183B41954( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, _UNKNOWN **a22)
{
  uint64_t v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 2LL);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  uint64_t v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0LL, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_183B419E8(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v2, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1LL, v3, v10);
  v9[0] = v10[0];
  v9[1] = v10[1];
  void v9[2] = v10[2];
  Publisher.subscribe<A>(_:)((uint64_t)v9, *(void *)(v1 + 24), a1, *(void *)(v1 + 40), v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge.merge<A>(with:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v26 = a5;
  uint64_t v27 = a4;
  uint64_t v25 = a1;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v19 + 16);
  MEMORY[0x1895F8858](v16);
  uint64_t v22 = (char *)&v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v6, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + *(int *)(a2 + 52), v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v25, a3);
  Publishers.Merge3.init(_:_:_:)((uint64_t)v22, v20, v26);
}

  ;
}

void Publishers.Merge.merge<A, B>(with:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v35 = a7;
  uint64_t v36 = a6;
  uint64_t v32 = a5;
  uint64_t v33 = a2;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v34 = a8;
  uint64_t v31 = *(void *)(a5 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v10);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v18 + 24);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v15);
  uint64_t v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(v24 + 16);
  MEMORY[0x1895F8858](v21);
  uint64_t v27 = (char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v8, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v8 + *(int *)(a3 + 52), v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v30, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v12, v33, v32);
  Publishers.Merge4.init(_:_:_:_:)((uint64_t)v27, v25, v34);
}

  ;
}

void Publishers.Merge.merge<A, B, C>(with:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v47 = a9;
  uint64_t v48 = a8;
  uint64_t v43 = a7;
  uint64_t v44 = a3;
  uint64_t v38 = a6;
  uint64_t v39 = a1;
  uint64_t v36 = a5;
  uint64_t v45 = a11;
  uint64_t v46 = a10;
  uint64_t v41 = *(void *)(a7 - 8);
  uint64_t v42 = a2;
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v40 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v13);
  uint64_t v37 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v17);
  uint64_t v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(v24 + 24);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v35 = v25;
  uint64_t v27 = MEMORY[0x1895F8858](v21);
  uint64_t v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void *)(v30 + 16);
  MEMORY[0x1895F8858](v27);
  uint64_t v33 = (char *)&v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v11, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v11 + *(int *)(a4 + 52), v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v39, v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v37, v42, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v44, v43);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v33, v31, v47);
}

  ;
}

void Publishers.Merge.merge<A, B, C, D>(with:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v47 = a8;
  uint64_t v48 = a1;
  uint64_t v44 = a7;
  uint64_t v42 = a6;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v58 = a9;
  __int128 v57 = a11;
  uint64_t v55 = a13;
  uint64_t v56 = a12;
  uint64_t v52 = a10;
  uint64_t v15 = *(void *)(a10 - 8);
  uint64_t v50 = a2;
  uint64_t v51 = v15;
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v49 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v45 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v19);
  uint64_t v25 = (char *)v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v41[1] = v25;
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1895F8858](v23);
  uint64_t v30 = (char *)v41 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v41[2] = v30;
  uint64_t v32 = *(void *)(v31 + 24);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = MEMORY[0x1895F8858](v28);
  uint64_t v36 = (char *)v41 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = *(void *)(v37 + 16);
  MEMORY[0x1895F8858](v34);
  uint64_t v39 = (char *)v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v40 + 16))(v39, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v13 + *(int *)(a5 + 52), v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v48, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v50, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v53, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v49, v54, v52);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v39, v43, v58);
}

  ;
}

void Publishers.Merge.merge<A, B, C, D, E>(with:_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15)
{
  uint64_t v49 = a8;
  uint64_t v47 = a7;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v54 = a1;
  uint64_t v66 = a9;
  __int128 v64 = a14;
  __int128 v65 = a13;
  uint64_t v63 = a15;
  uint64_t v51 = a10;
  uint64_t v55 = a11;
  uint64_t v56 = a2;
  uint64_t v60 = a12;
  uint64_t v17 = *(void *)(a12 - 8);
  uint64_t v58 = a3;
  uint64_t v59 = v17;
  uint64_t v18 = MEMORY[0x1895F8858](a1);
  __int128 v57 = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v52 = (char *)v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x1895F8858](v21);
  uint64_t v67 = (char *)v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = *(void *)(v26 - 8);
  uint64_t v27 = MEMORY[0x1895F8858](v24);
  uint64_t v29 = (char *)v46 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v46[2] = v29;
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1895F8858](v27);
  uint64_t v34 = (char *)v46 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v46[3] = v34;
  uint64_t v36 = *(void *)(v35 + 24);
  uint64_t v37 = *(void *)(v36 - 8);
  v46[4] = v36;
  uint64_t v38 = MEMORY[0x1895F8858](v32);
  uint64_t v40 = (char *)v46 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = *(void *)(v41 + 16);
  v46[1] = v41;
  MEMORY[0x1895F8858](v38);
  uint64_t v44 = (char *)v46 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v15, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v15 + *(int *)(a6 + 52), v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v54, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v29, v56, v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v67, v58, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v61, v55);
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v62, v60);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v44, v42, v66);
}

  ;
}

void Publishers.Merge.merge<A, B, C, D, E, F>(with:_:_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18)
{
  uint64_t v52 = a8;
  uint64_t v74 = a6;
  uint64_t v71 = a5;
  uint64_t v65 = a2;
  uint64_t v66 = a4;
  uint64_t v68 = a3;
  uint64_t v62 = a1;
  uint64_t v77 = a9;
  __int128 v75 = a16;
  __int128 v76 = a15;
  uint64_t v72 = a18;
  uint64_t v73 = a17;
  uint64_t v57 = a10;
  uint64_t v59 = a11;
  uint64_t v61 = a12;
  uint64_t v64 = a13;
  uint64_t v70 = a14;
  uint64_t v69 = *(void *)(a14 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](a1);
  uint64_t v67 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  __int128 v80 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  uint64_t v79 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1895F8858](v26);
  __int128 v78 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = *(void *)(v31 - 8);
  uint64_t v32 = MEMORY[0x1895F8858](v29);
  uint64_t v34 = (char *)&v51 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = v34;
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = MEMORY[0x1895F8858](v32);
  uint64_t v39 = (char *)&v51 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = v39;
  uint64_t v41 = *(void *)(v40 + 24);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v54 = v41;
  uint64_t v43 = MEMORY[0x1895F8858](v37);
  uint64_t v45 = (char *)&v51 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = *(void *)(v46 + 16);
  uint64_t v51 = v46;
  MEMORY[0x1895F8858](v43);
  uint64_t v49 = (char *)&v51 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v18, v47);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v45, v18 + *(int *)(a7 + 52), v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, v62, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v34, v65, v57);
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v78, v68, v59);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v79, v66, v61);
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v80, v71, v64);
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v67, v74, v70);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v49, v77, v47);
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge<A, B>()
{
}

uint64_t Publishers.Merge3.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

uint64_t Publishers.Merge3.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 72));
}

void Publishers.Merge3.receive<A>(subscriber:)()
{
}

void sub_183B42A24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, _UNKNOWN **a22)
{
  uint64_t v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 3LL);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  uint64_t v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0LL, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_183B42AB8(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[6], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[7], v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge3.merge<A>(with:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v31 = a5;
  uint64_t v32 = a4;
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  uint64_t v28 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v27 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v10 + 32);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 + 24);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v13);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(v22 + 16);
  MEMORY[0x1895F8858](v19);
  uint64_t v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v6, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v6 + *(int *)(a2 + 68), v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v6 + *(int *)(a2 + 72), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v30, v29);
  Publishers.Merge4.init(_:_:_:_:)((uint64_t)v25, v23, v31);
}

  ;
}

void Publishers.Merge3.merge<A, B>(with:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v43 = a7;
  uint64_t v44 = a6;
  uint64_t v40 = a5;
  uint64_t v41 = a2;
  uint64_t v36 = a4;
  uint64_t v42 = a8;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v38 = a1;
  uint64_t v39 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v37 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v34 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v16 + 32);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v14);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(v22 + 24);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v33 = v23;
  uint64_t v25 = MEMORY[0x1895F8858](v19);
  uint64_t v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)(v28 + 16);
  MEMORY[0x1895F8858](v25);
  uint64_t v31 = (char *)&v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v8, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v8 + *(int *)(a3 + 68), v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v8 + *(int *)(a3 + 72), v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v38, v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v41, v40);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v31, v29, v42);
}

  ;
}

void Publishers.Merge3.merge<A, B, C>(with:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v52 = a9;
  uint64_t v53 = a8;
  uint64_t v48 = a7;
  uint64_t v49 = a3;
  uint64_t v43 = a6;
  uint64_t v41 = a5;
  uint64_t v45 = a1;
  uint64_t v50 = a11;
  uint64_t v51 = a10;
  uint64_t v46 = *(void *)(a7 - 8);
  uint64_t v47 = a2;
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v44 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v54 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v39 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(void *)(v21 + 32);
  uint64_t v23 = *(void *)(v22 - 8);
  v38[0] = v22;
  uint64_t v24 = MEMORY[0x1895F8858](v19);
  uint64_t v26 = (char *)v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = *(void *)(v27 + 24);
  uint64_t v29 = *(void *)(v28 - 8);
  v38[1] = v28;
  uint64_t v30 = MEMORY[0x1895F8858](v24);
  uint64_t v32 = (char *)v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = *(void *)(v33 + 16);
  MEMORY[0x1895F8858](v30);
  uint64_t v36 = (char *)v38 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v11, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v11 + *(int *)(a4 + 68), v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v11 + *(int *)(a4 + 72), v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v45, v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v54, v47, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v44, v49, v48);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v36, v34, v52);
}

  ;
}

void Publishers.Merge3.merge<A, B, C, D>(with:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v51 = a8;
  uint64_t v52 = a1;
  uint64_t v48 = a7;
  uint64_t v46 = a6;
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  uint64_t v62 = a9;
  __int128 v61 = a11;
  uint64_t v59 = a13;
  uint64_t v60 = a12;
  uint64_t v56 = a10;
  uint64_t v15 = *(void *)(a10 - 8);
  uint64_t v54 = a2;
  uint64_t v55 = v15;
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v53 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v49 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v19);
  uint64_t v64 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v63 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = *(void *)(v27 + 32);
  uint64_t v29 = *(void *)(v28 - 8);
  v44[1] = v28;
  uint64_t v30 = MEMORY[0x1895F8858](v25);
  uint64_t v32 = (char *)v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v44[2] = v32;
  uint64_t v34 = *(void *)(v33 + 24);
  uint64_t v35 = *(void *)(v34 - 8);
  v44[3] = v34;
  uint64_t v36 = MEMORY[0x1895F8858](v30);
  uint64_t v38 = (char *)v44 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = *(void *)(v39 + 16);
  MEMORY[0x1895F8858](v36);
  uint64_t v42 = (char *)v44 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v13, v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v13 + *(int *)(a5 + 68), v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v13 + *(int *)(a5 + 72), v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v63, v52, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v64, v54, v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v57, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v53, v58, v56);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v42, v40, v62);
}

  ;
}

void Publishers.Merge3.merge<A, B, C, D, E>(with:_:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15)
{
  uint64_t v52 = a8;
  uint64_t v50 = a7;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v61 = a3;
  uint64_t v59 = a2;
  uint64_t v57 = a1;
  uint64_t v69 = a9;
  __int128 v67 = a14;
  __int128 v68 = a13;
  uint64_t v66 = a15;
  uint64_t v54 = a10;
  uint64_t v58 = a11;
  uint64_t v63 = a12;
  uint64_t v62 = *(void *)(a12 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](a1);
  uint64_t v60 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v55 = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v72 = (char *)v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1895F8858](v23);
  uint64_t v71 = (char *)v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1895F8858](v26);
  uint64_t v70 = (char *)v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(v31 + 32);
  uint64_t v33 = *(void *)(v32 - 8);
  v48[0] = v32;
  uint64_t v34 = MEMORY[0x1895F8858](v29);
  uint64_t v36 = (char *)v48 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v48[1] = v36;
  uint64_t v38 = *(void *)(v37 + 24);
  uint64_t v39 = *(void *)(v38 - 8);
  v48[2] = v38;
  uint64_t v40 = MEMORY[0x1895F8858](v34);
  uint64_t v42 = (char *)v48 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v48[3] = v42;
  uint64_t v44 = *(void *)(v43 + 16);
  MEMORY[0x1895F8858](v40);
  uint64_t v46 = (char *)v48 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v15, v44);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v42, v15 + *(int *)(a6 + 68), v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v15 + *(int *)(a6 + 72), v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v70, v57, v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v71, v59, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v72, v61, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v64, v58);
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v60, v65, v63);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v46, v69, v44);
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge3<A, B, C>()
{
}

uint64_t Publishers.Merge4.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.Merge4.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.Merge4.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 92));
}

void Publishers.Merge4.receive<A>(subscriber:)()
{
}

void sub_183B439E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, _UNKNOWN **a22)
{
  uint64_t v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 4LL);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  uint64_t v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0LL, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_183B43A7C(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[7], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[8], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[9], v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge4.merge<A>(with:)( uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v37 = a1;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v35 = *(void *)(a3 - 8);
  uint64_t v36 = a3;
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v34 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *(void *)(v10 + 40);
  uint64_t v32 = *(void *)(v33 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v31 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(v13 + 32);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v11);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v19 + 24);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v30 = v20;
  uint64_t v22 = MEMORY[0x1895F8858](v16);
  uint64_t v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(v25 + 16);
  MEMORY[0x1895F8858](v22);
  uint64_t v28 = (char *)&v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v6, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v6 + a2[21], v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + a2[22], v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v6 + a2[23], v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v37, v36);
  Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v28, v26, v39);
}

  ;
}

void Publishers.Merge4.merge<A, B>(with:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v48 = a7;
  uint64_t v49 = a6;
  uint64_t v46 = a5;
  uint64_t v47 = a2;
  uint64_t v42 = a4;
  uint64_t v50 = a8;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v44 = a1;
  uint64_t v45 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v43 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v40 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = *(void *)(v16 + 40);
  uint64_t v39 = *(void *)(v51 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = *(void *)(v20 + 32);
  uint64_t v21 = *(void *)(v37 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v17);
  uint64_t v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = v24;
  uint64_t v26 = *(void *)(v25 + 24);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v38 = v26;
  uint64_t v28 = MEMORY[0x1895F8858](v22);
  uint64_t v30 = (char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(v31 + 16);
  MEMORY[0x1895F8858](v28);
  uint64_t v34 = (char *)&v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v8, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v8 + a3[21], v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v8 + a3[22], v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v19, v8 + a3[23], v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v44, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, v47, v46);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v34, v32, v50);
}

  ;
}

void Publishers.Merge4.merge<A, B, C>(with:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v57 = a8;
  uint64_t v58 = a9;
  uint64_t v53 = a7;
  uint64_t v54 = a3;
  uint64_t v48 = a6;
  uint64_t v45 = a5;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v55 = a11;
  uint64_t v56 = a10;
  uint64_t v52 = *(void *)(a7 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v49 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v46 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v60 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = *(void *)(v21 + 40);
  uint64_t v42 = *(void *)(v43 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v19);
  uint64_t v59 = (char *)v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(v24 + 32);
  uint64_t v26 = *(void *)(v25 - 8);
  v41[1] = v25;
  uint64_t v27 = MEMORY[0x1895F8858](v22);
  uint64_t v29 = (char *)v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void *)(v30 + 24);
  uint64_t v32 = *(void *)(v31 - 8);
  v41[2] = v29;
  void v41[3] = v31;
  uint64_t v33 = MEMORY[0x1895F8858](v27);
  uint64_t v35 = (char *)v41 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = *(void *)(v36 + 16);
  MEMORY[0x1895F8858](v33);
  uint64_t v39 = (char *)v41 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v11, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v11 + a4[21], v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v11 + a4[22], v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v59, v11 + a4[23], v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v60, v50, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v51, v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v49, v54, v53);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v39, v37, v58);
}

  ;
}

void Publishers.Merge4.merge<A, B, C, D>(with:_:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v56 = a8;
  uint64_t v54 = a7;
  uint64_t v51 = a6;
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v57 = a1;
  uint64_t v67 = a9;
  __int128 v66 = a11;
  uint64_t v64 = a13;
  uint64_t v65 = a12;
  uint64_t v61 = a10;
  uint64_t v15 = *(void *)(a10 - 8);
  uint64_t v59 = a2;
  uint64_t v60 = v15;
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  uint64_t v58 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v70 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v19);
  uint64_t v52 = (char *)v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v69 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = *(void *)(v27 + 40);
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v28 = MEMORY[0x1895F8858](v25);
  __int128 v68 = (char *)v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void *)(v30 + 32);
  uint64_t v32 = *(void *)(v31 - 8);
  v47[0] = v31;
  uint64_t v33 = MEMORY[0x1895F8858](v28);
  uint64_t v35 = (char *)v47 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v47[1] = v35;
  uint64_t v37 = *(void *)(v36 + 24);
  uint64_t v38 = *(void *)(v37 - 8);
  v47[2] = v37;
  uint64_t v39 = MEMORY[0x1895F8858](v33);
  uint64_t v41 = (char *)v47 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v47[3] = v41;
  uint64_t v43 = *(void *)(v42 + 16);
  MEMORY[0x1895F8858](v39);
  uint64_t v45 = (char *)v47 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v13, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v13 + a5[21], v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v13 + a5[22], v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v68, v13 + a5[23], v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v69, v57, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v59, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v70, v62, v56);
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v58, v63, v61);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v45, v67, v43);
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge4<A, B, C, D>()
{
}

uint64_t Publishers.Merge5.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 100));
}

uint64_t Publishers.Merge5.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 104));
}

uint64_t Publishers.Merge5.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 108));
}

uint64_t Publishers.Merge5.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 112));
}

void Publishers.Merge5.receive<A>(subscriber:)()
{
}

void sub_183B44828( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, _UNKNOWN **a22)
{
  uint64_t v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 5LL);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  uint64_t v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0LL, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_183B448BC(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[8], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[9], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[10], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[11], v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge5.merge<A>(with:)( uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v43 = a1;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v41 = *(void *)(a3 - 8);
  uint64_t v42 = a3;
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v40 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = *(void *)(v10 + 48);
  uint64_t v38 = *(void *)(v39 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v37 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *(void *)(v13 + 40);
  uint64_t v36 = *(void *)(v46 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = *(void *)(v17 + 32);
  uint64_t v18 = *(void *)(v34 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v14);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = v21;
  uint64_t v23 = *(void *)(v22 + 24);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v35 = v23;
  uint64_t v25 = MEMORY[0x1895F8858](v19);
  uint64_t v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)(v28 + 16);
  MEMORY[0x1895F8858](v25);
  uint64_t v31 = (char *)&v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v6, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v6 + a2[25], v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v6 + a2[26], v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v16, v6 + a2[27], v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v6 + a2[28], v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
  Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v31, v29, v45);
}

  ;
}

void Publishers.Merge5.merge<A, B>(with:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v52 = a7;
  uint64_t v53 = a6;
  uint64_t v50 = a5;
  uint64_t v51 = a2;
  uint64_t v46 = a4;
  uint64_t v54 = a8;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v48 = a1;
  uint64_t v49 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v47 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v44 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = *(void *)(v16 + 48);
  uint64_t v42 = *(void *)(v43 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v56 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = *(void *)(v19 + 40);
  uint64_t v40 = *(void *)(v41 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v55 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void *)(v22 + 32);
  uint64_t v24 = *(void *)(v23 - 8);
  v39[1] = v23;
  uint64_t v25 = MEMORY[0x1895F8858](v20);
  uint64_t v27 = (char *)v39 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = *(void *)(v28 + 24);
  uint64_t v30 = *(void *)(v29 - 8);
  v39[2] = v27;
  v39[3] = v29;
  uint64_t v31 = MEMORY[0x1895F8858](v25);
  uint64_t v33 = (char *)v39 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = *(void *)(v34 + 16);
  MEMORY[0x1895F8858](v31);
  uint64_t v37 = (char *)v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v8, v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v8 + a3[25], v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v8 + a3[26], v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v55, v8 + a3[27], v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v56, v8 + a3[28], v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v48, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v47, v51, v50);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v37, v35, v54);
}

  ;
}

void Publishers.Merge5.merge<A, B, C>(with:_:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v63 = a8;
  uint64_t v64 = a9;
  uint64_t v59 = a7;
  uint64_t v60 = a3;
  uint64_t v54 = a6;
  uint64_t v55 = a1;
  uint64_t v51 = a5;
  uint64_t v61 = a11;
  uint64_t v62 = a10;
  uint64_t v57 = *(void *)(a7 - 8);
  uint64_t v58 = a2;
  uint64_t v13 = MEMORY[0x1895F8858](a1);
  uint64_t v56 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v52 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v16);
  uint64_t v49 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = *(void *)(v21 + 48);
  uint64_t v47 = *(void *)(v48 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v19);
  uint64_t v67 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = *(void *)(v24 + 40);
  uint64_t v45 = *(void *)(v66 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v65 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = *(void *)(v27 + 32);
  uint64_t v29 = *(void *)(v28 - 8);
  v44[1] = v28;
  uint64_t v30 = MEMORY[0x1895F8858](v25);
  uint64_t v32 = (char *)v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v44[2] = v32;
  uint64_t v34 = *(void *)(v33 + 24);
  uint64_t v35 = *(void *)(v34 - 8);
  v44[3] = v34;
  uint64_t v36 = MEMORY[0x1895F8858](v30);
  uint64_t v38 = (char *)v44 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = v38;
  uint64_t v40 = *(void *)(v39 + 16);
  MEMORY[0x1895F8858](v36);
  uint64_t v42 = (char *)v44 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v11, v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v11 + a4[25], v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v11 + a4[26], v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v65, v11 + a4[27], v66);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v67, v11 + a4[28], v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v55, v51);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v58, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v60, v59);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v42, v64, v40);
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge5<A, B, C, D, E>()
{
}

uint64_t Publishers.Merge6.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 116));
}

uint64_t Publishers.Merge6.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 120));
}

uint64_t Publishers.Merge6.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 124));
}

uint64_t Publishers.Merge6.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 128));
}

uint64_t Publishers.Merge6.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 56) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 132));
}

void Publishers.Merge6.receive<A>(subscriber:)()
{
}

void sub_183B45478( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, _UNKNOWN **a22)
{
  uint64_t v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 6LL);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  uint64_t v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0LL, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_183B4550C(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[9], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[10], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[11], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[12], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[7], a1, v1[13], v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge6.merge<A>(with:)( uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v47 = a1;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v45 = *(void *)(a3 - 8);
  uint64_t v46 = a3;
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v44 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = *(void *)(v10 + 56);
  uint64_t v42 = *(void *)(v43 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v41 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = *(void *)(v13 + 48);
  uint64_t v39 = *(void *)(v40 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v51 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = *(void *)(v16 + 40);
  uint64_t v37 = *(void *)(v38 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v50 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v19 + 32);
  uint64_t v21 = *(void *)(v20 - 8);
  v36[0] = v20;
  uint64_t v22 = MEMORY[0x1895F8858](v17);
  uint64_t v24 = (char *)v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(v25 + 24);
  uint64_t v27 = *(void *)(v26 - 8);
  v36[1] = v24;
  _OWORD v36[2] = v26;
  uint64_t v28 = MEMORY[0x1895F8858](v22);
  uint64_t v30 = (char *)v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = *(void *)(v31 + 16);
  MEMORY[0x1895F8858](v28);
  uint64_t v34 = (char *)v36 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v6, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v6 + a2[29], v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v6 + a2[30], v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v50, v6 + a2[31], v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v51, v6 + a2[32], v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v6 + a2[33], v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v47, v46);
  Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v34, v32, v49);
}

  ;
}

void Publishers.Merge6.merge<A, B>(with:_:)( uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v58 = a7;
  uint64_t v59 = a6;
  uint64_t v56 = a5;
  uint64_t v57 = a2;
  uint64_t v52 = a4;
  uint64_t v60 = a8;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v54 = a1;
  uint64_t v55 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v53 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v50 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = *(void *)(v16 + 56);
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v47 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = *(void *)(v19 + 48);
  uint64_t v46 = *(void *)(v63 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v62 = (char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = *(void *)(v22 + 40);
  uint64_t v43 = *(void *)(v45 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v20);
  uint64_t v61 = (char *)v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(v25 + 32);
  uint64_t v27 = *(void *)(v26 - 8);
  v42[1] = v26;
  uint64_t v28 = MEMORY[0x1895F8858](v23);
  uint64_t v30 = (char *)v42 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v42[2] = v30;
  uint64_t v32 = *(void *)(v31 + 24);
  uint64_t v33 = *(void *)(v32 - 8);
  void v42[3] = v32;
  uint64_t v34 = MEMORY[0x1895F8858](v28);
  uint64_t v36 = (char *)v42 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = v36;
  uint64_t v38 = *(void *)(v37 + 16);
  MEMORY[0x1895F8858](v34);
  uint64_t v40 = (char *)v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v8, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v8 + a3[29], v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v8 + a3[30], v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v61, v8 + a3[31], v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v62, v8 + a3[32], v63);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v8 + a3[33], v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v54, v52);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v53, v57, v56);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v40, v60, v38);
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge6<A, B, C, D, E, F>()
{
}

uint64_t Publishers.Merge7.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 132));
}

uint64_t Publishers.Merge7.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 136));
}

uint64_t Publishers.Merge7.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 140));
}

uint64_t Publishers.Merge7.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 144));
}

uint64_t Publishers.Merge7.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 56) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 148));
}

uint64_t Publishers.Merge7.g.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 64) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 152));
}

void Publishers.Merge7.receive<A>(subscriber:)()
{
}

void sub_183B45E9C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, _UNKNOWN **a22)
{
  uint64_t v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 7LL);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  uint64_t v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0LL, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_183B45F30(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[10], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[11], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[12], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[13], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[7], a1, v1[14], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(6LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[8], a1, v1[15], v5);
  swift_release();
  return swift_release();
}

void Publishers.Merge7.merge<A>(with:)( uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v53 = a1;
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  uint64_t v51 = *(void *)(a3 - 8);
  uint64_t v52 = a3;
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v50 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = *(void *)(v10 + 64);
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v47 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *(void *)(v13 + 56);
  uint64_t v45 = *(void *)(v46 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v44 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = *(void *)(v16 + 48);
  uint64_t v43 = *(void *)(v57 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v56 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = *(void *)(v19 + 40);
  uint64_t v40 = *(void *)(v41 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v22 = (char *)v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v39[2] = v22;
  uint64_t v24 = *(void *)(v23 + 32);
  uint64_t v25 = *(void *)(v24 - 8);
  v39[1] = v24;
  uint64_t v26 = MEMORY[0x1895F8858](v20);
  uint64_t v28 = (char *)v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = *(void *)(v29 + 24);
  uint64_t v31 = *(void *)(v30 - 8);
  v39[3] = v28;
  void v39[4] = v30;
  uint64_t v32 = MEMORY[0x1895F8858](v26);
  uint64_t v34 = (char *)v39 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = *(void *)(v35 + 16);
  MEMORY[0x1895F8858](v32);
  uint64_t v37 = (char *)v39 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v38 + 16))(v37, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v6 + a2[33], v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v6 + a2[34], v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v22, v6 + a2[35], v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v56, v6 + a2[36], v57);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v6 + a2[37], v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v6 + a2[38], v49);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v53, v52);
  Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v37, v55, v42);
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge7<A, B, C, D, E, F, G>()
{
}

uint64_t Publishers.Merge8.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 148));
}

uint64_t Publishers.Merge8.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 152));
}

uint64_t Publishers.Merge8.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 156));
}

uint64_t Publishers.Merge8.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 160));
}

uint64_t Publishers.Merge8.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 56) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 164));
}

uint64_t Publishers.Merge8.g.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 64) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 168));
}

uint64_t Publishers.Merge8.h.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 72) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 172));
}

void Publishers.Merge8.receive<A>(subscriber:)()
{
}

void sub_183B46640( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, uint64_t a19, uint64_t a20, uint64_t a21, _UNKNOWN **a22)
{
  uint64_t v26 = specialized Publishers._Merged.init(downstream:count:)(v22, 8LL);
  a21 = a1;
  a22 = &protocol witness table for Publishers._Merged<A, B, C>;
  a18 = v26;
  uint64_t v27 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v23 + 40);
  swift_retain();
  v27(&a18, v24, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&a18);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0LL, (uint64_t)v26, &a15);
  a20 = v24;
  a21 = v23;
  type metadata accessor for Publishers._Merged.Side();
}

uint64_t sub_183B466D4(uint64_t a1)
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers._Merged<A, B, C>.Side, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v8, v3, a1, v7, v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[3], a1, v1[11], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[4], a1, v1[12], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[5], a1, v1[13], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[6], a1, v1[14], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[7], a1, v1[15], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(6LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[8], a1, v1[16], v5);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(7LL, v2, &v12);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  uint64_t v11 = v14;
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v1[9], a1, v1[17], v5);
  swift_release();
  return swift_release();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge8<A, B, C, D, E, F, G, H>()
{
}

uint64_t Publishers.MergeMany.publishers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.MergeMany.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Publishers.MergeMany.merge(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  getContiguousArrayStorageType<A>(for:)(v5, v5);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, a1, v5);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v8 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v8;
  uint64_t v9 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618470], v9);
  return Publishers.MergeMany.init<A>(_:)((uint64_t)&v11, v9, a3);
}

void Publishers._Merged.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x656772654DLL;
  a1[1] = 0xE500000000000000LL;
}

void Publishers._Merged.Side.customMirror.getter()
{
  uint64_t v0 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
  *(void *)(v2 + outlined destroy of Subscription?(v0 + 32) = 0xD000000000000012LL;
  *(void *)(v2 + 40) = 0x8000000183BA8110LL;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = &type metadata for CombineIdentifier;
  type metadata accessor for Publishers._Merged();
}

uint64_t sub_183B46BB4()
{
  uint64_t v3 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers._Merged<A, B, C>.Side()
{
  return 0x656772654DLL;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers._Merged<A, B, C>.Side( void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers._Merged<A, B, C>( void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers._Merged<A, B, C>()
{
  return Publishers._Merged.cancel()();
}

void static Publishers.Merge<>.== infix(_:_:)()
{
}

uint64_t sub_183B46CF0(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = &v15[-v8];
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v11(v9, v2, a1);
  v11(v7, v1, a1);
  if ((v10 & 1) != 0) {
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v12 = 0;
  }
  uint64_t v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v7, a1);
  v13(v9, a1);
  return v12 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge<A, B>()
{
  static Publishers.Merge<>.== infix(_:_:)();
}

void static Publishers.Merge3<>.== infix(_:_:)()
{
}

uint64_t sub_183B46E48(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v5);
  char v10 = &v22[-v9];
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = &v22[-v12];
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = &v22[-v14];
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
  v17(v15, v2, a1);
  v17(v13, v1, a1);
  if ((v16 & 1) != 0) {
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v18 = 0;
  }
  uint64_t v19 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v19(v13, a1);
  v19(v15, a1);
  v17(v10, v2, a1);
  v17(v7, v1, a1);
  if ((v18 & 1) != 0) {
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v20 = 0;
  }
  v19(v7, a1);
  v19(v10, a1);
  return v20 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge3<A, B, C>()
{
  static Publishers.Merge3<>.== infix(_:_:)();
}

uint64_t sub_183B47008(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge4<>.== infix(_:_:)()
{
}

uint64_t sub_183B47078(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  *(void *)(v3 - 160) = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  *(void *)(v3 - 168) = &v32[-v9];
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = &v32[-v11];
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = &v32[-v14];
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  char v18 = &v32[-v17];
  MEMORY[0x1895F8858](v16);
  char v20 = &v32[-v19];
  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v22 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v3 - 152) = v2;
  v22(v20, v2, a1);
  uint64_t v23 = v1;
  v22(v18, v1, a1);
  if ((v21 & 1) != 0) {
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v24 = 0;
  }
  uint64_t v25 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v25(v18, a1);
  v25(v20, a1);
  uint64_t v26 = *(void *)(v3 - 152);
  v22(v15, v26, a1);
  v22(v12, v23, a1);
  if ((v24 & 1) == 0)
  {
    v25(v12, a1);
    v25(v15, a1);
    uint64_t v28 = *(_BYTE **)(v3 - 168);
    v22(v28, v26, a1);
    uint64_t v29 = *(_BYTE **)(v3 - 160);
    v22(v29, v23, a1);
    goto LABEL_8;
  }

  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25(v12, a1);
  v25(v15, a1);
  uint64_t v28 = *(_BYTE **)(v3 - 168);
  v22(v28, v26, a1);
  uint64_t v29 = *(_BYTE **)(v3 - 160);
  v22(v29, v23, a1);
  if ((v27 & 1) == 0)
  {
LABEL_8:
    char v30 = 0;
    goto LABEL_9;
  }

  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_9:
  v25(v29, a1);
  v25(v28, a1);
  return v30 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge4<A, B, C, D>()
{
  static Publishers.Merge4<>.== infix(_:_:)();
}

uint64_t sub_183B47330(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge5<>.== infix(_:_:)()
{
}

uint64_t sub_183B473A4(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  *(void *)(v3 - 184) = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  *(void *)(v3 - 192) = &v39[-v9];
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  *(void *)(v3 - 208) = &v39[-v11];
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  *(void *)(v3 - 200) = &v39[-v13];
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = &v39[-v15];
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = &v39[-v18];
  uint64_t v20 = MEMORY[0x1895F8858](v17);
  uint64_t v22 = &v39[-v21];
  MEMORY[0x1895F8858](v20);
  char v24 = &v39[-v23];
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v3 - 176) = v1;
  v26(v24, v1, a1);
  uint64_t v27 = v2;
  v26(v22, v2, a1);
  if ((v25 & 1) != 0) {
    char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v28 = 0;
  }
  uint64_t v29 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v29(v22, a1);
  v29(v24, a1);
  uint64_t v30 = *(void *)(v3 - 176);
  v26(v19, v30, a1);
  v26(v16, v27, a1);
  if ((v28 & 1) == 0)
  {
    v29(v16, a1);
    v29(v19, a1);
    uint64_t v32 = *(_BYTE **)(v3 - 200);
    v26(v32, v30, a1);
    uint64_t v33 = *(_BYTE **)(v3 - 208);
    v26(v33, v27, a1);
    goto LABEL_9;
  }

  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29(v16, a1);
  v29(v19, a1);
  uint64_t v32 = *(_BYTE **)(v3 - 200);
  v26(v32, v30, a1);
  uint64_t v33 = *(_BYTE **)(v3 - 208);
  v26(v33, v27, a1);
  if ((v31 & 1) == 0)
  {
LABEL_9:
    v29(v33, a1);
    v29(v32, a1);
    uint64_t v35 = *(_BYTE **)(v3 - 192);
    v26(v35, v30, a1);
    uint64_t v36 = *(_BYTE **)(v3 - 184);
    v26(v36, v27, a1);
    goto LABEL_10;
  }

  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29(v33, a1);
  v29(v32, a1);
  uint64_t v35 = *(_BYTE **)(v3 - 192);
  v26(v35, v30, a1);
  uint64_t v36 = *(_BYTE **)(v3 - 184);
  v26(v36, v27, a1);
  if ((v34 & 1) == 0)
  {
LABEL_10:
    char v37 = 0;
    goto LABEL_11;
  }

  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_11:
  v29(v36, a1);
  v29(v35, a1);
  return v37 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge5<A, B, C, D, E>()
{
  static Publishers.Merge5<>.== infix(_:_:)();
}

uint64_t sub_183B47750(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge6<>.== infix(_:_:)()
{
}

uint64_t sub_183B477E4(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  *(void *)(v3 - 200) = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  *(void *)(v3 - 208) = &v47[-v9];
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  *(void *)(v3 - 2outlined destroy of Subscription?(v0 + 24) = &v47[-v11];
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  *(void *)(v3 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = &v47[-v13];
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  *(void *)(v3 - 240) = &v47[-v15];
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  *(void *)(v3 - 2outlined destroy of Subscription?(v0 + 32) = &v47[-v17];
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = &v47[-v19];
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  uint64_t v23 = &v47[-v22];
  uint64_t v24 = MEMORY[0x1895F8858](v21);
  uint64_t v26 = &v47[-v25];
  MEMORY[0x1895F8858](v24);
  char v28 = &v47[-v27];
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v3 - 192) = v2;
  v30(v28, v2, a1);
  uint64_t v31 = v1;
  v30(v26, v1, a1);
  if ((v29 & 1) != 0) {
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v32 = 0;
  }
  uint64_t v33 = *(_BYTE **)(v3 - 208);
  char v34 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v34(v26, a1);
  v34(v28, a1);
  uint64_t v35 = *(void *)(v3 - 192);
  v30(v23, v35, a1);
  uint64_t v36 = v31;
  v30(v20, v31, a1);
  if ((v32 & 1) == 0)
  {
    v34(v20, a1);
    v34(v23, a1);
    uint64_t v38 = *(_BYTE **)(v3 - 232);
    v30(v38, v35, a1);
    uint64_t v39 = *(_BYTE **)(v3 - 240);
    v30(v39, v36, a1);
    goto LABEL_10;
  }

  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34(v20, a1);
  v34(v23, a1);
  uint64_t v38 = *(_BYTE **)(v3 - 232);
  v30(v38, v35, a1);
  uint64_t v39 = *(_BYTE **)(v3 - 240);
  v30(v39, v36, a1);
  if ((v37 & 1) == 0)
  {
LABEL_10:
    v34(v39, a1);
    v34(v38, a1);
    uint64_t v41 = *(_BYTE **)(v3 - 216);
    v30(v41, v35, a1);
    uint64_t v42 = *(_BYTE **)(v3 - 224);
    v30(v42, v36, a1);
    uint64_t v43 = *(_BYTE **)(v3 - 200);
    goto LABEL_11;
  }

  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34(v39, a1);
  v34(v38, a1);
  uint64_t v41 = *(_BYTE **)(v3 - 216);
  v30(v41, v35, a1);
  uint64_t v42 = *(_BYTE **)(v3 - 224);
  v30(v42, v36, a1);
  uint64_t v43 = *(_BYTE **)(v3 - 200);
  if ((v40 & 1) == 0)
  {
LABEL_11:
    v34(v42, a1);
    v34(v41, a1);
    v30(v33, v35, a1);
    v30(v43, v36, a1);
    goto LABEL_12;
  }

  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34(v42, a1);
  v34(v41, a1);
  v30(v33, v35, a1);
  v30(v43, v36, a1);
  if ((v44 & 1) == 0)
  {
LABEL_12:
    char v45 = 0;
    goto LABEL_13;
  }

  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_13:
  v34(v43, a1);
  v34(v33, a1);
  return v45 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge6<A, B, C, D, E, F>()
{
  static Publishers.Merge6<>.== infix(_:_:)();
}

uint64_t sub_183B47C8C(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge7<>.== infix(_:_:)()
{
}

uint64_t sub_183B47D40(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  *(void *)(v3 - 208) = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  *(void *)(v3 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = &v54[-v9];
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  *(void *)(v3 - 2outlined destroy of Subscription?(v0 + 32) = &v54[-v11];
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  *(void *)(v3 - 2outlined destroy of Subscription?(v0 + 24) = &v54[-v13];
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  *(void *)(v3 - 2outlined destroy of SubscriptionStatus(v0 + 48) = &v54[-v15];
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  *(void *)(v3 - 240) = &v54[-v17];
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  *(void *)(v3 - 264) = &v54[-v19];
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  *(void *)(v3 - 256) = &v54[-v21];
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  uint64_t v24 = &v54[-v23];
  uint64_t v25 = MEMORY[0x1895F8858](v22);
  uint64_t v27 = &v54[-v26];
  uint64_t v28 = MEMORY[0x1895F8858](v25);
  uint64_t v30 = &v54[-v29];
  MEMORY[0x1895F8858](v28);
  char v32 = &v54[-v31];
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v34 = v5;
  uint64_t v35 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v35(v32, v2, a1);
  v35(v30, v1, a1);
  if ((v33 & 1) != 0) {
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v36 = 0;
  }
  char v37 = *(void (**)(_BYTE *, uint64_t))(v34 + 8);
  v37(v30, a1);
  v37(v32, a1);
  v35(v27, v2, a1);
  uint64_t v38 = v1;
  v35(v24, v1, a1);
  if ((v36 & 1) == 0)
  {
    v37(v24, a1);
    v37(v27, a1);
    char v40 = *(_BYTE **)(v3 - 256);
    uint64_t v41 = v2;
    v35(v40, v2, a1);
    uint64_t v42 = *(_BYTE **)(v3 - 264);
    v35(v42, v38, a1);
    goto LABEL_11;
  }

  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v24, a1);
  v37(v27, a1);
  char v40 = *(_BYTE **)(v3 - 256);
  uint64_t v41 = v2;
  v35(v40, v2, a1);
  uint64_t v42 = *(_BYTE **)(v3 - 264);
  v35(v42, v38, a1);
  if ((v39 & 1) == 0)
  {
LABEL_11:
    v37(v42, a1);
    v37(v40, a1);
    char v44 = *(_BYTE **)(v3 - 240);
    v35(v44, v41, a1);
    char v45 = *(_BYTE **)(v3 - 248);
    v35(v45, v38, a1);
    uint64_t v47 = *(_BYTE **)(v3 - 232);
    uint64_t v46 = *(_BYTE **)(v3 - 224);
    goto LABEL_12;
  }

  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v42, a1);
  v37(v40, a1);
  char v44 = *(_BYTE **)(v3 - 240);
  v35(v44, v41, a1);
  char v45 = *(_BYTE **)(v3 - 248);
  v35(v45, v38, a1);
  uint64_t v47 = *(_BYTE **)(v3 - 232);
  uint64_t v46 = *(_BYTE **)(v3 - 224);
  if ((v43 & 1) == 0)
  {
LABEL_12:
    v37(v45, a1);
    v37(v44, a1);
    v35(v46, v41, a1);
    v35(v47, v38, a1);
    goto LABEL_13;
  }

  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v45, a1);
  v37(v44, a1);
  v35(v46, v41, a1);
  v35(v47, v38, a1);
  if ((v48 & 1) == 0)
  {
LABEL_13:
    v37(v47, a1);
    v37(v46, a1);
    uint64_t v50 = *(_BYTE **)(v3 - 216);
    v35(v50, v41, a1);
    uint64_t v51 = *(_BYTE **)(v3 - 208);
    v35(v51, v38, a1);
    goto LABEL_14;
  }

  char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v47, a1);
  v37(v46, a1);
  uint64_t v50 = *(_BYTE **)(v3 - 216);
  v35(v50, v41, a1);
  uint64_t v51 = *(_BYTE **)(v3 - 208);
  v35(v51, v38, a1);
  if ((v49 & 1) == 0)
  {
LABEL_14:
    char v52 = 0;
    goto LABEL_15;
  }

  char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_15:
  v37(v51, a1);
  v37(v50, a1);
  return v52 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge7<A, B, C, D, E, F, G>()
{
  static Publishers.Merge7<>.== infix(_:_:)();
}

uint64_t sub_183B482F8(char a1)
{
  return a1 & 1;
}

void static Publishers.Merge8<>.== infix(_:_:)()
{
}

uint64_t sub_183B483C8(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  *(void *)(v3 - 2outlined destroy of Subscription?(v0 + 32) = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  *(void *)(v3 - 240) = &v60[-v9];
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  *(void *)(v3 - 256) = &v60[-v11];
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  *(void *)(v3 - 2outlined destroy of SubscriptionStatus(v0 + 48) = &v60[-v13];
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  *(void *)(v3 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 72) = &v60[-v15];
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  *(void *)(v3 - 264) = &v60[-v17];
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  *(void *)(v3 - 288) = &v60[-v19];
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  *(void *)(v3 - 280) = &v60[-v21];
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  *(void *)(v3 - 304) = &v60[-v23];
  uint64_t v24 = MEMORY[0x1895F8858](v22);
  *(void *)(v3 - 296) = &v60[-v25];
  uint64_t v26 = MEMORY[0x1895F8858](v24);
  uint64_t v28 = &v60[-v27];
  uint64_t v29 = MEMORY[0x1895F8858](v26);
  uint64_t v31 = &v60[-v30];
  uint64_t v32 = MEMORY[0x1895F8858](v29);
  uint64_t v34 = &v60[-v33];
  MEMORY[0x1895F8858](v32);
  char v36 = &v60[-v35];
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v38 = v5;
  char v39 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v39(v36, v2, a1);
  *(void *)(v3 - 2outlined destroy of Subscription?(v0 + 24) = v1;
  v39(v34, v1, a1);
  if ((v37 & 1) != 0) {
    char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v40 = 0;
  }
  uint64_t v41 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
  v41(v34, a1);
  v41(v36, a1);
  v39(v31, v2, a1);
  uint64_t v42 = *(void *)(v3 - 224);
  v39(v28, v42, a1);
  if ((v40 & 1) == 0)
  {
    v41(v28, a1);
    v41(v31, a1);
    char v44 = *(_BYTE **)(v3 - 296);
    v39(v44, v2, a1);
    char v45 = *(_BYTE **)(v3 - 304);
    v39(v45, v42, a1);
    goto LABEL_12;
  }

  char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v28, a1);
  v41(v31, a1);
  char v44 = *(_BYTE **)(v3 - 296);
  v39(v44, v2, a1);
  char v45 = *(_BYTE **)(v3 - 304);
  v39(v45, v42, a1);
  if ((v43 & 1) == 0)
  {
LABEL_12:
    v41(v45, a1);
    v41(v44, a1);
    uint64_t v47 = *(_BYTE **)(v3 - 280);
    v39(v47, v2, a1);
    char v48 = *(_BYTE **)(v3 - 288);
    v39(v48, v42, a1);
    uint64_t v50 = *(_BYTE **)(v3 - 256);
    char v49 = *(_BYTE **)(v3 - 248);
    goto LABEL_13;
  }

  char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v45, a1);
  v41(v44, a1);
  uint64_t v47 = *(_BYTE **)(v3 - 280);
  v39(v47, v2, a1);
  char v48 = *(_BYTE **)(v3 - 288);
  v39(v48, v42, a1);
  uint64_t v50 = *(_BYTE **)(v3 - 256);
  char v49 = *(_BYTE **)(v3 - 248);
  if ((v46 & 1) == 0)
  {
LABEL_13:
    v41(v48, a1);
    v41(v47, a1);
    char v52 = *(_BYTE **)(v3 - 264);
    v39(v52, v2, a1);
    uint64_t v53 = *(_BYTE **)(v3 - 272);
    v39(v53, v42, a1);
    goto LABEL_14;
  }

  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v48, a1);
  v41(v47, a1);
  char v52 = *(_BYTE **)(v3 - 264);
  v39(v52, v2, a1);
  uint64_t v53 = *(_BYTE **)(v3 - 272);
  v39(v53, v42, a1);
  if ((v51 & 1) == 0)
  {
LABEL_14:
    v41(v53, a1);
    v41(v52, a1);
    v39(v49, v2, a1);
    v39(v50, v42, a1);
    goto LABEL_15;
  }

  char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v53, a1);
  v41(v52, a1);
  v39(v49, v2, a1);
  v39(v50, v42, a1);
  if ((v54 & 1) == 0)
  {
LABEL_15:
    v41(v50, a1);
    v41(v49, a1);
    uint64_t v56 = *(_BYTE **)(v3 - 240);
    v39(v56, v2, a1);
    uint64_t v57 = *(_BYTE **)(v3 - 232);
    v39(v57, v42, a1);
    goto LABEL_16;
  }

  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  v41(v50, a1);
  v41(v49, a1);
  uint64_t v56 = *(_BYTE **)(v3 - 240);
  v39(v56, v2, a1);
  uint64_t v57 = *(_BYTE **)(v3 - 232);
  v39(v57, v42, a1);
  if ((v55 & 1) == 0)
  {
LABEL_16:
    char v58 = 0;
    goto LABEL_17;
  }

  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_17:
  v41(v57, a1);
  v41(v56, a1);
  return v58 & 1;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge8<A, B, C, D, E, F, G, H>()
{
  static Publishers.Merge8<>.== infix(_:_:)();
}

uint64_t sub_183B48AA8(char a1)
{
  return a1 & 1;
}

uint64_t static Publishers.MergeMany<>.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.MergeMany<A>()
{
  return static Publishers.MergeMany<>.== infix(_:_:)();
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }

  uint64_t v5 = v2 & 0xFFFFFFFFFFFFF8LL;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v5 = v2;
  }
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0,  (char *)a1);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge6<A, B, C, D, E, F>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge7<A, B, C, D, E, F, G>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge8<A, B, C, D, E, F, G, H>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t getEnumTagSinglePayload for Publishers.Merge(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B48CBC + 4 * byte_183BA25C0[v17 - 1]))();
}

void storeEnumTagSinglePayload for Publishers.Merge(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t getEnumTagSinglePayload for Publishers.Merge3(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = a3[4];
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8) {
    unsigned int v8 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + v11;
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  unsigned int v15 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_25;
  }
  uint64_t v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(void *)(v10 + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)(a1 + v16);
      if (!v18) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16)) {
        goto LABEL_25;
      }
      goto LABEL_16;
    }

    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        uint64_t v22 = (v12 + a1) & ~v11;
        if (v7 == v8) {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        }
        else {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 48))( (v22 + v13 + v14) & ~v14,  *(unsigned int *)(v10 + 84),  v9);
        }
      }

      return 0LL;
    }
  }

  int v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16)) {
    goto LABEL_25;
  }
LABEL_16:
  int v20 = (v18 - 1) << v17;
  if ((_DWORD)v16)
  {
    else {
      int v21 = 4;
    }
    __asm { BR              X11 }
  }

  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge3( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v8 + 84) > v7) {
    unsigned int v7 = *(_DWORD *)(v8 + 84);
  }
  size_t v9 = ((*(void *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        unsigned int v10 = 4u;
      }

      else if (v12 >= 0x100)
      {
        unsigned int v10 = 2;
      }

      else
      {
        unsigned int v10 = v12 > 1;
      }
    }

    else
    {
      unsigned int v10 = 1u;
    }
  }

  else
  {
    unsigned int v10 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }

        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X21 }

uint64_t getEnumTagSinglePayload for Publishers.Merge4(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = a3[4];
  uint64_t v13 = a3[5];
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = *(unsigned int *)(v14 + 84);
  uint64_t v16 = *(void *)(v13 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  if (!a2) {
    return 0LL;
  }
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(v7 + 64) + v18;
  uint64_t v20 = *(void *)(v9 + 64);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v22 = *(void *)(v14 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
  int v24 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_27;
  }
  uint64_t v25 = ((v22 + v23 + ((v20 + v21 + (v19 & ~v18)) & ~v21)) & ~v23) + *(void *)(v16 + 64);
  char v26 = 8 * v25;
  if (v25 <= 3)
  {
    unsigned int v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)(a1 + v25);
      if (!v27) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)(a1 + v25);
      if (!*(_WORD *)(a1 + v25)) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v28 < 2)
    {
LABEL_27:
      if (v11)
      {
        if (v8 == v11) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
        }
        uint64_t v31 = (v19 + a1) & ~v18;
        if (v10 == v11) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 48))(v31, *(unsigned int *)(v9 + 84), v5);
        }
        uint64_t v32 = (v31 + v20 + v21) & ~v21;
        if ((_DWORD)v15 == v11) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v32, v15, v12);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))((v32 + v22 + v23) & ~v23, v17, v13);
        }
      }

      return 0LL;
    }
  }

  int v27 = *(unsigned __int8 *)(a1 + v25);
  if (!*(_BYTE *)(a1 + v25)) {
    goto LABEL_27;
  }
LABEL_18:
  int v29 = (v27 - 1) << v26;
  if ((_DWORD)v25)
  {
    else {
      int v30 = 4;
    }
    __asm { BR              X11 }
  }

  return v11 + v29 + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge4( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(a4[5] - 8LL);
  if (*(_DWORD *)(v10 + 84) > v9) {
    unsigned int v9 = *(_DWORD *)(v10 + 84);
  }
  size_t v11 = ((*(void *)(v8 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(void *)(v6 + 64)
          + *(unsigned __int8 *)(v8 + 80)
  if (a3 > v9)
  {
    if (v11 <= 3)
    {
      unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v14))
      {
        unsigned int v12 = 4u;
      }

      else
      {
        unsigned int v12 = v14 > 1;
        if (v14 >= 0x100) {
          unsigned int v12 = 2;
        }
      }
    }

    else
    {
      unsigned int v12 = 1u;
    }
  }

  else
  {
    unsigned int v12 = 0u;
  }

  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }

        else if ((_DWORD)v11 == 2)
        {
          *a1 = v15;
        }

        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X27 }

uint64_t type metadata instantiation function for Publishers.Merge5()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.Merge5()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            swift_initStructMetadata();
            return 0LL;
          }
        }
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Merge5(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8LL);
  uint64_t v5 = *(void *)(a3[3] - 8LL);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v4 + 64) + v6;
  uint64_t v8 = *(void *)(a3[4] - 8LL);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v5 + 64) + v9;
  uint64_t v11 = *(void *)(a3[5] - 8LL);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v8 + 64) + v12;
  uint64_t v14 = *(void *)(a3[6] - 8LL);
  int v15 = *(_DWORD *)(v14 + 80);
  int v16 = *(_DWORD *)(v4 + 80);
  uint64_t v17 = (*(_BYTE *)(v5 + 80) | v16 | *(_BYTE *)(v8 + 80) | v12 | v15);
  if (v17 <= 7
    && ((*(void *)(v11 + 64)
       + v15
       + ((v13 + ((v10 + (v7 & ~v6)) & ~v9)) & ~(unint64_t)v12)) & ~(unint64_t)v15)
     + *(void *)(v14 + 64) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | v16 | *(_DWORD *)(v8 + 80) | v12 | v15) & 0x100000) == 0)
  {
    uint64_t v22 = ~v6;
    uint64_t v33 = ~v9;
    uint64_t v34 = a3[5];
    unint64_t v36 = ~(unint64_t)v12;
    unint64_t v37 = ~(unint64_t)v15;
    uint64_t v38 = a3[6];
    uint64_t v31 = a3[3];
    uint64_t v32 = a3[4];
    uint64_t v35 = *(void *)(v11 + 64) + v15;
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    char v39 = a1;
    unint64_t v24 = ((unint64_t)a1 + v7) & v22;
    unint64_t v25 = ((unint64_t)a2 + v7) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v24, v25, v31);
    uint64_t v26 = v24 + v10;
    uint64_t v21 = v39;
    uint64_t v27 = v26 & v33;
    unint64_t v28 = (v25 + v10) & v33;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v26 & v33, v28, v32);
    unint64_t v29 = (v28 + v13) & v36;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v27 + v13) & v36, v29, v34);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))( (((v27 + v13) & v36) + v35) & v37,  (v29 + v35) & v37,  v38);
  }

  else
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    uint64_t v21 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }

  return v21;
}

uint64_t destroy for Publishers.Merge5(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(a2[4] - 8LL);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(a2[5] - 8LL);
  unint64_t v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  return (*(uint64_t (**)(unint64_t))(*(void *)(a2[6] - 8LL) + 8LL))((v13
                                                                                       + *(void *)(v12 + 64)
                                                                                       + *(unsigned __int8 *)(*(void *)(a2[6] - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[6] - 8LL) + 80LL));
}

uint64_t initializeWithCopy for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  uint64_t v24 = *(void *)(a3[6] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v24 + 16))( (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80),  (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  uint64_t v24 = *(void *)(a3[6] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v24 + 24))( (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80),  (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v22, v23);
  uint64_t v24 = *(void *)(a3[6] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v24 + 32))( (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80),  (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v22, v23);
  uint64_t v24 = *(void *)(a3[6] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v24 + 40))( (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80),  (*(void *)(v19 + 64) + *(unsigned __int8 *)(v24 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge5(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = a3[4];
  uint64_t v12 = a3[5];
  uint64_t v14 = *(void *)(v13 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  if (v15 > v11) {
    unsigned int v11 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v16 = *(void *)(v12 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  else {
    unsigned int v18 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v19 = a3[6];
  uint64_t v20 = *(void *)(v19 - 8);
  if (*(_DWORD *)(v20 + 84) > v18) {
    unsigned int v18 = *(_DWORD *)(v20 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v21 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = *(void *)(v7 + 64) + v21;
  uint64_t v23 = *(void *)(v9 + 64);
  uint64_t v24 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v25 = *(void *)(v14 + 64);
  uint64_t v26 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v27 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v28 = *(void *)(v16 + 64) + v27;
  int v29 = a2 - v18;
  if (a2 <= v18) {
    goto LABEL_30;
  }
  uint64_t v30 = ((v28 + ((v25 + v26 + ((v23 + v24 + (v22 & ~v21)) & ~v24)) & ~v26)) & ~v27) + *(void *)(v20 + 64);
  char v31 = 8 * v30;
  if (v30 <= 3)
  {
    unsigned int v33 = ((v29 + ~(-1 << v31)) >> v31) + 1;
    if (HIWORD(v33))
    {
      int v32 = *(_DWORD *)(a1 + v30);
      if (!v32) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }

    if (v33 > 0xFF)
    {
      int v32 = *(unsigned __int16 *)(a1 + v30);
      if (!*(_WORD *)(a1 + v30)) {
        goto LABEL_30;
      }
      goto LABEL_21;
    }

    if (v33 < 2)
    {
LABEL_30:
      if (v18)
      {
        if (v8 == v18) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
        }
        uint64_t v36 = (v22 + a1) & ~v21;
        if (v10 == v18) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 48))(v36, *(unsigned int *)(v9 + 84), v5);
        }
        uint64_t v37 = (v36 + v23 + v24) & ~v24;
        if (v15 == v18) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v14 + 48))(v37, *(unsigned int *)(v14 + 84), v13);
        }
        uint64_t v38 = (v37 + v25 + v26) & ~v26;
        if ((_DWORD)v17 == v18) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v38, v17, v12);
        }
        else {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v20 + 48))( (v28 + v38) & ~v27,  *(unsigned int *)(v20 + 84),  v19);
        }
      }

      return 0LL;
    }
  }

  int v32 = *(unsigned __int8 *)(a1 + v30);
  if (!*(_BYTE *)(a1 + v30)) {
    goto LABEL_30;
  }
LABEL_21:
  int v34 = (v32 - 1) << v31;
  if ((_DWORD)v30)
  {
    if (v30 <= 3) {
      int v35 = ((v28 + ((v25 + v26 + ((v23 + v24 + (v22 & ~(_DWORD)v21)) & ~(_DWORD)v24)) & ~(_DWORD)v26)) & ~(_DWORD)v27)
    }
          + *(_DWORD *)(v20 + 64);
    else {
      int v35 = 4;
    }
    __asm { BR              X11 }
  }

  return v18 + v34 + 1;
}

uint64_t storeEnumTagSinglePayload for Publishers.Merge5( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t result = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(result + 84)) {
    unsigned int v7 = *(_DWORD *)(result + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v8 + 84) > v7) {
    unsigned int v7 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v9 = *(void *)(a4[5] - 8LL);
  if (*(_DWORD *)(v9 + 84) <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v11 = *(void *)(a4[6] - 8LL);
  if (*(_DWORD *)(v11 + 84) > v10) {
    unsigned int v10 = *(_DWORD *)(v11 + 84);
  }
  size_t v12 = ((*(void *)(v9 + 64)
        + *(unsigned __int8 *)(v11 + 80)
        + ((*(void *)(v8 + 64)
          + *(unsigned __int8 *)(v9 + 80)
          + ((*(void *)(v6 + 64)
            + *(unsigned __int8 *)(v8 + 80)
  if (a3 <= v10)
  {
    unsigned int v13 = 0u;
    if (v10 < a2) {
      goto LABEL_16;
    }
  }

  else
  {
    if (v12 > 3)
    {
      unsigned int v13 = 1u;
      if (v10 >= a2) {
        return result;
      }
LABEL_16:
      unsigned int v14 = ~v10 + a2;
      if (v12 < 4)
      {
        if ((_DWORD)v12)
        {
          int v16 = v14 & ~(-1 << (8 * v12));
          bzero(a1, v12);
          if ((_DWORD)v12 == 3)
          {
            *a1 = v16;
            *((_BYTE *)a1 + 2) = BYTE2(v16);
          }

          else if ((_DWORD)v12 == 2)
          {
            *a1 = v16;
          }

          else
          {
            *(_BYTE *)a1 = v16;
          }
        }
      }

      else
      {
        bzero(a1, v12);
        *(_DWORD *)a1 = v14;
      }

      __asm { BR              X10 }
    }

    unsigned int v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v13 = 4u;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v13 = 2;
    }

    else
    {
      unsigned int v13 = v15 > 1;
    }

    if (v10 < a2) {
      goto LABEL_16;
    }
  }

  return result;
}

void sub_183B4A51C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B4A524()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

uint64_t type metadata instantiation function for Publishers.Merge6()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.Merge6()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              swift_initStructMetadata();
              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for Publishers.Merge6(void *a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8LL);
  uint64_t v6 = *(void *)(a3[3] - 8LL);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v5 + 64) + v7;
  uint64_t v9 = *(void *)(a3[4] - 8LL);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(v6 + 64) + v10;
  uint64_t v12 = *(void *)(a3[5] - 8LL);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v45 = *(void *)(v9 + 64) + v13;
  uint64_t v14 = *(void *)(a3[6] - 8LL);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v44 = *(void *)(v12 + 64) + v15;
  uint64_t v16 = *(void *)(a3[7] - 8LL);
  int v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = *(void *)(v14 + 64) + v17;
  uint64_t v19 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v9 + 80) | *(_BYTE *)(v12 + 80) | *(_BYTE *)(v14 + 80) | v17);
  if (v19 <= 7
    && ((v18 + ((v44 + ((v45 + ((v11 + (v8 & ~v7)) & ~v10)) & ~v13)) & ~v15)) & ~(unint64_t)v17)
     + *(void *)(v16 + 64) <= 0x18
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v12 + 80) | *(_DWORD *)(v14 + 80) | v17) & 0x100000) == 0)
  {
    uint64_t v35 = a3[4];
    uint64_t v36 = a3[3];
    uint64_t v24 = ~v7;
    uint64_t v37 = ~v10;
    uint64_t v38 = a3[5];
    uint64_t v39 = ~v13;
    uint64_t v40 = a3[6];
    uint64_t v41 = ~v15;
    unint64_t v42 = ~(unint64_t)v17;
    uint64_t v43 = a3[7];
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    uint64_t v25 = a2;
    uint64_t v26 = a1;
    unint64_t v27 = ((unint64_t)a1 + v8) & v24;
    unint64_t v28 = ((unint64_t)v25 + v8) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v27, v28, v36);
    uint64_t v29 = v27 + v11;
    uint64_t v23 = v26;
    uint64_t v30 = v29 & v37;
    unint64_t v31 = (v28 + v11) & v37;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v29 & v37, v31, v35);
    uint64_t v32 = (v31 + v45) & v39;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))((v30 + v45) & v39, v32, v38);
    uint64_t v33 = (((v30 + v45) & v39) + v44) & v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v33, (v32 + v44) & v41, v40);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))( (v33 + v18) & v42,  (((v32 + v44) & v41) + v18) & v42,  v43);
  }

  else
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    uint64_t v23 = (void *)(v22 + ((v19 + 16) & ~v19));
    swift_retain();
  }

  return v23;
}

uint64_t destroy for Publishers.Merge6(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(a2[4] - 8LL);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(a2[5] - 8LL);
  unint64_t v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = *(void *)(a2[6] - 8LL);
  unint64_t v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  (*(void (**)(unint64_t))(v15 + 8))(v16);
  return (*(uint64_t (**)(unint64_t))(*(void *)(a2[7] - 8LL) + 8LL))((v16
                                                                                       + *(void *)(v15 + 64)
                                                                                       + *(unsigned __int8 *)(*(void *)(a2[7] - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[7] - 8LL) + 80LL));
}

uint64_t initializeWithCopy for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  uint64_t v30 = *(void *)(a3[7] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v30 + 16))( (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80),  (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 24))(v28, v29);
  uint64_t v30 = *(void *)(a3[7] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v30 + 24))( (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80),  (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v28, v29);
  uint64_t v30 = *(void *)(a3[7] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v30 + 32))( (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80),  (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v28, v29);
  uint64_t v30 = *(void *)(a3[7] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v30 + 40))( (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80),  (*(void *)(v25 + 64) + *(unsigned __int8 *)(v30 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge6(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = a3[4];
  uint64_t v12 = a3[5];
  uint64_t v14 = *(void *)(v13 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  if (v15 > v11) {
    unsigned int v11 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v16 = *(void *)(v12 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  else {
    unsigned int v18 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v19 = a3[6];
  uint64_t v20 = a3[7];
  uint64_t v21 = *(void *)(v19 - 8);
  unsigned int v22 = *(_DWORD *)(v21 + 84);
  if (v22 <= v18) {
    unsigned int v23 = v18;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v21 + 84);
  }
  uint64_t v24 = *(void *)(v20 - 8);
  if (*(_DWORD *)(v24 + 84) > v23) {
    unsigned int v23 = *(_DWORD *)(v24 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v25 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v46 = *(void *)(v7 + 64) + v25;
  uint64_t v45 = *(void *)(v9 + 64);
  uint64_t v26 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v44 = *(void *)(v14 + 64);
  uint64_t v27 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v28 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v43 = *(void *)(v16 + 64) + v28;
  uint64_t v29 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v30 = *(void *)(v21 + 64) + v29;
  int v31 = a2 - v23;
  if (a2 <= v23) {
    goto LABEL_33;
  }
  uint64_t v32 = ((v30 + ((v43 + ((v44 + v27 + ((v45 + v26 + (v46 & ~v25)) & ~v26)) & ~v27)) & ~v28)) & ~v29)
      + *(void *)(v24 + 64);
  char v33 = 8 * v32;
  if (v32 <= 3)
  {
    unsigned int v35 = ((v31 + ~(-1 << v33)) >> v33) + 1;
    if (HIWORD(v35))
    {
      int v34 = *(_DWORD *)(a1 + v32);
      uint64_t v30 = *(void *)(v21 + 64) + v29;
      if (!v34) {
        goto LABEL_33;
      }
      goto LABEL_24;
    }

    if (v35 > 0xFF)
    {
      int v34 = *(unsigned __int16 *)(a1 + v32);
      uint64_t v30 = *(void *)(v21 + 64) + v29;
      if (!*(_WORD *)(a1 + v32)) {
        goto LABEL_33;
      }
      goto LABEL_24;
    }

    uint64_t v30 = *(void *)(v21 + 64) + v29;
    if (v35 < 2)
    {
LABEL_33:
      if (v23)
      {
        if (v8 == v23) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v6);
        }
        uint64_t v38 = (v46 + a1) & ~v25;
        if (v10 == v23) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v9 + 48))(v38, *(unsigned int *)(v9 + 84), v5);
        }
        uint64_t v39 = (v38 + v45 + v26) & ~v26;
        if (v15 == v23) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v14 + 48))(v39, *(unsigned int *)(v14 + 84), v13);
        }
        uint64_t v40 = (v39 + v44 + v27) & ~v27;
        if ((_DWORD)v17 == v23) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v40, v17, v12);
        }
        uint64_t v42 = (v43 + v40) & ~v28;
        if (v22 == v23) {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v21 + 48))(v42, *(unsigned int *)(v21 + 84), v19);
        }
        else {
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(v24 + 48))( (v30 + v42) & ~v29,  *(unsigned int *)(v24 + 84),  v20);
        }
      }

      return 0LL;
    }
  }

  int v34 = *(unsigned __int8 *)(a1 + v32);
  if (!*(_BYTE *)(a1 + v32)) {
    goto LABEL_33;
  }
LABEL_24:
  int v36 = (v34 - 1) << v33;
  if ((_DWORD)v32)
  {
    else {
      int v37 = 4;
    }
    __asm { BR              X11 }
  }

  return v23 + v36 + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge6( _BYTE *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v4 = *(void *)(a4[2] - 8LL);
  uint64_t v5 = *(void *)(a4[3] - 8LL);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v4 + 84)) {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v7 = *(void *)(a4[4] - 8LL);
  if (*(_DWORD *)(v7 + 84) > v6) {
    unsigned int v6 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v8 = *(void *)(a4[5] - 8LL);
  uint64_t v9 = *(void *)(a4[6] - 8LL);
  uint64_t v10 = *(void *)(a4[7] - 8LL);
  size_t v11 = ((*(void *)(v9 + 64)
        + *(unsigned __int8 *)(v10 + 80)
        + ((*(void *)(v8 + 64)
          + *(unsigned __int8 *)(v9 + 80)
          + ((*(void *)(v7 + 64)
            + *(unsigned __int8 *)(v8 + 80)
            + ((*(void *)(v5 + 64)
              + *(unsigned __int8 *)(v7 + 80)
  if (*(_DWORD *)(v8 + 84) > v6) {
    unsigned int v6 = *(_DWORD *)(v8 + 84);
  }
  if (*(_DWORD *)(v9 + 84) > v6) {
    unsigned int v6 = *(_DWORD *)(v9 + 84);
  }
  if (*(_DWORD *)(v10 + 84) > v6) {
    unsigned int v6 = *(_DWORD *)(v10 + 84);
  }
  if (a3 <= v6)
  {
    unsigned int v12 = 0u;
    if (v6 >= a2) {
      goto LABEL_29;
    }
  }

  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v6 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      unsigned int v12 = 4u;
    }

    else if (v15 >= 0x100)
    {
      unsigned int v12 = 2;
    }

    else
    {
      unsigned int v12 = v15 > 1;
    }

    if (v6 >= a2) {
LABEL_29:
    }
      __asm { BR              X11 }
  }

  else
  {
    unsigned int v12 = 1u;
    if (v6 >= a2) {
      goto LABEL_29;
    }
  }

  unsigned int v13 = ~v6 + a2;
  if (v11 < 4)
  {
    if ((_DWORD)v11)
    {
      int v16 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }

      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }

      else
      {
        *a1 = v16;
      }
    }
  }

  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v13;
  }

  __asm { BR              X10 }

uint64_t sub_183B4B500(uint64_t result)
{
  *(_BYTE *)(result + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  return result;
}

uint64_t sub_183B4B508(uint64_t result)
{
  *(_WORD *)(result + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  return result;
}

uint64_t type metadata instantiation function for Publishers.Merge7()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.Merge7()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              uint64_t result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                swift_initStructMetadata();
                return 0LL;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Merge7(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a3[3];
  uint64_t v5 = a3[4];
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v49 = *(void *)(v6 + 64) + v8;
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v47 = *(void *)(v7 + 64) + v11;
  uint64_t v12 = *(void *)(a3[5] - 8LL);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v50 = *(void *)(v10 + 64) + v13;
  uint64_t v14 = a3[8];
  uint64_t v15 = *(void *)(v9 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v48 = *(void *)(v12 + 64) + v16;
  uint64_t v17 = *(void *)(a3[7] - 8LL);
  int v18 = *(_DWORD *)(v17 + 80);
  uint64_t v51 = *(void *)(v15 + 64) + v18;
  uint64_t v19 = *(void *)(v14 - 8);
  int v20 = *(_DWORD *)(v19 + 80);
  uint64_t v52 = *(void *)(v17 + 64) + v20;
  int v21 = *(_DWORD *)(v6 + 80);
  uint64_t v22 = (*(_BYTE *)(v7 + 80) | v21 | *(_BYTE *)(v10 + 80) | *(_BYTE *)(v12 + 80) | *(_BYTE *)(v15 + 80) | v18 | v20);
  if (v22 <= 7
    && ((v52
       + ((v51 + ((v48 + ((v50 + ((v47 + (v49 & ~v8)) & ~v11)) & ~v13)) & ~v16)) & ~(unint64_t)v18)) & ~(unint64_t)v20)
     + *(void *)(v19 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | v21 | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v12 + 80) | *(_DWORD *)(v15 + 80) | v18 | v20) & 0x100000) == 0)
  {
    uint64_t v41 = a3[5];
    uint64_t v27 = ~v8;
    uint64_t v37 = ~v11;
    uint64_t v38 = ~v13;
    uint64_t v40 = ~v16;
    unint64_t v43 = ~(unint64_t)v18;
    unint64_t v44 = ~(unint64_t)v20;
    uint64_t v45 = *(void *)(v14 - 8);
    uint64_t v46 = a3[8];
    uint64_t v42 = a3[7];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    uint64_t v39 = v9;
    uint64_t v26 = a1;
    unint64_t v28 = ((unint64_t)a1 + v49) & v27;
    unint64_t v29 = ((unint64_t)a2 + v49) & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v28, v29, v4);
    unint64_t v30 = (v29 + v47) & v37;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v28 + v47) & v37, v30, v5);
    unint64_t v31 = (((v28 + v47) & v37) + v50) & v38;
    unint64_t v32 = (v30 + v50) & v38;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))(v31, v32, v41);
    unint64_t v33 = (v31 + v48) & v40;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(v33, (v32 + v48) & v40, v39);
    unint64_t v34 = (v33 + v51) & v43;
    unint64_t v35 = (((v32 + v48) & v40) + v51) & v43;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))(v34, v35, v42);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v45 + 16))( (v34 + v52) & v44,  (v35 + v52) & v44,  v46);
  }

  else
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    uint64_t v26 = (uint64_t *)(v25 + ((v22 + 16) & ~v22));
    swift_retain();
  }

  return v26;
}

uint64_t destroy for Publishers.Merge7(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(a2[4] - 8LL);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(a2[5] - 8LL);
  unint64_t v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = *(void *)(a2[6] - 8LL);
  unint64_t v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  (*(void (**)(unint64_t))(v15 + 8))(v16);
  uint64_t v17 = *(void *)(v15 + 64);
  uint64_t v18 = *(void *)(a2[7] - 8LL);
  unint64_t v19 = (v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  (*(void (**)(unint64_t))(v18 + 8))(v19);
  return (*(uint64_t (**)(unint64_t))(*(void *)(a2[8] - 8LL) + 8LL))((v19
                                                                                       + *(void *)(v18 + 64)
                                                                                       + *(unsigned __int8 *)(*(void *)(a2[8] - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[8] - 8LL) + 80LL));
}

uint64_t initializeWithCopy for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v34, v35);
  uint64_t v36 = *(void *)(a3[8] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v36 + 16))( (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v34) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80),  (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 24))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 24))(v34, v35);
  uint64_t v36 = *(void *)(a3[8] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v36 + 24))( (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v34) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80),  (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 32))(v34, v35);
  uint64_t v36 = *(void *)(a3[8] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v36 + 32))( (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v34) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80),  (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 40))(v34, v35);
  uint64_t v36 = *(void *)(a3[8] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v36 + 40))( (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v34) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80),  (*(void *)(v31 + 64) + *(unsigned __int8 *)(v36 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge7(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5 = a3[3];
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(a3[4] - 8LL);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  if (v12 > v10) {
    unsigned int v10 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v13 = *(void *)(a3[5] - 8LL);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  if (v14 <= v10) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v16 = *(void *)(a3[6] - 8LL);
  unsigned int v17 = *(_DWORD *)(v16 + 84);
  if (v17 > v15) {
    unsigned int v15 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v18 = *(void *)(a3[7] - 8LL);
  uint64_t v19 = *(unsigned int *)(v18 + 84);
  else {
    unsigned int v20 = *(_DWORD *)(v18 + 84);
  }
  uint64_t v21 = *(void *)(a3[8] - 8LL);
  if (*(_DWORD *)(v21 + 84) <= v20) {
    unsigned int v22 = v20;
  }
  else {
    unsigned int v22 = *(_DWORD *)(v21 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v23 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v47 = *(void *)(v6 + 64) + v23;
  uint64_t v45 = *(void *)(v8 + 64);
  uint64_t v46 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v43 = *(void *)(v13 + 64) + v24;
  uint64_t v44 = *(void *)(v11 + 64);
  uint64_t v25 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v42 = *(void *)(v16 + 64) + v25;
  uint64_t v40 = *(void *)(v18 + 64) + *(unsigned __int8 *)(v21 + 80);
  uint64_t v41 = *(unsigned __int8 *)(v21 + 80);
  BOOL v26 = a2 >= v22;
  unsigned int v27 = a2 - v22;
  if (v27 == 0 || !v26)
  {
LABEL_37:
    if (v22)
    {
      if ((_DWORD)v7 == v22) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a1, v7);
      }
      uint64_t v35 = *(unsigned __int8 *)(v13 + 80);
      if ((_DWORD)v9 == v22) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v47 + a1) & ~v23, v9, v5);
      }
      uint64_t v36 = (((v47 + a1) & ~v23) + v45 + v46) & ~v46;
      if (v12 == v22) {
        return (*(uint64_t (**)(uint64_t, void, void))(v11 + 48))( (((v47 + a1) & ~v23) + v45 + v46) & ~v46,  *(unsigned int *)(v11 + 84),  a3[4]);
      }
      uint64_t v37 = (v36 + v44 + v35) & ~v35;
      if (v14 == v22) {
        return (*(uint64_t (**)(uint64_t, void, void))(v13 + 48))( (v36 + v44 + v35) & ~v35,  *(unsigned int *)(v13 + 84),  a3[5]);
      }
      uint64_t v39 = (v43 + v37) & ~v24;
      if (v17 == v22) {
        return (*(uint64_t (**)(uint64_t, void, void))(v16 + 48))( (v43 + v37) & ~v24,  *(unsigned int *)(v16 + 84),  a3[6]);
      }
      if ((_DWORD)v19 == v22) {
        return (*(uint64_t (**)(uint64_t, uint64_t, void))(v18 + 48))((v42 + v39) & ~v25, v19, a3[7]);
      }
      return (*(uint64_t (**)(uint64_t, void, void))(v21 + 48))( (v40 + ((v42 + v39) & ~v25)) & ~v41,  *(unsigned int *)(v21 + 84),  a3[8]);
    }

    return 0LL;
  }

  unsigned int v28 = v27;
  unint64_t v29 = ((v40
        + ((v42
          + ((v43
  char v30 = 8 * v29;
  if (v29 <= 3)
  {
    unsigned int v32 = ((v28 + ~(-1 << v30)) >> v30) + 1;
    if (HIWORD(v32))
    {
      int v31 = *(_DWORD *)(a1 + v29);
      if (!v31) {
        goto LABEL_37;
      }
      goto LABEL_28;
    }

    if (v32 > 0xFF)
    {
      int v31 = *(unsigned __int16 *)(a1 + v29);
      if (!*(_WORD *)(a1 + v29)) {
        goto LABEL_37;
      }
      goto LABEL_28;
    }

    if (v32 < 2) {
      goto LABEL_37;
    }
  }

  int v31 = *(unsigned __int8 *)(a1 + v29);
  if (!*(_BYTE *)(a1 + v29)) {
    goto LABEL_37;
  }
LABEL_28:
  int v33 = (v31 - 1) << v30;
  if ((_DWORD)v29)
  {
    if (v29 <= 3) {
      int v34 = ((v40
    }
            + ((v42
              + ((v43
    else {
      int v34 = 4;
    }
    __asm { BR              X11 }
  }

  return v22 + v33 + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge7( _WORD *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(a4[2] - 8LL);
  uint64_t v6 = *(void *)(a4[3] - 8LL);
  uint64_t v7 = *(void *)(a4[4] - 8LL);
  uint64_t v8 = *(void *)(a4[5] - 8LL);
  uint64_t v9 = *(void *)(a4[6] - 8LL);
  uint64_t v10 = *(void *)(a4[7] - 8LL);
  uint64_t v11 = *(void *)(a4[8] - 8LL);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  size_t v14 = ((*(void *)(v10 + 64)
        + *(unsigned __int8 *)(v11 + 80)
        + ((*(void *)(v9 + 64)
          + v13
          + ((*(void *)(v8 + 64)
            + *(unsigned __int8 *)(v9 + 80)
            + ((*(void *)(v7 + 64)
              + v12
              + ((*(void *)(v6 + 64)
                + *(unsigned __int8 *)(v7 + 80)
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v15 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v6 + 84);
  }
  if (*(_DWORD *)(v7 + 84) > v15) {
    unsigned int v15 = *(_DWORD *)(v7 + 84);
  }
  if (*(_DWORD *)(v8 + 84) > v15) {
    unsigned int v15 = *(_DWORD *)(v8 + 84);
  }
  if (*(_DWORD *)(v9 + 84) > v15) {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  if (*(_DWORD *)(v10 + 84) > v15) {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  if (*(_DWORD *)(v11 + 84) > v15) {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  if (a3 <= v15)
  {
    unsigned int v16 = 0u;
    if (v15 >= a2) {
      goto LABEL_30;
    }
  }

  else if (v14 <= 3)
  {
    unsigned int v18 = ((a3 - v15 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v18))
    {
      unsigned int v16 = 4u;
    }

    else
    {
      unsigned int v16 = v18 > 1;
      if (v18 >= 0x100) {
        unsigned int v16 = 2;
      }
    }

    if (v15 >= a2) {
LABEL_30:
    }
      __asm { BR              X9 }
  }

  else
  {
    unsigned int v16 = 1u;
    if (v15 >= a2) {
      goto LABEL_30;
    }
  }

  unsigned int v17 = ~v15 + a2;
  if (v14 < 4)
  {
    if ((_DWORD)v14)
    {
      int v19 = v17 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if ((_DWORD)v14 == 3)
      {
        *a1 = v19;
        *((_BYTE *)a1 + 2) = BYTE2(v19);
      }

      else if ((_DWORD)v14 == 2)
      {
        *a1 = v19;
      }

      else
      {
        *(_BYTE *)a1 = v19;
      }
    }
  }

  else
  {
    bzero(a1, v14);
    *(_DWORD *)a1 = v17;
  }

  __asm { BR              X10 }

void sub_183B4C844()
{
  *(_BYTE *)(v2 + specialized Set._Variant.insert(_:)(&v2, v0) = v1;
}

void sub_183B4C84C()
{
  *(_WORD *)(v2 + specialized Set._Variant.insert(_:)(&v2, v0) = v1;
}

uint64_t type metadata instantiation function for Publishers.Merge8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Publishers.Merge8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              uint64_t result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                uint64_t result = swift_checkMetadataState();
                if (v8 <= 0x3F)
                {
                  swift_initStructMetadata();
                  return 0LL;
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Merge8(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v59 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v57 = *(void *)(v7 + 64) + v9;
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v65 = a3[4];
  uint64_t v11 = *(void *)(v65 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v54 = v10 + v12;
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v66 = a3[5];
  uint64_t v14 = *(void *)(v66 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v58 = v13 + v15;
  uint64_t v16 = (v13 + v15 + ((v10 + v12 + (v57 & ~v9)) & ~v12)) & ~v15;
  uint64_t v17 = a3[6];
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(_DWORD *)(v18 + 80);
  uint64_t v55 = *(void *)(v14 + 64) + v19;
  uint64_t v20 = *(void *)(a3[7] - 8LL);
  int v21 = *(_DWORD *)(v20 + 80);
  uint64_t v61 = *(void *)(v18 + 64) + v21;
  uint64_t v22 = a3[9];
  uint64_t v63 = v20;
  uint64_t v23 = *(void *)(v20 + 64);
  uint64_t v24 = *(void *)(a3[8] - 8LL);
  int v25 = *(_DWORD *)(v24 + 80);
  uint64_t v56 = v23 + v25;
  uint64_t v26 = *(void *)(v22 - 8);
  int v27 = *(_DWORD *)(v26 + 80);
  uint64_t v62 = *(void *)(v24 + 64) + v27;
  uint64_t v64 = v26;
  int v28 = *(_DWORD *)(v7 + 80);
  uint64_t v29 = (*(_BYTE *)(v8 + 80) | v28 | *(_BYTE *)(v11 + 80) | *(_BYTE *)(v14 + 80) | *(_BYTE *)(v18 + 80) | v21 | v25 | v27);
  if (v29 <= 7
    && ((v62
       + ((v56 + ((v61 + ((v55 + v16) & ~v19)) & ~(unint64_t)v21)) & ~(unint64_t)v25)) & ~(unint64_t)v27)
     + *(void *)(v26 + 64) <= 0x18
    && ((*(_DWORD *)(v8 + 80) | v28 | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v14 + 80) | *(_DWORD *)(v18 + 80) | v21 | v25 | v27) & 0x100000) == 0)
  {
    uint64_t v52 = a3[7];
    uint64_t v53 = a3[8];
    uint64_t v34 = ~v9;
    uint64_t v46 = ~v12;
    uint64_t v47 = ~v15;
    uint64_t v48 = ~v19;
    unint64_t v49 = ~(unint64_t)v21;
    unint64_t v50 = ~(unint64_t)v25;
    unint64_t v51 = ~(unint64_t)v27;
    uint64_t v35 = v5;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v59);
    uint64_t v60 = v22;
    int v33 = a1;
    unint64_t v36 = ((unint64_t)a1 + v57) & v34;
    unint64_t v37 = ((unint64_t)a2 + v57) & v34;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v36, v37, v35);
    unint64_t v38 = (v37 + v54) & v46;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v36 + v54) & v46, v38, v65);
    unint64_t v39 = (((v36 + v54) & v46) + v58) & v47;
    unint64_t v40 = (v38 + v58) & v47;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(v39, v40, v66);
    unint64_t v41 = (v39 + v55) & v48;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 16))(v41, (v40 + v55) & v48, v17);
    unint64_t v42 = (v41 + v61) & v49;
    unint64_t v43 = (((v40 + v55) & v48) + v61) & v49;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v63 + 16))(v42, v43, v52);
    unint64_t v44 = (v42 + v56) & v50;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 16))(v44, (v43 + v56) & v50, v53);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v64 + 16))( (v44 + v62) & v51,  (((v43 + v56) & v50) + v62) & v51,  v60);
  }

  else
  {
    uint64_t v32 = *a2;
    *a1 = *a2;
    int v33 = (uint64_t *)(v32 + ((v29 + 16) & ~v29));
    swift_retain();
  }

  return v33;
}

uint64_t destroy for Publishers.Merge8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8LL);
  (*(void (**)(void))(v4 + 8))();
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8LL);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(a2[4] - 8LL);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(a2[5] - 8LL);
  unint64_t v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t))(v12 + 8))(v13);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = *(void *)(a2[6] - 8LL);
  unint64_t v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  (*(void (**)(unint64_t))(v15 + 8))(v16);
  uint64_t v17 = *(void *)(v15 + 64);
  uint64_t v18 = *(void *)(a2[7] - 8LL);
  unint64_t v19 = (v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  (*(void (**)(unint64_t))(v18 + 8))(v19);
  uint64_t v20 = *(void *)(v18 + 64);
  uint64_t v21 = *(void *)(a2[8] - 8LL);
  unint64_t v22 = (v19 + v20 + *(unsigned __int8 *)(v21 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  (*(void (**)(unint64_t))(v21 + 8))(v22);
  return (*(uint64_t (**)(unint64_t))(*(void *)(a2[9] - 8LL) + 8LL))((v22
                                                                                       + *(void *)(v21 + 64)
                                                                                       + *(unsigned __int8 *)(*(void *)(a2[9] - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2[9] - 8LL) + 80LL));
}

uint64_t initializeWithCopy for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v34, v35);
  uint64_t v36 = *(void *)(v31 + 64);
  uint64_t v37 = *(void *)(a3[8] - 8LL);
  uint64_t v38 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v39 = v36 + v38;
  uint64_t v40 = (v39 + v34) & ~v38;
  uint64_t v41 = (v39 + v35) & ~v38;
  (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v40, v41);
  uint64_t v42 = *(void *)(a3[9] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v42 + 16))( (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 24))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 24))(v34, v35);
  uint64_t v36 = *(void *)(v31 + 64);
  uint64_t v37 = *(void *)(a3[8] - 8LL);
  uint64_t v38 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v39 = v36 + v38;
  uint64_t v40 = (v39 + v34) & ~v38;
  uint64_t v41 = (v39 + v35) & ~v38;
  (*(void (**)(uint64_t, uint64_t))(v37 + 24))(v40, v41);
  uint64_t v42 = *(void *)(a3[9] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v42 + 24))( (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 32))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 32))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 32))(v34, v35);
  uint64_t v36 = *(void *)(v31 + 64);
  uint64_t v37 = *(void *)(a3[8] - 8LL);
  uint64_t v38 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v39 = v36 + v38;
  uint64_t v40 = (v39 + v34) & ~v38;
  uint64_t v41 = (v39 + v35) & ~v38;
  (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v40, v41);
  uint64_t v42 = *(void *)(a3[9] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v42 + 32))( (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(a3[3] - 8LL);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a1) & ~v8;
  uint64_t v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(a3[4] - 8LL);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v16 = (v15 + v10) & ~v14;
  uint64_t v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v19 = *(void *)(a3[5] - 8LL);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v18 + v20;
  uint64_t v22 = (v21 + v16) & ~v20;
  uint64_t v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 40))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 64);
  uint64_t v25 = *(void *)(a3[6] - 8LL);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v24 + v26;
  uint64_t v28 = (v27 + v22) & ~v26;
  uint64_t v29 = (v27 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v28, v29);
  uint64_t v30 = *(void *)(v25 + 64);
  uint64_t v31 = *(void *)(a3[7] - 8LL);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = v30 + v32;
  uint64_t v34 = (v33 + v28) & ~v32;
  uint64_t v35 = (v33 + v29) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v31 + 40))(v34, v35);
  uint64_t v36 = *(void *)(v31 + 64);
  uint64_t v37 = *(void *)(a3[8] - 8LL);
  uint64_t v38 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v39 = v36 + v38;
  uint64_t v40 = (v39 + v34) & ~v38;
  uint64_t v41 = (v39 + v35) & ~v38;
  (*(void (**)(uint64_t, uint64_t))(v37 + 40))(v40, v41);
  uint64_t v42 = *(void *)(a3[9] - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v42 + 40))( (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80),  (*(void *)(v37 + 64) + *(unsigned __int8 *)(v42 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge8(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v6 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = a3[4];
  uint64_t v14 = a3[5];
  uint64_t v15 = *(void *)(v13 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  if (v16 > v12) {
    unsigned int v12 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v17 = *(void *)(v14 - 8);
  unsigned int v18 = *(_DWORD *)(v17 + 84);
  if (v18 > v12) {
    unsigned int v12 = *(_DWORD *)(v17 + 84);
  }
  uint64_t v20 = a3[6];
  uint64_t v19 = a3[7];
  uint64_t v21 = *(void *)(v20 - 8);
  unsigned int v22 = *(_DWORD *)(v21 + 84);
  if (v22 > v12) {
    unsigned int v12 = *(_DWORD *)(v21 + 84);
  }
  uint64_t v23 = *(void *)(v19 - 8);
  uint64_t v24 = *(unsigned int *)(v23 + 84);
  uint64_t v25 = a3[8];
  uint64_t v26 = a3[9];
  uint64_t v27 = *(void *)(v25 - 8);
  unsigned int v28 = *(_DWORD *)(v27 + 84);
  if (v28 > v12) {
    unsigned int v12 = *(_DWORD *)(v27 + 84);
  }
  uint64_t v29 = *(void *)(v26 - 8);
  unsigned int v30 = *(_DWORD *)(v29 + 84);
  if (v30 <= v12) {
    uint64_t result = v12;
  }
  else {
    uint64_t result = v30;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v50 = v20;
  uint64_t v51 = v14;
  uint64_t v49 = v26;
  uint64_t v62 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v63 = *(void *)(v8 + 64) + v62;
  uint64_t v60 = *(void *)(v10 + 64);
  uint64_t v61 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v59 = *(void *)(v15 + 64);
  uint64_t v32 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v58 = *(void *)(v17 + 64) + v32;
  uint64_t v56 = *(void *)(v21 + 64) + *(unsigned __int8 *)(v23 + 80);
  uint64_t v57 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v54 = *(void *)(v23 + 64) + *(unsigned __int8 *)(v27 + 80);
  uint64_t v55 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v52 = *(void *)(v27 + 64) + *(unsigned __int8 *)(v29 + 80);
  uint64_t v53 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v33 = *(unsigned __int8 *)(v17 + 80);
  int v34 = a2 - result;
  uint64_t v35 = ((v52
        + ((v54 + ((v56 + ((v58 + ((v59 + v33 + ((v60 + v61 + (v63 & ~v62)) & ~v61)) & ~v33)) & ~v32)) & ~v57)) & ~v55)) & ~v53)
      + *(void *)(v29 + 64);
  char v36 = 8 * v35;
  unsigned int v38 = ((v34 + ~(-1 << v36)) >> v36) + 1;
  if (HIWORD(v38))
  {
    int v37 = *(_DWORD *)(a1 + v35);
    goto LABEL_29;
  }

  if (v38 > 0xFF)
  {
    int v37 = *(unsigned __int16 *)(a1 + v35);
LABEL_29:
    if (!v37) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }

  if (v38 >= 2)
  {
LABEL_20:
    int v37 = *(unsigned __int8 *)(a1 + v35);
    if (!*(_BYTE *)(a1 + v35)) {
      goto LABEL_37;
    }
LABEL_30:
    int v39 = (v37 - 1) << v36;
    if ((_DWORD)v35)
    {
      else {
        int v40 = 4;
      }
      __asm { BR              X11 }
    }

    return (result + v39 + 1);
  }

void storeEnumTagSinglePayload for Publishers.Merge8( _BYTE *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v4 = *(void *)(a4[2] - 8LL);
  uint64_t v5 = *(void *)(a4[3] - 8LL);
  uint64_t v6 = *(void *)(a4[4] - 8LL);
  uint64_t v7 = *(void *)(a4[5] - 8LL);
  uint64_t v8 = *(void *)(a4[6] - 8LL);
  uint64_t v9 = *(void *)(a4[7] - 8LL);
  uint64_t v10 = a4[9];
  uint64_t v11 = *(void *)(a4[8] - 8LL);
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = *(void *)(v10 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  size_t v17 = ((*(void *)(v11 + 64)
        + v16
        + ((*(void *)(v9 + 64)
          + *(unsigned __int8 *)(v11 + 80)
          + ((*(void *)(v8 + 64)
            + *(unsigned __int8 *)(v9 + 80)
            + ((*(void *)(v7 + 64)
              + *(unsigned __int8 *)(v8 + 80)
              + ((*(void *)(v6 + 64)
                + v14
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v4 + 84)) {
    unsigned int v18 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v18 = *(_DWORD *)(v5 + 84);
  }
  if (*(_DWORD *)(v6 + 84) > v18) {
    unsigned int v18 = *(_DWORD *)(v6 + 84);
  }
  if (*(_DWORD *)(v7 + 84) > v18) {
    unsigned int v18 = *(_DWORD *)(v7 + 84);
  }
  if (*(_DWORD *)(v8 + 84) > v18) {
    unsigned int v18 = *(_DWORD *)(v8 + 84);
  }
  if (*(_DWORD *)(v9 + 84) > v18) {
    unsigned int v18 = *(_DWORD *)(v9 + 84);
  }
  if (*(_DWORD *)(v11 + 84) > v18) {
    unsigned int v18 = *(_DWORD *)(v11 + 84);
  }
  if (*(_DWORD *)(v15 + 84) > v18) {
    unsigned int v18 = *(_DWORD *)(v15 + 84);
  }
  if (a3 <= v18)
  {
    unsigned int v19 = 0u;
    if (v18 >= a2) {
      goto LABEL_33;
    }
  }

  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v18 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      unsigned int v19 = 4u;
    }

    else if (v21 >= 0x100)
    {
      unsigned int v19 = 2;
    }

    else
    {
      unsigned int v19 = v21 > 1;
    }

    if (v18 >= a2) {
LABEL_33:
    }
      __asm { BR              X1 }
  }

  else
  {
    unsigned int v19 = 1u;
    if (v18 >= a2) {
      goto LABEL_33;
    }
  }

  unsigned int v20 = ~v18 + a2;
  if (v17 < 4)
  {
    if ((_DWORD)v17)
    {
      int v22 = v20 & ~(-1 << (8 * v17));
      bzero(a1, v17);
      if ((_DWORD)v17 == 3)
      {
        *(_WORD *)a1 = v22;
        a1[2] = BYTE2(v22);
      }

      else if ((_DWORD)v17 == 2)
      {
        *(_WORD *)a1 = v22;
      }

      else
      {
        *a1 = v22;
      }
    }
  }

  else
  {
    bzero(a1, v17);
    *(_DWORD *)a1 = v20;
  }

  __asm { BR              X10 }

void sub_183B4DD88()
{
  *(_BYTE *)(*(void *)(v2 - 96) + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v0;
}

void sub_183B4DD94()
{
  *(_WORD *)(*(void *)(v2 - 96) + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v0;
}

void sub_183B4DDA0()
{
  *(_DWORD *)(*(void *)(v2 - 96) + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v0;
  JUMPOUT(0x183B4DDA8LL);
}

uint64_t type metadata accessor for Publishers.MergeMany(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.MergeMany);
}

void *initializeBufferWithCopyOfBuffer for Publishers._Merged.Side(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

void *assignWithCopy for Publishers._Merged.Side(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for Publishers._Merged.Side(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers._Merged<A, B, C>.Side()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t partial apply for closure #1 in closure #1 in Publishers._Merged.request(_:)()
{
  return (*(uint64_t (**)(void, void))(v0[5] + 48LL))(v0[6], v0[4]);
}

uint64_t partial apply for closure #1 in Publishers._Merged.receive(completion:_:)()
{
  return (*(uint64_t (**)(void, void))(v0[5] + 56LL))(v0[6], v0[4]);
}

uint64_t partial apply for closure #4 in Publishers._Merged.request(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v1[5] + 48LL))(v1[6], v1[4]);
  *a1 = result;
  return result;
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Result();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v5 + 16))(v4);
  uint64_t v6 = type metadata accessor for Result();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a2, v4, v6);
}

uint64_t Result.Publisher.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Result();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t Result.Publisher.init(catching:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Result();
  MEMORY[0x1895F8858](v12);
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC( (void (*)(_BYTE *))partial apply for closure #1 in Result.Publisher.init(catching:),  (uint64_t)&v15[-v13]);
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  return _ss6ResultOsRi_zrlE8mapErroryAByxqd__Gqd__q_XEs0C0Rd__lF( (void (*)(char *))partial apply for closure #2 in Result.Publisher.init(catching:),  v12,  a6);
}

uint64_t closure #2 in Result.Publisher.init(catching:)()
{
  return swift_dynamicCast();
}

uint64_t _ss6ResultOsRi_zrlE8mapErroryAByxqd__Gqd__q_XEs0C0Rd__lF@<X0>( void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v3, v7);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 32LL))( a3,  v3,  *(void *)(a2 + 16));
  }

  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a1;
  uint64_t v36 = a4;
  uint64_t v31 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v32 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v5);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t v15 = type metadata accessor for Subscribers.Completion(0LL, v13, *(void *)(v12 + 32), v14);
  uint64_t v29 = *(void *)(v15 - 8);
  uint64_t v30 = v15;
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Result();
  MEMORY[0x1895F8858](v22);
  uint64_t v24 = (char *)&v28 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v28 - v23, v34, v22);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v11, v24, v8);
    uint64_t v37 = v8;
    uint64_t v38 = v13;
    uint64_t v39 = a3;
    uint64_t v40 = v36;
    type metadata accessor for Result.Publisher.Inner();
  }

  uint64_t v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v24, v13);
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v26 + 40))( &static Subscriptions._EmptySubscription.singleton,  a3,  v26);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v18, v21, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0LL, 1LL, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 56))(v18, a3, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v13);
}

void type metadata accessor for Result.Publisher.Inner()
{
}

uint64_t *Result.Publisher.Inner.__allocating_init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  return Result.Publisher.Inner.init(downstream:output:)(a1, a2);
}

uint64_t Result.Publisher.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v0;
  uint64_t v8 = *(void *)(v1 + 80);
  getContiguousArrayStorageType<A>(for:)(v8, v8);
  uint64_t v9 = *(void *)(v8 - 8);
  swift_allocObject();
  swift_retain();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v0 + *(void *)(*v0 + 120), v8);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v15 = v10;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v7, 1LL, 1LL, v12);
  uint64_t v13 = type metadata accessor for Array();
  MEMORY[0x186E22960](MEMORY[0x189618488], v13);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Result.Publisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 1701015119LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t *Result.Publisher.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = (uint64_t)v2 + *(void *)(v4 + 112);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1LL, 1LL, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, a1, v5);
  v12((uint64_t)v9, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + 80) - 8LL) + 32LL))( (uint64_t)v2 + *(void *)(*v2 + 120),  v14);
  return v2;
}

uint64_t Result.Publisher.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56LL))( (char *)&v8 - v4,  1LL,  1LL,  v1);
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 112LL);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v6, v5, v2);
  return swift_endAccess();
}

uint64_t Result.Publisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(*v1 + 88);
  uint64_t v30 = *(void *)(*v1 + 104);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v29 = v5;
  uint64_t v8 = type metadata accessor for Subscribers.Completion(0LL, v5, AssociatedConformanceWitness, v7);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v26 = (char *)&v25 - v9;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1895F8858](v15);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 == 0x8000000000000000LL) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (!a1)
  {
LABEL_9:
    __break(1u);
    return result;
  }

uint64_t *Result.Publisher.Inner.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 120));
  return v0;
}

uint64_t Result.Publisher.Inner.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Subscription.request(_:) in conformance Result<A, B>.Publisher.Inner<A1>( uint64_t a1)
{
  return Result.Publisher.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Result<A, B>.Publisher.Inner<A1>()
{
  return 1701015119LL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Result<A, B>.Publisher.Inner<A1>()
{
  return Result.Publisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Result<A, B>.Publisher.Inner<A1>( void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Result<A, B>.Publisher.Inner<A1>()
{
  return Result.Publisher.Inner.cancel()();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Result<A, B>.Publisher( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Result.Publisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Result<A, B>.Publisher( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return static Result.Publisher<>.== infix(_:_:)( a1,  a2,  a3[2],  a3[3],  *(void *)(a4 - 8),  *(void *)(a4 - 16),  a3[4]);
}

uint64_t Result.Publisher<>.contains(_:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v19 = a1;
  uint64_t v20 = a4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = type metadata accessor for Result();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, v8);
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v18;
  uint64_t v24 = v7;
  uint64_t v25 = v19;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF( (void (*)(char *))partial apply for closure #1 in Result.Publisher<>.contains(_:),  v8,  (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  Result.publisher.getter(v12, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t partial apply for closure #1 in Result.Publisher<>.contains(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF@<X0>( void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8LL) + 32LL))( a3,  v12,  *(void *)(a2 + 24));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.Publisher<>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Result.Publisher.allSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.allSatisfy(_:)( a1,  a2,  a3,  (void (*)(char *))partial apply for closure #1 in Result.Publisher.allSatisfy(_:),  a4);
}

uint64_t Result.Publisher.tryAllSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryAllSatisfy(_:)( a1,  a2,  a3,  (void (*)(char *))partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:),  a4);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:)@<X0>(_BYTE *a1@<X8>)
{
  return partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  if (!v2) {
    *a1 = result & 1;
  }
  return result;
}

uint64_t Result.Publisher.collect()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v14 - v8;
  type metadata accessor for Array();
  uint64_t v10 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2, v6);
  uint64_t v16 = v3;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF( (void (*)(char *))partial apply for closure #1 in Result.Publisher.collect(),  v6,  (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  Result.publisher.getter(v10, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v12, v10);
}

uint64_t closure #1 in Result.Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  swift_allocObject();
  uint64_t v7 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t result = v7;
  _finalizeUninitializedArray<A>(_:)();
  *a3 = v7;
  return result;
}

uint64_t partial apply for closure #1 in Result.Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in Result.Publisher.collect()(a1, *(void *)(v2 + 16), a2);
}

uint64_t Result.Publisher.tryMin(by:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryMin(by:)( a1,  a2,  a3,  (void (*)(_BYTE *))partial apply for closure #1 in Result.Publisher.tryMin(by:),  a4);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryMin(by:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in Result.Publisher.tryMin(by:)(a1, a2);
}

{
  uint64_t v2;
  return closure #1 in Result.Publisher.tryMin(by:)( *(void *)(v2 + 40),  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 24),  a1,  a2);
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_willThrowTypedImpl();
}

uint64_t Result.Publisher.tryMax(by:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryMin(by:)( a1,  a2,  a3,  (void (*)(_BYTE *))partial apply for closure #1 in Result.Publisher.tryMin(by:),  a4);
}

uint64_t Result.Publisher.tryMin(by:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_BYTE *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = v5;
  uint64_t v18 = a5;
  uint64_t v11 = *(void *)(a3 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v17 - v14;
  uint64_t v19 = v11;
  __int128 v20 = *(_OWORD *)(a3 + 24);
  uint64_t v21 = v7;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC(a4, (uint64_t)&v17 - v14);
  Result.publisher.getter(v12, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t closure #1 in Result.Publisher.tryMin(by:)@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v26 = v15;
  uint64_t v16 = type metadata accessor for Result();
  MEMORY[0x1895F8858](v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v24 - v18, a1, v16);
  uint64_t v19 = v28;
  _ss6ResultOsRi_zrlE3getxyq_YKF(v16, (uint64_t)v14, a6);
  if (!v19) {
    return v25(a6, a6);
  }
  __int128 v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v20(v12, v14, a4);
  uint64_t v21 = swift_allocError();
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v20)(v22, v12, a4);
  *uint64_t v27 = v21;
  return result;
}

uint64_t Result.Publisher.contains(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.allSatisfy(_:)( a1,  a2,  a3,  (void (*)(char *))partial apply for closure #1 in Result.Publisher.allSatisfy(_:),  a4);
}

uint64_t Result.Publisher.allSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a2;
  __int128 v20 = a4;
  uint64_t v18 = a1;
  uint64_t v21 = a5;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v18;
  uint64_t v26 = v19;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF(v20, v9, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.allSatisfy(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result & 1;
  return result;
}

uint64_t Result.Publisher.tryContains(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryAllSatisfy(_:)( a1,  a2,  a3,  (void (*)(char *))partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:),  a4);
}

uint64_t Result.Publisher.tryAllSatisfy(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v9 = a3[2];
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - v14, v5, v12);
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  Result.tryMap<A>(_:)(v19, v12, MEMORY[0x1896184C8], &v25);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  char v17 = v26;
  *(void *)a5 = v25;
  *(_BYTE *)(a5 + 8) = v17;
  return result;
}

uint64_t Result.Publisher.count()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = type metadata accessor for Result();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2, v6);
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  uint64_t v19 = v5;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF( (void (*)(char *))partial apply for closure #1 in Optional.Publisher.count(),  v6,  (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  Result.publisher.getter(v10, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Result.Publisher.last()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Result.Publisher.ignoreOutput()@<X0>(_BYTE *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1LL, a1);
}

uint64_t Result.Publisher.map<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a5;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = a4;
  uint64_t v25 = v8;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF( (void (*)(char *))partial apply for closure #1 in Result.Publisher.map<A>(_:),  v9,  (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.map<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t Result.Publisher.tryMap<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a5;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v18 - v11;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (uint64_t *)((char *)&v18 - v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = a4;
  uint64_t v25 = v8;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  Result.tryMap<A>(_:)( (void (*)(char *))partial apply for closure #1 in Result.Publisher.tryMap<A>(_:),  v9,  a4,  v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryMap<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t Result.Publisher.mapError<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a6;
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  uint64_t v20 = a3[4];
  uint64_t v10 = type metadata accessor for Result();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = type metadata accessor for Result();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v21, v10);
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  uint64_t v27 = a4;
  uint64_t v28 = v20;
  uint64_t v29 = a5;
  uint64_t v30 = v22;
  uint64_t v31 = v23;
  _ss6ResultOsRi_zrlE8mapErroryAByxqd__Gqd__q_XEs0C0Rd__lF( (void (*)(char *))_ReferencedBasedAnySubscriber.playgroundDescription.getter,  v10,  (uint64_t)v17);
  Result.publisher.getter(v14, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t Result.Publisher.reduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Result.Publisher.reduce<A>(_:_:)( a1,  a2,  a3,  a4,  a5,  (void (*)(char *))partial apply for closure #1 in Result.Publisher.reduce<A>(_:_:),  a6);
}

uint64_t Result.Publisher.tryReduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  uint64_t v23 = a6;
  uint64_t v7 = a4[2];
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = type metadata accessor for Result();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v19 - v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v14 = type metadata accessor for Result();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (void *)((char *)v19 - v16);
  (*(void (**)(char *, void, uint64_t))(v11 + 16))(v13, v19[1], v10);
  uint64_t v24 = v7;
  uint64_t v25 = v8;
  uint64_t v26 = a5;
  uint64_t v27 = v9;
  uint64_t v28 = v20;
  uint64_t v29 = v22;
  uint64_t v30 = v21;
  Result.tryMap<A>(_:)( (void (*)(char *))partial apply for closure #1 in Result.Publisher.tryReduce<A>(_:_:),  v10,  a5,  v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Result.publisher.getter(v14, v23);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryReduce<A>(_:_:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 64), a1);
}

uint64_t Result.Publisher.removeDuplicates(by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Result.Publisher.tryRemoveDuplicates(by:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v18 - v11;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (uint64_t *)((char *)&v18 - v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v19;
  uint64_t v26 = v20;
  Result.tryMap<A>(_:)( (void (*)(char *))partial apply for closure #1 in Result.Publisher.tryRemoveDuplicates(by:),  v9,  v6,  v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryRemoveDuplicates(by:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(a1, a1);
  if (!v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a2, a1, v6);
  }
  return result;
}

uint64_t Result.Publisher.replaceError(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v17 - v13, v4, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a3, v10, v7);
    type metadata accessor for Result();
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  else
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v16(v10, v14, v7);
    v16(a3, v10, v7);
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }

uint64_t Result.Publisher.replaceEmpty(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t Result.Publisher.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2, a1);
}

uint64_t Result.Publisher.scan<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Result.Publisher.reduce<A>(_:_:)( a1,  a2,  a3,  a4,  a5,  (void (*)(char *))partial apply for closure #1 in Result.Publisher.reduce<A>(_:_:),  a6);
}

uint64_t Result.Publisher.reduce<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a6;
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v25 = a7;
  uint64_t v8 = a4[2];
  uint64_t v9 = a4[3];
  uint64_t v10 = a4[4];
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = type metadata accessor for Result();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v20, v11);
  uint64_t v26 = v8;
  uint64_t v27 = v9;
  uint64_t v28 = a5;
  uint64_t v29 = v10;
  uint64_t v30 = v21;
  uint64_t v31 = v23;
  uint64_t v32 = v22;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF(v24, v11, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  Result.publisher.getter(v15, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t partial apply for closure #1 in Result.Publisher.reduce<A>(_:_:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 64), a1);
}

uint64_t Result.Publisher.tryScan<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v20 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v19 - v15;
  __int128 v21 = *(_OWORD *)(a4 + 16);
  uint64_t v17 = *(void *)(a4 + 32);
  uint64_t v22 = a5;
  uint64_t v23 = v17;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v27 = v7;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC( (void (*)(_BYTE *))partial apply for closure #1 in Result.Publisher.tryScan<A>(_:_:),  (uint64_t)v16);
  Result.publisher.getter(v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t closure #1 in Result.Publisher.tryScan<A>(_:_:)@<X0>( void (*a1)(uint64_t, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t *a8)
{
  uint64_t v35 = a4;
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v30 = a7;
  uint64_t v10 = *(void *)(a6 - 8);
  uint64_t v11 = MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v34 = v16;
  uint64_t v17 = type metadata accessor for Result();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v30 - v19;
  uint64_t v21 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v20, v35, v17);
  uint64_t v25 = v36;
  _ss6ResultOsRi_zrlE3getxyq_YKF(v17, (uint64_t)v15, (uint64_t)v23);
  if (v25)
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v26(v13, v15, a6);
    uint64_t v27 = swift_allocError();
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v28, v13, a6);
    *a8 = v27;
  }

  else
  {
    v33(v31, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, a5);
  }

  return result;
}

uint64_t partial apply for closure #1 in Result.Publisher.tryScan<A>(_:_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Result.Publisher.tryScan<A>(_:_:)( *(void (**)(uint64_t, char *))(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 64),  *(void *)(v2 + 72),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2,  a1);
}

uint64_t Result.Publisher<>.setFailureType<A>(to:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  return Result.Publisher.init(catching:)( (uint64_t)partial apply for closure #1 in Result.Publisher<>.setFailureType<A>(to:),  (uint64_t)&v5,  v6,  a2,  a3,  a4);
}

uint64_t closure #1 in Result.Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Result();
  MEMORY[0x1895F8858](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - v6, a1, v4);
  return _ss6ResultOsRi_zrlE3getxyq_YKF(v4, v7, a2);
}

uint64_t partial apply for closure #1 in Result.Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Result.Publisher<>.setFailureType<A>(to:)(*(void *)(v1 + 40), a1);
}

uint64_t type metadata completion function for Result.Publisher()
{
  uint64_t result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Result.Publisher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X15 }
    }

    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }

  return v3;
}

uint64_t destroy for Result.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v2 - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  unsigned int v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1) {
      uint64_t v3 = *(void *)(v2 - 8);
    }
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    else {
      uint64_t v7 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B50DA0 + 4 * byte_183BA2DB5[v7]))();
  }

uint64_t initializeWithCopy for Result.Publisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithCopy for Result.Publisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }

  return a1;
}

uint64_t initializeWithTake for Result.Publisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v4 - 8);
  if (*(void *)(v6 + 64) <= *(void *)(v5 + 64)) {
    uint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v6 + 64);
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    else {
      uint64_t v9 = 4LL;
    }
    __asm { BR              X16 }
  }

  BOOL v10 = v8 == 1;
  if (v8 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t assignWithTake for Result.Publisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    unsigned int v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1) {
      uint64_t v12 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v12 = *(void *)(v5 - 8);
    }
    if (v10 == 1) {
      uint64_t v13 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 16);
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    unsigned int v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      else {
        uint64_t v15 = 4LL;
      }
      __asm { BR              X12 }
    }

    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = v8;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v14 == 1) {
      uint64_t v18 = v6;
    }
    else {
      uint64_t v18 = v5;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for Result.Publisher(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_183B5135C + 4 * byte_183BA2DD8[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for Result.Publisher(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    unsigned int v7 = 0u;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = 4u;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = 1u;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

uint64_t type metadata accessor for Result.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Result.Publisher);
}

uint64_t type metadata completion function for Result.Publisher.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t partial apply for closure #1 in Result.Publisher.init(catching:)(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t partial apply for closure #2 in Result.Publisher.init(catching:)()
{
  return closure #2 in Result.Publisher.init(catching:)();
}

uint64_t type metadata completion function for Publishers.Invoke1I1O.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Publishers.Invoke1I1O.Inner.init(downstream:invoke:target:));
}

void Publishers.Invoke1I1O.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x4931656B6F766E49LL;
  a1[1] = 0xEA00000000004F31LL;
}

uint64_t *Publishers.Invoke1I1O.Inner.init(downstream:invoke:target:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 160)) = 0LL;
  *((_BYTE *)v4 + *(void *)(*v4 + 16outlined consume of ConduitList<A, Never><A>(*(void *)v0, *(_BYTE *)(v0 + 8)) = 0;
  uint64_t v10 = (uint64_t)v4 + *(void *)(*v4 + 176);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v10 + outlined destroy of Subscription?(v0 + 32) = 0LL;
  uint64_t v11 = *(void *)(*v4 + 184);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *uint64_t v12 = 0;
  *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 104) - 8LL) + 32LL))( (uint64_t)v4 + *(void *)(*v4 + 136),  a1);
  uint64_t v13 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 144));
  void *v13 = a2;
  v13[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 88) - 8LL) + 32LL))( (uint64_t)v4 + *(void *)(*v4 + 152),  a4);
  return v4;
}

uint64_t *Publishers.Invoke1I1O.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 184)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 104) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 136));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 152));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 176));
  return v0;
}

uint64_t Publishers.Invoke1I1O.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.Invoke1I1O.Inner.deinit);
}

void type metadata accessor for Publishers.Invoke1I1O.Inner()
{
}

uint64_t type metadata completion function for Publishers.Invoke2I1O.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t Publishers.Invoke1I1O.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 176LL);
  uint64_t result = swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    outlined init with copy of Subscription(v3, (uint64_t)v7);
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }

  return result;
}

uint64_t Publishers.Invoke1I1O.Inner.cancel()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 176LL);
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    outlined init with copy of Subscription(v1, (uint64_t)&v5);
    uint64_t v3 = *((void *)&v6 + 1);
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }

  uint64_t v7 = 0LL;
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v5, v1);
  return swift_endAccess();
}

uint64_t Publishers.Invoke1I1O.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v12);
  uint64_t v5 = v13;
  outlined destroy of Subscription?((uint64_t)v12);
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v6);
  }

  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v12, v4);
    swift_endAccess();
    uint64_t v13 = v3;
    unsigned int v14 = &protocol witness table for Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>;
    v12[0] = v1;
    uint64_t v9 = *(void *)(v3 + 128);
    uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 104);
    swift_retain();
    v10(v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }

void Publishers.Invoke1I1O.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 184LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + v4));
  uint64_t v5 = *(void *)(*(void *)v2 + 160LL);
  uint64_t v6 = *(void *)(v2 + v5);
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v1, *(void *)(v10 - 144), v5) = v8;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v4));
    uint64_t v9 = (void (*)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(uint64_t (**)(uint64_t))(v2 + *(void *)(*(void *)v2 + 144LL)))( v2 + *(void *)(*(void *)v2 + 152LL));
    swift_retain();
    v9(a1, partial apply for closure #1 in Publishers.Invoke1I1O.Inner.receive(_:), v2);
    swift_release();
    swift_release();
  }

void closure #1 in Publishers.Invoke1I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v54 = a2;
  uint64_t v55 = a1;
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*a3 + 128);
  uint64_t v6 = *(void *)(*a3 + 112);
  uint64_t v56 = *(void *)(*a3 + 104);
  uint64_t v57 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, v6, AssociatedConformanceWitness, v8);
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v49 = (char *)&v48 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  unsigned int v14 = (char *)&v48 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v48 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v4 + 96);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v55, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1LL, v17) == 1)
  {
    uint64_t v27 = v56;
    uint64_t v26 = v57;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    uint64_t v29 = v52;
    uint64_t v28 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v14, v54, v53);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1LL, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
      return;
    }

    uint64_t v42 = v48;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v48, v14, v6);
    uint64_t v43 = v49;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v49, v42, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v43, 0LL, 1LL, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 56))(v43, v27, v26);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v40 = v42;
    uint64_t v41 = v6;
    goto LABEL_10;
  }

  uint64_t v54 = v15;
  uint64_t v55 = v23;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v22, v17);
  uint64_t v30 = v56;
  uint64_t v31 = v57;
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48))(v25, v56, v57);
  uint64_t v33 = *(void *)(*a3 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)a3 + v33));
  uint64_t v34 = *(void *)(*a3 + 160);
  uint64_t v35 = *(uint64_t *)((char *)a3 + v34);
  BOOL v36 = __OFSUB__(v35, 1LL);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
    goto LABEL_20;
  }

  *(uint64_t *)((char *)a3 + v34) = v37;
  if (*((_BYTE *)a3 + *(void *)(*a3 + 168)) == 1 && !v37)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v33));
    uint64_t v38 = v49;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v49, 1LL, 1LL, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 56))(v38, v30, v31);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v51);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v55 + 8);
LABEL_8:
    uint64_t v40 = v25;
    uint64_t v41 = v17;
LABEL_10:
    v39(v40, v41);
    return;
  }

  uint64_t v44 = v55;
  if (v32 != 0x8000000000000000LL)
  {
    if ((v32 & 0x8000000000000000LL) == 0)
    {
      if (!v32)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v33));
        uint64_t v39 = *(void (**)(char *, uint64_t))(v44 + 8);
        goto LABEL_8;
      }

      goto LABEL_15;
    }

LABEL_15:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v33));
  uint64_t v45 = (uint64_t)a3 + *(void *)(*a3 + 176);
  swift_beginAccess();
  if (*(void *)(v45 + 24))
  {
    outlined init with copy of Subscription(v45, (uint64_t)v58);
    swift_endAccess();
    uint64_t v46 = v59;
    uint64_t v47 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 24))(v32, v46, v47);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v17);
    swift_endAccess();
  }

  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v33));
  uint64_t v45 = (uint64_t)a3 + *(void *)(*a3 + 192);
  swift_beginAccess();
  if (*(void *)(v45 + 24))
  {
    outlined init with copy of Subscription(v45, (uint64_t)v58);
    swift_endAccess();
    uint64_t v46 = v59;
    uint64_t v47 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 24))(v32, v46, v47);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v17);
    swift_endAccess();
  }

void Publishers.Invoke1I1O.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  *((_BYTE *)v1 + *(void *)(*v1 + 16outlined consume of ConduitList<A, Never><A>(*(void *)v0, *(_BYTE *)(v0 + 8)) = 1;
  uint64_t v5 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  if (!v5) {
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 128) + 56LL))(a1, *(void *)(v3 + 104));
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>( void *a1)
{
  return Publishers.Invoke1I1O.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>( uint64_t a1)
{
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>( uint64_t a1)
{
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>( uint64_t a1)
{
  return Publishers.Invoke1I1O.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>()
{
  return 0x4931656B6F766E49LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>( void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>()
{
  return Publishers.Invoke1I1O.Inner.cancel()();
}

uint64_t Publishers.Invoke2I1O.Inner.__allocating_init(downstream:invoke:target:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Publishers.Invoke2I1O.Inner.init(downstream:invoke:target:));
}

uint64_t Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a5(a1, a2, a3, a4);
}

void Publishers.Invoke2I1O.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x4932656B6F766E49LL;
  a1[1] = 0xEA00000000004F31LL;
}

uint64_t *Publishers.Invoke2I1O.Inner.init(downstream:invoke:target:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 176)) = 0LL;
  *((_BYTE *)v4 + *(void *)(*v4 + 184)) = 0;
  uint64_t v10 = (uint64_t)v4 + *(void *)(*v4 + 192);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v10 + outlined destroy of Subscription?(v0 + 32) = 0LL;
  uint64_t v11 = *(void *)(*v4 + 200);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *uint64_t v12 = 0;
  *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 120) - 8LL) + 32LL))( (uint64_t)v4 + *(void *)(*v4 + 152),  a1);
  uint64_t v13 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 160));
  void *v13 = a2;
  v13[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 88) - 8LL) + 32LL))( (uint64_t)v4 + *(void *)(*v4 + 168),  a4);
  return v4;
}

uint64_t *Publishers.Invoke2I1O.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 200)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 120) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 152));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 168));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 192));
  return v0;
}

uint64_t Publishers.Invoke2I1O.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.Invoke2I1O.Inner.deinit);
}

void type metadata accessor for Publishers.Invoke2I1O.Inner()
{
}

uint64_t Publishers.Invoke2I1O.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 192LL);
  uint64_t result = swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    outlined init with copy of Subscription(v3, (uint64_t)v7);
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }

  return result;
}

uint64_t Publishers.Invoke2I1O.Inner.cancel()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 192LL);
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    outlined init with copy of Subscription(v1, (uint64_t)&v5);
    uint64_t v3 = *((void *)&v6 + 1);
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }

  uint64_t v7 = 0LL;
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v5, v1);
  return swift_endAccess();
}

uint64_t Publishers.Invoke2I1O.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 192);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v12);
  uint64_t v5 = v13;
  outlined destroy of Subscription?((uint64_t)v12);
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v6);
  }

  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v12, v4);
    swift_endAccess();
    uint64_t v13 = v3;
    unsigned int v14 = &protocol witness table for Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>;
    v12[0] = v1;
    uint64_t v9 = *(void *)(v3 + 144);
    uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 120);
    swift_retain();
    v10(v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }

void Publishers.Invoke2I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(*(void *)v3 + 96LL);
  uint64_t v7 = *(void *)(*(void *)v3 + 104LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v19 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))((char *)&v19 - v10, a1, v6);
  uint64_t v12 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v12, a2, v7);
  uint64_t v13 = *(void *)(*(void *)v3 + 200LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + v13));
  uint64_t v14 = *(void *)(*(void *)v3 + 176LL);
  uint64_t v15 = *(void *)(v3 + v14);
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + v14) = v17;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v13));
    uint64_t v18 = (void (*)(char *, char *, void (*)(uint64_t, uint64_t), uint64_t))(*(uint64_t (**)(uint64_t))(v3 + *(void *)(*(void *)v3 + 160LL)))( v3 + *(void *)(*(void *)v3 + 168LL));
    swift_retain();
    v18(v11, v12, partial apply for closure #1 in Publishers.Invoke2I1O.Inner.receive(_:), v3);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
  }

void closure #1 in Publishers.Invoke2I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v54 = a2;
  uint64_t v55 = a1;
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*a3 + 144);
  uint64_t v6 = *(void *)(*a3 + 128);
  uint64_t v56 = *(void *)(*a3 + 120);
  uint64_t v57 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, v6, AssociatedConformanceWitness, v8);
  uint64_t v50 = *(void *)(v9 - 8);
  uint64_t v51 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v49 = (char *)&v48 - v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v48 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(v4 + 112);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v55, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1LL, v17) == 1)
  {
    uint64_t v27 = v56;
    uint64_t v26 = v57;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    uint64_t v29 = v52;
    uint64_t v28 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v14, v54, v53);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1LL, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
      return;
    }

    uint64_t v42 = v48;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v48, v14, v6);
    uint64_t v43 = v49;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v49, v42, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v43, 0LL, 1LL, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 56))(v43, v27, v26);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v40 = v42;
    uint64_t v41 = v6;
    goto LABEL_10;
  }

  uint64_t v54 = v15;
  uint64_t v55 = v23;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v22, v17);
  uint64_t v30 = v56;
  uint64_t v31 = v57;
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48))(v25, v56, v57);
  uint64_t v33 = *(void *)(*a3 + 200);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)a3 + v33));
  uint64_t v34 = *(void *)(*a3 + 176);
  uint64_t v35 = *(uint64_t *)((char *)a3 + v34);
  BOOL v36 = __OFSUB__(v35, 1LL);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
    goto LABEL_20;
  }

  *(uint64_t *)((char *)a3 + v34) = v37;
  if (*((_BYTE *)a3 + *(void *)(*a3 + 184)) == 1 && !v37)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v33));
    uint64_t v38 = v49;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v49, 1LL, 1LL, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 56))(v38, v30, v31);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v51);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v55 + 8);
LABEL_8:
    uint64_t v40 = v25;
    uint64_t v41 = v17;
LABEL_10:
    v39(v40, v41);
    return;
  }

  uint64_t v44 = v55;
  if (v32 != 0x8000000000000000LL)
  {
    if ((v32 & 0x8000000000000000LL) == 0)
    {
      if (!v32)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v33));
        uint64_t v39 = *(void (**)(char *, uint64_t))(v44 + 8);
        goto LABEL_8;
      }

      goto LABEL_15;
    }

void Publishers.Invoke2I1O.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 200);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  *((_BYTE *)v1 + *(void *)(*v1 + 184)) = 1;
  uint64_t v5 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 176));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  if (!v5) {
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 144) + 56LL))(a1, *(void *)(v3 + 120));
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>( void *a1)
{
  return Publishers.Invoke2I1O.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>( uint64_t a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  Publishers.Invoke2I1O.Inner.receive(_:)(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>( uint64_t a1)
{
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>( uint64_t a1)
{
  return Publishers.Invoke2I1O.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>()
{
  return 0x4932656B6F766E49LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>( void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>()
{
  return Publishers.Invoke2I1O.Inner.cancel()();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>()
{
  return swift_getAssociatedConformanceWitness();
}

void partial apply for closure #1 in Publishers.Invoke1I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
}

void partial apply for closure #1 in Publishers.Invoke2I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata completion function for PartialCompletion()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PartialCompletion(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      else {
        uint64_t v12 = 4LL;
      }
      __asm { BR              X16 }
    }

    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(__dst);
      *((_BYTE *)v3 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 1;
    }

    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
    }
  }

  else
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }

  return v3;
}

uint64_t destroy for PartialCompletion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v2 - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  if (*(unsigned __int8 *)(a1 + v4) < 2u)
  {
    if (*(_BYTE *)(a1 + v4)) {
      uint64_t v3 = *(void *)(v2 - 8);
    }
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    else {
      uint64_t v6 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B53078 + 4 * byte_183BA3185[v6]))();
  }

_BYTE *initializeWithCopy for PartialCompletion(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    else {
      uint64_t v8 = 4LL;
    }
    __asm { BR              X15 }
  }

  if (v7 == 1)
  {
    (*(void (**)(_BYTE *))(v5 + 16))(__dst);
    __dst[v6] = 1;
  }

  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v6] = 0;
  }

  return __dst;
}

unsigned __int8 *assignWithCopy for PartialCompletion( unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    if (__dst[v9] >= 2u)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X12 }
    }

    uint64_t v11 = *(void *)(v5 - 8);
    uint64_t v12 = *(void *)(a3 + 16);
    if (__dst[v9])
    {
      uint64_t v11 = *(void *)(v6 - 8);
      uint64_t v12 = *(void *)(a3 + 24);
    }

    (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(__dst, v12);
    unsigned int v13 = __src[v9];
    if (v13 >= 2)
    {
      else {
        uint64_t v14 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(__dst, __src, v6);
      __dst[v9] = 1;
    }

    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(__dst, __src, v5);
      __dst[v9] = 0;
    }
  }

  return __dst;
}

_BYTE *initializeWithTake for PartialCompletion(_BYTE *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  unsigned int v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    else {
      uint64_t v8 = 4LL;
    }
    __asm { BR              X15 }
  }

  if (v7 == 1)
  {
    (*(void (**)(_BYTE *))(v5 + 32))(__dst);
    __dst[v6] = 1;
  }

  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v6] = 0;
  }

  return __dst;
}

unsigned __int8 *assignWithTake for PartialCompletion( unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v9 = *(void *)(v8 + 64);
    }
    if (__dst[v9] >= 2u)
    {
      else {
        uint64_t v10 = 4LL;
      }
      __asm { BR              X12 }
    }

    uint64_t v11 = *(void *)(v5 - 8);
    uint64_t v12 = *(void *)(a3 + 16);
    if (__dst[v9])
    {
      uint64_t v11 = *(void *)(v6 - 8);
      uint64_t v12 = *(void *)(a3 + 24);
    }

    (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(__dst, v12);
    unsigned int v13 = __src[v9];
    if (v13 >= 2)
    {
      else {
        uint64_t v14 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(__dst, __src, v6);
      __dst[v9] = 1;
    }

    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v5);
      __dst[v9] = 0;
    }
  }

  return __dst;
}

uint64_t getEnumTagSinglePayload for PartialCompletion(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_21;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 254);
  }
  return ((uint64_t (*)(void))((char *)&loc_183B53718 + 4 * byte_183BA31A8[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for PartialCompletion( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8LL) + 64LL);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    unsigned int v7 = 0u;
  }

  else if (v6 <= 3)
  {
    unsigned int v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      unsigned int v7 = 4u;
    }

    else if (v9 >= 0x100)
    {
      unsigned int v7 = 2;
    }

    else
    {
      unsigned int v7 = v9 > 1;
    }
  }

  else
  {
    unsigned int v7 = 1u;
  }

  if (a2 <= 0xFD) {
    __asm { BR              X11 }
  }

  unsigned int v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }

      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }

  __asm { BR              X10 }

uint64_t getEnumTag for PartialCompletion(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B5395C + 4 * byte_183BA31B6[v3]))();
}

void destructiveInjectEnumTag for PartialCompletion(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL)
                                                                                + 64LL))
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 64LL);
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }

      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }

      else
      {
        *a1 = v7;
      }
    }

    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }

  else
  {
    a1[v4] = a2;
  }

uint64_t type metadata accessor for PartialCompletion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PartialCompletion);
}

uint64_t Publisher.scan<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.Scan, a7);
}

uint64_t Publishers.Scan.init(upstream:initialResult:nextPartialResult:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  type metadata accessor for Publishers.Scan,  a8);
}

uint64_t type metadata accessor for Publishers.Scan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Scan);
}

uint64_t Publisher.tryScan<A>(_:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, type metadata accessor for Publishers.TryScan, a7);
}

uint64_t Publishers.TryScan.init(upstream:initialResult:nextPartialResult:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  type metadata accessor for Publishers.TryScan,  a8);
}

uint64_t type metadata accessor for Publishers.TryScan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.TryScan);
}

uint64_t Publishers.Scan.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.Scan.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  MEMORY[0x1895F8858](v1);
  type metadata accessor for Publishers.Scan.Inner();
}

uint64_t sub_183B53B8C(uint64_t a1)
{
  uint64_t v12 = *(int *)(v5 + 44);
  uint64_t v13 = *(void *)(v10 - 128);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v5 + 48));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v13 + v12, v7);
  *(void *)(v10 - 120) = Publishers.Scan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)( v9,  v15,  v16,  v8);
  swift_retain();
  uint64_t v17 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Scan<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 120, v4, a1, v3, v17);
  return swift_release();
}

void type metadata accessor for Publishers.Scan.Inner()
{
}

uint64_t Publishers.Scan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = *(void *)v8;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v8 + 96LL) - 8LL) + 32LL))( v8 + *(void *)(*(void *)v8 + 120LL),  a1);
  uint64_t v10 = (void *)(v8 + *(void *)(*(void *)v8 + 128LL));
  *uint64_t v10 = a2;
  v10[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 88) - 8LL) + 32LL))( v8 + *(void *)(*(void *)v8 + 136LL),  a4);
  return v8;
}

uint64_t Publishers.Scan.Inner.customMirror.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v2);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9DB50;
  *(void *)(v8 + outlined destroy of Subscription?(v0 + 32) = 0x657274736E776F64LL;
  *(void *)(v8 + 40) = 0xEA00000000006D61LL;
  uint64_t v9 = v0 + v1[15];
  uint64_t v10 = v1[12];
  *(void *)(v8 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))( boxed_opaque_existential_1,  v9,  v10);
  *(void *)(v8 + 80) = 0x746C75736572LL;
  *(void *)(v8 + 88) = 0xE600000000000000LL;
  uint64_t v12 = v0 + *(void *)(*(void *)v0 + 136LL);
  swift_beginAccess();
  uint64_t v13 = v1[11];
  *(void *)(v8 + 120) = v13;
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v14, v12, v13);
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v7, 1LL, 1LL, v15);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Scan.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 1851876179LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t Publishers.Scan.Inner.receive(subscription:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 112LL) + 40LL))( a1,  *(void *)(*(void *)v1 + 96LL));
}

uint64_t Publishers.Scan.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + v2[16]);
  uint64_t v11 = v1 + v2[17];
  swift_beginAccess();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v7, v11, v3);
  v10(v7, v17);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v11, v9, v3);
  swift_endAccess();
  v12(v9, v11, v3);
  uint64_t v14 = (*(uint64_t (**)(char *, void))(v2[14] + 48LL))(v9, v2[12]);
  v13(v9, v3);
  return v14;
}

uint64_t Publishers.Scan.Inner.receive(completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 112LL) + 56LL))( a1,  *(void *)(*(void *)v1 + 96LL));
}

uint64_t *Publishers.Scan.Inner.deinit()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 96) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 120));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t Publishers.Scan.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.Scan.Inner.deinit);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Scan<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.Scan.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Scan<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.Scan.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Scan<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.Scan.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Scan<A, B>.Inner<A1>()
{
  return 1851876179LL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Scan<A, B>.Inner<A1>()
{
  return Publishers.Scan.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Scan<A, B>.Inner<A1>( void *a1@<X8>)
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Scan<A, B>( uint64_t a1)
{
}

void Publishers.TryScan.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  MEMORY[0x1895F8858](v1);
  type metadata accessor for Publishers.TryScan.Inner();
}

uint64_t sub_183B5429C(uint64_t a1)
{
  uint64_t v12 = *(int *)(v6 + 44);
  uint64_t v13 = (uint64_t *)(v1 + *(int *)(v6 + 48));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, v1 + v12, v8);
  swift_allocObject();
  swift_retain();
  *(void *)(v10 - 120) = Publishers.TryScan.Inner.init(downstream:nextPartialResult:initialResult:)(v9, v14, v15, v2);
  uint64_t v16 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.TryScan<A, B>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 120, v4, a1, *(void *)(v10 - 128), v16);
  return swift_release();
}

void type metadata accessor for Publishers.TryScan.Inner()
{
}

uint64_t *Publishers.TryScan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryScan.Inner.init(downstream:nextPartialResult:initialResult:)(a1, a2, a3, a4);
}

uint64_t Publishers.TryScan.Inner.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9EBF0;
  *(void *)(v9 + outlined destroy of Subscription?(v0 + 32) = 0x657274736E776F64LL;
  *(void *)(v9 + 40) = 0xEA00000000006D61LL;
  uint64_t v10 = (char *)v0 + v2[15];
  uint64_t v11 = v2[12];
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))( boxed_opaque_existential_1,  v10,  v11);
  *(void *)(v9 + 80) = 0x737574617473LL;
  *(void *)(v9 + 88) = 0xE600000000000000LL;
  uint64_t v13 = (uint64_t)v1 + *(void *)(*v1 + 144LL);
  swift_beginAccess();
  *(void *)(v9 + 120) = &type metadata for SubscriptionStatus;
  uint64_t v14 = swift_allocObject();
  *(void *)(v9 + 96) = v14;
  outlined init with copy of SubscriptionStatus(v13, v14 + 16);
  *(void *)(v9 + 128) = 0x746C75736572LL;
  *(void *)(v9 + 136) = 0xE600000000000000LL;
  uint64_t v15 = (char *)v1 + *(void *)(*v1 + 136LL);
  swift_beginAccess();
  uint64_t v16 = v2[11];
  *(void *)(v9 + 168) = v16;
  uint64_t v17 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 144));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v17, v15, v16);
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v8, 1LL, 1LL, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.TryScan.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x6E616353797254LL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t *Publishers.TryScan.Inner.init(downstream:nextPartialResult:initialResult:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (uint64_t)v4 + *(void *)(*v4 + 144);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v10 + outlined destroy of Subscription?(v0 + 32) = 0LL;
  *(_BYTE *)(v10 + 40) = 2;
  uint64_t v11 = *(void *)(*v4 + 152);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *uint64_t v12 = 0;
  *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
  *((_BYTE *)v4 + *(void *)(*v4 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 96) - 8LL) + 32LL))( (uint64_t)v4 + *(void *)(*v4 + 120),  a1);
  uint64_t v13 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 128));
  void *v13 = a2;
  v13[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 88) - 8LL) + 32LL))( (uint64_t)v4 + *(void *)(*v4 + 136),  a4);
  return v4;
}

uint64_t *Publishers.TryScan.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 120));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 136));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 144));
  return v0;
}

uint64_t Publishers.TryScan.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((void (*)(void))Publishers.TryScan.Inner.deinit);
}

uint64_t Publishers.TryScan.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.TryScan<A, B>.Inner<A1>;
    uint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 112);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v8);
  }

uint64_t Publishers.TryScan.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v20 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v19 - v9;
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t))(v1 + v3[16]);
  uint64_t v14 = v1 + v3[17];
  swift_beginAccess();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, v14, v4);
  v13(v10, a1);
  int8x16_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v14, v12, v4);
  swift_endAccess();
  char v16 = v20;
  v19(v20, v14, v4);
  uint64_t v17 = (*(uint64_t (**)(char *, void))(v3[14] + 48LL))(v16, v3[12]);
  v15(v16, v4);
  return v17;
}

void Publishers.TryScan.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v17 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = v2[19];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v12));
  uint64_t v13 = v1 + *(void *)(*(void *)v1 + 144LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v13, (uint64_t)v20);
  LODWORD(v13) = v21;
  outlined destroy of SubscriptionStatus((uint64_t)v20);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v12));
  if (!(_DWORD)v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v18, v8);
    uint64_t v14 = v19;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1LL, AssociatedTypeWitness) == 1)
    {
      v20[0] = 0LL;
      (*(void (**)(void *, void))(v2[14] + 56LL))(v20, v2[12]);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v5, v11, AssociatedTypeWitness);
      uint64_t v15 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v16, v5, AssociatedTypeWitness);
      v20[0] = v15;
      (*(void (**)(void *, void))(v2[14] + 56LL))(v20, v2[12]);
      MEMORY[0x186E22870](v15);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v5, AssociatedTypeWitness);
    }
  }

void Publishers.TryScan.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 144LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }

  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

void Publishers.TryScan.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 144LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v5, (uint64_t)v9);
    uint64_t v5 = 1LL;
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8LL))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryScan<A, B>.Inner<A1>( void *a1)
{
  return Publishers.TryScan.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryScan<A, B>.Inner<A1>( uint64_t a1)
{
  return Publishers.TryScan.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryScan<A, B>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryScan<A, B>.Inner<A1>( uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.TryScan<A, B>.Inner<A1>()
{
  return 0x6E616353797254LL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.TryScan<A, B>.Inner<A1>()
{
  return Publishers.TryScan.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryScan<A, B>.Inner<A1>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryScan<A, B>.Inner<A1>()
{
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryScan<A, B>( uint64_t a1)
{
}

uint64_t type metadata completion function for Publishers.Scan.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Scan(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v5 + 64) + v10;
  uint64_t v12 = *(void *)(v7 + 64) + 7LL;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }

    else
    {
      uint64_t v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }

      else
      {
        unint64_t v18 = *(void *)((v12 + v17) & 0xFFFFFFFFFFFFF8LL);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }

  else
  {
    if (((((v12 + (v11 & ~v10)) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a2 - v9 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B5522C + 4 * byte_183BA31F8[v15]))();
  }

void storeEnumTagSinglePayload for Publishers.Scan( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_19;
    }
  }

  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v9 = a3 - v7 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_19:
    }
      __asm { BR              X0 }
  }

  if (((*(_DWORD *)(v6 + 64) + 7 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + 7LL + ((*(void *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183B553F0()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B55480LL);
}

void sub_183B553F8(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B55400LL);
  }
  JUMPOUT(0x183B55480LL);
}

void sub_183B55444()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B55480LL);
}

void sub_183B5544C()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B55480LL);
}

uint64_t sub_183B55454(uint64_t a1, int a2, int a3)
{
  *(_WORD *)(v12 + v13) = 0;
  if (!a2) {
    JUMPOUT(0x183B55480LL);
  }
  if (v6 == v9)
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    uint64_t v4 = v12;
  }

  else
  {
    uint64_t v4 = (v11 + v12) & v7;
    if (a3 != v9) {
      JUMPOUT(0x183B55460LL);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }

  return v3(v4);
}

uint64_t type metadata completion function for Publishers.TryScan.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_183B55554()
{
  return swift_deallocObject();
}

void ImmediateScheduler.SchedulerTimeType.distance(to:)(void *a1@<X8>)
{
  *a1 = 0LL;
}

Combine::ImmediateScheduler::SchedulerTimeType::Stride __swiftcall ImmediateScheduler.SchedulerTimeType.Stride.init(integerLiteral:)( Combine::ImmediateScheduler::SchedulerTimeType::Stride integerLiteral)
{
  v1->magnitude = integerLiteral.magnitude;
  return integerLiteral;
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.magnitude.getter()
{
  return *(void *)v0;
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.magnitude.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*ImmediateScheduler.SchedulerTimeType.Stride.magnitude.modify())()
{
  return specialized closure #1 in Publisher.multicast<A>(subject:);
}

Combine::ImmediateScheduler::SchedulerTimeType::Stride __swiftcall ImmediateScheduler.SchedulerTimeType.Stride.init(floatLiteral:)( Swift::Double floatLiteral)
{
  if ((~*(void *)&floatLiteral & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (floatLiteral <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (floatLiteral < 9.22337204e18)
  {
    *unint64_t v1 = (uint64_t)floatLiteral;
    return result;
  }

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = a4;
  uint64_t v67 = *(void *)(*(void *)(a3 + 24) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v9 = (char *)&v64 - v8;
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v65 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  unsigned int v14 = (char *)&v64 - v13;
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v70 = (char *)&v64 - v16;
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  uint64_t v69 = (char *)&v64 - v18;
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  __int128 v68 = (char *)&v64 - v20;
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  uint64_t v23 = (char *)&v64 - v22;
  uint64_t v24 = MEMORY[0x1895F8858](v21);
  uint64_t v26 = (char *)&v64 - v25;
  MEMORY[0x1895F8858](v24);
  uint64_t v28 = (char *)&v64 - v27;
  uint64_t v73 = v29;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v71 = a1;
  v30((char *)&v64 - v27, a1, a2);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v30(v26, (uint64_t)v28, a2);
  uint64_t v66 = v14;
  BOOL v31 = (a1 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v73 + 8);
  v32(v26, a2);
  v30(v23, (uint64_t)v28, a2);
  if (!v31)
  {
    v32(v23, a2);
    uint64_t v34 = v70;
    goto LABEL_10;
  }

  int64_t v75 = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v34 = v70;
    if (v33 >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v35 = v68;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v36 = dispatch thunk of static Comparable.< infix(_:_:)();
      v32(v35, a2);
      v32(v23, a2);
      if ((v36 & 1) != 0) {
        goto LABEL_36;
      }
      goto LABEL_10;
    }

LABEL_36:
    uint64_t v52 = 0LL;
    char v53 = 1;
    uint64_t v40 = v71;
    uint64_t v39 = v72;
    goto LABEL_37;
  }

  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v50 = v68;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v51 = dispatch thunk of static Comparable.< infix(_:_:)();
  v32(v50, a2);
  v32(v23, a2);
  uint64_t v34 = v70;
  if ((v51 & 1) != 0) {
    goto LABEL_36;
  }
LABEL_10:
  uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v38 = v69;
  v30(v69, (uint64_t)v28, a2);
  if (v37 < 65)
  {
    uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v32(v38, a2);
    if (v41 != 64)
    {
      v30(v34, (uint64_t)v28, a2);
      uint64_t v40 = v71;
      uint64_t v39 = v72;
      goto LABEL_24;
    }

    char v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v30(v34, (uint64_t)v28, a2);
    uint64_t v40 = v71;
    uint64_t v39 = v72;
    if ((v42 & 1) != 0)
    {
LABEL_24:
      v32(v34, a2);
      goto LABEL_25;
    }
  }

  else
  {
    v32(v38, a2);
    v30(v34, (uint64_t)v28, a2);
    uint64_t v40 = v71;
    uint64_t v39 = v72;
  }

  int64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
  char v43 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v43 & 1) != 0)
  {
    if (v44 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v45 = v68;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v46 = dispatch thunk of static Comparable.< infix(_:_:)();
      v32(v45, a2);
      uint64_t v47 = v34;
      goto LABEL_31;
    }

    goto LABEL_22;
  }

  if (v44 <= 63)
  {
LABEL_22:
    dispatch thunk of BinaryInteger._lowWord.getter();
    goto LABEL_24;
  }

  uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v55 = v68;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v68, v34, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v56 = v66;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v46 = dispatch thunk of static Comparable.< infix(_:_:)();
  v32(v56, a2);
  uint64_t v47 = v55;
LABEL_31:
  v32(v47, a2);
  if ((v46 & 1) != 0)
  {
    uint64_t v52 = 0LL;
    char v53 = 1;
    goto LABEL_37;
  }

BOOL static ImmediateScheduler.SchedulerTimeType.Stride.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t *static ImmediateScheduler.SchedulerTimeType.Stride.* infix(_:_:)@<X0>( uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *result * *a2;
  else {
    __break(1u);
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.+ infix(_:_:)@<X0>( void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.- infix(_:_:)@<X0>( void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result - *a2;
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.-= infix(_:_:)(void *result, void *a2)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result -= *a2;
  }
  return result;
}

uint64_t *static ImmediateScheduler.SchedulerTimeType.Stride.*= infix(_:_:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result * *a2;
  else {
    __break(1u);
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.+= infix(_:_:)(void *result, void *a2)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void static ImmediateScheduler.SchedulerTimeType.Stride.seconds(_:)(void *a1@<X8>)
{
  *a1 = 0LL;
}

void static ImmediateScheduler.SchedulerTimeType.Stride.nanoseconds(_:)(void *a1@<X8>)
{
  *a1 = 0LL;
}

BOOL static ImmediateScheduler.SchedulerTimeType.Stride.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  return 0x647574696E67616DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x647574696E67616DLL && a2 == 0xE900000000000065LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys,  &unk_189D29AC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys,  &unk_189D29AC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys,  &unk_189D29AC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys,  &unk_189D29AC8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

double *protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>( double *result@<X0>, void *a2@<X8>)
{
  double v2 = *result;
  if ((~*(void *)result & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v2 < 9.22337204e18)
  {
    *a2 = (uint64_t)v2;
    return result;
  }

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( void *a1, void *a2)
{
  return *a2 < *a1;
}

void *protocol witness for static SignedNumeric.- prefix(_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(0LL, *result)) {
    __break(1u);
  }
  else {
    *a2 = -*result;
  }
  return result;
}

void protocol witness for SignedNumeric.negate() in conformance ImmediateScheduler.SchedulerTimeType.Stride()
{
  if (__OFSUB__(0LL, *v0)) {
    __break(1u);
  }
  else {
    *uint64_t v0 = -*v0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ImmediateScheduler.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t *protocol witness for static Numeric.* infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>( uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *result * *a2;
  else {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for static Numeric.*= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result * *a2;
  else {
    __break(1u);
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>( void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( void *result, void *a2)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>( void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result - *a2;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride( void *result, void *a2)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result -= *a2;
  }
  return result;
}

void *protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t ImmediateScheduler.schedule(options:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void ImmediateScheduler.minimumTolerance.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t ImmediateScheduler.schedule(after:tolerance:options:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t ImmediateScheduler.schedule(after:interval:tolerance:options:_:)@<X0>( void (*a1)(void)@<X4>, uint64_t *a2@<X8>)
{
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  uint64_t v3 = qword_18C44B428;
  uint64_t v4 = unk_18C44B430;
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(static Subscriptions._EmptySubscription.singleton, qword_18C44B428);
  a2[3] = v3;
  a2[4] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))( boxed_opaque_existential_1,  v5,  v3);
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x1896185B0];
}

unint64_t lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride()
{
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride,  &type metadata for ImmediateScheduler.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride,  &type metadata for ImmediateScheduler.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride,  &type metadata for ImmediateScheduler.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride,  &type metadata for ImmediateScheduler.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride,  &type metadata for ImmediateScheduler.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType.Stride,  &type metadata for ImmediateScheduler.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }

  return result;
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Comparable in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x189618758];
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Numeric in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x189618778];
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x1896187A8];
}

unint64_t lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType()
{
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType,  &type metadata for ImmediateScheduler.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType,  &type metadata for ImmediateScheduler.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E22960]( &protocol conformance descriptor for ImmediateScheduler.SchedulerTimeType,  &type metadata for ImmediateScheduler.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType);
  }

  return result;
}

_UNKNOWN **associated type witness table accessor for Scheduler.SchedulerTimeType.Strideable.Stride : SchedulerTimeIntervalConvertible in ImmediateScheduler()
{
  return &protocol witness table for ImmediateScheduler.SchedulerTimeType.Stride;
}

uint64_t protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance ImmediateScheduler( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance ImmediateScheduler@<X0>( void (*a1)(void)@<X4>, uint64_t *a2@<X8>)
{
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  uint64_t v3 = qword_18C44B428;
  uint64_t v4 = unk_18C44B430;
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(static Subscriptions._EmptySubscription.singleton, qword_18C44B428);
  a2[3] = v3;
  a2[4] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))( boxed_opaque_existential_1,  v5,  v3);
}

ValueMetadata *type metadata accessor for ImmediateScheduler()
{
  return &type metadata for ImmediateScheduler;
}

ValueMetadata *type metadata accessor for ImmediateScheduler.SchedulerTimeType()
{
  return &type metadata for ImmediateScheduler.SchedulerTimeType;
}

ValueMetadata *type metadata accessor for ImmediateScheduler.SchedulerTimeType.Stride()
{
  return &type metadata for ImmediateScheduler.SchedulerTimeType.Stride;
}

uint64_t storeEnumTagSinglePayload for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD((*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_183B568D4 + 4 * byte_183BA3490[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_183B568F4 + 4 * byte_183BA3495[v4]))();
  }
}

_BYTE *sub_183B568D4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_183B568F4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_183B568FC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_183B56904(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_183B5690C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_183B56914(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_189D29AC8;
}

uint64_t Publisher.count()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publishers.Count.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t Publishers.Count.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.Count.receive<A>(subscriber:)()
{
}

uint64_t sub_183B56B04(uint64_t a1)
{
  uint64_t v7 = specialized Publishers.Count.Inner.init(downstream:initial:reduce:)(v1, 0LL, 0);
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v7, v2, a1, v3, v5);
  return swift_release();
}

void type metadata accessor for Publishers.Count.Inner()
{
}

uint64_t Publishers.Count.Inner.description.getter()
{
  return 0x746E756F43LL;
}

uint64_t Publishers.Count.Inner.receive(newValue:)()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t result = swift_beginAccess();
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    if (!__OFADD__(*v1, 1LL))
    {
      *(void *)(v0 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *v1 + 1LL;
      *(_BYTE *)(v0 + outlined destroy of Subscription?(v0 + 24) = 0;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      type metadata accessor for PartialCompletion( 0LL,  MEMORY[0x18961AFC8] + 8LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      return swift_storeEnumTagMultiPayload();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Count<A>()
{
}

uint64_t static Publishers.Count<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Count<A>()
{
  return static Publishers.Count<>.== infix(_:_:)();
}

uint64_t *specialized Publishers.Count.Inner.init(downstream:initial:reduce:)( uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t v10 = a2;
  char v11 = a3 & 1;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v6, (uint64_t)&v10, v8);
}

uint64_t getEnumTagSinglePayload for Publishers.Count(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B56E10 + 4 * byte_183BA3918[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.Count(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for Publishers.Count(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Count);
}

uint64_t Publisher.last(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.LastWhere,  a5);
}

uint64_t Publishers.LastWhere.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.LastWhere,  a6);
}

uint64_t type metadata accessor for Publishers.LastWhere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.LastWhere);
}

uint64_t Publisher.tryLast(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryLastWhere,  a5);
}

uint64_t Publishers.TryLastWhere.init(upstream:predicate:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)( a1,  a2,  a3,  a4,  a5,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryLastWhere,  a6);
}

uint64_t type metadata accessor for Publishers.TryLastWhere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.TryLastWhere);
}

uint64_t Publishers.LastWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.LastWhere.receive<A>(subscriber:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void *))type metadata accessor for Publishers.LastWhere.Inner,  (uint64_t)&unk_189D2A0A0,  (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool));
}

void type metadata accessor for Publishers.LastWhere.Inner()
{
}

uint64_t Publishers.LastWhere.Inner.description.getter()
{
  return 0x726568577473614CLL;
}

uint64_t Publishers.LastWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v19 = a2;
  uint64_t v5 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  unsigned int v11 = (char *)&v20[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  unsigned int v13 = (char *)&v20[-1] - v12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((char *)v3 + *(void *)(v5 + 152)))(v20, a1);
  if (LOBYTE(v20[0]) == 1)
  {
    uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    uint64_t v15 = (char *)v3 + *(void *)(*v3 + 136LL);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v15, v11, v7);
    swift_endAccess();
  }

  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion(0LL, MEMORY[0x18961AFC8] + 8LL, v16, AssociatedConformanceWitness);
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.LastWhere<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.LastWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryLastWhere.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.TryLastWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.LastWhere.receive<A>(subscriber:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryLastWhere.Inner,  (uint64_t)&unk_189D2A078,  (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

uint64_t Publishers.LastWhere.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v25 = a5;
  uint64_t v27 = a1;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v24 - v15;
  v30[0] = v11;
  v30[1] = a3;
  v30[2] = v26;
  void v30[3] = a4;
  uint64_t v17 = v25(0LL, v30);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v16,  1LL,  1LL,  AssociatedTypeWitness);
  uint64_t v18 = (uint64_t *)(v7 + *(int *)(a2 + 36));
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  swift_allocObject();
  swift_retain();
  uint64_t v21 = specialized Publishers.TryLastWhere.Inner.init(downstream:initial:reduce:)( v27,  (uint64_t)v16,  v19,  v20,  v28,  v29);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v30[0] = v21;
  uint64_t v22 = MEMORY[0x186E22960](&protocol conformance descriptor for ReduceProducer<A, B, C, D, E>, v17);
  Publisher.subscribe<A>(_:)((uint64_t)v30, v11, v17, v26, v22);
  return swift_release();
}

uint64_t Publishers.TryLastWhere.Inner.description.getter()
{
  return 0x577473614C797254LL;
}

uint64_t Publishers.TryLastWhere.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(void *__return_ptr, uint64_t))((char *)v2 + *(void *)(v4 + 152)))(v16, a1);
  if (LOBYTE(v16[0]) == 1)
  {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    uint64_t v14 = (char *)v2 + *(void *)(*v2 + 136LL);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v14, v10, v6);
    swift_endAccess();
  }

  return 0LL;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryLastWhere.Inner.receive(newValue:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = Publishers.TryLastWhere.Inner.receive(newValue:)(a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryLastWhere<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryLastWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t *specialized Publishers.TryLastWhere.Inner.init(downstream:initial:reduce:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v24 = a2;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 456);
  uint64_t v10 = *(void *)(*v6 + 440);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v8 + 448);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, a1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v24, v11);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v10;
  uint64_t v20[3] = v16;
  void v20[4] = v9;
  uint64_t v21 = v26;
  void v20[5] = *(void *)(v8 + 464);
  v20[6] = v21;
  v20[7] = v27;
  v29[0] = v28;
  v29[1] = v20;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v29);
}

void type metadata accessor for Publishers.TryLastWhere.Inner()
{
}

uint64_t getEnumTagSinglePayload for Publishers.LastWhere(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B5782C + 4 * byte_183BA39C8[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.LastWhere( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B579A4()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B57A1CLL);
}

void sub_183B579AC(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B579B4LL);
  }
  JUMPOUT(0x183B57A1CLL);
}

void sub_183B579F4()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B57A1CLL);
}

void sub_183B579FC()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B57A1CLL);
}

uint64_t sub_183B57A04(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B57A1CLL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B57A18LL);
    }
    JUMPOUT(0x183B57A10LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_183B57A34()
{
  return swift_deallocObject();
}

uint64_t Publisher.ignoreOutput()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publishers.IgnoreOutput.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t Publishers.IgnoreOutput.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

void Publishers.IgnoreOutput.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B57B84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v9, v10);
  Publishers.IgnoreOutput.Inner.init(downstream:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_183B57BE0()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.IgnoreOutput<A>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v4, v1, v3, v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

void type metadata accessor for Publishers.IgnoreOutput.Inner()
{
}

void Publishers.IgnoreOutput.Inner.init(downstream:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

void sub_183B57C9C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 52);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v3 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v4 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v3);
    *(void *)(v1 + (*(void (**)(uint64_t, void, uint64_t))(v1 + 16))(v9, *(void *)(v10 - 136), v2) = v4;
  }

void Publishers.IgnoreOutput.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "IgnoreOutput");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t Publishers.IgnoreOutput.Inner.receive(subscription:)(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 24))(0x8000000000000000LL, v3, v4);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.IgnoreOutput<A>.Inner<A1>()
{
  return 0LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.IgnoreOutput<A>.Inner<A1>()
{
  return 0x754F65726F6E6749LL;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.IgnoreOutput<A>.Inner<A1>@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 52));
  return result;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.IgnoreOutput<A>( uint64_t a1)
{
}

uint64_t static Publishers.IgnoreOutput<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.IgnoreOutput<A>()
{
  return static Publishers.IgnoreOutput<>.== infix(_:_:)();
}

uint64_t getEnumTagSinglePayload for Publishers.IgnoreOutput(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B57ED8 + 4 * byte_183BA3AB8[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.IgnoreOutput( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for Publishers.IgnoreOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.IgnoreOutput);
}

uint64_t type metadata completion function for Publishers.IgnoreOutput.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.IgnoreOutput.Inner( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
  }

  return v4;
}

uint64_t destroy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))();
}

uint64_t initializeWithCopy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithCopy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.IgnoreOutput.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0LL;
  }

  if (((((*(void *)(v4 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = a2 - v5 + 1;
  }
  if (v6 >= 0x10000) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v6 < 0x100) {
    unsigned int v7 = 1;
  }
  if (v6 >= 2) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B583FC + 4 * byte_183BA3AC6[v8]))();
}

void storeEnumTagSinglePayload for Publishers.IgnoreOutput.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }

  else
  {
    unsigned int v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_14:
    }
      __asm { BR              X11 }
  }

  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183B5853C()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B58544(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B5854CLL);
  }
}

void sub_183B58568()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B58570()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

uint64_t sub_183B58578(uint64_t a1, int a2)
{
  *(_WORD *)(v4 + (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v9, *(void *)(v10 - 136), v5) = 0;
  if (!a2) {
    JUMPOUT(0x183B58580LL);
  }
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

void CurrentValueSubject.value.getter(uint64_t a1@<X8>)
{
  os_unfair_lock_t v3 = *v1;
  os_unfair_lock_lock(v1[2]);
  uint64_t v4 = (char *)v1 + *(void *)&(*v1)[34]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)&v3[20]._os_unfair_lock_opaque - 8LL) + 16LL))( a1,  v4);
  os_unfair_lock_unlock(v1[2]);
}

uint64_t CurrentValueSubject.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized CurrentValueSubject.value.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 8LL))(a1);
}

void CurrentValueSubject.send(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (*((_BYTE *)v1 + 24) == 1)
  {
    uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 128);
    swift_beginAccess();
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = (uint64_t)v1 + *(void *)(*v1 + 136);
    LOBYTE((*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v9, *(void *)(v10 - 136), v5) = *(_BYTE *)(v5 + 8);
    swift_beginAccess();
    outlined copy of ConduitList<A, Never><A>(v6, v5);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(v3 + 80) - 8LL) + 24LL))( v7,  a1,  *(void *)(v3 + 80));
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    MEMORY[0x1895F8858](v8);
    void v9[2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v9, v6, v5);
    outlined consume of ConduitList<A, Never><A>(v6, v5);
  }

  else
  {
    os_unfair_lock_unlock(v4);
  }

void (*CurrentValueSubject.value.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80LL);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[4] = v7;
  CurrentValueSubject.value.getter((uint64_t)v7);
  return CurrentValueSubject.value.modify;
}

void CurrentValueSubject.value.modify(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 8LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 16LL);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24LL), v4, v5);
    specialized CurrentValueSubject.value.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }

  else
  {
    specialized CurrentValueSubject.value.setter(*(void *)(*(void *)a1 + 32LL));
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }

  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CurrentValueSubject.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  CurrentValueSubject.init(_:)(a1);
  return v2;
}

uint64_t CurrentValueSubject.init(_:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  *(_BYTE *)(v1 + outlined destroy of Subscription?(v0 + 24) = 1;
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 120LL);
  uint64_t v7 = type metadata accessor for Subscribers.Completion(0LL, v3[11], v3[12], v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v5, 1LL, 1LL, v7);
  uint64_t v8 = v1 + *(void *)(*(void *)v1 + 128LL);
  uint64_t v9 = v3[10];
  *(void *)uint64_t v8 = ConduitList.init()();
  *(_BYTE *)(v8 + 8) = v10;
  *(void *)(v1 + *(void *)(*(void *)v1 + 144LL)) = MEMORY[0x18961AFE8];
  *(_BYTE *)(v1 + *(void *)(*(void *)v1 + (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136LL) - 8LL) + 8LL))(v0 + *(void *)(*(void *)v0 + 152LL)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v1 + *(void *)(*(void *)v1 + 136LL),  a1,  v9);
  return v1;
}

void *CurrentValueSubject.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = *(void *)((char *)v0 + *(void *)(*v0 + 144LL));
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v12);
      uint64_t v7 = v13;
      uint64_t v6 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v5 += 40LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease();
  }

  MEMORY[0x186E22A2C](v1[2], -1LL, -1LL);
  uint64_t v8 = (char *)v1 + *(void *)(*v1 + 120LL);
  type metadata accessor for Subscribers.Completion(255LL, v2[11], v2[12], v9);
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
  outlined consume of ConduitList<A, Never><A>( *(void *)((char *)v1 + *(void *)(*v1 + 128LL)),  *((_BYTE *)v1 + *(void *)(*v1 + 128LL) + 8));
  (*(void (**)(char *))(*(void *)(v2[10] - 8LL) + 8LL))((char *)v1 + *(void *)(*v1 + 136LL));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CurrentValueSubject.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t CurrentValueSubject.send(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  uint64_t v4 = *(void *)(*v1 + 144LL);
  uint64_t v5 = *(void **)((char *)v1 + v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v5[2] + 1LL,  1,  v5);
    *(void *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v5;
  }

  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v8 + 1,  1,  v5);
    *(void *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v6, *(void *)(v9 - 144), v4) = v5;
  }

  __int128 v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  os_unfair_lock_unlock(v3);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000LL, v9, v10);
}

uint64_t CurrentValueSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 88);
  uint64_t v28 = *(void *)(*v4 + 96);
  uint64_t v29 = v8;
  uint64_t v9 = type metadata accessor for Subscribers.Completion(255LL, v8, v28, a4);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v11);
  uint64_t v17 = (char *)&v25 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (os_unfair_lock_s *)v5[2];
  os_unfair_lock_lock(v18);
  if (*((_BYTE *)v5 + 24) == 1)
  {
    uint64_t v32 = *(void *)(v7 + 80);
    uint64_t v33 = v29;
    uint64_t v34 = a2;
    uint64_t v35 = v31;
    type metadata accessor for CurrentValueSubject.Conduit();
  }

  uint64_t v19 = a2;
  uint64_t v20 = v31;
  uint64_t v21 = (uint64_t)v5 + *(void *)(*v5 + 120);
  swift_beginAccess();
  uint64_t v23 = v26;
  uint64_t v22 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v13, v21, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1LL, v9) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v13, v22);
    __break(1u);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v9);
    os_unfair_lock_unlock(v18);
    if (one-time initialization token for singleton != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 40))( static Subscriptions._EmptySubscription.singleton,  v19,  v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 56))(v17, v19, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v9);
  }

  return result;
}

uint64_t CurrentValueSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return CurrentValueSubject.Conduit.init(_:_:)(a1, a2);
}

void CurrentValueSubject.send(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 88);
  uint64_t v8 = *(void *)(*v4 + 96);
  uint64_t v9 = type metadata accessor for Subscribers.Completion(255LL, v7, v8, a4);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v14);
  if (*((_BYTE *)v4 + 24) == 1)
  {
    *((_BYTE *)v4 + outlined destroy of Subscription?(v0 + 24) = 0;
    uint64_t v15 = a1;
    uint64_t v23 = a1;
    uint64_t v16 = *(void *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v15, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v9);
    uint64_t v17 = (uint64_t)v4 + *(void *)(*v4 + 120);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v17, v13, v10);
    swift_endAccess();
    uint64_t v18 = (uint64_t)v4 + *(void *)(*v4 + 128);
    swift_beginAccess();
    uint64_t v19 = *(void *)v18;
    char v20 = *(_BYTE *)(v18 + 8);
    outlined copy of ConduitList<A, Never><A>(*(void *)v18, v20);
    type metadata accessor for ConduitList(0LL, *(void *)(v6 + 80), v7, v8);
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v14);
    MEMORY[0x1895F8858](v21);
    *(&v22 - 2) = v23;
    ConduitList.forEach(_:)( (uint64_t)partial apply for closure #1 in PassthroughSubject.send(completion:),  (uint64_t)(&v22 - 4),  v19,  v20);
    outlined consume of ConduitList<A, Never><A>(v19, v20);
  }

  else
  {
    os_unfair_lock_unlock(v14);
  }

uint64_t CurrentValueSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 176LL);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - v8;
  v2[2] = 0LL;
  uint64_t v10 = (char *)v2 + *(void *)(v4 + 200);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1LL, 1LL, v5);
  *(void *)((char *)v2 + *(void *)(*v2 + 208LL)) = 0LL;
  uint64_t v13 = *(void *)(*v2 + 216LL);
  swift_retain();
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  _DWORD *v14 = 0;
  *(void *)((char *)v2 + v13) = v14;
  uint64_t v15 = *(void *)(*v2 + 224LL);
  uint64_t v16 = (void *)swift_slowAlloc();
  *uint64_t v16 = 0LL;
  *(void *)((char *)v2 + v15) = v16;
  *((_BYTE *)v2 + *(void *)(*v2 + 232LL)) = 0;
  v2[2] = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, v18, v5);
  v12(v9, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

void CurrentValueSubject.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v27 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 176);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v3 + 216));
  os_unfair_lock_lock(v13);
  uint64_t v14 = *v2;
  uint64_t v15 = *(void *)(*v2 + 208);
  uint64_t v16 = *(uint64_t *)((char *)v2 + v15);
  if (v16 != 0x8000000000000000LL)
  {
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }

    if (!v16)
    {
LABEL_6:
      *((_BYTE *)v2 + *(void *)(v14 + 2outlined consume of ConduitList<A, Never><A>(*(void *)(v0 + 24), *(_BYTE *)(v0 + 32)) = 0;
      os_unfair_lock_unlock(v13);
      return;
    }
  }

  uint64_t v17 = *(void *)(v14 + 200);
  uint64_t v28 = v10;
  uint64_t v18 = (uint64_t)v2 + v17;
  swift_beginAccess();
  uint64_t v19 = v18;
  uint64_t v20 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v19, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1LL, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v14 = *v2;
    goto LABEL_6;
  }

  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v12, v9, v4);
  uint64_t v21 = *(uint64_t *)((char *)v2 + v15);
  if (v21 != 0x8000000000000000LL)
  {
    if ((v21 & 0x8000000000000000LL) == 0)
    {
      if (v21)
      {
        *(uint64_t *)((char *)v2 + v15) = v21 - 1;
        goto LABEL_11;
      }

Swift::Void __swiftcall CurrentValueSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 160LL);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](a1.rawValue);
  char v46 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  char v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v49 = (char *)&v44 - v11;
  uint64_t v12 = *(void *)(v4 + 176);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v52 = v12;
  MEMORY[0x1895F8858](v15);
  uint64_t v50 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1.rawValue != 0x8000000000000000LL)
  {
    if ((a1.rawValue & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (a1.rawValue)
    {
      goto LABEL_4;
    }

    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance CurrentValueSubject<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CurrentValueSubject.receive<A>(subscriber:)(a1, a2, a3, a4);
}

void CurrentValueSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  v20[1] = a1;
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v2[27]));
  uint64_t v21 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9F040;
  *(void *)(v9 + outlined destroy of Subscription?(v0 + 32) = 0x746E65726170LL;
  *(void *)(v9 + 40) = 0xE600000000000000LL;
  uint64_t v10 = v1[2];
  uint64_t v11 = v2[20];
  uint64_t v12 = v2[21];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for CurrentValueSubject(255LL, v11, v12, AssociatedConformanceWitness);
  uint64_t v14 = type metadata accessor for Optional();
  *(void *)(v9 + outlined destroy of SubscriptionStatus(v0 + 48) = v10;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v14;
  *(void *)(v9 + 80) = 0x657274736E776F64LL;
  *(void *)(v9 + 88) = 0xEA00000000006D61LL;
  uint64_t v15 = (char *)v1 + *(void *)(*v1 + 200LL);
  swift_beginAccess();
  uint64_t v16 = type metadata accessor for Optional();
  *(void *)(v9 + 120) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))( boxed_opaque_existential_1,  v15,  v16);
  *(void *)(v9 + 128) = 0x646E616D6564LL;
  *(void *)(v9 + 136) = 0xE600000000000000LL;
  *(void *)(v9 + 144) = *(void *)((char *)v1 + *(void *)(*v1 + 208LL));
  *(void *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 176) = 0x7463656A627573LL;
  uint64_t v18 = v1[2];
  *(void *)(v9 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v14;
  *(void *)(v9 + 184) = 0xE700000000000000LL;
  *(void *)(v9 + 192) = v18;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v8, 1LL, 1LL, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 216LL)));
}

void CurrentValueSubject.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0xD000000000000013LL;
  a1[1] = 0x8000000183BA3C50LL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrentValueSubject<A, B>.Conduit<A1>()
{
  return 0xD000000000000013LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance CurrentValueSubject<A, B>.Conduit<A1>( uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance CurrentValueSubject<A, B>.Conduit<A1>( void *a1@<X8>)
{
}

void specialized CurrentValueSubject.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (char *)v1 + *(void *)(*v1 + 136LL);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 24LL))(v5, a1);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  CurrentValueSubject.send(_:)(a1);
}

void type metadata accessor for CurrentValueSubject.Conduit()
{
}

uint64_t instantiation function for generic protocol witness table for CurrentValueSubject<A, B>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E22960](&protocol conformance descriptor for CurrentValueSubject<A, B>);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_183B59E38(uint64_t a1@<X8>)
{
}

void sub_183B59E58(uint64_t a1)
{
}

uint64_t sub_183B59E78()
{
  return 24LL;
}

__n128 sub_183B59E84(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for CurrentValueSubject( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v6 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }

  return result;
}

uint64_t type metadata accessor for CurrentValueSubject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CurrentValueSubject);
}

uint64_t method lookup function for CurrentValueSubject()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CurrentValueSubject.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t type metadata completion function for CurrentValueSubject.Conduit()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t Publisher<>.assign<A>(to:on:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(*a1 + *MEMORY[0x189619CF8]);
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(*v8 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v15 = type metadata accessor for Subscribers.Assign(0LL, v9, *(void *)(v13 + 8), v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v16 = swift_allocObject();
  swift_retain();
  Subscribers.Assign.init(object:keyPath:)((uint64_t)v12, (uint64_t)a1);
  uint64_t v20 = v16;
  uint64_t v17 = MEMORY[0x186E22960](&protocol conformance descriptor for Subscribers.Assign<A, B>, v15);
  Publisher.subscribe<A>(_:)((uint64_t)&v20, a3, v15, a4, v17);
  type metadata accessor for AnyCancellable();
  uint64_t v20 = v16;
  return AnyCancellable.__allocating_init<A>(_:)( (uint64_t)&v20,  v15,  (uint64_t)&protocol witness table for Subscribers.Assign<A, B>);
}

uint64_t type metadata accessor for Subscribers.Assign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscribers.Assign);
}

uint64_t Subscribers.Assign.__allocating_init(object:keyPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  Subscribers.Assign.init(object:keyPath:)(a1, a2);
  return v4;
}

uint64_t Subscribers.Assign.object.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 104LL);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t Subscribers.Assign.keyPath.getter()
{
  return swift_retain();
}

uint64_t Subscribers.Assign.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (uint64_t)v1 + *(void *)(v2 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v12, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return 0x6E6769737341LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
    uint64_t v22 = 0x206E6769737341LL;
    unint64_t v23 = 0xE700000000000000LL;
    swift_getDynamicType();
    v14._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 46LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    uint64_t v16 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (v17)
    {
      unint64_t v18 = v17;
    }

    else
    {
      uint64_t v16 = 0LL;
      unint64_t v18 = 0xE000000000000000LL;
    }

    unint64_t v19 = v18;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    uint64_t v13 = v22;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v3);
  }

  return v13;
}

uint64_t Subscribers.Assign.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9EBF0;
  *(void *)(v9 + outlined destroy of Subscription?(v0 + 32) = 0x7463656A626FLL;
  *(void *)(v9 + 40) = 0xE600000000000000LL;
  uint64_t v10 = (uint64_t)v1 + *(void *)(v2 + 104);
  swift_beginAccess();
  uint64_t v11 = type metadata accessor for Optional();
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))( boxed_opaque_existential_1,  v10,  v11);
  *(void *)(v9 + 80) = 0x6874615079656BLL;
  *(void *)(v9 + 88) = 0xE700000000000000LL;
  uint64_t v13 = *v1;
  uint64_t v14 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112));
  uint64_t v15 = type metadata accessor for ReferenceWritableKeyPath();
  *(void *)(v9 + 96) = v14;
  *(void *)(v9 + 120) = v15;
  *(void *)(v9 + 128) = 0x737574617473LL;
  *(void *)(v9 + 136) = 0xE600000000000000LL;
  uint64_t v16 = (uint64_t)v1 + *(void *)(v13 + 120);
  swift_beginAccess();
  *(void *)(v9 + 168) = &type metadata for SubscriptionStatus;
  uint64_t v17 = swift_allocObject();
  *(void *)(v9 + 144) = v17;
  outlined init with copy of SubscriptionStatus(v16, v17 + 16);
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v8, 1LL, 1LL, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Subscribers.Assign.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Subscribers.Assign.description.getter();
  a1[3] = MEMORY[0x189617FA8];
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *Subscribers.Assign.init(object:keyPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*v2 + 80LL);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  v2[2] = v10;
  uint64_t v11 = (char *)v2 + *(void *)(*v2 + 104LL);
  uint64_t v12 = *(void *)(v5 - 8);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(v11, 1LL, 1LL, v5);
  uint64_t v14 = (char *)v2 + *(void *)(*v2 + 120LL);
  *(_OWORD *)uint64_t v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((void *)v14 + 4) = 0LL;
  _BYTE v14[40] = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, a1, v5);
  v13(v9, 0LL, 1LL, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v11, v9, v6);
  swift_endAccess();
  *(void *)((char *)v2 + *(void *)(*v2 + 112LL)) = a2;
  return v2;
}

uint64_t sub_183B5A7C0()
{
  return swift_deallocObject();
}

void *Subscribers.Assign.deinit()
{
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + 104LL);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 120LL));
  return v0;
}

uint64_t Subscribers.Assign.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Subscribers.Assign.receive(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 120LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)&v11);
  if (v14 == 2
    && (int8x16_t v5 = vorrq_s8(v12, v13),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v11)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v11);
    char v14 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000LL, v9, v10);
  }

  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    os_unfair_lock_unlock(v3);
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
  }

uint64_t Subscribers.Assign.receive(_:)(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v2 = *(void *)(*v1 + 88LL);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](a1);
  int8x16_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v6 + 80);
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v24 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v24);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v25 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v9);
  int8x16_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v14 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v14);
  uint64_t v15 = (uint64_t)v1 + *(void *)(*v1 + 120LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v15, (uint64_t)v26);
  LODWORD(v15) = v26[40];
  outlined destroy of SubscriptionStatus((uint64_t)v26);
  if (!(_DWORD)v15)
  {
    uint64_t v21 = v13;
    uint64_t v22 = v2;
    uint64_t v16 = (char *)v1 + *(void *)(*v1 + 104LL);
    swift_beginAccess();
    uint64_t v17 = v24;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v24);
    uint64_t v18 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1LL, v7) != 1)
    {
      unint64_t v19 = v21;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v11, v7);
      os_unfair_lock_unlock(v14);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v23, v22);
      swift_setAtReferenceWritableKeyPath();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v7);
      return 0LL;
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v17);
  }

  os_unfair_lock_unlock(v14);
  return 0LL;
}

Swift::Void __swiftcall Subscribers.Assign.cancel()()
{
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v11 - v3;
  int8x16_t v5 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v0 + *(void *)(*v0 + 120LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v12);
  if (v15)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(v5);
  }

  else
  {
    outlined init with take of Subscription((__int128 *)&v12, (uint64_t)v16);
    uint64_t v12 = 1LL;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    char v15 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, v6);
    swift_endAccess();
    uint64_t v7 = (char *)v0 + *(void *)(*v0 + 104LL);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( (uint64_t)v4,  (uint64_t)partial apply for closure #1 in Subscribers.Assign.cancel(),  (uint64_t)v0,  v1,  MEMORY[0x18961A520],  MEMORY[0x18961AFC8] + 8LL,  MEMORY[0x18961A528],  v8);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v9 = v17;
    uint64_t v10 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(uint64_t))(*(void *)(v10 + 8) + 8LL))(v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }

void closure #1 in Subscribers.Assign.receive(completion:)(os_unfair_lock_t *a1)
{
  uint64_t v2 = *(void *)&(*a1)[20]._os_unfair_lock_opaque;
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))( (char *)&v8 - v5,  1LL,  1LL,  v2);
  uint64_t v7 = (char *)a1 + *(void *)&(*a1)[26]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(a1[2]);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Subscribers.Assign<A, B>( void *a1)
{
  return Subscribers.Assign.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Subscribers.Assign<A, B>(uint64_t a1)
{
  return 0LL;
}

void protocol witness for Subscriber.receive(completion:) in conformance Subscribers.Assign<A, B>()
{
}

void protocol witness for Cancellable.cancel() in conformance Subscribers.Assign<A, B>()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Assign<A, B>()
{
  return Subscribers.Assign.description.getter();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscribers.Assign<A, B>@<X0>( uint64_t a1@<X8>)
{
  return Subscribers.Assign.customMirror.getter(a1);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscribers.Assign<A, B>@<X0>( uint64_t *a1@<X8>)
{
  return Subscribers.Assign.playgroundDescription.getter(a1);
}

void specialized Subscribers.Assign.receive(completion:)()
{
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  uint64_t v4 = (char *)&v10 - v3;
  uint64_t v5 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v0 + *(void *)(*v0 + 120LL);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v11);
  int v7 = v14;
  outlined destroy of SubscriptionStatus((uint64_t)&v11);
  if (v7)
  {
    os_unfair_lock_unlock(v5);
  }

  else
  {
    uint64_t v11 = 1LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    unsigned __int8 v14 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v11, v6);
    swift_endAccess();
    uint64_t v8 = (char *)v0 + *(void *)(*v0 + 104LL);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v8, v1);
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( (uint64_t)v4,  (uint64_t)partial apply for closure #1 in Subscribers.Assign.cancel(),  (uint64_t)v0,  v1,  MEMORY[0x18961A520],  MEMORY[0x18961AFC8] + 8LL,  MEMORY[0x18961A528],  v9);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

void partial apply for closure #1 in Subscribers.Assign.cancel()()
{
}

uint64_t type metadata completion function for Subscribers.Assign()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t method lookup function for Subscribers.Assign()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Subscribers.Assign.__allocating_init(object:keyPath:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t Scheduler.schedule(after:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int128 v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  Scheduler.schedule(after:tolerance:_:)(a1, (uint64_t)v13, a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t Scheduler.schedule(after:tolerance:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( (char *)&v18 - v15,  1LL,  1LL,  AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64))( a1,  a2,  v16,  a3,  a4,  a5,  a6);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t Scheduler.schedule(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( (char *)&v14 - v11,  1LL,  1LL,  AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 56))(v12, a1, a2, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Scheduler.schedule(after:interval:tolerance:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a5;
  uint64_t v19 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( (char *)&v18 - v15,  1LL,  1LL,  AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 72))( a1,  a2,  a3,  v16,  v19,  v20,  a6,  a7);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t Scheduler.schedule(after:interval:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(uint64_t, uint64_t))(a6 + 48))(a5, a6);
  Scheduler.schedule(after:interval:tolerance:_:)(a1, a2, (uint64_t)v14, a3, v17, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.seconds(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.seconds(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.milliseconds(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.microseconds(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.nanoseconds(_:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Scheduler.now.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Scheduler.minimumTolerance.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Scheduler.schedule(options:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of Scheduler.schedule(after:tolerance:options:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 64))();
}

uint64_t dispatch thunk of Scheduler.schedule(after:interval:tolerance:options:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t Publishers.SwitchToLatest.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

void Publisher<>.switchToLatest()()
{
}

{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Publishers.SetFailureType();
}

uint64_t sub_183B5B7F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v5 = &v7[-v4];
  Publisher<>.setFailureType<A>(to:)(v1, (uint64_t)&v7[-v4]);
  MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.SetFailureType<A, B>, a1);
  ((void (*)(uint64_t))Publisher<>.switchToLatest())(a1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, a1);
}

uint64_t sub_183B5B930(uint64_t a1)
{
  uint64_t v5 = type metadata accessor for Publishers.Map(0LL, v2, a1, v1);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = v2;
  void v9[3] = v1;
  v9[4] = v3;
  Publisher.map<A>(_:)( (uint64_t)partial apply for closure #1 in Publisher<>.switchToLatest(),  (uint64_t)v9,  v2,  a1,  v1,  (uint64_t)v8);
  swift_release();
  MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Map<A, B>, v5);
  MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.SetFailureType<A, B>, a1);
  ((void (*)(uint64_t))Publisher<>.switchToLatest())(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t closure #1 in Publisher<>.switchToLatest()@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return Publisher<>.setFailureType<A>(to:)(AssociatedTypeWitness, a1);
}

uint64_t sub_183B5BAE4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher<>.switchToLatest()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Publisher<>.switchToLatest()(a1);
}

uint64_t Publishers.SwitchToLatest.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))(a2, v2);
}

void Publishers.SwitchToLatest.receive<A>(subscriber:)(uint64_t a1)
{
}

uint64_t sub_183B5BB94(uint64_t a1)
{
  uint64_t v10 = Publishers.SwitchToLatest.Outer.init(downstream:)(v1);
  *(void *)(v8 - 104) = a1;
  *(void *)(v8 - 96) = &protocol witness table for Publishers.SwitchToLatest<A, B>.Outer<A1>;
  *(void *)(v8 - 128) = v10;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);
  swift_retain();
  v11(v8 - 128, v5, v4);
  __swift_destroy_boxed_opaque_existential_1(v8 - 128);
  *(void *)(v8 - 128) = v10;
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>.Outer<A1>, a1);
  Publisher.subscribe<A>(_:)(v8 - 128, v2, a1, v3, v12);
  return swift_release();
}

void type metadata accessor for Publishers.SwitchToLatest.Outer()
{
}

uint64_t *Publishers.SwitchToLatest.Outer.__allocating_init(downstream:)(uint64_t a1)
{
  return Publishers.SwitchToLatest.Outer.init(downstream:)(a1);
}

void Publishers.SwitchToLatest.Outer.Side.customMirror.getter()
{
  uint64_t v0 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1895F8858](v0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = xmmword_183B9D5B0;
  *(void *)(v2 + outlined destroy of Subscription?(v0 + 32) = 0xD000000000000012LL;
  *(void *)(v2 + 40) = 0x8000000183BA8110LL;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = &type metadata for CombineIdentifier;
  type metadata accessor for Publishers.SwitchToLatest.Outer();
}

uint64_t sub_183B5BDB0()
{
  uint64_t v3 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.SwitchToLatest.Outer.Side.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + outlined destroy of Subscription?(v0 + 24) = MEMORY[0x189617FA8];
  strcpy((char *)a1, "SwitchToLatest");
  *(_BYTE *)(a1 + 15) = -18;
}

void Publishers.SwitchToLatest.Outer.Side.receive(subscription:)(void *a1)
{
}

void Publishers.SwitchToLatest.Outer.receiveInner(subscription:_:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*v2 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
  uint64_t v6 = *v2;
  if (*(uint64_t *)((char *)v2 + *(void *)(*v2 + 152)) != a2
    || (*((_BYTE *)v2 + *(void *)(v6 + 184)) & 1) != 0
    || (uint64_t v7 = (uint64_t)v2 + *(void *)(v6 + 144),
        swift_beginAccess(),
        outlined init with copy of Subscription?(v7, (uint64_t)v14),
        uint64_t v8 = v15,
        outlined destroy of Subscription?((uint64_t)v14),
        v8))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
    uint64_t v10 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v10);
  }

  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v14, v7);
    swift_endAccess();
    *((_BYTE *)v2 + *(void *)(*v2 + 20outlined consume of ConduitList<A, Never><A>(*(void *)v0, *(_BYTE *)(v0 + 8)) = 0;
    uint64_t v11 = *(uint64_t *)((char *)v2 + *(void *)(*v2 + 216));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
    if (v11 == 0x8000000000000000LL) {
      goto LABEL_9;
    }
    if (v11 < 0)
    {
      __break(1u);
      return;
    }

    if (v11)
    {
LABEL_9:
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
    }
  }

void Publishers.SwitchToLatest.Outer.Side.receive(_:)(uint64_t a1)
{
}

void Publishers.SwitchToLatest.Outer.receiveInner(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v7));
  uint64_t v8 = *v2;
  uint64_t v9 = *(void *)(v8 + 216);
  uint64_t v10 = *(uint64_t *)((char *)v2 + v9);
  if (v10 != 0x8000000000000000LL)
  {
    if (v10 < 0)
    {
      __break(1u);
    }

    else if (v10)
    {
      *(uint64_t *)((char *)v2 + v9) = v10 - 1;
      goto LABEL_9;
    }

    __break(1u);
    goto LABEL_22;
  }

void Publishers.SwitchToLatest.Outer.Side.receive(completion:)(uint64_t a1)
{
}

void Publishers.SwitchToLatest.Outer.receiveInner(completion:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v31 = v13;
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  unint64_t v29 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = v6[21];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + v18));
  uint64_t v19 = *(void **)v3;
  if (*(void *)(v3 + *(void *)(*(void *)v3 + 152LL)) != a2) {
    goto LABEL_3;
  }
  uint64_t v20 = v19[23];
  if ((*(_BYTE *)(v3 + v20) & 1) != 0) {
    goto LABEL_3;
  }
  if ((*(_BYTE *)(v3 + v19[26]) & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v36 = 0LL;
    memset(v35, 0, sizeof(v35));
    uint64_t v21 = v3 + v19[18];
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v35, v21);
    swift_endAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v17, a1, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1LL, AssociatedTypeWitness) == 1)
    {
      if ((*(_BYTE *)(v3 + v20) & 1) != 0
        || (uint64_t v22 = *(void *)(*(void *)v3 + 200LL), *(_BYTE *)(v3 + v22) == 1)
        || (*(_BYTE *)(v3 + *(void *)(*(void *)v3 + 192LL)) & 1) == 0)
      {
LABEL_3:
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
        return;
      }

      *(_BYTE *)(v3 + v22) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v23 = v29;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v29, 1LL, 1LL, AssociatedTypeWitness);
      (*(void (**)(char *, void))(v6[15] + 56LL))(v23, v6[12]);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
      os_unfair_recursive_lock_unlock();
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v17, AssociatedTypeWitness);
      if ((*(_BYTE *)(v3 + v20) & 1) != 0 || (uint64_t v24 = *(void *)(*(void *)v3 + 200LL), *(_BYTE *)(v3 + v24) == 1))
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
      }

      else
      {
        *(_BYTE *)(v3 + v20) = 1;
        uint64_t v25 = v3 + *(void *)(*(void *)v3 + 136LL);
        swift_beginAccess();
        outlined init with copy of Subscription?(v25, (uint64_t)v35);
        uint64_t v34 = 0LL;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        swift_beginAccess();
        outlined assign with take of Subscription?((uint64_t)&v32, v25);
        swift_endAccess();
        *(_BYTE *)(v3 + voutlined destroy of Subscription?(v0 + 24) = 1;
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v18));
        outlined init with copy of Subscription?((uint64_t)v35, (uint64_t)&v32);
        uint64_t v26 = *((void *)&v33 + 1);
        if (*((void *)&v33 + 1))
        {
          uint64_t v27 = v34;
          __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
          (*(void (**)(uint64_t))(*(void *)(v27 + 8) + 8LL))(v26);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
        }

        else
        {
          outlined destroy of Subscription?((uint64_t)&v32);
        }

        os_unfair_recursive_lock_lock_with_options();
        uint64_t v28 = v29;
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v29, v10, AssociatedTypeWitness);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v28, 0LL, 1LL, AssociatedTypeWitness);
        (*(void (**)(char *, void))(v6[15] + 56LL))(v28, v6[12]);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v31);
        os_unfair_recursive_lock_unlock();
        outlined destroy of Subscription?((uint64_t)v35);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    }
  }

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>.Side()
{
  return 0x6F54686374697753LL;
}

uint64_t *Publishers.SwitchToLatest.Outer.init(downstream:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 136);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(void *)(v4 + outlined destroy of Subscription?(v0 + 32) = 0LL;
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  *(void *)(v5 + outlined destroy of Subscription?(v0 + 32) = 0LL;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 152)) = 0LL;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 160)) = 1LL;
  uint64_t v6 = *(void *)(*v1 + 168);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *uint64_t v7 = 0;
  *(uint64_t *)((char *)v1 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = (uint64_t)v7;
  uint64_t v8 = *(void *)(*v1 + 176);
  uint64_t v9 = (void *)swift_slowAlloc();
  *uint64_t v9 = 0LL;
  *(uint64_t *)((char *)v1 + v8) = (uint64_t)v9;
  *((_BYTE *)v1 + *(void *)(*v1 + 184)) = 0;
  *((_BYTE *)v1 + *(void *)(*v1 + 192)) = 0;
  *((_BYTE *)v1 + *(void *)(*v1 + 200)) = 0;
  *((_BYTE *)v1 + *(void *)(*v1 + 20outlined consume of ConduitList<A, Never><A>(*(void *)v0, *(_BYTE *)(v0 + 8)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 2os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16)) = 0LL;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 96) - 8LL) + 32LL))( (uint64_t)v1 + *(void *)(*v1 + 128),  a1);
  return v1;
}

uint64_t *Publishers.SwitchToLatest.Outer.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 168)), -1LL, -1LL);
  MEMORY[0x186E22A2C](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 128));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 136));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 144));
  return v0;
}

uint64_t Publishers.SwitchToLatest.Outer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Publishers.SwitchToLatest.Outer.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 136LL);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  uint64_t v5 = v12;
  outlined destroy of Subscription?((uint64_t)v11);
  if (v5 || *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 184LL)) == 1)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
  }

  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000LL, v9, v10);
  }

void Publishers.SwitchToLatest.Outer.receive(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = *(void *)(*(void *)v0 + 168LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v3));
  uint64_t v4 = *(void *)v0;
  if ((*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 184LL)) & 1) != 0 || *(_BYTE *)(v0 + *(void *)(v4 + 192)) == 1)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v3));
  }

  else
  {
    uint64_t v5 = v0 + *(void *)(v4 + 144);
    swift_beginAccess();
    outlined init with copy of Subscription?(v5, (uint64_t)&v17);
    if (*((void *)&v18 + 1))
    {
      outlined init with take of Subscription(&v17, (uint64_t)&v11);
      uint64_t v19 = 0LL;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v17, v5);
      swift_endAccess();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      __int128 v6 = v13;
      __swift_project_boxed_opaque_existential_1(&v11, v13);
      (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL) + 8LL))(v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
    }

    else
    {
      outlined destroy of Subscription?((uint64_t)&v17);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    }

    uint64_t v7 = *(void *)(*(void *)v1 + 160LL);
    uint64_t v8 = *(void *)(v1 + v7);
    if (!__OFADD__(v8, 1LL))
    {
      *(void *)(v1 + v7) = v8 + 1;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
      *(void *)(v1 + *(void *)(*(void *)v1 + (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136LL) - 8LL) + 8LL))(v0 + *(void *)(*(void *)v0 + 152LL)) = v8;
      *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 208LL)) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      swift_retain();
      Publishers._Merged.Side.init(index:merger:)(v8, v1, &v17);
      __int128 v15 = v17;
      uint64_t v16 = v18;
      uint64_t v9 = *(void *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 120);
      __int128 v11 = *(_OWORD *)(v2 + 80);
      uint64_t v12 = v9;
      __int128 v13 = *(_OWORD *)(v2 + 104);
      uint64_t v14 = v10;
      type metadata accessor for Publishers.SwitchToLatest.Outer.Side();
    }

    __break(1u);
  }

void Publishers.SwitchToLatest.Outer.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v31 = (char *)&v27 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v30 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  __int128 v15 = (char *)&v27 - v14;
  uint64_t v16 = v4[21];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + v16));
  uint64_t v37 = 0LL;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  uint64_t v17 = v2 + *(void *)(*(void *)v2 + 136LL);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v35, v17);
  swift_endAccess();
  *(_BYTE *)(v2 + *(void *)(*(void *)v2 + 192LL)) = 1;
  if (*(_BYTE *)(v2 + *(void *)(*(void *)v2 + 184LL)) == 1) {
    goto LABEL_2;
  }
  uint64_t v29 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1LL, AssociatedTypeWitness) == 1)
  {
    if ((*(_BYTE *)(v2 + *(void *)(*(void *)v2 + 208LL)) & 1) != 0
      || (uint64_t v18 = v2 + *(void *)(*(void *)v2 + 144LL),
          swift_beginAccess(),
          outlined init with copy of Subscription?(v18, (uint64_t)&v35),
          uint64_t v19 = *((void *)&v36 + 1),
          outlined destroy of Subscription?((uint64_t)&v35),
          v19))
    {
LABEL_2:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v16));
      return;
    }

    *(_BYTE *)(v2 + *(void *)(*(void *)v2 + 200LL)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v16));
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v20 = v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v30, 1LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, void))(v4[15] + 56LL))(v20, v4[12]);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v10);
    os_unfair_recursive_lock_unlock();
  }

  else
  {
    uint64_t v28 = v10;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v31, v15, AssociatedTypeWitness);
    uint64_t v21 = v2 + *(void *)(*(void *)v2 + 144LL);
    swift_beginAccess();
    outlined init with copy of Subscription?(v21, (uint64_t)&v35);
    uint64_t v34 = 0LL;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v32, v21);
    swift_endAccess();
    *(_BYTE *)(v2 + *(void *)(*(void *)v2 + 200LL)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v16));
    outlined init with copy of Subscription?((uint64_t)&v35, (uint64_t)&v32);
    uint64_t v22 = *((void *)&v33 + 1);
    if (*((void *)&v33 + 1))
    {
      uint64_t v23 = v34;
      __swift_project_boxed_opaque_existential_1(&v32, *((uint64_t *)&v33 + 1));
      (*(void (**)(uint64_t))(*(void *)(v23 + 8) + 8LL))(v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    }

    else
    {
      outlined destroy of Subscription?((uint64_t)&v32);
    }

    uint64_t v24 = v29;
    uint64_t v25 = v30;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v26 = v31;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v25, v31, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v25, 0LL, 1LL, AssociatedTypeWitness);
    (*(void (**)(char *, void))(v4[15] + 56LL))(v25, v4[12]);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v28);
    os_unfair_recursive_lock_unlock();
    outlined destroy of Subscription?((uint64_t)&v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v26, AssociatedTypeWitness);
  }

void Publishers.SwitchToLatest.Outer.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000LL)
  {
    if (a1 < 0)
    {
      __break(1u);
    }

    else if (a1)
    {
      goto LABEL_4;
    }

    __break(1u);
    goto LABEL_18;
  }

uint64_t Publishers.SwitchToLatest.Outer.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168LL);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  *(_BYTE *)(v0 + *(void *)(*(void *)v0 + 184LL)) = 1;
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 144LL);
  swift_beginAccess();
  outlined init with copy of Subscription?(v2, (uint64_t)v14);
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v12, v2);
  swift_endAccess();
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 136LL);
  swift_beginAccess();
  outlined init with copy of Subscription?(v3, (uint64_t)v12);
  uint64_t v11 = 0LL;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v9, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  outlined init with copy of Subscription?((uint64_t)v14, (uint64_t)&v9);
  uint64_t v4 = *((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    uint64_t v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }

  else
  {
    outlined destroy of Subscription?((uint64_t)&v9);
  }

  outlined init with copy of Subscription?((uint64_t)v12, (uint64_t)&v9);
  uint64_t v6 = *((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
    (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8LL))(v6);
    outlined destroy of Subscription?((uint64_t)v12);
    outlined destroy of Subscription?((uint64_t)v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }

  else
  {
    outlined destroy of Subscription?((uint64_t)v12);
    outlined destroy of Subscription?((uint64_t)v14);
    return outlined destroy of Subscription?((uint64_t)&v9);
  }

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>( void *a1)
{
  return Publishers.SwitchToLatest.Outer.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>()
{
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>( uint64_t a1)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>( uint64_t a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>()
{
  return Publishers.SwitchToLatest.Outer.cancel()();
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SwitchToLatest<A, B>( uint64_t a1)
{
}

uint64_t type metadata completion function for Publishers.SwitchToLatest()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SwitchToLatest( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t initializeWithCopy for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.SwitchToLatest(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B5D4F4 + 4 * byte_183BA3EE8[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Publishers.SwitchToLatest( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

void type metadata accessor for Publishers.SwitchToLatest()
{
}

uint64_t type metadata completion function for Publishers.SwitchToLatest.Outer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void type metadata accessor for Publishers.SwitchToLatest.Outer.Side()
{
}

uint64_t Publisher.retry(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  unsigned int v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a2);
  uint64_t result = type metadata accessor for Publishers.Retry(0LL, a2, a3, v12);
  uint64_t v14 = a4 + *(int *)(result + 36);
  *(void *)uint64_t v14 = a1;
  *(_BYTE *)(v14 + 8) = 0;
  return result;
}

uint64_t Publishers.Retry.init(upstream:retries:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = type metadata accessor for Publishers.Retry(0LL, a4, a5, v11);
  uint64_t v13 = a6 + *(int *)(result + 36);
  *(void *)uint64_t v13 = a2;
  *(_BYTE *)(v13 + 8) = a3 & 1;
  return result;
}

uint64_t type metadata accessor for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishers.Retry);
}

uint64_t Publishers.Retry.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.Retry.retries.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

void Publishers.Retry.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  MEMORY[0x1895F8858](v1);
  type metadata accessor for Publishers.Retry.Inner();
}

uint64_t sub_183B5D9DC(uint64_t a1)
{
  *(void *)(v10 - 112) = Publishers.Retry.Inner.init(_:_:_:)(v7, v2, *(void *)(v10 - 128), v8);
  uint64_t v12 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Retry<A>.Inner<A1>, a1);
  Publisher.subscribe<A>(_:)(v10 - 112, v3, a1, v4, v12);
  return swift_release();
}

void type metadata accessor for Publishers.Retry.Inner()
{
}

void *Publishers.Retry.Inner.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  swift_allocObject();
  return Publishers.Retry.Inner.init(_:_:_:)(a1, a2, a3, v7);
}

void *Publishers.Retry.Inner.init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  __int128 v4[2] = v10;
  uint64_t v11 = (char *)v4 + *(void *)(*v4 + 128LL);
  *((void *)v11 + 4) = 0LL;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_BYTE *)v4 + *(void *)(*v4 + 144LL)) = 1;
  *(void *)((char *)v4 + *(void *)(*v4 + (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136LL) - 8LL) + 8LL))(v0 + *(void *)(*(void *)v0 + 152LL)) = 0LL;
  *((_BYTE *)v4 + *(void *)(*v4 + 160LL)) = 0;
  *((_BYTE *)v4 + *(void *)(*v4 + 168LL)) = 0;
  uint64_t v12 = (char *)v4 + *(void *)(*v4 + 120LL);
  uint64_t v13 = *(void *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 88);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v12, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v16, a2, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56LL))( v12,  0LL,  1LL,  TupleTypeMetadata2);
  uint64_t v17 = (char *)v4 + *(void *)(*v4 + 136LL);
  *(void *)uint64_t v17 = a3;
  v17[8] = a4 & 1;
  return v4;
}

void Publishers.Retry.Inner.deinit()
{
}

uint64_t sub_183B5DC8C(uint64_t a1)
{
  return v2;
}

void Publishers.Retry.Inner.__deallocating_deinit()
{
}

uint64_t sub_183B5DCD4()
{
  return swift_deallocClassInstance();
}

void Publishers.Retry.Inner.request(_:)()
{
}

void sub_183B5DD34(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  char v7 = (char *)&v19 - v6;
  char v8 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v8);
  uint64_t v9 = (char *)v2 + *(void *)(*v2 + 120LL);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v9, a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v7,  1LL,  TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
  if (v11 == 1)
  {
LABEL_13:
    os_unfair_lock_unlock(v8);
    return;
  }

  uint64_t v12 = *v2;
  uint64_t v13 = *(void *)(*v2 + 152LL);
  uint64_t v14 = *(void *)((char *)v2 + v13);
  unint64_t v15 = 0x8000000000000000LL;
  if (v14 == 0x8000000000000000LL)
  {
LABEL_10:
    uint64_t v16 = (uint64_t)v2 + *(void *)(v12 + 128);
    swift_beginAccess();
    outlined init with copy of Subscription?(v16, v3 - 192);
    if (*(void *)(v3 - 168))
    {
      outlined init with take of Subscription((__int128 *)(v3 - 192), v3 - 128);
      os_unfair_lock_unlock(v8);
      uint64_t v17 = *(void *)(v3 - 104);
      uint64_t v18 = *(void *)(v3 - 96);
      __swift_project_boxed_opaque_existential_1((void *)(v3 - 128), v17);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24))(v1, v17, v18);
      __swift_destroy_boxed_opaque_existential_1(v3 - 128);
      return;
    }

    outlined destroy of Subscription?(v3 - 192);
    goto LABEL_13;
  }

  if (v1 == 0x8000000000000000LL)
  {
LABEL_9:
    *(void *)((char *)v2 + v13) = v15;
    uint64_t v12 = *v2;
    goto LABEL_10;
  }

  if ((v14 | v1) < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v15 = v14 + v1;
  if (__OFADD__(v14, v1))
  {
    unint64_t v15 = 0x8000000000000000LL;
    goto LABEL_9;
  }

  if ((v15 & 0x8000000000000000LL) == 0) {
    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
}

void Publishers.Retry.Inner.cancel()()
{
}

void sub_183B5DF30(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  *(void *)(v3 - 280) = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v21[-v8];
  uint64_t v10 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v10);
  int v11 = (char *)v1 + *(void *)(*v1 + 120LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v9, v11, a1);
  uint64_t v12 = *(void *)(v3 - 272);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v9, 1LL, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v9, a1);
    unint64_t v15 = v10;
  }

  else
  {
    *(void *)(v3 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 72) = v10;
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(v12 - 8) + 8LL))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v12);
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v9, v2);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    uint64_t v17 = *(void *)(v3 - 280);
    v16(v17, 1LL, 1LL, TupleTypeMetadata2);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 40))(v11, v17, a1);
    swift_endAccess();
    uint64_t v18 = (uint64_t)v1 + *(void *)(*v1 + 128LL);
    swift_beginAccess();
    outlined init with copy of Subscription?(v18, v3 - 224);
    if (*(void *)(v3 - 200))
    {
      outlined init with take of Subscription((__int128 *)(v3 - 224), v3 - 152);
      *(void *)(v3 - 192) = 0LL;
      *(_OWORD *)(v3 - 2outlined destroy of Subscription?(v0 + 24) = 0u;
      *(_OWORD *)(v3 - 208) = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?(v3 - 224, v18);
      swift_endAccess();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 - 272));
      uint64_t v19 = *(void *)(v3 - 128);
      uint64_t v20 = *(void *)(v3 - 120);
      __swift_project_boxed_opaque_existential_1((void *)(v3 - 152), v19);
      (*(void (**)(uint64_t))(*(void *)(v20 + 8) + 8LL))(v19);
      __swift_destroy_boxed_opaque_existential_1(v3 - 152);
      return;
    }

    outlined destroy of Subscription?(v3 - 224);
    unint64_t v15 = *(os_unfair_lock_s **)(v3 - 272);
  }

  os_unfair_lock_unlock(v15);
}

void Publishers.Retry.Inner.receive(subscription:)()
{
}

void sub_183B5E1E0(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = &v35[-v7];
  uint64_t v9 = *(void *)(v3 - 224);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v13);
  uint64_t v14 = (char *)v1 + *(void *)(*v1 + 120LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v14, a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v8,  1LL,  TupleTypeMetadata2) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a1);
    os_unfair_lock_unlock(v13);
    uint64_t v16 = *(void **)(v3 - 208);
    uint64_t v18 = v16[3];
    uint64_t v17 = v16[4];
    __swift_project_boxed_opaque_existential_1(v16, v18);
    (*(void (**)(uint64_t))(*(void *)(v17 + 8) + 8LL))(v18);
    return;
  }

  uint64_t v19 = *(void **)(v3 - 208);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, &v8[*(int *)(TupleTypeMetadata2 + 48)], v9);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v8, v2);
  uint64_t v20 = (uint64_t)v1 + *(void *)(*v1 + 128LL);
  swift_beginAccess();
  outlined init with copy of Subscription?(v20, v3 - 176);
  uint64_t v21 = *(void *)(v3 - 152);
  outlined destroy of Subscription?(v3 - 176);
  uint64_t v22 = v10;
  uint64_t v23 = v9;
  uint64_t v24 = v12;
  if (v21)
  {
    os_unfair_lock_unlock(v13);
    uint64_t v26 = v19[3];
    uint64_t v25 = v19[4];
    __swift_project_boxed_opaque_existential_1(v19, v26);
    (*(void (**)(uint64_t))(*(void *)(v25 + 8) + 8LL))(v26);
LABEL_11:
    (*(void (**)(_BYTE *, uint64_t))(v22 + 8))(v24, v23);
    return;
  }

  uint64_t v27 = v19;
  outlined init with copy of Subscription((uint64_t)v19, v3 - 176);
  swift_beginAccess();
  outlined assign with take of Subscription?(v3 - 176, v20);
  swift_endAccess();
  uint64_t v28 = *(void *)(*v1 + 144LL);
  uint64_t v29 = *(void *)((char *)v1 + *(void *)(*v1 + 152LL));
  int v30 = *((unsigned __int8 *)v1 + v28);
  *((_BYTE *)v1 + v28) = 0;
  os_unfair_lock_unlock(v13);
  if (v30 == 1)
  {
    uint64_t v31 = *(void *)(v3 - 232);
    *(void *)(v3 - 152) = *(void *)(v3 - 240);
    *(void *)(v3 - 144) = &protocol witness table for Publishers.Retry<A>.Inner<A1>;
    *(void *)(v3 - 176) = v1;
    __int128 v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 40);
    swift_retain();
    v32(v3 - 176, v23, v31);
    __swift_destroy_boxed_opaque_existential_1(v3 - 176);
  }

  if (v29 == 0x8000000000000000LL)
  {
LABEL_10:
    uint64_t v33 = v19[3];
    uint64_t v34 = v19[4];
    __swift_project_boxed_opaque_existential_1(v27, v27[3]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 24))(v29, v33, v34);
    goto LABEL_11;
  }

  if ((v29 & 0x8000000000000000LL) == 0)
  {
    if (!v29) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  __break(1u);
}

void Publishers.Retry.Inner.receive(_:)()
{
}

void sub_183B5E500(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = &v26[-v7];
  uint64_t v9 = *(void *)(v3 - 240);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v13);
  uint64_t v14 = (char *)v1 + *(void *)(*v1 + 120LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v14, a1);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48LL))( v8,  1LL,  TupleTypeMetadata2) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, a1);
    os_unfair_lock_unlock(v13);
    return;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, &v8[*(int *)(TupleTypeMetadata2 + 48)], v9);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v8, v2);
  uint64_t v16 = *(void *)(*v1 + 152LL);
  uint64_t v17 = *(void *)((char *)v1 + v16);
  if (v17 != 0x8000000000000000LL)
  {
    if (v17 < 0)
    {
      __break(1u);
    }

    else if (v17)
    {
      *(void *)((char *)v1 + v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17 - 1;
      goto LABEL_7;
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

void Publishers.Retry.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = AssociatedTypeWitness;
  uint64_t v12 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  uint64_t v16 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  unint64_t v15 = (char *)v11 - v8;
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t v10 = *(void *)(v2 + 104);
  uint64_t v17 = v4;
  uint64_t v18 = v9;
  v11[4] = v3;
  uint64_t v19 = v3;
  uint64_t v20 = v10;
  v11[8] = v10;
  type metadata accessor for Publishers.Retry.Inner.State();
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Retry<A>.Inner<A1>()
{
}

  ;
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Retry<A>.Inner<A1>()
{
}

  ;
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Retry<A>.Inner<A1>( uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Retry<A>.Inner<A1>()
{
}

  ;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Retry<A>.Inner<A1>()
{
}

  ;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Retry<A>( uint64_t a1)
{
}

uint64_t static Publishers.Retry<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Publishers.Retry(0LL, a3, a4, a4);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v24 - v11;
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v14(v12, a1, v6);
  v14(v10, a2, v6);
  if ((v13 & 1) != 0)
  {
    unint64_t v15 = &v12[*(int *)(v6 + 36)];
    uint64_t v16 = *(void *)v15;
    char v17 = v15[8];
    uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v12, v6);
    uint64_t v19 = &v10[*(int *)(v6 + 36)];
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = v19[8];
    v18(v10, v6);
    if ((v17 & 1) == 0) {
      return (v16 == v20) & ~(_DWORD)v21;
    }
  }

  else
  {
    BOOL v22 = *(void (**)(char *, uint64_t))(v7 + 8);
    v22(v10, v6);
    v22(v12, v6);
    return 0LL;
  }

  return v21;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Retry<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Publishers.Retry<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t type metadata completion function for Publishers.Retry()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Retry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    char v11 = *(_BYTE *)(v10 + 8);
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)unint64_t v12 = *(void *)v10;
    *(_BYTE *)(v12 + 8) = v11;
  }

  return v4;
}

uint64_t initializeWithCopy for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  char v9 = *(_BYTE *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithCopy for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  char v9 = *(_BYTE *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t initializeWithTake for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  char v9 = *(_BYTE *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithTake for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  char v9 = *(_BYTE *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Retry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0LL;
  }

  unint64_t v6 = ((*(void *)(v4 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 9;
  unsigned int v7 = (a2 - v5 + 255) >> (8 * v6);
  else {
    unsigned int v8 = 2;
  }
  if (v8 >= 0x10000) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = 2;
  }
  if (v8 < 0x100) {
    unsigned int v9 = 1;
  }
  if (v8 >= 2) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_183B5F32C + 4 * byte_183BA4140[v10]))();
}

void storeEnumTagSinglePayload for Publishers.Retry(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 9;
  if (v7 >= a3)
  {
    int v12 = 0u;
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }

  else
  {
    unsigned int v9 = (a3 - v7 + 255) >> (8 * v8);
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    if (v7 >= a2) {
LABEL_14:
    }
      __asm { BR              X11 }
  }

  else {
    unsigned int v13 = (~(_BYTE)v7 + a2);
  }
  bzero(a1, v8);
  if ((_DWORD)v8 == 1) {
    *a1 = v13;
  }
  else {
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }

void sub_183B5F4A4()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B5F4AC(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v1, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B5F4B4LL);
  }
}

void sub_183B5F4D0()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B5F4D8()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

uint64_t sub_183B5F4E0(uint64_t a1, int a2)
{
  *(_WORD *)(v4 + (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v2, *(void *)(v10 - 120), v5) = 0;
  if (!a2) {
    JUMPOUT(0x183B5F4E8LL);
  }
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

void type metadata completion function for Publishers.Retry.Inner()
{
}

void type metadata accessor for Publishers.Retry.Inner.State()
{
}

uint64_t getEnumTagSinglePayload for Publishers.Retry.Chances(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for Publishers.Retry.Chances(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for Publishers.Retry.Chances(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t destructiveInjectEnumTag for Publishers.Retry.Chances(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

uint64_t type metadata accessor for Publishers.Retry.Chances(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Publishers.Retry.Chances);
}

uint64_t type metadata completion function for Publishers.Retry.Inner.State()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }

    else
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0LL;
    }
  }

  return v0;
}

void *initializeBufferWithCopyOfBuffer for Publishers.Retry.Inner.State( void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 64) + v10;
  uint64_t v12 = (v11 & ~v10) + *(void *)(v8 + 64);
  uint64_t v13 = *(unsigned int *)(v7 + 84);
  int v14 = v9 | v13;
  else {
    size_t v15 = v12 + 1;
  }
  uint64_t v16 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v8 + 80));
  if (v16 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
    return a1;
  }

  uint64_t v20 = ~v10;
  uint64_t v24 = v20;
  if (!v14)
  {
    if (!*((_BYTE *)a2 + v12)) {
      goto LABEL_28;
    }
    int v21 = (*((unsigned __int8 *)a2 + v12) - 1) << (8 * v12);
    if ((_DWORD)v12)
    {
      else {
        int v22 = 4;
      }
      __asm { BR              X11 }
    }

    if (v21 == -1) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }

  if (v13 >= v9)
  {
LABEL_26:
    memcpy(a1, a2, v15);
    return a1;
  }

uint64_t destroy for Publishers.Retry.Inner.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(v3 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v5 + 64) + v9;
  if (v8 | v6)
  {
    if (v6 >= v8)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v5 + 48))(a1);
      if (!(_DWORD)result)
      {
LABEL_15:
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))((v11 + a1) & v10, v3);
      }
    }

    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 48))( (v11 + a1) & v10,  *(unsigned int *)(v7 + 84),  v3);
      if (!(_DWORD)result) {
        goto LABEL_15;
      }
    }
  }

  else
  {
    uint64_t v13 = (v11 & ~v9) + *(void *)(v7 + 64);
    if (!*(_BYTE *)(a1 + v13)) {
      goto LABEL_15;
    }
    int v14 = (*(unsigned __int8 *)(a1 + v13) - 1) << (8 * v13);
    if ((_DWORD)v13)
    {
      __asm { BR              X11 }
    }

    uint64_t result = (v14 + 1);
    if (v14 == -1) {
      goto LABEL_15;
    }
  }

  return result;
}

_BYTE *initializeWithCopy for Publishers.Retry.Inner.State(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
    }

    else if (!(*(unsigned int (**)(unint64_t, void, void))(v9 + 48))( (unint64_t)&a2[v13] & v12,  *(unsigned int *)(v9 + 84),  *(void *)(a3 + 24)))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( (unint64_t)&a1[v13] & v12,  (unint64_t)&a2[v13] & v12,  v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }

  else
  {
    if (!a2[v14]) {
      goto LABEL_19;
    }
    int v16 = (a2[v14] - 1) << (8 * v14);
    if ((_DWORD)v14)
    {
      else {
        int v17 = 4;
      }
      __asm { BR              X11 }
    }

    if (v16 == -1) {
      goto LABEL_19;
    }
  }

  if (v15) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  memcpy(a1, a2, v18);
  return a1;
}

_BYTE *assignWithCopy for Publishers.Retry.Inner.State(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  uint64_t v38 = v13;
  uint64_t v39 = v5;
  uint64_t v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      uint64_t v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      int v30 = v29(a1, v8, v6);
      int v24 = v29(a2, v8, v6);
      uint64_t v3 = a2;
      if (v30)
      {
LABEL_4:
        if (!v24) {
          goto LABEL_36;
        }
        goto LABEL_30;
      }
    }

    else
    {
      unint64_t v16 = (unint64_t)&a1[v13] & v12;
      uint64_t v35 = *(void *)(a3 + 16);
      __int128 v36 = v4;
      size_t v17 = (v13 & ~v11) + *(void *)(v9 + 64);
      int v18 = v10 | v8;
      uint64_t v19 = ~v11;
      int v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      uint64_t v22 = *(void *)(v7 + 64) + v11;
      int v23 = v21(v16, v10, v5);
      int v24 = v21((unint64_t)&a2[v22] & v19, v10, v5);
      uint64_t v3 = a2;
      uint64_t v12 = v19;
      int v15 = v18;
      size_t v14 = v17;
      uint64_t v6 = v35;
      uint64_t v4 = v36;
      if (v23) {
        goto LABEL_4;
      }
    }

    uint64_t v7 = v37;
    if (!v24)
    {
LABEL_34:
      (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 24))(v4, v3, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))( (unint64_t)&v4[v38] & v12,  ((unint64_t)v3 + v38) & v12,  v39);
      return v4;
    }

_BYTE *initializeWithTake for Publishers.Retry.Inner.State(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
    }

    else if (!(*(unsigned int (**)(unint64_t, void, void))(v9 + 48))( (unint64_t)&a2[v13] & v12,  *(unsigned int *)(v9 + 84),  *(void *)(a3 + 24)))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))( (unint64_t)&a1[v13] & v12,  (unint64_t)&a2[v13] & v12,  v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }

  else
  {
    if (!a2[v14]) {
      goto LABEL_19;
    }
    int v16 = (a2[v14] - 1) << (8 * v14);
    if ((_DWORD)v14)
    {
      else {
        int v17 = 4;
      }
      __asm { BR              X11 }
    }

    if (v16 == -1) {
      goto LABEL_19;
    }
  }

  if (v15) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  memcpy(a1, a2, v18);
  return a1;
}

_BYTE *assignWithTake for Publishers.Retry.Inner.State(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  uint64_t v38 = v13;
  uint64_t v39 = v5;
  uint64_t v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      uint64_t v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      int v30 = v29(a1, v8, v6);
      int v24 = v29(a2, v8, v6);
      uint64_t v3 = a2;
      if (v30)
      {
LABEL_4:
        if (!v24) {
          goto LABEL_36;
        }
        goto LABEL_30;
      }
    }

    else
    {
      unint64_t v16 = (unint64_t)&a1[v13] & v12;
      uint64_t v35 = *(void *)(a3 + 16);
      __int128 v36 = v4;
      size_t v17 = (v13 & ~v11) + *(void *)(v9 + 64);
      int v18 = v10 | v8;
      uint64_t v19 = ~v11;
      int v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      uint64_t v22 = *(void *)(v7 + 64) + v11;
      int v23 = v21(v16, v10, v5);
      int v24 = v21((unint64_t)&a2[v22] & v19, v10, v5);
      uint64_t v3 = a2;
      uint64_t v12 = v19;
      int v15 = v18;
      size_t v14 = v17;
      uint64_t v6 = v35;
      uint64_t v4 = v36;
      if (v23) {
        goto LABEL_4;
      }
    }

    uint64_t v7 = v37;
    if (!v24)
    {
LABEL_34:
      (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 40))(v4, v3, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))( (unint64_t)&v4[v38] & v12,  ((unint64_t)v3 + v38) & v12,  v39);
      return v4;
    }

uint64_t getEnumTagSinglePayload for Publishers.Retry.Inner.State(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    uint64_t v10 = *(void *)(v6 + 64);
  }

  else
  {
    unsigned int v9 = 0;
    uint64_t v10 = *(void *)(v6 + 64) + 1LL;
  }

  if (!a2) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v4 + 64) + v11;
  int v13 = a2 - v9;
  if (a2 > v9)
  {
    uint64_t v14 = v10 + (v12 & ~v11);
    char v15 = 8 * v14;
    unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)(a1 + v14);
      if (v16) {
        goto LABEL_17;
      }
    }

    else
    {
      if (v17 <= 0xFF)
      {
        if (v17 < 2) {
          goto LABEL_26;
        }
LABEL_10:
        int v16 = *(unsigned __int8 *)(a1 + v14);
        if (!*(_BYTE *)(a1 + v14)) {
          goto LABEL_26;
        }
LABEL_17:
        int v18 = (v16 - 1) << v15;
        if ((_DWORD)v14)
        {
          else {
            int v19 = 4;
          }
          __asm { BR              X12 }
        }

        return v9 + v18 + 1;
      }

      int v16 = *(unsigned __int16 *)(a1 + v14);
      if (*(_WORD *)(a1 + v14)) {
        goto LABEL_17;
      }
    }
  }

void storeEnumTagSinglePayload for Publishers.Retry.Inner.State( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5 = 0u;
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84)) {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  else {
    int v8 = *(_DWORD *)(v7 + 84);
  }
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v6 + 64) + v10;
  uint64_t v12 = *(void *)(v7 + 64);
  if (v8) {
    size_t v13 = (v11 & ~v10) + v12;
  }
  else {
    size_t v13 = (v11 & ~v10) + v12 + 1;
  }
  if (a3 > v9)
  {
    if (v13 > 3)
    {
      unsigned int v5 = 1u;
      if (v9 >= a2) {
LABEL_26:
      }
        __asm { BR              X0 }

LABEL_19:
      unsigned int v15 = ~v9 + a2;
      if (v13 < 4)
      {
        if ((_DWORD)v13)
        {
          int v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, v13);
          if ((_DWORD)v13 == 3)
          {
            *a1 = v16;
            *((_BYTE *)a1 + 2) = BYTE2(v16);
          }

          else if ((_DWORD)v13 == 2)
          {
            *a1 = v16;
          }

          else
          {
            *(_BYTE *)a1 = v16;
          }
        }
      }

      else
      {
        bzero(a1, v13);
        *(_DWORD *)a1 = v15;
      }

      __asm { BR              X10 }
    }

    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      unsigned int v5 = 4u;
      if (v9 >= a2) {
        goto LABEL_26;
      }
      goto LABEL_19;
    }

    if (v14 >= 0x100) {
      unsigned int v5 = 2;
    }
    else {
      unsigned int v5 = v14 > 1;
    }
  }

  if (v9 >= a2) {
    goto LABEL_26;
  }
  goto LABEL_19;
}

    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    return a1;
  }

  if (v31 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_19;
  }

  int v32 = v30[1];
  *uint64_t v29 = v31;
  v29[1] = v32;
  swift_retain();
  swift_release();
  return a1;
}

    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    return a1;
  }

  if (v31 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_19;
  }

  int v32 = v30[1];
  *uint64_t v29 = v31;
  v29[1] = v32;
  swift_release();
  return a1;
}

void sub_183B607D4()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B607DC()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
}

void sub_183B60820()
{
  *uint64_t v0 = v1;
}

void sub_183B60828()
{
  *(_WORD *)uint64_t v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_183B60838()
{
  *uint64_t v0 = v1;
}

uint64_t getEnumTag for Publishers.Retry.Inner.State(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unsigned int v3 = *(_DWORD *)(v2 + 84);
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v2 + 64) + v6;
  if (v5 | v3)
  {
    if (v3 >= v5) {
      return (*(uint64_t (**)(uint64_t, void))(v2 + 48))(a1, *(unsigned int *)(v2 + 84));
    }
    else {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((v7 + a1) & ~v6);
    }
  }

  else
  {
    uint64_t v9 = (v7 & ~v6) + *(void *)(v4 + 64);
    if (*(_BYTE *)(a1 + v9))
    {
      int v10 = (*(unsigned __int8 *)(a1 + v9) - 1) << (8 * v9);
      if ((_DWORD)v9)
      {
        return ((uint64_t (*)(void))((char *)&loc_183B608E0 + 4 * byte_183BA4189[(v9 - 1)]))();
      }

      else
      {
        return (v10 + 1);
      }
    }

    else
    {
      return 0LL;
    }
  }

void destructiveInjectEnumTag for Publishers.Retry.Inner.State(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  uint64_t v11 = (v10 & ~v9) + *(void *)(v6 + 64);
  if (v8 >= a2)
  {
    if (v8)
    {
      if (!a2) {
        return;
      }
    }

    else
    {
      a1[v11] = 0;
      if (!a2) {
        return;
      }
    }

    if (v5 >= v7)
    {
      unsigned int v15 = *(void (**)(_BYTE *))(v4 + 56);
    }

    else
    {
      a1 = (_BYTE *)((unint64_t)&a1[v10] & ~v9);
      unsigned int v15 = *(void (**)(_BYTE *))(v6 + 56);
    }

    v15(a1);
    return;
  }

  unsigned int v12 = ~v8 + a2;
  if (v11 >= 4)
  {
    bzero(a1, (v10 & ~v9) + *(void *)(v6 + 64));
    *(_DWORD *)unsigned int v3 = v12;
    LOBYTE(v13) = 1;
    if (v8) {
      return;
    }
    goto LABEL_23;
  }

  int v13 = (v12 >> (8 * v11)) + 1;
  if (!(_DWORD)v11)
  {
LABEL_22:
    if (v8) {
      return;
    }
    goto LABEL_23;
  }

  int v14 = v12 & ~(-1 << (8 * v11));
  bzero(a1, (v10 & ~v9) + *(void *)(v6 + 64));
  if ((_DWORD)v11 == 3)
  {
    *(_WORD *)unsigned int v3 = v14;
    void v3[2] = BYTE2(v14);
    goto LABEL_22;
  }

  if ((_DWORD)v11 == 2)
  {
    *(_WORD *)unsigned int v3 = v14;
    if (v8) {
      return;
    }
    goto LABEL_23;
  }

  *unsigned int v3 = v14;
  if (!v8) {
LABEL_23:
  }
    v3[v11] = v13;
}

void Publishers.Retry.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x7972746552LL;
  a1[1] = 0xE500000000000000LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Retry<A>.Inner<A1>()
{
  return 0x7972746552LL;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Retry<A>.Inner<A1>( void *a1@<X8>)
{
}

uint64_t type metadata completion function for ContinuationSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }

  return swift_task_switch();
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  int v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withUnsafeContinuation<A>(isolation:_:);
  uint64_t v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }

  return swift_task_switch();
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)()
{
  int v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = withUnsafeThrowingContinuation<A>(isolation:_:);
  uint64_t v2 = swift_continuation_init();
  v1(v2);
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;
  int v1 = *v0;
  if (*(void *)(v1 + 48)) {
    swift_willThrow();
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ContinuationSubscriber.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + outlined destroy of Subscription?(v0 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0LL;
  unsigned int v3 = (_DWORD *)swift_slowAlloc();
  *unsigned int v3 = 0;
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  return v2;
}

uint64_t ContinuationSubscriber.init(_:)(uint64_t a1)
{
  *(_OWORD *)(v1 + outlined destroy of Subscription?(v0 + 32) = 0u;
  *(_OWORD *)(v1 + outlined destroy of SubscriptionStatus(v0 + 48) = 0u;
  *(_OWORD *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
  unsigned int v3 = (_DWORD *)swift_slowAlloc();
  *unsigned int v3 = 0;
  *(void *)(v1 + 64) = v3;
  *(void *)(v1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1;
  return v1;
}

uint64_t ContinuationSubscriber.deinit()
{
  return v0;
}

uint64_t ContinuationSubscriber.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void type metadata accessor for ContinuationSubscriber()
{
}

uint64_t ContinuationSubscriber.receive(subscription:)(void *a1)
{
  unsigned int v3 = *(os_unfair_lock_s **)(v1 + 64);
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + 24;
  swift_beginAccess();
  outlined init with copy of Subscription?(v1 + 24, (uint64_t)v11);
  uint64_t v5 = v12;
  outlined destroy of Subscription?((uint64_t)v11);
  if (v5)
  {
    os_unfair_lock_unlock(v3);
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8LL))(v7);
  }

  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(1LL, v9, v10);
  }

uint64_t ContinuationSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80LL);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v7);
  uint64_t v8 = v1[2];
  if (v8)
  {
    v1[2] = 0LL;
    os_unfair_lock_unlock(v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    UnsafeContinuation.resume(returning:)((uint64_t)v6, v8, v3);
  }

  else
  {
    os_unfair_lock_unlock(v7);
  }

  return 0LL;
}

void ContinuationSubscriber.handleFailure(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96LL);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v3 + 88);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v12);
  uint64_t v13 = v1[2];
  if (v13)
  {
    v1[2] = 0LL;
    os_unfair_lock_unlock(v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
    swift_dynamicCast();
    UnsafeContinuation.resume(throwing:)((uint64_t)v7, v13, *(void *)(v3 + 80), v4);
  }

  else
  {
    os_unfair_lock_unlock(v12);
  }

uint64_t ContinuationSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 88LL);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) + 16;
  uint64_t v9 = type metadata accessor for Subscribers.Completion(0LL, v3, *(void *)(v7 + 104), v8);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v16 - v11 + 16;
  uint64_t v13 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v13);
  uint64_t v17 = 0LL;
  memset(v16, 0, sizeof(v16));
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v16, (uint64_t)(v1 + 3));
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1LL, v3) == 1)
  {
    os_unfair_lock_unlock(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    os_unfair_lock_unlock(v13);
    ContinuationSubscriber.handleFailure(_:)((uint64_t)v6);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

uint64_t static ContinuationSubscriber.withUnsafeSubscription<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  _OWORD v5[3] = a2;
  v5[4] = a3;
  __int128 v5[2] = a1;
  return swift_task_switch();
}

uint64_t static ContinuationSubscriber.withUnsafeSubscription<A>(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  uint64_t v6 = v1[10];
  __int128 v5[2] = v6;
  _OWORD v5[3] = v1[11];
  v5[4] = v3;
  v5[5] = v1[13];
  v5[6] = v2;
  v5[7] = v4;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = static ContinuationSubscriber.withUnsafeSubscription<A>(_:);
  return ((uint64_t (*)(void, void, void, uint64_t (*)(uint64_t), void *, uint64_t))v9)( v0[2],  0LL,  0LL,  partial apply for closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:),  v5,  v6);
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:)()
{
}

uint64_t sub_183B61430(uint64_t a1)
{
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + outlined destroy of Subscription?(v0 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(void *)(v5 + 56) = 0LL;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  uint64_t v9 = v5;
  uint64_t v7 = MEMORY[0x186E22960](&protocol conformance descriptor for ContinuationSubscriber<A, B, C>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v2, a1, v1, v7);
  return swift_release();
}

uint64_t static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  _OWORD v5[3] = a2;
  v5[4] = a3;
  __int128 v5[2] = a1;
  return swift_task_switch();
}

uint64_t static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  uint64_t v6 = v1[10];
  __int128 v5[2] = v6;
  _OWORD v5[3] = v1[11];
  v5[4] = v3;
  v5[5] = v1[13];
  v5[6] = v2;
  v5[7] = v4;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:);
  return ((uint64_t (*)(void, void, void, uint64_t (*)(uint64_t), void *, uint64_t))v9)( v0[2],  0LL,  0LL,  partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:),  v5,  v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + __swift_destroy_boxed_opaque_existential_1(v0 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)()
{
}

uint64_t sub_183B616E4(uint64_t a1)
{
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + outlined destroy of Subscription?(v0 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(void *)(v5 + 56) = 0LL;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  uint64_t v9 = v5;
  uint64_t v7 = MEMORY[0x186E22960](&protocol conformance descriptor for ContinuationSubscriber<A, B, C>, a1);
  Publisher.subscribe<A>(_:)((uint64_t)&v9, v2, a1, v1, v7);
  return swift_release();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance ContinuationSubscriber<A, B, C>( void *a1)
{
  return ContinuationSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance ContinuationSubscriber<A, B, C>( uint64_t a1)
{
  return 0LL;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance ContinuationSubscriber<A, B, C>( uint64_t a1)
{
  return ContinuationSubscriber.receive(completion:)(a1);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in ContinuationSubscriber<A, B, C>( uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)( uint64_t a1)
{
  return partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:));
}

uint64_t partial apply for closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:)( uint64_t a1)
{
  return partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:));
}

uint64_t partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[7], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void Publisher.mapError<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)v13 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v6);
  v13[0] = a3;
  v13[1] = a4;
  void v13[2] = a5;
  void v13[3] = a6;
  type metadata accessor for Publishers.MapError();
}

uint64_t sub_183B61894(uint64_t a1)
{
  uint64_t v7 = (void *)(v4 + *(int *)(a1 + 52));
  *uint64_t v7 = v3;
  v7[1] = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v1);
  return swift_retain();
}

void Publishers.MapError.init(upstream:_:)()
{
}

uint64_t sub_183B6191C(uint64_t a1)
{
  uint64_t v6 = (void *)(v5 + *(int *)(a1 + 52));
  *uint64_t v6 = v3;
  v6[1] = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))(v5, v4, v1);
}

void type metadata accessor for Publishers.MapError()
{
}

uint64_t Publishers.MapError.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.MapError.transform.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  swift_retain();
  return v2;
}

void Publishers.MapError.init(upstream:transform:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B61A14(uint64_t result)
{
  uint64_t v4 = (void *)(v3 + *(int *)(result + 52));
  *uint64_t v4 = v2;
  v4[1] = v1;
  return result;
}

void Publishers.MapError.receive<A>(subscriber:)(uint64_t a1)
{
}

void sub_183B61AB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v12 - 128) = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&a9 - v13;
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v11, *(void *)(v12 - 144), v10);
  swift_retain();
  Publishers.MapError.Inner.init(downstream:map:)(v11, v10, (uint64_t)v14);
}

uint64_t sub_183B61B38()
{
  uint64_t v5 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.MapError<A, B>.Inner<A1>, v3);
  Publisher.subscribe<A>(_:)(v2, v0, v3, v1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 128) + 8LL))(v2, v3);
}

void type metadata accessor for Publishers.MapError.Inner()
{
}

void Publishers.MapError.Inner.init(downstream:map:)( uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
}

void sub_183B61C10(uint64_t a1)
{
  uint64_t v4 = (void *)(v1 + *(int *)(a1 + 60));
  *uint64_t v4 = v3;
  v4[1] = v2;
  uint64_t v5 = *(int *)(a1 + 64);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v7 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }

  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v6);
    *(void *)(v1 + (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v2, *(void *)(v10 - 120), v5) = v7;
  }

void Publishers.MapError.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x726F72724570614DLL;
  a1[1] = 0xE800000000000000LL;
}

uint64_t Publishers.MapError.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 48) + 48LL))(a1, *(void *)(a2 + 32));
}

uint64_t Publishers.MapError.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v23 = *(void *)(a2 + 32);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v22 = type metadata accessor for Subscribers.Completion(0LL, v8, AssociatedConformanceWitness, v10);
  uint64_t v11 = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, v14, v15);
  MEMORY[0x1895F8858](v16);
  int v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v21 - v17, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v18, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v13, 1LL, 1LL, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 56))(v13, v23, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v22);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v18, AssociatedTypeWitness);
    (*(void (**)(char *))(v24 + *(int *)(a2 + 60)))(v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v13, 0LL, 1LL, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 56))(v13, v23, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  }

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapError<A, B>.Inner<A1>()
{
  return 0x726F72724570614DLL;
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapError<A, B>( uint64_t a1)
{
}

uint64_t type metadata completion function for Publishers.MapError()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.MapError(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B6204C + 4 * byte_183BA4440[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapError( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B621C4()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B6223CLL);
}

void sub_183B621CC(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v1, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B621D4LL);
  }
  JUMPOUT(0x183B6223CLL);
}

void sub_183B62214()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B6223CLL);
}

void sub_183B6221C()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B6223CLL);
}

uint64_t sub_183B62224(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B6223CLL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B62238LL);
    }
    JUMPOUT(0x183B62230LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t getEnumTagSinglePayload for Publishers.MapError.Inner(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_183B622D8 + 4 * byte_183BA444F[v10]))();
  }

void storeEnumTagSinglePayload for Publishers.MapError.Inner( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 32) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183B62458()
{
  *(_BYTE *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B624D0LL);
}

void sub_183B62460(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v1, v3) = 0;
  if (a2) {
    JUMPOUT(0x183B62468LL);
  }
  JUMPOUT(0x183B624D0LL);
}

void sub_183B624A8()
{
  *(_WORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B624D0LL);
}

void sub_183B624B0()
{
  *(_DWORD *)(v0 + (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1) = v2;
  JUMPOUT(0x183B624D0LL);
}

uint64_t sub_183B624B8(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v7, *(void *)(v10 - 152) + *(int *)(v4 + 52), v6) = 0;
  if (!a2) {
    JUMPOUT(0x183B624D0LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183B624CCLL);
    }
    JUMPOUT(0x183B624C4LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void Publisher.throttle<A>(for:scheduler:latest:)( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v27 = a6;
  int v26 = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a7;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v18 = (char *)&v22 - v17;
  MEMORY[0x1895F8858](v16);
  unsigned int v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v8, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v23, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v24, a5);
  Publishers.Throttle.init(upstream:interval:scheduler:latest:)((uint64_t)v20, a4, v25);
}

  ;
}

void Publishers.Throttle.init(upstream:interval:scheduler:latest:)( uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t sub_183B62700(int *a1)
{
  uint64_t v7 = v3 + a1[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( v7,  v5,  AssociatedTypeWitness);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 32LL))(v3 + a1[14], v4, v2);
  *(_BYTE *)(v3 + a1[15]) = v1;
  return result;
}

void type metadata accessor for Publishers.Throttle()
{
}

uint64_t Publishers.Throttle.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t Publishers.Throttle.interval.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a2,  v4,  AssociatedTypeWitness);
}

uint64_t Publishers.Throttle.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 56));
}

uint64_t Publishers.Throttle.latest.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

void Publishers.Throttle.receive<A>(subscriber:)()
{
}

void sub_183B62914()
{
  uint64_t v3 = v0 + v1[13];
  uint64_t v4 = v0 + v1[14];
  int v5 = *(unsigned __int8 *)(v0 + v1[15]);
  swift_allocObject();
  specialized Publishers.Throttle.Inner.init(_:interval:scheduler:latest:)(v2, v3, v4, v5);
}

uint64_t sub_183B62954(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = MEMORY[0x186E22960](&protocol conformance descriptor for Publishers.Throttle<A, B>.Inner<A1>, v1);
  Publisher.subscribe<A>(_:)((uint64_t)&v6, v5, v1, v4, v2);
  return swift_release();
}

void type metadata accessor for Publishers.Throttle.Inner()
{
}

void Publishers.Throttle.Inner.Scheduling.init(interval:scheduler:latest:)( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a2,  a1,  AssociatedTypeWitness);
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

uint64_t sub_183B62A98(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v2 + *(int *)(a1 + 68),  v5,  v1);
  *(_BYTE *)(v2 + *(int *)(a1 + 72)) = v6;
  return result;
}

void Publishers.Throttle.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0x656C74746F726854LL;
  a1[1] = 0xE800000000000000LL;
}

void Publishers.Throttle.Inner.deinit()
{
}

uint64_t sub_183B62B7C(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 160LL);
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 168LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(v5, AssociatedTypeWitness);
  return v1;
}

void Publishers.Throttle.Inner.__deallocating_deinit()
{
}

uint64_t sub_183B62C48()
{
  return swift_deallocClassInstance();
}

void Publishers.Throttle.Inner.request(_:)(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = v2[14];
  uint64_t v4 = v2[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[3] = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  v15[4] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v5);
  uint64_t v17 = (char *)v15 - v8;
  uint64_t v24 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v7);
  int v18 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = v2[15];
  uint64_t v11 = v2[12];
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  unsigned int v20 = (char *)v15 - v12;
  uint64_t v13 = v2[10];
  uint64_t v14 = v2[13];
  uint64_t v25 = v13;
  uint64_t v26 = v4;
  uint64_t v27 = v11;
  uint64_t v28 = v14;
  uint64_t v29 = v3;
  uint64_t v30 = v10;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_183B62DDC(uint64_t a1)
{
  *(void *)(v7 - 136) = v4;
  *(void *)(v7 - 128) = v1;
  *(void *)(v7 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v1;
  *(void *)(v7 - 208) = v3;
  *(void *)(v7 - 120) = v5;
  *(void *)(v7 - 112) = v2;
  *(void *)(v7 - 104) = v3;
  *(void *)(v7 - 96) = v6;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

void sub_183B62E24(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = (os_unfair_lock_s *)v1[2];
  *(void *)(v6 - 192) = v11;
  os_unfair_lock_lock(v11);
  uint64_t v12 = (char *)v1 + *(void *)(*v1 + 144LL);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v3, v12, v5);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v5);
LABEL_11:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 192));
    return;
  }

  *(void *)(v6 - 136) = a1;
  *(void *)(v6 - 128) = v4;
  *(void *)(v6 - 120) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  uint64_t v13 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion(255LL, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  *(void *)(v6 - 112) = type metadata accessor for Optional();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  *(void *)(v6 - 304) = v3 + TupleTypeMetadata[12];
  uint64_t v18 = v3 + TupleTypeMetadata[16];
  uint64_t v19 = v3 + TupleTypeMetadata[20];
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v10, v3, a1);
  uint64_t v21 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48LL))(v19, 1LL, v21) != 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, a1);
    uint64_t v32 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8LL))(v19, v32);
    __swift_destroy_boxed_opaque_existential_1(v18);
    (*(void (**)(void, uint64_t))(*(void *)(v4 - 8) + 8LL))(*(void *)(v6 - 304), v4);
    goto LABEL_11;
  }

  *(void *)(v6 - 312) = v13;
  uint64_t v22 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v19, v22);
  __swift_destroy_boxed_opaque_existential_1(v18);
  (*(void (**)(void, uint64_t))(*(void *)(v4 - 8) + 8LL))(*(void *)(v6 - 304), v4);
  uint64_t v23 = *v1;
  uint64_t v24 = *(void *)(*v1 + 152LL);
  uint64_t v25 = *(void *)((char *)v1 + v24);
  unint64_t v26 = 0x8000000000000000LL;
  uint64_t v28 = *(void *)(v6 - 208);
  uint64_t v27 = *(void *)(v6 - 200);
  uint64_t v29 = v10;
  uint64_t v30 = *(void *)(v6 - 216);
  if (v25 != 0x8000000000000000LL)
  {
    uint64_t v31 = *(void *)(v6 - 256);
    if (v31 != 0x8000000000000000LL)
    {
      if ((v25 | v31) < 0)
      {
        __break(1u);
        goto LABEL_22;
      }

      unint64_t v26 = v25 + v31;
      if (!__OFADD__(v25, v31))
      {
        if ((v26 & 0x8000000000000000LL) == 0) {
          goto LABEL_13;
        }
LABEL_22:
        __break(1u);
        return;
      }

      unint64_t v26 = 0x8000000000000000LL;
    }

void Publishers.Throttle.Inner.emitToDownstream()()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 120LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 96LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v31 = type metadata accessor for Subscribers.Completion(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  uint64_t v25 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31);
  uint64_t v24 = (char *)v21 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  _BYTE v21[8] = (char *)v21 - v9;
  uint64_t v10 = v1[14];
  uint64_t v11 = v1[11];
  uint64_t v22 = swift_getAssociatedTypeWitness();
  v21[17] = *(void *)(v22 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v22);
  v21[13] = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  _BYTE v21[16] = (char *)v21 - v14;
  uint64_t v26 = v8;
  uint64_t v30 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v30 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v30);
  uint64_t v23 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  v21[10] = (char *)v21 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v28 = (char *)v21 - v19;
  uint64_t v20 = v1[13];
  uint64_t v32 = v1[10];
  uint64_t v33 = v11;
  uint64_t v34 = v3;
  uint64_t v35 = v20;
  uint64_t v36 = v10;
  uint64_t v37 = v2;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_183B63590( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  *(void *)(v15 - 384) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = type metadata accessor for Optional();
  *(void *)(v15 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
  *(void *)(v15 - 240) = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  *(void *)(v15 - 304) = (char *)&a9 - v21;
  uint64_t v22 = MEMORY[0x1895F8858](v20);
  *(void *)(v15 - 208) = (char *)&a9 - v23;
  *(void *)(v15 - 2outlined destroy of SubscriptionStatus(v0 + 48) = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v22);
  *(void *)(v15 - 2outlined destroy of Subscription?(v0 + 32) = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v15 - 136) = v12;
  *(void *)(v15 - 128) = v11;
  *(void *)(v15 - 368) = v11;
  *(void *)(v15 - 2outlined destroy of Subscription?(v0 + 24) = v14;
  *(void *)(v15 - 120) = v14;
  *(void *)(v15 - 112) = v10;
  *(void *)(v15 - 360) = v13;
  *(void *)(v15 - 104) = v13;
  *(void *)(v15 - 96) = v9;
  *(void *)(v15 - 312) = v9;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

void sub_183B636D4(uint64_t a1)
{
  uint64_t v7 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v80 - v8;
  uint64_t v10 = *(void **)(v5 - 192);
  uint64_t v11 = (os_unfair_lock_s *)v10[2];
  os_unfair_lock_lock(v11);
  uint64_t v12 = (char *)v10 + *(void *)(*v10 + 144LL);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v4, v12, v2);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
LABEL_7:
    os_unfair_lock_unlock(v11);
    return;
  }

  *(void *)(v5 - 456) = v12;
  *(void *)(v5 - 4outlined destroy of SubscriptionStatus(v0 + 48) = v3;
  *(void *)(v5 - 440) = v2;
  *(void *)(v5 - 4outlined destroy of Subscription?(v0 + 24) = v1;
  *(void *)(v5 - 408) = v11;
  uint64_t v13 = *(void *)(v5 - 224);
  *(void *)(v5 - 136) = a1;
  *(void *)(v5 - 128) = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  uint64_t v15 = *(void *)(v5 - 216);
  *(void *)(v5 - 120) = v14;
  *(void *)(v5 - 112) = v15;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v17 = v4 + TupleTypeMetadata[12];
  uint64_t v18 = a1;
  uint64_t v19 = v4 + TupleTypeMetadata[16];
  uint64_t v20 = v4 + TupleTypeMetadata[20];
  uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 32);
  *(void *)(v5 - 392) = v18;
  v21(v9, v4);
  uint64_t v22 = *(void *)(v5 - 248);
  uint64_t v23 = *(void *)(v5 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v23, v17, v13);
  uint64_t v24 = *(void *)(v5 - 240);
  uint64_t v25 = *(void *)(v5 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v25, v20, v15);
  __swift_destroy_boxed_opaque_existential_1(v19);
  uint64_t v26 = *(uint64_t **)(v5 - 192);
  uint64_t v27 = *v26;
  uint64_t v28 = *(void *)(*v26 + 176);
  if (*((_BYTE *)v26 + v28) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v13);
    (*(void (**)(char *, void))(v7 + 8))(v9, *(void *)(v5 - 392));
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v15);
    uint64_t v11 = *(os_unfair_lock_s **)(v5 - 408);
    goto LABEL_7;
  }

  *(void *)(v5 - 4outlined destroy of Subscription?(v0 + 32) = v9;
  *(void *)(v5 - 464) = v7;
  uint64_t v29 = v26;
  uint64_t v30 = (uint64_t)v26 + *(void *)(v27 + 160);
  swift_beginAccess();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, void))(*(void *)(v5 - 264) + 16LL);
  uint64_t v32 = *(void *)(v5 - 272);
  v31(v32, v30, *(void *)(v5 - 256));
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 280) + 48LL);
  uint64_t v34 = *(void *)(v5 - 288);
  int v35 = v33(v32, 1LL, v34);
  uint64_t v36 = *(os_unfair_lock_s **)(v5 - 408);
  *(void *)(v5 - 4__swift_destroy_boxed_opaque_existential_1(v0 + 72) = v31;
  if (v35 == 1)
  {
    uint64_t v37 = v29;
    int v38 = 0;
    goto LABEL_13;
  }

  uint64_t v39 = *(void *)(*v29 + 152);
  uint64_t v37 = v29;
  uint64_t v40 = *(uint64_t *)((char *)v29 + v39);
  if (v40 == 0x8000000000000000LL) {
    goto LABEL_12;
  }
  if (v40 < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  if (v40)
  {
    *(uint64_t *)((char *)v29 + v39) = v40 - 1;
LABEL_12:
    int v38 = 1;
    uint64_t v41 = *(void *)(v5 - 400);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 280) + 56LL))(v41, 1LL, 1LL, v34);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(v5 - 264) + 40LL))(v30, v41, *(void *)(v5 - 256));
    swift_endAccess();
    goto LABEL_13;
  }

  int v38 = 0;
LABEL_13:
  uint64_t v42 = v37;
  *((_BYTE *)v37 + v28) = 0;
  unint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 296) + 48LL);
  if (v43(*(void *)(v5 - 208), 1LL, *(void *)(v5 - 200)) == 1)
  {
    uint64_t v44 = *(void *)(v5 - 376);
    (*(void (**)(void, void))(*(void *)(v5 - 360) + 40LL))( *(void *)(v5 - 368),  *(void *)(v5 - 360));
    uint64_t v45 = *(void *)(v5 - 336);
    swift_getAssociatedConformanceWitness();
    uint64_t v46 = *(void *)(v5 - 352);
    dispatch thunk of Strideable.advanced(by:)();
    uint64_t v47 = *(void *)(v5 - 344);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v44, v45);
    uint64_t v48 = (uint64_t)v42 + *(void *)(*v42 + 168);
    swift_beginAccess();
    uint64_t v49 = v48;
    uint64_t v34 = *(void *)(v5 - 288);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 40))(v49, v46, v45);
  }

  else
  {
    uint64_t v50 = *(void *)(v5 - 384);
    uint64_t v51 = *(void *)(v5 - 440);
    swift_storeEnumTagMultiPayload();
    uint64_t v52 = *(void *)(v5 - 456);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 448) + 40LL))(v52, v50, v51);
  }

  swift_endAccess();
  uint64_t v53 = *(void *)(v5 - 304);
  os_unfair_lock_unlock(v36);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v54 = *(void *)(v5 - 200);
  if (!v38) {
    goto LABEL_19;
  }
  uint64_t v55 = *(void *)(v5 - 328);
  uint64_t v56 = *(void *)(v5 - 256);
  (*(void (**)(uint64_t, void, uint64_t))(v5 - 472))(v55, *(void *)(v5 - 272), v56);
  if (v33(v55, 1LL, v34) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 264) + 8LL))(v55, v56);
LABEL_19:
    uint64_t v57 = 0LL;
    goto LABEL_21;
  }

  uint64_t v58 = *(void *)(v5 - 280);
  uint64_t v59 = *(void *)(v5 - 416);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v59, v55, v34);
  uint64_t v57 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v5 - 312) + 48LL))(v59, *(void *)(v5 - 224));
  uint64_t v60 = v59;
  uint64_t v53 = *(void *)(v5 - 304);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v34);
LABEL_21:
  uint64_t v61 = *(void *)(v5 - 216);
  uint64_t v62 = *(void *)(v5 - 208);
  uint64_t v63 = *(void *)(v5 - 240);
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16);
  v64(v53, v62, v61);
  if (v43(v53, 1LL, v54) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v53, v61);
  }

  else
  {
    uint64_t v65 = *(void *)(v5 - 296);
    uint64_t v66 = *(void *)(v5 - 320);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v66, v53, v54);
    (*(void (**)(uint64_t, void))(*(void *)(v5 - 312) + 56LL))(v66, *(void *)(v5 - 224));
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    uint64_t v62 = *(void *)(v5 - 208);
    uint64_t v68 = v66;
    uint64_t v63 = *(void *)(v5 - 240);
    v67(v68, v54);
  }

  os_unfair_recursive_lock_unlock();
  if (v57 == 0x8000000000000000LL)
  {
    uint64_t v69 = *(void *)(v5 - 424);
    uint64_t v70 = *(void *)(v5 - 216);
    v64(v69, v62, v70);
    goto LABEL_28;
  }

  if (v57 < 0)
  {
    __break(1u);
    goto LABEL_43;
  }

  uint64_t v69 = *(void *)(v5 - 424);
  uint64_t v70 = *(void *)(v5 - 216);
  v64(v69, v62, v70);
  if (!v57)
  {
    uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v72(v69, v70);
    uint64_t v74 = v70;
    uint64_t v79 = *(void *)(v5 - 224);
    goto LABEL_41;
  }

void Publishers.Throttle.Inner.cancel()()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 120LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 96LL);
  v9[5] = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  v9[4] = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  void v9[6] = (char *)v9 - v5;
  uint64_t v6 = v1[10];
  uint64_t v7 = v1[13];
  uint64_t v8 = v1[14];
  uint64_t v10 = v1[11];
  uint64_t v11 = v6;
  uint64_t v13 = v6;
  uint64_t v14 = v10;
  uint64_t v15 = v3;
  uint64_t v16 = v7;
  uint64_t v12 = v8;
  uint64_t v17 = v8;
  uint64_t v18 = v2;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_183B63F0C(uint64_t a1)
{
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](a1);
  *(void *)(v5 - 208) = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = &v16[-v10];
  uint64_t v12 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v12);
  uint64_t v13 = (char *)v1 + *(void *)(*v1 + 144LL);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v11, v13, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *(void *)(v5 - 232);
    *(void *)(v5 - 136) = *(void *)(v5 - 224);
    *(void *)(v5 - 128) = v14;
    *(void *)(v5 - 120) = v4;
    *(void *)(v5 - 112) = v2;
    *(void *)(v5 - 280) = v2;
    *(void *)(v5 - 104) = *(void *)(v5 - 216);
    *(void *)(v5 - 96) = v3;
    type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  }

  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v11, a1);
  uint64_t v15 = *(void *)(v5 - 208);
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 40))(v13, v15, a1);
  swift_endAccess();
  os_unfair_lock_unlock(v12);
}

void Publishers.Throttle.Inner.receive(subscription:)(uint64_t a1)
{
  uint64_t v11 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 112LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 88LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[9] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  void v9[7] = (char *)v9 - v5;
  uint64_t v6 = v2[12];
  uint64_t v7 = v2[13];
  uint64_t v8 = v2[15];
  uint64_t v12 = v2[10];
  uint64_t v13 = v4;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t v16 = v3;
  uint64_t v17 = v8;
  type metadata accessor for Publishers.Throttle.Inner.State();
}

void sub_183B6432C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = MEMORY[0x1895F8858](a1);
  *(void *)(v15 - 256) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  *(void *)(v15 - 176) = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v18);
  *(void *)(v15 - 200) = v11;
  *(void *)(v15 - 192) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v15 - 136) = v12;
  *(void *)(v15 - 128) = v9;
  *(void *)(v15 - 240) = v9;
  *(void *)(v15 - 208) = v10;
  *(void *)(v15 - 120) = v10;
  *(void *)(v15 - 112) = v13;
  *(void *)(v15 - 2outlined destroy of Subscription?(v0 + 24) = v14;
  *(void *)(v15 - 104) = v14;
  *(void *)(v15 - 96) = v11;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
}

uint64_t sub_183B643D4(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v11);
  uint64_t v12 = (char *)v2 + *(void *)(*v2 + 144LL);
  swift_beginAccess();
  *(void *)(v6 - 184) = v5;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v3, v12, v1);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 184) + 8LL))(v3, v1);
    os_unfair_lock_unlock(v11);
    uint64_t v13 = *(void **)(v6 - 168);
    uint64_t v14 = v13[3];
    uint64_t v15 = v13[4];
    __swift_project_boxed_opaque_existential_1(v13, v14);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v15 + 8) + 8LL))(v14);
  }

  else
  {
    *(void *)(v6 - 280) = v11;
    uint64_t v17 = *(void *)(v6 - 208);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v19 = a1;
    uint64_t v20 = v3 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    uint64_t v22 = v10;
    *(void *)(v6 - 264) = v10;
    uint64_t v23 = v19;
    *(void *)(v6 - 2__swift_destroy_boxed_opaque_existential_1(v0 + 72) = v19;
    v21(v22, v3, v19);
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v6 - 176) + 32LL))(*(void *)(v6 - 192), v20, v17);
    *(void *)(v6 - 136) = v23;
    *(void *)(v6 - 128) = v17;
    *(void *)(v6 - 120) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v25 = v17;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion(255LL, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
    *(void *)(v6 - 112) = type metadata accessor for Optional();
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    uint64_t v29 = TupleTypeMetadata[12];
    uint64_t v30 = v8;
    *(void *)(v6 - 288) = v8;
    uint64_t v31 = *(void *)(v6 - 256);
    uint64_t v32 = v31 + v29;
    uint64_t v33 = v31 + TupleTypeMetadata[16];
    *(void *)(v6 - 296) = v31 + TupleTypeMetadata[20];
    (*(void (**)(uint64_t, void, void))(v30 + 16))(v31, *(void *)(v6 - 264), *(void *)(v6 - 272));
    uint64_t v34 = v32;
    uint64_t v35 = *(void *)(v6 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 176) + 16LL))(v34, v35, v25);
    outlined init with copy of Subscription(*(void *)(v6 - 168), v33);
    uint64_t v37 = type metadata accessor for Subscribers.Completion( 0LL,  AssociatedTypeWitness,  AssociatedConformanceWitness,  v36);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))( *(void *)(v6 - 296),  1LL,  1LL,  v37);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 184) + 40LL))(v12, v31, v1);
    swift_endAccess();
    uint64_t v38 = *(void *)(v6 - 272);
    uint64_t v39 = *(void *)(v6 - 264);
    uint64_t v40 = *(void *)(v6 - 248);
    (*(void (**)(void))(*(void *)(v6 - 224) + 40LL))(*(void *)(v6 - 240));
    uint64_t v41 = (char *)v2 + *(void *)(*v2 + 168LL);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, void))(*(void *)(v6 - 232) + 40LL))(v41, v40, *(void *)(v6 - 216));
    swift_endAccess();
    *((_BYTE *)v2 + *(void *)(*v2 + 184LL)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 - 280));
    os_unfair_recursive_lock_lock_with_options();
    *(void *)(v6 - 112) = v4;
    *(void *)(v6 - 104) = &protocol witness table for Publishers.Throttle<A, B>.Inner<A1>;
    *(void *)(v6 - 136) = v2;
    uint64_t v42 = *(void *)(v6 - 200);
    unint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40);
    swift_retain();
    uint64_t v44 = v35;
    uint64_t v45 = *(void *)(v6 - 208);
    v43(v6 - 136, v45, v42);
    __swift_destroy_boxed_opaque_existential_1(v6 - 136);
    os_unfair_recursive_lock_unlock();
    uint64_t v46 = *(void **)(v6 - 168);
    uint64_t v47 = v46[3];
    uint64_t v48 = v46[4];
    __swift_project_boxed_opaque_existential_1(v46, v47);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 24))(0x8000000000000000LL, v47, v48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 176) + 8LL))(v44, v45);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 288) + 8LL))(v39, v38);
  }