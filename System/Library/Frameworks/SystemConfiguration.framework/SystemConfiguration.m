uint64_t SCNetworkCategoryGetTypeID()
{
  if (__SCNetworkCategoryInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryInitialize_initialized, &__block_literal_global);
  }
  return __kSCNetworkCategoryTypeID;
}

uint64_t SCNetworkCategoryCopyAll(const __SCPreferences *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  Categories = SCPreferencesPathKeyCreateCategories(0LL);
  Value = SCPreferencesPathGetValue(a1, Categories);
  CFRelease(Categories);
  if (Value)
  {
    context = a1;
    uint64_t v6 = 0LL;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)copyAllApplier, &context);
    return v6;
  }

  else
  {
    _SCErrorSet(1004);
    return 0LL;
  }
}

void copyAllApplier(const __CFString *a1, const void *a2, uint64_t a3)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID)
  {
    uint64_t v7 = (const void *)__SCNetworkCategoryCreate(*(const void **)a3, a1);
    Mutable = *(__CFArray **)(a3 + 8);
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      *(void *)(a3 + 8) = Mutable;
    }

    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
  }

uint64_t SCNetworkCategoryCreate(const void *a1, const __CFString *a2)
{
  v9[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = __SCNetworkCategoryCreate(a1, a2);
  if (v2)
  {
    v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v6 = (char *)v9 - ((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v7 + 4) = "SCNetworkCategoryCreate";
      *(_WORD *)(v7 + 12) = 2112;
      *(void *)(v7 + 14) = v2;
      __SC_log_send(7, (uint64_t)v3, v4, v6);
    }
  }

  return v2;
}

uint64_t __SCNetworkCategoryCreate(const void *a1, const __CFString *a2)
{
  if (__SCNetworkCategoryInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryInitialize_initialized, &__block_literal_global);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0LL, a2);
    *(void *)(Instance + 24) = CFRetain(a1);
  }

  return Instance;
}

uint64_t SCNetworkCategoryAddService(uint64_t a1, uint64_t a2, SCNetworkServiceRef service)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CategoryService = SCPreferencesPathKeyCreateCategoryService(0LL, *(void *)(a1 + 16), a2, (uint64_t)ServiceID);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), CategoryService);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    _SCErrorSet(1005);
    uint64_t v9 = 0LL;
  }

  else
  {
    v10 = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    uint64_t v9 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 24), CategoryService, v10);
    CFRelease(v10);
  }

  CFRelease(CategoryService);
  return v9;
}

uint64_t SCNetworkCategoryRemoveService(uint64_t a1, uint64_t a2, SCNetworkServiceRef service)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CategoryService = SCPreferencesPathKeyCreateCategoryService(0LL, *(void *)(a1 + 16), a2, (uint64_t)ServiceID);
  uint64_t v8 = SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(a1 + 24), CategoryService);
  SCNetworkServiceRemove(service);
  CFRelease(CategoryService);
  return v8;
}

uint64_t SCNetworkCategoryCopyServices(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  CategoryService = SCPreferencesPathKeyCreateCategoryService(0LL, *(void *)(a1 + 16), a2, 0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), CategoryService);
  CFRelease(CategoryService);
  if (Value)
  {
    uint64_t context = *(void *)(a1 + 24);
    uint64_t v7 = 0LL;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)copyServicesApplier, &context);
    return v7;
  }

  else
  {
    _SCErrorSet(1004);
    return 0LL;
  }

void copyServicesApplier(const __CFString *a1, const void *a2, SCPreferencesRef *a3)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      SCNetworkServiceRef v7 = SCNetworkServiceCopy(*a3, a1);
      if (v7)
      {
        SCNetworkServiceRef v8 = v7;
        Mutable = a3[1];
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
          a3[1] = Mutable;
        }

        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
      }
    }
  }

uint64_t SCNetworkCategoryCopyValues(uint64_t a1)
{
  v5[1] = *MEMORY[0x1895F89C0];
  Category = SCPreferencesPathKeyCreateCategory(0LL, *(void *)(a1 + 16));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), Category);
  CFRelease(Category);
  if (Value)
  {
    v5[0] = 0LL;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)copyValuesApplier, v5);
    return v5[0];
  }

  else
  {
    _SCErrorSet(1004);
    return 0LL;
  }

void copyValuesApplier(const void *a1, const void *a2, __CFArray **a3)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID)
  {
    Mutable = *a3;
    if (!*a3)
    {
      Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      *a3 = Mutable;
    }

    CFArrayAppendValue(Mutable, a1);
  }

uint64_t SCNetworkCategorySetServiceQoSMarkingPolicy( uint64_t a1, uint64_t a2, SCNetworkServiceRef service, const __CFDictionary *a4)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CategoryServiceEntity = SCPreferencesPathKeyCreateCategoryServiceEntity( 0LL,  *(void *)(a1 + 16),  a2,  (uint64_t)ServiceID,  (uint64_t)@"QoSMarkingPolicy");
  uint64_t v9 = *(const __SCPreferences **)(a1 + 24);
  if (a4) {
    uint64_t v10 = SCPreferencesPathSetValue(v9, CategoryServiceEntity, a4);
  }
  else {
    uint64_t v10 = SCPreferencesPathRemoveValue(v9, CategoryServiceEntity);
  }
  uint64_t v11 = v10;
  CFRelease(CategoryServiceEntity);
  return v11;
}

CFDictionaryRef SCNetworkCategoryGetServiceQoSMarkingPolicy( uint64_t a1, uint64_t a2, SCNetworkServiceRef service)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CategoryServiceEntity = SCPreferencesPathKeyCreateCategoryServiceEntity( 0LL,  *(void *)(a1 + 16),  a2,  (uint64_t)ServiceID,  (uint64_t)@"QoSMarkingPolicy");
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), CategoryServiceEntity);
  CFRelease(CategoryServiceEntity);
  if (!Value) {
    _SCErrorSet(1004);
  }
  return Value;
}

void __SCNetworkCategoryDeallocate(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0LL;
  }

  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0LL;
  }

uint64_t __SCNetworkCategoryEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  else {
    return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  }
}

CFHashCode __SCNetworkCategoryHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

__CFString *__SCNetworkCategoryCopyDescription(void *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<%s %p [%p]> { ID = %@ }", "SCNetworkCategory", a1, v2, a1[2]);
  return Mutable;
}

void *__SCGetThreadSpecificData()
{
  if (__SCThreadSpecificKeyInitialize_tsKeyInitialized != -1) {
    dispatch_once(&__SCThreadSpecificKeyInitialize_tsKeyInitialized, &__block_literal_global_44);
  }
  v0 = pthread_getspecific(tsDataKey);
  if (!v0)
  {
    v0 = (void *)MEMORY[0x186E08750](*MEMORY[0x189604DD0], 24LL, 0LL);
    *(_DWORD *)v0 = 0;
    v0[1] = 0LL;
    v0[2] = 0LL;
    pthread_setspecific(tsDataKey, v0);
  }

  return v0;
}

CFStringRef _SCCopyDescription(const void *a1, const __CFDictionary *a2)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID()) {
    return CFStringCreateWithFormat(0LL, a2, @"%@%@", value, a1);
  }
  if (v4 == CFBooleanGetTypeID())
  {
    uint64_t v6 = value;
    int v7 = CFBooleanGetValue((CFBooleanRef)a1);
    SCNetworkServiceRef v8 = "TRUE";
    if (!v7) {
      SCNetworkServiceRef v8 = "FALSE";
    }
    return CFStringCreateWithFormat(0LL, a2, @"%@%s", v6, v8);
  }

  if (v4 != CFDataGetTypeID())
  {
    if (v4 != CFNumberGetTypeID())
    {
      if (v4 == CFDateGetTypeID())
      {
        v15 = CFCalendarCreateWithIdentifier(0LL, (CFCalendarIdentifier)*MEMORY[0x189604F90]);
        v16 = CFTimeZoneCopySystem();
        CFCalendarSetTimeZone(v15, v16);
        CFRelease(v16);
        MEMORY[0x186E08990](a1);
        CFCalendarDecomposeAbsoluteTime(v15, v17, "MdyHms", v53, &v51, &v50, &v49, &v48, &v47);
        CFRelease(v15);
        return CFStringCreateWithFormat( 0LL,  a2,  @"%@%02d/%02d/%04d %02d:%02d:%02d",  value,  v53[0],  v51,  v50,  v49,  v48,  v47);
      }

      if (a2)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, a2);
      }

      else
      {
        v51 = value;
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }

      v19 = MutableCopy;
      if (!MutableCopy) {
        _SCCopyDescription_cold_1();
      }
      if (v4 == CFArrayGetTypeID())
      {
        Mutable = CFStringCreateMutable(0LL, 0LL);
        CFStringAppendFormat(Mutable, a2, @"%@<array> {", value);
        CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
        if (Count < 1) {
          goto LABEL_54;
        }
        CFIndex v21 = Count;
        v22 = (unint64_t)Count < 0x21
            ? (const void **)v53
            : (const void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
        v55.location = 0LL;
        v55.length = v21;
        CFArrayGetValues((CFArrayRef)a1, v55, v22);
        for (uint64_t i = 0LL; i != v21; ++i)
        {
          CFStringRef v27 = CFStringCreateWithFormat(0LL, 0LL, @"%ld", i);
          v28 = CFStringCreateMutable(0LL, 0LL);
          CFStringAppendFormat(v28, a2, @"%@  %@ : ", v51, v27);
          v29 = CFStringCreateMutable(0LL, 0LL);
          CFStringAppendFormat(v29, a2, @"%@  ", v51);
          CFDictionarySetValue(v19, @"PREFIX1", v28);
          CFDictionarySetValue(v19, @"PREFIX2", v29);
          CFRelease(v28);
          CFRelease(v29);
          CFRelease(v27);
          v30 = (const void *)_SCCopyDescription(v22[i], v19);
          CFStringAppendFormat(Mutable, a2, @"\n%@", v30);
          CFRelease(v30);
        }

        v31 = v22;
LABEL_53:
        CFAllocatorDeallocate(0LL, v31);
        goto LABEL_54;
      }

      if (v4 == CFDictionaryGetTypeID())
      {
        Mutable = CFStringCreateMutable(0LL, 0LL);
        CFStringAppendFormat(Mutable, a2, @"%@<dictionary> {", value);
        CFIndex v23 = CFDictionaryGetCount((CFDictionaryRef)a1);
        if (v23 < 1)
        {
LABEL_54:
          CFStringAppendFormat(Mutable, a2, @"\n%@}", v51);
          CFRelease(v19);
          return Mutable;
        }

        CFIndex v24 = v23;
        else {
          v25 = (const void **)MEMORY[0x186E08750](0LL, 8 * v23, 0LL);
        }
        CFDictionaryGetKeysAndValues((CFDictionaryRef)a1, v25, 0LL);
        v32 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
        for (uint64_t j = 0LL; j != v24; ++j)
          CFArrayAppendValue(v32, v25[j]);
        if (isA_CFString(*v25))
        {
          v34 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))compare_CFString;
        }

        else if (isA_CFNumber(*v25))
        {
          v34 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))compare_CFNumber;
        }

        else
        {
          if (!isA_CFDate(*v25))
          {
LABEL_50:
            ptr = v25;
            v46 = v32;
            CFIndex v35 = 0LL;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v32, v35);
              uint64_t v37 = _SCCopyDescription(ValueAtIndex, 0LL);
              CFIndex v38 = v24;
              v39 = CFStringCreateMutable(0LL, 0LL);
              CFStringAppendFormat(v39, a2, @"%@  %@ : ", v51, v37);
              v40 = CFStringCreateMutable(0LL, 0LL);
              CFStringAppendFormat(v40, a2, @"%@  ", v51);
              CFDictionarySetValue(v19, @"PREFIX1", v39);
              CFDictionarySetValue(v19, @"PREFIX2", v40);
              v41 = v39;
              CFIndex v24 = v38;
              CFRelease(v41);
              CFRelease(v40);
              v42 = (const void *)v37;
              v32 = v46;
              CFRelease(v42);
              v43 = CFDictionaryGetValue((CFDictionaryRef)a1, ValueAtIndex);
              v44 = (const void *)_SCCopyDescription(v43, v19);
              CFStringAppendFormat(Mutable, a2, @"\n%@", v44);
              CFRelease(v44);
              ++v35;
            }

            while (v38 != v35);
            CFRelease(v46);
            v31 = ptr;
            goto LABEL_53;
          }

          v34 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))compare_CFDate;
        }

        v56.location = 0LL;
        v56.length = v24;
        CFArraySortValues(v32, v56, v34, 0LL);
        goto LABEL_50;
      }

      CFRelease(v19);
    }

    return CFStringCreateWithFormat(0LL, a2, @"%@%@", value, a1);
  }

  Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, a2, @"%@<data> 0x", value);
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  CFIndex Length = CFDataGetLength((CFDataRef)a1);
  if (Length >= 1)
  {
    CFIndex v13 = Length;
    do
    {
      unsigned int v14 = *BytePtr++;
      CFStringAppendFormat(Mutable, 0LL, @"%02x", v14);
      --v13;
    }

    while (v13);
  }

  return Mutable;
}

const void *isA_CFString(const void *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0LL;
}

CFComparisonResult compare_CFString(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0LL);
}

const void *isA_CFNumber(const void *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0LL;
}

CFComparisonResult compare_CFNumber(const __CFNumber *a1, const __CFNumber *a2)
{
  return CFNumberCompare(a1, a2, 0LL);
}

const void *isA_CFDate(const void *a1)
{
  CFTypeID TypeID = CFDateGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0LL;
}

CFComparisonResult compare_CFDate(const __CFDate *a1, const __CFDate *a2)
{
  return CFDateCompare(a1, a2, 0LL);
}

uint64_t _SC_isInstallEnvironment()
{
  if (_SC_isInstallEnvironment_once != -1) {
    dispatch_once(&_SC_isInstallEnvironment_once, &__block_literal_global_0);
  }
  return _SC_isInstallEnvironment_is_install;
}

os_log_t _SC_LOG_DEFAULT()
{
  os_log_t result = (os_log_t)_SC_LOG_DEFAULT_log;
  if (!_SC_LOG_DEFAULT_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "");
    _SC_LOG_DEFAULT_log = (uint64_t)result;
  }

  return result;
}

uint64_t _SC_syslog_os_log_mapping(int a1)
{
  else {
    return (0x201000000101010uLL >> (8 * (a1 ^ (a1 >> 31))));
  }
}

void __SC_Log( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (_sc_log < 1) {
    goto LABEL_4;
  }
  if (_sc_log >= 2)
  {
    os_log_with_args();
LABEL_4:
    __SCPrint((FILE *)*MEMORY[0x1895F89E0], a2, (uint64_t)&a9, _sc_log == 2, 1);
    return;
  }

  os_log_with_args();
}

void __SCPrint(FILE *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  v12[1] = *MEMORY[0x1895F89C0];
  SCNetworkServiceRef v8 = (const __CFString *)_CFStringCreateWithFormatAndArgumentsAux();
  uint64_t v9 = _SC_cfstring_to_cstring_ext(v8, 0LL, 0LL, 0x8000100u, 0x3Fu, v12);
  CFRelease(v8);
  if (v9)
  {
    pthread_mutex_lock(&lock);
    if (a4)
    {
      gettimeofday(&v10, 0LL);
      localtime_r(&v10.tv_sec, &v11);
      fprintf(a1, "%2d:%02d:%02d.%03d ", v11.tm_hour, v11.tm_min, v11.tm_sec, v10.tv_usec / 1000);
    }

    fwrite(v9, v12[0], 1uLL, a1);
    if (a5) {
      fputc(10, a1);
    }
    fflush(a1);
    pthread_mutex_unlock(&lock);
    CFAllocatorDeallocate(0LL, v9);
  }

BOOL __SC_log_enabled(int a1, os_log_t oslog, os_log_type_t type)
{
  if (os_log_type_enabled(oslog, type)) {
    return 1LL;
  }
  if (_sc_log != 1)
  {
    if (a1 < 6) {
      return 1LL;
    }
    BOOL v4 = _sc_verbose && a1 == 6;
    if (v4 || _sc_debug != 0) {
      return 1LL;
    }
  }

  if (_SC_isInstallEnvironment_once != -1) {
    dispatch_once(&_SC_isInstallEnvironment_once, &__block_literal_global_0);
  }
  if (!_SC_isInstallEnvironment_is_install) {
    return 0LL;
  }
  if (a1 < 6) {
    return 1LL;
  }
  if (a1 != 6) {
    return _sc_debug != 0;
  }
  if (_SC_isAppleInternal_once != -1) {
    dispatch_once(&_SC_isAppleInternal_once, &__block_literal_global_46);
  }
  BOOL result = 1LL;
  if (!_SC_isAppleInternal_isInternal && !_sc_debug) {
    return 0LL;
  }
  return result;
}

void __SC_log_send2(int a1, uint64_t a2, uint64_t a3, int a4, char *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v6 = _sc_log;
  if (a4) {
    int v7 = 0LL;
  }
  else {
    int v7 = a5;
  }
  if (a4) {
    SCNetworkServiceRef v8 = a5;
  }
  else {
    SCNetworkServiceRef v8 = 0LL;
  }
  if (_sc_log < 1)
  {
    if (v8)
    {
      mach_get_times();
      uint64_t v10 = os_log_pack_compose();
      goto LABEL_16;
    }

LABEL_15:
    char v9 = 1;
LABEL_17:
    if (a1 < 6 || (_sc_verbose ? (BOOL v11 = a1 == 6) : (BOOL v11 = 0), !v11 ? (v12 = _sc_debug == 0) : (v12 = 0), !v12))
    {
      pthread_mutex_lock(&lock);
      CFIndex v13 = (FILE **)MEMORY[0x1895F89E0];
      if (v6 == 2)
      {
        if ((v9 & 1) != 0)
        {
          gettimeofday(&v14, 0LL);
        }

        else
        {
          v14.tv_sec = (__darwin_time_t)(v8 + 8);
          v14.tv_usec = (unint64_t)(v8 + 16) / 0x3E8;
        }

        localtime_r(&v14.tv_sec, &v15);
        fprintf(*v13, "%2d:%02d:%02d.%03d ", v15.tm_hour, v15.tm_min, v15.tm_sec, v14.tv_usec / 1000);
      }

      fprintf(*v13, "%s\n", v7);
      fflush(*v13);
      pthread_mutex_unlock(&lock);
    }

    goto LABEL_31;
  }

  if (!v8)
  {
    if (_sc_log == 1) {
      return;
    }
    goto LABEL_15;
  }

  if (_sc_log != 1)
  {
    uint64_t v10 = os_log_pack_send_and_compose();
LABEL_16:
    int v7 = (char *)v10;
    char v9 = 0;
    goto LABEL_17;
  }

  os_log_pack_send();
  char v9 = 0;
LABEL_31:
  if ((v9 & 1) == 0 && v7 != &v16) {
    free(v7);
  }
}

  int v6 = 2001;
LABEL_16:
  _SCErrorSet(v6);
  return 0LL;
}

  CFRelease(v28[0]);
  if (v25) {
    CFRelease(v25);
  }
LABEL_19:
  if (!v22) {
    return 1LL;
  }
  if (v22 == 1102)
  {
    int v7 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      int v7 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v7;
    }

    if (v5) {
      SCNetworkServiceRef v8 = 3;
    }
    else {
      SCNetworkServiceRef v8 = 6;
    }
    char v9 = _SC_syslog_os_log_mapping(v8);
    if (__SC_log_enabled(v8, v7, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      BOOL v11 = (char *)&v21 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(v8, (uint64_t)v7, v9, v11);
    }

    v22 = 2002;
  }

  else
  {
    CFIndex v13 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      CFIndex v13 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v13;
    }

    if (v5) {
      timeval v14 = 3;
    }
    else {
      timeval v14 = 6;
    }
    tm v15 = _SC_syslog_os_log_mapping(v14);
    if (__SC_log_enabled(v14, v13, (os_log_type_t)v15))
    {
      char v16 = _os_log_pack_size();
      uint64_t v17 = (char *)&v21 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      v18 = _os_log_pack_fill();
      v19 = v22;
      v20 = SCErrorString(v22);
      *(_DWORD *)v18 = 67109378;
      *(_DWORD *)(v18 + 4) = v19;
      *(_WORD *)(v18 + 8) = 2080;
      *(void *)(v18 + 10) = v20;
      __SC_log_send(v14, (uint64_t)v13, v15, v17);
    }
  }

  _SCErrorSet(v22);
  return 0LL;
}

    if (v21[0] != -1) {
      close(v21[0]);
    }
    if (v21[1] != -1) {
      close(v21[1]);
    }
    return 0LL;
  }

  return result;
}

  if (check || onDemand_force_refresh)
  {
    tm v15 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      tm v15 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v15;
    }

    char v16 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      v18 = (char *)&v28 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      v19 = _os_log_pack_fill();
      if (onDemand_configuration) {
        v20 = "updated";
      }
      else {
        v20 = "fetched";
      }
      *(_DWORD *)v19 = 136315138;
      *(void *)(v19 + 4) = v20;
      __SC_log_send(6, (uint64_t)v15, v16, v18);
    }

    if (onDemand_configuration)
    {
      CFRelease((CFTypeRef)onDemand_configuration);
      onDemand_configuration = 0LL;
    }

    if (state64 || onDemand_force_refresh)
    {
      NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, @"State:", @"OnDemand");
      onDemand_configuration = (uint64_t)SCDynamicStoreCopyValue(0LL, NetworkGlobalEntity);
      CFRelease(NetworkGlobalEntity);
      v22 = (const void *)onDemand_configuration;
      if (onDemand_configuration)
      {
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (CFGetTypeID(v22) != TypeID)
        {
          CFRelease((CFTypeRef)onDemand_configuration);
          onDemand_configuration = 0LL;
        }
      }
    }

    onDemand_force_refresh = 0;
  }

  if (onDemand_configuration) {
    CFIndex v24 = CFRetain((CFTypeRef)onDemand_configuration);
  }
  else {
    CFIndex v24 = 0LL;
  }
  pthread_mutex_unlock(&onDemand_notify_lock);
  return v24;
}

  CFPreferencesAppSynchronize(@"com.apple.networkConnect");
LABEL_16:
  *a2 = 0LL;
  *a3 = 0LL;
  if (a1)
  {
    CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"OnDemandHostName");
    if (Value)
    {
      uint64_t v17 = Value;
      CFTypeID TypeID = CFStringGetTypeID();
    }

    else
    {
      uint64_t v17 = (const __CFString *)CFDictionaryGetValue(a1, @"OnDemandHostName");
      CFTypeID TypeID = CFStringGetTypeID();
      if (!v17) {
        goto LABEL_67;
      }
    }

    if (CFGetTypeID(v17) == TypeID)
    {
      CFIndex v24 = (const __CFString *)CFDictionaryGetValue(a1, @"OnDemandPriority");
      v25 = CFStringGetTypeID();
      if (!v24 || CFGetTypeID(v24) != v25) {
        CFIndex v24 = @"Default";
      }
      v122 = v24;
      v26 = (const __CFString *)*MEMORY[0x189605198];
      CFStringRef v27 = (const __CFString *)*MEMORY[0x189605190];
      v28 = CFPreferencesCopyKeyList( @"com.apple.networkConnect",  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605190]);
      v29 = CFArrayGetTypeID();
      if (v28)
      {
        if (CFGetTypeID(v28) != v29
          || (v30 = CFPreferencesCopyMultiple(v28, @"com.apple.networkConnect", v26, v27),
              v31 = CFDictionaryGetTypeID(),
              !v30))
        {
          v58 = 0LL;
          v81 = v28;
          goto LABEL_100;
        }

        v121 = v30;
        if (CFGetTypeID(v30) == v31)
        {
          CFIndex Count = CFArrayGetCount(v28);
          if (Count >= 1)
          {
            v110 = @"OnDemandPriority";
            v111 = a2;
            v115 = a3;
            v116 = 0;
            v112 = 0LL;
            v113 = 0LL;
            v32 = 0LL;
            v123 = @"PPP";
            v119 = @"OnDemandEnabled";
            v120 = v28;
            v114 = @"OnDemandDomains";
            v124 = a1;
            do
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v28, v32);
              v34 = CFStringGetTypeID();
              if (ValueAtIndex)
              {
                if (CFGetTypeID(ValueAtIndex) == v34)
                {
                  CFIndex v35 = (const __CFArray *)CFDictionaryGetValue(v121, ValueAtIndex);
                  v36 = CFArrayGetTypeID();
                  if (v35)
                  {
                    if (CFGetTypeID(v35) == v36)
                    {
                      uint64_t v37 = CFArrayGetCount(v35);
                      if (v37 >= 1)
                      {
                        CFIndex v38 = v37;
                        for (uint64_t i = 0LL; i != v38; ++i)
                        {
                          v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, i);
                          v41 = CFDictionaryGetTypeID();
                          if (v40)
                          {
                            if (CFGetTypeID(v40) == v41)
                            {
                              v42 = (const __CFDictionary *)CFDictionaryGetValue(v40, v123);
                              v43 = CFDictionaryGetTypeID();
                              if (v42)
                              {
                                if (CFGetTypeID(v42) == v43)
                                {
                                  v44 = (const __CFNumber *)CFDictionaryGetValue(v42, v119);
                                  v45 = CFNumberGetTypeID();
                                  if (v44 && CFGetTypeID(v44) == v45)
                                  {
                                    CFNumberGetValue(v44, kCFNumberIntType, &valuePtr);
                                    v28 = v120;
                                    if (valuePtr)
                                    {
                                      v46 = (const __CFArray *)CFDictionaryGetValue(v42, v114);
                                      unsigned int v47 = CFArrayGetTypeID();
                                      if (v46)
                                      {
                                        if (CFGetTypeID(v46) == v47)
                                        {
                                          v118 = CFArrayGetCount(v46);
                                          if (v118 >= 1)
                                          {
                                            unsigned int v48 = 0LL;
                                            v117 = v46;
                                            do
                                            {
                                              unsigned int v49 = (const __CFString *)CFArrayGetValueAtIndex(v46, v48);
                                              unsigned int v50 = CFStringGetTypeID();
                                              if (v49 && CFGetTypeID(v49) == v50)
                                              {
                                                v28 = v120;
                                                if (!v116)
                                                {
                                                  if (CFStringCompare(v49, &stru_189B68690, 0LL)
                                                    && CFStringCompare(v49, @".", 0LL))
                                                  {
                                                    v116 = 0;
                                                  }

                                                  else
                                                  {
                                                    v116 = 1;
                                                    v112 = v32;
                                                    v113 = i;
                                                  }
                                                }

                                                if (_SC_domainEndsWithDomain(v17, v49))
                                                {
                                                  v107 = v111;
                                                  *v111 = ValueAtIndex;
                                                  CFRetain(ValueAtIndex);
                                                  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v40);
                                                  v109 = v115;
                                                  *v115 = MutableCopy;
                                                  CFDictionarySetValue(MutableCopy, @"OnDemandHostName", v17);
                                                  CFDictionarySetValue(*v109, v110, v122);
                                                  addPasswordFromKeychain(*v107, v109);
                                                  v58 = 1LL;
                                                  a1 = v124;
LABEL_99:
                                                  CFRelease(v28);
                                                  v81 = v121;
LABEL_100:
                                                  CFRelease(v81);
LABEL_101:
                                                  if (debug >= 2)
                                                  {
                                                    v83 = (os_log_s *)__log_SCNetworkConnection_log;
                                                    if (!__log_SCNetworkConnection_log)
                                                    {
                                                      v83 = os_log_create( "com.apple.SystemConfiguration",  "SCNetworkConnection");
                                                      __log_SCNetworkConnection_log = (uint64_t)v83;
                                                    }

                                                    v84 = _SC_syslog_os_log_mapping(6);
                                                    if (__SC_log_enabled(6, v83, (os_log_type_t)v84))
                                                    {
                                                      v85 = _os_log_pack_size();
                                                      v86 = (char *)&v110
                                                          - ((MEMORY[0x1895F8858](v85) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                                                      __error();
                                                      v87 = _os_log_pack_fill();
                                                      v88 = "succeeded";
                                                      if (!(_DWORD)v58) {
                                                        v88 = "failed";
                                                      }
                                                      *(_DWORD *)v87 = 136315138;
                                                      *(void *)(v87 + 4) = v88;
                                                      __SC_log_send(6, (uint64_t)v83, v84, v86);
                                                    }

                                                    v89 = (os_log_s *)__log_SCNetworkConnection_log;
                                                    if (!__log_SCNetworkConnection_log)
                                                    {
                                                      v89 = os_log_create( "com.apple.SystemConfiguration",  "SCNetworkConnection");
                                                      __log_SCNetworkConnection_log = (uint64_t)v89;
                                                    }

                                                    v90 = _SC_syslog_os_log_mapping(6);
                                                    if (__SC_log_enabled(6, v89, (os_log_type_t)v90))
                                                    {
                                                      v91 = _os_log_pack_size();
                                                      v92 = (char *)&v110
                                                          - ((MEMORY[0x1895F8858](v91) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                                                      __error();
                                                      v93 = _os_log_pack_fill();
                                                      *(_DWORD *)v93 = 138412290;
                                                      *(void *)(v93 + 4) = a1;
                                                      v94 = (uint64_t)v89;
                                                      v95 = v90;
                                                      goto LABEL_129;
                                                    }
                                                  }

                                                  return v58;
                                                }
                                              }

                                              else
                                              {
                                                v28 = v120;
                                              }

                                              ++v48;
                                              v46 = v117;
                                            }

                                            while (v118 != v48);
                                          }
                                        }
                                      }
                                    }
                                  }

                                  else
                                  {
                                    v28 = v120;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }

              ++v32;
              a1 = v124;
            }

            while (v32 != Count);
            if (v116)
            {
              v51 = (const __CFString *)CFArrayGetValueAtIndex(v28, v112);
              v52 = (const __CFArray *)CFDictionaryGetValue(v121, v51);
              v53 = (const __CFDictionary *)CFArrayGetValueAtIndex(v52, v113);
              uint64_t v54 = v111;
              *v111 = v51;
              CFRetain(v51);
              CFRange v55 = CFDictionaryCreateMutableCopy(0LL, 0LL, v53);
              CFRange v56 = v115;
              *v115 = v55;
              CFDictionarySetValue(v55, @"OnDemandHostName", v17);
              CFDictionarySetValue(*v56, v110, v122);
              v57 = *v54;
              v28 = v120;
              addPasswordFromKeychain(v57, v56);
              v58 = 1LL;
              goto LABEL_99;
            }
          }
        }

        v58 = 0LL;
        goto LABEL_99;
      }
    }

    _SCErrorSet(1002);
    LOBYTE(v9) = 0;
    return v9;
  }

  *((void *)target + 15) = CFRunLoopSourceCreate(0LL, 0LL, &context);
  Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  *((void *)target + 22) = Mutable;
  _SC_schedule(target, runLoop, runLoopMode, *((CFMutableArrayRef *)target + 22));
  if (_callback_queue_once != -1) {
    dispatch_once(&_callback_queue_once, &__block_literal_global_100);
  }
  char v9 = __SCNetworkReachabilitySetDispatchQueue((uint64_t)target, (dispatch_object_s *)_callback_queue_q);
  if (!v9 && _SC_unschedule(target, runLoop, runLoopMode, *((CFArrayRef *)target + 22), 0))
  {
    if (CFArrayGetCount(*((CFArrayRef *)target + 22)))
    {
    }

    else
    {
      CFRunLoopRemoveSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
      CFRelease(*((CFTypeRef *)target + 22));
      *((void *)target + 22) = 0LL;
      CFRunLoopSourceInvalidate(*((CFRunLoopSourceRef *)target + 15));
      CFRelease(*((CFTypeRef *)target + 15));
      *((void *)target + 15) = 0LL;
    }
  }

  return v9;
}

  timeval v14 = 0LL;
  while (!CFEqual(a2, *configurations[v14]))
  {
    v14 += 5LL;
    if (v14 == 95) {
      return 1LL;
    }
  }

  if (!v13) {
    goto LABEL_20;
  }
  return v13;
}

    uint64_t v17 = v9;
    if ((_DWORD)v9 == -1)
    {
      uint64_t v17 = inet_dgram_socket();
      if ((_DWORD)v17 == -1) {
        break;
      }
    }

    char v9 = v17;
    if (!__destroyInterface(v17, BSDName))
    {
      v18 = __error();
      _SCErrorSet(*v18);
      v42 = 0;
    }

void __SC_log_send(int a1, uint64_t a2, uint64_t a3, char *a4)
{
}

void SCLog( int a1, int a2, CFStringRef theString, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex v13 = 0LL;
  if (!a1) {
    return;
  }
  if (_sc_log < 1)
  {
    CFIndex v13 = &a9;
LABEL_12:
    BOOL v12 = (FILE **)MEMORY[0x1895F89D0];
    if ((~a2 & 6) != 0) {
      BOOL v12 = (FILE **)MEMORY[0x1895F89E0];
    }
    __SCPrint(*v12, (uint64_t)theString, (uint64_t)v13, _sc_log == 2, 1);
    return;
  }

  int v11 = _sc_log;
  if (_sc_log >= 2) {
    CFIndex v13 = &a9;
  }
  if (CFStringGetCStringPtr(theString, 0x8000100u))
  {
    if (!_SC_LOG_DEFAULT_log) {
      _SC_LOG_DEFAULT_log = (uint64_t)os_log_create("com.apple.SystemConfiguration", "");
    }
    os_log_with_args();
  }

  if (v11 >= 2) {
    goto LABEL_12;
  }
}

void SCPrint( int a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1) {
    __SCPrint(a2, a3, (uint64_t)&a9, 0, 0);
  }
}

void *_SCErrorSet(int a1)
{
  BOOL result = __SCGetThreadSpecificData();
  *(_DWORD *)BOOL result = a1;
  return result;
}

CFErrorRef SCCopyLastError(void)
{
  uint64_t v0 = 0LL;
  CFIndex v1 = *(int *)__SCGetThreadSpecificData();
  while (sc_errmsgs[v0] != (_DWORD)v1)
  {
    v0 += 4LL;
    if (v0 == 80)
    {
      uint64_t v2 = (CFErrorDomain *)MEMORY[0x189604F48];
      return CFErrorCreate(0LL, *v2, v1, 0LL);
    }
  }

  Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189604E40], MEMORY[0x189605250]);
  CFStringRef v5 = CFStringCreateWithCString(0LL, *(const char **)&sc_errmsgs[v0 + 2], 0x600u);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x189604F38], v5);
  CFRelease(v5);
  int v6 = CFErrorCreate(0LL, @"com.apple.SystemConfiguration", v1, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

int SCError(void)
{
  return *(_DWORD *)__SCGetThreadSpecificData();
}

const char *__cdecl SCErrorString(int status)
{
  for (uint64_t i = 0LL; i != 80; i += 4LL)
  {
    if (sc_errmsgs[i] == status) {
      return *(const char **)&sc_errmsgs[i + 2];
    }
  }

  BOOL result = mach_error_string(status);
  if (!result) {
    return strerror(status);
  }
  return result;
}

void __SCThreadSpecificDataFinalize(void *ptr)
{
  if (ptr)
  {
    uint64_t v2 = (const void *)ptr[1];
    if (v2) {
      CFRelease(v2);
    }
    v3 = (const void *)ptr[2];
    if (v3) {
      CFRelease(v3);
    }
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x189604DD0], ptr);
  }

CFStringRef SCDynamicStoreKeyCreate(CFAllocatorRef allocator, CFStringRef fmt, ...)
{
  return CFStringCreateWithFormatAndArguments(allocator, 0LL, fmt, va);
}

CFStringRef SCDynamicStoreKeyCreateNetworkGlobalEntity( CFAllocatorRef allocator, CFStringRef domain, CFStringRef entity)
{
  return CFStringCreateWithFormat( allocator,  0LL,  @"%@/%@/%@/%@",  domain,  @"Network",  @"Global",  entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterface(CFAllocatorRef allocator, CFStringRef domain)
{
  return CFStringCreateWithFormat( allocator,  0LL,  @"%@/%@/%@",  domain,  @"Network",  @"Interface",  *MEMORY[0x1895F89C0]);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity( CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (entity) {
    return CFStringCreateWithFormat( allocator,  0LL,  @"%@/%@/%@/%@/%@",  domain,  @"Network",  @"Interface",  ifname,  entity,  v6);
  }
  else {
    return CFStringCreateWithFormat( allocator,  0LL,  @"%@/%@/%@/%@",  domain,  @"Network",  @"Interface",  ifname,  v5,  v6);
  }
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity( CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (entity) {
    return CFStringCreateWithFormat( allocator,  0LL,  @"%@/%@/%@/%@/%@",  domain,  @"Network",  @"Service",  serviceID,  entity,  v6);
  }
  else {
    return CFStringCreateWithFormat( allocator,  0LL,  @"%@/%@/%@/%@",  domain,  @"Network",  @"Service",  serviceID,  v5,  v6);
  }
}

UInt8 *_SC_cfstring_to_cstring_ext( const __CFString *a1, UInt8 *a2, CFIndex a3, CFStringEncoding a4, UInt8 a5, void *a6)
{
  usedBufLen[1] = *MEMORY[0x1895F89C0];
  usedBufLen[0] = 0LL;
  if (a1) {
    int v11 = a1;
  }
  else {
    int v11 = &stru_189B68690;
  }
  CFIndex Length = CFStringGetLength(v11);
  v15.location = 0LL;
  v15.length = Length;
  if (CFStringGetBytes(v11, v15, a4, a5, 0, 0LL, 0LL, usedBufLen) < Length)
  {
    if (!a2) {
      return a2;
    }
    goto LABEL_9;
  }

  if (a2)
  {
    if (usedBufLen[0] >= a3)
    {
LABEL_9:
      *a2 = 0;
      return 0LL;
    }
  }

  else
  {
    a3 = usedBufLen[0] + 1;
    a2 = (UInt8 *)MEMORY[0x186E08750](0LL, usedBufLen[0] + 1, 0LL);
    if (!a2) {
      return a2;
    }
  }

  v16.location = 0LL;
  v16.length = Length;
  CFStringGetBytes(v11, v16, a4, a5, 0, a2, a3, usedBufLen);
  a2[usedBufLen[0]] = 0;
  if (a6) {
    *a6 = usedBufLen[0];
  }
  return a2;
}

UInt8 *_SC_cfstring_to_cstring(const __CFString *a1, UInt8 *a2, CFIndex a3, CFStringEncoding a4)
{
  return _SC_cfstring_to_cstring_ext(a1, a2, a3, a4, 0, 0LL);
}

char *_SC_sockaddr_to_string(uint64_t a1, void *a2, unint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 1);
  if (v6 == 30)
  {
    BOOL result = (char *)inet_ntop(30, (const void *)(a1 + 8), (char *)a2, a3);
    if (*(_DWORD *)(a1 + 24))
    {
      BOOL result = (char *)strlen((const char *)a2);
      if ((unint64_t)(result + 17) <= a3)
      {
        result[(void)a2] = 37;
        return if_indextoname(*(_DWORD *)(a1 + 24), &result[(void)a2 + 1]);
      }
    }
  }

  else if (v6 == 2)
  {
    return (char *)inet_ntop(2, (const void *)(a1 + 4), (char *)a2, a3);
  }

  else
  {
    return (char *)snprintf((char *)a2, a3, "unexpected address family %d", *(unsigned __int8 *)(a1 + 1));
  }

  return result;
}

in_addr *_SC_string_to_sockaddr(const char *a1, int a2, in_addr *a3, size_t a4)
{
  SCNetworkServiceRef v8 = a3;
  if (!a3)
  {
    a4 = 128LL;
    SCNetworkServiceRef v8 = (in_addr *)MEMORY[0x186E08750](0LL, 128LL);
  }

  bzero(v8, a4);
  BOOL v9 = a2 == 2 || a2 == 0;
  if (v9 && a4 >= 0x10 && inet_aton(a1, v8 + 1) == 1)
  {
    LOWORD(v8->s_addr) = 528;
    return v8;
  }

  BOOL v10 = a2 == 30 || a2 == 0;
  if (v10 && a4 >= 0x1C && inet_pton(30, a1, &v8[2]) == 1)
  {
    LOWORD(v8->s_addr) = 7708;
    int v11 = strchr(a1, 37);
    if (v11) {
      v8[6].s_addr = if_nametoindex(v11 + 1);
    }
    int s_addr_low = LOBYTE(v8[2].s_addr);
    if (s_addr_low == 255)
    {
      char v14 = BYTE1(v8[2].s_addr);
      if ((v14 & 0xF0) == 0x30 || (v14 & 0xF) != 2) {
        return v8;
      }
    }

    else if (s_addr_low != 254 || (BYTE1(v8[2].s_addr) & 0xC0) != 0x80)
    {
      return v8;
    }

    unsigned int s_addr_high = HIWORD(v8[2].s_addr);
    HIWORD(v8[2].s_addr) = 0;
    if (!v8[6].s_addr) {
      v8[6].s_addr = __rev16(s_addr_high);
    }
  }

  else
  {
    if (v8 != a3) {
      CFAllocatorDeallocate(0LL, v8);
    }
    return 0LL;
  }

  return v8;
}

void *_SC_dlopen(char *__path)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (_SC_dlopen_once != -1) {
    dispatch_once(&_SC_dlopen_once, &__block_literal_global_1);
  }
  if (!_SC_dlopen_suffix || (__strlcpy_chk(), __strlcat_chk(), stat(v4, &v5) < 0)) {
    uint64_t v2 = __path;
  }
  else {
    uint64_t v2 = v4;
  }
  return dlopen(v2, 5);
}

void _SC_sendMachMessage(mach_port_t a1, mach_msg_id_t a2)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  *(void *)&v2.msgh_bits = 0x1800000013LL;
  v2.msgh_remote_port = a1;
  v2.msgh_local_port = 0;
  v2.msgh_voucher_port = 0;
  v2.msgh_id = a2;
}

CFMutableStringRef _SC_trimDomain(CFMutableStringRef MutableCopy)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (MutableCopy)
  {
    if (CFGetTypeID(MutableCopy) != TypeID) {
      return 0LL;
    }
    uint64_t Length = CFStringGetLength(MutableCopy);
    if (Length >= 1
      && ((v5.location = 0LL, v5.length = 1LL, CFStringFindWithOptions(MutableCopy, @".", v5, 8uLL, 0LL))
       || (v6.location = 0LL, v6.length = Length, CFStringFindWithOptions(MutableCopy, @".", v6, 0xCuLL, 0LL))))
    {
      CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, MutableCopy);
      CFStringTrim(MutableCopy, @".");
      if (!CFStringGetLength(MutableCopy)) {
        goto LABEL_9;
      }
    }

    else
    {
      CFRetain(MutableCopy);
      if (!Length)
      {
LABEL_9:
        CFRelease(MutableCopy);
        return 0LL;
      }
    }
  }

  return MutableCopy;
}

uint64_t _SC_hw_model(int a1)
{
  if (_SC_hw_model_once != -1) {
    dispatch_once(&_SC_hw_model_once, &__block_literal_global_7);
  }
  mach_msg_header_t v2 = &_SC_hw_model_model_trimmed;
  if (!a1) {
    mach_msg_header_t v2 = &_SC_hw_model_model;
  }
  return *v2;
}

BOOL _SCSerialize(CFPropertyListRef propertyList, CFDataRef *a2, vm_address_t *a3, vm_size_t *a4)
{
  v22[1] = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    BOOL result = 0LL;
    if (!a3 || !a4) {
      return result;
    }
    Data = CFPropertyListCreateData(0LL, propertyList, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
    if (Data)
    {
      BOOL v12 = Data;
      mach_error_t v13 = __CFDataCopyVMData(Data, a3, a4);
      CFRelease(v12);
      if (!v13) {
        return 1LL;
      }
      char v14 = _SC_LOG_DEFAULT();
      uint64_t v15 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v14, (os_log_type_t)v15);
      if (result)
      {
        _os_log_pack_size();
        CFRange v16 = (char *)v22 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        v18 = mach_error_string(v13);
        *(_DWORD *)uint64_t v17 = 136315138;
        *(void *)(v17 + 4) = v18;
        __SC_log_send(5, (uint64_t)v14, v15, v16);
        return 0LL;
      }

      return result;
    }

LABEL_13:
    v19 = _SC_LOG_DEFAULT();
    uint64_t v20 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v19, (os_log_type_t)v20))
    {
      _os_log_pack_size();
      CFIndex v21 = (char *)v22 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v19, v20, v21);
    }

    if (a2) {
      *a2 = 0LL;
    }
    BOOL result = 0LL;
    if (a3 && a4)
    {
      BOOL result = 0LL;
      *a4 = 0LL;
      *a3 = 0LL;
    }

    return result;
  }

  CFDataRef v8 = CFPropertyListCreateData(0LL, propertyList, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
  if (!v8) {
    goto LABEL_13;
  }
  BOOL v9 = v8;
  *a2 = v8;
  BOOL result = 1LL;
  if (a3 && a4)
  {
    *a3 = (vm_address_t)CFDataGetBytePtr(v9);
    *a4 = CFDataGetLength(v9);
    return 1LL;
  }

  return result;
}

    _SCErrorSet(1002);
    return 0LL;
  }

  uint64_t Length = CFStringGetLength(v5);
  v33.location = 0LL;
  v33.length = Length;
  if (!CFStringFindWithOptions(*(CFStringRef *)(a1 + 88), @"/", v33, 4uLL, &result))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 88), a2)) {
      goto LABEL_13;
    }
    int v11 = 0LL;
LABEL_15:
    CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(v11, 0LL, a2);
    goto LABEL_16;
  }

  v7.location = result.location + 1;
  result.location = v7.location;
  if (Length <= v7.location) {
    goto LABEL_13;
  }
  result.length = Length - v7.location;
  v7.length = Length - v7.location;
  CFDataRef v8 = CFStringCreateWithSubstring(v4, *(CFStringRef *)(a1 + 88), v7);
  BOOL v9 = CFEqual(v8, a2);
  CFRelease(v8);
  if (v9) {
    goto LABEL_13;
  }
  CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, *(CFStringRef *)(a1 + 88));
  CFStringReplace(MutableCopy, result, a2);
LABEL_16:
  if (!MutableCopy) {
    SCPreferencesCreateCompanion_cold_1();
  }
  mach_error_t v13 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  char v14 = *(const __CFDictionary **)(a1 + 296);
  if (v14 && CFDictionaryGetValueIfPresent(v14, MutableCopy, (const void **)value) && value[0])
  {
    uint64_t v15 = (os_log_s *)__log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      uint64_t v15 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v15;
    }

    CFRange v16 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      v18 = (char *)&result - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      v19 = _os_log_pack_fill();
      uint64_t v20 = value[0];
      *(_DWORD *)v19 = 138412290;
      *(void *)(v19 + 4) = v20;
      __SC_log_send(7, (uint64_t)v15, v16, v18);
    }

    CFRetain(value[0]);
  }

  else
  {
    CFIndex v21 = (void *)__SCPreferencesCreate( v4,  *(const __CFString **)(a1 + 80),  MutableCopy,  *(const void **)(a1 + 312),  *(const __CFDictionary **)(a1 + 96));
    value[0] = v21;
    if (v21)
    {
      v22 = v21;
      CFIndex v23 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        CFIndex v23 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v23;
      }

      CFIndex v24 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v23, (os_log_type_t)v24))
      {
        v25 = _os_log_pack_size();
        v26 = (char *)&result - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        CFStringRef v27 = _os_log_pack_fill();
        v28 = value[0];
        *(_DWORD *)CFStringRef v27 = 138412290;
        *(void *)(v27 + 4) = v28;
        __SC_log_send(7, (uint64_t)v23, v24, v26);
      }

      v22[36] = CFRetain((CFTypeRef)a1);
      Mutable = *(__CFDictionary **)(a1 + 296);
      if (!Mutable)
      {
        Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], 0LL);
        *(void *)(a1 + 296) = Mutable;
      }

      CFDictionarySetValue(Mutable, MutableCopy, value[0]);
    }
  }

  pthread_mutex_unlock(v13);
  CFRelease(MutableCopy);
  return value[0];
}

  qword_18C54F7A0 = 0LL;
  CFRelease(v1);
}

  *a4 = v8;
  return v10;
}

      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v20) != TypeID) {
        goto LABEL_18;
      }
      CFProperty = CFDictionaryGetValue((CFDictionaryRef)v20, @"UniqueIdentifier");
      v22 = CFStringGetTypeID();
      if (CFProperty)
      {
        if (CFGetTypeID(CFProperty) != v22 || !CFEqual(*((CFTypeRef *)interface + 15), CFProperty))
        {
LABEL_18:
          CFProperty = 0LL;
          goto LABEL_19;
        }

        CFProperty = IORegistryEntryCreateCFProperty(v16, @"IOTTYDevice", 0LL, 0);
      }

    v22 = 0LL;
    goto LABEL_28;
  }

  if (!v4)
  {
    CFRange v6 = 0LL;
    v22 = 1LL;
    goto LABEL_26;
  }

  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(v4, &v39, &v40);
  CFRange v6 = v39;
  if (!CFURLGetFileSystemRepresentation(v39, 1u, v43, 1024LL))
  {
    CFIndex v23 = __log_SCNetworkConfiguration();
    CFIndex v24 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v23, (os_log_type_t)v24))
    {
      v25 = _os_log_pack_size();
      v26 = (char *)&v36 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      CFStringRef v27 = _os_log_pack_fill();
      *(_DWORD *)CFStringRef v27 = 138412290;
      *(void *)(v27 + 4) = v6;
      __SC_log_send(5, (uint64_t)v23, v24, v26);
    }

    if (v9 == -1)
    {
      BOOL v9 = inet_dgram_socket();
      if (v9 == -1) {
        break;
      }
    }

    if (!__destroyInterface(v9, BSDName))
    {
      uint64_t v15 = __error();
      _SCErrorSet(*v15);
      CFRange v5 = 0;
    }

      uint64_t v20 = 0;
      goto LABEL_14;
    }

    BOOL result = 0LL;
    uint64_t v20 = 1;
  }

uint64_t __CFDataCopyVMData(const __CFData *a1, vm_address_t *a2, vm_size_t *a3)
{
  v12[1] = *MEMORY[0x1895F89C0];
  v12[0] = (vm_address_t)CFDataGetBytePtr(a1);
  vm_size_t Length = CFDataGetLength(a1);
  uint64_t v7 = vm_allocate(*MEMORY[0x1895FBBE0], v12, Length, 1);
  if ((_DWORD)v7)
  {
    vm_address_t v8 = 0LL;
    vm_size_t Length = 0LL;
  }

  else
  {
    BOOL v9 = (void *)v12[0];
    BytePtr = CFDataGetBytePtr(a1);
    memcpy(v9, BytePtr, Length);
    vm_address_t v8 = v12[0];
  }

  *a2 = v8;
  *a3 = Length;
  return v7;
}

uint64_t _SCUnserialize(CFPropertyListRef *a1, const __CFData *a2, UInt8 *bytes, CFIndex length)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1895F89C0];
  error[0] = 0LL;
  if (a2)
  {
    CFPropertyListRef v5 = CFPropertyListCreateWithData(0LL, a2, 0LL, 0LL, error);
    *a1 = v5;
    if (v5) {
      return 1LL;
    }
  }

  else
  {
    BOOL v9 = CFDataCreateWithBytesNoCopy(0LL, bytes, length, (CFAllocatorRef)*MEMORY[0x189604DC8]);
    *a1 = CFPropertyListCreateWithData(0LL, v9, 0LL, 0LL, error);
    CFRelease(v9);
    mach_error_t v10 = MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], bytes, length);
    if (v10)
    {
      mach_error_t v11 = v10;
      BOOL v12 = _SC_LOG_DEFAULT();
      uint64_t v13 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
      {
        _os_log_pack_size();
        char v14 = (char *)error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        CFRange v16 = mach_error_string(v11);
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = v16;
        __SC_log_send(5, (uint64_t)v12, v13, v14);
      }
    }

    if (*a1) {
      return 1LL;
    }
  }

  if (error[0])
  {
    uint64_t v17 = _SC_LOG_DEFAULT();
    uint64_t v18 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
    {
      _os_log_pack_size();
      v19 = (char *)error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      CFErrorRef v21 = error[0];
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = v21;
      __SC_log_send(5, (uint64_t)v17, v18, v19);
    }

    CFRelease(error[0]);
  }

  _SCErrorSet(1001);
  return 0LL;
}

BOOL _SCSerializeString(const __CFString *a1, CFDataRef *a2, vm_address_t *a3, vm_size_t *a4)
{
  v23[1] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  if (a2)
  {
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0LL, a1, 0x8000100u, 0);
    if (ExternalRepresentation)
    {
      mach_error_t v10 = ExternalRepresentation;
      *a2 = ExternalRepresentation;
      BOOL result = 1LL;
      if (a3 && a4)
      {
        *a3 = (vm_address_t)CFDataGetBytePtr(v10);
        *a4 = CFDataGetLength(v10);
        return 1LL;
      }

      return result;
    }

LABEL_17:
    uint64_t v20 = _SC_LOG_DEFAULT();
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
    {
      _os_log_pack_size();
      v22 = (char *)v23 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v20, v21, v22);
    }

    if (a2) {
      *a2 = 0LL;
    }
    BOOL result = 0LL;
    if (a3 && a4)
    {
      BOOL result = 0LL;
      *a3 = 0LL;
      *a4 = 0LL;
    }

    return result;
  }

  BOOL result = 0LL;
  if (!a3 || !a4) {
    return result;
  }
  BOOL v12 = CFStringCreateExternalRepresentation(0LL, a1, 0x8000100u, 0);
  if (!v12) {
    goto LABEL_17;
  }
  uint64_t v13 = v12;
  mach_error_t v14 = __CFDataCopyVMData(v12, a3, a4);
  CFRelease(v13);
  if (!v14) {
    return 1LL;
  }
  uint64_t v15 = _SC_LOG_DEFAULT();
  uint64_t v16 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v15, (os_log_type_t)v16);
  if (result)
  {
    _os_log_pack_size();
    uint64_t v17 = (char *)v23 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    v19 = mach_error_string(v14);
    *(_DWORD *)uint64_t v18 = 136315138;
    *(void *)(v18 + 4) = v19;
    __SC_log_send(5, (uint64_t)v15, v16, v17);
    return 0LL;
  }

  return result;
}

  uint64_t v13 = 1LL;
LABEL_19:
  pthread_mutex_unlock(v6);
  return v13;
}

    *a5 = 0LL;
  }

  return CFRetain(theDict);
}

  mach_error_t v10 = (const char *)*((void *)v4 + 1);
  if (v10)
  {
    while (v8 != *v4)
    {
      mach_error_t v10 = (const char *)*((void *)v4 + 3);
      v4 += 4;
      if (!v10) {
        goto LABEL_23;
      }
    }

    BOOL v9 = CFStringCreateWithCString(0LL, v10, 0x600u);
    if (v9) {
      goto LABEL_22;
    }
  }

      mach_error_t v11 = SCPreferencesPathSetValue(a1, a2, Mutable);
      CFRelease(Mutable);
      return v11;
    }
  }

  else
  {
    if (a3) {
      return 1LL;
    }
    Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionarySetValue(Mutable, @"__INACTIVE__", (const void *)*MEMORY[0x189604DE8]);
    if (!Mutable) {
      return 1LL;
    }
  }

  if (Mutable) {
    goto LABEL_17;
  }
  BOOL result = SCPreferencesPathRemoveValue(a1, a2);
  if (!(_DWORD)result) {
    return SCError() == 1004;
  }
  return result;
}

  if (a7)
  {
    CFMutableDictionaryRef MutableCopy = 0LL;
    if (theDict && (_DWORD)v19)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict);
      CFDictionaryRemoveValue(MutableCopy, a3);
      CFDictionaryRemoveValue(MutableCopy, key);
    }

    *a7 = MutableCopy;
  }

  return v19;
}

      CFRelease(Private);
      mach_error_t v11 = v4;
    }

    else
    {
      mach_error_t v11 = (const __CFArray *)Private;
    }

    CFRelease(v11);
  }

  return Mutable;
}

  _SCErrorSet((int)v5);
  return v9;
}

          uint64_t Instance = 0LL;
          CFRange v6 = 1002;
        }
      }
    }
  }

BOOL _SCUnserializeString(CFStringRef *a1, const __CFData *a2, UInt8 *bytes, CFIndex length)
{
  v20[1] = *MEMORY[0x1895F89C0];
  if (a2)
  {
    CFStringRef v5 = CFStringCreateFromExternalRepresentation(0LL, a2, 0x8000100u);
    *a1 = v5;
    if (v5) {
      return 1LL;
    }
  }

  else
  {
    BOOL v9 = CFDataCreateWithBytesNoCopy(0LL, bytes, length, (CFAllocatorRef)*MEMORY[0x189604DC8]);
    *a1 = CFStringCreateFromExternalRepresentation(0LL, v9, 0x8000100u);
    CFRelease(v9);
    mach_error_t v10 = MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], bytes, length);
    if (v10)
    {
      mach_error_t v11 = v10;
      BOOL v12 = _SC_LOG_DEFAULT();
      uint64_t v13 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
      {
        _os_log_pack_size();
        mach_error_t v14 = (char *)v20 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        uint64_t v16 = mach_error_string(v11);
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = v16;
        __SC_log_send(5, (uint64_t)v12, v13, v14);
      }
    }

    if (*a1) {
      return 1LL;
    }
  }

  uint64_t v17 = _SC_LOG_DEFAULT();
  uint64_t v18 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v17, (os_log_type_t)v18);
  if (result)
  {
    _os_log_pack_size();
    v19 = (char *)v20 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v17, v18, v19);
    return 0LL;
  }

  return result;
}

BOOL _SCSerializeData(const void *a1, vm_address_t *a2, vm_size_t *a3)
{
  v15[1] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFDataGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  mach_error_t v7 = __CFDataCopyVMData((const __CFData *)a1, a2, a3);
  if (!v7) {
    return 1LL;
  }
  mach_error_t v8 = v7;
  BOOL v9 = _SC_LOG_DEFAULT();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v9, (os_log_type_t)v10);
  if (result)
  {
    _os_log_pack_size();
    BOOL v12 = (char *)v15 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    mach_error_t v14 = mach_error_string(v8);
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)(v13 + 4) = v14;
    __SC_log_send(5, (uint64_t)v9, v10, v12);
    return 0LL;
  }

  return result;
}

uint64_t _SCUnserializeData(CFDataRef *a1, const UInt8 *a2, CFIndex a3)
{
  v13[1] = *MEMORY[0x1895F89C0];
  *a1 = CFDataCreate(0LL, a2, a3);
  mach_error_t v5 = MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], a2, a3);
  if (!v5) {
    return 1LL;
  }
  mach_error_t v6 = v5;
  mach_error_t v7 = _SC_LOG_DEFAULT();
  uint64_t v8 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
  {
    _os_log_pack_size();
    BOOL v9 = (char *)v13 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    mach_error_t v11 = mach_error_string(v6);
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = v11;
    __SC_log_send(5, (uint64_t)v7, v8, v9);
  }

  _SCErrorSet(1001);
  return 0LL;
}

CFDictionaryRef _SCSerializeMultiple(const __CFDictionary *a1)
{
  keys[32] = *(void **)MEMORY[0x1895F89C0];
  CFIndex Count = CFDictionaryGetCount(a1);
  CFIndex v3 = Count;
  if (Count < 1)
  {
    mach_error_t v5 = (const void **)v13;
    mach_error_t v6 = values;
    BOOL v4 = keys;
LABEL_9:
    CFDictionaryRef v9 = CFDictionaryCreate(0LL, (const void **)v4, (const void **)v6, v3, MEMORY[0x189605240], MEMORY[0x189605250]);
  }

  else
  {
    if ((unint64_t)Count < 0x21)
    {
      mach_error_t v5 = (const void **)v13;
      mach_error_t v6 = values;
      BOOL v4 = keys;
    }

    else
    {
      BOOL v4 = (void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
      mach_error_t v5 = (const void **)MEMORY[0x186E08750](0LL, 8 * v3, 0LL);
      mach_error_t v6 = (void **)MEMORY[0x186E08750](0LL, 8 * v3, 0LL);
    }

    bzero(v6, 8 * v3);
    CFDictionaryGetKeysAndValues(a1, (const void **)v4, v5);
    uint64_t v7 = 0LL;
    CFIndex v8 = v3;
    while (1)
    {
      v6[v7] = 0LL;
      if (!_SCSerialize(v5[v7], (CFDataRef *)&v6[v7], 0LL, 0LL)) {
        break;
      }
      ++v7;
      if (!--v8) {
        goto LABEL_9;
      }
    }

    CFDictionaryRef v9 = 0LL;
  }

  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      mach_error_t v11 = v6[i];
      if (v11) {
        CFRelease(v11);
      }
    }

    if (v4 != keys)
    {
      CFAllocatorDeallocate(0LL, v4);
      CFAllocatorDeallocate(0LL, v5);
      CFAllocatorDeallocate(0LL, v6);
    }
  }

  return v9;
}

CFDictionaryRef _SCUnserializeMultiple(const __CFDictionary *a1)
{
  keys[32] = *(void **)MEMORY[0x1895F89C0];
  CFIndex Count = CFDictionaryGetCount(a1);
  CFIndex v3 = Count;
  if (Count < 1)
  {
    mach_error_t v5 = (const void **)v13;
    mach_error_t v6 = values;
    BOOL v4 = keys;
LABEL_9:
    CFDictionaryRef v9 = CFDictionaryCreate(0LL, (const void **)v4, (const void **)v6, v3, MEMORY[0x189605240], MEMORY[0x189605250]);
  }

  else
  {
    if ((unint64_t)Count < 0x21)
    {
      mach_error_t v5 = (const void **)v13;
      mach_error_t v6 = values;
      BOOL v4 = keys;
    }

    else
    {
      BOOL v4 = (void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
      mach_error_t v5 = (const void **)MEMORY[0x186E08750](0LL, 8 * v3, 0LL);
      mach_error_t v6 = (void **)MEMORY[0x186E08750](0LL, 8 * v3, 0LL);
    }

    bzero(v6, 8 * v3);
    CFDictionaryGetKeysAndValues(a1, (const void **)v4, v5);
    uint64_t v7 = 0LL;
    CFIndex v8 = v3;
    while (_SCUnserialize((CFPropertyListRef *)&v6[v7], (const __CFData *)v5[v7], 0LL, 0LL))
    {
      ++v7;
      if (!--v8) {
        goto LABEL_9;
      }
    }

    CFDictionaryRef v9 = 0LL;
  }

  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      mach_error_t v11 = v6[i];
      if (v11) {
        CFRelease(v11);
      }
    }

    if (v4 != keys)
    {
      CFAllocatorDeallocate(0LL, v4);
      CFAllocatorDeallocate(0LL, v5);
      CFAllocatorDeallocate(0LL, v6);
    }
  }

  return v9;
}

CFPropertyListRef _SCCreatePropertyListFromResource(const __CFURL *a1)
{
  valuePtr[1] = *MEMORY[0x1895F89C0];
  propertyValueTypeRefPtr = 0LL;
  valuePtr[0] = 0LL;
  if (CFURLCopyResourcePropertyForKey(a1, (CFStringRef)*MEMORY[0x189605340], &propertyValueTypeRefPtr, 0LL)) {
    BOOL v2 = propertyValueTypeRefPtr == 0LL;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    CFIndex v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      mach_error_t v6 = (char *)&v21 - ((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v7 + 4) = a1;
      int v8 = 5;
LABEL_15:
      __SC_log_send(v8, (uint64_t)v3, v4, v6);
    }

    return 0LL;
  }

  int Value = CFNumberGetValue(propertyValueTypeRefPtr, kCFNumberSInt64Type, valuePtr);
  CFRelease(propertyValueTypeRefPtr);
  if (Value) {
    BOOL v10 = valuePtr[0] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    CFIndex v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v11 = _os_log_pack_size();
      mach_error_t v6 = (char *)&v21 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 138412290;
      *(void *)(v12 + 4) = a1;
      int v8 = 6;
      goto LABEL_15;
    }

    return 0LL;
  }

  uint64_t v15 = CFReadStreamCreateWithFile(0LL, a1);
  if (!v15) {
    return 0LL;
  }
  uint64_t v16 = v15;
  if (CFReadStreamOpen(v15))
  {
    uint64_t v17 = (UInt8 *)MEMORY[0x186E08750](0LL, valuePtr[0], 0LL);
    CFIndex v18 = CFReadStreamRead(v16, v17, valuePtr[0]);
    CFPropertyListRef v13 = 0LL;
    if (v18 == valuePtr[0])
    {
      v19 = CFDataCreateWithBytesNoCopy(0LL, v17, v18, (CFAllocatorRef)*MEMORY[0x189604DC8]);
      if (v19)
      {
        uint64_t v20 = v19;
        CFPropertyListRef v13 = CFPropertyListCreateWithData(0LL, v19, 0LL, 0LL, 0LL);
        CFRelease(v20);
      }

      else
      {
        CFPropertyListRef v13 = 0LL;
      }
    }

    CFAllocatorDeallocate(0LL, v17);
    CFReadStreamClose(v16);
  }

  else
  {
    CFPropertyListRef v13 = 0LL;
  }

  CFRelease(v16);
  return v13;
}

void _SC_signalRunLoop(const void *a1, __CFRunLoopSource *a2, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 4LL; ; i += 3LL)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i - 4);
      if (CFEqual(a1, ValueAtIndex)) {
        break;
      }
      CFIndex v10 = i - 1;
      if (v10 >= v7) {
        return;
      }
    }

    uint64_t v11 = (__CFRunLoop *)CFArrayGetValueAtIndex(theArray, i - 3);
    if (v11)
    {
      uint64_t v12 = v11;
      if (i - 1 < v7)
      {
        while (1)
        {
          CFPropertyListRef v13 = CFArrayGetValueAtIndex(theArray, i - 1);
          if (CFEqual(a1, v13))
          {
            mach_error_t v14 = CFArrayGetValueAtIndex(theArray, i);
            if (!CFEqual(v12, v14)) {
              break;
            }
          }

          CFIndex v15 = i + 2;
          i += 3LL;
          if (v15 >= v7)
          {
            uint64_t v11 = v12;
            goto LABEL_23;
          }
        }

        for (CFIndex j = 0LL; j < v7; j += 3LL)
        {
          uint64_t v17 = CFArrayGetValueAtIndex(theArray, j);
          if (CFEqual(a1, v17))
          {
            CFIndex v18 = (__CFRunLoop *)CFArrayGetValueAtIndex(theArray, j + 1);
            CFRunLoopMode v19 = CFRunLoopCopyCurrentMode(v18);
            if (v19)
            {
              uint64_t v20 = v19;
              if (CFRunLoopIsWaiting(v18))
              {
                int v21 = CFRunLoopContainsSource(v18, a2, v20);
                CFRelease(v20);
                if (v21)
                {
                  CFRunLoopWakeUp(v18);
                  return;
                }
              }

              else
              {
                CFRelease(v20);
              }
            }
          }
        }

        uint64_t v11 = v12;
      }

LABEL_23:
      CFRunLoopWakeUp(v11);
    }
  }

  uint64_t v11 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if ((v2 & 0xFF0FF00) != 0)
  {
    uint64_t v12 = 0LL;
    while (1)
    {
      CFPropertyListRef v13 = v12 + 16;
      if (v12 == 128) {
        break;
      }
      mach_error_t v14 = *(int *)((char *)ifm_shared_option_descriptions + v12);
      if ((v14 & v2) != 0)
      {
        CFIndex v15 = CFStringCreateWithCString(0LL, *(const char **)((char *)&ifm_shared_option_descriptions[2] + v12), 0x600u);
        CFArrayAppendValue(v11, v15);
        CFRelease(v15);
        v2 &= ~v14;
      }

      uint64_t v12 = v13;
      if ((v2 & 0xFF0FF00) == 0) {
        goto LABEL_36;
      }
    }

    if ((v2 & 0xFF0FF00) != 0)
    {
      uint64_t v16 = (const char **)(v5 + 2);
      do
      {
        if (!*v16) {
          break;
        }
        uint64_t v17 = *((_DWORD *)v16 - 2);
        if ((v17 & v2) != 0)
        {
          CFIndex v18 = CFStringCreateWithCString(0LL, *v16, 0x600u);
          CFArrayAppendValue(v11, v18);
          CFRelease(v18);
          v2 &= ~v17;
        }

        v16 += 2;
      }

      while ((v2 & 0xFF0FF00) != 0);
    }
  }

  v108 = 0LL;
  v109 = 0LL;
  v107 = 0LL;
  v113 = 0LL;
  CFDictionaryRef v9 = 0LL;
  CFIndex v23 = 0LL;
  uint64_t v17 = 0LL;
  mach_error_t v14 = 0LL;
  CFIndex v15 = 0LL;
  uint64_t v16 = 0LL;
LABEL_24:
  int v8 = 0LL;
LABEL_25:
  v114 = v9;
  v115 = v16;
  v110 = v14;
  v111 = v17;
  v112 = v15;
  if (v16 && v14 && v15 && v17)
  {
    v105 = v5;
    v106 = v6;
    int Value = (const __CFDictionary *)SCPreferencesGetValue((SCPreferencesRef)v16, @"NetworkServices");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID)
      {
        CFIndex Count = CFDictionaryGetCount(Value);
        v36 = (const __CFDictionary *)SCPreferencesGetValue(v14, @"NetworkServices");
        uint64_t v37 = CFDictionaryGetTypeID();
        if (v36)
        {
          if (CFGetTypeID(v36) == v37 && Count == CFDictionaryGetCount(v36))
          {
            if (Count < 0x41) {
              CFIndex v38 = (const void **)v120;
            }
            else {
              CFIndex v38 = (const void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
            }
            v68 = v38;
            CFDictionaryGetKeysAndValues(Value, 0LL, v38);
            Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
            v104 = Mutable;
            if (Count)
            {
              v70 = 0LL;
              v71 = v68;
              do
              {
                v72 = v71[v70];
                v73 = CFDictionaryGetTypeID();
                if (v72 && CFGetTypeID(v72) == v73) {
                  CFArrayAppendValue(v104, v72);
                }
                ++v70;
                v71 = v68;
              }

              while (Count != v70);
              v101 = CFArrayGetCount(v104);
              if (Count > 0x40)
              {
                v74 = (const void **)MEMORY[0x186E08750](0LL, Count, 0LL);
                goto LABEL_94;
              }
            }

            else
            {
              v101 = CFArrayGetCount(Mutable);
            }

            v74 = (const void **)v121;
LABEL_94:
            v102 = v74;
            CFDictionaryGetKeysAndValues(v36, 0LL, v74);
            v103 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
            if (Count)
            {
              v75 = v102;
              do
              {
                v76 = *v75;
                v77 = CFDictionaryGetTypeID();
                if (v76 && CFGetTypeID(v76) == v77) {
                  CFArrayAppendValue(v103, v76);
                }
                ++v75;
                --Count;
              }

              while (Count);
            }

            v78 = CFArrayGetCount(v103);
            v79 = 1;
            if (v101 == v78)
            {
              v45 = v114;
              if (v78 >= 1)
              {
                v80 = 0LL;
                while (1)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(v103, v80);
                  v82 = CFArrayGetCount(v104);
                  v79 = v82 < 1;
                  if (v82 < 1) {
                    break;
                  }
                  v83 = v82;
                  v100 = v80;
                  v84 = 0LL;
                  v85 = v104;
                  while (1)
                  {
                    v86 = CFArrayGetValueAtIndex(v85, v84);
                    if (CFEqual(ValueAtIndex, v86)) {
                      break;
                    }
                    if (v83 == ++v84)
                    {
                      v79 = 1;
                      goto LABEL_110;
                    }
                  }

                  v80 = v100 + 1;
                  v45 = v114;
                  if (v100 + 1 == v101) {
                    goto LABEL_111;
                  }
                }

                v79 = 1;
              }
            }

            else
            {
LABEL_110:
              v45 = v114;
            }

      mach_msg_destroy(&msg);
      return v12;
    }

    mig_dealloc_special_reply_port();
  }

  return v12;
}

    mach_msg_destroy(&msg);
    return v8;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v8;
}

    mach_msg_destroy(&msg);
    return v9;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v9;
}

    mach_msg_destroy(&msg);
    return v7;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v7;
}

    mach_msg_destroy(&msg);
    return v6;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v6;
}

    mach_msg_destroy(&msg);
    return v6;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v6;
}

    mach_msg_destroy(&msg);
    return v7;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v7;
}

uint64_t _SC_isScheduled(const void *a1, const void *a2, const void *a3, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0LL;
  while (1)
  {
    if (!a1 || (uint64_t v11 = CFArrayGetValueAtIndex(theArray, v10), CFEqual(a1, v11)))
    {
      if (!a2 || (uint64_t v12 = CFArrayGetValueAtIndex(theArray, v10 + 1), CFEqual(a2, v12)))
      {
        if (!a3) {
          break;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10 + 2);
        if (CFEqual(a3, ValueAtIndex)) {
          break;
        }
      }
    }

    v10 += 3LL;
    if (v10 >= v9) {
      return 0LL;
    }
  }

  return 1LL;
}

void _SC_schedule(void *value, const void *a2, const void *a3, CFMutableArrayRef theArray)
{
}

uint64_t _SC_unschedule(const void *a1, const void *a2, const void *a3, CFArrayRef theArray, int a5)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    return 0;
  }

  else
  {
    CFIndex v11 = Count;
    unsigned __int8 v12 = 0;
    CFIndex v13 = 0LL;
    do
    {
      while (1)
      {
        if (!a1 || (mach_error_t v14 = CFArrayGetValueAtIndex(theArray, v13), CFEqual(a1, v14)))
        {
          if (!a2 || (CFIndex v15 = CFArrayGetValueAtIndex(theArray, v13 + 1), CFEqual(a2, v15)))
          {
            if (!a3) {
              break;
            }
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13 + 2);
            if (CFEqual(a3, ValueAtIndex)) {
              break;
            }
          }
        }

        v13 += 3LL;
        if (v13 >= v11) {
          return v12;
        }
      }

      CFArrayRemoveValueAtIndex(theArray, v13 + 2);
      CFArrayRemoveValueAtIndex(theArray, v13 + 1);
      CFArrayRemoveValueAtIndex(theArray, v13);
      unsigned __int8 v12 = 1;
      if (!a5) {
        break;
      }
      v11 -= 3LL;
    }

    while (v13 < v11);
  }

  return v12;
}

uint64_t _SC_getApplicationBundleID()
{
  if (_SC_getApplicationBundleID_once != -1) {
    dispatch_once(&_SC_getApplicationBundleID_once, &__block_literal_global_9);
  }
  return _SC_getApplicationBundleID_bundleID;
}

uint64_t _SC_CFBundleGet()
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!_SC_CFBundleGet_bundle)
  {
    CFBundleRef BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.SystemConfiguration");
    _SC_CFBundleGet_bundle = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
    {
      CFRetain(BundleWithIdentifier);
    }

    else
    {
      CFIndex v1 = _SC_LOG_DEFAULT();
      uint64_t v2 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v1, (os_log_type_t)v2))
      {
        uint64_t v3 = _os_log_pack_size();
        uint64_t v4 = &v19[-((MEMORY[0x1895F8858](v3) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v5 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v5 = 138412290;
        *(void *)(v5 + 4) = @"com.apple.SystemConfiguration";
        __SC_log_send(5, (uint64_t)v1, v2, v4);
      }

      mach_error_t v6 = getenv("DYLD_FRAMEWORK_PATH");
      if (v6)
      {
        CFIndex v7 = v6;
        size_t v8 = strlen(v6);
        if (v8)
        {
          while (v8 >= 2)
          {
            size_t v9 = v8 - 1;
            int v10 = v7[--v8];
            if (v10 != 47)
            {
              if (v9 + 1 >= 5 && !strncmp(&v7[v9 - 3], "~sym", 4uLL) && v9 + 57 <= 0x3FF)
              {
                __strlcpy_chk();
                strlcpy(&v19[v9 + 5], "~dst", 1027 - v9);
                strlcat((char *)&v20[v9 + 1], "/System/Library/Frameworks/SystemConfiguration.framework", 1023 - v9);
                CFIndex v11 = CFURLCreateFromFileSystemRepresentation(0LL, v20, v9 + 57, 1u);
                _SC_CFBundleGet_bundle = (uint64_t)CFBundleCreate(0LL, v11);
                CFRelease(v11);
              }

              break;
            }
          }
        }
      }

      if (!_SC_CFBundleGet_bundle)
      {
        unsigned __int8 v12 = CFURLCreateWithFileSystemPath( 0LL,  @"/System/Library/Frameworks/SystemConfiguration.framework",  kCFURLPOSIXPathStyle,  1u);
        _SC_CFBundleGet_bundle = (uint64_t)CFBundleCreate(0LL, v12);
        CFRelease(v12);
        if (!_SC_CFBundleGet_bundle)
        {
          CFIndex v13 = _SC_LOG_DEFAULT();
          uint64_t v14 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v13, (os_log_type_t)v14))
          {
            uint64_t v15 = _os_log_pack_size();
            uint64_t v16 = &v19[-((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
            __error();
            uint64_t v17 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v17 = 138412290;
            *(void *)(v17 + 4) = @"com.apple.SystemConfiguration";
            __SC_log_send(3, (uint64_t)v13, v14, v16);
          }
        }
      }
    }
  }

  return _SC_CFBundleGet_bundle;
}

CFMachPortRef _SC_CFMachPortCreateWithPort( uint64_t a1, mach_port_t a2, void (__cdecl *a3)(CFMachPortRef, void *, CFIndex, void *), CFMachPortContext *a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  HIBYTE(v18) = 0;
  CFMachPortRef v6 = CFMachPortCreateWithPort(0LL, a2, a3, a4, (Boolean *)&v18 + 7);
  if (!v6 || HIBYTE(v18))
  {
    CFIndex v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      int v10 = (char *)&v18 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)(v11 + 4) = a1;
      *(_WORD *)(v11 + 12) = 2048;
      *(void *)(v11 + 14) = a2;
      __SC_log_send(5, (uint64_t)v7, v8, v10);
    }

    if (v6) {
      unsigned __int8 v12 = CFStringCreateWithFormat(0LL, 0LL, @"%s: CFMachPortCreateWithPort recycled, [old] port = %@", a1, v6);
    }
    else {
      unsigned __int8 v12 = CFStringCreateWithFormat(0LL, 0LL, @"%s: CFMachPortCreateWithPort returned NULL", a1);
    }
    CFIndex v13 = v12;
    uint64_t v14 = _SC_cfstring_to_cstring_ext(v12, 0LL, 0LL, 0x600u, 0, 0LL);
    CFRelease(v13);
    uint64_t v15 = getprogname();
    CFStringRef v16 = CFStringCreateWithFormat(0LL, 0LL, @"A recycled mach_port has been detected by %s.", v15);
    _SC_crash((const char *)v14, @"CFMachPort error", (uint64_t)v16);
    CFAllocatorDeallocate(0LL, v14);
    CFRelease(v16);
  }

  return v6;
}

void _SC_crash(const char *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (_SC_isAppleInternal_once_0 != -1) {
    dispatch_once(&_SC_isAppleInternal_once_0, &__block_literal_global_47);
  }
  if (_SC_isAppleInternal_isInternal_0)
  {
    if (a1) {
      CFMachPortRef v6 = a1;
    }
    else {
      CFMachPortRef v6 = "_SC_crash() called w/o crash_info";
    }
    qword_18C54F7A0 = (uint64_t)v6;
    CFIndex v7 = _SC_LOG_DEFAULT();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v10 = v6;
      _os_log_impl(&dword_1811D3000, v7, OS_LOG_TYPE_FAULT, "%s", buf, 0xCu);
    }

    if (a2 && a3 && (_SC_ReportCrash_warned & 1) == 0)
    {
      uint64_t v8 = CFStringCreateWithFormat(0LL, 0LL, @"%@\n\nPlease collect the crash report and file a Radar.", a3);
      CFUserNotificationDisplayNotice(0.0, 0LL, 0LL, 0LL, 0LL, a2, v8, 0LL);
      CFRelease(v8);
      _SC_ReportCrash_warned = 1;
    }

    qword_18C54F7A0 = 0LL;
  }

void _SC_logMachPortStatus()
{
  *(void *)&v20[13] = *MEMORY[0x1895F89C0];
  uint64_t v0 = _SC_LOG_DEFAULT();
  uint64_t v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, (os_log_type_t)v1))
  {
    _os_log_pack_size();
    uint64_t v2 = &v14[-((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(7, (uint64_t)v0, v1, v2);
  }

  if (!MEMORY[0x186E095F0](*MEMORY[0x1895FBBE0], &v17, &v15, &v16, v14))
  {
    Mutable = CFStringCreateMutable(0LL, 0LL);
    if (v15)
    {
      for (unint64_t i = 0LL; i < v15; ++i)
      {
        uint64_t v5 = v16;
        if (!*(_DWORD *)(v16 + 4 * i))
        {
          uint64_t v8 = &v18;
          goto LABEL_15;
        }

        __int16 v18 = 10272;
        int v6 = *(_DWORD *)(v16 + 4 * i);
        CFIndex v7 = &v19;
        if ((v6 & 0x10000) != 0)
        {
          char v19 = 83;
          int v6 = *(_DWORD *)(v16 + 4 * i);
          CFIndex v7 = v20;
          if ((v6 & 0x20000) == 0)
          {
LABEL_9:
            if ((v6 & 0x40000) == 0) {
              goto LABEL_10;
            }
            goto LABEL_19;
          }
        }

        else if ((v6 & 0x20000) == 0)
        {
          goto LABEL_9;
        }

        *v7++ = 82;
        int v6 = *(_DWORD *)(v5 + 4 * i);
        if ((v6 & 0x40000) == 0)
        {
LABEL_10:
          if ((v6 & 0x80000) != 0) {
            goto LABEL_20;
          }
          goto LABEL_11;
        }

LABEL_19:
        *v7++ = 79;
        int v6 = *(_DWORD *)(v16 + 4 * i);
        if ((v6 & 0x80000) != 0)
        {
LABEL_20:
          *v7++ = 80;
          if ((*(_DWORD *)(v16 + 4 * i) & 0x100000) == 0) {
            goto LABEL_13;
          }
LABEL_12:
          *v7++ = 68;
          goto LABEL_13;
        }

    uint64_t v14 = 1002;
    goto LABEL_20;
  }

  int v6 = *(dispatch_object_s **)(a1 + 288);
  if (!v6) {
    goto LABEL_19;
  }
  CFIndex v7 = (void *)(a1 + 288);
  if (*(void *)(a1 + 344)
    || !*(void *)(a1 + 296)
    || (dispatch_source_cancel(*(dispatch_source_t *)(a1 + 296)),
        *(void *)(a1 + 296) = 0LL,
        (int v6 = *(dispatch_object_s **)(a1 + 288)) != 0LL))
  {
    dispatch_release(v6);
LABEL_11:
    *CFIndex v7 = 0LL;
  }

  *(_BYTE *)(a1 + 217) = 0;
  if (!*(void *)(a1 + 344))
  {
    uint64_t v16 = __SCNetworkConnectionSessionPort(a1);
    if (!v16) {
      goto LABEL_21;
    }
    uint64_t v17 = pppcontroller_notification(v16, 0, (_DWORD *)&v18 + 1);
    if (__SCNetworkConnectionNeedsRetry( a1,  (uint64_t)"__SCNetworkConnectionUnscheduleFromRunLoop pppcontroller_notification()",  v17,  (mach_error_t *)&v18 + 1))
    {
      uint64_t v14 = 0;
      HIDWORD(v18) = 0;
      goto LABEL_33;
    }

    uint64_t v14 = HIDWORD(v18);
    if (!v17)
    {
LABEL_33:
      if (!v14) {
        goto LABEL_14;
      }
    }

      CFRelease(v20);
LABEL_21:
      IOObjectRelease(v16);
      if (CFProperty)
      {
        IOObjectRelease(HIDWORD(v25));
        return CFProperty;
      }
    }
  }

    __int16 v18 = copy_default_set_name(1);
    char v19 = SCNetworkSetGetName(set);
    if (v19 == v18)
    {
      CFRelease(v18);
    }

    else
    {
      if (!v18 || !v19)
      {
        CFRelease(v18);
        goto LABEL_31;
      }

      uint64_t v20 = CFEqual(v19, v18);
      CFRelease(v18);
      if (!v20)
      {
LABEL_31:
        if (!name) {
          goto LABEL_47;
        }
        goto LABEL_42;
      }
    }

    if (geteuid())
    {
      uint64_t v21 = __log_SCNetworkConfiguration();
      v22 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v21, (os_log_type_t)v22))
      {
        CFIndex v23 = _os_log_pack_size();
        CFIndex v24 = (char *)block - ((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        v25 = _os_log_pack_fill();
        *(_DWORD *)v25 = 138412290;
        *(void *)(v25 + 4) = set;
        __SC_log_send(3, (uint64_t)v21, v22, v24);
      }

      _SC_crash("The Automatic network set cannot be renamed", 0LL, 0LL);
      v26 = 1002;
LABEL_29:
      _SCErrorSet(v26);
      goto LABEL_58;
    }

    goto LABEL_31;
  }

  name = v8;
  if (v8) {
    goto LABEL_34;
  }
LABEL_47:
  CFIndex v35 = SCPreferencesPathKeyCreateSet(0LL, *((void *)set + 2));
  int Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), v35);
  uint64_t v37 = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == v37)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
      Mutable = MutableCopy;
      if (!name)
      {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
LABEL_54:
        uint64_t v16 = SCPreferencesPathSetValue(*((SCPreferencesRef *)set + 3), v35, Mutable);
        CFRelease(Mutable);
        CFRelease(v35);
        if (v16)
        {
          v40 = __log_SCNetworkConfiguration();
          v41 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v40, (os_log_type_t)v41))
          {
            v42 = _os_log_pack_size();
            v43 = (char *)block - ((MEMORY[0x1895F8858](v42) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            v44 = _os_log_pack_fill();
            *(_DWORD *)v44 = 138412290;
            *(void *)(v44 + 4) = set;
            __SC_log_send(7, (uint64_t)v40, v41, v43);
          }
        }

        goto LABEL_59;
      }

    v22 = 0LL;
    if (!v6) {
      goto LABEL_28;
    }
LABEL_27:
    CFRelease(v6);
    goto LABEL_28;
  }

  CFIndex v7 = v40;
  if (!CFURLGetFileSystemRepresentation(v40, 1u, v44, 1024LL))
  {
    v28 = __log_SCNetworkConfiguration();
    v29 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v28, (os_log_type_t)v29))
    {
      v30 = _os_log_pack_size();
      v31 = (char *)&v36 - ((MEMORY[0x1895F8858](v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      v32 = _os_log_pack_fill();
      *(_DWORD *)v32 = 138412290;
      *(void *)(v32 + 4) = v7;
      __SC_log_send(5, (uint64_t)v28, v29, v31);
    }

    goto LABEL_19;
  }

  uint64_t v8 = copyfile_state_alloc();
  if (copyfile((const char *)v43, (const char *)v41, v8, 0xFu))
  {
    uint64_t v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v12 = (char *)&v36 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      unsigned int v13 = _os_log_pack_fill();
      uint64_t v14 = __error();
      unsigned int v15 = strerror(*v14);
      *(_DWORD *)unsigned int v13 = 136315650;
      *(void *)(v13 + 4) = v43;
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v16 = v41;
LABEL_24:
      *(void *)(v13 + 14) = v16;
      *(_WORD *)(v13 + 22) = 2080;
      *(void *)(v13 + 24) = v15;
      __SC_log_send(5, (uint64_t)v9, v10, v12);
      goto LABEL_25;
    }

    goto LABEL_25;
  }

  copyfile_state_free(v8);
  chmod((const char *)v41, 0x1EDu);
  uint64_t v8 = copyfile_state_alloc();
  if (copyfile((const char *)v44, (const char *)v42, v8, 0xFu))
  {
    uint64_t v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
    {
      v33 = _os_log_pack_size();
      uint64_t v12 = (char *)&v36 - ((MEMORY[0x1895F8858](v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      unsigned int v13 = _os_log_pack_fill();
      v34 = __error();
      unsigned int v15 = strerror(*v34);
      *(_DWORD *)unsigned int v13 = 136315650;
      *(void *)(v13 + 4) = v44;
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v16 = v42;
      goto LABEL_24;
    }

    if (++v8 == v7)
    {
      v44 = 1;
LABEL_24:
      v46 = v9;
      if (Count >= 1)
      {
        char v19 = 0LL;
        v41 = (const void *)*MEMORY[0x189604DE8];
        v40 = (const void *)*MEMORY[0x189604DE0];
        v43 = v2;
        unsigned int v47 = Count;
        do
        {
          uint64_t v20 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v2, v19);
          uint64_t v21 = SCNetworkInterfaceGetBSDName(v20);
          PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(v20);
          if (PhysicalInterface)
          {
            CFIndex v23 = PhysicalInterface;
            IOPath = _SCNetworkInterfaceGetIOPath((uint64_t)PhysicalInterface);
            int Value = CFDictionaryGetValue(theDict, v23);
            if (!Value)
            {
              if (v23[368]) {
                int Value = v41;
              }
              else {
                int Value = v40;
              }
              CFDictionaryAddValue(theDict, v23, Value);
            }

            if (v44)
            {
              v26 = 0LL;
              while (1)
              {
                CFStringRef v27 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v6, v26);
                v28 = SCNetworkInterfaceGetBSDName(v27);
                if (CFEqual(v21, v28)) {
                  break;
                }
                if (v7 == ++v26) {
                  goto LABEL_36;
                }
              }

              if (CFEqual(v20, v27))
              {
LABEL_44:
                uint64_t v2 = v43;
LABEL_45:
                CFIndex Count = v47;
                goto LABEL_56;
              }

              v34 = v46;
              uint64_t v2 = v43;
              CFIndex Count = v47;
              if (v46 == -1)
              {
                v34 = inet_dgram_socket();
                if (v34 == -1) {
                  goto LABEL_66;
                }
              }

              v46 = v34;
              if (!CFBooleanGetValue((CFBooleanRef)Value)
                || !__vlan_clear(v46, v21)
                || (CFIndex v35 = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)v23),
                    Tag = SCVLANInterfaceGetTag(v20),
                    uint64_t v37 = v35,
                    CFIndex Count = v47,
                    !__vlan_set(v46, v21, v37, Tag)))
              {
                if (!CFBooleanGetValue((CFBooleanRef)Value)) {
                  _SCErrorSet(1001);
                }
                __destroyInterface(v46, v21);
                goto LABEL_55;
              }
            }

            else
            {
LABEL_36:
              v29 = CFBooleanGetValue((CFBooleanRef)Value);
              if (!IOPath) {
                goto LABEL_44;
              }
              uint64_t v2 = v43;
              CFIndex Count = v47;
              if (v29)
              {
                v30 = v46;
                if (v46 == -1)
                {
                  v30 = inet_dgram_socket();
                  if (v30 == -1) {
                    goto LABEL_66;
                  }
                }

                v46 = v30;
                if (!__createInterface(v30, v21))
                {
                  v33 = __error();
                  _SCErrorSet(*v33);
LABEL_55:
                  v42 = 0;
                  goto LABEL_56;
                }

                v31 = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)v23);
                v32 = SCVLANInterfaceGetTag(v20);
                if (!__vlan_set(v30, v21, v31, v32))
                {
                  __destroyInterface(v30, v21);
                  v42 = 0;
                }

                goto LABEL_45;
              }
            }
          }

LABEL_11:
        if ((v6 & 0x100000) != 0) {
          goto LABEL_12;
        }
LABEL_13:
        *CFIndex v7 = 41;
        uint64_t v8 = (__int16 *)(v7 + 1);
LABEL_15:
        *(_BYTE *)uint64_t v8 = 0;
        CFStringAppendFormat(Mutable, 0LL, @" %u%s", *(unsigned int *)(v17 + 4 * i), &v18);
      }
    }

    uint64_t v9 = _SC_LOG_DEFAULT();
    uint64_t v10 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v9, (os_log_type_t)v10))
    {
      _os_log_pack_size();
      uint64_t v11 = &v14[-((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v12 = _os_log_pack_fill();
      unsigned int v13 = v15;
      *(_DWORD *)uint64_t v12 = 67109378;
      *(_DWORD *)(v12 + 4) = v13;
      *(_WORD *)(v12 + 8) = 2112;
      *(void *)(v12 + 10) = Mutable;
      __SC_log_send(7, (uint64_t)v9, v10, v11);
    }

    CFRelease(Mutable);
  }

  xpc_dictionary_set_int64(v6, "Flags", a3);
  return v6;
}

    CFRelease(v10);
LABEL_12:
    ObjectWrapperRelease(v8);
    uint64_t v10 = 0LL;
    uint64_t v8 = 0LL;
    goto LABEL_13;
  }

  if (a3 && !SCDynamicStoreSetDispatchQueue(v10, a3))
  {
    uint64_t v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12)) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }

    if (!v2) {
      uint64_t v2 = "privacy";
    }
    snprintf(__str, 0x100uLL, "%s() requires an entitlement, please contact %s", a1, v2);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_1;
    block[3] = &__block_descriptor_tmp_9;
    block[5] = 0LL;
    block[6] = 0LL;
    block[4] = __str;
    if (_SC_crash_once_once_1 != -1) {
      dispatch_once(&_SC_crash_once_once_1, block);
    }
  }

  if (!SCNetworkServiceEstablishDefaultConfiguration(v6))
  {
    v26 = _SC_LOG_DEFAULT();
    CFStringRef v27 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v26, (os_log_type_t)v27))
    {
      v28 = _os_log_pack_size();
      v29 = (char *)v34 - ((MEMORY[0x1895F8858](v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      v30 = _os_log_pack_fill();
      v31 = SCError();
      v32 = SCErrorString(v31);
      *(_DWORD *)v30 = 138412546;
      *(void *)(v30 + 4) = BSDName;
      *(_WORD *)(v30 + 12) = 2080;
      *(void *)(v30 + 14) = v32;
      __SC_log_send(3, (uint64_t)v26, v27, v29);
    }

    SCNetworkServiceRemove(v6);
    CFRelease(v6);
    return 0LL;
  }

  return v6;
}

  unsigned int v15 = helperexec(a1, a2, (uint64_t)BytePtr, (int)a3, 0LL, 0, (int *)&v26, &v27, (_DWORD *)&v26 + 1);
LABEL_12:
  if (v15)
  {
    if (v27) {
      MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], v27, HIDWORD(v26));
    }
    if (v15 != 268435459)
    {
      uint64_t v16 = __log_SCPreferences();
      uint64_t v17 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
      {
        _os_log_pack_size();
        __int16 v18 = (char *)&v25 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        char v19 = _os_log_pack_fill();
        uint64_t v20 = mach_error_string(v15);
        *(_DWORD *)char v19 = 136315138;
        *(void *)(v19 + 4) = v20;
        __SC_log_send(5, (uint64_t)v16, v17, v18);
      }
    }

    _SCErrorSet(v15);
    return 0LL;
  }

  else if (!v27 || (BOOL result = _SCUnserializeData(&v28, v27, HIDWORD(v26)), (_DWORD)result))
  {
    if (a4)
    {
      __SCPreferencesHandleInternalStatus((int *)&v26);
      *a4 = v26;
    }

    if (a5)
    {
      *a5 = v28;
    }

    else if (v28)
    {
      v22 = __log_SCPreferences();
      CFIndex v23 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v22, (os_log_type_t)v23))
      {
        _os_log_pack_size();
        CFIndex v24 = (char *)&v25 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v22, v23, v24);
      }

      CFRelease(v28);
    }

    return 1LL;
  }

  return result;
}

  _SCErrorSet(v13);
  return 0LL;
}

BOOL _SC_checkMachPortReceive(uint64_t a1, uint64_t name)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v6 = 0LL;
  memset(v5, 0, sizeof(v5));
  int v4 = 0;
  else {
    BOOL v2 = v4 == 0;
  }
  return !v2;
}

uint64_t _SC_getMachPortReferences( uint64_t name, mach_port_type_t *ptype, uint64_t a3, uint64_t a4, integer_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = a9;
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v17 = (ipc_space_inspect_t *)MEMORY[0x1895FBBE0];
  uint64_t v18 = mach_port_type(*MEMORY[0x1895FBBE0], name, ptype);
  if (!(_DWORD)v18)
  {
    if (a3)
    {
      if ((*((_BYTE *)ptype + 2) & 1) != 0)
      {
        uint64_t v26 = MEMORY[0x186E095CC](*v17, name, 0LL, a3);
        if ((_DWORD)v26)
        {
          uint64_t v19 = v26;
          uint64_t v20 = _SC_LOG_DEFAULT();
          uint64_t v21 = _SC_syslog_os_log_mapping(7);
          if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
            return v19;
          }
          goto LABEL_3;
        }
      }
    }

    if (!a4 || !a5 || (*((_BYTE *)ptype + 2) & 2) == 0) {
      goto LABEL_38;
    }
    uint64_t v29 = MEMORY[0x186E095CC](*v17, name, 1LL, a4);
    if ((_DWORD)v29)
    {
      uint64_t v19 = v29;
      uint64_t v20 = _SC_LOG_DEFAULT();
      uint64_t v21 = _SC_syslog_os_log_mapping(7);
      if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
        return v19;
      }
      goto LABEL_3;
    }

    mach_msg_type_number_t port_info_outCnt = 10;
    uint64_t attributes = mach_port_get_attributes(*v17, name, 2, a5, &port_info_outCnt);
    if ((_DWORD)attributes)
    {
      uint64_t v19 = attributes;
      uint64_t v20 = _SC_LOG_DEFAULT();
      uint64_t v21 = _SC_syslog_os_log_mapping(7);
      if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
        return v19;
      }
    }

    else
    {
LABEL_38:
      if (a6 && (*((_BYTE *)ptype + 2) & 4) != 0 && (uint64_t v27 = MEMORY[0x186E095CC](*v17, name, 2LL, a6), (_DWORD)v27))
      {
        uint64_t v19 = v27;
        uint64_t v20 = _SC_LOG_DEFAULT();
        uint64_t v21 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
          return v19;
        }
      }

      else if (a7 && (*((_BYTE *)ptype + 2) & 8) != 0 && (uint64_t v28 = MEMORY[0x186E095CC](*v17, name, 3LL, a7), (_DWORD)v28))
      {
        uint64_t v19 = v28;
        uint64_t v20 = _SC_LOG_DEFAULT();
        uint64_t v21 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
          return v19;
        }
      }

      else
      {
        if (!a8 || (*((_BYTE *)ptype + 2) & 0x10) == 0) {
          return 0LL;
        }
        uint64_t v19 = MEMORY[0x186E095CC](*v17, name, 4LL, a8);
        if (!(_DWORD)v19) {
          return v19;
        }
        uint64_t v20 = _SC_LOG_DEFAULT();
        uint64_t v21 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
          return v19;
        }
      }
    }

    _os_log_pack_size();
    v22 = (char *)&v31 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    goto LABEL_4;
  }

  uint64_t v19 = v18;
  uint64_t v20 = _SC_LOG_DEFAULT();
  uint64_t v21 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v20, (os_log_type_t)v21))
  {
LABEL_3:
    _os_log_pack_size();
    v22 = (char *)&v31 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
LABEL_4:
    uint64_t v23 = _os_log_pack_fill();
    CFIndex v24 = mach_error_string(v19);
    *(_DWORD *)uint64_t v23 = 136315650;
    *(void *)(v23 + 4) = v32;
    *(_WORD *)(v23 + 12) = 1024;
    *(_DWORD *)(v23 + 14) = name;
    *(_WORD *)(v23 + 18) = 2080;
    *(void *)(v23 + 20) = v24;
    __SC_log_send(7, (uint64_t)v20, v21, v22);
  }

  return v19;
}

BOOL _SC_checkMachPortSend(uint64_t a1, uint64_t name)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v5 = 0;
  uint64_t v4 = 0LL;
  int MachPortReferences = _SC_getMachPortReferences( name,  &ptype,  (uint64_t)&v5,  0LL,  0LL,  (uint64_t)&v4 + 4,  0LL,  (uint64_t)&v4,  a1);
  BOOL result = 0LL;
  if (!MachPortReferences) {
    return (v5 | HIDWORD(v4) | v4) != 0;
  }
  return result;
}

void _SC_logMachPortReferences(uint64_t a1, uint64_t name)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  int v10 = 0;
  v16[0] = 0;
  if (a1)
  {
    __strlcpy_chk();
    __strlcat_chk();
    if (!(v17 ^ 0x2020 | v18)) {
      LOBYTE(v17) = 58;
    }
  }

  if (!_SC_getMachPortReferences( name,  &ptype,  (uint64_t)&v12 + 4,  (uint64_t)&v12,  (integer_t *)v13,  (uint64_t)&v11 + 4,  (uint64_t)&v11,  (uint64_t)&v10,  (uint64_t)v16))
  {
    uint64_t v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v3, (os_log_type_t)v4))
    {
      _os_log_pack_size();
      int v5 = (char *)&v9 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      if ((_DWORD)v14) {
        uint64_t v7 = ", no more senders";
      }
      else {
        uint64_t v7 = "";
      }
      if ((ptype & 0x100000) != 0) {
        uint64_t v8 = ", dead name request";
      }
      else {
        uint64_t v8 = "";
      }
      __os_log_helper_1_2_10_8_32_4_0_4_0_4_0_4_0_4_0_4_0_4_0_8_32_8_32( v6,  (uint64_t)v16,  name,  name,  SHIDWORD(v12),  v12,  SHIDWORD(v11),  v11,  v10,  (uint64_t)v7,  (uint64_t)v8);
      __SC_log_send(7, (uint64_t)v3, v4, v5);
    }
  }

double __os_log_helper_1_2_10_8_32_4_0_4_0_4_0_4_0_4_0_4_0_4_0_8_32_8_32( uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  *(void *)&double result = 136317442LL;
  *(_DWORD *)a1 = 136317442;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 30) = 1024;
  *(_DWORD *)(a1 + 32) = a6;
  *(_WORD *)(a1 + 36) = 1024;
  *(_DWORD *)(a1 + 38) = a7;
  *(_WORD *)(a1 + 42) = 1024;
  *(_DWORD *)(a1 + 44) = a8;
  *(_WORD *)(a1 + 48) = 1024;
  *(_DWORD *)(a1 + 50) = a9;
  *(_WORD *)(a1 + 54) = 2080;
  *(void *)(a1 + 56) = a10;
  *(_WORD *)(a1 + 64) = 2080;
  *(void *)(a1 + 66) = a11;
  return result;
}

__CFString *_SC_copyBacktrace()
{
  v16[64] = *(void **)MEMORY[0x1895F89C0];
  int v0 = backtrace(v16, 64);
  if (v0 == -1)
  {
    uint64_t v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
    {
      _os_log_pack_size();
      int v10 = (char *)&v16[-1] - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      uint64_t v12 = __error();
      unsigned int v13 = strerror(*v12);
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = v13;
      __SC_log_send(5, (uint64_t)v8, v9, v10);
    }

    return 0LL;
  }

  else
  {
    int v1 = v0;
    Mutable = CFStringCreateMutable(0LL, 0LL);
    uint64_t v3 = backtrace_symbols(v16, v1);
    if (v3)
    {
      uint64_t v4 = v3;
      if (v1 >= 1)
      {
        uint64_t v5 = v1;
        uint64_t v6 = v3;
        do
        {
          uint64_t v7 = (uint64_t)*v6++;
          CFStringAppendFormat(Mutable, 0LL, @"%s\n", v7);
          --v5;
        }

        while (v5);
      }

      free(v4);
    }
  }

  return Mutable;
}

BOOL _SC_getconninfo(int a1, _OWORD *a2, _OWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  if (a2)
  {
    a2[6] = 0uLL;
    a2[7] = 0uLL;
    a2[4] = 0uLL;
    a2[5] = 0uLL;
    a2[2] = 0uLL;
    a2[3] = 0uLL;
    *a2 = 0uLL;
    a2[1] = 0uLL;
    *(void *)&__int128 v16 = a2;
    DWORD2(v16) = 128;
  }

  if (a3)
  {
    a3[6] = 0uLL;
    a3[7] = 0uLL;
    a3[4] = 0uLL;
    a3[5] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    *(void *)&__int128 v17 = a3;
    DWORD2(v17) = 128;
  }

  if (ioctl(a1, 0xC0407398uLL))
  {
    uint64_t v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v7, (os_log_type_t)v8);
    if (result)
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v11 = (char *)&v15 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      unsigned int v13 = __error();
      uint64_t v14 = strerror(*v13);
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = v14;
      __SC_log_send(5, (uint64_t)v7, v8, v11);
      return 0LL;
    }
  }

  else
  {
    if (a4) {
      *a4 = DWORD2(v15);
    }
    if (a5) {
      *a5 = DWORD1(v15);
    }
    return 1LL;
  }

  return result;
}

CFStringRef _SC_copyInterfaceUUID(const __CFString *a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  data[0] = 0LL;
  data[1] = 0LL;
  _SC_cfstring_to_cstring_ext(a1, (UInt8 *)data, 16LL, 0x8000100u, 0, 0LL);
  *(_OWORD *)md = 0u;
  __int128 v7 = 0u;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, data, 0x10u);
  CC_SHA256_Final(md, &c);
  int v1 = CFUUIDCreateFromUUIDBytes(0LL, *(CFUUIDBytes *)md);
  CFStringRef v2 = CFUUIDCreateString(0LL, v1);
  CFRelease(v1);
  return v2;
}

CFDictionaryRef _SC_IONetworkInterfaceBSDNameMatching(char *cStr)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  *(_OWORD *)keys = xmmword_189B63050;
  CFStringRef v1 = CFStringCreateWithCString(0LL, cStr, 0x8000100u);
  v4[0] = v1;
  v4[1] = @"IONetworkInterface";
  CFDictionaryRef v2 = CFDictionaryCreate(0LL, (const void **)keys, v4, 2LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  CFRelease(v1);
  return v2;
}

void _SCDPluginExecInit()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  *(_OWORD *)&v4.version = xmmword_189B630A0;
  *(_OWORD *)&v4.retain = *(_OWORD *)algn_189B630B0;
  v4.copyDescription = (CFStringRef (__cdecl *)(const void *))childReapedMPCopyDescription;
  childReaped = (uint64_t)CFMachPortCreate(0LL, (CFMachPortCallBack)childrenReaped, &v4, 0LL);
  LODWORD(v5.__sigaction_u.__sa_handler) = 1;
  uint64_t v0 = *MEMORY[0x1895FBBE0];
  uint64_t Port = CFMachPortGetPort((CFMachPortRef)childReaped);
  RunLoopSource = CFMachPortCreateRunLoopSource(0LL, (CFMachPortRef)childReaped, 0LL);
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1896051B0]);
  CFRelease(RunLoopSource);
  v5.__sigaction_u.__sa_handler = (void (__cdecl *)(int))reaper;
  *(void *)&v5.sa_mask = 0xA00000000LL;
  if (sigaction(20, &v5, 0LL) == -1) {
    perror("sigaction");
  }
}

CFStringRef childReapedMPCopyDescription()
{
  return CFStringCreateWithFormat(0LL, 0LL, @"<SIGCHLD MP>");
}

void childrenReaped()
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (initializeLock_initialized != -1) {
    dispatch_once(&initializeLock_initialized, &__block_literal_global_2);
  }
  uint64_t v0 = 0LL;
  do
  {
    pid_t v1 = wait4(-1, &v15, 1, &v16);
    if (!v1) {
      break;
    }
    int v2 = v1;
    if (v1 == -1)
    {
      if (*__error() != 10) {
        perror("wait4");
      }
      break;
    }

    pthread_mutex_lock(&lock_0);
    uint64_t v3 = activeChildren;
    if (activeChildren)
    {
      if (*(_DWORD *)activeChildren == v2)
      {
        uint64_t v4 = 0LL;
LABEL_12:
        *(_DWORD *)(v3 + 24) = v15;
        timeval ru_stime = v16.ru_stime;
        *(timeval *)(v3 + 32) = v16.ru_utime;
        __int128 v7 = *(_OWORD *)&v16.ru_minflt;
        __int128 v8 = *(_OWORD *)&v16.ru_idrss;
        __int128 v9 = *(_OWORD *)&v16.ru_maxrss;
        *(timeval *)(v3 + 48) = ru_stime;
        *(_OWORD *)(v3 + 64) = v9;
        __int128 v10 = *(_OWORD *)&v16.ru_nvcsw;
        __int128 v11 = *(_OWORD *)&v16.ru_msgrcv;
        __int128 v12 = *(_OWORD *)&v16.ru_oublock;
        *(_OWORD *)(v3 + 112) = *(_OWORD *)&v16.ru_nswap;
        *(_OWORD *)(v3 + 128) = v12;
        *(_OWORD *)(v3 + 144) = v11;
        *(_OWORD *)(v3 + 160) = v10;
        *(_OWORD *)(v3 + 80) = v8;
        *(_OWORD *)(v3 + 96) = v7;
        if (v4) {
          unsigned int v13 = (uint64_t *)(v4 + 176);
        }
        else {
          unsigned int v13 = &activeChildren;
        }
        *unsigned int v13 = *(void *)(v3 + 176);
        *(void *)(v3 + 176) = v0;
        uint64_t v0 = (unsigned int *)v3;
      }

      else
      {
        uint64_t v5 = activeChildren;
        while (1)
        {
          uint64_t v3 = *(void *)(v5 + 176);
          if (!v3) {
            break;
          }
          uint64_t v4 = v5;
          uint64_t v5 = *(void *)(v5 + 176);
          if (*(_DWORD *)v3 == v2) {
            goto LABEL_12;
          }
        }
      }
    }

    pthread_mutex_unlock(&lock_0);
  }

  while (v2 > 0);
  LODWORD(v16.ru_utime.tv_sec) = 0x80000;
  if (sigprocmask(2, (const sigset_t *)&v16, 0LL) == -1)
  {
    perror("sigprocmask(SIG_UNBLOCK)");
    if (!v0) {
      return;
    }
  }

  else if (!v0)
  {
    return;
  }

  do
  {
    uint64_t v14 = (unsigned int *)*((void *)v0 + 22);
    (*((void (**)(void, void, unsigned int *, void))v0 + 1))(*v0, v0[6], v0 + 8, *((void *)v0 + 2));
    CFAllocatorDeallocate(0LL, v0);
    uint64_t v0 = v14;
  }

  while (v14);
}

void reaper()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  sigset_t v1 = 0x80000;
  if (sigprocmask(1, &v1, 0LL) == -1) {
    perror("sigprocmask(SIG_BLOCK)");
  }
  mach_port_t Port = CFMachPortGetPort((CFMachPortRef)childReaped);
  _SC_sendMachMessage(Port, 0);
}

uint64_t _SCDPluginSpawnCommand( uint64_t a1, uint64_t a2, const char *a3, char *const *a4, void (*a5)(posix_spawn_file_actions_t *, posix_spawnattr_t *, uint64_t), uint64_t a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  __int128 v12 = *_NSGetEnviron();
  pid_t v17 = 0;
  if (initializeLock_initialized != -1) {
    dispatch_once(&initializeLock_initialized, &__block_literal_global_2);
  }
  pthread_mutex_lock(&lock_0);
  if (!childReaped) {
    _SCDPluginExecInit();
  }
  posix_spawnattr_init(&v18);
  posix_spawn_file_actions_init(&v19);
  posix_spawnattr_setflags(&v18, 0x4000);
  if (a5)
  {
    a5(&v19, &v18, a6);
  }

  else
  {
    posix_spawn_file_actions_addopen(&v19, 0, "/dev/null", 2, 0);
    posix_spawn_file_actions_adddup2(&v19, 0, 1);
    posix_spawn_file_actions_adddup2(&v19, 0, 2);
  }

  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v21 = a3;
    _os_log_impl(&dword_1811D3000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "spawn: %s", buf, 0xCu);
  }

  int v13 = posix_spawn(&v17, a3, &v19, &v18, a4, v12);
  posix_spawnattr_destroy(&v18);
  posix_spawn_file_actions_destroy(&v19);
  if (v13 || !v17)
  {
    int v15 = *__error();
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      _SCDPluginSpawnCommand_cold_1(v15);
    }
    *__error() = v15;
    pid_t v17 = -1;
  }

  else if (a1)
  {
    uint64_t v14 = MEMORY[0x186E08750](0LL, 184LL, 0LL);
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(void *)(v14 + 176) = 0LL;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 160) = 0u;
    *(_DWORD *)uint64_t v14 = v17;
    *(void *)(v14 + 8) = a1;
    *(void *)(v14 + 16) = a2;
    *(void *)(v14 + 176) = activeChildren;
    activeChildren = v14;
  }

  pthread_mutex_unlock(&lock_0);
  return v17;
}

uint64_t _SCDPluginExecCommand2( uint64_t a1, uint64_t a2, uid_t a3, gid_t a4, const char *a5, char *const *a6, void (*a7)(uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  gid_t v16 = getegid();
  uid_t v17 = geteuid();
  uint64_t v31 = 0LL;
  if (!a7 && v17 == a3 && v16 == a4) {
    return _SCDPluginSpawnCommand(a1, a2, a5, a6, 0LL, 0LL);
  }
  if (initializeLock_initialized != -1) {
    dispatch_once(&initializeLock_initialized, &__block_literal_global_2);
  }
  pthread_mutex_lock(&lock_0);
  pw_name = 0LL;
  if (!getpwuid_r(a3, &v32, v35, 0x400uLL, &v31) && v31) {
    pw_name = v31->pw_name;
  }
  if (!childReaped) {
    _SCDPluginExecInit();
  }
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v34 = a5;
    _os_log_impl(&dword_1811D3000, MEMORY[0x1895F8DA0], OS_LOG_TYPE_INFO, "fork/exec: %s", buf, 0xCu);
  }

  uint64_t v20 = fork();
  uint64_t v21 = v20;
  if ((_DWORD)v20 == -1)
  {
    int v23 = *__error();
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      _SCDPluginExecCommand2_cold_1(v23);
    }
    *__error() = v23;
  }

  else
  {
    if (!(_DWORD)v20)
    {
      if (a7)
      {
        a7(0LL, a8);
      }

      else
      {
        int v24 = getdtablesize();
        if (v24 >= 1)
        {
          unsigned int v25 = v24 + 1;
          do
          {
            close(v25 - 2);
            --v25;
          }

          while (v25 > 1);
        }

        int v26 = open("/dev/null", 2, 0LL);
        if (v26 != -1)
        {
          unsigned int v27 = v26;
          dup2(v26, 0);
          dup2(v27, 1);
          dup2(v27, 2);
          if (v27 >= 3) {
            close(v27);
          }
        }
      }

      gid_t v28 = getegid();
      uid_t v29 = geteuid();
      if (v28 != a4) {
        setgid(a4);
      }
      if (v29 == a3)
      {
        if (v28 != a4 && pw_name) {
          initgroups(pw_name, a4);
        }
      }

      else
      {
        if (pw_name) {
          initgroups(pw_name, a4);
        }
        setuid(a3);
      }

      if (setenv("PATH", "/bin:/sbin:/usr/bin:/usr/sbin", 0) == -1)
      {
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
          _SCDPluginExecCommand2_cold_2();
        }
        exit(71);
      }

      execv(a5, a6);
      v30 = __error();
      _exit(*(unsigned __int8 *)v30);
    }

    if (a7) {
      a7(v20, a8);
    }
    if (a1)
    {
      uint64_t v22 = MEMORY[0x186E08750](0LL, 184LL, 0LL);
      *(_OWORD *)uint64_t v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_OWORD *)(v22 + 96) = 0u;
      *(_OWORD *)(v22 + 112) = 0u;
      *(_OWORD *)(v22 + 128) = 0u;
      *(_OWORD *)(v22 + 144) = 0u;
      *(_OWORD *)(v22 + 160) = 0u;
      *(_DWORD *)uint64_t v22 = v21;
      *(void *)(v22 + 8) = a1;
      *(void *)(v22 + 16) = a2;
      *(void *)(v22 + 176) = activeChildren;
      activeChildren = v22;
    }
  }

  pthread_mutex_unlock(&lock_0);
  return v21;
}

uint64_t _SCDPluginExecCommand(uint64_t a1, uint64_t a2, uid_t a3, gid_t a4, const char *a5, char *const *a6)
{
  return _SCDPluginExecCommand2(a1, a2, a3, a4, a5, a6, 0LL, 0LL);
}

uint64_t __initializeLock_block_invoke()
{
  return pthread_mutex_init(&lock_0, 0LL);
}

void OUTLINED_FUNCTION_0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t _SCDynamicStoreSetSessionWatchLimit(uint64_t result)
{
  _sc_store_max = result;
  _sc_store_advise = result;
  return result;
}

os_log_t __log_SCDynamicStore()
{
  os_log_t result = (os_log_t)__log_SCDynamicStore_log;
  if (!__log_SCDynamicStore_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
    __log_SCDynamicStore_log = (uint64_t)result;
  }

  return result;
}

uint64_t __SCDynamicStoreCreatePrivate(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4)
{
  return __SCDynamicStoreCreateInternal(a1, a2, a3, a4, 0);
}

uint64_t __SCDynamicStoreCreateInternal(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4, int a5)
{
  block[7] = *MEMORY[0x1895F89C0];
  if (__SCDynamicStoreInitialize_initialized != -1) {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_51);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a5) {
      *(void *)(Instance + 16) = dispatch_queue_create("SCDynamicStore object", 0LL);
    }
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0LL;
    }
    *(void *)(Instance + 24) = v10;
    *(_DWORD *)(Instance + 48) = 0;
    *(void *)(Instance + 72) = a3;
    if (a4)
    {
      __int128 v11 = *a4;
      __int128 v12 = a4[1];
      *(void *)(Instance + 112) = *((void *)a4 + 4);
      *(_OWORD *)(Instance + 80) = v11;
      *(_OWORD *)(Instance + 96) = v12;
      int v13 = (uint64_t (*)(void))*((void *)a4 + 2);
      if (v13) {
        *(void *)(Instance + 88) = v13(*((void *)a4 + 1));
      }
    }

    *(_DWORD *)(Instance + 192) = -1;
    if (a5)
    {
      uint64_t v17 = 0LL;
      posix_spawnattr_t v18 = &v17;
      uint64_t v19 = 0x2000000000LL;
      char v20 = 0;
      if (storeQueue_once != -1) {
        dispatch_once(&storeQueue_once, &__block_literal_global_3);
      }
      uint64_t v14 = MEMORY[0x1895F87A8];
      v16[0] = MEMORY[0x1895F87A8];
      v16[1] = 0x40000000LL;
      v16[2] = ____SCDynamicStoreCreateInternal_block_invoke;
      v16[3] = &unk_189B63178;
      v16[4] = &v17;
      v16[5] = Instance;
      dispatch_sync((dispatch_queue_t)storeQueue_q, v16);
      if (*((_BYTE *)v18 + 24))
      {
        block[0] = v14;
        block[1] = 0x40000000LL;
        block[2] = ___SC_crash_once_block_invoke;
        block[3] = &__block_descriptor_tmp_92;
        block[5] = 0LL;
        block[6] = 0LL;
        block[4] = "Excessive number of SCDynamicStore sessions";
        if (_SC_crash_once_once != -1) {
          dispatch_once(&_SC_crash_once_once, block);
        }
      }

      _Block_object_dispose(&v17, 8);
    }
  }

  else
  {
    _SCErrorSet(1001);
  }

  return Instance;
}

uint64_t __SCDynamicStoreNormalize(uint64_t a1, int a2)
{
  if (!a1) {
    __SCDynamicStoreNormalize_cold_1();
  }
  uint64_t v3 = *(const void **)a1;
  if (a2 && !v3)
  {
    if (__SCDynamicStoreNullSession_initialized != -1) {
      dispatch_once(&__SCDynamicStoreNullSession_initialized, &__block_literal_global_33);
    }
    uint64_t v3 = (const void *)S_null_session;
    *(void *)a1 = S_null_session;
    if (!v3) {
      return 0LL;
    }
  }

  if (__SCDynamicStoreInitialize_initialized == -1)
  {
    if (!v3) {
      goto LABEL_15;
    }
  }

  else
  {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_51);
    if (!v3) {
      goto LABEL_15;
    }
  }

  uint64_t v4 = __kSCDynamicStoreTypeID;
  if (CFGetTypeID(v3) == v4)
  {
    if (*(_DWORD *)(*(void *)a1 + 40LL)) {
      return 1LL;
    }
    int v6 = 2002;
    goto LABEL_16;
  }

uint64_t __SCDynamicStoreCheckRetryAndHandleError(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if ((_DWORD)a2 == 268435459) {
    goto LABEL_4;
  }
  uint64_t v7 = a2;
  if (!(_DWORD)a2) {
    return 0LL;
  }
  if ((_DWORD)a2 == -308)
  {
LABEL_4:
    uint64_t v8 = MEMORY[0x1895F87A8];
    __int128 v9 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ____SCDynamicStoreCheckRetryAndHandleError_block_invoke;
    block[3] = &__block_descriptor_tmp_3;
    block[4] = a1;
    dispatch_sync(v9, block);
    uint64_t v25 = 0LL;
    int v26 = &v25;
    uint64_t v27 = 0x2000000000LL;
    CFTypeRef v10 = *(dispatch_queue_s **)(a1 + 16);
    v24[0] = v8;
    v24[1] = 0x40000000LL;
    v24[2] = ____SCDynamicStoreReconnect_block_invoke;
    v24[3] = &unk_189B63220;
    v24[4] = &v25;
    v24[5] = a1;
    dispatch_sync(v10, v24);
    LODWORD(v8) = *((unsigned __int8 *)v26 + 24);
    _Block_object_dispose(&v25, 8);
    if ((_DWORD)v8) {
      return 1LL;
    }
    uint64_t v7 = SCError();
  }

  if ((_DWORD)v7 != 2002)
  {
    __int128 v12 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      __int128 v12 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v12;
    }

    uint64_t v13 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      int v15 = (char *)block - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = SCErrorString(v7);
      *(_DWORD *)uint64_t v16 = 136315650;
      *(void *)(v16 + 4) = a4;
      *(_WORD *)(v16 + 12) = 2080;
      *(void *)(v16 + 14) = v17;
      *(_WORD *)(v16 + 22) = 1024;
      *(_DWORD *)(v16 + 24) = v7;
      __SC_log_send(5, (uint64_t)v12, v13, v15);
    }

    *(_DWORD *)(a1 + 40) = 0;
    posix_spawnattr_t v18 = SCErrorString(v7);
    uint64_t v19 = CFStringCreateWithFormat(0LL, 0LL, @"CheckRetryAndHandleError %s failed: %s (%d)", a4, v18, v7);
    char v20 = _SC_cfstring_to_cstring(v19, 0LL, 0LL, 0x600u);
    CFRelease(v19);
    uint64_t v21 = getprogname();
    CFStringRef v22 = CFStringCreateWithFormat(0LL, 0LL, @"A SCDynamicStore error has been detected by %s.", v21);
    _SC_crash((const char *)v20, @"CheckRetryAndHandleError", (uint64_t)v22);
    CFAllocatorDeallocate(0LL, v20);
    CFRelease(v22);
  }

  uint64_t result = 0LL;
  *a3 = v7;
  return result;
}

uint64_t __SCDynamicStoreReconnectNotifications(uint64_t a1)
{
  v54[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 == 5)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 136);
    if (v5) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    }
    Copy = 0LL;
  }

  else
  {
    if ((_DWORD)v2 == 4 && (uint64_t v3 = *(const __CFArray **)(a1 + 56)) != 0LL) {
      Copy = CFArrayCreateCopy(0LL, v3);
    }
    else {
      Copy = 0LL;
    }
    uint64_t v5 = 0LL;
  }

  if (!SCDynamicStoreNotifyCancel(a1))
  {
    int v6 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      int v6 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v6;
    }

    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      __int128 v9 = (char *)v54 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = SCError();
      __int128 v12 = SCErrorString(v11);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v12;
      __SC_log_send(5, (uint64_t)v6, v7, v9);
    }
  }

  if (*(_OWORD *)(a1 + 168) == 0LL)
  {
    uint64_t v13 = 1LL;
  }

  else
  {
    uint64_t v13 = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)a1, *(CFArrayRef *)(a1 + 168), *(CFArrayRef *)(a1 + 176));
    if (!(_DWORD)v13)
    {
      int v29 = SCError();
      if (v29 != 1102)
      {
        int v30 = v29;
        uint64_t v31 = (os_log_s *)__log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          uint64_t v31 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v31;
        }

        uint64_t v32 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v31, (os_log_type_t)v32))
        {
          uint64_t v33 = _os_log_pack_size();
          uint64_t v34 = (char *)v54 - ((MEMORY[0x1895F8858](v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v35 = _os_log_pack_fill();
          uint64_t v36 = SCErrorString(v30);
          *(_DWORD *)uint64_t v35 = 136315138;
          *(void *)(v35 + 4) = v36;
          __SC_log_send(5, (uint64_t)v31, v32, v34);
        }
      }

      goto LABEL_39;
    }
  }

  if ((_DWORD)v2 == 5)
  {
    uint64_t v13 = SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)a1, v5);
    if (!(_DWORD)v13)
    {
      int v21 = SCError();
      if (v21 != 1102)
      {
        int v22 = v21;
        int v23 = (os_log_s *)__log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          int v23 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v23;
        }

        uint64_t v24 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v23, (os_log_type_t)v24))
        {
          uint64_t v25 = _os_log_pack_size();
          int v26 = (char *)v54 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v27 = _os_log_pack_fill();
          uint64_t v28 = SCErrorString(v22);
          *(_DWORD *)uint64_t v27 = 136315138;
          *(void *)(v27 + 4) = v28;
          __SC_log_send(5, (uint64_t)v23, v24, v26);
        }
      }

      uint64_t v13 = 0LL;
    }

LABEL_44:
    if (v5) {
      dispatch_release(v5);
    }
    goto LABEL_53;
  }

  if ((_DWORD)v2 != 4)
  {
    _SCErrorSet(1001);
LABEL_39:
    uint64_t v13 = 0LL;
    goto LABEL_40;
  }

  CFRunLoopSourceRef RunLoopSource = SCDynamicStoreCreateRunLoopSource(0LL, (SCDynamicStoreRef)a1, 0LL);
  if (RunLoopSource)
  {
    int v15 = RunLoopSource;
    if (Copy)
    {
      CFIndex Count = CFArrayGetCount(Copy);
      if (Count >= 1)
      {
        CFIndex v17 = Count;
        for (CFIndex i = 0LL; i < v17; i += 3LL)
        {
          ValueAtIndex = (__CFRunLoop *)CFArrayGetValueAtIndex(Copy, i + 1);
          char v20 = (const __CFString *)CFArrayGetValueAtIndex(Copy, i + 2);
          CFRunLoopAddSource(ValueAtIndex, v15, v20);
        }
      }
    }

    CFRelease(v15);
LABEL_40:
    if ((_DWORD)v2 != 5)
    {
      if ((_DWORD)v2 != 4 || !Copy) {
        goto LABEL_53;
      }
LABEL_52:
      CFRelease(Copy);
      goto LABEL_53;
    }

    goto LABEL_44;
  }

  int v37 = SCError();
  if (v37 != 1102)
  {
    int v38 = v37;
    v39 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      v39 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v39;
    }

    uint64_t v40 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v39, (os_log_type_t)v40))
    {
      uint64_t v41 = _os_log_pack_size();
      v42 = (char *)v54 - ((MEMORY[0x1895F8858](v41) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v43 = _os_log_pack_fill();
      v44 = SCErrorString(v38);
      *(_DWORD *)uint64_t v43 = 136315138;
      *(void *)(v43 + 4) = v44;
      __SC_log_send(5, (uint64_t)v39, v40, v42);
    }
  }

  uint64_t v13 = 0LL;
  if (Copy) {
    goto LABEL_52;
  }
LABEL_53:
  if (!(_DWORD)v13)
  {
    int v45 = SCError();
    v46 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      v46 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v46;
    }

    uint64_t v47 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v46, (os_log_type_t)v47))
    {
      uint64_t v48 = _os_log_pack_size();
      unsigned int v49 = (char *)v54 - ((MEMORY[0x1895F8858](v48) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v50 = _os_log_pack_fill();
      v51 = "failed";
      uint64_t v52 = *((void *)&notifyType + v2);
      if (v45 == 1102) {
        v51 = "shutdown";
      }
      *(_DWORD *)uint64_t v50 = 136315394;
      *(void *)(v50 + 4) = v51;
      *(_WORD *)(v50 + 12) = 2080;
      *(void *)(v50 + 14) = v52;
      __SC_log_send(5, (uint64_t)v46, v47, v49);
    }
  }

  pushDisconnect(a1);
  return v13;
}

    CFIndex v17 = -1;
    posix_spawnattr_t v18 = 1;
    goto LABEL_45;
  }

  if (!error || (__int128 v9 = _SCUnserialize((CFPropertyListRef *)&v59, error, 0LL, 0LL), CFRelease(error), !v9))
  {
LABEL_36:
    if (*v6) {
      _SCHelperClose((mach_port_t *)(a1 + 320));
    }
    uint64_t v8 = 1003;
    v58 = 1003;
    goto LABEL_39;
  }

  uint64_t v10 = *(const void **)&v59.st_dev;
  int v11 = CFDictionaryGetTypeID();
  if (!v10 || CFGetTypeID(v10) != v11) {
    goto LABEL_34;
  }
  int Value = CFDictionaryGetValue(*(CFDictionaryRef *)&v59.st_dev, @"preferences");
  uint64_t v13 = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) != v13) {
    int Value = 0LL;
  }
  uint64_t v14 = CFDictionaryGetValue(*(CFDictionaryRef *)&v59.st_dev, @"signature");
  int v15 = CFDataGetTypeID();
  if (!v14) {
    goto LABEL_34;
  }
  if (CFGetTypeID(v14) != v15) {
    uint64_t v14 = 0LL;
  }
  if (!Value || !v14)
  {
LABEL_34:
    if (*(void *)&v59.st_dev) {
      CFRelease(*(CFTypeRef *)&v59.st_dev);
    }
    goto LABEL_36;
  }

  *(void *)(a1 + 280) = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)Value);
  *(void *)(a1 + 144) = CFRetain(v14);
  *(_BYTE *)(a1 + 304) = 1;
  CFRelease(*(CFTypeRef *)&v59.st_dev);
LABEL_72:
  if (!*(void *)(a1 + 280))
  {
    *(void *)(a1 + 280) = CFDictionaryCreateMutable(v3, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    *(_BYTE *)(a1 + 305) = 0;
  }

  v51 = (os_log_s *)*((void *)v4 + 127);
  if (!v51)
  {
    v51 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    *((void *)v4 + 127) = v51;
  }

  uint64_t v52 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v51, (os_log_type_t)v52))
  {
    _os_log_pack_size();
    v53 = (char *)&error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v54 = _os_log_pack_fill();
    CFRange v55 = *(void *)(a1 + 104);
    CFRange v56 = __SCPreferencesPrefsSize(a1);
    *(_DWORD *)uint64_t v54 = 136315394;
    *(void *)(v54 + 4) = v55;
    *(_WORD *)(v54 + 12) = 2048;
    *(void *)(v54 + 14) = v56;
    __SC_log_send(7, (uint64_t)v51, v52, v53);
  }

  *(_BYTE *)(a1 + 304) = 1;
}

      uint64_t result = SCNetworkInterfaceGetInterface(v5);
      uint64_t v5 = result;
      uint64_t v7 = v54 + 1;
    }

    while (result);
  }

  return result;
}

uint64_t pushDisconnect(uint64_t result)
{
  uint64_t v1 = result;
  v10[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(result + 152);
  if (v2)
  {
    uint64_t v4 = *(void *)(result + 88);
    uint64_t v3 = *(uint64_t (**)(void))(result + 96);
    if (v3)
    {
      uint64_t v4 = v3(*(void *)(result + 88));
      uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 104);
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    int v6 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      int v6 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v6;
    }

    uint64_t v7 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      __int128 v9 = (char *)v10 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v6, v7, v9);
    }

    uint64_t result = v2(v1, v4);
    if (v5) {
      return v5(v4);
    }
  }

  else
  {
    *(_BYTE *)(result + 160) = 1;
  }

  return result;
}

SCDynamicStoreRef SCDynamicStoreCreateWithOptions( CFAllocatorRef allocator, CFStringRef name, CFDictionaryRef storeOptions, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  Internal = (void *)__SCDynamicStoreCreateInternal( (uint64_t)allocator,  0LL,  (uint64_t)callout,  (__int128 *)&context->version,  1);
  if (Internal)
  {
    uint64_t ApplicationBundleID = _SC_getApplicationBundleID();
    Internal[3] = CFStringCreateWithFormat(0LL, 0LL, @"%@:%@", ApplicationBundleID, name);
    if (storeOptions) {
      Internal[4] = CFRetain(storeOptions);
    }
    if (!__SCDynamicStoreAddSession((uint64_t)Internal))
    {
      CFRelease(Internal);
      return 0LL;
    }
  }

  return (SCDynamicStoreRef)Internal;
}

uint64_t __SCDynamicStoreAddSession(uint64_t a1)
{
  v28[1] = *(CFDataRef *)MEMORY[0x1895F89C0];
  uint64_t v24 = 0LL;
  CFDataRef v25 = 0LL;
  vm_size_t v23 = 0LL;
  int v22 = 1001;
  if (!_SCSerializeString(*(const __CFString **)(a1 + 24), v28, (vm_address_t *)&v27, &v26)) {
    goto LABEL_18;
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2 && !_SCSerialize(v2, &v25, (vm_address_t *)&v24, &v23))
  {
    CFRelease(v28[0]);
LABEL_18:
    int v5 = 0;
    goto LABEL_19;
  }

  mach_port_t v21 = 0;
  updateServerPort(a1, (uint64_t)&v21, (uint64_t)&v22);
  mach_port_t v3 = v21;
  if (v21)
  {
    while (1)
    {
      int v4 = configopen(v3, v27, v26, v24, v23, (_DWORD *)(a1 + 40), &v22);
      int v5 = v4;
      if (v4 != -308 && v4 != 268435459) {
        break;
      }
      updateServerPort(a1, (uint64_t)&v21, (uint64_t)&v22);
      mach_port_t v3 = v21;
      if (!v21) {
        goto LABEL_15;
      }
    }

    if (v4) {
      int v22 = v4;
    }
  }

  else
  {
    int v5 = 0;
  }

SCDynamicStoreRef SCDynamicStoreCreate( CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return SCDynamicStoreCreateWithOptions(allocator, name, 0LL, callout, context);
}

CFTypeID SCDynamicStoreGetTypeID(void)
{
  if (__SCDynamicStoreInitialize_initialized != -1) {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_51);
  }
  return __kSCDynamicStoreTypeID;
}

uint64_t SCDynamicStoreSetDisconnectCallBack(void *cf, uint64_t a2)
{
  if (__SCDynamicStoreInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_51);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v4 = __kSCDynamicStoreTypeID;
  if (CFGetTypeID(cf) == v4)
  {
    cf[19] = a2;
    return 1LL;
  }

LABEL_6:
  _SCErrorSet(2001);
  return 0LL;
}

  int v6 = _SC_cfstring_to_cstring(v5, 0LL, 0LL, 0x600u);
  if (!v6)
  {
    MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v5);
    int v6 = (UInt8 *)MEMORY[0x186E08750](0LL, MaximumSizeOfFileSystemRepresentation, 0LL);
    if (!CFStringGetFileSystemRepresentation(v5, (char *)v6, MaximumSizeOfFileSystemRepresentation))
    {
      int v8 = __log_SCPreferences();
      uint64_t v9 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v8, (os_log_type_t)v9))
      {
        _os_log_pack_size();
        uint64_t v10 = (char *)v13 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v8, v9, v10);
      }

      CFAllocatorDeallocate(0LL, v6);
      int v6 = 0LL;
    }
  }

  CFRelease(v5);
  return v6;
}

  _SCErrorSet(1002);
  LOBYTE(v7) = 0;
  return v7;
}

    if (cfa) {
      CFRelease(cfa);
    }
    if (v8) {
      goto LABEL_9;
    }
    goto LABEL_10;
  }

  _SCErrorSet(0);
  int v6 = 0LL;
  int v5 = 0LL;
  if (v8) {
LABEL_9:
  }
    CFRelease(v8);
LABEL_10:
  if (v7) {
    CFRelease(v7);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v44) {
    CFRelease(v44);
  }
  return v6;
}

    uint64_t v7 = 0;
LABEL_7:
    int v8 = SCPreferencesCreate( 0LL,  @"SCDynamicStoreCopyProxiesWithOptions",  @"/Library/Managed Preferences/mobile/com.apple.SystemConfiguration.plist");
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = (const __CFDictionary *)SCPreferencesGetValue(v8, @"Proxies");
      int v11 = v10;
      if (v10) {
        CFRetain(v10);
      }
      CFRelease(v9);
      if (v7 && v11)
      {
        __int128 v12 = CFDictionaryGetValue(v11, @"BypassAllowed");
        uint64_t v13 = CFNumberGetTypeID();
        if (v12
          && CFGetTypeID(v12) == v13
          && CFNumberGetValue((CFNumberRef)v12, kCFNumberIntType, &valuePtr)
          && valuePtr)
        {
          CFRelease(v11);
          goto LABEL_24;
        }
      }

      else
      {
        if (!v11) {
          goto LABEL_24;
        }
        if (!v7)
        {
          valuePtr = 0;
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v11);
          CFRelease(v11);
          uint64_t v16 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
          CFDictionarySetValue(MutableCopy, @"BypassAllowed", v16);
          CFRelease(v16);
          int v11 = MutableCopy;
        }
      }

      if (CFDictionaryContainsKey(v11, @"FallBackAllowed"))
      {
        if (v11)
        {
LABEL_30:
          int v14 = __SCNetworkProxiesCopyNormalized(v11);
          CFRelease(v11);
          return v14;
        }

        return CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }

      valuePtr = 0;
      int v19 = CFDictionaryCreateMutableCopy(0LL, 0LL, v11);
      CFRelease(v11);
      char v20 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v19, @"FallBackAllowed", v20);
      CFRelease(v20);
LABEL_29:
      int v11 = v19;
      if (v19) {
        goto LABEL_30;
      }
      return CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }

  _SCErrorSet(1002);
  return 0LL;
}

  _SCErrorSet(1002);
  return 0;
}

    __SCNSManagerServiceChanged((uint64_t)a1, v7);
    uint64_t v4 = v7;
    if (!SetID) {
      return v4;
    }
LABEL_7:
    CFRelease(SetID);
    return v4;
  }

  __int128 v12 = _SC_LOG_DEFAULT();
  uint64_t v13 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
  {
    int v14 = _os_log_pack_size();
    uint64_t v15 = (char *)v18 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)(v16 + 4) = "SCNSManagerCreateService";
    __SC_log_send(5, (uint64_t)v12, v13, v15);
  }

  return 0LL;
}

  uint64_t v9 = SCNetworkServiceEstablishDefaultConfiguration(a1);
  if ((_DWORD)v9) {
    goto LABEL_13;
  }
  uint64_t v10 = _SC_LOG_DEFAULT();
  int v11 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
  {
    __int128 v12 = _os_log_pack_size();
    uint64_t v13 = (char *)v28 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    int v14 = _os_log_pack_fill();
    uint64_t v15 = SCError();
    uint64_t v16 = SCErrorString(v15);
    *(_DWORD *)int v14 = 136315394;
    *(void *)(v14 + 4) = "service_establish_default";
    *(_WORD *)(v14 + 12) = 2080;
    *(void *)(v14 + 14) = v16;
    CFIndex v17 = (uint64_t)v10;
    uint64_t v18 = v11;
    int v19 = v13;
LABEL_11:
    __SC_log_send(5, v17, v18, v19);
  }

uint64_t __SCDynamicStoreMapInternalStatus(uint64_t result, int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  switch((_DWORD)result)
  {
    case 0x2712:
      if (!a2) {
        return 1003LL;
      }
      uint64_t v2 = MEMORY[0x1895F87A8];
      uint64_t v3 = 0x40000000LL;
      uint64_t v4 = ___SC_crash_once_block_invoke;
      int v5 = &__block_descriptor_tmp_92;
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v6 = "SCDynamicStore write denied : missing entitlement";
      if (_SC_crash_once_once == -1) {
        return 1003LL;
      }
LABEL_15:
      dispatch_once(&_SC_crash_once_once, &v2);
      return 1003LL;
    case 0x2774:
      if (a2)
      {
        uint64_t v2 = MEMORY[0x1895F87A8];
        uint64_t v3 = 0x40000000LL;
        uint64_t v4 = ___SC_crash_once_block_invoke;
        int v5 = &__block_descriptor_tmp_92;
        uint64_t v7 = 0LL;
        uint64_t v8 = 0LL;
        int v6 = "SCDynamicStore read allowed: missing entitlement";
        if (_SC_crash_once_once != -1) {
          dispatch_once(&_SC_crash_once_once, &v2);
        }
      }

      return 0LL;
    case 0x2713:
      if (!a2) {
        return 1003LL;
      }
      uint64_t v2 = MEMORY[0x1895F87A8];
      uint64_t v3 = 0x40000000LL;
      uint64_t v4 = ___SC_crash_once_block_invoke;
      int v5 = &__block_descriptor_tmp_92;
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
      int v6 = "SCDynamicStore read denied: missing entitlement";
      if (_SC_crash_once_once == -1) {
        return 1003LL;
      }
      goto LABEL_15;
  }

  return result;
}

void addSessionReference(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(const __CFString **)(a1 + 24);
  if (v2)
  {
    CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, v2);
    int v6 = *(const __CFArray **)(a1 + 168);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 168), 0LL);
        CFStringAppendFormat(MutableCopy, 0LL, @":k[0/%ld]=%@", v8, ValueAtIndex);
      }
    }

    uint64_t v10 = *(const __CFArray **)(a1 + 176);
    if (v10)
    {
      CFIndex v11 = CFArrayGetCount(v10);
      if (v11 >= 1)
      {
        CFIndex v12 = v11;
        uint64_t v13 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0LL);
        CFStringAppendFormat(MutableCopy, 0LL, @":p[0/%ld]=%@", v12, v13);
      }
    }

    if (CFDictionaryGetValueIfPresent(a2, MutableCopy, (const void **)&value)
      && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr))
    {
      int v14 = valuePtr + 1;
    }

    else
    {
      int v14 = 1;
    }

    int valuePtr = v14;
    value = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(a2, MutableCopy, value);
    CFRelease(value);
    CFRelease(MutableCopy);
  }

void logSessionReference(uint64_t a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (os_log_s *)__log_SCDynamicStore_log;
  if (!__log_SCDynamicStore_log)
  {
    uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
    __log_SCDynamicStore_log = (uint64_t)v4;
  }

  uint64_t v5 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v7 = (char *)v9 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 138412546;
    *(void *)(v8 + 4) = a2;
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v8 + 14) = a1;
    __SC_log_send(3, (uint64_t)v4, v5, v7);
  }

dispatch_queue_t __storeQueue_block_invoke()
{
  _sc_store_sessions = (uint64_t)CFSetCreateMutable(0LL, 0LL, 0LL);
  dispatch_queue_t result = dispatch_queue_create("SCDynamicStore/client sessions", 0LL);
  storeQueue_q = (uint64_t)result;
  return result;
}

void updateServerPort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x1895F89C0];
  v7[0] = 0LL;
  v7[1] = v7;
  v7[2] = 0x2000000000LL;
  if (storeQueue_once != -1) {
    dispatch_once(&storeQueue_once, &__block_literal_global_3);
  }
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = __updateServerPort_block_invoke;
  block[3] = &unk_189B63248;
  block[4] = v7;
  void block[5] = a2;
  block[6] = a1;
  block[7] = a3;
  dispatch_sync((dispatch_queue_t)storeQueue_q, block);
  _Block_object_dispose(v7, 8);
}

uint64_t __updateServerPort_block_invoke(uint64_t a1)
{
  uint64_t result = _sc_server;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = _sc_server;
  if ((_DWORD)result)
  {
    if (**(_DWORD **)(a1 + 40) == (_DWORD)result)
    {
      _sc_server = __SCDynamicStoreServerPort(*(kern_return_t **)(a1 + 56), 1);
      mach_port_deallocate(*MEMORY[0x1895FBBE0], *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
      uint64_t result = _sc_server;
    }
  }

  else
  {
    uint64_t result = __SCDynamicStoreServerPort(*(kern_return_t **)(a1 + 56), 0);
    _sc_server = result;
  }

  **(_DWORD **)(a1 + 40) = result;
  return result;
}

uint64_t __SCDynamicStoreServerPort(kern_return_t *a1, int a2)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  unsigned int v34 = 0;
  if (getenv("SCD_SERVER"))
  {
    uint64_t result = 0LL;
    *a1 = 1102;
  }

  else
  {
    unsigned int v6 = 0;
    *(void *)&__int128 v4 = 67109120LL;
    __int128 v31 = v4;
    *(void *)&__int128 v4 = 67109378LL;
    __int128 v32 = v4;
    while (1)
    {
      if (xpc_user_sessions_enabled())
      {
        int v35 = 0;
        if (xpc_user_sessions_get_foreground_uid() == -101)
        {
          uint64_t v7 = (os_log_s *)__log_SCDynamicStore_log;
          if (!__log_SCDynamicStore_log)
          {
            uint64_t v7 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
            __log_SCDynamicStore_log = (uint64_t)v7;
          }

          uint64_t v8 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v7, (os_log_type_t)v8))
          {
            uint64_t v9 = _os_log_pack_size();
            uint64_t v10 = (char *)&v31 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            CFIndex v11 = (_DWORD *)_os_log_pack_fill();
            int v12 = v35;
            *CFIndex v11 = v31;
            v11[1] = v12;
            __SC_log_send(3, (uint64_t)v7, v8, v10);
          }

          int v13 = 1102;
        }

        else
        {
          int v13 = bootstrap_look_up_per_user();
        }
      }

      else
      {
        int v13 = bootstrap_look_up2();
      }

      *a1 = v13;
      if (v13 != 1102) {
        break;
      }
      int v35 = 0;
      if (get_sysctl_val("kern.willshutdown", &v35) && v35 || get_sysctl_val("kern.willuserspacereboot", &v35) && v35)
      {
        uint64_t v27 = (os_log_s *)__log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          uint64_t v27 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v27;
        }

        uint64_t v28 = _SC_syslog_os_log_mapping(6);
        uint64_t result = __SC_log_enabled(6, v27, (os_log_type_t)v28);
        if ((_DWORD)result)
        {
          uint64_t v29 = _os_log_pack_size();
          int v30 = (char *)&v31 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v27, v28, v30);
          return 0LL;
        }

        return result;
      }

      if (!a2) {
        return 0LL;
      }
      int v14 = (os_log_s *)__log_SCDynamicStore_log;
      if (!__log_SCDynamicStore_log)
      {
        int v14 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        __log_SCDynamicStore_log = (uint64_t)v14;
      }

      int v15 = v6 >= 3 ? 3 : 6;
      uint64_t v16 = _SC_syslog_os_log_mapping(v15);
      if (__SC_log_enabled(v15, v14, (os_log_type_t)v16))
      {
        uint64_t v17 = _os_log_pack_size();
        unsigned int v33 = v6;
        uint64_t v18 = (char *)&v31 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        char v20 = bootstrap_strerror(*a1);
        *(_DWORD *)uint64_t v19 = v32;
        *(_DWORD *)(v19 + 4) = v6 + 1;
        *(_WORD *)(v19 + 8) = 2080;
        *(void *)(v19 + 10) = v20;
        __SC_log_send(v15, (uint64_t)v14, v16, v18);
        unsigned int v6 = v33;
      }

      if (v6 == 3) {
        return 0LL;
      }
      usleep(0xC350u);
      ++v6;
    }

    if (v13) {
      return 0LL;
    }
    if (v6)
    {
      mach_port_t v21 = (os_log_s *)__log_SCDynamicStore_log;
      if (!__log_SCDynamicStore_log)
      {
        mach_port_t v21 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        __log_SCDynamicStore_log = (uint64_t)v21;
      }

      uint64_t v22 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v21, (os_log_type_t)v22))
      {
        uint64_t v23 = _os_log_pack_size();
        uint64_t v24 = (char *)&v31 - ((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        vm_size_t v26 = "ies";
        if (v6 == 1) {
          vm_size_t v26 = "y";
        }
        *(_DWORD *)uint64_t v25 = v32;
        *(_DWORD *)(v25 + 4) = v6;
        *(_WORD *)(v25 + 8) = 2080;
        *(void *)(v25 + 10) = v26;
        __SC_log_send(6, (uint64_t)v21, v22, v24);
      }
    }

    return v34;
  }

  return result;
}

BOOL get_sysctl_val(const char *a1, _DWORD *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  size_t v19 = 4LL;
  if (sysctlbyname(a1, &v20, &v19, 0LL, 0LL))
  {
    __int128 v4 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      __int128 v4 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v4;
    }

    uint64_t v5 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v4, (os_log_type_t)v5);
    if (result)
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v8 = (char *)&v18 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      uint64_t v10 = __error();
      CFIndex v11 = strerror(*v10);
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)(v9 + 4) = a1;
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v11;
      __SC_log_send(5, (uint64_t)v4, v5, v8);
      return 0LL;
    }
  }

  else
  {
    *a2 = v20;
    int v12 = (os_log_s *)__log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      int v12 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v12;
    }

    uint64_t v13 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      int v15 = (char *)&v18 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      int v17 = v20;
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = a1;
      *(_WORD *)(v16 + 12) = 1024;
      *(_DWORD *)(v16 + 14) = v17;
      __SC_log_send(6, (uint64_t)v12, v13, v15);
    }

    return 1LL;
  }

  return result;
}

void childForkHandler()
{
  _sc_server = 0;
}

void __SCDynamicStoreDeallocate(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  pthread_setcanceltype(2, &v10);
  if (*(void *)(a1 + 144)) {
    _SC_crash("SCDynamicStore OVER-RELEASED (notification still active)", 0LL, 0LL);
  }
  if (*(void *)(a1 + 16))
  {
    if (storeQueue_once != -1) {
      dispatch_once(&storeQueue_once, &__block_literal_global_3);
    }
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ____SCDynamicStoreDeallocate_block_invoke;
    block[3] = &__block_descriptor_tmp_53;
    block[4] = a1;
    dispatch_sync((dispatch_queue_t)storeQueue_q, block);
  }

  SCDynamicStoreNotifyCancel(a1);
  mach_port_name_t v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    mach_port_deallocate(*MEMORY[0x1895FBBE0], v2);
    *(_DWORD *)(a1 + 40) = 0;
  }

  pthread_setcanceltype(0, &v10);
  pthread_testcancel();
  uint64_t v3 = *(void (**)(void))(a1 + 104);
  if (v3) {
    v3(*(void *)(a1 + 88));
  }
  __int128 v4 = *(const void **)(a1 + 168);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 176);
  if (v5) {
    CFRelease(v5);
  }
  unsigned int v6 = *(const void **)(a1 + 24);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 32);
  if (v7) {
    CFRelease(v7);
  }
  if (*(_BYTE *)(a1 + 200)) {
    _SCDynamicStoreCacheClose(a1);
  }
  uint64_t v8 = *(dispatch_object_s **)(a1 + 16);
  if (v8) {
    dispatch_release(v8);
  }
}

__CFString *__SCDynamicStoreCopyDescription(uint64_t a1)
{
  mach_port_name_t v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCDynamicStore %p [%p]> {", a1, v2);
  if (*(_DWORD *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0LL, @"server port = 0x%x", *(unsigned int *)(a1 + 40));
  }
  else {
    CFStringAppendFormat(Mutable, 0LL, @"server not (no longer) available", v6);
  }
  if (*(void *)(a1 + 152)) {
    CFStringAppendFormat(Mutable, 0LL, @", disconnect = %p", *(void *)(a1 + 152));
  }
  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      CFStringAppendFormat(Mutable, 0LL, @", waiting for a notification", v7);
      break;
    case 2:
      CFStringAppendFormat(Mutable, 0LL, @", mach port notifications", v7);
      break;
    case 3:
      CFStringAppendFormat(Mutable, 0LL, @", FD notifications", v7);
      break;
    case 4:
      CFStringAppendFormat(Mutable, 0LL, @", runloop notifications");
      CFStringAppendFormat(Mutable, 0LL, @" {callout = %p", *(void *)(a1 + 72));
      CFStringAppendFormat(Mutable, 0LL, @", info = %p", *(void *)(a1 + 88));
      CFStringAppendFormat(Mutable, 0LL, @", rls = %p", *(void *)(a1 + 64));
      CFStringAppendFormat(Mutable, 0LL, @", notify rls = %@", *(void *)(a1 + 128));
      goto LABEL_16;
    case 5:
      CFStringAppendFormat(Mutable, 0LL, @", dispatch notifications");
      CFStringAppendFormat(Mutable, 0LL, @" {callout = %p", *(void *)(a1 + 72));
      CFStringAppendFormat(Mutable, 0LL, @", info = %p", *(void *)(a1 + 88));
      CFStringAppendFormat(Mutable, 0LL, @", queue = %p", *(void *)(a1 + 136));
      CFStringAppendFormat(Mutable, 0LL, @", source = %p", *(void *)(a1 + 144));
LABEL_16:
      CFStringAppendFormat(Mutable, 0LL, @"}", v8);
      break;
    default:
      if (*(void *)(a1 + 72)) {
        __int128 v4 = " (yet)";
      }
      else {
        __int128 v4 = "";
      }
      CFStringAppendFormat(Mutable, 0LL, @", notification delivery not requested%s", v4);
      break;
  }

  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

_DWORD *__add_state_handler_block_invoke()
{
  v23[1] = *(CFDataRef *)MEMORY[0x1895F89C0];
  v23[0] = 0LL;
  uint64_t v0 = _sc_store_max;
  if (_sc_store_advise) {
    uint64_t v1 = _sc_store_advise;
  }
  else {
    uint64_t v1 = 25LL;
  }
  CFIndex Count = CFSetGetCount((CFSetRef)_sc_store_sessions);
  uint64_t v3 = 0LL;
  if ((v0 & 0x8000000000000000LL) == 0 && Count && Count >= v1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFSetApplyFunction((CFSetRef)_sc_store_sessions, (CFSetApplierFunction)addSessionReference, Mutable);
    if (!CFDictionaryGetCount(Mutable))
    {
      CFDataRef v15 = Mutable;
      goto LABEL_29;
    }

    BOOL v6 = _SCSerialize(Mutable, v23, 0LL, 0LL);
    CFRelease(Mutable);
    int64_t v7 = 0LL;
    size_t v8 = 200LL;
    if (v6 && v23[0])
    {
      CFIndex Length = CFDataGetLength(v23[0]);
      size_t v8 = Length + 200;
      if ((unint64_t)(Length + 200) > 0x8000)
      {
        int v10 = (os_log_s *)__log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          int v10 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v10;
        }

        uint64_t v11 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
        {
          uint64_t v12 = _os_log_pack_size();
          uint64_t v13 = (char *)v23 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v14 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v14 = 134218240;
          *(void *)(v14 + 4) = v8;
          *(_WORD *)(v14 + 12) = 2048;
          *(void *)(v14 + 14) = 0x8000LL;
          __SC_log_send(3, (uint64_t)v10, v11, v13);
        }

        goto LABEL_28;
      }

      int64_t v7 = Length;
    }

    uint64_t v16 = calloc(1uLL, v8);
    if (!v16)
    {
      uint64_t v18 = (os_log_s *)__log_SCDynamicStore_log;
      if (!__log_SCDynamicStore_log)
      {
        uint64_t v18 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        __log_SCDynamicStore_log = (uint64_t)v18;
      }

      uint64_t v19 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v18, (os_log_type_t)v19))
      {
        uint64_t v20 = _os_log_pack_size();
        uint64_t v21 = (char *)v23 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(3, (uint64_t)v18, v19, v21);
      }

LABEL_28:
      CFDataRef v15 = v23[0];
      if (!v23[0]) {
        return 0LL;
      }
LABEL_29:
      CFRelease(v15);
      return 0LL;
    }

    uint64_t v3 = v16;
    _DWORD *v16 = 1;
    v16[1] = v7;
    __strlcpy_chk();
    if (v7 >= 1)
    {
      BytePtr = CFDataGetBytePtr(v23[0]);
      memcpy(v3 + 50, BytePtr, v7);
    }

    if (v23[0]) {
      CFRelease(v23[0]);
    }
  }

  return v3;
}

      address = nw_endpoint_create_address(v5);
      goto LABEL_29;
    }
  }

  else if (v5)
  {
    goto LABEL_28;
  }

  uint64_t v20 = *v9;
  CFAllocatorDeallocate(0LL, v16);
  uint64_t v21 = CFDictionaryGetValue(a2, @"MediaOptions");
  uint64_t v22 = CFArrayGetTypeID();
  if (!v21 || CFGetTypeID(v21) != v22) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v20 | v7;
  CFIndex Count = CFArrayGetCount((CFArrayRef)v21);
  if (Count < 1) {
    return v11;
  }
  uint64_t v24 = Count;
  uint64_t v25 = 0LL;
  while (2)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v21, v25);
    uint64_t v27 = CFStringGetTypeID();
    if (!ValueAtIndex) {
      return 0xFFFFFFFFLL;
    }
    if (CFGetTypeID(ValueAtIndex) != v27) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v28 = _SC_cfstring_to_cstring(ValueAtIndex, 0LL, 0LL, 0x600u);
    if (!v28) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v29 = (char *)v28;
    int v30 = 0LL;
    while (1)
    {
      __int128 v31 = &ifm_shared_option_descriptions[v30];
      v30 += 4LL;
      if (v30 == 32)
      {
        if ((v8 & 1) != 0 || (v32 = (const char *)*((void *)v10 + 1), __int128 v31 = v10, !v32))
        {
LABEL_45:
          uint64_t v19 = v29;
          goto LABEL_26;
        }

        while (strcasecmp(v29, v32))
        {
          __int128 v32 = (const char *)*((void *)v31 + 3);
          v31 += 4;
          if (!v32) {
            goto LABEL_45;
          }
        }

        break;
      }
    }

    uint64_t v11 = *v31 | v11;
    CFAllocatorDeallocate(0LL, v29);
    if (++v25 != v24) {
      continue;
    }
    return v11;
  }

CFArrayRef SCDynamicStoreCopyKeyList(SCDynamicStoreRef store, CFStringRef pattern)
{
  v13[1] = *MEMORY[0x1895F89C0];
  v13[0] = (uint64_t)store;
  memset(length, 0, sizeof(length));
  if (_SCSerializeString(pattern, (CFDataRef *)&cf, (vm_address_t *)&v11, &v10))
  {
    uint64_t v3 = v13[0];
    do
      uint64_t v4 = configlist(*(_DWORD *)(v3 + 40), v11, v10, 1, &length[1], length, &v8);
    while (__SCDynamicStoreCheckRetryAndHandleError( v13[0],  v4,  &v8,  (uint64_t)"SCDynamicStoreCopyKeyList configlist()"));
    CFRelease(cf);
    int v5 = v8;
    if (v8)
    {
      if (*(void *)&length[1])
      {
        MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], *(void *)&length[1], length[0]);
        int v5 = v8;
      }

      goto LABEL_11;
    }
  }

  int v5 = 1001;
LABEL_11:
  _SCErrorSet(v5);
  return 0LL;
}

Boolean SCDynamicStoreAddTemporaryValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  v18[1] = *MEMORY[0x1895F89C0];
  v18[0] = (uint64_t)store;
  if (!_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v16, &v15)) {
    goto LABEL_8;
  }
  if (!_SCSerialize(value, (CFDataRef *)&v14, (vm_address_t *)&v13, &v12))
  {
    CFRelease(cf);
LABEL_8:
    int v8 = 1001;
LABEL_9:
    _SCErrorSet(v8);
    return 0;
  }

  do
    uint64_t v6 = configadd_s(*((_DWORD *)store + 10), v16, v15, v13, v12, &v11, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError( v18[0],  v6,  &v10,  (uint64_t)"SCDynamicStoreAddTemporaryValue configadd_s()"));
  CFRelease(cf);
  CFRelease(v14);
  Boolean v7 = 1;
  int v8 = __SCDynamicStoreMapInternalStatus(v10, 1);
  unsigned int v10 = v8;
  if (v8) {
    goto LABEL_9;
  }
  return v7;
}

Boolean SCDynamicStoreAddValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  v18[1] = *MEMORY[0x1895F89C0];
  v18[0] = (uint64_t)store;
  if (!_SCSerializeString(key, &v17, (vm_address_t *)&v16, &v15)) {
    goto LABEL_9;
  }
  if (!_SCSerialize(value, (CFDataRef *)&cf, (vm_address_t *)&v13, &v12))
  {
    CFRelease(v17);
LABEL_9:
    int v8 = 1001;
LABEL_10:
    _SCErrorSet(v8);
    return 0;
  }

  uint64_t v5 = v18[0];
  do
    uint64_t v6 = configadd(*(_DWORD *)(v5 + 40), v16, v15, v13, v12, &v11, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError( v18[0],  v6,  &v10,  (uint64_t)"SCDynamicStoreAddValue configadd()"));
  CFRelease(v17);
  CFRelease(cf);
  Boolean v7 = 1;
  int v8 = __SCDynamicStoreMapInternalStatus(v10, 1);
  unsigned int v10 = v8;
  if (v8) {
    goto LABEL_10;
  }
  return v7;
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  v19[1] = *MEMORY[0x1895F89C0];
  CFDataRef v18 = 0LL;
  v19[0] = (uint64_t)store;
  uint64_t v17 = 0LL;
  CFTypeRef v15 = 0LL;
  vm_size_t v16 = 0LL;
  vm_size_t v13 = 0LL;
  uint64_t v14 = 0LL;
  memset(length, 0, sizeof(length));
  CFTypeRef cf = 0LL;
  if (keys && !_SCSerialize(keys, &v18, (vm_address_t *)&v17, &v16))
  {
LABEL_15:
    _SCErrorSet(1001);
    return 0LL;
  }

  if (patterns && !_SCSerialize(patterns, (CFDataRef *)&v15, (vm_address_t *)&v14, &v13))
  {
    if (v18) {
      CFRelease(v18);
    }
    goto LABEL_15;
  }

  uint64_t v5 = v19[0];
  do
    uint64_t v6 = configget_m(*(_DWORD *)(v5 + 40), v17, v16, v14, v13, &length[1], length, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError( v19[0],  v6,  &v10,  (uint64_t)"SCDynamicStoreCopyMultiple configget_m()"));
  int v7 = v10;
  if (v10)
  {
    if (*(void *)&length[1])
    {
      MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], *(void *)&length[1], length[0]);
      int v7 = v10;
    }

    goto LABEL_18;
  }

  if (!_SCUnserialize(&cf, 0LL, *(UInt8 **)&length[1], length[0]))
  {
    int v7 = 1001;
LABEL_18:
    _SCErrorSet(v7);
    int v8 = 0LL;
    goto LABEL_19;
  }

  int v8 = _SCUnserializeMultiple((const __CFDictionary *)cf);
  CFRelease(cf);
LABEL_19:
  if (v18) {
    CFRelease(v18);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v8;
}

CFTypeRef __SCDynamicStoreCopyValueCommon(uint64_t a1, const __CFString *a2, int a3)
{
  v23[1] = *MEMORY[0x1895F89C0];
  v23[0] = a1;
  memset(length, 0, sizeof(length));
  _SCErrorSet(0);
  uint64_t v5 = v23[0];
  if (*(_BYTE *)(v23[0] + 200))
  {
    uint64_t v6 = *(const __CFDictionary **)(v23[0] + 216);
    if (v6)
    {
    }

    int v7 = *(const __CFArray **)(v5 + 224);
    if (v7)
    {
      v24.length = CFArrayGetCount(*(CFArrayRef *)(v5 + 224));
      v24.location = 0LL;
      if (CFArrayContainsValue(v7, v24, a2))
      {
        int v8 = 1004;
LABEL_30:
        _SCErrorSet(v8);
        return 0LL;
      }
    }

    uint64_t v9 = *(const __CFDictionary **)(v5 + 208);
    if (v9)
    {
    }
  }

  if (!_SCSerializeString(a2, (CFDataRef *)&cf, (vm_address_t *)&v21, &v20)) {
    goto LABEL_29;
  }
  do
    uint64_t v11 = configget(*(_DWORD *)(v5 + 40), v21, v20, &length[1], length, &v17, &v16);
  while (__SCDynamicStoreCheckRetryAndHandleError( v23[0],  v11,  &v16,  (uint64_t)"SCDynamicStoreCopyValue configget()"));
  CFRelease(cf);
  int v12 = v16;
  int v8 = __SCDynamicStoreMapInternalStatus(v16, a3);
  unsigned int v16 = v8;
  if (v8)
  {
    if (*(void *)&length[1])
    {
      MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], *(void *)&length[1], length[0]);
      int v8 = v16;
    }

    if (!a3) {
      int v8 = v12;
    }
    goto LABEL_30;
  }

  if (!_SCUnserialize((CFPropertyListRef *)&value, 0LL, *(UInt8 **)&length[1], length[0]))
  {
LABEL_29:
    int v8 = 1001;
    goto LABEL_30;
  }

  if (*(_BYTE *)(v5 + 200))
  {
    vm_size_t v13 = value;
    if (value)
    {
      CFMutableDictionaryRef Mutable = *(__CFDictionary **)(v5 + 208);
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        *(void *)(v5 + 208) = Mutable;
        vm_size_t v13 = value;
      }

      CFDictionarySetValue(Mutable, a2, v13);
    }
  }

  if (a3) {
    int v15 = v16;
  }
  else {
    int v15 = v12;
  }
  _SCErrorSet(v15);
  return value;
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return __SCDynamicStoreCopyValueCommon((uint64_t)store, key, 1);
}

Boolean SCDynamicStoreSetMultiple( SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  v26[1] = *MEMORY[0x1895F89C0];
  CFDataRef v25 = 0LL;
  v26[0] = (uint64_t)store;
  vm_size_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v21 = 0LL;
  CFTypeRef cf = 0LL;
  CFTypeRef v19 = 0LL;
  vm_size_t v20 = 0LL;
  vm_size_t v17 = 0LL;
  uint64_t v18 = 0LL;
  if (keysToSet)
  {
    CFDictionaryRef v7 = _SCSerializeMultiple(keysToSet);
    if (!v7) {
      goto LABEL_21;
    }
    CFDictionaryRef v8 = v7;
    BOOL v9 = _SCSerialize(v7, &v25, (vm_address_t *)&v24, &v23);
    CFRelease(v8);
    if (!v9) {
      goto LABEL_21;
    }
  }

  if (keysToRemove && !_SCSerialize(keysToRemove, (CFDataRef *)&cf, (vm_address_t *)&v21, &v20))
  {
    CFDataRef v14 = v25;
    if (!v25)
    {
LABEL_21:
      int v13 = 1002;
LABEL_22:
      _SCErrorSet(v13);
      return 0;
    }

LABEL_20:
    CFRelease(v14);
    goto LABEL_21;
  }

  if (keysToNotify && !_SCSerialize(keysToNotify, (CFDataRef *)&v19, (vm_address_t *)&v18, &v17))
  {
    if (v25) {
      CFRelease(v25);
    }
    CFDataRef v14 = (CFDataRef)cf;
    if (!cf) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  uint64_t v10 = v26[0];
  do
    uint64_t v11 = configset_m(*(_DWORD *)(v10 + 40), v24, v23, v21, v20, v18, v17, (int *)&v16);
  while (__SCDynamicStoreCheckRetryAndHandleError( v26[0],  v11,  &v16,  (uint64_t)"SCDynamicStoreSetMultiple configset_m()"));
  if (v25) {
    CFRelease(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  Boolean v12 = 1;
  int v13 = __SCDynamicStoreMapInternalStatus(v16, 1);
  unsigned int v16 = v13;
  if (v13) {
    goto LABEL_22;
  }
  return v12;
}

  *(_BYTE *)(a1 + 217) = 1;
  if (!a4) {
    goto LABEL_27;
  }
  *(void *)(a1 + 288) = a4;
  dispatch_retain(a4);
  if (*(void *)(a1 + 344))
  {
LABEL_30:
    if (*(void *)(a1 + 344))
    {
      CFRetain((CFTypeRef)a1);
      if (__SCNetworkConnectionQueue_once != -1) {
        dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
      }
      v31[0] = MEMORY[0x1895F87A8];
      v31[1] = 0x40000000LL;
      v31[2] = ____SCNetworkConnectionScheduleWithRunLoop_block_invoke_3;
      v31[3] = &__block_descriptor_tmp_112;
      v31[4] = a1;
      v31[5] = a1;
      ne_session_set_event_handler();
    }

    uint64_t v22 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v22 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v22;
    }

    vm_size_t v23 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v22, (os_log_type_t)v23))
    {
      uint64_t v24 = _os_log_pack_size();
      CFDataRef v25 = (char *)v31 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      vm_size_t v26 = _os_log_pack_fill();
      *(_DWORD *)vm_size_t v26 = 136315138;
      *(void *)(v26 + 4) = a1 + 88;
      __SC_log_send(7, (uint64_t)v22, v23, v25);
    }

    uint64_t v10 = 1LL;
    goto LABEL_6;
  }

  int v15 = *(__CFMachPort **)(a1 + 208);
  mach_port_t Port = CFMachPortGetPort(v15);
  if (Port)
  {
    vm_size_t v17 = Port;
    uint64_t v18 = Port;
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    CFTypeRef v19 = dispatch_source_create(MEMORY[0x1895F8B40], v18, 0LL, (dispatch_queue_t)__SCNetworkConnectionQueue_q);
    if (v19)
    {
      vm_size_t v20 = v19;
      CFRetain((CFTypeRef)a1);
      dispatch_set_context(v20, (void *)a1);
      dispatch_set_finalizer_f(v20, (dispatch_function_t)dispatch_CFRelease_0);
      CFRetain(v15);
      dispatch_retain(a4);
      uint64_t v21 = MEMORY[0x1895F87A8];
      v33[0] = MEMORY[0x1895F87A8];
      v33[1] = 0x40000000LL;
      v33[2] = ____SCNetworkConnectionScheduleWithRunLoop_block_invoke;
      v33[3] = &__block_descriptor_tmp_109;
      unsigned int v34 = v17;
      v33[4] = a1;
      v33[5] = a4;
      dispatch_source_set_event_handler(v20, v33);
      v32[0] = v21;
      v32[1] = 0x40000000LL;
      v32[2] = ____SCNetworkConnectionScheduleWithRunLoop_block_invoke_2;
      v32[3] = &__block_descriptor_tmp_110;
      v32[4] = v15;
      v32[5] = v20;
      v32[6] = a4;
      dispatch_source_set_cancel_handler(v20, v32);
      *(void *)(a1 + 296) = v20;
      dispatch_resume(v20);
      goto LABEL_30;
    }

    uint64_t v27 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v27 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v27;
    }

    uint64_t v28 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v27, (os_log_type_t)v28))
    {
      uint64_t v29 = _os_log_pack_size();
      int v30 = (char *)v31 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v27, v28, v30);
    }
  }

  dispatch_release(*(dispatch_object_t *)(a1 + 288));
  *(void *)(a1 + 288) = 0LL;
  BOOL v9 = 1001;
LABEL_4:
  _SCErrorSet(v9);
LABEL_5:
  uint64_t v10 = 0LL;
LABEL_6:
  pthread_mutex_unlock(v8);
  return v10;
}

    _SCErrorSet(v14);
LABEL_21:
    int v13 = 0LL;
    goto LABEL_22;
  }

  ne_session_cancel();
LABEL_14:
  CFDictionaryRef v8 = (os_log_s *)__log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    CFDictionaryRef v8 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v8;
  }

  BOOL v9 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v11 = (char *)&v18 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    Boolean v12 = _os_log_pack_fill();
    *(_DWORD *)Boolean v12 = 136315138;
    *(void *)(v12 + 4) = a1 + 88;
    __SC_log_send(7, (uint64_t)v8, v9, v11);
  }

  int v13 = 1LL;
LABEL_22:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  CFRelease((CFTypeRef)a1);
  return v13;
}

          CFArrayAppendValue(Mutable, v17);
        }
      }

  CFRelease(v5);
  CFRelease(v7);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v11) {
    goto LABEL_23;
  }
  return Mutable;
}

Boolean SCDynamicStoreSetValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  v21[1] = *MEMORY[0x1895F89C0];
  v21[0] = (uint64_t)store;
  uint64_t v5 = v21[0];
  if (!*(_BYTE *)(v21[0] + 200))
  {
    if (_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v19, &v18))
    {
      if (_SCSerialize(value, (CFDataRef *)&v17, (vm_address_t *)&v16, &v15))
      {
        do
          uint64_t v10 = configset(*(_DWORD *)(v5 + 40), v19, v18, v16, v15, 0, &v13, &v14);
        while (__SCDynamicStoreCheckRetryAndHandleError( v21[0],  v10,  &v14,  (uint64_t)"SCDynamicStoreSetValue configset()"));
        CFRelease(cf);
        CFRelease(v17);
        Boolean v9 = 1;
        int v11 = __SCDynamicStoreMapInternalStatus(v14, 1);
        unsigned int v14 = v11;
        if (!v11) {
          return v9;
        }
        goto LABEL_16;
      }

      CFRelease(cf);
    }

    int v11 = 1002;
LABEL_16:
    _SCErrorSet(v11);
    return 0;
  }

  uint64_t v6 = *(const __CFArray **)(v21[0] + 224);
  if (v6)
  {
    v22.length = CFArrayGetCount(*(CFArrayRef *)(v21[0] + 224));
    v22.location = 0LL;
    FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v6, v22, key);
    if (FirstIndexOfValue != -1) {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 224), FirstIndexOfValue);
    }
  }

  CFMutableDictionaryRef Mutable = *(__CFDictionary **)(v5 + 216);
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    *(void *)(v5 + 216) = Mutable;
  }

  CFDictionarySetValue(Mutable, key, value);
  return 1;
}

Boolean SCDynamicStoreRemoveValue(SCDynamicStoreRef store, CFStringRef key)
{
  v14[1] = *MEMORY[0x1895F89C0];
  v14[0] = (uint64_t)store;
  uint64_t v3 = v14[0];
  if (!*(_BYTE *)(v14[0] + 200))
  {
    if (_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v12, &v11))
    {
      do
        uint64_t v7 = configremove(*(_DWORD *)(v3 + 40), v12, v11, (int *)&v10);
      while (__SCDynamicStoreCheckRetryAndHandleError( v14[0],  v7,  &v10,  (uint64_t)"SCDynamicStoreRemoveValue configremove()"));
      CFRelease(cf);
      Boolean v6 = 1;
      int v8 = __SCDynamicStoreMapInternalStatus(v10, 1);
      unsigned int v10 = v8;
      if (!v8) {
        return v6;
      }
    }

    else
    {
      int v8 = 1001;
    }

    _SCErrorSet(v8);
    return 0;
  }

  uint64_t v4 = *(__CFDictionary **)(v14[0] + 216);
  if (v4) {
    CFDictionaryRemoveValue(v4, key);
  }
  CFMutableDictionaryRef Mutable = *(const __CFArray **)(v3 + 224);
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    *(void *)(v3 + 224) = Mutable;
  }

  v15.length = CFArrayGetCount(Mutable);
  v15.location = 0LL;
  if (!CFArrayContainsValue(Mutable, v15, key)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 224), key);
  }
  return 1;
}

Boolean SCDynamicStoreNotifyValue(SCDynamicStoreRef store, CFStringRef key)
{
  v13[1] = *MEMORY[0x1895F89C0];
  v13[0] = (uint64_t)store;
  uint64_t v3 = v13[0];
  if (!*(_BYTE *)(v13[0] + 200))
  {
    if (_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v11, &v10))
    {
      do
        uint64_t v6 = confignotify(*(_DWORD *)(v3 + 40), v11, v10, (int *)&v9);
      while (__SCDynamicStoreCheckRetryAndHandleError( v13[0],  v6,  &v9,  (uint64_t)"SCDynamicStoreNotifyValue confignotify()"));
      CFRelease(cf);
      Boolean v5 = 1;
      int v7 = __SCDynamicStoreMapInternalStatus(v9, 1);
      unsigned int v9 = v7;
      if (!v7) {
        return v5;
      }
    }

    else
    {
      int v7 = 1001;
    }

    _SCErrorSet(v7);
    return 0;
  }

  CFMutableDictionaryRef Mutable = *(const __CFArray **)(v13[0] + 232);
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    *(void *)(v3 + 232) = Mutable;
  }

  v14.length = CFArrayGetCount(Mutable);
  v14.location = 0LL;
  if (!CFArrayContainsValue(Mutable, v14, key)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 232), key);
  }
  return 1;
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  v19[1] = *MEMORY[0x1895F89C0];
  v19[0] = (uint64_t)store;
  uint64_t v17 = 0LL;
  CFTypeRef cf = 0LL;
  CFTypeRef v15 = 0LL;
  vm_size_t v16 = 0LL;
  vm_size_t v13 = 0LL;
  uint64_t v14 = 0LL;
  int v6 = __SCDynamicStoreNormalize((uint64_t)v19, 0);
  if (!v6) {
    return v6;
  }
  if (keys && !_SCSerialize(keys, (CFDataRef *)&cf, (vm_address_t *)&v17, &v16)) {
    goto LABEL_23;
  }
  if (patterns && !_SCSerialize(patterns, (CFDataRef *)&v15, (vm_address_t *)&v14, &v13))
  {
    if (cf) {
      CFRelease(cf);
    }
LABEL_23:
    int v8 = 1001;
LABEL_24:
    _SCErrorSet(v8);
    LOBYTE(v6) = 0;
    return v6;
  }

  do
    uint64_t v7 = notifyset(*((_DWORD *)store + 10), v17, v16, v14, v13, &v12);
  while (__SCDynamicStoreCheckRetryAndHandleError( v19[0],  v7,  &v12,  (uint64_t)"SCDynamicStoreSetNotificationKeys notifyset()"));
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  int v8 = v12;
  if (v12) {
    goto LABEL_24;
  }
  if (keys) {
    keys = CFArrayCreateMutableCopy(0LL, 0LL, keys);
  }
  unsigned int v9 = (const void *)*((void *)store + 21);
  if (v9) {
    CFRelease(v9);
  }
  *((void *)store + 21) = keys;
  if (patterns) {
    patterns = CFArrayCreateMutableCopy(0LL, 0LL, patterns);
  }
  vm_size_t v10 = (const void *)*((void *)store + 22);
  if (v10) {
    CFRelease(v10);
  }
  *((void *)store + 22) = patterns;
  LOBYTE(v6) = 1;
  return v6;
}

uint64_t SCDynamicStoreAddWatchedKey(uint64_t a1, __CFString *a2, int a3)
{
  v14[1] = *MEMORY[0x1895F89C0];
  v14[0] = a1;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)v14, 0);
  if (!(_DWORD)result) {
    return result;
  }
  if (!_SCSerializeString(a2, (CFDataRef *)&cf, (vm_address_t *)&v12, &v11))
  {
    int v8 = 1001;
LABEL_8:
    _SCErrorSet(v8);
    return 0LL;
  }

  do
    uint64_t v7 = notifyadd(*(_DWORD *)(a1 + 40), v12, v11, a3, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError( v14[0],  v7,  &v10,  (uint64_t)"SCDynamicStoreAddWatchedKey notifyadd()"));
  CFRelease(cf);
  int v8 = v10;
  if (v10) {
    goto LABEL_8;
  }
  if (a3) {
    unsigned int v9 = (__CFArray **)(a1 + 176);
  }
  else {
    unsigned int v9 = (__CFArray **)(a1 + 168);
  }
  addKey(v9, a2);
  return 1LL;
}

void addKey(__CFArray **a1, void *value)
{
  CFMutableDictionaryRef Mutable = *a1;
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    *a1 = Mutable;
  }

  CFArrayAppendValue(Mutable, value);
}

uint64_t SCDynamicStoreRemoveWatchedKey(uint64_t a1, const __CFString *a2, int a3)
{
  v14[1] = *MEMORY[0x1895F89C0];
  v14[0] = a1;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)v14, 0);
  if (!(_DWORD)result) {
    return result;
  }
  if (!_SCSerializeString(a2, (CFDataRef *)&cf, (vm_address_t *)&v12, &v11))
  {
    int v8 = 1001;
LABEL_8:
    _SCErrorSet(v8);
    return 0LL;
  }

  do
    uint64_t v7 = notifyremove(*(_DWORD *)(a1 + 40), v12, v11, a3, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError( v14[0],  v7,  &v10,  (uint64_t)"SCDynamicStoreRemoveWatchedKey notifyremove()"));
  CFRelease(cf);
  int v8 = v10;
  if (v10) {
    goto LABEL_8;
  }
  if (a3) {
    unsigned int v9 = *(const __CFArray **)(a1 + 176);
  }
  else {
    unsigned int v9 = *(const __CFArray **)(a1 + 168);
  }
  removeKey(v9, a2);
  return 1LL;
}

void removeKey(const __CFArray *a1, const void *a2)
{
  if (a1)
  {
    v5.length = CFArrayGetCount(a1);
    v5.location = 0LL;
    FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(a1, v5, a2);
    CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  }

CFArrayRef SCDynamicStoreCopyNotifiedKeys(SCDynamicStoreRef store)
{
  v8[1] = *MEMORY[0x1895F89C0];
  v8[0] = (uint64_t)store;
  memset(length, 0, sizeof(length));
  if (__SCDynamicStoreNormalize((uint64_t)v8, 0))
  {
    do
      uint64_t v2 = notifychanges(*((_DWORD *)store + 10), &length[1], length, &v6);
    while (__SCDynamicStoreCheckRetryAndHandleError( v8[0],  v2,  &v6,  (uint64_t)"SCDynamicStoreCopyNotifiedKeys notifychanges()"));
    int v3 = v6;
    if (v6)
    {
      if (*(void *)&length[1])
      {
        MEMORY[0x186E09D7C](*MEMORY[0x1895FBBE0], *(void *)&length[1], length[0]);
        int v3 = v6;
      }
    }

    else
    {
      int v3 = 1001;
    }

    _SCErrorSet(v3);
  }

  return 0LL;
}

uint64_t SCDynamicStoreNotifyWait(mach_port_context_t a1)
{
  guard[1] = *MEMORY[0x1895F89C0];
  guard[0] = a1;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)guard, 0);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      int v4 = 2003;
      goto LABEL_4;
    }

    uint64_t result = __SCDynamicStoreAddNotificationPort(guard[0], v3);
    if ((_DWORD)result)
    {
      mach_port_name_t v5 = result;
      *(_DWORD *)(a1 + 48) = 1;
      int v6 = waitForMachMessage(result);
      *(_DWORD *)(a1 + 48) = 0;
      if (v6 != 70)
      {
        if (v6 != -1)
        {
          uint64_t v7 = notifycancel(*(_DWORD *)(a1 + 40), &v8);
          if (__SCDynamicStoreCheckRetryAndHandleError( guard[0],  v7,  &v8,  (uint64_t)"SCDynamicStoreNotifyWait notifycancel()")) {
            int v8 = 0;
          }
          __SCDynamicStoreRemoveNotificationPort(guard[0], v5);
          int v4 = v8;
          if (!v8) {
            return 1LL;
          }
          goto LABEL_4;
        }

        mach_port_mod_refs(*MEMORY[0x1895FBBE0], v5, 1u, -1);
      }

      int v4 = 2002;
LABEL_4:
      _SCErrorSet(v4);
      return 0LL;
    }
  }

  return result;
}

uint64_t waitForMachMessage(mach_port_name_t rcv_name)
{
  mach_msg_return_t v1;
  mach_error_t v2;
  os_log_s *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _BYTE v10[28];
  uint64_t v11;
  vm_size_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v1 = mach_msg((mach_msg_header_t *)&v10[4], 2, 0, 0x64u, rcv_name, 0, 0);
  if (!v1) {
    return *(unsigned int *)&v10[24];
  }
  uint64_t v2 = v1;
  __n128 v3 = __log_SCDynamicStore();
  int v4 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
  {
    mach_port_name_t v5 = _os_log_pack_size();
    int v6 = &v10[-((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    uint64_t v7 = _os_log_pack_fill();
    int v8 = mach_error_string(v2);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v8;
    __SC_log_send(5, (uint64_t)v3, v4, v6);
  }

  return 0xFFFFFFFFLL;
}

uint64_t __SCDynamicStoreAddNotificationPort(mach_port_context_t context, __n128 a2)
{
  kern_return_t v4;
  mach_error_t v5;
  os_log_s *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  kern_return_t v13;
  os_log_s *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  kern_return_t v20;
  char *v21;
  CFStringRef v22;
  UInt8 *v23;
  const char *v24;
  CFStringRef v25;
  os_log_s *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  mach_port_type_t v32;
  BOOL v33;
  const char *v34;
  os_log_s *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v43;
  __n128 *v44;
  __n128 v45;
  mach_port_type_t ptype;
  mach_error_t v47;
  mach_port_name_t name;
  mach_port_t previous;
  void block[7];
  mach_port_options_t options;
  uint64_t v52;
  __n128 v3 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  uint64_t v52 = *MEMORY[0x1895F89C0];
  a2.n128_u64[0] = 136315650LL;
  uint64_t v43 = a2;
  a2.n128_u64[0] = 136315138LL;
  int v45 = a2;
  do
  {
    while (1)
    {
      *(void *)&options.flags = 17LL;
      options.reserved[0] = 0LL;
      options.reserved[1] = 0LL;
      int v4 = mach_port_construct(*v3, &options, context, &name);
      if (!v4) {
        break;
      }
      mach_port_name_t v5 = v4;
      int v6 = __log_SCDynamicStore();
      uint64_t v7 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
      {
        int v8 = _os_log_pack_size();
        unsigned int v9 = (char *)&v43 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        int v10 = _os_log_pack_fill();
        vm_size_t v11 = mach_error_string(v5);
        *(_DWORD *)int v10 = v45.n128_u32[0];
        *(void *)(v10 + 4) = v11;
        __SC_log_send(5, (uint64_t)v6, v7, v9);
      }

      if (v5 != 6 && v5 != 3) {
        goto LABEL_37;
      }
      usleep(0xC350u);
    }

    vm_size_t v13 = mach_port_request_notification(*v3, name, 70, 1u, name, 0x15u, &previous);
    if (v13)
    {
      mach_port_name_t v5 = v13;
      int v35 = __log_SCDynamicStore();
      uint64_t v36 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
      {
        int v37 = _os_log_pack_size();
        int v38 = (char *)&v43 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        v39 = _os_log_pack_fill();
        uint64_t v40 = mach_error_string(v5);
        *(_DWORD *)v39 = v45.n128_u32[0];
        *(void *)(v39 + 4) = v40;
        __SC_log_send(5, (uint64_t)v35, v36, v38);
      }

      goto LABEL_37;
    }

    if (previous)
    {
      uint64_t v14 = __log_SCDynamicStore();
      CFTypeRef v15 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
      {
        vm_size_t v16 = _os_log_pack_size();
        uint64_t v17 = (char *)&v43 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v14, v15, v17);
      }
    }

    vm_size_t v18 = notifyviaport(*(_DWORD *)(context + 40), name, 0, &v47);
    uint64_t v19 = v18;
    switch((_DWORD)v18)
    {
      case 0xFFFFFECC:
        goto LABEL_29;
      case 0:
        continue;
      case 0x10000003:
        mach_port_deallocate(*v3, name);
LABEL_29:
        mach_port_destruct(*v3, name, 0, context);
        name = 0;
        continue;
    }

    mach_port_type_t ptype = 0;
    vm_size_t v20 = mach_port_type(*v3, name, &ptype);
    uint64_t v21 = mach_error_string(v19);
    CFRange v22 = CFStringCreateWithFormat(0LL, 0LL, @"SCDynamicStore notifyviaport() failed: %s", v21);
    vm_size_t v23 = _SC_cfstring_to_cstring(v22, 0LL, 0LL, 0x600u);
    CFRelease(v22);
    uint64_t v24 = getprogname();
    CFDataRef v25 = CFStringCreateWithFormat(0LL, 0LL, @"A SCDynamicStore error has been detected by %s", v24);
    vm_size_t v26 = __log_SCDynamicStore();
    uint64_t v27 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v26, (os_log_type_t)v27))
    {
      uint64_t v28 = _os_log_pack_size();
      v44 = &v43;
      uint64_t v29 = (char *)&v43 - ((MEMORY[0x1895F8858](v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      int v30 = _os_log_pack_fill();
      __int128 v31 = mach_error_string(v19);
      __int128 v32 = ptype;
      unsigned int v33 = (ptype & 0x150000) != 0 && v20 == 0;
      *(_DWORD *)int v30 = v43.n128_u32[0];
      unsigned int v34 = "";
      if (v33) {
        unsigned int v34 = "w/send";
      }
      *(void *)(v30 + 4) = v31;
      *(_WORD *)(v30 + 12) = 2080;
      *(void *)(v30 + 14) = v34;
      *(_WORD *)(v30 + 22) = 1024;
      *(_DWORD *)(v30 + 24) = v32;
      __SC_log_send(3, (uint64_t)v26, v27, v29);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_0;
    block[3] = &__block_descriptor_tmp_14;
    block[4] = v23;
    void block[5] = @"SCDynamicStore notify mach port error";
    block[6] = v25;
    if (_SC_crash_once_once_0 != -1) {
      dispatch_once(&_SC_crash_once_once_0, block);
    }
    CFAllocatorDeallocate(0LL, v23);
    CFRelease(v25);
    if ((_DWORD)v19) {
      goto LABEL_29;
    }
  }

  while (__SCDynamicStoreCheckRetryAndHandleError( context,  v19,  &v47,  (uint64_t)"SCDynamicStore callback notifyviaport()"));
  uint64_t v41 = name;
  if (v47 && name)
  {
    mach_port_destruct(*v3, name, 0, context);
    mach_port_name_t v5 = v47;
LABEL_37:
    _SCErrorSet(v5);
    return 0LL;
  }

  return v41;
}

uint64_t __SCDynamicStoreRemoveNotificationPort(mach_port_context_t guard, mach_port_name_t a2)
{
  return mach_port_destruct(*MEMORY[0x1895FBBE0], a2, 0, guard);
}

CFRunLoopSourceRef SCDynamicStoreCreateRunLoopSource( CFAllocatorRef allocator, SCDynamicStoreRef store, CFIndex order)
{
  v8[1] = *MEMORY[0x1895F89C0];
  v8[0] = store;
  if ((*((_DWORD *)store + 12) | 4) != 4)
  {
    _SCErrorSet(2003);
    return 0LL;
  }

  CFRunLoopSourceRef result = (CFRunLoopSourceRef)*((void *)store + 8);
  if (result) {
    goto LABEL_6;
  }
  v7.version = 0LL;
  v7.info = (void *)v8[0];
  v7.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
  v7.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
  v7.copyDescription = (CFStringRef (__cdecl *)(const void *))rlsCopyDescription;
  v7.equal = (Boolean (__cdecl *)(const void *, const void *))MEMORY[0x189602C38];
  v7.hash = (CFHashCode (__cdecl *)(const void *))MEMORY[0x189602D50];
  v7.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))rlsSchedule;
  v7.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))rlsCancel;
  v7.perform = (void (__cdecl *)(void *))rlsPerform;
  CFRunLoopSourceRef result = CFRunLoopSourceCreate(allocator, order, &v7);
  *((void *)store + 8) = result;
  if (result || (_SCErrorSet(1001), (CFRunLoopSourceRef result = (CFRunLoopSourceRef)*((void *)store + 8)) != 0LL))
  {
LABEL_6:
    CFRetain(result);
    return (CFRunLoopSourceRef)*((void *)store + 8);
  }

  return result;
}

__CFString *rlsCopyDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCDynamicStore RLS> {");
  CFStringAppendFormat(Mutable, 0LL, @"store = %p", a1);
  if (*(_DWORD *)(a1 + 48) == 4)
  {
    CFStringAppendFormat(Mutable, 0LL, @", callout = %p", *(void *)(a1 + 72));
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3)
    {
      int v4 = *(uint64_t (**)(void))(a1 + 112);
      if (v4)
      {
        mach_port_name_t v5 = (const void *)v4();
        if (v5)
        {
LABEL_8:
          CFStringAppendFormat(Mutable, 0LL, @", uint64_t context = %@", v5);
          CFRelease(v5);
          goto LABEL_9;
        }

        uint64_t v3 = *(void *)(a1 + 88);
      }
    }

    mach_port_name_t v5 = CFStringCreateWithFormat(0LL, 0LL, @"<SCDynamicStore context %p>", v3);
    if (!v5) {
      mach_port_name_t v5 = CFRetain(@"<no description>");
    }
    goto LABEL_8;
  }

LABEL_9:
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

        _SC_schedule((void *)a1, a2, a3, *(CFMutableArrayRef *)(a1 + 264));
        goto LABEL_12;
      }

      vm_size_t v18 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        vm_size_t v18 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v18;
      }

      uint64_t v19 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v18, (os_log_type_t)v19)) {
        goto LABEL_3;
      }
    }

    else
    {
      vm_size_t v18 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        vm_size_t v18 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v18;
      }

      uint64_t v19 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v18, (os_log_type_t)v19)) {
        goto LABEL_3;
      }
    }

    vm_size_t v20 = _os_log_pack_size();
    uint64_t v21 = (char *)v25 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    CFRange v22 = _os_log_pack_fill();
    vm_size_t v23 = SCError();
    uint64_t v24 = SCErrorString(v23);
    *(_DWORD *)CFRange v22 = 136315138;
    *(void *)(v22 + 4) = v24;
    __SC_log_send(3, (uint64_t)v18, v19, v21);
    goto LABEL_3;
  }

  if (!*(_BYTE *)(a1 + 200)) {
    goto LABEL_13;
  }
LABEL_2:
  _SCErrorSet(1002);
LABEL_3:
  unsigned int v9 = 0LL;
LABEL_4:
  pthread_mutex_unlock(v8);
  return v9;
}

  if (!a1) {
    CFRelease(v2);
  }
  if (Value) {
    CFRunLoopSourceContext v7 = 0;
  }
  else {
    CFRunLoopSourceContext v7 = 1004;
  }
  _SCErrorSet(v7);
  return Value;
}

  if (a3)
  {
    vm_size_t v13 = (const __CFArray *)CFDictionaryGetValue(a1, @"PluginPIDs");
    uint64_t v14 = CFArrayGetTypeID();
    if (v13)
    {
      if (CFGetTypeID(v13) == v14)
      {
        CFTypeRef v15 = CFArrayGetCount(v13);
        if (v15 >= 1)
        {
          vm_size_t v16 = v15;
          uint64_t v17 = 0LL;
          while (1)
          {
            vm_size_t v18 = CFArrayGetValueAtIndex(v13, v17);
            uint64_t v19 = CFNumberGetTypeID();
            if (v18)
            {
              if (CFGetTypeID(v18) == v19
                && CFNumberGetValue((CFNumberRef)v18, kCFNumberIntType, (char *)&v25 + 4)
                && HIDWORD(v25) == a3)
              {
                break;
              }
            }

            if (v16 == ++v17) {
              return 0LL;
            }
          }

          return 1LL;
        }
      }
    }
  }

  return 0LL;
}

  _SCErrorSet(1002);
  return 0LL;
}

  CFRelease(v1);
  vm_size_t v11 = v22;
  if (CFURLGetFileSystemRepresentation(v22, 1u, v24, 1024LL))
  {
    if (remove((const char *)v24))
    {
      if (*__error() != 2)
      {
        uint64_t v12 = __log_SCNetworkConfiguration();
        vm_size_t v13 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
        {
          uint64_t v14 = _os_log_pack_size();
          CFTypeRef v15 = (char *)&v21 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          vm_size_t v16 = _os_log_pack_fill();
          uint64_t v17 = __error();
          vm_size_t v18 = strerror(*v17);
          *(_DWORD *)vm_size_t v16 = 136315394;
          *(void *)(v16 + 4) = v24;
          *(_WORD *)(v16 + 12) = 2080;
          *(void *)(v16 + 14) = v18;
LABEL_16:
          __SC_log_send(5, (uint64_t)v12, v13, v15);
        }
      }
    }
  }

  else
  {
    uint64_t v12 = __log_SCNetworkConfiguration();
    vm_size_t v13 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
    {
      uint64_t v19 = _os_log_pack_size();
      CFTypeRef v15 = (char *)&v21 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      vm_size_t v20 = _os_log_pack_fill();
      *(_DWORD *)vm_size_t v20 = 138412290;
      *(void *)(v20 + 4) = v11;
      goto LABEL_16;
    }
  }

  CFRelease(v11);
}

  int v10 = CFBooleanGetValue((CFBooleanRef)Value);
LABEL_11:
  SCPreferencesSynchronize(v4);
  return v10;
}

  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void rlsSchedule(mach_port_context_t context, __CFRunLoop *a2, const __CFString *a3, __n128 a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (!*(void *)(context + 120))
  {
    v9.version = 0LL;
    v9.info = (void *)context;
    v9.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
    v9.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
    v9.copyDescription = (CFStringRef (__cdecl *)(const void *))notifyMPCopyDescription;
    mach_port_t v7 = __SCDynamicStoreAddNotificationPort(context, a4);
    if (!v7) {
      return;
    }
    int v8 = _SC_CFMachPortCreateWithPort( (uint64_t)"SCDynamicStore",  v7,  (void (__cdecl *)(CFMachPortRef, void *, CFIndex, void *))rlsCallback,  &v9);
    *(void *)(context + 120) = v8;
    if (a2)
    {
      *(void *)(context + 128) = CFMachPortCreateRunLoopSource(0LL, v8, 0LL);
      *(void *)(context + 56) = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    }
  }

  if (*(void *)(context + 128))
  {
    *(_DWORD *)(context + 48) = 4;
    _SC_schedule((void *)context, a2, a3, *(CFMutableArrayRef *)(context + 56));
  }

void rlsCancel(mach_port_context_t a1, __CFRunLoop *a2, const __CFString *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*(void *)(a1 + 128) && _SC_unschedule((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 56), 0))
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)))
    {
      return;
    }

    CFRunLoopRemoveSource(a2, *(CFRunLoopSourceRef *)(a1 + 128), a3);
  }

  int v14 = 0;
  int v6 = *(__CFMachPort **)(a1 + 120);
  if (v6) {
    mach_port_name_t Port = CFMachPortGetPort(v6);
  }
  else {
    mach_port_name_t Port = 0;
  }
  int v8 = *(const void **)(a1 + 64);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 64) = 0LL;
  }

  CFMachPortContext v9 = *(const void **)(a1 + 56);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 56) = 0LL;
  }

  uint64_t v10 = *(__CFRunLoopSource **)(a1 + 128);
  if (v10)
  {
    CFRunLoopSourceInvalidate(v10);
    CFRelease(*(CFTypeRef *)(a1 + 128));
    *(void *)(a1 + 128) = 0LL;
  }

  vm_size_t v11 = *(__CFMachPort **)(a1 + 120);
  if (v11)
  {
    CFMachPortInvalidate(v11);
    CFRelease(*(CFTypeRef *)(a1 + 120));
    *(void *)(a1 + 120) = 0LL;
  }

  mach_port_t v12 = *(_DWORD *)(a1 + 40);
  if (v12)
  {
    uint64_t v13 = notifycancel(v12, &v14);
  }

  if (Port) {
    mach_port_destruct(*MEMORY[0x1895FBBE0], Port, 0, a1);
  }
  if (!v14) {
    *(_DWORD *)(a1 + 48) = 0;
  }
}

void rlsPerform(uint64_t a1)
{
  v21[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = SCDynamicStoreCopyNotifiedKeys((SCDynamicStoreRef)a1);
  CFArrayRef v3 = v2;
  if (*(_BYTE *)(a1 + 160))
  {
    *(_BYTE *)(a1 + 160) = 0;
    if (!v2) {
      CFArrayRef v3 = CFArrayCreate(0LL, 0LL, 0LL, MEMORY[0x189605228]);
    }
  }

  else
  {
    if (!v2) {
      return;
    }
    if (!CFArrayGetCount(v2)) {
      goto LABEL_21;
    }
  }

  int v4 = *(void (**)(uint64_t, CFArrayRef, uint64_t))(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 88);
  mach_port_name_t v5 = *(uint64_t (**)(void))(a1 + 96);
  if (v5)
  {
    uint64_t v6 = v5(*(void *)(a1 + 88));
    mach_port_t v7 = *(void (**)(uint64_t))(a1 + 104);
  }

  else
  {
    mach_port_t v7 = 0LL;
  }

  int v8 = *(_DWORD *)(a1 + 48);
  CFMachPortContext v9 = __log_SCDynamicStore();
  uint64_t v10 = _SC_syslog_os_log_mapping(7);
  BOOL v11 = __SC_log_enabled(7, v9, (os_log_type_t)v10);
  if (!v8 || !v4)
  {
    if (!v11) {
      goto LABEL_18;
    }
    uint64_t v20 = _os_log_pack_size();
    uint64_t v17 = (char *)v21 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    uint64_t v18 = (uint64_t)v9;
    uint64_t v19 = v10;
    goto LABEL_17;
  }

  if (v11)
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t v13 = (char *)v21 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(7, (uint64_t)v9, v10, v13);
  }

  v4(a1, v3, v6);
  int v14 = __log_SCDynamicStore();
  uint64_t v15 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v14, (os_log_type_t)v15))
  {
    uint64_t v16 = _os_log_pack_size();
    uint64_t v17 = (char *)v21 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    uint64_t v18 = (uint64_t)v14;
    uint64_t v19 = v15;
LABEL_17:
    __SC_log_send(7, v18, v19, v17);
  }

LABEL_18:
  if (v7) {
    v7(v6);
  }
  if (v3) {
LABEL_21:
  }
    CFRelease(v3);
}

  uint64_t v10 = 0LL;
LABEL_19:
  if (v18[0]) {
    CFRelease(v18[0]);
  }
  return v10;
}

    _SCErrorSet(1002);
    uint64_t v13 = 0LL;
    goto LABEL_19;
  }

  if (!*(_BYTE *)(a1 + 200)
    || *(void *)(a1 + 272)
    || !_SC_unschedule((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 264), 0))
  {
    goto LABEL_18;
  }

  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 264)))
  {
    mach_port_t v7 = (void *)(a1 + 208);
    CFRunLoopRemoveSource((CFRunLoopRef)a2, *(CFRunLoopSourceRef *)(a1 + 208), a3);
    CFRelease(*(CFTypeRef *)(a1 + 264));
    *(void *)(a1 + 264) = 0LL;
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 208));
    CFRelease(*(CFTypeRef *)(a1 + 208));
    goto LABEL_10;
  }

  if (v19) {
    int v14 = v19;
  }
  else {
    int v14 = "";
  }
  FlagsFromPath = __SCNetworkReachabilityGetFlagsFromPath( *(void *)(a1 + 40) + 193LL,  (uint64_t)v14,  v6,  0,  0,  0LL,  0,  0);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  if (v19) {
    free(v19);
  }
LABEL_23:
  interface_index = nw_path_get_interface_index();
  nw_release(v6);
  nw_release(evaluator_for_endpoint);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = (*(_DWORD *)(v16 + 292) & 6) != 2;
  if ((FlagsFromPath & 4) != 0) {
    uint64_t v17 = (*(_DWORD *)(v16 + 292) & 2) == 0;
  }
  CFRunLoopSourceRef result = 1;
  if ((FlagsFromPath & 2) != 0 && v17)
  {
    *(_DWORD *)(v16 + 292) = FlagsFromPath;
    *(_DWORD *)(v16 + 296) = interface_index;
    if ((FlagsFromPath & 4) == 0) {
      return 0;
    }
  }

  return result;
}

  qword_18C54F7A0 = 0LL;
  if (values[0]) {
    CFRelease(values[0]);
  }
  CFRelease(v1);
}

            if (!Mutable) {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
            }
            CFDictionaryAddValue(Mutable, ValueAtIndex, v14);
            CFArrayRemoveValueAtIndex(v6, v13);
          }

          if (*__error() != 16) {
            break;
          }
        }
      }
    }

  _SCErrorSet(v6);
  return Instance;
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!store || CFGetTypeID(store) != TypeID)
  {
    int v6 = 2001;
    goto LABEL_10;
  }

  if (queue)
  {
    if (!*((_DWORD *)store + 10))
    {
      int v6 = 2002;
      goto LABEL_10;
    }

    if (*((void *)store + 17) || *((void *)store + 8) || *((_DWORD *)store + 12))
    {
      int v6 = 2003;
LABEL_10:
      _SCErrorSet(v6);
      LOBYTE(v7) = 0;
      return v7;
    }

    *((_DWORD *)store + 12) = 5;
    mach_port_name_t v7 = __SCDynamicStoreAddNotificationPort((mach_port_context_t)store, v5);
    if (v7)
    {
      *((void *)store + 17) = queue;
      dispatch_retain(queue);
      BOOL v11 = dispatch_queue_create("SCDynamicStore notifications", 0LL);
      dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1895F8B40], v7, 0LL, v11);
      if (v12)
      {
        uint64_t v13 = v12;
        CFRetain(store);
        dispatch_set_context(v13, store);
        dispatch_set_finalizer_f(v13, (dispatch_function_t)dispatch_CFRelease);
        dispatch_retain(queue);
        uint64_t v14 = MEMORY[0x1895F87A8];
        handler[0] = MEMORY[0x1895F87A8];
        handler[1] = 0x40000000LL;
        handler[2] = __SCDynamicStoreSetDispatchQueue_block_invoke;
        handler[3] = &__block_descriptor_tmp_12;
        mach_port_name_t v22 = v7;
        handler[4] = store;
        handler[5] = queue;
        handler[6] = store;
        dispatch_source_set_event_handler(v13, handler);
        v19[0] = v14;
        v19[1] = 0x40000000LL;
        uint64_t v19[2] = __SCDynamicStoreSetDispatchQueue_block_invoke_3;
        v19[3] = &__block_descriptor_tmp_13;
        mach_port_name_t v20 = v7;
        v19[4] = store;
        v19[5] = v11;
        v19[6] = v13;
        v19[7] = queue;
        dispatch_source_set_cancel_handler(v13, v19);
        *((void *)store + 18) = v13;
        dispatch_resume(v13);
        LOBYTE(v7) = 1;
        return v7;
      }

      uint64_t v15 = __log_SCDynamicStore();
      uint64_t v16 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v15, (os_log_type_t)v16))
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v18 = (char *)v19 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v15, v16, v18);
      }

      mach_port_destruct(*MEMORY[0x1895FBBE0], v7, 0, (mach_port_context_t)store);
      dispatch_release(v11);
      _SCErrorSet(1001);
      LOBYTE(v7) = 0;
    }
  }

  else
  {
    if (!*((void *)store + 17))
    {
      int v6 = 1002;
      goto LABEL_10;
    }

    LOBYTE(v7) = 1;
  }

  CFRetain(store);
  CFMachPortContext v9 = (dispatch_source_s *)*((void *)store + 18);
  if (v9)
  {
    dispatch_source_cancel(v9);
    *((void *)store + 18) = 0LL;
  }

  uint64_t v10 = (dispatch_object_s *)*((void *)store + 17);
  if (v10)
  {
    dispatch_release(v10);
    *((void *)store + 17) = 0LL;
  }

  *((_DWORD *)store + 12) = 0;
  CFRelease(store);
  return v7;
}

void dispatch_CFRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void __SCDynamicStoreSetDispatchQueue_block_invoke(uint64_t a1)
{
  mach_msg_return_t v2;
  mach_msg_return_t v3;
  os_log_s *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _DWORD *v8;
  mach_msg_id_t msgh_id;
  const void *v10;
  CFTypeID TypeID;
  dispatch_queue_s *v12;
  uint64_t v13;
  void block[6];
  mach_msg_id_t v16;
  mach_msg_header_t msg;
  uint64_t v18;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v2 = mach_msg(&msg, 2, 0, 0x7Cu, *(_DWORD *)(a1 + 56), 0, 0);
  if (v2)
  {
    CFArrayRef v3 = v2;
    int v4 = __log_SCDynamicStore();
    __n128 v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
    {
      int v6 = _os_log_pack_size();
      mach_port_name_t v7 = (char *)&block[-1] - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      int v8 = (_DWORD *)_os_log_pack_fill();
      *int v8 = 67109120;
      v8[1] = v3;
      __SC_log_send(5, (uint64_t)v4, v5, v7);
    }
  }

  else
  {
    msgh_id = msg.msgh_id;
    mach_msg_destroy(&msg);
    uint64_t v10 = *(const void **)(a1 + 32);
    CFTypeID TypeID = SCDynamicStoreGetTypeID();
    if (!v10 || CFGetTypeID(v10) != TypeID) {
      __SCDynamicStoreSetDispatchQueue_block_invoke_cold_1();
    }
    CFRetain(*(CFTypeRef *)(a1 + 32));
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = __SCDynamicStoreSetDispatchQueue_block_invoke_2;
    block[3] = &__block_descriptor_tmp_4;
    uint64_t v16 = msgh_id;
    dispatch_source_t v12 = *(dispatch_queue_s **)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 48);
    block[4] = *(void *)(a1 + 32);
    void block[5] = v13;
    dispatch_async(v12, block);
  }

void __SCDynamicStoreSetDispatchQueue_block_invoke_2(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) == 70) {
    __SCDynamicStoreReconnectNotifications(*(void *)(a1 + 32));
  }
  rlsPerform(*(void *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __SCDynamicStoreSetDispatchQueue_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!v2 || CFGetTypeID(v2) != TypeID) {
    __SCDynamicStoreSetDispatchQueue_block_invoke_3_cold_1();
  }
  mach_port_destruct(*MEMORY[0x1895FBBE0], *(_DWORD *)(a1 + 64), 0, *(void *)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
}

CFStringRef notifyMPCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0LL, 0LL, @"<SCDynamicStore notification MP> {store = %p}", a1);
}

void rlsCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 20) == 70) {
    __SCDynamicStoreReconnectNotifications(a4);
  }
  __n128 v5 = *(__CFRunLoopSource **)(a4 + 64);
  if (v5) {
    CFRunLoopSourceSignal(v5);
  }
}

uint64_t SCDynamicStoreNotifyFileDescriptor(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t v20 = a1;
  *(void *)uint64_t v21 = -1LL;
  int v19 = 0;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)&v20, 0);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      _SCErrorSet(2003);
      return 0LL;
    }

    if (pipe(v21) == -1)
    {
      CFMachPortContext v9 = __error();
      _SCErrorSet(*v9);
      uint64_t v10 = __log_SCDynamicStore();
      uint64_t v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
      {
LABEL_12:
        uint64_t v13 = _os_log_pack_size();
        uint64_t v14 = (char *)&v18 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        uint64_t v16 = __error();
        uint64_t v17 = strerror(*v16);
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = v17;
        __SC_log_send(3, (uint64_t)v10, v11, v14);
      }
    }

    else
    {
      int v19 = 0;
      if ((fileport_makeport() & 0x80000000) == 0)
      {
        do
          uint64_t v7 = notifyviafd(*(_DWORD *)(a1 + 40), v19, a2, &v18);
        while (__SCDynamicStoreCheckRetryAndHandleError( v20,  v7,  &v18,  (uint64_t)"SCDynamicStoreNotifyFileDescriptor notifyviafd()"));
        if ((_DWORD)v7)
        {
          int v8 = v7;
        }

        else
        {
          int v8 = v18;
          if (!v18)
          {
            close(v21[1]);
            *a3 = v21[0];
            *(_DWORD *)(a1 + 48) = 3;
            return 1LL;
          }
        }

        _SCErrorSet(v8);
        goto LABEL_15;
      }

      dispatch_source_t v12 = __error();
      _SCErrorSet(*v12);
      uint64_t v10 = __log_SCDynamicStore();
      uint64_t v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v10, (os_log_type_t)v11)) {
        goto LABEL_12;
      }
    }

uint64_t SCDynamicStoreNotifyCancel(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!a1 || CFGetTypeID((CFTypeRef)a1) != TypeID)
  {
    int v5 = 2001;
LABEL_9:
    _SCErrorSet(v5);
    return 0LL;
  }

  int v3 = *(_DWORD *)(a1 + 48);
  switch(v3)
  {
    case 0:
      return 1LL;
    case 5:
      SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)a1, 0LL);
      return 1LL;
    case 4:
      int v4 = *(__CFRunLoopSource **)(a1 + 64);
      if (v4)
      {
        *(void *)(a1 + 64) = 0LL;
        CFRunLoopSourceInvalidate(v4);
        CFRelease(v4);
      }

      return 1LL;
  }

  mach_port_t v7 = *(_DWORD *)(a1 + 40);
  if (!v7)
  {
    int v10 = 2002;
    int v11 = 2002;
LABEL_18:
    int v5 = v10;
    goto LABEL_9;
  }

  uint64_t v8 = notifycancel(v7, &v11);
  int v9 = __SCDynamicStoreCheckRetryAndHandleError(a1, v8, &v11, (uint64_t)"SCDynamicStoreNotifyCancel notifycancel()");
  uint64_t result = 1LL;
  if (!v9)
  {
    int v10 = v11;
    if (v11) {
      goto LABEL_18;
    }
  }

  return result;
}

_xpc_connection_s *CategoryManagerConnectionCreate(dispatch_queue_t targetq, uint64_t a2)
{
  handler[6] = *MEMORY[0x1895F89C0];
  mach_service = xpc_connection_create_mach_service( "com.apple.SystemConfiguration.NetworkCategoryManager",  targetq,  2uLL);
  handler[0] = MEMORY[0x1895F87A8];
  handler[1] = 0x40000000LL;
  handler[2] = __CategoryManagerConnectionCreate_block_invoke;
  handler[3] = &unk_189B63410;
  handler[4] = a2;
  handler[5] = mach_service;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_activate(mach_service);
  return mach_service;
}

uint64_t __CategoryManagerConnectionCreate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  CategoryManagerHandleResponse(a2, 1, (int *)&v4);
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 40), v4);
  }
  return result;
}

size_t CategoryManagerHandleResponse(void *a1, int a2, int *a3)
{
  v42[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = MEMORY[0x186E09E78]();
  if (v6 == MEMORY[0x1895F9250])
  {
    if (a2)
    {
      size_t result = xpc_dictionary_get_count(a1);
      if (!result)
      {
        int v27 = 3;
        goto LABEL_31;
      }

      uint64_t v15 = _SC_LOG_DEFAULT();
      uint64_t v16 = _SC_syslog_os_log_mapping(5);
      size_t result = __SC_log_enabled(5, v15, (os_log_type_t)v16);
      if ((_DWORD)result)
      {
        uint64_t v17 = _os_log_pack_size();
        int v18 = (char *)v42 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v19 = 136315138;
        *(void *)(v19 + 4) = "CategoryManagerHandleResponse";
        uint64_t v14 = (uint64_t)v15;
        uint64_t v20 = v16;
        uint64_t v21 = v18;
LABEL_28:
        __SC_log_send(5, v14, v20, v21);
        int v27 = 0;
        goto LABEL_29;
      }
    }

    else
    {
      if (a1 == (void *)MEMORY[0x1895F91A0])
      {
        int int64 = 2;
      }

      else
      {
        int int64 = xpc_dictionary_get_int64(a1, "Error");
        if (!int64)
        {
          int v27 = 0;
          size_t result = 1LL;
          goto LABEL_31;
        }
      }

      uint64_t v23 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      size_t result = __SC_log_enabled(5, v23, (os_log_type_t)v9);
      if ((_DWORD)result)
      {
        uint64_t v39 = _os_log_pack_size();
        uint64_t v12 = (char *)v42 - ((MEMORY[0x1895F8858](v39) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v40 = _os_log_pack_fill();
        uint64_t v41 = strerror(int64);
        *(_DWORD *)uint64_t v40 = 136315650;
        *(void *)(v40 + 4) = "CategoryManagerHandleResponse";
        *(_WORD *)(v40 + 12) = 2080;
        *(void *)(v40 + 14) = v41;
        *(_WORD *)(v40 + 22) = 1024;
        *(_DWORD *)(v40 + 24) = int64;
        goto LABEL_26;
      }
    }

LABEL_30:
    int v27 = 0;
    goto LABEL_31;
  }

  uint64_t v7 = v6;
  if (v6 != MEMORY[0x1895F9268])
  {
    uint64_t v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    size_t result = __SC_log_enabled(5, v8, (os_log_type_t)v9);
    if ((_DWORD)result)
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v12 = (char *)v42 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)(v13 + 4) = "CategoryManagerHandleResponse";
      *(_WORD *)(v13 + 12) = 2048;
      *(void *)(v13 + 14) = v7;
      uint64_t v14 = (uint64_t)v8;
LABEL_27:
      uint64_t v20 = v9;
      uint64_t v21 = v12;
      goto LABEL_28;
    }

    goto LABEL_30;
  }

  if (a1 == (void *)MEMORY[0x1895F9198])
  {
    uint64_t v28 = _SC_LOG_DEFAULT();
    uint64_t v29 = _SC_syslog_os_log_mapping(5);
    size_t result = __SC_log_enabled(5, v28, (os_log_type_t)v29);
    if ((_DWORD)result)
    {
      uint64_t v30 = _os_log_pack_size();
      __int128 v31 = (char *)v42 - ((MEMORY[0x1895F8858](v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v32 = 136315138;
      *(void *)(v32 + 4) = "CategoryManagerHandleResponse";
      __SC_log_send(5, (uint64_t)v28, v29, v31);
      int v27 = 2;
LABEL_29:
      size_t result = 0LL;
      goto LABEL_31;
    }

    int v27 = 2;
  }

  else
  {
    if (a1 != (void *)MEMORY[0x1895F91A0])
    {
      string = xpc_dictionary_get_string(a1, (const char *)*MEMORY[0x1895F91B0]);
      uint64_t v23 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      size_t result = __SC_log_enabled(5, v23, (os_log_type_t)v9);
      if ((_DWORD)result)
      {
        uint64_t v24 = _os_log_pack_size();
        uint64_t v12 = (char *)v42 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v25 = 136315394;
        *(void *)(v25 + 4) = "CategoryManagerHandleResponse";
        *(_WORD *)(v25 + 12) = 2080;
        *(void *)(v25 + 14) = string;
LABEL_26:
        uint64_t v14 = (uint64_t)v23;
        goto LABEL_27;
      }

      goto LABEL_30;
    }

    unsigned int v33 = _SC_LOG_DEFAULT();
    uint64_t v34 = _SC_syslog_os_log_mapping(5);
    size_t result = __SC_log_enabled(5, v33, (os_log_type_t)v34);
    if ((_DWORD)result)
    {
      uint64_t v35 = _os_log_pack_size();
      uint64_t v36 = (char *)v42 - ((MEMORY[0x1895F8858](v35) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v37 = _os_log_pack_fill();
      int v38 = "[async]";
      if (!a2) {
        int v38 = "";
      }
      *(_DWORD *)uint64_t v37 = 136315394;
      *(void *)(v37 + 4) = "CategoryManagerHandleResponse";
      *(_WORD *)(v37 + 12) = 2080;
      *(void *)(v37 + 14) = v38;
      __SC_log_send(5, (uint64_t)v33, v34, v36);
      int v27 = 1;
      goto LABEL_29;
    }

    int v27 = 1;
  }

  *((void *)v3 + 29) = nw_parameters_create();
  MEMORY[0x186E0989C]();
  uint64_t v13 = (os_log_s *)__log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    uint64_t v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v13;
  }

  uint64_t v14 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v13, (os_log_type_t)v14))
  {
    uint64_t v15 = _os_log_pack_size();
    uint64_t v16 = (char *)v18 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 136315650;
    *(void *)(v17 + 4) = v3 + 193;
    *(_WORD *)(v17 + 12) = 2080;
    *(void *)(v17 + 14) = "create w/address pair";
    *(_WORD *)(v17 + 22) = 2112;
    *(void *)(v17 + 24) = v3;
    __SC_log_send(7, (uint64_t)v13, v14, v16);
  }

  return (SCNetworkReachabilityRef)v3;
}

    uint64_t v22 = CFDictionaryGetTypeID();
    if (!Value || CFGetTypeID(Value) != v22)
    {
      CFRelease(v6);
      uint64_t v21 = 1LL;
LABEL_36:
      _SCErrorSet(0);
      return v21;
    }

    uint64_t v21 = SCPreferencesPathRemoveValue(a1, v6);
LABEL_33:
    CFRelease(v6);
    if (!(_DWORD)v21) {
      return v21;
    }
    goto LABEL_36;
  }

  _SCErrorSet(1002);
  return 0LL;
}

        int v10 = 0LL;
LABEL_31:
        if (v11) {
          CFRelease(v11);
        }
        goto LABEL_33;
      }
    }

    else
    {
      _SCErrorSet(1004);
    }

    uint64_t v6 = 0LL;
    goto LABEL_30;
  }

  _SCErrorSet(1005);
  int v10 = 0LL;
  uint64_t v6 = 0LL;
LABEL_33:
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v6;
}

    v29.location = 0LL;
    v29.length = v19;
    if (!CFArrayContainsValue(v18, v29, v24))
    {
      vm_size_t v26 = 1002;
      goto LABEL_39;
    }

    if (!AllowConfiguredMembers && (v22 || (uint64_t v22 = __SCNetworkServiceCopyAllEnabled(a1[10])) != 0LL))
    {
      if (__SCNetworkServiceExistsForInterface(v22, v24))
      {
        vm_size_t v26 = 1005;
        goto LABEL_39;
      }
    }

    goto LABEL_35;
  }

    ++v8;
    uint64_t v7 = theArray;
    int v3 = v61;
    CFIndex Count = v62;
    if (v8 == v67)
    {
      v60 = 1;
LABEL_35:
      if (Count < 1) {
        goto LABEL_95;
      }
      vm_size_t v26 = 0LL;
      while (1)
      {
        int v27 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v3, v26);
        AllowConfiguredMembers = SCBridgeInterfaceGetAllowConfiguredMembers(v27);
        uint64_t v29 = SCNetworkInterfaceGetBSDName(v27);
        uint64_t v30 = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v27);
        __int128 v31 = v30;
        v64 = v26;
        v65 = AllowConfiguredMembers;
        if (v30) {
          uint64_t v32 = CFArrayGetCount(v30);
        }
        else {
          uint64_t v32 = 0LL;
        }
        if (!v60)
        {
LABEL_47:
          if (v9 == -1)
          {
            uint64_t v9 = inet_dgram_socket();
            if (v9 == -1) {
              goto LABEL_94;
            }
          }

          if (__createInterface(v9, v29))
          {
            if (v32 >= 1)
            {
              uint64_t v39 = 0LL;
              uint64_t v40 = v65 == 0;
              do
              {
                uint64_t v41 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v31, v39);
                if (*((_BYTE *)v41 + 344))
                {
                  v42 = v41;
                  if (v40)
                  {
                    HardwareAddress = (const __CFData *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v41);
                    if (!__bridge_set_mac(v9, v29, HardwareAddress)) {
                      uint64_t v5 = 0;
                    }
                  }

                  v44 = SCNetworkInterfaceGetBSDName(v42);
                  uint64_t v40 = 0;
                }

                ++v39;
              }

              while (v32 != v39);
            }
          }

          else
          {
            int v45 = __error();
            _SCErrorSet(*v45);
            uint64_t v5 = 0;
          }

          goto LABEL_91;
        }

        unsigned int v33 = 0LL;
        while (1)
        {
          uint64_t v34 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(theArray, v33);
          uint64_t v35 = SCNetworkInterfaceGetBSDName(v34);
          uint64_t v36 = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v34);
          uint64_t v37 = v36;
          int v38 = v36 ? CFArrayGetCount(v36) : 0LL;
          if (CFEqual(v29, v35)) {
            break;
          }
          if (v67 == ++v33) {
            goto LABEL_47;
          }
        }

        if (v31 == v37 || v31 && v37 && CFEqual(v31, v37)) {
          goto LABEL_92;
        }
        if (v9 == -1)
        {
          uint64_t v9 = inet_dgram_socket();
          if (v9 == -1) {
            goto LABEL_94;
          }
        }

        v46 = v65;
        if (!v65 && v32 >= 1 && v38 >= 1)
        {
          uint64_t v47 = CFArrayGetValueAtIndex(v31, 0LL);
          uint64_t v48 = CFArrayGetValueAtIndex(v37, 0LL);
          if (CFEqual(v47, v48))
          {
            unsigned int v49 = 0;
LABEL_79:
            v53 = 0LL;
            v66 = v49;
            if (v46) {
              uint64_t v54 = 0;
            }
            else {
              uint64_t v54 = v49;
            }
            do
            {
              CFRange v55 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v31, v53);
              if (v66 || (v71.location = 0LL, v71.length = v38, !CFArrayContainsValue(v37, v71, v55)))
              {
                if (*((_BYTE *)v55 + 344))
                {
                  if (v54)
                  {
                    CFRange v56 = (const __CFData *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v55);
                    if (!__bridge_set_mac(v9, v29, v56)) {
                      uint64_t v5 = 0;
                    }
                  }

                  v57 = SCNetworkInterfaceGetBSDName(v55);
                  uint64_t v54 = 0;
                }
              }

              ++v53;
            }

            while (v32 != v53);
            goto LABEL_91;
          }

          for (CFIndex i = 0LL; i != v38; ++i)
          {
            v51 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v37, i);
            v70.location = 0LL;
            v70.length = v32;
            if (CFArrayContainsValue(v31, v70, v51))
            {
              uint64_t v52 = SCNetworkInterfaceGetBSDName(v51);
            }
          }

          int v38 = 0LL;
          v46 = 0;
        }

        unsigned int v49 = v38 == 0;
        if (v32 >= 1) {
          goto LABEL_79;
        }
LABEL_91:
        int v3 = v61;
LABEL_92:
        vm_size_t v26 = v64 + 1;
        if (v64 + 1 == v62) {
          goto LABEL_95;
        }
      }
    }
  }

LABEL_31:
  if (a3) {
    *a3 = v27;
  }
  return result;
}

      gettimeofday((timeval *)prefs + 8, 0LL);
      int v18 = *((void *)prefs + 16) - v67.tv_sec;
      v65 = v18;
      uint64_t v19 = *((_DWORD *)prefs + 34) - v67.tv_usec;
      v66 = v19;
      if (v19 < 0)
      {
        v65 = --v18;
        v66 = v19 + 1000000;
      }

      if (!*((_BYTE *)prefs + 304)) {
        goto LABEL_38;
      }
      if (stat(*((const char **)prefs + 13), &v69) == -1)
      {
        if (*__error() != 2)
        {
          v44 = __log_SCPreferences();
          int v45 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v44, (os_log_type_t)v45))
          {
            v46 = _os_log_pack_size();
            uint64_t v47 = v13;
            uint64_t v48 = (char *)&v64 - ((MEMORY[0x1895F8858](v46) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            unsigned int v49 = _os_log_pack_fill();
            uint64_t v50 = __error();
            v51 = strerror(*v50);
            *(_DWORD *)unsigned int v49 = 136315138;
            *(void *)(v49 + 4) = v51;
            uint64_t v52 = v48;
            uint64_t v13 = v47;
            __SC_log_send(6, (uint64_t)v44, v45, v52);
          }

          goto LABEL_73;
        }

        memset(&v69, 0, sizeof(v69));
      }

      uint64_t v20 = __SCPSignatureFromStatbuf(&v69.st_dev);
      uint64_t v21 = CFEqual(*((CFTypeRef *)prefs + 18), v20);
      CFRelease(v20);
      if (v21)
      {
LABEL_38:
        if (v18 >= 1) {
          reportDelay((uint64_t)prefs, &v65, 0);
        }
        uint64_t v22 = __log_SCPreferences();
        uint64_t v23 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v22, (os_log_type_t)v23))
        {
          uint64_t v24 = _os_log_pack_size();
          uint64_t v25 = v13;
          vm_size_t v26 = (char *)&v64 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          int v27 = _os_log_pack_fill();
          uint64_t v28 = *((void *)prefs + 13);
          *(_DWORD *)int v27 = 136315138;
          *(void *)(v27 + 4) = v28;
          uint64_t v29 = v26;
          uint64_t v13 = v25;
          __SC_log_send(7, (uint64_t)v22, v23, v29);
        }

        unsigned int v4 = 1;
        __SCPreferencesUpdateLockedState((uint64_t)prefs, 1);
        pthread_mutex_unlock(v13);
        return v4;
      }

uint64_t CategoryManagerConnectionRegister( _xpc_connection_s *a1, const __CFString *a2, const __CFString *a3, unsigned int a4)
{
  v20[1] = *MEMORY[0x1895F89C0];
  xpc_object_t v5 = register_request_create(a2, a3, a4);
  xpc_object_t v6 = CategoryManagerSendRequest(a1, v5);
  xpc_release(v5);
  if (v6)
  {
    if (v6 == (xpc_object_t)MEMORY[0x1895F91A0])
    {
      int64_t int64 = 2LL;
    }

    else
    {
      int64_t int64 = xpc_dictionary_get_int64(v6, "Error");
      if (!(_DWORD)int64)
      {
LABEL_11:
        xpc_release(v6);
        return int64;
      }
    }

    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v16 = (char *)v20 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      int v18 = strerror(int64);
      *(_DWORD *)uint64_t v17 = 136315650;
      *(void *)(v17 + 4) = "CategoryManagerConnectionRegister";
      *(_WORD *)(v17 + 12) = 2080;
      *(void *)(v17 + 14) = v18;
      *(_WORD *)(v17 + 22) = 1024;
      *(_DWORD *)(v17 + 24) = int64;
      __SC_log_send(5, (uint64_t)v13, v14, v16);
    }

    goto LABEL_11;
  }

  uint64_t v8 = _SC_LOG_DEFAULT();
  uint64_t v9 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v11 = (char *)v20 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v12 + 4) = "CategoryManagerConnectionRegister";
    __SC_log_send(5, (uint64_t)v8, v9, v11);
  }

  return 22LL;
}

xpc_object_t register_request_create(const __CFString *a1, const __CFString *a2, unsigned int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v6, "Type", 1LL);
  uint64_t v7 = getprogname();
  if (v7) {
    xpc_dictionary_set_string(v6, "ProcessName", v7);
  }
  if (!a1)
  {
    xpc_dictionary_set_string(v6, "Category", 0LL);
    if (!a2) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }

  uint64_t v8 = _SC_cfstring_to_cstring(a1, 0LL, 0LL, 0x8000100u);
  xpc_dictionary_set_string(v6, "Category", (const char *)v8);
  if (v8) {
    CFAllocatorDeallocate(0LL, v8);
  }
  if (a2)
  {
LABEL_9:
    uint64_t v9 = _SC_cfstring_to_cstring(a2, 0LL, 0LL, 0x8000100u);
    xpc_dictionary_set_string(v6, "InterfaceName", (const char *)v9);
    if (v9) {
      CFAllocatorDeallocate(0LL, v9);
    }
  }

xpc_object_t CategoryManagerSendRequest(_xpc_connection_s *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(a1, a2);
  if (v4)
  {
    xpc_object_t v5 = v4;
    while (!CategoryManagerHandleResponse(v5, 0, (int *)&v12 + 1) && HIDWORD(v12) == 2)
    {
      xpc_release(v5);
      xpc_object_t v5 = xpc_connection_send_message_with_reply_sync(a1, a2);
      if (!v5) {
        goto LABEL_6;
      }
    }
  }

  else
  {
LABEL_6:
    xpc_object_t v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v9 = (char *)&v12 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = "CategoryManagerSendRequest";
      __SC_log_send(5, (uint64_t)v6, v7, v9);
    }

    return 0LL;
  }

  return v5;
}

void CategoryManagerConnectionSynchronize( _xpc_connection_s *a1, const __CFString *a2, const __CFString *a3, unsigned int a4, const __CFString *a5)
{
  xpc_object_t v7 = register_request_create(a2, a3, a4);
  xpc_connection_send_message(a1, v7);
  xpc_release(v7);
  xpc_object_t v8 = activate_request_create(a5);
  xpc_connection_send_message(a1, v8);
  xpc_release(v8);
}

xpc_object_t activate_request_create(const __CFString *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v2, "Type", 2LL);
  if (a1)
  {
    int v3 = _SC_cfstring_to_cstring(a1, 0LL, 0LL, 0x8000100u);
    xpc_dictionary_set_string(v2, "Value", (const char *)v3);
    if (v3) {
      CFAllocatorDeallocate(0LL, v3);
    }
  }

  return v2;
}

uint64_t CategoryManagerConnectionActivateValue(_xpc_connection_s *a1, const __CFString *a2)
{
  v18[1] = *MEMORY[0x1895F89C0];
  xpc_object_t v3 = activate_request_create(a2);
  xpc_object_t v4 = CategoryManagerSendRequest(a1, v3);
  xpc_release(v3);
  if (v4)
  {
    if (v4 == (xpc_object_t)MEMORY[0x1895F91A0])
    {
      int64_t int64 = 2LL;
    }

    else
    {
      int64_t int64 = xpc_dictionary_get_int64(v4, "Error");
      if (!(_DWORD)int64)
      {
LABEL_11:
        xpc_release(v4);
        return int64;
      }
    }

    uint64_t v11 = _SC_LOG_DEFAULT();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v14 = (char *)v18 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      uint64_t v16 = strerror(int64);
      *(_DWORD *)uint64_t v15 = 136315650;
      *(void *)(v15 + 4) = "CategoryManagerConnectionActivateValue";
      *(_WORD *)(v15 + 12) = 2080;
      *(void *)(v15 + 14) = v16;
      *(_WORD *)(v15 + 22) = 1024;
      *(_DWORD *)(v15 + 24) = int64;
      __SC_log_send(5, (uint64_t)v11, v12, v14);
    }

    goto LABEL_11;
  }

  xpc_object_t v6 = _SC_LOG_DEFAULT();
  uint64_t v7 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t v9 = (char *)v18 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = "CategoryManagerConnectionActivateValue";
    __SC_log_send(5, (uint64_t)v6, v7, v9);
  }

  return 22LL;
}

CFStringRef CategoryManagerConnectionCopyActiveValue(_xpc_connection_s *a1, int *a2)
{
  v21[1] = *MEMORY[0x1895F89C0];
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v4, "Type", 3LL);
  xpc_object_t v5 = CategoryManagerSendRequest(a1, v4);
  xpc_release(v4);
  if (!v5)
  {
    uint64_t v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v10 = (char *)v21 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = "CategoryManagerConnectionCopyActiveValue";
      __SC_log_send(5, (uint64_t)v7, v8, v10);
      int int64 = 22;
      CFStringRef v12 = 0LL;
    }

    else
    {
      CFStringRef v12 = 0LL;
      int int64 = 22;
    }

    goto LABEL_14;
  }

  if (v5 == (xpc_object_t)MEMORY[0x1895F91A0])
  {
    int int64 = 2;
LABEL_8:
    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v16 = (char *)v21 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      int v18 = strerror(int64);
      *(_DWORD *)uint64_t v17 = 136315650;
      *(void *)(v17 + 4) = "CategoryManagerConnectionCopyActiveValue";
      *(_WORD *)(v17 + 12) = 2080;
      *(void *)(v17 + 14) = v18;
      *(_WORD *)(v17 + 22) = 1024;
      *(_DWORD *)(v17 + 24) = int64;
      __SC_log_send(5, (uint64_t)v13, v14, v16);
    }

    goto LABEL_10;
  }

  int int64 = xpc_dictionary_get_int64(v5, "Error");
LABEL_10:
  string = xpc_dictionary_get_string(v5, "ActiveValue");
  if (string) {
    CFStringRef v12 = CFStringCreateWithCString(0LL, string, 0x8000100u);
  }
  else {
    CFStringRef v12 = 0LL;
  }
  xpc_release(v5);
LABEL_14:
  *a2 = int64;
  return v12;
}

CFStringRef CategoryManagerConnectionCopyActiveValueNoSession( _xpc_connection_s *a1, const __CFString *a2, const __CFString *a3, int *a4)
{
  v27[1] = *MEMORY[0x1895F89C0];
  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v8, "Type", 3LL);
  if (a2)
  {
    uint64_t v9 = _SC_cfstring_to_cstring(a2, 0LL, 0LL, 0x8000100u);
    xpc_dictionary_set_string(v8, "Category", (const char *)v9);
    if (v9) {
      CFAllocatorDeallocate(0LL, v9);
    }
  }

  if (a3)
  {
    uint64_t v10 = _SC_cfstring_to_cstring(a3, 0LL, 0LL, 0x8000100u);
    xpc_dictionary_set_string(v8, "InterfaceName", (const char *)v10);
    if (v10) {
      CFAllocatorDeallocate(0LL, v10);
    }
  }

  xpc_object_t v11 = CategoryManagerSendRequest(a1, v8);
  xpc_release(v8);
  if (!v11)
  {
    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v16 = (char *)v27 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = "CategoryManagerConnectionCopyActiveValueNoSession";
      __SC_log_send(5, (uint64_t)v13, v14, v16);
      int int64 = 22;
      CFStringRef v18 = 0LL;
    }

    else
    {
      CFStringRef v18 = 0LL;
      int int64 = 22;
    }

    goto LABEL_20;
  }

  if (v11 == (xpc_object_t)MEMORY[0x1895F91A0])
  {
    int int64 = 2;
LABEL_14:
    uint64_t v19 = _SC_LOG_DEFAULT();
    uint64_t v20 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v19, (os_log_type_t)v20))
    {
      uint64_t v21 = _os_log_pack_size();
      uint64_t v22 = (char *)v27 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      uint64_t v24 = strerror(int64);
      *(_DWORD *)uint64_t v23 = 136315650;
      *(void *)(v23 + 4) = "CategoryManagerConnectionCopyActiveValueNoSession";
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)(v23 + 14) = v24;
      *(_WORD *)(v23 + 22) = 1024;
      *(_DWORD *)(v23 + 24) = int64;
      __SC_log_send(5, (uint64_t)v19, v20, v22);
    }

    goto LABEL_16;
  }

  int int64 = xpc_dictionary_get_int64(v11, "Error");
LABEL_16:
  string = xpc_dictionary_get_string(v11, "ActiveValue");
  if (string) {
    CFStringRef v18 = CFStringCreateWithCString(0LL, string, 0x8000100u);
  }
  else {
    CFStringRef v18 = 0LL;
  }
  xpc_release(v11);
LABEL_20:
  *a4 = int64;
  return v18;
}

uint64_t SCDynamicStoreSnapshot(uint64_t a1)
{
  v5[1] = *MEMORY[0x1895F89C0];
  v5[0] = a1;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)v5, 1);
  if ((_DWORD)result)
  {
    uint64_t v2 = v5[0];
    do
      uint64_t v3 = snapshot(*(_DWORD *)(v2 + 40), &v4);
    while (__SCDynamicStoreCheckRetryAndHandleError( v5[0],  v3,  &v4,  (uint64_t)"SCDynamicStoreSnapshot snapshot()"));
    if (v4)
    {
      _SCErrorSet(v4);
      return 0LL;
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

__CFData *__SCPSignatureFromStatbuf(int *a1)
{
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(0LL, 40LL);
  CFDataSetLength(Mutable, 40LL);
  BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
  uint64_t v4 = *((void *)a1 + 1);
  *(void *)BytePtr = *a1;
  *((void *)BytePtr + 1) = v4;
  *((_OWORD *)BytePtr + 1) = *((_OWORD *)a1 + 3);
  *((void *)BytePtr + 4) = *((void *)a1 + 12);
  return Mutable;
}

uint64_t __SCPreferencesGetNetworkConfigurationFlags(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 308);
  }
  return result;
}

uint64_t __SCPreferencesSetNetworkConfigurationFlags(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 308) = a2;
  }
  return result;
}

UInt8 *__SCPreferencesPath(CFAllocatorRef alloc, CFStringRef theString)
{
  v13[1] = *MEMORY[0x1895F89C0];
  if (!theString)
  {
    CFStringRef Copy = CFStringCreateWithFormat( alloc,  0LL,  @"%s%@/%@",  "",  @"/Library/Preferences/SystemConfiguration",  @"preferences.plist");
    goto LABEL_5;
  }

  if (CFStringHasPrefix(theString, @"/"))
  {
    CFStringRef Copy = CFStringCreateCopy(alloc, theString);
LABEL_5:
    xpc_object_t v5 = Copy;
    goto LABEL_6;
  }

  if (!CFEqual(theString, @"preferences.plist")) {
    CFEqual(theString, @"NetworkInterfaces.plist");
  }
  xpc_object_t v5 = CFStringCreateWithFormat( alloc,  0LL,  @"%s%@/%@",  "",  @"/Library/Preferences/SystemConfiguration",  theString);
  if (CFStringHasSuffix(theString, @".xml"))
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(alloc, 0LL, v5);
    v14.location = CFStringGetLength(MutableCopy) - 4;
    v14.length = 4LL;
    CFStringReplace(MutableCopy, v14, @".plist");
    CFRelease(v5);
    xpc_object_t v5 = MutableCopy;
  }

BOOL __SCPreferencesIsEmpty(uint64_t a1)
{
  if (!a1) {
    __SCPreferencesIsEmpty_cold_1();
  }
  __SCPreferencesAccess(a1);
  uint64_t v2 = *(const __CFDictionary **)(a1 + 280);
  return !v2 || CFDictionaryGetCount(v2) == 0;
}

CFDataRef __SCPreferencesPrefsSize(uint64_t a1)
{
  uint64_t result = *(const __CFData **)(a1 + 144);
  if (result) {
    return (const __CFData *)*((void *)CFDataGetBytePtr(result) + 4);
  }
  return result;
}

uint64_t __SCPreferencesUsingDefaultPrefs(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v1 = *(const char **)(a1 + 104);
  if (v1)
  {
    uint64_t v2 = __SCPreferencesPath(0LL, 0LL);
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v1 = (const char *)(strcmp(v1, (const char *)v2) == 0);
      CFAllocatorDeallocate(0LL, v3);
    }

    else
    {
      return 0LL;
    }
  }

  return (uint64_t)v1;
}

CFDataRef SCPreferencesGetSignature(SCPreferencesRef prefs)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    return (CFDataRef)*((void *)prefs + 18);
  }

  else
  {
    _SCErrorSet(3001);
    return 0LL;
  }

CFStringRef _SCPNotificationKey(const __CFAllocator *a1, const __CFString *a2, int a3)
{
  uint64_t v4 = off_189B63430[a3 - 1];
  xpc_object_t v5 = __SCPreferencesPath(a1, a2);
  if (!v5) {
    return 0LL;
  }
  xpc_object_t v6 = v5;
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(a1, (const char *)v5, 0x8000100u, (CFAllocatorRef)*MEMORY[0x189604DC8]);
  CFStringRef v8 = CFStringCreateWithFormat(a1, 0LL, @"%@%@:%@", @"Prefs:", v4, v7);
  CFRelease(v7);
  CFAllocatorDeallocate(0LL, v6);
  return v8;
}

CFStringRef SCDynamicStoreKeyCreatePreferences(const __CFAllocator *a1, const __CFString *a2, int a3)
{
  return _SCPNotificationKey(a1, a2, a3);
}

os_log_t __log_SCPreferences()
{
  os_log_t result = (os_log_t)__log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)result;
  }

  return result;
}

uint64_t __SCPreferencesCreate_helper(uint64_t a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cf[0] = 0LL;
  int v15 = 0;
  pid_t valuePtr = getpid();
  uint64_t v2 = (mach_port_t *)(a1 + 320);
  if (!_SCHelperOpen(*(const __CFData **)(a1 + 312), (mach_port_name_t *)(a1 + 320))) {
    goto LABEL_19;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  uint64_t v4 = Mutable;
  xpc_object_t v5 = *(const void **)(a1 + 88);
  if (v5) {
    CFDictionarySetValue(Mutable, @"prefsID", v5);
  }
  xpc_object_t v6 = *(const void **)(a1 + 96);
  if (v6) {
    CFDictionarySetValue(v4, @"options", v6);
  }
  CFDictionarySetValue(v4, @"name", *(const void **)(a1 + 80));
  CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v4, @"PID", v7);
  CFRelease(v7);
  CFStringRef v8 = getprogname();
  CFStringRef v9 = CFStringCreateWithCString(0LL, v8, 0x8000100u);
  CFDictionarySetValue(v4, @"PROC_NAME", v9);
  CFRelease(v9);
  BOOL v10 = _SCSerialize(v4, (CFDataRef *)cf, 0LL, 0LL);
  CFRelease(v4);
  if (!cf[0] || !v10) {
    goto LABEL_19;
  }
  int v11 = _SCHelperExec(*v2, 100, (const __CFData *)cf[0], &v15, 0LL);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v11)
  {
    int v12 = v15;
    if (!v15) {
      return 1LL;
    }
  }

  else
  {
LABEL_19:
    if (*v2) {
      _SCHelperClose(v2);
    }
    int v12 = 1003;
    int v15 = 1003;
  }

  _SCErrorSet(v12);
  return 0LL;
}

void __SCPreferencesAccess(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  if (*(_BYTE *)(a1 + 304)) {
    return;
  }
  uint64_t v3 = v2;
  uint64_t v4 = &unk_18C46C000;
  if (!access(*(const char **)(a1 + 104), 4))
  {
    int v16 = open(*(const char **)(a1 + 104), 0, 420LL);
    if (v16 != -1)
    {
      int v17 = v16;
      if (fstat(v16, &v59) != -1)
      {
        char v18 = 0;
        goto LABEL_46;
      }

      uint64_t v21 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v21 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v21;
      }

      uint64_t v22 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v21, (os_log_type_t)v22))
      {
        _os_log_pack_size();
        uint64_t v23 = (char *)&error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v24 = _os_log_pack_fill();
        uint64_t v25 = __error();
        vm_size_t v26 = strerror(*v25);
        *(_DWORD *)uint64_t v24 = 136315138;
        *(void *)(v24 + 4) = v26;
        __SC_log_send(5, (uint64_t)v21, v22, v23);
      }

      char v18 = 0;
LABEL_45:
      memset(&v59, 0, sizeof(v59));
LABEL_46:
      unsigned int v33 = *(const void **)(a1 + 144);
      if (v33) {
        CFRelease(v33);
      }
      *(void *)(a1 + 144) = __SCPSignatureFromStatbuf(&v59.st_dev);
      if (v59.st_size < 1) {
        goto LABEL_70;
      }
      CFErrorRef error = 0LL;
      CFMutableDictionaryRef Mutable = CFDataCreateMutable(v3, v59.st_size);
      CFDataSetLength(Mutable, v59.st_size);
      BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
      ssize_t v36 = read(v17, BytePtr, v59.st_size);
      if (v36 == v59.st_size)
      {
        uint64_t v37 = (const __CFDictionary *)CFPropertyListCreateWithData(v3, Mutable, 0LL, 0LL, &error);
        CFRelease(Mutable);
        if (v37)
        {
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (CFGetTypeID(v37) == TypeID)
          {
            *(void *)(a1 + 280) = CFDictionaryCreateMutableCopy(v3, 0LL, v37);
            CFRelease(v37);
            processHardwareDependency(a1);
            goto LABEL_70;
          }

          uint64_t v48 = (os_log_s *)__log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            uint64_t v48 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v48;
          }

          uint64_t v49 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v48, (os_log_type_t)v49))
          {
            _os_log_pack_size();
            uint64_t v50 = (char *)&error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(6, (uint64_t)v48, v49, v50);
            uint64_t v4 = &unk_18C46C000;
          }

          CFErrorRef v42 = v37;
        }

        else
        {
          if (!error) {
            goto LABEL_70;
          }
          uint64_t v43 = (os_log_s *)__log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            uint64_t v43 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v43;
          }

          uint64_t v44 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v43, (os_log_type_t)v44))
          {
            _os_log_pack_size();
            int v45 = (char *)&error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v46 = _os_log_pack_fill();
            CFErrorRef v47 = error;
            *(_DWORD *)uint64_t v46 = 138412290;
            *(void *)(v46 + 4) = v47;
            __SC_log_send(5, (uint64_t)v43, v44, v45);
          }

          CFErrorRef v42 = error;
        }
      }

      else
      {
        uint64_t v39 = (os_log_s *)__log_SCPreferences_log;
        if (!__log_SCPreferences_log)
        {
          uint64_t v39 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
          __log_SCPreferences_log = (uint64_t)v39;
        }

        uint64_t v40 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v39, (os_log_type_t)v40))
        {
          _os_log_pack_size();
          uint64_t v41 = (char *)&error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v39, v40, v41);
          uint64_t v4 = &unk_18C46C000;
        }

        CFErrorRef v42 = Mutable;
      }

      CFRelease(v42);
LABEL_70:
      if ((v18 & 1) == 0) {
        close(v17);
      }
      goto LABEL_72;
    }
  }

  int v5 = *__error();
  if (v5 != 13)
  {
    if (v5 == 2) {
      goto LABEL_44;
    }
    if (v5 != 1) {
      goto LABEL_28;
    }
  }

  if (!*(void *)(a1 + 312))
  {
LABEL_28:
    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v20 = __error();
    log_open_error(v19, *v20);
    goto LABEL_44;
  }

  *(void *)&v59.st_dev = 0LL;
  int v58 = 0;
  CFErrorRef error = 0LL;
  xpc_object_t v6 = (mach_port_t *)(a1 + 320);
  mach_port_t v7 = *(_DWORD *)(a1 + 320);
  if (!v7)
  {
    mach_port_t v7 = *v6;
  }

  int v8 = v58;
  if (v58)
  {
LABEL_39:
    _SCErrorSet(v8);
LABEL_40:
    int v27 = (os_log_s *)__log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v27 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v27;
    }

    uint64_t v28 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v27, (os_log_type_t)v28))
    {
      _os_log_pack_size();
      uint64_t v29 = (char *)&error - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      int v31 = SCError();
      uint64_t v32 = SCErrorString(v31);
      *(_DWORD *)uint64_t v30 = 136315138;
      *(void *)(v30 + 4) = v32;
      __SC_log_send(5, (uint64_t)v27, v28, v29);
      int v17 = -1;
      char v18 = 1;
      goto LABEL_45;
    }

void log_open_error(uint64_t a1, int a2)
{
  v18[1] = *MEMORY[0x1895F89C0];
  if (log_open_error_once != -1) {
    dispatch_once(&log_open_error_once, &__block_literal_global_39);
  }
  getpid();
  int v3 = sandbox_check();
  if (v3 == 1)
  {
    int v12 = (os_log_s *)__log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v12 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v12;
    }

    uint64_t v13 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v12, (os_log_type_t)v13)) {
      return;
    }
    _os_log_pack_size();
    CFRange v14 = (char *)v18 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
LABEL_17:
    uint64_t v9 = (uint64_t)v12;
    uint64_t v10 = v13;
    CFTypeID v11 = v14;
    goto LABEL_18;
  }

  if (v3)
  {
    int v12 = (os_log_s *)__log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v12 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v12;
    }

    uint64_t v13 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v12, (os_log_type_t)v13)) {
      return;
    }
    _os_log_pack_size();
    CFRange v14 = (char *)v18 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    int v16 = __error();
    int v17 = strerror(*v16);
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v15 + 4) = v17;
    goto LABEL_17;
  }

  uint64_t v4 = (os_log_s *)__log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v4;
  }

  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    _os_log_pack_size();
    xpc_object_t v6 = (char *)v18 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    int v8 = strerror(a2);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v8;
    uint64_t v9 = (uint64_t)v4;
    uint64_t v10 = v5;
    CFTypeID v11 = v6;
LABEL_18:
    __SC_log_send(5, v9, v10, v11);
  }

void processHardwareDependency(uint64_t a1)
{
  value[1] = *(void **)MEMORY[0x1895F89C0];
  value[0] = 0LL;
  if (__SCPreferencesUsingDefaultPrefs(a1))
  {
    CFAllocatorRef v2 = *(const __CFDictionary **)(a1 + 96);
    if (!v2
      || !CFDictionaryGetValueIfPresent(v2, @"allow-model-conflict", (const void **)value)
      || (v3 = value[0], CFTypeID TypeID = CFBooleanGetTypeID(), !v3)
      || CFGetTypeID(v3) != TypeID
      || !CFBooleanGetValue((CFBooleanRef)value[0]))
    {
      uint64_t v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 280), @"Model");
      xpc_object_t v6 = (const void *)_SC_hw_model(0);
      if (v5)
      {
        uint64_t v7 = v6;
        if (v5 != v6 && (!v6 || !CFEqual(v5, v6)))
        {
          int v8 = (os_log_s *)__log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            int v8 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v8;
          }

          uint64_t v9 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
          {
            _os_log_pack_size();
            uint64_t v10 = (char *)value - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v11 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v11 = 138412546;
            *(void *)(v11 + 4) = v5;
            *(_WORD *)(v11 + 12) = 2112;
            *(void *)(v11 + 14) = v7;
            __SC_log_send(5, (uint64_t)v8, v9, v10);
          }

          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 280));
          *(_BYTE *)(a1 + 305) = 1;
        }
      }
    }
  }

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  v10[1] = *MEMORY[0x1895F89C0];
  int v3 = (const __SCPreferences *)__SCPreferencesCreate(allocator, name, prefsID, 0LL, 0LL);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)__log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v4;
    }

    uint64_t v5 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v7 = (char *)v10 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 138412290;
      *(void *)(v8 + 4) = v3;
      __SC_log_send(7, (uint64_t)v4, v5, v7);
    }
  }

  return v3;
}

uint64_t __SCPreferencesCreate( const __CFAllocator *a1, const __CFString *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  v26[1] = *MEMORY[0x1895F89C0];
  if (__SCPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_48);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = Instance;
  if (Instance)
  {
    pthread_mutex_init((pthread_mutex_t *)(Instance + 16), 0LL);
    *(_DWORD *)(v11 + 116) = -1;
    *(_BYTE *)(v11 + 306) = geteuid() == 0;
    *(void *)(v11 + 80) = CFStringCreateCopy(a1, a2);
    if (a3) {
      *(void *)(v11 + 88) = CFStringCreateCopy(a1, a3);
    }
    if (a4) {
      *(void *)(v11 + 312) = CFRetain(a4);
    }
    if (a5) {
      *(void *)(v11 + 96) = CFDictionaryCreateCopy(a1, a5);
    }
    int v12 = __SCPreferencesPath(a1, a3);
    *(void *)(v11 + 104) = v12;
    if (v12)
    {
      int v13 = access((const char *)v12, 4);
      if (!v13)
      {
LABEL_18:
        _SCErrorSet(v13);
        return v11;
      }

      int v14 = *__error();
      switch(v14)
      {
        case 13:
          goto LABEL_29;
        case 2:
          int v13 = 3003;
          goto LABEL_18;
        case 1:
LABEL_29:
          if (*(void *)(v11 + 312))
          {
            int v13 = 0;
            goto LABEL_18;
          }

          uint64_t v24 = *(void *)(v11 + 104);
          uint64_t v25 = __error();
          log_open_error(v24, *v25);
          int v22 = 1003;
LABEL_24:
          CFRelease((CFTypeRef)v11);
          _SCErrorSet(v22);
          return 0LL;
      }

      uint64_t v15 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v15 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v15;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v15, (os_log_type_t)v16))
      {
        uint64_t v17 = _os_log_pack_size();
        char v18 = (char *)v26 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        uint64_t v20 = __error();
        uint64_t v21 = strerror(*v20);
        *(_DWORD *)uint64_t v19 = 136315138;
        *(void *)(v19 + 4) = v21;
        __SC_log_send(5, (uint64_t)v15, v16, v18);
        int v22 = 1001;
        goto LABEL_24;
      }
    }

    int v22 = 1001;
    goto LABEL_24;
  }

  return v11;
}

SCPreferencesRef SCPreferencesCreateWithAuthorization( CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return (SCPreferencesRef)SCPreferencesCreateWithOptions(allocator, name, prefsID, @"UseEntitlement", 0LL);
}

uint64_t SCPreferencesCreateWithOptions( const __CFAllocator *a1, const __CFString *a2, const __CFString *a3, __CFString *a4, const __CFDictionary *a5)
{
  v30[1] = *(CFDataRef *)MEMORY[0x1895F89C0];
  v30[0] = 0LL;
  if (a5 && (CFTypeID TypeID = CFDictionaryGetTypeID(), CFGetTypeID(a5) != TypeID))
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  else
  {
    if (a4
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]),
          uint64_t ApplicationBundleID = (const void *)_SC_getApplicationBundleID(),
          CFDictionaryAddValue(Mutable, @"CallerInfo", ApplicationBundleID),
          Mutable))
    {
      _SCSerialize(Mutable, v30, 0LL, 0LL);
      CFRelease(Mutable);
      CFDataRef v13 = v30[0];
    }

    else
    {
      CFDataRef v13 = 0LL;
    }

    uint64_t v14 = __SCPreferencesCreate(a1, a2, a3, v13, a5);
    if (v14)
    {
      if (a5) {
        uint64_t v15 = "options";
      }
      else {
        uint64_t v15 = "";
      }
      uint64_t v16 = "authorization";
      if (a4 == @"UseEntitlement") {
        BOOL v17 = "entitlement" != "";
      }
      else {
        BOOL v17 = "authorization" != "";
      }
      if (a4 == @"UseEntitlement") {
        uint64_t v16 = "entitlement";
      }
      if (a4) {
        BOOL v18 = v17;
      }
      else {
        BOOL v18 = 0;
      }
      if (a4) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = "";
      }
      uint64_t v20 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v20 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v20;
      }

      uint64_t v21 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v20, (os_log_type_t)v21))
      {
        uint64_t v22 = _os_log_pack_size();
        v29[1] = v29;
        uint64_t v23 = (char *)v29 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v24 = _os_log_pack_fill();
        if (a5) {
          BOOL v25 = "options" == "";
        }
        else {
          BOOL v25 = 1;
        }
        int v26 = !v25;
        *(_DWORD *)uint64_t v24 = 136315906;
        *(void *)(v24 + 4) = v15;
        *(_WORD *)(v24 + 12) = 2080;
        if ((v26 & v18) != 0) {
          int v27 = " + ";
        }
        else {
          int v27 = "";
        }
        *(void *)(v24 + 14) = v27;
        *(_WORD *)(v24 + 22) = 2080;
        *(void *)(v24 + 24) = v19;
        *(_WORD *)(v24 + 32) = 2112;
        *(void *)(v24 + 34) = v14;
        __SC_log_send(7, (uint64_t)v20, v21, v23);
      }
    }

    if (v30[0]) {
      CFRelease(v30[0]);
    }
  }

  return v14;
}

void *SCPreferencesCreateCompanion(uint64_t a1, const __CFString *a2)
{
  value[1] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v4 = CFGetAllocator((CFTypeRef)a1);
  value[0] = 0LL;
  if (a2)
  {
    v32.length = CFStringGetLength(a2);
    v32.location = 0LL;
    if (CFStringFindWithOptions(a2, @"/", v32, 4uLL, 0LL)) {
      goto LABEL_13;
    }
  }

  else
  {
    a2 = @"preferences.plist";
  }

  uint64_t v5 = *(const __CFString **)(a1 + 88);
  if (!v5)
  {
    if (!CFEqual(a2, @"preferences.plist"))
    {
      uint64_t v11 = v4;
      goto LABEL_15;
    }

CFTypeID SCPreferencesGetTypeID(void)
{
  if (__SCPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_48);
  }
  return __kSCPreferencesTypeID;
}

CFStringRef __SCPreferencesAddSessionKeys(CFStringRef result)
{
  CFStringRef v1 = result;
  if (!result[5].length)
  {
    CFRange result = _SCPNotificationKey(0LL, (const __CFString *)result[2].length, 2);
    v1[5].length = (uint64_t)result;
  }

  if (!v1[6].isa)
  {
    CFRange result = _SCPNotificationKey(0LL, (const __CFString *)v1[2].length, 3);
    v1[6].isa = (void *)result;
  }

  return result;
}

BOOL __SCPreferencesAddSession(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  context.version = 0LL;
  context.info = (void *)a1;
  context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
  context.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x189602A10];
  if (*(_DWORD *)(a1 + 168))
  {
LABEL_2:
    ++*(_DWORD *)(a1 + 168);
    return 1LL;
  }

  SCDynamicStoreRef v4 = SCDynamicStoreCreate(v2, *(CFStringRef *)(a1 + 80), (SCDynamicStoreCallBack)prefsNotify, &context);
  *(void *)(a1 + 152) = v4;
  uint64_t v5 = (os_log_s *)__log_SCPreferences_log;
  if (v4)
  {
    if (!__log_SCPreferences_log)
    {
      uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      CFStringRef v8 = (char *)&context - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v5, v6, v8);
    }

    goto LABEL_2;
  }

  if (!__log_SCPreferences_log)
  {
    uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v5;
  }

  uint64_t v9 = _SC_syslog_os_log_mapping(3);
  BOOL result = __SC_log_enabled(3, v5, (os_log_type_t)v9);
  if (result)
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v11 = (char *)&context - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    int v13 = SCError();
    uint64_t v14 = SCErrorString(v13);
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v12 + 4) = v14;
    __SC_log_send(3, (uint64_t)v5, v9, v11);
    return 0LL;
  }

  return result;
}

void prefsNotify(int a1, CFArrayRef theArray, uint64_t a3)
{
  v22[1] = *MEMORY[0x1895F89C0];
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0LL;
      LODWORD(v8) = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
        if (CFEqual(ValueAtIndex, *(CFTypeRef *)(a3 + 184)))
        {
          uint64_t v8 = v8 | 1;
        }

        else if (CFEqual(ValueAtIndex, *(CFTypeRef *)(a3 + 192)))
        {
          uint64_t v8 = v8 | 2;
        }

        else
        {
          uint64_t v8 = v8;
        }

        ++v7;
      }

      while (v6 != v7);
      if ((_DWORD)v8)
      {
        pthread_mutex_lock((pthread_mutex_t *)(a3 + 16));
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 216);
        uint64_t v12 = *(void *)(a3 + 232);
        uint64_t v11 = *(uint64_t (**)(void))(a3 + 240);
        if (v11)
        {
          uint64_t v12 = v11(*(void *)(a3 + 232));
          int v13 = *(void (**)(uint64_t))(a3 + 248);
        }

        else
        {
          int v13 = 0LL;
        }

        pthread_mutex_unlock((pthread_mutex_t *)(a3 + 16));
        if (v10)
        {
          uint64_t v14 = (os_log_s *)__log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            uint64_t v14 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v14;
          }

          uint64_t v15 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v14, (os_log_type_t)v15))
          {
            uint64_t v16 = _os_log_pack_size();
            uint64_t v17 = (char *)v22 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v18 = _os_log_pack_fill();
            uint64_t v19 = "commit";
            uint64_t v20 = "";
            if ((v8 & 1) == 0) {
              uint64_t v19 = "";
            }
            uint64_t v21 = ", ";
            if ((~(_DWORD)v8 & 3) != 0) {
              uint64_t v21 = "";
            }
            *(_DWORD *)uint64_t v18 = 136315650;
            *(void *)(v18 + 4) = v19;
            *(_WORD *)(v18 + 12) = 2080;
            *(void *)(v18 + 14) = v21;
            if ((v8 & 2) != 0) {
              uint64_t v20 = "apply";
            }
            *(_WORD *)(v18 + 22) = 2080;
            *(void *)(v18 + 24) = v20;
            __SC_log_send(7, (uint64_t)v14, v15, v17);
          }

          v10(a3, v8, v12);
        }

        if (v13) {
          v13(v12);
        }
      }
    }
  }

void __SCPreferencesRemoveSession(uint64_t a1)
{
  v9[1] = *MEMORY[0x1895F89C0];
  int v1 = *(_DWORD *)(a1 + 168);
  BOOL v2 = __OFSUB__(v1, 1);
  int v3 = v1 - 1;
  if (v3 < 0 == v2)
  {
    *(_DWORD *)(a1 + 168) = v3;
    if (!v3)
    {
      CFRelease(*(CFTypeRef *)(a1 + 152));
      *(void *)(a1 + 152) = 0LL;
      uint64_t v5 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v5;
      }

      uint64_t v6 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
      {
        uint64_t v7 = _os_log_pack_size();
        uint64_t v8 = (char *)v9 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(7, (uint64_t)v5, v6, v8);
      }
    }
  }

void __SCPreferencesUpdateLockedState(uint64_t a1, char a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (__SCPreferencesUpdateLockedState_once != -1) {
    dispatch_once(&__SCPreferencesUpdateLockedState_once, &__block_literal_global_4);
  }
  *(_BYTE *)(a1 + 112) = a2;
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ____SCPreferencesUpdateLockedState_block_invoke_32;
  block[3] = &__block_descriptor_tmp_33;
  char v5 = a2;
  block[4] = a1;
  dispatch_sync((dispatch_queue_t)__SCPreferencesUpdateLockedState_lockedQueue, block);
}

void appendLockedPreferences(int a1, uint64_t a2, __CFString *theString)
{
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v6 = "";
  if (Length > 0) {
    uint64_t v6 = "\n";
  }
  CFStringAppendFormat(theString, 0LL, @"%s%@", v6, a2);
}

Boolean SCPreferencesSetCallback( SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs)
    {
LABEL_11:
      _SCErrorSet(3001);
      return 0;
    }
  }

  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_48);
    if (!prefs) {
      goto LABEL_11;
    }
  }

  uint64_t v6 = __kSCPreferencesTypeID;
  if (CFGetTypeID(prefs) != v6) {
    goto LABEL_11;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)prefs + 16));
  uint64_t v7 = (void (*)(void))*((void *)prefs + 31);
  if (v7) {
    v7(*((void *)prefs + 29));
  }
  *(_OWORD *)((char *)prefs + 232) = 0u;
  *((void *)prefs + 27) = callout;
  *(_OWORD *)((char *)prefs + 248) = 0u;
  if (context)
  {
    __int128 v8 = *(_OWORD *)&context->version;
    __int128 v9 = *(_OWORD *)&context->retain;
    *((void *)prefs + 32) = context->copyDescription;
    *((_OWORD *)prefs + 14) = v8;
    *((_OWORD *)prefs + 15) = v9;
    retain = context->retain;
    if (retain) {
      *((void *)prefs + 29) = ((uint64_t (*)(void *))retain)(context->info);
    }
  }

  pthread_mutex_unlock((pthread_mutex_t *)((char *)prefs + 16));
  return 1;
}

Boolean SCPreferencesScheduleWithRunLoop(SCPreferencesRef prefs, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs) {
      goto LABEL_8;
    }
  }

  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_48);
    if (!prefs) {
      goto LABEL_8;
    }
  }

  uint64_t v6 = __kSCPreferencesTypeID;
  CFTypeID v7 = CFGetTypeID(prefs);
  if (runLoopMode && runLoop && v7 == v6) {
    return __SCPreferencesScheduleWithRunLoop((uint64_t)prefs, runLoop, runLoopMode, 0LL);
  }
LABEL_8:
  _SCErrorSet(1002);
  return 0;
}

uint64_t __SCPreferencesScheduleWithRunLoop( uint64_t a1, __CFRunLoop *a2, const __CFString *a3, dispatch_queue_s *a4)
{
  v25[1] = *MEMORY[0x1895F89C0];
  __int128 v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (*(void *)(a1 + 272)) {
    goto LABEL_2;
  }
  if (!a4)
  {
    if (*(_BYTE *)(a1 + 200)) {
      goto LABEL_9;
    }
LABEL_13:
    if (!*(void *)(a1 + 152))
    {
      if (!__SCPreferencesAddSession(a1)) {
        goto LABEL_3;
      }
      if (!*(void *)(a1 + 152)) {
        __SCPreferencesScheduleWithRunLoop_cold_1();
      }
    }

    __SCPreferencesAddSessionKeys((CFStringRef)a1);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    CFArrayAppendValue(Mutable, *(const void **)(a1 + 184));
    CFArrayAppendValue(Mutable, *(const void **)(a1 + 192));
    int v12 = SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), Mutable, 0LL);
    CFRelease(Mutable);
    if (v12)
    {
      if (!a2) {
        goto LABEL_20;
      }
      CFRunLoopSourceRef RunLoopSource = SCDynamicStoreCreateRunLoopSource(0LL, *(SCDynamicStoreRef *)(a1 + 152), 0LL);
      *(void *)(a1 + 208) = RunLoopSource;
      if (RunLoopSource)
      {
        *(void *)(a1 + 264) = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
LABEL_20:
        uint64_t v14 = (os_log_s *)__log_SCPreferences_log;
        if (!__log_SCPreferences_log)
        {
          uint64_t v14 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
          __log_SCPreferences_log = (uint64_t)v14;
        }

        uint64_t v15 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v14, (os_log_type_t)v15))
        {
          uint64_t v16 = _os_log_pack_size();
          uint64_t v17 = (char *)v25 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(7, (uint64_t)v14, v15, v17);
        }

        *(_BYTE *)(a1 + 200) = 1;
        if (a4)
        {
          if (!SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), a4))
          {
            *(_BYTE *)(a1 + 200) = 0;
            SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), 0LL, 0LL);
            __SCPreferencesRemoveSession(a1);
            goto LABEL_3;
          }

          *(void *)(a1 + 272) = a4;
          dispatch_retain(a4);
LABEL_12:
          uint64_t v9 = 1LL;
          goto LABEL_4;
        }

Boolean SCPreferencesUnscheduleFromRunLoop( SCPreferencesRef prefs, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs) {
      goto LABEL_8;
    }
  }

  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_48);
    if (!prefs) {
      goto LABEL_8;
    }
  }

  uint64_t v6 = __kSCPreferencesTypeID;
  CFTypeID v7 = CFGetTypeID(prefs);
  if (runLoopMode && runLoop && v7 == v6) {
    return __SCPreferencesUnscheduleFromRunLoop((uint64_t)prefs, runLoop, runLoopMode);
  }
LABEL_8:
  _SCErrorSet(1002);
  return 0;
}

uint64_t __SCPreferencesUnscheduleFromRunLoop(uint64_t a1, void *a2, const __CFString *a3)
{
  v15[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (!a2)
  {
    if (*(void *)(a1 + 272))
    {
      CFTypeID v7 = (void *)(a1 + 272);
      SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), 0LL);
      dispatch_release(*(dispatch_object_t *)(a1 + 272));
LABEL_10:
      *CFTypeID v7 = 0LL;
      __int128 v8 = (os_log_s *)__log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        __int128 v8 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v8;
      }

      uint64_t v9 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
      {
        uint64_t v10 = _os_log_pack_size();
        uint64_t v11 = (char *)v15 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(7, (uint64_t)v8, v9, v11);
      }

      *(_BYTE *)(a1 + 200) = 0;
      SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), 0LL, 0LL);
      CFArrayRef v12 = SCDynamicStoreCopyNotifiedKeys(*(SCDynamicStoreRef *)(a1 + 152));
      if (v12) {
        CFRelease(v12);
      }
      __SCPreferencesRemoveSession(a1);
      goto LABEL_17;
    }

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs)
    {
LABEL_8:
      _SCErrorSet(3001);
      return 0;
    }
  }

  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_48);
    if (!prefs) {
      goto LABEL_8;
    }
  }

  uint64_t v4 = __kSCPreferencesTypeID;
  if (CFGetTypeID(prefs) != v4) {
    goto LABEL_8;
  }
  if (queue) {
    return __SCPreferencesScheduleWithRunLoop((uint64_t)prefs, 0LL, 0LL, queue);
  }
  else {
    return __SCPreferencesUnscheduleFromRunLoop((uint64_t)prefs, 0LL, 0LL);
  }
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs)
    {
LABEL_19:
      _SCErrorSet(3001);
      return;
    }
  }

  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_48);
    if (!prefs) {
      goto LABEL_19;
    }
  }

  uint64_t v2 = __kSCPreferencesTypeID;
  if (CFGetTypeID(prefs) != v2) {
    goto LABEL_19;
  }
  int v3 = (os_log_s *)__log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    int v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v3;
  }

  uint64_t v4 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v3, (os_log_type_t)v4))
  {
    uint64_t v5 = _os_log_pack_size();
    uint64_t v6 = (char *)&v12 - ((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    uint64_t v8 = *((void *)prefs + 13);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v8;
    __SC_log_send(7, (uint64_t)v3, v4, v6);
  }

  if (*((void *)prefs + 39))
  {
    HIDWORD(v12) = 0;
    mach_port_t v9 = *((_DWORD *)prefs + 80);
    if (v9)
    {
    }
  }

  uint64_t v10 = (const void *)*((void *)prefs + 35);
  if (v10)
  {
    CFRelease(v10);
    *((void *)prefs + 35) = 0LL;
  }

  uint64_t v11 = (const void *)*((void *)prefs + 18);
  if (v11)
  {
    CFRelease(v11);
    *((void *)prefs + 18) = 0LL;
  }

  *((_WORD *)prefs + 152) = 0;
}

void __SCPreferencesHandleInternalStatus(int *a1)
{
  v6[1] = *MEMORY[0x1895F89C0];
  int v2 = *a1;
  if (*a1 == 10003)
  {
    int v3 = (os_log_s *)__log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if (v2 == 10002)
  {
    int v3 = (os_log_s *)__log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if (v2 != 10001) {
    return;
  }
  int v3 = (os_log_s *)__log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    int v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v3;
  }

  uint64_t v4 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
  {
LABEL_15:
    _os_log_pack_size();
    uint64_t v5 = (char *)v6 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v3, v4, v5);
  }

LABEL_16:
  *a1 = 1003;
}

    uint64_t v19 = 0;
    if (!a6) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }

  if (v13)
  {
    uint64_t v27 = 0;
LABEL_26:
    uint64_t v28 = 0;
    goto LABEL_56;
  }

  CFRelease(v12);
  uint64_t v28 = 0;
LABEL_59:
  LODWORD(v11) = v28;
LABEL_60:
  _SCErrorSet((int)v11);
  return 0LL;
}

  Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)cf);
  do
  {
    if (!Interface) {
      return (const __CFString *)*((void *)cf + 6);
    }
    uint64_t v10 = Interface;
    InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
    if (CFEqual(InterfaceType, @"VPN")) {
      break;
    }
    uint64_t v12 = SCNetworkInterfaceGetInterface(Interface);
    if (!v12) {
      break;
    }
    Interface = v12;
  }

  while (!CFEqual(v12, &__kSCNetworkInterfaceIPv4));
  uint64_t v13 = 0;
  while (1)
  {
    if (!*((void *)cf + 6))
    {
      uint64_t v17 = 0LL;
      goto LABEL_40;
    }

    if (v13 == 2)
    {
      uint64_t v16 = __SCNetworkInterfaceCopyOldNonLocalizedDisplayName(v10, (uint64_t)@"Y");
      goto LABEL_30;
    }

    if (v13 != 1) {
      break;
    }
    uint64_t v16 = __SCNetworkInterfaceCopyOldLocalizedDisplayName(v10, (uint64_t)@"Y");
LABEL_30:
    uint64_t v15 = v16;
    if (v16) {
      goto LABEL_31;
    }
LABEL_34:
    if (++v13 == 5)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = *((void *)cf + 6) == 0LL;
      goto LABEL_41;
    }
  }

  if (v13) {
    goto LABEL_34;
  }
  NonLocalizedDisplayName = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)v10);
  if (!NonLocalizedDisplayName) {
    goto LABEL_34;
  }
  uint64_t v15 = NonLocalizedDisplayName;
  CFRetain(NonLocalizedDisplayName);
LABEL_31:
  if (CFEqual(Value, v15))
  {
    uint64_t v17 = 0LL;
    goto LABEL_39;
  }

  if (!CFStringHasPrefix(Value, v15))
  {
    CFRelease(v15);
    goto LABEL_34;
  }

  CFIndex Length = CFStringGetLength(v15);
  v22.length = CFStringGetLength(Value) - Length;
  v22.location = Length;
  uint64_t v17 = CFStringCreateWithSubstring(0LL, Value, v22);
LABEL_39:
  CFRelease(v15);
  CFRelease(*((CFTypeRef *)cf + 6));
  *((void *)cf + 6) = 0LL;
LABEL_40:
  uint64_t v18 = 1;
LABEL_41:
  if (a2 && v18 && (LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(v10)) != 0LL)
  {
    if (v17)
    {
      *((void *)cf + 6) = CFStringCreateWithFormat(0LL, 0LL, @"%@%@", LocalizedDisplayName, v17);
      goto LABEL_47;
    }

    *((void *)cf + 6) = CFRetain(LocalizedDisplayName);
  }

  else if (v17)
  {
LABEL_47:
    CFRelease(v17);
  }

  return (const __CFString *)*((void *)cf + 6);
}

    CFMutableDictionaryRef Mutable = 0LL;
    uint64_t v24 = 0LL;
    v146 = 0LL;
    v147 = 0LL;
    Companion = 0LL;
    v149 = 0LL;
    v150 = 0LL;
    v151 = 0LL;
    v148 = 0LL;
LABEL_17:
    ServiceMappingUsingBSDNameMapping = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v28 = 0LL;
LABEL_18:
    uint64_t v29 = 0LL;
LABEL_19:
    BSDNameMapping = 0LL;
    goto LABEL_20;
  }

  uint64_t v6 = CFStringCreateWithCString(0LL, (const char *)v159, 0x8000100u);
  uint64_t v7 = CFStringCreateWithCString(0LL, (const char *)v160, 0x8000100u);
  v149 = v6;
  uint64_t v8 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v6);
  v148 = v7;
  mach_port_t v9 = __SCPreferencesCreateForMigration(@"System Migration", v7);
  uint64_t v10 = 0LL;
  CFMutableDictionaryRef Mutable = 0LL;
  v150 = v8;
  v151 = (const __SCPreferences *)v9;
  if (!v8 || (uint64_t v12 = (const __SCPreferences *)v9) == 0LL)
  {
    uint64_t v24 = 0LL;
    v146 = 0LL;
    v147 = 0LL;
    Companion = 0LL;
    ServiceMappingUsingBSDNameMapping = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    BSDNameMapping = 0LL;
    goto LABEL_20;
  }

  uint64_t v13 = __SCNetworkConfigurationMigrateConfigurationFilesPresent(v3, &v153, 0);
  uint64_t v14 = v153;
  if (!v13 && !v153)
  {
    uint64_t v15 = __log_SCNetworkConfiguration();
    uint64_t v16 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v18 = (char *)&v137 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v15, v16, v18);
    }

    goto LABEL_66;
  }

  uint64_t v34 = (const __CFURL *)CFArrayGetValueAtIndex(v153, 0LL);
  if (!CFURLGetFileSystemRepresentation(v34, 1u, v157, 1024LL))
  {
    uint64_t v43 = __log_SCNetworkConfiguration();
    uint64_t v44 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v43, (os_log_type_t)v44)) {
      goto LABEL_65;
    }
    goto LABEL_66;
  }

  uint64_t v34 = (const __CFURL *)CFArrayGetValueAtIndex(v14, 1LL);
  if (!CFURLGetFileSystemRepresentation(v34, 1u, v158, 1024LL))
  {
    uint64_t v43 = __log_SCNetworkConfiguration();
    uint64_t v44 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v43, (os_log_type_t)v44))
    {
LABEL_65:
      int v45 = _os_log_pack_size();
      uint64_t v46 = (char *)&v137 - ((MEMORY[0x1895F8858](v45) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      CFErrorRef v47 = _os_log_pack_fill();
      *(_DWORD *)CFErrorRef v47 = 138412290;
      *(void *)(v47 + 4) = v34;
      __SC_log_send(5, (uint64_t)v43, v44, v46);
    }

              SCPreferencesSetCallback(v8, 0LL, 0LL);
            }
          }

          if (*(_BYTE *)(Instance + 56))
          {
            global_queue = *(dispatch_queue_global_t *)(Instance + 48);
            v30.version = MEMORY[0x1895F87A8];
            v30.info = (void *)0x40000000;
            v30.retain = (const void *(__cdecl *)(const void *))__enable_prefs_observer_block_invoke;
            v30.release = (void (__cdecl *)(const void *))&__block_descriptor_tmp_17;
            v30.copyDescription = (CFStringRef (__cdecl *)(const void *))Instance;
            uint64_t v24 = &v30;
          }

          else
          {
            v30.version = 0LL;
            v30.info = (void *)Instance;
            v30.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
            v30.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
            memset(&v30.copyDescription, 0, 40);
            v30.perform = (void (__cdecl *)(void *))prefs_changed;
            uint64_t v25 = *(__CFRunLoop **)(Instance + 48);
            int v26 = CFRunLoopSourceCreate(0LL, 0LL, &v30);
            CFRunLoopAddSource(v25, v26, (CFRunLoopMode)*MEMORY[0x1896051A8]);
            global_queue = dispatch_get_global_queue(0LL, 0LL);
            v29[0] = MEMORY[0x1895F87A8];
            v29[1] = 0x40000000LL;
            void v29[2] = __enable_prefs_observer_block_invoke_2;
            v29[3] = &__block_descriptor_tmp_18;
            v29[4] = v26;
            v29[5] = v25;
            uint64_t v24 = (CFRunLoopSourceContext *)v29;
          }

          _scprefs_observer_watch(2, *(char **)(Instance + 16), (uint64_t)global_queue, v24);
          return Instance;
        }

        uint64_t v11 = _SC_LOG_DEFAULT();
        uint64_t v12 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
        {
          uint64_t v13 = _os_log_pack_size();
          uint64_t v14 = (char *)&context - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v15 = _os_log_pack_fill();
          uint64_t v16 = SCError();
          uint64_t v17 = SCErrorString(v16);
          *(_DWORD *)uint64_t v15 = 136315138;
          *(void *)(v15 + 4) = v17;
          __SC_log_send(5, (uint64_t)v11, v12, v14);
        }
      }
    }
  }

  return Instance;
}

void __log_open_error_block_invoke()
{
  log_open_error_sb_type = 1;
  if (_SC_isAppleInternal_once_1 != -1) {
    dispatch_once(&_SC_isAppleInternal_once_1, &__block_literal_global_42);
  }
  if (!_SC_isAppleInternal_isInternal_1) {
    log_open_error_sb_type |= *MEMORY[0x1895F8608];
  }
}

void __SCPreferencesDeallocate(uint64_t a1)
{
  v24[1] = *MEMORY[0x1895F89C0];
  int v2 = (os_log_s *)__log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    int v2 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, (os_log_type_t)v3))
  {
    uint64_t v4 = _os_log_pack_size();
    uint64_t v5 = (char *)v24 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)(v6 + 4) = a1;
    __SC_log_send(7, (uint64_t)v2, v3, v5);
  }

  if (*(_BYTE *)(a1 + 112)) {
    __SCPreferencesUpdateLockedState(a1, 0);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 288);
  if (v7)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v7 + 16));
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v7 + 296), *(const void **)(a1 + 88));
    pthread_mutex_unlock((pthread_mutex_t *)(v7 + 16));
    CFRelease(*(CFTypeRef *)(a1 + 288));
  }

  uint64_t v8 = *(const void **)(a1 + 296);
  if (v8) {
    CFRelease(v8);
  }
  mach_port_t v9 = *(const void **)(a1 + 80);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(a1 + 88);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(a1 + 96);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(void **)(a1 + 104);
  if (v12) {
    CFAllocatorDeallocate(0LL, v12);
  }
  int v13 = *(_DWORD *)(a1 + 116);
  if (v13 != -1)
  {
    if (*(void *)(a1 + 120))
    {
      unlink(*(const char **)(a1 + 120));
      int v13 = *(_DWORD *)(a1 + 116);
    }

    close(v13);
  }

  uint64_t v14 = *(void **)(a1 + 120);
  if (v14) {
    CFAllocatorDeallocate(0LL, v14);
  }
  uint64_t v15 = *(const void **)(a1 + 144);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(const void **)(a1 + 160);
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(a1 + 176);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 184);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(a1 + 192);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(void (**)(void))(a1 + 248);
  if (v20) {
    v20(*(void *)(a1 + 232));
  }
  uint64_t v21 = *(const void **)(a1 + 280);
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(a1 + 312);
  if (v22) {
    CFRelease(v22);
  }
  mach_port_t v23 = *(_DWORD *)(a1 + 320);
  if (v23)
  {
    _SCHelperExec(v23, 107, 0LL, 0LL, 0LL);
    _SCHelperClose((mach_port_t *)(a1 + 320));
  }

__CFString *__SCPreferencesCopyDescription(uint64_t a1)
{
  int v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCPreferences %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"name = %@", *(void *)(a1 + 80));
  uint64_t v4 = *(const __CFString **)(a1 + 88);
  if (!v4) {
    uint64_t v4 = @"[default]";
  }
  CFStringAppendFormat(Mutable, 0LL, @", id = %@", v4);
  CFStringAppendFormat(Mutable, 0LL, @", path = %s", *(void *)(a1 + 104));
  if (*(_BYTE *)(a1 + 304)) {
    CFStringAppendFormat(Mutable, 0LL, @", accessed");
  }
  if (*(_BYTE *)(a1 + 305)) {
    CFStringAppendFormat(Mutable, 0LL, @", changed");
  }
  if (*(_BYTE *)(a1 + 112)) {
    CFStringAppendFormat(Mutable, 0LL, @", locked");
  }
  if (*(_DWORD *)(a1 + 320)) {
    CFStringAppendFormat(Mutable, 0LL, @", helper port = 0x%x", *(unsigned int *)(a1 + 320));
  }
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  if (!prefs)
  {
    dev_t st_dev = 3001;
    goto LABEL_5;
  }

  if (*((_BYTE *)prefs + 112))
  {
    dev_t st_dev = 1006;
    goto LABEL_5;
  }

  int v6 = wait;
  if (!*((void *)prefs + 39))
  {
    if (!*((_BYTE *)prefs + 306))
    {
      dev_t st_dev = 1003;
      goto LABEL_5;
    }

    *(void *)&v69.dev_t st_dev = 0LL;
    uint64_t v10 = (const __CFDictionary *)*((void *)prefs + 12);
    if (!v10
      || !CFDictionaryGetValueIfPresent(v10, @"avoid-deadlock", (const void **)&v69)
      || (v11 = *(const void **)&v69.st_dev, CFTypeID TypeID = CFBooleanGetTypeID(), !v11)
      || CFGetTypeID(v11) != TypeID
      || CFBooleanGetValue(*(CFBooleanRef *)&v69.st_dev))
    {
      if (__SCPreferencesUsingDefaultPrefs((uint64_t)prefs)
        && avoid_SCNetworkConfiguration_deadlock_once != -1)
      {
        dispatch_once(&avoid_SCNetworkConfiguration_deadlock_once, &__block_literal_global_5);
      }
    }

    int v13 = (pthread_mutex_t *)((char *)prefs + 16);
    pthread_mutex_lock((pthread_mutex_t *)((char *)prefs + 16));
    __SCPreferencesAddSessionKeys((CFStringRef)prefs);
    if (!*((void *)prefs + 15))
    {
      uint64_t v14 = (const char *)*((void *)prefs + 13);
      size_t v15 = strlen(v14) + 6;
      uint64_t v16 = (char *)MEMORY[0x186E08750](0LL, v15, 0LL);
      *((void *)prefs + 15) = v16;
      snprintf(v16, v15, "%s-lock", v14);
    }

    gettimeofday(&v67, 0LL);
    if (*((void *)prefs + 22))
    {
LABEL_30:
      if (!lockWithSCDynamicStore((uint64_t)prefs, v6))
      {
        int v43 = 1001;
        goto LABEL_83;
      }

LABEL_73:
      unlink(*((const char **)prefs + 15));
      if (v18 >= 1) {
        reportDelay((uint64_t)prefs, &v65, 1);
      }
      int v43 = 3005;
      goto LABEL_83;
    }

    if (v6) {
      int v30 = 545;
    }
    else {
      int v30 = 549;
    }
    *(void *)&__int128 v17 = 136315138LL;
    __int128 v64 = v17;
    while (1)
    {
      int v31 = open(*((const char **)prefs + 15), v30, 420LL);
      *((_DWORD *)prefs + 29) = v31;
      if (v31 != -1) {
        break;
      }
      int v33 = *__error();
      if (v33 <= 34)
      {
        if (v33 != 2) {
          goto LABEL_80;
        }
        uint64_t v34 = (const __CFString *)*((void *)prefs + 11);
        if (v34 && CFStringHasPrefix(v34, @"/")) {
          goto LABEL_81;
        }
        if (createParentDirectory())
        {
          int v33 = *__error();
LABEL_80:
          if (v33 == 30) {
            goto LABEL_31;
          }
LABEL_81:
          int v43 = *__error();
          v53 = __log_SCPreferences();
          uint64_t v54 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v53, (os_log_type_t)v54))
          {
            uint64_t v55 = _os_log_pack_size();
            CFRange v56 = v13;
            v57 = (char *)&v64 - ((MEMORY[0x1895F8858](v55) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v58 = _os_log_pack_fill();
            stat v59 = __error();
            uint64_t v60 = strerror(*v59);
            *(_DWORD *)uint64_t v58 = v64;
            *(void *)(v58 + 4) = v60;
            int v13 = v56;
            __SC_log_send(5, (uint64_t)v53, v54, v57);
          }

    if (mtu_min)
    {
      uint64_t v44 = *mtu_min;
LABEL_75:
      if (v44 <= 1279)
      {
        uint64_t v44 = 1280;
        *mtu_min = 1280;
      }

      if (mtu_cur)
      {
        CFErrorRef v47 = *mtu_cur;
        if (v44 > *mtu_cur)
        {
          *mtu_min = v47;
          uint64_t v44 = v47;
        }
      }

      if ((v12 & 1) == 0 && v44 > *mtu_max) {
        *mtu_min = *mtu_max;
      }
    }

LABEL_83:
          int v61 = *((_DWORD *)prefs + 29);
          if (v61 != -1)
          {
            close(v61);
            *((_DWORD *)prefs + 29) = -1;
          }

          pthread_mutex_unlock(v13);
          dev_t st_dev = v43;
LABEL_5:
          _SCErrorSet(st_dev);
          return 0;
        }

        uint64_t v35 = __log_SCPreferences();
        uint64_t v36 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v35, (os_log_type_t)v36))
        {
          uint64_t v37 = _os_log_pack_size();
          int v38 = v13;
          uint64_t v39 = (char *)&v64 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v40 = _os_log_pack_fill();
          uint64_t v41 = *((void *)prefs + 13);
          *(_DWORD *)uint64_t v40 = v64;
          *(void *)(v40 + 4) = v41;
          CFErrorRef v42 = v39;
          int v13 = v38;
          __SC_log_send(6, (uint64_t)v35, v36, v42);
        }

        goto LABEL_57;
      }

      if (v33 != 45)
      {
        if (v33 == 35)
        {
          int v43 = 3002;
          goto LABEL_83;
        }

        goto LABEL_81;
      }

      if (has_O_EXLOCK((uint64_t)prefs))
      {
        *__error() = 45;
        goto LABEL_81;
      }

      CFStringRef v32 = _SCPNotificationKey(0LL, *((const __CFString **)prefs + 11), 1);
      *((void *)prefs + 22) = v32;
LABEL_58:
      if (v32) {
        goto LABEL_30;
      }
    }

    if (stat(*((const char **)prefs + 15), &v69) != -1
      && fstat(*((_DWORD *)prefs + 29), &v68) != -1
      && v69.st_dev == v68.st_dev
      && v69.st_ino == v68.st_ino)
    {
      pid_t v62 = getpid();
      snprintf(__str, 0x20uLL, "%d\n", v62);
      size_t v63 = strlen(__str);
      write(*((_DWORD *)prefs + 29), __str, v63);
      goto LABEL_31;
    }

    close(*((_DWORD *)prefs + 29));
    *((_DWORD *)prefs + 29) = -1;
LABEL_57:
    CFStringRef v32 = (CFStringRef)*((void *)prefs + 22);
    goto LABEL_58;
  }

  uint64_t v7 = (mach_port_t *)((char *)prefs + 320);
  mach_port_t v8 = *((_DWORD *)prefs + 80);
  if (!v8)
  {
    mach_port_t v8 = *v7;
  }

  v69.dev_t st_dev = 0;
  if (v6) {
    int v9 = 103;
  }
  else {
    int v9 = 102;
  }
  if (!_SCHelperExec(v8, v9, *((const __CFData **)prefs + 18), &v69, 0LL))
  {
    if (*v7) {
      _SCHelperClose((mach_port_t *)prefs + 80);
    }
    dev_t st_dev = 1003;
    v69.dev_t st_dev = 1003;
    goto LABEL_5;
  }

  dev_t st_dev = v69.st_dev;
  if (v69.st_dev) {
    goto LABEL_5;
  }
  Boolean v4 = 1;
  __SCPreferencesUpdateLockedState((uint64_t)prefs, 1);
  return v4;
}

    __int128 v17 = 1;
    goto LABEL_84;
  }

  int v19 = __error();
  _SCErrorSet(*v19);
  uint64_t v20 = __log_SCNetworkConfiguration();
  int v21 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v20, (os_log_type_t)v21))
  {
    uint64_t v22 = _os_log_pack_size();
    uint64_t v23 = (char *)&valuePtr - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v24 = _os_log_pack_fill();
    uint64_t v25 = __error();
    int v26 = strerror(*v25);
    *(_DWORD *)uint64_t v24 = 136315138;
    *(void *)(v24 + 4) = v26;
    __SC_log_send(3, (uint64_t)v20, v21, v23);
  }

  return 0;
}

BOOL lockWithSCDynamicStore(uint64_t a1, int a2)
{
  v26[1] = *MEMORY[0x1895F89C0];
  if (!__SCPreferencesAddSession(a1)) {
    return 0LL;
  }
  if (!SCDynamicStoreAddWatchedKey(*(void *)(a1 + 152), *(__CFString **)(a1 + 176), 0))
  {
    int v13 = SCError();
    size_t v15 = __log_SCPreferences();
    uint64_t v16 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v15, (os_log_type_t)v16)) {
      goto LABEL_24;
    }
LABEL_19:
    uint64_t v17 = _os_log_pack_size();
    __darwin_time_t v18 = (char *)v26 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v15, v16, v18);
    int v14 = 1;
LABEL_20:
    BOOL v8 = 0LL;
    goto LABEL_25;
  }

  SCDynamicStoreRef v4 = SCDynamicStoreCreate(0LL, *(CFStringRef *)(a1 + 80), 0LL, 0LL);
  *(void *)(a1 + 160) = v4;
  if (!v4)
  {
    int v13 = SCError();
    size_t v15 = __log_SCPreferences();
    uint64_t v16 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v15, (os_log_type_t)v16)) {
      goto LABEL_24;
    }
    goto LABEL_19;
  }

  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v6 = CFDateCreate(0LL, Current);
  int v7 = SCDynamicStoreAddTemporaryValue(*(SCDynamicStoreRef *)(a1 + 160), *(CFStringRef *)(a1 + 176), v6);
  CFRelease(v6);
  BOOL v8 = v7 != 0;
  if (v7 || !a2)
  {
LABEL_9:
    if (v8) {
      int v13 = 0;
    }
    else {
      int v13 = 3002;
    }
    int v14 = !v8;
    goto LABEL_25;
  }

  while (1)
  {
    if (!SCDynamicStoreNotifyWait(*(void *)(a1 + 152)))
    {
      int v13 = SCError();
      size_t v15 = __log_SCPreferences();
      uint64_t v16 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v15, (os_log_type_t)v16)) {
        goto LABEL_24;
      }
      goto LABEL_19;
    }

    CFArrayRef v9 = SCDynamicStoreCopyNotifiedKeys(*(SCDynamicStoreRef *)(a1 + 152));
    if (!v9) {
      break;
    }
    CFRelease(v9);
    CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
    CFDateRef v11 = CFDateCreate(0LL, v10);
    int v12 = SCDynamicStoreAddTemporaryValue(*(SCDynamicStoreRef *)(a1 + 160), *(CFStringRef *)(a1 + 176), v11);
    CFRelease(v11);
    BOOL v8 = v12 != 0;
    if (v12) {
      goto LABEL_9;
    }
  }

  int v19 = __log_SCPreferences();
  uint64_t v20 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v19, (os_log_type_t)v20))
  {
    uint64_t v21 = _os_log_pack_size();
    uint64_t v22 = (char *)v26 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v19, v20, v22);
    int v14 = 1;
    int v13 = 0;
    goto LABEL_20;
  }

  int v13 = 0;
LABEL_24:
  BOOL v8 = 0LL;
  int v14 = 1;
LABEL_25:
  SCDynamicStoreRemoveWatchedKey(*(void *)(a1 + 152), *(const __CFString **)(a1 + 176), 0);
  CFArrayRef v23 = SCDynamicStoreCopyNotifiedKeys(*(SCDynamicStoreRef *)(a1 + 152));
  if (v23) {
    CFRelease(v23);
  }
  __SCPreferencesRemoveSession(a1);
  if (v14)
  {
    uint64_t v24 = *(const void **)(a1 + 160);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a1 + 160) = 0LL;
    }
  }

  if (v13) {
    _SCErrorSet(v13);
  }
  return v8;
}

uint64_t createParentDirectory()
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if ((unint64_t)__strlcpy_chk() >= 0x400 || (uint64_t v0 = strrchr(v42, 47)) == 0LL || v0 == v42)
  {
    *__error() = 2;
    return 0xFFFFFFFFLL;
  }

  int v2 = v0;
  char *v0 = 0;
  unint64_t v3 = 0x18C54F000uLL;
  *(void *)&__int128 v1 = 136315138LL;
  __int128 v38 = v1;
  SCDynamicStoreRef v4 = v42;
LABEL_5:
  char v5 = *v2;
  *int v2 = 0;
  while (1)
  {
    if (!mkdir(v42, 0x1EDu))
    {
      gid_t gr_gid = *(_DWORD *)(v3 + 1672);
      if (gr_gid == -1)
      {
        uint64_t v39 = 0LL;
        if (getgrnam_r("wheel", &v40, v41, 0x100uLL, &v39) || !v39)
        {
          BOOL v8 = __log_SCPreferences();
          uint64_t v9 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
          {
            uint64_t v10 = _os_log_pack_size();
            CFDateRef v11 = (char *)&v38 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v12 = _os_log_pack_fill();
            int v13 = __error();
            int v14 = strerror(*v13);
            *(_DWORD *)uint64_t v12 = v38;
            *(void *)(v12 + 4) = v14;
            size_t v15 = v11;
            unint64_t v3 = 0x18C54F000uLL;
            __SC_log_send(5, (uint64_t)v8, v9, v15);
          }

          gid_t gr_gid = 0;
        }

        else
        {
          gid_t gr_gid = v39->gr_gid;
        }

        *(_DWORD *)(v3 + 1672) = gr_gid;
      }

      if (chown(v42, 0xFFFFFFFF, gr_gid) == -1)
      {
        uint64_t v16 = __log_SCPreferences();
        uint64_t v17 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
        {
          uint64_t v18 = _os_log_pack_size();
          int v19 = (char *)&v38 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          uint64_t v21 = __error();
          uint64_t v22 = strerror(*v21);
          *(_DWORD *)uint64_t v20 = v38;
          *(void *)(v20 + 4) = v22;
          unint64_t v3 = 0x18C54F000LL;
          __SC_log_send(5, (uint64_t)v16, v17, v19);
        }
      }

      if (chmod(v42, 0x1EDu) == -1)
      {
        CFArrayRef v23 = __log_SCPreferences();
        uint64_t v24 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v23, (os_log_type_t)v24))
        {
          uint64_t v25 = _os_log_pack_size();
          int v26 = (char *)&v38 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v27 = _os_log_pack_fill();
          uint64_t v28 = __error();
          uint64_t v29 = strerror(*v28);
          *(_DWORD *)uint64_t v27 = v38;
          *(void *)(v27 + 4) = v29;
          unint64_t v3 = 0x18C54F000LL;
          __SC_log_send(5, (uint64_t)v23, v24, v26);
        }
      }

      uint64_t result = 0LL;
      if (!v2 || v4 == v42) {
        return result;
      }
      goto LABEL_31;
    }

    if (*__error() != 2 || v4 != v42) {
      break;
    }
    if (!v2) {
      goto LABEL_36;
    }
LABEL_31:
    *int v2 = v5;
    int v2 = strchr(v4 + 1, 47);
    SCDynamicStoreRef v4 = v2;
    if (v2) {
      goto LABEL_5;
    }
    char v5 = 0;
  }

  if (*__error() == 30) {
    return 0xFFFFFFFFLL;
  }
  int v7 = __error();
  if (v2 && *v7 == 17) {
    goto LABEL_31;
  }
LABEL_36:
  int v31 = __log_SCPreferences();
  uint64_t v32 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v31, (os_log_type_t)v32))
  {
    uint64_t v33 = _os_log_pack_size();
    uint64_t v34 = (char *)&v38 - ((MEMORY[0x1895F8858](v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v35 = _os_log_pack_fill();
    uint64_t v36 = __error();
    uint64_t v37 = strerror(*v36);
    *(_DWORD *)uint64_t v35 = v38;
    *(void *)(v35 + 4) = v37;
    __SC_log_send(5, (uint64_t)v31, v32, v34);
    return 0xFFFFFFFFLL;
  }

  return 0xFFFFFFFFLL;
}

BOOL has_O_EXLOCK(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v2 = open(*(const char **)(a1 + 120), 513);
  if (v2 == -1)
  {
    CFDateRef v6 = __log_SCPreferences();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = _os_log_pack_size();
    uint64_t v9 = (char *)v15 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
  }

  else
  {
    int v3 = v2;
    int v4 = fstatfs(v2, &v16);
    unlink(*(const char **)(a1 + 120));
    close(v3);
    if (v4 == -1)
    {
      CFDateRef v6 = __log_SCPreferences();
      uint64_t v7 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
      if (!result) {
        return result;
      }
      uint64_t v10 = _os_log_pack_size();
      uint64_t v9 = (char *)v15 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
    }

    else
    {
      v15[0] = 5LL;
      v15[1] = 2147614720LL;
      void v15[2] = 0LL;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      int v19 = 0;
      if (getattrlist(v16.f_mntonname, v15, &v17, 0x24uLL, 0) != -1) {
        return (BYTE9(v17) & 2) != 0 && (BYTE9(v18) & 2) != 0;
      }
      CFDateRef v6 = __log_SCPreferences();
      uint64_t v7 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
      if (!result) {
        return result;
      }
      uint64_t v11 = _os_log_pack_size();
      uint64_t v9 = (char *)v15 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
    }
  }

  uint64_t v12 = _os_log_pack_fill();
  int v13 = __error();
  int v14 = strerror(*v13);
  *(_DWORD *)uint64_t v12 = 136315138;
  *(void *)(v12 + 4) = v14;
  __SC_log_send(5, (uint64_t)v6, v7, v9);
  return 0LL;
}

void reportDelay(uint64_t a1, uint64_t *a2, int a3)
{
  v16[1] = *MEMORY[0x1895F89C0];
  CFDateRef v6 = __log_SCPreferences();
  uint64_t v7 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t v9 = (char *)v16 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    uint64_t v11 = *(void *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = *a2;
    int v14 = *((_DWORD *)a2 + 2) / 1000;
    size_t v15 = " (stale)";
    *(_DWORD *)uint64_t v10 = 138413314;
    if (!a3) {
      size_t v15 = "";
    }
    *(void *)(v10 + 4) = v11;
    *(_WORD *)(v10 + 12) = 2112;
    *(void *)(v10 + 14) = v12;
    *(_WORD *)(v10 + 22) = 1024;
    *(_DWORD *)(v10 + 24) = v13;
    *(_WORD *)(v10 + 28) = 1024;
    *(_DWORD *)(v10 + 30) = v14;
    *(_WORD *)(v10 + 34) = 2080;
    *(void *)(v10 + 36) = v15;
    __SC_log_send(3, (uint64_t)v6, v7, v9);
  }

void __wait_for_PreferencesMonitor()
{
  v13[1] = *MEMORY[0x1895F89C0];
  qword_18C54F7A0 = (uint64_t)"Waiting for configd/PreferencesMonitor";
  SCDynamicStoreRef v0 = SCDynamicStoreCreate(0LL, @"__wait_for_PreferencesMonitor", 0LL, 0LL);
  if (!v0)
  {
    qword_18C54F7A0 = 0LL;
    return;
  }

  __int128 v1 = v0;
  int v2 = CFArrayCreate(0LL, (const void **)&kSCDynamicStoreDomainSetup, 1LL, MEMORY[0x189605228]);
  int v3 = SCDynamicStoreSetNotificationKeys(v1, v2, 0LL);
  CFRelease(v2);
  if (v3)
  {
    while (1)
    {
      CFPropertyListRef v4 = SCDynamicStoreCopyValue(v1, @"Setup:");
      if (v4)
      {
        CFRelease(v4);
        goto LABEL_13;
      }

      CFArrayRef v5 = SCDynamicStoreCopyNotifiedKeys(v1);
      if (v5) {
        CFRelease(v5);
      }
    }

    CFDateRef v6 = __log_SCPreferences();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v6, (os_log_type_t)v7)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  CFDateRef v6 = __log_SCPreferences();
  uint64_t v7 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
  {
LABEL_12:
    uint64_t v8 = _os_log_pack_size();
    uint64_t v9 = (char *)v13 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    int v11 = SCError();
    uint64_t v12 = SCErrorString(v11);
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = v12;
    __SC_log_send(5, (uint64_t)v6, v7, v9);
  }

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!prefs)
  {
    int v3 = 3001;
    goto LABEL_27;
  }

  if (!*((_BYTE *)prefs + 112))
  {
    int v3 = 1007;
    goto LABEL_27;
  }

  if (!*((void *)prefs + 39))
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)prefs + 16));
    CFPropertyListRef v4 = (const void *)*((void *)prefs + 20);
    if (v4)
    {
      CFRelease(v4);
      *((void *)prefs + 20) = 0LL;
    }

    int v5 = *((_DWORD *)prefs + 29);
    if (v5 != -1)
    {
      if (*((void *)prefs + 15))
      {
        unlink(*((const char **)prefs + 15));
        int v5 = *((_DWORD *)prefs + 29);
      }

      close(v5);
      *((_DWORD *)prefs + 29) = -1;
    }

    gettimeofday(&v16, 0LL);
    __darwin_time_t v6 = v16.tv_sec - *((void *)prefs + 16);
    __darwin_time_t v17 = v6;
    int v7 = v16.tv_usec - *((_DWORD *)prefs + 34);
    int v18 = v7;
    if (v7 < 0)
    {
      __darwin_time_t v17 = --v6;
      int v18 = v7 + 1000000;
    }

    if (v6 >= 1) {
      reportDelay_0((uint64_t)prefs, &v17);
    }
    uint64_t v8 = __log_SCPreferences();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      int v11 = (char *)&v15 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      uint64_t v13 = *((void *)prefs + 13);
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = v13;
      __SC_log_send(7, (uint64_t)v8, v9, v11);
    }

    __SCPreferencesUpdateLockedState((uint64_t)prefs, 0);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prefs + 16));
    return 1;
  }

  LODWORD(v17) = 0;
  mach_port_t v2 = *((_DWORD *)prefs + 80);
  if (!v2)
  {
LABEL_26:
    int v3 = 1003;
    LODWORD(v17) = 1003;
    goto LABEL_27;
  }

  if (!_SCHelperExec(v2, 106, 0LL, &v17, 0LL))
  {
    if (*((_DWORD *)prefs + 80)) {
      _SCHelperClose((mach_port_t *)prefs + 80);
    }
    goto LABEL_26;
  }

  int v3 = v17;
  if (!(_DWORD)v17)
  {
    __SCPreferencesUpdateLockedState((uint64_t)prefs, 0);
    return 1;
  }

LABEL_27:
  _SCErrorSet(v3);
  return 0;
}

      ++v13;
    }

    while (v12 != v13);
  }

  if (Mutable)
  {
    int v30 = CFStringCreateByCombiningStrings(0LL, Mutable, @", ");
    int v31 = __log_SCNetworkConfiguration();
    uint64_t v32 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v31, (os_log_type_t)v32))
    {
      uint64_t v33 = _os_log_pack_size();
      uint64_t v34 = (char *)&v36 - ((MEMORY[0x1895F8858](v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v35 = 136315394;
      *(void *)(v35 + 4) = v36;
      *(_WORD *)(v35 + 12) = 2112;
      *(void *)(v35 + 14) = v30;
      __SC_log_send(7, (uint64_t)v31, v32, v34);
    }

    CFRelease(v30);
    CFRelease(Mutable);
  }

    int v3 = v3->ifa_next;
    if (!v3) {
      goto LABEL_28;
    }
  }

  uint64_t v27 = __error();
  _SCErrorSet(*v27);
  uint64_t v28 = __log_SCNetworkConfiguration();
  uint64_t v29 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v28, (os_log_type_t)v29))
  {
    int v31 = _os_log_pack_size();
    uint64_t v32 = (char *)&v37 - ((MEMORY[0x1895F8858](v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v33 = _os_log_pack_fill();
    uint64_t v34 = v3->ifa_name;
    uint64_t v35 = __error();
    uint64_t v36 = strerror(*v35);
    *(_DWORD *)uint64_t v33 = 136315394;
    *(void *)(v33 + 4) = v34;
    *(_WORD *)(v33 + 12) = 2080;
    *(void *)(v33 + 14) = v36;
    __SC_log_send(5, (uint64_t)v28, v29, v32);
  }

  CFRelease(Mutable);
  CFMutableDictionaryRef Mutable = 0LL;
LABEL_28:
  close(v1);
LABEL_33:
  MEMORY[0x186E09434](v40);
  return Mutable;
}

void reportDelay_0(uint64_t a1, uint64_t *a2)
{
  v13[1] = *MEMORY[0x1895F89C0];
  CFPropertyListRef v4 = __log_SCPreferences();
  uint64_t v5 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    int v7 = (char *)v13 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = *(void *)(a1 + 88);
    uint64_t v11 = *a2;
    int v12 = *((_DWORD *)a2 + 2) / 1000;
    *(_DWORD *)uint64_t v8 = 138413058;
    *(void *)(v8 + 4) = v9;
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v8 + 14) = v10;
    *(_WORD *)(v8 + 22) = 1024;
    *(_DWORD *)(v8 + 24) = v11;
    *(_WORD *)(v8 + 28) = 1024;
    *(_DWORD *)(v8 + 30) = v12;
    __SC_log_send(3, (uint64_t)v4, v5, v7);
  }

CFArrayRef SCPreferencesCopyKeyList(SCPreferencesRef prefs)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    mach_port_t v2 = CFGetAllocator(prefs);
    CFIndex Count = CFDictionaryGetCount(*((CFDictionaryRef *)prefs + 35));
    if (Count < 1)
    {
      return CFArrayCreate(v2, 0LL, 0LL, MEMORY[0x189605228]);
    }

    else
    {
      CFIndex v4 = Count;
      uint64_t v5 = (const void **)MEMORY[0x186E08750](v2, 8 * Count, 0LL);
      CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)prefs + 35), v5, 0LL);
      uint64_t v6 = CFArrayCreate(v2, v5, v4, MEMORY[0x189605228]);
      CFAllocatorDeallocate(v2, v5);
      return v6;
    }
  }

  else
  {
    _SCErrorSet(3001);
    return 0LL;
  }

uint64_t __SCNetworkConfigurationBackup(const __SCPreferences *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v6 = __log_SCNetworkConfiguration();
  uint64_t v7 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t v9 = (char *)&v19 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 138412290;
    *(void *)(v10 + 4) = a2;
    __SC_log_send(5, (uint64_t)v6, v7, v9);
  }

  if (*((void *)a1 + 11)) {
    uint64_t v11 = (const __CFString *)*((void *)a1 + 11);
  }
  else {
    uint64_t v11 = @"preferences.plist";
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, v11);
  v23.length = CFStringGetLength(MutableCopy);
  v23.location = 0LL;
  if (CFStringFindWithOptions(MutableCopy, @"/", v23, 4uLL, &result))
  {
    v22.length = result.location + 1;
    result.location = 0LL;
    result.length = v22.length;
    v22.location = 0LL;
    CFStringReplace(MutableCopy, v22, &stru_189B68690);
  }

  CFIndex Length = CFStringGetLength(MutableCopy);
  CFStringInsert(MutableCopy, Length - 6, @"-");
  CFIndex v14 = CFStringGetLength(MutableCopy);
  CFStringInsert(MutableCopy, v14 - 6, a2);
  Companion = (const __SCPreferences *)SCPreferencesCreateCompanion(a3, MutableCopy);
  CFRelease(MutableCopy);
  if (!Companion) {
    return 0LL;
  }
  int Value = SCPreferencesPathGetValue(a1, @"/");
  SCPreferencesPathSetValue(Companion, @"/", Value);
  uint64_t v17 = SCPreferencesCommitChanges(Companion);
  CFRelease(Companion);
  return v17;
}

uint64_t __SCNetworkConfigurationSaveModel(const __SCPreferences *a1, const void *a2)
{
  v12[1] = *MEMORY[0x1895F89C0];
  CFIndex v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v7 = (char *)v12 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v8 + 4) = a2;
    __SC_log_send(5, (uint64_t)v4, v5, v7);
  }

  uint64_t v9 = CFStringCreateWithFormat(0LL, 0LL, @"preferences-%@.plist", a2);
  uint64_t v10 = savePreferences(a1, v9, (uint64_t)&stru_189B68690, @"Model", a2);
  CFRelease(v9);
  return v10;
}

uint64_t savePreferences( const __SCPreferences *a1, const __CFString *a2, uint64_t a3, const __CFString *a4, const void *a5)
{
  v25[7] = *MEMORY[0x1895F89C0];
  v25[0] = @"CurrentSet";
  v25[1] = @"Model";
  void v25[2] = @"NetworkServices";
  v25[3] = @"Sets";
  v25[4] = @"System";
  v25[5] = @"__VERSION__";
  v25[6] = @"VirtualNetworkInterfaces";
  uint64_t v24 = a2;
  Companion = (const __SCPreferences *)SCPreferencesCreateCompanion((uint64_t)a1, a2);
  for (uint64_t i = 0LL; i != 7; ++i)
  {
    uint64_t v11 = (const __CFString *)v25[i];
    int v12 = CFStringCreateWithFormat(0LL, 0LL, @"%@%@", a3, v11);
    CFPropertyListRef Value = SCPreferencesGetValue(a1, v12);
    if (Value)
    {
      SCPreferencesSetValue(Companion, v11, Value);
      SCPreferencesRemoveValue(a1, v12);
    }

    CFRelease(v12);
  }

  if (a4) {
    SCPreferencesSetValue(Companion, a4, a5);
  }
  uint64_t v14 = SCPreferencesCommitChanges(Companion);
  CFRelease(Companion);
  if (!(_DWORD)v14)
  {
    uint64_t v15 = __log_SCNetworkConfiguration();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      int v18 = (char *)&v23 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = SCError();
      uint64_t v21 = SCErrorString(v20);
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = v24;
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v19 + 14) = v21;
      __SC_log_send(3, (uint64_t)v15, v16, v18);
    }
  }

  return v14;
}

uint64_t __SCNetworkConfigurationUpgrade(const __SCPreferences **a1, uint64_t *a2, int a3)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  int valuePtr = 20191120;
  if (a1) {
    Companion = *a1;
  }
  else {
    Companion = 0LL;
  }
  BOOL v7 = a2 != 0LL;
  if (!a2)
  {
    uint64_t v8 = 0LL;
LABEL_11:
    if (a1) {
      BOOL v11 = Companion == 0LL;
    }
    else {
      BOOL v11 = 1;
    }
    int v14 = !v11 && a2 != 0LL && v8 == 0LL;
    goto LABEL_29;
  }

  uint64_t v8 = (const __SCPreferences *)*a2;
  if (!a1 && v8)
  {
    Companion = (const __SCPreferences *)SCPreferencesCreateCompanion(*a2, 0LL);
    if (!Companion)
    {
      uint64_t v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10)) {
        goto LABEL_66;
      }
      return 0LL;
    }

    goto LABEL_11;
  }

  int v14 = 0;
  if (a1 && Companion && !v8)
  {
    uint64_t v15 = (const __SCPreferences *)SCPreferencesCreateCompanion((uint64_t)Companion, @"NetworkInterfaces.plist");
    if (!v15)
    {
      uint64_t v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10))
      {
LABEL_66:
        uint64_t v48 = _os_log_pack_size();
        uint64_t v49 = (char *)v54 - ((MEMORY[0x1895F8858](v48) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v50 = _os_log_pack_fill();
        int v51 = SCError();
        uint64_t v52 = SCErrorString(v51);
        *(_DWORD *)uint64_t v50 = 136315138;
        *(void *)(v50 + 4) = v52;
        __SC_log_send(3, (uint64_t)v9, v10, v49);
      }

      return 0LL;
    }

    uint64_t v8 = v15;
    BOOL v7 = 0;
    int v14 = 1;
  }

  else
  {
    BOOL v7 = 0;
  }

LABEL_29:
  if (needsUpdate(Companion) || needsUpdate(v8))
  {
    uint64_t v16 = lockWithSync(Companion);
    if (!(_DWORD)v16)
    {
      uint64_t v25 = __log_SCNetworkConfiguration();
      uint64_t v26 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v25, (os_log_type_t)v26))
      {
        uint64_t v27 = _os_log_pack_size();
        uint64_t v28 = (char *)v54 - ((MEMORY[0x1895F8858](v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v29 = _os_log_pack_fill();
        int v30 = SCError();
        int v31 = SCErrorString(v30);
        *(_DWORD *)uint64_t v29 = 136315138;
        *(void *)(v29 + 4) = v31;
        __SC_log_send(3, (uint64_t)v25, v26, v28);
      }

      goto LABEL_39;
    }

    if (v8)
    {
      uint64_t v17 = lockWithSync(v8);
      if (!(_DWORD)v17)
      {
        int v18 = __log_SCNetworkConfiguration();
        uint64_t v19 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v18, (os_log_type_t)v19))
        {
          uint64_t v20 = _os_log_pack_size();
          uint64_t v21 = (char *)v54 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v22 = _os_log_pack_fill();
          int v23 = SCError();
          uint64_t v24 = SCErrorString(v23);
          *(_DWORD *)uint64_t v22 = 136315138;
          *(void *)(v22 + 4) = v24;
          __SC_log_send(3, (uint64_t)v18, v19, v21);
        }

        SCPreferencesUnlock(Companion);
        goto LABEL_39;
      }
    }

    else
    {
      uint64_t v17 = v16;
    }

    __SCNetworkConfigurationClean(Companion, v8);
    CFNumberRef v32 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    SCPreferencesSetValue(Companion, @"__VERSION__", v32);
    CFRelease(v32);
    if (v8)
    {
      CFNumberRef v33 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
      SCPreferencesSetValue(v8, @"__VERSION__", v33);
      CFRelease(v33);
    }

    if (!a3)
    {
LABEL_51:
      SCPreferencesUnlock(Companion);
      if (v8)
      {
        if (a3)
        {
          if ((_DWORD)v17)
          {
            uint64_t v17 = SCPreferencesCommitChanges(v8);
            if (!(_DWORD)v17)
            {
              uint64_t v41 = __log_SCNetworkConfiguration();
              uint64_t v42 = _SC_syslog_os_log_mapping(3);
              if (__SC_log_enabled(3, v41, (os_log_type_t)v42))
              {
                uint64_t v43 = _os_log_pack_size();
                uint64_t v44 = (char *)v54 - ((MEMORY[0x1895F8858](v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v45 = _os_log_pack_fill();
                int v46 = SCError();
                CFErrorRef v47 = SCErrorString(v46);
                *(_DWORD *)uint64_t v45 = 136315138;
                *(void *)(v45 + 4) = v47;
                __SC_log_send(3, (uint64_t)v41, v42, v44);
              }

              uint64_t v17 = 0LL;
            }
          }
        }

        SCPreferencesUnlock(v8);
      }

      goto LABEL_59;
    }

    if (SCPreferencesCommitChanges(Companion))
    {
      uint64_t v17 = SCPreferencesApplyChanges(Companion);
      if ((_DWORD)v17) {
        goto LABEL_51;
      }
      uint64_t v34 = __log_SCNetworkConfiguration();
      uint64_t v35 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v34, (os_log_type_t)v35)) {
        goto LABEL_50;
      }
    }

    else
    {
      uint64_t v34 = __log_SCNetworkConfiguration();
      uint64_t v35 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v34, (os_log_type_t)v35))
      {
LABEL_50:
        uint64_t v17 = 0LL;
        goto LABEL_51;
      }
    }

    uint64_t v36 = _os_log_pack_size();
    v54[1] = v54;
    uint64_t v37 = (char *)v54 - ((MEMORY[0x1895F8858](v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v38 = _os_log_pack_fill();
    int v39 = SCError();
    group v40 = SCErrorString(v39);
    *(_DWORD *)uint64_t v38 = 136315138;
    *(void *)(v38 + 4) = v40;
    __SC_log_send(3, (uint64_t)v34, v35, v37);
    goto LABEL_50;
  }

  CFRange result = SCPreferencesPathRemoveValue(prefs, path);
  if (!(_DWORD)result) {
    return SCError() == 1004;
  }
  return result;
}

LABEL_39:
  uint64_t v17 = 0LL;
LABEL_59:
  if (v7) {
    CFRelease(Companion);
  }
  if (v14)
  {
    if ((_DWORD)v17) {
      *a2 = (uint64_t)CFRetain(v8);
    }
    CFRelease(v8);
  }

  return v17;
}

  if (!v27 || v26) {
    return;
  }
  if (!a5) {
    goto LABEL_26;
  }
  int v30 = getservbyname(a5, "tcp");
  if (v30) {
    a6 = bswap32(LOWORD(v30->s_port)) >> 16;
  }
  CFNumberRef v33 = a6;
  int v31 = CFNumberCreate(0LL, kCFNumberIntType, &v33);
  CFDictionarySetValue(a1, a4, v31);
  CFRelease(v31);
}

  int v31 = *(const void **)(a1 + 112);
  if (!v31)
  {
    uint64_t v22 = 0LL;
    if (!v17) {
      return v22;
    }
    goto LABEL_41;
  }

  CFRelease(v31);
  uint64_t v22 = 0LL;
  *(void *)(a1 + 112) = 0LL;
  if (v17) {
LABEL_41:
  }
    CFRelease(v17);
  return v22;
}

const __SCPreferences *needsUpdate(const __SCPreferences *result)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  int valuePtr = 0;
  if (result)
  {
    CFPropertyListRef Value = SCPreferencesGetValue(result, @"__VERSION__");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID && CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr)) {
      return (const __SCPreferences *)(valuePtr != 20191120);
    }
    else {
      return (const __SCPreferences *)1;
    }
  }

  return result;
}

uint64_t lockWithSync(const __SCPreferences *a1)
{
  if (!a1) {
    lockWithSync_cold_1();
  }
  uint64_t result = SCPreferencesLock(a1, 1u);
  if (!(_DWORD)result)
  {
    if (SCError() == 3005)
    {
      SCPreferencesSynchronize(a1);
      return SCPreferencesLock(a1, 1u);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t __SCNetworkConfigurationClean(const __SCPreferences *a1, const __SCPreferences *a2)
{
  v40[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (uint64_t)SCPreferencesCopyKeyList(a1);
  if (v4)
  {
    uint64_t v5 = CFStringCreateWithFormat(0LL, 0LL, @" : %@", @"Sets");
    CFIndex Count = CFArrayGetCount((CFArrayRef)v4);
    if (Count < 1)
    {
      CFMutableDictionaryRef Mutable = 0LL;
    }

    else
    {
      CFIndex v7 = Count;
      CFMutableDictionaryRef Mutable = 0LL;
      CFIndex v9 = 0LL;
      uint64_t v10 = (const CFSetCallBacks *)MEMORY[0x189605258];
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v4, v9);
        if (CFStringHasSuffix(ValueAtIndex, v5))
        {
          if (!Mutable) {
            CFMutableDictionaryRef Mutable = CFSetCreateMutable(0LL, 0LL, v10);
          }
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, ValueAtIndex);
          CFStringTrim(MutableCopy, v5);
          CFSetAddValue(Mutable, MutableCopy);
          CFRelease(MutableCopy);
        }

        ++v9;
      }

      while (v7 != v9);
    }

    CFRelease(v5);
    CFRelease((CFTypeRef)v4);
    if (Mutable)
    {
      CFSetApplyFunction(Mutable, (CFSetApplierFunction)thinInlineBackup, a1);
      CFRelease(Mutable);
      uint64_t v13 = __log_SCNetworkConfiguration();
      uint64_t v14 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
      {
        uint64_t v15 = _os_log_pack_size();
        uint64_t v16 = (char *)v40 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v13, v14, v16);
      }

      uint64_t v4 = 1LL;
    }

    else
    {
      uint64_t v4 = 0LL;
    }
  }

  CFArrayRef v17 = SCPreferencesCopyKeyList(a1);
  if (v17)
  {
    int v18 = v17;
    uint64_t v19 = CFStringCreateWithFormat(0LL, 0LL, @":%@", @"Sets");
    CFIndex v20 = CFArrayGetCount(v18);
    if (v20 < 1)
    {
      int v23 = 0LL;
    }

    else
    {
      CFIndex v21 = v20;
      CFIndex v22 = 0LL;
      int v23 = 0LL;
      uint64_t v24 = (const CFSetCallBacks *)MEMORY[0x189605258];
      do
      {
        uint64_t v25 = (const __CFString *)CFArrayGetValueAtIndex(v18, v22);
        if (CFStringHasSuffix(v25, v19))
        {
          if (!v23) {
            int v23 = CFSetCreateMutable(0LL, 0LL, v24);
          }
          uint64_t v26 = CFStringCreateMutableCopy(0LL, 0LL, v25);
          CFStringTrim(v26, v19);
          CFSetAddValue(v23, v26);
          CFRelease(v26);
        }

        ++v22;
      }

      while (v21 != v22);
    }

    CFRelease(v19);
    CFRelease(v18);
    if (v23)
    {
      CFSetApplyFunction(v23, (CFSetApplierFunction)thinInlineModel, a1);
      CFRelease(v23);
      uint64_t v27 = __log_SCNetworkConfiguration();
      uint64_t v28 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v27, (os_log_type_t)v28))
      {
        uint64_t v4 = 1LL;
        if (!a2) {
          goto LABEL_38;
        }
        goto LABEL_31;
      }

      uint64_t v29 = _os_log_pack_size();
      int v30 = (char *)v40 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v27, v28, v30);
      uint64_t v4 = 1LL;
    }
  }

  if (!a2) {
    goto LABEL_38;
  }
LABEL_31:
  if (__SCNetworkConfigurationCleanHiddenInterfaces(a1, a2))
  {
    int v31 = __log_SCNetworkConfiguration();
    uint64_t v32 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v31, (os_log_type_t)v32))
    {
      uint64_t v33 = _os_log_pack_size();
      uint64_t v34 = (char *)v40 - ((MEMORY[0x1895F8858](v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v31, v32, v34);
    }

    uint64_t v4 = 1LL;
  }

LABEL_38:
  if (__SCNetworkConfigurationCleanServiceOrderIssues(a1))
  {
    uint64_t v35 = __log_SCNetworkConfiguration();
    uint64_t v36 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
    {
      uint64_t v37 = _os_log_pack_size();
      uint64_t v38 = (char *)v40 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v35, v36, v38);
    }

    return 1LL;
  }

  return v4;
}

          if (++v24 == v55) {
            goto LABEL_39;
          }
        }

        int v30 = v29;
        int v31 = 0LL;
        while (1)
        {
          Match = (const __CFString *)CFArrayGetValueAtIndex(v27, v31);
          uint64_t v33 = CFStringGetTypeID();
          if (Match)
          {
          }

          if (v30 == ++v31) {
            goto LABEL_38;
          }
        }

        uint64_t v43 = CFDictionaryGetValue(v25, @"DomainAction");
        uint64_t v44 = CFStringGetTypeID();
        if (v43 && CFGetTypeID(v43) == v44 && CFEqual(v43, @"NeverConnect"))
        {
LABEL_39:
          ValueAtIndex = (const void *)v14;
          uint64_t v8 = v51;
          CFIndex v9 = v46;
          a7 = v47;
          a4 = v52;
          goto LABEL_16;
        }

        uint64_t v36 = CFDictionaryGetValue(v25, @"RequiredURLStringProbe");
        uint64_t v35 = 1;
        uint64_t v8 = v51;
        CFIndex v9 = v46;
        a7 = v47;
        CFPropertyListRef Value = v57;
      }

      else
      {
        uint64_t v54 = v15;
        if (!a4
          && (uint64_t v34 = __SCNetworkConnectionDomainGetMatch((const __CFDictionary *)ValueAtIndex, a2, 0),
              (unint64_t)v34 | v14))
        {
          Match = v34;
          uint64_t v35 = 0;
          if (!v34)
          {
LABEL_45:
            ValueAtIndex = (const void *)v14;
            a4 = v52;
            uint64_t v15 = v54;
            goto LABEL_20;
          }
        }

        else
        {
          uint64_t v35 = 1;
          Match = __SCNetworkConnectionDomainGetMatch((const __CFDictionary *)ValueAtIndex, a2, 1);
          if (!Match) {
            goto LABEL_45;
          }
        }

        uint64_t v36 = 0LL;
      }
    }

    if (v9)
    {
      int valuePtr = 2;
      if (*v9)
      {
        CFRelease(*v9);
        *CFIndex v9 = 0LL;
      }

      uint64_t v37 = v9;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      int v39 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, @"OnDemandMatchInfoVPNType", v39);
      CFRelease(v39);
      if (Match) {
        CFDictionarySetValue(Mutable, @"OnDemandMatchInfoDomain", Match);
      }
      if (v35) {
        group v40 = v49;
      }
      else {
        group v40 = v48;
      }
      CFDictionarySetValue(Mutable, @"OnDemandMatchInfoOnRetry", v40);
      CFIndex v9 = v37;
      *uint64_t v37 = Mutable;
      CFPropertyListRef Value = v57;
    }

    a4 = v52;
    if (a7)
    {
      if (*a7)
      {
        CFRelease(*a7);
        *a7 = 0LL;
      }

      if (v36) {
        *a7 = CFRetain(v36);
      }
    }

    uint64_t v41 = v52 || v35 == 0;
    uint64_t v42 = !v41;
    if (v8 && !v42) {
      break;
    }
    uint64_t v15 = v54;
    if (!v42) {
      goto LABEL_81;
    }
LABEL_20:
    ++v16;
    uint64_t v14 = (unint64_t)ValueAtIndex;
    if (v16 == Count) {
      goto LABEL_81;
    }
  }

  *uint64_t v8 = 1;
  uint64_t v15 = v54;
LABEL_81:
  if (ValueAtIndex) {
    CFRetain(ValueAtIndex);
  }
LABEL_79:
  _SCErrorSet(v15);
  return ValueAtIndex;
}

uint64_t __SCNetworkConfigurationCleanHiddenInterfaces(const __SCPreferences *a1, const __SCPreferences *a2)
{
  SCPreferencesRef v190 = a2;
  uint64_t v199 = *MEMORY[0x1895F89C0];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  v192 = a1;
  uint64_t v4 = SCNetworkServiceCopyAll(a1);
  uint64_t v5 = v4;
  v198 = Mutable;
  v193 = v4;
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0LL;
      *(void *)&__int128 v7 = 138412546LL;
      __int128 v194 = v7;
      *(void *)&__int128 v7 = 138412802LL;
      __int128 v188 = v7;
      *(void *)&__int128 v7 = 138413314LL;
      __int128 v189 = v7;
      CFIndex v191 = Count;
      while (1)
      {
        ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, v9);
        if (!SCNetworkServiceGetEnabled(ValueAtIndex)) {
          break;
        }
        Interface = SCNetworkServiceGetInterface(ValueAtIndex);
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (!BSDName)
        {
          BOOL v53 = _sc_log != 1 && _sc_debug == 0;
          CFMutableDictionaryRef Mutable = v198;
          if (v53) {
            goto LABEL_88;
          }
          int v51 = __log_SCNetworkConfiguration();
          uint64_t v52 = _SC_syslog_os_log_mapping(6);
          if (!__SC_log_enabled(6, v51, (os_log_type_t)v52)) {
            goto LABEL_88;
          }
          goto LABEL_56;
        }

        CFStringRef v13 = BSDName;
        int IsHiddenConfiguration = _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)Interface);
        uint64_t v15 = "hidden";
        if (IsHiddenConfiguration) {
          goto LABEL_8;
        }
        LocalizedDisplayCFStringRef Name = SCNetworkInterfaceGetLocalizedDisplayName(Interface);
        int HasPrefix = CFStringHasPrefix(LocalizedDisplayName, @"Apple TV");
        uint64_t v15 = "effectively hidden";
        if (HasPrefix) {
          goto LABEL_8;
        }
        uint64_t v78 = 0LL;
        do
        {
          if (v78 == 4) {
            goto LABEL_82;
          }
        }

        while (!CFStringHasPrefix(LocalizedDisplayName, off_189B63650[++v78]));
        uint64_t v15 = "effectively hidden";
        if ((unint64_t)(v78 - 1) < 4)
        {
LABEL_8:
          *(void *)&__int128 v196 = v15;
          int v18 = SCNetworkServiceGetInterface(ValueAtIndex);
          *(void *)&__int128 v197 = v13;
          if (v18)
          {
            uint64_t v19 = SCNetworkServiceCreate(v192, v18);
            if (v19)
            {
              CFIndex v20 = v19;
              *(void *)&__int128 v195 = v9;
              SCNetworkServiceEstablishDefaultConfiguration(v19);
              CFIndex v21 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
              CFIndex v22 = SCNetworkServiceCopyProtocols(ValueAtIndex);
              if (v22)
              {
                int v23 = v22;
                CFIndex v24 = CFArrayGetCount(v22);
                if (v24 >= 1)
                {
                  CFIndex v25 = v24;
                  for (CFIndex i = 0LL; i != v25; ++i)
                  {
                    uint64_t v27 = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v23, i);
                    CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(v27);
                    v200.length = CFArrayGetCount(v21);
                    v200.location = 0LL;
                    if (!CFArrayContainsValue(v21, v200, ProtocolType)) {
                      CFArrayAppendValue(v21, ProtocolType);
                    }
                  }
                }

                CFRelease(v23);
              }

              uint64_t v29 = SCNetworkServiceCopyProtocols(v20);
              if (v29)
              {
                int v30 = v29;
                CFIndex v31 = CFArrayGetCount(v29);
                if (v31 >= 1)
                {
                  CFIndex v32 = v31;
                  for (CFIndex j = 0LL; j != v32; ++j)
                  {
                    uint64_t v34 = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v30, j);
                    CFStringRef v35 = SCNetworkProtocolGetProtocolType(v34);
                    v201.length = CFArrayGetCount(v21);
                    v201.location = 0LL;
                    if (!CFArrayContainsValue(v21, v201, v35)) {
                      CFArrayAppendValue(v21, v35);
                    }
                  }
                }

                CFRelease(v30);
              }

              CFIndex v36 = CFArrayGetCount(v21);
              CFStringRef Copy = 0LL;
              CFIndex v38 = v36 - 1;
              if (v36 >= 1)
              {
                CFIndex v39 = 0LL;
                while (1)
                {
                  group v40 = (const __CFString *)CFArrayGetValueAtIndex(v21, v39);
                  uint64_t v41 = SCNetworkServiceCopyProtocol(ValueAtIndex, v40);
                  SCNetworkProtocolRef v42 = SCNetworkServiceCopyProtocol(v20, v40);
                  uint64_t v43 = v42;
                  if (v41 && v42)
                  {
                    int Enabled = SCNetworkProtocolGetEnabled(v41);
                    int v45 = SCNetworkProtocolGetEnabled(v43);
                    int v46 = @"conflicting %@ enable/disable";
                    if (Enabled != v45) {
                      goto LABEL_34;
                    }
                    CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(v41);
                    CFDictionaryRef v48 = SCNetworkProtocolGetConfiguration(v43);
                    if (Configuration != v48)
                    {
                      if (!Configuration) {
                        goto LABEL_33;
                      }
                      int v46 = @"conflicting %@ configuration";
                      if (v48)
                      {
                        int v49 = CFEqual(Configuration, v48);
                        if (v49) {
                          goto LABEL_43;
                        }
LABEL_33:
                        int v46 = @"conflicting %@ configuration";
                      }

LABEL_34:
                      CFStringRef Copy = CFStringCreateWithFormat(0LL, 0LL, v46, v40);
                      int v49 = 0;
                      goto LABEL_43;
                    }

                    int v49 = 1;
                  }

                  else
                  {
                    CFStringRef Copy = CFStringCreateWithFormat(0LL, 0LL, @"conflicting %@ enable/disable", v40);
                    int v49 = 0;
                    if (!v41)
                    {
                      if (!v43) {
                        goto LABEL_38;
                      }
LABEL_37:
                      CFRelease(v43);
                      goto LABEL_38;
                    }
                  }

  if (*(_BYTE *)(a1 + 192)) {
    CFStringAppendFormat(Mutable, 0LL, @", !resolve");
  }
  if (*(_BYTE *)(a1 + 112))
  {
    uint64_t v19 = CFGetAllocator((CFTypeRef)a1);
    FlagsFromPath = __SCNetworkReachabilityGetFlagsFromPath( a1 + 193,  (uint64_t)"CopyTargetFlags",  *(nw_path_t *)(a1 + 248),  *(_DWORD *)(a1 + 80),  *(_DWORD *)(a1 + 272),  *(void *)(a1 + 280),  *(unsigned __int8 *)(a1 + 288),  *(_DWORD *)(a1 + 292));
    if (*(_BYTE *)(a1 + 288)) {

    }
      interface_index = *(unsigned int *)(a1 + 296);
    else {
      interface_index = nw_path_get_interface_index();
    }
    CFIndex v22 = CFStringCreateWithFormat(v19, 0LL, @"flags = 0x%08x, if_index = %u", FlagsFromPath, interface_index);
    CFStringAppendFormat(Mutable, 0LL, @", %@", v22);
    CFRelease(v22);
  }

  CFStringAppendFormat(Mutable, 0LL, @"}");
  if (pthread_mutex_unlock(v3)) {
    __SCNetworkReachabilityCopyDescription_cold_1();
  }
  return Mutable;
}

LABEL_43:
                  CFRelease(v41);
                  if (v43) {
                    goto LABEL_37;
                  }
LABEL_38:
                  if (v49)
                  {
                    BOOL v50 = v38 == v39++;
                    if (!v50) {
                      continue;
                    }
                  }

                  break;
                }
              }

              SCNetworkServiceRemove(v20);
              CFRelease(v20);
              CFRelease(v21);
              uint64_t v5 = v193;
              CFIndex v8 = v191;
              CFIndex v9 = v195;
LABEL_62:
              BOOL v62 = _sc_log == 1 || _sc_debug != 0;
              CFMutableDictionaryRef Mutable = v198;
              if (Copy)
              {
                if (v62)
                {
                  size_t v63 = __log_SCNetworkConfiguration();
                  uint64_t v64 = _SC_syslog_os_log_mapping(6);
                  if (__SC_log_enabled(6, v63, (os_log_type_t)v64))
                  {
                    uint64_t v65 = _os_log_pack_size();
                    CFIndex v66 = v9;
                    timeval v67 = (char *)&v188 - ((MEMORY[0x1895F8858](v65) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                    __error();
                    uint64_t v68 = _os_log_pack_fill();
                    CFStringRef ServiceID = SCNetworkServiceGetServiceID(ValueAtIndex);
                    CFStringRef Name = SCNetworkServiceGetName(ValueAtIndex);
                    *(_DWORD *)uint64_t v68 = v189;
                    *(void *)(v68 + 4) = ServiceID;
                    CFIndex v8 = v191;
                    *(_WORD *)(v68 + 12) = 2112;
                    *(void *)(v68 + 14) = Name;
                    *(_WORD *)(v68 + 22) = 2112;
                    *(void *)(v68 + 24) = v197;
                    *(_WORD *)(v68 + 32) = 2080;
                    *(void *)(v68 + 34) = v196;
                    *(_WORD *)(v68 + 42) = 2112;
                    *(void *)(v68 + 44) = Copy;
                    CFMutableDictionaryRef Mutable = v198;
                    uint64_t v71 = v67;
                    CFIndex v9 = v66;
                    __SC_log_send(6, (uint64_t)v63, v64, v71);
                    uint64_t v5 = v193;
                  }
                }

                CFRelease(Copy);
              }

              else
              {
                if (v62)
                {
                  v72 = __log_SCNetworkConfiguration();
                  uint64_t v73 = _SC_syslog_os_log_mapping(6);
                  if (__SC_log_enabled(6, v72, (os_log_type_t)v73))
                  {
                    uint64_t v74 = _os_log_pack_size();
                    v75 = (char *)&v188 - ((MEMORY[0x1895F8858](v74) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                    __error();
                    CFMutableDictionaryRef Mutable = v198;
                    uint64_t v76 = _os_log_pack_fill();
                    *(_DWORD *)uint64_t v76 = v194;
                    *(void *)(v76 + 4) = v197;
                    *(_WORD *)(v76 + 12) = 2080;
                    *(void *)(v76 + 14) = v196;
                    __SC_log_send(6, (uint64_t)v72, v73, v75);
                  }
                }

                v202.length = CFArrayGetCount(Mutable);
                v202.location = 0LL;
                v77 = (const void *)v197;
              }

              goto LABEL_88;
            }

            uint64_t v60 = @"could not create service for interface";
          }

          else
          {
            uint64_t v60 = @"could not get interface for service";
          }

          CFStringRef Copy = CFStringCreateCopy(0LL, v60);
          goto LABEL_62;
        }

              uint64_t v29 = (const void *)*((void *)prefs + 18);
              if (v29) {
                CFRelease(v29);
              }
              *((void *)prefs + 18) = __SCPSignatureFromStatbuf(&value.st_dev);
              if (*((_BYTE *)prefs + 305))
              {
                int v30 = __log_SCPreferences();
                CFIndex v31 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v30, (os_log_type_t)v31))
                {
                  CFIndex v32 = _os_log_pack_size();
                  uint64_t v33 = (char *)&v124 - ((MEMORY[0x1895F8858](v32) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  __error();
                  uint64_t v34 = _os_log_pack_fill();
                  CFStringRef v35 = *((void *)prefs + 13);
                  CFIndex v36 = __SCPreferencesPrefsSize((uint64_t)prefs);
                  *(_DWORD *)uint64_t v34 = 136315394;
                  *(void *)(v34 + 4) = v35;
                  *(_WORD *)(v34 + 12) = 2048;
                  *(void *)(v34 + 14) = v36;
LABEL_50:
                  __SC_log_send(6, (uint64_t)v30, v31, v33);
                  goto LABEL_51;
                }

                goto LABEL_51;
              }

      uint64_t v15 = SCNetworkInterfaceSetConfiguration(interface, MutableCopy);
      if (!MutableCopy) {
        return v15;
      }
      goto LABEL_39;
    }
  }

  if (!options)
  {
    CFDictionaryRemoveValue(MutableCopy, @"MediaSubType");
    CFDictionaryRemoveValue(MutableCopy, @"MediaOptions");
    if (!CFDictionaryGetCount(MutableCopy))
    {
      CFRelease(MutableCopy);
      CFMutableStringRef MutableCopy = 0LL;
    }

    goto LABEL_43;
  }

  uint64_t v16 = __log_SCNetworkConfiguration();
  CFArrayRef v17 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
  {
    int v18 = _os_log_pack_size();
    uint64_t v19 = (char *)v35 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v16, v17, v19);
  }

  _SCErrorSet(1002);
LABEL_38:
  uint64_t v15 = 0;
  if (MutableCopy) {
LABEL_39:
  }
    CFRelease(MutableCopy);
  return v15;
}

LABEL_82:
        BOOL v80 = _sc_log != 1 && _sc_debug == 0;
        CFMutableDictionaryRef Mutable = v198;
        if (v80) {
          goto LABEL_88;
        }
        int v51 = __log_SCNetworkConfiguration();
        uint64_t v52 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v51, (os_log_type_t)v52)) {
          goto LABEL_88;
        }
        uint64_t v81 = _os_log_pack_size();
        CFStringRef v82 = v13;
        uint64_t v55 = (char *)&v188 - ((MEMORY[0x1895F8858](v81) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v83 = _os_log_pack_fill();
        CFIndex v84 = v9;
        CFStringRef v85 = SCNetworkServiceGetServiceID(ValueAtIndex);
        CFStringRef v86 = SCNetworkServiceGetName(ValueAtIndex);
        *(_DWORD *)uint64_t v83 = v188;
        *(void *)(v83 + 4) = v85;
        CFIndex v9 = v84;
        *(_WORD *)(v83 + 12) = 2112;
        *(void *)(v83 + 14) = v86;
        *(_WORD *)(v83 + 22) = 2112;
        *(void *)(v83 + 24) = v82;
LABEL_57:
        CFMutableDictionaryRef Mutable = v198;
        __SC_log_send(6, (uint64_t)v51, v52, v55);
        uint64_t v5 = v193;
LABEL_88:
        if (++v9 == v8) {
          goto LABEL_89;
        }
      }

      BOOL v50 = _sc_log != 1 && _sc_debug == 0;
      if (v50) {
        goto LABEL_88;
      }
      int v51 = __log_SCNetworkConfiguration();
      uint64_t v52 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v51, (os_log_type_t)v52)) {
        goto LABEL_88;
      }
LABEL_56:
      uint64_t v54 = _os_log_pack_size();
      uint64_t v55 = (char *)&v188 - ((MEMORY[0x1895F8858](v54) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v56 = _os_log_pack_fill();
      CFIndex v57 = v9;
      CFStringRef v58 = SCNetworkServiceGetServiceID(ValueAtIndex);
      CFStringRef v59 = SCNetworkServiceGetName(ValueAtIndex);
      *(_DWORD *)uint64_t v56 = v194;
      *(void *)(v56 + 4) = v58;
      CFIndex v9 = v57;
      *(_WORD *)(v56 + 12) = 2112;
      *(void *)(v56 + 14) = v59;
      goto LABEL_57;
    }
  }

LABEL_89:
  v87 = (const __CFArray *)SCBridgeInterfaceCopyAll(v192);
  if (v87)
  {
    v88 = v87;
    *(void *)&__int128 v195 = CFArrayGetCount(v87);
    if ((uint64_t)v195 >= 1)
    {
      CFIndex v90 = 0LL;
      *(void *)&__int128 v89 = 138412290LL;
      __int128 v196 = v89;
      *(void *)&__int128 v194 = v88;
      do
      {
        *(void *)&__int128 v197 = v90;
        v91 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v88, v90);
        MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v91);
        if (MemberInterfaces)
        {
          v93 = MemberInterfaces;
          CFIndex v94 = CFArrayGetCount(MemberInterfaces);
          if (v94 >= 1)
          {
            CFIndex v95 = v94;
            for (CFIndex k = 0LL; k != v95; ++k)
            {
              v97 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v93, k);
              CFStringRef v98 = SCNetworkInterfaceGetBSDName(v97);
              if (v98)
              {
                CFStringRef v99 = v98;
                if (thinRemove(Mutable, v98))
                {
                  if (_sc_log == 1 || _sc_debug != 0)
                  {
                    v101 = __log_SCNetworkConfiguration();
                    uint64_t v102 = _SC_syslog_os_log_mapping(6);
                    if (__SC_log_enabled(6, v101, (os_log_type_t)v102))
                    {
                      uint64_t v103 = _os_log_pack_size();
                      v104 = (char *)&v188 - ((MEMORY[0x1895F8858](v103) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                      __error();
                      CFMutableDictionaryRef Mutable = v198;
                      uint64_t v105 = _os_log_pack_fill();
                      *(_DWORD *)uint64_t v105 = v196;
                      *(void *)(v105 + 4) = v99;
                      __SC_log_send(6, (uint64_t)v101, v102, v104);
                    }
                  }
                }
              }
            }
          }
        }

        CFIndex v90 = v197 + 1;
        v88 = (const __CFArray *)v194;
      }

      while ((void)v197 + 1LL != (void)v195);
    }

    CFRelease(v88);
    uint64_t v5 = v193;
  }

  v106 = SCVLANInterfaceCopyAll(v192);
  if (v106)
  {
    v107 = v106;
    CFIndex v108 = CFArrayGetCount(v106);
    if (v108 >= 1)
    {
      CFIndex v110 = v108;
      CFIndex v111 = 0LL;
      *(void *)&__int128 v109 = 138412290LL;
      __int128 v197 = v109;
      do
      {
        v112 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v107, v111);
        PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(v112);
        CFStringRef v114 = SCNetworkInterfaceGetBSDName(PhysicalInterface);
        if (v114)
        {
          CFStringRef v115 = v114;
          if (thinRemove(Mutable, v114))
          {
            if (_sc_log == 1 || _sc_debug != 0)
            {
              v117 = __log_SCNetworkConfiguration();
              uint64_t v118 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v117, (os_log_type_t)v118))
              {
                uint64_t v119 = _os_log_pack_size();
                v120 = (char *)&v188 - ((MEMORY[0x1895F8858](v119) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                CFMutableDictionaryRef Mutable = v198;
                uint64_t v121 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v121 = v197;
                *(void *)(v121 + 4) = v115;
                __SC_log_send(6, (uint64_t)v117, v118, v120);
              }
            }
          }
        }

        ++v111;
      }

      while (v110 != v111);
    }

    CFRelease(v107);
    uint64_t v5 = v193;
  }

  if (!v5) {
    goto LABEL_144;
  }
  CFIndex v122 = CFArrayGetCount(v5);
  if (v122 < 1) {
    goto LABEL_144;
  }
  CFIndex v124 = v122;
  int v125 = 0;
  CFIndex v126 = 0LL;
  v127 = &_sc_log;
  *(void *)&__int128 v123 = 138412802LL;
  __int128 v195 = v123;
  do
  {
    v128 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, v126);
    v129 = SCNetworkServiceGetInterface(v128);
    CFStringRef v130 = SCNetworkInterfaceGetBSDName(v129);
    if (v130)
    {
      CFStringRef v131 = v130;
      v203.length = CFArrayGetCount(Mutable);
      v203.location = 0LL;
      if (CFArrayContainsValue(Mutable, v203, v131))
      {
        if (*v127 == 1 || _sc_debug != 0 || _sc_verbose != 0)
        {
          v134 = __log_SCNetworkConfiguration();
          uint64_t v135 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v134, (os_log_type_t)v135))
          {
            uint64_t v136 = _os_log_pack_size();
            *(void *)&__int128 v196 = &v188;
            uint64_t v137 = MEMORY[0x1895F8858](v136);
            LODWORD(v197) = v125;
            v138 = (char *)&v188 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v139 = _os_log_pack_fill();
            v140 = v127;
            CFStringRef v141 = SCNetworkServiceGetServiceID(v128);
            CFStringRef v142 = SCNetworkServiceGetName(v128);
            *(_DWORD *)uint64_t v139 = v195;
            *(void *)(v139 + 4) = v141;
            v127 = v140;
            *(_WORD *)(v139 + 12) = 2112;
            *(void *)(v139 + 14) = v142;
            *(_WORD *)(v139 + 22) = 2112;
            *(void *)(v139 + 24) = v131;
            CFMutableDictionaryRef Mutable = v198;
            v143 = v138;
            int v125 = v197;
            __SC_log_send(6, (uint64_t)v134, v135, v143);
            uint64_t v5 = v193;
          }
        }

        SCNetworkServiceRemove(v128);
        ++v125;
      }
    }

    ++v126;
  }

  while (v124 != v126);
  if (v125 > 0)
  {
    BOOL v144 = *v127 != 1 && _sc_debug == 0;
    if (v144
      || (v145 = __log_SCNetworkConfiguration(),
          uint64_t v146 = _SC_syslog_os_log_mapping(5),
          !__SC_log_enabled(5, v145, (os_log_type_t)v146)))
    {
      uint64_t v151 = 1LL;
    }

    else
    {
      uint64_t v147 = _os_log_pack_size();
      v148 = (char *)&v188 - ((MEMORY[0x1895F8858](v147) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v149 = _os_log_pack_fill();
      v150 = "s";
      if (v125 == 1) {
        v150 = "";
      }
      *(_DWORD *)uint64_t v149 = 67109378;
      *(_DWORD *)(v149 + 4) = v125;
      *(_WORD *)(v149 + 8) = 2080;
      *(void *)(v149 + 10) = v150;
      __SC_log_send(5, (uint64_t)v145, v146, v148);
      uint64_t v151 = 1LL;
    }
  }

  else
  {
LABEL_144:
    uint64_t v151 = 0LL;
  }

  CFPropertyListRef Value = (const __CFArray *)SCPreferencesGetValue(v190, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFIndex v154 = CFArrayGetCount(Value);
    v155 = v198;
    if (v154 >= 1)
    {
      LODWORD(v194) = v151;
      v156 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      CFIndex v157 = CFArrayGetCount(Value);
      if (v157 >= 1)
      {
        CFIndex v159 = v157;
        v160 = 0LL;
        CFIndex v161 = 0LL;
        *(void *)&__int128 v158 = 138412290LL;
        __int128 v195 = v158;
        *(void *)&__int128 v196 = v156;
        while (1)
        {
          v162 = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v161);
          v163 = CFDictionaryGetValue(v162, @"BSD Name");
          v204.length = CFArrayGetCount(v155);
          v204.location = 0LL;
          if (CFArrayContainsValue(v155, v204, v163))
          {
            int v164 = CFDictionaryContainsKey(v162, @"Active");
            BOOL v166 = _sc_log == 1 || _sc_debug != 0;
            if (!v164)
            {
              if (_sc_verbose) {
                BOOL v166 = 1;
              }
              if (v166)
              {
                v174 = __log_SCNetworkConfiguration();
                uint64_t v175 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v174, (os_log_type_t)v175))
                {
                  uint64_t v176 = _os_log_pack_size();
                  int v177 = (int)v160;
                  v160 = (char *)&v188 - ((MEMORY[0x1895F8858](v176) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  __error();
                  v155 = v198;
                  uint64_t v178 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v178 = v195;
                  *(void *)(v178 + 4) = v163;
                  v179 = v160;
                  LODWORD(v160) = v177;
                  __SC_log_send(6, (uint64_t)v174, v175, v179);
                  v156 = (__CFArray *)v196;
                }
              }

              v160 = (char *)((_DWORD)v160 + 1);
              goto LABEL_168;
            }

            if (v166)
            {
              v167 = __log_SCNetworkConfiguration();
              uint64_t v168 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v167, (os_log_type_t)v168))
              {
                uint64_t v169 = _os_log_pack_size();
                *(void *)&__int128 v197 = &v188;
                v170 = v160;
                v171 = (char *)&v188 - ((MEMORY[0x1895F8858](v169) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                v155 = v198;
                uint64_t v172 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v172 = v195;
                *(void *)(v172 + 4) = v163;
                v173 = v171;
                v160 = v170;
                v156 = (__CFArray *)v196;
                __SC_log_send(6, (uint64_t)v167, v168, v173);
              }
            }
          }

          CFArrayAppendValue(v156, v162);
LABEL_168:
          if (v159 == ++v161) {
            goto LABEL_176;
          }
        }
      }

      LODWORD(v160) = 0;
LABEL_176:
      SCPreferencesSetValue(v190, @"Interfaces", v156);
      CFRelease(v156);
      uint64_t v5 = v193;
      uint64_t v151 = v194;
      if ((int)v160 > 0)
      {
        BOOL v181 = _sc_log != 1 && _sc_debug == 0;
        if (v181
          || (v182 = __log_SCNetworkConfiguration(),
              uint64_t v183 = _SC_syslog_os_log_mapping(6),
              !__SC_log_enabled(6, v182, (os_log_type_t)v183)))
        {
          uint64_t v151 = 1LL;
        }

        else
        {
          uint64_t v184 = _os_log_pack_size();
          v185 = (char *)&v188 - ((MEMORY[0x1895F8858](v184) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          v155 = v198;
          uint64_t v186 = _os_log_pack_fill();
          v187 = "s";
          if ((_DWORD)v160 == 1) {
            v187 = "";
          }
          *(_DWORD *)uint64_t v186 = 67109378;
          *(_DWORD *)(v186 + 4) = (_DWORD)v160;
          *(_WORD *)(v186 + 8) = 2080;
          *(void *)(v186 + 10) = v187;
          __SC_log_send(6, (uint64_t)v182, v183, v185);
          uint64_t v151 = 1LL;
        }
      }
    }
  }

  else
  {
    v155 = v198;
  }

  if (v5) {
    CFRelease(v5);
  }
  CFRelease(v155);
  return v151;
}

uint64_t __SCNetworkConfigurationCleanServiceOrderIssues(const __SCPreferences *a1)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  SCPreferencesRef v49 = a1;
  __int128 v1 = SCNetworkSetCopyAll(a1);
  if (v1)
  {
    mach_port_t v2 = v1;
    CFIndex Count = CFArrayGetCount(v1);
    if (Count < 1)
    {
      LOBYTE(v6) = 0;
      goto LABEL_47;
    }

    CFIndex v5 = Count;
    int v6 = 0;
    CFIndex v7 = 0LL;
    *(void *)&__int128 v4 = 138412546LL;
    __int128 v47 = v4;
    CFIndex v42 = Count;
    uint64_t v43 = v2;
    while (1)
    {
      ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v2, v7);
      CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
      ServiceOrder = SCNetworkSetGetServiceOrder(ValueAtIndex);
      if (!ServiceOrder) {
        goto LABEL_43;
      }
      uint64_t v10 = ServiceOrder;
      CFIndex v11 = CFArrayGetCount(ServiceOrder);
      if (v11 < 1) {
        goto LABEL_43;
      }
      CFIndex v12 = v11;
      SCNetworkSetRef v44 = ValueAtIndex;
      CFIndex v46 = v7;
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
      CFMutableStringRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, v10);
      CFIndex v15 = 0LL;
      do
      {
        uint64_t v16 = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v15);
        if (CFSetContainsValue(Mutable, v16))
        {
          if (_sc_log == 1 || _sc_debug != 0)
          {
            int v18 = __log_SCNetworkConfiguration();
            uint64_t v19 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
            {
              uint64_t v20 = _os_log_pack_size();
              CFIndex v21 = (char *)&v41 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v22 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v22 = v47;
              *(void *)(v22 + 4) = SetID;
              *(_WORD *)(v22 + 12) = 2112;
              *(void *)(v22 + 14) = v16;
              uint64_t v23 = (uint64_t)v18;
              uint64_t v24 = v19;
              CFIndex v25 = v21;
              goto LABEL_14;
            }
          }

          goto LABEL_24;
        }

        CFSetAddValue(Mutable, v16);
        SCNetworkServiceRef v26 = SCNetworkServiceCopy(v49, v16);
        if (!v26)
        {
          if (_sc_log == 1 || _sc_debug != 0)
          {
            uint64_t v29 = __log_SCNetworkConfiguration();
            uint64_t v30 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v29, (os_log_type_t)v30))
            {
              uint64_t v31 = _os_log_pack_size();
              CFIndex v32 = (char *)&v41 - ((MEMORY[0x1895F8858](v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v33 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v33 = v47;
              *(void *)(v33 + 4) = SetID;
              *(_WORD *)(v33 + 12) = 2112;
              *(void *)(v33 + 14) = v16;
              uint64_t v23 = (uint64_t)v29;
              uint64_t v24 = v30;
              CFIndex v25 = v32;
LABEL_14:
              __SC_log_send(5, v23, v24, v25);
            }
          }

LABEL_24:
          CFArrayRemoveValueAtIndex(MutableCopy, v15);
          --v12;
          goto LABEL_25;
        }

        SCNetworkServiceRef v27 = v26;
        if (__SCNetworkServiceExists((uint64_t)v26))
        {
          CFRelease(v27);
          ++v15;
          continue;
        }

        if (_sc_log == 1 || _sc_debug != 0)
        {
          CFStringRef v35 = __log_SCNetworkConfiguration();
          uint64_t v36 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
          {
            uint64_t v37 = _os_log_pack_size();
            int v45 = &v41;
            CFIndex v38 = (char *)&v41 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v39 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v39 = v47;
            *(void *)(v39 + 4) = SetID;
            *(_WORD *)(v39 + 12) = 2112;
            *(void *)(v39 + 14) = v16;
            __SC_log_send(5, (uint64_t)v35, v36, v38);
          }
        }

        CFArrayRemoveValueAtIndex(MutableCopy, v15);
        --v12;
        CFRelease(v27);
LABEL_25:
        int v6 = 1;
      }

      while (v15 < v12);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (MutableCopy)
      {
        mach_port_t v2 = v43;
        if (v6) {
          SCNetworkSetSetServiceOrder(v44, MutableCopy);
        }
        CFRelease(MutableCopy);
      }

      else
      {
        mach_port_t v2 = v43;
      }

      CFIndex v5 = v42;
      CFIndex v7 = v46;
LABEL_43:
      if (++v7 == v5)
      {
LABEL_47:
        CFRelease(v2);
        return v6;
      }
    }
  }

  LOBYTE(v6) = 0;
  return v6;
}

    CFRelease(v7);
    CFRelease(v11);
    return v10;
  }

  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(name) == TypeID)
  {
    if (CFStringGetLength(name)) {
      int v6 = name;
    }
    else {
      int v6 = 0LL;
    }
    goto LABEL_7;
  }

  _SCErrorSet(1002);
  LOBYTE(v10) = 0;
  return v10;
}

  if (v9) {
    goto LABEL_25;
  }
  if (!v10) {
    int v18 = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  }
LABEL_30:
  pthread_mutex_unlock(v3);
  return v18;
}

    CFRelease(v3);
    if (!v6)
    {
LABEL_26:
      if (v7) {
        return;
      }
      goto LABEL_27;
    }

    NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, @"State:", @"Proxies");
    CFIndex v11 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, NetworkGlobalEntity);
    CFRelease(NetworkGlobalEntity);
    int v18 = CFDictionaryGetTypeID();
    if (!v11) {
      return CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }
    if (CFGetTypeID(v11) != v18 || !CFDictionaryContainsKey(v11, @"BypassAllowed")) {
      goto LABEL_30;
    }
    uint64_t v19 = CFDictionaryCreateMutableCopy(0LL, 0LL, v11);
    CFRelease(v11);
    CFDictionaryRemoveValue(v19, @"BypassAllowed");
    goto LABEL_29;
  }

  _SCErrorSet(1002);
  return 0LL;
}

  int v18 = CFDictionaryGetValue(MutableCopy, @"ExcludeSimpleHostnames");
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = CFNumberGetTypeID();
    if (CFGetTypeID(v19) != v20 || !CFNumberGetValue((CFNumberRef)v19, kCFNumberIntType, v32))
    {
      LODWORD(v32[0]) = 0;
      CFIndex v21 = CFNumberCreate(0LL, kCFNumberIntType, v32);
      CFDictionarySetValue(MutableCopy, @"ExcludeSimpleHostnames", v21);
      CFRelease(v21);
    }
  }

  uint64_t v22 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"__SCOPED__");
  uint64_t v23 = CFDictionaryGetTypeID();
  if (v22 && CFGetTypeID(v22) == v23)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionaryApplyFunction(v22, (CFDictionaryApplierFunction)normalize_scoped_proxy, Mutable);
    CFDictionarySetValue(MutableCopy, @"__SCOPED__", Mutable);
    CFRelease(Mutable);
  }

  CFIndex v25 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"__SERVICES__");
  SCNetworkServiceRef v26 = CFDictionaryGetTypeID();
  if (v25 && CFGetTypeID(v25) == v26)
  {
    SCNetworkServiceRef v27 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionaryApplyFunction(v25, (CFDictionaryApplierFunction)normalize_services_proxy, v27);
    CFDictionarySetValue(MutableCopy, @"__SERVICES__", v27);
    CFRelease(v27);
  }

  uint64_t v28 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"__SUPPLEMENTAL__");
  uint64_t v29 = CFArrayGetTypeID();
  if (v28)
  {
    if (CFGetTypeID(v28) == v29)
    {
      uint64_t v30 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      v33.length = CFArrayGetCount(v28);
      v33.location = 0LL;
      CFArrayApplyFunction(v28, v33, (CFArrayApplierFunction)normalize_supplemental_proxy, v30);
      CFDictionarySetValue(MutableCopy, @"__SUPPLEMENTAL__", v30);
      CFRelease(v30);
    }
  }

  CFStringRef Copy = CFDictionaryCreateCopy(0LL, MutableCopy);
  CFRelease(MutableCopy);
  return Copy;
}

  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
  CFProperty = BSDName;
  if (BSDName) {
    CFRetain(BSDName);
  }
  return CFProperty;
}

    uint64_t v22 = 0LL;
LABEL_29:
    SCNetworkServiceRemove(v7);
    CFRelease(v7);
    return v22;
  }

  CFIndex v8 = SCNetworkSetCopyCurrent(prefs);
  if (v8)
  {
    CFIndex v9 = v8;
    uint64_t v10 = SCNetworkSetAddService(v8, v7);
    if (!(_DWORD)v10)
    {
      CFIndex v11 = _SC_LOG_DEFAULT();
      CFIndex v12 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
      {
        CFStringRef v13 = _os_log_pack_size();
        uint64_t v14 = (char *)v39 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v11, v12, v14);
      }

      SCNetworkServiceRemove(v7);
    }

    CFRelease(v7);
LABEL_16:
    CFRelease(v9);
    return v10;
  }

  uint64_t v22 = 1LL;
LABEL_26:
  uint64_t v34 = _SC_LOG_DEFAULT();
  CFStringRef v35 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v34, (os_log_type_t)v35))
  {
    uint64_t v36 = _os_log_pack_size();
    uint64_t v37 = (char *)v39 - ((MEMORY[0x1895F8858](v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v34, v35, v37);
  }

  if (v7) {
    goto LABEL_29;
  }
  return v22;
}

  uint64_t v20 = _SC_LOG_DEFAULT();
  CFIndex v21 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
  {
    uint64_t v22 = _os_log_pack_size();
    uint64_t v23 = &v35[-((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    uint64_t v24 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v24 = 136315138;
    *(void *)(v24 + 4) = "SCNSManagerApplyChanges";
    __SC_log_send(5, (uint64_t)v20, v21, v23);
  }

  uint64_t v10 = 0LL;
LABEL_34:
  CFIndex v32 = a1[6];
  if (v32)
  {
    CFRelease(v32);
    a1[6] = 0LL;
  }

  uint64_t v33 = a1[7];
  if (v33)
  {
    CFRelease(v33);
    a1[7] = 0LL;
  }

  return v10;
}

        *a2 = 1;
LABEL_25:
        if (v8) {
          CFRelease(v8);
        }
        return;
      }

      uint64_t v14 = (const __CFString *)a1[5];
      if (v14 && (CFIndex v15 = SCNetworkSetCopy(*(SCPreferencesRef *)(v6 + 16), v14)) != 0LL)
      {
        uint64_t v16 = v15;
        CFArrayRef v17 = SCNetworkSetCopyServices(v15);
        if (v17 && (int v18 = v17, v19 = copy_service_in_list_by_ID(v17, ServiceID), CFRelease(v18), v19))
        {
          uint64_t v20 = SCNetworkSetRemoveService(v16, v19);
          CFRelease(v16);
          if (v20) {
            return;
          }
        }

        else
        {
          CFRelease(v16);
        }

        CFStringRef v35 = _SC_LOG_DEFAULT();
        uint64_t v36 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
        {
          uint64_t v37 = _os_log_pack_size();
          CFIndex v38 = (char *)v41 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v39 = _os_log_pack_fill();
          group v40 = a1[5];
          *(_DWORD *)uint64_t v39 = 136315650;
          *(void *)(v39 + 4) = "managerRemove";
          *(_WORD *)(v39 + 12) = 2112;
          *(void *)(v39 + 14) = ServiceID;
          *(_WORD *)(v39 + 22) = 2112;
          *(void *)(v39 + 24) = v40;
          CFIndex v32 = (uint64_t)v35;
          uint64_t v33 = v36;
          uint64_t v34 = v38;
          goto LABEL_22;
        }
      }

      else
      {
        SCNetworkServiceRef v26 = _SC_LOG_DEFAULT();
        SCNetworkServiceRef v27 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v26, (os_log_type_t)v27))
        {
          uint64_t v28 = _os_log_pack_size();
          uint64_t v29 = (char *)v41 - ((MEMORY[0x1895F8858](v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v30 = _os_log_pack_fill();
          uint64_t v31 = a1[5];
          *(_DWORD *)uint64_t v30 = 136315394;
          *(void *)(v30 + 4) = "managerRemove";
          *(_WORD *)(v30 + 12) = 2112;
          *(void *)(v30 + 14) = v31;
          CFIndex v32 = (uint64_t)v26;
          uint64_t v33 = v27;
          uint64_t v34 = v29;
LABEL_22:
          __SC_log_send(5, v32, v33, v34);
          CFIndex v8 = 0LL;
          goto LABEL_24;
        }
      }

      CFIndex v8 = 0LL;
      goto LABEL_24;
    }
  }

      mach_msg_destroy(&msg);
      return v13;
    }

    mig_dealloc_special_reply_port();
  }

  return v13;
}

      mach_msg_destroy(&v18);
      return v14;
    }

    mig_dealloc_special_reply_port();
  }

  return v14;
}

      mach_msg_destroy(&msg);
      return v14;
    }

    mig_dealloc_special_reply_port();
  }

  return v14;
}

      mach_msg_destroy(&msg);
      return v10;
    }

    mig_dealloc_special_reply_port();
  }

  return v10;
}

void thinInlineBackup(const __CFString *a1, const __SCPreferences *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __int128 v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    CFIndex v7 = (char *)&v13 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v8 + 4) = a1;
    __SC_log_send(5, (uint64_t)v4, v5, v7);
  }

  CFStringRef v9 = CFStringCreateWithFormat(0LL, 0LL, @"%@ : ", a1);
  uint64_t v10 = _SC_cfstring_to_cstring(a1, 0LL, 0LL, 0x600u);
  if (!v10) {
    goto LABEL_8;
  }
  CFIndex v11 = v10;
  memset(&v13, 0, sizeof(v13));
  if (!strptime((const char *)v10, "%Y-%m-%d %H:%M:%S", &v13))
  {
    CFAllocatorDeallocate(0LL, v11);
LABEL_8:
    CFIndex v12 = CFStringCreateWithFormat(0LL, 0LL, @"preferences-%@.plist", a1);
    goto LABEL_9;
  }

  CFIndex v12 = CFStringCreateWithFormat( 0LL,  0LL,  @"preferences-%4d-%02d-%02d-%02d%02d%02d.plist",  (v13.tm_year + 1900),  (v13.tm_mon + 1),  v13.tm_mday,  v13.tm_hour,  v13.tm_min,  v13.tm_sec);
  CFAllocatorDeallocate(0LL, v11);
  if (!v12) {
    goto LABEL_8;
  }
LABEL_9:
  savePreferences(a2, v12, (uint64_t)v9, 0LL, 0LL);
  CFRelease(v12);
  CFRelease(v9);
}

void thinInlineModel(const void *a1, const __SCPreferences *a2)
{
  v11[1] = *MEMORY[0x1895F89C0];
  __int128 v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    CFIndex v7 = (char *)v11 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v8 + 4) = a1;
    __SC_log_send(5, (uint64_t)v4, v5, v7);
  }

  CFStringRef v9 = CFStringCreateWithFormat(0LL, 0LL, @"%@:", a1);
  uint64_t v10 = CFStringCreateWithFormat(0LL, 0LL, @"preferences-%@.plist", a1);
  savePreferences(a2, v10, (uint64_t)v9, @"Model", a1);
  CFRelease(v10);
  CFRelease(v9);
}

uint64_t thinRemove(const __CFArray *a1, const void *a2)
{
  v6.length = CFArrayGetCount(a1);
  v6.location = 0LL;
  FirstIndexOfCFPropertyListRef Value = CFArrayGetFirstIndexOfValue(a1, v6, a2);
  if (FirstIndexOfValue == -1) {
    return 0LL;
  }
  CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  return 1LL;
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    CFPropertyListRef result = CFDictionaryGetValue(*((CFDictionaryRef *)prefs + 35), key);
    if (result) {
      return result;
    }
    int v5 = 1004;
  }

  else
  {
    int v5 = 3001;
  }

  _SCErrorSet(v5);
  return 0LL;
}

Boolean SCPreferencesAddValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  if (!prefs)
  {
    int v6 = 3001;
    goto LABEL_5;
  }

  __SCPreferencesAccess((uint64_t)prefs);
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)prefs + 35), key))
  {
    int v6 = 1005;
LABEL_5:
    _SCErrorSet(v6);
    return 0;
  }

  CFDictionaryAddValue(*((CFMutableDictionaryRef *)prefs + 35), key, value);
  Boolean result = 1;
  *((_BYTE *)prefs + 305) = 1;
  return result;
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)prefs + 35), key, value);
    Boolean result = 1;
    *((_BYTE *)prefs + 305) = 1;
  }

  else
  {
    _SCErrorSet(3001);
    return 0;
  }

  return result;
}

uint64_t SCPreferencesRemoveAllValues(uint64_t a1)
{
  if (a1)
  {
    __SCPreferencesAccess(a1);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 280));
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 305) = 1;
  }

  else
  {
    _SCErrorSet(3001);
    return 0LL;
  }

  return result;
}

Boolean SCPreferencesRemoveValue(SCPreferencesRef prefs, CFStringRef key)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    if (CFDictionaryContainsKey(*((CFDictionaryRef *)prefs + 35), key))
    {
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)prefs + 35), key);
      Boolean result = 1;
      *((_BYTE *)prefs + 305) = 1;
      return result;
    }

    int v5 = 1004;
  }

  else
  {
    int v5 = 3001;
  }

  _SCErrorSet(v5);
  return 0;
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  uint64_t v127 = *MEMORY[0x1895F89C0];
  if (!prefs)
  {
    _SCErrorSet(3001);
    return 0;
  }

  int v2 = *((unsigned __int8 *)prefs + 112);
  if (!*((_BYTE *)prefs + 112) && !SCPreferencesLock(prefs, 1u))
  {
    uint64_t v16 = __log_SCPreferences();
    uint64_t v17 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v19 = (char *)&v124 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v16, v17, v19);
    }

    return 0;
  }

  if (*((void *)prefs + 39))
  {
    if (__SCPreferencesCommitChanges_helper((uint64_t)prefs))
    {
      *((_BYTE *)prefs + 305) = 0;
      Boolean v3 = 1;
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (!*((_BYTE *)prefs + 305)) {
    goto LABEL_48;
  }
  if (__SCPreferencesIsEmpty((uint64_t)prefs))
  {
    __int128 v4 = (const __CFDictionary *)*((void *)prefs + 12);
    if (v4)
    {
      if (CFDictionaryGetValueIfPresent(v4, @"remove-when-empty", (const void **)&value))
      {
        int v5 = *(const void **)&value.st_dev;
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (v5)
        {
          if (CFGetTypeID(v5) == TypeID && CFBooleanGetValue(*(CFBooleanRef *)&value.st_dev))
          {
            unlink(*((const char **)prefs + 13));
            memset(&value, 0, sizeof(value));
            goto LABEL_43;
          }
        }
      }
    }
  }

  CFIndex v7 = (const char *)*((void *)prefs + 13);
  if (stat(v7, &value) == -1)
  {
    if (*__error() != 2)
    {
      BOOL v53 = __error();
      _SCErrorSet(*v53);
      uint64_t v54 = __log_SCPreferences();
      uint64_t v55 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v54, (os_log_type_t)v55))
      {
        uint64_t v56 = _os_log_pack_size();
        CFIndex v57 = (char *)&v124 - ((MEMORY[0x1895F8858](v56) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v58 = _os_log_pack_fill();
        CFStringRef v59 = __error();
        uint64_t v60 = strerror(*v59);
        *(_DWORD *)uint64_t v58 = 136315138;
        *(void *)(v58 + 4) = v60;
        __SC_log_send(6, (uint64_t)v54, v55, v57);
      }

      goto LABEL_78;
    }

    memset(&value, 0, sizeof(value));
    value.st_mode = 420;
    value.st_uid = geteuid();
    value.st_gid = getegid();
  }

  size_t v8 = strlen(v7) + 5;
  CFStringRef v9 = (char *)MEMORY[0x186E08750](0LL, v8, 0LL);
  snprintf(v9, v8, "%s-new", v7);
  uint64_t v10 = (const __CFDictionary *)*((void *)prefs + 12);
  if (!v10 || !CFDictionaryGetValueIfPresent(v10, @"ProtectionClass", (const void **)&v125))
  {
    int v20 = open(v9, 513, value.st_mode);
    goto LABEL_31;
  }

  CFIndex v11 = v125;
  CFTypeID v12 = CFStringGetTypeID();
  if (v11)
  {
    if (CFGetTypeID(v11) == v12 && CFStringGetLength((CFStringRef)v125) == 1)
    {
      CStringPtr = CFStringGetCStringPtr((CFStringRef)v125, 0x600u);
      if (CStringPtr)
      {
        int v14 = *(unsigned __int8 *)CStringPtr;
        if ((v14 - 71) >= 0xFFFFFFFA)
        {
          int v20 = open_dprotected_np(v9, 513, v14 - 64, 0, value.st_mode);
LABEL_31:
          int v21 = v20;
          if (v20 == -1)
          {
            int v45 = __error();
            _SCErrorSet(*v45);
            CFIndex v46 = __log_SCPreferences();
            uint64_t v47 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v46, (os_log_type_t)v47))
            {
              uint64_t v48 = _os_log_pack_size();
              SCPreferencesRef v49 = (char *)&v124 - ((MEMORY[0x1895F8858](v48) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v50 = _os_log_pack_fill();
              int v51 = __error();
              uint64_t v52 = strerror(*v51);
              *(_DWORD *)uint64_t v50 = 136315138;
              *(void *)(v50 + 4) = v52;
              __SC_log_send(5, (uint64_t)v46, v47, v49);
            }
          }

          else
          {
            fchown(v20, value.st_uid, value.st_gid);
            fchmod(v21, value.st_mode);
            Data = CFPropertyListCreateData( 0LL,  *((CFPropertyListRef *)prefs + 35),  kCFPropertyListBinaryFormat_v1_0,  0LL,  0LL);
            if (!Data)
            {
              _SCErrorSet(1001);
              int v61 = __log_SCPreferences();
              uint64_t v62 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v61, (os_log_type_t)v62))
              {
                uint64_t v63 = _os_log_pack_size();
                uint64_t v64 = (char *)&v124 - ((MEMORY[0x1895F8858](v63) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                *(_WORD *)_os_log_pack_fill() = 0;
                __SC_log_send(6, (uint64_t)v61, v62, v64);
              }

              uint64_t v65 = __log_SCPreferences();
              uint64_t v66 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v65, (os_log_type_t)v66))
              {
                uint64_t v67 = _os_log_pack_size();
                uint64_t v68 = (char *)&v124 - ((MEMORY[0x1895F8858](v67) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v69 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v69 = 136315138;
                *(void *)(v69 + 4) = v7;
                __SC_log_send(6, (uint64_t)v65, v66, v68);
              }

              CFAllocatorDeallocate(0LL, v9);
              close(v21);
              goto LABEL_78;
            }

            uint64_t v23 = Data;
            BytePtr = CFDataGetBytePtr(Data);
            CFIndex Length = CFDataGetLength(v23);
            if (Length)
            {
              CFIndex v26 = Length;
              size_t v27 = Length;
              do
              {
                ssize_t v28 = write(v21, BytePtr, v27);
                if (v28 == -1)
                {
                  if (*__error() != 4) {
                    goto LABEL_67;
                  }
                  ssize_t v28 = 0LL;
                }

                BytePtr += v28;
                v27 -= v28;
              }

              while (v27);
              if (v26 != -1) {
                goto LABEL_40;
              }
LABEL_67:
              v70 = __error();
              _SCErrorSet(*v70);
              uint64_t v71 = __log_SCPreferences();
              uint64_t v72 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v71, (os_log_type_t)v72))
              {
                uint64_t v73 = _os_log_pack_size();
                uint64_t v74 = (char *)&v124 - ((MEMORY[0x1895F8858](v73) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v75 = _os_log_pack_fill();
                uint64_t v76 = __error();
                v77 = strerror(*v76);
                *(_DWORD *)uint64_t v75 = 136315138;
                *(void *)(v75 + 4) = v77;
                __SC_log_send(6, (uint64_t)v71, v72, v74);
              }

              uint64_t v78 = __log_SCPreferences();
              uint64_t v79 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v78, (os_log_type_t)v79))
              {
                uint64_t v80 = _os_log_pack_size();
                uint64_t v81 = (char *)&v124 - ((MEMORY[0x1895F8858](v80) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v82 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v82 = 136315138;
                *(void *)(v82 + 4) = v9;
                __SC_log_send(6, (uint64_t)v78, v79, v81);
              }

              unlink(v9);
              CFAllocatorDeallocate(0LL, v9);
              close(v21);
              goto LABEL_77;
            }

LABEL_40:
            if (close(v21) == -1)
            {
              uint64_t v83 = __error();
              _SCErrorSet(*v83);
              CFIndex v84 = __log_SCPreferences();
              uint64_t v85 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v84, (os_log_type_t)v85))
              {
                uint64_t v86 = _os_log_pack_size();
                v87 = (char *)&v124 - ((MEMORY[0x1895F8858](v86) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v88 = _os_log_pack_fill();
                __int128 v89 = __error();
                CFIndex v90 = strerror(*v89);
                *(_DWORD *)uint64_t v88 = 136315138;
                *(void *)(v88 + 4) = v90;
                __SC_log_send(6, (uint64_t)v84, v85, v87);
              }

              v91 = __log_SCPreferences();
              uint64_t v92 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v91, (os_log_type_t)v92))
              {
                uint64_t v93 = _os_log_pack_size();
                CFIndex v94 = (char *)&v124 - ((MEMORY[0x1895F8858](v93) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v95 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v95 = 136315138;
                *(void *)(v95 + 4) = v9;
                __SC_log_send(6, (uint64_t)v91, v92, v94);
              }

              unlink(v9);
              CFAllocatorDeallocate(0LL, v9);
LABEL_77:
              CFRelease(v23);
              goto LABEL_78;
            }

            CFRelease(v23);
            if (rename(v9, v7) != -1)
            {
              CFAllocatorDeallocate(0LL, v9);
              if (stat(v7, &value) == -1)
              {
                CFIndex v111 = __error();
                _SCErrorSet(*v111);
                v112 = __log_SCPreferences();
                uint64_t v113 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v112, (os_log_type_t)v113))
                {
                  uint64_t v114 = _os_log_pack_size();
                  CFStringRef v115 = (char *)&v124 - ((MEMORY[0x1895F8858](v114) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  __error();
                  uint64_t v116 = _os_log_pack_fill();
                  v117 = __error();
                  uint64_t v118 = strerror(*v117);
                  *(_DWORD *)uint64_t v116 = 136315138;
                  *(void *)(v116 + 4) = v118;
                  __SC_log_send(6, (uint64_t)v112, v113, v115);
                }

                uint64_t v119 = __log_SCPreferences();
                uint64_t v120 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v119, (os_log_type_t)v120))
                {
                  uint64_t v121 = _os_log_pack_size();
                  CFIndex v122 = (char *)&v124 - ((MEMORY[0x1895F8858](v121) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  __error();
                  uint64_t v123 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v123 = 136315138;
                  *(void *)(v123 + 4) = v9;
                  __SC_log_send(6, (uint64_t)v119, v120, v122);
                }

                goto LABEL_78;
              }

        _Block_object_dispose(&v48, 8);
        break;
      default:
        break;
    }
  }

  ssize_t v28 = (os_log_s *)__log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    ssize_t v28 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v28;
  }

  uint64_t v29 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v28, (os_log_type_t)v29))
  {
    uint64_t v30 = _os_log_pack_size();
    uint64_t v31 = (char *)applier - ((MEMORY[0x1895F8858](v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v32 = _os_log_pack_fill();
    uint64_t v33 = *((_DWORD *)v45 + 6);
    uint64_t v34 = v41[3];
    *(_DWORD *)uint64_t v32 = 136315906;
    *(void *)(v32 + 4) = a1;
    *(_WORD *)(v32 + 12) = 2080;
    *(void *)(v32 + 14) = a2;
    *(_WORD *)(v32 + 22) = 1024;
    *(_DWORD *)(v32 + 24) = v33;
    *(_WORD *)(v32 + 28) = 2080;
    *(void *)(v32 + 30) = v34;
    __SC_log_send(7, (uint64_t)v28, v29, v31);
  }

  uint64_t v35 = *((_DWORD *)v45 + 6);
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  return v35 & 0xFFFFFF;
}

LABEL_48:
              uint64_t v30 = __log_SCPreferences();
              uint64_t v31 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v30, (os_log_type_t)v31))
              {
                uint64_t v37 = _os_log_pack_size();
                uint64_t v33 = (char *)&v124 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v38 = _os_log_pack_fill();
                uint64_t v39 = *((void *)prefs + 13);
                *(_DWORD *)uint64_t v38 = 136315138;
                *(void *)(v38 + 4) = v39;
                goto LABEL_50;
              }

        if (a4 && *a4)
        {
          CFRelease(*a4);
          *a4 = 0LL;
        }

        if (a6 && *a6)
        {
          CFRelease(*a6);
          size_t v27 = 0;
          *a6 = 0LL;
        }

        else
        {
          size_t v27 = 0;
        }

        ssize_t v28 = 1001;
        goto LABEL_56;
      }

LABEL_51:
              int v40 = SCDynamicStoreNotifyValue(0LL, *((CFStringRef *)prefs + 23));
              if (v40)
              {
                Boolean v3 = v40;
                *((_BYTE *)prefs + 305) = 0;
                goto LABEL_79;
              }

              uint64_t v41 = __log_SCPreferences();
              uint64_t v42 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v41, (os_log_type_t)v42))
              {
                uint64_t v43 = _os_log_pack_size();
                SCNetworkSetRef v44 = (char *)&v124 - ((MEMORY[0x1895F8858](v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                *(_WORD *)_os_log_pack_fill() = 0;
                __SC_log_send(6, (uint64_t)v41, v42, v44);
              }

              int v15 = 1001;
              goto LABEL_56;
            }

            CFStringRef v98 = __error();
            _SCErrorSet(*v98);
            CFStringRef v99 = __log_SCPreferences();
            uint64_t v100 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v99, (os_log_type_t)v100))
            {
              uint64_t v101 = _os_log_pack_size();
              uint64_t v102 = (char *)&v124 - ((MEMORY[0x1895F8858](v101) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v103 = _os_log_pack_fill();
              v104 = __error();
              uint64_t v105 = strerror(*v104);
              *(_DWORD *)uint64_t v103 = 136315138;
              *(void *)(v103 + 4) = v105;
              __SC_log_send(6, (uint64_t)v99, v100, v102);
            }

            v106 = __log_SCPreferences();
            uint64_t v107 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v106, (os_log_type_t)v107))
            {
              uint64_t v108 = _os_log_pack_size();
              __int128 v109 = (char *)&v124 - ((MEMORY[0x1895F8858](v108) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v110 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v110 = 136315394;
              *(void *)(v110 + 4) = v9;
              *(_WORD *)(v110 + 12) = 2080;
              *(void *)(v110 + 14) = v7;
              __SC_log_send(6, (uint64_t)v106, v107, v109);
            }
          }

          CFAllocatorDeallocate(0LL, v9);
          goto LABEL_78;
        }
      }
    }
  }

  int v15 = 1002;
LABEL_56:
  _SCErrorSet(v15);
LABEL_78:
  Boolean v3 = 0;
LABEL_79:
  if (!v2)
  {
    int v96 = SCError();
    SCPreferencesUnlock(prefs);
    _SCErrorSet(v96);
  }

  return v3;
}

          if (CFEqual(v9, @"Ethernet")
            && (!CFDictionaryGetValueIfPresent(a2, @"UserDefinedName", (const void **)&value)
             || !CFEqual(value, @"Bluetooth PAN")))
          {
            ssize_t v28 = v5;
            if (v5 || (ssize_t v28 = SCPreferencesCreate(0LL, @"SCNetworkInterface", 0LL)) != 0LL)
            {
              if (CFDictionaryContainsKey(a2, @"_NO_BRIDGE_INTERFACES_")
                || (CFStringRef Copy = (uint64_t)findBridgeInterface(v28, v91)) == 0)
              {
                if (CFDictionaryContainsKey(a2, @"_NO_VLAN_INTERFACES_")) {
                  CFStringRef Copy = 0LL;
                }
                else {
                  CFStringRef Copy = (uint64_t)findVLANInterface(v28, v91);
                }
              }

              if (v5) {
                int v5 = v28;
              }
              else {
                CFRelease(v28);
              }
              goto LABEL_111;
            }

            int v5 = 0LL;
          }

          CFStringRef Copy = 0LL;
LABEL_111:
          CFRelease(v92);
          goto LABEL_112;
        }

        uint64_t v88 = MatchingInterfaces;
        CFIndex Count = (CFIndex)@"PPP";
        v87 = (_BYTE *)v21;
        if (v90)
        {
          if (v21 >= 1)
          {
            uint64_t v24 = 0LL;
            for (CFIndex i = 0LL; (_BYTE *)i != v87; ++i)
            {
              CFStringRef Copy = (uint64_t)CFArrayGetValueAtIndex(v88, i);
              CFIndex v26 = *(const __CFString **)(Copy + 120);
              if (v90 == v26 || v26 && CFEqual(v90, v26))
              {
                if (v24) {
                  goto LABEL_107;
                }
              }

              else
              {
                CFStringRef Copy = v24;
              }

              uint64_t v24 = Copy;
            }

  BOOL v53 = __SCNetworkInterfaceCopyStoredWithPreferences(a2);
  if (v53)
  {
    uint64_t v54 = v53;
    MappingUsingCFStringRef BSDName = __SCNetworkInterfaceCreateMappingUsingBSDName(v53);
    CFRelease(v54);
    uint64_t v56 = CFDictionaryGetTypeID();
    if (!MappingUsingBSDName || CFGetTypeID(MappingUsingBSDName) != v56)
    {
      v180 = 0;
      uint64_t v66 = __log_SCNetworkConfiguration();
      uint64_t v67 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v66, (os_log_type_t)v67))
      {
        uint64_t v68 = _os_log_pack_size();
        uint64_t v69 = (char *)&v168 - ((MEMORY[0x1895F8858](v68) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        v70 = _os_log_pack_fill();
        *(_DWORD *)v70 = 138412290;
        *(void *)(v70 + 4) = a2;
        __SC_log_send(5, (uint64_t)v66, v67, v69);
      }

      uint64_t v71 = 0LL;
      CFStringRef v59 = 0LL;
      int v177 = 0LL;
      uint64_t v72 = 0LL;
      uint64_t v63 = 0LL;
      CFMutableDictionaryRef Mutable = 0LL;
      uint64_t v73 = 0LL;
      uint64_t v74 = 0LL;
      if (!MappingUsingBSDName) {
        goto LABEL_63;
      }
      goto LABEL_132;
    }

    CFIndex v57 = __SCNetworkServiceCopyAllInterfaces(v179);
    if (v57)
    {
      uint64_t v58 = v57;
      logInterfaces((uint64_t)"interfaces", v57, 1);
      CFStringRef v59 = __SCNetworkInterfaceCreateMappingUsingBSDName(v58);
      CFRelease(v58);
      if (v59)
      {
        uint64_t v176 = a2;
        LODWORD(context) = 7;
        v182 = "mappingServiceBSDNameToInterface";
        CFDictionaryApplyFunction(v59, (CFDictionaryApplierFunction)logMapping_one, &context);
        uint64_t v60 = (int)v178;
        if ((_DWORD)v178)
        {
          int v61 = (const CFArrayCallBacks *)MEMORY[0x189605228];
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
          uint64_t v63 = CFArrayCreateMutable(0LL, 0LL, v61);
          uint64_t v64 = CFArrayCreateMutable(0LL, 0LL, v61);
          uint64_t v65 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        }

        else
        {
          uint64_t v65 = 0LL;
          uint64_t v64 = 0LL;
          uint64_t v63 = 0LL;
          CFMutableDictionaryRef Mutable = 0LL;
        }

        v185 = &v180;
        uint64_t v186 = Mutable;
        v187 = v63;
        __int128 v188 = v64;
        v173 = v64;
        uint64_t v183 = 0LL;
        uint64_t v184 = MappingUsingBSDName;
        SCDynamicStoreContext context = 0LL;
        v182 = 0LL;
        CFIndex v191 = v60;
        __int128 v189 = v65;
        SCPreferencesRef v190 = v179;
        int v177 = (uint64_t *)v65;
        CFDictionaryApplyFunction(v59, (CFDictionaryApplierFunction)_SCNetworkConfigurationValidateInterface, &context);
        v174 = v63;
        if (v180)
        {
LABEL_97:
          uint64_t v74 = SCNetworkServiceCopyAll(v179);
          CFStringRef v98 = CFArrayGetTypeID();
          uint64_t v175 = v24;
          if (v74 && CFGetTypeID(v74) == v98)
          {
            uint64_t v73 = SCNetworkSetCopyAll(v179);
            CFStringRef v99 = CFArrayGetTypeID();
            if (v73 && CFGetTypeID(v73) == v99)
            {
              uint64_t v71 = 0LL;
              if (CFArrayGetCount(v73) >= 1 && v180)
              {
                uint64_t v101 = 0LL;
                *(void *)&uint64_t v100 = 138412546LL;
                v170 = v100;
                do
                {
                  uint64_t v178 = (const __CFArray *)v101;
                  ValueAtIndex = (SCNetworkSetRef)CFArrayGetValueAtIndex(v73, v101);
                  uint64_t v102 = SCNetworkSetCopyServices(ValueAtIndex);
                  if (v102)
                  {
                    uint64_t v71 = v102;
                    if (CFArrayGetCount(v102) >= 1)
                    {
                      uint64_t v103 = 0LL;
                      while (1)
                      {
                        v104 = CFArrayGetValueAtIndex(v71, v103);
                        v195.length = CFArrayGetCount(v74);
                        v195.location = 0LL;
                        if (!CFArrayContainsValue(v74, v195, v104)) {
                          break;
                        }
                        if (++v103 >= CFArrayGetCount(v71)) {
                          goto LABEL_114;
                        }
                      }

                      v180 = 0;
                      uint64_t v113 = __log_SCNetworkConfiguration();
                      uint64_t v114 = _SC_syslog_os_log_mapping(5);
                      if (__SC_log_enabled(5, v113, (os_log_type_t)v114))
                      {
                        CFStringRef v115 = _os_log_pack_size();
                        v171 = (uint64_t *)&v168;
                        uint64_t v116 = MEMORY[0x1895F8858](v115);
                        uint64_t v169 = v113;
                        v117 = (char *)&v168 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                        __error();
                        *(_WORD *)_os_log_pack_fill() = 0;
                        __SC_log_send(5, (uint64_t)v169, v114, v117);
                      }
                    }

uint64_t __SCPreferencesCommitChanges_helper(uint64_t a1)
{
  v20[1] = *(CFDataRef *)MEMORY[0x1895F89C0];
  v20[0] = 0LL;
  int v19 = 0;
  CFTypeRef v18 = 0LL;
  mach_port_t v2 = *(_DWORD *)(a1 + 320);
  if (v2)
  {
    Boolean v3 = (mach_port_t *)(a1 + 320);
    if (*(_BYTE *)(a1 + 305))
    {
      if (!_SCSerialize(*(CFPropertyListRef *)(a1 + 280), v20, 0LL, 0LL))
      {
        int v19 = 1001;
        if (_sc_verbose)
        {
          CFIndex v7 = __log_SCPreferences();
          uint64_t v8 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
          {
            uint64_t v9 = _os_log_pack_size();
            uint64_t v10 = (char *)&v18 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v7, v8, v10);
          }

          CFIndex v11 = __log_SCPreferences();
          uint64_t v12 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
          {
            uint64_t v13 = _os_log_pack_size();
            int v14 = (char *)&v18 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v15 = _os_log_pack_fill();
            uint64_t v16 = *(void *)(a1 + 104);
            *(_DWORD *)uint64_t v15 = 136315138;
            *(void *)(v15 + 4) = v16;
            __SC_log_send(5, (uint64_t)v11, v12, v14);
          }
        }

        goto LABEL_22;
      }

      mach_port_t v2 = *v3;
      __int128 v4 = v20[0];
    }

    else
    {
      __int128 v4 = 0LL;
    }

    int v5 = _SCHelperExec(v2, 104, v4, &v19, &v18);
    if (v20[0]) {
      CFRelease(v20[0]);
    }
    if (v5)
    {
      if (!v19)
      {
        if (*(_BYTE *)(a1 + 305))
        {
          int v6 = *(const void **)(a1 + 144);
          if (v6) {
            CFRelease(v6);
          }
          *(void *)(a1 + 144) = v18;
        }

        else if (v18)
        {
          CFRelease(v18);
        }

        *(_BYTE *)(a1 + 305) = 0;
        return 1LL;
      }
    }

    else if (*v3)
    {
      _SCHelperClose((mach_port_t *)(a1 + 320));
    }
  }

  else
  {
    int v19 = 1003;
  }

LABEL_22:
  if (v18) {
    CFRelease(v18);
  }
  _SCErrorSet(v19);
  return 0LL;
}

  __SCPreferencesAccess((uint64_t)a1);
  *a3 = (const __CFDictionary *)*((void *)a1 + 35);
  int v19 = 1LL;
  int v6 = v17;
LABEL_23:
  CFRelease(v6);
  return v19;
}

  _SCErrorSet(v4);
  LOBYTE(v5) = 0;
LABEL_23:
  if (!v2)
  {
    int v20 = SCError();
    SCPreferencesUnlock(prefs);
    _SCErrorSet(v20);
  }

  return v5;
}

    CFRelease(v6);
    CFRelease(v10);
    return v9;
  }

  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(a2) == TypeID)
  {
    if (CFStringGetLength(a2)) {
      int v5 = a2;
    }
    else {
      int v5 = 0LL;
    }
    goto LABEL_7;
  }

  _SCErrorSet(1002);
  return 0LL;
}

    CFRelease(v8);
    CFRelease(v11);
    return v7;
  }

    _SCErrorSet(1002);
    return 0LL;
  }

  if (v3 || *(_BYTE *)(a1 + 112)) {
    goto LABEL_22;
  }
  int v5 = (os_log_s *)__log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    int v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v5;
  }

  int v6 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
  {
    CFIndex v7 = _os_log_pack_size();
    uint64_t v8 = (char *)block - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = a1 + 193;
    __SC_log_send(7, (uint64_t)v5, v6, v8);
  }

  dispatch_retain(a2);
  nw_path_evaluator_cancel();
  uint64_t v10 = *(_DWORD *)(a1 + 80);
  if (v10 < 2 || v10 == 3)
  {
    CFIndex v11 = (nw_endpoint **)(a1 + 104);
    goto LABEL_24;
  }

  if (v10 == 2)
  {
    CFIndex v11 = (nw_endpoint **)(a1 + 88);
LABEL_24:
    int v21 = *v11;
    goto LABEL_25;
  }

  int v21 = 0LL;
LABEL_25:
  evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();
  *(void *)(a1 + 240) = evaluator_for_endpoint;
  *(void *)(a1 + 184) = a2;
  *(_BYTE *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 113) = *(_DWORD *)(a1 + 80) < 2u;
  nw_release(*(void **)(a1 + 248));
  uint64_t v23 = (nw_path *)nw_path_evaluator_copy_path();
  *(void *)(a1 + 248) = v23;
  if (*(_DWORD *)(a1 + 80) <= 1u)
  {
    CrazyIvan46Path = __SCNetworkReachabilityCreateCrazyIvan46Path(v23, v21, *(nw_parameters **)(a1 + 232), 0);
    if (CrazyIvan46Path)
    {
      CFIndex v25 = CrazyIvan46Path;
      nw_release(*(void **)(a1 + 248));
      *(void *)(a1 + 248) = v25;
    }
  }

  nw_release(*(void **)(a1 + 256));
  *(void *)(a1 + 256) = nw_path_copy_derived_parameters();
  *(_DWORD *)(a1 + 272) = 0;
  nw_release(*(void **)(a1 + 280));
  *(void *)(a1 + 280) = 0LL;
  __SCNetworkReachabilityRestartResolver((void **)a1, (uint64_t)"Scheduled, start DNS");
  CFRetain((CFTypeRef)a1);
  CFIndex v26 = MEMORY[0x1895F87A8];
  block[11] = MEMORY[0x1895F87A8];
  block[12] = 0x40000000LL;
  block[13] = ____SCNetworkReachabilitySetDispatchQueue_block_invoke;
  block[14] = &__block_descriptor_tmp_103;
  block[15] = a1;
  block[16] = evaluator_for_endpoint;
  nw_path_evaluator_set_cancel_handler();
  void block[5] = v26;
  block[6] = 0x40000000LL;
  block[7] = ____SCNetworkReachabilitySetDispatchQueue_block_invoke_2;
  void block[8] = &__block_descriptor_tmp_107;
  block[9] = a1;
  block[10] = v21;
  if ((nw_path_evaluator_set_update_handler() & 1) == 0)
  {
    *(void *)(a1 + 240) = 0LL;
    nw_release(evaluator_for_endpoint);
    CFRelease((CFTypeRef)a1);
  }

  return 1LL;
}

  if (CFStringGetLength(v21) >= Length)
  {
    v50.location = 0LL;
    v50.length = Length;
    CFIndex v25 = CFStringCompareWithOptions(v21, @"bluetooth", v50, 1uLL) == kCFCompareEqualTo;
    if (!v20) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  CFIndex v25 = 0;
  if (v20) {
LABEL_26:
  }
    CFRelease(v20);
LABEL_27:
  if (!v25) {
    goto LABEL_30;
  }
  uint64_t v48 = 0;
  *(void *)(a1 + 16) = @"Bluetooth";
  *(_DWORD *)(a1 + 312) = 3;
  *(_BYTE *)(a1 + 176) = isBluetoothBuiltin(&v48);
  if (!v48) {
    goto LABEL_39;
  }
LABEL_34:
  *(void *)(a1 + 128) = @"Modem";
  ssize_t v28 = CFDictionaryGetValue(a3, @"IOSerialBSDClientType");
  uint64_t v29 = CFStringGetTypeID();
  if (v28 && CFGetTypeID(v28) == v29 && CFEqual(v28, @"IOSerialStream"))
  {
    if (CFEqual(v17, @"modem"))
    {
      uint64_t v30 = 0;
      *(_BYTE *)(a1 + 176) = 1;
    }

    else
    {
      if (!CFEqual(v17, @"usbmodem")) {
        goto LABEL_48;
      }
      uint64_t v30 = 1;
    }

    *(_DWORD *)(a1 + 312) = v30;
LABEL_48:
    merge_override(a1, entry, @"PPP");
    merge_override(a1, entry, @"Modem");
    uint64_t v33 = *(const __CFDictionary **)(a1 + 224);
    if (!v33) {
      goto LABEL_57;
    }
    uint64_t v34 = (const __CFDictionary *)CFDictionaryGetValue(v33, @"Modem");
    if (!v34) {
      goto LABEL_57;
    }
    uint64_t v35 = v34;
    uint64_t v36 = CFDictionaryGetValue(v34, @"ConnectionScript");
    uint64_t v37 = CFStringGetTypeID();
    if (v36 && CFGetTypeID(v36) != v37) {
      uint64_t v36 = 0LL;
    }
    uint64_t v38 = (const __CFString *)CFDictionaryGetValue(v35, @"UniqueIdentifier");
    uint64_t v39 = CFStringGetTypeID();
    if (v38 && CFGetTypeID(v38) == v39)
    {
      CFRelease(*(CFTypeRef *)(a1 + 112));
      *(void *)(a1 + 112) = CFRetain(v17);
      *(void *)(a1 + 120) = CFStringCreateCopy(0LL, v38);
    }

    if (!v36)
    {
LABEL_57:
      int v40 = (const __CFString *)IORegistryEntrySearchCFProperty(entry, "IOService", @"ModemCCL", 0LL, 3u);
      if (v40)
      {
        uint64_t v41 = v40;
        uint64_t v36 = IOCopyCFStringValue(v40);
        if (v36)
        {
          set_connection_script(a1, v36);
          CFRelease(v36);
        }

        CFRelease(v41);
      }

      else
      {
        uint64_t v36 = 0LL;
      }
    }

    if (CFEqual(*(CFTypeRef *)(a1 + 16), @"Bluetooth"))
    {
      *(void *)(a1 + 48) = @"bluetooth";
      goto LABEL_76;
    }

    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, v17);
    CFStringLowercase(MutableCopy, 0LL);
    if (bundle)
    {
      uint64_t v43 = copy_interface_string((__CFBundle *)bundle, MutableCopy, 0);
      if (v43)
      {
        SCNetworkSetRef v44 = v43;
        if (!CFEqual(MutableCopy, v43))
        {
LABEL_69:
          *(void *)(a1 + 32) = v44;
          if (bundle)
          {
            int v45 = copy_interface_string((__CFBundle *)bundle, MutableCopy, 1);
            if (v45)
            {
              CFStringRef Copy = v45;
              if (!CFEqual(MutableCopy, v45)) {
                goto LABEL_74;
              }
              CFRelease(Copy);
            }
          }

          CFStringRef Copy = CFStringCreateCopy(0LL, v17);
LABEL_74:
          *(void *)(a1 + 40) = Copy;
          if (!CFEqual(v17, @"modem"))
          {
            processUSBInterface((void *)a1, entry);
            updated = update_interface_name((void *)a1, entry, 1);
          }

          CFRelease(MutableCopy);
LABEL_76:
          uint64_t v22 = 1LL;
          if (!v17) {
            return v22;
          }
          goto LABEL_41;
        }

        CFRelease(v44);
      }
    }

    SCNetworkSetRef v44 = CFStringCreateCopy(0LL, v17);
    goto LABEL_69;
  }

    CFDictionarySetValue(Mutable, v9, a3);
    goto LABEL_23;
  }

  int v20 = 0LL;
LABEL_25:
  CFRelease(NetworkServiceEntity);
  if (!a3) {
    goto LABEL_30;
  }
  uint64_t v22 = *(__CFDictionary **)(cf + 56);
  if (!v22)
  {
    uint64_t v22 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    *(void *)(cf + 56) = v22;
  }

  CFDictionarySetValue(v22, v9, a3);
LABEL_32:
  CFRelease(v9);
  if (!(_DWORD)v20) {
    _SCErrorSet(1001);
  }
  return v20;
}

    CFMutableDictionaryRef Mutable = (__CFArray *)CFArrayGetValueAtIndex(MutableCopy, 0LL);
    CFRetain(Mutable);
LABEL_23:
    CFRelease(MutableCopy);
  }

  return Mutable;
}

      mach_msg_destroy(&msg);
      return v12;
    }

    mig_dealloc_special_reply_port();
  }

  return v12;
}

      mach_msg_destroy(&msg);
      return v13;
    }

    mig_dealloc_special_reply_port();
  }

  return v13;
}

      mach_msg_destroy(&v11);
      return v8;
    }

    mig_dealloc_special_reply_port();
  }

  return v8;
}

      mach_msg_destroy(&msg);
      return v12;
    }

    mig_dealloc_special_reply_port();
  }

  return v12;
}

      mach_msg_destroy(&v11);
      return v8;
    }

    mig_dealloc_special_reply_port();
  }

  return v8;
}

      mach_msg_destroy(&msg);
      return v12;
    }

    mig_dealloc_special_reply_port();
  }

  return v12;
}

      mach_msg_destroy(&msg);
      return v9;
    }

    mig_dealloc_special_reply_port();
  }

  return v9;
}

      mach_msg_destroy(&msg);
      return v9;
    }

    mig_dealloc_special_reply_port();
  }

  return v9;
}

      mach_msg_destroy(&msg);
      return v8;
    }

    mig_dealloc_special_reply_port();
  }

  return v8;
}

      mach_msg_destroy(&msg);
      return v6;
    }

    mig_dealloc_special_reply_port();
  }

  return v6;
}

      mach_msg_destroy(&msg);
      return v10;
    }

    mig_dealloc_special_reply_port();
  }

  return v10;
}

      mach_msg_destroy(&msg);
      return v8;
    }

    mig_dealloc_special_reply_port();
  }

  return v8;
}

      mach_msg_destroy(&msg);
      return v6;
    }

    mig_dealloc_special_reply_port();
  }

  return v6;
}

uint64_t SCNetworkInterfaceProviderCreate(const void *a1, const void *a2, uint64_t a3)
{
  values[1] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v13 = 0LL;
  if (!a1 || !a2 || a3)
  {
    int v11 = 1002;
LABEL_11:
    _SCErrorSet(v11);
    return 0LL;
  }

  uint64_t v5 = IPMonitorControlCreate();
  if (!v5)
  {
    int v11 = 1001;
    goto LABEL_11;
  }

  int v6 = (const void *)v5;
  values[0] = (void *)IPMonitorControlCopyInterfaceAdvisoryNotificationKey(@"[^/]+");
  CFIndex v7 = CFArrayCreate(0LL, (const void **)values, 1LL, MEMORY[0x189605228]);
  CFRelease(values[0]);
  uint64_t v8 = dispatch_queue_create("SCNetworkInterfaceProvider", 0LL);
  if (__SCNetworkInterfaceProviderRegisterClass_once != -1) {
    dispatch_once(&__SCNetworkInterfaceProviderRegisterClass_once, &__block_literal_global_6);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  uint64_t v10 = StoreObjectWrapperAllocate(Instance, v7, v8, &v13);
  CFRelease(v7);
  if (!v10)
  {
    dispatch_release(v8);
    CFRelease((CFTypeRef)Instance);
    CFRelease(v6);
    return 0LL;
  }

  *(void *)(Instance + 16) = v6;
  *(void *)(Instance + 24) = v10;
  *(void *)(Instance + 32) = v13;
  *(void *)(Instance + 40) = v8;
  *(void *)(Instance + 56) = CFRetain(a2);
  *(void *)(Instance + 64) = CFRetain(a1);
  return Instance;
}

const __SCDynamicStore *StoreObjectWrapperAllocate( uint64_t a1, const __CFArray *a2, dispatch_queue_s *a3, void *a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  context.version = 0LL;
  *(_OWORD *)&context.retain = *(_OWORD *)off_189B63790;
  context.copyDescription = 0LL;
  uint64_t v8 = malloc(0x10uLL);
  *(void *)uint64_t v8 = a1;
  void v8[2] = 1;
  context.info = v8;
  uint64_t v9 = SCDynamicStoreCreate( 0LL,  @"SCNetworkInterfaceProvider",  (SCDynamicStoreCallBack)StoreHandleChanges,  &context);
  if (!v9)
  {
    uint64_t v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v16 = (char *)&context - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 138412290;
      *(void *)(v17 + 4) = @"SCNetworkInterfaceProvider";
      __SC_log_send(5, (uint64_t)v13, v14, v16);
    }

    goto LABEL_12;
  }

  uint64_t v10 = v9;
  if (!SCDynamicStoreSetNotificationKeys(v9, 0LL, a2))
  {
    int v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
    {
LABEL_10:
      uint64_t v18 = _os_log_pack_size();
      int v19 = (char *)&context - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = @"SCNetworkInterfaceProvider";
      __SC_log_send(5, (uint64_t)v11, v12, v19);
    }

uint64_t StoreHandleChanges(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = *a3;
  if (*a3) {
    return SCNetworkInterfaceProviderCheck(result);
  }
  return result;
}

void SCNetworkInterfaceProviderSetEventHandler(uint64_t a1, uint64_t a2)
{
  block[6] = *MEMORY[0x1895F89C0];
  if (a2)
  {
    mach_port_t v2 = *(dispatch_queue_s **)(a1 + 40);
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = __SCNetworkInterfaceProviderSetEventHandler_block_invoke;
    block[3] = &unk_189B63680;
    block[4] = a2;
    void block[5] = a1;
    dispatch_sync(v2, block);
  }

void __SCNetworkInterfaceProviderSetEventHandler_block_invoke(uint64_t a1)
{
  v6[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v1 + 72))
  {
    mach_port_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v2, (os_log_type_t)v3)) {
      return;
    }
LABEL_6:
    __int128 v4 = (char *)v6 - ((_os_log_pack_size() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = "SCNetworkInterfaceProviderSetEventHandler_block_invoke";
    __SC_log_send(5, (uint64_t)v2, v3, v4);
    return;
  }

  if (*(void *)(v1 + 48))
  {
    mach_port_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v2, (os_log_type_t)v3)) {
      return;
    }
    goto LABEL_6;
  }

  *(void *)(*(void *)(a1 + 40) + 48LL) = _Block_copy(*(const void **)(a1 + 32));
}

void SCNetworkInterfaceProviderResume(uint64_t a1)
{
  v2[5] = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 40);
  v2[0] = MEMORY[0x1895F87A8];
  v2[1] = 0x40000000LL;
  v2[2] = __SCNetworkInterfaceProviderResume_block_invoke;
  v2[3] = &__block_descriptor_tmp_3;
  v2[4] = a1;
  dispatch_async(v1, v2);
}

uint64_t __SCNetworkInterfaceProviderResume_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!*(_BYTE *)(result + 72))
  {
    *(_BYTE *)(result + 72) = 1;
    return SCNetworkInterfaceProviderCheck(result);
  }

  return result;
}

uint64_t SCNetworkInterfaceProviderCheck(uint64_t result)
{
  if (*(_BYTE *)(result + 72))
  {
    uint64_t v1 = result;
    if (*(void *)(result + 48))
    {
      uint64_t result = IPMonitorControlAnyInterfaceAdvisoryIsSet(*(void *)(result + 16));
      if (*(unsigned __int8 *)(v1 + 73) != (_DWORD)result)
      {
        char v2 = result;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 48) + 16LL))();
        *(_BYTE *)(v1 + 73) = v2;
      }
    }
  }

  return result;
}

void __SCNetworkInterfaceProviderDeallocate(uint64_t a1)
{
  v2[5] = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 40);
  if (v1)
  {
    v2[0] = MEMORY[0x1895F87A8];
    v2[1] = 0x40000000LL;
    v2[2] = ____SCNetworkInterfaceProviderDeallocate_block_invoke;
    v2[3] = &__block_descriptor_tmp_5;
    v2[4] = a1;
    dispatch_sync(v1, v2);
  }

  else
  {
    SCNetworkInterfaceProviderDeallocate(a1);
  }

__CFString *__SCNetworkInterfaceProviderCopyDebugDesc(void *a1)
{
  char v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCNetworkInterfaceProvider %@ %@ <%p>", a1[8], a1[7], a1);
  return Mutable;
}

void SCNetworkInterfaceProviderDeallocate(uint64_t a1)
{
  *(_BYTE *)(a1 + 72) = 0;
  char v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0LL;
  }

  uint64_t v3 = *(unsigned int **)(a1 + 32);
  if (v3)
  {
    *(void *)uint64_t v3 = 0LL;
    ObjectWrapperRelease(v3);
    *(void *)(a1 + 32) = 0LL;
  }

  __int128 v4 = *(const __SCDynamicStore **)(a1 + 24);
  if (v4)
  {
    SCDynamicStoreSetDispatchQueue(v4, 0LL);
    uint64_t v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 24) = 0LL;
    }
  }

  int v6 = *(dispatch_object_s **)(a1 + 40);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 40) = 0LL;
  }

  CFIndex v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(a1 + 48) = 0LL;
  }

  uint64_t v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 56) = 0LL;
  }

  uint64_t v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0LL;
  }

void ObjectWrapperRelease(unsigned int *a1)
{
  uint64_t v1 = a1 + 2;
  do
    int v2 = __ldxr(v1);
  while (__stxr(v2 - 1, v1));
  if (v2 == 1)
  {
    free(a1);
  }

  else if (v2 <= 1)
  {
    ObjectWrapperRelease_cold_1();
  }

uint64_t ObjectWrapperRetain(uint64_t result)
{
  uint64_t v1 = (unsigned int *)(result + 8);
  do
    unsigned int v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

CFStringRef SCPreferencesPathCreateUniqueChild(SCPreferencesRef prefs, CFStringRef prefix)
{
  theDict[1] = *(CFDictionaryRef *)MEMORY[0x1895F89C0];
  if (!prefs)
  {
    int v4 = 3001;
    goto LABEL_6;
  }

  if (getPath(prefs, prefix, theDict))
  {
    if (CFDictionaryContainsKey(theDict[0], @"__LINK__"))
    {
      int v4 = 1001;
LABEL_6:
      _SCErrorSet(v4);
      return 0LL;
    }
  }

  else if (SCError() != 1004)
  {
    return 0LL;
  }

  int v6 = CFUUIDCreate(0LL);
  CFStringRef v7 = CFUUIDCreateString(0LL, v6);
  CFStringRef v5 = CFStringCreateWithFormat(0LL, 0LL, @"%@/%@", prefix, v7);
  CFRelease(v7);
  CFRelease(v6);
  uint64_t v8 = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (!v8) {
    SCPreferencesPathCreateUniqueChild_cold_1();
  }
  uint64_t v9 = v8;
  if (!setPath((uint64_t)prefs, v5, v8))
  {
    CFRelease(v5);
    CFStringRef v5 = 0LL;
  }

  CFRelease(v9);
  return v5;
}

uint64_t getPath(const __SCPreferences *a1, const __CFString *a2, const __CFDictionary **a3)
{
  v21[1] = *(const void **)MEMORY[0x1895F89C0];
  CFStringRef v5 = normalizePath(a2);
  if (!v5)
  {
    _SCErrorSet(1004);
    return 0LL;
  }

  int v6 = v5;
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    uint64_t v17 = v6;
    goto LABEL_22;
  }

  CFIndex v8 = Count;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  while (2)
  {
    CFIndex v11 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v11);
      if (v11)
      {
        CFPropertyListRef Value = (const __CFDictionary *)CFDictionaryGetValue(v10, ValueAtIndex);
      }

      else
      {
        uint64_t v14 = (const __CFString *)CFArrayGetValueAtIndex(v6, 0LL);
        CFPropertyListRef Value = (const __CFDictionary *)SCPreferencesGetValue(a1, v14);
      }

      uint64_t v10 = Value;
      if (!Value) {
        goto LABEL_19;
      }
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v10) != TypeID) {
        goto LABEL_19;
      }
      if (v11 < v8 - 1 && CFDictionaryGetValueIfPresent(v10, @"__LINK__", v21)) {
        break;
      }
      if (v8 == ++v11)
      {
        *a3 = v10;
        uint64_t v19 = 1LL;
        goto LABEL_23;
      }
    }

    if (v9 == 8)
    {
      int v18 = 3006;
      goto LABEL_20;
    }

    uint64_t v16 = normalizePath((const __CFString *)v21[0]);
    if (!v16)
    {
LABEL_19:
      int v18 = 1004;
LABEL_20:
      _SCErrorSet(v18);
      uint64_t v19 = 0LL;
      goto LABEL_23;
    }

    uint64_t v17 = v16;
    ++v9;
    v22.location = v11 + 1;
    v22.length = ~v11 + v8;
    CFArrayAppendArray(v16, v6, v22);
    CFRelease(v6);
    CFIndex v8 = CFArrayGetCount(v17);
    int v6 = v17;
    if (v8 >= 1) {
      continue;
    }
    break;
  }

uint64_t setPath(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t v3 = a3;
  value[1] = *(void **)MEMORY[0x1895F89C0];
  if (a3 && (CFTypeID v5 = CFDictionaryGetTypeID(), CFGetTypeID(v3) != v5))
  {
    int v21 = 1002;
  }

  else
  {
    int v6 = normalizePath(a2);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFIndex Count = CFArrayGetCount(v6);
      if (Count < 1)
      {
        uint64_t v20 = v7;
LABEL_26:
        __SCPreferencesAccess(a1);
        uint64_t v23 = *(const void **)(a1 + 280);
        if (v23) {
          CFRelease(v23);
        }
        if (v3) {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v3);
        }
        else {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        }
        *(void *)(a1 + 280) = MutableCopy;
        uint64_t v22 = 1LL;
        *(_BYTE *)(a1 + 305) = 1;
        goto LABEL_52;
      }

      CFIndex v9 = Count;
      uint64_t v10 = 0LL;
      uint64_t v38 = 0LL;
      CFIndex v11 = (const CFArrayCallBacks *)MEMORY[0x189605228];
      while (2)
      {
        CFIndex v12 = v9 - 1;
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, v9 - 1, v11);
        CFIndex v14 = v9 - 2;
        if ((unint64_t)v9 >= 2)
        {
          CFIndex v15 = 0LL;
          while (1)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v15);
            if (v15) {
              uint64_t v17 = (const __CFDictionary *)CFDictionaryGetValue(v10, ValueAtIndex);
            }
            else {
              uint64_t v17 = (const __CFDictionary *)SCPreferencesGetValue((SCPreferencesRef)a1, ValueAtIndex);
            }
            uint64_t v10 = v17;
            if (v17)
            {
              CFArrayAppendValue(Mutable, v17);
              CFTypeID TypeID = CFDictionaryGetTypeID();
            }

            else
            {
              uint64_t v10 = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
              CFArrayAppendValue(Mutable, v10);
              CFRelease(v10);
              CFTypeID TypeID = CFDictionaryGetTypeID();
              if (!v10) {
                goto LABEL_30;
              }
            }

            if (CFGetTypeID(v10) != TypeID) {
              goto LABEL_30;
            }
            if (v12 == ++v15)
            {
              CFIndex v26 = CFArrayGetValueAtIndex(v7, v9 - 1);
              size_t v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v9 - 2);
              ssize_t v28 = CFDictionaryGetValue(v27, v26);
              goto LABEL_36;
            }
          }

          if (v38 != 8)
          {
            uint64_t v19 = normalizePath((const __CFString *)value[0]);
            if (!v19)
            {
LABEL_30:
              int v25 = 1004;
              goto LABEL_31;
            }

            uint64_t v20 = v19;
            ++v38;
            v41.location = v15 + 1;
            v41.length = v12 - v15;
            CFArrayAppendArray(v19, v7, v41);
            CFRelease(v7);
            CFRelease(Mutable);
            CFIndex v9 = CFArrayGetCount(v20);
            CFStringRef v7 = v20;
            CFIndex v11 = (const CFArrayCallBacks *)MEMORY[0x189605228];
            if (v9 >= 1) {
              continue;
            }
            goto LABEL_26;
          }

          int v25 = 3006;
LABEL_31:
          _SCErrorSet(v25);
          uint64_t v22 = 0LL;
          if (!Mutable) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }

        break;
      }

      uint64_t v29 = (const __CFString *)CFArrayGetValueAtIndex(v7, v9 - 1);
      ssize_t v28 = SCPreferencesGetValue((SCPreferencesRef)a1, v29);
LABEL_36:
      uint64_t v30 = v28;
      if (v28)
      {
        CFTypeID v31 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v30) != v31)
        {
          int v25 = 1002;
          goto LABEL_31;
        }
      }

      if (v3) {
        uint64_t v3 = (const __CFDictionary *)CFRetain(v3);
      }
      uint64_t v32 = (const __CFString *)CFArrayGetValueAtIndex(v7, v9 - 1);
      if (v9 == 1)
      {
        uint64_t v35 = v3;
        if (v3) {
          goto LABEL_47;
        }
      }

      else
      {
        do
        {
          uint64_t v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v14);
          uint64_t v34 = CFDictionaryCreateMutableCopy(0LL, 0LL, v33);
          uint64_t v35 = v34;
          if (v3)
          {
            CFDictionarySetValue(v34, v32, v3);
            CFRelease(v3);
          }

          else
          {
            CFDictionaryRemoveValue(v34, v32);
            if (!CFDictionaryGetCount(v35))
            {
              CFRelease(v35);
              uint64_t v35 = 0LL;
            }
          }

          uint64_t v32 = (const __CFString *)CFArrayGetValueAtIndex(v7, v14--);
          uint64_t v3 = v35;
        }

        while (v14 != -1);
        if (v35)
        {
LABEL_47:
          uint64_t v36 = SCPreferencesSetValue((SCPreferencesRef)a1, v32, v35);
          CFRelease(v35);
          uint64_t v22 = v36;
          if (!Mutable) {
            goto LABEL_51;
          }
LABEL_50:
          CFRelease(Mutable);
LABEL_51:
          uint64_t v20 = v7;
LABEL_52:
          CFRelease(v20);
          return v22;
        }
      }

      uint64_t v22 = SCPreferencesRemoveValue((SCPreferencesRef)a1, v32);
      if (!Mutable) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }

    int v21 = 1004;
  }

  _SCErrorSet(v21);
  return 0LL;
}

CFDictionaryRef SCPreferencesPathGetValue(SCPreferencesRef prefs, CFStringRef path)
{
  v7[1] = *(const __CFDictionary **)MEMORY[0x1895F89C0];
  if (!prefs)
  {
    _SCErrorSet(3001);
    return 0LL;
  }

  uint64_t v3 = v7[0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID && CFDictionaryGetValueIfPresent(v3, @"__LINK__", (const void **)&value))
  {
    else {
      return 0LL;
    }
  }

  return v3;
}

CFStringRef SCPreferencesPathGetLink(SCPreferencesRef prefs, CFStringRef path)
{
  v6[1] = *(const __CFDictionary **)MEMORY[0x1895F89C0];
  if (!prefs)
  {
    _SCErrorSet(3001);
    return 0LL;
  }

  unsigned int v2 = v6[0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v2 || CFGetTypeID(v2) != TypeID) {
    return 0LL;
  }
  else {
    return 0LL;
  }
}

Boolean SCPreferencesPathSetValue(SCPreferencesRef prefs, CFStringRef path, CFDictionaryRef value)
{
  if (!prefs)
  {
    int v13 = 3001;
LABEL_16:
    _SCErrorSet(v13);
    return 0;
  }

  if (!CFEqual(path, @"/CurrentSet"))
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (value) {
      goto LABEL_13;
    }
LABEL_15:
    SCPrint( 1,  (FILE *)*MEMORY[0x1895F89D0],  (uint64_t)@"SCPreferencesPathSetValue(, %@,) called with non-dictionary value\n",  v15,  v16,  v17,  v18,  v19,  (uint64_t)path);
    int v13 = 1002;
    goto LABEL_16;
  }

  CFTypeID v6 = CFStringGetTypeID();
  if (!value)
  {
    CFDictionaryGetTypeID();
    goto LABEL_15;
  }

  if (CFGetTypeID(value) != v6)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
LABEL_13:
    if (CFGetTypeID(value) == TypeID) {
      return setPath((uint64_t)prefs, path, value);
    }
    goto LABEL_15;
  }

  if ((SCPreferencesPathSetValue_warned & 1) == 0)
  {
    SCPrint( 1,  (FILE *)*MEMORY[0x1895F89D0],  (uint64_t)@"SCPreferencesPathSetValue(, %@,) called with non-dictionary value\n",  v7,  v8,  v9,  v10,  v11,  (uint64_t)path);
    SCPreferencesPathSetValue_warned = 1;
  }

  return SCPreferencesSetValue(prefs, @"CurrentSet", value);
}

Boolean SCPreferencesPathSetLink(SCPreferencesRef prefs, CFStringRef path, CFStringRef link)
{
  v11[1] = *(const __CFDictionary **)MEMORY[0x1895F89C0];
  if (!prefs)
  {
    int v10 = 3001;
    goto LABEL_8;
  }

  CFTypeID TypeID = CFStringGetTypeID();
  if (!link || CFGetTypeID(link) != TypeID)
  {
    int v10 = 1002;
LABEL_8:
    _SCErrorSet(v10);
    return 0;
  }

  if (getPath(prefs, link, v11))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionarySetValue(Mutable, @"__LINK__", link);
    Boolean v8 = setPath((uint64_t)prefs, path, Mutable);
    CFRelease(Mutable);
    return v8;
  }

  return 0;
}

Boolean SCPreferencesPathRemoveValue(SCPreferencesRef prefs, CFStringRef path)
{
  v9[1] = *(const __CFDictionary **)MEMORY[0x1895F89C0];
  if (!prefs)
  {
    int v8 = 3001;
LABEL_7:
    _SCErrorSet(v8);
    return 0;
  }

  if (getPath(prefs, path, v9))
  {
    int v4 = normalizePath(path);
    if (v4)
    {
      CFTypeID v5 = v4;
      Boolean v6 = setPath((uint64_t)prefs, path, 0LL);
      CFRelease(v5);
      return v6;
    }

    int v8 = 1004;
    goto LABEL_7;
  }

  return 0;
}

CFArrayRef normalizePath(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!CFStringHasPrefix(a1, @"/")) {
    return 0LL;
  }
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, a1, @"/");
  CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, ArrayBySeparatingStrings);
  CFRelease(ArrayBySeparatingStrings);
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    unint64_t v6 = Count + 1;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v6 - 2);
      if (!CFStringGetLength(ValueAtIndex)) {
        CFArrayRemoveValueAtIndex(MutableCopy, v6 - 2);
      }
      --v6;
    }

    while (v6 > 1);
  }

  return MutableCopy;
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!prefs)
  {
    _SCErrorSet(3001);
LABEL_10:
    LOBYTE(v5) = 0;
    return v5;
  }

  int v2 = *((unsigned __int8 *)prefs + 112);
  if (!*((_BYTE *)prefs + 112) && !SCPreferencesLock(prefs, 1u))
  {
    uint64_t v16 = __log_SCPreferences();
    uint64_t v17 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v19 = &v22[-((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v16, v17, v19);
    }

    goto LABEL_10;
  }

  if (!*((void *)prefs + 39))
  {
    unint64_t v6 = __log_SCPreferences();
    uint64_t v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v9 = &v22[-((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = *((void *)prefs + 13);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v11;
      __SC_log_send(6, (uint64_t)v6, v7, v9);
    }

    int v5 = SCDynamicStoreNotifyValue(0LL, *((CFStringRef *)prefs + 24));
    if (v5) {
      goto LABEL_23;
    }
    CFIndex v12 = __log_SCPreferences();
    uint64_t v13 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      uint64_t v15 = &v22[-((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v12, v13, v15);
    }

    int v4 = 1001;
    goto LABEL_22;
  }

  int v23 = 0;
  mach_port_t v3 = *((_DWORD *)prefs + 80);
  if (!v3) {
    goto LABEL_21;
  }
  if (!_SCHelperExec(v3, 105, 0LL, &v23, 0LL))
  {
    if (*((_DWORD *)prefs + 80)) {
      _SCHelperClose((mach_port_t *)prefs + 80);
    }
LABEL_21:
    int v4 = 1003;
    int v23 = 1003;
    goto LABEL_22;
  }

  int v4 = v23;
  if (!v23)
  {
    LOBYTE(v5) = 1;
    goto LABEL_23;
  }

const void *_SCPreferencesCopyComputerName(const __SCPreferences *a1, _DWORD *a2)
{
  int v4 = a1;
  if (!a1)
  {
    int v4 = SCPreferencesCreate(0LL, @"_SCPreferencesCopyComputerName", 0LL);
    if (!v4) {
      return 0LL;
    }
  }

  int v5 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@", @"System", @"System");
  CFDictionaryRef Value = SCPreferencesPathGetValue(v4, v5);
  CFRelease(v5);
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != TypeID) {
      goto LABEL_8;
    }
    uint64_t v8 = CFDictionaryGetValue(Value, @"ComputerName");
    CFTypeID v9 = CFStringGetTypeID();
    if (!v8) {
      goto LABEL_9;
    }
    if (CFGetTypeID(v8) == v9) {
      CFRetain(v8);
    }
    else {
LABEL_8:
    }
      uint64_t v8 = 0LL;
LABEL_9:
    if (a2) {
      *a2 = getNameEncoding(Value);
    }
    if (a1) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }

  uint64_t v8 = 0LL;
  if (!a1) {
LABEL_18:
  }
    CFRelease(v4);
LABEL_12:
  if (v8) {
    int v10 = 0;
  }
  else {
    int v10 = 1004;
  }
  _SCErrorSet(v10);
  return v8;
}

uint64_t getNameEncoding(const __CFDictionary *a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (CFDictionaryGetValueIfPresent(a1, @"ComputerNameEncoding", (const void **)&value)
    && (v1 = value, CFTypeID TypeID = CFNumberGetTypeID(), v1)
    && CFGetTypeID(v1) == TypeID
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
  {
    return valuePtr;
  }

  else
  {
    return CFStringGetSystemEncoding();
  }

CFStringRef SCDynamicStoreKeyCreateComputerName(CFAllocatorRef allocator)
{
  return SCDynamicStoreKeyCreate(allocator, @"%@/%@", @"Setup:", @"System");
}

CFStringRef SCDynamicStoreCopyComputerName(SCDynamicStoreRef store, CFStringEncoding *nameEncoding)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (nameEncoding) {
    *nameEncoding = 134217984;
  }
  int v4 = SCDynamicStoreKeyCreate(0LL, @"%@/%@", @"Setup:", @"System");
  int v5 = (const __CFDictionary *)__SCDynamicStoreCopyValueCommon((uint64_t)store, v4, 0);
  CFRelease(v4);
  if (v5)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v5) == TypeID)
    {
      CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(v5, @"ComputerName");
      CFTypeID v8 = CFStringGetTypeID();
      if (!Value)
      {
LABEL_12:
        int v10 = 1004;
LABEL_13:
        _SCErrorSet(v10);
        CFRelease(v5);
        return Value;
      }

      if (CFGetTypeID(Value) == v8)
      {
        CFRetain(Value);
        if (SCError() == 10100) {
          report_missing_entitlement("SCDynamicStoreCopyComputerName");
        }
        if (nameEncoding)
        {
          CFStringEncoding v9 = getNameEncoding(v5);
          int v10 = 0;
          *nameEncoding = v9;
        }

        else
        {
          int v10 = 0;
        }

        goto LABEL_13;
      }
    }

    CFDictionaryRef Value = 0LL;
    goto LABEL_12;
  }

  int v11 = SCError();
  if (v11 == 10003)
  {
    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v14 = 0x40000000LL;
    uint64_t v15 = ___SC_crash_once_block_invoke_1;
    uint64_t v16 = &__block_descriptor_tmp_9;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v17 = "SCDynamicStoreCopyComputerName() access denied, missing entitlement";
    if (_SC_crash_once_once_1 == -1) {
      return 0LL;
    }
LABEL_23:
    dispatch_once(&_SC_crash_once_once_1, &block);
    return 0LL;
  }

  if (v11 == 1003)
  {
    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v14 = 0x40000000LL;
    uint64_t v15 = ___SC_crash_once_block_invoke_1;
    uint64_t v16 = &__block_descriptor_tmp_9;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v17 = "SCDynamicStoreCopyComputerName() access denied by policy";
    if (_SC_crash_once_once_1 == -1) {
      return 0LL;
    }
    goto LABEL_23;
  }

  return (CFStringRef)_SCPreferencesCopyComputerName(0LL, nameEncoding);
}

void report_missing_entitlement(const char *a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (_SC_isAppleInternal_once_2 != -1) {
    dispatch_once(&_SC_isAppleInternal_once_2, &__block_literal_global_7);
  }
  if (_SC_isAppleInternal_isInternal_2)
  {
    int v2 = (const char *)get_contact_string_contact;
    if (!get_contact_string_contact)
    {
      mach_port_t v3 = SCPreferencesCreate( 0LL,  @"UserDefinedDeviceNameContact",  @"/AppleInternal/Library/SystemConfiguration/PrivateStrings.plist");
      if (v3)
      {
        int v4 = v3;
        CFDictionaryRef Value = (const __CFString *)SCPreferencesGetValue(v3, @"UserDefinedDeviceNameContact");
        CFTypeID TypeID = CFStringGetTypeID();
        if (Value && CFGetTypeID(Value) == TypeID)
        {
          CFRetain(Value);
          CFRelease(v4);
          get_contact_string_contact = (uint64_t)_SC_cfstring_to_cstring(Value, 0LL, 0LL, 0x8000100u);
          CFRelease(Value);
          int v2 = (const char *)get_contact_string_contact;
          goto LABEL_11;
        }

        CFRelease(v4);
      }

      int v2 = 0LL;
    }

Boolean SCPreferencesSetComputerName(SCPreferencesRef prefs, CFStringRef name, CFStringEncoding nameEncoding)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  CFStringEncoding valuePtr = nameEncoding;
  if (!name)
  {
    CFStringRef v6 = 0LL;
LABEL_7:
    uint64_t v7 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@", @"System", @"System");
    CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, v7);
    if (Value) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }
    int v11 = MutableCopy;
    if (v6 && CFStringGetLength(v6) >= 1)
    {
      CFDictionarySetValue(v11, @"ComputerName", v6);
      CFNumberRef v12 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v11, @"ComputerNameEncoding", v12);
      CFRelease(v12);
      CFDictionaryRemoveValue(v11, @"ComputerNameRegion");
      if (!valuePtr)
      {
        *(void *)&v21[12] = 0LL;
        _CFStringGetUserDefaultEncoding();
      }
    }

    else
    {
      CFDictionaryRemoveValue(v11, @"ComputerName");
      CFDictionaryRemoveValue(v11, @"ComputerNameEncoding");
      CFDictionaryRemoveValue(v11, @"ComputerNameRegion");
    }

    int v10 = __SCNetworkConfigurationSetValue(prefs, v7, v11, 0);
    uint64_t v13 = __log_SCPreferences();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    BOOL v15 = __SC_log_enabled(5, v13, (os_log_type_t)v14);
    if (v6)
    {
      if (v15)
      {
        uint64_t v16 = _os_log_pack_size();
        uint64_t v17 = &v21[-((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v18 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v18 = 138412290;
        *(void *)(v18 + 4) = v6;
LABEL_23:
        __SC_log_send(5, (uint64_t)v13, v14, v17);
      }
    }

    else if (v15)
    {
      uint64_t v19 = _os_log_pack_size();
      uint64_t v17 = &v21[-((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      goto LABEL_23;
    }

const void *SCPreferencesGetHostName(const __SCPreferences *a1)
{
  int v2 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@", @"System", @"System");
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v2);
  CFRelease(v2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value
    || CFGetTypeID(Value) != TypeID
    || (v5 = CFDictionaryGetValue(Value, @"HostName"), CFTypeID v6 = CFStringGetTypeID(), !v5)
    || CFGetTypeID(v5) != v6)
  {
    _SCErrorSet(1004);
    return 0LL;
  }

  return v5;
}

uint64_t SCPreferencesSetHostName(const __SCPreferences *a1, const __CFString *a2)
{
  v19[1] = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    int v5 = 0LL;
LABEL_7:
    CFTypeID v6 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@", @"System", @"System");
    CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v6);
    if (Value) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }
    int v10 = MutableCopy;
    if (v5) {
      CFDictionarySetValue(MutableCopy, @"HostName", v5);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"HostName");
    }
    uint64_t v9 = __SCNetworkConfigurationSetValue(a1, v6, v10, 0);
    int v11 = __log_SCPreferences();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    BOOL v13 = __SC_log_enabled(5, v11, (os_log_type_t)v12);
    if (v5)
    {
      if (v13)
      {
        uint64_t v14 = _os_log_pack_size();
        BOOL v15 = (char *)v19 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v16 = 138412290;
        *(void *)(v16 + 4) = v5;
LABEL_21:
        __SC_log_send(5, (uint64_t)v11, v12, v15);
      }
    }

    else if (v13)
    {
      uint64_t v17 = _os_log_pack_size();
      BOOL v15 = (char *)v19 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      goto LABEL_21;
    }

const void *_SCPreferencesCopyLocalHostName(const __SCPreferences *a1)
{
  int v2 = a1;
  if (!a1)
  {
    int v2 = SCPreferencesCreate(0LL, @"_SCPreferencesCopyLocalHostName", 0LL);
    if (!v2) {
      return 0LL;
    }
  }

  mach_port_t v3 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@/%@", @"System", @"Network", @"HostNames");
  CFDictionaryRef Value = SCPreferencesPathGetValue(v2, v3);
  CFRelease(v3);
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != TypeID) {
      goto LABEL_8;
    }
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"LocalHostName");
    CFTypeID v6 = CFStringGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v6)
      {
        CFRetain(Value);
        goto LABEL_9;
      }

LABEL_8:
      CFDictionaryRef Value = 0LL;
    }
  }

    CFTypeID v8 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@/%@", @"System", @"Network", @"HostNames");
    CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, v8);
    if (Value) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }
    int v11 = MutableCopy;
    if (v2) {
      CFDictionarySetValue(MutableCopy, @"LocalHostName", v2);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"LocalHostName");
    }
    int v7 = __SCNetworkConfigurationSetValue(prefs, v8, v11, 0);
    uint64_t v12 = __log_SCPreferences();
    BOOL v13 = _SC_syslog_os_log_mapping(5);
    uint64_t v14 = __SC_log_enabled(5, v12, (os_log_type_t)v13);
    if (v2)
    {
      if (v14)
      {
        BOOL v15 = _os_log_pack_size();
        uint64_t v16 = (char *)v20 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v17 = 138412290;
        *(void *)(v17 + 4) = v2;
LABEL_21:
        __SC_log_send(5, (uint64_t)v12, v13, v16);
      }
    }

    else if (v14)
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v16 = (char *)v20 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      goto LABEL_21;
    }

  _SCErrorSet(1002);
  return 0LL;
}

  LODWORD(result) = 1002;
LABEL_9:
  _SCErrorSet((int)result);
  return 0LL;
}

  if (!v14) {
    goto LABEL_14;
  }
  return v14;
}

CFStringRef SCDynamicStoreKeyCreateHostNames(CFAllocatorRef allocator)
{
  return SCDynamicStoreKeyCreate( allocator,  @"%@/%@/%@",  @"Setup:",  @"Network",  @"HostNames",  *MEMORY[0x1895F89C0]);
}

CFStringRef SCDynamicStoreCopyLocalHostName(SCDynamicStoreRef store)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v2 = SCDynamicStoreKeyCreate(0LL, @"%@/%@/%@", @"Setup:", @"Network", @"HostNames");
  mach_port_t v3 = (const __CFDictionary *)__SCDynamicStoreCopyValueCommon((uint64_t)store, v2, 0);
  CFRelease(v2);
  if (v3)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v3) == TypeID)
    {
      CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(v3, @"LocalHostName");
      CFTypeID v6 = CFStringGetTypeID();
      if (!Value)
      {
LABEL_9:
        int v7 = 1004;
LABEL_10:
        _SCErrorSet(v7);
        CFRelease(v3);
        return Value;
      }

      if (CFGetTypeID(Value) == v6)
      {
        CFRetain(Value);
        if (SCError() == 10100) {
          report_missing_entitlement("SCDynamicStoreCopyLocalHostName");
        }
        int v7 = 0;
        goto LABEL_10;
      }
    }

    CFDictionaryRef Value = 0LL;
    goto LABEL_9;
  }

  int v8 = SCError();
  if (v8 == 10003)
  {
    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v11 = 0x40000000LL;
    uint64_t v12 = ___SC_crash_once_block_invoke_1;
    BOOL v13 = &__block_descriptor_tmp_9;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v14 = "SCDynamicStoreCopyLocalHostName() access denied, missing entitlement";
    if (_SC_crash_once_once_1 == -1) {
      return 0LL;
    }
LABEL_19:
    dispatch_once(&_SC_crash_once_once_1, &block);
    return 0LL;
  }

  if (v8 == 1003)
  {
    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v11 = 0x40000000LL;
    uint64_t v12 = ___SC_crash_once_block_invoke_1;
    BOOL v13 = &__block_descriptor_tmp_9;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v14 = "SCDynamicStoreCopyLocalHostName() access denied by policy";
    if (_SC_crash_once_once_1 == -1) {
      return 0LL;
    }
    goto LABEL_19;
  }

  return (CFStringRef)_SCPreferencesCopyLocalHostName(0LL);
}

size_t _SC_stringIsValidDNSName(const char *a1)
{
  size_t result = strlen(a1);
  if (result)
  {
    size_t v3 = result;
    char v4 = 0;
    int v5 = (unsigned __int8 *)(a1 + 1);
    uint64_t v6 = MEMORY[0x1895F8770];
    while (1)
    {
      unsigned int v7 = (char)*(v5 - 1);
      BOOL v8 = v4 == 46 || v4 == 0;
      if (v8 || ((int v9 = *v5, v9 != 46) ? (v10 = v9 == 0) : (v10 = 1), v10))
      {
        if ((v7 & 0x80000000) != 0)
        {
          size_t result = __maskrune((char)*(v5 - 1), 0x500uLL);
          if (!(_DWORD)result) {
            return result;
          }
        }

        else
        {
          size_t result = *(_DWORD *)(v6 + 4LL * v7 + 60) & 0x500;
          if (!(_DWORD)result) {
            return result;
          }
        }
      }

      else
      {
        if ((v7 & 0x80000000) != 0) {
          int v11 = __maskrune((char)*(v5 - 1), 0x500uLL);
        }
        else {
          int v11 = *(_DWORD *)(v6 + 4LL * v7 + 60) & 0x500;
        }
        if (v7 - 45 >= 2 && v11 == 0) {
          return 0LL;
        }
      }

      char v4 = v7;
      ++v5;
      if (!--v3) {
        return 1LL;
      }
    }
  }

  return result;
}

size_t _SC_CFStringIsValidDNSName(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  size_t v3 = _SC_cfstring_to_cstring(a1, 0LL, 0LL, 0x600u);
  if (!v3) {
    return 0LL;
  }
  char v4 = v3;
  IsValidDNSCFStringRef Name = _SC_stringIsValidDNSName((const char *)v3);
  CFAllocatorDeallocate(0LL, v4);
  return IsValidDNSName;
}

Boolean SCPreferencesSetLocalHostName(SCPreferencesRef prefs, CFStringRef name)
{
  int v2 = name;
  v20[1] = *MEMORY[0x1895F89C0];
  if (!name) {
    goto LABEL_8;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(v2) == TypeID)
  {
    CFIndex Length = CFStringGetLength(v2);
    if (Length < 1)
    {
      int v2 = 0LL;
    }

    else
    {
      CFIndex v6 = Length;
      v21.location = 0LL;
      v21.length = v6;
      if (CFStringFindWithOptions(v2, @".", v21, 0LL, 0LL)) {
        goto LABEL_6;
      }
    }

BOOL _SC_CFStringIsValidNetBIOSName(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  return a1 && CFGetTypeID(a1) == TypeID && CFStringGetLength(a1) < 16;
}

CFStringRef SCDynamicStoreKeyCreateLocation(CFAllocatorRef allocator)
{
  return (CFStringRef)CFRetain(@"Setup:");
}

CFTypeID SCNetworkConnectionGetTypeID(void)
{
  if (__SCNetworkConnectionInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
  }
  return __kSCNetworkConnectionTypeID;
}

CFMutableArrayRef SCNetworkConnectionCopyAvailableServices(const __SCNetworkSet *a1)
{
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    size_t v3 = a1;
    goto LABEL_3;
  }

  uint64_t v12 = SCPreferencesCreate(0LL, @"SCNetworkConnectionCopyAvailableServices", 0LL);
  if (v12)
  {
    uint64_t v13 = v12;
    size_t v3 = SCNetworkSetCopyCurrent(v12);
    CFRelease(v13);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (!v3) {
      return Mutable;
    }
LABEL_3:
    char v4 = SCNetworkSetCopyServices(v3);
    if (v4)
    {
      int v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        for (CFIndex i = 0LL; i != v7; ++i)
        {
          ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, i);
          Interface = SCNetworkServiceGetInterface(ValueAtIndex);
          if (Interface)
          {
            CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
            if (CFEqual(InterfaceType, @"PPP")
              || CFEqual(InterfaceType, @"VPN")
              || CFEqual(InterfaceType, @"IPSec"))
            {
              CFArrayAppendValue(Mutable, ValueAtIndex);
            }
          }
        }
      }

      CFRelease(v5);
    }

    if (!a1) {
      CFRelease(v3);
    }
    return Mutable;
  }

  return CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
}

uint64_t SCNetworkConnectionCreateWithService(uint64_t a1, void *a2, uint64_t a3, __int128 *a4)
{
  v21[1] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    int v13 = 1002;
LABEL_10:
    _SCErrorSet(v13);
    return 0LL;
  }

  if (__SCNetworkServiceIsPPTP(a2))
  {
    int v9 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v9;
    }

    uint64_t v10 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v12 = (char *)v21 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v9, v10, v12);
    }

    int v13 = 5002;
    goto LABEL_10;
  }

  uint64_t Private = __SCNetworkConnectionCreatePrivate(a1, a2, a3, a4);
  if (Private)
  {
    uint64_t v16 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v16 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v16;
    }

    uint64_t v17 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v19 = (char *)v21 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)(v20 + 4) = Private + 88;
      *(_WORD *)(v20 + 12) = 2112;
      *(void *)(v20 + 14) = a2;
      __SC_log_send(7, (uint64_t)v16, v17, v19);
    }
  }

  return Private;
}

uint64_t __SCNetworkConnectionCreatePrivate(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (__SCNetworkConnectionInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    goto LABEL_23;
  }
  uint64_t v8 = Instance;
  pthread_mutex_init((pthread_mutex_t *)(Instance + 16), 0LL);
  if (a2) {
    *(void *)(v8 + 80) = CFRetain(a2);
  }
  *(_DWORD *)(v8 + 160) = geteuid();
  *(_DWORD *)(v8 + 164) = getegid();
  *(_DWORD *)(v8 + 168) = getpid();
  *(void *)(v8 + 232) = a3;
  if (a4)
  {
    __int128 v9 = *a4;
    __int128 v10 = a4[1];
    *(void *)(v8 + 272) = *((void *)a4 + 4);
    *(_OWORD *)(v8 + 240) = v9;
    *(_OWORD *)(v8 + 256) = v10;
    uint64_t v11 = (uint64_t (*)(void))*((void *)a4 + 2);
    if (v11) {
      *(void *)(v8 + 248) = v11(*((void *)a4 + 1));
    }
  }

  *(_DWORD *)(v8 + 304) = 0;
  if (_sc_log >= 1) {
    snprintf((char *)(v8 + 88), 0x20uLL, "[%p] ", (const void *)v8);
  }
  if (ne_session_use_as_system_vpn() && *(void *)(v8 + 80))
  {
    _SCErrorSet(0);
    if (SCError() != 1002) {
      return v8;
    }
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(v8 + 80));
    NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( (CFAllocatorRef)*MEMORY[0x189604DB0],  @"Setup:",  ServiceID,  @"Interface");
    uint64_t v22 = (const __CFDictionary *)SCDynamicStoreCopyValue(0LL, NetworkServiceEntity);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (v22)
    {
      if (CFGetTypeID(v22) == TypeID)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(v22, @"Type");
        CFTypeID v25 = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == v25)
          {
            if (!CFEqual(Value, @"PPP"))
            {
              if (!CFEqual(Value, @"VPN"))
              {
                CFIndex v26 = (CFTypeRef *)&kSCNetworkInterfaceTypeIPSec;
LABEL_44:
                int v33 = CFEqual(Value, *v26);
                CFRelease(v22);
                CFRelease(NetworkServiceEntity);
                if (!v33) {
                  return v8;
                }
LABEL_14:
                uint64_t v12 = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(v8 + 80));
                int v13 = v12;
                if (v12)
                {
                  if (CFStringGetCString(v12, buffer, 37LL, 0x8000100u))
                  {
                    if (!uuid_parse(buffer, uu))
                    {
                      uint64_t v27 = ne_session_create();
                      *(void *)(v8 + 344) = v27;
                      if (v27)
                      {
                        ssize_t v28 = (os_log_s *)__log_SCNetworkConnection_log;
                        if (!__log_SCNetworkConnection_log)
                        {
                          ssize_t v28 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
                          __log_SCNetworkConnection_log = (uint64_t)v28;
                        }

                        uint64_t v29 = _SC_syslog_os_log_mapping(7);
                        if (__SC_log_enabled(7, v28, (os_log_type_t)v29))
                        {
                          uint64_t v30 = _os_log_pack_size();
                          CFTypeID v31 = &v34[-((MEMORY[0x1895F8858](v30) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
                          __error();
                          uint64_t v32 = _os_log_pack_fill();
                          *(_DWORD *)uint64_t v32 = 136315138;
                          *(void *)(v32 + 4) = v8 + 88;
                          __SC_log_send(7, (uint64_t)v28, v29, v31);
                        }
                      }
                    }
                  }
                }

                if (!*(void *)(v8 + 344))
                {
                  BOOL v14 = (os_log_s *)__log_SCNetworkConnection_log;
                  if (!__log_SCNetworkConnection_log)
                  {
                    BOOL v14 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
                    __log_SCNetworkConnection_log = (uint64_t)v14;
                  }

                  uint64_t v15 = _SC_syslog_os_log_mapping(5);
                  if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
                  {
                    uint64_t v16 = _os_log_pack_size();
                    uint64_t v17 = &v34[-((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
                    __error();
                    uint64_t v18 = _os_log_pack_fill();
                    *(_DWORD *)uint64_t v18 = 138412290;
                    *(void *)(v18 + 4) = v13;
                    __SC_log_send(5, (uint64_t)v14, v15, v17);
                  }

                  CFRelease((CFTypeRef)v8);
LABEL_23:
                  _SCErrorSet(1001);
                  return 0LL;
                }

                return v8;
              }

LABEL_42:
              CFRelease(v22);
              CFRelease(NetworkServiceEntity);
              goto LABEL_14;
            }

            CFDictionaryRef Value = CFDictionaryGetValue(v22, @"SubType");
            if (isA_CFString(Value))
            {
              if (!CFEqual(Value, @"PPTP"))
              {
                CFIndex v26 = (CFTypeRef *)&kSCValNetInterfaceSubTypeL2TP;
                goto LABEL_44;
              }

              goto LABEL_42;
            }
          }
        }
      }

      CFRelease(v22);
    }

    CFRelease(NetworkServiceEntity);
  }

  return v8;
}

    uint64_t v22 = 1002;
    goto LABEL_43;
  }

  return v4;
}

      if (v6)
      {
        if (!v9) {
          __int128 v9 = copy_default_set_name(1);
        }
        if (CFEqual(name, v9)) {
          name = v6;
        }
      }

      goto LABEL_47;
    }

SCNetworkConnectionRef SCNetworkConnectionCreateWithServiceID( CFAllocatorRef allocator, CFStringRef serviceID, SCNetworkConnectionCallBack callout, SCNetworkConnectionContext *context)
{
  v18[1] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFStringGetTypeID();
  if (!serviceID || CFGetTypeID(serviceID) != TypeID)
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  __int128 v9 = _SCNetworkServiceCopyActive(0LL, serviceID);
  if (!v9) {
    return 0LL;
  }
  __int128 v10 = v9;
  uint64_t v11 = (const __SCNetworkConnection *)SCNetworkConnectionCreateWithService( (uint64_t)allocator,  v9,  (uint64_t)callout,  (__int128 *)&context->version);
  CFRelease(v10);
  if (v11)
  {
    uint64_t v12 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v12 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v12;
    }

    uint64_t v13 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      uint64_t v15 = (char *)v18 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = (char *)v11 + 88;
      *(_WORD *)(v16 + 12) = 2112;
      *(void *)(v16 + 14) = v10;
      __SC_log_send(7, (uint64_t)v12, v13, v15);
    }
  }

  return v11;
}

uint64_t SCNetworkConnectionCreate(uint64_t a1, uint64_t a2, __int128 *a3)
{
  v10[1] = *MEMORY[0x1895F89C0];
  uint64_t Private = __SCNetworkConnectionCreatePrivate(a1, 0LL, a2, a3);
  if (Private)
  {
    char v4 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      char v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v4;
    }

    uint64_t v5 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      CFIndex v7 = (char *)v10 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 136315138;
      *(void *)(v8 + 4) = Private + 88;
      __SC_log_send(7, (uint64_t)v4, v5, v7);
    }
  }

  return Private;
}

CFStringRef SCNetworkConnectionCopyServiceID(SCNetworkConnectionRef connection)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_8:
      int v6 = 1002;
      goto LABEL_9;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_8;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_8;
  }
  size_t v3 = (const __SCNetworkService *)*((void *)connection + 10);
  if (v3)
  {
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3);
    return (CFStringRef)CFRetain(ServiceID);
  }

  int v6 = 5001;
LABEL_9:
  _SCErrorSet(v6);
  return 0LL;
}

uint64_t SCNetworkConnectionSetClientInfo( mach_port_name_t *cf, mach_port_name_t a2, mach_port_name_t a3, mach_port_name_t a4, mach_port_name_t a5)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_10:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_10;
    }
  }

  uint64_t v10 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v10) {
    goto LABEL_10;
  }
  mach_port_name_t v11 = cf[30];
  uint64_t v12 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  if (v11) {
    mach_port_deallocate(*MEMORY[0x1895FBBE0], v11);
  }
  cf[30] = a2;
  if (a2) {
    mach_port_mod_refs(*v12, a2, 0, 1);
  }
  cf[40] = a3;
  cf[41] = a4;
  uint64_t result = 1LL;
  cf[42] = a5;
  return result;
}

uint64_t SCNetworkConnectionSetClientAuditInfo( uint64_t a1, void *a2, mach_port_name_t a3, mach_port_name_t a4, mach_port_name_t a5, const unsigned __int8 *a6, const char *a7)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  if (*a2) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = a2[1] == 0LL;
  }
  if (v13 && a2[2] == 0LL && a2[3] == 0LL)
  {
    mach_port_name_t v19 = 0;
    mach_port_name_t v17 = 0;
  }

  else
  {
    __int128 v16 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v26.val = *(_OWORD *)a2;
    *(_OWORD *)&v26.val[4] = v16;
    mach_port_name_t v17 = audit_token_to_euid(&v26);
    __int128 v18 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v26.val = *(_OWORD *)a2;
    *(_OWORD *)&v26.val[4] = v18;
    mach_port_name_t v19 = audit_token_to_egid(&v26);
    __int128 v20 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v26.val = *(_OWORD *)a2;
    *(_OWORD *)&v26.val[4] = v20;
    a5 = audit_token_to_pid(&v26);
  }

  uint64_t result = SCNetworkConnectionSetClientInfo((mach_port_name_t *)a1, a3, v17, v19, a5);
  if ((_DWORD)result)
  {
    mach_port_name_t v22 = *(_DWORD *)(a1 + 156);
    uint64_t v23 = (ipc_space_t *)MEMORY[0x1895FBBE0];
    if (v22) {
      mach_port_deallocate(*MEMORY[0x1895FBBE0], v22);
    }
    *(_DWORD *)(a1 + 156) = a4;
    if (a4) {
      mach_port_mod_refs(*v23, a4, 0, 1);
    }
    __int128 v24 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 140) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 124) = v24;
    if (a6 && !uuid_is_null(a6)) {
      uuid_copy((unsigned __int8 *)(a1 + 172), a6);
    }
    CFTypeID v25 = *(const void **)(a1 + 192);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 192) = 0LL;
    }

    if (a7) {
      *(void *)(a1 + 192) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], a7, 0x8000100u);
    }
    return 1LL;
  }

  return result;
}

CFDictionaryRef SCNetworkConnectionCopyStatistics(SCNetworkConnectionRef connection)
{
  v21[1] = *(UInt8 **)MEMORY[0x1895F89C0];
  v21[0] = 0LL;
  mach_error_t v19 = 1001;
  unsigned int v20 = 0;
  CFPropertyListRef v18 = 0LL;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_28:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_28;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_28;
  }
  size_t v3 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2000000000LL;
    uint64_t v17 = 0LL;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    char v4 = dispatch_semaphore_create(0LL);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    ne_session_get_info();
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v4);
    if (v15[3])
    {
      uint64_t v5 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCObject();
      xpc_release((xpc_object_t)v15[3]);
    }

    else
    {
      _SCErrorSet(1001);
      uint64_t v5 = 0LL;
    }

    _Block_object_dispose(&v14, 8);
  }

  else
  {
    while (1)
    {
      mach_port_t v6 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v6) {
        break;
      }
      mach_error_t v7 = pppcontroller_copystatistics(v6, v21, &v20, &v19);
      if (!__SCNetworkConnectionNeedsRetry( (uint64_t)connection,  (uint64_t)"SCNetworkConnectionCopyStatistics()",  v7,  &v19))
      {
        if (!v21[0]) {
          goto LABEL_16;
        }
        int v8 = _SCUnserialize(&v18, 0LL, v21[0], v20);
        int v9 = v19;
        if (!v8 && v19)
        {
          int v9 = SCError();
          mach_error_t v19 = v9;
        }

        if (v9 || (v11 = v18, CFTypeID TypeID = CFDictionaryGetTypeID(), v11) && CFGetTypeID(v11) == TypeID)
        {
LABEL_16:
          int v10 = v19;
          if (!v19) {
            break;
          }
        }

        else
        {
          int v10 = 1001;
          mach_error_t v19 = 1001;
        }

        if (v18)
        {
          CFRelease(v18);
          CFPropertyListRef v18 = 0LL;
          int v10 = v19;
        }

        _SCErrorSet(v10);
        break;
      }
    }

    pthread_mutex_unlock(v3);
    return (CFDictionaryRef)v18;
  }

  return v5;
}

uint64_t __SCNetworkConnectionCopyStatistics_block_invoke(uint64_t a1, xpc_object_t object)
{
  if (object) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = xpc_retain(object);
  }
  ne_session_release();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t __SCNetworkConnectionSessionPort(uint64_t a1)
{
  kern_return_t v16;
  int v17;
  int v18;
  int v19;
  mach_error_t v20;
  int v21;
  int v22;
  os_log_s *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  mach_port_name_t *v28;
  char *v29;
  uint64_t v30;
  const char *v31;
  mach_port_t v32;
  unsigned int v33;
  SCDynamicStoreRef v34;
  os_log_s *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  os_log_s *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  os_log_s *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  os_log_s *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  os_log_s *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  os_log_s *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  os_log_s *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unsigned int v78;
  mach_port_name_t v79;
  uint64_t v80;
  __int128 v81;
  CFMachPortContext v82;
  kern_return_t v83;
  mach_port_name_t name[2];
  vm_size_t v85;
  uint64_t v86;
  CFDataRef v87[2];
  uint64_t v1 = a1;
  v87[1] = *(CFDataRef *)MEMORY[0x1895F89C0];
  uint64_t v86 = 0LL;
  v87[0] = 0LL;
  *(void *)name = 0LL;
  uint64_t v85 = 0LL;
  uint64_t v83 = 1001;
  size_t v3 = (mach_port_name_t *)(a1 + 200);
  uint64_t result = *(unsigned int *)(a1 + 200);
  if ((_DWORD)result) {
    return result;
  }
  char v4 = *(const __SCNetworkService **)(v1 + 80);
  if (!v4)
  {
    mach_error_t inserted = 0;
    uint64_t v83 = 5001;
    goto LABEL_88;
  }

  unint64_t v5 = 0x18C54F000uLL;
  mach_port_t v6 = scnc_server;
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(v4);
  if (!_SCSerializeString(ServiceID, v87, (vm_address_t *)&v86, &v85))
  {
    mach_error_t inserted = 0;
    goto LABEL_88;
  }

  int v8 = *(__CFMachPort **)(v1 + 208);
  int v9 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  if (v8)
  {
    mach_port_name_t Port = CFMachPortGetPort(v8);
    CFMachPortInvalidate(*(CFMachPortRef *)(v1 + 208));
    CFRelease(*(CFTypeRef *)(v1 + 208));
    *(void *)(v1 + 208) = 0LL;
    mach_port_mod_refs(*v9, Port, 1u, -1);
  }

  mach_port_name_t v11 = audit_session_self();
  mach_error_t inserted = 0;
  uint64_t v78 = 0;
  unint64_t v13 = 0x18C54F000uLL;
  *(void *)&__int128 v14 = 136315138LL;
  uint64_t v81 = v14;
  uint64_t v80 = v1;
  uint64_t v79 = v11;
  while (1)
  {
    if (*(void *)(v1 + 232)) {
      BOOL v15 = name[1] == 0;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = mach_port_allocate(*v9, 1u, &name[1]);
      if (v16)
      {
        mach_error_t inserted = v16;
        uint64_t v42 = *(os_log_s **)(v13 + 2280);
        if (!v42)
        {
          uint64_t v42 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          *(void *)(v13 + 2280) = v42;
        }

        uint64_t v43 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v42, (os_log_type_t)v43))
        {
          SCNetworkSetRef v44 = _os_log_pack_size();
          int v45 = (char *)&v78 - ((MEMORY[0x1895F8858](v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          CFIndex v46 = _os_log_pack_fill();
          uint64_t v47 = mach_error_string(inserted);
          *(_DWORD *)CFIndex v46 = v81;
          *(void *)(v46 + 4) = v47;
          __SC_log_send(3, (uint64_t)v42, v43, v45);
        }
      }

      else
      {
        mach_error_t inserted = mach_port_insert_right(*v9, name[1], name[1], 0x14u);
        if (!inserted) {
          goto LABEL_14;
        }
        uint64_t v48 = *(os_log_s **)(v13 + 2280);
        if (!v48)
        {
          uint64_t v48 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          *(void *)(v13 + 2280) = v48;
        }

        SCPreferencesRef v49 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v48, (os_log_type_t)v49))
        {
LABEL_78:
          uint64_t v50 = _os_log_pack_size();
          int v51 = (char *)&v78 - ((MEMORY[0x1895F8858](v50) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v52 = _os_log_pack_fill();
          BOOL v53 = mach_error_string(inserted);
          *(_DWORD *)uint64_t v52 = v81;
          *(void *)(v52 + 4) = v53;
          __SC_log_send(5, (uint64_t)v48, v49, v51);
        }

LABEL_79:
        mach_port_mod_refs(*v9, name[1], 1u, -1);
      }

      uint64_t v83 = inserted;
      if (!v11) {
        goto LABEL_88;
      }
      goto LABEL_87;
    }

            uint64_t v108 = 0LL;
            __int128 v109 = 0LL;
            uint64_t v107 = 0LL;
            uint64_t v113 = 0LL;
            uint64_t v17 = 0LL;
            __int128 v14 = 0LL;
            BOOL v15 = 0LL;
            uint64_t v16 = 0LL;
            goto LABEL_80;
          }

          uint64_t v55 = __log_SCNetworkConfiguration();
          uint64_t v56 = _SC_syslog_os_log_mapping(5);
          if (!__SC_log_enabled(5, v55, (os_log_type_t)v56)) {
            goto LABEL_79;
          }
          CFStringRef v59 = _os_log_pack_size();
          CFStringRef v115 = &v100;
          uint64_t v58 = (char *)&v100 - ((MEMORY[0x1895F8858](v59) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v60 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v60 = 138412290;
          *(void *)(v60 + 4) = v9;
        }

        else
        {
          uint64_t v55 = __log_SCNetworkConfiguration();
          uint64_t v56 = _SC_syslog_os_log_mapping(5);
          if (!__SC_log_enabled(5, v55, (os_log_type_t)v56)) {
            goto LABEL_79;
          }
          CFIndex v57 = _os_log_pack_size();
          CFStringRef v115 = &v100;
          uint64_t v58 = (char *)&v100 - ((MEMORY[0x1895F8858](v57) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
        }

        __SC_log_send(5, (uint64_t)v55, v56, v58);
        goto LABEL_79;
      }

      __int128 v24 = __log_SCNetworkConfiguration();
      CFTypeID v25 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v24, (os_log_type_t)v25)) {
        goto LABEL_23;
      }
      CFTypeID v31 = _os_log_pack_size();
      __int128 v27 = v7;
      __int128 v28 = (char *)&v100 - ((MEMORY[0x1895F8858](v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      goto LABEL_21;
    }

    __int128 v24 = __log_SCNetworkConfiguration();
    CFTypeID v25 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v24, (os_log_type_t)v25))
    {
      uint64_t v29 = _os_log_pack_size();
      __int128 v28 = (char *)&v100 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v30 = 138412290;
      *(void *)(v30 + 4) = v6;
LABEL_22:
      __SC_log_send(5, (uint64_t)v24, v25, v28);
    }
  }

  else
  {
    __int128 v24 = __log_SCNetworkConfiguration();
    CFTypeID v25 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v24, (os_log_type_t)v25))
    {
      audit_token_t v26 = _os_log_pack_size();
      __int128 v27 = v7;
      __int128 v28 = (char *)&v100 - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
LABEL_21:
      mach_error_t v7 = v27;
      uint64_t v32 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v32 = 138412290;
      *(void *)(v32 + 4) = v27;
      goto LABEL_22;
    }
  }

LABEL_14:
    if (!v6) {
      goto LABEL_37;
    }
    if (!*(_DWORD *)(v1 + 120)
      && !*(_DWORD *)(v1 + 156)
      && (uint64_t v17 = *(_DWORD *)(v1 + 160), v17 == geteuid())
      && (CFPropertyListRef v18 = *(_DWORD *)(v1 + 164), v18 == getegid())
      && (mach_error_t v19 = *(_DWORD *)(v1 + 168), v19 == getpid()))
    {
      unsigned int v20 = pppcontroller_attach(v6, v86, v85, *MEMORY[0x1895F9630], name[1], v11, v3, &v83);
    }

    else
    {
      CFRange v21 = *(_DWORD *)(v1 + 120) ? *(_DWORD *)(v1 + 120) : v11;
      mach_port_name_t v22 = *(_DWORD *)(v1 + 156) ? *(_DWORD *)(v1 + 156) : *MEMORY[0x1895F9630];
      unsigned int v20 = pppcontroller_attach_proxy( v6,  v86,  v85,  v22,  name[1],  v21,  *(_DWORD *)(v1 + 160),  *(_DWORD *)(v1 + 164),  *(_DWORD *)(v1 + 168),  v3,  &v83);
    }

    mach_error_t inserted = v20;
    if (!v20) {
      break;
    }
    uint64_t v23 = *(os_log_s **)(v13 + 2280);
    if (!v23)
    {
      uint64_t v23 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 2280) = v23;
    }

    __int128 v24 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v23, (os_log_type_t)v24))
    {
      CFTypeID v25 = _os_log_pack_size();
      audit_token_t v26 = v5;
      __int128 v27 = v13;
      __int128 v28 = v3;
      uint64_t v29 = (char *)&v78 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      CFTypeID v31 = SCErrorString(inserted);
      *(_DWORD *)uint64_t v30 = v81;
      *(void *)(v30 + 4) = v31;
      size_t v3 = v28;
      unint64_t v13 = v27;
      unint64_t v5 = v26;
      __SC_log_send(6, (uint64_t)v23, v24, v29);
      mach_port_name_t v11 = v79;
      uint64_t v1 = v80;
    }

    if (inserted == 268435459)
    {
      int v9 = (ipc_space_t *)MEMORY[0x1895FBBE0];
    }

    else
    {
      int v9 = (ipc_space_t *)MEMORY[0x1895FBBE0];
      if (inserted != -308)
      {
        uint64_t v83 = inserted;
        goto LABEL_72;
      }

      mach_port_mod_refs(*MEMORY[0x1895FBBE0], name[1], 1u, -1);
      name[1] = 0;
    }

  if (!a2) {
    return;
  }
  __strlcpy_chk();
  __strlcat_chk();
  CFTypeID v31 = open(v69, 3585, 420LL);
  if (v31 == -1)
  {
    uint64_t v38 = __log_SCNetworkConfiguration();
    uint64_t v39 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v38, (os_log_type_t)v39)) {
      return;
    }
LABEL_20:
    int v40 = _os_log_pack_size();
    CFRange v41 = (char *)&v67 - ((MEMORY[0x1895F8858](v40) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v42 = _os_log_pack_fill();
    uint64_t v43 = __error();
    SCNetworkSetRef v44 = SCErrorString(*v43);
    *(_DWORD *)uint64_t v42 = 136315138;
    *(void *)(v42 + 4) = v44;
    __SC_log_send(5, (uint64_t)v38, v39, v41);
    return;
  }

  uint64_t v32 = v31;
  int v33 = CFPropertyListCreateData(0LL, a2, kCFPropertyListXMLFormat_v1_0, 0LL, 0LL);
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = CFDataGetBytePtr(v33);
    uint64_t v36 = CFDataGetLength(v34);
    write(v32, v35, v36);
    close(v32);
    uint64_t v37 = v34;
LABEL_30:
    CFRelease(v37);
    return;
  }

  uint64_t v63 = __log_SCNetworkConfiguration();
  uint64_t v64 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v63, (os_log_type_t)v64))
  {
    uint64_t v65 = _os_log_pack_size();
    uint64_t v66 = (char *)&v67 - ((MEMORY[0x1895F8858](v65) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v63, v64, v66);
  }

  close(v32);
}

  MEMORY[0x186E09434](v1);
  return v2;
}

      if (!CFEqual(InterfaceType, v13)) {
        goto LABEL_17;
      }
      uint64_t result = 1LL;
      break;
    case 4:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      unint64_t v13 = @"IPSec";
      goto LABEL_14;
    case 5:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      unint64_t v13 = @"VPN";
      goto LABEL_14;
    default:
      return result;
  }

  return result;
}

    CFRelease(v7);
    return;
  }

  CFRange v21 = __log_SCNetworkConfiguration();
  mach_port_name_t v22 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v21, (os_log_type_t)v22))
  {
    uint64_t v23 = _os_log_pack_size();
    __int128 v24 = &v32[-((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    CFTypeID v25 = _os_log_pack_fill();
    *(_DWORD *)CFTypeID v25 = 136315138;
    *(void *)(v25 + 4) = "set_configured_mtu";
    __SC_log_send(5, (uint64_t)v21, v22, v24);
  }

  if (a3) {
    *a3 = v20;
  }
  return result;
}

LABEL_37:
    pthread_mutex_lock(&scnc_lock);
    uint64_t v32 = *(_DWORD *)(v5 + 2320);
    if (!v32) {
      goto LABEL_40;
    }
    if (v32 == v6)
    {
      scnc_server_name = 0LL;
      mach_port_deallocate(*v9, v6);
LABEL_40:
      uint64_t v32 = __SCNetworkConnectionServerPort(&v83);
      *(_DWORD *)(v5 + 2320) = v32;
    }

    pthread_mutex_unlock(&scnc_lock);
    mach_port_t v6 = v32;
    if (!v32)
    {
      if (v83 != 1102) {
        goto LABEL_72;
      }
      int v33 = v78;
      if (v78)
      {
        if (v78 > 0x991) {
          goto LABEL_72;
        }
      }

      else
      {
        uint64_t v34 = SCDynamicStoreCreate(0LL, @"SCNetworkConnection connect", 0LL, 0LL);
        if (v34) {
          CFRelease(v34);
        }
      }

      uint64_t v78 = v33 + 50;
      usleep(0xC350u);
      mach_port_t v6 = 0;
    }
  }

  if (v83)
  {
    uint64_t v35 = *(os_log_s **)(v13 + 2280);
    if (!v35)
    {
      uint64_t v35 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 2280) = v35;
    }

    uint64_t v36 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v35, (os_log_type_t)v36))
    {
      uint64_t v37 = _os_log_pack_size();
      uint64_t v38 = (char *)&v78 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v39 = _os_log_pack_fill();
      int v40 = SCErrorString(v83);
      CFRange v41 = ", w/session_port!=MACH_PORT_NULL";
      if (!*v3) {
        CFRange v41 = "";
      }
      *(_DWORD *)uint64_t v39 = 136315394;
      *(void *)(v39 + 4) = v40;
      *(_WORD *)(v39 + 12) = 2080;
      *(void *)(v39 + 14) = v41;
      __SC_log_send(7, (uint64_t)v35, v36, v38);
    }

    if (*v3)
    {
      mach_port_deallocate(*v9, *v3);
      mach_port_name_t *v3 = 0;
    }

    if (name[1])
    {
      mach_port_mod_refs(*v9, name[1], 1u, -1);
      mach_error_t inserted = 0;
      goto LABEL_85;
    }

    mach_error_t inserted = 0;
    if (!v11) {
      goto LABEL_88;
    }
LABEL_87:
    mach_port_deallocate(*v9, v11);
    goto LABEL_88;
  }

  mach_error_t inserted = 0;
LABEL_72:
  if (!name[1])
  {
LABEL_86:
    if (!v11) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }

  if (!*v3)
  {
    mach_port_mod_refs(*v9, name[1], 1u, -1);
    mach_port_deallocate(*v9, name[1]);
LABEL_85:
    name[1] = 0;
    goto LABEL_86;
  }

  v82.version = 0LL;
  v82.info = (void *)v1;
  v82.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
  v82.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
  v82.copyDescription = (CFStringRef (__cdecl *)(const void *))pppMPCopyDescription;
  mach_error_t inserted = mach_port_request_notification(*v9, name[1], 70, 1u, name[1], 0x15u, name);
  if (inserted)
  {
    uint64_t v48 = *(os_log_s **)(v13 + 2280);
    if (!v48)
    {
      uint64_t v48 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 2280) = v48;
    }

    SCPreferencesRef v49 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v48, (os_log_type_t)v49)) {
      goto LABEL_78;
    }
    goto LABEL_79;
  }

  if (name[0])
  {
    uint64_t v74 = *(os_log_s **)(v13 + 2280);
    if (!v74)
    {
      uint64_t v74 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 2280) = v74;
    }

    uint64_t v75 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v74, (os_log_type_t)v75))
    {
      uint64_t v76 = _os_log_pack_size();
      v77 = (char *)&v78 - ((MEMORY[0x1895F8858](v76) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v74, v75, v77);
    }
  }

  *(void *)(v1 + 208) = _SC_CFMachPortCreateWithPort( (uint64_t)"SCNetworkConnection",  name[1],  (void (__cdecl *)(CFMachPortRef, void *, CFIndex, void *))__SCNetworkConnectionMachCallBack,  &v82);
  *(_BYTE *)(v1 + 216) = 0;
  if (v11) {
    goto LABEL_87;
  }
LABEL_88:
  if (v87[0]) {
    CFRelease(v87[0]);
  }
  if (v83 == 1102)
  {
    uint64_t v63 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v63 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v63;
    }

    if (inserted) {
      uint64_t v64 = 3;
    }
    else {
      uint64_t v64 = 5;
    }
    uint64_t v65 = _SC_syslog_os_log_mapping(v64);
    if (!__SC_log_enabled(v64, v63, (os_log_type_t)v65)) {
      goto LABEL_112;
    }
    uint64_t v66 = _os_log_pack_size();
    uint64_t v67 = (char *)&v78 - ((MEMORY[0x1895F8858](v66) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v68 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v68 = 136315138;
    *(void *)(v68 + 4) = v1 + 88;
    CFStringRef v59 = v64;
    uint64_t v60 = (uint64_t)v63;
  }

  else
  {
    if (!v83)
    {
      uint64_t v54 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v54 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v54;
      }

      uint64_t v55 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v54, (os_log_type_t)v55))
      {
        uint64_t v56 = _os_log_pack_size();
        CFIndex v57 = (char *)&v78 - ((MEMORY[0x1895F8858](v56) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v58 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v58 = 136315138;
        *(void *)(v58 + 4) = v1 + 88;
        CFStringRef v59 = 7;
        uint64_t v60 = (uint64_t)v54;
        int v61 = v55;
        uint64_t v62 = v57;
        goto LABEL_111;
      }

      goto LABEL_112;
    }

    uint64_t v69 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v69 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v69;
    }

    if (inserted) {
      v70 = 3;
    }
    else {
      v70 = 5;
    }
    uint64_t v65 = _SC_syslog_os_log_mapping(v70);
    if (!__SC_log_enabled(v70, v69, (os_log_type_t)v65)) {
      goto LABEL_112;
    }
    uint64_t v71 = _os_log_pack_size();
    uint64_t v67 = (char *)&v78 - ((MEMORY[0x1895F8858](v71) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v72 = _os_log_pack_fill();
    uint64_t v73 = SCErrorString(v83);
    *(_DWORD *)uint64_t v72 = 136315394;
    *(void *)(v72 + 4) = v1 + 88;
    *(_WORD *)(v72 + 12) = 2080;
    *(void *)(v72 + 14) = v73;
    CFStringRef v59 = v70;
    uint64_t v60 = (uint64_t)v69;
  }

  int v61 = v65;
  uint64_t v62 = v67;
LABEL_111:
  __SC_log_send(v59, v60, v61, v62);
LABEL_112:
  if (v83) {
    _SCErrorSet(v83);
  }
  return *v3;
}

        if (nw_path_is_local())
        {
          *((_DWORD *)v45 + 6) |= 0x10000u;
          mach_error_t v19 = "nw_path_status_satisfied, by address, local";
          goto LABEL_39;
        }

  mach_port_name_t v22 = 0LL;
LABEL_38:
  audit_token_t v26 = 0;
  if (v18) {
LABEL_39:
  }
    CFRelease(v18);
LABEL_40:
  if (v22) {
    CFRelease(v22);
  }
  if (v26)
  {
    BOOL v15 = v26;
    goto LABEL_16;
  }

  return __SCBridgeInterfaceSetMemberInterfaces((uint64_t)a1, (CFArrayRef)a2);
}

uint64_t __SCNetworkConnectionNeedsRetry(uint64_t a1, uint64_t a2, mach_error_t a3, mach_error_t *a4)
{
  v20[1] = *MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 268435459:
      goto LABEL_4;
    case 0:
      return 0LL;
    case -308:
LABEL_4:
      mach_error_t v7 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        mach_error_t v7 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v7;
      }

      uint64_t v8 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
      {
        uint64_t v9 = _os_log_pack_size();
        int v10 = (char *)v20 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v11 = 136315138;
        *(void *)(v11 + 4) = a1 + 88;
        __SC_log_send(7, (uint64_t)v7, v8, v10);
      }

      mach_port_deallocate(*MEMORY[0x1895FBBE0], *(_DWORD *)(a1 + 200));
      break;
    default:
      __int128 v14 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        __int128 v14 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v14;
      }

      uint64_t v15 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
      {
        uint64_t v16 = _os_log_pack_size();
        uint64_t v17 = (char *)v20 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        mach_error_t v19 = mach_error_string(a3);
        *(_DWORD *)uint64_t v18 = 136315650;
        *(void *)(v18 + 4) = a1 + 88;
        *(_WORD *)(v18 + 12) = 2080;
        *(void *)(v18 + 14) = a2;
        *(_WORD *)(v18 + 22) = 2080;
        *(void *)(v18 + 24) = v19;
        __SC_log_send(5, (uint64_t)v14, v15, v17);
      }

      break;
  }

  *(_DWORD *)(a1 + 200) = 0;
  uint64_t result = 0LL;
  *a4 = a3;
  return result;
}

const void *isA_CFDictionary(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0LL;
}

uint64_t SCNetworkConnectionGetService(void *cf)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[10];
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

SCNetworkConnectionStatus SCNetworkConnectionGetStatus(SCNetworkConnectionRef connection)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  mach_error_t v16 = 1001;
  SCNetworkConnectionStatus v17 = kSCNetworkConnectionInvalid;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_27:
      int v8 = 1002;
      goto LABEL_28;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_27;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_27;
  }
  size_t v3 = (const __SCNetworkService *)*((void *)connection + 10);
  if (!v3 || (CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3), !CFStringGetLength(ServiceID)))
  {
    int v8 = 5001;
LABEL_28:
    _SCErrorSet(v8);
    return -1;
  }

  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v13 = 0LL;
    __int128 v14 = &v13;
    uint64_t v15 = 0x2000000000LL;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    unint64_t v5 = dispatch_semaphore_create(0LL);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    ne_session_get_status();
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
    unsigned int v6 = *((_DWORD *)v14 + 6) - 1;
    if (v6 > 4) {
      SCNetworkConnectionStatus v7 = kSCNetworkConnectionInvalid;
    }
    else {
      SCNetworkConnectionStatus v7 = dword_18124A468[v6];
    }
    _Block_object_dispose(&v13, 8);
  }

  else
  {
    for (unsigned int i = 0; ; i += 10)
    {
      do
      {
        mach_port_t v10 = __SCNetworkConnectionSessionPort(connection);
        if (!v10) {
          goto LABEL_23;
        }
        mach_error_t v11 = pppcontroller_getstatus(v10, &v17, &v16);
      }

      while (__SCNetworkConnectionNeedsRetry( (uint64_t)connection,  (uint64_t)"SCNetworkConnectionGetStatus()",  v11,  &v16));
      if (*((_BYTE *)connection + 216) || v16 != 5001 || i > 0xEF) {
        break;
      }
      usleep(0x2710u);
    }

    if (v16)
    {
      _SCErrorSet(v16);
LABEL_23:
      SCNetworkConnectionStatus v17 = kSCNetworkConnectionInvalid;
      goto LABEL_24;
    }

    *((_BYTE *)connection + 216) = 1;
LABEL_24:
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    return v17;
  }

  return v7;
}

uint64_t __SCNetworkConnectionGetStatus_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  ne_session_release();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t SCNetworkConnectionGetStatusFromNEStatus(int a1)
{
  else {
    return dword_18124A468[a1 - 1];
  }
}

CFDictionaryRef SCNetworkConnectionCopyExtendedStatus(SCNetworkConnectionRef connection)
{
  v24[1] = *(UInt8 **)MEMORY[0x1895F89C0];
  v24[0] = 0LL;
  unsigned int v23 = 0;
  CFTypeRef cf = 0LL;
  mach_error_t v21 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_35:
      int v7 = 1002;
      goto LABEL_36;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_35;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_35;
  }
  size_t v3 = (const __SCNetworkService *)*((void *)connection + 10);
  if (!v3 || (CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3), !CFStringGetLength(ServiceID)))
  {
    int v7 = 5001;
LABEL_36:
    _SCErrorSet(v7);
    return 0LL;
  }

  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2000000000LL;
    uint64_t v20 = 0LL;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    unint64_t v5 = dispatch_semaphore_create(0LL);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    ne_session_get_info();
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
    unsigned int v6 = (const __CFDictionary *)v18[3];
    if (!v6) {
      _SCErrorSet(1001);
    }
    _Block_object_dispose(&v17, 8);
  }

  else
  {
    unsigned int v8 = 0;
    while (1)
    {
      mach_port_t v9 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v9) {
        break;
      }
      mach_error_t v10 = pppcontroller_copyextendedstatus(v9, v24, &v23, &v21);
      if (!__SCNetworkConnectionNeedsRetry( (uint64_t)connection,  (uint64_t)"SCNetworkConnectionCopyExtendedStatus()",  v10,  &v21))
      {
        if (v24[0])
        {
          int v11 = _SCUnserialize(&cf, 0LL, v24[0], v23);
          int v12 = v21;
          if (!v11 && v21)
          {
            int v12 = SCError();
            mach_error_t v21 = v12;
          }

          if (!v12)
          {
            CFTypeRef v13 = cf;
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (!v13 || CFGetTypeID(v13) != TypeID)
            {
              int v15 = 1001;
              mach_error_t v21 = 1001;
LABEL_30:
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0LL;
                int v15 = v21;
              }

              _SCErrorSet(v15);
              break;
            }
          }
        }

        int v15 = v21;
        if (*((_BYTE *)connection + 216) || v21 != 5001 || v8 > 0xEF)
        {
          if (!v21)
          {
            *((_BYTE *)connection + 216) = 1;
            break;
          }

          goto LABEL_30;
        }

        v8 += 10;
        usleep(0x2710u);
      }
    }

    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    return (CFDictionaryRef)cf;
  }

  return v6;
}

uint64_t __SCNetworkConnectionCopyExtendedStatus_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = _CFXPCCreateCFObjectFromXPCObject();
    ne_session_release();
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
  }

  else
  {
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    return ne_session_get_status();
  }

uint64_t __SCNetworkConnectionCopyExtendedStatus_block_invoke_2(uint64_t a1, int a2)
{
  keys[1] = *(void **)MEMORY[0x1895F89C0];
  if ((a2 - 1) >= 5)
  {
    unsigned int valuePtr = -1;
  }

  else
  {
    unsigned int valuePtr = dword_18124A468[a2 - 1];
    keys[0] = @"Status";
    size_t v3 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberIntType, &valuePtr);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CFDictionaryCreate( v3,  (const void **)keys,  (const void **)&values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    CFRelease(values);
  }

  ne_session_release();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

Boolean SCNetworkConnectionStart( SCNetworkConnectionRef connection, CFDictionaryRef userOptions, Boolean linger)
{
  int v3 = linger;
  v53[1] = *(CFDataRef *)MEMORY[0x1895F89C0];
  uint64_t v52 = 0LL;
  v53[0] = 0LL;
  vm_size_t v51 = 0LL;
  int v50 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection) {
      goto LABEL_71;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_71;
    }
  }

  uint64_t v6 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v6) {
    goto LABEL_71;
  }
  if (!userOptions)
  {
    userOptions = (CFDictionaryRef)*((void *)connection + 40);
    goto LABEL_10;
  }

  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(userOptions) != TypeID)
  {
LABEL_71:
    _SCErrorSet(1002);
    return 0;
  }

  if (*((void *)connection + 40))
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, userOptions);
    if (MutableCopy)
    {
      mach_port_t v9 = MutableCopy;
      CFDictionaryApplyFunction( *((CFDictionaryRef *)connection + 40),  (CFDictionaryApplierFunction)_SCNetworkConnectionMergeDictionaries,  MutableCopy);
      CFRelease(*((CFTypeRef *)connection + 40));
      *((void *)connection + 40) = v9;
      userOptions = v9;
    }
  }

LABEL_10:
  if (debug >= 1)
  {
    mach_error_t v10 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      mach_error_t v10 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v10;
    }

    uint64_t v11 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      CFTypeRef v13 = &v49[-((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = (char *)connection + 88;
      __SC_log_send(6, (uint64_t)v10, v11, v13);
    }

    if (userOptions)
    {
      int v15 = CFDictionaryCreateMutableCopy(0LL, 0LL, userOptions);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v15, @"PPP");
      CFTypeID v17 = CFDictionaryGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v17)
        {
          uint64_t v18 = CFDictionaryGetValue(Value, @"AuthPasswordEncryption");
          CFTypeID v19 = CFStringGetTypeID();
          if (!v18 || CFGetTypeID(v18) != v19 || !CFEqual(v18, @"Keychain"))
          {
            uint64_t v20 = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
            CFDictionaryReplaceValue(v20, @"AuthPassword", @"******");
            CFDictionarySetValue(v15, @"PPP", v20);
            CFRelease(v20);
          }
        }
      }

      mach_error_t v21 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"L2TP");
      CFTypeID v22 = CFDictionaryGetTypeID();
      if (v21)
      {
        if (CFGetTypeID(v21) == v22)
        {
          unsigned int v23 = CFDictionaryGetValue(v21, @"IPSecSharedSecretEncryption");
          CFTypeID v24 = CFStringGetTypeID();
          if (!v23 || CFGetTypeID(v23) != v24 || !CFEqual(v23, @"Keychain"))
          {
            CFTypeID v25 = CFDictionaryCreateMutableCopy(0LL, 0LL, v21);
            CFDictionaryReplaceValue(v25, @"IPSecSharedSecret", @"******");
            CFDictionarySetValue(v15, @"L2TP", v25);
            CFRelease(v25);
          }
        }
      }

      audit_token_t v26 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"IPSec");
      CFTypeID v27 = CFDictionaryGetTypeID();
      if (v26)
      {
        if (CFGetTypeID(v26) == v27)
        {
          __int128 v28 = CFDictionaryGetValue(v26, @"SharedSecretEncryption");
          CFTypeID v29 = CFStringGetTypeID();
          if (!v28 || CFGetTypeID(v28) != v29 || !CFEqual(v28, @"Keychain"))
          {
            uint64_t v30 = CFDictionaryCreateMutableCopy(0LL, 0LL, v26);
            CFDictionaryReplaceValue(v30, @"SharedSecret", @"******");
            CFDictionarySetValue(v15, @"IPSec", v30);
            CFRelease(v30);
          }
        }
      }
    }

    else
    {
      int v15 = 0LL;
    }

    CFTypeID v31 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      CFTypeID v31 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v31;
    }

    uint64_t v32 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v31, (os_log_type_t)v32))
    {
      uint64_t v33 = _os_log_pack_size();
      uint64_t v34 = &v49[-((MEMORY[0x1895F8858](v33) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v35 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v35 = 138412290;
      *(void *)(v35 + 4) = v15;
      __SC_log_send(6, (uint64_t)v31, v32, v34);
    }

    if (v15) {
      CFRelease(v15);
    }
  }

  uint64_t v36 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  uint64_t v37 = (const void *)*((void *)connection + 42);
  if (v37)
  {
    CFRelease(v37);
    *((void *)connection + 42) = 0LL;
  }

  if (*((void *)connection + 43))
  {
    if (userOptions) {
      uint64_t v38 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    }
    else {
      uint64_t v38 = 0LL;
    }
    if (*((_DWORD *)connection + 39)) {
      ne_session_start_on_behalf_of();
    }
    else {
      ne_session_start_with_options();
    }
    ne_session_send_barrier();
    if (v38) {
      xpc_release(v38);
    }
  }

  else
  {
    if (userOptions && !_SCSerialize(userOptions, v53, (vm_address_t *)&v52, &v51))
    {
LABEL_68:
      Boolean v47 = 0;
      goto LABEL_69;
    }

    do
    {
      mach_port_t v39 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v39)
      {
        if (v53[0]) {
          CFRelease(v53[0]);
        }
        goto LABEL_68;
      }

      mach_error_t v40 = pppcontroller_start(v39, v52, v51, v3, &v50);
    }

    while (__SCNetworkConnectionNeedsRetry( (uint64_t)connection,  (uint64_t)"SCNetworkConnectionStart()",  v40,  &v50));
    if (v53[0]) {
      CFRelease(v53[0]);
    }
    if (debug >= 1)
    {
      CFRange v41 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        CFRange v41 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v41;
      }

      uint64_t v42 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v41, (os_log_type_t)v42))
      {
        uint64_t v43 = _os_log_pack_size();
        SCNetworkSetRef v44 = &v49[-((MEMORY[0x1895F8858](v43) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v45 = _os_log_pack_fill();
        int v46 = v50;
        *(_DWORD *)uint64_t v45 = 136315394;
        *(void *)(v45 + 4) = (char *)connection + 88;
        *(_WORD *)(v45 + 12) = 1024;
        *(_DWORD *)(v45 + 14) = v46;
        __SC_log_send(6, (uint64_t)v41, v42, v44);
      }
    }

    if (v50)
    {
      _SCErrorSet(v50);
      goto LABEL_68;
    }
  }

  Boolean v47 = 1;
LABEL_69:
  pthread_mutex_unlock(v36);
  return v47;
}

  uint64_t Private = __SCNetworkReachabilityCreatePrivate();
  int v3 = Private;
  if (!Private) {
    return (SCNetworkReachabilityRef)v3;
  }
  *((_DWORD *)Private + 20) = 1;
  if (v6)
  {
    *((void *)Private + 12) = nw_endpoint_create_address((const sockaddr *)v6);
    if (v5)
    {
      unsigned int v8 = v6[1];
      if (v8 != v5->sa_family || *v6 != v5->sa_len) {
        goto LABEL_28;
      }
      if (v8 == 30)
      {
        if (*((_DWORD *)v6 + 6) != *(_DWORD *)&v5[1].sa_data[6]) {
          goto LABEL_28;
        }
        uint64_t v11 = v6 + 8;
        mach_error_t v10 = (sockaddr *)&v5->sa_data[6];
        mach_port_t v9 = 16LL;
      }

      else
      {
        if (v8 == 2) {
          mach_port_t v9 = 4LL;
        }
        else {
          mach_port_t v9 = *v6;
        }
        if (v8 == 2) {
          mach_error_t v10 = (sockaddr *)&v5->sa_data[2];
        }
        else {
          mach_error_t v10 = v5;
        }
        if (v8 == 2) {
          uint64_t v11 = v6 + 4;
        }
        else {
          uint64_t v11 = v6;
        }
      }

      if (!bcmp(v11, v10, v9))
      {
        address = nw_retain(*((void **)v3 + 12));
LABEL_29:
        *((void *)v3 + 13) = address;
        goto LABEL_30;
      }

  if (a6)
  {
    mach_error_t v16 = CFStringGetLength(a6);
    CFTypeID v17 = (char *)malloc(v16 + 1);
    uint64_t v18 = CFStringGetLength(a6);
    if (CFStringGetCString(a6, v17, v18 + 1, 0x600u)) {
      nw_parameters_set_account_id();
    }
    if (v17) {
      free(v17);
    }
  }

  if (a4)
  {
    CFTypeID v19 = CFStringGetLength(a4);
    uint64_t v20 = (char *)malloc(v19 + 1);
    mach_error_t v21 = CFStringGetLength(a4);
    if (CFStringGetCString(a4, v20, v21 + 1, 0x600u)) {
      nw_parameters_set_effective_bundle_id();
    }
    if (v20) {
      free(v20);
    }
  }

  if (*a1 | a1[1] | a1[2] | a1[3]) {
    nw_parameters_set_effective_audit_token();
  }
  if (host || (host = (__CFString *)nw_endpoint_create_host("0.0.0.0", "0")) != 0LL)
  {
    evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
    if (evaluator_for_endpoint)
    {
      unsigned int v23 = (void *)evaluator_for_endpoint;
      CFTypeID v24 = nw_path_evaluator_copy_path();
      nw_release(v23);
    }

    else
    {
      CFTypeID v24 = 0LL;
    }

    nw_release(host);
  }

  else
  {
    CFTypeID v24 = 0LL;
  }

  nw_release(v12);
  return v24;
}

void _SCNetworkConnectionMergeDictionaries(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

Boolean SCNetworkConnectionStop(SCNetworkConnectionRef connection, Boolean forceDisconnect)
{
  unsigned int v2 = forceDisconnect;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  mach_error_t v22 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_24:
      _SCErrorSet(1002);
      return 0;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_24;
    }
  }

  uint64_t v4 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v4) {
    goto LABEL_24;
  }
  if (debug >= 1)
  {
    unint64_t v5 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      unint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      unsigned int v8 = &v21[-((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v9 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v9 = 136315138;
      *(void *)(v9 + 4) = (char *)connection + 88;
      __SC_log_send(6, (uint64_t)v5, v6, v8);
    }
  }

  mach_error_t v10 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    ne_session_stop();
    ne_session_send_barrier();
  }

  else
  {
    do
    {
      mach_port_t v12 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v12) {
        goto LABEL_21;
      }
      mach_error_t v13 = pppcontroller_stop(v12, v2, &v22);
    }

    while (__SCNetworkConnectionNeedsRetry( (uint64_t)connection,  (uint64_t)"SCNetworkConnectionStop()",  v13,  &v22));
    if (debug >= 1)
    {
      uint64_t v14 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v14 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v14;
      }

      uint64_t v15 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v14, (os_log_type_t)v15))
      {
        uint64_t v16 = _os_log_pack_size();
        CFTypeID v17 = &v21[-((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v18 = _os_log_pack_fill();
        mach_error_t v19 = v22;
        *(_DWORD *)uint64_t v18 = 136315394;
        *(void *)(v18 + 4) = (char *)connection + 88;
        *(_WORD *)(v18 + 12) = 1024;
        *(_DWORD *)(v18 + 14) = v19;
        __SC_log_send(6, (uint64_t)v14, v15, v17);
      }
    }

    if (v22)
    {
      _SCErrorSet(v22);
LABEL_21:
      Boolean v11 = 0;
      goto LABEL_22;
    }
  }

  Boolean v11 = 1;
LABEL_22:
  pthread_mutex_unlock(v10);
  return v11;
}

uint64_t SCNetworkConnectionSuspend(char *cf)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  mach_error_t v20 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_23:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_23;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_23;
  }
  if (debug >= 1)
  {
    int v3 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v6 = &v19[-((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = cf + 88;
      __SC_log_send(6, (uint64_t)v3, v4, v6);
    }
  }

  unsigned int v8 = (pthread_mutex_t *)(cf + 16);
  pthread_mutex_lock((pthread_mutex_t *)(cf + 16));
  do
  {
    mach_port_t v9 = __SCNetworkConnectionSessionPort((uint64_t)cf);
    if (!v9) {
      goto LABEL_19;
    }
    mach_error_t v10 = pppcontroller_suspend(v9, &v20);
  }

  while (__SCNetworkConnectionNeedsRetry((uint64_t)cf, (uint64_t)"SCNetworkConnectionSuspend()", v10, &v20));
  if (debug >= 1)
  {
    Boolean v11 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      Boolean v11 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v11;
    }

    uint64_t v12 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v14 = &v19[-((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v15 = _os_log_pack_fill();
      mach_error_t v16 = v20;
      *(_DWORD *)uint64_t v15 = 136315394;
      *(void *)(v15 + 4) = cf + 88;
      *(_WORD *)(v15 + 12) = 1024;
      *(_DWORD *)(v15 + 14) = v16;
      __SC_log_send(6, (uint64_t)v11, v12, v14);
    }
  }

  if (v20)
  {
    _SCErrorSet(v20);
LABEL_19:
    uint64_t v17 = 0LL;
    goto LABEL_20;
  }

  uint64_t v17 = 1LL;
LABEL_20:
  pthread_mutex_unlock(v8);
  return v17;
}

uint64_t SCNetworkConnectionResume(char *cf)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  mach_error_t v20 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_23:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_23;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_23;
  }
  if (debug >= 1)
  {
    int v3 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v6 = &v19[-((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = cf + 88;
      __SC_log_send(6, (uint64_t)v3, v4, v6);
    }
  }

  unsigned int v8 = (pthread_mutex_t *)(cf + 16);
  pthread_mutex_lock((pthread_mutex_t *)(cf + 16));
  if (!*((void *)cf + 43))
  {
    do
    {
      mach_port_t v10 = __SCNetworkConnectionSessionPort((uint64_t)cf);
      if (!v10) {
        goto LABEL_20;
      }
      mach_error_t v11 = pppcontroller_resume(v10, &v20);
    }

    while (__SCNetworkConnectionNeedsRetry( (uint64_t)cf,  (uint64_t)"SCNetworkConnectionResume()",  v11,  &v20));
    if (debug >= 1)
    {
      uint64_t v12 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v12 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v12;
      }

      uint64_t v13 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v12, (os_log_type_t)v13))
      {
        uint64_t v14 = _os_log_pack_size();
        uint64_t v15 = &v19[-((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v16 = _os_log_pack_fill();
        mach_error_t v17 = v20;
        *(_DWORD *)uint64_t v16 = 136315394;
        *(void *)(v16 + 4) = cf + 88;
        *(_WORD *)(v16 + 12) = 1024;
        *(_DWORD *)(v16 + 14) = v17;
        __SC_log_send(6, (uint64_t)v12, v13, v15);
      }
    }

    if (v20)
    {
      _SCErrorSet(v20);
LABEL_20:
      uint64_t v9 = 0LL;
      goto LABEL_21;
    }
  }

  uint64_t v9 = 1LL;
LABEL_21:
  pthread_mutex_unlock(v8);
  return v9;
}

uint64_t SCNetworkConnectionRefreshOnDemandState()
{
  return 0LL;
}

CFDictionaryRef SCNetworkConnectionCopyUserOptions(SCNetworkConnectionRef connection)
{
  v21[1] = *(UInt8 **)MEMORY[0x1895F89C0];
  v21[0] = 0LL;
  mach_error_t v19 = 1001;
  unsigned int v20 = 0;
  uint64_t v18 = 0LL;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_35:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_35;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_35;
  }
  int v3 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2000000000LL;
    uint64_t v17 = 0LL;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    uint64_t v4 = dispatch_semaphore_create(0LL);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    ne_session_get_info();
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v4);
    if (v15[3] && MEMORY[0x186E09E78]() == MEMORY[0x1895F9250])
    {
      if (xpc_dictionary_get_value((xpc_object_t)v15[3], "SessionLegacyUserConfiguration")) {
        uint64_t v5 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCObject();
      }
      else {
        uint64_t v5 = 0LL;
      }
      xpc_release((xpc_object_t)v15[3]);
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    _Block_object_dispose(&v14, 8);
    return v5;
  }

  do
  {
    mach_port_t v6 = __SCNetworkConnectionSessionPort((uint64_t)connection);
    if (!v6) {
      goto LABEL_30;
    }
    mach_error_t v7 = pppcontroller_copyuseroptions(v6, v21, &v20, &v19);
  }

  while (__SCNetworkConnectionNeedsRetry( (uint64_t)connection,  (uint64_t)"SCNetworkConnectionCopyUserOptions()",  v7,  &v19));
  if (!v21[0])
  {
    mach_port_t v10 = 0LL;
LABEL_23:
    int v9 = v19;
    goto LABEL_24;
  }

  int v8 = _SCUnserialize((CFPropertyListRef *)&v18, 0LL, v21[0], v20);
  int v9 = v19;
  if (!v8 && v19)
  {
    int v9 = SCError();
    mach_error_t v19 = v9;
  }

  mach_port_t v10 = v18;
  if (!v9 && v18)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeID v12 = CFGetTypeID(v10);
    mach_port_t v10 = v18;
    if (v12 != TypeID)
    {
      int v9 = 1001;
      mach_error_t v19 = 1001;
LABEL_25:
      if (v10)
      {
        CFRelease(v10);
        uint64_t v18 = 0LL;
        int v9 = v19;
      }

      _SCErrorSet(v9);
      goto LABEL_30;
    }

    goto LABEL_23;
  }

uint64_t __SCNetworkConnectionCopyUserOptions_block_invoke(uint64_t a1, xpc_object_t object)
{
  if (object) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = xpc_retain(object);
  }
  ne_session_release();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

Boolean SCNetworkConnectionScheduleWithRunLoop( SCNetworkConnectionRef connection, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection) {
      goto LABEL_8;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_8;
    }
  }

  uint64_t v6 = __kSCNetworkConnectionTypeID;
  CFTypeID v7 = CFGetTypeID(connection);
  if (runLoopMode && runLoop && v7 == v6) {
    return __SCNetworkConnectionScheduleWithRunLoop((uint64_t)connection, runLoop, runLoopMode, 0LL);
  }
LABEL_8:
  _SCErrorSet(1002);
  return 0;
}

uint64_t __SCNetworkConnectionScheduleWithRunLoop( uint64_t a1, __CFRunLoop *a2, const __CFString *a3, dispatch_object_s *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  mach_error_t v36 = 1001;
  int v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (!*(void *)(a1 + 232) || *(void *)(a1 + 288)) {
    goto LABEL_3;
  }
  if (!a4)
  {
    if (!*(_BYTE *)(a1 + 217)) {
      goto LABEL_11;
    }
LABEL_27:
    _SC_schedule((void *)a1, a2, a3, *(CFMutableArrayRef *)(a1 + 280));
    goto LABEL_30;
  }

  if (*(_BYTE *)(a1 + 217))
  {
LABEL_3:
    int v9 = 1002;
    goto LABEL_4;
  }

  do
  {
LABEL_11:
    if (*(void *)(a1 + 344))
    {
      if (!a2) {
        goto LABEL_20;
      }
      v35.version = 0LL;
      v35.info = (void *)a1;
      v35.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
      v35.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
      memset(&v35.copyDescription, 0, 40);
      v35.perform = (void (__cdecl *)(void *))__SCNetworkConnectionCallBack;
      CFRunLoopSourceRef RunLoopSource = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, &v35);
      goto LABEL_19;
    }

    mach_port_t v12 = __SCNetworkConnectionSessionPort(a1);
    if (!v12) {
      goto LABEL_5;
    }
    mach_error_t v13 = pppcontroller_notification(v12, 1u, &v36);
  }

  while (__SCNetworkConnectionNeedsRetry( a1,  (uint64_t)"__SCNetworkConnectionScheduleWithRunLoop()",  v13,  &v36));
  int v9 = v36;
  if (v36) {
    goto LABEL_4;
  }
  if (a2)
  {
    CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource(0LL, *(CFMachPortRef *)(a1 + 208), 0LL);
LABEL_19:
    *(void *)(a1 + 224) = RunLoopSource;
    *(void *)(a1 + 280) = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }

Boolean SCNetworkConnectionUnscheduleFromRunLoop( SCNetworkConnectionRef connection, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection) {
      goto LABEL_8;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_8;
    }
  }

  uint64_t v6 = __kSCNetworkConnectionTypeID;
  CFTypeID v7 = CFGetTypeID(connection);
  if (runLoopMode && runLoop && v7 == v6) {
    return __SCNetworkConnectionUnscheduleFromRunLoop((uint64_t)connection, runLoop, runLoopMode);
  }
LABEL_8:
  _SCErrorSet(1002);
  return 0;
}

uint64_t __SCNetworkConnectionUnscheduleFromRunLoop(uint64_t a1, void *a2, const __CFString *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  HIDWORD(v18) = 1001;
  CFRetain((CFTypeRef)a1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (a2)
  {
    if (*(_BYTE *)(a1 + 217) && !*(void *)(a1 + 288))
    {
      if (!_SC_unschedule((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 280), 0))
      {
        int v14 = 1001;
        goto LABEL_20;
      }

      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 280)))
      {
        goto LABEL_14;
      }

      CFTypeID v7 = (void *)(a1 + 224);
      CFRunLoopRemoveSource((CFRunLoopRef)a2, *(CFRunLoopSourceRef *)(a1 + 224), a3);
      CFRelease(*(CFTypeRef *)(a1 + 280));
      *(void *)(a1 + 280) = 0LL;
      CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 224));
      CFRelease(*(CFTypeRef *)(a1 + 224));
      goto LABEL_11;
    }

Boolean SCNetworkConnectionSetDispatchQueue(SCNetworkConnectionRef connection, dispatch_queue_t queue)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_8;
    }
  }

  uint64_t v4 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v4) {
    goto LABEL_8;
  }
  if (queue) {
    return __SCNetworkConnectionScheduleWithRunLoop((uint64_t)connection, 0LL, 0LL, queue);
  }
  else {
    return __SCNetworkConnectionUnscheduleFromRunLoop((uint64_t)connection, 0LL, 0LL);
  }
}

uint64_t SCNetworkConnectionIsOnDemandSuspended(const __CFDictionary **cf)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_12:
      int v7 = 1002;
      goto LABEL_13;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_12;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_12;
  }
  int v3 = cf[39];
  if (v3)
  {
    int valuePtr = 0;
    CFDictionaryRef Value = CFDictionaryGetValue(v3, @"OnDemandSuspended");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID
        && CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr)
        && valuePtr)
      {
        return 1LL;
      }
    }
  }

  int v7 = 0;
LABEL_13:
  _SCErrorSet(v7);
  return 0LL;
}

uint64_t SCNetworkConnectionTriggerOnDemandIfNeeded(const __CFString *a1, int a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v16 = 0LL;
  mach_error_t v17 = &v16;
  uint64_t v18 = 0x2000000000LL;
  char v19 = 0;
  pid_t v6 = getpid();
  geteuid();
  if (a1 && geteuid())
  {
    int v7 = _SC_cfstring_to_cstring(a1, 0LL, 0LL, 0x8000100u);
    int v8 = 0LL;
    if (proc_pidinfo(v6, 17, 1uLL, buffer, 56) == 56)
    {
      int v8 = (void *)ne_session_copy_policy_match();
      int service_action = ne_session_policy_match_get_service_action();
      if (service_action == 1 || a2 && service_action == 2)
      {
        if (ne_session_policy_match_get_service())
        {
          xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
          if (v10)
          {
            mach_error_t v11 = v10;
            xpc_dictionary_set_BOOL(v10, "is-on-demand", 1);
            xpc_dictionary_set_string(v11, "match-hostname", (const char *)v7);
            ne_session_policy_match_get_service_type();
            if (ne_session_create())
            {
              dispatch_semaphore_t v12 = dispatch_semaphore_create(0LL);
              dispatch_retain(v12);
              xpc_retain(v11);
              if (__SCNetworkConnectionQueue_once != -1) {
                dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
              }
              ne_session_get_status();
              if (a3) {
                dispatch_time_t v13 = dispatch_time(0LL, 1000000000LL * a3);
              }
              else {
                dispatch_time_t v13 = -1LL;
              }
              dispatch_semaphore_wait(v12, v13);
              dispatch_release(v12);
              ne_session_release();
            }

            xpc_release(v11);
          }
        }
      }
    }

    if (v7) {
      CFAllocatorDeallocate(0LL, v7);
    }
    if (v8) {
      free(v8);
    }
  }

  uint64_t v14 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v14;
}

void __SCNetworkConnectionTriggerOnDemandIfNeeded_block_invoke(uint64_t a1, int a2)
{
  int v3 = *(dispatch_semaphore_s **)(a1 + 40);
  if (a2 == 1)
  {
    dispatch_retain(v3);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    ne_session_set_event_handler();
    ne_session_start_with_options();
  }

  else
  {
    dispatch_semaphore_signal(v3);
  }

  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 56));
}

void __SCNetworkConnectionTriggerOnDemandIfNeeded_block_invoke_2(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
  }

  else if (a2 == 1)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 40));
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
    }
    ne_session_get_status();
  }

void __SCNetworkConnectionTriggerOnDemandIfNeeded_block_invoke_3(uint64_t a1, int a2)
{
  if (a2 != 2)
  {
    if (*(_DWORD *)(a1 + 56) == 3) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    }
    ne_session_cancel();
  }

  dispatch_release(*(dispatch_object_t *)(a1 + 48));
}

uint64_t SCNetworkConnectionCopyOnDemandInfo(CFDictionaryRef *cf, void *a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_22:
      int v13 = 1002;
      goto LABEL_23;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_22;
    }
  }

  uint64_t v6 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_22;
  }
  if (!cf[10])
  {
    int v13 = 5001;
LABEL_23:
    _SCErrorSet(v13);
    return 0LL;
  }

  if (a2) {
    *a2 = 0LL;
  }
  if (a3) {
    *a3 = -1;
  }
  int v7 = cf[39];
  if (v7)
  {
    if (a2)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(v7, @"RemoteAddress");
      CFTypeID TypeID = CFStringGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID)
        {
          *a2 = Value;
          CFRetain(Value);
        }
      }
    }

    if (a3)
    {
      xpc_object_t v10 = (const __CFNumber *)CFDictionaryGetValue(cf[39], @"Status");
      CFTypeID v11 = CFNumberGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == v11)
        {
          if (CFNumberGetValue(v10, kCFNumberIntType, &valuePtr)) {
            *a3 = valuePtr;
          }
        }
      }
    }
  }

  return *((unsigned __int8 *)cf + 308);
}

uint64_t SCNetworkConnectionGetReachabilityInfo(CFDictionaryRef *cf, _DWORD *a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_23:
      int v13 = 1002;
      goto LABEL_24;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_23;
    }
  }

  uint64_t v6 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_23;
  }
  if (!cf[10])
  {
    int v13 = 5001;
LABEL_24:
    _SCErrorSet(v13);
    return 0LL;
  }

  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  int v7 = cf[39];
  if (v7)
  {
    if (a2)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(v7, @"ReachFlags");
      CFTypeID TypeID = CFNumberGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID && CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr)) {
          *a2 = valuePtr;
        }
      }
    }

    if (a3)
    {
      xpc_object_t v10 = (const __CFNumber *)CFDictionaryGetValue(cf[39], @"ReachInterfaceIndex");
      CFTypeID v11 = CFNumberGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == v11)
        {
          if (CFNumberGetValue(v10, kCFNumberIntType, &valuePtr)) {
            *a3 = valuePtr;
          }
        }
      }
    }
  }

  return 1LL;
}

uint64_t SCNetworkConnectionGetType(unsigned int *cf)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      int v4 = 1002;
      goto LABEL_9;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_8;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_8;
  }
  if (*((void *)cf + 10))
  {
    _SCErrorSet(0);
    return cf[76];
  }

  int v4 = 5001;
LABEL_9:
  _SCErrorSet(v4);
  return 0LL;
}

uint64_t SCNetworkConnectionCopyFlowDivertToken()
{
  return 0LL;
}

CFDictionaryRef SCNetworkConnectionGetServiceIdentifier(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 80)) {
    return (const __CFDictionary *)0xFFFFFFFFLL;
  }
  unsigned int valuePtr = 0;
  uint64_t result = *(const __CFDictionary **)(a1 + 312);
  if (result)
  {
    CFDictionaryRef Value = (const __CFNumber *)CFDictionaryGetValue(result, @"ServiceIdentifier");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      return (const __CFDictionary *)valuePtr;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _SC_domainEndsWithDomain(const __CFString *a1, const __CFString *cf1)
{
  uint64_t v2 = cf1;
  if (CFEqual(cf1, @"*")) {
    return 1LL;
  }
  int HasSuffix = CFStringHasSuffix(a1, @".");
  if (HasSuffix)
  {
    v11.length = CFStringGetLength(a1) - 1;
    v11.location = 0LL;
    a1 = CFStringCreateWithSubstring(0LL, a1, v11);
    if (!a1) {
      return 0LL;
    }
  }

  int v6 = CFStringHasSuffix(v2, @".");
  if (v6)
  {
    v12.length = CFStringGetLength(v2) - 1;
    v12.location = 0LL;
    uint64_t v2 = CFStringCreateWithSubstring(0LL, v2, v12);
    if (!v2)
    {
      uint64_t v4 = 0LL;
      int v7 = 0;
      if (!HasSuffix) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }

    int v7 = 1;
  }

  else
  {
    int v7 = 0;
  }

  if (!CFStringHasPrefix(v2, @"*."))
  {
    uint64_t v9 = v2;
    goto LABEL_16;
  }

  v13.length = CFStringGetLength(v2) - 2;
  v13.location = 2LL;
  CFStringRef v8 = CFStringCreateWithSubstring(0LL, v2, v13);
  if (v8)
  {
    uint64_t v9 = v8;
    if (v6) {
      CFRelease(v2);
    }
    int v7 = 1;
LABEL_16:
    uint64_t v4 = CFStringHasSuffix(a1, v9);
    uint64_t v2 = v9;
    if (!HasSuffix) {
      goto LABEL_20;
    }
LABEL_19:
    CFRelease(a1);
    goto LABEL_20;
  }

  uint64_t v4 = 0LL;
  if (HasSuffix) {
    goto LABEL_19;
  }
LABEL_20:
  if (v7) {
    CFRelease(v2);
  }
  return v4;
}

uint64_t _SC_hostMatchesDomain(const __CFString *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  CFTypeID v5 = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != v5) {
    return 0LL;
  }
  CFMutableStringRef StringByTrimmingDotsAndStars = _SC_createStringByTrimmingDotsAndStars(a1);
  CFMutableStringRef v7 = _SC_createStringByTrimmingDotsAndStars(a2);
  CFTypeID v8 = CFStringGetTypeID();
  if (StringByTrimmingDotsAndStars)
  {
    if (CFGetTypeID(StringByTrimmingDotsAndStars) != v8 || (CFTypeID v9 = CFStringGetTypeID(), !v7) || CFGetTypeID(v7) != v9)
    {
      uint64_t v13 = 0LL;
      goto LABEL_14;
    }

    CFIndex CountOfStringInString = _SC_getCountOfStringInString(StringByTrimmingDotsAndStars);
    CFIndex v11 = _SC_getCountOfStringInString(v7);
    if (CountOfStringInString == v11)
    {
      uint64_t HasSuffix = CFEqual(StringByTrimmingDotsAndStars, v7);
    }

    else
    {
      uint64_t v13 = 0LL;
      if (v11 < 1 || v11 >= CountOfStringInString)
      {
LABEL_14:
        CFRelease(StringByTrimmingDotsAndStars);
        if (!v7) {
          return v13;
        }
        goto LABEL_17;
      }

      v15.location = 0LL;
      v15.length = 0LL;
      CFStringReplace(v7, v15, @".");
      uint64_t HasSuffix = CFStringHasSuffix(StringByTrimmingDotsAndStars, v7);
    }

    uint64_t v13 = HasSuffix;
    goto LABEL_14;
  }

  uint64_t v13 = 0LL;
  if (v7) {
LABEL_17:
  }
    CFRelease(v7);
  return v13;
}

CFMutableStringRef _SC_createStringByTrimmingDotsAndStars(CFStringRef theString)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  if (!_SC_getNotDotOrStarCharacterSet_notDotOrStar)
  {
    int v3 = CFCharacterSetCreateWithCharactersInString(v2, @".*");
    if (v3)
    {
      uint64_t v4 = v3;
      _SC_getNotDotOrStarCharacterSet_notDotOrStar = (uint64_t)CFCharacterSetCreateInvertedSet(v2, v3);
      CFRelease(v4);
    }
  }

  CFTypeID v5 = (const __CFCharacterSet *)_SC_getNotDotOrStarCharacterSet_notDotOrStar;
  CFIndex Length = CFStringGetLength(theString);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v2, Length, theString);
  v12.CFIndex location = Length;
  v12.length = 0LL;
  v16.CFIndex location = 0LL;
  v16.length = Length;
  if (CFStringFindCharacterFromSet(theString, v5, v16, 0LL, &result))
  {
    v17.CFIndex location = 0LL;
    v17.length = Length;
    int CharacterFromSet = CFStringFindCharacterFromSet(theString, v5, v17, 4uLL, &v12);
    CFIndex location = v12.location;
    if (CharacterFromSet && (result.location == -1 || v12.location == -1 || result.location > v12.location))
    {
      CFRelease(MutableCopy);
      return 0LL;
    }
  }

  else
  {
    CFIndex location = Length;
  }

  if (Length > location + 1)
  {
    v15.CFIndex location = location + 1;
    v15.length = Length - (location + 1);
    CFStringReplace(MutableCopy, v15, &stru_189B68690);
  }

  v10.length = result.location;
  if (result.location >= 1)
  {
    v10.CFIndex location = 0LL;
    CFStringReplace(MutableCopy, v10, &stru_189B68690);
  }

  return MutableCopy;
}

CFIndex _SC_getCountOfStringInString(const __CFString *a1)
{
  uint64_t v2 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  v7.length = CFStringGetLength(a1);
  v7.CFIndex location = 0LL;
  Results = CFStringCreateArrayWithFindResults(v2, a1, @".", v7, 0LL);
  if (!Results) {
    return 0LL;
  }
  uint64_t v4 = Results;
  CFIndex Count = CFArrayGetCount(Results);
  CFRelease(v4);
  return Count;
}

uint64_t __SCNetworkConnectionCopyOnDemandInfoWithName( uint64_t a1, const __CFString *a2, int a3, CFTypeRef *a4, _DWORD *a5, CFTypeRef *a6)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  char v47 = 0;
  CFIndex v11 = (const __CFDictionary *)__SCNetworkConnectionCopyOnDemandConfiguration();
  if (!v11) {
    goto LABEL_60;
  }
  CFRange v12 = v11;
  uint64_t v13 = (const __CFDictionary *)__SCNetworkConnectionCopyMatchingTriggerWithName(v11, a2, 0, a3, 0LL, &v47, 0LL);
  uint64_t v14 = v13;
  if (v13 && v47)
  {
    int valuePtr = 0;
    if (!CFDictionaryGetValueIfPresent(v13, @"Status", (const void **)&value)
      || (v15 = value, CFTypeID TypeID = CFNumberGetTypeID(), !v15)
      || CFGetTypeID(v15) != TypeID
      || !CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
    {
      int valuePtr = 0;
    }

    if (a5) {
      *a5 = valuePtr;
    }
    if (a4)
    {
      CFRange v17 = (const __CFString *)CFDictionaryGetValue(v14, @"ServiceID");
      *a4 = v17;
      CFTypeID v18 = CFStringGetTypeID();
      if (v17 && CFGetTypeID(v17) == v18)
      {
        *a4 = v17;
        if (CFStringGetLength(v17) >= 1)
        {
          CFRetain(*a4);
          goto LABEL_16;
        }
      }

      else
      {
        *a4 = 0LL;
      }

      uint64_t v29 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v29 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v29;
      }

      uint64_t v30 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v29, (os_log_type_t)v30))
      {
        uint64_t v31 = _os_log_pack_size();
        uint64_t v32 = &v44[-((MEMORY[0x1895F8858](v31) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v33 = _os_log_pack_fill();
        mach_port_t v34 = " (on retry)";
        if (!a3) {
          mach_port_t v34 = "";
        }
        *(_DWORD *)uint64_t v33 = 136315138;
        *(void *)(v33 + 4) = v34;
        __SC_log_send(6, (uint64_t)v29, v30, v32);
      }

      *a4 = 0LL;
      int v19 = 1;
      if (!a6)
      {
LABEL_17:
        if (!v19)
        {
LABEL_18:
          unsigned int v20 = (os_log_s *)__log_SCNetworkConnection_log;
          if (!__log_SCNetworkConnection_log)
          {
            unsigned int v20 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
            __log_SCNetworkConnection_log = (uint64_t)v20;
          }

          uint64_t v21 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v20, (os_log_type_t)v21))
          {
            uint64_t v22 = _os_log_pack_size();
            uint64_t v23 = &v44[-((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
            __error();
            uint64_t v24 = _os_log_pack_fill();
            CFTypeID v25 = " (on retry)";
            int v26 = valuePtr;
            if (!a3) {
              CFTypeID v25 = "";
            }
            *(_DWORD *)uint64_t v24 = 136315394;
            *(void *)(v24 + 4) = v25;
            *(_WORD *)(v24 + 12) = 1024;
            *(_DWORD *)(v24 + 14) = v26;
            __SC_log_send(6, (uint64_t)v20, v21, v23);
            int v27 = 1;
            goto LABEL_26;
          }

          int v28 = 0;
          int v27 = 1;
LABEL_56:
          CFRelease(v14);
          CFRelease(v12);
          if (v27) {
            return 1LL;
          }
          goto LABEL_59;
        }

LABEL_35:
      CFRunLoopSourceContext v35 = (const __CFString *)CFDictionaryGetValue(v14, @"RemoteAddress");
      *a6 = v35;
      CFTypeID v36 = CFStringGetTypeID();
      if (v35 && CFGetTypeID(v35) == v36)
      {
        *a6 = v35;
        if (CFStringGetLength(v35) >= 1)
        {
          CFRetain(*a6);
          if (!v19) {
            goto LABEL_18;
          }
          goto LABEL_48;
        }
      }

      else
      {
        *a6 = 0LL;
      }

      uint64_t v37 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v37 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v37;
      }

      uint64_t v38 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v37, (os_log_type_t)v38))
      {
        uint64_t v39 = _os_log_pack_size();
        mach_error_t v40 = &v44[-((MEMORY[0x1895F8858](v39) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v41 = _os_log_pack_fill();
        uint64_t v42 = " (on retry)";
        if (!a3) {
          uint64_t v42 = "";
        }
        *(_DWORD *)uint64_t v41 = 136315138;
        *(void *)(v41 + 4) = v42;
        __SC_log_send(6, (uint64_t)v37, v38, v40);
      }

      *a6 = 0LL;
      goto LABEL_48;
    }

      if (v21 == ++v23) {
        goto LABEL_38;
      }
    }

    if (!v18)
    {
      int v26 = 1002;
      goto LABEL_40;
    }

CFTypeRef __SCNetworkConnectionCopyOnDemandConfiguration()
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  checCFIndex k = 1;
  uint64_t state64 = 0LL;
  pthread_mutex_lock(&onDemand_notify_lock);
  int v0 = onDemand_notify_token;
  if (onDemand_notify_token == -1)
  {
    uint32_t v8 = notify_register_check("com.apple.system.SCNetworkConnectionOnDemand", &onDemand_notify_token);
    if (v8)
    {
      uint32_t v9 = v8;
      CFRange v10 = (os_log_s *)__log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        CFRange v10 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v10;
      }

      uint64_t v11 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
      {
        uint64_t v12 = _os_log_pack_size();
        uint64_t v13 = (char *)&v28 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v14 = (_DWORD *)_os_log_pack_fill();
        *uint64_t v14 = 67109120;
        v14[1] = v9;
        __SC_log_send(5, (uint64_t)v10, v11, v13);
      }

      goto LABEL_14;
    }

    int v0 = onDemand_notify_token;
    if (onDemand_notify_token == -1) {
      goto LABEL_15;
    }
  }

  uint32_t v1 = notify_check(v0, &check);
  if (v1)
  {
    uint32_t v2 = v1;
    int v3 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v3;
    }

    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
      goto LABEL_8;
    }
    uint64_t v5 = _os_log_pack_size();
    int v6 = (char *)&v28 - ((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
LABEL_7:
    CFRange v7 = (_DWORD *)_os_log_pack_fill();
    *CFRange v7 = 67109120;
    v7[1] = v2;
    __SC_log_send(5, (uint64_t)v3, v4, v6);
LABEL_8:
    notify_cancel(onDemand_notify_token);
LABEL_14:
    onDemand_notify_token = -1;
    goto LABEL_15;
  }

  if (check)
  {
    if (onDemand_notify_token != -1)
    {
      uint32_t state = notify_get_state(onDemand_notify_token, &state64);
      if (state)
      {
        uint32_t v2 = state;
        int v3 = (os_log_s *)__log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          int v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v3;
        }

        uint64_t v4 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
          goto LABEL_8;
        }
        uint64_t v27 = _os_log_pack_size();
        int v6 = (char *)&v28 - ((MEMORY[0x1895F8858](v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        goto LABEL_7;
      }
    }
  }

const void *__SCNetworkConnectionCopyMatchingTriggerWithName( const __CFDictionary *a1, const __CFString *a2, int a3, int a4, CFTypeRef *a5, _BYTE *a6, CFTypeRef *a7)
{
  uint32_t v8 = a6;
  uint32_t v9 = a5;
  uint64_t v61 = *MEMORY[0x1895F89C0];
  if (a6) {
    *a6 = 0;
  }
  if (a5) {
    *a5 = 0LL;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"Triggers");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID || (CFIndex Count = CFArrayGetCount((CFArrayRef)Value), Count < 1))
  {
    ValueAtIndex = 0LL;
    int v15 = 0;
    goto LABEL_79;
  }

  int v53 = a3;
  unint64_t v14 = 0LL;
  int v15 = 0;
  CFIndex v16 = 0LL;
  allocator = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v48 = (const void *)*MEMORY[0x189604DE0];
  SCPreferencesRef v49 = (const void *)*MEMORY[0x189604DE8];
  int v52 = a4;
  CFIndex v57 = Value;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v16);
    CFTypeID v18 = CFDictionaryGetTypeID();
    if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v18) {
      goto LABEL_19;
    }
    uint64_t v19 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Action");
    CFTypeID v20 = CFStringGetTypeID();
    if (v19 && CFGetTypeID(v19) == v20 && CFEqual(v19, @"Connect"))
    {
      if (__SCNetworkConnectionShouldNeverMatch((const __CFDictionary *)ValueAtIndex, a2, v53))
      {
        ValueAtIndex = (const void *)v14;
LABEL_16:
        CFDictionaryRef Value = v57;
        goto LABEL_20;
      }

      int v54 = v15;
      int v35 = 0;
      Match = 0LL;
      CFTypeID v36 = 0LL;
      CFDictionaryRef Value = v57;
    }

    else
    {
      CFDictionaryRef Value = v57;
      if (__SCNetworkConnectionShouldIgnoreTrigger((const __CFDictionary *)ValueAtIndex))
      {
        int v15 = 5002;
LABEL_19:
        ValueAtIndex = (const void *)v14;
        goto LABEL_20;
      }

      uint64_t v21 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Action");
      uint64_t v22 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ActionParameters");
      if (v21 && v22)
      {
        CFTypeRef cf = v22;
        if (!CFEqual(v21, @"EvaluateConnection")) {
          goto LABEL_19;
        }
        vm_size_t v51 = v8;
        CFTypeID v23 = CFArrayGetTypeID();
        if (CFGetTypeID(cf) != v23 || (CFIndex v55 = CFArrayGetCount((CFArrayRef)cf), v55 < 1))
        {
          ValueAtIndex = (const void *)v14;
          goto LABEL_20;
        }

        int v54 = v15;
        int v46 = v9;
        char v47 = a7;
        CFIndex v24 = 0LL;
        while (1)
        {
          CFTypeID v25 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v24);
          CFTypeID v26 = CFDictionaryGetTypeID();
          if (v25)
          {
            if (CFGetTypeID(v25) == v26)
            {
              uint64_t v27 = (const __CFArray *)CFDictionaryGetValue(v25, @"Domains");
              CFTypeID v28 = CFArrayGetTypeID();
              if (v27)
              {
                if (CFGetTypeID(v27) == v28)
                {
                  CFIndex v29 = CFArrayGetCount(v27);
                  if (v29 >= 1) {
                    break;
                  }
                }
              }
            }
          }

Boolean SCNetworkConnectionCopyUserPreferences( CFDictionaryRef selectionOptions, CFStringRef *serviceID, CFDictionaryRef *userOptions)
{
  v23[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  if (__SCNetworkConnectionInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (selectionOptions) {
      goto LABEL_3;
    }
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }

  if (!selectionOptions) {
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }
LABEL_3:
  CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(selectionOptions, @"OnDemandHostName");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }
  v23[0] = 0LL;
  int v22 = -1;
  uint32_t v8 = (const __CFBoolean *)CFDictionaryGetValue(selectionOptions, @"OnDemandRetry");
  uint64_t v9 = CFBooleanGetTypeID();
  if (v8 && (v10 = v9, uint64_t v9 = CFGetTypeID(v8), v9 == v10))
  {
    uint64_t v9 = CFBooleanGetValue(v8);
    int v11 = v9;
  }

  else
  {
    int v11 = 1;
  }

  int v12 = __SCNetworkConnectionCopyOnDemandInfoWithName(v9, Value, v11, v23, &v22, 0LL);
  if (debug >= 2)
  {
    uint64_t v13 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v13;
    }

    uint64_t v14 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v21 = (uint64_t)&v21;
      CFIndex v16 = (char *)&v21 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      int v18 = v22;
      *(_DWORD *)uint64_t v17 = 67109376;
      *(_DWORD *)(v17 + 4) = v12;
      *(_WORD *)(v17 + 8) = 1024;
      *(_DWORD *)(v17 + 10) = v18;
      __SC_log_send(6, (uint64_t)v13, v14, v16);
    }
  }

  if (!v12)
  {
    if (!v11) {
      return 0;
    }
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }

  Boolean result = (Boolean)v23[0];
  if (v22 == 2)
  {
    if (v23[0])
    {
      CFRelease(v23[0]);
      return 0;
    }
  }

  else
  {
    *serviceID = (CFStringRef)v23[0];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    *userOptions = Mutable;
    CFDictionarySetValue(Mutable, @"OnDemandHostName", Value);
    return 1;
  }

  return result;
}

const void *isA_CFBoolean(const void *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0LL;
}

uint64_t __SCNetworkConnectionCopyUserPreferencesInternal( const __CFDictionary *a1, CFStringRef *a2, CFDictionaryRef *a3)
{
  uint64_t v128 = *MEMORY[0x1895F89C0];
  checCFIndex k = 1;
  int v6 = notify_userprefs_token;
  if (notify_userprefs_token != -1) {
    goto LABEL_2;
  }
  uint32_t v13 = notify_register_check("com.apple.networkConnect", &notify_userprefs_token);
  if (v13)
  {
    uint32_t v8 = v13;
    uint64_t v9 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v9;
    }

    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, (os_log_type_t)v10)) {
      goto LABEL_13;
    }
    uint64_t v14 = _os_log_pack_size();
    int v12 = (char *)&v110 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    goto LABEL_12;
  }

  notify_check(notify_userprefs_token, &check);
  checCFIndex k = 1;
  int v6 = notify_userprefs_token;
  if (notify_userprefs_token != -1)
  {
LABEL_2:
    uint32_t v7 = notify_check(v6, &check);
    if (!v7) {
      goto LABEL_14;
    }
    uint32_t v8 = v7;
    uint64_t v9 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v9;
    }

    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, (os_log_type_t)v10))
    {
LABEL_13:
      notify_cancel(notify_userprefs_token);
      notify_userprefs_token = -1;
LABEL_14:
      if (!check) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }

    uint64_t v11 = _os_log_pack_size();
    int v12 = (char *)&v110 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
LABEL_12:
    uint64_t v15 = (_DWORD *)_os_log_pack_fill();
    _DWORD *v15 = 67109120;
    v15[1] = v8;
    __SC_log_send(5, (uint64_t)v9, v10, v12);
    goto LABEL_13;
  }

LABEL_67:
    uint64_t v58 = 0LL;
    goto LABEL_101;
  }

  uint64_t v19 = (const __CFString *)*MEMORY[0x189605198];
  CFTypeID v20 = (const __CFString *)CFPreferencesCopyValue( @"ServiceID",  @"com.apple.internetconnect",  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605178]);
  if (v20)
  {
    uint64_t v21 = v20;
    if (SCNetworkConnectionPrivateIsPPPService(v20, @"PPPSerial", @"PPPoE"))
    {
      NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"Setup:", v21, @"Interface");
      CFPropertyListRef v23 = SCDynamicStoreCopyValue(0LL, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
      if (v23)
      {
        CFRelease(v23);
        *a2 = (CFStringRef)CFRetain(v21);
        CFRelease(v21);
        goto LABEL_84;
      }
    }

    CFRelease(v21);
  }

  *a2 = 0LL;
  NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, @"Setup:", @"IPv4");
  if (!NetworkGlobalEntity)
  {
    int v82 = 1;
    fwrite("Error, Setup Key == NULL!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    uint64_t v58 = 0LL;
    goto LABEL_122;
  }

  uint64_t v60 = NetworkGlobalEntity;
  CFPropertyListRef v61 = SCDynamicStoreCopyValue(0LL, NetworkGlobalEntity);
  CFTypeID v62 = CFDictionaryGetTypeID();
  if (!v61 || CFGetTypeID(v61) != v62)
  {
    fwrite("no global IPv4 entity\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    int v70 = 0;
    goto LABEL_82;
  }

  uint64_t v63 = CFDictionaryGetValue((CFDictionaryRef)v61, @"ServiceOrder");
  CFTypeID v64 = CFArrayGetTypeID();
  if (!v63 || CFGetTypeID(v63) != v64)
  {
    fwrite("service order not specified\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    goto LABEL_119;
  }

  CFIndex v65 = CFArrayGetCount((CFArrayRef)v63);
  if (v65 < 1)
  {
LABEL_119:
    CFRelease(v60);
    int v70 = 0;
    goto LABEL_120;
  }

  CFIndex v66 = v65;
  uint64_t v67 = a2;
  CFStringRef v115 = a3;
  CFIndex v68 = 0LL;
  while (1)
  {
    uint64_t v69 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v63, v68);
    if (v66 == ++v68)
    {
      int v70 = 0;
      a3 = v115;
      a2 = v67;
      goto LABEL_82;
    }
  }

  v106 = (const __CFString *)CFRetain(v69);
  a2 = v67;
  *uint64_t v67 = v106;
  int v70 = 1;
  a3 = v115;
LABEL_82:
  CFRelease(v60);
  if (!v61)
  {
    if (v70) {
      goto LABEL_84;
    }
LABEL_121:
    uint64_t v58 = 0LL;
    int v82 = 1;
    goto LABEL_122;
  }

LABEL_120:
  CFRelease(v61);
  if (!v70) {
    goto LABEL_121;
  }
LABEL_84:
  if (*a2)
  {
    uint64_t v71 = (const __CFArray *)CFPreferencesCopyValue( *a2,  @"com.apple.networkConnect",  v19,  (CFStringRef)*MEMORY[0x189605190]);
    if (v71)
    {
      uint64_t v72 = v71;
      CFTypeID v73 = CFArrayGetTypeID();
      if (CFGetTypeID(v72) == v73)
      {
        CFIndex v74 = CFArrayGetCount(v72);
        if (v74 >= 1)
        {
          CFIndex v75 = v74;
          CFIndex v76 = 0LL;
          while (1)
          {
            v77 = (const __CFDictionary *)CFArrayGetValueAtIndex(v72, v76);
            CFTypeID v78 = CFDictionaryGetTypeID();
            if (v77)
            {
              if (CFGetTypeID(v77) == v78)
              {
                uint64_t v79 = CFDictionaryGetValue(v77, @"ConnectByDefault");
                CFTypeID v80 = CFBooleanGetTypeID();
                if (v79)
                {
                  if (CFGetTypeID(v79) == v80 && CFBooleanGetValue((CFBooleanRef)v79)) {
                    break;
                  }
                }
              }
            }

            if (v75 == ++v76) {
              goto LABEL_95;
            }
          }

          *a3 = CFDictionaryCreateCopy(0LL, v77);
        }

LABEL_95:
        addPasswordFromKeychain(*a2, a3);
      }

      else
      {
        int v96 = (os_log_s *)__log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          int v96 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v96;
        }

        uint64_t v97 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v96, (os_log_type_t)v97))
        {
          uint64_t v98 = _os_log_pack_size();
          CFStringRef v99 = (char *)&v110 - ((MEMORY[0x1895F8858](v98) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v96, v97, v99);
        }
      }

      CFRelease(v72);
    }
  }

  int v82 = 0;
  uint64_t v58 = 1LL;
LABEL_122:
  if (debug >= 2)
  {
    uint64_t v100 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v100 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v100;
    }

    uint64_t v101 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v100, (os_log_type_t)v101))
    {
      uint64_t v102 = _os_log_pack_size();
      uint64_t v92 = (char *)&v110 - ((MEMORY[0x1895F8858](v102) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v103 = _os_log_pack_fill();
      v104 = @"succeeded";
      if (v82) {
        v104 = @"failed";
      }
      *(_DWORD *)uint64_t v103 = 138412290;
      *(void *)(v103 + 4) = v104;
      uint64_t v94 = (uint64_t)v100;
      uint64_t v95 = v101;
LABEL_129:
      __SC_log_send(6, v94, v95, v92);
    }
  }

  return v58;
}

uint64_t SCNetworkConnectionOnDemandShouldRetryOnFailure(CFDictionaryRef *cf)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_14:
      int v10 = 1002;
      goto LABEL_15;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_14;
    }
  }

  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_14;
  }
  if (!cf[10])
  {
    int v10 = 5001;
LABEL_15:
    _SCErrorSet(v10);
    return 0LL;
  }

  CFDictionaryRef v3 = cf[40];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v3)
  {
    if (CFGetTypeID(v3) == TypeID)
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(cf[40], @"OnDemandMatchInfo");
      CFTypeID v6 = CFDictionaryGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v6)
        {
          uint32_t v7 = (const __CFBoolean *)CFDictionaryGetValue(Value, @"OnDemandMatchInfoOnRetry");
          CFTypeID v8 = CFBooleanGetTypeID();
          if (v7)
          {
            if (CFGetTypeID(v7) == v8) {
              return CFBooleanGetValue(v7);
            }
          }
        }
      }
    }
  }

  return 0LL;
}

uint64_t SCNetworkConnectionCanTunnelAddress(void *cf, uint64_t a2, _BYTE *a3)
{
  uint64_t v4 = a2;
  if (a3) {
    *a3 = 0;
  }
  if (a2)
  {
    int v6 = *(unsigned __int8 *)(a2 + 1);
    if (v6 != 30 && v6 != 2) {
      return 0LL;
    }
    if (__SCNetworkConnectionInitialize_initialized == -1)
    {
      if (!cf) {
        goto LABEL_42;
      }
    }

    else
    {
      dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
      if (!cf) {
        goto LABEL_42;
      }
    }

    uint64_t v8 = __kSCNetworkConnectionTypeID;
    if (CFGetTypeID(cf) == v8)
    {
      uint64_t v9 = (const __SCNetworkService *)cf[10];
      if (v9)
      {
        CFStringRef ServiceID = SCNetworkServiceGetServiceID(v9);
        CFTypeID TypeID = CFStringGetTypeID();
        if (ServiceID)
        {
          if (CFGetTypeID(ServiceID) == TypeID)
          {
            int v12 = (const __CFDictionary *)__SCNetworkConnectionCopyOnDemandConfiguration();
            if (v12)
            {
              uint32_t v13 = v12;
              uint64_t v14 = __SCNetworkConnectionCopyTriggerWithService(v12, ServiceID);
              if (v14)
              {
                uint64_t v15 = v14;
                CFIndex v16 = (const void *)cf[41];
                CFTypeID v17 = CFStringGetTypeID();
                if (v16
                  && CFGetTypeID(v16) == v17
                  && ((CFDictionaryRef Value = CFDictionaryGetValue(v15, @"ProbeResults"), v19 = CFDictionaryGetTypeID(), !Value)
                   || CFGetTypeID(Value) != v19
                   || (v20 = CFDictionaryGetValue((CFDictionaryRef)Value, v16), CFTypeID v21 = CFBooleanGetTypeID(), v20)
                   && CFGetTypeID(v20) == v21
                   && !CFBooleanGetValue((CFBooleanRef)v20))
                  || __SCNetworkConnectionAddressMatchesRedirectedDNS(v15, v4))
                {
                  uint64_t v4 = 1LL;
                  if (a3) {
                    *a3 = 1;
                  }
                  goto LABEL_39;
                }

                CFPropertyListRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"TunneledNetworks");
                if (isA_CFDictionary(v23))
                {
                  if (v6 == 2)
                  {
                    CFIndex v24 = (const __CFDictionary *)CFDictionaryGetValue(v23, @"IPv4");
                    if (isA_CFDictionary(v24))
                    {
                      CFTypeID v25 = CFDictionaryGetValue(v24, @"IncludedRoutes");
                      if (__SCNetworkConnectionIPv4AddressMatchesRoutes(v4, v25))
                      {
                        CFTypeID v26 = CFDictionaryGetValue(v24, @"ExcludedRoutes");
                        if (!__SCNetworkConnectionIPv4AddressMatchesRoutes(v4, v26))
                        {
LABEL_40:
                          uint64_t v4 = 1LL;
                          goto LABEL_39;
                        }
                      }
                    }
                  }

                  else
                  {
                    uint64_t v27 = (const __CFDictionary *)CFDictionaryGetValue(v23, @"IPv6");
                    if (isA_CFDictionary(v27))
                    {
                      CFArrayRef v28 = CFDictionaryGetValue(v27, @"IncludedRoutes");
                      if (__SCNetworkConnectionIPv6AddressMatchesRoutes(v4, v28))
                      {
                        CFTypeID v29 = CFDictionaryGetValue(v27, @"ExcludedRoutes");
                      }
                    }
                  }
                }

                uint64_t v4 = 0LL;
LABEL_39:
                CFRelease(v13);
                CFRelease(v15);
                return v4;
              }

              CFRelease(v13);
            }
          }
        }

        return 0LL;
      }

      int v22 = 5001;
LABEL_43:
      _SCErrorSet(v22);
      return 0LL;
    }

CFDictionaryRef __SCNetworkConnectionCopyTriggerWithService(const __CFDictionary *a1, const void *a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"Triggers");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0LL;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v9)
      {
        int v10 = CFDictionaryGetValue(ValueAtIndex, @"ServiceID");
        CFTypeID v11 = CFStringGetTypeID();
        if (v10)
        {
          if (CFGetTypeID(v10) == v11 && CFEqual(v10, a2)) {
            break;
          }
        }
      }
    }

    if (v6 == ++v7) {
      return 0LL;
    }
  }

  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

uint64_t __SCNetworkConnectionAddressMatchesRedirectedDNS(const __CFDictionary *a1, uint64_t a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"DNSRedirectDetected");
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  if (!CFBooleanGetValue((CFBooleanRef)Value)) {
    return 0LL;
  }
  CFIndex v6 = CFDictionaryGetValue(a1, @"DNSRedirectedAddresses");
  CFTypeID v7 = CFDictionaryGetTypeID();
  if (!v6 || CFGetTypeID(v6) != v7) {
    return 0LL;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 != 30)
  {
    if (v8 == 2)
    {
      CFTypeID v9 = CFDictionaryGetValue((CFDictionaryRef)v6, @"IPv4");
      return __SCNetworkConnectionIPv4AddressMatchesRoutes(a2, v9);
    }

    return 0LL;
  }

  CFTypeID v11 = CFDictionaryGetValue((CFDictionaryRef)v6, @"IPv6");
  return __SCNetworkConnectionIPv6AddressMatchesRoutes(a2, v11);
}

uint64_t __SCNetworkConnectionIPv4AddressMatchesRoutes(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2) {
    return 0LL;
  }
  if (CFGetTypeID(a2) != TypeID) {
    return 0LL;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Addresses");
  CFIndex v6 = (int *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Masks");
  CFTypeID v7 = CFDataGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7) {
    return 0LL;
  }
  if (v6)
  {
    CFTypeID v8 = CFDataGetTypeID();
    if (CFGetTypeID(v6) != v8) {
      return 0LL;
    }
    CFIndex Length = CFDataGetLength((CFDataRef)Value);
    if (Length != CFDataGetLength((CFDataRef)v6)) {
      return 0LL;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
    CFIndex v6 = (int *)CFDataGetBytePtr((CFDataRef)v6);
  }

  else
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
  }

  unint64_t v11 = CFDataGetLength((CFDataRef)Value);
  if (v11 < 4) {
    return 0LL;
  }
  unint64_t v13 = v11 >> 2;
  while (1)
  {
    int v14 = *(_DWORD *)BytePtr;
    if (!v6) {
      break;
    }
    int v15 = *v6++;
    if (((*(_DWORD *)(a1 + 4) ^ v14) & v15) == 0) {
      return 1LL;
    }
LABEL_18:
    uint64_t result = 0LL;
    BytePtr += 4;
    if (!--v13) {
      return result;
    }
  }

  if (*(_DWORD *)(a1 + 4) != v14)
  {
    CFIndex v6 = 0LL;
    goto LABEL_18;
  }

  return 1LL;
}

uint64_t __SCNetworkConnectionIPv6AddressMatchesRoutes(uint64_t a1, const void *a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2) {
    return 0LL;
  }
  if (CFGetTypeID(a2) != TypeID) {
    return 0LL;
  }
  CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Addresses");
  CFIndex v6 = CFDictionaryGetValue((CFDictionaryRef)a2, @"Masks");
  CFTypeID v7 = CFDataGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7) {
    return 0LL;
  }
  if (v6)
  {
    CFTypeID v8 = CFDataGetTypeID();
    if (CFGetTypeID(v6) != v8) {
      return 0LL;
    }
    CFIndex Length = CFDataGetLength((CFDataRef)Value);
    if (Length != CFDataGetLength((CFDataRef)v6)) {
      return 0LL;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
    unint64_t v11 = CFDataGetBytePtr((CFDataRef)v6);
  }

  else
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
    unint64_t v11 = 0LL;
  }

  unint64_t v12 = CFDataGetLength((CFDataRef)Value);
  if (v12 >= 0x10)
  {
    uint64_t v14 = 0LL;
    int v15 = (__int128 *)(a1 + 8);
    unint64_t v16 = v12 >> 4;
    while (1)
    {
      if (v6)
      {
        uint64_t v17 = 0LL;
        __int128 v18 = *v15;
        __int128 v22 = *(_OWORD *)BytePtr;
        __int128 v23 = v18;
        do
        {
          *((_BYTE *)&v22 + v17) &= v11[v17];
          ++v17;
        }

        while (v17 != 16);
        for (uint64_t i = 0LL; i != 16; ++i)
          *((_BYTE *)&v23 + i) &= v11[i];
        if ((void)v22 == (void)v23 && *((void *)&v22 + 1) == *((void *)&v23 + 1)) {
          return 1LL;
        }
        v11 += 16;
      }

      else if (*(void *)BytePtr == *(void *)v15 && *((void *)BytePtr + 1) == *(void *)(a1 + 16))
      {
        return 1LL;
      }

      uint64_t result = 0LL;
      BytePtr += 16;
      if (++v14 == v16) {
        return result;
      }
    }
  }

  return 0LL;
}

BOOL SCNetworkConnectionSelectServiceWithOptions(char *cf, const void *a2)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  CFTypeRef v46 = 0LL;
  int valuePtr = -1;
  CFTypeRef cfa = 0LL;
  CFTypeRef v44 = 0LL;
  CFTypeRef v42 = 0LL;
  if (__SCNetworkConnectionInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (cf) {
      goto LABEL_3;
    }
LABEL_5:
    _SCErrorSet(1002);
    uint64_t v5 = 0LL;
    BOOL v6 = 0LL;
    CFTypeID v7 = 0LL;
    CFTypeID v8 = 0LL;
    goto LABEL_6;
  }

  if (!cf) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v4 || *((void *)cf + 10)) {
    goto LABEL_5;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    BOOL v16 = 0;
    uint64_t v14 = 0LL;
    unint64_t v13 = 0LL;
LABEL_27:
    int v17 = 1;
    goto LABEL_28;
  }

  unint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)a2, @"NoUserPrefs");
  unint64_t v12 = CFDictionaryGetValue((CFDictionaryRef)a2, @"OnDemandRetry");
  unint64_t v13 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"OnDemandAccountIdentifier");
  uint64_t v14 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"OnDemandHostName");
  CFTypeID v15 = CFBooleanGetTypeID();
  BOOL v16 = v11 && CFGetTypeID(v11) == v15 && CFBooleanGetValue((CFBooleanRef)v11) != 0;
  CFTypeID v31 = CFBooleanGetTypeID();
  if (!v12 || CFGetTypeID(v12) != v31) {
    goto LABEL_27;
  }
  int v17 = CFBooleanGetValue((CFBooleanRef)v12);
LABEL_28:
  CFTypeID v8 = (const __CFDictionary *)__SCNetworkConnectionCopyOnDemandConfiguration();
  int v18 = *((_DWORD *)cf + 42);
  CFTypeID v19 = (const __CFString *)*((void *)cf + 24);
  __int128 v20 = *(_OWORD *)(cf + 140);
  *(_OWORD *)stat value = *(_OWORD *)(cf + 124);
  __int128 v48 = v20;
  CFStringRef v21 = VPNAppLayerCopyMatchingService(value, v18, (const unsigned __int8 *)cf + 172, v19, v14, v13);
  CFTypeRef cfa = v21;
  CFTypeID v22 = CFDictionaryGetTypeID();
  if (v21)
  {
    if (v8 && CFGetTypeID(v8) == v22)
    {
      __int128 v23 = __SCNetworkConnectionCopyTriggerWithService(v8, v21);
      CFTypeID v7 = v23;
      if (v23)
      {
        if (!CFDictionaryGetValueIfPresent(v23, @"Status", (const void **)value)
          || (uint64_t v24 = value[0], v25 = CFNumberGetTypeID(), !v24)
          || CFGetTypeID(v24) != v25
          || !CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt32Type, &valuePtr))
        {
          int valuePtr = -1;
        }

        if (__SCNetworkConnectionShouldIgnoreTrigger(v7) && valuePtr != 1 && valuePtr != 2)
        {
          CFRelease(v21);
          CFTypeRef cfa = 0LL;
          if (v46)
          {
            CFRelease(v46);
            CFTypeRef v46 = 0LL;
          }

          CFRelease(v7);
          CFTypeID v22 = CFDictionaryGetTypeID();
          goto LABEL_52;
        }
      }
    }

    else
    {
      CFTypeID v7 = 0LL;
    }

    BOOL v6 = 1LL;
    if (!v17)
    {
      if (v46)
      {
        if (valuePtr != 1 && valuePtr != 2)
        {
          CFTypeID v26 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v46, @"OnDemandMatchInfoOnRetry");
          if (v26) {
            BOOL v6 = CFBooleanGetValue(v26) == 0;
          }
        }
      }
    }

    *((_DWORD *)cf + 76) = 3;
    goto LABEL_79;
  }

  if (!v8)
  {
    char v27 = 1;
    goto LABEL_63;
  }

LABEL_52:
  char v27 = 0;
  if (CFGetTypeID(v8) == v22 && v14)
  {
    LOBYTE(value[0]) = 0;
    CFArrayRef v28 = (const __CFDictionary *)__SCNetworkConnectionCopyMatchingTriggerWithName( v8,  v14,  *((_DWORD *)cf + 42),  v17,  &v46,  value,  &v44);
    CFTypeID v7 = v28;
    if (v28)
    {
      CFTypeID v29 = CFDictionaryGetValue(v28, @"ServiceID");
      CFTypeRef cfa = v29;
      CFTypeID v30 = CFStringGetTypeID();
      if (v29 && CFGetTypeID(v29) == v30)
      {
        CFRetain(v29);
        *((_DWORD *)cf + 76) = 2;
      }

      else
      {
        CFTypeRef cfa = 0LL;
      }

      BOOL v6 = LOBYTE(value[0]) != 0;
      goto LABEL_79;
    }

    if (!v17)
    {
LABEL_74:
      BOOL v6 = 1LL;
      goto LABEL_79;
    }

    if (v46)
    {
      CFRelease(v46);
      CFTypeRef v46 = 0LL;
    }

    char v27 = 0;
    if (v16)
    {
LABEL_73:
      CFTypeID v7 = 0LL;
      goto LABEL_74;
    }

    goto LABEL_64;
  }

    __int128 v20 = 1002;
    goto LABEL_61;
  }

  int valuePtr = VPNAppLayerGetMatchingServiceIdentifier(0, uu);
  if (valuePtr >= 1)
  {
    CFStringRef v21 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"__SERVICES__");
    if (!v21) {
      goto LABEL_64;
    }
    CFTypeID v22 = v21;
    __int128 v23 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v22) == v23)
    {
      uint64_t v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberIntType, &valuePtr);
      values = (void *)CFDictionaryGetValue(v22, v24);
      CFRelease(v24);
      CFTypeID v25 = values;
      if (!values)
      {
        LODWORD(v21) = 0;
LABEL_64:
        _SCErrorSet((int)v21);
        values = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
        CFStringRef Copy = CFArrayCreate(0LL, (const void **)&values, 1LL, MEMORY[0x189605228]);
        CFTypeID v47 = values;
LABEL_65:
        CFRelease(v47);
        return (CFArrayRef)Copy;
      }

      CFTypeID v26 = CFDictionaryGetTypeID();
      if (CFGetTypeID(v25) == v26) {
        return CFArrayCreate(0LL, (const void **)&values, 1LL, MEMORY[0x189605228]);
      }
    }

    LODWORD(v21) = 1001;
    goto LABEL_64;
  }

  if (!a2) {
    goto LABEL_56;
  }
  char v27 = _SC_trimDomain(a2);
  if (!v27) {
    goto LABEL_52;
  }
  CFArrayRef v28 = v27;
  CFIndex Length = CFStringGetLength(v27);
  CFTypeID v30 = CFDictionaryGetValue((CFDictionaryRef)a1, @"__SUPPLEMENTAL__");
  if (!v30) {
    goto LABEL_57;
  }
  CFTypeID v31 = v30;
  CFTypeID v32 = CFArrayGetTypeID();
  if (CFGetTypeID(v31) != v32)
  {
    _SCErrorSet(1001);
    CFStringRef Copy = 0LL;
    goto LABEL_59;
  }

  CFIndex Count = CFArrayGetCount((CFArrayRef)v31);
  if (Count < 1) {
    goto LABEL_57;
  }
  CFNumberRef v34 = Count;
  int v35 = 0LL;
  CFMutableDictionaryRef Mutable = 0LL;
  do
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v31, v35);
    values = ValueAtIndex;
    CFIndex v38 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v38)
      {
        CFNumberRef v39 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)values, @"__MATCH_DOMAIN__");
        mach_error_t v40 = CFStringGetTypeID();
        if (v39)
        {
          if (CFGetTypeID(v39) == v40)
          {
            CFTypeRef v41 = CFStringGetLength(v39);
            if (v41 < 1
              || (CFTypeRef v42 = v41, v55.location = 0LL,
                             v55.length = Length,
                             CFStringFindWithOptions(v28, v39, v55, 0xDuLL, 0LL))
              && (Length <= v42
               || (v56.CFIndex location = 0LL,
                   v56.length = Length - v42,
                   CFStringFindWithOptions(v28, @".", v56, 0xDuLL, 0LL))))
            {
              if (!Mutable) {
                CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
              }
              CFTypeID v43 = CFArrayGetCount(Mutable);
              CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)values);
              *(void *)&src.byte0 = MutableCopy;
              CFDictionaryRemoveValue(MutableCopy, @"__MATCH_DOMAIN__");
              if (v43)
              {
                v54.CFIndex location = 0LL;
                v54.length = v43;
                if (CFArrayContainsValue(Mutable, v54, MutableCopy))
                {
LABEL_48:
                  CFRelease(*(CFTypeRef *)&src.byte0);
                  goto LABEL_49;
                }

                CFMutableStringRef MutableCopy = *(__CFDictionary **)&src.byte0;
              }

              CFArrayAppendValue(Mutable, MutableCopy);
              goto LABEL_48;
            }
          }
        }
      }
    }

    CFRelease((CFTypeRef)Private);
    goto LABEL_7;
  }

  if (v8 != 18) {
    goto LABEL_52;
  }
  *(void *)(Private + 16) = @"L2TP";
  *(void *)(Private + 48) = @"l2tp";
  unint64_t v12 = &kSCEntNetL2TP;
LABEL_30:
  CFTypeID v15 = *v12;
LABEL_31:
  *(void *)(Private + 128) = v15;
LABEL_32:
  *(_WORD *)(Private + 192) = *((_WORD *)interface + 96);
  *(_BYTE *)(Private + 240) = *((_BYTE *)interface + 240);
  BOOL v16 = (const __CFDictionary *)*((void *)interface + 28);
  if (v16) {
    *(void *)(Private + 224) = CFDictionaryCreateMutableCopy(0LL, 0LL, v16);
  }
  int v17 = *(const void **)(Private + 136);
  if (v17 && CFEqual(v17, @"PPPoE"))
  {
    int v18 = (const void *)*((void *)interface + 2);
    if (v18 && CFEqual(v18, @"IEEE80211")) {
      CFTypeID v19 = 6;
    }
    else {
      CFTypeID v19 = 5;
    }
  }

  else
  {
    CFTypeID v19 = *((_DWORD *)interface + 78);
  }

  *(_DWORD *)(Private + 312) = v19;
  return (SCNetworkInterfaceRef)Private;
}

LABEL_63:
  if (v16) {
    goto LABEL_73;
  }
LABEL_64:
  if (!__SCNetworkConnectionCopyUserPreferencesInternal( (const __CFDictionary *)a2,  (CFStringRef *)&cfa,  (CFDictionaryRef *)&v42)) {
    goto LABEL_73;
  }
  CFTypeID v32 = CFDictionaryGetTypeID();
  if ((v27 & 1) != 0)
  {
    CFTypeID v7 = 0LL;
  }

  else
  {
    CFTypeID v7 = 0LL;
    if (CFGetTypeID(v8) == v32 && v8) {
      CFTypeID v7 = __SCNetworkConnectionCopyTriggerWithService(v8, cfa);
    }
  }

  BOOL v6 = 1LL;
  *((_DWORD *)cf + 76) = 1;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  CFNumberRef v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberIntType, cf + 304);
  CFDictionarySetValue(Mutable, @"OnDemandMatchInfoVPNType", v34);
  CFRelease(v34);
  CFTypeRef v46 = Mutable;
LABEL_79:
  if (cfa)
  {
    int v35 = _SCNetworkServiceCopyActive(0LL, (const __CFString *)cfa);
    *((void *)cf + 10) = v35;
    if (!v35)
    {
      _SCErrorSet(0);
      uint64_t v5 = 0LL;
      BOOL v6 = 0LL;
      goto LABEL_6;
    }

    if (v7)
    {
      CFTypeID v36 = (const void *)*((void *)cf + 39);
      if (v36) {
        CFRelease(v36);
      }
      *((void *)cf + 39) = v7;
      CFRetain(v7);
      int v37 = valuePtr;
      if (valuePtr == -1)
      {
        if (CFDictionaryGetValueIfPresent(v7, @"Status", (const void **)value)
          && isA_CFNumber(value[0])
          && CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt32Type, &valuePtr))
        {
          int v37 = valuePtr;
        }

        else
        {
          int v37 = -1;
          int valuePtr = -1;
        }
      }

      if (v37 == 2) {
        goto LABEL_100;
      }
      if (*((_DWORD *)cf + 76) == 3)
      {
        CFIndex v38 = CFDictionaryGetValue(v7, @"OnDemandMatchAppEnabled");
        if (!isA_CFBoolean(v38) || !CFBooleanGetValue((CFBooleanRef)v38)) {
          goto LABEL_100;
        }
      }
    }

    else if (*((_DWORD *)cf + 76) != 1)
    {
      goto LABEL_100;
    }

    cf[308] = 1;
LABEL_100:
    CFNumberRef v39 = (const __CFAllocator *)*MEMORY[0x189604DB0];
    if (v42) {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(v39, 0LL, (CFDictionaryRef)v42);
    }
    else {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(v39, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }
    uint64_t v5 = MutableCopy;
    if (v14) {
      CFDictionarySetValue(MutableCopy, @"OnDemandHostName", v14);
    }
    if (cf[308] && v46) {
      CFDictionarySetValue(v5, @"OnDemandMatchInfo", v46);
    }
    *((void *)cf + 40) = v5;
    CFRetain(v5);
    CFTypeRef v41 = v44;
    if (v44)
    {
      *((void *)cf + 41) = v44;
      CFRetain(v41);
    }

          if (!CFEqual(v25, @"IEEE80211")) {
            *(_BYTE *)(a1 + 344) = 1;
          }
          CFTypeID v47 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"IOBuiltin");
          __int128 v48 = CFBooleanGetTypeID();
          if (v47 && CFGetTypeID(v47) == v48
            || (CFTypeID v47 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"IOPrimaryInterface"),
                uint64_t v49 = CFBooleanGetTypeID(),
                v47)
            && CFGetTypeID(v47) == v49)
          {
            CFTypeID v50 = CFBooleanGetValue(v47);
          }

          else
          {
            CFTypeID v50 = isBuiltin(a2);
          }

          *(_BYTE *)(a1 + 176) = v50;
          if (!v50 && CFEqual(*(CFTypeRef *)(a1 + 16), @"IEEE80211")) {
            *(_BYTE *)(a1 + 176) = 1;
          }
          vm_size_t v51 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"IsEphemeral");
          *(_BYTE *)(a1 + 241) = getBooleanValue(v51);
          int v52 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"SupportsVMNETBridgedMode");
          *(_BYTE *)(a1 + 244) = getBooleanValue(v52);
          int v53 = (const __CFString *)CFDictionaryGetValue(theDict, @"IOLocation");
          int v54 = IOCopyCFStringValue(v53);
          *(void *)(a1 + 200) = v54;
          if (v54 && !CFStringGetLength(v54))
          {
            CFRelease(*(CFTypeRef *)(a1 + 200));
            *(void *)(a1 + 200) = 0LL;
          }

          CFIndex v55 = CFDictionaryGetValue(a5, @"IOFeatures");
          uint64_t v56 = CFNumberGetTypeID();
          if (v55
            && CFGetTypeID(v55) == v56
            && CFNumberGetValue((CFNumberRef)v55, kCFNumberIntType, v80)
            && (v80[0] & 6) != 0)
          {
            *(_BYTE *)(a1 + 368) = 1;
          }

          if (CFEqual(*(CFTypeRef *)(a1 + 16), @"IEEE80211"))
          {
            CFTypeID v31 = @"airport";
            goto LABEL_84;
          }

          switch(*(_DWORD *)(a1 + 312))
          {
            case 0xD:
              uint64_t v63 = *(const __CFString **)(a1 + 200);
              if (v63 && CFStringGetLength(v63))
              {
                CFTypeID v64 = @"multithunderbolt";
                goto LABEL_106;
              }

              CFTypeID v31 = @"thunderbolt";
              goto LABEL_84;
            case 0xE:
              *(void *)(a1 + 48) = @"wireless";
              CFIndex v65 = &stru_189B68690;
              goto LABEL_107;
            case 0x12:
              CFTypeID v31 = @"bluetooth-pan-gn";
              goto LABEL_84;
            case 0x13:
              CFTypeID v31 = @"bluetooth-pan-nap";
              goto LABEL_84;
            case 0x14:
              CFTypeID v31 = @"bluetooth-pan-u";
              goto LABEL_84;
            default:
              if (*(_BYTE *)(a1 + 176))
              {
                CFIndex v66 = *(const __CFString **)(a1 + 200);
                if (!v66 || !CFStringGetLength(v66))
                {
                  CFTypeID v31 = @"ether";
                  goto LABEL_84;
                }

                CFTypeID v64 = @"multiether";
LABEL_106:
                *(void *)(a1 + 48) = v64;
                CFIndex v65 = *(const __CFString **)(a1 + 200);
LABEL_107:
                int v17 = (void *)CFRetain(v65);
                goto LABEL_9;
              }

              uint64_t v67 = IORegistryEntrySearchCFProperty(a2, "IOService", @"IOProviderClass", 0LL, 3u);
              if (!v67) {
                goto LABEL_152;
              }
              CFIndex v68 = v67;
              uint64_t v69 = a2;
              break;
          }

          while (CFEqual(v68, @"IOSkywalkEthernetInterface"))
          {
            CFRelease(v68);
            if (!IORegistryEntryGetParentEntry(v69, "IOService", parent))
            {
              uint64_t v69 = parent[0];
              CFIndex v68 = IORegistryEntrySearchCFProperty(parent[0], "IOService", @"IOProviderClass", 0LL, 3u);
              if (v68) {
                continue;
              }
            }

            goto LABEL_152;
          }

          if (!CFEqual(v68, @"IOPCIDevice"))
          {
            CFIndex v74 = a2;
            while (!CFEqual(v68, @"IOUSBDevice")
                 && !CFEqual(v68, @"IOUSBInterface")
                 && !CFEqual(v68, @"IOUSBHostInterface"))
            {
              if (_SC_isAppleInternal_once_3 != -1) {
                dispatch_once(&_SC_isAppleInternal_once_3, &__block_literal_global_431);
              }
              if (_SC_isAppleInternal_isInternal_3 && IOObjectConformsTo(v74, "IOUserEthernetController")) {
                break;
              }
              CFIndex v75 = a4;
              if (v74 == a2 || (CFIndex v75 = a6, v74 == a4))
              {
                CFRelease(v68);
                CFIndex v68 = IORegistryEntrySearchCFProperty(v75, "IOService", @"IOProviderClass", 0LL, 3u);
                CFIndex v74 = v75;
                if (v68) {
                  continue;
                }
              }

              goto LABEL_139;
            }

            processUSBInterface((void *)a1, a2);
            if (!update_interface_name((void *)a1, a2, 1))
            {
              *(void *)(a1 + 48) = @"usb-ether";
              *(void *)(a1 + 56) = IODictionaryCopyBSDName(theDict);
            }

BOOL __SCNetworkConnectionShouldIgnoreTrigger(const __CFDictionary *a1)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"Action");
  CFTypeID TypeID = CFStringGetTypeID();
  return Value
      && CFGetTypeID(Value) == TypeID
      && (CFEqual(Value, @"Ignore") || CFEqual(Value, @"Disconnect"));
}

const char *__SCNetworkConnectionGetControllerPortName()
{
  uint64_t result = (const char *)scnc_server_name;
  if (!scnc_server_name)
  {
    getpid();
    else {
      uint64_t result = "com.apple.SystemConfiguration.PPPController-priv";
    }
    scnc_server_name = (uint64_t)result;
  }

  return result;
}

void childForkHandler_0()
{
  scnc_server = 0;
  scnc_server_name = 0LL;
}

uint64_t __SCNetworkConnectionDeallocate(uint64_t a1)
{
  v23[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = (os_log_s *)__log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    uint64_t v2 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, (os_log_type_t)v3))
  {
    uint64_t v4 = _os_log_pack_size();
    uint64_t v5 = (char *)v23 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v6 + 4) = a1 + 88;
    __SC_log_send(7, (uint64_t)v2, v3, v5);
  }

  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
  mach_port_name_t v7 = *(_DWORD *)(a1 + 120);
  CFTypeID v8 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  if (v7) {
    mach_port_deallocate(*MEMORY[0x1895FBBE0], v7);
  }
  mach_port_name_t v9 = *(_DWORD *)(a1 + 156);
  if (v9) {
    mach_port_deallocate(*v8, v9);
  }
  int v10 = *(const void **)(a1 + 192);
  if (v10) {
    CFRelease(v10);
  }
  unint64_t v11 = *(__CFRunLoopSource **)(a1 + 224);
  if (v11)
  {
    CFRunLoopSourceInvalidate(v11);
    CFRelease(*(CFTypeRef *)(a1 + 224));
  }

  unint64_t v12 = *(const void **)(a1 + 280);
  if (v12) {
    CFRelease(v12);
  }
  unint64_t v13 = *(__CFMachPort **)(a1 + 208);
  if (v13)
  {
    mach_port_name_t Port = CFMachPortGetPort(v13);
    CFMachPortInvalidate(*(CFMachPortRef *)(a1 + 208));
    CFRelease(*(CFTypeRef *)(a1 + 208));
    mach_port_mod_refs(*v8, Port, 1u, -1);
  }

  mach_port_name_t v15 = *(_DWORD *)(a1 + 200);
  if (v15) {
    mach_port_deallocate(*v8, v15);
  }
  BOOL v16 = *(void (**)(void))(a1 + 264);
  if (v16) {
    v16(*(void *)(a1 + 248));
  }
  int v17 = *(const void **)(a1 + 80);
  if (v17) {
    CFRelease(v17);
  }
  int v18 = *(const void **)(a1 + 312);
  if (v18) {
    CFRelease(v18);
  }
  CFTypeID v19 = *(const void **)(a1 + 320);
  if (v19) {
    CFRelease(v19);
  }
  __int128 v20 = *(const void **)(a1 + 328);
  if (v20) {
    CFRelease(v20);
  }
  CFStringRef v21 = *(const void **)(a1 + 336);
  if (v21) {
    CFRelease(v21);
  }
  uint64_t result = *(void *)(a1 + 344);
  if (result)
  {
    ne_session_set_event_handler();
    return ne_session_release();
  }

  return result;
}

__CFString *__SCNetworkConnectionCopyDescription(uint64_t a1)
{
  uint64_t v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCNetworkConnection, %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"service = %p", *(void *)(a1 + 80));
  if (*(_DWORD *)(a1 + 200)) {
    CFStringAppendFormat(Mutable, 0LL, @", server port = 0x%x", *(unsigned int *)(a1 + 200));
  }
  if (*(void *)(a1 + 344)) {
    uint64_t v4 = "yes";
  }
  else {
    uint64_t v4 = "no";
  }
  CFStringAppendFormat(Mutable, 0LL, @"using NetworkExtension = %s", v4);
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

CFStringRef pppMPCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat( 0LL,  0LL,  @"<SCNetworkConnection MP %p> {service = %@, callout = %p}",  a1,  *(void *)(a1 + 80),  *(void *)(a1 + 232),  *MEMORY[0x1895F89C0]);
}

void __SCNetworkConnectionMachCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[1] = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a2 + 20) == 70)
  {
    uint64_t v5 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v5;
    }

    uint64_t v6 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      CFTypeID v8 = (char *)v9 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v5, v6, v8);
    }

    __SCNetworkConnectionReconnectNotifications(a4);
  }

  __SCNetworkConnectionCallBack(a4);
}

uint64_t __SCNetworkConnectionServerPort(kern_return_t *a1)
{
  kern_return_t v4;
  uint64_t result;
  mach_port_t sp;
  uint64_t v7;
  uint64_t v7 = *MEMORY[0x1895F89C0];
  sp = 0;
  mach_port_t v2 = *MEMORY[0x1895F9630];
  ControllerPortCFStringRef Name = __SCNetworkConnectionGetControllerPortName();
  uint64_t v4 = bootstrap_look_up(v2, ControllerPortName, &sp);
  *a1 = v4;
  if (!v4) {
    return sp;
  }
  uint64_t result = 0LL;
  scnc_server_name = 0LL;
  return result;
}

void __SCNetworkConnectionReconnectNotifications(uint64_t a1)
{
  v29[1] = *MEMORY[0x1895F89C0];
  mach_port_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  uint64_t v3 = *(const __CFArray **)(a1 + 280);
  if (v3) {
    *(void *)(a1 + 280) = 0LL;
  }
  uint64_t v4 = *(__CFRunLoopSource **)(a1 + 224);
  if (v4)
  {
    CFRunLoopSourceInvalidate(v4);
    CFRelease(*(CFTypeRef *)(a1 + 224));
    *(void *)(a1 + 224) = 0LL;
  }

  uint64_t v5 = *(dispatch_source_s **)(a1 + 296);
  if (v5)
  {
    dispatch_source_cancel(v5);
    *(void *)(a1 + 296) = 0LL;
  }

  uint64_t v6 = *(dispatch_queue_s **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 288) = 0LL;
    dispatch_retain(v6);
    *(_BYTE *)(a1 + 217) = 0;
    pthread_mutex_unlock(v2);
    if (!v3)
    {
      if (SCNetworkConnectionSetDispatchQueue((SCNetworkConnectionRef)a1, v6))
      {
        int v7 = 1;
      }

      else
      {
        if (SCError() != 1102)
        {
          CFTypeID v25 = (os_log_s *)__log_SCNetworkConnection_log;
          if (!__log_SCNetworkConnection_log)
          {
            CFTypeID v25 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
            __log_SCNetworkConnection_log = (uint64_t)v25;
          }

          uint64_t v26 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v25, (os_log_type_t)v26))
          {
            uint64_t v27 = _os_log_pack_size();
            CFArrayRef v28 = (char *)v29 - ((MEMORY[0x1895F8858](v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v25, v26, v28);
          }
        }

        int v7 = 0;
      }

      goto LABEL_25;
    }

LABEL_12:
    CFIndex Count = CFArrayGetCount(v3);
    if (Count < 1)
    {
      int v7 = 1;
    }

    else
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0LL;
      while (1)
      {
        ValueAtIndex = (__CFRunLoop *)CFArrayGetValueAtIndex(v3, v10 + 1);
        unint64_t v12 = (const __CFString *)CFArrayGetValueAtIndex(v3, v10 + 2);
        int v13 = SCNetworkConnectionScheduleWithRunLoop((SCNetworkConnectionRef)a1, ValueAtIndex, v12);
        if (!v13) {
          break;
        }
        int v7 = v13;
        v10 += 3LL;
        if (v10 >= v9) {
          goto LABEL_24;
        }
      }

      if (SCError() != 1102)
      {
        uint64_t v14 = (os_log_s *)__log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          uint64_t v14 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v14;
        }

        uint64_t v15 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
        {
          uint64_t v16 = _os_log_pack_size();
          int v17 = (char *)v29 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(5, (uint64_t)v14, v15, v17);
        }
      }

      int v7 = 0;
    }

  _SCErrorSet(1002);
  return 0LL;
}

    CFRelease(v4);
  }

  _SCNetworkInterfaceCacheClose();
  NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)service + 2), 0LL);
  CFIndex v10 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  if (v10)
  {
    unint64_t v11 = _SC_LOG_DEFAULT();
    unint64_t v12 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v11, (os_log_type_t)v12))
    {
      int v13 = _os_log_pack_size();
      uint64_t v14 = (char *)block - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = service;
      __SC_log_send(7, (uint64_t)v11, v12, v14);
    }
  }

  return v10;
}

  if (!a1[10]) {
    return __SCBridgeInterfaceSetMemberInterfaces((uint64_t)a1, (CFArrayRef)a2);
  }
  MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces((const __SCNetworkInterface *)a1);
  int v13 = MemberInterfaces;
  if (MemberInterfaces) {
    uint64_t v14 = CFArrayGetCount(MemberInterfaces);
  }
  else {
    uint64_t v14 = 0LL;
  }
  int v17 = SCBridgeInterfaceCopyAvailableMemberInterfaces(a1[10]);
  int v18 = v17;
  if (v17)
  {
    uint64_t v19 = CFArrayGetCount(v17);
    if (!a2) {
      goto LABEL_37;
    }
  }

  else
  {
    uint64_t v19 = 0LL;
    if (!a2) {
      goto LABEL_37;
    }
  }

  uint64_t v20 = CFArrayGetCount((CFArrayRef)a2);
  if (v20 >= 1)
  {
    CFStringRef v21 = v20;
    uint64_t v22 = 0LL;
    int v23 = 0LL;
    while (1)
    {
      uint64_t v24 = CFArrayGetValueAtIndex((CFArrayRef)a2, v23);
      if (!v13) {
        break;
      }
      v28.CFIndex location = 0LL;
      v28.length = v14;
      CFTypeID v25 = CFArrayContainsValue(v13, v28, v24);
      if (v18 && !v25) {
        goto LABEL_30;
      }
      if (!v25)
      {
        uint64_t v26 = 1002;
        if (v18) {
          goto LABEL_39;
        }
        goto LABEL_40;
      }

  CFRetain(ServiceQoSMarkingPolicy);
  return ServiceQoSMarkingPolicy;
}

  CFIndex v9 = 0LL;
LABEL_13:
  if (v3) {
    CFRelease(v3);
  }
  return v9;
}

    uint64_t v3 = v3->ifa_next;
    if (!v3) {
      goto LABEL_13;
    }
  }

  int v35 = 0u;
  CFTypeID v36 = 0u;
  CFTypeID v33 = 0;
  v32[0] = 0LL;
  v32[1] = 0LL;
  __strlcpy_chk();
  *(void *)&CFTypeID v36 = v32;
  if (ioctl(v1, 0xC020697FuLL, &v35) != -1)
  {
    uint64_t v5 = CFStringCreateWithCString(0LL, v3->ifa_name, 0x600u);
    uint64_t Private = _SCVLANInterfaceCreatePrivate(0LL, v5);
    if (!Private) {
      _SCVLANInterfaceCopyActive_cold_1();
    }
    int v7 = (const __SCNetworkInterface *)Private;
    CFRelease(v5);
    __strlcpy_chk();
    CFTypeID v8 = CFStringCreateWithCString(0LL, cStr, 0x600u);
    CFIndex v9 = _SCNetworkInterfaceCreateWithBSDName(0LL, v8, 2);
    if (!v9) {
      _SCVLANInterfaceCopyActive_cold_2();
    }
    CFIndex v10 = (const __SCNetworkInterface *)v9;
    CFRelease(v8);
    int valuePtr = v33;
    unint64_t v11 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    if (!v11) {
      _SCVLANInterfaceCopyActive_cold_3();
    }
    unint64_t v12 = v11;
    SCVLANInterfaceSetPhysicalInterfaceAndTag(v7, v10, v11);
    CFRelease(v10);
    CFRelease(v12);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
    goto LABEL_12;
  }

  uint64_t v22 = __log_SCNetworkConfiguration();
  int v23 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v22, (os_log_type_t)v23))
  {
    uint64_t v24 = _os_log_pack_size();
    CFTypeID v25 = &v29[-((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    uint64_t v26 = _os_log_pack_fill();
    uint64_t v27 = __error();
    CFArrayRef v28 = strerror(*v27);
    *(_DWORD *)uint64_t v26 = 136315138;
    *(void *)(v26 + 4) = v28;
    __SC_log_send(5, (uint64_t)v22, v23, v25);
  }

  CFRelease(Mutable);
  _SCErrorSet(1001);
  CFMutableDictionaryRef Mutable = 0LL;
LABEL_13:
  close(v1);
LABEL_18:
  MEMORY[0x186E09434](v31);
  return Mutable;
}

  _SCErrorSet(v9);
  return 0LL;
}

LABEL_25:
    dispatch_release(v6);
    goto LABEL_26;
  }

  *(_BYTE *)(a1 + 217) = 0;
  pthread_mutex_unlock(v2);
  if (v3) {
    goto LABEL_12;
  }
LABEL_27:
  int v18 = (os_log_s *)__log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    int v18 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v18;
  }

  uint64_t v19 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
  {
    uint64_t v20 = _os_log_pack_size();
    CFStringRef v21 = (char *)v29 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    int v23 = SCError();
    uint64_t v24 = "failed";
    if (v23 == 1102) {
      uint64_t v24 = "shutdown";
    }
    *(_DWORD *)uint64_t v22 = 136315138;
    *(void *)(v22 + 4) = v24;
    __SC_log_send(5, (uint64_t)v18, v19, v21);
  }

    copyfile_state_free(v8);
    uint64_t v22 = 0LL;
LABEL_26:
    _SCNetworkConfigurationRemoveConfigurationFiles(v3);
    if (!v6) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  copyfile_state_free(v8);
  chmod((const char *)v42, 0x1EDu);
  uint64_t v22 = 1LL;
  if (v6) {
    goto LABEL_27;
  }
LABEL_28:
  if (v40) {
    CFRelease(v40);
  }
  if (url) {
    CFRelease(url);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v22;
}

void __SCNetworkConnectionCallBack(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  mach_port_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (*(_BYTE *)(a1 + 217))
  {
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 232);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 248);
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 256);
      if (v4 && v5)
      {
        uint64_t v5 = v4(*(void *)(a1 + 248));
        uint64_t v6 = *(uint64_t (**)(uint64_t))(a1 + 264);
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      if (*(void *)(a1 + 344))
      {
LABEL_13:
        pthread_mutex_unlock(v2);
        uint64_t Status = SCNetworkConnectionGetStatus((SCNetworkConnectionRef)a1);
        __SCNetworkConnectionNotify(a1, v3, Status, v6, v5);
        CFRelease((CFTypeRef)a1);
        return;
      }

      CFRetain((CFTypeRef)a1);
      if (*(void *)(a1 + 280))
      {
        CFAbsoluteTime Current = CFRunLoopGetCurrent();
        if (!Current) {
          __SCNetworkConnectionCallBack_cold_2();
        }
        uint64_t v14 = Current;
        if (Current != CFRunLoopGetMain()) {
          goto LABEL_13;
        }
        CFRetain(v14);
        CFRunLoopMode v15 = CFRunLoopCopyCurrentMode(v14);
        pthread_mutex_unlock(v2);
        if (__SCNetworkConnectionQueue_once != -1) {
          dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_91_0);
        }
        block[0] = MEMORY[0x1895F87A8];
        block[1] = 0x40000000LL;
        block[2] = ____SCNetworkConnectionCallBack_block_invoke;
        block[3] = &__block_descriptor_tmp_102;
        block[4] = a1;
        void block[5] = v14;
        block[6] = v15;
        void block[7] = v3;
        void block[8] = v6;
        block[9] = v5;
        dispatch_async((dispatch_queue_t)__SCNetworkConnectionQueue_q, block);
      }

      else
      {
        uint64_t v16 = *(dispatch_queue_s **)(a1 + 288);
        if (!v16) {
          __SCNetworkConnectionCallBack_cold_1();
        }
        pthread_mutex_unlock(v2);
        SCNetworkConnectionStatus v17 = SCNetworkConnectionGetStatus((SCNetworkConnectionRef)a1);
        CFRetain((CFTypeRef)a1);
        v19[0] = MEMORY[0x1895F87A8];
        v19[1] = 0x40000000LL;
        void v19[2] = ____SCNetworkConnectionCallBackPerformDispatch_block_invoke;
        v19[3] = &__block_descriptor_tmp_105;
        _BYTE v19[4] = a1;
        v19[5] = v3;
        SCNetworkConnectionStatus v20 = v17;
        v19[6] = v6;
        v19[7] = v5;
        dispatch_async(v16, v19);
        CFRelease((CFTypeRef)a1);
      }
    }

    else
    {
      pthread_mutex_unlock(v2);
    }
  }

  else
  {
    int v7 = (os_log_s *)__log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v7 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v7;
    }

    uint64_t v8 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      CFIndex v10 = (char *)block - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = a1 + 88;
      __SC_log_send(6, (uint64_t)v7, v8, v10);
    }

    pthread_mutex_unlock(v2);
  }

uint64_t __SCNetworkConnectionNotify( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  v16[1] = *MEMORY[0x1895F89C0];
  CFIndex v10 = (os_log_s *)__log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    CFIndex v10 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v10;
  }

  uint64_t v11 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v10, (os_log_type_t)v11))
  {
    uint64_t v12 = _os_log_pack_size();
    int v13 = (char *)v16 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)(v14 + 4) = a1 + 88;
    *(_WORD *)(v14 + 12) = 1024;
    *(_DWORD *)(v14 + 14) = a3;
    __SC_log_send(7, (uint64_t)v10, v11, v13);
  }

  uint64_t result = a2(a1, a3, a5);
  if (a4)
  {
    if (a5) {
      return a4(a5);
    }
  }

  return result;
}

void dispatch_CFRelease_0(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t __SCNetworkConnectionShouldNeverMatch(const __CFDictionary *a1, const __CFString *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  CFDictionaryRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"OnDemandMatchDomainsNever");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0LL;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, v10);
          CFTypeID v12 = CFStringGetTypeID();
          if (ValueAtIndex)
          {
          }

          if (v9 == ++v10) {
            goto LABEL_9;
          }
        }

        uint64_t v21 = (os_log_s *)__log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          uint64_t v21 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v21;
        }

        uint64_t v22 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v21, (os_log_type_t)v22))
        {
          uint64_t v23 = _os_log_pack_size();
          uint64_t v24 = (char *)&v25 - ((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v21, v22, v24);
          return 1LL;
        }

        return 1LL;
      }
    }
  }

CFStringRef __SCNetworkConnectionDomainGetMatch( const __CFDictionary *a1, const __CFString *a2, int a3)
{
  if (a3) {
    uint64_t v4 = @"OnDemandMatchDomainsOnRetry";
  }
  else {
    uint64_t v4 = @"OnDemandMatchDomainsAlways";
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, v4);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0LL;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)Value, v9);
    CFTypeID v11 = CFStringGetTypeID();
    if (ValueAtIndex)
    {
    }

    if (v8 == ++v9) {
      return 0LL;
    }
  }

  return ValueAtIndex;
}

void addPasswordFromKeychain(const __CFString *a1, CFDictionaryRef *a2)
{
  if (*a2)
  {
    CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(*a2, @"UniqueIdentifier");
    CFTypeID TypeID = CFStringGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID)
      {
        if (SCNetworkConnectionPrivateIsPPPService(a1, @"L2TP", 0LL))
        {
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, Value);
          CFStringAppend(MutableCopy, @".SS");
          CFRelease(MutableCopy);
        }
      }
    }
  }

CFStringRef SCNetworkConnectionPrivateIsPPPService( CFStringRef serviceID, const void *a2, const void *a3)
{
  uint64_t result = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"Setup:", serviceID, @"Interface");
  if (result)
  {
    uint64_t v6 = result;
    int v7 = (const __CFDictionary *)SCDynamicStoreCopyValue(0LL, result);
    if (v7)
    {
      CFIndex v8 = v7;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v8) == TypeID)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(v8, @"Type");
        CFTypeID v11 = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == v11) {
            LODWORD(Value) = CFEqual(Value, @"PPP");
          }
          else {
            LODWORD(Value) = 0;
          }
        }

        int v13 = CFDictionaryGetValue(v8, @"SubType");
        CFTypeID v14 = CFStringGetTypeID();
        if (v13 && CFGetTypeID(v13) == v14)
        {
          int v15 = CFEqual(v13, a2);
          int v12 = v15;
          if (a3 && !v15) {
            int v12 = CFEqual(v13, a3);
          }
        }

        else
        {
          int v12 = 0;
        }
      }

      else
      {
        int v12 = 0;
        LODWORD(Value) = 0;
      }

      CFRelease(v8);
    }

    else
    {
      int v12 = 0;
      LODWORD(Value) = 0;
    }

    CFRelease(v6);
    if ((_DWORD)Value) {
      BOOL v16 = v12 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    return (const __CFString *)!v16;
  }

  return result;
}

uint64_t SCUserPreferencesGetTypeID()
{
  if (__SCUserPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
  }
  return __kSCUserPreferencesTypeID;
}

uint64_t SCUserPreferencesGetUniqueID(void *cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[3];
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t SCUserPreferencesIsForced(CFStringRef *cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v2) {
    return CFPreferencesAppValueIsForced(cf[2], @"com.apple.networkConnect");
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t SCUserPreferencesRemove(CFTypeRef cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v2) {
    return processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))removeCallout,  *((void *)cf + 3),  0LL,  0LL);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t processPreferences( const __CFString *a1, uint64_t (*a2)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  v28[1] = *(__CFArray **)MEMORY[0x1895F89C0];
  v28[0] = 0LL;
  CFPreferencesAppSynchronize(@"com.apple.networkConnect");
  CFIndex v9 = (const __CFArray *)CFPreferencesCopyAppValue(a1, @"com.apple.networkConnect");
  if (v9)
  {
    CFIndex v10 = v9;
    CFTypeID TypeID = CFArrayGetTypeID();
    if (CFGetTypeID(v10) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(v10);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        int v14 = 0;
        CFIndex v15 = 0LL;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v10, v15);
          if (!ValueAtIndex) {
            processPreferences_cold_1();
          }
          CFIndex v17 = ValueAtIndex;
          CFTypeID v18 = CFDictionaryGetTypeID();
          if (CFGetTypeID(v17) != v18) {
            break;
          }
          CFTypeID v19 = (void *)a2(a1, v17, a3, a4, a5);
          if (v19) {
            goto LABEL_10;
          }
          int v14 = 1;
LABEL_13:
          if (v13 == ++v15) {
            goto LABEL_16;
          }
        }

        CFTypeID v19 = (void *)CFRetain(v17);
LABEL_10:
        if (!CFEqual(v17, v19)) {
          int v14 = 1;
        }
        addKey(v28, v19);
        CFRelease(v19);
        goto LABEL_13;
      }
    }

    int v14 = 0;
LABEL_16:
    CFRelease(v10);
  }

  else
  {
    int v14 = 0;
  }

  SCNetworkConnectionStatus v20 = (void *)a2(a1, 0LL, a3, a4, a5);
  if (v20)
  {
    uint64_t v21 = v20;
    addKey(v28, v20);
    CFRelease(v21);
    uint64_t v22 = v28[0];
  }

  else
  {
    uint64_t v22 = v28[0];
    if (!v14)
    {
      uint64_t v23 = 1LL;
      if (!v28[0]) {
        return v23;
      }
      goto LABEL_25;
    }
  }

  if (CFPreferencesAppValueIsForced(a1, @"com.apple.networkConnect"))
  {
    uint64_t v23 = 0LL;
    if (!v22) {
      return v23;
    }
    goto LABEL_25;
  }

  logCFPreferencesChange(a1, v22);
  uint64_t v24 = (const __CFString *)*MEMORY[0x189605198];
  uint64_t v25 = (const __CFString *)*MEMORY[0x189605190];
  CFPreferencesSetValue( a1,  v22,  @"com.apple.networkConnect",  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605190]);
  uint64_t v23 = CFPreferencesSynchronize(@"com.apple.networkConnect", v24, v25);
  notify_post("com.apple.networkConnect");
  if (v22) {
LABEL_25:
  }
    CFRelease(v22);
  return v23;
}

CFTypeRef removeCallout(int a1, CFDictionaryRef theDict, const void *a3)
{
  if (!theDict) {
    return 0LL;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3)) {
    return 0LL;
  }
  else {
    return CFRetain(theDict);
  }
}

uint64_t SCUserPreferencesSetCurrent(CFTypeRef cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v2) {
    return processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setCurrentCallout,  *((void *)cf + 3),  0LL,  0LL);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

__CFDictionary *setCurrentCallout(int a1, CFDictionaryRef theDict, const void *a3)
{
  if (!theDict) {
    return 0LL;
  }
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict);
  CFDictionaryRemoveValue(MutableCopy, @"ConnectByDefault");
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3)) {
    CFDictionarySetValue(MutableCopy, @"ConnectByDefault", (const void *)*MEMORY[0x189604DE8]);
  }
  return MutableCopy;
}

CFTypeRef SCUserPreferencesCopyName(CFTypeRef cf)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cfa[0] = 0LL;
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }

  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_8;
  }
  int v3 = processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyNameCallout,  *((void *)cf + 3),  0LL,  (uint64_t)cfa);
  CFTypeRef result = cfa[0];
  if (!v3 && cfa[0])
  {
    CFRelease(cfa[0]);
    return 0LL;
  }

  return result;
}

CFTypeRef copyNameCallout(int a1, CFDictionaryRef theDict, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  if (!theDict) {
    return 0LL;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (*a5)
    {
      CFRelease(*a5);
      *a5 = 0LL;
    }

    CFIndex v10 = CFDictionaryGetValue(theDict, @"UserDefinedName");
    *a5 = v10;
    if (v10)
    {
      CFTypeRef v11 = v10;
      CFTypeID v12 = CFStringGetTypeID();
    }

    else
    {
      int v14 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PPP");
      CFTypeID v15 = CFDictionaryGetTypeID();
      if (v14 && CFGetTypeID(v14) == v15)
      {
        CFTypeRef v11 = CFDictionaryGetValue(v14, @"UserDefinedName");
        *a5 = v11;
      }

      else
      {
        CFTypeRef v11 = *a5;
      }

      CFTypeID v12 = CFStringGetTypeID();
      if (!v11) {
        goto LABEL_17;
      }
    }

    if (CFGetTypeID(v11) == v12)
    {
      *a5 = v11;
      CFRetain(v11);
      return CFRetain(theDict);
    }

uint64_t SCUserPreferencesSetName(CFTypeRef cf, const void *a2)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_8;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }

  uint64_t v4 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v4)
  {
    if (!a2) {
      return processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setNameCallout,  *((void *)cf + 3),  (uint64_t)a2,  0LL);
    }
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(a2) == TypeID) {
      return processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setNameCallout,  *((void *)cf + 3),  (uint64_t)a2,  0LL);
    }
  }

__CFDictionary *setNameCallout(int a1, CFDictionaryRef theDict, const void *a3, const void *a4)
{
  if (!theDict) {
    return 0LL;
  }
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict);
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (a4) {
      CFDictionarySetValue(MutableCopy, @"UserDefinedName", a4);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
    }
    CFTypeRef v11 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"PPP");
    CFTypeID v12 = CFDictionaryGetTypeID();
    if (v11)
    {
      if (CFGetTypeID(v11) == v12)
      {
        CFIndex v13 = CFDictionaryCreateMutableCopy(0LL, 0LL, v11);
        int v14 = v13;
        if (a4) {
          CFDictionarySetValue(v13, @"UserDefinedName", a4);
        }
        else {
          CFDictionaryRemoveValue(v13, @"UserDefinedName");
        }
        CFDictionarySetValue(MutableCopy, @"PPP", v14);
        CFRelease(v14);
      }
    }
  }

  return MutableCopy;
}

CFTypeRef SCUserPreferencesCopyInterfaceConfiguration(const void *a1, const void *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)a2);
      if (DefaultConfigurationType) {
        return SCUserPreferencesCopyInterfaceTypeConfiguration(a1, (uint64_t)DefaultConfigurationType);
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

CFTypeRef SCUserPreferencesCopyInterfaceTypeConfiguration(CFTypeRef cf, uint64_t a2)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cfa[0] = 0LL;
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }

  uint64_t v4 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_8;
  }
  int v5 = processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyInterfaceConfigurationCallout,  *((void *)cf + 3),  a2,  (uint64_t)cfa);
  CFTypeRef result = cfa[0];
  if (!v5 && cfa[0])
  {
    CFRelease(cfa[0]);
    return 0LL;
  }

  return result;
}

CFTypeRef copyInterfaceConfigurationCallout( int a1, CFDictionaryRef theDict, const void *a3, const void *a4, CFTypeRef *a5)
{
  if (!theDict) {
    return 0LL;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (*a5)
    {
      CFRelease(*a5);
      *a5 = 0LL;
    }

    CFTypeRef v11 = CFDictionaryGetValue(theDict, a4);
    *a5 = v11;
    CFTypeID v12 = CFDictionaryGetTypeID();
    if (v11 && CFGetTypeID(v11) == v12)
    {
      *a5 = v11;
      CFRetain(v11);
    }

    else
    {
      *a5 = 0LL;
    }
  }

  return CFRetain(theDict);
}

uint64_t SCUserPreferencesSetInterfaceConfiguration(const void *a1, const void *a2, uint64_t a3)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)a2);
      if (DefaultConfigurationType) {
        return SCUserPreferencesSetInterfaceTypeConfiguration(a1, (uint64_t)DefaultConfigurationType, a3);
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

uint64_t SCUserPreferencesSetInterfaceTypeConfiguration(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v6 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v6) {
    return processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setInterfaceConfigurationCallout,  *((void *)cf + 3),  a2,  a3);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

__CFDictionary *setInterfaceConfigurationCallout( int a1, CFDictionaryRef theDict, const void *a3, const void *a4, const void *a5)
{
  if (!theDict) {
    return 0LL;
  }
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict);
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (a5)
    {
      CFDictionarySetValue(MutableCopy, a4, a5);
      if (CFEqual(a4, @"PPP"))
      {
        CFTypeID v12 = CFDictionaryGetValue((CFDictionaryRef)a5, @"UserDefinedName");
        if (v12)
        {
          CFDictionarySetValue(MutableCopy, @"UserDefinedName", v12);
        }

        else
        {
          int v14 = CFDictionaryGetValue(MutableCopy, @"UserDefinedName");
          if (v14)
          {
            CFTypeID v15 = v14;
            BOOL v16 = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)a5);
            CFDictionarySetValue(v16, @"UserDefinedName", v15);
            CFDictionarySetValue(MutableCopy, a4, v16);
            CFRelease(v16);
          }
        }
      }
    }

    else
    {
      CFDictionaryRemoveValue(MutableCopy, a4);
    }
  }

  return MutableCopy;
}

CFTypeRef SCUserPreferencesCopyExtendedInterfaceConfiguration(CFTypeRef cf, const void *a2, const void *a3)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cfa[0] = 0LL;
  if (__SCUserPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (cf) {
      goto LABEL_3;
    }
LABEL_11:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v6 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_11;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a2
    || CFGetTypeID(a2) != TypeID
    || !__SCNetworkInterfaceIsValidExtendedConfigurationType((const __SCNetworkInterface *)a2, a3, 0))
  {
    goto LABEL_11;
  }

  int v8 = processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyInterfaceConfigurationCallout,  *((void *)cf + 3),  (uint64_t)a3,  (uint64_t)cfa);
  CFTypeRef result = cfa[0];
  if (!v8 && cfa[0])
  {
    CFRelease(cfa[0]);
    return 0LL;
  }

  return result;
}

uint64_t SCUserPreferencesSetExtendedInterfaceConfiguration( CFTypeRef cf, const void *a2, const void *a3, uint64_t a4)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_9;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_9;
    }
  }

  uint64_t v8 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v8)
  {
    CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
    if (a2)
    {
      if (CFGetTypeID(a2) == TypeID
        && __SCNetworkInterfaceIsValidExtendedConfigurationType((const __SCNetworkInterface *)a2, a3, 0))
      {
        return processPreferences( *((const __CFString **)cf + 2),  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setInterfaceConfigurationCallout,  *((void *)cf + 3),  (uint64_t)a3,  a4);
      }
    }
  }

CFTypeRef SCNetworkConnectionCopyAllUserPreferences(const __SCNetworkConnection *a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cf[0] = 0LL;
  uint32_t v1 = SCNetworkConnectionCopyServiceID(a1);
  if (processPreferences( v1,  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyAllCallout,  0LL,  0LL,  (uint64_t)cf)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = cf[0] == 0LL;
  }
  if (!v2)
  {
    CFRelease(cf[0]);
    cf[0] = 0LL;
  }

  CFRelease(v1);
  return cf[0];
}

CFTypeRef copyAllCallout( const __CFString *a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, __CFArray **a5)
{
  if (!theDict) {
    return 0LL;
  }
  CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      uint64_t Private = __SCUserPreferencesCreatePrivate(a1, Value);
      if (Private)
      {
        CFTypeRef v11 = (const void *)Private;
        CFMutableDictionaryRef Mutable = *a5;
        if (!*a5)
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
          *a5 = Mutable;
        }

        CFArrayAppendValue(Mutable, v11);
        CFRelease(v11);
      }
    }
  }

  return CFRetain(theDict);
}

CFTypeRef SCNetworkConnectionCopyCurrentUserPreferences(const __SCNetworkConnection *a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cf[0] = 0LL;
  uint32_t v1 = SCNetworkConnectionCopyServiceID(a1);
  if (processPreferences( v1,  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyCurrentCallout,  0LL,  0LL,  (uint64_t)cf)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = cf[0] == 0LL;
  }
  if (!v2)
  {
    CFRelease(cf[0]);
    cf[0] = 0LL;
  }

  CFRelease(v1);
  return cf[0];
}

CFTypeRef copyCurrentCallout( const __CFString *a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (!theDict) {
    return 0LL;
  }
  CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFIndex v10 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"ConnectByDefault");
      CFTypeID v11 = CFBooleanGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == v11)
        {
          if (CFBooleanGetValue(v10)) {
            *a5 = __SCUserPreferencesCreatePrivate(a1, Value);
          }
        }
      }
    }
  }

  return CFRetain(theDict);
}

uint64_t SCNetworkConnectionCreateUserPreferences(const __SCNetworkConnection *a1)
{
  uint32_t v1 = SCNetworkConnectionCopyServiceID(a1);
  BOOL v2 = CFUUIDCreate(0LL);
  int v3 = CFUUIDCreateString(0LL, v2);
  CFRelease(v2);
  uint64_t Private = __SCUserPreferencesCreatePrivate(v1, v3);
  if (Private) {
    processPreferences( v1,  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))createCallout,  (uint64_t)v3,  0LL,  0LL);
  }
  CFRelease(v3);
  CFRelease(v1);
  return Private;
}

uint64_t __SCUserPreferencesCreatePrivate(const __CFString *a1, const __CFString *a2)
{
  if (__SCUserPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0LL, a1);
    *(void *)(Instance + 24) = CFStringCreateCopy(0LL, a2);
  }

  return Instance;
}

__CFDictionary *createCallout(int a1, CFTypeRef cf, const void *a3)
{
  if (cf) {
    return (__CFDictionary *)CFRetain(cf);
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  CFDictionarySetValue(Mutable, @"UniqueIdentifier", a3);
  return Mutable;
}

CFDictionaryRef SCUserPreferencesCopyStartOptions(void *cf)
{
  theDict[1] = *(CFDictionaryRef *)MEMORY[0x1895F89C0];
  theDict[0] = 0LL;
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_49;
    }
  }

  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_49;
    }
  }

  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    processPreferences( (const __CFString *)cf[2],  (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyOptionsCallout,  cf[3],  0LL,  (uint64_t)theDict);
    if (!theDict[0]) {
      return theDict[0];
    }
    CFDictionaryRef Value = CFDictionaryGetValue(theDict[0], @"PPP");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (!Value
      || CFGetTypeID(Value) != TypeID
      || ((int v5 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, @"AuthPasswordEncryption")) != 0LL
        ? (uint64_t v6 = v5)
        : (uint64_t v6 = @"Keychain"),
          (CFTypeID v7 = CFStringGetTypeID(), !v6) || CFGetTypeID(v6) != v7 || !CFEqual(v6, @"Keychain")))
    {
LABEL_22:
      CFIndex v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict[0], @"IPSec");
      CFTypeID v14 = CFDictionaryGetTypeID();
      if (v13)
      {
        if (CFGetTypeID(v13) == v14)
        {
          CFTypeID v15 = CFDictionaryGetValue(v13, @"AuthenticationMethod");
          CFTypeID v16 = CFStringGetTypeID();
          if (v15)
          {
            if (CFGetTypeID(v15) == v16 && CFEqual(v15, @"SharedSecret"))
            {
              CFIndex v17 = (const __CFString *)CFDictionaryGetValue(v13, @"SharedSecretEncryption");
              CFTypeID v18 = v17 ? (__CFString *)v17 : @"Keychain";
              CFTypeID v19 = CFStringGetTypeID();
              if (v18)
              {
                if (CFGetTypeID(v18) == v19 && CFEqual(v18, @"Keychain"))
                {
                  SCNetworkConnectionStatus v20 = (__CFString *)CFDictionaryGetValue(v13, @"SharedSecret");
                  CFTypeID v21 = CFStringGetTypeID();
                  if (!v20)
                  {
                    CFDataGetTypeID();
                    goto LABEL_39;
                  }

                  if (CFGetTypeID(v20) == v21)
                  {
                    CFRetain(v20);
LABEL_40:
                    uint64_t v24 = _SCSecKeychainPasswordItemCopy();
                    if (v24)
                    {
                      uint64_t v25 = (const __CFData *)v24;
                      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v13);
                      BytePtr = CFDataGetBytePtr(v25);
                      CFIndex Length = CFDataGetLength(v25);
                      CFStringRef v29 = CFStringCreateWithBytes(0LL, BytePtr, Length, 0x8000100u, 0);
                      CFRelease(v25);
                      CFDictionarySetValue(MutableCopy, @"SharedSecret", v29);
                      CFRelease(v29);
                      CFDictionaryRemoveValue(MutableCopy, @"SharedSecretEncryption");
                      CFTypeID v30 = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict[0]);
                      CFDictionarySetValue(v30, @"IPSec", MutableCopy);
                      CFRelease(MutableCopy);
                      CFRelease(theDict[0]);
                      theDict[0] = v30;
                    }

                    else
                    {
                      uint64_t v31 = _SCSecKeychainCopySystemKeychain();
                      if (v31)
                      {
                        CFTypeID v32 = (const void *)v31;
                        if (_SCSecKeychainPasswordItemExists())
                        {
                          CFTypeID v33 = CFDictionaryCreateMutableCopy(0LL, 0LL, v13);
                          CFDictionarySetValue(v33, @"SharedSecret", v20);
                          CFDictionarySetValue(v33, @"SharedSecretEncryption", @"Keychain");
                          CFNumberRef v34 = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict[0]);
                          CFDictionarySetValue(v34, @"IPSec", v33);
                          CFRelease(v33);
                          CFRelease(theDict[0]);
                          theDict[0] = v34;
                        }

                        CFRelease(v32);
                      }
                    }

                    CFRelease(v20);
                    return theDict[0];
                  }

                  CFTypeID v22 = CFDataGetTypeID();
                  if (CFGetTypeID(v20) != v22 || (CFDataGetLength((CFDataRef)v20) & 1) != 0)
                  {
LABEL_39:
                    UniqueID = (const __CFString *)SCUserPreferencesGetUniqueID(cf);
                    SCNetworkConnectionStatus v20 = CFStringCreateMutableCopy(0LL, 0LL, UniqueID);
                    CFStringAppend(v20, @".SS");
                    goto LABEL_40;
                  }
                }
              }
            }
          }
        }
      }

      return theDict[0];
    }

    uint64_t v8 = CFDictionaryGetValue((CFDictionaryRef)Value, @"AuthPassword");
    CFTypeID v9 = CFStringGetTypeID();
    if (v8)
    {
      if (CFGetTypeID(v8) == v9) {
        goto LABEL_20;
      }
      CFTypeID v10 = CFDataGetTypeID();
      if (CFGetTypeID(v8) == v10 && (CFDataGetLength((CFDataRef)v8) & 1) == 0) {
        goto LABEL_22;
      }
    }

    else
    {
      CFDataGetTypeID();
    }

    uint64_t v8 = (const void *)SCUserPreferencesGetUniqueID(cf);
LABEL_20:
    if (_SCSecKeychainPasswordItemExists())
    {
      CFTypeID v11 = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)Value);
      CFDictionarySetValue(v11, @"AuthPassword", v8);
      CFDictionarySetValue(v11, @"AuthPasswordEncryption", @"Keychain");
      CFTypeID v12 = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict[0]);
      CFDictionarySetValue(v12, @"PPP", v11);
      CFRelease(v11);
      CFRelease(theDict[0]);
      theDict[0] = v12;
    }

    goto LABEL_22;
  }

LABEL_49:
  _SCErrorSet(1002);
  return 0LL;
}

    ++v35;
  }

  while (v34 != v35);
  if (Mutable)
  {
    CFStringRef Copy = CFArrayCreateCopy(0LL, Mutable);
    CFTypeID v45 = Mutable;
    goto LABEL_58;
  }

          if (v16 == ++v33) {
            goto LABEL_50;
          }
        }

        CFTypeID v36 = (uint64_t)v35;
        if (BSDName)
        {
          int v37 = SCNetworkInterfaceGetBSDName(v35);
          CFIndex v38 = CFStringGetTypeID();
          if (v37 && CFGetTypeID(v37) == v38 && CFEqual(v37, value[0]))
          {
            CFIndex v65 = __log_SCNetworkConfiguration();
            CFIndex v66 = _SC_syslog_os_log_mapping(5);
            uint64_t v67 = __SC_log_enabled(5, v65, (os_log_type_t)v66);
            CFIndex v68 = v107;
            if (v67)
            {
              uint64_t v69 = _os_log_pack_size();
              int v70 = (char *)&v94 - ((MEMORY[0x1895F8858](v69) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v71 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v71 = v108;
              *(void *)(v71 + 4) = v37;
              uint64_t v72 = (uint64_t)v65;
              CFTypeID v73 = v66;
              CFIndex v74 = v70;
LABEL_73:
              __SC_log_send(5, v72, v73, v74);
              CFTypeID v11 = v114;
              goto LABEL_74;
            }

            goto LABEL_74;
          }

          goto LABEL_49;
        }

        CFTypeRef v46 = (const void *)__SCNetworkInterfaceGetEntityType((uint64_t)v35);
        CFTypeID v47 = CFStringGetTypeID();
        if (!v46 || CFGetTypeID(v46) != v47 || !CFEqual(v46, v109) && !CFEqual(v46, v103))
        {
          CFTypeID v50 = __log_SCNetworkConfiguration();
          vm_size_t v51 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v50, (os_log_type_t)v51)) {
            goto LABEL_47;
          }
          goto LABEL_49;
        }

        __int128 v48 = (const void *)__SCNetworkInterfaceGetEntitySubType(v36);
        uint64_t v49 = CFStringGetTypeID();
        if (!v48 || CFGetTypeID(v48) != v49) {
          break;
        }
        if (!CFEqual(v46, v111) || !CFEqual(v48, v105)) {
          goto LABEL_49;
        }
        CFIndex v75 = __log_SCNetworkConfiguration();
        CFIndex v76 = _SC_syslog_os_log_mapping(5);
        v77 = __SC_log_enabled(5, v75, (os_log_type_t)v76);
        CFIndex v68 = v107;
        if (v77)
        {
          CFTypeID v78 = _os_log_pack_size();
          uint64_t v79 = (char *)&v94 - ((MEMORY[0x1895F8858](v78) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          CFTypeID v80 = _os_log_pack_fill();
          *(_DWORD *)CFTypeID v80 = v108;
          *(void *)(v80 + 4) = 0LL;
          uint64_t v72 = (uint64_t)v75;
          CFTypeID v73 = v76;
          CFIndex v74 = v79;
          goto LABEL_73;
        }

CFTypeRef copyOptionsCallout(int a1, CFDictionaryRef theDict, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  if (!theDict) {
    return 0LL;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (*a5) {
      CFRelease(*a5);
    }
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, theDict);
    *a5 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, @"UniqueIdentifier");
    CFDictionaryRemoveValue((CFMutableDictionaryRef)*a5, @"ConnectByDefault");
  }

  return CFRetain(theDict);
}

uint64_t SCNetworkConnectionStartWithUserPreferences(const __SCNetworkConnection *a1, void *cf, Boolean a3)
{
  started = SCUserPreferencesCopyStartOptions(cf);
  uint64_t v6 = SCNetworkConnectionStart(a1, started, a3);
  if (started) {
    CFRelease(started);
  }
  return v6;
}

uint64_t SCUserPreferencesCheckInterfacePassword(void *a1, const void *a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_12;
    case 2:
      CFTypeID v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFTypeID v10 = copyUserSharedSecretID(v9, a1);
      CFTypeID v11 = @"SharedSecret";
      CFTypeID v12 = @"SharedSecretEncryption";
      CFIndex v13 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
      goto LABEL_6;
    case 4:
      CFTypeID v9 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFTypeID v10 = copyUserXAuthID(v9, a1);
      CFTypeID v11 = @"XAuthPassword";
      CFTypeID v12 = @"XAuthPasswordEncryption";
      CFIndex v13 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_6:
      uint64_t password = __extract_password(0LL, v9, v11, v12, *v13, (uint64_t)v10, 0LL);
      if (v9) {
        CFRelease(v9);
      }
      CFTypeID v15 = v10;
      goto LABEL_14;
    case 5:
      uint64_t v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_12:
      uint64_t password = __extract_password( 0LL,  v6,  @"AuthPassword",  @"AuthPasswordEncryption",  *v8,  (uint64_t)UserPasswordID,  0LL);
      if (!v6) {
        return password;
      }
      CFTypeID v15 = v6;
LABEL_14:
      CFRelease(v15);
      break;
    default:
      _SCErrorSet(1002);
      return 0LL;
  }

  return password;
}

uint64_t checkUserPreferencesPassword(CFTypeRef cf, const void *a2, int a3)
{
  if (__SCUserPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (cf) {
      goto LABEL_3;
    }
LABEL_16:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v6 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_16;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_16;
  }
  switch(a3)
  {
    case 1:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      CFTypeID v9 = (CFTypeRef *)&kSCNetworkInterfaceTypePPP;
      goto LABEL_13;
    case 2:
      CFStringRef v10 = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      if (!CFEqual(v10, @"PPP")) {
        goto LABEL_16;
      }
      Interface = SCNetworkInterfaceGetInterface((SCNetworkInterfaceRef)a2);
      if (!Interface) {
        goto LABEL_16;
      }
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
      CFTypeID v9 = (CFTypeRef *)&kSCNetworkInterfaceTypeL2TP;
      goto LABEL_13;
    case 3:
      goto LABEL_16;
    case 4:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      CFTypeID v9 = (CFTypeRef *)&kSCNetworkInterfaceTypeIPSec;
      goto LABEL_13;
    case 5:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      CFTypeID v9 = (CFTypeRef *)kSCNetworkInterfaceTypeVPN;
LABEL_13:
      if (CFEqual(InterfaceType, *v9)) {
        goto LABEL_14;
      }
      goto LABEL_16;
    default:
LABEL_14:
      uint64_t result = 1LL;
      break;
  }

  return result;
}

const void *getUserPasswordID(const __CFDictionary *a1, void *cf)
{
  if (!a1) {
    return (const void *)SCUserPreferencesGetUniqueID(cf);
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"AuthPasswordEncryption");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value) {
    return (const void *)SCUserPreferencesGetUniqueID(cf);
  }
  if (CFGetTypeID(Value) != TypeID) {
    return (const void *)SCUserPreferencesGetUniqueID(cf);
  }
  if (!CFEqual(Value, @"Keychain")) {
    return (const void *)SCUserPreferencesGetUniqueID(cf);
  }
  uint64_t result = CFDictionaryGetValue(a1, @"AuthPassword");
  if (!result) {
    return (const void *)SCUserPreferencesGetUniqueID(cf);
  }
  return result;
}

__CFString *copyUserSharedSecretID(const __CFDictionary *a1, void *cf)
{
  if (a1
    && (Value = CFDictionaryGetValue(a1, @"SharedSecretEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(a1, @"SharedSecret")) != 0LL)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }

  else
  {
    UserPasswordID = (const __CFString *)getUserPasswordID(a1, cf);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, UserPasswordID);
    CFStringAppend(MutableCopy, @".SS");
  }

  return MutableCopy;
}

__CFString *copyUserXAuthID(const __CFDictionary *a1, void *cf)
{
  if (a1
    && (Value = CFDictionaryGetValue(a1, @"XAuthPasswordEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(a1, @"XAuthPassword")) != 0LL)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }

  else
  {
    UserPasswordID = (const __CFString *)getUserPasswordID(a1, cf);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, UserPasswordID);
    CFStringAppend(MutableCopy, @".XAUTH");
  }

  return MutableCopy;
}

uint64_t SCUserPreferencesCopyInterfacePassword(void *a1, const void *a2, int a3)
{
  v16[1] = *MEMORY[0x1895F89C0];
  v16[0] = 0LL;
  switch(a3)
  {
    case 1:
      uint64_t v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_12;
    case 2:
      CFTypeID v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFStringRef v10 = copyUserSharedSecretID(v9, a1);
      CFTypeID v11 = @"SharedSecret";
      CFTypeID v12 = @"SharedSecretEncryption";
      CFIndex v13 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
      goto LABEL_6;
    case 4:
      CFTypeID v9 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef v10 = copyUserXAuthID(v9, a1);
      CFTypeID v11 = @"XAuthPassword";
      CFTypeID v12 = @"XAuthPasswordEncryption";
      CFIndex v13 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_6:
      __extract_password(0LL, v9, v11, v12, *v13, (uint64_t)v10, v16);
      if (v9) {
        CFRelease(v9);
      }
      CFTypeID v14 = v10;
      goto LABEL_14;
    case 5:
      uint64_t v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_12:
      __extract_password( 0LL,  v6,  @"AuthPassword",  @"AuthPasswordEncryption",  *v8,  (uint64_t)UserPasswordID,  v16);
      if (!v6) {
        goto LABEL_15;
      }
      CFTypeID v14 = v6;
LABEL_14:
      CFRelease(v14);
LABEL_15:
      uint64_t result = v16[0];
      break;
    default:
      _SCErrorSet(1002);
      return 0LL;
  }

  return result;
}

uint64_t SCUserPreferencesRemoveInterfacePassword(void *a1, const void *a2, int a3)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  switch(a3)
  {
    case 1:
      cf[0] = 0LL;
      uint64_t v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_16;
    case 2:
      cf[0] = 0LL;
      CFTypeID v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFStringRef v10 = copyUserSharedSecretID(v9, a1);
      if (!__remove_password( 0LL,  v9,  @"SharedSecret",  @"SharedSecretEncryption",  @"Keychain",  (uint64_t)v10,  (__CFDictionary **)cf)) {
        goto LABEL_21;
      }
      uint64_t v11 = SCUserPreferencesSetExtendedInterfaceConfiguration(a1, a2, @"IPSec", (uint64_t)cf[0]);
      goto LABEL_8;
    case 4:
      cf[0] = 0LL;
      CFTypeID v9 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef v10 = copyUserXAuthID(v9, a1);
      if (__remove_password( 0LL,  v9,  @"XAuthPassword",  @"XAuthPasswordEncryption",  @"Keychain",  (uint64_t)v10,  (__CFDictionary **)cf))
      {
        uint64_t v11 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)cf[0]);
LABEL_8:
        uint64_t v12 = v11;
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v9) {
          goto LABEL_11;
        }
      }

      else
      {
LABEL_21:
        uint64_t v12 = 0LL;
        if (v9) {
LABEL_11:
        }
          CFRelease(v9);
      }

      CFIndex v13 = v10;
LABEL_25:
      CFRelease(v13);
      return v12;
    case 5:
      cf[0] = 0LL;
      uint64_t v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_16:
      if (!__remove_password( 0LL,  v6,  @"AuthPassword",  @"AuthPasswordEncryption",  *v8,  (uint64_t)UserPasswordID,  (__CFDictionary **)cf))
      {
        uint64_t v12 = 0LL;
        if (!v6) {
          return v12;
        }
        goto LABEL_24;
      }

      uint64_t v12 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v6)
      {
LABEL_24:
        CFIndex v13 = v6;
        goto LABEL_25;
      }

      return v12;
    default:
      _SCErrorSet(1002);
      return 0LL;
  }

uint64_t SCUserPreferencesSetInterfacePassword(void *a1, const void *a2, int a3)
{
  uint64_t v6 = (__CFBundle *)_SC_CFBundleGet();
  switch(a3)
  {
    case 1:
      CFTypeID v7 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v7, a1);
      if (v7) {
        CFDictionaryGetValue(v7, @"AuthName");
      }
      CFTypeID v16 = (__CFString *)SCUserPreferencesCopyName(a1);
      if (v6) {
        uint64_t v6 = (__CFBundle *)CFBundleCopyLocalizedString( v6,  @"KEYCHAIN_KIND_PPP_PASSWORD",  @"PPP Password",  0LL);
      }
      if (v7) {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v7);
      }
      else {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }
      uint64_t v23 = MutableCopy;
      CFDictionarySetValue(MutableCopy, @"AuthPassword", UserPasswordID);
      uint64_t v24 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_58;
    case 2:
      CFTypeID v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFStringRef v10 = copyUserSharedSecretID(v9, a1);
      CFTypeRef v11 = SCUserPreferencesCopyName(a1);
      if (v6) {
        uint64_t v6 = (__CFBundle *)CFBundleCopyLocalizedString( v6,  @"KEYCHAIN_KIND_IPSEC_SHARED_SECRET",  @"IPSec Shared Secret",  0LL);
      }
      if (_SCSecKeychainPasswordItemSet())
      {
        if (v9) {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(0LL, 0LL, v9);
        }
        else {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        }
        CFTypeID v21 = Mutable;
        CFDictionarySetValue(Mutable, @"SharedSecret", v10);
        CFDictionarySetValue(v21, @"SharedSecretEncryption", @"Keychain");
        uint64_t v13 = SCUserPreferencesSetExtendedInterfaceConfiguration(a1, a2, @"IPSec", (uint64_t)v21);
        CFRelease(v21);
      }

      else
      {
        uint64_t v13 = 0LL;
      }

      if (v9) {
        CFRelease(v9);
      }
      if (v6) {
        CFRelease(v6);
      }
      if (!v11) {
        goto LABEL_54;
      }
      CFTypeID v22 = v11;
      goto LABEL_53;
    case 4:
      CFTypeID v14 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef v10 = copyUserXAuthID(v14, a1);
      if (v14) {
        CFDictionaryGetValue(v14, @"XAuthName");
      }
      CFTypeRef v18 = SCUserPreferencesCopyName(a1);
      if (v6) {
        uint64_t v6 = (__CFBundle *)CFBundleCopyLocalizedString( v6,  @"KEYCHAIN_KIND_IPSEC_XAUTH_PASSWORD",  @"IPSec XAuth Password",  0LL);
      }
      if (_SCSecKeychainPasswordItemSet())
      {
        if (v14) {
          CFTypeID v19 = CFDictionaryCreateMutableCopy(0LL, 0LL, v14);
        }
        else {
          CFTypeID v19 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        }
        uint64_t v25 = v19;
        CFDictionarySetValue(v19, @"XAuthPassword", v10);
        CFDictionarySetValue(v25, @"XAuthPasswordEncryption", @"Keychain");
        uint64_t v13 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)v25);
        CFRelease(v25);
      }

      else
      {
        uint64_t v13 = 0LL;
      }

      if (v14) {
        CFRelease(v14);
      }
      if (v6) {
        CFRelease(v6);
      }
      if (!v18) {
        goto LABEL_54;
      }
      CFTypeID v22 = v18;
LABEL_53:
      CFRelease(v22);
LABEL_54:
      uint64_t v26 = v10;
      goto LABEL_64;
    case 5:
      CFTypeID v7 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFTypeID v15 = getUserPasswordID(v7, a1);
      if (v7) {
        CFDictionaryGetValue(v7, @"AuthName");
      }
      CFTypeID v16 = (__CFString *)SCUserPreferencesCopyName(a1);
      if (v6) {
        uint64_t v6 = (__CFBundle *)CFBundleCopyLocalizedString( v6,  @"KEYCHAIN_KIND_VPN_PASSWORD",  @"VPN Password",  0LL);
      }
      if (!_SCSecKeychainPasswordItemSet())
      {
LABEL_32:
        uint64_t v13 = 0LL;
        if (!v7) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }

      if (v7) {
        SCNetworkConnectionStatus v20 = CFDictionaryCreateMutableCopy(0LL, 0LL, v7);
      }
      else {
        SCNetworkConnectionStatus v20 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }
      uint64_t v23 = v20;
      if (!v20) {
        SCUserPreferencesSetInterfacePassword_cold_1();
      }
      CFDictionarySetValue(v20, @"AuthPassword", v15);
      uint64_t v24 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_58:
      CFDictionarySetValue(v23, @"AuthPasswordEncryption", *v24);
      uint64_t v13 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)v23);
      CFRelease(v23);
      if (v7) {
LABEL_59:
      }
        CFRelease(v7);
LABEL_60:
      if (v6) {
        CFRelease(v6);
      }
      if (v16)
      {
        uint64_t v26 = v16;
LABEL_64:
        CFRelease(v26);
      }

      break;
    default:
      _SCErrorSet(1002);
      return 0LL;
  }

  return v13;
}

void __SCUserPreferencesDeallocate(uint64_t a1)
{
}

BOOL __SCUserPreferencesEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2 || CFEqual(*(CFTypeRef *)(a1 + 24), *(CFTypeRef *)(a2 + 24)) != 0;
}

CFHashCode __SCUserPreferencesHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 24));
}

__CFString *__SCUserPreferencesCopyDescription(void *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCUserPreferences %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"service = %@", a1[2]);
  CFStringAppendFormat(Mutable, 0LL, @", id = %@", a1[3]);
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

void logCFPreferencesChange(const __CFString *a1, const void *a2)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  CFPropertyListRef v4 = CFPreferencesCopyAppValue(@"LOG_SC_CHANGES", @"com.apple.networkConnect");
  if (!v4) {
    return;
  }
  int v5 = v4;
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (CFGetTypeID(v5) != TypeID)
  {
    CFRelease(v5);
    return;
  }

  int Value = CFBooleanGetValue((CFBooleanRef)v5);
  CFRelease(v5);
  if (!Value) {
    return;
  }
  gettimeofday(&v67, 0LL);
  localtime_r(&v67.tv_sec, &v68);
  uint64_t v8 = CFStringCreateWithFormat( 0LL,  0LL,  @"/var/tmp/com.apple.networkConnect-%@-%4d%02d%02d.%02d%02d%02d.%03d",  a1,  (v68.tm_year + 1900),  (v68.tm_mon + 1),  v68.tm_mday,  v68.tm_hour,  v68.tm_min,  v68.tm_sec,  (v67.tv_usec / 1000));
  _SC_cfstring_to_cstring(v8, v70, 256LL, 0x8000100u);
  CFRelease(v8);
  CFTypeID v9 = __log_SCNetworkConfiguration();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
  {
    uint64_t v11 = _os_log_pack_size();
    uint64_t v12 = (char *)&v67 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)(v13 + 4) = v70;
    __SC_log_send(5, (uint64_t)v9, v10, v12);
  }

  if (mkdir((const char *)v70, 0x1EDu) == -1)
  {
    CFIndex v38 = __log_SCNetworkConfiguration();
    uint64_t v39 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v38, (os_log_type_t)v39)) {
      return;
    }
    goto LABEL_20;
  }

  CFTypeID v14 = _SC_copyBacktrace();
  if (v14)
  {
    CFTypeID v15 = v14;
    __strlcpy_chk();
    __strlcat_chk();
    int v16 = open(v69, 3585, 420LL);
    if (v16 == -1)
    {
      CFTypeID v45 = __log_SCNetworkConfiguration();
      uint64_t v46 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v45, (os_log_type_t)v46))
      {
        uint64_t v47 = _os_log_pack_size();
        __int128 v48 = (char *)&v67 - ((MEMORY[0x1895F8858](v47) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v49 = _os_log_pack_fill();
        CFTypeID v50 = __error();
        vm_size_t v51 = SCErrorString(*v50);
        *(_DWORD *)uint64_t v49 = 136315138;
        *(void *)(v49 + 4) = v51;
        __SC_log_send(5, (uint64_t)v45, v46, v48);
      }

      int v37 = (const __CFData *)v15;
      goto LABEL_30;
    }

    CFIndex v17 = fdopen(v16, "w");
    SCPrint(1, v17, (uint64_t)@"%@", v18, v19, v20, v21, v22, (uint64_t)v15);
    fclose(v17);
    CFRelease(v15);
  }

  CFPropertyListRef v23 = CFPreferencesCopyAppValue(a1, @"com.apple.networkConnect");
  if (v23)
  {
    uint64_t v24 = v23;
    __strlcpy_chk();
    __strlcat_chk();
    int v25 = open(v69, 3585, 420LL);
    if (v25 == -1)
    {
      int v52 = __log_SCNetworkConfiguration();
      uint64_t v53 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v52, (os_log_type_t)v53))
      {
        uint64_t v54 = _os_log_pack_size();
        CFIndex v55 = (char *)&v67 - ((MEMORY[0x1895F8858](v54) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v56 = _os_log_pack_fill();
        CFIndex v57 = __error();
        uint64_t v58 = SCErrorString(*v57);
        *(_DWORD *)uint64_t v56 = 136315138;
        *(void *)(v56 + 4) = v58;
        __SC_log_send(5, (uint64_t)v52, v53, v55);
      }
    }

    else
    {
      int v26 = v25;
      Data = CFPropertyListCreateData(0LL, v24, kCFPropertyListXMLFormat_v1_0, 0LL, 0LL);
      if (Data)
      {
        CFArrayRef v28 = Data;
        BytePtr = CFDataGetBytePtr(Data);
        size_t Length = CFDataGetLength(v28);
        write(v26, BytePtr, Length);
        close(v26);
        CFRelease(v28);
        CFRelease(v24);
        goto LABEL_14;
      }

      CFStringRef v59 = __log_SCNetworkConfiguration();
      uint64_t v60 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v59, (os_log_type_t)v60))
      {
        uint64_t v61 = _os_log_pack_size();
        CFTypeID v62 = (char *)&v67 - ((MEMORY[0x1895F8858](v61) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v59, v60, v62);
      }

      close(v26);
    }

    int v37 = (const __CFData *)v24;
    goto LABEL_30;
  }

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress( CFAllocatorRef allocator, const sockaddr *address)
{
  v14[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = is_valid_address(&address->sa_len);
  if (!v2)
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  int v3 = v2;
  uint64_t Private = __SCNetworkReachabilityCreatePrivate();
  int v5 = (const __SCNetworkReachability *)Private;
  if (Private)
  {
    *((_DWORD *)Private + 20) = 0;
    int v6 = v3[1];
    if (v6 == 30)
    {
      if (!*((_DWORD *)v3 + 2) && !*((_DWORD *)v3 + 3) && !*((_DWORD *)v3 + 4))
      {
        CFTypeID v7 = v3 + 20;
LABEL_6:
        if (!*v7) {
          goto LABEL_13;
        }
      }
    }

    else if (v6 == 2)
    {
      CFTypeID v7 = v3 + 4;
      goto LABEL_6;
    }

    *((void *)Private + 13) = nw_endpoint_create_address((const sockaddr *)v3);
LABEL_13:
    uint64_t v8 = (os_log_s *)__log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      uint64_t v8 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v8;
    }

    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v11 = (char *)v14 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136315650;
      *(void *)(v12 + 4) = (char *)v5 + 193;
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = "create w/address";
      *(_WORD *)(v12 + 22) = 2112;
      *(void *)(v12 + 24) = v5;
      __SC_log_send(7, (uint64_t)v8, v9, v11);
    }
  }

  return v5;
}

unsigned __int8 *is_valid_address(unsigned __int8 *a1)
{
  uint32_t v1 = a1;
  v17[1] = *MEMORY[0x1895F89C0];
  if (!a1) {
    return v1;
  }
  unsigned int v2 = *a1;
  if (v2 > 0x80) {
    return 0LL;
  }
  int v3 = a1[1];
  if (v3 == 30)
  {
    if (v2 <= 0x1B)
    {
      if ((is_valid_address_warned & 1) == 0)
      {
        CFPropertyListRef v4 = (os_log_s *)__log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          CFPropertyListRef v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v4;
        }

        uint64_t v5 = _SC_syslog_os_log_mapping(4);
        if (!__SC_log_enabled(4, v4, (os_log_type_t)v5)) {
          goto LABEL_25;
        }
        uint64_t v11 = _os_log_pack_size();
        CFTypeID v7 = (char *)v17 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        int v12 = *v1;
        *(_DWORD *)uint64_t v8 = 67109376;
        *(_DWORD *)(v8 + 4) = v12;
        *(_WORD *)(v8 + 8) = 2048;
        uint64_t v10 = 28LL;
LABEL_17:
        *(void *)(v8 + 10) = v10;
LABEL_24:
        __SC_log_send(4, (uint64_t)v4, v5, v7);
LABEL_25:
        uint32_t v1 = 0LL;
        is_valid_address_warned = 1;
        return v1;
      }

      return 0LL;
    }

    return v1;
  }

  if (v3 != 2)
  {
    if ((is_valid_address_warned & 1) == 0)
    {
      CFPropertyListRef v4 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFPropertyListRef v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v4;
      }

      uint64_t v5 = _SC_syslog_os_log_mapping(4);
      if (!__SC_log_enabled(4, v4, (os_log_type_t)v5)) {
        goto LABEL_25;
      }
      uint64_t v13 = _os_log_pack_size();
      CFTypeID v7 = (char *)v17 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      CFTypeID v14 = (_DWORD *)_os_log_pack_fill();
      int v15 = v1[1];
      *CFTypeID v14 = 67109120;
      v14[1] = v15;
      goto LABEL_24;
    }

    return 0LL;
  }

  if (v2 <= 0xF)
  {
    if ((is_valid_address_warned & 1) == 0)
    {
      CFPropertyListRef v4 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFPropertyListRef v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v4;
      }

      uint64_t v5 = _SC_syslog_os_log_mapping(4);
      if (!__SC_log_enabled(4, v4, (os_log_type_t)v5)) {
        goto LABEL_25;
      }
      uint64_t v6 = _os_log_pack_size();
      CFTypeID v7 = (char *)v17 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      int v9 = *v1;
      *(_DWORD *)uint64_t v8 = 67109376;
      *(_DWORD *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 8) = 2048;
      uint64_t v10 = 16LL;
      goto LABEL_17;
    }

    return 0LL;
  }

  return v1;
}

char *__SCNetworkReachabilityCreatePrivate()
{
  if (__SCNetworkReachabilityInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint32_t v1 = (char *)Instance;
  if (Instance)
  {
    if (pthread_mutex_init((pthread_mutex_t *)(Instance + 16), &lock_attr)) {
      __SCNetworkReachabilityCreatePrivate_cold_1();
    }
    if (_sc_log >= 1) {
      snprintf(v1 + 193, 0x20uLL, "[%p] ", v1);
    }
  }

  return v1;
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddressPair( CFAllocatorRef allocator, const sockaddr *localAddress, const sockaddr *remoteAddress)
{
  v18[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = (sockaddr *)remoteAddress;
  if (!localAddress)
  {
    uint64_t v6 = 0LL;
    if (!remoteAddress) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  uint64_t v6 = is_valid_address(&localAddress->sa_len);
  if (!v6) {
    goto LABEL_2;
  }
  if (v5)
  {
LABEL_9:
    uint64_t v5 = (sockaddr *)is_valid_address(&v5->sa_len);
    if (v5) {
      goto LABEL_10;
    }
LABEL_2:
    _SCErrorSet(1002);
    return 0LL;
  }

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithName(CFAllocatorRef allocator, const char *nodename)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (nodename && *nodename)
  {
    if (_SC_string_to_sockaddr(nodename, 0, (in_addr *)&address, 0x1CuLL))
    {
      return SCNetworkReachabilityCreateWithAddress(allocator, &address);
    }

    else
    {
      uint64_t Private = __SCNetworkReachabilityCreatePrivate();
      CFPropertyListRef v4 = (const __SCNetworkReachability *)Private;
      if (Private)
      {
        *((_DWORD *)Private + 20) = 2;
        *((void *)Private + 11) = nw_endpoint_create_host(nodename, "0");
        CFTypeID v7 = (os_log_s *)__log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          CFTypeID v7 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v7;
        }

        uint64_t v8 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
        {
          uint64_t v9 = _os_log_pack_size();
          uint64_t v10 = (char *)&v12 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v11 = 136315650;
          *(void *)(v11 + 4) = (char *)v4 + 193;
          *(_WORD *)(v11 + 12) = 2080;
          *(void *)(v11 + 14) = "create w/name";
          *(_WORD *)(v11 + 22) = 2112;
          *(void *)(v11 + 24) = v4;
          __SC_log_send(7, (uint64_t)v7, v8, v10);
        }
      }
    }
  }

  else
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  return v4;
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithOptions(const __CFAllocator *a1, const void *a2)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2) {
    goto LABEL_52;
  }
  if (CFGetTypeID(a2) != TypeID) {
    goto LABEL_52;
  }
  int Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"nodename");
  if (Value)
  {
    CFTypeID v6 = CFStringGetTypeID();
    if (CFGetTypeID(Value) != v6 || !CFStringGetLength(Value)) {
      goto LABEL_52;
    }
  }

  CFTypeID v7 = CFDictionaryGetValue((CFDictionaryRef)a2, @"local-address");
  if (v7)
  {
    uint64_t v8 = v7;
    CFTypeID v9 = CFDataGetTypeID();
    BytePtr = (const sockaddr *)CFDataGetBytePtr((CFDataRef)v8);
  }

  else
  {
    BytePtr = 0LL;
  }

  uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)a2, @"ptr-address");
  if (v11)
  {
    uint64_t v12 = v11;
    CFTypeID v13 = CFDataGetTypeID();
    uint64_t v14 = (unsigned __int8 *)CFDataGetBytePtr((CFDataRef)v12);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)a2, @"remote-address");
  if (v15)
  {
    int v16 = v15;
    CFTypeID v17 = CFDataGetTypeID();
    uint64_t v18 = (const sockaddr *)CFDataGetBytePtr((CFDataRef)v16);
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  uint64_t v19 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"interface");
  if (v19)
  {
    CFTypeID v20 = CFStringGetTypeID();
    if (CFGetTypeID(v19) != v20 || !CFStringGetLength(v19)) {
      goto LABEL_52;
    }
  }

  uint64_t v21 = CFDictionaryGetValue((CFDictionaryRef)a2, @"ResolverBypass");
  if (v21)
  {
    CFTypeID v22 = CFBooleanGetTypeID();
    if (CFGetTypeID(v21) != v22) {
      goto LABEL_52;
    }
  }

  CFPropertyListRef v23 = CFDictionaryGetValue((CFDictionaryRef)a2, @"SourceAppAuditToken");
  if (v23)
  {
    CFTypeID v24 = CFDataGetTypeID();
    if (CFGetTypeID(v23) != v24 || CFDataGetLength((CFDataRef)v23) != 32) {
      goto LABEL_52;
    }
  }

  int v25 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SourceAppBundleIdentifier");
  if (v25)
  {
    CFTypeID v26 = CFStringGetTypeID();
    if (CFGetTypeID(v25) != v26 || !CFStringGetLength(v25)) {
      goto LABEL_52;
    }
  }

  if (!Value)
  {
    if (v14)
    {
      if ((unint64_t)BytePtr | (unint64_t)v18)
      {
LABEL_52:
        _SCErrorSet(1002);
        return 0LL;
      }

      CFStringRef v29 = (const __SCNetworkReachability *)__SCNetworkReachabilityCreateWithPTR(v14);
      goto LABEL_46;
    }

    if (BytePtr && v18)
    {
      CFTypeID v30 = BytePtr;
      int v31 = v18;
    }

    else
    {
      if (v18)
      {
        CFStringRef v29 = SCNetworkReachabilityCreateWithAddress(0LL, v18);
        goto LABEL_46;
      }

      if (!BytePtr) {
        goto LABEL_52;
      }
      CFTypeID v30 = BytePtr;
      int v31 = 0LL;
    }

    CFStringRef v29 = SCNetworkReachabilityCreateWithAddressPair(0LL, v30, v31);
LABEL_46:
    SCNetworkReachabilityRef v28 = v29;
    goto LABEL_47;
  }

  if (BytePtr || v18 || v14) {
    goto LABEL_52;
  }
  uint64_t v27 = _SC_cfstring_to_cstring(Value, 0LL, 0LL, 0x8000100u);
  SCNetworkReachabilityRef v28 = SCNetworkReachabilityCreateWithName(a1, (const char *)v27);
  CFAllocatorDeallocate(0LL, v27);
LABEL_47:
  if (v28)
  {
    if (v19)
    {
      if (!_SC_cfstring_to_cstring(v19, (UInt8 *)v53, 16LL, 0x600u) || (unsigned int v32 = if_nametoindex(v53)) == 0)
      {
        CFRelease(v28);
        goto LABEL_52;
      }
    }

    else
    {
      unsigned int v32 = 0;
    }

    if (!*((void *)v28 + 29)) {
      *((void *)v28 + 29) = nw_parameters_create();
    }
    if (v32)
    {
      CFNumberRef v34 = (nw_interface *)nw_interface_create_with_index();
      nw_parameters_require_interface(*((nw_parameters_t *)v28 + 29), v34);
      nw_release(v34);
      int v35 = 1;
    }

    else
    {
      int v35 = 0;
    }

    if (v21)
    {
      *((_BYTE *)v28 + 192) = CFBooleanGetValue((CFBooleanRef)v21);
      int v35 = 1;
    }

    if (v23)
    {
      v55.length = CFDataGetLength((CFDataRef)v23);
      v55.CFIndex location = 0LL;
      CFDataGetBytes((CFDataRef)v23, v55, buffer);
      v50[0] = *(_OWORD *)buffer;
      v50[1] = v52;
      nw_parameters_set_source_application();
    }

    else if (v25)
    {
      CFTypeID v43 = _SC_cfstring_to_cstring(v25, 0LL, 0LL, 0x8000100u);
      if (v43)
      {
        CFTypeRef v44 = v43;
        nw_parameters_set_source_application_by_bundle_id();
        CFAllocatorDeallocate(0LL, v44);
      }

      else
      {
        CFTypeID v45 = (os_log_s *)__log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          CFTypeID v45 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v45;
        }

        uint64_t v46 = _SC_syslog_os_log_mapping(4);
        if (__SC_log_enabled(4, v45, (os_log_type_t)v46))
        {
          uint64_t v47 = _os_log_pack_size();
          __int128 v48 = (char *)v50 - ((MEMORY[0x1895F8858](v47) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v49 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v49 = 138412290;
          *(void *)(v49 + 4) = v25;
          __SC_log_send(4, (uint64_t)v45, v46, v48);
        }
      }
    }

    else if (!v35)
    {
      return v28;
    }

    unsigned int v36 = *((_DWORD *)v28 + 20) - 1;
    if (v36 > 2) {
      int v37 = "       + options";
    }
    else {
      int v37 = off_189B63DF8[v36];
    }
    CFIndex v38 = (os_log_s *)__log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      CFIndex v38 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v38;
    }

    uint64_t v39 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v38, (os_log_type_t)v39))
    {
      uint64_t v40 = _os_log_pack_size();
      CFTypeRef v41 = (char *)v50 - ((MEMORY[0x1895F8858](v40) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v42 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v42 = 136315650;
      *(void *)(v42 + 4) = (char *)v28 + 193;
      *(_WORD *)(v42 + 12) = 2080;
      *(void *)(v42 + 14) = v37;
      *(_WORD *)(v42 + 22) = 2112;
      *(void *)(v42 + 24) = v28;
      __SC_log_send(7, (uint64_t)v38, v39, v41);
    }
  }

  return v28;
}

char *__SCNetworkReachabilityCreateWithPTR(unsigned __int8 *a1)
{
  v11[1] = *MEMORY[0x1895F89C0];
  uint32_t v1 = is_valid_address(a1);
  if (v1)
  {
    unsigned int v2 = (const sockaddr *)v1;
    uint64_t Private = __SCNetworkReachabilityCreatePrivate();
    CFPropertyListRef v4 = Private;
    if (Private)
    {
      *((_DWORD *)Private + 20) = 3;
      *((void *)Private + 13) = nw_endpoint_create_address(v2);
      *((void *)v4 + 29) = nw_parameters_create();
      nw_parameters_set_resolve_ptr();
      uint64_t v5 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v5;
      }

      uint64_t v6 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
      {
        uint64_t v7 = _os_log_pack_size();
        uint64_t v8 = (char *)v11 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 136315650;
        *(void *)(v9 + 4) = v4 + 193;
        *(_WORD *)(v9 + 12) = 2080;
        *(void *)(v9 + 14) = "create w/ptr";
        *(_WORD *)(v9 + 22) = 2112;
        *(void *)(v9 + 24) = v4;
        __SC_log_send(7, (uint64_t)v5, v6, v8);
      }
    }
  }

  else
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  return v4;
}

CFTypeID SCNetworkReachabilityGetTypeID(void)
{
  if (__SCNetworkReachabilityInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
  }
  return __kSCNetworkReachabilityTypeID;
}

CFMutableArrayRef SCNetworkReachabilityCopyResolvedAddress(char *cf, _DWORD *a2)
{
  if (__SCNetworkReachabilityInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (cf) {
      goto LABEL_3;
    }
LABEL_14:
    CFMutableArrayRef Mutable = 0LL;
    int v6 = 1002;
    goto LABEL_15;
  }

  if (!cf) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(cf) != v4 || *((_DWORD *)cf + 20) < 2u) {
    goto LABEL_14;
  }
  if (a2) {
    *a2 = 0;
  }
  if (pthread_mutex_lock((pthread_mutex_t *)(cf + 16))) {
    SCNetworkReachabilityCopyResolvedAddress_cold_2();
  }
  if (nw_array_get_count())
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
    nw_array_apply();
  }

  else
  {
    CFMutableArrayRef Mutable = 0LL;
  }

  int v6 = pthread_mutex_unlock((pthread_mutex_t *)(cf + 16));
  if (v6) {
    SCNetworkReachabilityCopyResolvedAddress_cold_1();
  }
LABEL_15:
  _SCErrorSet(v6);
  return Mutable;
}

uint64_t __SCNetworkReachabilityCopyResolvedAddress_block_invoke(uint64_t a1, int a2, nw_endpoint_t endpoint)
{
  v23[1] = *MEMORY[0x1895F89C0];
  nw_endpoint_type_t type = nw_endpoint_get_type(endpoint);
  if (type == nw_endpoint_type_host)
  {
    hostname = nw_endpoint_get_hostname(endpoint);
    if (hostname)
    {
      uint64_t v10 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      uint64_t v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], hostname, 0x600u);
      if (v11)
      {
        uint64_t v8 = v11;
        if (CFStringHasPrefix(v11, @".") || CFStringHasSuffix(v8, @"."))
        {
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v10, 0LL, v8);
          CFRelease(v8);
          CFStringTrim(MutableCopy, @".");
          uint64_t v8 = MutableCopy;
        }

        goto LABEL_10;
      }

      uint64_t v18 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v18 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v18;
      }

      uint64_t v19 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v18, (os_log_type_t)v19))
      {
LABEL_26:
        uint64_t v20 = _os_log_pack_size();
        uint64_t v21 = (char *)v23 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(3, (uint64_t)v18, v19, v21);
      }
    }

    else
    {
      uint64_t v18 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v18 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v18;
      }

      uint64_t v19 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v18, (os_log_type_t)v19)) {
        goto LABEL_26;
      }
    }
  }

  else
  {
    nw_endpoint_type_t v6 = type;
    if (type == nw_endpoint_type_address)
    {
      sockaddr address = nw_endpoint_get_address(endpoint);
      if (address)
      {
        uint64_t v8 = (const __CFString *)CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], &address->sa_len, address->sa_len);
LABEL_10:
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v8);
        CFRelease(v8);
        return 1LL;
      }

      uint64_t v18 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v18 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v18;
      }

      uint64_t v19 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v18, (os_log_type_t)v19)) {
        goto LABEL_26;
      }
    }

    else
    {
      CFTypeID v13 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFTypeID v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v13;
      }

      uint64_t v14 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v13, (os_log_type_t)v14))
      {
        uint64_t v15 = _os_log_pack_size();
        int v16 = (char *)v23 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        CFTypeID v17 = (_DWORD *)_os_log_pack_fill();
        *CFTypeID v17 = 67109120;
        v17[1] = v6;
        __SC_log_send(3, (uint64_t)v13, v14, v16);
      }
    }
  }

  return 1LL;
}

uint64_t SCNetworkReachabilityGetInterfaceIndex(char *cf)
{
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_13:
      _SCErrorSet(1002);
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!cf) {
      goto LABEL_13;
    }
  }

  uint64_t v2 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_13;
  }
  int v3 = (pthread_mutex_t *)(cf + 16);
  if (pthread_mutex_lock((pthread_mutex_t *)(cf + 16))) {
    SCNetworkReachabilityGetInterfaceIndex_cold_2();
  }
  if ((__SCNetworkReachabilityGetFlagsFromPath( (uint64_t)(cf + 193),  (uint64_t)"GetInterfaceIndex",  *((nw_path_t *)cf + 31),  *((_DWORD *)cf + 20),  0,  0LL,  cf[288],  *((_DWORD *)cf + 73)) & 6) == 2)
  {
    if (cf[288]) {

    }
      uint64_t interface_index = *((unsigned int *)cf + 74);
    else {
      uint64_t interface_index = nw_path_get_interface_index();
    }
  }

  else
  {
    uint64_t interface_index = 0xFFFFFFFFLL;
  }

  if (pthread_mutex_unlock(v3)) {
    SCNetworkReachabilityGetInterfaceIndex_cold_1();
  }
  return interface_index;
}

uint64_t __SCNetworkReachabilityGetFlagsFromPath( uint64_t a1, uint64_t a2, nw_path_t path, unsigned int a4, int a5, uint64_t a6, int a7, int a8)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  uint64_t v44 = 0LL;
  CFTypeID v45 = &v44;
  uint64_t v46 = 0x2000000000LL;
  int v47 = 2;
  uint64_t v40 = 0LL;
  CFTypeRef v41 = &v40;
  uint64_t v42 = 0x2000000000LL;
  CFTypeID v43 = "???";
  if (path)
  {
    nw_path_status_t status = nw_path_get_status(path);
    switch(status)
    {
      case nw_path_status_satisfiable:
        *((_DWORD *)v45 + 6) = 7;
        v41[3] = (uint64_t)"nw_path_status_satisfiable";
        if ((nw_path_get_vpn_config_id() & 1) != 0)
        {
          uint64_t v20 = "nw_path_status_satisfiable, OnDemand";
          int v21 = 32;
        }

        else
        {
          uint64_t v20 = "nw_path_status_satisfiable, WWAN";
          int v21 = 0x40000;
        }

        *((_DWORD *)v45 + 6) |= v21;
        v41[3] = (uint64_t)v20;
        break;
      case nw_path_status_unsatisfied:
        *((_DWORD *)v45 + 6) = 0;
        v41[3] = (uint64_t)"nw_path_status_unsatisfied";
        if (nw_path_uses_interface_type(path, nw_interface_type_cellular))
        {
          *((_DWORD *)v45 + 6) |= 0x40000u;
          v41[3] = (uint64_t)"nw_path_status_unsatisfied, WWAN";
        }

        break;
      case nw_path_status_satisfied:
        uint64_t v48 = 0LL;
        uint64_t v49 = &v48;
        uint64_t v50 = 0x2000000000LL;
        char v51 = 1;
        *((_DWORD *)v45 + 6) = 2;
        v41[3] = (uint64_t)"nw_path_status_satisfied";
        if (nw_path_uses_interface_type(path, nw_interface_type_cellular))
        {
          *((_DWORD *)v45 + 6) |= 0x40001u;
          v41[3] = (uint64_t)"nw_path_status_satisfied, cellular";
        }

        CFTypeID v17 = (void *)nw_path_copy_netagent_dictionary();
        if (v17)
        {
          uint64_t v18 = v17;
          if (xpc_dictionary_get_count(v17))
          {
            applier[0] = MEMORY[0x1895F87A8];
            applier[1] = 0x40000000LL;
            applier[2] = ____SCNetworkReachabilityGetFlagsFromPath_block_invoke;
            applier[3] = &unk_189B63CB0;
            applier[4] = &v44;
            applier[5] = &v40;
            unsigned int v38 = a4;
            int v39 = a5;
            applier[6] = &v48;
            applier[7] = a6;
            xpc_dictionary_apply(v18, applier);
          }

          xpc_release(v18);
        }

        if (a4 >= 2)
        {
          if (*((_BYTE *)v49 + 24))
          {
            if (a5 == 2 && !nw_array_get_count())
            {
              *((_DWORD *)v45 + 6) = 0;
              uint64_t v19 = "nw_path_status_satisfied, DNS not reachable";
              goto LABEL_39;
            }

            if (a7)
            {
              *((_DWORD *)v45 + 6) = a8;
              uint64_t v19 = "nw_path_status_satisfied, resolved endpoint flags";
LABEL_39:
              v41[3] = (uint64_t)v19;
              goto LABEL_40;
            }
          }

          goto LABEL_40;
        }

        if ((nw_path_is_direct() & 1) != 0) {
          goto LABEL_25;
        }
        CFTypeID v22 = (nw_endpoint *)nw_path_copy_endpoint();
        if (v22)
        {
          CFPropertyListRef v23 = v22;
          if (nw_endpoint_get_type(v22) == nw_endpoint_type_address)
          {
            sockaddr address = nw_endpoint_get_address(v23);
            if (address)
            {
              if (address->sa_family == 2 && *(__int16 *)&address->sa_data[2] == -343)
              {
                int v25 = (nw_interface *)nw_path_copy_interface();
                if (v25)
                {
                  CFTypeID v26 = v25;
                  nw_interface_type_t type = nw_interface_get_type(v25);
                  if (type == nw_interface_type_wired
                    || type == nw_interface_type_wifi && nw_interface_get_subtype() != 1002)
                  {
                    nw_release(v26);
                    nw_release(v23);
LABEL_25:
                    *((_DWORD *)v45 + 6) |= 0x20000u;
                    v41[3] = (uint64_t)"nw_path_status_satisfied, by address, direct";
                    goto LABEL_37;
                  }

                  nw_release(v26);
                }
              }
            }
          }

          nw_release(v23);
        }

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!target)
    {
LABEL_21:
      _SCErrorSet(1002);
      return 0;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!target) {
      goto LABEL_21;
    }
  }

  uint64_t v4 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(target) != v4) {
    goto LABEL_21;
  }
  if (!*((_BYTE *)target + 112))
  {
    unsigned int v5 = *((_DWORD *)target + 20);
    if (v5 < 2 || v5 == 3)
    {
      nw_endpoint_type_t v6 = (nw_endpoint **)((char *)target + 104);
    }

    else
    {
      if (v5 != 2)
      {
        uint64_t v7 = 0LL;
LABEL_14:
        evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();
        uint64_t v9 = (nw_path *)nw_path_evaluator_copy_path();
        uint64_t v10 = v9;
        if (*((_DWORD *)target + 20) <= 1u)
        {
          CrazyIvan46Path = (nw_path *)__SCNetworkReachabilityCreateCrazyIvan46Path( v9,  v7,  *((nw_parameters **)target + 29),  0);
          if (CrazyIvan46Path)
          {
            uint64_t v12 = CrazyIvan46Path;
            nw_release(v10);
            uint64_t v10 = v12;
          }
        }

        *flags = __SCNetworkReachabilityGetFlagsFromPath( (uint64_t)target + 193,  (uint64_t)"GetFlags",  v10,  0,  0,  0LL,  0,  0);
        nw_release(v10);
        nw_release(evaluator_for_endpoint);
        goto LABEL_18;
      }

      nw_endpoint_type_t v6 = (nw_endpoint **)((char *)target + 88);
    }

    uint64_t v7 = *v6;
    goto LABEL_14;
  }

  *flags = __SCNetworkReachabilityGetFlagsFromPath( (uint64_t)target + 193,  (uint64_t)"GetFlags",  *((nw_path_t *)target + 31),  *((_DWORD *)target + 20),  *((_DWORD *)target + 68),  *((void *)target + 35),  *((unsigned __int8 *)target + 288),  *((_DWORD *)target + 73));
  *((_BYTE *)target + 113) = 1;
LABEL_18:
  return 1;
}

void *__SCNetworkReachabilityCreateCrazyIvan46Path(nw_path *a1, nw_endpoint *a2, nw_parameters *a3, int a4)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0LL;
  }
  nw_path_status_t status = nw_path_get_status(a1);
  uint64_t v8 = 0LL;
  if (!a2 || status != nw_path_status_unsatisfied) {
    return v8;
  }
  if (a4)
  {
    required_uint64_t interface_index = 0;
    CFPropertyListRef v23 = 0LL;
    __memcpy_chk();
    if (a3) {
      required_uint64_t interface_index = nw_parameters_get_required_interface_index();
    }
    if ((int)nw_nat64_copy_prefixes() >= 1)
    {
      *(void *)&address[4] = 0LL;
      *(void *)&address[12] = 0LL;
      uint64_t v26 = 0LL;
      *(_WORD *)sockaddr address = 7708;
      *(_WORD *)&address[2] = __rev16(nw_endpoint_get_port(a2));
      nw_nat64_synthesize_v6();
      nw_endpoint_t v9 = nw_endpoint_create_address((const sockaddr *)address);
      evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();
      uint64_t v8 = (void *)nw_path_evaluator_copy_path();
      if (nw_path_get_status((nw_path_t)v8) == nw_path_status_unsatisfied)
      {
        nw_release(v8);
        uint64_t v8 = 0LL;
      }

      else
      {
        CFTypeID v13 = (os_log_s *)__log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          CFTypeID v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v13;
        }

        uint64_t v14 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v13, (os_log_type_t)v14))
        {
          uint64_t v15 = _os_log_pack_size();
          int v16 = (char *)&v23 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v13, v14, v16);
        }
      }

      nw_release(evaluator_for_endpoint);
      nw_release(v9);
      free(v23);
      return v8;
    }

    return 0LL;
  }

  if (a3) {
    nw_parameters_t v12 = nw_parameters_copy(a3);
  }
  else {
    nw_parameters_t v12 = nw_parameters_create();
  }
  nw_parameters_t v17 = v12;
  nw_parameters_set_required_address_family();
  uint64_t v18 = (void *)nw_path_create_evaluator_for_endpoint();
  uint64_t v8 = (void *)nw_path_evaluator_copy_path();
  if (nw_path_get_status((nw_path_t)v8) == nw_path_status_unsatisfied)
  {
    nw_release(v8);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v19 = (os_log_s *)__log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      uint64_t v19 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v19;
    }

    uint64_t v20 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v19, (os_log_type_t)v20))
    {
      uint64_t v21 = _os_log_pack_size();
      CFTypeID v22 = (char *)&v23 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v19, v20, v22);
    }
  }

  nw_release(v18);
  nw_release(v17);
  return v8;
}

Boolean SCNetworkReachabilitySetCallback( SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  nw_endpoint_type_t v6 = (pthread_mutex_t *)((char *)target + 16);
  uint64_t v7 = (void (*)(void))*((void *)target + 20);
  if (v7) {
    v7(*((void *)target + 18));
  }
  *((_OWORD *)target + 9) = 0u;
  *((void *)target + 16) = callout;
  *((_OWORD *)target + 10) = 0u;
  if (context)
  {
    __int128 v8 = *(_OWORD *)&context->version;
    __int128 v9 = *(_OWORD *)&context->retain;
    *((void *)target + 21) = context->copyDescription;
    *(_OWORD *)((char *)target + 136) = v8;
    *(_OWORD *)((char *)target + 152) = v9;
    retain = context->retain;
    if (retain) {
      *((void *)target + 18) = ((uint64_t (*)(void *))retain)(context->info);
    }
  }

  if (pthread_mutex_unlock(v6)) {
    SCNetworkReachabilitySetCallback_cold_1();
  }
  return 1;
}

Boolean SCNetworkReachabilityScheduleWithRunLoop( SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  context.version = 0LL;
  context.info = target;
  context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
  context.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))reachRLSCopyDescription;
  context.equal = (Boolean (__cdecl *)(const void *, const void *))MEMORY[0x189602C38];
  context.hash = (CFHashCode (__cdecl *)(const void *))MEMORY[0x189602D50];
  context.schedule = 0LL;
  context.cancel = 0LL;
  context.perform = (void (__cdecl *)(void *))reachPerform;
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!target) {
      goto LABEL_15;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!target) {
      goto LABEL_15;
    }
  }

  uint64_t v6 = __kSCNetworkReachabilityTypeID;
  CFTypeID v7 = CFGetTypeID(target);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_15;
  }
  if (*((_BYTE *)target + 112))
  {
    if (*((void *)target + 15))
    {
      __int128 v8 = (const __CFArray *)*((void *)target + 22);
      if (v8)
      {
        _SC_schedule(target, runLoop, runLoopMode, *((CFMutableArrayRef *)target + 22));
        LOBYTE(v9) = 1;
        return v9;
      }
    }

CFStringRef reachRLSCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0LL, 0LL, @"<SCNetworkReachability RLS> {target = %p}", a1);
}

uint64_t reachPerform(uint64_t a1)
{
  if (pthread_mutex_lock((pthread_mutex_t *)(a1 + 16))) {
    reachPerform_cold_1();
  }
  return reachPerformAndUnlock(a1);
}

uint64_t __SCNetworkReachabilitySetDispatchQueue(uint64_t a1, dispatch_object_s *a2)
{
  block[17] = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 184);
  if (!a2)
  {
    if (v3 && *(_BYTE *)(a1 + 112))
    {
      *(_WORD *)(a1 + 112) = 0;
      nw_path_evaluator_cancel();
      *(void *)(a1 + 240) = 0LL;
      nw_release(*(void **)(a1 + 248));
      *(void *)(a1 + 248) = 0LL;
      nw_release(*(void **)(a1 + 256));
      *(void *)(a1 + 256) = 0LL;
      nw_release(*(void **)(a1 + 280));
      *(void *)(a1 + 280) = 0LL;
      uint64_t v12 = *(void *)(a1 + 264);
      if (v12)
      {
        nw_retain(*(void **)(a1 + 264));
        uint64_t v13 = *(dispatch_queue_s **)(a1 + 184);
        block[0] = MEMORY[0x1895F87A8];
        block[1] = 0x40000000LL;
        block[2] = ____SCNetworkReachabilitySetDispatchQueue_block_invoke_3;
        block[3] = &__block_descriptor_tmp_108_0;
        block[4] = v12;
        dispatch_async(v13, block);
      }

      uint64_t v14 = *(dispatch_object_s **)(a1 + 184);
      if (v14)
      {
        dispatch_release(v14);
        *(void *)(a1 + 184) = 0LL;
      }

      uint64_t v15 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v15 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v15;
      }

      uint64_t v16 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v15, (os_log_type_t)v16))
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v18 = (char *)block - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v19 = 136315138;
        *(void *)(v19 + 4) = a1 + 193;
        __SC_log_send(7, (uint64_t)v15, v16, v18);
        return 1LL;
      }

      return 1LL;
    }

Boolean SCNetworkReachabilityUnscheduleFromRunLoop( SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCNetworkReachabilityInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (target) {
      goto LABEL_3;
    }
LABEL_16:
    _SCErrorSet(1002);
    return 0;
  }

  if (!target) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v6 = __kSCNetworkReachabilityTypeID;
  CFTypeID v7 = CFGetTypeID(target);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_16;
  }
  __int128 v8 = (pthread_mutex_t *)((char *)target + 16);
  uint64_t v9 = (const __CFArray *)*((void *)target + 22);
  if (!v9 || !*((void *)target + 15) || !*((_BYTE *)target + 112))
  {
    goto LABEL_16;
  }

  if (!_SC_unschedule(target, runLoop, runLoopMode, v9, 0))
  {
LABEL_14:
    Boolean v10 = 1;
    goto LABEL_19;
  }

  if (CFArrayGetCount(*((CFArrayRef *)target + 22)))
  {
    goto LABEL_14;
  }

  CFRunLoopRemoveSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
  CFRelease(*((CFTypeRef *)target + 22));
  *((void *)target + 22) = 0LL;
  CFRunLoopSourceInvalidate(*((CFRunLoopSourceRef *)target + 15));
  CFRelease(*((CFTypeRef *)target + 15));
  *((void *)target + 15) = 0LL;
  Boolean v10 = __SCNetworkReachabilitySetDispatchQueue((uint64_t)target, 0LL);
LABEL_19:
  if (pthread_mutex_unlock(v8)) {
    SCNetworkReachabilityUnscheduleFromRunLoop_cold_2();
  }
  return v10;
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!target)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!target) {
      goto LABEL_8;
    }
  }

  uint64_t v4 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(target) != v4) {
    goto LABEL_8;
  }
  Boolean v5 = __SCNetworkReachabilitySetDispatchQueue((uint64_t)target, queue);
  return v5;
}

uint64_t _SC_checkResolverReachabilityByAddress(uint64_t a1, _DWORD *a2, char *a3)
{
  default_evaluator = (void *)nw_path_create_default_evaluator();
  uint64_t v6 = (nw_path *)nw_path_evaluator_copy_path();
  if (nw_path_get_status(v6) == nw_path_status_unsatisfied)
  {
    if (a2) {
      *a2 = 0;
    }
    if (a3)
    {
      char v7 = 0;
LABEL_10:
      *a3 = v7;
    }
  }

  else
  {
    if (a2) {
      *a2 = 2;
    }
    if (a3)
    {
      char v7 = 1;
      goto LABEL_10;
    }
  }

  nw_release(default_evaluator);
  nw_release(v6);
  return 1LL;
}

uint64_t __SCNetworkReachabilityDeallocate(uint64_t a1)
{
  v16[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = (os_log_s *)__log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    uint64_t v2 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v2;
  }

  uint64_t v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, (os_log_type_t)v3))
  {
    uint64_t v4 = _os_log_pack_size();
    Boolean v5 = (char *)v16 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v6 + 4) = a1 + 193;
    __SC_log_send(7, (uint64_t)v2, v3, v5);
  }

  if (pthread_mutex_lock((pthread_mutex_t *)(a1 + 16))) {
    __SCNetworkReachabilityDeallocate_cold_2();
  }
  *(_BYTE *)(a1 + 112) = 0;
  char v7 = *(void **)(a1 + 88);
  if (v7)
  {
    nw_release(v7);
    *(void *)(a1 + 88) = 0LL;
  }

  __int128 v8 = *(void **)(a1 + 96);
  if (v8)
  {
    nw_release(v8);
    *(void *)(a1 + 96) = 0LL;
  }

  uint64_t v9 = *(void **)(a1 + 104);
  if (v9)
  {
    nw_release(v9);
    *(void *)(a1 + 104) = 0LL;
  }

  Boolean v10 = *(void **)(a1 + 232);
  if (v10)
  {
    nw_release(v10);
    *(void *)(a1 + 232) = 0LL;
  }

  uint64_t v11 = *(void **)(a1 + 248);
  if (v11)
  {
    nw_release(v11);
    *(void *)(a1 + 248) = 0LL;
  }

  uint64_t v12 = *(void **)(a1 + 256);
  if (v12)
  {
    nw_release(v12);
    *(void *)(a1 + 256) = 0LL;
  }

  uint64_t v13 = *(void **)(a1 + 280);
  if (v13)
  {
    nw_release(v13);
    *(void *)(a1 + 280) = 0LL;
  }

  uint64_t v14 = *(void (**)(void))(a1 + 160);
  if (v14) {
    v14(*(void *)(a1 + 144));
  }
  if (pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16))) {
    __SCNetworkReachabilityDeallocate_cold_1();
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
}

__CFString *__SCNetworkReachabilityCopyDescription(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v2 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v3 = (pthread_mutex_t *)(a1 + 16);
  if (pthread_mutex_lock((pthread_mutex_t *)(a1 + 16))) {
    __SCNetworkReachabilityCopyDescription_cold_2();
  }
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCNetworkReachability %p [%p]> {", a1, v2);
  Boolean v5 = CFGetAllocator((CFTypeRef)a1);
  CFMutableStringRef v6 = CFStringCreateMutable(v5, 0LL);
  unsigned int v7 = *(_DWORD *)(a1 + 80);
  if (v7 < 2)
  {
    Boolean v10 = *(nw_endpoint **)(a1 + 96);
    if (v10)
    {
      sockaddr address = nw_endpoint_get_address(v10);
      _SC_sockaddr_to_string((uint64_t)address, v27, 0x40uLL);
      CFStringAppendFormat(v6, 0LL, @"local sockaddr address = %s", v27);
    }

    uint64_t v12 = *(nw_endpoint **)(a1 + 104);
    if (v12)
    {
      uint64_t v13 = nw_endpoint_get_address(v12);
      _SC_sockaddr_to_string((uint64_t)v13, v27, 0x40uLL);
      if (*(void *)(a1 + 96)) {
        uint64_t v14 = ", ";
      }
      else {
        uint64_t v14 = "";
      }
      if (*(_DWORD *)(a1 + 80) == 1) {
        uint64_t v15 = "remote ";
      }
      else {
        uint64_t v15 = "";
      }
      CFStringAppendFormat(v6, 0LL, @"%s%ssockaddr address = %s", v14, v15, v27);
    }

    else
    {
      CFStringAppendFormat(v6, 0LL, @"default path", v24, v26);
    }
  }

  else if (v7 == 2)
  {
    hostname = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 88));
    CFStringAppendFormat(v6, 0LL, @"name = %s", hostname, v26);
  }

  else if (v7 == 3)
  {
    __int128 v8 = *(nw_endpoint **)(a1 + 104);
    if (v8)
    {
      uint64_t v9 = nw_endpoint_get_address(v8);
      _SC_sockaddr_to_string((uint64_t)v9, v27, 0x40uLL);
      CFStringAppendFormat(v6, 0LL, @"ptr = %s", v27, v26);
    }
  }

  if (*(void *)(a1 + 232))
  {
    required_uint64_t interface_index = nw_parameters_get_required_interface_index();
  }

  CFStringAppend(Mutable, v6);
  CFRelease(v6);
  if (*(_DWORD *)(a1 + 80) >= 2u)
  {
    int v17 = *(_DWORD *)(a1 + 272);
    if (*(void *)(a1 + 264))
    {
      if (!v17)
      {
        CFStringAppendFormat(Mutable, 0LL, @" (DNS query active)");
        goto LABEL_34;
      }
    }

    else if (!v17)
    {
      goto LABEL_34;
    }

    if (v17 == 2) {
      uint64_t v18 = "complete";
    }
    else {
      uint64_t v18 = "in progress";
    }
    CFStringAppendFormat(Mutable, 0LL, @" (%s"), v18;
    if (nw_array_get_count()) {
      nw_array_apply();
    }
    else {
      CFStringAppendFormat(Mutable, 0LL, @", no addresses");
    }
    CFStringAppendFormat(Mutable, 0LL, @""));
  }

uint64_t reachPerformAndUnlock(uint64_t a1)
{
  v18[1] = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 112))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 144);
    uint64_t v3 = *(uint64_t (**)(void))(a1 + 152);
    if (v3)
    {
      uint64_t v4 = v3(*(void *)(a1 + 144));
      Boolean v5 = *(uint64_t (**)(uint64_t))(a1 + 160);
    }

    else
    {
      Boolean v5 = 0LL;
    }

    uint64_t FlagsFromPath = __SCNetworkReachabilityGetFlagsFromPath( a1 + 193,  (uint64_t)"Perform",  *(nw_path_t *)(a1 + 248),  *(_DWORD *)(a1 + 80),  *(_DWORD *)(a1 + 272),  *(void *)(a1 + 280),  *(unsigned __int8 *)(a1 + 288),  *(_DWORD *)(a1 + 292));
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    if ((_DWORD)result) {
      reachPerformAndUnlock_cold_2();
    }
    if (v2)
    {
      uint64_t v13 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v13;
      }

      uint64_t v14 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v13, (os_log_type_t)v14))
      {
        uint64_t v15 = _os_log_pack_size();
        v18[0] = v18;
        uint64_t v16 = (char *)v18 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v17 = 136315394;
        *(void *)(v17 + 4) = a1 + 193;
        *(_WORD *)(v17 + 12) = 1024;
        *(_DWORD *)(v17 + 14) = FlagsFromPath;
        __SC_log_send(7, (uint64_t)v13, v14, v16);
      }

      uint64_t result = v2(a1, FlagsFromPath, v4);
    }

    if (v5) {
      return v5(v4);
    }
  }

  else
  {
    CFMutableStringRef v6 = (os_log_s *)__log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      CFMutableStringRef v6 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v6;
    }

    uint64_t v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v9 = (char *)v18 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = a1 + 193;
      __SC_log_send(6, (uint64_t)v6, v7, v9);
    }

    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    if ((_DWORD)result) {
      reachPerformAndUnlock_cold_1();
    }
  }

  return result;
}

dispatch_queue_t ___callback_queue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("SCNetworkReachability.callback", 0LL);
  _callback_queue_q = (uint64_t)result;
  return result;
}

void __SCNetworkReachabilityRestartResolver(void **cf, uint64_t a2)
{
  void block[5] = *MEMORY[0x1895F89C0];
  if (cf && !*((_BYTE *)cf + 192) && *((_DWORD *)cf + 20) >= 2u)
  {
    CFRetain(cf);
    uint64_t v4 = cf[33];
    uint64_t v5 = MEMORY[0x1895F87A8];
    if (v4)
    {
      nw_retain(cf[33]);
      CFMutableStringRef v6 = (dispatch_queue_s *)cf[23];
      block[0] = v5;
      block[1] = 0x40000000LL;
      block[2] = ____SCNetworkReachabilityRestartResolver_block_invoke;
      block[3] = &__block_descriptor_tmp_109_0;
      block[4] = v4;
      dispatch_async(v6, block);
    }

    if (cf[31]) {
      uint64_t v7 = nw_resolver_create_with_path();
    }
    else {
      uint64_t v7 = nw_resolver_create_with_endpoint();
    }
    uint64_t v8 = (void *)v7;
    if (v7)
    {
      cf[33] = (void *)v7;
      v14[6] = v5;
      v14[7] = 0x40000000LL;
      v14[8] = ____SCNetworkReachabilityRestartResolver_block_invoke_110;
      v14[9] = &__block_descriptor_tmp_111_0;
      v14[10] = cf;
      v14[11] = v7;
      nw_resolver_set_cancel_handler();
      v14[0] = v5;
      v14[1] = 0x40000000LL;
      void v14[2] = ____SCNetworkReachabilityRestartResolver_block_invoke_2;
      v14[3] = &__block_descriptor_tmp_116;
      _BYTE v14[4] = cf;
      v14[5] = a2;
      if ((nw_resolver_set_update_handler() & 1) != 0) {
        return;
      }
      nw_release(v8);
    }

    else
    {
      uint64_t v9 = (os_log_s *)__log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v9;
      }

      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        uint64_t v12 = (char *)v14 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v13 = 136315138;
        *(void *)(v13 + 4) = (char *)cf + 193;
        __SC_log_send(3, (uint64_t)v9, v10, v12);
      }
    }

    cf[33] = 0LL;
    CFRelease(cf);
  }

uint64_t reachUpdateAndUnlock(uint64_t a1)
{
  *(_BYTE *)(a1 + 113) = 1;
  uint64_t v2 = *(__CFRunLoopSource **)(a1 + 120);
  if (!v2) {
    return reachPerformAndUnlock(a1);
  }
  if (*(void *)(a1 + 176))
  {
    CFRunLoopSourceSignal(v2);
    _SC_signalRunLoop((const void *)a1, *(__CFRunLoopSource **)(a1 + 120), *(CFArrayRef *)(a1 + 176));
  }

  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  if ((_DWORD)result) {
    reachUpdateAndUnlock_cold_1();
  }
  return result;
}

CFStringRef SCDynamicStoreKeyCreateProxies(CFAllocatorRef allocator)
{
  return SCDynamicStoreKeyCreateNetworkGlobalEntity(allocator, @"State:", @"Proxies");
}

CFDictionaryRef SCDynamicStoreCopyProxies(SCDynamicStoreRef store)
{
  return SCDynamicStoreCopyProxiesWithOptions(store, 0LL);
}

CFDictionaryRef SCDynamicStoreCopyProxiesWithOptions(const __SCDynamicStore *a1, const __CFDictionary *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a2) {
    goto LABEL_6;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(a2) == TypeID)
  {
    int Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"NO_GLOBAL");
    CFTypeID v6 = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == v6)
    {
      BOOL v7 = CFBooleanGetValue(Value) != 0;
      goto LABEL_7;
    }

CFDictionaryRef __SCNetworkProxiesCopyNormalized(const void *a1)
{
  v32[9] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  }
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)a1);
  uint64_t v4 = 0LL;
  v32[0] = @"FTPEnable";
  v32[1] = @"FTPProxy";
  v32[2] = @"FTPPort";
  v32[3] = @"GopherEnable";
  v32[4] = @"GopherProxy";
  v32[5] = @"GopherPort";
  v32[6] = @"RTSPEnable";
  void v32[7] = @"RTSPProxy";
  v32[8] = @"RTSPPort";
  do
    CFDictionaryRemoveValue(MutableCopy, (const void *)v32[v4++]);
  while (v4 != 9);
  validate_proxy_content(MutableCopy, @"HTTPEnable", @"HTTPProxy", @"HTTPPort", "http", 0x50u, 0);
  validate_proxy_content(MutableCopy, @"HTTPSEnable", @"HTTPSProxy", @"HTTPSPort", "https", 0x1BBu, 0);
  validate_proxy_content(MutableCopy, @"SOCKSEnable", @"SOCKSProxy", @"SOCKSPort", "socks", 0x438u, 0);
  validate_proxy_content( MutableCopy,  @"TransportConverterEnable",  @"TransportConverterProxy",  @"TransportConverterPort",  0LL,  0,  1);
  if (CFDictionaryContainsKey(MutableCopy, @"ProxyAutoConfigURLString"))
  {
    validate_proxy_content( MutableCopy,  @"ProxyAutoConfigEnable",  @"ProxyAutoConfigURLString",  0LL,  0LL,  0,  0);
    CFDictionaryRemoveValue(MutableCopy, @"ProxyAutoConfigJavaScript");
  }

  else
  {
    validate_proxy_content( MutableCopy,  @"ProxyAutoConfigEnable",  @"ProxyAutoConfigJavaScript",  0LL,  0LL,  0,  0);
  }

  validate_proxy_content(MutableCopy, @"ProxyAutoDiscoveryEnable", 0LL, 0LL, 0LL, 0, 0);
  validate_proxy_content(MutableCopy, @"FallBackAllowed", 0LL, 0LL, 0LL, 0, 0);
  int Value = CFDictionaryGetValue(MutableCopy, @"FTPPassive");
  if (Value)
  {
    BOOL v7 = Value;
    LODWORD(v32[0]) = 0;
    CFTypeID v8 = CFNumberGetTypeID();
    if (CFGetTypeID(v7) != v8 || !CFNumberGetValue((CFNumberRef)v7, kCFNumberIntType, v32))
    {
      LODWORD(v32[0]) = 1;
      CFNumberRef v9 = CFNumberCreate(0LL, kCFNumberIntType, v32);
      CFDictionarySetValue(MutableCopy, @"FTPPassive", v9);
      CFRelease(v9);
    }
  }

  uint64_t v10 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"ExceptionsList");
  if (v10)
  {
    uint64_t v11 = v10;
    CFTypeID v12 = CFArrayGetTypeID();
    if (CFGetTypeID(v11) == v12)
    {
      CFIndex Count = CFArrayGetCount(v11);
      CFIndex v14 = Count;
      if (Count < 1)
      {
        if (Count) {
          goto LABEL_24;
        }
      }

      else
      {
        CFIndex v15 = 0LL;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, v15);
          CFTypeID v17 = CFStringGetTypeID();
          if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v17 || !CFStringGetLength(ValueAtIndex)) {
            break;
          }
          if (v14 == ++v15) {
            goto LABEL_24;
          }
        }
      }
    }

    CFDictionaryRemoveValue(MutableCopy, @"ExceptionsList");
  }

CFDataRef SCNetworkProxiesCreateProxyAgentData(void *a1)
{
  values[1] = *(void **)MEMORY[0x1895F89C0];
  CFDataRef v10 = 0LL;
  values[0] = a1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFArrayRef v3 = CFArrayCreate(0LL, (const void **)values, 1LL, MEMORY[0x189605228]);
    _SCSerialize(v3, &v10, 0LL, 0LL);
    CFRelease(v3);
    return v10;
  }

  else
  {
    uint64_t v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      CFTypeID v8 = (char *)&v9 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(3, (uint64_t)v5, v6, v8);
    }

    _SCErrorSet(1002);
    return 0LL;
  }

CFArrayRef SCNetworkProxiesCopyMatching(const void *a1, __CFString *a2, const __CFString *a3)
{
  return _SCNetworkProxiesCopyMatchingInternal(a1, a2, a3, 0LL);
}

CFArrayRef _SCNetworkProxiesCopyMatchingInternal( const void *a1, __CFString *a2, const __CFString *Value, const __CFDictionary *a4)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  int valuePtr = 0;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    goto LABEL_60;
  }
  uuid_clear(uu);
  CFTypeID v9 = CFDictionaryGetTypeID();
  if (a4 && CFGetTypeID(a4) == v9)
  {
    int Value = (const __CFString *)CFDictionaryGetValue(a4, @"Interface");
    CFTypeID v10 = CFStringGetTypeID();
    if (Value && CFGetTypeID(Value) != v10) {
      int Value = 0LL;
    }
    a2 = (__CFString *)CFDictionaryGetValue(a4, @"Server");
    CFTypeID v11 = CFStringGetTypeID();
    if (a2 && CFGetTypeID(a2) != v11) {
      a2 = 0LL;
    }
    CFTypeID v12 = (const __CFUUID *)CFDictionaryGetValue(a4, @"UUID");
    CFTypeID v13 = CFUUIDGetTypeID();
    if (v12 && CFGetTypeID(v12) == v13)
    {
      srCC_SHA256_CTX c = CFUUIDGetUUIDBytes(v12);
      uuid_copy(uu, &src.byte0);
    }
  }

  if (Value)
  {
    CFTypeID v14 = CFStringGetTypeID();
    if (CFGetTypeID(Value) == v14 && CFStringGetLength(Value))
    {
      CFIndex v15 = CFDictionaryGetValue((CFDictionaryRef)a1, @"__SCOPED__");
      if (v15)
      {
        CFNumberRef v16 = v15;
        CFTypeID v17 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v16) != v17) {
          goto LABEL_21;
        }
        CFDictionaryRef Copy = (void *)CFDictionaryGetValue((CFDictionaryRef)v16, Value);
        values = Copy;
        if (!Copy)
        {
          _SCErrorSet(0);
          return (CFArrayRef)Copy;
        }

        CFTypeID v19 = CFDictionaryGetTypeID();
        if (CFGetTypeID(Copy) != v19)
        {
LABEL_21:
          int v20 = 1001;
LABEL_61:
          _SCErrorSet(v20);
          return 0LL;
        }

        return CFArrayCreate(0LL, (const void **)&values, 1LL, MEMORY[0x189605228]);
      }

      if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"BypassAllowed")
        && (ne_session_always_on_vpn_configs_present() & 1) != 0)
      {
LABEL_56:
        uint64_t v28 = 0LL;
        goto LABEL_57;
      }

LABEL_60:
      int v20 = 0;
      goto LABEL_61;
    }

LABEL_57:
  uint64_t v46 = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)a1);
  *(void *)&src.byte0 = v46;
  CFDictionaryRemoveValue(v46, @"__SCOPED__");
  CFDictionaryRemoveValue(v46, @"__SERVICES__");
  CFDictionaryRemoveValue(v46, @"__SUPPLEMENTAL__");
  CFDictionaryRef Copy = CFArrayCreate(0LL, (const void **)&src, 1LL, MEMORY[0x189605228]);
  CFTypeID v45 = *(const __CFArray **)&src.byte0;
LABEL_58:
  CFRelease(v45);
  if (v28)
  {
LABEL_59:
    int v47 = (void *)v28;
    goto LABEL_65;
  }

  return (CFArrayRef)Copy;
}

CFArrayRef SCNetworkProxiesCopyMatchingWithOptions(const void *a1, const __CFDictionary *a2)
{
  return _SCNetworkProxiesCopyMatchingInternal(a1, 0LL, 0LL, a2);
}

void validate_proxy_content( const __CFDictionary *a1, const void *a2, const void *a3, const void *a4, const char *a5, unsigned int a6, int a7)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  int valuePtr = 0;
  int Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFIndex v15 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (CFGetTypeID(v15) != TypeID || !CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, &valuePtr)) {
      goto LABEL_26;
    }
  }

  if (a3)
  {
    CFTypeID v17 = (const __CFString *)CFDictionaryGetValue(a1, a3);
    CFTypeID v18 = v17;
    if (!valuePtr && v17) {
      goto LABEL_26;
    }
    if (valuePtr)
    {
      CFTypeID v19 = CFStringGetTypeID();
      if (!v18)
      {
        CFArrayGetTypeID();
        goto LABEL_26;
      }

      if (CFGetTypeID(v18) == v19)
      {
        if (a7 || !CFStringGetLength(v18)) {
          goto LABEL_26;
        }
      }

      else
      {
        CFTypeID v20 = CFArrayGetTypeID();
        CFTypeID v21 = CFGetTypeID(v18);
        if (!a7) {
          goto LABEL_26;
        }
        if (v21 != v20) {
          goto LABEL_26;
        }
        CFIndex Count = CFArrayGetCount((CFArrayRef)v18);
        if (!Count) {
          goto LABEL_26;
        }
        if (Count >= 1)
        {
          CFIndex v22 = 0LL;
          do
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v18, v22);
            CFTypeID v24 = CFStringGetTypeID();
            if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v24 || !CFStringGetLength(ValueAtIndex)) {
              goto LABEL_26;
            }
          }

          while (Count != ++v22);
        }
      }
    }
  }

  if (!a4) {
    return;
  }
  int v33 = 0;
  int v25 = CFDictionaryGetValue(a1, a4);
  CFTypeID v26 = v25;
  int v27 = valuePtr;
  if (!valuePtr && v25) {
    goto LABEL_26;
  }
  if (valuePtr && v25)
  {
    CFTypeID v29 = CFNumberGetTypeID();
    if (CFGetTypeID(v26) == v29 && CFNumberGetValue((CFNumberRef)v26, kCFNumberIntType, &v33) && v33 < 0x10000)
    {
      if (!v33) {
        CFTypeID v26 = 0LL;
      }
      int v27 = valuePtr;
      goto LABEL_39;
    }

LABEL_26:
    int valuePtr = 0;
    CFNumberRef v28 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(a1, a2, v28);
    CFRelease(v28);
    if (a3) {
      CFDictionaryRemoveValue(a1, a3);
    }
    if (a4) {
      CFDictionaryRemoveValue(a1, a4);
    }
    return;
  }

void normalize_scoped_proxy(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t v5 = (const void *)__SCNetworkProxiesCopyNormalized(a2);
  CFDictionarySetValue(a3, a1, v5);
  CFRelease(v5);
}

void normalize_services_proxy(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  uint64_t v5 = (const void *)__SCNetworkProxiesCopyNormalized(a2);
  CFDictionarySetValue(a3, a1, v5);
  CFRelease(v5);
}

void normalize_supplemental_proxy(uint64_t a1, __CFArray *a2)
{
  CFArrayRef v3 = (const void *)__SCNetworkProxiesCopyNormalized(a1);
  CFArrayAppendValue(a2, v3);
  CFRelease(v3);
}

Boolean DHCPClientPreferencesSetApplicationOptions( CFStringRef applicationID, const UInt8 *options, CFIndex count)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (applicationID && (CFStringRef v5 = CFStringCreateWithFormat(0LL, 0LL, @"/Application/%@", applicationID)) != 0LL)
  {
    uint64_t v6 = v5;
    uint64_t v7 = SCPreferencesCreate(0LL, @"DHCPClientSetAppReqParams", @"DHCPClient.xml");
    if (!v7)
    {
      LOBYTE(v11) = 0;
      CFTypeID v12 = (void *)v6;
LABEL_35:
      CFRelease(v12);
      return v11;
    }

    CFTypeID v8 = v7;
    int Value = SCPreferencesPathGetValue(v7, v6);
    if (Value) {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    }
    else {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }
    CFTypeID v12 = MutableCopy;
    if (!MutableCopy) {
      goto LABEL_33;
    }
    if (options && count >= 1)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      if (!Mutable) {
        goto LABEL_33;
      }
      CFMutableArrayRef v14 = Mutable;
      uint64_t v15 = 0LL;
      while (1)
      {
        if (options[v15] && options[v15] != 255)
        {
          int valuePtr = options[v15];
          CFNumberRef v16 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
          if (!v16)
          {
            CFRelease(v14);
            goto LABEL_33;
          }

          CFNumberRef v17 = v16;
          CFIndex v18 = CFArrayGetCount(v14);
          if (v18 < 1)
          {
LABEL_21:
            CFArrayAppendValue(v14, v17);
          }

          else
          {
            CFIndex v19 = v18;
            CFIndex v20 = 0LL;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v14, v20);
              if (CFEqual(ValueAtIndex, v17)) {
                break;
              }
              if (v19 == ++v20) {
                goto LABEL_21;
              }
            }
          }

          CFRelease(v17);
        }

        if (++v15 == count)
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v12, @"DHCPRequestedParameterList", v14);
          CFRelease(v14);
          goto LABEL_26;
        }
      }
    }

    CFDictionaryRemoveValue(MutableCopy, @"DHCPRequestedParameterList");
LABEL_26:
    if (SCPreferencesLock(v8, 1u))
    {
      if (SCPreferencesPathSetValue(v8, v6, (CFDictionaryRef)v12))
      {
        int v11 = SCPreferencesCommitChanges(v8);
        if (v11) {
          SCPreferencesApplyChanges(v8);
        }
      }

      else
      {
        LOBYTE(v11) = 0;
      }

      SCPreferencesUnlock(v8);
    }

    else
    {
LABEL_33:
      LOBYTE(v11) = 0;
    }

    CFRelease(v8);
    CFRelease(v6);
    if (v12) {
      goto LABEL_35;
    }
  }

  else
  {
    LOBYTE(v11) = 0;
  }

  return v11;
}

UInt8 *__cdecl DHCPClientPreferencesCopyApplicationOptions(CFStringRef applicationID, CFIndex *count)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (applicationID)
  {
    CFStringRef v3 = CFStringCreateWithFormat(0LL, 0LL, @"/Application/%@", applicationID);
    if (v3)
    {
      uint64_t v4 = v3;
      CFStringRef v5 = SCPreferencesCreate(0LL, @"DHCPClientCopyAppReqParams", @"DHCPClient.xml");
      if (!v5)
      {
        CFTypeID v13 = 0LL;
LABEL_25:
        CFRelease(v4);
        return v13;
      }

      uint64_t v6 = v5;
      int Value = SCPreferencesPathGetValue(v5, v4);
      if (Value)
      {
        CFTypeID v8 = (const __CFArray *)CFDictionaryGetValue(Value, @"DHCPRequestedParameterList");
        CFTypeID TypeID = CFArrayGetTypeID();
        if (v8)
        {
          if (CFGetTypeID(v8) == TypeID)
          {
            size_t v10 = CFArrayGetCount(v8);
            CFIndex v11 = v10;
            if (!v10 || (CFTypeID v12 = (UInt8 *)malloc(v10)) == 0LL)
            {
              CFTypeID v13 = 0LL;
              *count = v11;
LABEL_24:
              CFRelease(v6);
              goto LABEL_25;
            }

            CFTypeID v13 = v12;
            if (v11 < 1)
            {
              *count = 0LL;
            }

            else
            {
              CFIndex v14 = 0LL;
              for (CFIndex i = 0LL; i != v11; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
                CFTypeID v17 = CFNumberGetTypeID();
                if (ValueAtIndex
                  && CFGetTypeID(ValueAtIndex) == v17
                  && CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberIntType, &valuePtr))
                {
                  v13[v14++] = valuePtr;
                }
              }

              *count = v14;
              if (v14) {
                goto LABEL_24;
              }
            }

            free(v13);
          }
        }
      }

      CFTypeID v13 = 0LL;
      goto LABEL_24;
    }
  }

  return 0LL;
}

CFDictionaryRef SCDynamicStoreCopyDHCPInfo(SCDynamicStoreRef store, CFStringRef serviceID)
{
  if (serviceID)
  {
    int Value = serviceID;
    uint64_t v4 = 0LL;
  }

  else
  {
    NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, @"State:", @"IPv4");
    if (!NetworkGlobalEntity) {
      return 0LL;
    }
    uint64_t v4 = NetworkGlobalEntity;
    size_t v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(store, NetworkGlobalEntity);
    if (!v10)
    {
      uint64_t v7 = 0LL;
      goto LABEL_18;
    }

    CFIndex v11 = v10;
    int Value = (const __CFString *)CFDictionaryGetValue(v10, @"PrimaryService");
    CFRelease(v4);
    if (!Value)
    {
      uint64_t v7 = 0LL;
      uint64_t v4 = (const __CFString *)v11;
      goto LABEL_18;
    }

    uint64_t v4 = (const __CFString *)v11;
  }

  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"State:", Value, @"DHCP");
  if (!NetworkServiceEntity)
  {
    uint64_t v7 = 0LL;
    if (!v4) {
      return v7;
    }
    goto LABEL_18;
  }

  uint64_t v6 = NetworkServiceEntity;
  uint64_t v7 = (const __CFDictionary *)SCDynamicStoreCopyValue(store, NetworkServiceEntity);
  if (v7)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v7) != TypeID)
    {
      CFRelease(v7);
      uint64_t v7 = 0LL;
    }
  }

  CFRelease(v6);
  if (v4) {
LABEL_18:
  }
    CFRelease(v4);
  return v7;
}

CFDataRef DHCPInfoGetOptionData(CFDictionaryRef info, UInt8 code)
{
  CFStringRef v3 = CFStringCreateWithFormat(0LL, 0LL, @"Option_%d", code);
  if (!v3) {
    return 0LL;
  }
  CFStringRef v4 = v3;
  int Value = CFDictionaryGetValue(info, v3);
  CFTypeID TypeID = CFDataGetTypeID();
  if (Value && CFGetTypeID(Value) != TypeID) {
    int Value = 0LL;
  }
  CFRelease(v4);
  return (CFDataRef)Value;
}

CFDateRef DHCPInfoGetLeaseStartTime(CFDictionaryRef info)
{
  return (CFDateRef)CFDictionaryGetValue(info, @"LeaseStartTime");
}

CFDateRef DHCPInfoGetLeaseExpirationTime(CFDictionaryRef info)
{
  return (CFDateRef)CFDictionaryGetValue(info, @"LeaseExpirationTime");
}

uint64_t __SCNetworkInterfaceCreateCapabilities(const void *a1, unsigned int a2, const __CFDictionary *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  unsigned int v21 = a2;
  int v22 = 0;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID && (CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1)) != 0LL)
  {
    if (a2 == -1) {
      CFTypeID v8 = &v21;
    }
    else {
      CFTypeID v8 = 0LL;
    }
    int Capabilities = __getCapabilities(BSDName, v8, &v22);
    if (a3 && Capabilities && v22)
    {
      uint64_t v10 = 0LL;
      CFIndex v11 = &capabilityMappings;
      do
      {
        int v12 = *((_DWORD *)v11 + 3);
        if ((v12 & v22) != 0 && ((0xDCuLL >> v10) & 1) == 0)
        {
          if (CFDictionaryGetValueIfPresent(a3, **v11, (const void **)&number))
          {
            CFNumberRef v13 = number;
            CFTypeID v14 = CFNumberGetTypeID();
            if (v13)
            {
              if (CFGetTypeID(v13) == v14 && CFNumberGetValue(number, kCFNumberIntType, &valuePtr))
              {
                if (valuePtr)
                {
                  int v15 = v22;
                  int v16 = v21 | v22 & v12;
                  int v17 = ~v12;
                }

                else
                {
                  int v17 = ~v12;
                  int v16 = v21 & ~v12;
                  int v15 = v22;
                }

                unsigned int v21 = v16;
                int v22 = v15 & v17;
              }
            }
          }
        }

        ++v10;
        v11 += 2;
      }

      while (v10 != 10);
    }
  }

  else
  {
    _SCErrorSet(1002);
  }

  return v21;
}

uint64_t __getCapabilities(const __CFString *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  if (!_SC_cfstring_to_cstring(a1, (UInt8 *)&v30, 16LL, 0x600u))
  {
    CFTypeID v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      CFIndex v11 = (char *)&v30 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v8, v9, v11);
    }

    _SCErrorSet(1002);
    return 0LL;
  }

  int v5 = socket(2, 2, 0);
  if (v5 == -1)
  {
    int v12 = __error();
    _SCErrorSet(*v12);
    CFNumberRef v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      int v16 = (char *)&v30 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      CFIndex v18 = __error();
      CFIndex v19 = strerror(*v18);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v19;
      __SC_log_send(3, (uint64_t)v13, v14, v16);
    }

    return 0LL;
  }

  int v6 = v5;
  if (ioctl(v5, 0xC020695BuLL, &v30) == -1)
  {
    unsigned int v21 = __error();
    _SCErrorSet(*v21);
    uint64_t v7 = 0LL;
    int v22 = *__error();
    if (v22 != 6 && v22 != 16)
    {
      uint64_t v23 = __log_SCNetworkConfiguration();
      uint64_t v24 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v23, (os_log_type_t)v24))
      {
        uint64_t v25 = _os_log_pack_size();
        CFTypeID v26 = (char *)&v30 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v27 = _os_log_pack_fill();
        CFNumberRef v28 = __error();
        CFTypeID v29 = strerror(*v28);
        *(_DWORD *)uint64_t v27 = 136315138;
        *(void *)(v27 + 4) = v29;
        __SC_log_send(5, (uint64_t)v23, v24, v26);
      }

      uint64_t v7 = 0LL;
    }
  }

  else
  {
    if (a2) {
      *a2 = DWORD1(v31);
    }
    if (a3) {
      *a3 = v31;
    }
    uint64_t v7 = 1LL;
  }

  close(v6);
  return v7;
}

CFNumberRef SCNetworkInterfaceCopyCapability(const void *a1, CFMutableDictionaryRef Mutable)
{
  v16[1] = *MEMORY[0x1895F89C0];
  v16[0] = 0LL;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1)) == 0LL)
  {
LABEL_19:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (Mutable)
  {
    uint64_t v6 = 0LL;
    while (!CFEqual(Mutable, *(&capabilityMappings)[v6]))
    {
      v6 += 2LL;
      if (v6 == 20) {
        goto LABEL_19;
      }
    }

    int v13 = HIDWORD((&capabilityMappings)[v6 + 1]);
    if ((v13 & ~LODWORD(v16[0])) == 0)
    {
      BOOL valuePtr = (v13 & ~HIDWORD(v16[0])) == 0;
      return CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    }

    goto LABEL_19;
  }

  uint64_t v7 = 0LL;
  int v8 = v16[0];
  uint64_t v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
  uint64_t v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
  do
  {
    int v11 = HIDWORD((&capabilityMappings)[v7 + 1]);
    if ((v11 & ~v8) == 0)
    {
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, v9, v10);
      }
      BOOL valuePtr = (v11 & ~HIDWORD(v16[0])) == 0;
      CFNumberRef v12 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, *(&capabilityMappings)[v7], v12);
      CFRelease(v12);
      int v8 = v16[0] & ~v11;
      LODWORD(v16[0]) = v8;
    }

    v7 += 2LL;
  }

  while (v7 != 20);
  return Mutable;
}

uint64_t SCNetworkInterfaceSetCapability(const void *a1, const void *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v16 = 0;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1) {
    goto LABEL_15;
  }
  if (CFGetTypeID(a1) != TypeID) {
    goto LABEL_15;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  if (!BSDName) {
    goto LABEL_15;
  }
  int v8 = BSDName;
  uint64_t v9 = 0LL;
  uint64_t v10 = &capabilityMappings;
  while (!CFEqual(a2, **v10))
  {
    ++v9;
    v10 += 2;
    if (v9 == 10) {
      goto LABEL_15;
    }
  }

  if (((0xDCuLL >> v9) & 1) != 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    CFTypeID v11 = CFNumberGetTypeID();
    if (CFGetTypeID(a3) != v11) {
      goto LABEL_15;
    }
  }

  if ((*((_DWORD *)v10 + 3) & v16) == 0)
  {
LABEL_15:
    _SCErrorSet(1002);
    return 0LL;
  }

  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
  if (Configuration)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Configuration);
    CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
  }

  else
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  }

  if (a3)
  {
    CFDictionarySetValue(MutableCopy, a2, a3);
  }

  else
  {
    CFDictionaryRemoveValue(MutableCopy, a2);
    if (!CFDictionaryGetCount(MutableCopy))
    {
      CFRelease(MutableCopy);
      return SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, 0LL);
    }
  }

  uint64_t v14 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v14;
}

uint64_t __SCNetworkInterfaceCreateMediaOptions(const void *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1)) == 0LL)
  {
    _SCErrorSet(1002);
    return 0xFFFFFFFFLL;
  }

  uint64_t v6 = __copyMediaList(BSDName, 0LL);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)(v6 + 32) <= 0)
  {
    __freeMediaList((char *)v6);
    return 0xFFFFFFFFLL;
  }

  int v7 = **(_DWORD **)(v6 + 36) & 0xE0;
  __freeMediaList((char *)v6);
  if (v7 == 128)
  {
    char v8 = 0;
    uint64_t v9 = &ifm_subtype_ieee80211_descriptions;
    uint64_t v10 = &ifm_subtype_ieee80211_option_descriptions;
  }

  else if (v7 == 32)
  {
    char v8 = 0;
    uint64_t v9 = &ifm_subtype_ethernet_descriptions;
    uint64_t v10 = &ifm_subtype_ethernet_option_descriptions;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    char v8 = 1;
  }

  int Value = (const __CFString *)CFDictionaryGetValue(a2, @"MediaSubType");
  CFTypeID v14 = CFStringGetTypeID();
  if (!Value) {
    return 0xFFFFFFFFLL;
  }
  if (CFGetTypeID(Value) != v14) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = _SC_cfstring_to_cstring(Value, 0LL, 0LL, 0x600u);
  if (!v15) {
    return 0xFFFFFFFFLL;
  }
  int v16 = (char *)v15;
  for (uint64_t i = 0LL; i != 12; i += 4LL)
  {
    if (!strcasecmp(v16, *(const char **)&ifm_subtype_shared_descriptions[i + 2]))
    {
      uint64_t v9 = &ifm_subtype_shared_descriptions[i];
      goto LABEL_28;
    }
  }

  if ((v8 & 1) != 0 || (CFIndex v18 = (const char *)*((void *)v9 + 1)) == 0LL)
  {
LABEL_25:
    CFIndex v19 = v16;
LABEL_26:
    CFAllocatorDeallocate(0LL, v19);
    return 0xFFFFFFFFLL;
  }

  while (strcasecmp(v16, v18))
  {
    CFIndex v18 = (const char *)*((void *)v9 + 3);
    v9 += 4;
    if (!v18) {
      goto LABEL_25;
    }
  }

uint64_t __copyMediaList(const __CFString *a1, char *a2)
{
  v26[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = MEMORY[0x186E08750](0LL, 44LL, 0LL);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 28) = 0u;
  if (!_SC_cfstring_to_cstring(a1, (UInt8 *)v4, 16LL, 0x600u))
  {
    uint64_t v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, (os_log_type_t)v10)) {
      goto LABEL_16;
    }
    uint64_t v11 = _os_log_pack_size();
    CFNumberRef v12 = (char *)v26 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    int v13 = 5;
LABEL_12:
    __SC_log_send(v13, (uint64_t)v9, v10, v12);
    goto LABEL_16;
  }

  int v5 = socket(2, 2, 0);
  if (v5 == -1)
  {
    uint64_t v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v9, (os_log_type_t)v10)) {
      goto LABEL_16;
    }
    uint64_t v14 = _os_log_pack_size();
    CFNumberRef v12 = (char *)v26 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    int v16 = __error();
    uint64_t v17 = strerror(*v16);
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v15 + 4) = v17;
    int v13 = 3;
    goto LABEL_12;
  }

  int v6 = v5;
  if (ioctl(v5, 0xC02C6948uLL, v4) != -1)
  {
    uint64_t v7 = *(unsigned int *)(v4 + 32);
    if ((int)v7 < 1
      || (*(void *)(v4 + 36) = MEMORY[0x186E08750](0LL, 4 * v7, 0LL), ioctl(v6, 0xC02C6948uLL, v4) != -1))
    {
      close(v6);
      char v8 = 1;
      if (!a2) {
        return v4;
      }
      goto LABEL_17;
    }

    CFIndex v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      unsigned int v21 = (char *)v26 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      uint64_t v23 = __error();
      CFIndex v24 = strerror(*v23);
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = v24;
      __SC_log_send(5, (uint64_t)v18, v19, v21);
    }
  }

  close(v6);
LABEL_16:
  __freeMediaList((char *)v4);
  _SCErrorSet(1001);
  char v8 = 0;
  uint64_t v4 = 0LL;
  if (a2) {
LABEL_17:
  }
    *a2 = v8;
  return v4;
}

void __freeMediaList(char *ptr)
{
  uint64_t v2 = *(void **)(ptr + 36);
  if (v2) {
    CFAllocatorDeallocate(0LL, v2);
  }
  CFAllocatorDeallocate(0LL, ptr);
}

Boolean SCNetworkInterfaceCopyMediaOptions( SCNetworkInterfaceRef interface, CFDictionaryRef *current, CFDictionaryRef *active, CFArrayRef *available, Boolean filter)
{
  int v5 = filter;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface)) == 0LL)
  {
    _SCErrorSet(1002);
    LOBYTE(v12) = 0;
    return v12;
  }

  uint64_t v12 = __copyMediaList(BSDName, 0LL);
  if (v12)
  {
    uint64_t v13 = v12;
    if (active) {
      *active = 0LL;
    }
    if (current) {
      *current = 0LL;
    }
    if (available)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      if (*(int *)(v13 + 32) >= 1)
      {
        uint64_t v15 = 0LL;
        do
        {
          MediaDictionary = __createMediaDictionary(*(_DWORD *)(*(void *)(v13 + 36) + 4 * v15), v5);
          if (MediaDictionary)
          {
            uint64_t v17 = MediaDictionary;
            if (active && !*active && *(_DWORD *)(v13 + 28) == *(_DWORD *)(*(void *)(v13 + 36) + 4 * v15)) {
              *active = (CFDictionaryRef)CFRetain(MediaDictionary);
            }
            if (current && !*current && *(_DWORD *)(v13 + 16) == *(_DWORD *)(*(void *)(v13 + 36) + 4 * v15)) {
              *current = (CFDictionaryRef)CFRetain(v17);
            }
            v21.length = CFArrayGetCount(Mutable);
            v21.CFIndex location = 0LL;
            if (!CFArrayContainsValue(Mutable, v21, v17)) {
              CFArrayAppendValue(Mutable, v17);
            }
            CFRelease(v17);
          }

          ++v15;
        }

        while (v15 < *(int *)(v13 + 32));
      }

      *available = Mutable;
    }

    if (active && !*active) {
      *active = __createMediaDictionary(*(_DWORD *)(v13 + 28), 0);
    }
    if (!current || *current) {
      goto LABEL_40;
    }
    if (active)
    {
      int v18 = *(_DWORD *)(v13 + 16);
      if (*(_DWORD *)(v13 + 28) == v18)
      {
        if (!*active)
        {
LABEL_40:
          __freeMediaList((char *)v13);
          LOBYTE(v12) = 1;
          return v12;
        }

        uint64_t v19 = (const __CFDictionary *)CFRetain(*active);
LABEL_39:
        *current = v19;
        goto LABEL_40;
      }
    }

    else
    {
      int v18 = *(_DWORD *)(v13 + 16);
    }

    uint64_t v19 = __createMediaDictionary(v18, 0);
    goto LABEL_39;
  }

  return v12;
}

__CFDictionary *__createMediaDictionary(int a1, int a2)
{
  int v2 = a1;
  if (a2)
  {
    if ((a1 & 0xF001F) == 2 || (a1 & 0x8000000) != 0) {
      return 0LL;
    }
  }

  if ((a1 & 0xE0) == 0x20)
  {
    uint64_t v4 = &ifm_subtype_ethernet_descriptions;
    int v5 = &ifm_subtype_ethernet_option_descriptions;
  }

  else
  {
    if ((a1 & 0xE0) != 0x80) {
      return 0LL;
    }
    uint64_t v4 = &ifm_subtype_ieee80211_descriptions;
    int v5 = &ifm_subtype_ieee80211_option_descriptions;
  }

  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  uint64_t v7 = 0LL;
  int v8 = v2 & 0xF001F;
  while (v8 != ifm_subtype_shared_descriptions[v7])
  {
    v7 += 4LL;
    if (v7 == 12) {
      goto LABEL_17;
    }
  }

  CFStringRef v9 = CFStringCreateWithCString(0LL, *(const char **)&ifm_subtype_shared_descriptions[v7 + 2], 0x600u);
  if (v9)
  {
LABEL_22:
    CFDictionaryAddValue(Mutable, @"MediaSubType", v9);
    CFRelease(v9);
    goto LABEL_23;
  }

LABEL_36:
  CFDictionaryAddValue(Mutable, @"MediaOptions", v11);
  CFRelease(v11);
  return Mutable;
}

  if (v8)
  {
    CFIndex v41 = CFStringGetTypeID();
    if (v25)
    {
      if (CFGetTypeID(v25) == v41)
      {
        CFIndex v42 = __log_SCNetworkConfiguration();
        CFIndex v43 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v42, (os_log_type_t)v43))
        {
          uint64_t v44 = _os_log_pack_size();
          CFTypeID v45 = (char *)&v168 - ((MEMORY[0x1895F8858](v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v42, v43, v45);
        }

        SCPreferencesSetValue(a2, @"Model", v25);
        uint64_t v46 = CFStringGetTypeID();
        CFTypeID v40 = v25;
        goto LABEL_47;
      }
    }
  }

  int v47 = __log_SCNetworkConfiguration();
  uint64_t v48 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v47, (os_log_type_t)v48))
  {
    uint64_t v49 = _os_log_pack_size();
    uint64_t v50 = (char *)&v168 - ((MEMORY[0x1895F8858](v49) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v47, v48, v50);
  }

  CFTypeID v40 = v25;
LABEL_45:
  char v51 = CFStringGetTypeID();
  if (!v40) {
    goto LABEL_51;
  }
  uint64_t v46 = v51;
  CFIndex v25 = v26;
LABEL_47:
  if (CFGetTypeID(v40) == v46)
  {
    uint64_t v52 = CFStringGetTypeID();
    if (v25)
    {
      if (CFGetTypeID(v25) == v52 && !CFEqual(v40, v25))
      {
        v180 = 0;
        uint64_t v93 = __log_SCNetworkConfiguration();
        uint64_t v94 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v93, (os_log_type_t)v94))
        {
          uint64_t v95 = _os_log_pack_size();
          int v96 = (char *)&v168 - ((MEMORY[0x1895F8858](v95) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v97 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v97 = 138412546;
          *(void *)(v97 + 4) = v179;
          *(_WORD *)(v97 + 12) = 2112;
          *(void *)(v97 + 14) = a2;
          __SC_log_send(5, (uint64_t)v93, v94, v96);
        }

        goto LABEL_80;
      }
    }
  }

CFArrayRef SCNetworkInterfaceCopyMediaSubTypes(CFArrayRef available)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!available || CFGetTypeID(available) != TypeID)
  {
    int v11 = 1002;
    goto LABEL_15;
  }

  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFIndex Count = CFArrayGetCount(available);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0LL; i != v5; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(available, i);
      CFTypeID v8 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v8)
        {
          int Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSubType");
          CFTypeID v10 = CFStringGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == v10)
            {
              v13.length = CFArrayGetCount(Mutable);
              v13.CFIndex location = 0LL;
              if (!CFArrayContainsValue(Mutable, v13, Value)) {
                CFArrayAppendValue(Mutable, Value);
              }
            }
          }
        }
      }
    }
  }

  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    int v11 = 0;
LABEL_15:
    _SCErrorSet(v11);
    return 0LL;
  }

  return Mutable;
}

CFArrayRef SCNetworkInterfaceCopyMediaSubTypeOptions(CFArrayRef available, CFStringRef subType)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!available || CFGetTypeID(available) != TypeID)
  {
    int v15 = 1002;
    goto LABEL_18;
  }

  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFIndex Count = CFArrayGetCount(available);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0LL; i != v7; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(available, i);
      CFTypeID v10 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v10)
        {
          int Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSubType");
          CFTypeID v12 = CFStringGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == v12)
            {
              if (CFEqual(subType, Value))
              {
                CFRange v13 = CFDictionaryGetValue(ValueAtIndex, @"MediaOptions");
                CFTypeID v14 = CFArrayGetTypeID();
                if (v13)
                {
                  if (CFGetTypeID(v13) == v14)
                  {
                    v17.length = CFArrayGetCount(Mutable);
                    v17.CFIndex location = 0LL;
                    if (!CFArrayContainsValue(Mutable, v17, v13)) {
                      CFArrayAppendValue(Mutable, v13);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    int v15 = 0;
LABEL_18:
    _SCErrorSet(v15);
    return 0LL;
  }

  return Mutable;
}

BOOL _SCNetworkInterfaceIsPhysicalEthernet(_DWORD *a1)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  char v11 = 0;
  _SCErrorSet(0);
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    goto LABEL_14;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
  if (!CFEqual(InterfaceType, @"Ethernet")
    || _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)a1)
    || _SCNetworkInterfaceIsHiddenInterface((unsigned __int8 *)a1)
    || _SCNetworkInterfaceIsTethered(a1)
    || _SCNetworkInterfaceIsBluetoothPAN(a1))
  {
    return 0LL;
  }

  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  if (!BSDName)
  {
LABEL_14:
    _SCErrorSet(1002);
    return 0LL;
  }

  uint64_t v5 = __copyMediaList(BSDName, &v11);
  if (v5)
  {
    uint64_t v6 = v5;
    _SCErrorSet(0);
    uint64_t v7 = 0LL;
    if ((*(_DWORD *)(v6 + 16) & 0xE0) != 0x20)
    {
LABEL_24:
      __freeMediaList((char *)v6);
      return v7;
    }

    uint64_t v8 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v8 == 1)
    {
      if ((**(_DWORD **)(v6 + 36) & 0xF001F) == 0) {
        goto LABEL_22;
      }
    }

    else if ((int)v8 < 1)
    {
LABEL_22:
      uint64_t v7 = 0LL;
      goto LABEL_24;
    }

    uint64_t v10 = *(void *)(v6 + 36);
    while ((*(_BYTE *)(v10 + 2) & 0x10) == 0)
    {
      v10 += 4LL;
      if (!--v8) {
        goto LABEL_22;
      }
    }

    uint64_t v7 = 1LL;
    goto LABEL_24;
  }

  return v11 != 0;
}

Boolean SCNetworkInterfaceCopyMTU(SCNetworkInterfaceRef interface, int *mtu_cur, int *mtu_min, int *mtu_max)
{
  kern_return_t MatchingServices;
  io_registry_entry_t v30;
  io_object_t v31;
  CFNumberRef CFProperty;
  CFNumberRef v33;
  CFTypeID v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFTypeID v37;
  int v38;
  CFStringRef InterfaceType;
  CFArrayRef MemberInterfaces;
  CFArrayRef v41;
  CFIndex Count;
  CFIndex v43;
  int v44;
  CFIndex v45;
  const __SCNetworkInterface *ValueAtIndex;
  int v47;
  int valuePtr;
  io_registry_entry_t parent;
  io_iterator_t existing[2];
  char cStr[16];
  __int128 v52;
  uint64_t v53;
  uint64_t v53 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface)) == 0LL)
  {
LABEL_15:
    _SCErrorSet(1002);
    return 0;
  }

  *(_OWORD *)cStr = 0u;
  uint64_t v52 = 0u;
  if (!_SC_cfstring_to_cstring(BSDName, (UInt8 *)cStr, 16LL, 0x600u))
  {
    CFRange v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      int v16 = (char *)&valuePtr - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v13, v14, v16);
    }

    goto LABEL_15;
  }

  int v10 = socket(2, 2, 0);
  if (v10 != -1)
  {
    int v11 = v10;
    if (ioctl(v10, 0xC0206933uLL, cStr) == -1)
    {
      CFTypeID v27 = __error();
      _SCErrorSet(*v27);
      Boolean v17 = 0;
LABEL_84:
      close(v11);
      return v17;
    }

    if (mtu_cur) {
      *mtu_cur = v52;
    }
    if (mtu_min)
    {
      *mtu_min = v52;
      if (!mtu_max)
      {
        if (!ioctl(v11, 0xC0206944uLL, cStr))
        {
          uint64_t v44 = DWORD1(v52);
          if (SDWORD1(v52) <= 72) {
            uint64_t v44 = 72;
          }
          *mtu_min = v44;
          char v12 = 1;
          goto LABEL_75;
        }

        char v12 = 1;
        goto LABEL_24;
      }
    }

    else if (!mtu_max)
    {
      goto LABEL_83;
    }

    *mtu_max = v52;
    if (!ioctl(v11, 0xC0206944uLL, cStr))
    {
      if (mtu_min)
      {
        CFTypeID v38 = DWORD1(v52);
        if (SDWORD1(v52) <= 72) {
          CFTypeID v38 = 72;
        }
        *mtu_min = v38;
      }

      char v12 = 0;
      *mtu_max = DWORD2(v52);
      goto LABEL_73;
    }

    char v12 = 0;
LABEL_24:
    *(void *)existing = 0LL;
    parent = 0;
    CFNumberRef v28 = _SC_IONetworkInterfaceBSDNameMatching(cStr);
    if (!v28) {
      goto LABEL_53;
    }
    MatchingServices = IOServiceGetMatchingServices(__getIOMTULimits_masterPort, v28, existing);
    uint64_t v30 = 0;
    __int128 v31 = existing[0];
    if (!MatchingServices && existing[0])
    {
      uint64_t v30 = IOIteratorNext(existing[0]);
      __int128 v31 = existing[0];
    }

    if (v31) {
      IOObjectRelease(v31);
    }
    if (v30)
    {
      CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(v30, @"IOInterfaceType", 0LL, 0);
      if (CFProperty)
      {
        int v33 = CFProperty;
        CFIndex v34 = CFNumberGetTypeID();
        if (CFGetTypeID(v33) == v34) {
          CFNumberGetValue(v33, kCFNumberIntType, &existing[1]);
        }
        CFRelease(v33);
      }

      IORegistryEntryGetParentEntry(v30, "IOService", &parent);
      IOObjectRelease(v30);
      if (parent)
      {
        uint64_t v35 = (const __CFNumber *)IORegistryEntryCreateCFProperty(parent, @"IOMaxPacketSize", 0LL, 0);
        if (v35)
        {
          unsigned int v36 = v35;
          int v37 = CFNumberGetTypeID();
          if (CFGetTypeID(v36) == v37)
          {
            CFNumberGetValue(v36, kCFNumberIntType, &valuePtr);
            if (existing[1] == 6) {
              valuePtr -= 18;
            }
            if (mtu_min) {
              *mtu_min = 72;
            }
            if ((v12 & 1) == 0) {
              *mtu_max = valuePtr;
            }
          }

          CFRelease(v36);
        }

        IOObjectRelease(parent);
      }
    }

    else
    {
LABEL_53:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(interface);
      if (CFEqual(InterfaceType, @"Bridge"))
      {
        MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(interface);
        if (MemberInterfaces)
        {
          CFIndex v41 = MemberInterfaces;
          CFIndex Count = CFArrayGetCount(MemberInterfaces);
          CFIndex v43 = Count;
          if (Count < 2)
          {
            if (Count != 1) {
              goto LABEL_73;
            }
          }

          else
          {
            if (mtu_min) {
              *mtu_min = 72;
            }
            if ((v12 & 1) == 0) {
              *mtu_max = 0xFFFF;
            }
          }

          CFTypeID v45 = 0LL;
          do
          {
            ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v41, v45);
            if (SCNetworkInterfaceCopyMTU(ValueAtIndex, 0LL, (int *)&existing[1], (int *)existing))
            {
            }

            ++v45;
          }

          while (v43 != v45);
        }
      }
    }

Boolean SCNetworkInterfaceSetMediaOptions( SCNetworkInterfaceRef interface, CFStringRef subtype, CFArrayRef options)
{
  available[1] = *(CFArrayRef *)MEMORY[0x1895F89C0];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID)
  {
    _SCErrorSet(1002);
    return 0;
  }

  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(interface);
  if (Configuration)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Configuration);
    CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
    if (subtype) {
      goto LABEL_5;
    }
  }

  else
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (subtype)
    {
LABEL_5:
      available[0] = 0LL;
      CFArrayRef v9 = options;
      if (!options) {
        CFArrayRef v9 = CFArrayCreate(0LL, 0LL, 0LL, MEMORY[0x189605228]);
      }
      if (SCNetworkInterfaceCopyMediaOptions(interface, 0LL, 0LL, available, 0))
      {
        if (available[0])
        {
          int v10 = SCNetworkInterfaceCopyMediaSubTypes(available[0]);
          int v11 = v10;
          if (v10 && (v37.length = CFArrayGetCount(v10), v37.CFIndex location = 0LL, CFArrayContainsValue(v11, v37, subtype)))
          {
            char v12 = SCNetworkInterfaceCopyMediaSubTypeOptions(available[0], subtype);
            CFRange v13 = v12;
            if (v12)
            {
              v38.length = CFArrayGetCount(v12);
              v38.CFIndex location = 0LL;
              if (CFArrayContainsValue(v13, v38, v9))
              {
                CFDictionarySetValue(MutableCopy, @"MediaSubType", subtype);
                CFDictionarySetValue(MutableCopy, @"MediaOptions", v9);
                char v14 = 0;
                goto LABEL_28;
              }
            }

            CFTypeID v29 = __log_SCNetworkConfiguration();
            uint64_t v30 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v29, (os_log_type_t)v30))
            {
              uint64_t v31 = _os_log_pack_size();
              v35[1] = (uint64_t)v35;
              uint64_t v32 = MEMORY[0x1895F8858](v31);
              v35[0] = (uint64_t)v29;
              int v33 = (char *)v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v34 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v34 = 138412290;
              *(void *)(v34 + 4) = subtype;
              __SC_log_send(6, v35[0], v30, v33);
            }

            _SCErrorSet(1002);
          }

          else
          {
            uint64_t v24 = __log_SCNetworkConfiguration();
            uint64_t v25 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v24, (os_log_type_t)v25))
            {
              uint64_t v26 = _os_log_pack_size();
              CFTypeID v27 = (char *)v35 - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send(6, (uint64_t)v24, v25, v27);
            }

            _SCErrorSet(1002);
            CFRange v13 = 0LL;
          }

          goto LABEL_27;
        }

        _SCErrorSet(1002);
      }

      else
      {
        uint64_t v20 = __log_SCNetworkConfiguration();
        uint64_t v21 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v20, (os_log_type_t)v21))
        {
          uint64_t v22 = _os_log_pack_size();
          uint64_t v23 = (char *)v35 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v20, v21, v23);
          char v14 = 1;
          CFRange v13 = 0LL;
          int v11 = 0LL;
          goto LABEL_28;
        }
      }

      CFRange v13 = 0LL;
      int v11 = 0LL;
LABEL_27:
      char v14 = 1;
LABEL_28:
      if (available[0]) {
        CFRelease(available[0]);
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v13) {
        CFRelease(v13);
      }
      if (options)
      {
        if ((v14 & 1) != 0) {
          goto LABEL_38;
        }
      }

      else
      {
        CFRelease(v9);
        if ((v14 & 1) != 0) {
          goto LABEL_38;
        }
      }

Boolean SCNetworkInterfaceSetMTU(SCNetworkInterfaceRef interface, int mtu)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  int valuePtr = mtu;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID)
  {
    _SCErrorSet(1002);
    return 0;
  }

  if (!SCNetworkInterfaceCopyMTU(interface, 0LL, &mtu_min, &mtu_max))
  {
    CFArrayRef v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      char v12 = &v18[-((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v9, v10, v12);
    }

    return 0;
  }

  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(interface);
  if (Configuration)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Configuration);
    CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
  }

  else
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  }

  if (mtu_min <= mtu && mtu_max >= mtu)
  {
    CFNumberRef v13 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(MutableCopy, @"MTU", v13);
    goto LABEL_15;
  }

  if (!mtu)
  {
    CFDictionaryRemoveValue(MutableCopy, @"MTU");
    if (CFDictionaryGetCount(MutableCopy))
    {
LABEL_16:
      Boolean v7 = SCNetworkInterfaceSetConfiguration(interface, MutableCopy);
      if (!MutableCopy) {
        return v7;
      }
      goto LABEL_22;
    }

    CFNumberRef v13 = MutableCopy;
    CFMutableStringRef MutableCopy = 0LL;
LABEL_15:
    CFRelease(v13);
    goto LABEL_16;
  }

  char v14 = __log_SCNetworkConfiguration();
  uint64_t v15 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v14, (os_log_type_t)v15))
  {
    uint64_t v16 = _os_log_pack_size();
    uint64_t v17 = &v18[-((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v14, v15, v17);
  }

  _SCErrorSet(1002);
  Boolean v7 = 0;
  if (MutableCopy) {
LABEL_22:
  }
    CFRelease(MutableCopy);
  return v7;
}

CFStringRef SCPreferencesPathKeyCreate(const __CFAllocator *a1, CFStringRef format, ...)
{
  return CFStringCreateWithFormatAndArguments(a1, 0LL, format, va);
}

CFStringRef SCPreferencesPathKeyCreateNetworkServices(const __CFAllocator *a1)
{
  return CFStringCreateWithFormat(a1, 0LL, @"/%@", @"NetworkServices");
}

CFStringRef SCPreferencesPathKeyCreateNetworkServiceEntity(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  if (a3) {
    return CFStringCreateWithFormat(a1, 0LL, @"/%@/%@/%@", @"NetworkServices", a2, a3, v5);
  }
  else {
    return CFStringCreateWithFormat(a1, 0LL, @"/%@/%@", @"NetworkServices", a2, v4, v5);
  }
}

CFStringRef SCPreferencesPathKeyCreateSets(const __CFAllocator *a1)
{
  return CFStringCreateWithFormat(a1, 0LL, @"/%@", @"Sets");
}

CFStringRef SCPreferencesPathKeyCreateSet(const __CFAllocator *a1, uint64_t a2)
{
  return CFStringCreateWithFormat(a1, 0LL, @"/%@/%@", @"Sets", a2);
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkGlobalEntity( const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@",  @"Sets",  a2,  @"Network",  @"Global",  a3,  *MEMORY[0x1895F89C0]);
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkInterfaceEntity( const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@/%@",  @"Sets",  a2,  @"Network",  @"Interface",  a3,  a4);
  }
  else {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@",  @"Sets",  a2,  @"Network",  @"Interface",  a3);
  }
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkService(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  if (a3) {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@",  @"Sets",  a2,  @"Network",  @"Service",  a3,  v5);
  }
  else {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@",  @"Sets",  a2,  @"Network",  @"Service",  v4,  v5);
  }
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkServiceEntity( const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@/%@",  @"Sets",  a2,  @"Network",  @"Service",  a3,  a4);
  }
  else {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@",  @"Sets",  a2,  @"Network",  @"Service",  a3);
  }
}

CFStringRef SCPreferencesPathKeyCreateCategories(const __CFAllocator *a1)
{
  return CFStringCreateWithFormat(a1, 0LL, @"/%@", @"Categories");
}

CFStringRef SCPreferencesPathKeyCreateCategory(const __CFAllocator *a1, uint64_t a2)
{
  return CFStringCreateWithFormat(a1, 0LL, @"/%@/%@", @"Categories", a2);
}

CFStringRef SCPreferencesPathKeyCreateCategoryService( const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (a4) {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@",  @"Categories",  a2,  a3,  @"Service",  a4,  v6);
  }
  else {
    return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@",  @"Categories",  a2,  a3,  @"Service",  v5,  v6);
  }
}

CFStringRef SCPreferencesPathKeyCreateCategoryServiceEntity( const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CFStringCreateWithFormat( a1,  0LL,  @"/%@/%@/%@/%@/%@/%@",  @"Categories",  a2,  a3,  @"Service",  a4,  a5);
}

os_log_t __log_SCNetworkConfiguration()
{
  os_log_t result = (os_log_t)__log_SCNetworkConfiguration_log;
  if (!__log_SCNetworkConfiguration_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
    __log_SCNetworkConfiguration_log = (uint64_t)result;
  }

  return result;
}

void __SCNetworkConfigurationReport( int a1, const char *a2, const __SCPreferences *a3, SCPreferencesRef prefs)
{
}

void logConfiguration_NetworkInterfaces(int a1, const char *a2, SCPreferencesRef prefs)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  int Value = (const __CFArray *)SCPreferencesGetValue(prefs, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    uint64_t v8 = (const __CFString *)SCPreferencesGetValue(prefs, @"Model");
    CFIndex Count = CFArrayGetCount(Value);
    uint64_t v10 = (os_log_s *)__log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      uint64_t v10 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v10;
    }

    uint64_t v11 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v10, (os_log_type_t)v11))
    {
      uint64_t v13 = _os_log_pack_size();
      CFTypeID v40 = (const __CFString *)&v36;
      char v14 = (char *)&v36 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      if (a2) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = "";
      }
      uint64_t v17 = " ";
      if (!a2) {
        uint64_t v17 = "";
      }
      *(_DWORD *)uint64_t v15 = 136315650;
      *(void *)(v15 + 4) = v16;
      if (v8) {
        uint64_t v18 = v8;
      }
      else {
        uint64_t v18 = @"No model";
      }
      *(_WORD *)(v15 + 12) = 2080;
      *(void *)(v15 + 14) = v17;
      *(_WORD *)(v15 + 22) = 2112;
      *(void *)(v15 + 24) = v18;
      __SC_log_send(a1, (uint64_t)v10, v11, v14);
    }

    if (Count >= 1)
    {
      CFIndex v19 = 0LL;
      *(void *)&__int128 v12 = 138413058LL;
      __int128 v36 = v12;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v19);
        CFTypeID v21 = CFDictionaryGetTypeID();
        if (ValueAtIndex)
        {
          if (CFGetTypeID(ValueAtIndex) == v21)
          {
            uint64_t v22 = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
            CFTypeID v23 = CFStringGetTypeID();
            if (v22)
            {
              if (CFGetTypeID(v22) == v23)
              {
                uint64_t v24 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, @"IOBuiltin");
                if (v24) {
                  BOOL v25 = CFBooleanGetValue(v24) != 0;
                }
                else {
                  BOOL v25 = 0;
                }
                if (CFDictionaryContainsKey(ValueAtIndex, @"HiddenConfiguration")) {
                  BOOL v26 = 1;
                }
                else {
                  BOOL v26 = CFDictionaryContainsKey(ValueAtIndex, @"HiddenInterface") != 0;
                }
                BOOL v39 = v26;
                CFTypeID v27 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"SCNetworkInterfaceInfo");
                CFTypeID v40 = (const __CFString *)CFDictionaryGetValue(v27, @"UserDefinedName");
                CFNumberRef v28 = (os_log_s *)__log_SCNetworkConfiguration_log;
                if (!__log_SCNetworkConfiguration_log)
                {
                  CFNumberRef v28 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
                  __log_SCNetworkConfiguration_log = (uint64_t)v28;
                }

                uint64_t v29 = _SC_syslog_os_log_mapping(a1);
                if (__SC_log_enabled(a1, v28, (os_log_type_t)v29))
                {
                  uint64_t v30 = _os_log_pack_size();
                  BOOL v37 = v25;
                  CFRange v38 = &v36;
                  uint64_t v31 = (char *)&v36 - ((MEMORY[0x1895F8858](v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  __error();
                  uint64_t v32 = _os_log_pack_fill();
                  int v33 = @"???";
                  if (v40) {
                    int v33 = v40;
                  }
                  *(_DWORD *)uint64_t v32 = v36;
                  *(void *)(v32 + 4) = v22;
                  uint64_t v34 = "";
                  uint64_t v35 = ", built-in";
                  if (!v37) {
                    uint64_t v35 = "";
                  }
                  *(_WORD *)(v32 + 12) = 2112;
                  if (v39) {
                    uint64_t v34 = ", hidden";
                  }
                  *(void *)(v32 + 14) = v33;
                  *(_WORD *)(v32 + 22) = 2080;
                  *(void *)(v32 + 24) = v35;
                  *(_WORD *)(v32 + 32) = 2080;
                  *(void *)(v32 + 34) = v34;
                  __SC_log_send(a1, (uint64_t)v28, v29, v31);
                }
              }
            }
          }
        }

        ++v19;
      }

      while (Count != v19);
    }
  }

void logConfiguration_preferences(int a1, const char *a2, SCPreferencesRef prefs)
{
  uint64_t v174 = *MEMORY[0x1895F89C0];
  v153 = prefs;
  int Value = (const __CFString *)SCPreferencesGetValue(prefs, @"Model");
  uint64_t v6 = (os_log_s *)__log_SCNetworkConfiguration_log;
  if (!__log_SCNetworkConfiguration_log)
  {
    uint64_t v6 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
    __log_SCNetworkConfiguration_log = (uint64_t)v6;
  }

  uint64_t v7 = _SC_syslog_os_log_mapping(a1);
  if (__SC_log_enabled(a1, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    CFArrayRef v9 = (char *)&v153 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    if (a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = "";
    }
    __int128 v12 = " ";
    if (!a2) {
      __int128 v12 = "";
    }
    *(_DWORD *)uint64_t v10 = 136315650;
    *(void *)(v10 + 4) = v11;
    if (Value) {
      uint64_t v13 = Value;
    }
    else {
      uint64_t v13 = @"No model";
    }
    *(_WORD *)(v10 + 12) = 2080;
    *(void *)(v10 + 14) = v12;
    *(_WORD *)(v10 + 22) = 2112;
    *(void *)(v10 + 24) = v13;
    __SC_log_send(a1, (uint64_t)v6, v7, v9);
  }

  int v173 = a1;
  char v14 = SCNetworkServiceCopyAll(v153);
  if (v14)
  {
    uint64_t v15 = v14;
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, v14);
    uint64_t v17 = v15;
    CFMutableArrayRef Mutable = MutableCopy;
    CFRelease(v17);
  }

  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }

  int v19 = v173;
  CFArrayRef v20 = SCNetworkSetCopyAll(v153);
  v167 = Mutable;
  if (v20)
  {
    CFTypeID v21 = v20;
    SCNetworkSetRef v156 = SCNetworkSetCopyCurrent(v153);
    CFIndex Count = CFArrayGetCount(v21);
    if (Count < 1) {
      goto LABEL_103;
    }
    CFIndex v23 = 0LL;
    *(void *)&__int128 v22 = 138412802LL;
    __int128 v155 = v22;
    CFIndex v154 = v21;
    while (1)
    {
      CFIndex v158 = v23;
      ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v21, v23);
      BOOL v25 = (os_log_s *)__log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        BOOL v25 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v25;
      }

      uint64_t v26 = _SC_syslog_os_log_mapping(v19);
      if (__SC_log_enabled(v19, v25, (os_log_type_t)v26))
      {
        uint64_t v27 = _os_log_pack_size();
        CFNumberRef v28 = (char *)&v153 - ((MEMORY[0x1895F8858](v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v29 = _os_log_pack_fill();
        CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
        CFStringRef Name = SCNetworkSetGetName(ValueAtIndex);
        if (ValueAtIndex == v156)
        {
          int v33 = ", current";
        }

        else if (!v156 || !ValueAtIndex || (int v32 = CFEqual(ValueAtIndex, v156), v33 = ", current", !v32))
        {
          int v33 = "";
        }

        *(_DWORD *)uint64_t v29 = v155;
        *(void *)(v29 + 4) = SetID;
        *(_WORD *)(v29 + 12) = 2112;
        *(void *)(v29 + 14) = Name;
        *(_WORD *)(v29 + 22) = 2080;
        *(void *)(v29 + 24) = v33;
        int v19 = v173;
        __SC_log_send(v173, (uint64_t)v25, v26, v28);
      }

      CFArrayRef v34 = SCNetworkSetCopyServices(ValueAtIndex);
      if (!v34) {
        goto LABEL_102;
      }
      uint64_t v35 = v34;
      ServiceOrder = SCNetworkSetGetServiceOrder(ValueAtIndex);
      BOOL v37 = ServiceOrder;
      if (ServiceOrder) {
        CFIndex v161 = CFArrayGetCount(ServiceOrder);
      }
      else {
        CFIndex v161 = 0LL;
      }
      CFIndex v38 = CFArrayGetCount(v35);
      CFIndex v39 = v38;
      if (v38 < 2)
      {
        if (v38 != 1) {
          goto LABEL_101;
        }
      }

      else
      {
        CFTypeID v40 = CFArrayCreateMutableCopy(0LL, 0LL, v35);
        v175.length = CFArrayGetCount(v40);
        v175.CFIndex location = 0LL;
        CFArraySortValues(v40, v175, (CFComparatorFunction)_SCNetworkServiceCompare, v37);
        CFRelease(v35);
        uint64_t v35 = v40;
      }

      CFIndex v41 = 0LL;
      CFIndex v42 = v167;
      v160 = v35;
      CFIndex v168 = v39;
      uint64_t v169 = v37;
      do
      {
        CFIndex v43 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v35, v41);
        CFStringRef ServiceID = SCNetworkServiceGetServiceID(v43);
        CFStringRef v45 = SCNetworkServiceGetName(v43);
        if (v45) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = &stru_189B68690;
        }
        Interface = SCNetworkServiceGetInterface(v43);
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        UserDefinedCFStringRef Name = (const __CFString *)__SCNetworkInterfaceGetUserDefinedName(Interface);
        *(void *)&__int128 v171 = v46;
        if (v46 == UserDefinedName || (uint64_t v50 = UserDefinedName) != 0LL && CFEqual(v46, UserDefinedName)) {
          uint64_t v50 = 0LL;
        }
        CFIndex v172 = (CFIndex)ServiceID;
        if (!v37
          || (v176.CFIndex location = 0LL,
              v176.length = v161,
              FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v37, v176, ServiceID),
              FirstIndexOfValue == -1))
        {
          uint64_t v69 = (os_log_s *)__log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            uint64_t v69 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v69;
          }

          int v70 = v173;
          uint64_t v71 = _SC_syslog_os_log_mapping(v173);
          if (__SC_log_enabled(v70, v69, (os_log_type_t)v71))
          {
            uint64_t v72 = _os_log_pack_size();
            v170 = &v153;
            CFRange v56 = (char *)&v153 - ((MEMORY[0x1895F8858](v72) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v166 = _os_log_pack_fill();
            LODWORD(v165) = __SCNetworkInterfaceOrder(Interface);
            if (BSDName) {
              CFTypeID v73 = ", ";
            }
            else {
              CFTypeID v73 = "";
            }
            if (BSDName) {
              CFIndex v74 = BSDName;
            }
            else {
              CFIndex v74 = &stru_189B68690;
            }
            v163 = v74;
            int v164 = v73;
            CFIndex v75 = " : ";
            if (!v50) {
              CFIndex v75 = "";
            }
            v162 = v75;
            if (!v50) {
              uint64_t v50 = &stru_189B68690;
            }
            else {
              CFIndex v76 = "";
            }
            if (SCNetworkInterfaceGetDisableUntilNeeded((const __SCPreferences **)Interface)) {
              v77 = ", disable-until-needed";
            }
            else {
              v77 = "";
            }
            else {
              CFTypeID v78 = "";
            }
            int Enabled = SCNetworkServiceGetEnabled(v43);
            CFTypeID v80 = ", disabled";
            if (Enabled) {
              CFTypeID v80 = "";
            }
            __os_log_helper_1_2_11_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32( v166,  v172,  v165,  v171,  (uint64_t)v164,  (uint64_t)v163,  (uint64_t)v162,  (uint64_t)v50,  (uint64_t)v76,  (uint64_t)v77,  (uint64_t)v78,  (uint64_t)v80);
            int v66 = v173;
            uint64_t v67 = (uint64_t)v69;
            uint64_t v68 = v71;
            goto LABEL_96;
          }
        }

        else
        {
          CFIndex v52 = FirstIndexOfValue;
          uint64_t v53 = (os_log_s *)__log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            uint64_t v53 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v53;
          }

          int v54 = v173;
          LODWORD(v166) = _SC_syslog_os_log_mapping(v173);
          if (__SC_log_enabled(v54, v53, (os_log_type_t)v166))
          {
            uint64_t v55 = _os_log_pack_size();
            v170 = &v153;
            CFRange v56 = (char *)&v153 - ((MEMORY[0x1895F8858](v55) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v57 = _os_log_pack_fill();
            int v164 = (const char *)(v52 + 1);
            uint64_t v165 = v57;
            LODWORD(v163) = __SCNetworkInterfaceOrder(Interface);
            uint64_t v58 = ", ";
            if (!BSDName) {
              uint64_t v58 = "";
            }
            v162 = v58;
            if (BSDName) {
              CFStringRef v59 = BSDName;
            }
            else {
              CFStringRef v59 = &stru_189B68690;
            }
            CFIndex v159 = v59;
            if (v50) {
              uint64_t v60 = " : ";
            }
            else {
              uint64_t v60 = "";
            }
            if (!v50) {
              uint64_t v50 = &stru_189B68690;
            }
            else {
              uint64_t v61 = "";
            }
            if (SCNetworkInterfaceGetDisableUntilNeeded((const __SCPreferences **)Interface)) {
              CFTypeID v62 = ", disable-until-needed";
            }
            else {
              CFTypeID v62 = "";
            }
            else {
              uint64_t v63 = "";
            }
            int v64 = SCNetworkServiceGetEnabled(v43);
            uint64_t v65 = ", disabled";
            if (v64) {
              uint64_t v65 = "";
            }
            __os_log_helper_1_2_12_8_0_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32( v165,  (uint64_t)v164,  v172,  (int)v163,  v171,  (uint64_t)v162,  (uint64_t)v159,  (uint64_t)v60,  (uint64_t)v50,  (uint64_t)v61,  (uint64_t)v62,  (uint64_t)v63,  (uint64_t)v65);
            int v66 = v173;
            uint64_t v67 = (uint64_t)v53;
            uint64_t v68 = v166;
LABEL_96:
            __SC_log_send(v66, v67, v68, v56);
            CFIndex v42 = v167;
            uint64_t v35 = v160;
          }
        }

        v177.length = CFArrayGetCount(v42);
        v177.CFIndex location = 0LL;
        CFIndex v81 = CFArrayGetFirstIndexOfValue(v42, v177, v43);
        if (v81 != -1) {
          CFArrayRemoveValueAtIndex(v42, v81);
        }
        ++v41;
        BOOL v37 = v169;
      }

      while (v168 != v41);
      CFTypeID v21 = v154;
      int v19 = v173;
LABEL_101:
      CFRelease(v35);
LABEL_102:
      CFIndex v23 = v158 + 1;
      if (v158 + 1 == Count)
      {
LABEL_103:
        CFRelease(v21);
        CFMutableArrayRef Mutable = v167;
        if (v156) {
          CFRelease(v156);
        }
        break;
      }
    }
  }

  CFIndex v172 = CFArrayGetCount(Mutable);
  if (v172 >= 1)
  {
    int v82 = (os_log_s *)__log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      int v82 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v82;
    }

    uint64_t v83 = _SC_syslog_os_log_mapping(v19);
    if (__SC_log_enabled(v19, v82, (os_log_type_t)v83))
    {
      uint64_t v85 = _os_log_pack_size();
      uint64_t v86 = (char *)&v153 - ((MEMORY[0x1895F8858](v85) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(v19, (uint64_t)v82, v83, v86);
    }

    CFIndex v87 = 0LL;
    *(void *)&__int128 v84 = 138413314LL;
    __int128 v171 = v84;
    do
    {
      uint64_t v88 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v167, v87);
      CFStringRef v89 = SCNetworkServiceGetServiceID(v88);
      CFStringRef v90 = SCNetworkServiceGetName(v88);
      uint64_t v91 = SCNetworkServiceGetInterface(v88);
      CFStringRef v92 = SCNetworkInterfaceGetBSDName(v91);
      uint64_t v93 = (os_log_s *)__log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v93 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v93;
      }

      uint64_t v94 = _SC_syslog_os_log_mapping(v19);
      if (__SC_log_enabled(v19, v93, (os_log_type_t)v94))
      {
        if (v90) {
          uint64_t v95 = v90;
        }
        else {
          uint64_t v95 = &stru_189B68690;
        }
        uint64_t v96 = _os_log_pack_size();
        uint64_t v97 = (char *)&v153 - ((MEMORY[0x1895F8858](v96) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v98 = _os_log_pack_fill();
        SCNetworkInterfaceRef v99 = SCNetworkServiceGetInterface(v88);
        int v100 = __SCNetworkInterfaceOrder(v99);
        *(_DWORD *)uint64_t v98 = v171;
        uint64_t v101 = "";
        if (v92) {
          uint64_t v101 = ", ";
        }
        *(void *)(v98 + 4) = v89;
        uint64_t v102 = &stru_189B68690;
        if (v92) {
          uint64_t v102 = v92;
        }
        *(_WORD *)(v98 + 12) = 1024;
        *(_DWORD *)(v98 + 14) = v100;
        *(_WORD *)(v98 + 18) = 2112;
        *(void *)(v98 + 20) = v95;
        int v19 = v173;
        *(_WORD *)(v98 + 28) = 2080;
        *(void *)(v98 + 30) = v101;
        *(_WORD *)(v98 + 38) = 2112;
        *(void *)(v98 + 40) = v102;
        __SC_log_send(v19, (uint64_t)v93, v94, v97);
      }

      ++v87;
    }

    while (v172 != v87);
  }

  CFRelease(v167);
  uint64_t v103 = (const __CFArray *)SCBridgeInterfaceCopyAll(v153);
  if (v103)
  {
    v104 = v103;
    CFIndex v172 = CFArrayGetCount(v103);
    if (v172 >= 1)
    {
      uint64_t v105 = (os_log_s *)__log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v105 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v105;
      }

      uint64_t v106 = _SC_syslog_os_log_mapping(v19);
      if (__SC_log_enabled(v19, v105, (os_log_type_t)v106))
      {
        uint64_t v108 = _os_log_pack_size();
        __int128 v109 = (char *)&v153 - ((MEMORY[0x1895F8858](v108) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(v173, (uint64_t)v105, v106, v109);
        int v19 = v173;
      }

      CFIndex v110 = 0LL;
      *(void *)&__int128 v107 = 138412290LL;
      __int128 v171 = v107;
      do
      {
        CFIndex v111 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v104, v110);
        CFStringRef v112 = SCNetworkInterfaceGetBSDName(v111);
        if (v112)
        {
          CFStringRef v113 = v112;
          uint64_t v114 = CFStringCreateMutable(0LL, 0LL);
          CFStringAppendFormat(v114, 0LL, @"%@: ", v113);
          MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v111);
          if (MemberInterfaces)
          {
            int v116 = MemberInterfaces;
            CFIndex v117 = CFArrayGetCount(MemberInterfaces);
            if (v117 >= 1)
            {
              CFIndex v118 = v117;
              for (CFIndex i = 0LL; i != v118; ++i)
              {
                uint64_t v120 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v116, i);
                CFStringRef v121 = SCNetworkInterfaceGetBSDName(v120);
                if (v121) {
                  CFIndex v122 = v121;
                }
                else {
                  CFIndex v122 = @"?";
                }
                if (i) {
                  uint64_t v123 = ", ";
                }
                else {
                  uint64_t v123 = "";
                }
                CFStringAppendFormat(v114, 0LL, @"%s%@", v123, v122);
              }
            }
          }

          uint64_t v124 = (os_log_s *)__log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            uint64_t v124 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v124;
          }

          int v19 = v173;
          uint64_t v125 = _SC_syslog_os_log_mapping(v173);
          if (__SC_log_enabled(v19, v124, (os_log_type_t)v125))
          {
            uint64_t v126 = _os_log_pack_size();
            uint64_t v127 = (char *)&v153 - ((MEMORY[0x1895F8858](v126) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            int v19 = v173;
            uint64_t v128 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v128 = v171;
            *(void *)(v128 + 4) = v114;
            __SC_log_send(v19, (uint64_t)v124, v125, v127);
          }

          CFRelease(v114);
        }

        ++v110;
      }

      while (v110 != v172);
    }

    CFRelease(v104);
  }

  v129 = SCVLANInterfaceCopyAll(v153);
  if (v129)
  {
    CFStringRef v130 = v129;
    CFIndex v131 = CFArrayGetCount(v129);
    if (v131 >= 1)
    {
      CFIndex v132 = v131;
      v133 = (os_log_s *)__log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        v133 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v133;
      }

      uint64_t v134 = _SC_syslog_os_log_mapping(v19);
      if (__SC_log_enabled(v19, v133, (os_log_type_t)v134))
      {
        uint64_t v136 = _os_log_pack_size();
        uint64_t v137 = (char *)&v153 - ((MEMORY[0x1895F8858](v136) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(v173, (uint64_t)v133, v134, v137);
        int v19 = v173;
      }

      CFIndex v138 = 0LL;
      *(void *)&__int128 v135 = 138412802LL;
      __int128 v171 = v135;
      CFIndex v172 = (CFIndex)v130;
      do
      {
        uint64_t v139 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v130, v138);
        CFStringRef v140 = SCNetworkInterfaceGetBSDName(v139);
        if (v140)
        {
          CFStringRef v141 = v140;
          PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(v139);
          if (PhysicalInterface) {
            CFStringRef v143 = SCNetworkInterfaceGetBSDName(PhysicalInterface);
          }
          else {
            CFStringRef v143 = 0LL;
          }
          CFNumberRef Tag = SCVLANInterfaceGetTag(v139);
          v145 = (os_log_s *)__log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            v145 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v145;
          }

          uint64_t v146 = _SC_syslog_os_log_mapping(v19);
          if (__SC_log_enabled(v19, v145, (os_log_type_t)v146))
          {
            uint64_t v147 = _os_log_pack_size();
            v148 = (char *)&v153 - ((MEMORY[0x1895F8858](v147) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v149 = _os_log_pack_fill();
            v150 = @"?";
            if (v143) {
              uint64_t v151 = v143;
            }
            else {
              uint64_t v151 = @"?";
            }
            *(_DWORD *)uint64_t v149 = v171;
            *(void *)(v149 + 4) = v141;
            if (Tag) {
              v150 = (const __CFString *)Tag;
            }
            *(_WORD *)(v149 + 12) = 2112;
            *(void *)(v149 + 14) = v151;
            *(_WORD *)(v149 + 22) = 2112;
            *(void *)(v149 + 24) = v150;
            v152 = v148;
            int v19 = v173;
            __SC_log_send(v173, (uint64_t)v145, v146, v152);
            CFStringRef v130 = (const __CFArray *)v172;
          }
        }

        ++v138;
      }

      while (v132 != v138);
    }

    CFRelease(v130);
  }

CFDictionaryRef __SCNetworkConfigurationGetValue(const __SCPreferences *a1, const __CFString *a2)
{
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, a2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID) {
      return 0LL;
    }
    CFIndex Count = CFDictionaryGetCount(Value);
    if (!Count || Count == 1 && CFDictionaryContainsKey(Value, @"__INACTIVE__")) {
      return 0LL;
    }
  }

  return Value;
}

uint64_t __SCNetworkConfigurationSetValue(SCPreferencesRef prefs, CFStringRef path, const void *a3, int a4)
{
  if (a3)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(a3) != TypeID)
    {
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, path);
  CFTypeID v10 = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) != v10) {
    CFDictionaryRef Value = 0LL;
  }
  if (!a3)
  {
    if (!a4)
    {
      if (!Value) {
        return 1LL;
      }
      goto LABEL_29;
    }

    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    goto LABEL_12;
  }

  CFMutableArrayRef Mutable = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)a3);
  if (a4)
  {
LABEL_12:
    CFTypeID v13 = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == v13 && CFDictionaryContainsKey(Value, @"__INACTIVE__")) {
      CFDictionarySetValue(Mutable, @"__INACTIVE__", (const void *)*MEMORY[0x189604DE8]);
    }
    else {
      CFDictionaryRemoveValue(Mutable, @"__INACTIVE__");
    }
  }

  if (Value == Mutable)
  {
    if (!Value) {
      return 1LL;
    }
LABEL_23:
    CFRelease(Mutable);
    return 1LL;
  }

  if (Value && Mutable)
  {
    if (!CFEqual(Value, Mutable)) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }

  if (Mutable)
  {
LABEL_27:
    uint64_t v14 = SCPreferencesPathSetValue(prefs, path, Mutable);
    CFRelease(Mutable);
    return v14;
  }

BOOL __getPrefsEnabled(const __SCPreferences *a1, const __CFString *a2)
{
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, a2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  return !Value || CFGetTypeID(Value) != TypeID || !CFDictionaryContainsKey(Value, @"__INACTIVE__");
}

uint64_t __setPrefsEnabled(const __SCPreferences *a1, const __CFString *a2, int a3)
{
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, a2);
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != TypeID)
    {
      _SCErrorSet(1001);
      return 0LL;
    }

    CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    CFMutableDictionaryRef Mutable = MutableCopy;
    if (a3) {
      CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
    }
    else {
      CFDictionarySetValue(MutableCopy, @"__INACTIVE__", (const void *)*MEMORY[0x189604DE8]);
    }
    if (Value == Mutable) {
      goto LABEL_13;
    }
    if (Mutable)
    {
      if (CFEqual(Value, Mutable))
      {
LABEL_13:
        CFRelease(Mutable);
        return 1LL;
      }

const void *__copyInterfaceTemplate(const void *a1, const __CFString *a2)
{
  uint64_t v4 = (const __CFDictionary *)__copyTemplates();
  if (v4)
  {
    uint64_t v5 = v4;
    CFDictionaryRef Value = CFDictionaryGetValue(v4, @"Interface");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (!Value || CFGetTypeID(Value) != TypeID) {
      goto LABEL_14;
    }
    if (a2)
    {
      CFIndex location = CFStringFind(a2, @".", 0LL).location;
      CFArrayRef v9 = @"*";
      if (location == -1) {
        CFArrayRef v9 = a2;
      }
      CFStringRef v10 = CFStringCreateWithFormat(0LL, 0LL, @"%@-%@", a1, v9);
      uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)Value, v10);
      CFRelease(v10);
    }

    else
    {
      uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)Value, a1);
    }

    CFTypeID v12 = CFDictionaryGetTypeID();
    if (!v11) {
      goto LABEL_15;
    }
    if (CFGetTypeID(v11) == v12 && CFDictionaryGetCount((CFDictionaryRef)v11) >= 1) {
      CFRetain(v11);
    }
    else {
LABEL_14:
    }
      uint64_t v11 = 0LL;
LABEL_15:
    CFRelease(v5);
    return v11;
  }

  return 0LL;
}

CFPropertyListRef __copyTemplates()
{
  v15[1] = *MEMORY[0x1895F89C0];
  int v0 = (__CFBundle *)_SC_CFBundleGet();
  if (!v0) {
    return 0LL;
  }
  uint32_t v1 = CFBundleCopyResourceURL(v0, @"NetworkConfiguration", @"plist", 0LL);
  if (!v1)
  {
    int v2 = (os_log_s *)__log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      int v2 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v2;
    }

    uint64_t v3 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v2, (os_log_type_t)v3))
    {
      uint64_t v4 = _os_log_pack_size();
      uint64_t v5 = (char *)v15 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)(v6 + 4) = "NetworkConfiguration.plist";
      __SC_log_send(3, (uint64_t)v2, v3, v5);
    }

    uint32_t v1 = CFURLCreateWithFileSystemPath( 0LL,  @"/System/Library/Frameworks/SystemConfiguration.framework/NetworkConfiguration.plist",  kCFURLPOSIXPathStyle,  1u);
    if (!v1)
    {
      CFArrayRef v9 = (os_log_s *)__log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        CFArrayRef v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v9;
      }

      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        CFTypeID v12 = (char *)v15 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v13 = 136315138;
        *(void *)(v13 + 4) = "/System/Library/Frameworks/SystemConfiguration.framework/NetworkConfiguration.plist";
        __SC_log_send(3, (uint64_t)v9, v10, v12);
      }

      return 0LL;
    }
  }

  CFPropertyListRef v7 = _SCCreatePropertyListFromResource(v1);
  CFRelease(v1);
  if (v7)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v7) != TypeID)
    {
      CFRelease(v7);
      return 0LL;
    }
  }

  return v7;
}

const void *__copyProtocolTemplate(const void *a1, const __CFString *a2, const void *a3)
{
  uint64_t v6 = (const __CFDictionary *)__copyTemplates();
  if (v6)
  {
    CFPropertyListRef v7 = v6;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, @"Protocol");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
    {
      if (a2)
      {
        CFIndex location = CFStringFind(a2, @".", 0LL).location;
        uint64_t v11 = @"*";
        if (location == -1) {
          uint64_t v11 = a2;
        }
        CFStringRef v12 = CFStringCreateWithFormat(0LL, 0LL, @"%@-%@", a1, v11);
        uint64_t v13 = (const __CFDictionary *)CFDictionaryGetValue(Value, v12);
        CFRelease(v12);
      }

      else
      {
        uint64_t v13 = (const __CFDictionary *)CFDictionaryGetValue(Value, a1);
      }

      CFTypeID v15 = CFDictionaryGetTypeID();
      if (v13)
      {
        if (CFGetTypeID(v13) == v15)
        {
          uint64_t v14 = CFDictionaryGetValue(v13, a3);
          CFTypeID v16 = CFDictionaryGetTypeID();
          if (!v14)
          {
LABEL_16:
            CFRelease(v7);
            return v14;
          }

          if (CFGetTypeID(v14) == v16)
          {
            CFRetain(v14);
            goto LABEL_16;
          }
        }
      }
    }

    uint64_t v14 = 0LL;
    goto LABEL_16;
  }

  return 0LL;
}

BOOL __createInterface(int a1, const __CFString *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v19, 16LL, 0x8000100u);
  if (ioctl(a1, 0xC0206978uLL, &v19) == -1)
  {
    uint64_t v6 = (os_log_s *)__log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      uint64_t v6 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v6;
    }

    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
    if (result)
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v10 = (char *)&v19 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      CFStringRef v12 = __error();
      uint64_t v13 = strerror(*v12);
      *(_DWORD *)uint64_t v11 = 138412546;
      *(void *)(v11 + 4) = a2;
      *(_WORD *)(v11 + 12) = 2080;
      *(void *)(v11 + 14) = v13;
      __SC_log_send(5, (uint64_t)v6, v7, v10);
      return 0LL;
    }
  }

  else
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    _SC_cfstring_to_cstring(a2, (UInt8 *)&v19, 16LL, 0x8000100u);
    if (ioctl(a1, 0xC0206911uLL, &v19) == -1)
    {
      uint64_t v4 = (os_log_s *)__log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v4;
      }

      uint64_t v5 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v4, (os_log_type_t)v5)) {
        goto LABEL_16;
      }
    }

    else if ((v20 & 1) == 0)
    {
      LOWORD(v20) = v20 | 1;
      if (ioctl(a1, 0x80206910uLL, &v19) == -1)
      {
        uint64_t v4 = (os_log_s *)__log_SCNetworkConfiguration_log;
        if (!__log_SCNetworkConfiguration_log)
        {
          uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
          __log_SCNetworkConfiguration_log = (uint64_t)v4;
        }

        uint64_t v5 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
        {
LABEL_16:
          uint64_t v14 = _os_log_pack_size();
          CFTypeID v15 = (char *)&v19 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          uint64_t v17 = __error();
          uint64_t v18 = strerror(*v17);
          *(_DWORD *)uint64_t v16 = 138412546;
          *(void *)(v16 + 4) = a2;
          *(_WORD *)(v16 + 12) = 2080;
          *(void *)(v16 + 14) = v18;
          __SC_log_send(5, (uint64_t)v4, v5, v15);
          return 1LL;
        }
      }
    }

    return 1LL;
  }

  return result;
}

BOOL __destroyInterface(int a1, const __CFString *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  memset(v12, 0, sizeof(v12));
  _SC_cfstring_to_cstring(a2, (UInt8 *)v12, 16LL, 0x8000100u);
  if (ioctl(a1, 0x80206979uLL, v12) != -1) {
    return 1LL;
  }
  uint64_t v5 = (os_log_s *)__log_SCNetworkConfiguration_log;
  if (!__log_SCNetworkConfiguration_log)
  {
    uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
    __log_SCNetworkConfiguration_log = (uint64_t)v5;
  }

  uint64_t v6 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v5, (os_log_type_t)v6);
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    uint64_t v8 = (char *)v12 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    uint64_t v10 = __error();
    uint64_t v11 = strerror(*v10);
    *(_DWORD *)uint64_t v9 = 138412546;
    *(void *)(v9 + 4) = a2;
    *(_WORD *)(v9 + 12) = 2080;
    *(void *)(v9 + 14) = v11;
    __SC_log_send(5, (uint64_t)v5, v6, v8);
    return 0LL;
  }

  return result;
}

uint64_t __extract_password( uint64_t a1, CFDictionaryRef theDict, const void *a3, void *key, const void *a5, uint64_t a6, uint64_t *a7)
{
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      uint64_t v13 = Value;
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFGetTypeID(v13) != TypeID) {
        return 0LL;
      }
      uint64_t result = CFEqual(v13, a5);
      int v16 = 0;
      if (!(_DWORD)result) {
        return result;
      }
      if (a7) {
        goto LABEL_6;
      }
LABEL_9:
      if (a1) {
        uint64_t result = _SCPreferencesSystemKeychainPasswordItemExists();
      }
      else {
        uint64_t result = _SCSecKeychainPasswordItemExists();
      }
      goto LABEL_14;
    }
  }

  int v16 = 1;
  if (!a7) {
    goto LABEL_9;
  }
LABEL_6:
  if (a1) {
    uint64_t v17 = _SCPreferencesSystemKeychainPasswordItemCopy();
  }
  else {
    uint64_t v17 = _SCSecKeychainPasswordItemCopy();
  }
  *a7 = v17;
  uint64_t result = v17 != 0;
LABEL_14:
  if ((_DWORD)result) {
    int v18 = 0;
  }
  else {
    int v18 = v16;
  }
  if (theDict)
  {
    if (v18)
    {
      __int128 v19 = (const __CFString *)CFDictionaryGetValue(theDict, a3);
      uint64_t result = (uint64_t)__copy_legacy_password(v19);
      if (result)
      {
        if (a7) {
          *a7 = result;
        }
        else {
          CFRelease((CFTypeRef)result);
        }
        return 1LL;
      }
    }
  }

  return result;
}

CFDataRef __copy_legacy_password(const __CFString *a1)
{
  if (!a1) {
    return 0LL;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  if (CFGetTypeID(a1) != TypeID)
  {
    CFTypeID v9 = CFStringGetTypeID();
    if (CFGetTypeID(a1) == v9 && CFStringGetLength(a1) >= 1) {
      return CFStringCreateExternalRepresentation(0LL, a1, 0x8000100u, 0);
    }
    return 0LL;
  }

  CFIndex Length = CFDataGetLength((CFDataRef)a1);
  if ((Length & 1) != 0) {
    return 0LL;
  }
  if (*CFDataGetBytePtr((CFDataRef)a1)) {
    CFStringEncoding v4 = 335544576;
  }
  else {
    CFStringEncoding v4 = 268435712;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  uint64_t v6 = CFStringCreateWithBytes(0LL, BytePtr, Length, v4, 0);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0LL, v6, 0x8000100u, 0);
  CFRelease(v6);
  return ExternalRepresentation;
}

uint64_t __remove_password( uint64_t a1, CFDictionaryRef theDict, const void *a3, void *key, const void *a5, uint64_t a6, __CFDictionary **a7)
{
  if (theDict && (CFDictionaryRef Value = CFDictionaryGetValue(theDict, key)) != 0LL)
  {
    uint64_t v14 = Value;
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(v14) != TypeID || (v16 = CFEqual(v14, a5), int v17 = 0, !v16))
    {
LABEL_16:
      uint64_t v19 = 0LL;
      goto LABEL_17;
    }

    if (a1) {
      goto LABEL_6;
    }
  }

  else
  {
    int v17 = 1;
    if (a1)
    {
LABEL_6:
      uint64_t v18 = _SCPreferencesSystemKeychainPasswordItemRemove();
      goto LABEL_9;
    }
  }

  uint64_t v18 = _SCSecKeychainPasswordItemRemove();
LABEL_9:
  uint64_t v19 = v18;
  if ((_DWORD)v18) {
    int v20 = 0;
  }
  else {
    int v20 = v17;
  }
  if (theDict && v20)
  {
    uint64_t v21 = (const __CFString *)CFDictionaryGetValue(theDict, a3);
    CFDataRef v22 = __copy_legacy_password(v21);
    if (v22)
    {
      CFRelease(v22);
      uint64_t v19 = 1LL;
      goto LABEL_17;
    }

    goto LABEL_16;
  }

uint64_t __rank_to_str(int a1, __CFString **a2)
{
  int v2 = 0LL;
  switch(a1)
  {
    case 0:
      goto LABEL_8;
    case 1:
      uint64_t v3 = kSCValNetServicePrimaryRankFirst;
      goto LABEL_7;
    case 2:
      uint64_t v3 = kSCValNetServicePrimaryRankLast;
      goto LABEL_7;
    case 3:
      uint64_t v3 = kSCValNetServicePrimaryRankNever;
      goto LABEL_7;
    case 4:
      uint64_t v3 = kSCValNetServicePrimaryRankScoped;
LABEL_7:
      int v2 = *v3;
LABEL_8:
      *a2 = v2;
      uint64_t result = 1LL;
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

uint64_t __str_to_rank(const void *a1, int *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1)
  {
    int v5 = 0;
    goto LABEL_6;
  }

  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  if (CFEqual(a1, @"First"))
  {
    int v5 = 1;
LABEL_6:
    *a2 = v5;
    return 1LL;
  }

  if (CFEqual(a1, @"Last"))
  {
    int v5 = 2;
    goto LABEL_6;
  }

  if (CFEqual(a1, @"Never"))
  {
    int v5 = 3;
    goto LABEL_6;
  }

  uint64_t result = CFEqual(a1, @"Scoped");
  if ((_DWORD)result)
  {
    int v5 = 4;
    goto LABEL_6;
  }

  return result;
}

BOOL _SCNetworkConfigurationBypassSystemInterfaces(uint64_t a1)
{
  char NetworkConfigurationFlags = __SCPreferencesGetNetworkConfigurationFlags(a1);
  if ((NetworkConfigurationFlags & 3) != 0) {
    return NetworkConfigurationFlags & 1;
  }
  else {
    return __SCPreferencesUsingDefaultPrefs(a1) == 0;
  }
}

uint64_t _SCNetworkConfigurationSetBypassSystemInterfaces(uint64_t a1, int a2)
{
  int v3 = __SCPreferencesGetNetworkConfigurationFlags(a1) & 0xFFFFFFFC | (a2 != 0) | 2;
  return __SCPreferencesSetNetworkConfigurationFlags(a1, v3);
}

double __os_log_helper_1_2_12_8_0_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)&double result = 134220802LL;
  *(_DWORD *)a1 = 134220802;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 28) = 2112;
  *(void *)(a1 + 30) = a5;
  *(_WORD *)(a1 + 38) = 2080;
  *(void *)(a1 + 40) = a6;
  *(_WORD *)(a1 + 48) = 2112;
  *(void *)(a1 + 50) = a7;
  *(_WORD *)(a1 + 58) = 2080;
  *(void *)(a1 + 60) = a8;
  *(_WORD *)(a1 + 68) = 2112;
  *(void *)(a1 + 70) = a9;
  *(_WORD *)(a1 + 78) = 2080;
  *(void *)(a1 + 80) = a10;
  *(_WORD *)(a1 + 88) = 2080;
  *(void *)(a1 + 90) = a11;
  *(_WORD *)(a1 + 98) = 2080;
  *(void *)(a1 + 100) = a12;
  *(_WORD *)(a1 + 108) = 2080;
  *(void *)(a1 + 110) = a13;
  return result;
}

double __os_log_helper_1_2_11_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)&double result = 138414850LL;
  *(_DWORD *)a1 = 138414850;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(void *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 28) = 2080;
  *(void *)(a1 + 30) = a5;
  *(_WORD *)(a1 + 38) = 2112;
  *(void *)(a1 + 40) = a6;
  *(_WORD *)(a1 + 48) = 2080;
  *(void *)(a1 + 50) = a7;
  *(_WORD *)(a1 + 58) = 2112;
  *(void *)(a1 + 60) = a8;
  *(_WORD *)(a1 + 68) = 2080;
  *(void *)(a1 + 70) = a9;
  *(_WORD *)(a1 + 78) = 2080;
  *(void *)(a1 + 80) = a10;
  *(_WORD *)(a1 + 88) = 2080;
  *(void *)(a1 + 90) = a11;
  *(_WORD *)(a1 + 98) = 2080;
  *(void *)(a1 + 100) = a12;
  return result;
}

uint64_t __SCNetworkInterfaceCreatePrivate(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0LL;
    }
    *(void *)(Instance + 72) = v8;
    if (a3) {
      CFTypeRef v9 = CFRetain(a3);
    }
    else {
      CFTypeRef v9 = 0LL;
    }
    *(void *)(Instance + 80) = v9;
    if (a4) {
      CFTypeRef v10 = CFRetain(a4);
    }
    else {
      CFTypeRef v10 = 0LL;
    }
    *(void *)(Instance + 96) = v10;
    *(_DWORD *)(Instance + 312) = 24;
  }

  return Instance;
}

BOOL __SCNetworkInterfaceSupportsVLAN(const __CFString *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  size_t v22 = 0LL;
  uint32_t v1 = _SC_cfstring_to_cstring(a1, 0LL, 0LL, 0x600u);
  if (!v1) {
    return 0LL;
  }
  int v2 = v1;
  unsigned int v3 = if_nametoindex((const char *)v1);
  if (!v3)
  {
LABEL_10:
    BOOL v5 = 0LL;
    CFStringEncoding v4 = v2;
LABEL_17:
    CFAllocatorDeallocate(0LL, v4);
    return v5;
  }

  *(_OWORD *)CFIndex v23 = xmmword_18124A4C0;
  int v24 = 3;
  unsigned int v25 = v3;
  if (sysctl(v23, 6u, 0LL, &v22, 0LL, 0LL) == -1)
  {
    uint64_t v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      CFTypeRef v9 = (char *)&v21 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = __error();
      CFStringRef v12 = strerror(*v11);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v12;
      __SC_log_send(5, (uint64_t)v6, v7, v9);
    }

    goto LABEL_10;
  }

  CFStringEncoding v4 = (UInt8 *)MEMORY[0x186E08750](0LL, v22, 0LL);
  if (sysctl(v23, 6u, v4, &v22, 0LL, 0LL) != -1)
  {
    BOOL v5 = v4[3] == 14 && (v4[102] & 3) != 0;
    CFAllocatorDeallocate(0LL, v2);
    goto LABEL_17;
  }

  uint64_t v13 = __log_SCNetworkConfiguration();
  uint64_t v14 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
  {
    uint64_t v15 = _os_log_pack_size();
    int v16 = (char *)&v21 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    uint64_t v18 = __error();
    uint64_t v19 = strerror(*v18);
    *(_DWORD *)uint64_t v17 = 136315138;
    *(void *)(v17 + 4) = v19;
    __SC_log_send(5, (uint64_t)v13, v14, v16);
  }

  CFAllocatorDeallocate(0LL, v2);
  BOOL v5 = 0LL;
  if (v4) {
    goto LABEL_17;
  }
  return v5;
}

CFDataRef __SCCopyMacAddress(const __CFString *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!_SC_cfstring_to_cstring(a1, (UInt8 *)__s1, 16LL, 0x8000100u)) {
    return 0LL;
  }
  if (getifaddrs(&v13) == -1)
  {
    CFStringEncoding v4 = __error();
    _SCErrorSet(*v4);
    BOOL v5 = __log_SCNetworkConfiguration();
    uint64_t v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v8 = &__s1[-((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      __error();
      uint64_t v9 = _os_log_pack_fill();
      uint64_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      *(_DWORD *)uint64_t v9 = 136315138;
      *(void *)(v9 + 4) = v11;
      __SC_log_send(5, (uint64_t)v5, v6, v8);
    }

    return 0LL;
  }

  uint32_t v1 = v13;
  if (v13)
  {
    CFDataRef v2 = (CFDataRef)v13;
    while (1)
    {
      if (!strcmp(__s1, *((const char **)v2 + 1)))
      {
        unsigned int v3 = (_BYTE *)*((void *)v2 + 3);
        if (v3[1] == 18) {
          break;
        }
      }

      CFDataRef v2 = *(CFDataRef *)v2;
      if (!v2) {
        goto LABEL_14;
      }
    }

    CFDataRef v2 = CFDataCreate(0LL, &v3[v3[5] + 8], v3[6]);
    uint32_t v1 = v13;
  }

  else
  {
    CFDataRef v2 = 0LL;
  }

uint64_t _SCBridgeInterfaceCreatePrivate(const __CFAllocator *a1, const __CFString *a2)
{
  uint64_t Private = __SCNetworkInterfaceCreatePrivate((uint64_t)a1, 0LL, 0LL, 0LL);
  uint64_t v5 = Private;
  if (Private)
  {
    *(void *)(Private + 16) = @"Bridge";
    *(void *)(Private + 128) = @"Ethernet";
    CFDictionaryRef Copy = CFStringCreateCopy(a1, a2);
    *(void *)(v5 + 112) = Copy;
    *(void *)(v5 + 160) = __SCCopyMacAddress(Copy);
    *(_BYTE *)(v5 + 176) = 1;
    *(_BYTE *)(v5 + 368) = __SCNetworkInterfaceSupportsVLAN(a2);
    *(_DWORD *)(v5 + 312) = 10;
    *(void *)(v5 + 48) = @"bridge";
    *(void *)(v5 + 56) = CFRetain(*(CFTypeRef *)(v5 + 112));
    *(void *)(v5 + 352) = CFArrayCreate(0LL, 0LL, 0LL, MEMORY[0x189605228]);
  }

  return v5;
}

uint64_t _SCVLANInterfaceCreatePrivate(const __CFAllocator *a1, const __CFString *a2)
{
  uint64_t Private = __SCNetworkInterfaceCreatePrivate((uint64_t)a1, 0LL, 0LL, 0LL);
  uint64_t v5 = Private;
  if (Private)
  {
    *(void *)(Private + 16) = @"VLAN";
    *(void *)(Private + 128) = @"Ethernet";
    CFDictionaryRef Copy = CFStringCreateCopy(a1, a2);
    *(void *)(v5 + 112) = Copy;
    *(void *)(v5 + 160) = __SCCopyMacAddress(Copy);
    *(_BYTE *)(v5 + 176) = 1;
    *(_DWORD *)(v5 + 312) = 9;
    *(void *)(v5 + 48) = @"vlan";
    *(void *)(v5 + 56) = CFRetain(*(CFTypeRef *)(v5 + 112));
  }

  return v5;
}

CFComparisonResult _SCNetworkInterfaceCompare(uint64_t a1, uint64_t a2)
{
  __endptr[1] = *(char **)MEMORY[0x1895F89C0];
  unsigned int v2 = *(_DWORD *)(a1 + 312);
  unsigned int v3 = *(_DWORD *)(a2 + 312);
  if (v2 != v3)
  {
    if (v2 < v3) {
      return -1LL;
    }
    else {
      return 1LL;
    }
  }

  if (*(unsigned __int8 *)(a1 + 176) != *(unsigned __int8 *)(a2 + 176))
  {
    if (*(_BYTE *)(a1 + 176)) {
      return -1LL;
    }
    else {
      return 1LL;
    }
  }

  if (!*(_BYTE *)(a1 + 176)) {
    goto LABEL_10;
  }
  uint64_t v6 = *(const void **)(a1 + 200);
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v6 || CFGetTypeID(v6) != TypeID) {
    return 1LL;
  }
  uint64_t v8 = *(const void **)(a2 + 200);
  CFTypeID v9 = CFStringGetTypeID();
  if (!v8 || CFGetTypeID(v8) != v9) {
    return -1LL;
  }
  CFComparisonResult v10 = CFStringCompare(*(CFStringRef *)(a1 + 200), *(CFStringRef *)(a2 + 200), 0LL);
  if (v10 == kCFCompareEqualTo)
  {
LABEL_10:
    uint64_t v11 = *(const __CFString **)(a1 + 208);
    if (!v11 || !*(void *)(a2 + 208)) {
      goto LABEL_44;
    }
    theArray = split_path(v11);
    CFIndex Count = CFArrayGetCount(theArray);
    uint64_t v13 = split_path(*(CFStringRef *)(a2 + 208));
    CFIndex v14 = CFArrayGetCount(v13);
    CFIndex v32 = v14;
    CFIndex v33 = Count;
    if (Count >= v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = Count;
    }
    if (v15 < 1)
    {
LABEL_38:
      if (v33 >= v32) {
        CFComparisonResult v10 = kCFCompareEqualTo;
      }
      else {
        CFComparisonResult v10 = kCFCompareLessThan;
      }
      goto LABEL_43;
    }

    CFIndex v16 = 0LL;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v16);
      uint64_t v18 = (const __CFString *)CFArrayGetValueAtIndex(v13, v16);
      uint64_t v19 = _SC_cfstring_to_cstring(ValueAtIndex, 0LL, 0LL, 0x8000100u);
      *__error() = 0;
      uint64_t v20 = strtoq((const char *)v19, __endptr, 16);
      if (!*v19 || *__endptr[0]) {
        break;
      }
      uint64_t v22 = v20;
      int v23 = *__error();
      CFAllocatorDeallocate(0LL, v19);
      if (v23) {
        goto LABEL_20;
      }
      uint64_t v19 = _SC_cfstring_to_cstring(v18, 0LL, 0LL, 0x8000100u);
      *__error() = 0;
      uint64_t v24 = strtoq((const char *)v19, __endptr, 16);
      if (!*v19 || *__endptr[0]) {
        break;
      }
      uint64_t v31 = v24;
      int v25 = *__error();
      CFAllocatorDeallocate(0LL, v19);
      if (v25) {
        goto LABEL_20;
      }
      if (v22 != v31)
      {
        if (v22 < v31) {
          CFComparisonResult v10 = kCFCompareLessThan;
        }
        else {
          CFComparisonResult v10 = kCFCompareGreaterThan;
        }
LABEL_43:
        CFRelease(theArray);
        CFRelease(v13);
        if (v10 == kCFCompareEqualTo)
        {
LABEL_44:
          uint64_t v26 = *(const __CFString **)(a1 + 112);
          if (!v26
            || (uint64_t v27 = *(const __CFString **)(a2 + 112)) == 0LL
            || (CFComparisonResult v10 = CFStringCompare(v26, v27, 0LL)) == kCFCompareEqualTo)
          {
            CFNumberRef v28 = *(const __CFString **)(a1 + 120);
            if (v28 && (uint64_t v29 = *(const __CFString **)(a2 + 120)) != 0LL) {
              return CFStringCompare(v28, v29, 0LL);
            }
            else {
              return 0LL;
            }
          }
        }

        return v10;
      }

LABEL_21:
      if (v15 == ++v16) {
        goto LABEL_38;
      }
    }

    CFAllocatorDeallocate(0LL, v19);
LABEL_20:
    CFComparisonResult v21 = CFStringCompare(ValueAtIndex, v18, 0LL);
    if (v21)
    {
      CFComparisonResult v10 = v21;
      goto LABEL_43;
    }

    goto LABEL_21;
  }

  return v10;
}

    _SCErrorSet(v9);
    LOBYTE(helper) = 0;
  }

  return helper;
}

  IOObjectRelease(existing);
  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count < 2
    || (CFNumberRef v28 = Count,
        v46.CFIndex location = 0LL,
        v46.length = Count,
        CFArraySortValues(Mutable, v46, (CFComparatorFunction)compare_bsdNames, 0LL),
        v47.CFIndex location = 0LL,
        v47.length = v28,
        FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(Mutable, v47, a3),
        FirstIndexOfValue == -1))
  {
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = CFStringCreateWithFormat(0LL, 0LL, @"%ld", FirstIndexOfValue + 1);
  }

  CFRelease(Mutable);
  return v30;
}

          ;
        }

        goto LABEL_32;
      }
    }

    else
    {
      uint64_t v22 = __log_SCNetworkConfiguration();
      int v23 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v22, (os_log_type_t)v23))
      {
        uint64_t v24 = _os_log_pack_size();
        int v25 = (char *)v26 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v22, v23, v25);
      }
    }

    CFMutableDictionaryRef Mutable = 0LL;
LABEL_32:
    CFRelease(v3);
    if (v6) {
      CFRelease(v6);
    }
    return Mutable;
  }

  uint64_t v18 = __log_SCNetworkConfiguration();
  uint64_t v19 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v18, (os_log_type_t)v19))
  {
    uint64_t v20 = _os_log_pack_size();
    CFComparisonResult v21 = (char *)v26 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v18, v19, v21);
  }

  uint64_t v6 = 0LL;
  CFMutableDictionaryRef Mutable = 0LL;
  if (v3) {
    goto LABEL_32;
  }
  return Mutable;
}

CFArrayRef split_path(CFStringRef theString)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.CFIndex location = 0LL;
  CFStringFindAndReplace(MutableCopy, @"@", @"/", v4, 0LL);
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, MutableCopy, @"/");
  CFRelease(MutableCopy);
  return ArrayBySeparatingStrings;
}

uint64_t __SCNetworkInterfaceOrder(_BYTE *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0x7FFFFFFFLL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0x7FFFFFFFLL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return (cf[176] == 0) | (2 * *((_DWORD *)cf + 78));
  }
  return 0x7FFFFFFFLL;
}

__CFString *__SCNetworkInterfaceGetDefaultConfigurationType(uint64_t a1)
{
  if (!*(void *)(a1 + 96)) {
    goto LABEL_8;
  }
  uint64_t v2 = 0LL;
  unsigned int v3 = *(const void **)(a1 + 16);
  for (CFIndex i = &off_189B64808; !CFEqual(v3, **(i - 1)); i += 5)
  {
    if (++v2 == 19) {
      return *(__CFString **)(a1 + 16);
    }
  }

  if (((0x61200uLL >> v2) & 1) == 0) {
    return **i;
  }
LABEL_8:
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t findConfiguration(CFTypeRef cf1)
{
  uint64_t v2 = 0LL;
  for (CFIndex i = (CFTypeRef **)configurations; !CFEqual(cf1, **i); i += 5)
  {
    if (++v2 == 19) {
      return -1LL;
    }
  }

  return v2;
}

uint64_t __SCNetworkInterfaceIsValidExtendedConfigurationType( const __SCNetworkInterface *a1, const void *a2, int a3)
{
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)a1);
  if (!DefaultConfigurationType || CFEqual(a2, DefaultConfigurationType)) {
    goto LABEL_20;
  }
  uint64_t v7 = 0LL;
  uint64_t v8 = (const void *)*((void *)a1 + 2);
  CFTypeID v9 = (CFTypeRef **)configurations;
  while (!CFEqual(v8, **v9))
  {
    ++v7;
    v9 += 5;
    if (v7 == 19) {
      goto LABEL_20;
    }
  }

  if (CFEqual(a2, @"IPSec"))
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
    if (CFEqual(InterfaceType, @"PPP"))
    {
      Interface = SCNetworkInterfaceGetInterface(a1);
      if (Interface)
      {
        CFStringRef v12 = SCNetworkInterfaceGetInterfaceType(Interface);
        BOOL v13 = CFEqual(v12, @"L2TP") != 0;
        if (!a3) {
          goto LABEL_15;
        }
        goto LABEL_13;
      }
    }
  }

  BOOL v13 = 0LL;
  if (a3)
  {
LABEL_13:
    if (((0x240ECuLL >> v7) & 1) != 0 || v13) {
      goto LABEL_15;
    }
LABEL_20:
    _SCErrorSet(1002);
    return 0LL;
  }

CFStringRef SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

SCNetworkInterfaceRef SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

__CFDictionary *__SCNetworkInterfaceCopyInterfaceEntity(SCNetworkInterfaceRef Interface)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  unsigned int v3 = Mutable;
  CFRange v4 = (const void *)*((void *)Interface + 16);
  if (v4) {
    CFDictionarySetValue(Mutable, @"Type", v4);
  }
  uint64_t v5 = (const void *)*((void *)Interface + 17);
  if (v5) {
    CFDictionarySetValue(v3, @"SubType", v5);
  }
  uint64_t v6 = (const void *)*((void *)Interface + 14);
  if (v6) {
    CFDictionarySetValue(v3, @"DeviceName", v6);
  }
  uint64_t v7 = (const void *)*((void *)Interface + 15);
  if (v7) {
    CFDictionarySetValue(v3, @"DeviceUniqueIdentifier", v7);
  }
  uint64_t v8 = (const void **)MEMORY[0x189604DE8];
  if (*((_BYTE *)Interface + 192)) {
    CFDictionarySetValue(v3, @"HiddenConfiguration", (const void *)*MEMORY[0x189604DE8]);
  }
  if (*((_BYTE *)Interface + 240)) {
    CFDictionarySetValue(v3, @"TrustRequired", *v8);
  }
  do
  {
    CFTypeID v9 = (const void **)Interface;
    Interface = SCNetworkInterfaceGetInterface(Interface);
  }

  while (Interface);
  if (!CFEqual(v9, &__kSCNetworkInterfaceIPv4))
  {
    uint64_t v10 = 0LL;
    CFStringRef v12 = v9 + 2;
    uint64_t v11 = v9[2];
    BOOL v13 = (const void ***)&off_189B64808;
    while (!CFEqual(v11, **(v13 - 1)))
    {
      ++v10;
      v13 += 5;
      if (v10 == 19) {
        goto LABEL_21;
      }
    }

    if (((0x61200uLL >> v10) & 1) != 0) {
      goto LABEL_22;
    }
    CFStringRef v12 = *v13;
LABEL_21:
    CFDictionarySetValue(v3, @"Hardware", *v12);
LABEL_22:
    LocalizedDisplayCFStringRef Name = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)v9);
    CFDictionarySetValue(v3, @"UserDefinedName", LocalizedDisplayName);
  }

  return v3;
}

CFStringRef SCNetworkInterfaceGetLocalizedDisplayName(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  CFStringRef result = (CFStringRef)*((void *)interface + 5);
  if (!result)
  {
    CFStringRef result = copy_display_name((uint64_t)interface, 1, 0LL);
    *((void *)interface + 5) = result;
  }

  return result;
}

uint64_t _SCNetworkInterfaceCreateWithBSDName(uint64_t a1, const __CFString *a2, char a3)
{
  keys[32] = *(void **)MEMORY[0x1895F89C0];
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  if (!_SC_cfstring_to_cstring(a2, (UInt8 *)&v29, 16LL, 0x8000100u)) {
    goto LABEL_7;
  }
  int v5 = socket(2, 2, 0);
  if (v5 != -1)
  {
    int v6 = v5;
    if (ioctl(v5, 0xC0206911uLL, &v29) == -1) {
      LOWORD(v30) = 0;
    }
    close(v6);
  }

  if ((v30 & 0x10) == 0)
  {
LABEL_7:
    LOBYTE(v7) = 1;
    goto LABEL_13;
  }

  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"State:", @"[^/]+", @"PPP");
  CFArrayAppendValue(Mutable, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef v15 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"Setup:", @"[^/]+", @"Interface");
  CFArrayAppendValue(Mutable, v15);
  CFRelease(v15);
  uint64_t v7 = SCDynamicStoreCopyMultiple(0LL, 0LL, Mutable);
  CFRelease(Mutable);
  if (!v7)
  {
LABEL_13:
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionarySetValue(MutableCopy, @"DeviceName", a2);
    goto LABEL_15;
  }

  CFIndex Count = CFDictionaryGetCount(v7);
  if (Count < 33)
  {
    uint64_t v17 = keys;
    uint64_t v18 = values;
    CFDictionaryGetKeysAndValues(v7, (const void **)keys, (const void **)values);
    if (Count <= 0)
    {
      CFRelease(v7);
LABEL_12:
      LOBYTE(v7) = 0;
      goto LABEL_13;
    }

    theDict = v7;
    char v26 = a3;
  }

  else
  {
    char v26 = a3;
    uint64_t v17 = (void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
    uint64_t v18 = (void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
    theDict = v7;
    CFDictionaryGetKeysAndValues(v7, (const void **)v17, (const void **)v18);
  }

  uint64_t v19 = 0LL;
  while (1)
  {
    uint64_t v20 = (const __CFString *)v17[v19];
    CFComparisonResult v21 = (const __CFDictionary *)v18[v19];
    if (CFStringHasSuffix(v20, @"PPP"))
    {
      if (CFDictionaryGetValueIfPresent(v21, @"InterfaceName", (const void **)&value))
      {
        if (CFEqual(a2, value))
        {
          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, v20, @"/");
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3LL);
          CFStringRef v24 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"Setup:", ValueAtIndex, @"Interface");
          int v25 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v24);
          CFRelease(v24);
          CFRelease(ArrayBySeparatingStrings);
          if (v25) {
            break;
          }
        }
      }
    }

    if (Count == ++v19)
    {
      CFMutableStringRef MutableCopy = 0LL;
      goto LABEL_32;
    }
  }

  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v25);
LABEL_32:
  a3 = v26;
  if (v17 != keys)
  {
    CFAllocatorDeallocate(0LL, v17);
    CFAllocatorDeallocate(0LL, v18);
  }

  CFRelease(theDict);
  if (!MutableCopy) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v10 = (const void **)MEMORY[0x189604DE8];
  if ((a3 & 4) == 0) {
    CFDictionarySetValue(MutableCopy, @"_NO_BRIDGE_INTERFACES_", (const void *)*MEMORY[0x189604DE8]);
  }
  if ((a3 & 1) == 0) {
    CFDictionarySetValue(MutableCopy, @"_NO_VLAN_INTERFACES_", *v10);
  }
  uint64_t v11 = _SCNetworkInterfaceCreateWithEntity();
  CFRelease(MutableCopy);
  return v11;
}

SCNetworkInterfaceRef _SCNetworkInterfaceCreateWithEntity(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v97 = *MEMORY[0x1895F89C0];
  CFStringRef v92 = 0LL;
  stat value = 0LL;
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if ((_UNKNOWN *)a3 == &__SCNetworkInterfaceSearchExternal)
  {
    int v5 = 0LL;
    BOOL v7 = 0;
    int v6 = 0;
    a3 = 0LL;
  }

  else if ((_UNKNOWN *)a3 == &__SCNetworkInterfaceSearchSystem)
  {
    int v5 = 0LL;
    a3 = 0LL;
    BOOL v7 = 1;
    int v6 = 1;
  }

  else if (a3)
  {
    int v5 = *(const __SCPreferences **)(a3 + 32);
    int v6 = 0;
    BOOL v7 = !_SCNetworkConfigurationBypassSystemInterfaces((uint64_t)v5);
  }

  else
  {
    int v5 = 0LL;
    int v6 = 0;
    BOOL v7 = 1;
  }

  uint64_t v8 = (const __CFString *)CFDictionaryGetValue(a2, @"Type");
  if (v8) {
    CFTypeID v9 = v8;
  }
  else {
    CFTypeID v9 = @"Ethernet";
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v9 || CFGetTypeID(v9) != TypeID) {
    return 0LL;
  }
  uint64_t v11 = (const __CFString *)CFDictionaryGetValue(a2, @"SubType");
  CFStringRef v12 = @"PPP";
  if (CFEqual(v9, @"PPP") || CFEqual(v9, @"VPN"))
  {
    CFTypeID v13 = CFStringGetTypeID();
    if (!v11 || CFGetTypeID(v11) != v13) {
      return 0LL;
    }
  }

  uint64_t v91 = (const __CFString *)CFDictionaryGetValue(a2, @"DeviceName");
  CFStringRef v90 = (const __CFString *)CFDictionaryGetValue(a2, @"DeviceUniqueIdentifier");
  if (CFEqual(v9, @"Ethernet")
    || CFEqual(v9, @"FireWire")
    || CFEqual(v9, @"Cellular")
    || CFEqual(v9, @"PPP") && CFEqual(v11, @"PPPoE"))
  {
    CFTypeID v14 = CFStringGetTypeID();
    if (!v91) {
      return 0LL;
    }
    CFIndex Count = (CFIndex)v11;
    if (CFGetTypeID(v91) != v14) {
      return 0LL;
    }
    uint64_t v15 = CFEqual(v91, @"lo0");
    if ((_DWORD)v15)
    {
      uint64_t Copy = (uint64_t)__SCNetworkInterfaceCreateCopy(v15, (uint64_t)&__kSCNetworkInterfaceLoopback, 0LL, 0LL);
      CFStringRef v12 = @"PPP";
      uint64_t v11 = (const __CFString *)Count;
      goto LABEL_112;
    }

    if (__SCNetworkInterfaceCacheCopy(v91, (uint64_t *)&v92))
    {
      MatchingInterfaces = v92;
      CFStringRef v12 = @"PPP";
      uint64_t v11 = (const __CFString *)Count;
      if (v92) {
        goto LABEL_44;
      }
      goto LABEL_92;
    }

    if (v7)
    {
      CFStringRef v12 = @"PPP";
      if (_SC_cfstring_to_cstring(v91, (UInt8 *)&keys, 16LL, 0x8000100u))
      {
        CFDictionaryRef v19 = _SC_IONetworkInterfaceBSDNameMatching((char *)&keys);
        if (v19)
        {
          CFDictionaryRef v20 = v19;
          MatchingInterfaces = findMatchingInterfaces( v19,  (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processNetworkInterface,  @"HiddenInterface",  v6,  1);
          CFStringRef v92 = MatchingInterfaces;
          __SCNetworkInterfaceCacheAdd(v91, MatchingInterfaces);
          CFRelease(v20);
LABEL_42:
          uint64_t v11 = (const __CFString *)Count;
          goto LABEL_43;
        }

        __SCNetworkInterfaceCacheAdd(v91, 0LL);
      }

      uint64_t v11 = (const __CFString *)Count;
LABEL_92:
      CFIndex Count = (CFIndex)@"PPP";
LABEL_93:
      LODWORD(v88) = v7;
      BOOL v34 = !v7;
      goto LABEL_118;
    }

    MatchingInterfaces = v92;
    CFStringRef v12 = @"PPP";
    goto LABEL_42;
  }

  if (CFEqual(v9, @"PPP"))
  {
    if (CFEqual(v11, @"PPPSerial"))
    {
      if (!isA_CFString(v91)) {
        return 0LL;
      }
      if (!v7)
      {
        MatchingInterfaces = 0LL;
        goto LABEL_43;
      }

      keys = @"IOProviderClass";
      uint64_t v96 = @"IOTTYBaseName";
      values[0] = @"IOSerialBSDClient";
      values[1] = (void *)v91;
      CFDictionaryRef v18 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)values,  2LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
      CFArrayRef v88 = findMatchingInterfaces( v18,  (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processSerialInterface,  @"HiddenPort",  v6,  1);
      CFStringRef v92 = v88;
      CFRelease(v18);
      if (v90)
      {
LABEL_36:
        MatchingInterfaces = v88;
        goto LABEL_43;
      }

      CFArrayRef v74 = v88;
      if (v88)
      {
        CFIndex Count = CFArrayGetCount(v88);
        if (Count >= 1)
        {
          if (*((void *)CFArrayGetValueAtIndex(v88, 0LL) + 15)) {
            goto LABEL_36;
          }
          CFIndex v75 = 1LL;
          do
          {
            CFIndex v76 = v75;
            if (Count == v75) {
              break;
            }
            ValueAtIndex = CFArrayGetValueAtIndex(v88, v75);
            CFIndex v75 = v76 + 1;
          }

          while (!ValueAtIndex[15]);
          BOOL v29 = v76 < Count;
          CFArrayRef v74 = v88;
          if (v29)
          {
            MatchingInterfaces = v88;
            goto LABEL_43;
          }
        }

        CFRelease(v74);
      }

      uint64_t v96 = @"IOTTYDevice";
      CFDictionaryRef v81 = CFDictionaryCreate( 0LL,  (const void **)&keys,  (const void **)values,  2LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
      MatchingInterfaces = findMatchingInterfaces( v81,  (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processSerialInterface,  @"HiddenPort",  v6,  1);
      CFStringRef v92 = MatchingInterfaces;
      CFRelease(v81);
LABEL_43:
      if (MatchingInterfaces)
      {
LABEL_44:
        CFIndex v21 = CFArrayGetCount(MatchingInterfaces);
        if (!v21) {
          goto LABEL_51;
        }
        uint64_t v22 = v21;
        if (v21 == 1)
        {
          uint64_t Copy = (uint64_t)CFArrayGetValueAtIndex(MatchingInterfaces, 0LL);
          int v23 = *(const __CFString **)(Copy + 120);
          if (v90 == v23 || v90 && v23 && CFEqual(v90, v23))
          {
            CFRetain((CFTypeRef)Copy);
            goto LABEL_111;
          }

LABEL_106:
            if (Copy) {
              goto LABEL_110;
            }
          }
        }

        else
        {
          else {
            BOOL v29 = 1;
          }
          if (!v29)
          {
            uint64_t v30 = 0LL;
            CFIndex v31 = 0LL;
            while (1)
            {
              CFIndex v32 = (CFStringRef *)CFArrayGetValueAtIndex(v88, v31);
              uint64_t Copy = (uint64_t)v32;
              if (!v32[15]
                || (NonLocalizedDisplayCFStringRef Name = __SCNetworkInterfaceGetNonLocalizedDisplayName(v32)) == 0LL
                || value == NonLocalizedDisplayName
                || value && CFEqual(value, NonLocalizedDisplayName))
              {
                if (v30)
                {
                  uint64_t Copy = 0LL;
                  goto LABEL_106;
                }
              }

              else
              {
                uint64_t Copy = v30;
              }

              ++v31;
              uint64_t v30 = Copy;
              if (v87 == (_BYTE *)v31) {
                goto LABEL_106;
              }
            }
          }
        }

LABEL_107:
        uint64_t v35 = __log_SCNetworkConfiguration();
        unsigned int v36 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
        {
          uint64_t v37 = _os_log_pack_size();
          unsigned int v86 = v36;
          CFIndex v87 = v85;
          CFIndex v38 = &v85[-((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
          __error();
          uint64_t v39 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v39 = 138412290;
          *(void *)(v39 + 4) = v91;
          __SC_log_send(5, (uint64_t)v35, v86, v38);
        }

        uint64_t Copy = (uint64_t)CFArrayGetValueAtIndex(v88, 0LL);
LABEL_110:
        CFRetain((CFTypeRef)Copy);
        CFStringRef v12 = (const __CFString *)Count;
        goto LABEL_111;
      }

      goto LABEL_92;
    }

    if (CFEqual(v11, @"L2TP"))
    {
      uint64_t v27 = @"L2TP";
    }

    else if (CFEqual(v11, @"PPTP"))
    {
      uint64_t v27 = @"PPTP";
    }

    else
    {
      uint64_t v27 = v11;
    }

    goto LABEL_214;
  }

  if (CFEqual(v9, @"6to4"))
  {
    if (!isA_CFString(v91)) {
      return 0LL;
    }
    uint64_t v27 = @"6to4";
    goto LABEL_214;
  }

  if (CFEqual(v9, @"IPSec"))
  {
    uint64_t v27 = @"IPSec";
LABEL_214:
    uint64_t v79 = SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v27);
    goto LABEL_215;
  }

  uint64_t v78 = CFEqual(v9, @"Loopback");
  if ((_DWORD)v78)
  {
    uint64_t v79 = (void *)__SCNetworkInterfaceCreateCopy(v78, (uint64_t)&__kSCNetworkInterfaceLoopback, 0LL, 0LL);
LABEL_215:
    uint64_t Copy = (uint64_t)v79;
    goto LABEL_112;
  }

  CFIndex Count = (CFIndex)@"PPP";
  if (CFEqual(v9, @"VPN"))
  {
    if (CFStringFind(v11, @".", 0LL).location == -1) {
      goto LABEL_93;
    }
    CFTypeID v80 = v11;
  }

  else
  {
    if (CFStringFind(v9, @".", 0LL).location == -1 || v91) {
      goto LABEL_93;
    }
    CFTypeID v80 = v9;
  }

  uint64_t Copy = (uint64_t)SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v80);
  CFStringRef v12 = (const __CFString *)Count;
LABEL_112:
  if (Copy && v7) {
    goto LABEL_158;
  }
  CFIndex Count = (CFIndex)v12;
  BOOL v34 = !v7;
  if (v7 || !Copy)
  {
    LODWORD(v88) = v7;
  }

  else
  {
    CFRelease((CFTypeRef)Copy);
    LODWORD(v88) = 0;
    BOOL v34 = 1;
  }

          int v70 = _os_log_pack_size();
          char v51 = (char *)&v78 - ((MEMORY[0x1895F8858](v70) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          goto LABEL_108;
        }

        uint64_t v48 = __log_SCNetworkConfiguration();
        uint64_t v49 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v48, (os_log_type_t)v49))
        {
          uint64_t v50 = _os_log_pack_size();
          char v51 = (char *)&v78 - ((MEMORY[0x1895F8858](v50) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
LABEL_108:
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v48, v49, v51);
          goto LABEL_109;
        }

        goto LABEL_109;
      }

      CFNumberRef v28 = _SCNetworkInterfaceCopyPrefixFromBSDName(v13);
      if (v28) {
        goto LABEL_46;
      }
      int v6 = __log_SCNetworkConfiguration();
      BOOL v7 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
      {
LABEL_10:
        uint64_t v8 = _os_log_pack_size();
        CFTypeID v9 = (char *)&v78 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        uint64_t v10 = 6;
LABEL_23:
        __SC_log_send(v10, (uint64_t)v6, v7, v9);
      }
    }

    else
    {
      int v6 = __log_SCNetworkConfiguration();
      BOOL v7 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
      {
        CFDictionaryRef v18 = _os_log_pack_size();
        CFTypeID v9 = (char *)&v78 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        uint64_t v10 = 7;
        goto LABEL_23;
      }
    }
  }

  else
  {
    int v6 = __log_SCNetworkConfiguration();
    BOOL v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7)) {
      goto LABEL_10;
    }
  }

  return 0LL;
}

LABEL_118:
  CFTypeID v40 = v90;
  uint64_t Copy = __SCNetworkInterfaceCreatePrivate(0LL, 0LL, 0LL, 0LL);
  *(void *)(Copy + 128) = v9;
  *(void *)(Copy + 136) = v11;
  if (v91) {
    CFStringRef v41 = CFStringCreateCopy(0LL, v91);
  }
  else {
    CFStringRef v41 = 0LL;
  }
  *(void *)(Copy + 112) = v41;
  CFStringRef v42 = 0LL;
  if (v40) {
    CFStringRef v42 = CFStringCreateCopy(0LL, v40);
  }
  *(void *)(Copy + 120) = v42;
  CFIndex v43 = (const __CFString *)CFDictionaryGetValue(a2, @"UserDefinedName");
  CFTypeID v44 = CFStringGetTypeID();
  if (!v43) {
    goto LABEL_137;
  }
  CFTypeID v45 = v44;
  CFTypeID v46 = CFGetTypeID(v43);
  BOOL v47 = v46 == v45;
  if (v46 == v45) {
    uint64_t v48 = v43;
  }
  else {
    uint64_t v48 = 0LL;
  }
  if (!v47 || !v34)
  {
    CFIndex v43 = v48;
LABEL_137:
    CFStringRef v12 = (const __CFString *)Count;
    goto LABEL_138;
  }

  CFRetain(v48);
  uint64_t v50 = *(const void **)(Copy + 32);
  CFStringRef v12 = (const __CFString *)Count;
  if (v50) {
    CFRelease(v50);
  }
  *(void *)(Copy + 32) = v48;
  CFRetain(v48);
  char v51 = *(const void **)(Copy + 40);
  if (v51) {
    CFRelease(v51);
  }
  *(void *)(Copy + 40) = v48;
LABEL_138:
  if (CFEqual(v9, @"Ethernet"))
  {
    if ((v88 & 1) == 0)
    {
      BridgeInterface = findBridgeInterface(v5, v91);
      if (BridgeInterface || (BridgeInterface = findVLANInterface(v5, v91)) != 0LL)
      {
        CFRelease((CFTypeRef)Copy);
        uint64_t Copy = (uint64_t)BridgeInterface;
LABEL_155:
        __SCNetworkInterfaceCacheAdd1(v91, (const void *)Copy);
        goto LABEL_156;
      }
    }

    CFIndex v52 = CFDictionaryGetValue(a2, @"Hardware");
    CFTypeID v53 = CFStringGetTypeID();
    if (v52 && CFGetTypeID(v52) == v53 && CFEqual(v52, @"AirPort"))
    {
      *(void *)(Copy + 16) = @"IEEE80211";
      *(void *)(Copy + 48) = @"airport";
      int v54 = 12;
LABEL_153:
      *(_DWORD *)(Copy + 312) = v54;
LABEL_154:
      *(_BYTE *)(Copy + 176) = 1;
      goto LABEL_155;
    }

    *(void *)(Copy + 16) = @"Ethernet";
    if (__SCNetworkInterfaceMatchesName(v43, @"ether")
      || __SCNetworkInterfaceMatchesName(v43, @"multiether"))
    {
      int v54 = 7;
      goto LABEL_153;
    }

    int v70 = @"iPhone";
    if (__SCNetworkInterfaceMatchesName(v43, @"iPhone")
      || __SCNetworkInterfaceMatchesName(v43, @"X-iPhone")
      || (int v70 = @"iPad", __SCNetworkInterfaceMatchesName(v43, @"iPad"))
      || __SCNetworkInterfaceMatchesName(v43, @"X-iPad"))
    {
      *(void *)(Copy + 48) = v70;
      int v67 = 16;
    }

    else
    {
      if (__SCNetworkInterfaceMatchesName(v43, @"thunderbolt")
        || __SCNetworkInterfaceMatchesName(v43, @"multithunderbolt"))
      {
        *(void *)(Copy + 48) = @"thunderbolt";
        int v54 = 13;
        goto LABEL_153;
      }

      if (__SCNetworkInterfaceMatchesName(v43, @"bluetooth-pan-gn"))
      {
        *(void *)(Copy + 48) = @"bluetooth-pan-gn";
        int v67 = 18;
      }

      else if (__SCNetworkInterfaceMatchesName(v43, @"bluetooth-pan-nap"))
      {
        *(void *)(Copy + 48) = @"bluetooth-pan-nap";
        int v67 = 19;
      }

      else if (__SCNetworkInterfaceMatchesName(v43, @"bluetooth-pan-u"))
      {
        *(void *)(Copy + 48) = @"bluetooth-pan-u";
        int v67 = 20;
      }

      else
      {
        int v67 = 7;
      }
    }

LABEL_190:
    *(_DWORD *)(Copy + 312) = v67;
    goto LABEL_155;
  }

  if (CFEqual(v9, @"FireWire"))
  {
    *(void *)(Copy + 16) = @"FireWire";
    *(_DWORD *)(Copy + 312) = 11;
    goto LABEL_154;
  }

  if (!CFEqual(v9, v12) || !v11)
  {
    if (CFEqual(v9, @"VPN") && v11) {
      goto LABEL_194;
    }
    if (CFEqual(v9, @"IPSec"))
    {
      CFRelease((CFTypeRef)Copy);
      uint64_t v69 = @"IPSec";
LABEL_182:
      uint64_t Copy = (uint64_t)SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v69);
      goto LABEL_156;
    }

    if (CFEqual(v9, @"6to4"))
    {
      CFRelease((CFTypeRef)Copy);
      if (isA_CFString(v91))
      {
        uint64_t v69 = @"6to4";
        goto LABEL_182;
      }
    }

    else
    {
      if (CFEqual(v9, @"PointToPoint"))
      {
        *(void *)(Copy + 16) = @"PointToPoint";
        goto LABEL_156;
      }

      if (CFEqual(v9, @"Loopback"))
      {
        CFRelease((CFTypeRef)Copy);
        uint64_t Copy = (uint64_t)__SCNetworkInterfaceCreateCopy(v82, (uint64_t)&__kSCNetworkInterfaceLoopback, 0LL, 0LL);
        goto LABEL_156;
      }

      if (CFStringFind(v9, @".", 0LL).location != -1)
      {
        pthread_mutex_lock(&lock_1);
        CFMutableDictionaryRef Mutable = (__CFSet *)vendor_interface_types;
        if (!vendor_interface_types)
        {
          CFMutableDictionaryRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
          vendor_interface_types = (uint64_t)Mutable;
        }

        CFSetAddValue(Mutable, v9);
        *(void *)(Copy + 16) = CFSetGetValue((CFSetRef)vendor_interface_types, v9);
        pthread_mutex_unlock(&lock_1);
        goto LABEL_156;
      }

      CFRelease((CFTypeRef)Copy);
    }

    return 0LL;
  }

  if (CFEqual(v11, @"PPPoE"))
  {
    int v66 = CFDictionaryGetValue(a2, @"Hardware");
    if (isA_CFString(v66) && CFEqual(v66, @"AirPort"))
    {
      int v67 = 12;
      uint64_t v68 = @"IEEE80211";
    }

    else
    {
      int v67 = 7;
      uint64_t v68 = @"Ethernet";
    }

    *(void *)(Copy + 16) = v68;
    goto LABEL_190;
  }

  if (!CFEqual(v11, @"PPPSerial"))
  {
LABEL_194:
    CFRelease((CFTypeRef)Copy);
    uint64_t Copy = (uint64_t)SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v11);
    if (!Copy) {
      return (SCNetworkInterfaceRef)Copy;
    }
    goto LABEL_156;
  }

  uint64_t v71 = v12;
  uint64_t v72 = v91;
  if (CFStringHasPrefix(v91, @"Bluetooth"))
  {
    *(void *)(Copy + 16) = @"Bluetooth";
    int v73 = 3;
  }

  else if (CFStringHasPrefix(v72, @"wwan"))
  {
    *(void *)(Copy + 16) = @"WWAN";
    int v73 = 4;
  }

  else
  {
    *(void *)(Copy + 16) = @"Modem";
    int v73 = 2;
  }

  *(_DWORD *)(Copy + 312) = v73;
  CFStringRef v12 = v71;
LABEL_156:
  CFRange v56 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"HiddenConfiguration");
  *(_BYTE *)(Copy + 192) = getBooleanValue(v56);
  if (CFDictionaryContainsKey(a2, @"TrustRequired")) {
    *(_BYTE *)(Copy + 240) = 1;
  }
LABEL_158:
  if (a3)
  {
    __SCNetworkInterfaceSetService(Copy, a3);
    if (CFEqual(*(CFTypeRef *)(Copy + 16), @"Bridge"))
    {
      MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces((const __SCNetworkInterface *)Copy);
      if (MemberInterfaces)
      {
        uint64_t v58 = MemberInterfaces;
        CFIndex v59 = CFArrayGetCount(MemberInterfaces);
        if (v59 >= 1)
        {
          CFIndex v60 = v59;
          for (CFIndex j = 0LL; j != v60; ++j)
          {
            CFTypeID v62 = CFArrayGetValueAtIndex(v58, j);
            __SCNetworkInterfaceSetService((uint64_t)v62, a3);
          }
        }
      }
    }

    if (CFEqual(*(CFTypeRef *)(Copy + 16), @"VLAN"))
    {
      SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface((SCVLANInterfaceRef)Copy);
      if (PhysicalInterface) {
        __SCNetworkInterfaceSetService((uint64_t)PhysicalInterface, a3);
      }
    }
  }

  if (CFEqual(v9, v12))
  {
    int v64 = @"PPP";
LABEL_171:
    SCNetworkInterfaceRef v65 = SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)Copy, v64);
    CFRelease((CFTypeRef)Copy);
    return v65;
  }

  if (CFEqual(v9, @"VPN"))
  {
    int v64 = @"VPN";
    goto LABEL_171;
  }

  return (SCNetworkInterfaceRef)Copy;
}

void __SCNetworkInterfaceSetIOInterfaceUnit(uint64_t a1, const void *a2)
{
  v32[1] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    return;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  uint64_t v6 = *(void *)(a1 + 232);
  if (!v6)
  {
    BOOL v7 = *(const void **)(a1 + 112);
    CFTypeID v8 = CFStringGetTypeID();
    if (v7 && CFGetTypeID(v7) == v8)
    {
      CFMutableStringRef v9 = _SCNetworkInterfaceCopyPrefixFromBSDName(*(const __CFString **)(a1 + 112));
      if (v9)
      {
        CFMutableStringRef v10 = v9;
        CFTypeID v11 = CFStringGetTypeID();
        if (CFGetTypeID(v10) == v11)
        {
          CFRetain(v10);
          CFStringRef v12 = *(const void **)(a1 + 232);
          if (v12) {
            CFRelease(v12);
          }
          *(void *)(a1 + 232) = v10;
        }

        CFRelease(v10);
      }

      else
      {
        CFTypeID v13 = __log_SCNetworkConfiguration();
        uint64_t v14 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v13, (os_log_type_t)v14))
        {
          uint64_t v15 = _os_log_pack_size();
          CFIndex v16 = (char *)v32 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v13, v14, v16);
        }
      }
    }

    uint64_t v6 = *(void *)(a1 + 232);
    if (!v6)
    {
      CFStringRef v17 = 0LL;
      goto LABEL_19;
    }
  }

  CFStringRef v17 = CFStringCreateWithFormat(0LL, 0LL, @"%@%@", v6, a2);
  if (!v17)
  {
LABEL_19:
    char v18 = 1;
    goto LABEL_20;
  }

  char v18 = 0;
  if (!__SCNetworkInterfaceUpdateBSDName((CFTypeRef)a1, BSDName, v17))
  {
LABEL_20:
    CFDictionaryRef v19 = __log_SCNetworkConfiguration();
    uint64_t v20 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v19, (os_log_type_t)v20))
    {
      uint64_t v21 = _os_log_pack_size();
      uint64_t v22 = (char *)v32 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v19, v20, v22);
    }
  }

  int v23 = *(const void **)(a1 + 208);
  CFTypeID v24 = CFStringGetTypeID();
  if (v23 && CFGetTypeID(v23) == v24)
  {
    CFStringRef v25 = CFStringCreateWithFormat(0LL, 0LL, @"Migrated_From: %@", v23);
    char v26 = *(const void **)(a1 + 208);
    if (v26) {
      CFRelease(v26);
    }
    *(void *)(a1 + 208) = CFRetain(v25);
    if (v25) {
      CFRelease(v25);
    }
  }

  else
  {
    uint64_t v27 = __log_SCNetworkConfiguration();
    uint64_t v28 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v27, (os_log_type_t)v28))
    {
      uint64_t v29 = _os_log_pack_size();
      uint64_t v30 = (char *)v32 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v27, v28, v30);
    }
  }

  CFRetain(a2);
  CFIndex v31 = *(const void **)(a1 + 256);
  if (v31) {
    CFRelease(v31);
  }
  *(void *)(a1 + 256) = a2;
  if ((v18 & 1) == 0) {
    CFRelease(v17);
  }
}

CFStringRef SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_9:
      int v4 = 1002;
      goto LABEL_10;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  unsigned int v3 = (void *)*((void *)interface + 9);
  if (!v3 || v3 == &__kSCNetworkInterfaceIPv4) {
    return (CFStringRef)*((void *)interface + 14);
  }
  int v4 = 0;
LABEL_10:
  _SCErrorSet(v4);
  return 0LL;
}

CFMutableStringRef _SCNetworkInterfaceCopyPrefixFromBSDName(const __CFString *a1)
{
  v11[1] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, a1);
    CFIndex Length = CFStringGetLength(MutableCopy);
    if (Length >= 1)
    {
      do
      {
        CFIndex v5 = Length - 1;
        v12.CFIndex location = v5;
        v12.length = 1LL;
        CFStringDelete(MutableCopy, v12);
        CFIndex Length = CFStringGetLength(MutableCopy);
      }

      while (Length > 0);
    }
  }

  else
  {
    uint64_t v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      CFMutableStringRef v9 = (char *)v11 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v6, v7, v9);
    }

    return 0LL;
  }

  return MutableCopy;
}

BOOL __SCNetworkInterfaceUpdateBSDName(CFTypeRef cf, const void *a2, const void *a3)
{
  v13[1] = *MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_9:
      CFMutableStringRef v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(6);
      BOOL result = __SC_log_enabled(6, v9, (os_log_type_t)v10);
      if (!result) {
        return result;
      }
      uint64_t v11 = _os_log_pack_size();
      CFRange v12 = (char *)v13 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v9, v10, v12);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_9;
    }
  }

  uint64_t v6 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_9;
  }
  if (CFEqual(a2, a3)) {
    return 0LL;
  }
  uint64_t v7 = (const void *)*((void *)cf + 14);
  if (v7) {
    CFRelease(v7);
  }
  *((void *)cf + 14) = CFRetain(a3);
  return 1LL;
}

__CFString *__SCNetworkInterfaceCopyStorageEntity(uint64_t a1)
{
  CFStringRef BSDName = (__CFString *)SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  CFTypeID TypeID = CFStringGetTypeID();
  if (BSDName)
  {
    if (CFGetTypeID(BSDName) != TypeID) {
      return 0LL;
    }
    int v4 = (const void *)*MEMORY[0x189604DE8];
    CFIndex v5 = (const void *)(*(_BYTE *)(a1 + 176) ? *MEMORY[0x189604DE8] : *MEMORY[0x189604DE0]);
    uint64_t v6 = *(const void **)(a1 + 232);
    CFTypeID v7 = CFStringGetTypeID();
    if (!v6) {
      return 0LL;
    }
    if (CFGetTypeID(v6) != v7) {
      return 0LL;
    }
    uint64_t v8 = *(const void **)(a1 + 248);
    CFTypeID v9 = CFNumberGetTypeID();
    if (!v8) {
      return 0LL;
    }
    if (CFGetTypeID(v8) != v9) {
      return 0LL;
    }
    uint64_t v10 = *(const void **)(a1 + 256);
    CFTypeID v11 = CFNumberGetTypeID();
    if (!v10) {
      return 0LL;
    }
    if (CFGetTypeID(v10) == v11
      && (v12 = *(const void **)(a1 + 160), CFTypeID v13 = CFDataGetTypeID(), v12)
      && CFGetTypeID(v12) == v13
      && (uint64_t v14 = *(void **)(a1 + 208), v15 = CFStringGetTypeID(), v14)
      && CFGetTypeID(v14) == v15
      && (v16 = _SCNetworkInterfaceCopyInterfaceInfo(a1), CFTypeID v17 = CFDictionaryGetTypeID(), v16))
    {
      CFTypeRef cf = v16;
      if (CFGetTypeID(v16) == v17
        && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
            CFTypeID v25 = CFStringGetTypeID(),
            InterfaceType)
        && (CFTypeID v24 = v14, v19 = BSDName, CFGetTypeID(InterfaceType) == v25))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        CFStringRef BSDName = (__CFString *)Mutable;
        if (*(_BYTE *)(a1 + 24)) {
          CFDictionaryAddValue(Mutable, @"Active", v4);
        }
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"BSD Name", v19);
        if (*(_BYTE *)(a1 + 192)) {
          CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"HiddenConfiguration", v4);
        }
        if (*(_BYTE *)(a1 + 193)) {
          CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"HiddenInterface", v4);
        }
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOBuiltin", v5);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOInterfaceNamePrefix", v6);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOInterfaceType", v8);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOInterfaceUnit", v10);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOMACAddress", v12);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOPathMatch", v24);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"SCNetworkInterfaceInfo", cf);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"SCNetworkInterfaceType", InterfaceType);
        uint64_t v21 = *(const void **)(a1 + 304);
        CFTypeID v22 = CFArrayGetTypeID();
        if (v21 && CFGetTypeID(v21) == v22) {
          CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"MatchingMACs", *(const void **)(a1 + 304));
        }
      }

      else
      {
        CFStringRef BSDName = 0LL;
      }

      CFRelease(cf);
    }

    else
    {
      return 0LL;
    }
  }

  return BSDName;
}

uint64_t _SCNetworkInterfaceGetIOInterfaceNamePrefix(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t _SCNetworkInterfaceGetIOInterfaceType(uint64_t a1)
{
  return *(void *)(a1 + 248);
}

uint64_t _SCNetworkInterfaceGetIOInterfaceUnit(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t _SCNetworkInterfaceGetHardwareAddress(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t _SCNetworkInterfaceGetIOPath(uint64_t a1)
{
  return *(void *)(a1 + 208);
}

__CFDictionary *_SCNetworkInterfaceCopyInterfaceInfo(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  NonLocalizedDisplayCFStringRef Name = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)a1);
  if (NonLocalizedDisplayName) {
    CFDictionaryAddValue(Mutable, @"UserDefinedName", NonLocalizedDisplayName);
  }
  int v4 = *(const void **)(a1 + 288);
  if (v4 || *(void *)(a1 + 296))
  {
    if (*(void *)(a1 + 280))
    {
      CFDictionaryAddValue(Mutable, @"kUSBProductString", *(const void **)(a1 + 280));
      int v4 = *(const void **)(a1 + 288);
    }

    if (v4) {
      CFDictionaryAddValue(Mutable, @"idVendor", v4);
    }
    CFIndex v5 = *(const void **)(a1 + 296);
    if (v5) {
      CFDictionaryAddValue(Mutable, @"idProduct", v5);
    }
  }

  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

uint64_t __SCNetworkInterfaceMatchesName(const __CFString *a1, const __CFString *a2)
{
  v10[1] = *MEMORY[0x1895F89C0];
  if (!bundle)
  {
    uint64_t v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    uint64_t result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v8 = _os_log_pack_size();
    CFTypeID v9 = (char *)v10 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v6, v7, v9);
    return 0LL;
  }

  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  uint64_t result = matchesName((__CFBundle *)bundle, a1, a2, 0);
  if (!(_DWORD)result) {
    return matchesName((__CFBundle *)bundle, a1, a2, 1);
  }
  return result;
}

uint64_t matchesName(__CFBundle *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  CFStringRef v5 = copy_interface_string(a1, a3, a4);
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = v5;
  uint64_t v7 = CFEqual(a2, v5);
  if (!(_DWORD)v7)
  {
    if (CFStringHasSuffix(v6, @" %@"))
    {
      CFIndex Length = CFStringGetLength(a2);
      do
      {
        CFIndex v9 = Length;
        if (Length < 3) {
          break;
        }
        --Length;
      }

      while (CFStringGetCharacterAtIndex(a2, v9 - 1) - 58 > 0xFFFFFFF5);
      v13.CFIndex location = 0LL;
      v13.length = v9;
      CFStringRef v10 = CFStringCreateWithSubstring(0LL, a2, v13);
      v14.length = CFStringGetLength(v6) - 2;
      v14.CFIndex location = 0LL;
      CFStringRef v11 = CFStringCreateWithSubstring(0LL, v6, v14);
      uint64_t v7 = CFEqual(v10, v11);
      CFRelease(v10);
      CFRelease(v11);
    }

    else
    {
      uint64_t v7 = 0LL;
    }
  }

  CFRelease(v6);
  return v7;
}

void _SCNetworkInterfaceCacheOpen()
{
  v12[1] = *MEMORY[0x1895F89C0];
  int v0 = __SCGetThreadSpecificData();
  uint32_t v1 = (const void *)v0[1];
  if (v1)
  {
    CFRetain(v1);
    uint64_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(7);
    if (!__SC_log_enabled(7, v2, (os_log_type_t)v3)) {
      return;
    }
    uint64_t v4 = _os_log_pack_size();
    CFStringRef v5 = (char *)v12 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    uint64_t v7 = (const void *)v0[1];
    CFIndex v8 = CFGetRetainCount(v7);
    *(_DWORD *)uint64_t v6 = 134218240;
    *(void *)(v6 + 4) = v7;
    *(_WORD *)(v6 + 12) = 2048;
    *(void *)(v6 + 14) = v8;
  }

  else
  {
    v0[1] = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    uint64_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(7);
    if (!__SC_log_enabled(7, v2, (os_log_type_t)v3)) {
      return;
    }
    uint64_t v9 = _os_log_pack_size();
    CFStringRef v5 = (char *)v12 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    uint64_t v11 = v0[1];
    *(_DWORD *)uint64_t v10 = 134217984;
    *(void *)(v10 + 4) = v11;
  }

  __SC_log_send(7, (uint64_t)v2, v3, v5);
}

void _SCNetworkInterfaceCacheClose()
{
  v14[1] = *MEMORY[0x1895F89C0];
  int v0 = __SCGetThreadSpecificData();
  uint32_t v1 = (const void *)v0[1];
  if (v1)
  {
    CFIndex v2 = CFGetRetainCount(v1);
    CFRelease((CFTypeRef)v0[1]);
    uint64_t v3 = __log_SCNetworkConfiguration();
    uint64_t v4 = _SC_syslog_os_log_mapping(7);
    BOOL v5 = __SC_log_enabled(7, v3, (os_log_type_t)v4);
    if (v2 < 2)
    {
      if (v5)
      {
        uint64_t v10 = _os_log_pack_size();
        uint64_t v11 = (char *)v14 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        uint64_t v13 = v0[1];
        *(_DWORD *)uint64_t v12 = 134217984;
        *(void *)(v12 + 4) = v13;
        __SC_log_send(7, (uint64_t)v3, v4, v11);
      }

      v0[1] = 0LL;
    }

    else if (v5)
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v7 = (char *)v14 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = v0[1];
      *(_DWORD *)uint64_t v8 = 134218240;
      *(void *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 12) = 2048;
      *(void *)(v8 + 14) = v2;
      __SC_log_send(7, (uint64_t)v3, v4, v7);
    }
  }

CFTypeRef __SCNetworkInterfaceCreateCopy(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if ((_UNKNOWN *)a2 == &__kSCNetworkInterfaceIPv4) {
    return CFRetain(&__kSCNetworkInterfaceIPv4);
  }
  uint64_t Private = __SCNetworkInterfaceCreatePrivate(0LL, 0LL, a3, a4);
  *(void *)(Private + 16) = *(void *)(a2 + 16);
  if (*(void *)(a2 + 72)) {
    *(void *)(Private + 72) = __SCNetworkInterfaceCreateCopy();
  }
  uint64_t v8 = *(const void **)(a2 + 32);
  if (v8) {
    *(void *)(Private + 32) = CFRetain(v8);
  }
  uint64_t v9 = *(const void **)(a2 + 232);
  if (v9) {
    *(void *)(Private + 232) = CFRetain(v9);
  }
  uint64_t v10 = *(const void **)(a2 + 40);
  if (v10) {
    *(void *)(Private + 40) = CFRetain(v10);
  }
  uint64_t v11 = *(const void **)(a2 + 56);
  *(void *)(Private + 48) = *(void *)(a2 + 48);
  if (v11) {
    *(void *)(Private + 56) = CFRetain(v11);
  }
  uint64_t v12 = *(const void **)(a2 + 64);
  if (v12) {
    *(void *)(Private + 64) = CFRetain(v12);
  }
  uint64_t v13 = *(const __CFDictionary **)(a2 + 104);
  if (v13) {
    *(void *)(Private + 104) = CFDictionaryCreateMutableCopy(0LL, 0LL, v13);
  }
  CFRange v14 = *(const void **)(a2 + 112);
  if (v14) {
    *(void *)(Private + 112) = CFRetain(v14);
  }
  CFTypeID v15 = *(const void **)(a2 + 120);
  if (v15) {
    *(void *)(Private + 120) = CFRetain(v15);
  }
  *(_OWORD *)(Private + 128) = *(_OWORD *)(a2 + 128);
  CFIndex v16 = *(const __CFArray **)(a2 + 144);
  if (v16) {
    *(void *)(Private + 144) = CFArrayCreateMutableCopy(0LL, 0LL, v16);
  }
  CFTypeID v17 = *(const __CFArray **)(a2 + 152);
  if (v17) {
    *(void *)(Private + 152) = CFArrayCreateMutableCopy(0LL, 0LL, v17);
  }
  char v18 = *(const void **)(a2 + 160);
  if (v18) {
    *(void *)(Private + 160) = CFRetain(v18);
  }
  *(_BYTE *)(Private + 176) = *(_BYTE *)(a2 + 176);
  CFDictionaryRef v19 = *(const void **)(a2 + 184);
  if (v19) {
    *(void *)(Private + 184) = CFRetain(v19);
  }
  *(_WORD *)(Private + 192) = *(_WORD *)(a2 + 192);
  *(_BYTE *)(Private + 240) = *(_BYTE *)(a2 + 240);
  uint64_t v20 = *(const void **)(a2 + 200);
  if (v20) {
    *(void *)(Private + 200) = CFRetain(v20);
  }
  uint64_t v21 = *(const void **)(a2 + 208);
  if (v21) {
    *(void *)(Private + 208) = CFRetain(v21);
  }
  CFTypeID v22 = *(const __CFDictionary **)(a2 + 224);
  *(void *)(Private + 216) = *(void *)(a2 + 216);
  if (v22) {
    *(void *)(Private + 224) = CFDictionaryCreateMutableCopy(0LL, 0LL, v22);
  }
  int v23 = *(const void **)(a2 + 248);
  if (v23) {
    *(void *)(Private + 248) = CFRetain(v23);
  }
  CFTypeID v24 = *(const void **)(a2 + 256);
  if (v24) {
    *(void *)(Private + 256) = CFRetain(v24);
  }
  CFTypeID v25 = *(const void **)(a2 + 264);
  if (v25) {
    *(void *)(Private + 264) = CFRetain(v25);
  }
  char v26 = *(const void **)(a2 + 272);
  if (v26) {
    *(void *)(Private + 272) = CFRetain(v26);
  }
  uint64_t v27 = *(const void **)(a2 + 280);
  if (v27) {
    *(void *)(Private + 280) = CFRetain(v27);
  }
  uint64_t v28 = *(const void **)(a2 + 288);
  if (v28) {
    *(void *)(Private + 288) = CFRetain(v28);
  }
  uint64_t v29 = *(const void **)(a2 + 296);
  if (v29) {
    *(void *)(Private + 296) = CFRetain(v29);
  }
  *(_DWORD *)(Private + 312) = *(_DWORD *)(a2 + 312);
  *(_BYTE *)(Private + 316) = *(_BYTE *)(a2 + 316);
  uint64_t v30 = *(const void **)(a2 + 320);
  if (v30) {
    *(void *)(Private + 320) = CFRetain(v30);
  }
  CFIndex v31 = *(const void **)(a2 + 328);
  if (v31) {
    *(void *)(Private + 328) = CFRetain(v31);
  }
  CFIndex v32 = *(const void **)(a2 + 336);
  if (v32) {
    *(void *)(Private + 336) = CFRetain(v32);
  }
  *(_BYTE *)(Private + 344) = *(_BYTE *)(a2 + 344);
  CFIndex v33 = *(const void **)(a2 + 352);
  if (v33) {
    *(void *)(Private + 352) = CFRetain(v33);
  }
  BOOL v34 = *(const void **)(a2 + 360);
  if (v34) {
    *(void *)(Private + 360) = CFRetain(v34);
  }
  *(_BYTE *)(Private + 368) = *(_BYTE *)(a2 + 368);
  uint64_t v35 = *(const void **)(a2 + 376);
  if (v35) {
    *(void *)(Private + 376) = CFRetain(v35);
  }
  unsigned int v36 = *(const void **)(a2 + 384);
  if (v36) {
    *(void *)(Private + 384) = CFRetain(v36);
  }
  uint64_t v37 = *(const void **)(a2 + 392);
  if (v37) {
    *(void *)(Private + 392) = CFRetain(v37);
  }
  return (CFTypeRef)Private;
}

uint64_t __SCNetworkInterfaceCacheCopy(const void *a1, uint64_t *a2)
{
  v14[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = __SCGetThreadSpecificData();
  uint64_t result = 0LL;
  if (a1)
  {
    uint64_t v6 = v4[1];
    if (v6)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)v4[1], a1);
      *a2 = result;
      if (result)
      {
        if (result == *MEMORY[0x189605018]) {
          *a2 = 0LL;
        }
        else {
          CFRetain((CFTypeRef)result);
        }
        uint64_t v7 = __log_SCNetworkConfiguration();
        uint64_t v8 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
        {
          uint64_t v9 = _os_log_pack_size();
          uint64_t v10 = (char *)v14 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          uint64_t v12 = *a2;
          *(_DWORD *)uint64_t v11 = 134218498;
          *(void *)(v11 + 4) = v6;
          if (v12) {
            uint64_t v13 = "";
          }
          else {
            uint64_t v13 = "no ";
          }
          *(_WORD *)(v11 + 12) = 2080;
          *(void *)(v11 + 14) = v13;
          *(_WORD *)(v11 + 22) = 2112;
          *(void *)(v11 + 24) = a1;
          __SC_log_send(7, (uint64_t)v7, v8, v10);
          return 1LL;
        }

        else
        {
          return 1LL;
        }
      }
    }
  }

  return result;
}

void __SCNetworkInterfaceCacheAdd(const void *a1, const void *a2)
{
  v11[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = __SCGetThreadSpecificData();
  if (a1)
  {
    BOOL v5 = (__CFDictionary *)v4[1];
    if (v5)
    {
      if (!a2) {
        a2 = (const void *)*MEMORY[0x189605018];
      }
      uint64_t v6 = __log_SCNetworkConfiguration();
      uint64_t v7 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
      {
        uint64_t v8 = _os_log_pack_size();
        uint64_t v9 = (char *)v11 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v10 = 134218242;
        *(void *)(v10 + 4) = v5;
        *(_WORD *)(v10 + 12) = 2112;
        *(void *)(v10 + 14) = a1;
        __SC_log_send(7, (uint64_t)v6, v7, v9);
      }

      CFDictionaryAddValue(v5, a1, a2);
    }
  }

__CFArray *findMatchingInterfaces( const void *a1, unsigned int (*a2)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *), const __CFString *a3, int a4, int a5)
{
  kern_return_t MatchingServices;
  kern_return_t v11;
  os_log_s *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  __CFArray *Mutable;
  uint64_t v18;
  uint64_t v19;
  _DWORD *Interface;
  const void *v21;
  uint64_t v23;
  uint64_t v24;
  CFTypeID v24 = *MEMORY[0x1895F89C0];
  HIDWORD(v23) = 0;
  CFRetain(a1);
  MatchingServices = IOServiceGetMatchingServices(masterPort, (CFDictionaryRef)a1, (io_iterator_t *)&v23 + 1);
  if (MatchingServices)
  {
    uint64_t v11 = MatchingServices;
    uint64_t v12 = __log_SCNetworkConfiguration();
    uint64_t v13 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v12, (os_log_type_t)v13))
    {
      CFRange v14 = _os_log_pack_size();
      CFTypeID v15 = (char *)&v23 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      CFIndex v16 = (_DWORD *)_os_log_pack_fill();
      CFArrayRef v16 = 67109120;
      v16[1] = v11;
      __SC_log_send(6, (uint64_t)v12, v13, v15);
    }

    return 0LL;
  }

  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    char v18 = IOIteratorNext(HIDWORD(v23));
    if ((_DWORD)v18)
    {
      CFDictionaryRef v19 = v18;
      do
      {
        Interface = (_DWORD *)createInterface(v19, a2, a3, a4);
        if (Interface)
        {
          uint64_t v21 = Interface;
          CFRelease(v21);
        }

        IOObjectRelease(v19);
        CFDictionaryRef v19 = IOIteratorNext(HIDWORD(v23));
      }

      while ((_DWORD)v19);
    }

    IOObjectRelease(HIDWORD(v23));
  }

  return Mutable;
}

BOOL processNetworkInterface( uint64_t a1, io_registry_entry_t a2, CFDictionaryRef theDict, io_object_t a4, const __CFDictionary *a5, io_registry_entry_t a6, const __CFDictionary *a7)
{
  uint64_t v82 = *MEMORY[0x1895F89C0];
  int valuePtr = -1;
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"IOInterfaceType");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID || !CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr))
  {
    char v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v18, (os_log_type_t)v19);
    if (!result) {
      return result;
    }
    uint64_t v21 = _os_log_pack_size();
    CFTypeID v22 = (char *)&parent[-2] - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v23 = 138412290;
    *(void *)(v23 + 4) = theDict;
    __SC_log_send(6, (uint64_t)v18, v19, v22);
    return 0LL;
  }

  *(void *)(a1 + 248) = CFRetain(Value);
  if (valuePtr == 6)
  {
    if (IOObjectConformsTo(a4, "IO80211Controller")
      || IOObjectConformsTo(a4, "AirPortPCI")
      || IOObjectConformsTo(a4, "AirPortDriver"))
    {
      *(void *)(a1 + 16) = @"IEEE80211";
      *(void *)(a1 + 128) = @"Ethernet";
      int v24 = 12;
    }

    else if (IOObjectConformsTo(a4, "AppleThunderboltIPPort"))
    {
      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v24 = 13;
    }

    else if (IOObjectConformsTo(a4, "IOBluetoothBNEPDriver"))
    {
      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v24 = 18;
    }

    else if (IOObjectConformsTo(a4, "AppleUSBEthernetHost"))
    {
      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v24 = 15;
    }

    else
    {
      if (!IOObjectConformsTo(a4, "AppleUSBCDCECMData"))
      {
        if (IOObjectConformsTo(a4, "IOUserEthernetController")) {
          *(_BYTE *)(a1 + 243) = 1;
        }
LABEL_18:
        CFTypeID v25 = *(const __CFString **)(a1 + 16);
        if (v25) {
          goto LABEL_63;
        }
        CFTypeRef v26 = IORegistryEntrySearchCFProperty(a2, "IOService", @"InterfaceRole", 0LL, 3u);
        if (!v26)
        {
LABEL_56:
          CFTypeID v25 = *(const __CFString **)(a1 + 16);
          if (!v25)
          {
            CFTypeID v44 = (const __CFString *)CFDictionaryGetValue(a7, @"name");
            CFStringRef v45 = IOCopyCFStringValue(v44);
            if (v45)
            {
              CFStringRef v46 = v45;
              if (CFEqual(v45, @"radio"))
              {
                *(void *)(a1 + 16) = @"Ethernet";
                *(void *)(a1 + 128) = @"Ethernet";
                *(_DWORD *)(a1 + 312) = 14;
              }

              CFRelease(v46);
            }

            CFTypeID v25 = *(const __CFString **)(a1 + 16);
            if (!v25)
            {
              CFTypeID v25 = @"Ethernet";
              *(void *)(a1 + 16) = @"Ethernet";
              *(void *)(a1 + 128) = @"Ethernet";
              *(_DWORD *)(a1 + 312) = 7;
              *(_BYTE *)(a1 + 316) = 1;
            }
          }

LABEL_139:
            if (!*(void *)(a1 + 48)) {
              update_interface_name((void *)a1, a2, 0);
            }
            if (!v68) {
              goto LABEL_152;
            }
            goto LABEL_151;
          }

          if (update_interface_name((void *)a1, a2, 0)
            || !pci_slot_info(a2, valuePtr, &v78, (CFStringRef *)parent))
          {
LABEL_151:
            CFRelease(v68);
LABEL_152:
            if (*(void *)(a1 + 48)) {
              goto LABEL_85;
            }
            CFIndex v16 = @"generic-ether";
LABEL_8:
            *(void *)(a1 + 48) = v16;
            CFTypeID v17 = (void *)IODictionaryCopyBSDName(theDict);
LABEL_9:
            *(void *)(a1 + 56) = v17;
            goto LABEL_85;
          }

          int v70 = isThunderbolt(a2);
          uint64_t v71 = *(void *)parent;
          if (v70)
          {
            if (*(void *)parent)
            {
              CFMutableStringRef v72 = v78;
              int v73 = @"thunderbolt-multiether";
LABEL_147:
              *(void *)(a1 + 48) = v73;
              *(void *)(a1 + 56) = v72;
              *(void *)(a1 + 64) = v71;
              goto LABEL_151;
            }

            CFMutableStringRef v76 = v78;
            v77 = @"thunderbolt-ether";
          }

          else
          {
            if (*(void *)parent)
            {
              CFMutableStringRef v72 = v78;
              int v73 = @"pci-multiether";
              goto LABEL_147;
            }

            CFMutableStringRef v76 = v78;
            v77 = @"pci-ether";
          }

          *(void *)(a1 + 48) = v77;
          *(void *)(a1 + 56) = v76;
          goto LABEL_151;
        }

        uint64_t v27 = v26;
        CFTypeID v28 = CFStringGetTypeID();
        if (CFGetTypeID(v27) == v28)
        {
          if (CFEqual(v27, @"Bluetooth PAN"))
          {
            int v29 = 18;
LABEL_54:
            *(void *)(a1 + 16) = @"Ethernet";
            *(void *)(a1 + 128) = @"Ethernet";
            *(_DWORD *)(a1 + 312) = v29;
            goto LABEL_55;
          }

          if (CFEqual(v27, @"Bluetooth PAN-NAP"))
          {
            int v29 = 19;
            goto LABEL_54;
          }

          if (CFEqual(v27, @"Bluetooth P2P"))
          {
            int v29 = 20;
            goto LABEL_54;
          }

          if (CFEqual(v27, @"CarPlay"))
          {
            int v29 = 21;
            goto LABEL_54;
          }

          if (CFEqual(v27, @"VMNET"))
          {
            int v29 = 23;
            goto LABEL_54;
          }
        }

LABEL_55:
        CFRelease(v27);
        goto LABEL_56;
      }

      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v24 = 17;
    }

    *(_DWORD *)(a1 + 312) = v24;
    goto LABEL_18;
  }

  if (valuePtr != 144)
  {
    if (valuePtr == 255)
    {
      *(void *)(a1 + 16) = @"Cellular";
      *(void *)(a1 + 128) = @"Cellular";
      *(_BYTE *)(a1 + 176) = 1;
      *(_DWORD *)(a1 + 312) = 22;
      CFIndex v16 = @"cellular";
      goto LABEL_8;
    }

    CFIndex v32 = __log_SCNetworkConfiguration();
    uint64_t v33 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v32, (os_log_type_t)v33);
    if (!result) {
      return result;
    }
    uint64_t v34 = _os_log_pack_size();
    uint64_t v35 = (char *)&parent[-2] - ((MEMORY[0x1895F8858](v34) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    unsigned int v36 = (_DWORD *)_os_log_pack_fill();
    int v37 = valuePtr;
    *unsigned int v36 = 67109120;
    v36[1] = v37;
    __SC_log_send(6, (uint64_t)v32, v33, v35);
    return 0LL;
  }

  *(void *)(a1 + 16) = @"FireWire";
  *(void *)(a1 + 128) = @"FireWire";
  int v30 = isBuiltin(a2);
  *(_BYTE *)(a1 + 176) = v30;
  *(_DWORD *)(a1 + 312) = 11;
  if (!v30)
  {
    if (update_interface_name((void *)a1, a2, 0)
      || !pci_slot_info(a2, valuePtr, &v78, (CFStringRef *)parent))
    {
      goto LABEL_85;
    }

    int v38 = isThunderbolt(a2);
    uint64_t v39 = *(void *)parent;
    if (v38)
    {
      if (*(void *)parent)
      {
        CFMutableStringRef v40 = v78;
        CFStringRef v41 = @"thunderbolt-multifirewire";
LABEL_38:
        *(void *)(a1 + 48) = v41;
        *(void *)(a1 + 56) = v40;
        *(void *)(a1 + 64) = v39;
        goto LABEL_85;
      }

      CFMutableStringRef v42 = v78;
      CFIndex v43 = @"thunderbolt-firewire";
    }

    else
    {
      if (*(void *)parent)
      {
        CFMutableStringRef v40 = v78;
        CFStringRef v41 = @"pci-multifirewire";
        goto LABEL_38;
      }

      CFMutableStringRef v42 = v78;
      CFIndex v43 = @"pci-firewire";
    }

    *(void *)(a1 + 48) = v43;
    *(void *)(a1 + 56) = v42;
    goto LABEL_85;
  }

  CFIndex v31 = @"firewire";
LABEL_84:
  *(void *)(a1 + 48) = v31;
LABEL_85:
  *(void *)(a1 + 112) = IODictionaryCopyBSDName(theDict);
  uint64_t v57 = CFDictionaryGetValue(a5, @"IOMACAddress");
  CFTypeID v58 = CFDataGetTypeID();
  if (v57 && CFGetTypeID(v57) == v58) {
    *(void *)(a1 + 160) = CFRetain(v57);
  }
  CFIndex v59 = CFDictionaryGetValue(theDict, @"IOInterfaceNamePrefix");
  CFTypeID v60 = CFStringGetTypeID();
  if (v59 && CFGetTypeID(v59) == v60) {
    *(void *)(a1 + 232) = CFRetain(v59);
  }
  uint64_t v61 = CFDictionaryGetValue(theDict, @"IOInterfaceUnit");
  CFTypeID v62 = CFNumberGetTypeID();
  if (v61 && CFGetTypeID(v61) == v62)
  {
    if (CFNumberGetValue((CFNumberRef)v61, kCFNumberIntType, v80)) {
      *(void *)(a1 + 256) = CFRetain(v61);
    }
  }

  merge_override(a1, a2, @"PPP");
  return 1LL;
}

uint64_t processSerialInterface(uint64_t a1, io_registry_entry_t entry, const __CFDictionary *a3)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  uint64_t v6 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(entry, "IOService", @"Initializing", 0LL, 3u);
  if (v6)
  {
    uint64_t v7 = v6;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (CFGetTypeID(v7) == TypeID)
    {
      int Value = CFBooleanGetValue(v7);
      CFRelease(v7);
      if (Value) {
        return 0LL;
      }
    }

    else
    {
      CFRelease(v7);
    }
  }

  CFTypeRef v10 = IORegistryEntrySearchCFProperty(entry, "IOService", @"WWAN", 0LL, 3u);
  if (v10)
  {
    uint64_t v11 = v10;
    CFTypeID v12 = CFBooleanGetTypeID();
    BOOL v13 = CFGetTypeID(v11) == v12 && CFBooleanGetValue((CFBooleanRef)v11) != 0;
    CFRelease(v11);
  }

  else
  {
    BOOL v13 = 0;
  }

  CFRange v14 = (const __CFString *)CFDictionaryGetValue(a3, @"IOTTYDevice");
  CFStringRef v15 = IOCopyCFStringValue(v14);
  *(void *)(a1 + 112) = v15;
  if (!v15) {
    return 0LL;
  }
  CFIndex v16 = (const __CFString *)CFDictionaryGetValue(a3, @"IOTTYBaseName");
  CFTypeID v17 = IOCopyCFStringValue(v16);
  if (!v17) {
    CFTypeID v17 = (const __CFString *)CFRetain(*(CFTypeRef *)(a1 + 112));
  }
  CFIndex Length = CFStringGetLength(@"bluetooth");
  CFTypeID v19 = CFStringGetTypeID();
  if (!v17)
  {
    CFDataGetTypeID();
    goto LABEL_30;
  }

  if (CFGetTypeID(v17) == v19)
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = v17;
    goto LABEL_22;
  }

  CFTypeID v23 = CFDataGetTypeID();
  if (CFGetTypeID(v17) != v23
    || (BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)v17),
        uint64_t v21 = CFStringCreateWithCStringNoCopy(0LL, BytePtr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x189604DC8]),
        (uint64_t v20 = v21) == 0LL))
  {
LABEL_30:
    CFTypeRef v26 = @"Modem";
    if (v13)
    {
      CFTypeRef v26 = @"WWAN";
      int v27 = 4;
    }

    else
    {
      int v27 = 2;
    }

    *(void *)(a1 + 16) = v26;
    *(_DWORD *)(a1 + 312) = v27;
    goto LABEL_34;
  }

SCNetworkInterfaceRef SCNetworkInterfaceCreateWithInterface( SCNetworkInterfaceRef interface, CFStringRef interfaceType)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  CFTypeID TypeID = CFStringGetTypeID();
  uint64_t v8 = 0LL;
  uint64_t v9 = (const void *)*((void *)interface + 2);
  CFTypeRef v10 = (CFTypeRef **)configurations;
  while (!CFEqual(v9, **v10))
  {
    ++v8;
    v10 += 5;
    if (v8 == 19)
    {
      uint64_t v8 = -1LL;
      break;
    }
  }

  uint64_t Private = __SCNetworkInterfaceCreatePrivate( 0LL,  interface,  *((const void **)interface + 10),  *((const void **)interface + 12));
  if (!Private)
  {
    _SCErrorSet(1001);
    return (SCNetworkInterfaceRef)Private;
  }

  if (CFEqual(interfaceType, @"PPP"))
  {
    *(void *)(Private + 16) = @"PPP";
    *(void *)(Private + 128) = @"PPP";
    if (v8 == -1)
    {
      uint64_t v11 = (__CFString **)((char *)interface + 128);
      goto LABEL_23;
    }

    if (((0x6895DuLL >> v8) & 1) == 0)
    {
      uint64_t v11 = configurations[5 * v8 + 3];
LABEL_23:
      *(void *)(Private + 136) = *v11;
      BOOL v13 = (const __CFString *)*((void *)interface + 14);
      if (v13) {
        *(void *)(Private + 112) = CFStringCreateCopy(0LL, v13);
      }
      CFRange v14 = (const __CFString *)*((void *)interface + 15);
      if (v14) {
        *(void *)(Private + 120) = CFStringCreateCopy(0LL, v14);
      }
      goto LABEL_32;
    }

    goto LABEL_52;
  }

  if (!CFEqual(interfaceType, @"L2TP"))
  {
    if (CFEqual(interfaceType, @"PPTP"))
    {
      if (v8 == 18)
      {
        *(void *)(Private + 16) = @"PPTP";
        *(void *)(Private + 48) = @"pptp";
        CFTypeID v12 = &kSCEntNetPPTP;
        goto LABEL_30;
      }
    }

    else if (CFEqual(interfaceType, @"6to4"))
    {
      if (v8 == 18)
      {
        *(void *)(Private + 16) = @"6to4";
        *(void *)(Private + 48) = @"6to4";
        *(void *)(Private + 128) = @"6to4";
        *(void *)(Private + 112) = CFRetain(@"stf0");
        goto LABEL_32;
      }
    }

    else if (CFEqual(interfaceType, @"IPSec"))
    {
      if (v8 == 18)
      {
        *(void *)(Private + 16) = @"IPSec";
        *(void *)(Private + 48) = @"ipsec";
        CFTypeID v12 = &kSCValNetInterfaceTypeIPSec;
        goto LABEL_30;
      }
    }

    else if (CFEqual(interfaceType, @"VPN"))
    {
      if (v8 == -1)
      {
        *(void *)(Private + 16) = @"VPN";
        *(void *)(Private + 48) = @"vpn";
        *(void *)(Private + 56) = CFRetain(*((CFTypeRef *)interface + 16));
        *(void *)(Private + 128) = @"VPN";
        uint64_t v21 = (const __CFString *)*((void *)interface + 16);
        *(void *)(Private + 136) = v21;
        uint64_t v22 = (const __CFString *)*((void *)interface + 14);
        if (v22)
        {
          *(void *)(Private + 112) = CFStringCreateCopy(0LL, v22);
          uint64_t v21 = *(const __CFString **)(Private + 136);
        }

        if (v21)
        {
          if (CFEqual(v21, @"com.cisco.anyconnect.applevpn.plugin"))
          {
            CFTypeID v23 = @"com.cisco.Cisco-AnyConnect.vpnplugin";
          }

          else if (CFEqual(*(CFTypeRef *)(Private + 136), @"net.juniper.sslvpn"))
          {
            CFTypeID v23 = @"net.juniper.Junos-Pulse.vpnplugin";
          }

          else
          {
            CFTypeID v23 = v21;
          }

          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, v23, @".");
          CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
          if (Count >= 4)
          {
            CFIndex v26 = Count;
            ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
            if (CFEqual(ValueAtIndex, @"vpnplugin"))
            {
              CFTypeID v28 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v26 - 2);
              CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, v28);
              v30.length = CFStringGetLength(MutableCopy);
              v30.CFIndex location = 0LL;
              CFStringFindAndReplace(MutableCopy, @"-", @" ", v30, 0LL);
              *(void *)(Private + 40) = MutableCopy;
            }
          }

          CFRelease(ArrayBySeparatingStrings);
        }

        goto LABEL_32;
      }
    }

    else
    {
      if (CFStringFind(interfaceType, @".", 0LL).location != -1)
      {
        pthread_mutex_lock(&lock_1);
        CFMutableDictionaryRef Mutable = (__CFSet *)vendor_interface_types;
        if (!vendor_interface_types)
        {
          CFMutableDictionaryRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
          vendor_interface_types = (uint64_t)Mutable;
        }

        CFSetAddValue(Mutable, interfaceType);
        *(void *)(Private + 16) = CFSetGetValue((CFSetRef)vendor_interface_types, interfaceType);
        pthread_mutex_unlock(&lock_1);
        CFStringRef v15 = *(CFStringRef *)(Private + 16);
        goto LABEL_31;
      }

      if (CFEqual(interfaceType, @"AppleVPN"))
      {
        *(void *)(Private + 16) = @"AppleVPN";
        *(void *)(Private + 128) = @"AppleVPN";
        goto LABEL_32;
      }
    }

const __SCNetworkInterface *findBridgeInterface(const __SCPreferences *a1, const void *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  Interface = findInterface(v3, a2);
  CFRelease(v4);
  return Interface;
}

const __SCNetworkInterface *findVLANInterface(const __SCPreferences *a1, const void *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = SCVLANInterfaceCopyAll(a1);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  Interface = findInterface(v3, a2);
  CFRelease(v4);
  return Interface;
}

CFStringRef __SCNetworkInterfaceGetNonLocalizedDisplayName(CFStringRef *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_7;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_7;
  }
  CFStringRef result = cf[4];
  if (!result)
  {
    CFStringRef result = copy_display_name((uint64_t)cf, 0, 0LL);
    cf[4] = result;
  }

  return result;
}

void __SCNetworkInterfaceCacheAdd1(const void *a1, const void *a2)
{
  v6[1] = *(const void **)MEMORY[0x1895F89C0];
  uint64_t v4 = __SCGetThreadSpecificData();
  if (a1 && v4[1])
  {
    if (a2)
    {
      v6[0] = a2;
      CFArrayRef v5 = CFArrayCreate(0LL, v6, 1LL, MEMORY[0x189605228]);
      __SCNetworkInterfaceCacheAdd(a1, v5);
      CFRelease(v5);
    }

    else
    {
      __SCNetworkInterfaceCacheAdd(a1, 0LL);
    }
  }

CFTypeRef __SCNetworkInterfaceSetService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 80) = 0LL;
  }

  CFArrayRef v5 = *(const void **)(a1 + 96);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 96) = 0LL;
  }

  uint64_t v6 = *(const void **)(a2 + 32);
  if (v6) {
    *(void *)(a1 + 80) = CFRetain(v6);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 16);
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    *(void *)(a1 + 96) = result;
  }

  return result;
}

__CFArray *__SCNetworkInterfaceCopyAll_IONetworkInterface(int a1)
{
  CFMutableDictionaryRef v2 = IOServiceMatching("IONetworkInterface");
  MatchingInterfaces = findMatchingInterfaces( v2,  (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processNetworkInterface,  @"HiddenInterface",  0,  a1);
  CFRelease(v2);
  return MatchingInterfaces;
}

__CFArray *_SCNetworkInterfaceCopyAllWithPreferences(const __SCPreferences *a1)
{
  keys[2] = *(void **)MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if (__wait_for_IOKit_to_quiesce_iokit_quiet != -1) {
    dispatch_once(&__wait_for_IOKit_to_quiesce_iokit_quiet, &__block_literal_global_455);
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  uint64_t v3 = __SCNetworkInterfaceCopyAll_IONetworkInterface(0);
  if (v3)
  {
    uint64_t v4 = v3;
    add_interfaces(Mutable, v3);
    CFRelease(v4);
  }

  keys[0] = @"IOProviderClass";
  keys[1] = @"IOSerialBSDClientType";
  values[0] = @"IOSerialBSDClient";
  values[1] = @"IOSerialStream";
  CFDictionaryRef v5 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  2LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  MatchingInterfaces = findMatchingInterfaces( v5,  (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processSerialInterface,  @"HiddenPort",  0,  0);
  CFRelease(v5);
  if (MatchingInterfaces)
  {
    add_interfaces(Mutable, MatchingInterfaces);
    CFRelease(MatchingInterfaces);
  }

  uint64_t v7 = a1;
  if (a1 || (uint64_t v7 = SCPreferencesCreate(0LL, @"SCNetworkInterfaceCopyAll", 0LL)) != 0LL)
  {
    uint64_t v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(v7);
    if (v8)
    {
      uint64_t v9 = v8;
      add_interfaces(Mutable, v8);
      CFRelease(v9);
    }

    CFTypeRef v10 = SCVLANInterfaceCopyAll(v7);
    if (v10)
    {
      uint64_t v11 = v10;
      add_interfaces(Mutable, v10);
      CFRelease(v11);
    }

    if (!a1) {
      CFRelease(v7);
    }
  }

  uint64_t Count = CFArrayGetCount(Mutable);
  if (Count >= 2)
  {
    v16.length = Count;
    v16.CFIndex location = 0LL;
    CFArraySortValues(Mutable, v16, (CFComparatorFunction)_SCNetworkInterfaceCompare, 0LL);
  }

  return Mutable;
}

void add_interfaces(__CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0LL; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex)) {
        CFArrayAppendValue(a1, ValueAtIndex);
      }
    }
  }

CFArrayRef SCNetworkInterfaceCopyAll(void)
{
  return _SCNetworkInterfaceCopyAllWithPreferences(0LL);
}

CFArrayRef SCNetworkInterfaceGetSupportedInterfaceTypes(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_21:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (!*((void *)interface + 18))
  {
    uint64_t v4 = 0LL;
    CFIndex v5 = (const void *)*((void *)interface + 2);
    uint64_t v6 = (CFTypeRef **)configurations;
    while (!CFEqual(v5, **v6))
    {
      --v4;
      v6 += 5;
      if (v4 == -19)
      {
        SCNetworkInterfaceRef v7 = SCNetworkInterfaceGetInterface(interface);
        if (v7 && CFEqual(v7, &__kSCNetworkInterfaceIPv4))
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
          *((void *)interface + 18) = Mutable;
          uint64_t v9 = @"VPN";
LABEL_19:
          CFArrayAppendValue(Mutable, v9);
          return (CFArrayRef)*((void *)interface + 18);
        }

        return (CFArrayRef)*((void *)interface + 18);
      }
    }

    if (((0x2C95DuLL >> -(char)v4) & 1) == 0)
    {
      CFTypeRef v10 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      *((void *)interface + 18) = v10;
      if (v4 == -18)
      {
        CFArrayAppendValue(v10, @"6to4");
        CFArrayAppendValue(*((CFMutableArrayRef *)interface + 18), @"L2TP");
      }

      if (v4 == -18)
      {
        CFMutableDictionaryRef Mutable = (__CFArray *)*((void *)interface + 18);
        uint64_t v9 = @"IPSec";
        goto LABEL_19;
      }
    }
  }

  return (CFArrayRef)*((void *)interface + 18);
}

CFArrayRef SCNetworkInterfaceGetSupportedProtocolTypes(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_18:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (!*((void *)interface + 19))
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = (const void *)*((void *)interface + 2);
    for (CFIndex i = (CFTypeRef **)configurations; !CFEqual(v4, **i); i += 5)
    {
      if (++v3 == 19) {
        return (CFArrayRef)*((void *)interface + 19);
      }
    }

    if (((0x53612uLL >> v3) & 1) == 0)
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      *((void *)interface + 19) = Mutable;
      if (((0x73613uLL >> v3) & 1) == 0)
      {
        CFArrayAppendValue(Mutable, @"DNS");
        CFMutableDictionaryRef Mutable = (__CFArray *)*((void *)interface + 19);
      }

      if (((0x53613uLL >> v3) & 1) == 0)
      {
        CFArrayAppendValue(Mutable, @"IPv4");
        CFMutableDictionaryRef Mutable = (__CFArray *)*((void *)interface + 19);
      }

      CFArrayAppendValue(Mutable, @"IPv6");
      if (((0x73613uLL >> v3) & 1) == 0) {
        CFArrayAppendValue(*((CFMutableArrayRef *)interface + 19), @"Proxies");
      }
    }
  }

  return (CFArrayRef)*((void *)interface + 19);
}

CFDictionaryRef __SCNetworkInterfaceGetDefaultConfiguration(const __SCNetworkSet *a1, uint64_t a2)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType(a2);
  CFDictionaryRef Value = 0LL;
  if (a1)
  {
    uint64_t v6 = DefaultConfigurationType;
    if (DefaultConfigurationType)
    {
      CFStringRef SetID = SCNetworkSetGetSetID(a1);
      SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity( 0LL,  (uint64_t)SetID,  *(void *)(a2 + 112),  (uint64_t)v6);
      if (SetNetworkInterfaceEntity)
      {
        uint64_t v9 = SetNetworkInterfaceEntity;
        CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a2 + 80), SetNetworkInterfaceEntity);
        CFRelease(v9);
        if (Value)
        {
          CFTypeID TypeID = CFDictionaryGetTypeID();
LABEL_8:
          if (CFGetTypeID(Value) == TypeID && !CFDictionaryGetCount(Value)) {
            return 0LL;
          }
          return Value;
        }

        uint64_t v11 = *(const __CFDictionary **)(a2 + 104);
        if (v11)
        {
          CFTypeID v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, v6);
          if (v12 != (const __CFDictionary *)*MEMORY[0x189605018])
          {
            CFDictionaryRef Value = v12;
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (!Value) {
              return Value;
            }
            goto LABEL_8;
          }
        }

        CFDictionaryGetTypeID();
      }

      return 0LL;
    }
  }

  return Value;
}

CFDictionaryRef SCNetworkInterfaceGetConfiguration(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_10:
      int v6 = 1002;
      goto LABEL_11;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)interface);
  if (!DefaultConfigurationType) {
    return 0LL;
  }
  uint64_t v4 = DefaultConfigurationType;
  CFDictionaryRef Configuration = (const __CFDictionary *)__SCNetworkInterfaceGetConfiguration( (uint64_t)interface,  DefaultConfigurationType);
  if (!Configuration)
  {
    int v6 = CFEqual(v4, @"AirPort");
    if (!v6)
    {
LABEL_11:
      _SCErrorSet(v6);
      return 0LL;
    }

    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *((void *)interface + 12),  (uint64_t)@"AirPort");
    CFDictionaryRef Configuration = __SCNetworkConfigurationGetValue(*((const __SCPreferences **)interface + 10), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    if (!Configuration)
    {
      int v6 = 0;
      goto LABEL_11;
    }
  }

  return Configuration;
}

const void *__SCNetworkInterfaceGetConfiguration(uint64_t a1, const void *a2)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t v4 = copyConfigurationPaths(a1, (uint64_t)a2);
  if (v4)
  {
    CFIndex v5 = v4;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, 0LL);
    CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a1 + 80), ValueAtIndex);
    CFRelease(v5);
  }

  else
  {
    uint64_t v9 = *(const __CFDictionary **)(a1 + 104);
    if (!v9 || (CFDictionaryRef Value = CFDictionaryGetValue(v9, a2), Value == (const void *)*MEMORY[0x189605018]))
    {
      CFDictionaryGetTypeID();
      return 0LL;
    }
  }

  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && !CFDictionaryGetCount((CFDictionaryRef)Value)) {
    return 0LL;
  }
  return Value;
}

CFDictionaryRef SCNetworkInterfaceGetExtendedConfiguration( SCNetworkInterfaceRef interface, CFStringRef extendedType)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) == v4
    && __SCNetworkInterfaceIsValidExtendedConfigurationType(interface, extendedType, 1))
  {
    CFDictionaryRef result = (CFDictionaryRef)__SCNetworkInterfaceGetConfiguration((uint64_t)interface, extendedType);
    if (result) {
      return result;
    }
    goto LABEL_9;
  }

uint64_t __SCNetworkInterfaceGetEntityType(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t __SCNetworkInterfaceGetEntitySubType(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

CFStringRef SCNetworkInterfaceGetHardwareAddressString(SCNetworkInterfaceRef interface)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_16:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  uint64_t v3 = (const __CFData *)*((void *)interface + 20);
  if (v3 && !*((void *)interface + 21))
  {
    BytePtr = CFDataGetBytePtr(v3);
    CFIndex Length = CFDataGetLength(*((CFDataRef *)interface + 20));
    size_t v6 = 3 * Length;
    else {
      SCNetworkInterfaceRef v7 = (char *)MEMORY[0x186E08750](0LL, v6, 0LL);
    }
    if (Length)
    {
      uint64_t v8 = v7;
      do
      {
        int v9 = *BytePtr++;
        v8 += snprintf(v8, v6, "%2.2x:", v9);
        v6 -= 3LL;
      }

      while (v6);
    }

    *((void *)interface + 21) = CFStringCreateWithCString(0LL, v7, 0x8000100u);
    if (v7 != v11) {
      CFAllocatorDeallocate(0LL, v7);
    }
  }

  return (CFStringRef)*((void *)interface + 21);
}

CFStringRef __SCNetworkInterfaceCopyOldLocalizedDisplayName(CFTypeRef cf, uint64_t a2)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v4) {
    return copy_display_name((uint64_t)cf, 1, a2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

CFStringRef copy_display_name(uint64_t a1, int a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
  if (a1)
  {
    while (1)
    {
      SCNetworkInterfaceRef v7 = *(void **)(a1 + 72);
      if (v7) {
        BOOL v8 = v7 == &__kSCNetworkInterfaceIPv4;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8 || CFEqual(*(CFTypeRef *)(a1 + 16), @"VPN")) {
        uint64_t v9 = 0LL;
      }
      else {
        uint64_t v9 = *(void *)(a1 + 72);
      }
      if (!bundle) {
        goto LABEL_27;
      }
      CFTypeRef v10 = *(const __CFString **)(a1 + 48);
      if (!v10) {
        goto LABEL_27;
      }
      if (a3) {
        CFTypeRef v10 = CFStringCreateWithFormat(0LL, 0LL, @"%@-%@", a3, v10);
      }
      else {
        CFRetain(*(CFTypeRef *)(a1 + 48));
      }
      uint64_t v11 = copy_interface_string((__CFBundle *)bundle, v10, a2);
      CFRelease(v10);
      if (v11)
      {
        if (a2)
        {
          localizeNumberString((CFStringRef *)(a1 + 56));
          localizeNumberString((CFStringRef *)(a1 + 64));
        }

        uint64_t v12 = *(void *)(a1 + 56);
        if (v12)
        {
          if (*(void *)(a1 + 64)) {
            uint64_t v21 = *(void *)(a1 + 64);
          }
          CFStringAppendFormat(Mutable, 0LL, v11, v12, v21);
        }

        else
        {
          CFStringAppend(Mutable, v11);
        }

        CFRelease(v11);
        if (!v9) {
          break;
        }
      }

      else
      {
LABEL_27:
        if (*(void *)(a1 + 80))
        {
          uint64_t v13 = *(void *)(a1 + 96);
          if (v13)
          {
            if (!v9)
            {
              CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  v13,  (uint64_t)@"Interface");
              CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), NetworkServiceEntity);
              CFRelease(NetworkServiceEntity);
              CFTypeID TypeID = CFDictionaryGetTypeID();
              if (Value)
              {
                if (CFGetTypeID(Value) == TypeID)
                {
                  CFTypeID v17 = (const __CFString *)CFDictionaryGetValue(Value, @"UserDefinedName");
                  CFTypeID v18 = CFStringGetTypeID();
                  if (v17)
                  {
                    if (CFGetTypeID(v17) == v18)
                    {
                      CFStringAppend(Mutable, v17);
                      break;
                    }
                  }
                }
              }
            }
          }
        }

        CFStringAppend(Mutable, *(CFStringRef *)(a1 + 16));
        if (*(void *)(a1 + 112) && !v9)
        {
          CFStringAppendFormat(Mutable, 0LL, @" (%@)", *(void *)(a1 + 112));
          break;
        }

        if (!v9) {
          break;
        }
      }

      CFStringAppend(Mutable, @" --> ");
      a1 = v9;
    }
  }

  CFStringRef Copy = CFStringCreateCopy(0LL, Mutable);
  CFRelease(Mutable);
  return Copy;
}

CFStringRef __SCNetworkInterfaceCopyOldNonLocalizedDisplayName(CFTypeRef cf, uint64_t a2)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_6;
    }
  }

  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v4) {
    return copy_display_name((uint64_t)cf, 0, a2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t __SCNetworkInterfaceGetUserDefinedName(void *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[4];
  }
  return 0LL;
}

const void *__SCNetworkInterfaceGetTemplateOverrides(uint64_t a1, const void *a2)
{
  uint64_t v2 = *(const __CFDictionary **)(a1 + 224);
  if (v2) {
    return CFDictionaryGetValue(v2, a2);
  }
  else {
    return 0LL;
  }
}

CFTypeID SCNetworkInterfaceGetTypeID(void)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  return __kSCNetworkInterfaceTypeID;
}

uint64_t __SCNetworkInterfaceSetDefaultConfiguration( const __SCNetworkSet *a1, uint64_t a2, __CFString *a3, const void *a4, int a5)
{
  DefaultConfigurationType = a3;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (a3) {
      goto LABEL_4;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (DefaultConfigurationType) {
      goto LABEL_4;
    }
  }

  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType(a2);
  if (!DefaultConfigurationType) {
    return 0LL;
  }
LABEL_4:
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a4 && CFGetTypeID(a4) == TypeID && !CFDictionaryGetCount((CFDictionaryRef)a4)) {
    a4 = 0LL;
  }
  if (!a1) {
    return 0LL;
  }
  CFStringRef SetID = SCNetworkSetGetSetID(a1);
  SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity( 0LL,  (uint64_t)SetID,  *(void *)(a2 + 112),  (uint64_t)DefaultConfigurationType);
  if (SetNetworkInterfaceEntity)
  {
    uint64_t v13 = SetNetworkInterfaceEntity;
    uint64_t v14 = __SCNetworkConfigurationSetValue(*(SCPreferencesRef *)(a2 + 80), SetNetworkInterfaceEntity, a4, 0);
    CFRelease(v13);
    if ((_DWORD)v14)
    {
      CFStringRef v15 = *(__CFDictionary **)(a2 + 104);
      if (v15)
      {
        CFDictionaryRemoveValue(v15, DefaultConfigurationType);
        if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a2 + 104)))
        {
          CFRelease(*(CFTypeRef *)(a2 + 104));
          *(void *)(a2 + 104) = 0LL;
        }
      }
    }

    return v14;
  }

  if (!a5)
  {
    _SCErrorSet(1004);
    return 0LL;
  }

  if (!a4) {
    a4 = (const void *)*MEMORY[0x189605018];
  }
  CFMutableStringRef Mutable = *(__CFDictionary **)(a2 + 104);
  if (!Mutable)
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    *(void *)(a2 + 104) = Mutable;
  }

  CFDictionarySetValue(Mutable, DefaultConfigurationType, a4);
  return 1LL;
}

uint64_t __SCNetworkInterfaceSetConfiguration(uint64_t a1, __CFString *a2, const void *a3, uint64_t a4)
{
  DefaultConfigurationType = a2;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (a2) {
      goto LABEL_4;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (DefaultConfigurationType) {
      goto LABEL_4;
    }
  }

  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType(a1);
  if (!DefaultConfigurationType) {
    return 0LL;
  }
LABEL_4:
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a3 && CFGetTypeID(a3) == TypeID && !CFDictionaryGetCount((CFDictionaryRef)a3)) {
    a3 = 0LL;
  }
  uint64_t v9 = copyConfigurationPaths(a1, (uint64_t)DefaultConfigurationType);
  if (v9)
  {
    CFTypeRef v10 = v9;
    CFIndex Count = CFArrayGetCount(v9);
    if (Count < 1)
    {
      a4 = 0LL;
    }

    else
    {
      CFIndex v12 = Count;
      CFIndex v13 = 0LL;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v13);
        a4 = __SCNetworkConfigurationSetValue(*(SCPreferencesRef *)(a1 + 80), ValueAtIndex, a3, 0);
        if (!(_DWORD)a4) {
          break;
        }
        if (v12 == ++v13)
        {
          CFStringRef v15 = *(__CFDictionary **)(a1 + 104);
          if (v15)
          {
            CFDictionaryRemoveValue(v15, DefaultConfigurationType);
            if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 104)))
            {
              CFRelease(*(CFTypeRef *)(a1 + 104));
              *(void *)(a1 + 104) = 0LL;
            }
          }

          break;
        }
      }
    }

    CFRelease(v10);
  }

  else if ((_DWORD)a4)
  {
    if (!a3) {
      a3 = (const void *)*MEMORY[0x189605018];
    }
    CFMutableStringRef Mutable = *(__CFDictionary **)(a1 + 104);
    if (!Mutable)
    {
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      *(void *)(a1 + 104) = Mutable;
    }

    CFDictionarySetValue(Mutable, DefaultConfigurationType, a3);
    return 1LL;
  }

  else
  {
    _SCErrorSet(1004);
  }

  return a4;
}

__CFArray *copyConfigurationPaths(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  v11[1] = *(const void **)MEMORY[0x1895F89C0];
  CFIndex v5 = *(const void **)(a1 + 16);
  size_t v6 = (CFTypeRef **)configurations;
  while (!CFEqual(v5, **v6))
  {
    ++v4;
    v6 += 5;
    if (v4 == 19)
    {
      uint64_t v7 = *(void *)(a1 + 96);
LABEL_8:
      CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, v7, a2);
      v11[0] = NetworkServiceEntity;
      CFArrayRef v10 = CFArrayCreate(0LL, v11, 1LL, MEMORY[0x189605228]);
      CFRelease(NetworkServiceEntity);
      return v10;
    }
  }

  uint64_t v7 = *(void *)(a1 + 96);
  if (((0x5BF13uLL >> v4) & 1) != 0) {
    goto LABEL_8;
  }
  if (v7) {
    return copyPerInterfaceConfigurationPaths(a1, a2);
  }
  return 0LL;
}

Boolean SCNetworkInterfaceSetConfiguration(SCNetworkInterfaceRef interface, CFDictionaryRef config)
{
  v14[1] = *MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_11:
      _SCErrorSet(1002);
      goto LABEL_12;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)interface);
  if (!DefaultConfigurationType)
  {
LABEL_12:
    LOBYTE(v6) = 0;
    return v6;
  }

  int v6 = __SCNetworkInterfaceSetConfiguration((uint64_t)interface, DefaultConfigurationType, config, 0LL);
  if (v6)
  {
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      CFArrayRef v10 = (char *)v14 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      CFDictionaryRef v12 = (CFDictionaryRef)@"NULL";
      if (config) {
        CFDictionaryRef v12 = config;
      }
      *(_DWORD *)uint64_t v11 = 138412546;
      *(void *)(v11 + 4) = interface;
      *(_WORD *)(v11 + 12) = 2112;
      *(void *)(v11 + 14) = v12;
      __SC_log_send(7, (uint64_t)v7, v8, v10);
    }
  }

  return v6;
}

Boolean SCNetworkInterfaceSetExtendedConfiguration( SCNetworkInterfaceRef interface, CFStringRef extendedType, CFDictionaryRef config)
{
  v15[1] = *MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_11:
      _SCErrorSet(1002);
      goto LABEL_12;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }

  uint64_t v6 = __kSCNetworkInterfaceTypeID;
  if (!__SCNetworkInterfaceIsValidExtendedConfigurationType(interface, extendedType, 1))
  {
LABEL_12:
    LOBYTE(v7) = 0;
    return v7;
  }

  int v7 = __SCNetworkInterfaceSetConfiguration((uint64_t)interface, (__CFString *)extendedType, config, 0LL);
  if (v7)
  {
    uint64_t v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v11 = (char *)v15 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      CFDictionaryRef v13 = (CFDictionaryRef)@"NULL";
      if (config) {
        CFDictionaryRef v13 = config;
      }
      *(_DWORD *)uint64_t v12 = 138412546;
      *(void *)(v12 + 4) = interface;
      *(_WORD *)(v12 + 12) = 2112;
      *(void *)(v12 + 14) = v13;
      __SC_log_send(7, (uint64_t)v8, v9, v11);
    }
  }

  return v7;
}

uint64_t _SCNetworkInterfaceForceConfigurationRefresh(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  @"State:",  a1,  @"RefreshConfiguration");
    uint64_t v4 = SCDynamicStoreNotifyValue(0LL, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    return v4;
  }

  else
  {
    _SCErrorSet(1002);
    return 0LL;
  }

Boolean SCNetworkInterfaceForceConfigurationRefresh(SCNetworkInterfaceRef interface)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
LABEL_20:
    int v9 = 1002;
    goto LABEL_21;
  }

LABEL_3:
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
  if (!BSDName) {
    goto LABEL_20;
  }
  uint64_t v4 = BSDName;
  uint64_t v5 = *((void *)interface + 10);
  if (!v5 || !*(void *)(v5 + 312))
  {
    LOBYTE(helper) = _SCNetworkInterfaceForceConfigurationRefresh(BSDName);
    return helper;
  }

  cf[0] = 0LL;
  int v11 = 0;
  if (*(_DWORD *)(v5 + 320) || (int helper = __SCPreferencesCreate_helper(v5)) != 0)
  {
    int v7 = (mach_port_t *)(v5 + 320);
    if (!_SCSerializeString(v4, (CFDataRef *)cf, 0LL, 0LL)) {
      goto LABEL_25;
    }
    int v11 = 0;
    int v8 = _SCHelperExec(*v7, 200, (const __CFData *)cf[0], &v11, 0LL);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v8)
    {
      int v9 = v11;
      if (!v11)
      {
        LOBYTE(helper) = 1;
        return helper;
      }
    }

    else
    {
LABEL_25:
      if (*v7) {
        _SCHelperClose(v7);
      }
      int v9 = 1003;
      int v11 = 1003;
    }

uint64_t SCNetworkInterfaceCheckPassword(const __SCNetworkInterface *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v21 = 0LL;
  *(void *)uint64_t v22 = 0LL;
  if (checkInterfacePassword(a1, a2, v22, &v21))
  {
    switch(a2)
    {
      case 1:
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        PasswordID = getPasswordID(Configuration, v21);
        uint64_t v6 = *(void *)v22;
        int v7 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
        return __extract_password( v6,  Configuration,  @"AuthPassword",  @"AuthPasswordEncryption",  *v7,  (uint64_t)PasswordID,  0LL);
      case 2:
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
        if (CFEqual(InterfaceType, @"PPP")) {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration(a1, @"IPSec");
        }
        else {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        }
        uint64_t v14 = ExtendedConfiguration;
        CFStringRef v15 = copySharedSecretID(ExtendedConfiguration, v21);
        uint64_t v16 = *(void *)v22;
        CFTypeID v17 = @"SharedSecret";
        CFTypeID v18 = @"SharedSecretEncryption";
        int v19 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
        goto LABEL_16;
      case 3:
        uint64_t v10 = SCNetworkInterfaceGetExtendedConfiguration(a1, @"EAPOL");
        if (v10)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(v10, @"UserPasswordKeychainItemID");
          CFTypeID TypeID = CFStringGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID) {
            return _SCPreferencesSystemKeychainPasswordItemExists();
          }
        }

        else
        {
          CFStringGetTypeID();
        }

        break;
      case 4:
        uint64_t v14 = SCNetworkInterfaceGetConfiguration(a1);
        CFStringRef v15 = copyXAuthID(v14, v21);
        uint64_t v16 = *(void *)v22;
        CFTypeID v17 = @"XAuthPassword";
        CFTypeID v18 = @"XAuthPasswordEncryption";
        int v19 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_16:
        uint64_t password = __extract_password(v16, v14, v17, v18, *v19, (uint64_t)v15, 0LL);
        CFRelease(v15);
        return password;
      case 5:
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        PasswordID = getPasswordID(Configuration, v21);
        uint64_t v6 = *(void *)v22;
        int v7 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
        return __extract_password( v6,  Configuration,  @"AuthPassword",  @"AuthPasswordEncryption",  *v7,  (uint64_t)PasswordID,  0LL);
      default:
        _SCErrorSet(1002);
        return 0LL;
    }
  }

  return 0LL;
}

uint64_t checkInterfacePassword(CFTypeRef cf, int a2, void *a3, void *a4)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (cf) {
      goto LABEL_3;
    }
LABEL_17:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v8 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v8) {
    goto LABEL_17;
  }
  uint64_t v9 = *((void *)cf + 12);
  *a4 = v9;
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v10 = *((void *)cf + 10);
  *a3 = v10;
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t result = 1LL;
  switch(a2)
  {
    case 1:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      CFDictionaryRef v13 = @"PPP";
      goto LABEL_14;
    case 2:
      CFStringRef v14 = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      if (CFEqual(v14, @"PPP"))
      {
        Interface = SCNetworkInterfaceGetInterface((SCNetworkInterfaceRef)cf);
        if (!Interface) {
          goto LABEL_17;
        }
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
        CFDictionaryRef v13 = @"L2TP";
      }

      else
      {
        CFDictionaryRef v13 = @"IPSec";
        CFStringRef InterfaceType = v14;
      }

CFDictionaryRef getPasswordID(const __CFDictionary *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    CFDictionaryRef Value = CFDictionaryGetValue(result, @"AuthPasswordEncryption");
    CFTypeID TypeID = CFStringGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, @"Keychain")) {
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v3, @"AuthPassword");
    }
    else {
      uint64_t result = 0LL;
    }
  }

  if (!result) {
    return (const __CFDictionary *)a2;
  }
  return result;
}

__CFString *copySharedSecretID(CFDictionaryRef theDict, uint64_t a2)
{
  if (theDict
    && (Value = CFDictionaryGetValue(theDict, @"SharedSecretEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(theDict, @"SharedSecret")) != 0LL)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }

  else
  {
    PasswordID = (const __CFString *)getPasswordID(theDict, a2);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, PasswordID);
    CFStringAppend(MutableCopy, @".SS");
  }

  return MutableCopy;
}

__CFString *copyXAuthID(CFDictionaryRef theDict, uint64_t a2)
{
  if (theDict
    && (Value = CFDictionaryGetValue(theDict, @"XAuthPasswordEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(theDict, @"XAuthPassword")) != 0LL)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }

  else
  {
    PasswordID = (const __CFString *)getPasswordID(theDict, a2);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, PasswordID);
    CFStringAppend(MutableCopy, @".XAUTH");
  }

  return MutableCopy;
}

uint64_t SCNetworkInterfaceCopyPassword(const __SCNetworkInterface *a1, int a2)
{
  v23[1] = *MEMORY[0x1895F89C0];
  *(void *)uint64_t v22 = 0LL;
  v23[0] = 0LL;
  uint64_t v21 = 0LL;
  if (checkInterfacePassword(a1, a2, v22, &v21))
  {
    switch(a2)
    {
      case 1:
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        PasswordID = getPasswordID(Configuration, v21);
        uint64_t v6 = *(void *)v22;
        int v7 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
        goto LABEL_13;
      case 2:
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
        if (CFEqual(InterfaceType, @"PPP")) {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration(a1, @"IPSec");
        }
        else {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        }
        CFStringRef v14 = ExtendedConfiguration;
        CFStringRef v15 = copySharedSecretID(ExtendedConfiguration, v21);
        uint64_t v16 = *(void *)v22;
        CFTypeID v17 = @"SharedSecret";
        CFTypeID v18 = @"SharedSecretEncryption";
        int v19 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
        goto LABEL_20;
      case 3:
        int v11 = SCNetworkInterfaceGetExtendedConfiguration(a1, @"EAPOL");
        if (v11)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(v11, @"UserPasswordKeychainItemID");
          CFTypeID TypeID = CFStringGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID)
          {
            v23[0] = _SCPreferencesSystemKeychainPasswordItemCopy();
            return v23[0];
          }
        }

        else
        {
          CFStringGetTypeID();
        }

        int v8 = 1001;
LABEL_16:
        _SCErrorSet(v8);
        break;
      case 4:
        CFStringRef v14 = SCNetworkInterfaceGetConfiguration(a1);
        CFStringRef v15 = copyXAuthID(v14, v21);
        uint64_t v16 = *(void *)v22;
        CFTypeID v17 = @"XAuthPassword";
        CFTypeID v18 = @"XAuthPasswordEncryption";
        int v19 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_20:
        __extract_password(v16, v14, v17, v18, *v19, (uint64_t)v15, v23);
        CFRelease(v15);
        return v23[0];
      case 5:
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        PasswordID = getPasswordID(Configuration, v21);
        uint64_t v6 = *(void *)v22;
        int v7 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_13:
        __extract_password( v6,  Configuration,  @"AuthPassword",  @"AuthPasswordEncryption",  *v7,  (uint64_t)PasswordID,  v23);
        return v23[0];
      default:
        int v8 = 1002;
        goto LABEL_16;
    }
  }

  return 0LL;
}

uint64_t SCNetworkInterfaceRemovePassword(const __SCNetworkInterface *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v23 = 0LL;
  *(void *)int v24 = 0LL;
  if (checkInterfacePassword(a1, a2, v24, &v23))
  {
    switch(a2)
    {
      case 1:
        CFDictionaryRef config = 0LL;
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        PasswordID = getPasswordID(Configuration, v23);
        uint64_t v6 = *(void *)v24;
        int v7 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
        goto LABEL_14;
      case 2:
        CFDictionaryRef config = 0LL;
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
        int v10 = CFEqual(InterfaceType, @"PPP");
        if (v10) {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration(a1, @"IPSec");
        }
        else {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        }
        uint64_t v20 = ExtendedConfiguration;
        CFTypeID v17 = copySharedSecretID(ExtendedConfiguration, v23);
        if (!__remove_password( *(uint64_t *)v24,  v20,  @"SharedSecret",  @"SharedSecretEncryption",  @"Keychain",  (uint64_t)v17,  &config)) {
          goto LABEL_28;
        }
        if (!v10) {
          goto LABEL_25;
        }
        uint64_t v21 = SCNetworkInterfaceSetExtendedConfiguration(a1, @"IPSec", config);
        goto LABEL_26;
      case 3:
        uint64_t v12 = SCNetworkInterfaceGetExtendedConfiguration(a1, @"EAPOL");
        if (v12)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(v12, @"UserPasswordKeychainItemID");
          CFTypeID TypeID = CFStringGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID) {
            return _SCPreferencesSystemKeychainPasswordItemRemove();
          }
        }

        else
        {
          CFStringGetTypeID();
        }

        int v8 = 1001;
LABEL_19:
        _SCErrorSet(v8);
        break;
      case 4:
        CFDictionaryRef config = 0LL;
        uint64_t v16 = SCNetworkInterfaceGetConfiguration(a1);
        CFTypeID v17 = copyXAuthID(v16, v23);
        if (__remove_password( *(uint64_t *)v24,  v16,  @"XAuthPassword",  @"XAuthPasswordEncryption",  @"Keychain",  (uint64_t)v17,  &config))
        {
LABEL_25:
          uint64_t v21 = SCNetworkInterfaceSetConfiguration(a1, config);
LABEL_26:
          uint64_t v18 = v21;
          if (config) {
            CFRelease(config);
          }
        }

        else
        {
LABEL_28:
          uint64_t v18 = 0LL;
        }

        CFDictionaryRef v19 = (CFDictionaryRef)v17;
        goto LABEL_30;
      case 5:
        CFDictionaryRef config = 0LL;
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        PasswordID = getPasswordID(Configuration, v23);
        uint64_t v6 = *(void *)v24;
        int v7 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_14:
        if (!__remove_password( v6,  Configuration,  @"AuthPassword",  @"AuthPasswordEncryption",  *v7,  (uint64_t)PasswordID,  &config)) {
          return 0LL;
        }
        uint64_t v18 = SCNetworkInterfaceSetConfiguration(a1, config);
        CFDictionaryRef v19 = config;
        if (!config) {
          return v18;
        }
LABEL_30:
        CFRelease(v19);
        return v18;
      default:
        int v8 = 1002;
        goto LABEL_19;
    }
  }

  return 0LL;
}

uint64_t SCNetworkInterfaceSetPassword(const void *a1, int a2)
{
  v52[1] = *(const void **)MEMORY[0x1895F89C0];
  char v51 = 0LL;
  v52[0] = 0LL;
  switch(a2)
  {
    case 1:
      CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      uint64_t v5 = v51;
      PasswordID = getPasswordID(Configuration, (uint64_t)v51);
      if (Configuration
        && (CFDictionaryGetValue(Configuration, @"AuthName"),
            CFDictionaryGetValue(Configuration, @"UserDefinedName")))
      {
        uint64_t Private = 0LL;
      }

      else
      {
        uint64_t Private = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0LL, v52[0], v5, a1);
        if (!SCNetworkServiceGetName(Private)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }

      if (bundle) {
        CFStringRef v24 = CFBundleCopyLocalizedString( (CFBundleRef)bundle,  @"KEYCHAIN_KIND_PPP_PASSWORD",  @"PPP Password",  0LL);
      }
      else {
        CFStringRef v24 = 0LL;
      }
      if (Configuration) {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Configuration);
      }
      else {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }
      int v38 = MutableCopy;
      CFDictionarySetValue(MutableCopy, @"AuthPassword", PasswordID);
      CFTypeID v39 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_88;
    case 2:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
      int v10 = CFEqual(InterfaceType, @"PPP");
      ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      if (v10)
      {
        uint64_t v12 = ExtendedConfiguration;
        ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"IPSec");
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      CFIndex v26 = v51;
      int v27 = copySharedSecretID(ExtendedConfiguration, (uint64_t)v51);
      int v48 = v10;
      if (!ExtendedConfiguration) {
        goto LABEL_54;
      }
      if (CFDictionaryGetValueIfPresent(ExtendedConfiguration, @"LocalIdentifierType", (const void **)&value)
        && CFEqual(value, @"KeyID")
        && CFDictionaryGetValueIfPresent(ExtendedConfiguration, @"LocalIdentifier", (const void **)&v50))
      {
        isA_CFString(v50);
      }

      if (((CFTypeID v28 = ExtendedConfiguration, !v10) || (CFTypeID v28 = v12) != 0LL)
        && CFDictionaryGetValue(v28, @"UserDefinedName"))
      {
        CFTypeID v29 = 0LL;
      }

      else
      {
LABEL_54:
        CFTypeID v29 = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0LL, v52[0], v26, a1);
        if (!SCNetworkServiceGetName(v29)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }

      if (bundle) {
        CFStringRef v31 = CFBundleCopyLocalizedString( (CFBundleRef)bundle,  @"KEYCHAIN_KIND_IPSEC_SHARED_SECRET",  @"IPSec Shared Secret",  0LL);
      }
      else {
        CFStringRef v31 = 0LL;
      }
      uint64_t Private = (const __SCNetworkService *)v27;
      if (_SCPreferencesSystemKeychainPasswordItemSet())
      {
        if (ExtendedConfiguration) {
          CFMutableStringRef Mutable = CFDictionaryCreateMutableCopy(0LL, 0LL, ExtendedConfiguration);
        }
        else {
          CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        }
        CFStringRef v45 = Mutable;
        CFDictionarySetValue(Mutable, @"SharedSecret", v27);
        CFDictionarySetValue(v45, @"SharedSecretEncryption", @"Keychain");
        if (v48) {
          uint64_t v46 = SCNetworkInterfaceSetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"IPSec", v45);
        }
        else {
          uint64_t v46 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, v45);
        }
        uint64_t v8 = v46;
        CFRelease(v45);
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      if (v31) {
        CFRelease(v31);
      }
      if (v29) {
        CFRelease(v29);
      }
      goto LABEL_105;
    case 3:
      CFDictionaryRef v13 = SCNetworkInterfaceGetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"EAPOL");
      CFStringRef v14 = v13;
      if (v13
        && (v15 = CFDictionaryGetValue(v13, @"UserPasswordKeychainItemID"), CFTypeID TypeID = CFStringGetTypeID(), v15)
        && CFGetTypeID(v15) == TypeID)
      {
        CFRetain(v15);
      }

      else
      {
        uint64_t v23 = CFUUIDCreate(0LL);
        CFStringRef v15 = CFUUIDCreateString(0LL, v23);
        CFRelease(v23);
        if (!v14) {
          goto LABEL_68;
        }
      }

      CFDictionaryGetValue(v14, @"UserName");
LABEL_68:
      if (bundle)
      {
        LocalizedDisplayCFStringRef Name = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        if (LocalizedDisplayName)
        {
          uint64_t v35 = CFBundleCopyLocalizedString( (CFBundleRef)bundle,  @"KEYCHAIN_DESCRIPTION_EAPOL_INTERFACE",  @"Network Connection (%@)",  0LL);
          CFStringRef v36 = CFStringCreateWithFormat(0LL, 0LL, v35, LocalizedDisplayName);
          CFRelease(v35);
        }

        else
        {
          CFStringRef v36 = CFBundleCopyLocalizedString( (CFBundleRef)bundle,  @"KEYCHAIN_DESCRIPTION_EAPOL",  @"Network Connection",  0LL);
        }

        CFStringRef v37 = CFBundleCopyLocalizedString( (CFBundleRef)bundle,  @"KEYCHAIN_KIND_EAPOL",  @"802.1X Password",  0LL);
      }

      else
      {
        CFStringRef v36 = 0LL;
        CFStringRef v37 = 0LL;
      }

      if (_SCPreferencesSystemKeychainPasswordItemSet())
      {
        if (v14) {
          CFMutableStringRef v40 = CFDictionaryCreateMutableCopy(0LL, 0LL, v14);
        }
        else {
          CFMutableStringRef v40 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        }
        CFStringRef v41 = v40;
        CFDictionarySetValue(v40, @"UserPasswordKeychainItemID", v15);
        uint64_t v8 = SCNetworkInterfaceSetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"EAPOL", v41);
        CFRelease(v41);
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      CFRelease(v15);
      if (v36) {
        CFRelease(v36);
      }
      if (!v37) {
        return v8;
      }
      CFMutableStringRef v42 = v37;
      goto LABEL_106;
    case 4:
      CFTypeID v17 = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      uint64_t v18 = v51;
      CFDictionaryRef v19 = copyXAuthID(v17, (uint64_t)v51);
      if (v17 && (CFDictionaryGetValue(v17, @"XAuthName"), CFDictionaryGetValue(v17, @"UserDefinedName")))
      {
        uint64_t Private = 0LL;
      }

      else
      {
        uint64_t Private = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0LL, v52[0], v18, a1);
        if (!SCNetworkServiceGetName(Private)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }

      if (bundle) {
        CFStringRef v24 = CFBundleCopyLocalizedString( (CFBundleRef)bundle,  @"KEYCHAIN_KIND_IPSEC_XAUTH_PASSWORD",  @"IPSec XAuth Password",  0LL);
      }
      else {
        CFStringRef v24 = 0LL;
      }
      if (_SCPreferencesSystemKeychainPasswordItemSet())
      {
        if (v17) {
          CFIndex v32 = CFDictionaryCreateMutableCopy(0LL, 0LL, v17);
        }
        else {
          CFIndex v32 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        }
        CFStringRef v44 = v32;
        CFDictionarySetValue(v32, @"XAuthPassword", v19);
        CFDictionarySetValue(v44, @"XAuthPasswordEncryption", @"Keychain");
        uint64_t v8 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, v44);
        CFRelease(v44);
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      CFStringRef v43 = v19;
      goto LABEL_92;
    case 5:
      uint64_t v20 = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      uint64_t v21 = v51;
      uint64_t v22 = getPasswordID(v20, (uint64_t)v51);
      if (v20 && (CFDictionaryGetValue(v20, @"AuthName"), CFDictionaryGetValue(v20, @"UserDefinedName")))
      {
        uint64_t Private = 0LL;
      }

      else
      {
        uint64_t Private = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0LL, v52[0], v21, a1);
        if (!SCNetworkServiceGetName(Private)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }

      if (bundle) {
        CFStringRef v24 = CFBundleCopyLocalizedString( (CFBundleRef)bundle,  @"KEYCHAIN_KIND_VPN_PASSWORD",  @"VPN Password",  0LL);
      }
      else {
        CFStringRef v24 = 0LL;
      }
      if (!_SCPreferencesSystemKeychainPasswordItemSet())
      {
LABEL_52:
        uint64_t v8 = 0LL;
        if (!v24) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }

      if (v20) {
        uint64_t v25 = CFDictionaryCreateMutableCopy(0LL, 0LL, v20);
      }
      else {
        uint64_t v25 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      }
      int v38 = v25;
      CFDictionarySetValue(v25, @"AuthPassword", v22);
      CFTypeID v39 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_88:
      CFDictionarySetValue(v38, @"AuthPasswordEncryption", *v39);
      uint64_t v8 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, v38);
      CFStringRef v43 = v38;
LABEL_92:
      CFRelease(v43);
      if (v24) {
LABEL_93:
      }
        CFRelease(v24);
LABEL_94:
      if (Private)
      {
LABEL_105:
        CFMutableStringRef v42 = Private;
LABEL_106:
        CFRelease(v42);
      }

      break;
    default:
      _SCErrorSet(1002);
      return 0LL;
  }

  return v8;
}

uint64_t SCNetworkInterfaceSetAdvisory(const __SCNetworkInterface *a1, unsigned int a2, const __CFString *a3)
{
  theString[1] = *(CFStringRef *)MEMORY[0x1895F89C0];
  IPMonitorControl = (void *)_SCNetworkInterfaceGetIPMonitorControl(a1, theString);
  if (IPMonitorControl) {
    return IPMonitorControlSetInterfaceAdvisory(IPMonitorControl, theString[0], a2, a3);
  }
  else {
    return 0LL;
  }
}

uint64_t _SCNetworkInterfaceGetIPMonitorControl(const __SCNetworkInterface *a1, CFStringRef *a2)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (!BSDName)
  {
    int v6 = 1002;
    goto LABEL_6;
  }

  uint64_t result = *((void *)a1 + 50);
  if (!result)
  {
    uint64_t result = IPMonitorControlCreate();
    if (result)
    {
      *((void *)a1 + 50) = result;
      goto LABEL_7;
    }

    int v6 = 1001;
LABEL_6:
    _SCErrorSet(v6);
    uint64_t result = 0LL;
  }

LABEL_7:
  *a2 = BSDName;
  return result;
}

  LODWORD(result) = 1002;
LABEL_8:
  _SCErrorSet((int)result);
  return 0LL;
}

  _SCErrorSet(1002);
  return 0;
}

      pthread_mutex_unlock(&_helper_lock);
      uint64_t v4 = v7;
    }

    while (!v7);
  }

  int v6 = helperinit(v4, a2, &v19);
  uint64_t v20 = v6;
  if (v6 == 268435459) {
    goto LABEL_3;
  }
  if (v6) {
    CFDictionaryRef v19 = v6;
  }
LABEL_12:
  if (!*a2)
  {
    CFDictionaryRef v13 = __log_SCPreferences();
    CFStringRef v14 = _SC_syslog_os_log_mapping(5);
    uint64_t result = __SC_log_enabled(5, v13, (os_log_type_t)v14);
    if (!result) {
      return result;
    }
    _os_log_pack_size();
    uint64_t v16 = (char *)&v19 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    CFTypeID v17 = _os_log_pack_fill();
    uint64_t v18 = SCErrorString(v19);
    *(_DWORD *)CFTypeID v17 = 136315138;
    *(void *)(v17 + 4) = v18;
    __SC_log_send(5, (uint64_t)v13, v14, v16);
    return 0LL;
  }

  if (!_SCHelperExec(*a2, 1, a1, &v19, 0LL))
  {
    uint64_t v8 = __log_SCPreferences();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v8, (os_log_type_t)v9)) {
      goto LABEL_22;
    }
    _os_log_pack_size();
    int v10 = (char *)&v19 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
LABEL_21:
    __SC_log_send(5, (uint64_t)v8, v9, v10);
LABEL_22:
    if (*a2)
    {
      mach_port_deallocate(*v5, *a2);
      uint64_t result = 0LL;
      *a2 = 0;
      return result;
    }

    return 0LL;
  }

  if (v19)
  {
    uint64_t v8 = __log_SCPreferences();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v8, (os_log_type_t)v9)) {
      goto LABEL_22;
    }
    _os_log_pack_size();
    int v10 = (char *)&v19 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    int v11 = (_DWORD *)_os_log_pack_fill();
    uint64_t v12 = v19;
    *int v11 = 67109120;
    v11[1] = v12;
    goto LABEL_21;
  }

  return 1LL;
}

  CFStringRef SetID = 0LL;
  if (!v9 && v10)
  {
    uint64_t v16 = SCNetworkSetCopyCurrent((SCPreferencesRef)a1[2]);
    if (!v16)
    {
      CFDictionaryRef v19 = _SC_LOG_DEFAULT();
      uint64_t v20 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v19, (os_log_type_t)v20))
      {
        uint64_t v21 = _os_log_pack_size();
        uint64_t v22 = (char *)v27 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v23 = 136315138;
        *(void *)(v23 + 4) = "__SCNSManagerCopyService";
        __SC_log_send(5, (uint64_t)v19, v20, v22);
      }

      CFStringRef SetID = 0LL;
LABEL_28:
      _SCErrorSet(1004);
      uint64_t v25 = 0LL;
      if (!SetID) {
        return v25;
      }
      goto LABEL_26;
    }

    CFTypeID v17 = v16;
    uint64_t v18 = SCNetworkSetCopyServices(v16);
    CFStringRef SetID = (CFStringRef)v18;
    if (v18)
    {
      uint64_t v9 = copy_service_in_list(v18, a2);
      CFRelease(SetID);
      if (v9)
      {
        CFStringRef SetID = SCNetworkSetGetSetID(v17);
        CFRetain(SetID);
      }

      else
      {
        CFStringRef SetID = 0LL;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    CFRelease(v17);
  }

  if (!v9) {
    goto LABEL_28;
  }
  CFStringRef v24 = __SCNSServiceCreate(a1, a3, a4, a2, v9);
  uint64_t v25 = v24;
  if (SetID && v24)
  {
    v24[5] = SetID;
    CFRetain(SetID);
  }

  CFRelease(v9);
  if (SetID) {
LABEL_26:
  }
    CFRelease(SetID);
  return v25;
}

BOOL SCNetworkInterfaceAdvisoryIsSpecificSet(const __SCNetworkInterface *a1, unsigned int a2)
{
  theString[1] = *(CFStringRef *)MEMORY[0x1895F89C0];
  uint64_t IPMonitorControl = _SCNetworkInterfaceGetIPMonitorControl(a1, theString);
  return IPMonitorControl && IPMonitorControlIsInterfaceAdvisorySet(IPMonitorControl, theString[0], a2);
}

BOOL SCNetworkInterfaceAdvisoryIsSet(const __SCNetworkInterface *a1)
{
  return SCNetworkInterfaceAdvisoryIsSpecificSet(a1, 0);
}

CFStringRef SCNetworkInterfaceCopyAdvisoryNotificationKey(const __SCNetworkInterface *a1)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName) {
    return IPMonitorControlCopyInterfaceAdvisoryNotificationKey(BSDName);
  }
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t SCNetworkInterfaceCopyAdvisoryInfo(const __SCNetworkInterface *a1)
{
  v2[1] = *(CFStringRef *)MEMORY[0x1895F89C0];
  uint64_t result = _SCNetworkInterfaceGetIPMonitorControl(a1, v2);
  if (result)
  {
    uint64_t result = IPMonitorControlCopyInterfaceAdvisoryInfo(result, v2[0]);
    if (!result)
    {
      _SCErrorSet(1001);
      return 0LL;
    }
  }

  return result;
}

uint64_t SCNetworkInterfaceAdvisoryInfoGetAdvisory(const __CFDictionary *a1)
{
  return InterfaceAdvisoryInfoGetAdvisory(a1);
}

uint64_t SCNetworkInterfaceAdvisoryInfoGetProcessID(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessID(a1);
}

const void *SCNetworkInterfaceAdvisoryInfoGetProcessName(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessName(a1);
}

uint64_t SCNetworkInterfaceAdvisoryCopyInterfaceNames()
{
  uint64_t v0 = IPMonitorControlCreate();
  if (v0)
  {
    uint32_t v1 = (const void *)v0;
    uint64_t v2 = IPMonitorControlCopyInterfaceAdvisoryInterfaceNames(v0);
    if (!v2) {
      _SCErrorSet(1001);
    }
    CFRelease(v1);
  }

  else
  {
    _SCErrorSet(1001);
    return 0LL;
  }

  return v2;
}

uint64_t _SCNetworkInterfaceCreateWithIONetworkInterfaceObject(uint64_t object)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if (IOObjectConformsTo(object, "IONetworkInterface"))
  {
    uint64_t v2 = processNetworkInterface;
    uint64_t v3 = @"HiddenInterface";
    uint64_t v4 = object;
    int v5 = 1;
    return createInterface( v4,  (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))v2,  v3,  v5);
  }

  if (IOObjectConformsTo(object, "IOSerialBSDClient"))
  {
    uint64_t v2 = processSerialInterface;
    uint64_t v3 = @"HiddenPort";
    uint64_t v4 = object;
    int v5 = 0;
    return createInterface( v4,  (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))v2,  v3,  v5);
  }

  return 0LL;
}

uint64_t createInterface( uint64_t entry, unsigned int (*a2)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *), const __CFString *a3, int a4)
{
  kern_return_t ParentEntry;
  kern_return_t v15;
  os_log_s *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  __CFDictionary *v21;
  CFBooleanRef Value;
  unsigned __int8 v23;
  kern_return_t v24;
  kern_return_t v25;
  os_log_s *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _DWORD *v30;
  kern_return_t RegistryEntryID;
  kern_return_t v33;
  os_log_s *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _DWORD *v38;
  uint64_t Private;
  CFStringRef v40;
  uint64_t v41;
  CFDictionaryRef v42;
  CFDictionaryRef v43;
  CFTypeID TypeID;
  CFTypeRef v45;
  const void *v46;
  CFTypeID v47;
  CFBooleanRef v48;
  CFBooleanRef v49;
  CFBooleanRef v50;
  CFBooleanRef v51;
  CFTypeID v52;
  uint64_t entryID;
  io_registry_entry_t parent[2];
  CFStringRef v55[2];
  v55[1] = *(CFStringRef *)MEMORY[0x1895F89C0];
  entryID = 0LL;
  *(void *)parent = 0LL;
  v55[0] = @"name";
  if (a3 && (int v7 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(entry, "IOService", a3, 0LL, 3u)) != 0LL)
  {
    uint64_t v8 = v7;
    BooleanCFDictionaryRef Value = getBooleanValue(v7);
    CFRelease(v8);
    if (!a4 && BooleanValue)
    {
      int v10 = 0LL;
      int v11 = 0LL;
      uint64_t v12 = 0LL;
      goto LABEL_21;
    }
  }

  else
  {
    LOBYTE(BooleanValue) = 0;
  }

  CFDictionaryRef v13 = copyIORegistryProperties(entry, (CFStringRef *)off_189B64D00, 12LL);
  ParentEntry = IORegistryEntryGetParentEntry(entry, "IOService", parent);
  if (ParentEntry)
  {
    CFStringRef v15 = ParentEntry;
    uint64_t v16 = __log_SCNetworkConfiguration();
    CFTypeID v17 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      CFDictionaryRef v19 = (char *)&parent[-2] - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v20 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v20 = 67109120;
      v20[1] = v15;
      __SC_log_send(6, (uint64_t)v16, v17, v19);
    }

    uint64_t v12 = 0LL;
    int v11 = 0LL;
LABEL_18:
    int v10 = 0LL;
    goto LABEL_19;
  }

  uint64_t v21 = copyIORegistryProperties(parent[0], (CFStringRef *)off_189B64D60, 3LL);
  int v11 = v21;
  if (v21)
  {
    CFDictionaryRef Value = (const __CFBoolean *)CFDictionaryGetValue(v21, @"SelfNamed");
    uint64_t v23 = getBooleanValue(Value);
  }

  else
  {
    uint64_t v23 = 0;
  }

  CFStringRef v24 = IORegistryEntryGetParentEntry(parent[0], "IOService", &parent[1]);
  if (v24)
  {
    uint64_t v25 = v24;
    CFIndex v26 = __log_SCNetworkConfiguration();
    int v27 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v26, (os_log_type_t)v27))
    {
      CFTypeID v28 = _os_log_pack_size();
      CFTypeID v29 = (char *)&parent[-2] - ((MEMORY[0x1895F8858](v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      CFRange v30 = (_DWORD *)_os_log_pack_fill();
      const void *v30 = 67109120;
      v30[1] = v25;
      __SC_log_send(6, (uint64_t)v26, v27, v29);
    }

    uint64_t v12 = 0LL;
    goto LABEL_18;
  }

  int v10 = copyIORegistryProperties(parent[1], v55, 1LL);
  RegistryEntryID = IORegistryEntryGetRegistryEntryID(entry, &entryID);
  if (RegistryEntryID)
  {
    uint64_t v33 = RegistryEntryID;
    uint64_t v34 = __log_SCNetworkConfiguration();
    uint64_t v35 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v34, (os_log_type_t)v35))
    {
      CFStringRef v36 = _os_log_pack_size();
      CFStringRef v37 = (char *)&parent[-2] - ((MEMORY[0x1895F8858](v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      int v38 = (_DWORD *)_os_log_pack_fill();
      *int v38 = 67109120;
      v38[1] = v33;
      __SC_log_send(6, (uint64_t)v34, v35, v37);
    }
  }

  else
  {
    uint64_t Private = __SCNetworkInterfaceCreatePrivate(0LL, 0LL, 0LL, 0LL);
    if (!Private) {
      createInterface_cold_1();
    }
    uint64_t v12 = Private;
    *(_BYTE *)(Private + 193) = BooleanValue;
    CFMutableStringRef v40 = __SC_IORegistryEntryCopyPath(entry);
    CFStringRef v41 = entryID;
    *(void *)(v12 + 208) = v40;
    *(void *)(v12 + 216) = v41;
    *(_BYTE *)(v12 + 242) = v23;
    CFMutableStringRef v42 = (const __CFDictionary *)IORegistryEntrySearchCFProperty( entry,  "IOService",  @"NetworkConfigurationOverrides",  0LL,  3u);
    if (v42)
    {
      CFStringRef v43 = v42;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v43) == TypeID) {
        *(void *)(v12 + 224) = CFDictionaryCreateMutableCopy(0LL, 0LL, v43);
      }
      CFRelease(v43);
    }

    if (a2(v12, entry, v13, parent[0], v11, parent[1], v10))
    {
      CFStringRef v45 = IORegistryEntrySearchCFProperty(entry, "IOService", @"New Interface Detected Action", 0LL, 3u);
      if (v45)
      {
        uint64_t v46 = v45;
        BOOL v47 = CFStringGetTypeID();
        if (CFGetTypeID(v46) == v47) {
          *(void *)(v12 + 184) = CFRetain(v46);
        }
        CFRelease(v46);
      }

      int v48 = (const __CFBoolean *)IORegistryEntrySearchCFProperty( entry,  "IOService",  @"HiddenConfiguration",  0LL,  3u);
      if (v48)
      {
        uint64_t v49 = v48;
        *(_BYTE *)(v12 + 192) = getBooleanValue(v48);
        CFRelease(v49);
      }

      CFRange v50 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(entry, "IOService", @"TrustRequired", 0LL, 3u);
      if (v50)
      {
        char v51 = v50;
        CFIndex v52 = CFBooleanGetTypeID();
        if (CFGetTypeID(v51) == v52) {
          *(_BYTE *)(v12 + 240) = CFBooleanGetValue(v51);
        }
        CFRelease(v51);
      }

      goto LABEL_19;
    }

    CFRelease((CFTypeRef)v12);
  }

  uint64_t v12 = 0LL;
LABEL_19:
  if (v13) {
    CFRelease(v13);
  }
LABEL_21:
  if (parent[0]) {
    IOObjectRelease(parent[0]);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (parent[1]) {
    IOObjectRelease(parent[1]);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v12;
}

uint64_t _SCNetworkInterfaceGetConfigurationAction(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

uint64_t _SCNetworkInterfaceGetFamilyType(const __CFNumber *interface)
{
  uint64_t result = *((void *)interface + 33);
  if (!result)
  {
    update_ift_family(interface);
    return *((void *)interface + 33);
  }

  return result;
}

CFNumberRef update_ift_family(CFNumberRef interface)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!*((void *)interface + 33))
  {
    CFNumberRef v1 = interface;
    if (!*((void *)interface + 34))
    {
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
      __int128 v5 = 0u;
      __int128 v6 = 0u;
      if (BSDName)
      {
        if (_SC_cfstring_to_cstring(BSDName, (UInt8 *)&v5, 16LL, 0x600u))
        {
          int v3 = socket(2, 2, 0);
          if (v3 != -1)
          {
            int v4 = v3;
            if (ioctl(v3, 0xC020699FuLL, &v5) == -1) {
              *(void *)((char *)&v6 + 4) = 0LL;
            }
            close(v4);
          }
        }
      }

      *((void *)v1 + 33) = CFNumberCreate(0LL, kCFNumberSInt32Type, (char *)&v6 + 4);
      interface = CFNumberCreate(0LL, kCFNumberSInt32Type, (char *)&v6 + 8);
      *((void *)v1 + 34) = interface;
    }
  }

  return interface;
}

uint64_t _SCNetworkInterfaceGetFamilySubType(const __CFNumber *interface)
{
  uint64_t result = *((void *)interface + 34);
  if (!result)
  {
    update_ift_family(interface);
    return *((void *)interface + 34);
  }

  return result;
}

uint64_t _SCNetworkInterfaceGetIORegistryEntryID(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

uint64_t _SCNetworkInterfaceIsBuiltin(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[176];
  }
  return 0LL;
}

uint64_t _SCNetworkInterfaceIsTrustRequired(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[240];
  }
  return 0LL;
}

const void *_SCNetworkInterfaceCopySlashDevPath(SCNetworkInterfaceRef interface)
{
  kern_return_t MatchingServices;
  kern_return_t v8;
  os_log_s *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  const void *CFProperty;
  io_registry_entry_t v15;
  io_registry_entry_t v16;
  CFDictionaryRef v17;
  CFDictionaryRef v18;
  const void *Value;
  CFTypeRef v20;
  CFTypeID TypeID;
  CFTypeID v22;
  CFStringRef BSDName;
  uint64_t v25;
  void *values[2];
  void *keys[3];
  keys[2] = *(void **)MEMORY[0x1895F89C0];
  HIDWORD(v25) = 0;
  CFNumberRef v1 = (void *)*((void *)interface + 14);
  if (!v1) {
    return 0LL;
  }
  if (*((void *)interface + 15))
  {
    keys[0] = @"IOTTYBaseName";
    values[0] = v1;
    int v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
    int v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
    CFDictionaryRef v5 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
    keys[0] = @"IOProviderClass";
    keys[1] = @"IOPropertyMatch";
    values[0] = @"IOSerialBSDClient";
    values[1] = v5;
    __int128 v6 = CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, 2LL, v3, v4);
    CFRelease(v5);
    MatchingServices = IOServiceGetMatchingServices(masterPort, v6, (io_iterator_t *)&v25 + 1);
    if (MatchingServices)
    {
      uint64_t v8 = MatchingServices;
      uint64_t v9 = __log_SCNetworkConfiguration();
      int v10 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
      {
        int v11 = _os_log_pack_size();
        uint64_t v12 = (char *)&values[-1] - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        CFDictionaryRef v13 = (_DWORD *)_os_log_pack_fill();
        *CFDictionaryRef v13 = 67109120;
        v13[1] = v8;
        __SC_log_send(6, (uint64_t)v9, v10, v12);
      }

      goto LABEL_24;
    }

    while (1)
    {
      CFStringRef v15 = IOIteratorNext(HIDWORD(v25));
      if (!v15)
      {
        IOObjectRelease(HIDWORD(v25));
        break;
      }

      uint64_t v16 = v15;
      CFTypeID v17 = (const __CFDictionary *)IORegistryEntrySearchCFProperty( v15,  "IOService",  @"NetworkConfigurationOverrides",  0LL,  3u);
      if (v17)
      {
        uint64_t v18 = v17;
        CFDictionaryRef Value = CFDictionaryGetValue(v17, @"Modem");
        if (Value)
        {
          uint64_t v20 = Value;
          CFRetain(Value);
          CFRelease(v18);
          goto LABEL_13;
        }

        CFRelease(v18);
      }

      uint64_t v20 = IORegistryEntrySearchCFProperty(v16, "IOService", @"DeviceModemOverrides", 0LL, 3u);
      if (!v20)
      {
        CFProperty = 0LL;
        goto LABEL_21;
      }

uint64_t _SCNetworkInterfaceIsApplePreconfigured(_DWORD *cf)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    uint64_t result = _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)cf);
    if (!(_DWORD)result) {
      return result;
    }
    int v4 = (const void *)*((void *)cf + 36);
    CFTypeID TypeID = CFNumberGetTypeID();
    if (v4)
    {
      if (CFGetTypeID(v4) == TypeID
        && CFNumberGetValue(*((CFNumberRef *)cf + 36), kCFNumberIntType, &valuePtr)
        && valuePtr == 1452)
      {
        return 1LL;
      }
    }

    if (_SCNetworkInterfaceIsCarPlay(cf))
    {
      __int128 v6 = (const __CFDictionary *)*((void *)cf + 28);
      if (v6)
      {
        if (CFDictionaryContainsKey(v6, @"IPv4")
          || CFDictionaryContainsKey(*((CFDictionaryRef *)cf + 28), @"IPv6"))
        {
          return 1LL;
        }
      }
    }
  }

  return 0LL;
}

uint64_t _SCNetworkInterfaceIsHiddenConfiguration(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[192];
  }
  return 0LL;
}

BOOL _SCNetworkInterfaceIsCarPlay(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 21;
  }
  return 0LL;
}

BOOL _SCNetworkInterfaceIsBluetoothPAN(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 18;
  }
  return 0LL;
}

BOOL _SCNetworkInterfaceIsBluetoothPAN_NAP(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 19;
  }
  return 0LL;
}

BOOL _SCNetworkInterfaceIsBluetoothP2P(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 20;
  }
  return 0LL;
}

BOOL _SCNetworkInterfaceIsVMNET(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 23;
  }
  return 0LL;
}

uint64_t _SCNetworkInterfaceIsHiddenInterface(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[193];
  }
  return 0LL;
}

CFStringRef _SCNetworkInterfaceIsQoSMarkingProfileInstalled(const __SCNetworkInterface *a1)
{
  uint64_t result = SCNetworkInterfaceGetBSDName(a1);
  if (result)
  {
    NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity( 0LL,  @"State:",  result,  @"QoSMarkingPolicy");
    CFPropertyListRef v3 = SCDynamicStoreCopyValue(0LL, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    if (v3)
    {
      CFRelease(v3);
      return (const __CFString *)1;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

BOOL _SCNetworkInterfaceIsTethered(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return (cf[78] - 15) < 2;
  }
  return 0LL;
}

BOOL _SCNetworkInterfaceIsTetheredHotspot(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 15;
  }
  return 0LL;
}

uint64_t _SCNetworkInterfaceIsThunderbolt(CFTypeRef cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v2) {
    return 0LL;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
  if (!CFEqual(InterfaceType, @"Bridge")) {
    return *((_DWORD *)cf + 78) == 13;
  }
  uint64_t result = SCBridgeInterfaceGetMemberInterfaces((const __SCNetworkInterface *)cf);
  if (result)
  {
    CFDictionaryRef v5 = (const __CFArray *)result;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      uint64_t v6 = result;
      if (result < 1) {
        return 1LL;
      }
      CFIndex v7 = 0LL;
      while (*((_DWORD *)CFArrayGetValueAtIndex(v5, v7) + 78) == 13)
      {
        ++v7;
        uint64_t result = 1LL;
        if (v6 == v7) {
          return result;
        }
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t _SCNetworkInterfaceIsEphemeral(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[241];
  }
  return 0LL;
}

uint64_t _SCNetworkInterfaceSupportsVMNETBridgedMode(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[244];
  }
  return 0LL;
}

uint64_t _SCNetworkInterfaceIsSelfNamed(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[242];
  }
  return 0LL;
}

uint64_t _SCNetworkInterfaceIsUserEthernet(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[243];
  }
  return 0LL;
}

const void *SCNetworkInterfaceGetQoSMarkingPolicy(CFTypeRef cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_7;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_7;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    uint64_t result = __SCNetworkInterfaceGetConfiguration((uint64_t)cf, @"QoSMarkingPolicy");
    if (result) {
      return result;
    }
    goto LABEL_8;
  }

uint64_t SCNetworkInterfaceSetQoSMarkingPolicy(CFTypeRef cf, const __CFString *a2)
{
  v13[1] = *MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_10:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_10;
    }
  }

  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_10;
  }
  uint64_t v5 = __SCNetworkInterfaceSetConfiguration((uint64_t)cf, @"QoSMarkingPolicy", a2, 0LL);
  if ((_DWORD)v5)
  {
    uint64_t v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v9 = (char *)v13 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = @"NULL";
      if (a2) {
        int v11 = a2;
      }
      *(_DWORD *)uint64_t v10 = 138412546;
      *(void *)(v10 + 4) = cf;
      *(_WORD *)(v10 + 12) = 2112;
      *(void *)(v10 + 14) = v11;
      __SC_log_send(7, (uint64_t)v6, v7, v9);
    }
  }

  return v5;
}

uint64_t SCNetworkInterfaceSetAutoConfigure(const __SCNetworkInterface *cf, int a2)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_12;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_12;
    }
  }

  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v4)
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(cf);
    if (CFEqual(InterfaceType, @"Bridge")) {
      return __SCBridgeInterfaceSetAutoConfigure((uint64_t)cf, a2);
    }
  }

  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t v7 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v7)
  {
    CFStringRef v8 = SCNetworkInterfaceGetInterfaceType(cf);
    if (CFEqual(v8, @"VLAN")) {
      return __SCVLANInterfaceSetAutoConfigure((uint64_t)cf, a2);
    }
  }

uint64_t SCNetworkInterfaceGetAutoConfigure(const __SCNetworkInterface *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 1LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 1LL;
    }
  }

  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(cf);
    if (CFEqual(InterfaceType, @"Bridge")) {
      return __SCBridgeInterfaceGetAutoConfigure((uint64_t)cf);
    }
  }

  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t v5 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v5)
  {
    CFStringRef v6 = SCNetworkInterfaceGetInterfaceType(cf);
    if (CFEqual(v6, @"VLAN")) {
      return __SCVLANInterfaceGetAutoConfigure((uint64_t)cf);
    }
  }

  return 1LL;
}

__CFArray *__SCNetworkInterfaceCopyDeepConfiguration( const __SCNetworkSet *a1, const __SCNetworkInterface *Interface)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  uint64_t v5 = Mutable;
  if (Interface)
  {
    CFDictionaryRef v6 = (CFDictionaryRef)*MEMORY[0x189605018];
    uint64_t v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
    CFStringRef v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
    CFIndex v26 = Mutable;
    do
    {
      uint64_t v9 = CFDictionaryCreateMutable(0LL, 0LL, v7, v8);
      DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)Interface);
      if (DefaultConfigurationType)
      {
        int v11 = DefaultConfigurationType;
        CFDictionaryRef v12 = a1
        CFDictionaryRef v13 = v12 ? v12 : v6;
        CFDictionarySetValue(v9, v11, v13);
        CFStringRef v14 = extendedConfigurationTypes((uint64_t)Interface);
        if (v14)
        {
          CFStringRef v15 = v14;
          uint64_t v16 = a1;
          CFTypeID v17 = v8;
          uint64_t v18 = v7;
          CFIndex Count = CFArrayGetCount(v14);
          if (Count >= 1)
          {
            CFIndex v20 = Count;
            for (CFIndex i = 0LL; i != v20; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v15, i);
              CFDictionaryRef Configuration = (const __CFDictionary *)__SCNetworkInterfaceGetConfiguration( (uint64_t)Interface,  ValueAtIndex);
              if (Configuration) {
                CFDictionaryRef v24 = Configuration;
              }
              else {
                CFDictionaryRef v24 = v6;
              }
              CFDictionarySetValue(v9, ValueAtIndex, v24);
            }
          }

          CFRelease(v15);
          uint64_t v7 = v18;
          CFStringRef v8 = v17;
          a1 = v16;
          uint64_t v5 = v26;
        }
      }

      CFArrayAppendValue(v5, v9);
      CFRelease(v9);
      Interface = SCNetworkInterfaceGetInterface(Interface);
    }

    while (Interface);
  }

  return v5;
}

CFMutableArrayRef extendedConfigurationTypes(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  CFRunLoopSourceContext context = __SCNetworkInterfaceGetDefaultConfigurationType(a1);
  if (!context) {
    return 0LL;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (*(void *)(a1 + 96) && findPerInterfaceConfiguration(a1) != -1)
  {
    uint64_t Private = __SCNetworkServiceCreatePrivate( 0LL,  *(const void **)(a1 + 80),  *(const __CFString **)(a1 + 96),  (const void *)a1);
    CFPropertyListRef v3 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 80));
    if (v3)
    {
      uint64_t v4 = v3;
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        CFIndex v7 = 0LL;
        while (1)
        {
          ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v4, v7);
          uint64_t v9 = SCNetworkSetCopyServices(ValueAtIndex);
          v21.length = CFArrayGetCount(v9);
          v21.CFIndex location = 0LL;
          int v10 = CFArrayContainsValue(v9, v21, Private);
          CFRelease(v9);
          if (v10) {
            break;
          }
          if (v6 == ++v7) {
            goto LABEL_17;
          }
        }

        CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
        SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity( 0LL,  (uint64_t)SetID,  *(void *)(a1 + 112),  0LL);
        CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a1 + 80), SetNetworkInterfaceEntity);
        CFRelease(SetNetworkInterfaceEntity);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (Value && CFGetTypeID(Value) == TypeID) {
          CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)__addExtendedConfigurationType, &context);
        }
        uint64_t v16 = *(const __CFDictionary **)(a1 + 104);
        if (v16) {
          CFDictionaryApplyFunction(v16, (CFDictionaryApplierFunction)__addExtendedConfigurationType, &context);
        }
      }

uint64_t __SCNetworkInterfaceIsBusyMember(const __SCPreferences *a1, const __SCNetworkInterface *cf, int a3)
{
  SCNetworkInterfaceRef Interface = cf;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!Interface) {
      return 0LL;
    }
  }

  uint64_t v6 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(Interface) != v6) {
    return 0LL;
  }
  CFMutableArrayRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
  CFStringRef v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    __SCBridgeInterfaceListCollectMembers(v8, Mutable, a3);
    CFRelease(v9);
  }

  if (CFSetGetCount(Mutable))
  {
    while (1)
    {
      uint64_t v10 = CFSetContainsValue(Mutable, Interface);
      if ((_DWORD)v10) {
        break;
      }
      SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(Interface);
      if (!Interface) {
        goto LABEL_9;
      }
    }

    uint64_t v11 = v10;
  }

  else
  {
LABEL_9:
    uint64_t v11 = 0LL;
  }

  CFRelease(Mutable);
  return v11;
}

SCNetworkInterfaceRef __SCNetworkInterfaceSetDeepConfiguration( SCNetworkInterfaceRef result, const __SCNetworkInterface *a2, CFArrayRef theArray, __n128 a4)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    uint64_t v4 = theArray;
    uint64_t v5 = a2;
    uint64_t v6 = result;
    CFIndex v7 = 0LL;
    uint64_t v57 = (const __CFDictionary *)*MEMORY[0x189605018];
    a4.n128_u64[0] = 138412546LL;
    __n128 v55 = a4;
    a4.n128_u64[0] = 138412802LL;
    __n128 v56 = a4;
    SCNetworkInterfaceRef v52 = result;
    CFArrayRef v53 = theArray;
    do
    {
      CFIndex v54 = v7;
      if (v4)
      {
        CFDictionaryRef ValueAtIndex = (CFDictionaryRef)CFArrayGetValueAtIndex(v4, v7);
        DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)v5);
        if (!DefaultConfigurationType) {
          goto LABEL_44;
        }
        uint64_t v9 = DefaultConfigurationType;
        CFDictionaryRef Value = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFDictionaryRef Value = (CFDictionaryRef)CFDictionaryGetValue(ValueAtIndex, v9);
          int v60 = 0;
          goto LABEL_11;
        }

        CFDictionaryRef ValueAtIndex = 0LL;
      }

      else
      {
        uint64_t v11 = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)v5);
        if (!v11) {
          goto LABEL_44;
        }
        uint64_t v9 = v11;
        CFDictionaryRef ValueAtIndex = 0LL;
        CFDictionaryRef Value = 0LL;
      }

      int v60 = 1;
LABEL_11:
      if (Value == v57) {
        CFDictionaryRef v12 = 0LL;
      }
      else {
        CFDictionaryRef v12 = (const __CFString *)Value;
      }
      if (v6) {
        int v13 = __SCNetworkInterfaceSetDefaultConfiguration(v6, (uint64_t)v5, v9, v12, 1);
      }
      else {
        int v13 = __SCNetworkInterfaceSetConfiguration((uint64_t)v5, v9, v12, 1LL);
      }
      int v14 = v13;
      CFStringRef v15 = __log_SCNetworkConfiguration();
      if (v14)
      {
        uint64_t v16 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v15, (os_log_type_t)v16)) {
          goto LABEL_25;
        }
        uint64_t v17 = _os_log_pack_size();
        uint64_t v18 = (char *)&v51 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v19 = v56.n128_u32[0];
        uint64_t v20 = @"NULL";
        if (v12) {
          uint64_t v20 = v12;
        }
        *(void *)(v19 + 4) = v5;
        *(_WORD *)(v19 + 12) = 2112;
        *(void *)(v19 + 14) = v9;
        *(_WORD *)(v19 + 22) = 2112;
        *(void *)(v19 + 24) = v20;
        int v21 = 7;
        uint64_t v22 = (uint64_t)v15;
        uint64_t v23 = v16;
        CFDictionaryRef v24 = v18;
      }

      else
      {
        uint64_t v25 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v15, (os_log_type_t)v25)) {
          goto LABEL_25;
        }
        uint64_t v26 = _os_log_pack_size();
        int v27 = (char *)&v51 - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v28 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v28 = v55.n128_u32[0];
        *(void *)(v28 + 4) = v5;
        *(_WORD *)(v28 + 12) = 2112;
        *(void *)(v28 + 14) = v9;
        int v21 = 6;
        uint64_t v22 = (uint64_t)v15;
        uint64_t v23 = v25;
        CFDictionaryRef v24 = v27;
      }

      __SC_log_send(v21, v22, v23, v24);
LABEL_25:
      CFTypeID v29 = extendedConfigurationTypes((uint64_t)v5);
      if (v29)
      {
        CFRange v30 = v29;
        CFIndex Count = CFArrayGetCount(v29);
        CFStringRef v31 = v57;
        if (Count >= 1)
        {
          for (CFIndex i = 0LL; Count != i; ++i)
          {
            uint64_t v33 = (__CFString *)CFArrayGetValueAtIndex(v30, i);
            if ((v60 & 1) != 0) {
              uint64_t v34 = 0LL;
            }
            else {
              uint64_t v34 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v33);
            }
            if (v34 == (const __CFString *)v31) {
              uint64_t v35 = 0LL;
            }
            else {
              uint64_t v35 = v34;
            }
            int v36 = __SCNetworkInterfaceSetConfiguration((uint64_t)v5, v33, v35, 1LL);
            CFStringRef v37 = __log_SCNetworkConfiguration();
            if (v36)
            {
              uint64_t v38 = _SC_syslog_os_log_mapping(7);
              if (__SC_log_enabled(7, v37, (os_log_type_t)v38))
              {
                uint64_t v39 = _os_log_pack_size();
                CFMutableStringRef v40 = (char *)&v51 - ((MEMORY[0x1895F8858](v39) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                CFStringRef v31 = v57;
                uint64_t v41 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v41 = v56.n128_u32[0];
                CFMutableStringRef v42 = @"NULL";
                if (v35) {
                  CFMutableStringRef v42 = v35;
                }
                *(void *)(v41 + 4) = v5;
                *(_WORD *)(v41 + 12) = 2112;
                *(void *)(v41 + 14) = v33;
                *(_WORD *)(v41 + 22) = 2112;
                *(void *)(v41 + 24) = v42;
                int v43 = 7;
                uint64_t v44 = (uint64_t)v37;
                uint64_t v45 = v38;
                uint64_t v46 = v40;
                goto LABEL_41;
              }
            }

            else
            {
              uint64_t v47 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v37, (os_log_type_t)v47))
              {
                uint64_t v48 = _os_log_pack_size();
                uint64_t v49 = (char *)&v51 - ((MEMORY[0x1895F8858](v48) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v50 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v50 = v55.n128_u32[0];
                *(void *)(v50 + 4) = v5;
                *(_WORD *)(v50 + 12) = 2112;
                *(void *)(v50 + 14) = v33;
                int v43 = 6;
                uint64_t v44 = (uint64_t)v37;
                uint64_t v45 = v47;
                uint64_t v46 = v49;
LABEL_41:
                __SC_log_send(v43, v44, v45, v46);
              }
            }
          }
        }

        CFRelease(v30);
        uint64_t v6 = v52;
        uint64_t v4 = v53;
      }

uint64_t _SCNetworkInterfaceCopyActive(const void *a1, const __CFString *a2)
{
  uint64_t v3 = _SCNetworkInterfaceCreateWithBSDName((uint64_t)a1, a2, -1);
  uint64_t v4 = v3;
  if (a1 && v3)
  {
    CFRetain(a1);
    *(void *)(v4 + 88) = a1;
  }

  return v4;
}

int64_t SCNetworkInterfaceGetPrimaryRank(const __SCNetworkInterface *a1)
{
  uint64_t v1 = *((void *)a1 + 50);
  if (v1)
  {
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
    if (BSDName) {
      return IPMonitorControlGetInterfacePrimaryRank(v1, BSDName);
    }
    _SCErrorSet(1002);
  }

  return 0LL;
}

uint64_t SCNetworkInterfaceSetPrimaryRank(const __SCNetworkInterface *a1, unsigned int a2)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName)
  {
    uint64_t v5 = BSDName;
    uint64_t v6 = (void *)*((void *)a1 + 50);
    if (v6) {
      return IPMonitorControlSetInterfacePrimaryRank(v6, v5, a2);
    }
    uint64_t v6 = (void *)IPMonitorControlCreate();
    if (v6)
    {
      *((void *)a1 + 50) = v6;
      return IPMonitorControlSetInterfacePrimaryRank(v6, v5, a2);
    }

    int v8 = 1001;
  }

  else
  {
    int v8 = 1002;
  }

  _SCErrorSet(v8);
  return 0LL;
}

CFStringRef SCNetworkInterfaceCopyRankAssertionNotificationKey(const __SCNetworkInterface *a1)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName) {
    return IPMonitorControlCopyInterfaceRankAssertionNotificationKey(BSDName);
  }
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t SCNetworkInterfaceCopyRankAssertionInfo(const __SCNetworkInterface *a1)
{
  v2[1] = *(CFStringRef *)MEMORY[0x1895F89C0];
  uint64_t result = _SCNetworkInterfaceGetIPMonitorControl(a1, v2);
  if (result)
  {
    uint64_t result = IPMonitorControlCopyInterfaceRankAssertionInfo(result, v2[0]);
    if (!result)
    {
      _SCErrorSet(1001);
      return 0LL;
    }
  }

  return result;
}

uint64_t SCNetworkInterfaceRankAssertionInfoGetPrimaryRank(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetPrimaryRank(a1);
}

uint64_t SCNetworkInterfaceRankAssertionInfoGetProcessID(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessID(a1);
}

const void *SCNetworkInterfaceRankAssertionInfoGetProcessName(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessName(a1);
}

uint64_t SCNetworkInterfaceRankAssertionCopyInterfaceNames()
{
  uint64_t v0 = IPMonitorControlCreate();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t v2 = IPMonitorControlCopyInterfaceRankAssertionInterfaceNames(v0);
    if (!v2) {
      _SCErrorSet(1001);
    }
    CFRelease(v1);
  }

  else
  {
    _SCErrorSet(1001);
    return 0LL;
  }

  return v2;
}

const void *__SCNetworkInterfaceGetDisableUntilNeededValue(const __SCPreferences **a1)
{
  return get_number_value(a1, @"DisableUntilNeeded");
}

const void *get_number_value(const __SCPreferences **cf, const void *a2)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (cf) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v9 = 0LL;
    LODWORD(v5) = 1002;
    goto LABEL_17;
  }

  if (!cf) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  uint64_t v5 = copyPerInterfaceConfigurationPaths((uint64_t)cf, 0LL);
  if (!v5)
  {
LABEL_13:
    uint64_t v9 = 0LL;
    goto LABEL_17;
  }

  uint64_t v6 = v5;
  CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, 0LL);
  CFDictionaryRef Value = __SCNetworkConfigurationGetValue(cf[10], ValueAtIndex);
  CFRelease(v6);
  if (!Value)
  {
    LODWORD(v5) = 0;
    goto LABEL_13;
  }

  uint64_t v9 = CFDictionaryGetValue(Value, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (v9)
  {
    CFTypeID v11 = TypeID;
    CFTypeID v12 = CFGetTypeID(v9);
    LODWORD(v5) = 0;
    if (v12 != v11) {
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    LODWORD(v5) = 0;
  }

BOOL SCNetworkInterfaceGetDisableUntilNeeded(const __SCPreferences **a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  number_stat value = (const __CFNumber *)get_number_value(a1, @"DisableUntilNeeded");
  if (!number_value) {
    return _SCNetworkInterfaceIsTethered(a1);
  }
  int valuePtr = 0;
  int Value = CFNumberGetValue(number_value, kCFNumberIntType, &valuePtr);
  BOOL result = valuePtr != 0;
  if (!Value) {
    return _SCNetworkInterfaceIsTethered(a1);
  }
  return result;
}

uint64_t __SCNetworkInterfaceSetDisableUntilNeededValue(uint64_t a1, const void *a2)
{
  return set_number_value(a1, @"DisableUntilNeeded", a2);
}

uint64_t set_number_value(uint64_t a1, const void *a2, const void *a3)
{
  if (*(void *)(a1 + 80)
    && (!a3 || (CFTypeID TypeID = CFNumberGetTypeID(), CFGetTypeID(a3) == TypeID))
    && findPerInterfaceConfiguration(a1) != -1
    && (CFIndex v7 = copyPerInterfaceConfigurationPaths(a1, 0LL)) != 0LL)
  {
    int v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count < 1)
    {
      uint64_t v19 = 1LL;
LABEL_23:
      _SCErrorSet(0);
    }

    else
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0LL;
      CFTypeID v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
        int Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a1 + 80), ValueAtIndex);
        CFStringRef v15 = Value
            ? CFDictionaryCreateMutableCopy(0LL, 0LL, Value)
            : CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], v12);
        uint64_t v16 = v15;
        if (a3) {
          CFDictionarySetValue(v15, a2, a3);
        }
        else {
          CFDictionaryRemoveValue(v15, a2);
        }
        uint64_t v17 = *(const __SCPreferences **)(a1 + 80);
        uint64_t v18 = CFDictionaryGetCount(v16) <= 0 ? 0LL : v16;
        uint64_t v19 = __SCNetworkConfigurationSetValue(v17, ValueAtIndex, v18, 0);
        CFRelease(v16);
        if (!(_DWORD)v19) {
          break;
        }
        if (v10 == ++v11) {
          goto LABEL_23;
        }
      }
    }

    CFRelease(v8);
  }

  else
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  return v19;
}

uint64_t SCNetworkInterfaceSetDisableUntilNeeded(uint64_t a1, int a2)
{
  return set_BOOLean_value(a1, @"DisableUntilNeeded", a2);
}

uint64_t set_BOOLean_value(uint64_t a1, const void *a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v9 = 0;
  int v10 = 1;
  if (a3) {
    uint64_t v5 = &v10;
  }
  else {
    uint64_t v5 = &v9;
  }
  CFNumberRef v6 = CFNumberCreate(0LL, kCFNumberIntType, v5);
  uint64_t v7 = set_number_value(a1, a2, v6);
  CFRelease(v6);
  return v7;
}

const void *__SCNetworkInterfaceGetDisablePrivateRelayValue(const __SCPreferences **a1)
{
  return get_number_value(a1, @"DisablePrivateRelay");
}

CFNumberRef SCNetworkInterfaceGetDisablePrivateRelay(const __SCPreferences **a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  BOOL result = (const __CFNumber *)get_number_value(a1, @"DisablePrivateRelay");
  if (result)
  {
    int valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberIntType, &valuePtr)) {
      BOOL v2 = valuePtr == 0;
    }
    else {
      BOOL v2 = 1;
    }
    return (const __CFNumber *)!v2;
  }

  return result;
}

uint64_t __SCNetworkInterfaceSetDisablePrivateRelayValue(uint64_t a1, const void *a2)
{
  return set_number_value(a1, @"DisablePrivateRelay", a2);
}

uint64_t SCNetworkInterfaceSetDisablePrivateRelay(uint64_t a1, int a2)
{
  return set_BOOLean_value(a1, @"DisablePrivateRelay", a2);
}

BOOL SCNetworkInterfaceSupportsLowDataMode(void *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (cf) {
      goto LABEL_3;
    }
    return 0LL;
  }

  if (!cf) {
    return 0LL;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v2
    || _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)cf)
    || _SCNetworkInterfaceIsHiddenInterface((unsigned __int8 *)cf))
  {
    return 0LL;
  }

  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
  return CFEqual(InterfaceType, @"Ethernet") != 0;
}

const void *__SCNetworkInterfaceGetEnableLowDataModeValue(const __SCPreferences **a1)
{
  if (SCNetworkInterfaceSupportsLowDataMode(a1)) {
    return get_number_value(a1, @"EnableLowDataMode");
  }
  _SCErrorSet(1002);
  return 0LL;
}

CFNumberRef SCNetworkInterfaceGetEnableLowDataMode(const __SCPreferences **a1)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  BOOL result = (const __CFNumber *)__SCNetworkInterfaceGetEnableLowDataModeValue(a1);
  if (result)
  {
    int valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberIntType, &valuePtr)) {
      BOOL v2 = valuePtr == 0;
    }
    else {
      BOOL v2 = 1;
    }
    return (const __CFNumber *)!v2;
  }

  return result;
}

uint64_t __SCNetworkInterfaceSetEnableLowDataModeValue(void *a1, const void *a2)
{
  if (SCNetworkInterfaceSupportsLowDataMode(a1)) {
    return set_number_value((uint64_t)a1, @"EnableLowDataMode", a2);
  }
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t SCNetworkInterfaceSetEnableLowDataMode(void *a1, int a2)
{
  if (SCNetworkInterfaceSupportsLowDataMode(a1)) {
    return set_BOOLean_value((uint64_t)a1, @"EnableLowDataMode", a2);
  }
  _SCErrorSet(1002);
  return 0LL;
}

__CFArray *__SCNetworkInterfaceCopyStoredWithPreferences(const __SCPreferences *cf)
{
  SCPreferencesRef v1 = cf;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (cf)
    {
LABEL_3:
      CFRetain(v1);
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (v1) {
      goto LABEL_3;
    }
  }

  SCPreferencesRef v1 = SCPreferencesCreate(0LL, @"SCNetworkInterface", @"NetworkInterfaces.plist");
  if (!v1) {
    __SCNetworkInterfaceCopyStoredWithPreferences_cold_1();
  }
LABEL_6:
  int Value = (const __CFArray *)SCPreferencesGetValue(v1, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFIndex Count = CFArrayGetCount(Value);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, i);
        CFTypeID v8 = CFDictionaryGetTypeID();
        if (ValueAtIndex)
        {
          if (CFGetTypeID(ValueAtIndex) == v8)
          {
            int v9 = (const void *)__SCNetworkInterfaceCreateWithStorageEntity(ValueAtIndex);
            if (v9)
            {
              int v10 = v9;
              CFArrayAppendValue(Mutable, v9);
              CFRelease(v10);
            }
          }
        }
      }
    }
  }

  else
  {
    CFMutableArrayRef Mutable = 0LL;
  }

  CFRelease(v1);
  return Mutable;
}

uint64_t __SCNetworkInterfaceCreateWithStorageEntity(const __CFDictionary *a1)
{
  uint64_t v89 = *MEMORY[0x1895F89C0];
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    int Value = CFDictionaryGetValue(a1, @"Active");
    CFTypeID v4 = CFBooleanGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v4) {
        uint64_t v5 = Value;
      }
      else {
        uint64_t v5 = 0LL;
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    uint64_t v11 = (const __CFBoolean *)*MEMORY[0x189604DE0];
    if (v5) {
      CFTypeID v12 = (const __CFBoolean *)Value;
    }
    else {
      CFTypeID v12 = (const __CFBoolean *)*MEMORY[0x189604DE0];
    }
    int v13 = (const __CFString *)CFDictionaryGetValue(a1, @"BSD Name");
    CFTypeID v14 = CFStringGetTypeID();
    if (v13 && CFGetTypeID(v13) == v14)
    {
      CFStringRef v15 = CFDictionaryGetValue(a1, @"HiddenConfiguration");
      CFTypeID v16 = CFBooleanGetTypeID();
      if (v15)
      {
        if (CFGetTypeID(v15) == v16) {
          uint64_t v17 = v15;
        }
        else {
          uint64_t v17 = 0LL;
        }
      }

      else
      {
        uint64_t v17 = 0LL;
      }

      if (v17) {
        int v21 = (const __CFBoolean *)v15;
      }
      else {
        int v21 = v11;
      }
      uint64_t v22 = CFDictionaryGetValue(a1, @"HiddenInterface");
      CFTypeID v23 = CFBooleanGetTypeID();
      if (v22)
      {
        if (CFGetTypeID(v22) == v23) {
          CFDictionaryRef v24 = v22;
        }
        else {
          CFDictionaryRef v24 = 0LL;
        }
      }

      else
      {
        CFDictionaryRef v24 = 0LL;
      }

      if (v24) {
        uint64_t v25 = (const __CFBoolean *)v22;
      }
      else {
        uint64_t v25 = v11;
      }
      uint64_t v26 = CFDictionaryGetValue(a1, @"IOBuiltin");
      CFTypeID v27 = CFBooleanGetTypeID();
      if (!v26 || CFGetTypeID(v26) != v27)
      {
        CFNumberRef v6 = __log_SCNetworkConfiguration();
        uint64_t v7 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v6, (os_log_type_t)v7)) {
          return 0LL;
        }
        goto LABEL_10;
      }

      uint64_t v28 = CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
      CFTypeID v29 = CFStringGetTypeID();
      if (v28 && CFGetTypeID(v28) == v29)
      {
        CFRetain(v28);
LABEL_46:
        CFRange v30 = (const __CFNumber *)CFDictionaryGetValue(a1, @"IOInterfaceType");
        CFTypeID v31 = CFNumberGetTypeID();
        if (v30 && CFGetTypeID(v30) == v31)
        {
          if (!CFNumberGetValue(v30, kCFNumberIntType, &valuePtr))
          {
            os_log_t v32 = __log_SCNetworkConfiguration();
            int v33 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v32, (os_log_type_t)v33))
            {
              uint64_t v34 = _os_log_pack_size();
              os_log_t v86 = v32;
              CFIndex v87 = &v78;
              uint64_t v35 = MEMORY[0x1895F8858](v34);
              LODWORD(v85) = v33;
              int v36 = (char *)&v78 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send(5, (uint64_t)v86, v85, v36);
            }
          }

          CFStringRef v37 = (os_log_s *)CFDictionaryGetValue(a1, @"IOInterfaceUnit");
          CFTypeID v38 = CFNumberGetTypeID();
          if (v37 && CFGetTypeID(v37) == v38)
          {
            os_log_t v86 = v37;
            uint64_t v39 = (uint64_t *)CFDictionaryGetValue(a1, @"IOMACAddress");
            CFTypeID v40 = CFDataGetTypeID();
            if (v39 && (CFIndex v87 = v39, CFGetTypeID(v39) == v40))
            {
              uint64_t v41 = CFDictionaryGetValue(a1, @"IOPathMatch");
              CFTypeID v42 = CFStringGetTypeID();
              if (v41 && CFGetTypeID(v41) == v42)
              {
                CFTypeRef v85 = v41;
                int v43 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"SCNetworkInterfaceInfo");
                CFTypeID v44 = CFDictionaryGetTypeID();
                if (v43 && CFGetTypeID(v43) == v44)
                {
                  uint64_t v79 = @"UserDefinedName";
                  uint64_t v45 = CFDictionaryGetValue(v43, @"UserDefinedName");
                  CFTypeRef v84 = (CFTypeRef)CFStringGetTypeID();
                  if (v45)
                  {
                    CFTypeRef v46 = (CFTypeRef)CFGetTypeID(v45);
                    if (v46 == v84) {
                      uint64_t v47 = v45;
                    }
                    else {
                      uint64_t v47 = 0LL;
                    }
                    CFDictionaryRef v81 = v47;
                  }

                  else
                  {
                    CFDictionaryRef v81 = 0LL;
                  }

                  SCNetworkInterfaceRef v52 = CFDictionaryGetValue(v43, @"kUSBProductString");
                  CFTypeRef v84 = (CFTypeRef)CFStringGetTypeID();
                  if (v52)
                  {
                    CFTypeRef v53 = (CFTypeRef)CFGetTypeID(v52);
                    if (v53 == v84) {
                      CFIndex v54 = v52;
                    }
                    else {
                      CFIndex v54 = 0LL;
                    }
                    CFTypeRef v83 = v54;
                  }

                  else
                  {
                    CFTypeRef v83 = 0LL;
                  }

                  __n128 v55 = CFDictionaryGetValue(v43, @"idProduct");
                  CFTypeRef v84 = (CFTypeRef)CFNumberGetTypeID();
                  if (v55)
                  {
                    CFTypeRef v56 = (CFTypeRef)CFGetTypeID(v55);
                    if (v56 == v84) {
                      uint64_t v57 = v55;
                    }
                    else {
                      uint64_t v57 = 0LL;
                    }
                    CFTypeRef v84 = v57;
                  }

                  else
                  {
                    CFTypeRef v84 = 0LL;
                  }

                  CFTypeID v58 = CFDictionaryGetValue(v43, @"idVendor");
                  CFTypeID v59 = CFNumberGetTypeID();
                  if (v58)
                  {
                    if (CFGetTypeID(v58) == v59) {
                      int v60 = v58;
                    }
                    else {
                      int v60 = 0LL;
                    }
                    CFTypeRef v82 = v60;
                  }

                  else
                  {
                    CFTypeRef v82 = 0LL;
                  }

                  uint64_t v61 = CFDictionaryGetValue(a1, @"MatchingMACs");
                  CFTypeID v62 = CFArrayGetTypeID();
                  if (v61)
                  {
                    if (CFGetTypeID(v61) == v62) {
                      uint64_t v63 = v61;
                    }
                    else {
                      uint64_t v63 = 0LL;
                    }
                    CFTypeRef v80 = v63;
                  }

                  else
                  {
                    CFTypeRef v80 = 0LL;
                  }

                  int v64 = (const __CFString *)CFDictionaryGetValue(a1, @"SCNetworkInterfaceType");
                  CFTypeID v65 = CFStringGetTypeID();
                  if (v64 && CFGetTypeID(v64) == v65)
                  {
                    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
                    CFTypeRef v67 = Mutable;
                    if (valuePtr == 144)
                    {
                      io_registry_entry_t v69 = &kSCValNetInterfaceTypeFireWire;
                    }

                    else
                    {
                      CFStringRef v68 = v64;
                      if (valuePtr != 6) {
                        goto LABEL_113;
                      }
                      io_registry_entry_t v69 = &kSCValNetInterfaceTypeEthernet;
                    }

                    CFStringRef v68 = *v69;
LABEL_113:
                    CFDictionarySetValue(Mutable, @"Type", v68);
                    uint64_t Configuration = findConfiguration(v64);
                    if (Configuration == -1)
                    {
                      int v73 = v67;
                      CFMutableStringRef v72 = v64;
                    }

                    else
                    {
                      if (((0x61200uLL >> Configuration) & 1) != 0)
                      {
LABEL_118:
                        CFDictionarySetValue(v67, @"DeviceName", v13);
                        if (CFBooleanGetValue(v21)) {
                          CFDictionarySetValue(v67, @"HiddenConfiguration", (const void *)*MEMORY[0x189604DE8]);
                        }
                        if (v81) {
                          CFDictionarySetValue(v67, v79, v81);
                        }
                        uint64_t v19 = _SCNetworkInterfaceCreateWithEntity();
                        CFRelease(v67);
                        *(_BYTE *)(v19 + 24) = CFBooleanGetValue(v12);
                        *(_BYTE *)(v19 + 176) = CFBooleanGetValue((CFBooleanRef)v26);
                        *(_BYTE *)(v19 + 193) = CFBooleanGetValue(v25);
                        *(void *)(v19 + 232) = CFRetain(v28);
                        *(void *)(v19 + 248) = CFRetain(v30);
                        *(void *)(v19 + 256) = CFRetain(v86);
                        *(void *)(v19 + 160) = CFRetain(v87);
                        *(void *)(v19 + 208) = CFRetain(v85);
                        if (v83) {
                          CFTypeRef v74 = CFRetain(v83);
                        }
                        else {
                          CFTypeRef v74 = 0LL;
                        }
                        *(void *)(v19 + 280) = v74;
                        if (v84) {
                          CFTypeRef v75 = CFRetain(v84);
                        }
                        else {
                          CFTypeRef v75 = 0LL;
                        }
                        *(void *)(v19 + 296) = v75;
                        if (v82) {
                          CFTypeRef v76 = CFRetain(v82);
                        }
                        else {
                          CFTypeRef v76 = 0LL;
                        }
                        *(void *)(v19 + 288) = v76;
                        if (v80) {
                          CFTypeRef v77 = CFRetain(v80);
                        }
                        else {
                          CFTypeRef v77 = 0LL;
                        }
                        *(void *)(v19 + 304) = v77;
                        goto LABEL_110;
                      }

                      CFMutableStringRef v72 = *configurations[5 * Configuration + 1];
                      int v73 = v67;
                    }

                    CFDictionarySetValue(v73, @"Hardware", v72);
                    goto LABEL_118;
                  }

                  uint64_t v48 = __log_SCNetworkConfiguration();
                  uint64_t v49 = _SC_syslog_os_log_mapping(6);
                  if (__SC_log_enabled(6, v48, (os_log_type_t)v49)) {
                    goto LABEL_107;
                  }
LABEL_109:
                  uint64_t v19 = 0LL;
LABEL_110:
                  CFRelease(v28);
                  return v19;
                }

                uint64_t v48 = __log_SCNetworkConfiguration();
                uint64_t v49 = _SC_syslog_os_log_mapping(6);
                if (!__SC_log_enabled(6, v48, (os_log_type_t)v49)) {
                  goto LABEL_109;
                }
              }

              else
              {
                uint64_t v48 = __log_SCNetworkConfiguration();
                uint64_t v49 = _SC_syslog_os_log_mapping(6);
                if (!__SC_log_enabled(6, v48, (os_log_type_t)v49)) {
                  goto LABEL_109;
                }
              }
            }

            else
            {
              uint64_t v48 = __log_SCNetworkConfiguration();
              uint64_t v49 = _SC_syslog_os_log_mapping(6);
              if (!__SC_log_enabled(6, v48, (os_log_type_t)v49)) {
                goto LABEL_109;
              }
            }
          }

          else
          {
            uint64_t v48 = __log_SCNetworkConfiguration();
            uint64_t v49 = _SC_syslog_os_log_mapping(6);
            if (!__SC_log_enabled(6, v48, (os_log_type_t)v49)) {
              goto LABEL_109;
            }
          }

uint64_t __SCNetworkInterfaceSaveStoredWithPreferences(SCPreferencesRef a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    return 0LL;
  }
  if (a1)
  {
    CFRetain(a1);
  }

  else
  {
    a1 = SCPreferencesCreate(0LL, @"SCNetworkInterface", @"NetworkInterfaces.plist");
    if (!a1) {
      __SCNetworkInterfaceSaveStoredWithPreferences_cold_1();
    }
  }

  uint64_t v6 = SCPreferencesSetValue(a1, @"Interfaces", a2);
  CFRelease(a1);
  return v6;
}

uint64_t __SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName( int a1, const __SCPreferences *cf, const void *a3)
{
  SCPreferencesRef v4 = cf;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (cf)
    {
LABEL_3:
      CFRetain(v4);
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (v4) {
      goto LABEL_3;
    }
  }

  SCPreferencesRef v4 = SCPreferencesCreate(0LL, @"SCNetworkInterface", @"NetworkInterfaces.plist");
  if (!v4) {
    __SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName_cold_1();
  }
LABEL_6:
  int Value = (const __CFArray *)SCPreferencesGetValue(v4, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && (CFIndex Count = CFArrayGetCount(Value), Count >= 1))
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0LL;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v9);
      CFTypeID v11 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v11)
        {
          CFTypeID v12 = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
          CFTypeID v13 = CFStringGetTypeID();
          if (v12)
          {
            if (CFGetTypeID(v12) == v13 && CFEqual(a3, v12)) {
              break;
            }
          }
        }
      }

      if (v8 == ++v9) {
        goto LABEL_16;
      }
    }

    uint64_t v14 = __SCNetworkInterfaceCreateWithStorageEntity(ValueAtIndex);
  }

  else
  {
LABEL_16:
    uint64_t v14 = 0LL;
  }

  CFRelease(v4);
  return v14;
}

__CFDictionary *__SCNetworkInterfaceCreateMappingUsingBSDName(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v3 = Count;
  CFMutableArrayRef Mutable = 0LL;
  CFIndex v5 = 0LL;
  uint64_t v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
  uint64_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
  do
  {
    CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, v5);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (BSDName)
    {
      CFStringRef v10 = BSDName;
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, v6, v7);
      }
      CFDictionarySetValue(Mutable, v10, ValueAtIndex);
    }

    ++v5;
  }

  while (v3 != v5);
  return Mutable;
}

CFDictionaryRef __SCNetworkInterfaceEntityIsPPTP(const __CFDictionary *result)
{
  if (result)
  {
    int Value = CFDictionaryGetValue(result, @"SubType");
    return Value && CFEqual(Value, @"PPTP");
  }

  return result;
}

uint64_t SCNetworkInterfaceTypeSetTemporaryOverrideCost(const __SCPreferences *a1, CFTypeRef cf1, int a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (CFEqual(cf1, @"IEEE80211") || CFEqual(cf1, @"Cellular"))
  {
    uint64_t v6 = CFStringCreateWithFormat( 0LL,  0LL,  @"%@%@/%@/%@/%@/%@",  @"/",  @"System",  @"Network",  @"Override",  @"InterfaceType",  cf1);
    int Value = SCPreferencesPathGetValue(a1, v6);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    }
    else {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    }
    CFStringRef v10 = MutableCopy;
    CFTypeID v11 = @"Inexpensive";
    if (a3 != 1) {
      CFTypeID v11 = 0LL;
    }
    if (a3 == 2) {
      CFTypeID v12 = @"Expensive";
    }
    else {
      CFTypeID v12 = v11;
    }
    if (v12)
    {
      CFDictionarySetValue(MutableCopy, @"Cost", v12);
      if (_SC_isAppleInternal_once_3 != -1) {
        dispatch_once(&_SC_isAppleInternal_once_3, &__block_literal_global_431);
      }
      if (!_SC_isAppleInternal_isInternal_3) {
        goto LABEL_23;
      }
      LODWORD(valuePtr) = 0;
      CFTypeID v13 = (const __CFDictionary *)SCDynamicStoreCopyValue( 0LL,  @"Global:NetworkInterfaceOverrideExpensiveExpiration");
      CFTypeID v14 = CFDictionaryGetTypeID();
      if (!v13) {
        goto LABEL_23;
      }
      if (CFGetTypeID(v13) == v14)
      {
        CFStringRef v15 = (const __CFNumber *)CFDictionaryGetValue(v13, @"Delta");
        CFTypeID v16 = CFNumberGetTypeID();
        if (v15)
        {
          if (CFGetTypeID(v15) == v16) {
            CFNumberGetValue(v15, kCFNumberIntType, &valuePtr);
          }
        }
      }

      CFRelease(v13);
      int v17 = LODWORD(valuePtr);
      if (SLODWORD(valuePtr) < 1
        || (Current = CFAbsoluteTimeGetCurrent(), (CFDateRef v19 = CFDateCreate(0LL, Current + (double)v17)) == 0LL))
      {
LABEL_23:
        uint64_t v20 = CFCalendarCreateWithIdentifier(0LL, (CFCalendarIdentifier)*MEMORY[0x189604F90]);
        CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
        CFCalendarAddComponents(v20, &valuePtr, 0LL, "d", 1LL);
        CFCalendarDecomposeAbsoluteTime(v20, valuePtr, "yMd", &v24, &v25, &v27);
        CFCalendarComposeAbsoluteTime(v20, &valuePtr, "yMdHms", v24, v25, v27, 5LL, 0LL, 0LL);
        CFRelease(v20);
        CFDateRef v19 = CFDateCreate(0LL, valuePtr);
      }

      CFDictionarySetValue(v10, @"Expiration", v19);
      CFRelease(v19);
    }

    else
    {
      CFDictionaryRemoveValue(MutableCopy, @"Cost");
      CFDictionaryRemoveValue(v10, @"Expiration");
      if (!CFDictionaryGetCount(v10))
      {
        CFRelease(v10);
        goto LABEL_30;
      }
    }

    if (v10)
    {
      uint64_t v21 = SCPreferencesPathSetValue(a1, v6, v10);
      CFRelease(v10);
      goto LABEL_33;
    }

uint64_t SCNetworkInterfaceTypeGetTemporaryOverrideCost(const __SCPreferences *a1, uint64_t a2)
{
  CFIndex v3 = CFStringCreateWithFormat( 0LL,  0LL,  @"%@%@/%@/%@/%@/%@",  @"/",  @"System",  @"Network",  @"Override",  @"InterfaceType",  a2);
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v3);
  CFRelease(v3);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  uint64_t v6 = CFDictionaryGetValue(Value, @"Expiration");
  CFTypeID v7 = CFDateGetTypeID();
  if (!v6) {
    return 0LL;
  }
  if (CFGetTypeID(v6) != v7) {
    return 0LL;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFIndex v9 = CFDateCreate(0LL, Current);
  CFComparisonResult v10 = CFDateCompare(v9, (CFDateRef)v6, 0LL);
  CFRelease(v9);
  if (v10 != kCFCompareLessThan) {
    return 0LL;
  }
  CFTypeID v12 = CFDictionaryGetValue(Value, @"Cost");
  CFTypeID v13 = CFStringGetTypeID();
  if (!v12 || CFGetTypeID(v12) != v13) {
    return 0LL;
  }
  if (CFEqual(v12, @"Expensive")) {
    return 2LL;
  }
  return CFEqual(v12, @"Inexpensive") != 0;
}

void __SCNetworkInterfaceDeallocate(void *a1)
{
  BOOL v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  CFIndex v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  SCPreferencesRef v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[9];
  if (v6) {
    CFRelease(v6);
  }
  CFTypeID v7 = (const void *)a1[10];
  if (v7) {
    CFRelease(v7);
  }
  CFIndex v8 = (const void *)a1[11];
  if (v8) {
    CFRelease(v8);
  }
  CFIndex v9 = (const void *)a1[12];
  if (v9) {
    CFRelease(v9);
  }
  CFComparisonResult v10 = (const void *)a1[13];
  if (v10) {
    CFRelease(v10);
  }
  CFTypeID v11 = (const void *)a1[14];
  if (v11) {
    CFRelease(v11);
  }
  CFTypeID v12 = (const void *)a1[15];
  if (v12) {
    CFRelease(v12);
  }
  CFTypeID v13 = (const void *)a1[18];
  if (v13) {
    CFRelease(v13);
  }
  CFTypeID v14 = (const void *)a1[19];
  if (v14) {
    CFRelease(v14);
  }
  CFStringRef v15 = (const void *)a1[20];
  if (v15) {
    CFRelease(v15);
  }
  CFTypeID v16 = (const void *)a1[21];
  if (v16) {
    CFRelease(v16);
  }
  int v17 = (const void *)a1[23];
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = (const void *)a1[25];
  if (v18) {
    CFRelease(v18);
  }
  CFDateRef v19 = (const void *)a1[26];
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = (const void *)a1[28];
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = (const void *)a1[29];
  if (v21) {
    CFRelease(v21);
  }
  CFTypeID v22 = (const void *)a1[31];
  if (v22) {
    CFRelease(v22);
  }
  CFTypeID v23 = (const void *)a1[32];
  if (v23) {
    CFRelease(v23);
  }
  unsigned int v24 = (const void *)a1[33];
  if (v24) {
    CFRelease(v24);
  }
  unsigned int v25 = (const void *)a1[34];
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = (const void *)a1[35];
  if (v26) {
    CFRelease(v26);
  }
  unsigned int v27 = (const void *)a1[37];
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = (const void *)a1[36];
  if (v28) {
    CFRelease(v28);
  }
  CFTypeID v29 = (const void *)a1[40];
  if (v29) {
    CFRelease(v29);
  }
  CFRange v30 = (const void *)a1[41];
  if (v30) {
    CFRelease(v30);
  }
  CFTypeID v31 = (const void *)a1[42];
  if (v31) {
    CFRelease(v31);
  }
  os_log_t v32 = (const void *)a1[44];
  if (v32) {
    CFRelease(v32);
  }
  int v33 = (const void *)a1[45];
  if (v33) {
    CFRelease(v33);
  }
  uint64_t v34 = (const void *)a1[47];
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v35 = (const void *)a1[48];
  if (v35) {
    CFRelease(v35);
  }
  int v36 = (const void *)a1[49];
  if (v36) {
    CFRelease(v36);
  }
  CFStringRef v37 = (const void *)a1[50];
  if (v37) {
    CFRelease(v37);
  }
}

uint64_t __SCNetworkInterfaceEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if ((_DWORD)result)
  {
    CFIndex v5 = *(const void **)(a1 + 112);
    uint64_t v6 = *(const void **)(a2 + 112);
    if (v5 == v6 || (uint64_t result = 0LL, v5) && v6 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 112), v6), (_DWORD)result))
    {
      CFStringRef v7 = *(CFStringRef *)(a1 + 120);
      CFStringRef v8 = *(CFStringRef *)(a2 + 120);
      if (v7)
      {
        if (v8)
        {
          if (v7 == v8) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }

      else if (!v8)
      {
        goto LABEL_17;
      }

      NonLocalizedDisplayCFStringRef Name = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)a1);
      CFStringRef v10 = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)a2);
      if (!NonLocalizedDisplayName) {
        goto LABEL_17;
      }
      CFStringRef v8 = v10;
      if (!v10 || NonLocalizedDisplayName == v10) {
        goto LABEL_17;
      }
      CFStringRef v7 = NonLocalizedDisplayName;
LABEL_16:
      uint64_t result = CFEqual(v7, v8);
      if (!(_DWORD)result) {
        return result;
      }
LABEL_17:
      if (!CFEqual(*(CFTypeRef *)(a1 + 16), @"Bond")) {
        goto LABEL_49;
      }
      CFTypeID v11 = *(const void **)(a1 + 320);
      CFTypeID v12 = *(const void **)(a2 + 320);
      if (v11 == v12 || (uint64_t result = 0LL, v11) && v12 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 320), v12), (_DWORD)result))
      {
        CFTypeID v13 = *(const void **)(a1 + 328);
        CFTypeID v14 = *(const void **)(a2 + 328);
        if (v13 == v14
          || (uint64_t result = 0LL, v13) && v14 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 328), v14), (_DWORD)result))
        {
LABEL_49:
          if (!CFEqual(*(CFTypeRef *)(a1 + 16), @"Bridge")
            || (CFStringRef v15 = *(const void **)(a1 + 352), v16 = *(const void **)(a2 + 352), v15 == v16)
            || (uint64_t result = 0LL, v15) && v16 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 352), v16), (_DWORD)result))
          {
            if (!CFEqual(*(CFTypeRef *)(a1 + 16), @"VLAN")) {
              goto LABEL_40;
            }
            int v17 = *(const void **)(a1 + 376);
            uint64_t v18 = *(const void **)(a2 + 376);
            if (v17 == v18
              || (uint64_t result = 0LL, v17) && v18 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 376), v18), (_DWORD)result))
            {
              CFDateRef v19 = *(const void **)(a1 + 384);
              uint64_t v20 = *(const void **)(a2 + 384);
              if (v19 == v20
                || (uint64_t result = 0LL, v19) && v20 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 384), v20), (_DWORD)result))
              {
LABEL_40:
                uint64_t v21 = *(const void **)(a1 + 72);
                CFTypeID v22 = *(const void **)(a2 + 72);
                return v21 == v22 || v21 && v22 && CFEqual(v21, v22);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

CFHashCode __SCNetworkInterfaceHash(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 112);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 120);
  CFHashCode v4 = CFHash(v2);
  if (v3) {
    v4 ^= CFHash(*(CFTypeRef *)(a1 + 120));
  }
  return v4;
}

__CFString *__SCNetworkInterfaceCopyFormattingDescription(uint64_t a1, const __CFDictionary *a2)
{
  valuePtr[1] = *MEMORY[0x1895F89C0];
  CFHashCode v4 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v4, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCNetworkInterface %p [%p]> {", a1, v4);
  CFStringAppendFormat(Mutable, 0LL, @"nw_interface_type_t type = %@", *(void *)(a1 + 16));
  CFStringAppendFormat(Mutable, 0LL, @", entity_device = %@", *(void *)(a1 + 112));
  if (*(void *)(a1 + 120)) {
    CFStringAppendFormat(Mutable, 0LL, @"+%@", *(void *)(a1 + 120));
  }
  CFStringAppendFormat(Mutable, 0LL, @", entity_nw_interface_type_t type = %@", *(void *)(a1 + 128));
  if (*(void *)(a1 + 136)) {
    CFStringAppendFormat(Mutable, 0LL, @" / %@", *(void *)(a1 + 136));
  }
  if (*(void *)(a1 + 32)) {
    CFStringAppendFormat(Mutable, 0LL, @", name = %@", *(void *)(a1 + 32));
  }
  if (*(void *)(a1 + 40))
  {
    CFStringAppendFormat(Mutable, 0LL, @", name(l) = %@", *(void *)(a1 + 40));
  }

  else if (*(void *)(a1 + 48))
  {
    CFStringAppendFormat(Mutable, 0LL, @", name(k) = %@", *(void *)(a1 + 48));
    if (*(void *)(a1 + 56)) {
      CFStringAppendFormat(Mutable, 0LL, @"+%@", *(void *)(a1 + 56));
    }
    if (*(void *)(a1 + 64)) {
      CFStringAppendFormat(Mutable, 0LL, @"+%@", *(void *)(a1 + 64));
    }
  }

  if (*(void *)(a1 + 160))
  {
    CFStringAppendFormat(Mutable, 0LL, @", sockaddr address = ");
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 160));
    CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 160));
    if (Length >= 1)
    {
      CFIndex v8 = Length;
      for (uint64_t i = 0LL; i != v8; ++i)
      {
        if (i) {
          CFStringRef v10 = ":";
        }
        else {
          CFStringRef v10 = "";
        }
        CFStringAppendFormat(Mutable, 0LL, @"%s%02x", v10, BytePtr[i]);
      }
    }
  }

  if (*(_BYTE *)(a1 + 176)) {
    CFTypeID v11 = "TRUE";
  }
  else {
    CFTypeID v11 = "FALSE";
  }
  CFStringAppendFormat(Mutable, 0LL, @", builtin = %s", v11);
  if (*(_BYTE *)(a1 + 192)) {
    CFStringAppendFormat(Mutable, 0LL, @", hidden = TRUE");
  }
  if (*(_BYTE *)(a1 + 193)) {
    CFStringAppendFormat(Mutable, 0LL, @", HIDDEN");
  }
  if (*(_BYTE *)(a1 + 240)) {
    CFStringAppendFormat(Mutable, 0LL, @", trust required = TRUE");
  }
  if (*(_BYTE *)(a1 + 241)) {
    CFStringAppendFormat(Mutable, 0LL, @", ephemeral");
  }
  if (*(_BYTE *)(a1 + 242)) {
    CFStringAppendFormat(Mutable, 0LL, @", self-named");
  }
  if (*(void *)(a1 + 200)) {
    CFStringAppendFormat(Mutable, 0LL, @", CFIndex location = %@", *(void *)(a1 + 200));
  }
  if (*(void *)(a1 + 208)) {
    CFStringAppendFormat(Mutable, 0LL, @", path = %@", *(void *)(a1 + 208));
  }
  if (*(void *)(a1 + 216)) {
    CFStringAppendFormat(Mutable, 0LL, @", entryID = 0x%llx", *(void *)(a1 + 216));
  }
  if (*(void *)(a1 + 248)) {
    CFStringAppendFormat(Mutable, 0LL, @", nw_interface_type_t type = %@", *(void *)(a1 + 248));
  }
  if (*(void *)(a1 + 256)) {
    CFStringAppendFormat(Mutable, 0LL, @", unit = %@", *(void *)(a1 + 256));
  }
  if (*(void *)(a1 + 264)) {
    CFStringAppendFormat(Mutable, 0LL, @", family = %@", *(void *)(a1 + 264));
  }
  if (*(void *)(a1 + 272)) {
    CFStringAppendFormat(Mutable, 0LL, @", subfamily = %@", *(void *)(a1 + 272));
  }
  CFTypeID v12 = *(const void **)(a1 + 296);
  if (*(_OWORD *)(a1 + 288) != 0LL)
  {
    valuePtr[0] = 0LL;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!v12
      || CFGetTypeID(v12) != TypeID
      || !CFNumberGetValue(*(CFNumberRef *)(a1 + 296), kCFNumberIntType, (char *)valuePtr + 4))
    {
      HIDWORD(valuePtr[0]) = 0;
    }

    CFTypeID v14 = *(const void **)(a1 + 288);
    CFTypeID v15 = CFNumberGetTypeID();
    if (!v14 || CFGetTypeID(v14) != v15 || !CFNumberGetValue(*(CFNumberRef *)(a1 + 288), kCFNumberIntType, valuePtr)) {
      LODWORD(valuePtr[0]) = 0;
    }
    if (*(void *)(a1 + 280)) {
      CFStringAppendFormat(Mutable, 0LL, @", USB name = %@", *(void *)(a1 + 280));
    }
    CFStringAppendFormat(Mutable, 0LL, @", USB vid/pid = %d/%d", LODWORD(valuePtr[0]), HIDWORD(valuePtr[0]));
  }

  if (*(void *)(a1 + 184)) {
    CFStringAppendFormat(Mutable, 0LL, @", action = %@", *(void *)(a1 + 184));
  }
  CFTypeID v16 = *(const void **)(a1 + 224);
  if (v16)
  {
    CFStringRef v17 = _SCCopyDescription(v16, a2);
    CFStringAppendFormat(Mutable, a2, @", overrides = %@", v17);
    CFRelease(v17);
  }

  uint64_t v18 = *(unsigned int *)(a1 + 312);
  else {
    CFDateRef v19 = sortOrderName[v18];
  }
  CFStringAppendFormat(Mutable, 0LL, @", order = %u (%s)", *(unsigned int *)(a1 + 312), v19);
  if (*(void *)(a1 + 80)) {
    CFStringAppendFormat(Mutable, 0LL, @", prefs = %p", *(void *)(a1 + 80));
  }
  if (*(void *)(a1 + 96)) {
    CFStringAppendFormat(Mutable, 0LL, @", service = %@", *(void *)(a1 + 96));
  }
  if (*(void *)(a1 + 72)) {
    CFStringAppendFormat(Mutable, 0LL, @", interface = %@", *(void *)(a1 + 72));
  }
  if (*(void *)(a1 + 104)) {
    CFStringAppendFormat(Mutable, a2, @", unsaved = %@", *(void *)(a1 + 104));
  }
  uint64_t v20 = *(const __CFArray **)(a1 + 320);
  if (v20)
  {
    CFIndex Count = CFArrayGetCount(v20);
    if (Count >= 1)
    {
      CFIndex v22 = Count;
      for (CFIndex j = 0LL; j != v22; ++j)
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), j);
        if (j) {
          unsigned int v25 = ",";
        }
        else {
          unsigned int v25 = ", interfaces = ";
        }
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        CFStringAppendFormat(Mutable, 0LL, @"%s%@", v25, BSDName);
      }
    }
  }

  if (*(void *)(a1 + 328)) {
    CFStringAppendFormat(Mutable, 0LL, @", mode = %@", *(void *)(a1 + 328));
  }
  unsigned int v27 = *(const void **)(a1 + 336);
  if (v27)
  {
    CFStringRef v28 = _SCCopyDescription(v27, a2);
    CFStringAppendFormat(Mutable, a2, @", options = %@", v28);
    CFRelease(v28);
  }

  CFTypeID v29 = *(const __CFArray **)(a1 + 352);
  if (v29)
  {
    CFIndex v30 = CFArrayGetCount(v29);
    if (v30 >= 1)
    {
      CFIndex v31 = v30;
      for (CFIndex k = 0LL; k != v31; ++k)
      {
        int v33 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 352), k);
        if (k) {
          uint64_t v34 = ",";
        }
        else {
          uint64_t v34 = ", interfaces = ";
        }
        CFStringRef v35 = SCNetworkInterfaceGetBSDName(v33);
        CFStringAppendFormat(Mutable, 0LL, @"%s%@", v34, v35);
      }
    }
  }

  int v36 = *(const void **)(a1 + 360);
  if (v36)
  {
    CFStringRef v37 = _SCCopyDescription(v36, a2);
    CFStringAppendFormat(Mutable, a2, @", options = %@", v37);
    CFRelease(v37);
  }

  CFTypeID v38 = *(const __SCNetworkInterface **)(a1 + 376);
  if (v38)
  {
    CFStringRef v39 = SCNetworkInterfaceGetBSDName(v38);
    CFStringAppendFormat(Mutable, 0LL, @", interface = %@", v39);
  }

  if (*(void *)(a1 + 384)) {
    CFStringAppendFormat(Mutable, 0LL, @", tag = %@", *(void *)(a1 + 384));
  }
  CFTypeID v40 = *(const void **)(a1 + 392);
  if (v40)
  {
    CFStringRef v41 = _SCCopyDescription(v40, a2);
    CFStringAppendFormat(Mutable, a2, @", options = %@", v41);
    CFRelease(v41);
  }

  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

__CFString *__SCNetworkInterfaceCopyDescription(uint64_t a1)
{
  return __SCNetworkInterfaceCopyFormattingDescription(a1, 0LL);
}

CFStringRef copy_interface_string(__CFBundle *a1, const __CFString *a2, int a3)
{
  v21[1] = *MEMORY[0x1895F89C0];
  CFStringRef v6 = copy_string_from_bundle(a1, a2, a3);
  CFStringRef v7 = v6;
  if (v6)
  {
    if (CFEqual(v6, a2) && (copy_interface_string_reported & 1) == 0)
    {
      CFStringRef v8 = copy_string_from_bundle(a1, @"airport", a3);
      CFStringRef v9 = v8;
      if (v8)
      {
        if (!CFEqual(v8, @"airport")) {
          goto LABEL_9;
        }
      }

      CFStringRef v10 = __log_SCNetworkConfiguration();
      uint64_t v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
      {
        uint64_t v12 = _os_log_pack_size();
        CFTypeID v13 = (char *)v21 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v14 = 138412802;
        *(void *)(v14 + 4) = a1;
        *(_WORD *)(v14 + 12) = 2112;
        *(void *)(v14 + 14) = @"airport";
        *(_WORD *)(v14 + 22) = 1024;
        *(_DWORD *)(v14 + 24) = a3;
        __SC_log_send(3, (uint64_t)v10, v11, v13);
      }

      _SC_crash("Failed to retrieve interface string", 0LL, 0LL);
      copy_interface_string_reported = 1;
      if (v9) {
LABEL_9:
      }
        CFRelease(v9);
    }
  }

  else
  {
    CFTypeID v15 = __log_SCNetworkConfiguration();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v18 = (char *)v21 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 138412802;
      *(void *)(v19 + 4) = a1;
      *(_WORD *)(v19 + 12) = 2112;
      *(void *)(v19 + 14) = a2;
      *(_WORD *)(v19 + 22) = 1024;
      *(_DWORD *)(v19 + 24) = a3;
      __SC_log_send(3, (uint64_t)v15, v16, v18);
    }
  }

  return v7;
}

CFStringRef copy_string_from_bundle(__CFBundle *a1, CFStringRef value, int a3)
{
  if (a3) {
    return CFBundleCopyLocalizedString(a1, value, value, @"NetworkInterface");
  }
  else {
    return (CFStringRef)CFBundleCopyLocalizedStringForLocalization();
  }
}

uint64_t isBuiltin(io_registry_entry_t a1)
{
  CFMutableStringRef v1 = pci_slot(a1, 0LL);
  if (!v1) {
    return 1LL;
  }
  CFRelease(v1);
  return 0LL;
}

CFBooleanRef getBooleanValue(const __CFBoolean *result)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (result)
  {
    CFMutableStringRef v1 = result;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (CFGetTypeID(v1) == TypeID)
    {
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    }

    else
    {
      CFTypeID v3 = CFNumberGetTypeID();
      if (CFGetTypeID(v1) == v3)
      {
        if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr)) {
          BOOL v4 = valuePtr == 0;
        }
        else {
          BOOL v4 = 1;
        }
        return (const __CFBoolean *)!v4;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t update_interface_name(void *a1, io_registry_entry_t entry, int a3)
{
  CFTypeRef v5 = IORegistryEntrySearchCFProperty(entry, "IOService", @"Product Name", 0LL, 3u);
  uint64_t v6 = (uint64_t)v5;
  if (a3 && !v5)
  {
    CFStringRef v7 = (const void *)a1[35];
    if (!v7) {
      return 0LL;
    }
    uint64_t v6 = (uint64_t)CFRetain(v7);
  }

  if (!v6) {
    return v6;
  }
  CFStringRef v8 = IOCopyCFStringValue((const __CFString *)v6);
  CFRelease((CFTypeRef)v6);
  if (!v8) {
    return 0LL;
  }
  if (CFStringGetLength(v8) < 1)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    CFStringRef v9 = (const void *)a1[4];
    if (v9) {
      CFRelease(v9);
    }
    a1[4] = CFRetain(v8);
    CFStringRef v10 = (const void *)a1[5];
    if (v10)
    {
      CFRelease(v10);
      a1[5] = 0LL;
    }

    uint64_t v6 = 1LL;
    if (bundle) {
      a1[5] = copy_interface_string((__CFBundle *)bundle, v8, 1);
    }
  }

  CFRelease(v8);
  return v6;
}

uint64_t pci_slot_info(io_registry_entry_t a1, int a2, CFMutableStringRef *a3, CFStringRef *a4)
{
  properties[1] = *(CFMutableDictionaryRef *)MEMORY[0x1895F89C0];
  properties[0] = 0LL;
  *a3 = 0LL;
  *a4 = 0LL;
  IORegistryEntryCreateCFProperties(a1, properties, 0LL, 0);
  if (properties[0])
  {
    CFStringRef v8 = IODictionaryCopyBSDName(properties[0]);
    CFRelease(properties[0]);
    if (v8)
    {
      CFMutableStringRef v9 = pci_slot(a1, &cf);
      *a3 = v9;
      if (v9)
      {
        if (!cf)
        {
          uint64_t v10 = 1LL;
LABEL_11:
          CFRelease(v8);
          return v10;
        }

        *a4 = pci_port((void *)cf, a2, v8);
        uint64_t v10 = 1LL;
      }

      else
      {
        uint64_t v10 = 0LL;
      }

      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_11;
    }
  }

  return 0LL;
}

uint64_t isThunderbolt(io_registry_entry_t a1)
{
  uint64_t result = (uint64_t)IORegistryEntrySearchCFProperty(a1, "IOService", @"PCI-Thunderbolt", 0LL, 3u);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    return 1LL;
  }

  return result;
}

void *processUSBInterface(void *result, io_registry_entry_t entry)
{
  CFTypeID v3 = result;
  if (!result[35])
  {
    uint64_t result = IORegistryEntrySearchCFProperty(entry, "IOService", @"kUSBProductString", 0LL, 3u);
    v3[35] = result;
  }

  if (!v3[36])
  {
    uint64_t result = IORegistryEntrySearchCFProperty(entry, "IOService", @"idVendor", 0LL, 3u);
    v3[36] = result;
  }

  if (!v3[37])
  {
    uint64_t result = IORegistryEntrySearchCFProperty(entry, "IOService", @"idProduct", 0LL, 3u);
    v3[37] = result;
  }

  return result;
}

CFStringRef IODictionaryCopyBSDName(const __CFDictionary *a1)
{
  CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"BSD Name");
  if (Value) {
    return IOCopyCFStringValue(Value);
  }
  BOOL v4 = CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
  CFTypeRef v5 = CFDictionaryGetValue(a1, @"IOInterfaceUnit");
  CFTypeID TypeID = CFStringGetTypeID();
  if (v4 && CFGetTypeID(v4) == TypeID && (CFTypeID v7 = CFNumberGetTypeID(), v5) && CFGetTypeID(v5) == v7) {
    return CFStringCreateWithFormat(0LL, 0LL, @"%@%@", v4, v5);
  }
  else {
    return 0LL;
  }
}

void merge_override(uint64_t a1, io_registry_entry_t a2, const void *a3)
{
  uint64_t v6 = CFStringCreateWithFormat(0LL, 0LL, @"Device%@Overrides", a3);
  CFTypeRef v7 = IORegistryEntrySearchCFProperty(a2, "IOService", v6, 0LL, 3u);
  CFRelease(v6);
  if (v7)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v7) == TypeID)
    {
      CFMutableArrayRef Mutable = *(__CFDictionary **)(a1 + 224);
      if (!Mutable)
      {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        *(void *)(a1 + 224) = Mutable;
      }

      CFDictionarySetValue(Mutable, a3, v7);
    }

    CFRelease(v7);
  }

CFStringRef IOCopyCFStringValue(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID) {
      return CFStringCreateCopy(0LL, a1);
    }
    CFTypeID v4 = CFDataGetTypeID();
    if (CFGetTypeID(a1) == v4)
    {
      BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)a1);
      return CFStringCreateWithCString(0LL, BytePtr, 0x8000100u);
    }
  }

  else
  {
    CFDataGetTypeID();
  }

  return 0LL;
}

CFMutableStringRef pci_slot(io_registry_entry_t a1, CFTypeRef *a2)
{
  kern_return_t ParentEntry;
  kern_return_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  os_log_s *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _DWORD *v22;
  uint64_t v24;
  CFTypeRef v25;
  io_registry_entry_t parent;
  uint64_t v27;
  CFRange v28;
  unsigned int v27 = *MEMORY[0x1895F89C0];
  if (a2) {
    *a2 = 0LL;
  }
  CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(a1, @"AAPL,slot-name", 0LL, 0);
  if (CFProperty)
  {
    CFTypeRef v5 = CFProperty;
    CFMutableStringRef Mutable = CFStringCreateMutable(0LL, 0LL);
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(v5) == TypeID)
    {
      if (a2) {
        *a2 = CFStringCreateCopy(0LL, v5);
      }
      CFStringAppend(Mutable, v5);
    }

    else
    {
      CFTypeID v8 = CFDataGetTypeID();
      if (CFGetTypeID(v5) == v8)
      {
        if (a2) {
          *a2 = CFDataCreateCopy(0LL, (CFDataRef)v5);
        }
        BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)v5);
        CFStringAppendCString(Mutable, BytePtr, 0x8000100u);
      }
    }

    for (uint64_t i = 0LL; i != 3; ++i)
    {
      uint64_t v11 = slot_prefixes[i];
      CFIndex Length = CFStringGetLength(v11);
      if (CFStringGetLength(Mutable) > Length)
      {
        v28.CFIndex location = 0LL;
        v28.length = Length;
        CFStringFindAndReplace(Mutable, v11, &stru_189B68690, v28, 9uLL);
      }
    }

    CFStringTrimWhitespace(Mutable);
    CFRelease(v5);
  }

  else
  {
    CFMutableStringRef Mutable = 0LL;
  }

  ParentEntry = IORegistryEntryGetParentEntry(a1, "IOService", &parent);
  if (ParentEntry != -536870208)
  {
    uint64_t v14 = ParentEntry;
    if (!ParentEntry)
    {
      unsigned int v25 = 0LL;
      CFTypeID v15 = pci_slot(parent, &v25);
      if (v15)
      {
        uint64_t v16 = v15;
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (a2)
        {
          if (*a2) {
            CFRelease(*a2);
          }
          uint64_t v17 = v25;
          *a2 = v25;
          if (!v17) {
            goto LABEL_33;
          }
          CFRetain(v17);
        }
      }

      else
      {
        uint64_t v16 = (uint64_t)Mutable;
      }

      if (v25) {
        CFRelease(v25);
      }
LABEL_33:
      IOObjectRelease(parent);
      return (CFMutableStringRef)v16;
    }

    uint64_t v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      uint64_t v21 = (char *)&v24 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      CFIndex v22 = (_DWORD *)_os_log_pack_fill();
      const void *v22 = 67109120;
      v22[1] = v14;
      __SC_log_send(6, (uint64_t)v18, v19, v21);
    }
  }

  return Mutable;
}

CFStringRef pci_port(void *a1, int a2, const void *a3)
{
  kern_return_t MatchingServices;
  kern_return_t v10;
  os_log_s *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  __CFArray *Mutable;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const void *Value;
  const void *v21;
  CFTypeID TypeID;
  CFStringRef v23;
  CFStringRef v24;
  io_object_t v25;
  io_registry_entry_t v26;
  uint64_t Count;
  CFIndex v28;
  CFIndex FirstIndexOfValue;
  CFStringRef v30;
  int v31;
  os_log_s *v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  _DWORD *v37;
  _BYTE v39[4];
  int valuePtr;
  CFMutableDictionaryRef properties;
  io_iterator_t v42;
  io_iterator_t existing;
  void *values[2];
  void *keys[3];
  CFRange v46;
  CFRange v47;
  keys[2] = *(void **)MEMORY[0x1895F89C0];
  existing = 0;
  keys[0] = @"AAPL,slot-name";
  values[0] = a1;
  CFTypeRef v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
  uint64_t v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
  CFDictionaryRef v7 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  keys[0] = @"IOProviderClass";
  keys[1] = @"IOPropertyMatch";
  values[0] = @"IOPCIDevice";
  values[1] = v7;
  CFTypeID v8 = CFDictionaryCreate(0LL, (const void **)keys, (const void **)values, 2LL, v5, v6);
  CFRelease(v7);
  MatchingServices = IOServiceGetMatchingServices(masterPort, v8, &existing);
  if (MatchingServices)
  {
    uint64_t v10 = MatchingServices;
    uint64_t v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
    {
      CFTypeID v13 = _os_log_pack_size();
      uint64_t v14 = &v39[-((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      CFTypeID v15 = (_DWORD *)_os_log_pack_fill();
      os_log_s *v15 = 67109120;
      v15[1] = v10;
      __SC_log_send(6, (uint64_t)v11, v12, v14);
    }

    return 0LL;
  }

  CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  uint64_t v17 = IOIteratorNext(existing);
  if ((_DWORD)v17)
  {
    uint64_t v18 = v17;
    while (1)
    {
      CFTypeID v42 = 0;
      uint64_t v19 = MEMORY[0x186E08FF0](v18, "IOService", 1LL, &v42);
      if (v19) {
        break;
      }
      while (1)
      {
        unsigned int v25 = IOIteratorNext(v42);
        uint64_t v26 = v25;
        if (!v25) {
          break;
        }
        if (IOObjectConformsTo(v25, "IONetworkInterface"))
        {
          properties = 0LL;
          IORegistryEntryCreateCFProperties(v26, &properties, 0LL, 0);
          if (properties)
          {
            int valuePtr = a2;
            CFDictionaryRef Value = CFDictionaryGetValue(properties, @"IOInterfaceType");
            if (Value)
            {
              uint64_t v21 = Value;
              CFTypeID TypeID = CFNumberGetTypeID();
              if (CFGetTypeID(v21) != TypeID || !CFNumberGetValue((CFNumberRef)v21, kCFNumberIntType, &valuePtr)) {
                int valuePtr = a2;
              }
            }

            if (valuePtr == a2)
            {
              CFTypeID v23 = IODictionaryCopyBSDName(properties);
              if (v23)
              {
                unsigned int v24 = v23;
                CFArrayAppendValue(Mutable, v23);
                CFRelease(v24);
              }
            }

            CFRelease(properties);
          }
        }

        IOObjectRelease(v26);
      }

      IOObjectRelease(v42);
      IOObjectRelease(v18);
      uint64_t v18 = IOIteratorNext(existing);
      if (!(_DWORD)v18) {
        goto LABEL_21;
      }
    }

    CFIndex v31 = v19;
    os_log_t v32 = __log_SCNetworkConfiguration();
    int v33 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v32, (os_log_type_t)v33))
    {
      CFStringRef v35 = _os_log_pack_size();
      int v36 = &v39[-((MEMORY[0x1895F8858](v35) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      CFStringRef v37 = (_DWORD *)_os_log_pack_fill();
      *CFStringRef v37 = 67109120;
      v37[1] = v31;
      __SC_log_send(6, (uint64_t)v32, v33, v36);
    }

    CFRelease(Mutable);
    return 0LL;
  }

CFComparisonResult compare_bsdNames(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0LL);
}

uint64_t isBluetoothBuiltin(_BYTE *a1)
{
  kern_return_t MatchingServices;
  io_iterator_t v5;
  BOOL v6;
  os_log_s *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  uint64_t v12;
  io_registry_entry_t v13;
  CFNumberRef CFProperty;
  CFNumberRef v15;
  CFTypeID TypeID;
  BOOL v17;
  int valuePtr;
  io_iterator_t existing;
  uint64_t v21;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  existing = 0;
  mach_port_t v2 = masterPort;
  CFTypeID v3 = IOServiceMatching("IOBluetoothHCIController");
  MatchingServices = IOServiceGetMatchingServices(v2, v3, &existing);
  CFTypeRef v5 = existing;
  if (MatchingServices) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = existing == 0;
  }
  if (v6)
  {
    if (MatchingServices)
    {
      CFDictionaryRef v7 = __log_SCNetworkConfiguration();
      CFTypeID v8 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v7, (os_log_type_t)v8))
      {
        CFMutableStringRef v9 = _os_log_pack_size();
        uint64_t v10 = (char *)&valuePtr - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v11 = (_DWORD *)_os_log_pack_fill();
        *uint64_t v11 = 67109120;
        v11[1] = MatchingServices;
        __SC_log_send(6, (uint64_t)v7, v8, v10);
      }
    }

    uint64_t v12 = 0LL;
    *a1 = 0;
  }

  else
  {
    *a1 = 1;
    CFTypeID v13 = IOIteratorNext(v5);
    IOObjectRelease(existing);
    if (v13)
    {
      CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(v13, @"idVendor", 0LL, 0);
      if (CFProperty)
      {
        CFTypeID v15 = CFProperty;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (CFGetTypeID(v15) == TypeID)
        {
          if (CFNumberGetValue(v15, kCFNumberIntType, &valuePtr)) {
            uint64_t v17 = valuePtr == 1452;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v12 = v17;
        }

        else
        {
          uint64_t v12 = 0LL;
        }

        CFRelease(v15);
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      IOObjectRelease(v13);
    }

    else
    {
      return 0LL;
    }
  }

  return v12;
}

void set_connection_script(uint64_t a1, const void *a2)
{
  CFMutableStringRef Mutable = *(const __CFDictionary **)(a1 + 224);
  if (!Mutable)
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    *(void *)(a1 + 224) = Mutable;
  }

  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Mutable, @"Modem");
  if (Value) {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  }
  CFDictionaryRef v7 = MutableCopy;
  if (a2) {
    CFDictionarySetValue(MutableCopy, @"ConnectionScript", a2);
  }
  else {
    CFDictionaryRemoveValue(MutableCopy, @"ConnectionScript");
  }
  CFIndex Count = CFDictionaryGetCount(v7);
  CFMutableStringRef v9 = *(__CFDictionary **)(a1 + 224);
  if (Count < 1) {
    CFDictionaryRemoveValue(v9, @"Modem");
  }
  else {
    CFDictionarySetValue(v9, @"Modem", v7);
  }
  CFRelease(v7);
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 224)))
  {
    CFRelease(*(CFTypeRef *)(a1 + 224));
    *(void *)(a1 + 224) = 0LL;
  }

uint64_t is_valid_connection_script(const __CFString *a1)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  _SC_cfstring_to_cstring(a1, v26, 1024LL, 0x8000100u);
  uint64_t started = sysdir_start_search_path_enumeration( SYSDIR_DIRECTORY_LIBRARY,  SYSDIR_DOMAIN_MASK_SYSTEM|SYSDIR_DOMAIN_MASK_LOCAL);
  uint64_t result = MEMORY[0x186E09D04](started, v25);
  if ((_DWORD)result)
  {
    uint64_t v4 = result;
    *(void *)&__int128 v3 = 136315138LL;
    __int128 v23 = v3;
    do
    {
      if (v26[0] == 47) {
        v25[0] = 0;
      }
      else {
        __strlcat_chk();
      }
      __strlcat_chk();
      if (stat(v25, &v24))
      {
        if (*__error() != 2)
        {
          CFTypeRef v5 = __log_SCNetworkConfiguration();
          uint64_t v6 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v5, (os_log_type_t)v6))
          {
            uint64_t v7 = _os_log_pack_size();
            CFTypeID v8 = (char *)&v23 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v9 = _os_log_pack_fill();
            uint64_t v10 = __error();
            uint64_t v11 = strerror(*v10);
            *(_DWORD *)uint64_t v9 = v23;
            *(void *)(v9 + 4) = v11;
            uint64_t v12 = (uint64_t)v5;
            uint64_t v13 = v6;
            uint64_t v14 = v8;
LABEL_17:
            __SC_log_send(6, v12, v13, v14);
            goto LABEL_19;
          }

          goto LABEL_19;
        }
      }

      else if ((v24.st_mode & 0xF000) == 0x8000)
      {
        return 1LL;
      }

      size_t v15 = strlen(v25);
      if (v15 < 5 || !strstr(&v25[v15 - 6], ".ccl"))
      {
        __strlcat_chk();
        if (stat(v25, &v24))
        {
          if (*__error() == 2) {
            goto LABEL_19;
          }
          uint64_t v16 = __log_SCNetworkConfiguration();
          uint64_t v17 = _SC_syslog_os_log_mapping(6);
          if (!__SC_log_enabled(6, v16, (os_log_type_t)v17)) {
            goto LABEL_19;
          }
          uint64_t v18 = _os_log_pack_size();
          uint64_t v19 = (char *)&v23 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          uint64_t v21 = __error();
          CFIndex v22 = strerror(*v21);
          *(_DWORD *)uint64_t v20 = v23;
          *(void *)(v20 + 4) = v22;
          uint64_t v12 = (uint64_t)v16;
          uint64_t v13 = v17;
          uint64_t v14 = v19;
          goto LABEL_17;
        }
      }

      if ((v24.st_mode & 0xF000) == 0x4000) {
        return 1LL;
      }
LABEL_19:
      uint64_t result = MEMORY[0x186E09D04](v4, v25);
      uint64_t v4 = result;
    }

    while ((_DWORD)result);
  }

  return result;
}

const __SCNetworkInterface *findInterface(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0LL;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, v6);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (BSDName)
    {
      if (CFEqual(BSDName, a2)) {
        break;
      }
    }

    if (v5 == ++v6) {
      return 0LL;
    }
  }

  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

void localizeNumberString(CFStringRef *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  CFMutableStringRef v1 = *a1;
  if (*a1)
  {
    CFIndex Length = CFStringGetLength(*a1);
    rangep.CFIndex location = 0LL;
    rangep.length = Length;
    uint64_t v4 = CFLocaleCopyCurrent();
    CFIndex v5 = CFNumberFormatterCreate(0LL, v4, kCFNumberFormatterNoStyle);
    CFIndex v6 = CFNumberFormatterCreateNumberFromString(0LL, v5, v1, &rangep, 1uLL);
    if (v6 && (CFIndex v7 = rangep.length, v7 == CFStringGetLength(v1))) {
      StringWithNumber = CFNumberFormatterCreateStringWithNumber(0LL, v5, v6);
    }
    else {
      StringWithNumber = (const __CFString *)CFRetain(v1);
    }
    uint64_t v9 = StringWithNumber;
    if (v4) {
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    CFRelease(v1);
    *a1 = v9;
  }

__CFArray *copyPerInterfaceConfigurationPaths(uint64_t a1, uint64_t a2)
{
  uint64_t Private = __SCNetworkServiceCreatePrivate( 0LL,  *(const void **)(a1 + 80),  *(const __CFString **)(a1 + 96),  (const void *)a1);
  CFIndex v5 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 80));
  if (v5)
  {
    CFIndex v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      CFMutableStringRef Mutable = 0LL;
    }

    else
    {
      CFIndex v8 = Count;
      CFMutableStringRef Mutable = 0LL;
      CFIndex v10 = 0LL;
      uint64_t v11 = (const CFArrayCallBacks *)MEMORY[0x189605228];
      do
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v6, v10);
        uint64_t v13 = SCNetworkSetCopyServices(ValueAtIndex);
        v17.length = CFArrayGetCount(v13);
        v17.CFIndex location = 0LL;
        if (CFArrayContainsValue(v13, v17, Private))
        {
          CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
          CFStringRef SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity( 0LL,  (uint64_t)SetID,  *(void *)(a1 + 112),  a2);
          if (!Mutable) {
            CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, v11);
          }
          CFArrayAppendValue(Mutable, SetNetworkInterfaceEntity);
          CFRelease(SetNetworkInterfaceEntity);
        }

        CFRelease(v13);
        ++v10;
      }

      while (v8 != v10);
    }

    CFRelease(Private);
    CFRelease(v6);
  }

  else
  {
    CFRelease(Private);
    return 0LL;
  }

  return Mutable;
}

__CFDictionary *copyIORegistryProperties(io_registry_entry_t a1, CFStringRef *a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if (a3 >= 1)
  {
    do
    {
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a1, *a2, 0LL, 0);
      if (CFProperty)
      {
        CFIndex v8 = CFProperty;
        CFDictionaryAddValue(Mutable, *a2, CFProperty);
        CFRelease(v8);
      }

      ++a2;
      --a3;
    }

    while (a3);
  }

  return Mutable;
}

CFStringRef __SC_IORegistryEntryCopyPath(uint64_t a1)
{
  io_registry_entry_t v1 = a1;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v2 = MEMORY[0x186E09020](a1, "IOService", cStr);
  if (v2 != -536870206)
  {
    if (!v2) {
      return CFStringCreateWithCString(0LL, cStr, 0x8000100u);
    }
    return 0LL;
  }

  if (IORegistryEntryGetParentEntry(v1, "IOService", &parent)) {
    return 0LL;
  }
  uint64_t v5 = __SC_IORegistryEntryCopyPath(parent);
  if (v5)
  {
    CFIndex v6 = (const void *)v5;
    if (IORegistryEntryGetNameInPlane(v1, "IOService", name))
    {
      CFStringRef v3 = 0LL;
    }

    else
    {
      if (IORegistryEntryGetLocationInPlane(v1, "IOService", location)) {
        CFStringRef v7 = CFStringCreateWithFormat(0LL, 0LL, @"%@/%s", v6, name);
      }
      else {
        CFStringRef v7 = CFStringCreateWithFormat(0LL, 0LL, @"%@/%s@%s", v6, name, location);
      }
      CFStringRef v3 = v7;
    }

    CFRelease(v6);
  }

  else
  {
    CFStringRef v3 = 0LL;
  }

  IOObjectRelease(parent);
  return v3;
}

uint64_t findPerInterfaceConfiguration(uint64_t a1)
{
  uint64_t v1 = 0LL;
  int v2 = *(const void **)(a1 + 16);
  for (uint64_t i = (CFTypeRef **)configurations; !CFEqual(v2, **i); i += 5)
  {
    if (++v1 == 19) {
      return -1LL;
    }
  }

  if (((0x5BF13uLL >> v1) & 1) != 0) {
    return -1LL;
  }
  else {
    return v1;
  }
}

void __addExtendedConfigurationType(const void *a1, uint64_t a2, uint64_t a3)
{
  if (!CFEqual(a1, *(CFTypeRef *)a3))
  {
    uint64_t v5 = *(const __CFArray **)(a3 + 8);
    v6.length = CFArrayGetCount(v5);
    v6.io_name_t location = 0LL;
    if (!CFArrayContainsValue(v5, v6, a1)) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 8), a1);
    }
  }

uint64_t _SCDynamicStoreCacheIsActive(unsigned __int8 *a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID) {
    return a1[200];
  }
  _SCErrorSet(2001);
  return 0LL;
}

uint64_t _SCDynamicStoreCacheOpen(uint64_t a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (a1 && CFGetTypeID((CFTypeRef)a1) == TypeID)
  {
    __SCDynamicStoreCacheRelease((void *)a1);
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 200) = 1;
  }

  else
  {
    _SCErrorSet(2001);
    return 0LL;
  }

  return result;
}

void __SCDynamicStoreCacheRelease(void *a1)
{
  int v2 = (const void *)a1[26];
  if (v2)
  {
    CFRelease(v2);
    a1[26] = 0LL;
  }

  CFStringRef v3 = (const void *)a1[27];
  if (v3)
  {
    CFRelease(v3);
    a1[27] = 0LL;
  }

  uint64_t v4 = (const void *)a1[28];
  if (v4)
  {
    CFRelease(v4);
    a1[28] = 0LL;
  }

  uint64_t v5 = (const void *)a1[29];
  if (v5)
  {
    CFRelease(v5);
    a1[29] = 0LL;
  }

uint64_t _SCDynamicStoreCacheCommitChanges(uint64_t a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!a1 || CFGetTypeID((CFTypeRef)a1) != TypeID)
  {
    int v6 = 2001;
LABEL_9:
    _SCErrorSet(v6);
    return 0LL;
  }

  if (!*(_BYTE *)(a1 + 200))
  {
    int v6 = 1001;
    goto LABEL_9;
  }

  CFStringRef v3 = *(const __CFArray **)(a1 + 224);
  if (*(_OWORD *)(a1 + 216) != 0LL)
  {
LABEL_7:
    uint64_t v4 = SCDynamicStoreSetMultiple((SCDynamicStoreRef)a1, *(CFDictionaryRef *)(a1 + 216), v3, *(CFArrayRef *)(a1 + 232));
    __SCDynamicStoreCacheRelease((void *)a1);
    return v4;
  }

  if (*(void *)(a1 + 232))
  {
    CFStringRef v3 = 0LL;
    goto LABEL_7;
  }

  return 1LL;
}

uint64_t _SCDynamicStoreCacheClose(uint64_t a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (a1 && CFGetTypeID((CFTypeRef)a1) == TypeID)
  {
    if (*(_BYTE *)(a1 + 200))
    {
      __SCDynamicStoreCacheRelease((void *)a1);
      *(_BYTE *)(a1 + 200) = 0;
      return 1LL;
    }

    int v4 = 1001;
  }

  else
  {
    int v4 = 2001;
  }

  _SCErrorSet(v4);
  return 0LL;
}

uint64_t __SCNetworkProtocolCreatePrivate(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (__SCNetworkProtocolInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0LL, a2);
    *(void *)(Instance + 24) = CFRetain(a3);
  }

  return Instance;
}

BOOL __SCNetworkProtocolIsValidType(const __CFString *cf1)
{
  uint64_t v2 = 0LL;
  while (!CFEqual(cf1, *__SCNetworkProtocolIsValidType_valid_types[v2]))
  {
    if (++v2 == 4)
    {
      v4.length = CFStringGetLength(cf1);
      v4.io_name_t location = 0LL;
      return CFStringFindWithOptions(cf1, @".", v4, 0LL, 0LL) != 0;
    }
  }

  return 1LL;
}

CFComparisonResult _SCNetworkProtocolCompare(const __SCNetworkProtocol *a1, const __SCNetworkProtocol *a2)
{
  CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(a1);
  CFRange v4 = SCNetworkProtocolGetProtocolType(a2);
  return CFStringCompare(ProtocolType, v4, 0LL);
}

CFStringRef SCNetworkProtocolGetProtocolType(SCNetworkProtocolRef protocol)
{
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) == v2) {
    return (CFStringRef)*((void *)protocol + 2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

CFTypeID SCNetworkProtocolGetTypeID(void)
{
  if (__SCNetworkProtocolInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
  }
  return __kSCNetworkProtocolTypeID;
}

CFDictionaryRef SCNetworkProtocolGetConfiguration(SCNetworkProtocolRef protocol)
{
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) == v2)
  {
    uint64_t v3 = *((void *)protocol + 3);
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *(void *)(v3 + 16),  *((void *)protocol + 2));
    CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(v3 + 32), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    return Value;
  }

Boolean SCNetworkProtocolGetEnabled(SCNetworkProtocolRef protocol)
{
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) == v2)
  {
    uint64_t v3 = *((void *)protocol + 3);
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *(void *)(v3 + 16),  *((void *)protocol + 2));
    Prefsint Enabled = __getPrefsEnabled(*(const __SCPreferences **)(v3 + 32), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    return PrefsEnabled;
  }

Boolean SCNetworkProtocolSetConfiguration(SCNetworkProtocolRef protocol, CFDictionaryRef config)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol)
    {
LABEL_14:
      _SCErrorSet(1002);
      LOBYTE(v7) = 0;
      return v7;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_14;
    }
  }

  uint64_t v4 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) != v4) {
    goto LABEL_14;
  }
  uint64_t v5 = *((void *)protocol + 3);
  if (!__SCNetworkServiceExists(v5))
  {
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v14, (os_log_type_t)v15))
    {
      uint64_t v16 = _os_log_pack_size();
      CFRange v17 = (char *)block - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      uint64_t v19 = *((void *)protocol + 2);
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v18 + 4) = v19;
      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v18 + 14) = v5;
      __SC_log_send(3, (uint64_t)v14, v15, v17);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_2;
    block[3] = &__block_descriptor_tmp_27_0;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkProtocolSetConfiguration() w/removed service";
    if (_SC_crash_once_once_2 != -1) {
      dispatch_once(&_SC_crash_once_once_2, block);
    }
    goto LABEL_14;
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *(void *)(*((void *)protocol + 3) + 16LL),  *((void *)protocol + 2));
  int v7 = __SCNetworkConfigurationSetValue(*(SCPreferencesRef *)(v5 + 32), NetworkServiceEntity, config, 1);
  CFRelease(NetworkServiceEntity);
  if (v7)
  {
    CFIndex v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v11 = (char *)block - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      CFDictionaryRef v13 = (CFDictionaryRef)@"NULL";
      if (config) {
        CFDictionaryRef v13 = config;
      }
      *(_DWORD *)uint64_t v12 = 138412546;
      *(void *)(v12 + 4) = protocol;
      *(_WORD *)(v12 + 12) = 2112;
      *(void *)(v12 + 14) = v13;
      __SC_log_send(7, (uint64_t)v8, v9, v11);
    }
  }

  return v7;
}

Boolean SCNetworkProtocolSetEnabled(SCNetworkProtocolRef protocol, Boolean enabled)
{
  int v2 = enabled;
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol)
    {
LABEL_14:
      _SCErrorSet(1002);
      LOBYTE(v7) = 0;
      return v7;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_14;
    }
  }

  uint64_t v4 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) != v4) {
    goto LABEL_14;
  }
  uint64_t v5 = *((void *)protocol + 3);
  if (!__SCNetworkServiceExists(v5))
  {
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v14, (os_log_type_t)v15))
    {
      uint64_t v16 = _os_log_pack_size();
      CFRange v17 = (char *)block - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      uint64_t v19 = *((void *)protocol + 2);
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v18 + 4) = v19;
      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v18 + 14) = v5;
      __SC_log_send(3, (uint64_t)v14, v15, v17);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_2;
    block[3] = &__block_descriptor_tmp_27_0;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkProtocolSetEnabled() w/removed service";
    if (_SC_crash_once_once_2 != -1) {
      dispatch_once(&_SC_crash_once_once_2, block);
    }
    goto LABEL_14;
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *(void *)(*((void *)protocol + 3) + 16LL),  *((void *)protocol + 2));
  int v7 = __setPrefsEnabled(*(const __SCPreferences **)(v5 + 32), NetworkServiceEntity, v2);
  CFRelease(NetworkServiceEntity);
  if (v7)
  {
    CFIndex v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v11 = (char *)block - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      CFDictionaryRef v13 = "Enabled";
      if (!v2) {
        CFDictionaryRef v13 = "Disabled";
      }
      *(_DWORD *)uint64_t v12 = 138412546;
      *(void *)(v12 + 4) = protocol;
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v13;
      __SC_log_send(7, (uint64_t)v8, v9, v11);
    }
  }

  return v7;
}

void __SCNetworkProtocolDeallocate(uint64_t a1)
{
}

uint64_t __SCNetworkProtocolEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t v5 = *(const void **)(a1 + 24);
  int v6 = *(const void **)(a2 + 24);
  return v5 == v6 || v5 && v6 && CFEqual(v5, v6);
}

CFHashCode __SCNetworkProtocolHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

__CFString *__SCNetworkProtocolCopyDescription(void *a1)
{
  int v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCNetworkProtocol %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"id = %@", a1[2]);
  CFStringAppendFormat(Mutable, 0LL, @", service = %p", a1[3]);
  CFStringAppendFormat(Mutable, 0LL, @", prefs = %p", *(void *)(a1[3] + 32LL));
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

void *__SCNetworkServiceCreatePrivate(uint64_t a1, const void *a2, const __CFString *a3, const void *a4)
{
  if (__SCNetworkServiceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
  }
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0LL;
    }
    Instance[4] = v8;
    Instance[2] = CFStringCreateCopy(0LL, a3);
    if (a4) {
      CFTypeRef v9 = CFRetain(a4);
    }
    else {
      CFTypeRef v9 = 0LL;
    }
    Instance[3] = v9;
  }

  return Instance;
}

CFComparisonResult _SCNetworkServiceCompare( const __SCNetworkService *a1, const __SCNetworkService *a2, const __CFArray *a3)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(a1);
  int v6 = SCNetworkServiceGetServiceID(a2);
  if (!a3) {
    return CFStringCompare(ServiceID, v6, 0LL);
  }
  CFIndex Count = CFArrayGetCount(a3);
  v13.io_name_t location = 0LL;
  v13.length = Count;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(a3, v13, ServiceID);
  v14.io_name_t location = 0LL;
  v14.length = Count;
  CFIndex v9 = CFArrayGetFirstIndexOfValue(a3, v14, v6);
  if (FirstIndexOfValue > v9)
  {
    BOOL v10 = v9 == -1;
    uint64_t v11 = -1LL;
    goto LABEL_6;
  }

  if (FirstIndexOfValue >= v9) {
    return CFStringCompare(ServiceID, v6, 0LL);
  }
  BOOL v10 = FirstIndexOfValue == -1;
  uint64_t v11 = 1LL;
LABEL_6:
  if (v10) {
    return v11;
  }
  else {
    return -v11;
  }
}

CFStringRef SCNetworkServiceGetServiceID(SCNetworkServiceRef service)
{
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) == v2) {
    return (CFStringRef)*((void *)service + 2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

__CFArray *__SCNetworkServiceCopyAllEnabled(const __SCPreferences *a1)
{
  uint64_t v1 = SCNetworkSetCopyAll(a1);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    CFMutableStringRef Mutable = 0LL;
    CFIndex v6 = 0LL;
    int v7 = (const CFArrayCallBacks *)MEMORY[0x189605228];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v2, v6);
      CFIndex v9 = SCNetworkSetCopyServices(ValueAtIndex);
      if (v9)
      {
        BOOL v10 = v9;
        CFIndex v11 = CFArrayGetCount(v9);
        if (v11 >= 1)
        {
          CFIndex v12 = v11;
          for (CFIndex i = 0LL; v12 != i; ++i)
          {
            CFRange v14 = CFArrayGetValueAtIndex(v10, i);
            if (SCNetworkServiceGetEnabled((SCNetworkServiceRef)v14))
            {
              if (!Mutable)
              {
                CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, v7);
LABEL_12:
                CFArrayAppendValue(Mutable, v14);
                continue;
              }

              v16.length = CFArrayGetCount(Mutable);
              v16.io_name_t location = 0LL;
              if (!CFArrayContainsValue(Mutable, v16, v14)) {
                goto LABEL_12;
              }
            }
          }
        }

        CFRelease(v10);
      }

      if (++v6 == v4) {
        goto LABEL_19;
      }
    }
  }

  CFMutableStringRef Mutable = 0LL;
LABEL_19:
  CFRelease(v2);
  return Mutable;
}

Boolean SCNetworkServiceGetEnabled(SCNetworkServiceRef service)
{
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_7;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_7;
    }
  }

  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) == v2 && *((void *)service + 4))
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)service + 2), 0LL);
    Prefsint Enabled = __getPrefsEnabled(*((const __SCPreferences **)service + 4), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    return PrefsEnabled;
  }

uint64_t __SCNetworkServiceExistsForInterface(const void *a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0LL;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex((CFArrayRef)a1, v7);
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
    if (Interface) {
      break;
    }
LABEL_9:
    uint64_t result = 0LL;
    if (++v7 == v6) {
      return result;
    }
  }

  BOOL v10 = Interface;
  while (!CFEqual(a2, v10))
  {
    BOOL v10 = SCNetworkInterfaceGetInterface(v10);
    if (!v10) {
      goto LABEL_9;
    }
  }

  return 1LL;
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_11:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!service) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_11;
  }
  if (!*((void *)service + 3))
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *((void *)service + 2),  (uint64_t)@"Interface");
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID) {
        *((void *)service + 3) = _SCNetworkInterfaceCreateWithEntity(0LL, Value, (uint64_t)service);
      }
    }
  }

  return (SCNetworkInterfaceRef)*((void *)service + 3);
}

Boolean SCNetworkServiceAddProtocolType(SCNetworkServiceRef service, CFStringRef protocolType)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_15:
    _SCErrorSet(1002);
    LOBYTE(v6) = 0;
    return v6;
  }

  if (!service) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4) || !__SCNetworkProtocolIsValidType(protocolType)) {
    goto LABEL_15;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    CFIndex v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      BOOL v10 = (char *)block - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 138412546;
      *(void *)(v11 + 4) = service;
      *(_WORD *)(v11 + 12) = 2112;
      *(void *)(v11 + 14) = protocolType;
      __SC_log_send(3, (uint64_t)v7, v8, v10);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_40;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkServiceAddProtocolType() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_15;
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *((void *)service + 2),  (uint64_t)protocolType);
  if (!SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity))
  {
    CFRange v13 = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    int v14 = SCPreferencesPathSetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity, v13);
    CFRelease(v13);
    if (!v14) {
      goto LABEL_9;
    }
    SCNetworkProtocolRef v15 = SCNetworkServiceCopyProtocol(service, protocolType);
    if (!v15) {
      SCNetworkServiceAddProtocolType_cold_1();
    }
    CFRange v16 = v15;
    uint64_t v17 = *((void *)service + 3);
    if (v17)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(*((SCNetworkInterfaceRef *)service + 3));
      SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(*((SCNetworkInterfaceRef *)service + 3));
      if (Interface)
      {
        uint64_t v20 = Interface;
        uint64_t v21 = SCNetworkInterfaceGetInterfaceType(Interface);
        CFIndex v22 = (const __CFDictionary *)__copyProtocolTemplate(InterfaceType, v21, protocolType);
        if (v22)
        {
          __int128 v23 = v22;
          do
          {
            uint64_t v17 = (uint64_t)v20;
            uint64_t v20 = SCNetworkInterfaceGetInterface(v20);
          }

          while (v20);
LABEL_26:
          TemplateOverrides = (const __CFDictionary *)__SCNetworkInterfaceGetTemplateOverrides(v17, protocolType);
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (TemplateOverrides && CFGetTypeID(TemplateOverrides) == TypeID)
          {
            CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v23);
            CFDictionaryApplyFunction(TemplateOverrides, (CFDictionaryApplierFunction)mergeDict, MutableCopy);
            CFRelease(v23);
            __int128 v23 = MutableCopy;
          }

          if (v23) {
            goto LABEL_31;
          }
        }
      }

      else
      {
        __int128 v23 = (const __CFDictionary *)__copyProtocolTemplate(InterfaceType, 0LL, protocolType);
        if (v23) {
          goto LABEL_26;
        }
      }
    }

    __int128 v23 = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    if (!v23) {
      SCNetworkServiceAddProtocolType_cold_2();
    }
LABEL_31:
    if (SCNetworkProtocolSetConfiguration(v16, v23))
    {
      Boolean v27 = CFDictionaryContainsKey(v23, @"__INACTIVE__") == 0;
      int v6 = SCNetworkProtocolSetEnabled(v16, v27);
    }

    else
    {
      int v6 = 0;
    }

    CFRelease(v23);
    CFRelease(v16);
    if (v6)
    {
      CFStringRef v28 = _SC_LOG_DEFAULT();
      uint64_t v29 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v28, (os_log_type_t)v29))
      {
        uint64_t v30 = _os_log_pack_size();
        CFIndex v31 = (char *)block - ((MEMORY[0x1895F8858](v30) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v32 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v32 = 138412546;
        *(void *)(v32 + 4) = service;
        *(_WORD *)(v32 + 12) = 2112;
        *(void *)(v32 + 14) = protocolType;
        __SC_log_send(7, (uint64_t)v28, v29, v31);
      }
    }

    goto LABEL_10;
  }

  _SCErrorSet(1005);
LABEL_9:
  LOBYTE(v6) = 0;
LABEL_10:
  CFRelease(NetworkServiceEntity);
  return v6;
}

BOOL __SCNetworkServiceExists(uint64_t a1)
{
  if (*(void *)(a1 + 32)
    && (NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *(void *)(a1 + 16),  (uint64_t)@"Interface"),  Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 32), NetworkServiceEntity),  CFRelease(NetworkServiceEntity),  CFTypeID TypeID = CFDictionaryGetTypeID(),  Value))
  {
    return CFGetTypeID(Value) == TypeID;
  }

  else
  {
    return 0LL;
  }

SCNetworkProtocolRef SCNetworkServiceCopyProtocol(SCNetworkServiceRef service, CFStringRef protocolType)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_18:
    int v12 = 1002;
    goto LABEL_19;
  }

  if (!service) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4) {
    goto LABEL_18;
  }
  if (!*((void *)service + 4)) {
    goto LABEL_18;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!protocolType || CFGetTypeID(protocolType) != TypeID) {
    goto LABEL_18;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)service + 2), 0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID v8 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v8)
  {
    int v12 = 1001;
LABEL_19:
    _SCErrorSet(v12);
    return 0LL;
  }

  uint64_t v9 = _copyInterfaceEntityTypes(Value);
  if (CFSetContainsValue(v9, protocolType))
  {
    int v10 = 1002;
  }

  else
  {
    if (CFDictionaryContainsKey(Value, protocolType))
    {
      uint64_t Private = (const __SCNetworkProtocol *)__SCNetworkProtocolCreatePrivate(0LL, protocolType, service);
      goto LABEL_15;
    }

    int v10 = 1004;
  }

  _SCErrorSet(v10);
  uint64_t Private = 0LL;
LABEL_15:
  CFRelease(v9);
  return Private;
}

CFArrayRef SCNetworkServiceCopyAll(SCPreferencesRef prefs)
{
  v43[64] = *MEMORY[0x1895F89C0];
  NetworkServices = SCPreferencesPathKeyCreateNetworkServices(0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, NetworkServices);
  CFRelease(NetworkServices);
  if (!Value) {
    return CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFIndex Count = CFDictionaryGetCount(Value);
  if (Count < 1) {
    return Mutable;
  }
  CFIndex v7 = Count;
  SCPreferencesRef v37 = prefs;
  CFMutableArrayRef v38 = Mutable;
  if ((unint64_t)Count < 0x41)
  {
    CFTypeID v8 = (const void **)v43;
    uint64_t v9 = (const void **)&v42;
  }

  else
  {
    CFTypeID v8 = (const void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
    uint64_t v9 = (const void **)MEMORY[0x186E08750](0LL, 8 * v7, 0LL);
  }

  CFDictionaryGetKeysAndValues(Value, v8, v9);
  uint64_t v11 = 0LL;
  CFStringRef v41 = @"Interface";
  *(void *)&__int128 v12 = 138412290LL;
  __int128 v40 = v12;
  *(void *)&__int128 v12 = 138412546LL;
  __int128 v39 = v12;
  do
  {
    CFRange v13 = v9[v11];
    CFTypeID v14 = CFDictionaryGetTypeID();
    if (!v13 || CFGetTypeID(v13) != v14)
    {
      __int128 v23 = _SC_LOG_DEFAULT();
      uint64_t v24 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v23, (os_log_type_t)v24)) {
        goto LABEL_23;
      }
      uint64_t v25 = _os_log_pack_size();
      uint64_t v26 = (char *)&v37 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      CFStringRef v28 = v8[v11];
      *(_DWORD *)uint64_t v27 = v40;
      *(void *)(v27 + 4) = v28;
      uint64_t v21 = (uint64_t)v23;
      uint64_t v22 = v24;
      uint64_t v29 = v26;
      goto LABEL_22;
    }

    SCNetworkProtocolRef v15 = CFDictionaryGetValue((CFDictionaryRef)v9[v11], v41);
    CFTypeID v16 = CFDictionaryGetTypeID();
    if (!v15 || CFGetTypeID(v15) != v16)
    {
      uint64_t v30 = _SC_LOG_DEFAULT();
      uint64_t v31 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v30, (os_log_type_t)v31)) {
        goto LABEL_23;
      }
      uint64_t v32 = _os_log_pack_size();
      uint64_t v20 = (char *)&v37 - ((MEMORY[0x1895F8858](v32) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      uint64_t v34 = v8[v11];
      *(_DWORD *)uint64_t v33 = v39;
      *(void *)(v33 + 4) = v41;
      *(_WORD *)(v33 + 12) = 2112;
      *(void *)(v33 + 14) = v34;
      uint64_t v21 = (uint64_t)v30;
      uint64_t v22 = v31;
      goto LABEL_21;
    }

    if (__SCNetworkInterfaceEntityIsPPTP((const __CFDictionary *)v15))
    {
      uint64_t v17 = _SC_LOG_DEFAULT();
      uint64_t v18 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v17, (os_log_type_t)v18)) {
        goto LABEL_23;
      }
      uint64_t v19 = _os_log_pack_size();
      uint64_t v20 = (char *)&v37 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      uint64_t v21 = (uint64_t)v17;
      uint64_t v22 = v18;
LABEL_21:
      uint64_t v29 = v20;
LABEL_22:
      __SC_log_send(6, v21, v22, v29);
      goto LABEL_23;
    }

    uint64_t Private = __SCNetworkServiceCreatePrivate(0LL, v37, (const __CFString *)v8[v11], 0LL);
    if (!Private) {
      SCNetworkServiceCopyAll_cold_1();
    }
    int v36 = Private;
    CFArrayAppendValue(v38, Private);
    CFRelease(v36);
LABEL_23:
    ++v11;
  }

  while (v7 != v11);
  if (v8 != v43)
  {
    CFAllocatorDeallocate(0LL, v8);
    CFAllocatorDeallocate(0LL, v9);
  }

  return v38;
}

__CFArray *__SCNetworkServiceCopyAllInterfaces(const __SCPreferences *a1)
{
  uint64_t v1 = SCNetworkServiceCopyAll(a1);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count)
  {
    uint64_t v4 = Count;
    CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (v4 >= 1)
    {
      for (CFIndex i = 0LL; i != v4; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v2, i);
        SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
        CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
        if (Interface && CFGetTypeID(Interface) == TypeID) {
          CFArrayAppendValue(Mutable, Interface);
        }
      }
    }

    if (CFArrayGetCount(Mutable)) {
      goto LABEL_12;
    }
    CFRelease(Mutable);
  }

  CFMutableStringRef Mutable = 0LL;
LABEL_12:
  CFRelease(v2);
  return Mutable;
}

SCNetworkServiceRef SCNetworkServiceCopy(SCPreferencesRef prefs, CFStringRef serviceID)
{
  v14[1] = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = CFStringGetTypeID();
  if (!serviceID || CFGetTypeID(serviceID) != TypeID)
  {
    int v12 = 1002;
    goto LABEL_10;
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  (uint64_t)serviceID,  (uint64_t)@"Interface");
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID v7 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7)
  {
LABEL_8:
    int v12 = 1004;
LABEL_10:
    _SCErrorSet(v12);
    return 0LL;
  }

  if (__SCNetworkInterfaceEntityIsPPTP(Value))
  {
    CFTypeID v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v11 = (char *)v14 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v8, v9, v11);
    }

    goto LABEL_8;
  }

  return (SCNetworkServiceRef)__SCNetworkServiceCreatePrivate(0LL, prefs, serviceID, 0LL);
}

void *_SCNetworkServiceCopyActive(const void *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID)
  {
    uint64_t Private = __SCNetworkServiceCreatePrivate(0LL, 0LL, a2, 0LL);
    if (!Private) {
      _SCNetworkServiceCopyActive_cold_1();
    }
    int v6 = Private;
    if (a1)
    {
      Private[5] = a1;
      CFRetain(a1);
    }
  }

  else
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  return v6;
}

__CFSet *_copyInterfaceEntityTypes(const __CFDictionary *a1)
{
  v9[3] = *MEMORY[0x1895F89C0];
  CFMutableStringRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Interface");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    v9[0] = @"Type";
    v9[1] = @"SubType";
    void v9[2] = @"Hardware";
    CFSetAddValue(Mutable, @"Interface");
    for (uint64_t i = 0LL; i != 3; ++i)
    {
      int v6 = CFDictionaryGetValue(Value, (const void *)v9[i]);
      CFTypeID v7 = CFStringGetTypeID();
      if (v6 && CFGetTypeID(v6) == v7) {
        CFSetAddValue(Mutable, v6);
      }
    }

    CFSetAddValue(Mutable, @"PPP");
  }

  return Mutable;
}

CFArrayRef SCNetworkServiceCopyProtocols(SCNetworkServiceRef service)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_22:
    int v12 = 1002;
    goto LABEL_23;
  }

  if (!service) {
    goto LABEL_22;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_22;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)service + 2), 0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    int v12 = 1001;
LABEL_23:
    _SCErrorSet(v12);
    return 0LL;
  }

  int v6 = _copyInterfaceEntityTypes(Value);
  CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFIndex Count = CFDictionaryGetCount(Value);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    if ((unint64_t)Count < 0x41)
    {
      uint64_t v11 = (const void **)&v18;
      uint64_t v10 = (const void **)v19;
    }

    else
    {
      uint64_t v10 = (const void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
      uint64_t v11 = (const void **)MEMORY[0x186E08750](0LL, 8 * v9, 0LL);
    }

    CFDictionaryGetKeysAndValues(Value, v10, v11);
    for (uint64_t i = 0LL; i != v9; ++i)
    {
      CFTypeID v14 = v11[i];
      CFTypeID v15 = CFDictionaryGetTypeID();
      if (v14 && CFGetTypeID(v14) == v15 && !CFSetContainsValue(v6, v10[i]))
      {
        uint64_t Private = (const void *)__SCNetworkProtocolCreatePrivate(0LL, (const __CFString *)v10[i], service);
        CFArrayAppendValue(Mutable, Private);
        CFRelease(Private);
      }
    }

    if (v10 != (const void **)v19)
    {
      CFAllocatorDeallocate(0LL, v10);
      CFAllocatorDeallocate(0LL, v11);
    }
  }

  CFRelease(v6);
  return Mutable;
}

SCNetworkServiceRef SCNetworkServiceCreate(SCPreferencesRef prefs, SCNetworkInterfaceRef interface)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface
    || CFGetTypeID(interface) != TypeID
    || !SCNetworkInterfaceGetSupportedProtocolTypes(interface)
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(interface),
        CFStringFind(InterfaceType, @".", 0LL).location == -1))
  {
    int v6 = 1002;
    goto LABEL_8;
  }

  if (__SCNetworkInterfaceIsBusyMember(prefs, interface, 1))
  {
    int v6 = 1001;
LABEL_8:
    _SCErrorSet(v6);
    return 0LL;
  }

  NetworkServices = SCPreferencesPathKeyCreateNetworkServices(0LL);
  CFStringRef UniqueChild = SCPreferencesPathCreateUniqueChild(prefs, NetworkServices);
  CFRelease(NetworkServices);
  if (!UniqueChild) {
    return (SCNetworkServiceRef)UniqueChild;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, UniqueChild, @"/");
  CFRelease(UniqueChild);
  CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2LL);
  CFStringRef UniqueChild = (CFStringRef)__SCNetworkServiceCreatePrivate(0LL, prefs, ValueAtIndex, 0LL);
  CFRelease(ArrayBySeparatingStrings);
  CFStringRef Copy = (const __SCNetworkInterface *)__SCNetworkInterfaceCreateCopy(0LL, (uint64_t)interface, prefs, ValueAtIndex);
  UniqueChild->length = (uint64_t)Copy;
  if (!Copy) {
    goto LABEL_43;
  }
  CFStringRef v48 = UniqueChild;
  CFTypeID v14 = @"Bluetooth";
  uint64_t v50 = @"Serial";
  uint64_t v49 = @"WWAN";
  CFTypeID v15 = @"ConnectionScript";
  CFTypeRef v56 = @"ConnectionPersonality";
  __n128 v55 = @"DeviceVendor";
  CFIndex v54 = @"DeviceModel";
  uint64_t v47 = @"PPP";
  CFTypeID v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x189605240];
  uint64_t v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x189605250];
  CFTypeRef v46 = @"VPN";
  *(void *)&__int128 v13 = 138412290LL;
  __int128 v51 = v13;
  SCNetworkInterfaceRef v52 = @"ConnectionScript";
  CFTypeRef v53 = @"Bluetooth";
  do
  {
    CFStringRef v18 = SCNetworkInterfaceGetInterfaceType(Copy);
    uint64_t v19 = SCNetworkInterfaceGetInterface(Copy);
    if (v19) {
      uint64_t v20 = SCNetworkInterfaceGetInterfaceType(v19);
    }
    else {
      uint64_t v20 = 0LL;
    }
    uint64_t v21 = (const __CFDictionary *)__copyInterfaceTemplate(v18, v20);
    if (v21)
    {
      uint64_t v22 = v21;
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v21);
      CFRelease(v22);
    }

    else
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, v16, v17);
    }

    if (CFEqual(v18, v14) || CFEqual(v18, @"Modem") || CFEqual(v18, v50) || CFEqual(v18, v49))
    {
      TemplateOverrides = __SCNetworkInterfaceGetTemplateOverrides((uint64_t)Copy, @"Modem");
      CFTypeID v25 = CFDictionaryGetTypeID();
      if (!TemplateOverrides)
      {
        CFDictionaryGetTypeID();
        goto LABEL_31;
      }

      if (CFGetTypeID(TemplateOverrides) == v25 && CFDictionaryContainsKey((CFDictionaryRef)TemplateOverrides, v15))
      {
        CFDictionaryRemoveValue(MutableCopy, v56);
        CFDictionaryRemoveValue(MutableCopy, v15);
        CFDictionaryRemoveValue(MutableCopy, v55);
        CFDictionaryRemoveValue(MutableCopy, v54);
      }

      CFTypeID v26 = CFDictionaryGetTypeID();
LABEL_28:
      if (CFGetTypeID(TemplateOverrides) == v26) {
        CFDictionaryApplyFunction( (CFDictionaryRef)TemplateOverrides,  (CFDictionaryApplierFunction)mergeDict,  MutableCopy);
      }
      goto LABEL_31;
    }

    uint64_t v34 = v47;
    if (!CFEqual(v18, v47))
    {
      if (CFEqual(v18, v46)) {
        uint64_t v34 = v47;
      }
      else {
        uint64_t v34 = v18;
      }
    }

    TemplateOverrides = __SCNetworkInterfaceGetTemplateOverrides((uint64_t)Copy, v34);
    CFTypeID v26 = CFDictionaryGetTypeID();
    if (TemplateOverrides) {
      goto LABEL_28;
    }
LABEL_31:
    if (CFDictionaryGetCount(MutableCopy) >= 1
      && !__SCNetworkInterfaceSetConfiguration((uint64_t)Copy, 0LL, MutableCopy, 1LL))
    {
      uint64_t v27 = _SC_LOG_DEFAULT();
      uint64_t v28 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v27, (os_log_type_t)v28))
      {
        uint64_t v29 = _os_log_pack_size();
        uint64_t v30 = v17;
        uint64_t v31 = (char *)&v45 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v32 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v32 = v51;
        *(void *)(v32 + 4) = Copy;
        uint64_t v33 = v31;
        uint64_t v17 = v30;
        __SC_log_send(6, (uint64_t)v27, v28, v33);
        CFTypeID v15 = v52;
        CFTypeID v14 = v53;
      }
    }

    CFRelease(MutableCopy);
    CFStringRef Copy = SCNetworkInterfaceGetInterface(Copy);
  }

  while (Copy);
  CFStringRef UniqueChild = v48;
  CFStringRef Copy = (const __SCNetworkInterface *)v48->length;
LABEL_43:
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  (uint64_t)UniqueChild->data,  (uint64_t)@"Interface");
  int v36 = __SCNetworkInterfaceCopyInterfaceEntity(Copy);
  SCPreferencesPathSetValue((SCPreferencesRef)UniqueChild[1].isa, NetworkServiceEntity, v36);
  CFRelease(v36);
  CFRelease(NetworkServiceEntity);
  SCPreferencesRef v37 = __SCNetworkInterfaceCopyDeepConfiguration(0LL, (const __SCNetworkInterface *)UniqueChild->length);
  __SCNetworkInterfaceSetDeepConfiguration(0LL, (const __SCNetworkInterface *)UniqueChild->length, v37, v38);
  if (v37) {
    CFRelease(v37);
  }
  CFStringRef Name = __SCNetworkServiceGetName(UniqueChild, 1);
  if (Name) {
    SCNetworkServiceSetName((SCNetworkServiceRef)UniqueChild, Name);
  }
  __int128 v40 = _SC_LOG_DEFAULT();
  uint64_t v41 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v40, (os_log_type_t)v41))
  {
    uint64_t v42 = _os_log_pack_size();
    int v43 = (char *)&v45 - ((MEMORY[0x1895F8858](v42) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v44 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v44 = 138412290;
    *(void *)(v44 + 4) = UniqueChild;
    __SC_log_send(7, (uint64_t)v40, v41, v43);
  }

  return (SCNetworkServiceRef)UniqueChild;
}

void mergeDict(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

CFStringRef SCNetworkServiceGetName(SCNetworkServiceRef service)
{
  return __SCNetworkServiceGetName(service, 1);
}

Boolean SCNetworkServiceSetName(SCNetworkServiceRef service, CFStringRef name)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_21;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_21;
    }
  }

  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4)) {
    goto LABEL_21;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    __int128 v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      CFTypeID v16 = (char *)&v50 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      CFStringRef v18 = @"<NULL>";
      if (name) {
        CFStringRef v18 = name;
      }
      *(_DWORD *)uint64_t v17 = 138412546;
      *(void *)(v17 + 4) = service;
      *(_WORD *)(v17 + 12) = 2112;
      *(void *)(v17 + 14) = v18;
      __SC_log_send(3, (uint64_t)v13, v14, v16);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_40;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkServiceSetName() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_21;
  }

  if (!name)
  {
    CFTypeRef v6 = 0LL;
    goto LABEL_46;
  }

  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(name) != TypeID)
  {
LABEL_21:
    int v19 = 1002;
LABEL_22:
    _SCErrorSet(v19);
    LOBYTE(v20) = 0;
    return v20;
  }

  CFTypeRef v6 = CFRetain(name);
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
  while (Interface)
  {
    CFTypeID v8 = Interface;
    SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(Interface);
    if (!Interface)
    {
      LocalizedDisplayCFStringRef Name = SCNetworkInterfaceGetLocalizedDisplayName(v8);
      if (LocalizedDisplayName)
      {
        uint64_t v10 = LocalizedDisplayName;
        if (CFEqual(name, LocalizedDisplayName))
        {
          NonLocalizedDisplayCFStringRef Name = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)v8);
          if (NonLocalizedDisplayName)
          {
            CFStringRef v12 = NonLocalizedDisplayName;
            CFRelease(v6);
            CFTypeRef v6 = CFRetain(v12);
          }
        }

        else if (CFStringHasPrefix(name, v10))
        {
          CFIndex Length = CFStringGetLength(v10);
          v53.length = CFStringGetLength(name) - Length;
          v53.io_name_t location = Length;
          CFStringRef v23 = CFStringCreateWithSubstring(0LL, name, v53);
          CFStringRef v24 = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)v8);
          if (v24)
          {
            CFStringRef v25 = v24;
            CFRelease(v6);
            CFTypeRef v6 = CFStringCreateWithFormat(0LL, 0LL, @"%@%@", v25, v23);
          }

          CFRelease(v23);
        }
      }

      break;
    }
  }

  CFTypeID v26 = SCNetworkSetCopyAll(*((SCPreferencesRef *)service + 4));
  if (v26)
  {
    uint64_t v27 = v26;
    CFTypeRef v50 = v6;
    CFIndex Count = CFArrayGetCount(v26);
    if (Count >= 1)
    {
      CFIndex v28 = 0LL;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v27, v28);
        uint64_t v30 = SCNetworkSetCopyServices(ValueAtIndex);
        CFIndex v31 = CFArrayGetCount(v30);
        if (v31 < 1)
        {
          int v35 = 0;
          int v34 = 0;
        }

        else
        {
          CFIndex v32 = v31;
          CFIndex v33 = 0LL;
          int v34 = 0;
          int v35 = 0;
          do
          {
            int v36 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v30, v33);
            CFStringRef ServiceID = SCNetworkServiceGetServiceID(v36);
            if (CFEqual(*((CFTypeRef *)service + 2), ServiceID))
            {
              int v35 = 1;
            }

            else
            {
              __n128 v38 = __SCNetworkServiceGetName(v36, 1);
              if (v38 && CFEqual(name, v38)) {
                int v34 = 1;
              }
            }

            ++v33;
          }

          while (v32 != v33);
        }

        CFRelease(v30);
        if (v35)
        {
          if (v34) {
            break;
          }
        }

        if (++v28 == Count) {
          goto LABEL_45;
        }
      }

      CFRelease(v27);
      if (v50) {
        CFRelease(v50);
      }
      int v19 = 1005;
      goto LABEL_22;
    }

LABEL_45:
    CFRelease(v27);
    CFTypeRef v6 = v50;
  }

    _SCErrorSet(1002);
    return 0LL;
  }

  if (!*(void *)(cf + 40)) {
    goto LABEL_45;
  }
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  @"State:",  *(CFStringRef *)(cf + 16),  0LL);
  CFTypeID v16 = SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(cf + 40), NetworkServiceEntity);
  if (v16)
  {
    uint64_t v17 = v16;
    CFStringRef v18 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v17) != v18)
    {
      CFRelease(v17);
      goto LABEL_33;
    }

    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, (CFDictionaryRef)v17);
    CFRelease(v17);
  }

  else
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  }

  if (v28) {
    CFDictionarySetValue(MutableCopy, @"PrimaryRank", v28);
  }
  else {
    CFDictionaryRemoveValue(MutableCopy, @"PrimaryRank");
  }
  CFStringRef v23 = CFDictionaryGetCount(MutableCopy);
  CFStringRef v24 = *(const __SCDynamicStore **)(cf + 40);
  if (v23 < 1)
  {
    CFStringRef v25 = SCDynamicStoreRemoveValue(v24, NetworkServiceEntity);
    if (SCError() == 1004) {
      uint64_t v5 = 1LL;
    }
    else {
      uint64_t v5 = v25;
    }
    goto LABEL_38;
  }

  uint64_t v22 = SCDynamicStoreSetValue(v24, NetworkServiceEntity, MutableCopy);
LABEL_37:
  uint64_t v5 = v22;
LABEL_38:
  CFRelease(MutableCopy);
LABEL_39:
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v5;
}

LABEL_46:
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)service + 2), 0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFTypeID v41 = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == v41)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
LABEL_51:
      int v43 = MutableCopy;
      if (v6) {
        CFDictionarySetValue(MutableCopy, @"UserDefinedName", v6);
      }
      else {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
      }
      int v20 = SCPreferencesPathSetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity, v43);
      CFRelease(v43);
      goto LABEL_56;
    }
  }

  else if (name)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    goto LABEL_51;
  }

  int v20 = 0;
LABEL_56:
  CFRelease(NetworkServiceEntity);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v44 = (const void *)*((void *)service + 6);
  if (v44) {
    CFRelease(v44);
  }
  if (name) {
    CFRetain(name);
  }
  *((void *)service + 6) = name;
  if (v20)
  {
    uint64_t v45 = _SC_LOG_DEFAULT();
    uint64_t v46 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v45, (os_log_type_t)v46))
    {
      uint64_t v47 = _os_log_pack_size();
      CFStringRef v48 = (char *)&v50 - ((MEMORY[0x1895F8858](v47) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v49 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v49 = 138412290;
      *(void *)(v49 + 4) = service;
      __SC_log_send(7, (uint64_t)v45, v46, v48);
    }
  }

  return v20;
}

const __SCNetworkService *_SCNetworkServiceCreatePreconfigured( const __SCPreferences *a1, SCNetworkInterfaceRef interface)
{
  v34[1] = *MEMORY[0x1895F89C0];
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
  SCNetworkServiceRef v5 = SCNetworkServiceCreate(a1, interface);
  if (!v5)
  {
    uint64_t v17 = _SC_LOG_DEFAULT();
    uint64_t v18 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v17, (os_log_type_t)v18))
    {
      uint64_t v19 = _os_log_pack_size();
      int v20 = (char *)v34 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      int v22 = SCError();
      CFStringRef v23 = SCErrorString(v22);
      *(_DWORD *)uint64_t v21 = 138412546;
      *(void *)(v21 + 4) = BSDName;
      *(_WORD *)(v21 + 12) = 2080;
      *(void *)(v21 + 14) = v23;
      __SC_log_send(3, (uint64_t)v17, v18, v20);
    }

    return 0LL;
  }

  CFTypeRef v6 = v5;
  CFStringRef v7 = _SC_copyInterfaceUUID(BSDName);
  if (!v7)
  {
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v10, (os_log_type_t)v11)) {
      goto LABEL_11;
    }
    uint64_t v24 = _os_log_pack_size();
    __int128 v13 = (char *)v34 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 138412290;
    *(void *)(v25 + 4) = BSDName;
    goto LABEL_10;
  }

  CFStringRef v8 = v7;
  int v9 = _SCNetworkServiceSetServiceID((uint64_t)v6, v7);
  CFRelease(v8);
  if (!v9)
  {
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      __int128 v13 = (char *)v34 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      int v15 = SCError();
      CFTypeID v16 = SCErrorString(v15);
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v16;
LABEL_10:
      __SC_log_send(3, (uint64_t)v10, v11, v13);
    }
  }

uint64_t _SCNetworkServiceSetServiceID(uint64_t cf, const void *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (cf) {
      goto LABEL_3;
    }
LABEL_26:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v4) {
    goto LABEL_26;
  }
  if (!*(void *)(cf + 32)) {
    goto LABEL_26;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_26;
  }
  if (CFEqual(a2, *(CFTypeRef *)(cf + 16))) {
    return 1LL;
  }
  if (!__SCNetworkServiceExists(cf))
  {
    uint64_t v21 = _SC_LOG_DEFAULT();
    uint64_t v22 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v21, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      uint64_t v24 = (char *)v27 - ((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v25 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v25 = 138412546;
      *(void *)(v25 + 4) = cf;
      *(_WORD *)(v25 + 12) = 2112;
      *(void *)(v25 + 14) = a2;
      __SC_log_send(3, (uint64_t)v21, v22, v24);
    }

    uint64_t context = MEMORY[0x1895F87A8];
    uint64_t v29 = 0x40000000LL;
    uint64_t v30 = ___SC_crash_once_block_invoke_3;
    int v31 = &__block_descriptor_tmp_40;
    uint64_t v33 = 0LL;
    uint64_t v34 = 0LL;
    CFIndex v32 = "_SCNetworkServiceSetServiceID() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, &context);
    }
    goto LABEL_26;
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, (uint64_t)a2, 0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity);
  CFTypeID v9 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v9)
  {
    uint64_t v11 = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *(void *)(cf + 16), 0LL);
    uint64_t v12 = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), v11);
    CFTypeID v13 = CFDictionaryGetTypeID();
    if (v12 && CFGetTypeID(v12) == v13)
    {
      if (SCPreferencesPathSetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity, v12))
      {
        uint64_t v6 = SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(cf + 32), v11);
        if ((_DWORD)v6)
        {
          uint64_t v10 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(cf + 32));
          uint64_t context = *(void *)(cf + 16);
          uint64_t v29 = (uint64_t)a2;
          v36.length = CFArrayGetCount(v10);
          v36.io_name_t location = 0LL;
          CFArrayApplyFunction(v10, v36, (CFArrayApplierFunction)replaceServiceID, &context);
          uint64_t v14 = *(void *)(cf + 24);
          if (v14)
          {
            CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0LL, v14, *(const void **)(cf + 32), a2);
            CFRelease(*(CFTypeRef *)(cf + 24));
            *(void *)(cf + 24) = Copy;
          }

          CFTypeID v16 = _SC_LOG_DEFAULT();
          uint64_t v17 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v16, (os_log_type_t)v17))
          {
            uint64_t v18 = _os_log_pack_size();
            v27[1] = v27;
            uint64_t v19 = (char *)v27 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v20 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v20 = 138412546;
            *(void *)(v20 + 4) = cf;
            *(_WORD *)(v20 + 12) = 2112;
            *(void *)(v20 + 14) = a2;
            __SC_log_send(7, (uint64_t)v16, v17, v19);
          }

          CFRetain(a2);
          CFRelease(*(CFTypeRef *)(cf + 16));
          *(void *)(cf + 16) = a2;
          goto LABEL_31;
        }

Boolean SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef service)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_23:
    _SCErrorSet(1002);
    LOBYTE(Interface) = 0;
    return Interface;
  }

  if (!service) {
    goto LABEL_23;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_23;
  }
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
  if (Interface)
  {
    uint64_t v25 = Interface;
    SupportedProtocolTypes = SCNetworkInterfaceGetSupportedProtocolTypes(Interface);
    if (SupportedProtocolTypes)
    {
      SCNetworkServiceRef v5 = SupportedProtocolTypes;
      CFIndex Count = CFArrayGetCount(SupportedProtocolTypes);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0LL;
        *(void *)&__int128 v7 = 138412290LL;
        __int128 v26 = v7;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9);
          if (!SCNetworkServiceAddProtocolType(service, ValueAtIndex))
          {
            uint64_t v11 = _SC_LOG_DEFAULT();
            uint64_t v12 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
            {
              uint64_t v13 = _os_log_pack_size();
              uint64_t v14 = (char *)&v24 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v15 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v15 = v26;
              *(void *)(v15 + 4) = ValueAtIndex;
              __SC_log_send(6, (uint64_t)v11, v12, v14);
            }
          }

          ++v9;
        }

        while (v8 != v9);
      }
    }

    TemplateOverrides = __SCNetworkInterfaceGetTemplateOverrides((uint64_t)v25, @"PrimaryRank");
    CFTypeID TypeID = CFStringGetTypeID();
    if (!TemplateOverrides || CFGetTypeID(TemplateOverrides) != TypeID) {
      goto LABEL_21;
    }
    if (__str_to_rank(TemplateOverrides, (int *)&v27))
    {
      uint64_t v18 = _SC_LOG_DEFAULT();
      uint64_t v19 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v18, (os_log_type_t)v19)) {
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v18 = _SC_LOG_DEFAULT();
      uint64_t v19 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v18, (os_log_type_t)v19))
      {
LABEL_21:
        LOBYTE(Interface) = 1;
        return Interface;
      }
    }

    uint64_t v20 = _os_log_pack_size();
    uint64_t v21 = (char *)&v24 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v22 = 138412290;
    *(void *)(v22 + 4) = TemplateOverrides;
    __SC_log_send(6, (uint64_t)v18, v19, v21);
    goto LABEL_21;
  }

  return Interface;
}

Boolean SCNetworkServiceRemove(SCNetworkServiceRef service)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_20:
    _SCErrorSet(1002);
LABEL_21:
    LOBYTE(v10) = 0;
    return v10;
  }

  if (!service) {
    goto LABEL_20;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_20;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    CFTypeID v16 = _SC_LOG_DEFAULT();
    uint64_t v17 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v19 = (char *)block - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = service;
      __SC_log_send(3, (uint64_t)v16, v17, v19);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_40;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkServiceRemove() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_20;
  }

  _SCNetworkInterfaceCacheOpen();
  uint64_t v3 = SCNetworkSetCopyAll(*((SCPreferencesRef *)service + 4));
  if (v3)
  {
    uint64_t v4 = v3;
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0LL;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v4, v7);
        if (!SCNetworkSetRemoveService(ValueAtIndex, service) && SCError() != 1004) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_12;
        }
      }

      CFRelease(v4);
      goto LABEL_21;
    }

uint64_t SCNetworkServiceSetPrimaryRank(uint64_t cf, unsigned int a2)
{
  void block[7] = *MEMORY[0x1895F89C0];
  uint64_t v28 = 0LL;
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_45;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!cf) {
      goto LABEL_45;
    }
  }

  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v4) {
    goto LABEL_45;
  }
  if (*(void *)(cf + 32) && !__SCNetworkServiceExists(cf))
  {
    uint64_t v11 = _SC_LOG_DEFAULT();
    uint64_t v12 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v14 = (char *)&v27 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = cf;
      __SC_log_send(3, (uint64_t)v11, v12, v14);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_40;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkServiceSetPrimaryRank() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_45;
  }

  uint64_t v5 = __rank_to_str(a2, &v28);
  if (!(_DWORD)v5)
  {
    _SCErrorSet(1002);
    return v5;
  }

  if (*(void *)(cf + 32))
  {
    if (a2 <= 4 && ((1 << a2) & 0x19) != 0)
    {
      CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *(void *)(cf + 16), 0LL);
      CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity);
      if (!Value)
      {
        CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        goto LABEL_23;
      }

      CFIndex v8 = Value;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v8) == TypeID)
      {
        CFMutableStringRef Mutable = CFDictionaryCreateMutableCopy(0LL, 0LL, v8);
LABEL_23:
        CFMutableDictionaryRef MutableCopy = Mutable;
        if (v28) {
          CFDictionarySetValue(Mutable, @"PrimaryRank", v28);
        }
        else {
          CFDictionaryRemoveValue(Mutable, @"PrimaryRank");
        }
        CFIndex Count = CFDictionaryGetCount(MutableCopy);
        uint64_t v21 = *(const __SCPreferences **)(cf + 32);
        if (Count < 1) {
          uint64_t v22 = SCPreferencesPathRemoveValue(v21, NetworkServiceEntity);
        }
        else {
          uint64_t v22 = SCPreferencesPathSetValue(v21, NetworkServiceEntity, MutableCopy);
        }
        goto LABEL_37;
      }

LABEL_33:
      _SCErrorSet(1001);
      goto LABEL_39;
    }

CFStringRef __SCNetworkServiceGetName(CFTypeRef cf, int a2)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (cf) {
      goto LABEL_3;
    }
LABEL_51:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_51;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(cf) != v4 || !*((void *)cf + 4)) {
    goto LABEL_51;
  }
  CFDictionaryRef Value = (const __CFString *)*((void *)cf + 6);
  if (Value)
  {
    if (a2) {
      return Value;
    }
    goto LABEL_16;
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)cf + 2), 0LL);
  CFDictionaryRef Value = (const __CFString *)SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      CFDictionaryRef Value = 0LL;
      goto LABEL_16;
    }

    CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, @"UserDefinedName");
    CFTypeID v8 = CFStringGetTypeID();
    if (Value && CFGetTypeID(Value) == v8)
    {
      *((void *)cf + 6) = CFRetain(Value);
      if (_SCNetworkConfigurationBypassSystemInterfaces(*((void *)cf + 4))) {
        return (const __CFString *)*((void *)cf + 6);
      }
      goto LABEL_16;
    }

    if (a2) {
      goto LABEL_16;
    }
    return 0LL;
  }

CFTypeID SCNetworkServiceGetTypeID(void)
{
  if (__SCNetworkServiceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
  }
  return __kSCNetworkServiceTypeID;
}

Boolean SCNetworkServiceRemoveProtocolType(SCNetworkServiceRef service, CFStringRef protocolType)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_15;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_15;
    }
  }

  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4)) {
    goto LABEL_15;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    SCNetworkInterfaceRef v12 = _SC_LOG_DEFAULT();
    uint64_t v13 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      uint64_t v15 = (char *)block - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 138412546;
      *(void *)(v16 + 4) = service;
      *(_WORD *)(v16 + 12) = 2112;
      *(void *)(v16 + 14) = protocolType;
      __SC_log_send(3, (uint64_t)v12, v13, v15);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_40;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkServiceRemoveProtocolType() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_15;
  }

  if (!__SCNetworkProtocolIsValidType(protocolType))
  {
LABEL_15:
    _SCErrorSet(1002);
    LOBYTE(v6) = 0;
    return v6;
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity( 0LL,  *((void *)service + 2),  (uint64_t)protocolType);
  if (SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity))
  {
    int v6 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
    if (v6)
    {
      CFIndex v7 = _SC_LOG_DEFAULT();
      uint64_t v8 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
      {
        uint64_t v9 = _os_log_pack_size();
        int v10 = (char *)block - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v11 = 138412546;
        *(void *)(v11 + 4) = service;
        *(_WORD *)(v11 + 12) = 2112;
        *(void *)(v11 + 14) = protocolType;
        __SC_log_send(7, (uint64_t)v7, v8, v10);
      }
    }
  }

  else
  {
    _SCErrorSet(1004);
    LOBYTE(v6) = 0;
  }

  CFRelease(NetworkServiceEntity);
  return v6;
}

Boolean SCNetworkServiceSetEnabled(SCNetworkServiceRef service, Boolean enabled)
{
  int v2 = enabled;
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_19:
    int v6 = 1002;
    goto LABEL_20;
  }

  if (!service) {
    goto LABEL_19;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4)) {
    goto LABEL_19;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v15 = _SC_LOG_DEFAULT();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      BOOL v18 = (char *)block - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 138412290;
      *(void *)(v19 + 4) = service;
      __SC_log_send(3, (uint64_t)v15, v16, v18);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_40;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkProtocolSetEnabled() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_19;
  }

  if (v2)
  {
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
    if (Interface)
    {
      if (__SCNetworkInterfaceIsBusyMember(*((const __SCPreferences **)service + 4), Interface, 1))
      {
        int v6 = 1001;
LABEL_20:
        _SCErrorSet(v6);
        LOBYTE(v8) = 0;
        return v8;
      }
    }
  }

  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)service + 2), 0LL);
  int v8 = __setPrefsEnabled(*((const __SCPreferences **)service + 4), NetworkServiceEntity, v2);
  CFRelease(NetworkServiceEntity);
  if (v8)
  {
    uint64_t v9 = _SC_LOG_DEFAULT();
    uint64_t v10 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      SCNetworkInterfaceRef v12 = (char *)block - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = "Enabled";
      if (!v2) {
        uint64_t v14 = "Disabled";
      }
      *(_DWORD *)uint64_t v13 = 138412546;
      *(void *)(v13 + 4) = service;
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v14;
      __SC_log_send(7, (uint64_t)v9, v10, v12);
    }
  }

  return v8;
}

uint64_t SCNetworkServiceGetPrimaryRank(CFTypeRef cf)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unsigned int v14 = 0;
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_18;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!cf) {
      goto LABEL_18;
    }
  }

  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_18;
  }
  if (*((void *)cf + 4))
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)cf + 2), 0LL);
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 4), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (!Value || CFGetTypeID(Value) != TypeID) {
      goto LABEL_14;
    }
    int v6 = CFDictionaryGetValue(Value, @"PrimaryRank");
    goto LABEL_17;
  }

  if (!*((void *)cf + 5))
  {
LABEL_18:
    int v12 = 1002;
    goto LABEL_19;
  }

  CFIndex v7 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"State:", *((CFStringRef *)cf + 2), 0LL);
  int v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*((SCDynamicStoreRef *)cf + 5), v7);
  CFRelease(v7);
  if (!v8)
  {
LABEL_14:
    int v12 = 0;
LABEL_19:
    _SCErrorSet(v12);
    return v14;
  }

  CFTypeID v9 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v8) == v9)
  {
    uint64_t v10 = CFDictionaryGetValue(v8, @"PrimaryRank");
    int v11 = __str_to_rank(v10, (int *)&v14);
  }

  else
  {
    int v11 = 1;
  }

  CFRelease(v8);
  if (!v11)
  {
LABEL_17:
    unsigned int v14 = 0;
    goto LABEL_18;
  }

const __SCNetworkInterface *_SCNetworkServiceIsVPN(const __SCNetworkService *a1)
{
  uint64_t result = SCNetworkServiceGetInterface(a1);
  if (result)
  {
    uint64_t v2 = result;
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(result);
    if (CFEqual(InterfaceType, @"PPP"))
    {
      uint64_t result = SCNetworkInterfaceGetInterface(v2);
      if (!result) {
        return result;
      }
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(result);
      if (CFEqual(InterfaceType, @"L2TP")) {
        return (const __SCNetworkInterface *)1;
      }
      uint64_t v4 = (CFTypeRef *)&kSCNetworkInterfaceTypePPTP;
    }

    else
    {
      if (CFEqual(InterfaceType, @"VPN")) {
        return (const __SCNetworkInterface *)1;
      }
      uint64_t v4 = (CFTypeRef *)&kSCNetworkInterfaceTypeIPSec;
    }

    return (const __SCNetworkInterface *)(CFEqual(InterfaceType, *v4) != 0);
  }

  return result;
}

uint64_t SCNetworkServiceSetExternalID(uint64_t cf, const void *a2, const void *a3)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_18;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!cf) {
      goto LABEL_18;
    }
  }

  uint64_t v6 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v6) {
    goto LABEL_18;
  }
  if (!*(void *)(cf + 32)) {
    goto LABEL_18;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_18;
  }
  if (!__SCNetworkServiceExists(cf))
  {
    uint64_t v15 = _SC_LOG_DEFAULT();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      BOOL v18 = (char *)block - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = cf;
      *(_WORD *)(v19 + 12) = 2112;
      *(void *)(v19 + 14) = a3;
      __SC_log_send(3, (uint64_t)v15, v16, v18);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_40;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkServiceSetExternalID() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_18;
  }

  if (a3)
  {
    CFTypeID v8 = CFStringGetTypeID();
    if (CFGetTypeID(a3) != v8)
    {
LABEL_18:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  CFStringRef v9 = CFStringCreateWithFormat(0LL, 0LL, @"%s%@", "_", a2);
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *(void *)(cf + 16), 0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity);
  CFTypeID v12 = CFDictionaryGetTypeID();
  if (!Value)
  {
    if (!a3)
    {
      CFRelease(NetworkServiceEntity);
      uint64_t v20 = 0LL;
LABEL_30:
      CFIndex v23 = *(__CFDictionary **)(cf + 56);
      if (v23) {
        CFDictionaryRemoveValue(v23, v9);
      }
      goto LABEL_32;
    }

    CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    goto LABEL_22;
  }

  if (CFGetTypeID(Value) == v12)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    CFMutableStringRef Mutable = MutableCopy;
    if (!a3)
    {
      CFDictionaryRemoveValue(MutableCopy, v9);
LABEL_23:
      uint64_t v20 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity, Mutable);
      CFRelease(Mutable);
      goto LABEL_25;
    }

CFDictionaryRef SCNetworkServiceCopyExternalID(CFTypeRef cf, const void *a2)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (cf) {
      goto LABEL_3;
    }
LABEL_20:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_20;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_20;
  }
  if (!*((void *)cf + 4)) {
    goto LABEL_20;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_20;
  }
  CFStringRef v6 = CFStringCreateWithFormat(0LL, 0LL, @"%s%@", "_", a2);
  CFIndex v7 = (const __CFDictionary *)*((void *)cf + 7);
  if (v7 && (CFTypeID v8 = (const __CFDictionary *)CFDictionaryGetValue(v7, v6)) != 0LL)
  {
    CFDictionaryRef Value = v8;
    CFRetain(v8);
    CFRelease(v6);
  }

  else
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)cf + 2), 0LL);
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 4), NetworkServiceEntity);
    CFTypeID v11 = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v11)
      {
        CFTypeID v12 = (const __CFDictionary *)CFDictionaryGetValue(Value, v6);
        CFDictionaryRef Value = v12;
        if (v12)
        {
          CFRetain(v12);
          CFMutableStringRef Mutable = (__CFDictionary *)*((void *)cf + 7);
          if (!Mutable)
          {
            CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
            *((void *)cf + 7) = Mutable;
          }

          CFDictionarySetValue(Mutable, v6, Value);
        }
      }

      else
      {
        CFDictionaryRef Value = 0LL;
      }
    }

    CFRelease(NetworkServiceEntity);
    CFRelease(v6);
    if (!Value) {
      _SCErrorSet(1004);
    }
  }

  return Value;
}

void replaceServiceID(uint64_t a1, CFTypeRef *a2)
{
  ServiceOrder = SCNetworkSetGetServiceOrder((SCNetworkSetRef)a1);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (ServiceOrder)
  {
    if (CFGetTypeID(ServiceOrder) == TypeID)
    {
      v13.length = CFArrayGetCount(ServiceOrder);
      v13.io_name_t location = 0LL;
      if (CFArrayContainsValue(ServiceOrder, v13, *a2))
      {
        CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, ServiceOrder);
        CFIndex Count = CFArrayGetCount(MutableCopy);
        if (Count >= 1)
        {
          CFIndex v8 = Count;
          for (CFIndex i = 0LL; i != v8; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, i);
            if (CFEqual(ValueAtIndex, *a2)) {
              CFArraySetValueAtIndex(MutableCopy, i, a2[1]);
            }
          }
        }

        SCNetworkSetSetServiceOrder((SCNetworkSetRef)a1, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
  }

  SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity( 0LL,  *(void *)(a1 + 16),  (uint64_t)*a2,  0LL);
  if (SCPreferencesPathGetLink(*(SCPreferencesRef *)(a1 + 24), SetNetworkServiceEntity))
  {
    SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(a1 + 24), SetNetworkServiceEntity);
    CFRelease(SetNetworkServiceEntity);
    SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity( 0LL,  *(void *)(a1 + 16),  (uint64_t)a2[1],  0LL);
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, (uint64_t)a2[1], 0LL);
    SCPreferencesPathSetLink(*(SCPreferencesRef *)(a1 + 24), SetNetworkServiceEntity, NetworkServiceEntity);
    if (!SetNetworkServiceEntity) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  CFStringRef NetworkServiceEntity = 0LL;
  if (SetNetworkServiceEntity) {
LABEL_12:
  }
    CFRelease(SetNetworkServiceEntity);
LABEL_13:
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
}

void __SCNetworkServiceAddProtocolToService( const __SCNetworkService *a1, const __CFString *a2, const __CFDictionary *a3, Boolean a4)
{
  CFIndex v8 = SCNetworkServiceCopyProtocol(a1, a2);
  if (v8
    || SCError() == 1004
    && SCNetworkServiceAddProtocolType(a1, a2)
    && (CFIndex v8 = SCNetworkServiceCopyProtocol(a1, a2)) != 0LL)
  {
    SCNetworkProtocolSetConfiguration(v8, a3);
    SCNetworkProtocolSetEnabled(v8, a4);
    CFRelease(v8);
  }

uint64_t __SCNetworkServiceMigrateNew( const __SCPreferences *a1, uint64_t cf, const __CFDictionary *a3, const __CFDictionary *a4, const __CFDictionary *a5)
{
  uint64_t v8 = cf;
  value[1] = *(void **)MEMORY[0x1895F89C0];
  value[0] = 0LL;
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      return v8;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!v8) {
      return v8;
    }
  }

  uint64_t v10 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)v8) != v10) {
    return 0LL;
  }
  CFTypeID v11 = *(const void **)(v8 + 24);
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!v11 || CFGetTypeID(v11) != TypeID || !*(void *)(v8 + 32)) {
    return 0LL;
  }
  CFRange v13 = *(const __CFString **)(v8 + 16);
  SCNetworkServiceRef v14 = SCNetworkServiceCopy(a1, v13);
  if (v14)
  {
    SCNetworkServiceRef v15 = v14;
    uint64_t v16 = _SC_LOG_DEFAULT();
    uint64_t v17 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v19 = (char *)&v84 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v16, v17, v19);
    }

    uint64_t v8 = 0LL;
LABEL_11:
    CFRelease(v15);
    return v8;
  }

  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)v8);
  if (!Interface)
  {
    SCPreferencesRef v37 = _SC_LOG_DEFAULT();
    uint64_t v38 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v37, (os_log_type_t)v38)) {
      goto LABEL_63;
    }
    return 0LL;
  }

  uint64_t v21 = __SCNetworkInterfaceCopyInterfaceEntity(Interface);
  if (!v21)
  {
    SCPreferencesRef v37 = _SC_LOG_DEFAULT();
    uint64_t v38 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v37, (os_log_type_t)v38))
    {
LABEL_63:
      uint64_t v73 = _os_log_pack_size();
      CFTypeRef v74 = (char *)&v84 - ((MEMORY[0x1895F8858](v73) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v37, v38, v74);
    }

    return 0LL;
  }

  CFRange v22 = v21;
  if (a3
    && (CFIndex v23 = (const __CFString *)CFDictionaryGetValue(v21, @"DeviceName")) != 0LL
    && (uint64_t v24 = v23, (v25 = (const __CFDictionary *)CFDictionaryGetValue(a3, v23)) != 0LL))
  {
    __int128 v26 = v25;
    uint64_t v27 = _SC_LOG_DEFAULT();
    LODWORD(v86) = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v27, (os_log_type_t)v86))
    {
      uint64_t v28 = _os_log_pack_size();
      *(void *)&__int128 v84 = v27;
      CFTypeRef v85 = &v84;
      uint64_t v29 = MEMORY[0x1895F8858](v28);
      CFIndex v87 = v26;
      uint64_t v30 = (char *)&v84 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v31 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v31 = 138412546;
      *(void *)(v31 + 4) = v24;
      *(_WORD *)(v31 + 12) = 2112;
      *(void *)(v31 + 14) = v87;
      CFIndex v32 = v30;
      __int128 v26 = v87;
      __SC_log_send(6, v84, v86, v32);
    }

    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v22);
    CFDictionarySetValue(MutableCopy, @"DeviceName", v26);
    CFIndex v87 = MutableCopy;
    uint64_t v34 = (const __CFString *)CFDictionaryGetValue(MutableCopy, @"UserDefinedName");
    if (v34)
    {
      uint64_t v35 = (const __CFString *)v26;
      CFMutableStringRef v36 = CFStringCreateMutableCopy(0LL, 0LL, v34);
      v89.length = CFStringGetLength(v36);
      v89.io_name_t location = 0LL;
      CFStringFindAndReplace(v36, v24, v35, v89, 0LL);
      CFDictionarySetValue(v87, @"UserDefinedName", v36);
      CFRelease(v36);
    }

    CFRelease(v22);
  }

  else
  {
    CFIndex v87 = v22;
  }

  __int128 v39 = _SCNetworkInterfaceCreateWithEntity(0LL, v87, (uint64_t)&__SCNetworkInterfaceSearchExternal);
  if (!a4 || !a5 || !CFDictionaryGetValueIfPresent(a5, (const void *)v8, (const void **)value))
  {
    io_registry_entry_t v69 = _SC_LOG_DEFAULT();
    uint64_t v70 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v69, (os_log_type_t)v70))
    {
LABEL_55:
      uint64_t v8 = 0LL;
      SCNetworkServiceRef v15 = 0LL;
      goto LABEL_56;
    }

LABEL_54:
    uint64_t v71 = _os_log_pack_size();
    CFMutableStringRef v72 = (char *)&v84 - ((MEMORY[0x1895F8858](v71) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v69, v70, v72);
    goto LABEL_55;
  }

  SCNetworkServiceRef v40 = SCNetworkServiceCreate(a1, v39);
  if (!v40)
  {
    io_registry_entry_t v69 = _SC_LOG_DEFAULT();
    uint64_t v70 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v69, (os_log_type_t)v70)) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }

  SCNetworkServiceRef v15 = v40;
  Boolean Enabled = SCNetworkServiceGetEnabled((SCNetworkServiceRef)v8);
  if (!SCNetworkServiceSetEnabled(v15, Enabled))
  {
    SCNetworkServiceRemove(v15);
    CFTypeRef v76 = _SC_LOG_DEFAULT();
    uint64_t v77 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v76, (os_log_type_t)v77)) {
      goto LABEL_75;
    }
    goto LABEL_76;
  }

  if (!SCNetworkServiceEstablishDefaultConfiguration(v15))
  {
    SCNetworkServiceRemove(v15);
    CFTypeRef v76 = _SC_LOG_DEFAULT();
    uint64_t v77 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v76, (os_log_type_t)v77))
    {
LABEL_75:
      uint64_t v82 = _os_log_pack_size();
      CFTypeRef v83 = (char *)&v84 - ((MEMORY[0x1895F8858](v82) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v76, v77, v83);
    }

LABEL_76:
    uint64_t v8 = 0LL;
    goto LABEL_56;
  }

  _SCNetworkServiceSetServiceID((uint64_t)v15, v13);
  if (CFArrayGetCount((CFArrayRef)value[0]) < 1) {
    goto LABEL_72;
  }
  LODWORD(v85) = 0;
  CFIndex v43 = 0LL;
  *(void *)&__int128 v42 = 138412290LL;
  __int128 v84 = v42;
  os_log_t v86 = v39;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)value[0], v43);
    uint64_t v45 = (const __SCNetworkSet *)CFDictionaryGetValue(a4, ValueAtIndex);
    if (v45)
    {
      uint64_t v46 = v45;
      uint64_t v47 = _SC_LOG_DEFAULT();
      uint64_t v48 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v47, (os_log_type_t)v48))
      {
        uint64_t v49 = _os_log_pack_size();
        CFTypeRef v50 = (char *)&v84 - ((MEMORY[0x1895F8858](v49) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v51 = _os_log_pack_fill();
        CFStringRef SetID = SCNetworkSetGetSetID(v46);
        *(_DWORD *)uint64_t v51 = v84;
        *(void *)(v51 + 4) = SetID;
        __SC_log_send(6, (uint64_t)v47, v48, v50);
      }

      if (SCNetworkSetAddService(v46, v15))
      {
        LODWORD(v85) = 1;
      }

      else
      {
        CFRange v53 = _SC_LOG_DEFAULT();
        uint64_t v54 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v53, (os_log_type_t)v54))
        {
          uint64_t v55 = _os_log_pack_size();
          CFTypeRef v56 = (char *)&v84 - ((MEMORY[0x1895F8858](v55) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v53, v54, v56);
        }
      }

      __int128 v39 = v86;
    }

    ++v43;
  }

  while (v43 < CFArrayGetCount((CFArrayRef)value[0]));
  if (!(_DWORD)v85)
  {
LABEL_72:
    SCNetworkServiceRemove(v15);
    uint64_t v78 = _SC_LOG_DEFAULT();
    uint64_t v79 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v78, (os_log_type_t)v79))
    {
      uint64_t v80 = _os_log_pack_size();
      CFDictionaryRef v81 = (char *)&v84 - ((MEMORY[0x1895F8858](v80) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v78, v79, v81);
    }

    goto LABEL_76;
  }

  CFStringRef Name = __SCNetworkServiceGetName((CFTypeRef)v8, 0);
  if (Name)
  {
    if (!SCNetworkServiceSetName(v15, Name))
    {
      CFTypeID v58 = _SC_LOG_DEFAULT();
      uint64_t v59 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v58, (os_log_type_t)v59))
      {
        uint64_t v60 = _os_log_pack_size();
        uint64_t v61 = (char *)&v84 - ((MEMORY[0x1895F8858](v60) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v58, v59, v61);
      }
    }
  }

  CFTypeID v62 = SCNetworkServiceCopyProtocols((SCNetworkServiceRef)v8);
  if (v62)
  {
    uint64_t v63 = v62;
    if (CFArrayGetCount(v62) >= 1)
    {
      CFIndex v64 = 0LL;
      do
      {
        CFTypeID v65 = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v63, v64);
        uint64_t Configuration = SCNetworkProtocolGetConfiguration(v65);
        CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(v65);
        Boolean v68 = SCNetworkProtocolGetEnabled(v65);
        __SCNetworkServiceAddProtocolToService(v15, ProtocolType, Configuration, v68);
        ++v64;
      }

      while (v64 < CFArrayGetCount(v63));
    }

    CFRelease(v63);
  }

  copyInterfaceConfiguration((const __SCNetworkService *)v8, v15);
  uint64_t v8 = 1LL;
LABEL_56:
  if (v87) {
    CFRelease(v87);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v15) {
    goto LABEL_11;
  }
  return v8;
}

SCNetworkInterfaceRef copyInterfaceConfiguration(const __SCNetworkService *a1, const __SCNetworkService *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  SCNetworkInterfaceRef result = SCNetworkServiceGetInterface(a2);
  if (Interface)
  {
    uint64_t v5 = result;
    if (result)
    {
      CFStringRef v6 = @"PPP";
      uint64_t v29 = @"L2TP";
      CFIndex v7 = @"IPSec";
      uint64_t v27 = @"IPSec";
      uint64_t v28 = @"PPP";
      do
      {
        uint64_t Configuration = SCNetworkInterfaceGetConfiguration(Interface);
        if ((Configuration || !SCError()) && !SCNetworkInterfaceSetConfiguration(v5, Configuration))
        {
          CFStringRef v9 = _SC_LOG_DEFAULT();
          uint64_t v10 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
          {
            uint64_t v11 = _os_log_pack_size();
            CFTypeID v12 = (char *)&v27 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            CFRange v13 = v12;
            CFIndex v7 = v27;
            __SC_log_send(6, (uint64_t)v9, v10, v13);
            CFStringRef v6 = v28;
          }
        }

        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
        if (CFEqual(InterfaceType, v6))
        {
          SCNetworkServiceRef v15 = SCNetworkInterfaceGetInterface(Interface);
          if (v15)
          {
            CFStringRef v16 = SCNetworkInterfaceGetInterfaceType(v15);
            if (CFEqual(v16, v29))
            {
              Extendeduint64_t Configuration = SCNetworkInterfaceGetExtendedConfiguration(Interface, v7);
              if ((ExtendedConfiguration || !SCError())
                && !SCNetworkInterfaceSetExtendedConfiguration(v5, v7, ExtendedConfiguration))
              {
                uint64_t v18 = _SC_LOG_DEFAULT();
                uint64_t v19 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v18, (os_log_type_t)v19))
                {
                  uint64_t v20 = _os_log_pack_size();
                  uint64_t v21 = (char *)&v27 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  __error();
                  CFIndex v7 = v27;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  __SC_log_send(6, (uint64_t)v18, v19, v21);
                  CFStringRef v6 = v28;
                }
              }
            }
          }
        }

        CFRange v22 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"EAPOL");
        if (v22 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"EAPOL", v22);
        }
        CFIndex v23 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"com.apple.payload");
        if (v23 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"com.apple.payload", v23);
        }
        uint64_t v24 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"EAP");
        if (v24 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"EAP", v24);
        }
        unsigned int v25 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"EAPOL.LoginWindow");
        if (v25 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"EAPOL.LoginWindow", v25);
        }
        __int128 v26 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"IPSec");
        if (v26 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"IPSec", v26);
        }
        SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(Interface);
        SCNetworkInterfaceRef result = SCNetworkInterfaceGetInterface(v5);
        if (!Interface) {
          break;
        }
        uint64_t v5 = result;
      }

      while (result);
    }
  }

  return result;
}

uint64_t __SCNetworkServiceCreate( SCPreferencesRef prefs, const __SCNetworkInterface *cf, const __CFString *a3)
{
  v39[1] = *MEMORY[0x1895F89C0];
  if (!cf) {
    return 0LL;
  }
  UserDefinedCFStringRef Name = a3;
  if (!a3)
  {
    UserDefinedCFStringRef Name = (const __CFString *)__SCNetworkInterfaceGetUserDefinedName(cf);
    if (!UserDefinedName)
    {
      unsigned int v25 = _SC_LOG_DEFAULT();
      uint64_t v26 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v25, (os_log_type_t)v26))
      {
        uint64_t v27 = _os_log_pack_size();
        uint64_t v28 = (char *)v39 - ((MEMORY[0x1895F8858](v27) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v25, v26, v28);
      }

      return 0LL;
    }
  }

  CFStringRef v6 = SCNetworkServiceCreate(prefs, cf);
  CFIndex v7 = v6;
  if (!v6)
  {
    SCNetworkServiceRef v15 = _SC_LOG_DEFAULT();
    uint64_t v16 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v18 = (char *)v39 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = SCError();
      uint64_t v21 = SCErrorString(v20);
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)(v19 + 4) = v21;
      __SC_log_send(6, (uint64_t)v15, v16, v18);
    }

    SCNetworkSetRef v9 = SCNetworkSetCopyCurrent(prefs);
    uint64_t v22 = 0LL;
    uint64_t v10 = 0LL;
    if (v9) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }

  if (!SCNetworkServiceSetName(v6, UserDefinedName))
  {
    CFIndex v23 = _SC_LOG_DEFAULT();
    uint64_t v24 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v23, (os_log_type_t)v24)) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }

  if (!SCNetworkServiceEstablishDefaultConfiguration(v7))
  {
    CFIndex v23 = _SC_LOG_DEFAULT();
    uint64_t v24 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v23, (os_log_type_t)v24))
    {
LABEL_23:
      uint64_t v29 = _os_log_pack_size();
      uint64_t v30 = (char *)v39 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v31 = _os_log_pack_fill();
      int v32 = SCError();
      uint64_t v33 = SCErrorString(v32);
      *(_DWORD *)uint64_t v31 = 136315138;
      *(void *)(v31 + 4) = v33;
      __SC_log_send(6, (uint64_t)v23, v24, v30);
    }

void *__SCNetworkServiceIsPPTP(void *result)
{
  if (result)
  {
    SCNetworkInterfaceRef result = (void *)result[3];
    if (result)
    {
      SCNetworkInterfaceRef result = (void *)__SCNetworkInterfaceGetEntitySubType((uint64_t)result);
      if (result) {
        return (void *)(CFEqual(result, @"PPTP") != 0);
      }
    }
  }

  return result;
}

void __SCNetworkServiceDeallocate(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  CFStringRef v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
}

BOOL __SCNetworkServiceEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)) {
    return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
  }
  return 0LL;
}

CFHashCode __SCNetworkServiceHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

__CFString *__SCNetworkServiceCopyDescription(void *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCNetworkService %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"id = %@", a1[2]);
  if (a1[4])
  {
    CFStringAppendFormat(Mutable, 0LL, @", prefs = %p", a1[4]);
  }

  else if (a1[5])
  {
    CFStringAppendFormat(Mutable, 0LL, @", store = %p", a1[5]);
  }

  if (a1[6]) {
    CFStringAppendFormat(Mutable, 0LL, @", io_name_t name = %@", a1[6]);
  }
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

Boolean SCNetworkSetAddService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_22:
      int v16 = 1002;
      goto LABEL_23;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_22;
    }
  }

  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_22;
  }
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!service || CFGetTypeID(service) != TypeID || !*((void *)service + 4)) {
    goto LABEL_22;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v10 = __log_SCNetworkConfiguration();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      uint64_t v13 = (char *)&block - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 138412546;
      *(void *)(v14 + 4) = set;
      *(_WORD *)(v14 + 12) = 2112;
      *(void *)(v14 + 14) = service;
      __SC_log_send(3, (uint64_t)v10, v11, v13);
    }

    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v35 = 0x40000000LL;
    uint64_t v36 = ___SC_crash_once_block_invoke_4;
    SCPreferencesRef v37 = &__block_descriptor_tmp_16;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v38 = "SCNetworkSetAddService() w/removed set";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_22;
    }
LABEL_41:
    dispatch_once(&_SC_crash_once_once_4, &block);
    goto LABEL_22;
  }

  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v17 = __log_SCNetworkConfiguration();
    uint64_t v18 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v17, (os_log_type_t)v18))
    {
      uint64_t v19 = _os_log_pack_size();
      int v20 = (char *)&block - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412546;
      *(void *)(v21 + 4) = set;
      *(_WORD *)(v21 + 12) = 2112;
      *(void *)(v21 + 14) = service;
      __SC_log_send(3, (uint64_t)v17, v18, v20);
    }

    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v35 = 0x40000000LL;
    uint64_t v36 = ___SC_crash_once_block_invoke_4;
    SCPreferencesRef v37 = &__block_descriptor_tmp_16;
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v38 = "SCNetworkSetAddService() w/removed service";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }

  CFStringRef v6 = SCNetworkSetCopyServices(set);
  if (v6)
  {
    CFIndex v7 = v6;
    v42.length = CFArrayGetCount(v6);
    v42.io_name_t location = 0LL;
    int v8 = CFArrayContainsValue(v7, v42, service);
    CFRelease(v7);
    if (v8)
    {
      LOBYTE(v9) = 1;
      return v9;
    }
  }

  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
  if (Interface
    && __SCNetworkInterfaceIsBusyMember(*((const __SCPreferences **)service + 4), Interface, 1))
  {
    int v16 = 1001;
LABEL_23:
    _SCErrorSet(v16);
    LOBYTE(v9) = 0;
    return v9;
  }

  CFIndex v23 = SCNetworkServiceGetInterface(service);
  if (v23) {
    uint64_t v24 = __SCNetworkInterfaceCopyDeepConfiguration(set, v23);
  }
  else {
    uint64_t v24 = 0LL;
  }
  SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity( 0LL,  *((void *)set + 2),  *((void *)service + 2),  0LL);
  BOOL v26 = SCPreferencesPathGetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity) != 0LL;
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, *((void *)service + 2), 0LL);
  if (SCPreferencesPathSetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity, NetworkServiceEntity))
  {
    _SCNetworkInterfaceCacheOpen();
    int v9 = ensure_unique_service_name(service);
    _SCNetworkInterfaceCacheClose();
    if (!v9) {
      SCPreferencesPathRemoveValue(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity);
    }
  }

  else
  {
    int v9 = 0;
  }

  CFRelease(SetNetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  if (v9)
  {
    if (v23) {
      __SCNetworkInterfaceSetDeepConfiguration(set, v23, v24, v28);
    }
    _serviceOrder_add((SCPreferencesRef *)set, service, v26);
    *((_BYTE *)set + 40) = 1;
    uint64_t v29 = __log_SCNetworkConfiguration();
    uint64_t v30 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v29, (os_log_type_t)v30))
    {
      uint64_t v31 = _os_log_pack_size();
      int v32 = (char *)&block - ((MEMORY[0x1895F8858](v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v33 = 138412546;
      *(void *)(v33 + 4) = set;
      *(_WORD *)(v33 + 12) = 2112;
      *(void *)(v33 + 14) = service;
      __SC_log_send(7, (uint64_t)v29, v30, v32);
    }
  }

  if (v24) {
    CFRelease(v24);
  }
  return v9;
}

BOOL __SCNetworkSetExists(uint64_t a1)
{
  if (*(void *)(a1 + 24)
    && (Set = SCPreferencesPathKeyCreateSet(0LL, *(void *)(a1 + 16)),
        CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), Set),
        CFRelease(Set),
        CFTypeID TypeID = CFDictionaryGetTypeID(),
        Value))
  {
    return CFGetTypeID(Value) == TypeID;
  }

  else
  {
    return 0LL;
  }

uint64_t ensure_unique_service_name(const __SCNetworkService *a1)
{
  v28[1] = *MEMORY[0x1895F89C0];
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  CFStringRef Name = SCNetworkServiceGetName(a1);
  uint64_t v4 = Name;
  if (Name) {
    CFRetain(Name);
  }
  uint64_t v5 = SCNetworkServiceSetName(a1, v4);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
  }

  else
  {
    CFIndex v7 = (const CFArrayCallBacks *)MEMORY[0x189605228];
    while (SCError() == 1005)
    {
      if (!v4) {
        goto LABEL_18;
      }
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, v4, @" ");
      if (ArrayBySeparatingStrings)
      {
        int v9 = ArrayBySeparatingStrings;
        CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, ArrayBySeparatingStrings);
        CFRelease(v9);
      }

      else
      {
        CFMutableDictionaryRef MutableCopy = CFArrayCreateMutable(0LL, 0LL, v7);
        CFArrayAppendValue(MutableCopy, v4);
      }

      CFIndex Count = CFArrayGetCount(MutableCopy);
      if (Count < 2
        || (CFIndex v12 = Count - 1,
            CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, Count - 1),
            IntCFDictionaryRef Value = CFStringGetIntValue(ValueAtIndex),
            IntValue < 1))
      {
        uint64_t v15 = 2LL;
      }

      else
      {
        uint64_t v15 = (IntValue + 1);
        CFArrayRemoveValueAtIndex(MutableCopy, v12);
      }

      CFStringRef v16 = CFStringCreateWithFormat(0LL, 0LL, @"%d", v15);
      CFArrayAppendValue(MutableCopy, v16);
      CFRelease(v16);
      uint64_t v17 = CFStringCreateByCombiningStrings(0LL, MutableCopy, @" ");
      CFRelease(MutableCopy);
      if (!v17)
      {
LABEL_18:
        uint64_t v19 = __log_SCNetworkConfiguration();
        uint64_t v20 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v19, (os_log_type_t)v20)) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }

      CFRelease(v4);
      uint64_t v18 = SCNetworkServiceSetName(a1, v17);
      uint64_t v4 = v17;
      if ((_DWORD)v18)
      {
        uint64_t v6 = v18;
        goto LABEL_24;
      }
    }

    uint64_t v19 = __log_SCNetworkConfiguration();
    uint64_t v20 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v19, (os_log_type_t)v20)) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v21 = _os_log_pack_size();
    uint64_t v22 = (char *)v28 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    LocalizedDisplayCFStringRef Name = SCNetworkInterfaceGetLocalizedDisplayName(Interface);
    int v25 = SCError();
    BOOL v26 = SCErrorString(v25);
    *(_DWORD *)uint64_t v23 = 138412546;
    *(void *)(v23 + 4) = LocalizedDisplayName;
    *(_WORD *)(v23 + 12) = 2080;
    *(void *)(v23 + 14) = v26;
    __SC_log_send(6, (uint64_t)v19, v20, v22);
LABEL_22:
    uint64_t v6 = 0LL;
  }

  uint64_t v17 = v4;
  if (v4) {
LABEL_24:
  }
    CFRelease(v17);
  return v6;
}

void _serviceOrder_add(SCPreferencesRef *a1, SCNetworkServiceRef service, int a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  uint64_t v7 = _serviceOrder(service);
  ServiceOrder = SCNetworkSetGetServiceOrder((SCNetworkSetRef)a1);
  if (ServiceOrder) {
    CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, ServiceOrder);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }
  uint64_t v10 = MutableCopy;
  if (!MutableCopy) {
    _serviceOrder_add_cold_1();
  }
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count < 1) {
    goto LABEL_12;
  }
  CFIndex v12 = Count;
  uint64_t v13 = 0LL;
  for (CFIndex i = 0LL; i != v12; ++i)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
    if (CFEqual(ValueAtIndex, ServiceID)) {
      ++v13;
    }
  }

  if (v13 == 1)
  {
    CFRelease(v10);
    return;
  }

  if (v13)
  {
    uint64_t v21 = __log_SCNetworkConfiguration();
    uint64_t v22 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v21, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      v36[1] = (uint64_t)v36;
      uint64_t v24 = MEMORY[0x1895F8858](v23);
      v36[0] = (uint64_t)v21;
      int v25 = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      uint64_t v27 = "";
      *(_DWORD *)uint64_t v26 = 136315650;
      if (!a3) {
        uint64_t v27 = "new ";
      }
      *(void *)(v26 + 4) = v27;
      *(_WORD *)(v26 + 12) = 2048;
      *(void *)(v26 + 14) = v13;
      *(_WORD *)(v26 + 22) = 2112;
      *(void *)(v26 + 24) = service;
      __SC_log_send(3, v36[0], v22, v25);
    }

    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v38 = 0x40000000LL;
    uint64_t v39 = ___SC_crash_once_block_invoke_4;
    uint64_t v40 = &__block_descriptor_tmp_16;
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
    uint64_t v41 = "SCNetworkSetAddService() w/multiple ServiceOrder references";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, &block);
    }
    _serviceOrder_clear(v10, ServiceID);
  }

  else
  {
LABEL_12:
    if (a3)
    {
      CFStringRef v16 = __log_SCNetworkConfiguration();
      uint64_t v17 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v16, (os_log_type_t)v17))
      {
        uint64_t v18 = _os_log_pack_size();
        uint64_t v19 = (char *)v36 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v20 = 138412290;
        *(void *)(v20 + 4) = service;
        __SC_log_send(3, (uint64_t)v16, v17, v19);
      }

      blocCFIndex k = MEMORY[0x1895F87A8];
      uint64_t v38 = 0x40000000LL;
      uint64_t v39 = ___SC_crash_once_block_invoke_4;
      uint64_t v40 = &__block_descriptor_tmp_16;
      uint64_t v42 = 0LL;
      uint64_t v43 = 0LL;
      uint64_t v41 = "SCNetworkSetAddService() w/updated service not in ServiceOrder";
      if (_SC_crash_once_once_4 != -1) {
        dispatch_once(&_SC_crash_once_once_4, &block);
      }
    }
  }

  CFIndex v28 = CFArrayGetCount(v10);
  if (v28 < 1)
  {
    CFIndex v30 = 0LL;
  }

  else
  {
    CFIndex v29 = v28;
    CFIndex v30 = 0LL;
    for (CFIndex j = 0LL; j != v29; ++j)
    {
      int v32 = (const __CFString *)CFArrayGetValueAtIndex(v10, j);
      CFTypeID TypeID = CFStringGetTypeID();
      if (v32)
      {
        if (CFGetTypeID(v32) == TypeID)
        {
          uint64_t v34 = SCNetworkServiceCopy(a1[3], v32);
          if (v34)
          {
            uint64_t v35 = v34;
            if (v7 >= _serviceOrder(v34)) {
              CFIndex v30 = j + 1;
            }
            CFRelease(v35);
          }
        }
      }
    }
  }

  CFArrayInsertValueAtIndex(v10, v30, ServiceID);
  SCNetworkSetSetServiceOrder((SCNetworkSetRef)a1, v10);
  CFRelease(v10);
}

SCNetworkSetRef SCNetworkSetCopy(SCPreferencesRef prefs, CFStringRef setID)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!setID || CFGetTypeID(setID) != TypeID)
  {
    int v9 = 1002;
LABEL_9:
    _SCErrorSet(v9);
    return 0LL;
  }

  Set = SCPreferencesPathKeyCreateSet(0LL, (uint64_t)setID);
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, Set);
  CFRelease(Set);
  CFTypeID v7 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7)
  {
    int v9 = 1004;
    goto LABEL_9;
  }

  SCNetworkSetRef result = (SCNetworkSetRef)__SCNetworkSetCreatePrivate(prefs, setID);
  if (!result) {
    SCNetworkSetCopy_cold_1();
  }
  *((_BYTE *)result + 40) = 1;
  return result;
}

uint64_t __SCNetworkSetCreatePrivate(const void *a1, const __CFString *a2)
{
  if (__SCNetworkSetInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0LL, a2);
    *(void *)(Instance + 24) = CFRetain(a1);
  }

  return Instance;
}

Boolean SCNetworkSetContainsInterface(SCNetworkSetRef set, SCNetworkInterfaceRef interface)
{
  CFArrayRef v3 = SCNetworkSetCopyServices(set);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  Boolean v5 = __SCNetworkServiceExistsForInterface(v3, interface);
  CFRelease(v4);
  return v5;
}

CFArrayRef SCNetworkSetCopyServices(SCNetworkSetRef set)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_32:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_32;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_32;
  }
  SetNetworkService = SCPreferencesPathKeyCreateSetNetworkService(0LL, *((void *)set + 2), 0LL);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), SetNetworkService);
  CFRelease(SetNetworkService);
  if (!Value) {
    return CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFIndex Count = CFDictionaryGetCount(Value);
  if (Count < 1) {
    return Mutable;
  }
  CFIndex v8 = Count;
  CFMutableArrayRef v43 = Mutable;
  else {
    int v9 = (const void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
  }
  CFDictionaryGetKeysAndValues(Value, v9, 0LL);
  uint64_t v11 = 0LL;
  uint64_t v44 = @"Interface";
  *(void *)&__int128 v12 = 138412546LL;
  __int128 v46 = v12;
  *(void *)&__int128 v12 = 138412802LL;
  __int128 v45 = v12;
  do
  {
    SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity( 0LL,  *((void *)set + 2),  (uint64_t)v9[v11],  0LL);
    LinCFIndex k = SCPreferencesPathGetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity);
    CFRelease(SetNetworkServiceEntity);
    if (!Link)
    {
      uint64_t v24 = __log_SCNetworkConfiguration();
      uint64_t v25 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v24, (os_log_type_t)v25)) {
        goto LABEL_27;
      }
      uint64_t v26 = _os_log_pack_size();
      uint64_t v27 = (char *)v42 - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      CFIndex v29 = v9[v11];
      uint64_t v30 = *((void *)set + 2);
      *(_DWORD *)uint64_t v28 = v46;
      *(void *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 12) = 2112;
      *(void *)(v28 + 14) = v30;
      uint64_t v31 = (uint64_t)v24;
      uint64_t v32 = v25;
      uint64_t v33 = v27;
LABEL_23:
      __SC_log_send(6, v31, v32, v33);
      goto LABEL_27;
    }

    if (!SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), Link))
    {
      uint64_t v34 = __log_SCNetworkConfiguration();
      uint64_t v35 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v34, (os_log_type_t)v35)) {
        goto LABEL_27;
      }
      uint64_t v36 = _os_log_pack_size();
      SCPreferencesRef v37 = (char *)v42 - ((MEMORY[0x1895F8858](v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v38 = _os_log_pack_fill();
      uint64_t v39 = v9[v11];
      uint64_t v40 = *((void *)set + 2);
      *(_DWORD *)uint64_t v38 = v45;
      *(void *)(v38 + 4) = v39;
      *(_WORD *)(v38 + 12) = 2112;
      *(void *)(v38 + 14) = v40;
      *(_WORD *)(v38 + 22) = 2112;
      *(void *)(v38 + 24) = Link;
      uint64_t v31 = (uint64_t)v34;
      uint64_t v32 = v35;
      uint64_t v33 = v37;
      goto LABEL_23;
    }

    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, Link, @"/");
    if (CFArrayGetCount(ArrayBySeparatingStrings) == 3)
    {
      CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2LL);
      CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, (uint64_t)ValueAtIndex, 0LL);
      if (CFEqual(NetworkServiceEntity, Link))
      {
        uint64_t v18 = SCPreferencesPathKeyCreateNetworkServiceEntity(0LL, (uint64_t)ValueAtIndex, (uint64_t)v44);
        uint64_t v19 = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), v18);
        CFRelease(v18);
        if (__SCNetworkInterfaceEntityIsPPTP(v19))
        {
          uint64_t v20 = __log_SCNetworkConfiguration();
          uint64_t v21 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v20, (os_log_type_t)v21))
          {
            uint64_t v22 = _os_log_pack_size();
            v42[1] = v42;
            uint64_t v23 = (char *)v42 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(6, (uint64_t)v20, v21, v23);
          }
        }

        else
        {
          uint64_t Private = __SCNetworkServiceCreatePrivate(0LL, *((const void **)set + 3), ValueAtIndex, 0LL);
          CFArrayAppendValue(v43, Private);
          CFRelease(Private);
        }
      }

      CFRelease(NetworkServiceEntity);
    }

    CFRelease(ArrayBySeparatingStrings);
LABEL_27:
    ++v11;
  }

  while (v8 != v11);
  return v43;
}

CFArrayRef SCNetworkSetCopyAll(SCPreferencesRef prefs)
{
  v26[16] = *MEMORY[0x1895F89C0];
  Sets = SCPreferencesPathKeyCreateSets(0LL);
  SCPreferencesRef v23 = prefs;
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, Sets);
  CFRelease(Sets);
  if (!Value) {
    return CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFIndex Count = CFDictionaryGetCount(Value);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    if ((unint64_t)Count < 0x11)
    {
      CFTypeID v7 = (const void **)v26;
      CFIndex v8 = (const void **)&v25;
    }

    else
    {
      CFTypeID v7 = (const void **)MEMORY[0x186E08750](0LL, 8 * Count, 0LL);
      CFIndex v8 = (const void **)MEMORY[0x186E08750](0LL, 8 * v6, 0LL);
    }

    CFDictionaryGetKeysAndValues(Value, v7, v8);
    uint64_t v10 = 0LL;
    *(void *)&__int128 v11 = 138412290LL;
    __int128 v22 = v11;
    do
    {
      __int128 v12 = v8[v10];
      CFTypeID v13 = CFDictionaryGetTypeID();
      if (v12 && CFGetTypeID(v12) == v13)
      {
        uint64_t Private = (_BYTE *)__SCNetworkSetCreatePrivate(v23, (const __CFString *)v7[v10]);
        if (!Private) {
          SCNetworkSetCopyAll_cold_1();
        }
        uint64_t v15 = Private;
        Private[40] = 1;
        CFArrayAppendValue(Mutable, Private);
        CFRelease(v15);
      }

      else
      {
        CFStringRef v16 = __log_SCNetworkConfiguration();
        uint64_t v17 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
        {
          uint64_t v18 = _os_log_pack_size();
          uint64_t v19 = (char *)&v22 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          uint64_t v21 = v7[v10];
          *(_DWORD *)uint64_t v20 = v22;
          *(void *)(v20 + 4) = v21;
          __SC_log_send(6, (uint64_t)v16, v17, v19);
        }
      }

      ++v10;
    }

    while (v6 != v10);
    if (v7 != v26)
    {
      CFAllocatorDeallocate(0LL, v7);
      CFAllocatorDeallocate(0LL, v8);
    }
  }

  return Mutable;
}

__CFArray *SCNetworkSetCopyAvailableInterfaces(uint64_t a1)
{
  uint64_t v1 = *(const __SCPreferences **)(a1 + 24);
  uint64_t v2 = _SCNetworkInterfaceCopyAllWithPreferences(v1);
  CFIndex Count = CFArrayGetCount(v2);
  if (v1) {
    BOOL v4 = Count == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return v2;
  }
  uint64_t v6 = Count;
  CFMutableArrayRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
  CFIndex v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(v1);
  if (v8)
  {
    int v9 = v8;
    __SCBridgeInterfaceListCollectMembers(v8, Mutable, 0);
    CFRelease(v9);
  }

  if (!CFSetGetCount(Mutable))
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v2;
  }

  Boolean v5 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (v6 >= 1)
  {
    for (CFIndex i = 0LL; i != v6; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
      if (!CFSetContainsValue(Mutable, ValueAtIndex)) {
        CFArrayAppendValue(v5, ValueAtIndex);
      }
    }
  }

  CFRelease(v2);
  CFRelease(Mutable);
  return v5;
}

SCNetworkSetRef SCNetworkSetCopyCurrent(SCPreferencesRef prefs)
{
  v14[1] = *MEMORY[0x1895F89C0];
  CFDictionaryRef Value = (const __CFString *)SCPreferencesGetValue(prefs, @"CurrentSet");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, Value, @"/");
  Boolean v5 = 0LL;
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 3)
  {
    CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2LL);
    CFStringRef Set = SCPreferencesPathKeyCreateSet(0LL, (uint64_t)ValueAtIndex);
    if (CFEqual(Set, Value))
    {
      uint64_t Private = __SCNetworkSetCreatePrivate(prefs, ValueAtIndex);
      if (!Private) {
        SCNetworkSetCopyCurrent_cold_1();
      }
      Boolean v5 = (const __SCNetworkSet *)Private;
      *(_BYTE *)(Private + 40) = 1;
    }

    else
    {
      int v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        __int128 v12 = (char *)v14 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v9, v10, v12);
      }

      Boolean v5 = 0LL;
    }

    CFRelease(Set);
  }

  CFRelease(ArrayBySeparatingStrings);
  return v5;
}

SCNetworkSetRef SCNetworkSetCreate(SCPreferencesRef prefs)
{
  v16[1] = *MEMORY[0x1895F89C0];
  Sets = SCPreferencesPathKeyCreateSets(0LL);
  CFStringRef UniqueChild = SCPreferencesPathCreateUniqueChild(prefs, Sets);
  CFRelease(Sets);
  if (!UniqueChild) {
    return 0LL;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, UniqueChild, @"/");
  CFDictionaryRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2LL);
  uint64_t Private = __SCNetworkSetCreatePrivate(prefs, ValueAtIndex);
  if (!Private) {
    SCNetworkSetCreate_cold_1();
  }
  CFTypeID v7 = (_BYTE *)Private;
  CFRelease(ArrayBySeparatingStrings);
  v7[40] = 0;
  CFIndex v8 = CFDictionaryCreate(0LL, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  int v9 = SCPreferencesPathSetValue(prefs, UniqueChild, v8);
  CFRelease(UniqueChild);
  CFRelease(v8);
  if (!v9)
  {
    CFRelease(v7);
    return 0LL;
  }

  uint64_t v10 = __log_SCNetworkConfiguration();
  uint64_t v11 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v10, (os_log_type_t)v11))
  {
    uint64_t v12 = _os_log_pack_size();
    CFTypeID v13 = (char *)v16 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 138412290;
    *(void *)(v14 + 4) = v7;
    __SC_log_send(7, (uint64_t)v10, v11, v13);
  }

  return (SCNetworkSetRef)v7;
}

const __SCNetworkSet *_SCNetworkSetCreateDefault(const __SCPreferences *a1)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  SCNetworkSetRef v2 = SCNetworkSetCopyCurrent(a1);
  if (v2)
  {
    SCNetworkSetRef v3 = v2;
    BOOL v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      CFTypeID v7 = &v37[-((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v4, v5, v7);
    }

    CFRelease(v3);
    _SCErrorSet(1005);
    return 0LL;
  }

  SCNetworkSetRef v10 = SCNetworkSetCreate(a1);
  if (!v10)
  {
    SCPreferencesRef v23 = __log_SCNetworkConfiguration();
    uint64_t v24 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v23, (os_log_type_t)v24))
    {
      uint64_t v25 = _os_log_pack_size();
      uint64_t v26 = &v37[-((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v27 = _os_log_pack_fill();
      int v28 = SCError();
      CFIndex v29 = SCErrorString(v28);
      *(_DWORD *)uint64_t v27 = 136315138;
      *(void *)(v27 + 4) = v29;
      __SC_log_send(5, (uint64_t)v23, v24, v26);
    }

    return 0LL;
  }

  CFIndex v8 = v10;
  uint64_t v11 = copy_default_set_name(1);
  int v12 = SCNetworkSetSetName(v8, v11);
  CFRelease(v11);
  *((void *)v8 + 6) = *MEMORY[0x189604DE8];
  if (!v12)
  {
    uint64_t v30 = __log_SCNetworkConfiguration();
    uint64_t v31 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v30, (os_log_type_t)v31))
    {
      uint64_t v32 = _os_log_pack_size();
      uint64_t v33 = &v37[-((MEMORY[0x1895F8858](v32) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v34 = _os_log_pack_fill();
      int v35 = SCError();
      uint64_t v36 = SCErrorString(v35);
      *(_DWORD *)uint64_t v34 = 136315138;
      *(void *)(v34 + 4) = v36;
      __SC_log_send(5, (uint64_t)v30, v31, v33);
    }

    goto LABEL_22;
  }

  int v13 = SCNetworkSetSetCurrent(v8);
  if (!v13)
  {
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
    {
      uint64_t v16 = _os_log_pack_size();
      uint64_t v17 = &v37[-((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v18 = _os_log_pack_fill();
      int v19 = SCError();
      uint64_t v20 = SCErrorString(v19);
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = v20;
      __SC_log_send(5, (uint64_t)v14, v15, v17);
    }
  }

  if (!SCPreferencesGetValue(a1, @"Model"))
  {
    uint64_t v21 = (const void *)_SC_hw_model(0);
    SCPreferencesSetValue(a1, @"Model", v21);
  }

  if (!SCPreferencesGetValue(a1, @"__VERSION__"))
  {
    int valuePtr = 20191120;
    CFNumberRef v22 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
    SCPreferencesSetValue(a1, @"__VERSION__", v22);
    CFRelease(v22);
  }

  if (!v13)
  {
LABEL_22:
    SCNetworkSetRemove(v8);
    CFRelease(v8);
    return 0LL;
  }

  return v8;
}

CFStringRef copy_default_set_name(int a1)
{
  if (a1)
  {
    if (copy_default_set_name_once_40 != -1) {
      dispatch_once(&copy_default_set_name_once_40, &__block_literal_global_42_0);
    }
    uint64_t v1 = &copy_default_set_name_localized;
  }

  else
  {
    if (copy_default_set_name_once != -1) {
      dispatch_once(&copy_default_set_name_once, &__block_literal_global_14);
    }
    uint64_t v1 = &copy_default_set_name_non_localized;
  }

  SCNetworkSetRef v2 = (const __CFString *)*v1;
  if (v2) {
    SCNetworkSetRef v3 = v2;
  }
  else {
    SCNetworkSetRef v3 = @"Automatic";
  }
  CFRetain(v3);
  return v3;
}

Boolean SCNetworkSetSetName(SCNetworkSetRef set, CFStringRef name)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set) {
      goto LABEL_16;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_16;
    }
  }

  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_16;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    SCNetworkSetRef v10 = __log_SCNetworkConfiguration();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      int v13 = (char *)block - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      CFStringRef v15 = @"<NULL>";
      if (name) {
        CFStringRef v15 = name;
      }
      *(_DWORD *)uint64_t v14 = 138412546;
      *(void *)(v14 + 4) = set;
      *(_WORD *)(v14 + 12) = 2112;
      *(void *)(v14 + 14) = v15;
      __SC_log_send(3, (uint64_t)v10, v11, v13);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkSetSetName() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_16;
  }

  if (!name)
  {
    int v9 = 0LL;
    uint64_t v6 = 0LL;
    goto LABEL_19;
  }

  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(name) != TypeID)
  {
LABEL_16:
    _SCErrorSet(1002);
    LOBYTE(v16) = 0;
    return v16;
  }

  uint64_t v6 = copy_default_set_name(0);
  int v7 = CFEqual(name, v6);
  CFIndex v8 = copy_default_set_name(1);
  int v9 = v8;
  if (!v7)
  {
    if (CFEqual(name, v6))
    {
LABEL_34:
      uint64_t v27 = SCNetworkSetCopyAll(*((SCPreferencesRef *)set + 3));
      if (v27)
      {
        int v28 = v27;
        CFIndex Count = CFArrayGetCount(v27);
        if (Count >= 1)
        {
          CFIndex v30 = Count;
          CFIndex v31 = 0LL;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v28, v31);
            CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
            if (!CFEqual(*((CFTypeRef *)set + 2), SetID))
            {
              CFStringRef v34 = SCNetworkSetGetName(ValueAtIndex);
              if (v34)
              {
                if (CFEqual(name, v34)) {
                  break;
                }
              }
            }

            if (v30 == ++v31) {
              goto LABEL_41;
            }
          }

          CFRelease(v28);
          int v26 = 1005;
          goto LABEL_29;
        }

LABEL_41:
        CFRelease(v28);
      }

LABEL_53:
      CFDictionarySetValue(Mutable, @"UserDefinedName", name);
      goto LABEL_54;
    }
  }

  else if (name)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    goto LABEL_53;
  }

  CFRelease(v35);
LABEL_58:
  LOBYTE(v16) = 0;
LABEL_59:
  if (v9) {
    CFRelease(v9);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v16;
}

Boolean SCNetworkSetSetCurrent(SCNetworkSetRef set)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_12:
      _SCErrorSet(1002);
      LOBYTE(v4) = 0;
      return v4;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_12;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_12;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    SCNetworkSetRef v10 = __log_SCNetworkConfiguration();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      int v13 = (char *)block - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 138412290;
      *(void *)(v14 + 4) = set;
      __SC_log_send(3, (uint64_t)v10, v11, v13);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkSetSetCurrent() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_12;
  }

  CFStringRef v3 = SCPreferencesPathKeyCreateSet(0LL, *((void *)set + 2));
  int v4 = SCPreferencesSetValue(*((SCPreferencesRef *)set + 3), @"CurrentSet", v3);
  CFRelease(v3);
  if (v4)
  {
    uint64_t v5 = __log_SCNetworkConfiguration();
    uint64_t v6 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      CFIndex v8 = (char *)block - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v9 = 138412290;
      *(void *)(v9 + 4) = set;
      __SC_log_send(7, (uint64_t)v5, v6, v8);
    }
  }

  return v4;
}

Boolean SCNetworkSetRemove(SCNetworkSetRef set)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_20:
      _SCErrorSet(1002);
LABEL_21:
      LOBYTE(v22) = 0;
      return v22;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_20;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_20;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v17 = __log_SCNetworkConfiguration();
    uint64_t v18 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v17, (os_log_type_t)v18))
    {
      uint64_t v19 = _os_log_pack_size();
      int v20 = (char *)block - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = set;
      __SC_log_send(3, (uint64_t)v17, v18, v20);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkSetRemove() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_20;
  }

  if (_SCNetworkSetIsDefault((const __CFBoolean **)set) && geteuid())
  {
    CFStringRef v3 = __log_SCNetworkConfiguration();
    uint64_t v4 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v6 = (char *)block - ((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)(v7 + 4) = set;
      __SC_log_send(3, (uint64_t)v3, v4, v6);
    }

    _SC_crash("The Automatic network set cannot be removed", 0LL, 0LL);
    goto LABEL_20;
  }

  CFPropertyListRef Value = SCPreferencesGetValue(*((SCPreferencesRef *)set + 3), @"CurrentSet");
  CFStringRef v9 = SCPreferencesPathKeyCreateSet(0LL, *((void *)set + 2));
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, v9))
  {
    uint64_t v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v14 = (char *)block - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      uint64_t v16 = *((void *)set + 2);
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = v16;
      __SC_log_send(7, (uint64_t)v11, v12, v14);
    }

    _SCErrorSet(1002);
    CFRelease(v9);
    goto LABEL_21;
  }

  int v22 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)set + 3), v9);
  CFRelease(v9);
  if (v22)
  {
    uint64_t v24 = __log_SCNetworkConfiguration();
    uint64_t v25 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v24, (os_log_type_t)v25))
    {
      uint64_t v26 = _os_log_pack_size();
      uint64_t v27 = (char *)block - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v28 = 138412290;
      *(void *)(v28 + 4) = set;
      __SC_log_send(7, (uint64_t)v24, v25, v27);
    }
  }

  return v22;
}

CFStringRef SCNetworkSetGetSetID(SCNetworkSetRef set)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set) {
      goto LABEL_6;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_6;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) == v2) {
    return (CFStringRef)*((void *)set + 2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t _SCNetworkSetIsDefault(const __CFBoolean **cf)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_17:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!cf) {
      goto LABEL_17;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_17;
  }
  CFStringRef v3 = cf[6];
  if (v3) {
    return CFBooleanGetValue(v3);
  }
  CFTypeRef v5 = _SCNetworkSetCopyUserDefinedName(cf);
  uint64_t v6 = cf[6];
  if (!v6)
  {
    uint64_t v7 = copy_default_set_name(0);
    if (v5 && CFEqual(v5, v7)) {
      CFIndex v8 = (const __CFBoolean **)MEMORY[0x189604DE8];
    }
    else {
      CFIndex v8 = (const __CFBoolean **)MEMORY[0x189604DE0];
    }
    uint64_t v6 = *v8;
    if (v7) {
      CFRelease(v7);
    }
    cf[6] = v6;
  }

  uint64_t Value = CFBooleanGetValue(v6);
  if (v5) {
    CFRelease(v5);
  }
  return Value;
}

CFTypeRef _SCNetworkSetCopyUserDefinedName(CFTypeRef cf)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!cf) {
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!cf) {
      return 0LL;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    CFStringRef Set = SCPreferencesPathKeyCreateSet(0LL, *((void *)cf + 2));
    uint64_t Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 3), Set);
    CFRelease(Set);
    if (Value)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(Value) == TypeID)
      {
        uint64_t v6 = CFDictionaryGetValue(Value, @"UserDefinedName");
        CFTypeID v7 = CFStringGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == v7) {
            return CFRetain(v6);
          }
        }
      }
    }
  }

  return 0LL;
}

CFStringRef SCNetworkSetGetName(SCNetworkSetRef set)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_7;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_7;
  }
  CFStringRef result = (CFStringRef)*((void *)set + 4);
  if (!result)
  {
    CFStringRef result = (CFStringRef)_SCNetworkSetCopyUserDefinedName(set);
    *((void *)set + 4) = result;
  }

  return result;
}

CFArrayRef SCNetworkSetGetServiceOrder(SCNetworkSetRef set)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_12:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_12;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_12;
  }
  CFArrayRef result = (CFArrayRef)SCPreferencesPathKeyCreateSetNetworkGlobalEntity( 0LL,  *((void *)set + 2),  (uint64_t)@"IPv4");
  if (!result) {
    return result;
  }
  CFArrayRef v4 = result;
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), (CFStringRef)result);
  CFRelease(v4);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value) {
    return 0LL;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFTypeID v7 = (const __CFArray *)CFDictionaryGetValue(Value, @"ServiceOrder");
  CFTypeID v8 = CFArrayGetTypeID();
  if (!v7) {
    return 0LL;
  }
  if (CFGetTypeID(v7) == v8) {
    return v7;
  }
  else {
    return 0LL;
  }
}

CFTypeID SCNetworkSetGetTypeID(void)
{
  if (__SCNetworkSetInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
  }
  return __kSCNetworkSetTypeID;
}

Boolean SCNetworkSetRemoveService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_26:
      _SCErrorSet(1002);
      LOBYTE(v26) = 0;
      return v26;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_26;
    }
  }

  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_26;
  }
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!service || CFGetTypeID(service) != TypeID || !*((void *)service + 4)) {
    goto LABEL_26;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v19 = (char *)&v47 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 138412546;
      *(void *)(v20 + 4) = set;
      *(_WORD *)(v20 + 12) = 2112;
      *(void *)(v20 + 14) = service;
      __SC_log_send(3, (uint64_t)v16, v17, v19);
    }

    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v52 = 0x40000000LL;
    CFRange v53 = ___SC_crash_once_block_invoke_4;
    uint64_t v54 = &__block_descriptor_tmp_16;
    uint64_t v56 = 0LL;
    uint64_t v57 = 0LL;
    uint64_t v55 = "SCNetworkSetRemoveService() w/removed set";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_26;
    }
LABEL_73:
    dispatch_once(&_SC_crash_once_once_4, &block);
    goto LABEL_26;
  }

  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v21 = __log_SCNetworkConfiguration();
    uint64_t v22 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v21, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      uint64_t v24 = (char *)&v47 - ((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v25 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v25 = 138412546;
      *(void *)(v25 + 4) = set;
      *(_WORD *)(v25 + 12) = 2112;
      *(void *)(v25 + 14) = service;
      __SC_log_send(3, (uint64_t)v21, v22, v24);
    }

    blocCFIndex k = MEMORY[0x1895F87A8];
    uint64_t v52 = 0x40000000LL;
    CFRange v53 = ___SC_crash_once_block_invoke_4;
    uint64_t v54 = &__block_descriptor_tmp_16;
    uint64_t v56 = 0LL;
    uint64_t v57 = 0LL;
    uint64_t v55 = "SCNetworkSetRemoveService() w/removed service";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }

  _serviceOrder_remove(set, service);
  SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity( 0LL,  *((void *)set + 2),  *((void *)service + 2),  0LL);
  if (SCPreferencesPathGetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity))
  {
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
    if (Interface)
    {
      CFTypeID v8 = __SCNetworkInterfaceCopyDeepConfiguration(set, Interface);
      if (v8) {
        __SCNetworkInterfaceSetDeepConfiguration(set, Interface, 0LL, v9);
      }
      DisablePrivateRelayCFDictionaryRef Value = __SCNetworkInterfaceGetDisablePrivateRelayValue((const __SCPreferences **)Interface);
      uint64_t v11 = DisablePrivateRelayValue;
      if (DisablePrivateRelayValue)
      {
        CFRetain(DisablePrivateRelayValue);
        __SCNetworkInterfaceSetDisablePrivateRelayValue((uint64_t)Interface, 0LL);
      }

      DisableUntilNeededCFDictionaryRef Value = __SCNetworkInterfaceGetDisableUntilNeededValue((const __SCPreferences **)Interface);
      uint64_t v13 = DisableUntilNeededValue;
      if (DisableUntilNeededValue)
      {
        CFRetain(DisableUntilNeededValue);
        __SCNetworkInterfaceSetDisableUntilNeededValue((uint64_t)Interface, 0LL);
      }

      EnableLowDataModeCFDictionaryRef Value = __SCNetworkInterfaceGetEnableLowDataModeValue((const __SCPreferences **)Interface);
      uint64_t v15 = EnableLowDataModeValue;
      if (EnableLowDataModeValue)
      {
        CFRetain(EnableLowDataModeValue);
        __SCNetworkInterfaceSetEnableLowDataModeValue(Interface, 0LL);
      }
    }

    else
    {
      uint64_t v15 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v11 = 0LL;
      CFTypeID v8 = 0LL;
    }

    int v26 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity);
    if (v26) {
      int v28 = 0;
    }
    else {
      int v28 = SCError();
    }
    if (v15 || v13 || v11 || v8)
    {
      int v49 = v28;
      CFTypeRef v50 = v8;
      CFIndex v29 = SCNetworkSetCopyServices(set);
      if (v29)
      {
        CFIndex v31 = v29;
        uint64_t v48 = v11;
        CFIndex Count = CFArrayGetCount(v29);
        if (Count < 1)
        {
LABEL_43:
          int v37 = 0;
        }

        else
        {
          CFIndex v33 = Count;
          CFIndex v34 = 0LL;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v31, v34);
            SCNetworkInterfaceRef v36 = SCNetworkServiceGetInterface(ValueAtIndex);
            if (v36)
            {
              if (CFEqual(Interface, v36)) {
                break;
              }
            }

            if (v33 == ++v34) {
              goto LABEL_43;
            }
          }

          int v37 = 1;
        }

        CFRelease(v31);
        uint64_t v11 = v48;
      }

      else
      {
        int v37 = 0;
      }

      if (v50)
      {
        if (v37) {
          uint64_t v38 = v50;
        }
        else {
          uint64_t v38 = 0LL;
        }
        __SCNetworkInterfaceSetDeepConfiguration(set, Interface, v38, v30);
        CFRelease(v50);
      }

      if (v11)
      {
        if (v37) {
          uint64_t v39 = v11;
        }
        else {
          uint64_t v39 = 0LL;
        }
        __SCNetworkInterfaceSetDisablePrivateRelayValue((uint64_t)Interface, v39);
        CFRelease(v11);
      }

      int v28 = v49;
      if (v13)
      {
        if (v37) {
          uint64_t v40 = v13;
        }
        else {
          uint64_t v40 = 0LL;
        }
        __SCNetworkInterfaceSetDisableUntilNeededValue((uint64_t)Interface, v40);
        CFRelease(v13);
      }

      if (v15)
      {
        if (v37) {
          uint64_t v41 = v15;
        }
        else {
          uint64_t v41 = 0LL;
        }
        __SCNetworkInterfaceSetEnableLowDataModeValue(Interface, v41);
        CFRelease(v15);
      }
    }

    CFRelease(SetNetworkServiceEntity);
    if (!v26)
    {
      _SCErrorSet(v28);
      return v26;
    }
  }

  else
  {
    CFRelease(SetNetworkServiceEntity);
    LOBYTE(v26) = 1;
  }

  uint64_t v42 = __log_SCNetworkConfiguration();
  uint64_t v43 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v42, (os_log_type_t)v43))
  {
    uint64_t v44 = _os_log_pack_size();
    __int128 v45 = (char *)&v47 - ((MEMORY[0x1895F8858](v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v46 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v46 = 138412546;
    *(void *)(v46 + 4) = set;
    *(_WORD *)(v46 + 12) = 2112;
    *(void *)(v46 + 14) = service;
    __SC_log_send(7, (uint64_t)v42, v43, v45);
  }

  return v26;
}

void _serviceOrder_remove(const __SCNetworkSet *a1, const __SCNetworkService *a2)
{
  v14[1] = *MEMORY[0x1895F89C0];
  ServiceOrder = SCNetworkSetGetServiceOrder(a1);
  if (ServiceOrder)
  {
    CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, ServiceOrder);
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(a2);
    uint64_t v7 = _serviceOrder_clear(MutableCopy, ServiceID);
    if (v7 >= 2)
    {
      uint64_t v8 = v7;
      __n128 v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        uint64_t v12 = (char *)v14 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v13 = 138412546;
        *(void *)(v13 + 4) = a2;
        *(_WORD *)(v13 + 12) = 2048;
        *(void *)(v13 + 14) = v8;
        __SC_log_send(3, (uint64_t)v9, v10, v12);
      }
    }

    SCNetworkSetSetServiceOrder(a1, MutableCopy);
    CFRelease(MutableCopy);
  }

Boolean SCNetworkSetSetServiceOrder(SCNetworkSetRef set, CFArrayRef newOrder)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set) {
      goto LABEL_19;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!set) {
      goto LABEL_19;
    }
  }

  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_19;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v15 = __log_SCNetworkConfiguration();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v18 = (char *)&v40 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 138412290;
      *(void *)(v19 + 4) = set;
      __SC_log_send(3, (uint64_t)v15, v16, v18);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "SCNetworkSetSetServiceOrder() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_19;
  }

  CFTypeID TypeID = CFArrayGetTypeID();
  if (!newOrder || CFGetTypeID(newOrder) != TypeID)
  {
LABEL_19:
    _SCErrorSet(1002);
    return 0;
  }

  CFIndex Count = CFArrayGetCount(newOrder);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0LL;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(newOrder, v8);
      CFTypeID v10 = CFStringGetTypeID();
      if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v10) {
        goto LABEL_19;
      }
    }

    while (v7 != ++v8);
  }

  SetNetworkGlobalEntity = SCPreferencesPathKeyCreateSetNetworkGlobalEntity( 0LL,  *((void *)set + 2),  (uint64_t)@"IPv4");
  if (!SetNetworkGlobalEntity) {
    return 0;
  }
  uint64_t v12 = SetNetworkGlobalEntity;
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), SetNetworkGlobalEntity);
  uint64_t v41 = v12;
  if (Value) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  }
  CFMutableDictionaryRef v40 = MutableCopy;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFIndex v23 = CFArrayGetCount(newOrder);
  if (v23 >= 1)
  {
    CFIndex v25 = v23;
    CFIndex v26 = 0LL;
    *(void *)&__int128 v24 = 138412290LL;
    __int128 v42 = v24;
    do
    {
      CFIndex v27 = CFArrayGetCount(Mutable);
      int v28 = CFArrayGetValueAtIndex(newOrder, v26);
      if (v27 && (v45.io_name_t location = 0LL, v45.length = v27, CFArrayContainsValue(Mutable, v45, v28)))
      {
        CFIndex v29 = __log_SCNetworkConfiguration();
        uint64_t v30 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v29, (os_log_type_t)v30))
        {
          uint64_t v31 = _os_log_pack_size();
          uint64_t v43 = &v40;
          uint64_t v32 = (char *)&v40 - ((MEMORY[0x1895F8858](v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v33 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v33 = v42;
          *(void *)(v33 + 4) = v28;
          __SC_log_send(3, (uint64_t)v29, v30, v32);
        }
      }

      else
      {
        CFArrayAppendValue(Mutable, v28);
      }

      ++v26;
    }

    while (v25 != v26);
  }

  CFIndex v34 = CFArrayGetCount(Mutable);
  int v35 = v40;
  if (v34 < 1) {
    CFDictionaryRemoveValue(v40, @"ServiceOrder");
  }
  else {
    CFDictionarySetValue(v40, @"ServiceOrder", Mutable);
  }
  SCNetworkInterfaceRef v36 = v41;
  CFRelease(Mutable);
  CFIndex v37 = CFDictionaryGetCount(v35);
  uint64_t v38 = (const __SCPreferences *)*((void *)set + 3);
  if (v37 < 1) {
    Boolean v39 = SCPreferencesPathRemoveValue(v38, v36);
  }
  else {
    Boolean v39 = SCPreferencesPathSetValue(v38, v36, v35);
  }
  Boolean v20 = v39;
  CFRelease(v35);
  CFRelease(v36);
  return v20;
}

CFComparisonResult _SCNetworkSetCompare(const __SCNetworkSet *a1, const __SCNetworkSet *a2)
{
  CFStringRef Name = SCNetworkSetGetName(a1);
  CFStringRef v5 = SCNetworkSetGetName(a2);
  uint64_t v6 = v5;
  if (Name)
  {
    if (!v5) {
      return -1LL;
    }
    CFIndex v7 = Name;
  }

  else
  {
    if (v5) {
      return 1LL;
    }
    CFStringRef SetID = SCNetworkSetGetSetID(a1);
    uint64_t v6 = SCNetworkSetGetSetID(a2);
    CFIndex v7 = SetID;
  }

  return CFStringCompare(v7, v6, 0LL);
}

uint64_t SCNetworkSetEstablishDefaultConfiguration(const __SCPreferences **cf)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!cf) {
      goto LABEL_7;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_7;
  }
  CFStringRef v3 = _SCNetworkInterfaceCopyAllWithPreferences(cf[3]);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = __SCNetworkSetEstablishDefaultConfigurationForInterfaces((uint64_t)cf, v3, 1);
    CFRelease(v4);
    return v5;
  }

  return 0LL;
}

uint64_t __SCNetworkSetEstablishDefaultConfigurationForInterfaces(uint64_t a1, const __CFArray *a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v76 = *MEMORY[0x1895F89C0];
  uint64_t v6 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 24));
  if (v6)
  {
    CFIndex v7 = v6;
    if (CFArrayGetCount(v6) != 1
      || (CFIndex v8 = SCNetworkSetCopyServices((SCNetworkSetRef)v5)) != 0LL
      && (__n128 v9 = v8, Count = CFArrayGetCount(v8), CFRelease(v9), Count)
      || (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, 0LL), !CFEqual((CFTypeRef)v5, ValueAtIndex)))
    {
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = SCNetworkServiceCopyAll(*(SCPreferencesRef *)(v5 + 24));
    }

    CFRelease(v7);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  CFArrayRef v13 = SCNetworkSetCopyServices((SCNetworkSetRef)v5);
  CFArrayRef v14 = v13;
  CFArrayRef v72 = v12;
  if (v13 && *(_BYTE *)(v5 + 40))
  {
    CFRelease(v13);
    CFArrayRef v14 = SCNetworkServiceCopyAll(*(SCPreferencesRef *)(v5 + 24));
  }

  uint64_t v15 = *(const __SCPreferences **)(v5 + 24);
  CFMutableArrayRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
  uint64_t v17 = (const __CFArray *)SCBridgeInterfaceCopyAll(v15);
  if (v17)
  {
    uint64_t v18 = v17;
    __SCBridgeInterfaceListCollectMembers(v17, Mutable, 0);
    CFRelease(v18);
  }

  int v74 = 0;
  int v19 = 1;
  CFArrayRef v75 = v14;
  if (a2 && v14)
  {
    CFIndex v20 = CFArrayGetCount(a2);
    if (v20 < 1)
    {
      int v59 = 0;
      CFArrayRef v60 = v75;
      goto LABEL_54;
    }

    CFIndex v22 = v20;
    CFIndex v23 = 0LL;
    int v74 = 0;
    *(void *)&__int128 v21 = 138412546LL;
    __int128 v69 = v21;
    uint64_t v73 = v5;
    int v71 = a3;
    uint64_t v70 = a2;
    do
    {
      __int128 v24 = CFArrayGetValueAtIndex(a2, v23);
      CFIndex v25 = v24;
      if (!a3
        || (ConfigurationAction = (const void *)_SCNetworkInterfaceGetConfigurationAction((uint64_t)v24),
            CFTypeID TypeID = CFStringGetTypeID(),
            !ConfigurationAction)
        || CFGetTypeID(ConfigurationAction) != TypeID
        || !CFEqual(ConfigurationAction, @"None"))
      {
        if (!CFSetContainsValue(Mutable, v25) && !__SCNetworkServiceExistsForInterface(v75, v25))
        {
          int v28 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
          CFArrayAppendValue(v28, v25);
          if (v19)
          {
            while (CFArrayGetCount(v28) >= 1)
            {
              CFIndex v29 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v28, 0LL);
              SupportedProtocolTypes = SCNetworkInterfaceGetSupportedProtocolTypes(v29);
              if (SupportedProtocolTypes && CFArrayGetCount(SupportedProtocolTypes) >= 1)
              {
                uint64_t v31 = SCNetworkServiceCreate(*(SCPreferencesRef *)(v5 + 24), v29);
                if (!v31)
                {
                  __int128 v42 = __log_SCNetworkConfiguration();
                  uint64_t v43 = _SC_syslog_os_log_mapping(3);
                  if (__SC_log_enabled(3, v42, (os_log_type_t)v43))
                  {
                    uint64_t v44 = _os_log_pack_size();
                    CFRange v45 = (char *)v68 - ((MEMORY[0x1895F8858](v44) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                    __error();
                    uint64_t v46 = _os_log_pack_fill();
                    LocalizedDisplayCFStringRef Name = SCNetworkInterfaceGetLocalizedDisplayName(v29);
                    int v48 = SCError();
                    int v49 = SCErrorString(v48);
                    *(_DWORD *)uint64_t v46 = v69;
                    *(void *)(v46 + 4) = LocalizedDisplayName;
                    *(_WORD *)(v46 + 12) = 2080;
                    *(void *)(v46 + 14) = v49;
                    __SC_log_send(3, (uint64_t)v42, v43, v45);
                    uint64_t v5 = v73;
                  }

                  goto LABEL_48;
                }

                uint64_t v32 = v31;
                if (!SCNetworkServiceEstablishDefaultConfiguration(v31))
                {
                  CFTypeRef v50 = __log_SCNetworkConfiguration();
                  uint64_t v51 = _SC_syslog_os_log_mapping(3);
                  if (__SC_log_enabled(3, v50, (os_log_type_t)v51))
                  {
LABEL_46:
                    uint64_t v52 = (uint64_t)v50;
                    uint64_t v53 = _os_log_pack_size();
                    v68[1] = v68;
                    uint64_t v54 = (char *)v68 - ((MEMORY[0x1895F8858](v53) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                    __error();
                    uint64_t v55 = _os_log_pack_fill();
                    CFStringRef v56 = SCNetworkInterfaceGetLocalizedDisplayName(v29);
                    int v57 = SCError();
                    uint64_t v58 = SCErrorString(v57);
                    *(_DWORD *)uint64_t v55 = v69;
                    *(void *)(v55 + 4) = v56;
                    *(_WORD *)(v55 + 12) = 2080;
                    *(void *)(v55 + 14) = v58;
                    __SC_log_send(3, v52, v51, v54);
                    uint64_t v5 = v73;
                  }

LABEL_47:
                  SCNetworkServiceRemove(v32);
                  CFRelease(v32);
LABEL_48:
                  CFArrayRemoveValueAtIndex(v28, 0LL);
                  int v19 = 0;
                  break;
                }

                int v33 = SCNetworkSetAddService((SCNetworkSetRef)v5, v32);
                if (!v33)
                {
                  CFTypeRef v50 = __log_SCNetworkConfiguration();
                  uint64_t v51 = _SC_syslog_os_log_mapping(3);
                  if (__SC_log_enabled(3, v50, (os_log_type_t)v51)) {
                    goto LABEL_46;
                  }
                  goto LABEL_47;
                }

                int v19 = v33;
                CFRelease(v32);
                int v74 = 1;
              }

              else
              {
                SupportedInterfaceTypes = SCNetworkInterfaceGetSupportedInterfaceTypes(v29);
                if (SupportedInterfaceTypes)
                {
                  int v35 = SupportedInterfaceTypes;
                  CFIndex v36 = CFArrayGetCount(SupportedInterfaceTypes);
                  if (v36 >= 1)
                  {
                    CFIndex v37 = v36;
                    for (CFIndex i = 0LL; i != v37; ++i)
                    {
                      Boolean v39 = (const __CFString *)CFArrayGetValueAtIndex(v35, i);
                      SCNetworkInterfaceRef v40 = SCNetworkInterfaceCreateWithInterface(v29, v39);
                      if (v40)
                      {
                        SCNetworkInterfaceRef v41 = v40;
                        CFArrayAppendValue(v28, v40);
                        CFRelease(v41);
                      }
                    }

                    uint64_t v5 = v73;
                  }
                }
              }

              CFArrayRemoveValueAtIndex(v28, 0LL);
            }
          }

          CFRelease(v28);
          a3 = v71;
          a2 = v70;
        }
      }

      ++v23;
    }

    while (v23 != v22);
  }

  int v59 = v74;
  CFArrayRef v60 = v75;
  if (v75) {
LABEL_54:
  }
    CFRelease(v60);
  CFRelease(Mutable);
  uint64_t v61 = v72;
  if (v72)
  {
    if (v19)
    {
      if (v59)
      {
        CFIndex v62 = CFArrayGetCount(v72);
        if (v62 >= 1)
        {
          CFIndex v63 = v62;
          for (CFIndex j = 0LL; j != v63; ++j)
          {
            CFTypeID v65 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v61, j);
            if (_SCNetworkServiceIsVPN(v65))
            {
              int v19 = SCNetworkSetAddService((SCNetworkSetRef)v5, v65);
              if (!v19) {
                break;
              }
            }
          }
        }
      }
    }

    CFRelease(v61);
  }

  if (v19)
  {
    if (v59)
    {
      if (!SCPreferencesGetValue(*(SCPreferencesRef *)(v5 + 24), @"Model"))
      {
        int v66 = (const void *)_SC_hw_model(0);
        SCPreferencesSetValue(*(SCPreferencesRef *)(v5 + 24), @"Model", v66);
      }
    }

    else
    {
      _SCErrorSet(0);
    }
  }

  return v59;
}

uint64_t SCNetworkSetEstablishDefaultInterfaceConfiguration(CFTypeRef cf, const void *a2)
{
  v10[1] = *(const void **)MEMORY[0x1895F89C0];
  v10[0] = a2;
  if (__SCNetworkSetInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (cf) {
      goto LABEL_3;
    }
LABEL_9:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_9;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_9;
  }
  uint64_t v6 = CFArrayCreate(0LL, v10, 1LL, MEMORY[0x189605228]);
  if (!v6) {
    SCNetworkSetEstablishDefaultInterfaceConfiguration_cold_1();
  }
  CFIndex v7 = v6;
  uint64_t v8 = __SCNetworkSetEstablishDefaultConfigurationForInterfaces((uint64_t)cf, v6, 0);
  CFRelease(v7);
  return v8;
}

__CFArray *SCNetworkSetCopySelectedVPNService(CFTypeRef cf)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_27:
      _SCErrorSet(1002);
      return 0LL;
    }
  }

  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (!cf) {
      goto LABEL_27;
    }
  }

  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_27;
  }
  CFStringRef v3 = SCNetworkSetCopyServices((SCNetworkSetRef)cf);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1)
  {
    CFRelease(v4);
    return 0LL;
  }

  CFIndex v6 = Count;
  CFIndex v7 = 0LL;
  CFMutableArrayRef Mutable = 0LL;
  __n128 v9 = (const CFArrayCallBacks *)MEMORY[0x189605228];
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
    if (SCNetworkServiceGetEnabled((SCNetworkServiceRef)ValueAtIndex)
      && _SCNetworkServiceIsVPN((const __SCNetworkService *)ValueAtIndex))
    {
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, v9);
      }
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }

    ++v7;
  }

  while (v6 != v7);
  CFRelease(v4);
  if (Mutable)
  {
    CFIndex v11 = CFArrayGetCount(Mutable);
    if (v11 < 2)
    {
      CFMutableDictionaryRef MutableCopy = Mutable;
    }

    else
    {
      CFIndex v12 = v11;
      CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder((SCNetworkSetRef)cf);
      CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, Mutable);
      v20.length = CFArrayGetCount(MutableCopy);
      v20.io_name_t location = 0LL;
      CFArraySortValues(MutableCopy, v20, (CFComparatorFunction)_SCNetworkServiceCompare, ServiceOrder);
      CFRelease(Mutable);
      CFPreferencesAppSynchronize(@"com.apple.mobilevpn");
      CFPropertyListRef v15 = CFPreferencesCopyAppValue(@"activeVPNID", @"com.apple.mobilevpn");
      if (v15)
      {
        uint64_t v16 = v15;
        CFIndex v17 = 0LL;
        while (1)
        {
          CFMutableArrayRef Mutable = (__CFArray *)CFArrayGetValueAtIndex(MutableCopy, v17);
          CFStringRef ServiceID = SCNetworkServiceGetServiceID(Mutable);
          if (CFEqual(ServiceID, v16)) {
            break;
          }
          if (v12 == ++v17)
          {
            CFRelease(v16);
            goto LABEL_22;
          }
        }

        CFRetain(Mutable);
        CFRelease(v16);
        if (Mutable) {
          goto LABEL_23;
        }
      }
    }

uint64_t SCNetworkSetSetSelectedVPNService(CFTypeRef cf, const void *a2)
{
  if (__SCNetworkSetInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (cf) {
      goto LABEL_3;
    }
LABEL_21:
    _SCErrorSet(1002);
    LOBYTE(v10) = 0;
    return v10;
  }

  if (!cf) {
    goto LABEL_21;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_21;
  }
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  CFIndex v6 = SCNetworkSetCopyServices((SCNetworkSetRef)cf);
  if (v6)
  {
    CFIndex v7 = v6;
    uint64_t Count = CFArrayGetCount(v6);
    v15.io_name_t location = 0LL;
    v15.length = Count;
    if (CFArrayContainsValue(v7, v15, a2))
    {
      if (Count < 1)
      {
        LOBYTE(v10) = 1;
      }

      else
      {
        uint64_t v9 = 1LL;
        int v10 = 1;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v9 - 1);
          if (_SCNetworkServiceIsVPN((const __SCNetworkService *)ValueAtIndex))
          {
            Boolean v12 = CFEqual(a2, ValueAtIndex);
            int v10 = SCNetworkServiceSetEnabled((SCNetworkServiceRef)ValueAtIndex, v12);
          }

          if (!v10) {
            break;
          }
        }

        while (v9++ < Count);
      }
    }

    else
    {
      _SCErrorSet(1002);
      LOBYTE(v10) = 0;
    }

    CFRelease(v7);
  }

  else
  {
    LOBYTE(v10) = 1;
  }

  return v10;
}

uint64_t _SCNetworkSetSetSetID(uint64_t cf, const void *a2)
{
  void block[7] = *MEMORY[0x1895F89C0];
  if (__SCNetworkSetInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_44_0);
    if (cf) {
      goto LABEL_3;
    }
LABEL_13:
    _SCErrorSet(1002);
    return 0LL;
  }

  if (!cf) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v4) {
    goto LABEL_13;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_13;
  }
  if (!__SCNetworkSetExists(cf))
  {
    CFIndex v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      int v10 = (char *)v27 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 138412546;
      *(void *)(v11 + 4) = cf;
      *(_WORD *)(v11 + 12) = 2112;
      *(void *)(v11 + 14) = a2;
      __SC_log_send(3, (uint64_t)v7, v8, v10);
    }

    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0LL;
    void block[6] = 0LL;
    block[4] = "_SCNetworkSetSetSetID() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_13;
  }

  if (CFEqual(a2, *(CFTypeRef *)(cf + 16))) {
    return 1LL;
  }
  CFStringRef Set = SCPreferencesPathKeyCreateSet(0LL, (uint64_t)a2);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 24), Set);
  CFTypeID v15 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v15)
  {
    uint64_t v16 = SCPreferencesPathKeyCreateSet(0LL, *(void *)(cf + 16));
    CFIndex v17 = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 24), v16);
    CFTypeID v18 = CFDictionaryGetTypeID();
    if (v17 && CFGetTypeID(v17) == v18)
    {
      if (SCPreferencesPathSetValue(*(SCPreferencesRef *)(cf + 24), Set, v17))
      {
        uint64_t v6 = SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(cf + 24), v16);
        if ((_DWORD)v6)
        {
          SCNetworkSetRef v19 = SCNetworkSetCopyCurrent(*(SCPreferencesRef *)(cf + 24));
          if (v19)
          {
            SCNetworkSetRef v20 = v19;
            BOOL v21 = CFEqual(*((CFTypeRef *)v19 + 2), *(CFTypeRef *)(cf + 16)) != 0;
            CFRelease(v20);
          }

          else
          {
            BOOL v21 = 0;
          }

          CFIndex v22 = __log_SCNetworkConfiguration();
          uint64_t v23 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v22, (os_log_type_t)v23))
          {
            uint64_t v24 = _os_log_pack_size();
            v27[1] = v27;
            CFIndex v25 = (char *)v27 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v26 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v26 = 138412546;
            *(void *)(v26 + 4) = cf;
            *(_WORD *)(v26 + 12) = 2112;
            *(void *)(v26 + 14) = a2;
            __SC_log_send(7, (uint64_t)v22, v23, v25);
          }

          CFRetain(a2);
          CFRelease(*(CFTypeRef *)(cf + 16));
          *(void *)(cf + 16) = a2;
          if (v21) {
            SCNetworkSetSetCurrent((SCNetworkSetRef)cf);
          }
        }

        goto LABEL_26;
      }
    }

    else
    {
      _SCErrorSet(1004);
    }

    uint64_t v6 = 0LL;
LABEL_26:
    if (v16) {
      CFRelease(v16);
    }
    goto LABEL_28;
  }

  _SCErrorSet(1005);
  uint64_t v6 = 0LL;
LABEL_28:
  if (Set) {
    CFRelease(Set);
  }
  return v6;
}

uint64_t _serviceOrder(const __SCNetworkService *a1)
{
  uint64_t v2 = 100000LL;
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  if (Interface)
  {
    uint64_t v4 = Interface;
  }

  return v2;
}

uint64_t _serviceOrder_clear(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = Count;
  uint64_t v6 = 0LL;
  CFIndex v7 = 0LL;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
    if (CFEqual(ValueAtIndex, a2))
    {
      CFArrayRemoveValueAtIndex(a1, v7);
      --v5;
      ++v6;
    }

    else
    {
      ++v7;
    }
  }

  while (v7 < v5);
  return v6;
}

uint64_t __copy_default_set_name_block_invoke()
{
  uint64_t result = _SC_CFBundleGet();
  if (result)
  {
    uint64_t result = CFBundleCopyLocalizedStringForLocalization();
    copy_default_set_name_non_localized = result;
  }

  return result;
}

__CFBundle *__copy_default_set_name_block_invoke_2()
{
  uint64_t result = (__CFBundle *)_SC_CFBundleGet();
  if (result)
  {
    uint64_t result = (__CFBundle *)CFBundleCopyLocalizedString(result, @"DEFAULT_SET_NAME", @"Automatic", 0LL);
    copy_default_set_name_localized = (uint64_t)result;
  }

  return result;
}

void __SCNetworkSetDeallocate(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
}

BOOL __SCNetworkSetEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
  }
  return 0LL;
}

CFHashCode __SCNetworkSetHash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

__CFString *__SCNetworkSetCopyDescription(uint64_t a1)
{
  uint64_t v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCNetworkSet %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @"id = %@", *(void *)(a1 + 16));
  CFStringAppendFormat(Mutable, 0LL, @", prefs = %p", *(void *)(a1 + 24));
  if (*(void *)(a1 + 32)) {
    CFStringAppendFormat(Mutable, 0LL, @", io_name_t name = %@", *(void *)(a1 + 32));
  }
  if (*(_BYTE *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0LL, @", new");
  }
  if (!__SCNetworkSetExists(a1)) {
    CFStringAppendFormat(Mutable, 0LL, @", REMOVED");
  }
  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

__CFArray *_SCNetworkConfigurationCopyMigrationPaths()
{
  v5[1] = *(void **)MEMORY[0x1895F89C0];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(0LL, &value, v5);
  uint64_t v1 = value;
  CFArrayAppendValue(Mutable, value);
  uint64_t v2 = v5[0];
  CFArrayAppendValue(Mutable, v5[0]);
  CFRelease(v1);
  CFRelease(v2);
  return Mutable;
}

void _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(const __CFURL *a1, void *a2, void *a3)
{
  if (a1)
  {
    CFURLRef v5 = a1;
    CFRetain(a1);
  }

  else
  {
    CFURLRef v5 = CFURLCreateFromFileSystemRepresentation( 0LL,  (const UInt8 *)"/Library/Preferences/SystemConfiguration",  40LL,  1u);
  }

  *a2 = MEMORY[0x186E08F0C](0LL, "preferences.plist", 17LL, 0LL, v5);
  *a3 = MEMORY[0x186E08F0C](0LL, "NetworkInterfaces.plist", 23LL, 0LL, v5);
  CFRelease(v5);
}

__CFArray *_SCNetworkConfigurationPerformMigration( const __CFURL *a1, uint64_t a2, const __CFURL *a3, const __CFString *a4)
{
  v66[1] = *MEMORY[0x1895F89C0];
  uint64_t v8 = __log_SCNetworkConfiguration();
  uint64_t v9 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v11 = (char *)v66 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    int isInstallEnvironment = _SC_isInstallEnvironment();
    CFArrayRef v14 = " (INSTALLER ENVIRONMENT)";
    *(_DWORD *)uint64_t v12 = 136316162;
    if (!isInstallEnvironment) {
      CFArrayRef v14 = "";
    }
    *(void *)(v12 + 4) = v14;
    *(_WORD *)(v12 + 12) = 2112;
    *(void *)(v12 + 14) = a1;
    CFTypeID v15 = @"None";
    *(_WORD *)(v12 + 22) = 2112;
    if (a4) {
      CFTypeID v15 = a4;
    }
    *(void *)(v12 + 24) = a2;
    *(_WORD *)(v12 + 32) = 2112;
    *(void *)(v12 + 34) = a3;
    *(_WORD *)(v12 + 42) = 2112;
    *(void *)(v12 + 44) = v15;
    __SC_log_send(6, (uint64_t)v8, v9, v11);
  }

  if (a1 && !CFURLHasDirectoryPath(a1))
  {
    SCNetworkSetRef v20 = __log_SCNetworkConfiguration();
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
    {
      uint64_t v22 = _os_log_pack_size();
      uint64_t v23 = (char *)v66 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)(v24 + 4) = a1;
      uint64_t v25 = (uint64_t)v20;
      uint64_t v26 = v21;
LABEL_25:
      __SC_log_send(5, v25, v26, v23);
      return 0LL;
    }

    return 0LL;
  }

  if (a2 && !CFURLHasDirectoryPath((CFURLRef)a2))
  {
    uint64_t v30 = __log_SCNetworkConfiguration();
    uint64_t v31 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v30, (os_log_type_t)v31))
    {
      uint64_t v32 = _os_log_pack_size();
      uint64_t v23 = (char *)v66 - ((MEMORY[0x1895F8858](v32) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v33 = 138412290;
      *(void *)(v33 + 4) = a2;
LABEL_24:
      uint64_t v25 = (uint64_t)v30;
      uint64_t v26 = v31;
      goto LABEL_25;
    }

    return 0LL;
  }

  if (a3 && !CFURLHasDirectoryPath(a3))
  {
    uint64_t v30 = __log_SCNetworkConfiguration();
    uint64_t v31 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v30, (os_log_type_t)v31))
    {
      uint64_t v34 = _os_log_pack_size();
      uint64_t v23 = (char *)v66 - ((MEMORY[0x1895F8858](v34) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v35 = 138412290;
      *(void *)(v35 + 4) = a3;
      goto LABEL_24;
    }

    return 0LL;
  }

  if (!((unint64_t)a1 | a2))
  {
    uint64_t v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      SCNetworkSetRef v19 = (char *)v66 - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v16, v17, v19);
    }

    return 0LL;
  }

  CFURLRef v27 = CFURLCreateWithString(0LL, @"/Library/Preferences/SystemConfiguration", 0LL);
  CFURLRef v28 = v27;
  if (a1) {
    CFTypeRef v29 = (CFTypeRef)MEMORY[0x186E08F24](0LL, @"Library/Preferences/SystemConfiguration/", 0LL, 1LL, a1);
  }
  else {
    CFTypeRef v29 = CFRetain(v27);
  }
  uint64_t v38 = v29;
  if (a2) {
    a2 = MEMORY[0x186E08F24](0LL, @"Library/Preferences/SystemConfiguration/", 0LL, 1LL, a2);
  }
  if (a3) {
    CFTypeRef v39 = (CFTypeRef)MEMORY[0x186E08F24](0LL, @"Library/Preferences/SystemConfiguration/", 0LL, 1LL, a3);
  }
  else {
    CFTypeRef v39 = CFRetain(v28);
  }
  SCNetworkInterfaceRef v40 = v39;
  if (CFEqual(v38, v39))
  {
    SCNetworkInterfaceRef v41 = __log_SCNetworkConfiguration();
    uint64_t v42 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v41, (os_log_type_t)v42)) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }

  BOOL v45 = a2 == 0;
  if (a2 && CFEqual((CFTypeRef)a2, v40))
  {
    BOOL v45 = 1;
LABEL_57:
    if (CFEqual(v38, (CFTypeRef)a2))
    {
      uint64_t v51 = __log_SCNetworkConfiguration();
      uint64_t v52 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v51, (os_log_type_t)v52))
      {
        uint64_t v53 = _os_log_pack_size();
        uint64_t v54 = (char *)v66 - ((MEMORY[0x1895F8858](v53) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v51, v52, v54);
      }

LABEL_61:
      uint64_t v55 = __log_SCNetworkConfiguration();
      uint64_t v56 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v55, (os_log_type_t)v56))
      {
        uint64_t v57 = _os_log_pack_size();
        uint64_t v58 = (char *)v66 - ((MEMORY[0x1895F8858](v57) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v55, v56, v58);
      }

      CFIndex v36 = _SCNetworkConfigurationCopyMigrationPaths();
      if (!a2) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }

    goto LABEL_60;
  }

  if (!_SCNetworkConfigurationMakePathIfNeeded((const __CFURL *)v40))
  {
    SCNetworkInterfaceRef v41 = __log_SCNetworkConfiguration();
    uint64_t v42 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v41, (os_log_type_t)v42))
    {
LABEL_36:
      uint64_t v43 = _os_log_pack_size();
      uint64_t v44 = (char *)v66 - ((MEMORY[0x1895F8858](v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v41, v42, v44);
      goto LABEL_37;
    }

    goto LABEL_37;
  }

  if (!SCNetworkConfigurationCopyConfigurationFiles(a2))
  {
    uint64_t v46 = __log_SCNetworkConfiguration();
    uint64_t v47 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v46, (os_log_type_t)v47))
    {
      uint64_t v48 = _os_log_pack_size();
      int v49 = (char *)v66 - ((MEMORY[0x1895F8858](v48) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v50 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v50 = 138412546;
      *(void *)(v50 + 4) = a2;
      *(_WORD *)(v50 + 12) = 2112;
      *(void *)(v50 + 14) = v40;
      __SC_log_send(5, (uint64_t)v46, v47, v49);
    }

    BOOL v45 = 1;
  }

  if (a2) {
    goto LABEL_57;
  }
LABEL_60:
  int v59 = __log_SCNetworkConfiguration();
  uint64_t v60 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v59, (os_log_type_t)v60))
  {
    uint64_t v61 = _os_log_pack_size();
    CFIndex v62 = (char *)v66 - ((MEMORY[0x1895F8858](v61) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v63 = _os_log_pack_fill();
    int v64 = SCError();
    CFTypeID v65 = SCErrorString(v64);
    *(_DWORD *)uint64_t v63 = 136315138;
    *(void *)(v63 + 4) = v65;
    __SC_log_send(5, (uint64_t)v59, v60, v62);
  }

  if (!v45) {
    _SCNetworkConfigurationRemoveConfigurationFiles((const __CFURL *)v40);
  }
LABEL_37:
  CFIndex v36 = 0LL;
  if (a2) {
LABEL_38:
  }
    CFRelease((CFTypeRef)a2);
LABEL_39:
  if (v28) {
    CFRelease(v28);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v40) {
    CFRelease(v40);
  }
  return v36;
}

uint64_t _SCNetworkConfigurationMakePathIfNeeded(const __CFURL *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v2 = CFURLGetFileSystemRepresentation(a1, 1u, v23, 1024LL);
  CFStringRef v3 = __log_SCNetworkConfiguration();
  if (v2)
  {
    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v6 = (char *)&v23[-((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v23;
      __SC_log_send(6, (uint64_t)v3, v4, v6);
    }

    for (uint64_t i = v23[0] == 47; ; ++i)
    {
      if (v23[i])
      {
        if (v23[i] != 47)
        {
          LODWORD(v9) = 0;
          goto LABEL_14;
        }

        uint64_t v9 = 0LL;
        v23[i] = 0;
      }

      else
      {
        uint64_t v9 = 1LL;
      }

      if (mkdir((const char *)v23, 0x1EDu) && *__error() != 17 && *__error() != 21)
      {
        CFTypeID v15 = __log_SCNetworkConfiguration();
        uint64_t v16 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v15, (os_log_type_t)v16))
        {
          uint64_t v17 = _os_log_pack_size();
          uint64_t v18 = (char *)&v23[-((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
          __error();
          uint64_t v19 = _os_log_pack_fill();
          SCNetworkSetRef v20 = __error();
          uint64_t v21 = strerror(*v20);
          *(_DWORD *)uint64_t v19 = 136315394;
          *(void *)(v19 + 4) = v23;
          *(_WORD *)(v19 + 12) = 2080;
          *(void *)(v19 + 14) = v21;
          __SC_log_send(5, (uint64_t)v15, v16, v18);
        }

        return v9;
      }

      v23[i] = 47;
LABEL_14:
      if ((_DWORD)v9) {
        return 1LL;
      }
    }
  }

  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v10))
  {
    uint64_t v11 = _os_log_pack_size();
    uint64_t v12 = (char *)&v23[-((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 138412290;
    *(void *)(v13 + 4) = a1;
    __SC_log_send(5, (uint64_t)v3, v10, v12);
  }

  return 0LL;
}

uint64_t SCNetworkConfigurationCopyConfigurationFiles(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  CFStringRef v3 = v2;
  uint64_t v4 = (const __CFURL *)v1;
  uint64_t v45 = *MEMORY[0x1895F89C0];
  CFURLRef v39 = 0LL;
  CFURLRef v40 = 0LL;
  CFURLRef url = 0LL;
  CFURLRef v38 = 0LL;
  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(v2, &url, &v38);
  CFURLRef v5 = url;
  if (!CFURLGetFileSystemRepresentation(url, 1u, v41, 1024LL))
  {
    uint64_t v17 = __log_SCNetworkConfiguration();
    uint64_t v18 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v17, (os_log_type_t)v18)) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }

  CFURLRef v5 = v38;
  if (!CFURLGetFileSystemRepresentation(v38, 1u, v42, 1024LL))
  {
    uint64_t v17 = __log_SCNetworkConfiguration();
    uint64_t v18 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
    {
LABEL_12:
      uint64_t v19 = _os_log_pack_size();
      SCNetworkSetRef v20 = (char *)&v36 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = v5;
      __SC_log_send(5, (uint64_t)v17, v18, v20);
    }

uint64_t _SCNetworkConfigurationMigrateConfiguration(uint64_t a1)
{
  uint64_t v1 = (const __CFURL *)MEMORY[0x1895F8858](a1);
  CFStringRef v3 = v2;
  CFDictionaryRef ValueAtIndex = v1;
  uint64_t v161 = *MEMORY[0x1895F89C0];
  CFArrayRef v153 = 0LL;
  CFArrayRef theArray = 0LL;
  if (!__SCNetworkConfigurationMigrateConfigurationFilesPresent(v1, &theArray, 1))
  {
    uint64_t v19 = __log_SCNetworkConfiguration();
    uint64_t v20 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v19, (os_log_type_t)v20)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }

  CFURLRef v5 = theArray;
  CFDictionaryRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(theArray, 0LL);
  if (!CFURLGetFileSystemRepresentation(ValueAtIndex, 1u, v159, 1024LL))
  {
    uint64_t v19 = __log_SCNetworkConfiguration();
    uint64_t v20 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v19, (os_log_type_t)v20)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }

  CFDictionaryRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v5, 1LL);
  if (!CFURLGetFileSystemRepresentation(ValueAtIndex, 1u, v160, 1024LL))
  {
    uint64_t v19 = __log_SCNetworkConfiguration();
    uint64_t v20 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v19, (os_log_type_t)v20))
    {
LABEL_15:
      uint64_t v21 = _os_log_pack_size();
      uint64_t v22 = (char *)&v137 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v23 = 138412290;
      *(void *)(v23 + 4) = ValueAtIndex;
      __SC_log_send(5, (uint64_t)v19, v20, v22);
    }

LABEL_66:
    CFMutableArrayRef Mutable = 0LL;
    uint64_t v24 = 0LL;
    CFStringRef v146 = 0LL;
    CFStringRef v147 = 0LL;
    Companion = 0LL;
    goto LABEL_17;
  }

  CFStringRef v35 = CFStringCreateWithCString(0LL, (const char *)v157, 0x8000100u);
  CFStringRef v36 = CFStringCreateWithCString(0LL, (const char *)v158, 0x8000100u);
  CFStringRef v147 = v35;
  CFIndex v37 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v35);
  uint64_t v24 = v37;
  CFStringRef v146 = v36;
  if (v13)
  {
    uint64_t v38 = __SCPreferencesCreateForMigration(@"System Migration", v36);
    Companion = (const __SCPreferences *)v38;
    if (!v24 || !v38)
    {
      CFURLRef v39 = __log_SCNetworkConfiguration();
      uint64_t v40 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v39, (os_log_type_t)v40))
      {
        uint64_t v41 = _os_log_pack_size();
        uint64_t v42 = (char *)&v137 - ((MEMORY[0x1895F8858](v41) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v39, v40, v42);
      }

      CFMutableArrayRef Mutable = 0LL;
      goto LABEL_17;
    }
  }

  else
  {
    __SCNetworkPopulateDefaultPrefs(v37);
    Companion = (const __SCPreferences *)SCPreferencesCreateCompanion((uint64_t)v24, @"NetworkInterfaces.plist");
    __SCNetworkPopulateDefaultNIPrefs(Companion);
  }

  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  uint64_t v48 = (char *)*MEMORY[0x189604DE8];
  CFDictionaryAddValue(Mutable, @"ConfigurationRepair", (const void *)*MEMORY[0x189604DE8]);
  _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v8, 1);
  _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v24, 1);
  BOOL v144 = v48;
  if (!hasSameModel(v8, v24))
  {
    int v49 = "model change (preferences)";
    goto LABEL_74;
  }

  if (!hasSameModel(v12, Companion))
  {
    int v49 = "model change (interfaces)";
    goto LABEL_74;
  }

  if (hasInterfaceConflict(v12, Companion))
  {
    int v49 = "interface conflicts";
LABEL_74:
    uint64_t v50 = __log_SCNetworkConfiguration();
    uint64_t v51 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v50, (os_log_type_t)v51))
    {
      uint64_t v52 = _os_log_pack_size();
      v145 = (char *)&v137;
      uint64_t v53 = (char *)&v137 - ((MEMORY[0x1895F8858](v52) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v54 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v54 = 136315138;
      *(void *)(v54 + 4) = v49;
      __SC_log_send(5, (uint64_t)v50, v51, v53);
      int v55 = 1;
LABEL_76:
      uint64_t v8 = v150;
      uint64_t v12 = v151;
      goto LABEL_78;
    }

    int v55 = 1;
    goto LABEL_78;
  }

  uint64_t v102 = __log_SCNetworkConfiguration();
  uint64_t v103 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v102, (os_log_type_t)v103))
  {
    uint64_t v104 = _os_log_pack_size();
    v145 = (char *)&v137;
    uint64_t v105 = (char *)&v137 - ((MEMORY[0x1895F8858](v104) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v102, v103, v105);
    int v55 = 0;
    goto LABEL_76;
  }

  int v55 = 0;
LABEL_78:
  uint64_t v56 = __log_SCNetworkConfiguration();
  uint64_t v57 = _SC_syslog_os_log_mapping(6);
  BOOL v58 = __SC_log_enabled(6, v56, (os_log_type_t)v57);
  LODWORD(v145) = v55;
  if (v58)
  {
    uint64_t v59 = _os_log_pack_size();
    uint64_t v60 = (char *)&v137 - ((MEMORY[0x1895F8858](v59) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v8 = v150;
    uint64_t v61 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v61 = 138413570;
    CFIndex v62 = ", new";
    *(void *)(v61 + 4) = v8;
    if (v13) {
      CFIndex v62 = "";
    }
    *(_WORD *)(v61 + 12) = 2112;
    *(void *)(v61 + 14) = v151;
    *(_WORD *)(v61 + 22) = 2112;
    *(void *)(v61 + 24) = v24;
    *(_WORD *)(v61 + 32) = 2080;
    *(void *)(v61 + 34) = v62;
    *(_WORD *)(v61 + 42) = 2112;
    *(void *)(v61 + 44) = Companion;
    *(_WORD *)(v61 + 52) = 2080;
    *(void *)(v61 + 54) = v62;
    uint64_t v63 = v60;
    uint64_t v12 = v151;
    __SC_log_send(6, (uint64_t)v56, v57, v63);
    int v55 = (int)v145;
  }

  if (v55) {
    int v64 = "migration";
  }
  else {
    int v64 = "upgrade";
  }
  CFTypeID v65 = CFStringCreateWithFormat(0LL, 0LL, @"pre-%s-source", v64);
  __SCNetworkConfigurationBackup(v8, v65, (uint64_t)v24);
  __SCNetworkConfigurationBackup(v12, v65, (uint64_t)v24);
  CFRelease(v65);
  int v66 = "new-";
  if (v13) {
    int v66 = "";
  }
  CFTypeRef v67 = CFStringCreateWithFormat(0LL, 0LL, @"pre-%s-%starget", v64, v66);
  __SCNetworkConfigurationBackup(v24, v67, (uint64_t)v24);
  __SCNetworkConfigurationBackup(Companion, v67, (uint64_t)v24);
  CFRelease(v67);
  __SCNetworkConfigurationReport(5, "Source", v8, v12);
  __SCNetworkConfigurationReport(5, "Target", v24, Companion);
  _SCNetworkConfigurationCreateBuiltinInterfaceServices(v8, v12);
  if (!_SCNetworkConfigurationCheckValidityWithPreferences(v8, v12, Mutable))
  {
    uint64_t v76 = __log_SCNetworkConfiguration();
    uint64_t v77 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v76, (os_log_type_t)v77)) {
      goto LABEL_118;
    }
LABEL_117:
    uint64_t v106 = _os_log_pack_size();
    __int128 v107 = (char *)&v137 - ((MEMORY[0x1895F8858](v106) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v76, v77, v107);
LABEL_118:
    BSDNameMapping = 0LL;
    uint64_t v29 = 0LL;
    CFURLRef v28 = 0LL;
    uint64_t v27 = 0LL;
    ServiceMappingUsingBSDNameMapping = 0LL;
    ServiceSetMapping = 0LL;
    CFStringRef v143 = 0LL;
    if (!v55) {
      goto LABEL_135;
    }
    goto LABEL_119;
  }

  if (v13)
  {
    _SCNetworkConfigurationCreateBuiltinInterfaceServices(v24, Companion);
    if (!_SCNetworkConfigurationCheckValidityWithPreferences(v24, Companion, Mutable))
    {
      uint64_t v76 = __log_SCNetworkConfiguration();
      uint64_t v77 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v76, (os_log_type_t)v77)) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }
  }

  if ((v55 & 1) == 0)
  {
    char v152 = 0;
    uint64_t v78 = (char *)__SCPreferencesCreateForMigration(@"Upgrade Source Prefs", 0LL);
    uint64_t v79 = (const __SCPreferences *)__SCPreferencesCreateForMigration( @"Upgrade Source NI Prefs",  @"NetworkInterfaces.plist");
    _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v78, 1);
    uint64_t v80 = __log_SCNetworkConfiguration();
    uint64_t v81 = _SC_syslog_os_log_mapping(6);
    BOOL v82 = __SC_log_enabled(6, v80, (os_log_type_t)v81);
    CFStringRef v141 = (const __SCPreferences *)v78;
    if (v82)
    {
      uint64_t v83 = _os_log_pack_size();
      __int128 v84 = (char *)&v137 - ((MEMORY[0x1895F8858](v83) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v85 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v85 = 138412546;
      *(void *)(v85 + 4) = v141;
      *(_WORD *)(v85 + 12) = 2112;
      *(void *)(v85 + 14) = v79;
      os_log_t v86 = v84;
      uint64_t v12 = v151;
      __SC_log_send(6, (uint64_t)v80, v81, v86);
      uint64_t v78 = (char *)v141;
    }

    CFDictionaryRef Value = SCPreferencesPathGetValue(v24, @"/");
    CFArrayRef v88 = SCPreferencesPathGetValue(Companion, @"/");
    SCPreferencesPathSetValue((SCPreferencesRef)v78, @"/", Value);
    SCPreferencesPathSetValue(v79, @"/", v88);
    CFRange v89 = SCPreferencesPathGetValue(v150, @"/");
    CFStringRef v90 = SCPreferencesPathGetValue(v12, @"/");
    SCPreferencesPathSetValue(v24, @"/", v89);
    SCPreferencesPathSetValue(Companion, @"/", v90);
    CFStringRef v140 = v79;
    uint64_t v91 = _SCNetworkConfigurationCopyExternalInterfaceMapping(v79, Companion);
    CFURLRef v28 = v91;
    if (v91)
    {
      int v155 = 6;
      SCNetworkSetRef v156 = "Upgrading, external interface mapping";
      CFDictionaryApplyFunction(v91, (CFDictionaryApplierFunction)logMapping_one, &v155);
    }

    uint64_t v27 = _SCNetworkMigrationCreateNetworkInterfaceArray(Companion, v28, &v152);
    CFStringRef v92 = __log_SCNetworkConfiguration();
    uint64_t v93 = _SC_syslog_os_log_mapping(6);
    BOOL v94 = __SC_log_enabled(6, v92, (os_log_type_t)v93);
    int v55 = (int)v145;
    if (v94)
    {
      uint64_t v95 = _os_log_pack_size();
      CFStringRef v143 = (const __CFDictionary *)&v137;
      uint64_t v96 = (char *)&v137 - ((MEMORY[0x1895F8858](v95) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      int v55 = (int)v145;
      uint64_t v97 = _os_log_pack_fill();
      if (v152) {
        uint64_t v98 = "found";
      }
      else {
        uint64_t v98 = "no";
      }
      *(_DWORD *)uint64_t v97 = 136315138;
      *(void *)(v97 + 4) = v98;
      SCNetworkInterfaceRef v99 = v96;
      uint64_t v78 = (char *)v141;
      __SC_log_send(6, (uint64_t)v92, v93, v99);
    }

    if (!v152)
    {
      ServiceSetMapping = 0LL;
      CFStringRef v143 = 0LL;
      ServiceMappingUsingBSDNameMapping = 0LL;
      BSDNameMapping = 0LL;
      goto LABEL_126;
    }

    if (v27)
    {
      if (__SCNetworkInterfaceSaveStoredWithPreferences(Companion, v27))
      {
        BSDNameMapping = _SCNetworkMigrationCreateBSDNameMapping(0LL, v28);
        ServiceMappingUsingBSDNameMapping = _SCNetworkMigrationCreateServiceMappingUsingBSDNameMapping( (const __SCPreferences *)v78,  v24,  BSDNameMapping);
        SetMapping = _SCNetworkMigrationCreateSetMapping((const __SCPreferences *)v78, v24);
        ServiceSetMapping = _SCNetworkMigrationCreateServiceSetMapping(v141);
        CFStringRef v143 = SetMapping;
        uint64_t v101 = SetMapping;
        uint64_t v78 = (char *)v141;
        _SCNetworkMigrationDoServiceMigration( (uint64_t)v141,  (uint64_t)v24,  ServiceMappingUsingBSDNameMapping,  BSDNameMapping,  v101,  ServiceSetMapping);
LABEL_126:
        CFRelease(v78);
        CFRelease(v140);
        uint64_t v29 = 0LL;
        goto LABEL_135;
      }

      uint64_t v120 = __log_SCNetworkConfiguration();
      uint64_t v121 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v120, (os_log_type_t)v121)) {
        goto LABEL_158;
      }
    }

    else
    {
      uint64_t v120 = __log_SCNetworkConfiguration();
      uint64_t v121 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v120, (os_log_type_t)v121))
      {
LABEL_158:
        uint64_t v133 = _os_log_pack_size();
        v145 = (char *)&v137;
        uint64_t v134 = (char *)&v137 - ((MEMORY[0x1895F8858](v133) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v120, v121, v134);
        uint64_t v78 = (char *)v141;
      }
    }

    CFRelease(v78);
    CFRelease(v140);
    ServiceMappingUsingBSDNameMapping = 0LL;
    uint64_t v10 = 0LL;
    goto LABEL_18;
  }

  uint64_t v29 = _SCNetworkConfigurationCopyBuiltinMapping(v12, Companion);
  CFURLRef v28 = _SCNetworkConfigurationCopyExternalInterfaceMapping(v12, Companion);
  NetworkInterfaceArray = _SCNetworkMigrationCreateNetworkInterfaceArray(Companion, v28, 0LL);
  if (!NetworkInterfaceArray)
  {
    CFIndex v111 = __log_SCNetworkConfiguration();
    uint64_t v112 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v111, (os_log_type_t)v112))
    {
      uint64_t v113 = _os_log_pack_size();
      v145 = (char *)&v137;
      uint64_t v114 = (char *)&v137 - ((MEMORY[0x1895F8858](v113) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v111, v112, v114);
    }

    ServiceMappingUsingBSDNameMapping = 0LL;
    uint64_t v27 = 0LL;
    goto LABEL_130;
  }

  uint64_t v27 = NetworkInterfaceArray;
  if (!__SCNetworkInterfaceSaveStoredWithPreferences(Companion, NetworkInterfaceArray))
  {
    CFStringRef v115 = (char *)__log_SCNetworkConfiguration();
    uint64_t v116 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, (os_log_t)v115, (os_log_type_t)v116))
    {
      uint64_t v117 = _os_log_pack_size();
      v145 = (char *)&v137;
      uint64_t v118 = MEMORY[0x1895F8858](v117);
      BOOL v144 = v115;
      uint64_t v119 = (char *)&v137 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v144, v116, v119);
    }

    ServiceMappingUsingBSDNameMapping = 0LL;
LABEL_130:
    uint64_t v10 = 0LL;
    goto LABEL_19;
  }

  BSDNameMapping = _SCNetworkMigrationCreateBSDNameMapping(v29, v28);
  __int128 v69 = v150;
  ServiceMappingUsingBSDNameMapping = _SCNetworkMigrationCreateServiceMappingUsingBSDNameMapping( v150,  v24,  BSDNameMapping);
  if (!ServiceMappingUsingBSDNameMapping)
  {
    uint64_t v10 = 0LL;
    goto LABEL_20;
  }

  CFStringRef v143 = _SCNetworkMigrationCreateSetMapping(v69, v24);
  uint64_t v70 = _SCNetworkMigrationCreateServiceSetMapping(v69);
  uint64_t v71 = (uint64_t)v69;
  CFArrayRef v72 = v143;
  ServiceSetMapping = v70;
  if (!_SCNetworkMigrationDoServiceMigration( v71,  (uint64_t)v24,  ServiceMappingUsingBSDNameMapping,  BSDNameMapping,  v143,  v70))
  {
    __int128 v135 = __log_SCNetworkConfiguration();
    LODWORD(v144) = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v135, (os_log_type_t)v144)) {
      goto LABEL_151;
    }
    uint64_t v136 = _os_log_pack_size();
    CFStringRef v140 = v135;
    CFStringRef v141 = (const __SCPreferences *)&v137;
    v145 = (char *)&v137 - ((MEMORY[0x1895F8858](v136) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    goto LABEL_150;
  }

  if (!_SCNetworkMigrationDoServiceOrderMigration(v72))
  {
    os_log_t v73 = __log_SCNetworkConfiguration();
    int v74 = _SC_syslog_os_log_mapping(5);
    CFStringRef v140 = v73;
    LODWORD(v139) = v74;
    if (__SC_log_enabled(5, v73, (os_log_type_t)v74))
    {
      uint64_t v75 = _os_log_pack_size();
      CFIndex v138 = &v137;
      CFStringRef v141 = (const __SCPreferences *)((char *)&v137 - ((MEMORY[0x1895F8858](v75) + 15) & 0xFFFFFFFFFFFFFFF0LL));
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v140, v139, (char *)v141);
    }
  }

  int v55 = (int)v145;
LABEL_119:
  if (!_SCNetworkMigrationDoSystemMigration(v150, v24))
  {
    os_log_t v108 = __log_SCNetworkConfiguration();
    int v109 = _SC_syslog_os_log_mapping(5);
    CFStringRef v140 = v108;
    LODWORD(v139) = v109;
    if (__SC_log_enabled(5, v108, (os_log_type_t)v109))
    {
      uint64_t v110 = _os_log_pack_size();
      CFIndex v138 = &v137;
      CFStringRef v141 = (const __SCPreferences *)((char *)&v137 - ((MEMORY[0x1895F8858](v110) + 15) & 0xFFFFFFFFFFFFFFF0LL));
      __error();
      int v55 = (int)v145;
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v140, v139, (char *)v141);
    }

    else
    {
      int v55 = (int)v145;
    }
  }

  CFURLRef v39 = __error();
  _SCErrorSet(*v39);
  uint64_t v42 = 0;
  uint64_t v46 = -1;
  if (v6) {
    goto LABEL_58;
  }
LABEL_59:
  if (v2) {
    CFRelease(v2);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  uint64_t v4 = v42;
  if (v46 != -1) {
    close(v46);
  }
  return v4;
}

LABEL_135:
  CFDictionaryAddValue(Mutable, @"ConfigurationRepairModel", v144);
  if (!_SCNetworkConfigurationCheckValidityWithPreferences(v24, Companion, Mutable))
  {
    uint64_t v123 = (char *)__log_SCNetworkConfiguration();
    int v124 = _SC_syslog_os_log_mapping(5);
    CFStringRef v141 = (const __SCPreferences *)v123;
    LODWORD(v140) = v124;
    if (__SC_log_enabled(5, (os_log_t)v123, (os_log_type_t)v124))
    {
      uint64_t v125 = _os_log_pack_size();
      uint64_t v139 = &v137;
      BOOL v144 = (char *)&v137 - ((MEMORY[0x1895F8858](v125) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v126 = _os_log_pack_fill();
      uint64_t v127 = "Upgraded";
      if ((_DWORD)v145) {
        uint64_t v127 = "Migrated";
      }
      *(_DWORD *)uint64_t v126 = 136315138;
      *(void *)(v126 + 4) = v127;
      __SC_log_send(5, (uint64_t)v141, v140, v144);
    }

    goto LABEL_151;
  }

  if (SCPreferencesCommitChanges(v24))
  {
    if (SCPreferencesCommitChanges(Companion))
    {
      if (v55) {
        CFIndex v122 = "Migrated";
      }
      else {
        CFIndex v122 = "Upgraded";
      }
      __SCNetworkConfigurationReport(5, v122, v24, Companion);
      uint64_t v10 = 1LL;
      goto LABEL_152;
    }

    uint64_t v128 = __log_SCNetworkConfiguration();
    LODWORD(v144) = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v128, (os_log_type_t)v144)) {
      goto LABEL_149;
    }
  }

  else
  {
    uint64_t v128 = __log_SCNetworkConfiguration();
    LODWORD(v144) = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v128, (os_log_type_t)v144))
    {
LABEL_149:
      uint64_t v129 = _os_log_pack_size();
      CFStringRef v140 = v128;
      CFStringRef v141 = (const __SCPreferences *)&v137;
      v145 = (char *)&v137 - ((MEMORY[0x1895F8858](v129) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v130 = _os_log_pack_fill();
      int v131 = SCError();
      CFIndex v132 = SCErrorString(v131);
      *(_DWORD *)uint64_t v130 = 136315138;
      *(void *)(v130 + 4) = v132;
LABEL_150:
      __SC_log_send(5, (uint64_t)v140, v144, v145);
    }
  }

            uint64_t v45 = v114;
            CFStringRef v3 = v93 != 0;
            goto LABEL_41;
          }
        }
      }
    }

    CFStringRef v3 = 0LL;
    CFURLRef v5 = v105;
    CFStringRef v6 = v106;
  }

  else
  {
    CFURLRef v39 = __log_SCNetworkConfiguration();
    uint64_t v40 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v39, (os_log_type_t)v40))
    {
      uint64_t v41 = _os_log_pack_size();
      uint64_t v106 = (const __CFURL *)&v100;
      uint64_t v42 = v5;
      uint64_t v43 = (char *)&v100 - ((MEMORY[0x1895F8858](v41) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      uint64_t v44 = v43;
      CFURLRef v5 = v42;
      __SC_log_send(5, (uint64_t)v39, v40, v44);
    }

    CFStringRef v3 = 0LL;
  }

  uint64_t v45 = v114;
LABEL_41:
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v46 = v112;
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v47 = v113;
  if (v45) {
    CFRelease(v45);
  }
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v48 = v110;
  if (v108) {
    CFRelease(v108);
  }
  int v49 = v109;
  if (v47) {
    CFRelease(v47);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v107) {
    CFRelease(v107);
  }
  if (v115) {
    CFRelease(v115);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v111) {
    CFRelease(v111);
  }
  return v3;
}

LABEL_151:
  uint64_t v10 = 0LL;
LABEL_152:
  if (v143) {
    CFRelease(v143);
  }
  if (ServiceSetMapping) {
    CFRelease(ServiceSetMapping);
  }
LABEL_20:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v149) {
    CFRelease(v149);
  }
  if (v148) {
    CFRelease(v148);
  }
  if (v147) {
    CFRelease(v147);
  }
  if (v146) {
    CFRelease(v146);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v31 = v150;
  if (v28) {
    CFRelease(v28);
  }
  if (BSDNameMapping) {
    CFRelease(BSDNameMapping);
  }
  uint64_t v32 = v151;
  if (ServiceMappingUsingBSDNameMapping) {
    CFRelease(ServiceMappingUsingBSDNameMapping);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (Companion) {
    CFRelease(Companion);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

void _SCNetworkConfigurationRemoveConfigurationFiles(const __CFURL *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  CFURLRef v22 = 0LL;
  CFURLRef url = 0LL;
  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(a1, &url, &v22);
  CFURLRef v1 = url;
  if (!CFURLGetFileSystemRepresentation(url, 1u, v25, 1024LL))
  {
    int v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v2, (os_log_type_t)v3)) {
      goto LABEL_9;
    }
    uint64_t v9 = _os_log_pack_size();
    CFURLRef v5 = (char *)&v21 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 138412290;
    *(void *)(v10 + 4) = v1;
    goto LABEL_8;
  }

  if (remove((const char *)v25))
  {
    if (*__error() != 2)
    {
      int v2 = __log_SCNetworkConfiguration();
      uint64_t v3 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v2, (os_log_type_t)v3))
      {
        uint64_t v4 = _os_log_pack_size();
        CFURLRef v5 = (char *)&v21 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        CFStringRef v7 = __error();
        uint64_t v8 = strerror(*v7);
        *(_DWORD *)uint64_t v6 = 136315394;
        *(void *)(v6 + 4) = v25;
        *(_WORD *)(v6 + 12) = 2080;
        *(void *)(v6 + 14) = v8;
LABEL_8:
        __SC_log_send(5, (uint64_t)v2, v3, v5);
      }
    }
  }

uint64_t _SCNetworkConfigurationCheckValidityWithPreferences( const __SCPreferences *a1, const __SCPreferences *a2, const __CFDictionary *a3)
{
  v179 = a1;
  uint64_t v194 = *MEMORY[0x1895F89C0];
  unsigned __int8 v180 = 1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a3 && CFGetTypeID(a3) == TypeID)
  {
    CFDictionaryRef Value = (const __CFBoolean *)CFDictionaryGetValue(a3, @"ConfigurationRepair");
    CFTypeID v7 = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == v7) {
      LODWORD(v178) = CFBooleanGetValue(Value);
    }
    else {
      LODWORD(v178) = 0;
    }
    uint64_t v9 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"ConfigurationRepairModel");
    CFTypeID v10 = CFBooleanGetTypeID();
    if (v9 && CFGetTypeID(v9) == v10) {
      int v8 = CFBooleanGetValue(v9);
    }
    else {
      int v8 = 0;
    }
  }

  else
  {
    int v8 = 0;
    LODWORD(v178) = 0;
  }

  CFURLRef v11 = __log_SCNetworkConfiguration();
  uint64_t v12 = _SC_syslog_os_log_mapping(6);
  uint64_t v13 = "";
  if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
  {
    uint64_t v14 = _os_log_pack_size();
    CFRange v177 = (uint64_t *)&v168;
    CFTypeID v15 = (char *)&v168 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    BOOL v17 = v8 == 0;
    int v18 = v8;
    uint64_t v19 = v179;
    if (!v17) {
      uint64_t v13 = ", w/repair-model";
    }
    uint64_t v20 = a2;
    if ((_DWORD)v178) {
      uint64_t v21 = ", w/repair-configuration";
    }
    else {
      uint64_t v21 = "";
    }
    BOOL v22 = _SCNetworkConfigurationBypassSystemInterfaces((uint64_t)v179);
    *(_DWORD *)uint64_t v16 = 136316162;
    uint64_t v23 = ", bypass system interfaces";
    *(void *)(v16 + 4) = v13;
    uint64_t v13 = "";
    if (!v22) {
      uint64_t v23 = "";
    }
    *(_WORD *)(v16 + 12) = 2080;
    *(void *)(v16 + 14) = v21;
    a2 = v20;
    *(_WORD *)(v16 + 22) = 2080;
    *(void *)(v16 + 24) = v23;
    *(_WORD *)(v16 + 32) = 2112;
    *(void *)(v16 + 34) = v19;
    int v8 = v18;
    *(_WORD *)(v16 + 42) = 2112;
    *(void *)(v16 + 44) = v20;
    __SC_log_send(6, (uint64_t)v11, v12, v15);
  }

  BOOL v24 = _SCNetworkConfigurationBypassSystemInterfaces((uint64_t)v179);
  if (!v24) {
    _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v179, 1);
  }
  CFPropertyListRef v25 = SCPreferencesGetValue(v179, @"Model");
  CFPropertyListRef v26 = SCPreferencesGetValue(a2, @"Model");
  CFTypeID v27 = CFStringGetTypeID();
  if (!v25 || CFGetTypeID(v25) != v27)
  {
    if (v8)
    {
      CFTypeID v28 = CFStringGetTypeID();
      if (v26)
      {
        if (CFGetTypeID(v26) == v28)
        {
          uint64_t v29 = __log_SCNetworkConfiguration();
          uint64_t v30 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v29, (os_log_type_t)v30))
          {
            uint64_t v31 = _os_log_pack_size();
            uint64_t v32 = (char *)&v168 - ((MEMORY[0x1895F8858](v31) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(6, (uint64_t)v29, v30, v32);
          }

          SCPreferencesSetValue(v179, @"Model", v26);
          CFTypeID v33 = CFStringGetTypeID();
          CFPropertyListRef v25 = v26;
LABEL_35:
          uint64_t v40 = v25;
          if (CFGetTypeID(v26) == v33) {
            goto LABEL_45;
          }
          goto LABEL_36;
        }
      }
    }

    uint64_t v34 = __log_SCNetworkConfiguration();
    uint64_t v35 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v34, (os_log_type_t)v35))
    {
      uint64_t v36 = _os_log_pack_size();
      CFRange v176 = a2;
      CFIndex v37 = (char *)&v168 - ((MEMORY[0x1895F8858](v36) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      uint64_t v38 = v37;
      uint64_t v13 = "";
      __SC_log_send(6, (uint64_t)v34, v35, v38);
      a2 = v176;
    }
  }

  CFTypeID v39 = CFStringGetTypeID();
  if (v26)
  {
    CFTypeID v33 = v39;
    goto LABEL_35;
  }

LABEL_114:
                    if (!v180)
                    {
                      uint64_t v13 = "";
                      CFMutableArrayRef v63 = v174;
                      break;
                    }

                    CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(ValueAtIndex);
                    if (ServiceOrder)
                    {
                      uint64_t v119 = ServiceOrder;
                      if (CFArrayGetCount(ServiceOrder) >= 1)
                      {
                        CFIndex v120 = 0LL;
                        while (1)
                        {
                          uint64_t v121 = CFArrayGetValueAtIndex(v119, v120);
                          v196.length = CFArrayGetCount(v119);
                          v196.io_name_t location = 0LL;
                          if (!CFArrayContainsValue(v119, v196, v121))
                          {
                            v197.length = CFArrayGetCount(v74);
                            v197.io_name_t location = 0LL;
                            if (!CFArrayContainsValue(v74, v197, v121)) {
                              break;
                            }
                          }

                          if (++v120 >= CFArrayGetCount(v119)) {
                            goto LABEL_121;
                          }
                        }

                        CFIndex v122 = __log_SCNetworkConfiguration();
                        int v123 = _SC_syslog_os_log_mapping(5);
                        if (__SC_log_enabled(5, v122, (os_log_type_t)v123))
                        {
                          uint64_t v124 = _os_log_pack_size();
                          LODWORD(v169) = v123;
                          __int128 v171 = (uint64_t *)&v168;
                          uint64_t v125 = MEMORY[0x1895F8858](v124);
                          CFIndex v168 = v122;
                          uint64_t v126 = (char *)&v168 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                          __error();
                          uint64_t v127 = _os_log_pack_fill();
                          *(_DWORD *)uint64_t v127 = v170;
                          *(void *)(v127 + 4) = v121;
                          *(_WORD *)(v127 + 12) = 2112;
                          *(void *)(v127 + 14) = ValueAtIndex;
                          __SC_log_send(5, (uint64_t)v168, v169, v126);
                        }
                      }
                    }

LABEL_121:
                    CFRelease(v71);
                    uint64_t v13 = "";
                    CFMutableArrayRef v63 = v174;
                  }

                  else
                  {
                    uint64_t v105 = __log_SCNetworkConfiguration();
                    uint64_t v106 = _SC_syslog_os_log_mapping(5);
                    if (__SC_log_enabled(5, v105, (os_log_type_t)v106))
                    {
                      uint64_t v107 = _os_log_pack_size();
                      __int128 v171 = (uint64_t *)&v168;
                      os_log_t v108 = Mutable;
                      int v109 = v13;
                      uint64_t v110 = (char *)&v168 - ((MEMORY[0x1895F8858](v107) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                      __error();
                      CFMutableArrayRef v63 = v174;
                      uint64_t v111 = _os_log_pack_fill();
                      *(_DWORD *)uint64_t v111 = v170;
                      *(void *)(v111 + 4) = v179;
                      *(_WORD *)(v111 + 12) = 2112;
                      *(void *)(v111 + 14) = ValueAtIndex;
                      uint64_t v112 = v110;
                      uint64_t v13 = v109;
                      CFMutableArrayRef Mutable = v108;
                      __SC_log_send(5, (uint64_t)v105, v106, v112);
                    }
                  }

                  CFIndex v101 = (CFIndex)v178 + 1;
                  uint64_t v71 = 0LL;
                }

                while (v101 < CFArrayGetCount(v73) && v180);
              }

              v160 = (const __CFArray *)SCBridgeInterfaceCopyAll(v179);
              if (v160)
              {
                uint64_t v161 = v160;
                v201.length = CFArrayGetCount(v160);
                v201.io_name_t location = 0LL;
                CFArrayApplyFunction(v161, v201, (CFArrayApplierFunction)validate_bridge, v176);
                CFRelease(v161);
              }

              CFArrayRef v162 = SCVLANInterfaceCopyAll(v179);
              if (v162)
              {
                v163 = v162;
                int v164 = calloc(1uLL, 0x18uLL);
                uint64_t v165 = v176;
                *int v164 = v179;
                v164[1] = v165;
                uint64_t v166 = (const void *)*MEMORY[0x189605018];
                v164[2] = *MEMORY[0x189605018];
                v202.length = CFArrayGetCount(v163);
                v202.io_name_t location = 0LL;
                CFArrayApplyFunction(v163, v202, (CFArrayApplierFunction)validate_vlan, v164);
                v167 = (const void *)v164[2];
                if (v167 && v167 != v166) {
                  CFRelease(v167);
                }
                free(v164);
                CFRelease(v163);
                BOOL v24 = v175;
                CFMutableArrayRef v63 = v174;
              }

              else
              {
                BOOL v24 = v175;
              }

              CFMutableArrayRef v72 = v173;
              goto LABEL_132;
            }

            unsigned __int8 v180 = 0;
            CFStringRef v143 = __log_SCNetworkConfiguration();
            uint64_t v144 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v143, (os_log_type_t)v144))
            {
              uint64_t v145 = _os_log_pack_size();
              CFStringRef v146 = (char *)&v168 - ((MEMORY[0x1895F8858](v145) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v147 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v147 = 138412290;
              *(void *)(v147 + 4) = v179;
              CFStringRef v148 = v146;
              CFMutableArrayRef v63 = v174;
              __SC_log_send(5, (uint64_t)v143, v144, v148);
              uint64_t v13 = "";
            }
          }

          else
          {
            unsigned __int8 v180 = 0;
            uint64_t v128 = __log_SCNetworkConfiguration();
            uint64_t v129 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v128, (os_log_type_t)v129))
            {
              uint64_t v130 = _os_log_pack_size();
              int v131 = (char *)&v168 - ((MEMORY[0x1895F8858](v130) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v132 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v132 = 138412290;
              *(void *)(v132 + 4) = v179;
              __SC_log_send(5, (uint64_t)v128, v129, v131);
              CFMutableArrayRef v63 = v174;
            }

            os_log_t v73 = 0LL;
          }

          uint64_t v71 = 0LL;
          BOOL v24 = v175;
          goto LABEL_131;
        }

        uint64_t v133 = __log_SCNetworkConfiguration();
        uint64_t v134 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v133, (os_log_type_t)v134))
        {
          uint64_t v135 = _os_log_pack_size();
          uint64_t v136 = (char *)&v168 - ((MEMORY[0x1895F8858](v135) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v137 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v137 = 138412546;
          *(void *)(v137 + 4) = v179;
          *(_WORD *)(v137 + 12) = 2112;
          *(void *)(v137 + 14) = v176;
          CFIndex v138 = v136;
          CFMutableArrayRef v63 = v174;
          __SC_log_send(5, (uint64_t)v133, v134, v138);
          int v60 = (int)v178;
        }

        if (v60)
        {
          uint64_t v139 = v186;
          CFStringRef v140 = v187;
          CFIndex Count = CFArrayGetCount(v186);
          CFIndex v142 = CFArrayGetCount(v140);
          if (Count | v142)
          {
            CFIndex v149 = v142;
            uint64_t v178 = Mutable;
            v150 = v179;
            __SCNetworkConfigurationBackup(v179, @"pre-repair", (uint64_t)v179);
            uint64_t v151 = v176;
            __SCNetworkConfigurationBackup(v176, @"pre-repair", (uint64_t)v150);
            __SCNetworkConfigurationReport(7, "pre-repair", v150, v151);
            if (v139) {
              logInterfaces((uint64_t)"Interfaces to be removed", v139, 0);
            }
            if (v140) {
              logInterfaces((uint64_t)"Interfaces to be replaced", v140, 0);
            }
            char v152 = SCNetworkServiceCopyAll(v179);
            v198.length = CFArrayGetCount(v152);
            v198.io_name_t location = 0LL;
            CFArrayApplyFunction(v152, v198, (CFArrayApplierFunction)create_bsd_name_service_protocol_mapping, &context);
            if (v189)
            {
              int v192 = 7;
              v193 = "BSD name / Service Protocol mapping";
              CFDictionaryApplyFunction(v189, (CFDictionaryApplierFunction)logMapping_one, &v192);
            }

            v199.length = CFArrayGetCount(v152);
            v199.io_name_t location = 0LL;
            CFArrayApplyFunction(v152, v199, (CFArrayApplierFunction)remove_service, &context);
            v200.io_name_t location = 0LL;
            v200.length = v149;
            CFArrayApplyFunction(v140, v200, (CFArrayApplierFunction)add_service, &context);
            CFRelease(v152);
            CFArrayRef v153 = v179;
            __SCNetworkConfigurationReport(7, "post-repair", v179, v151);
            unsigned __int8 v180 = 1;
            int v154 = SCPreferencesCommitChanges(v153);
            CFMutableArrayRef Mutable = v178;
            CFMutableArrayRef v63 = v174;
            if (!v154)
            {
              int v155 = __log_SCNetworkConfiguration();
              uint64_t v156 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v155, (os_log_type_t)v156))
              {
                uint64_t v157 = _os_log_pack_size();
                CFIndex v158 = (char *)&v168 - ((MEMORY[0x1895F8858](v157) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                *(_WORD *)_os_log_pack_fill() = 0;
                CFIndex v159 = v158;
                CFMutableArrayRef v63 = v174;
                __SC_log_send(5, (uint64_t)v155, v156, v159);
              }
            }

            goto LABEL_97;
          }

          int v74 = 0LL;
          os_log_t v73 = 0LL;
          uint64_t v71 = 0LL;
          unsigned __int8 v180 = 0;
          CFMutableArrayRef v63 = v174;
        }

        else
        {
          int v74 = 0LL;
          os_log_t v73 = 0LL;
          uint64_t v71 = 0LL;
        }

LABEL_131:
        CFMutableArrayRef v72 = v173;
LABEL_132:
        CFRelease(MappingUsingBSDName);
        if (v59) {
          CFRelease(v59);
        }
LABEL_63:
        if (v74) {
          CFRelease(v74);
        }
        if (v73) {
          CFRelease(v73);
        }
        if (v71) {
          CFRelease(v71);
        }
        uint64_t v75 = v177;
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v63) {
          CFRelease(v63);
        }
        if (v72) {
          CFRelease(v72);
        }
        if (v75) {
          CFRelease(v75);
        }
        goto LABEL_80;
      }

      BOOL v175 = v24;
      unsigned __int8 v180 = 0;
      CFArrayRef v88 = __log_SCNetworkConfiguration();
      uint64_t v89 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v88, (os_log_type_t)v89)) {
        goto LABEL_91;
      }
    }

    else
    {
      BOOL v175 = v24;
      unsigned __int8 v180 = 0;
      CFArrayRef v88 = __log_SCNetworkConfiguration();
      uint64_t v89 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v88, (os_log_type_t)v89))
      {
LABEL_91:
        uint64_t v90 = _os_log_pack_size();
        uint64_t v91 = (char *)&v168 - ((MEMORY[0x1895F8858](v90) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v92 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v92 = 138412290;
        *(void *)(v92 + 4) = v179;
        __SC_log_send(5, (uint64_t)v88, v89, v91);
      }
    }

    int v74 = 0LL;
    os_log_t v73 = 0LL;
    CFMutableArrayRef Mutable = 0LL;
    CFMutableArrayRef v63 = 0LL;
    CFMutableArrayRef v72 = 0LL;
    CFRange v177 = 0LL;
    uint64_t v59 = 0LL;
    uint64_t v71 = 0LL;
    BOOL v24 = v175;
    goto LABEL_132;
  }

  uint64_t v76 = __log_SCNetworkConfiguration();
  uint64_t v77 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v76, (os_log_type_t)v77))
  {
    uint64_t v78 = _os_log_pack_size();
    uint64_t v79 = (char *)&v168 - ((MEMORY[0x1895F8858](v78) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v80 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v80 = 138412290;
    *(void *)(v80 + 4) = a2;
    __SC_log_send(5, (uint64_t)v76, v77, v79);
  }

  unsigned __int8 v180 = 0;
LABEL_80:
  if (!v24) {
    _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v179, 0);
  }
  uint64_t v81 = __log_SCNetworkConfiguration();
  uint64_t v82 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v81, (os_log_type_t)v82))
  {
    uint64_t v83 = _os_log_pack_size();
    __int128 v84 = (char *)&v168 - ((MEMORY[0x1895F8858](v83) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v85 = _os_log_pack_fill();
    if (v180) {
      os_log_t v86 = v13;
    }
    else {
      os_log_t v86 = "not ";
    }
    *(_DWORD *)uint64_t v85 = 136315138;
    *(void *)(v85 + 4) = v86;
    __SC_log_send(6, (uint64_t)v81, v82, v84);
  }

  return v180;
}

void logInterfaces(uint64_t a1, const __CFArray *a2, int a3)
{
  uint64_t v36 = a1;
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    uint64_t v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      CFTypeID v7 = (char *)&v36 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 136315138;
      *(void *)(v8 + 4) = v36;
      __SC_log_send(7, (uint64_t)v4, v5, v7);
    }

    CFMutableArrayRef Mutable = 0LL;
  }

  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  }

  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v12 = Count;
    CFIndex v13 = 0LL;
    CFIndex v37 = @"UserDefinedName";
    *(void *)&__int128 v11 = 138412546LL;
    __int128 v38 = v11;
    CFTypeID v39 = Mutable;
    CFIndex v40 = Count;
    do
    {
      SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a2, v13);
      CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
      if (!ValueAtIndex)
      {
        CFDictionaryGetTypeID();
LABEL_19:
        BOOL v22 = 0LL;
        BOOL v17 = @"?";
        if (!Mutable) {
          goto LABEL_22;
        }
        goto LABEL_20;
      }

      if (CFGetTypeID(ValueAtIndex) == TypeID)
      {
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        if (BSDName)
        {
          BOOL v17 = BSDName;
          UserDefinedCFStringRef Name = __SCNetworkInterfaceGetUserDefinedName(ValueAtIndex);
LABEL_17:
          BOOL v22 = (const __CFString *)UserDefinedName;
          if (!Mutable) {
            goto LABEL_22;
          }
          goto LABEL_20;
        }
      }

      else
      {
        CFTypeID v19 = CFDictionaryGetTypeID();
        if (CFGetTypeID(ValueAtIndex) != v19) {
          goto LABEL_19;
        }
        CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        if (Value)
        {
          BOOL v17 = Value;
          uint64_t v21 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"SCNetworkInterfaceInfo");
          if (v21)
          {
            UserDefinedCFStringRef Name = (uint64_t)CFDictionaryGetValue(v21, v37);
            goto LABEL_17;
          }

          BOOL v22 = 0LL;
          if (!Mutable)
          {
LABEL_22:
            uint64_t v23 = __log_SCNetworkConfiguration();
            uint64_t v24 = _SC_syslog_os_log_mapping(7);
            if (__SC_log_enabled(7, v23, (os_log_type_t)v24))
            {
              uint64_t v25 = _os_log_pack_size();
              CFPropertyListRef v26 = a2;
              CFTypeID v27 = (char *)&v36 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v28 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v28 = v38;
              if (v22) {
                uint64_t v29 = v22;
              }
              else {
                uint64_t v29 = @"?";
              }
              *(void *)(v28 + 4) = v17;
              *(_WORD *)(v28 + 12) = 2112;
              *(void *)(v28 + 14) = v29;
              __SC_log_send(7, (uint64_t)v23, v24, v27);
              a2 = v26;
              CFMutableArrayRef Mutable = v39;
              CFIndex v12 = v40;
            }

            goto LABEL_27;
          }

void _SCNetworkConfigurationValidateInterface(void *key, void *a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  int v3 = *(unsigned __int8 *)(a3 + 80);
  if (**(_BYTE **)(a3 + 32) | v3)
  {
    uint64_t v8 = *(const __CFDictionary **)a3;
    CFTypeID v7 = *(const __CFDictionary **)(a3 + 8);
    uint64_t v9 = *(__CFArray **)(a3 + 40);
    uint64_t v42 = *(__CFArray **)(a3 + 48);
    CFTypeID v10 = *(__CFArray **)(a3 + 56);
    __int128 v11 = *(const __CFDictionary **)(a3 + 16);
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 24), key);
    if (Value)
    {
      CFIndex v13 = Value;
      UserDefinedCFStringRef Name = (const __CFString *)__SCNetworkInterfaceGetUserDefinedName(Value);
      CFTypeID v15 = (const __CFString *)__SCNetworkInterfaceGetUserDefinedName(a2);
      if (!__SCNetworkConfigurationInterfaceNameIsEquiv(UserDefinedName, v15))
      {
        uint64_t v16 = __log_SCNetworkConfiguration();
        uint64_t v17 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
        {
          uint64_t v18 = _os_log_pack_size();
          uint64_t v40 = (uint64_t)&v40;
          uint64_t v19 = MEMORY[0x1895F8858](v18);
          uint64_t v41 = v9;
          uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v21 = 138412546;
          *(void *)(v21 + 4) = UserDefinedName;
          *(_WORD *)(v21 + 12) = 2112;
          *(void *)(v21 + 14) = v15;
          BOOL v22 = v20;
          uint64_t v9 = v41;
          __SC_log_send(5, (uint64_t)v16, v17, v22);
        }

        **(_BYTE **)(a3 + 32) = 0;
        CFTypeID TypeID = CFArrayGetTypeID();
        if (v10 && CFGetTypeID(v10) == TypeID && __SCNetworkInterfaceMatchesName(UserDefinedName, v15))
        {
          uint64_t v24 = __log_SCNetworkConfiguration();
          uint64_t v25 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v24, (os_log_type_t)v25))
          {
            uint64_t v26 = _os_log_pack_size();
            uint64_t v41 = (__CFArray *)&v40;
            CFTypeID v27 = v9;
            uint64_t v28 = (char *)&v40 - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v29 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v29 = 138412546;
            *(void *)(v29 + 4) = v15;
            *(_WORD *)(v29 + 12) = 2112;
            *(void *)(v29 + 14) = UserDefinedName;
            CFStringRef v30 = v28;
            uint64_t v9 = v27;
            __SC_log_send(5, (uint64_t)v24, v25, v30);
          }

          CFArrayAppendValue(v10, a2);
        }

        CFTypeID v31 = CFArrayGetTypeID();
        uint64_t v32 = v42;
        if (v42 && CFGetTypeID(v42) == v31) {
          CFArrayAppendValue(v32, v13);
        }
        CFTypeID v33 = CFArrayGetTypeID();
        if (v9)
        {
          if (CFGetTypeID(v9) == v33) {
            CFArrayAppendValue(v9, a2);
          }
        }
      }
    }

    else if (v8 {
           && !CFDictionaryContainsKey(v8, key)
    }
           && v7
           && !CFDictionaryContainsKey(v7, key)
           && v11
           && !CFDictionaryContainsKey(v11, key))
    {
      uint64_t v34 = v9;
      uint64_t v35 = __log_SCNetworkConfiguration();
      uint64_t v36 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
      {
        uint64_t v37 = _os_log_pack_size();
        __int128 v38 = (char *)&v40 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v39 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v39 = 138412290;
        *(void *)(v39 + 4) = key;
        __SC_log_send(5, (uint64_t)v35, v36, v38);
      }

      if (v3) {
        CFArrayAppendValue(v34, a2);
      }
      **(_BYTE **)(a3 + 32) = 0;
    }
  }

void validate_bridge(const __SCNetworkInterface *a1, const __SCPreferences *a2)
{
  v16[1] = *MEMORY[0x1895F89C0];
  MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (CFArrayGetCount(MemberInterfaces) >= 1)
  {
    CFIndex v6 = 0LL;
    do
    {
      SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(MemberInterfaces, v6);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
      if (BSDName)
      {
        uint64_t v9 = (const void *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(0, a2, BSDName);
        if (v9)
        {
          CFTypeID v10 = v9;
          CFArrayAppendValue(Mutable, v9);
          CFRelease(v10);
        }
      }

      ++v6;
    }

    while (v6 < CFArrayGetCount(MemberInterfaces));
  }

  if (CFArrayGetCount(Mutable))
  {
    SCBridgeInterfaceSetMemberInterfaces((const __SCPreferences **)a1, Mutable);
  }

  else
  {
    __int128 v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v14 = (char *)v16 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = a1;
      __SC_log_send(5, (uint64_t)v11, v12, v14);
    }

    SCBridgeInterfaceRemove((SCPreferencesRef *)a1);
  }

  CFRelease(Mutable);
}

void validate_vlan(const __SCNetworkInterface *a1, const __SCPreferences **a2)
{
  v19[1] = *MEMORY[0x1895F89C0];
  SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(a1);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(PhysicalInterface);
  if (!BSDName) {
    goto LABEL_14;
  }
  CFStringRef v6 = BSDName;
  CFTypeID v7 = (const void *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(0, a2[1], BSDName);
  if (v7)
  {
    CFRelease(v7);
    return;
  }

  uint64_t v8 = a2[2];
  if (v8 == (const __CFArray *)*MEMORY[0x189605018])
  {
    uint64_t v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(*a2);
    a2[2] = v8;
    if (v8) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
    {
      uint64_t v16 = _os_log_pack_size();
      uint64_t v17 = (char *)v19 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 138412290;
      *(void *)(v18 + 4) = a1;
      __SC_log_send(5, (uint64_t)v14, v15, v17);
    }

    SCVLANInterfaceRemove(a1);
    return;
  }

  if (!v8) {
    goto LABEL_14;
  }
LABEL_8:
  CFIndex Count = CFArrayGetCount(v8);
  if (Count < 1) {
    goto LABEL_14;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0LL;
  while (1)
  {
    SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v8, v11);
    CFStringRef v13 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (v13 == v6 || v13 && CFEqual(v6, v13)) {
      break;
    }
    if (v10 == ++v11) {
      goto LABEL_14;
    }
  }

uint64_t _SCNetworkConfigurationCheckValidity(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    int v3 = (const void *)MEMORY[0x186E08F24](0LL, @"Library/Preferences/SystemConfiguration/", 0LL, 1LL, a1);
    uint64_t v4 = (const __CFURL *)MEMORY[0x186E08F0C](0LL, "preferences.plist", 18LL, 0LL, v3);
    uint64_t v5 = (const __CFURL *)MEMORY[0x186E08F0C](0LL, "NetworkInterfaces.plist", 24LL, 0LL, v3);
    if (CFURLGetFileSystemRepresentation(v4, 1u, v25, 1024LL))
    {
      if (CFURLGetFileSystemRepresentation(v5, 1u, v26, 1024LL))
      {
        CFStringRef v6 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v25);
        CFTypeID v7 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v26);
        uint64_t v8 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v6);
        uint64_t v9 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v7);
        CFIndex v10 = v9;
        uint64_t v11 = 0LL;
        if (v8 && v9) {
          uint64_t v11 = _SCNetworkConfigurationCheckValidityWithPreferences(v8, v9, a2);
        }
        goto LABEL_16;
      }

      uint64_t v17 = __log_SCNetworkConfiguration();
      uint64_t v18 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
      {
        uint64_t v22 = _os_log_pack_size();
        uint64_t v20 = &v25[-((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v23 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v23 = 138412290;
        *(void *)(v23 + 4) = v5;
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v17 = __log_SCNetworkConfiguration();
      uint64_t v18 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
      {
        uint64_t v19 = _os_log_pack_size();
        uint64_t v20 = &v25[-((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v21 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v21 = 138412290;
        *(void *)(v21 + 4) = v4;
LABEL_14:
        __SC_log_send(5, (uint64_t)v17, v18, (char *)v20);
      }
    }

    uint64_t v11 = 0LL;
    CFStringRef v6 = 0LL;
    uint64_t v8 = 0LL;
    CFIndex v10 = 0LL;
    CFTypeID v7 = 0LL;
LABEL_16:
    if (v3) {
      CFRelease(v3);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
    return v11;
  }

  uint64_t v12 = __log_SCNetworkConfiguration();
  uint64_t v13 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
  {
    uint64_t v14 = _os_log_pack_size();
    uint64_t v15 = (char *)&v25[-((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 138412290;
    *(void *)(v16 + 4) = @"NULL";
    __SC_log_send(5, (uint64_t)v12, v13, v15);
  }

  return 0LL;
}

uint64_t __SCPreferencesCreateForMigration(const __CFString *a1, const __CFString *a2)
{
  keys[1] = *(void **)MEMORY[0x1895F89C0];
  keys[0] = @"allow-model-conflict";
  values = (void *)*MEMORY[0x189604DE8];
  uint64_t v4 = CFDictionaryCreate( 0LL,  (const void **)keys,  (const void **)&values,  1LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  uint64_t v5 = SCPreferencesCreateWithOptions(0LL, a1, a2, 0LL, v4);
  CFRelease(v4);
  return v5;
}

BOOL _SCNetworkMigrationAreConfigurationsIdentical(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  BOOL v3 = 0LL;
  v121[64] = *MEMORY[0x1895F89C0];
  if (!v1) {
    return v3;
  }
  uint64_t v4 = v2;
  if (!v2) {
    return v3;
  }
  uint64_t v5 = (const void *)MEMORY[0x186E08F24](0LL, @"Library/Preferences/SystemConfiguration/", 0LL, 1LL, v1);
  CFStringRef v6 = (const __CFURL *)MEMORY[0x186E08F0C](0LL, "preferences.plist", 18LL, 0LL, v5);
  if (!CFURLResourceIsReachable(v6, 0LL))
  {
    uint64_t v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      uint64_t v21 = (char *)&v100 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v22 = 138412290;
      *(void *)(v22 + 4) = v6;
      __SC_log_send(5, (uint64_t)v18, v19, v21);
    }

    CFStringRef v108 = 0LL;
    int v109 = 0LL;
    CFStringRef v107 = 0LL;
    uint64_t v113 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    CFTypeID v7 = 0LL;
    goto LABEL_24;
  }

  CFTypeID v7 = (const __CFURL *)MEMORY[0x186E08F0C](0LL, "NetworkInterfaces.plist", 24LL, 0LL, v5);
  if (CFURLResourceIsReachable(v7, 0LL))
  {
    if (CFURLGetFileSystemRepresentation(v6, 1u, v117, 1024LL))
    {
      if (CFURLGetFileSystemRepresentation(v7, 1u, v119, 1024LL))
      {
        uint64_t v8 = (void *)MEMORY[0x186E08F24](0LL, @"Library/Preferences/SystemConfiguration/", 0LL, 1LL, v4);
        uint64_t v9 = (const __CFURL *)MEMORY[0x186E08F0C](0LL, "preferences.plist", 18LL, 0LL, v8);
        if (!CFURLResourceIsReachable(v9, 0LL))
        {
          CFTypeID v51 = __log_SCNetworkConfiguration();
          uint64_t v52 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v51, (os_log_type_t)v52))
          {
            uint64_t v53 = _os_log_pack_size();
            uint64_t v115 = &v100;
            uint64_t v54 = (char *)&v100 - ((MEMORY[0x1895F8858](v53) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v51, v52, v54);
          }

          CFStringRef v108 = 0LL;
          int v109 = 0LL;
          CFStringRef v107 = 0LL;
          uint64_t v113 = 0LL;
          uint64_t v23 = 0LL;
          goto LABEL_73;
        }

        CFIndex v10 = (const __CFURL *)MEMORY[0x186E08F0C](0LL, "NetworkInterfaces.plist", 24LL, 0LL, v8);
        uint64_t v114 = v10;
        if (CFURLResourceIsReachable(v10, 0LL))
        {
          if (CFURLGetFileSystemRepresentation(v9, 1u, v116, 1024LL))
          {
            if (CFURLGetFileSystemRepresentation(v10, 1u, v118, 1024LL))
            {
              CFStringRef v11 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v117);
              uint64_t v113 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v119);
              uint64_t v12 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v116);
              CFStringRef v13 = CFStringCreateWithFormat(0LL, 0LL, @"%s", v118);
              CFStringRef v108 = v11;
              uint64_t v115 = (void *)__SCPreferencesCreateForMigration(@"System Migration", v11);
              int v109 = v12;
              uint64_t v14 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v12);
              uint64_t v15 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v113);
              uint64_t v16 = v115;
              CFStringRef v107 = v13;
              uint64_t v17 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v13);
LABEL_80:
              uint64_t v23 = v114;
              goto LABEL_25;
            }

            uint64_t v61 = __log_SCNetworkConfiguration();
            uint64_t v62 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v61, (os_log_type_t)v62))
            {
              uint64_t v63 = _os_log_pack_size();
              uint64_t v115 = v8;
              uint64_t v113 = (const __CFString *)&v100;
              CFMutableArrayRef v64 = (char *)&v100 - ((MEMORY[0x1895F8858](v63) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              uint64_t v8 = v115;
              uint64_t v65 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v65 = 138412290;
              int v66 = v114;
              *(void *)(v65 + 4) = v114;
              uint64_t v67 = (uint64_t)v61;
              uint64_t v23 = v66;
              __SC_log_send(5, v67, v62, v64);
              CFStringRef v108 = 0LL;
              int v109 = 0LL;
              CFStringRef v107 = 0LL;
              uint64_t v113 = 0LL;
LABEL_73:
              uint64_t v17 = 0LL;
              uint64_t v14 = 0LL;
              uint64_t v15 = 0LL;
              uint64_t v16 = 0LL;
              goto LABEL_25;
            }

LABEL_111:
            CFStringRef v6 = v106;
            if (v102 != v121) {
              CFAllocatorDeallocate(0LL, v102);
            }
            if (v79)
            {
              BOOL v3 = 0LL;
              uint64_t v5 = v105;
              goto LABEL_41;
            }

            CFIndex v87 = (const __CFArray *)SCPreferencesGetValue(v112, @"Interfaces");
            CFTypeID v88 = CFArrayGetTypeID();
            if (v87 && CFGetTypeID(v87) == v88)
            {
              CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, v87);
              CFArrayRef v103 = (CFArrayRef)CFArrayGetCount(MutableCopy);
              uint64_t v90 = (const void **)SCPreferencesGetValue(v111, @"Interfaces");
              CFTypeID v91 = CFArrayGetTypeID();
              uint64_t v5 = v105;
              if (v90 && CFGetTypeID(v90) == v91)
              {
                uint64_t v102 = v90;
                CFIndex v92 = CFArrayGetCount((CFArrayRef)v90);
                int v93 = 0;
                if (v103 == (CFArrayRef)v92 && v92 >= 1)
                {
                  CFIndex v94 = 0LL;
                  while (1)
                  {
                    CFIndex v95 = v94;
                    uint64_t v104 = (__CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v102, v94);
                    CFIndex v96 = CFArrayGetCount(MutableCopy);
                    if (v96 < 1) {
                      break;
                    }
                    CFIndex v97 = v96;
                    CFIndex v98 = 0LL;
                    while (1)
                    {
                      CFTypeID v99 = CFArrayGetValueAtIndex(v87, v98);
                      if (CFEqual(v104, v99)) {
                        break;
                      }
                      if (v97 == ++v98) {
                        goto LABEL_137;
                      }
                    }

                    CFIndex v94 = v95 + 1;
                    int v93 = 1;
                    CFStringRef v6 = v106;
                    if ((CFArrayRef)(v95 + 1) == v103) {
                      goto LABEL_133;
                    }
                  }

LABEL_137:
                  int v93 = 0;
                  CFStringRef v6 = v106;
                  if (!MutableCopy) {
                    goto LABEL_135;
                  }
                  goto LABEL_134;
                }
              }

              else
              {
                int v93 = 0;
              }

LABEL_133:
              if (MutableCopy) {
LABEL_134:
              }
                CFRelease(MutableCopy);
            }

            else
            {
              int v93 = 0;
              uint64_t v5 = v105;
            }

__CFArray *_SCNetworkConfigurationCopyMigrationRemovePaths(const __CFArray *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (CFArrayGetCount(a1) >= 1)
  {
    CFIndex v6 = 0LL;
    *(void *)&__int128 v5 = 138412290LL;
    __int128 v16 = v5;
    uint64_t v17 = a2;
    do
    {
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      if (CFURLGetFileSystemRepresentation((CFURLRef)ValueAtIndex, 1u, v18, 1024LL))
      {
        size_t v8 = strnlen((const char *)v18, 0x400uLL);
        uint64_t v9 = (const __CFURL *)MEMORY[0x186E08F0C](0LL, v18, v8, 0LL, a2);
        if (!CFURLResourceIsReachable(v9, 0LL)) {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
        CFRelease(v9);
      }

      else
      {
        CFIndex v10 = __log_SCNetworkConfiguration();
        uint64_t v11 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
        {
          uint64_t v12 = _os_log_pack_size();
          CFStringRef v13 = (char *)&v16 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v14 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v14 = v16;
          *(void *)(v14 + 4) = ValueAtIndex;
          __SC_log_send(5, (uint64_t)v10, v11, v13);
          a2 = v17;
        }
      }

      ++v6;
    }

    while (v6 < CFArrayGetCount(a1));
  }

  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0LL;
  }

  return Mutable;
}

void logMapping_one(const __SCNetworkService *a1, const __SCNetworkService *a2, uint64_t a3)
{
  v37[1] = *MEMORY[0x1895F89C0];
  if (*(void *)(a3 + 8))
  {
    CFIndex v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(*(_DWORD *)a3);
    if (__SC_log_enabled(*(_DWORD *)a3, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v9 = (char *)v37 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = *(void *)(a3 + 8);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v11;
      __SC_log_send(*(_DWORD *)a3, (uint64_t)v6, v7, v9);
    }

    *(void *)(a3 + 8) = 0LL;
  }

  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!a1)
  {
    SCNetworkSetGetTypeID();
    SCNetworkInterfaceGetTypeID();
    goto LABEL_14;
  }

  if (CFGetTypeID(a1) == TypeID)
  {
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(a1);
  }

  else
  {
    CFTypeID v14 = SCNetworkSetGetTypeID();
    if (CFGetTypeID(a1) == v14)
    {
      CFStringRef ServiceID = SCNetworkSetGetSetID(a1);
    }

    else
    {
      CFTypeID v15 = SCNetworkInterfaceGetTypeID();
      if (CFGetTypeID(a1) != v15) {
        goto LABEL_14;
      }
      CFStringRef ServiceID = SCNetworkInterfaceGetBSDName(a1);
    }
  }

  a1 = (const __SCNetworkService *)ServiceID;
LABEL_14:
  CFTypeID v16 = SCNetworkServiceGetTypeID();
  if (!a2)
  {
    SCNetworkSetGetTypeID();
    SCNetworkInterfaceGetTypeID();
    CFBooleanGetTypeID();
    CFArrayGetTypeID();
    CFMutableArrayRef Mutable = 0LL;
LABEL_21:
    char v20 = 1;
    goto LABEL_22;
  }

  if (CFGetTypeID(a2) == v16)
  {
    CFStringRef SetID = SCNetworkServiceGetServiceID(a2);
LABEL_20:
    CFMutableArrayRef Mutable = (__CFString *)SetID;
    goto LABEL_21;
  }

  CFTypeID v19 = SCNetworkSetGetTypeID();
  if (CFGetTypeID(a2) == v19)
  {
    CFStringRef SetID = SCNetworkSetGetSetID(a2);
    goto LABEL_20;
  }

  CFTypeID v26 = SCNetworkInterfaceGetTypeID();
  if (CFGetTypeID(a2) == v26)
  {
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a2);
    UserDefinedCFStringRef Name = __SCNetworkInterfaceGetUserDefinedName(a2);
    uint64_t v29 = @"?";
    if (UserDefinedName) {
      uint64_t v29 = (const __CFString *)UserDefinedName;
    }
    CFMutableArrayRef Mutable = (__CFString *)CFStringCreateWithFormat(0LL, 0LL, @"%@ (%@)", BSDName, v29);
LABEL_31:
    char v20 = 0;
    goto LABEL_22;
  }

  CFTypeID v30 = CFBooleanGetTypeID();
  if (CFGetTypeID(a2) == v30)
  {
    CFMutableArrayRef Mutable = @"None";
    goto LABEL_21;
  }

  CFTypeID v31 = CFArrayGetTypeID();
  if (CFGetTypeID(a2) == v31)
  {
    CFIndex Count = CFArrayGetCount(a2);
    CFMutableArrayRef Mutable = CFStringCreateMutable(0LL, 0LL);
    CFStringAppendFormat(Mutable, 0LL, @"( ");
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        SCNetworkSetRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(a2, i);
        CFTypeID v35 = SCNetworkSetGetTypeID();
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v35) {
          SCNetworkSetRef ValueAtIndex = (const __SCNetworkSet *)SCNetworkSetGetSetID(ValueAtIndex);
        }
        uint64_t v36 = ", ";
        if (!i) {
          uint64_t v36 = "";
        }
        CFStringAppendFormat(Mutable, 0LL, @"%s%@", v36, ValueAtIndex);
      }
    }

    CFStringAppendFormat(Mutable, 0LL, @""));
    goto LABEL_31;
  }

  char v20 = 1;
  CFMutableArrayRef Mutable = (__CFString *)a2;
LABEL_22:
  uint64_t v21 = __log_SCNetworkConfiguration();
  uint64_t v22 = _SC_syslog_os_log_mapping(*(_DWORD *)a3);
  if (__SC_log_enabled(*(_DWORD *)a3, v21, (os_log_type_t)v22))
  {
    uint64_t v23 = _os_log_pack_size();
    uint64_t v24 = (char *)v37 - ((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 138412546;
    *(void *)(v25 + 4) = a1;
    *(_WORD *)(v25 + 12) = 2112;
    *(void *)(v25 + 14) = Mutable;
    __SC_log_send(*(_DWORD *)a3, (uint64_t)v21, v22, v24);
  }

  if ((v20 & 1) == 0) {
    CFRelease(Mutable);
  }
}

uint64_t __SCNetworkConfigurationInterfaceNameIsEquiv(const __CFString *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0LL;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  CFTypeID v5 = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != v5) {
    return 0LL;
  }
  if (!CFEqual(a1, a2)
    && (!CFEqual(a1, @"AirPort") && !CFEqual(a1, @"Wi-Fi")
     || !CFEqual(a2, @"AirPort") && !CFEqual(a2, @"Wi-Fi"))
    && (!CFEqual(a1, @"Ethernet") && !CFEqual(a1, @"Ethernet 1")
     || !CFEqual(a2, @"Ethernet") && !CFEqual(a2, @"Ethernet 1")))
  {
    CFStringRef v6 = interfaceNameCreateWithoutPortSuffix(a1);
    if (v6)
    {
      CFStringRef v7 = v6;
      uint64_t v8 = a2;
    }

    else
    {
      CFStringRef v6 = interfaceNameCreateWithoutPortSuffix(a2);
      if (!v6) {
        goto LABEL_21;
      }
      CFStringRef v7 = v6;
      uint64_t v8 = a1;
    }

    int v10 = CFEqual(v6, v8);
    CFRelease(v7);
    if (v10) {
      return 1LL;
    }
LABEL_21:
    uint64_t v11 = 0LL;
    while (1)
    {
      uint64_t v12 = off_189B65090[v11];
      if ((CFEqual(a1, v12) || __SCNetworkInterfaceMatchesName(a1, v12))
        && (CFEqual(a2, v12) || __SCNetworkInterfaceMatchesName(a2, v12)))
      {
        break;
      }

      uint64_t result = 0LL;
      if (++v11 == 6) {
        return result;
      }
    }
  }

  return 1LL;
}

CFStringRef interfaceNameCreateWithoutPortSuffix(const __CFString *a1)
{
  CFRange v2 = CFStringFind(a1, @", Port ", 4uLL);
  if (v2.location != -1)
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex v4 = v2.location + v2.length;
    if (v2.location + v2.length >= Length)
    {
LABEL_6:
      v7.io_name_t location = 0LL;
      v7.length = v2.location;
      return CFStringCreateWithSubstring(0LL, a1, v7);
    }

    CFIndex v5 = Length;
    while (CFStringGetCharacterAtIndex(a1, v4) - 48 < 0xA)
    {
      if (++v4 >= v5) {
        goto LABEL_6;
      }
    }
  }

  return 0LL;
}

void create_bsd_name_service_protocol_mapping(const __SCNetworkService *a1, uint64_t a2)
{
  CFIndex v4 = *(const __CFArray **)(a2 + 56);
  BOOL v3 = *(__CFDictionary **)(a2 + 64);
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  if (Interface)
  {
    CFStringRef v6 = Interface;
    v26.length = CFArrayGetCount(v4);
    v26.io_name_t location = 0LL;
    if (CFArrayContainsValue(v4, v26, v6))
    {
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v6);
      CFTypeID TypeID = CFStringGetTypeID();
      if (BSDName)
      {
        if (CFGetTypeID(BSDName) == TypeID)
        {
          CFArrayRef v9 = SCNetworkServiceCopyProtocols(a1);
          if (v9)
          {
            int v10 = v9;
            CFStringRef v24 = BSDName;
            uint64_t v25 = v3;
            CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
            CFIndex Count = CFArrayGetCount(v10);
            if (Count >= 1)
            {
              CFIndex v13 = Count;
              CFIndex v14 = 0LL;
              CFTypeID v15 = (const void *)*MEMORY[0x189604DE8];
              CFTypeID v16 = (const void *)*MEMORY[0x189604DE0];
              do
              {
                SCNetworkSetRef ValueAtIndex = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v10, v14);
                CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(ValueAtIndex);
                CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(ValueAtIndex);
                int Enabled = SCNetworkProtocolGetEnabled(ValueAtIndex);
                if (Configuration && ProtocolType)
                {
                  int v21 = Enabled;
                  uint64_t v22 = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
                  CFDictionaryAddValue(v22, @"Protocol Type", ProtocolType);
                  CFDictionaryAddValue(v22, @"Protocol Configuration", Configuration);
                  if (v21) {
                    uint64_t v23 = v15;
                  }
                  else {
                    uint64_t v23 = v16;
                  }
                  CFDictionaryAddValue(v22, @"Protocol Enabled", v23);
                  CFArrayAppendValue(Mutable, v22);
                  CFRelease(v22);
                }

                ++v14;
              }

              while (v13 != v14);
            }

            CFDictionaryAddValue(v25, v24, Mutable);
            CFRelease(v10);
            CFRelease(Mutable);
          }
        }
      }
    }
  }

SCNetworkInterfaceRef remove_service(const __SCNetworkService *a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1895F89C0];
  BOOL v3 = *(const __CFArray **)(a2 + 40);
  SCNetworkInterfaceRef result = SCNetworkServiceGetInterface(a1);
  if (result)
  {
    CFIndex v5 = result;
    v18.length = CFArrayGetCount(v3);
    v18.io_name_t location = 0LL;
    SCNetworkInterfaceRef result = (SCNetworkInterfaceRef)CFArrayContainsValue(v3, v18, v5);
    if ((_DWORD)result)
    {
      CFStringRef ServiceID = SCNetworkServiceGetServiceID(a1);
      CFStringRef Name = SCNetworkServiceGetName(a1);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)v5);
      CFArrayRef v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
      {
        if (Name) {
          uint64_t v11 = Name;
        }
        else {
          uint64_t v11 = &stru_189B68690;
        }
        uint64_t v12 = _os_log_pack_size();
        CFIndex v13 = (char *)v17 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        CFTypeID v15 = ", ";
        *(_DWORD *)uint64_t v14 = 138413058;
        *(void *)(v14 + 4) = ServiceID;
        *(_WORD *)(v14 + 12) = 2112;
        if (!BSDName) {
          CFTypeID v15 = "";
        }
        *(void *)(v14 + 14) = v11;
        if (BSDName) {
          CFTypeID v16 = BSDName;
        }
        else {
          CFTypeID v16 = &stru_189B68690;
        }
        *(_WORD *)(v14 + 22) = 2080;
        *(void *)(v14 + 24) = v15;
        *(_WORD *)(v14 + 32) = 2112;
        *(void *)(v14 + 34) = v16;
        __SC_log_send(6, (uint64_t)v9, v10, v13);
      }

      return (SCNetworkInterfaceRef)SCNetworkServiceRemove(a1);
    }
  }

  return result;
}

void add_service(const __SCNetworkInterface *a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  BOOL v3 = *(const __CFDictionary **)(a2 + 64);
  CFIndex v4 = *(const __SCPreferences **)(a2 + 72);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  CFTypeID TypeID = CFStringGetTypeID();
  if (BSDName && CFGetTypeID(BSDName) == TypeID) {
    CFDictionaryRef Value = (const __CFArray *)CFDictionaryGetValue(v3, BSDName);
  }
  else {
    CFDictionaryRef Value = 0LL;
  }
  uint64_t v8 = SCNetworkServiceCreate(v4, a1);
  if (v8)
  {
    CFArrayRef v9 = v8;
    if (SCNetworkServiceEstablishDefaultConfiguration(v8))
    {
      CFStringRef v45 = BSDName;
      SCPreferencesRef v46 = v4;
      if (Value)
      {
        CFIndex Count = CFArrayGetCount(Value);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          for (CFIndex i = 0LL; i != v11; ++i)
          {
            SCNetworkSetRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, i);
            uint64_t v14 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"Protocol Configuration");
            CFTypeID v15 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Protocol Type");
            CFTypeID v16 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, @"Protocol Enabled");
            if (v16) {
              Boolean v17 = CFBooleanGetValue(v16);
            }
            else {
              Boolean v17 = 0;
            }
            __SCNetworkServiceAddProtocolToService(v9, v15, v14, v17);
          }
        }
      }

      CFRange v18 = SCNetworkSetCopyCurrent(v46);
      if (v18)
      {
        CFTypeID v19 = v18;
        if (SCNetworkSetAddService(v18, v9))
        {
          CFStringRef ServiceID = SCNetworkServiceGetServiceID(v9);
          CFStringRef Name = SCNetworkServiceGetName(v9);
          uint64_t v22 = __log_SCNetworkConfiguration();
          uint64_t v23 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v22, (os_log_type_t)v23))
          {
            if (Name) {
              CFStringRef v24 = Name;
            }
            else {
              CFStringRef v24 = &stru_189B68690;
            }
            uint64_t v25 = _os_log_pack_size();
            CFRange v26 = (char *)&v44 - ((MEMORY[0x1895F8858](v25) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v27 = _os_log_pack_fill();
            uint64_t v28 = ", ";
            *(_DWORD *)uint64_t v27 = 138413058;
            *(void *)(v27 + 4) = ServiceID;
            *(_WORD *)(v27 + 12) = 2112;
            uint64_t v29 = v45;
            if (!v45) {
              uint64_t v28 = "";
            }
            *(void *)(v27 + 14) = v24;
            if (v29) {
              CFTypeID v30 = v29;
            }
            else {
              CFTypeID v30 = &stru_189B68690;
            }
            *(_WORD *)(v27 + 22) = 2080;
            *(void *)(v27 + 24) = v28;
            *(_WORD *)(v27 + 32) = 2112;
            *(void *)(v27 + 34) = v30;
            __SC_log_send(6, (uint64_t)v22, v23, v26);
          }
        }

        else
        {
          uint64_t v40 = __log_SCNetworkConfiguration();
          uint64_t v41 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v40, (os_log_type_t)v41))
          {
            uint64_t v42 = _os_log_pack_size();
            uint64_t v43 = (char *)&v44 - ((MEMORY[0x1895F8858](v42) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v40, v41, v43);
          }

          SCNetworkServiceRemove(v9);
        }

        CFRelease(v9);
        uint64_t v39 = v19;
        goto LABEL_37;
      }

      CFTypeID v35 = __log_SCNetworkConfiguration();
      uint64_t v36 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v35, (os_log_type_t)v36)) {
        goto LABEL_31;
      }
    }

    else
    {
      CFTypeID v35 = __log_SCNetworkConfiguration();
      uint64_t v36 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
      {
LABEL_31:
        uint64_t v37 = _os_log_pack_size();
        __int128 v38 = (char *)&v44 - ((MEMORY[0x1895F8858](v37) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v35, v36, v38);
      }
    }

    SCNetworkServiceRemove(v9);
    uint64_t v39 = v9;
LABEL_37:
    CFRelease(v39);
    return;
  }

  CFTypeID v31 = __log_SCNetworkConfiguration();
  uint64_t v32 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v31, (os_log_type_t)v32))
  {
    uint64_t v33 = _os_log_pack_size();
    uint64_t v34 = (char *)&v44 - ((MEMORY[0x1895F8858](v33) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v31, v32, v34);
  }

BOOL __SCNetworkConfigurationMigrateConfigurationFilesPresent(const __CFURL *a1, CFArrayRef *a2, int a3)
{
  v29[1] = *(const void **)MEMORY[0x1895F89C0];
  if (a1)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, MEMORY[0x189605228]);
    _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(a1, &v28, v29);
    CFRange v7 = v28;
    CFArrayAppendValue(Mutable, v28);
    uint64_t v8 = v29[0];
    CFArrayAppendValue(Mutable, v29[0]);
    CFRelease(v7);
    CFRelease(v8);
    *a2 = Mutable;
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count < 1) {
      return 1LL;
    }
    CFIndex v10 = Count;
    CFIndex v11 = 0LL;
    while (1)
    {
      SCNetworkSetRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(*a2, v11);
      if (v10 == ++v11) {
        return 1LL;
      }
    }

    if (!a3) {
      return 0LL;
    }
    uint64_t v22 = __log_SCNetworkConfiguration();
    uint64_t v23 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v22, (os_log_type_t)v23);
    if (!result) {
      return result;
    }
    uint64_t v24 = _os_log_pack_size();
    uint64_t v25 = (char *)&v27 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v26 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v26 = 138412290;
    *(void *)(v26 + 4) = ValueAtIndex;
    int v18 = 6;
    uint64_t v19 = (uint64_t)v22;
    uint64_t v20 = v23;
    int v21 = v25;
  }

  else
  {
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v14, (os_log_type_t)v15);
    if (!result) {
      return result;
    }
    uint64_t v16 = _os_log_pack_size();
    Boolean v17 = (char *)&v27 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    int v18 = 5;
    uint64_t v19 = (uint64_t)v14;
    uint64_t v20 = v15;
    int v21 = v17;
  }

  __SC_log_send(v18, v19, v20, v21);
  return 0LL;
}

void __SCNetworkPopulateDefaultPrefs(const __SCPreferences *a1)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  CFRange v2 = __log_SCNetworkConfiguration();
  uint64_t v3 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v2, (os_log_type_t)v3))
  {
    uint64_t v4 = _os_log_pack_size();
    CFIndex v5 = (char *)&v10 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)(v6 + 4) = a1;
    __SC_log_send(6, (uint64_t)v2, v3, v5);
  }

  Default = (const __SCPreferences **)SCNetworkSetCopyCurrent(a1);
  if (!Default) {
    Default = (const __SCPreferences **)_SCNetworkSetCreateDefault(a1);
  }
  SCNetworkSetEstablishDefaultConfiguration(Default);
  CFRelease(Default);
  if (!SCPreferencesGetValue(a1, @"Model"))
  {
    uint64_t v8 = (const void *)_SC_hw_model(0);
    SCPreferencesSetValue(a1, @"Model", v8);
  }

  if (!SCPreferencesGetValue(a1, @"__VERSION__"))
  {
    HIDWORD(v10) = 20191120;
    CFNumberRef v9 = CFNumberCreate(0LL, kCFNumberIntType, (char *)&v10 + 4);
    SCPreferencesSetValue(a1, @"__VERSION__", v9);
    CFRelease(v9);
  }

void __SCNetworkPopulateDefaultNIPrefs(const __SCPreferences *a1)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  CFPropertyListRef Value = SCPreferencesGetValue(a1, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    uint64_t v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      CFRange v7 = (char *)&v31 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 138412290;
      *(void *)(v8 + 4) = a1;
      __SC_log_send(6, (uint64_t)v4, v5, v7);
    }

    CFNumberRef v9 = __SCNetworkInterfaceCopyAll_IONetworkInterface(1);
    if (v9)
    {
      uint64_t v10 = v9;
      SCPreferencesRef v31 = a1;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      if (CFArrayGetCount(v10) >= 1)
      {
        CFIndex v12 = 0LL;
        uint64_t v32 = v10;
        do
        {
          SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v12);
          uint64_t v14 = __SCNetworkInterfaceCopyStorageEntity((uint64_t)ValueAtIndex);
          if (v14)
          {
            uint64_t v15 = v14;
            IOCFStringRef InterfaceType = (const __CFNumber *)_SCNetworkInterfaceGetIOInterfaceType((uint64_t)ValueAtIndex);
            uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit((uint64_t)ValueAtIndex);
            if (IOInterfaceType)
            {
              int v18 = (const __CFNumber *)IOInterfaceUnit;
              if (IOInterfaceUnit)
              {
                if (CFArrayGetCount(Mutable) < 1)
                {
                  CFIndex v19 = 0LL;
                }

                else
                {
                  CFIndex v19 = 0LL;
                  do
                  {
                    uint64_t v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v19);
                    int v21 = (const __CFNumber *)CFDictionaryGetValue(v20, @"IOInterfaceType");
                    uint64_t v22 = (const __CFNumber *)CFDictionaryGetValue(v20, @"IOInterfaceUnit");
                    CFComparisonResult v23 = CFNumberCompare(IOInterfaceType, v21, 0LL);
                    if (v23 == kCFCompareEqualTo) {
                      CFComparisonResult v23 = CFNumberCompare(v18, v22, 0LL);
                    }
                    if (v23 == kCFCompareLessThan) {
                      break;
                    }
                    ++v19;
                  }

                  while (v19 < CFArrayGetCount(Mutable));
                }

                CFArrayInsertValueAtIndex(Mutable, v19, v15);
                uint64_t v10 = v32;
              }
            }

            CFRelease(v15);
          }

          ++v12;
        }

        while (v12 < CFArrayGetCount(v10));
      }

      uint64_t v24 = v31;
      SCPreferencesSetValue(v31, @"Interfaces", Mutable);
      CFRelease(Mutable);
      if (!SCPreferencesGetValue(v24, @"Model"))
      {
        uint64_t v25 = (const void *)_SC_hw_model(0);
        SCPreferencesSetValue(v24, @"Model", v25);
      }

      if (!SCPreferencesGetValue(v24, @"__VERSION__"))
      {
        int valuePtr = 20191120;
        CFNumberRef v26 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
        SCPreferencesSetValue(v24, @"__VERSION__", v26);
        CFRelease(v26);
      }

      CFRelease(v10);
    }

    else
    {
      uint64_t v27 = __log_SCNetworkConfiguration();
      uint64_t v28 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v27, (os_log_type_t)v28))
      {
        uint64_t v29 = _os_log_pack_size();
        CFTypeID v30 = (char *)&v31 - ((MEMORY[0x1895F8858](v29) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v27, v28, v30);
      }
    }
  }

BOOL hasSameModel(const __SCPreferences *a1, const __SCPreferences *a2)
{
  CFPropertyListRef Value = SCPreferencesGetValue(a1, @"Model");
  CFPropertyListRef v4 = SCPreferencesGetValue(a2, @"Model");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && (CFTypeID v6 = CFStringGetTypeID(), v4) && CFGetTypeID(v4) == v6) {
    return CFEqual(Value, v4) != 0;
  }
  else {
    return 0LL;
  }
}

uint64_t hasInterfaceConflict(const __SCPreferences *a1, const __SCPreferences *a2)
{
  cf2[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  uint64_t v3 = __SCNetworkInterfaceCopyStoredWithPreferences(a1);
  if (v3)
  {
    CFPropertyListRef v4 = v3;
    MappingUsingCFStringRef BSDName = __SCNetworkInterfaceCreateMappingUsingBSDName(v3);
    CFRelease(v4);
  }

  else
  {
    MappingUsingCFStringRef BSDName = 0LL;
  }

  CFTypeID v6 = __SCNetworkInterfaceCopyStoredWithPreferences(a2);
  if (!v6)
  {
    uint64_t v13 = 0LL;
    if (!MappingUsingBSDName) {
      return v13;
    }
    goto LABEL_17;
  }

  CFRange v7 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
LABEL_12:
    uint64_t v13 = 0LL;
  }

  else
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0LL;
    while (1)
    {
      cf2[0] = 0LL;
      SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v7, v10);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
      if (BSDName)
      {
        if (!MappingUsingBSDName
          || !CFDictionaryGetValueIfPresent(MappingUsingBSDName, BSDName, cf2)
          || !CFEqual(ValueAtIndex, cf2[0]))
        {
          break;
        }
      }

      if (v9 == ++v10) {
        goto LABEL_12;
      }
    }

    uint64_t v13 = 1LL;
  }

  CFRelease(v7);
  if (MappingUsingBSDName) {
LABEL_17:
  }
    CFRelease(MappingUsingBSDName);
  return v13;
}

void _SCNetworkConfigurationCreateBuiltinInterfaceServices( const __SCPreferences *a1, const __SCPreferences *cf)
{
  context[2] = *MEMORY[0x1895F89C0];
  uint64_t v3 = __SCNetworkInterfaceCopyStoredWithPreferences(cf);
  if (!v3)
  {
    uint64_t v22 = __log_SCNetworkConfiguration();
    uint64_t v23 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v22, (os_log_type_t)v23))
    {
      uint64_t v24 = _os_log_pack_size();
      uint64_t v25 = (char *)&v31 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v22, v23, v25);
    }

    return;
  }

  CFPropertyListRef v4 = v3;
  MappingUsingCFStringRef BSDName = __SCNetworkInterfaceCreateMappingUsingBSDName(v3);
  CFRelease(v4);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!MappingUsingBSDName) {
    return;
  }
  if (CFGetTypeID(MappingUsingBSDName) != TypeID) {
    goto LABEL_19;
  }
  CFRange v7 = __SCNetworkServiceCopyAllInterfaces(a1);
  if (!v7)
  {
    CFNumberRef v26 = __log_SCNetworkConfiguration();
    uint64_t v27 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v26, (os_log_type_t)v27))
    {
      uint64_t v28 = _os_log_pack_size();
      uint64_t v29 = (char *)&v31 - ((MEMORY[0x1895F8858](v28) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v26, v27, v29);
    }

    goto LABEL_19;
  }

  uint64_t v8 = v7;
  CFIndex v9 = __SCNetworkInterfaceCreateMappingUsingBSDName(v7);
  CFRelease(v8);
  CFTypeID v10 = CFDictionaryGetTypeID();
  if (!v9)
  {
LABEL_19:
    CFTypeID v30 = MappingUsingBSDName;
LABEL_20:
    CFRelease(v30);
    return;
  }

  if (CFGetTypeID(v9) == v10)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    context[0] = v9;
    context[1] = Mutable;
    CFDictionaryApplyFunction( MappingUsingBSDName,  (CFDictionaryApplierFunction)_SCNetworkConfigurationCollectMissingService,  context);
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      CFIndex v14 = Count;
      uint64_t v32 = v9;
      CFIndex v15 = 0LL;
      *(void *)&__int128 v13 = 138412290LL;
      __int128 v33 = v13;
      do
      {
        SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(Mutable, v15);
        if (!__SCNetworkInterfaceIsBusyMember(a1, ValueAtIndex, 0)
          && !__SCNetworkServiceCreate(a1, ValueAtIndex, 0LL))
        {
          Boolean v17 = __log_SCNetworkConfiguration();
          uint64_t v18 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
          {
            uint64_t v19 = _os_log_pack_size();
            uint64_t v34 = &v31;
            uint64_t v20 = (char *)&v31 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v21 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v21 = v33;
            *(void *)(v21 + 4) = ValueAtIndex;
            __SC_log_send(5, (uint64_t)v17, v18, v20);
          }
        }

        ++v15;
      }

      while (v14 != v15);
      CFIndex v9 = v32;
    }
  }

  else
  {
    CFMutableArrayRef Mutable = 0LL;
  }

  CFRelease(MappingUsingBSDName);
  CFRelease(v9);
  if (Mutable)
  {
    CFTypeID v30 = Mutable;
    goto LABEL_20;
  }

__CFDictionary *_SCNetworkConfigurationCopyExternalInterfaceMapping( const __SCPreferences *a1, const __SCPreferences *a2)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  uint64_t v3 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a1, 0);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count)
    {
      uint64_t v5 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a2, 0);
      CFTypeID v6 = CFArrayGetTypeID();
      if (v5 && CFGetTypeID(v5) == v6)
      {
        CFRange v7 = _SCNetworkInterfaceStorageCopyMaxUnitPerInterfaceType(a2);
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
        Companion = SCPreferencesCreateCompanion((uint64_t)a2, 0LL);
        if (Count >= 1)
        {
          CFMutableDictionaryRef v46 = Mutable;
          for (CFIndex i = 0LL; i != Count; ++i)
          {
            SCNetworkSetRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, i);
            CFIndex v12 = CFArrayGetCount(v5);
            if (v12 < 1)
            {
LABEL_18:
              if (!_SCNetworkInterfaceIsHiddenInterface((unsigned __int8 *)ValueAtIndex))
              {
                uint64_t v20 = (const void *)*((void *)ValueAtIndex + 36);
                CFTypeID v21 = CFNumberGetTypeID();
                if (!v20
                  || CFGetTypeID(v20) != v21
                  || !CFNumberGetValue(*((CFNumberRef *)ValueAtIndex + 36), kCFNumberIntType, &valuePtr)
                  || valuePtr != 1452
                  || (uint64_t v22 = (__CFString *)*((void *)ValueAtIndex + 4), v22 != @"iBridge")
                  && (!v22 || !CFEqual(v22, @"iBridge")))
                {
                  IOCFStringRef InterfaceType = (const void *)_SCNetworkInterfaceGetIOInterfaceType((uint64_t)ValueAtIndex);
                  CFPropertyListRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, IOInterfaceType);
                  if (Value)
                  {
                    CFNumberGetValue(Value, kCFNumberIntType, &v49);
                    int v25 = v49 + 1;
                  }

                  else
                  {
                    int v25 = 0;
                  }

                  int v48 = v25;
                  CFNumberRef v28 = CFNumberCreate(0LL, kCFNumberIntType, &v48);
                  CFDictionarySetValue(v7, IOInterfaceType, v28);
                  CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0LL, (uint64_t)ValueAtIndex, Companion, 0LL);
                  uint64_t IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit((uint64_t)Copy);
                  CFTypeID v31 = CFNumberGetTypeID();
                  if (!IOInterfaceUnit || CFGetTypeID(IOInterfaceUnit) != v31 || !CFEqual(IOInterfaceUnit, v28)) {
                    __SCNetworkInterfaceSetIOInterfaceUnit((uint64_t)Copy, v28);
                  }
                  CFDictionaryAddValue(v46, ValueAtIndex, Copy);
                  CFRelease(Copy);
                  CFRelease(v28);
                }
              }
            }

            else
            {
              CFIndex v13 = v12;
              for (CFIndex j = 0LL; j != v13; ++j)
              {
                CFIndex v15 = CFArrayGetValueAtIndex(v5, j);
                HardwareAddress = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)ValueAtIndex);
                Boolean v17 = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v15);
                if (HardwareAddress == v17 || HardwareAddress && v17 && CFEqual(HardwareAddress, v17))
                {
                  CFDictionaryAddValue(v46, ValueAtIndex, v15);
                  CFNumberRef v26 = v5;
                  CFIndex v27 = j;
                  goto LABEL_29;
                }
              }

              CFIndex v18 = 0LL;
              while (1)
              {
                uint64_t v19 = (unsigned __int8 *)CFArrayGetValueAtIndex(v5, v18);
                if (v13 == ++v18) {
                  goto LABEL_18;
                }
              }

              CFDictionaryAddValue(v46, ValueAtIndex, v19);
              CFNumberRef v26 = v5;
              CFIndex v27 = v18;
LABEL_29:
              CFArrayRemoveValueAtIndex(v26, v27);
            }
          }

          CFMutableArrayRef Mutable = v46;
        }

        goto LABEL_55;
      }

      uint64_t v37 = __log_SCNetworkConfiguration();
      uint64_t v38 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v37, (os_log_type_t)v38))
      {
        uint64_t v39 = _os_log_pack_size();
        uint64_t v40 = (char *)&v45 - ((MEMORY[0x1895F8858](v39) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v37, v38, v40);
      }
    }

    else
    {
      uint64_t v41 = __log_SCNetworkConfiguration();
      uint64_t v42 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v41, (os_log_type_t)v42))
      {
        CFMutableArrayRef Mutable = 0LL;
        CFRange v7 = 0LL;
        uint64_t v5 = 0LL;
        goto LABEL_54;
      }

      uint64_t v43 = _os_log_pack_size();
      uint64_t v44 = (char *)&v45 - ((MEMORY[0x1895F8858](v43) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v41, v42, v44);
      uint64_t v5 = 0LL;
    }

    CFMutableArrayRef Mutable = 0LL;
    CFRange v7 = 0LL;
LABEL_54:
    Companion = 0LL;
LABEL_55:
    CFRelease(v3);
    if (v5) {
      CFRelease(v5);
    }
    goto LABEL_44;
  }

  uint64_t v32 = __log_SCNetworkConfiguration();
  uint64_t v33 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v32, (os_log_type_t)v33))
  {
    uint64_t v34 = _os_log_pack_size();
    CFTypeID v35 = (char *)&v45 - ((MEMORY[0x1895F8858](v34) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v32, v33, v35);
  }

  Companion = 0LL;
  uint64_t v5 = 0LL;
  CFRange v7 = 0LL;
  CFMutableArrayRef Mutable = 0LL;
  if (v3) {
    goto LABEL_55;
  }
LABEL_44:
  if (v7) {
    CFRelease(v7);
  }
  if (Companion) {
    CFRelease(Companion);
  }
  return Mutable;
}

__CFArray *_SCNetworkMigrationCreateNetworkInterfaceArray( const __SCPreferences *a1, const __CFDictionary *a2, _BYTE *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    uint64_t v20 = __log_SCNetworkConfiguration();
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
    {
LABEL_22:
      uint64_t v22 = _os_log_pack_size();
      uint64_t v23 = (char *)context - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v20, v21, v23);
    }

    return 0LL;
  }

  CFPropertyListRef Value = SCPreferencesGetValue(a1, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID || (CFIndex Count = CFArrayGetCount((CFArrayRef)Value)) == 0)
  {
    uint64_t v20 = __log_SCNetworkConfiguration();
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, (os_log_type_t)v21)) {
      goto LABEL_22;
    }
    return 0LL;
  }

  uint64_t v9 = Count;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (v9 >= 1)
  {
    for (CFIndex i = 0LL; i != v9; ++i)
    {
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
      CFTypeID v13 = CFDictionaryGetTypeID();
      if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v13) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }

  CFTypeID v14 = CFDictionaryGetTypeID();
  if (a2 && CFGetTypeID(a2) == v14)
  {
    CFIndex v15 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a1, 0);
    context[0] = v15;
    context[1] = Mutable;
    char v26 = 0;
    uint64_t v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v19 = (char *)context - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v16, v17, v19);
    }

    logInterfaces((uint64_t)"  externalInterfaceList", v15, 0);
    logInterfaces((uint64_t)"  networkInterfaceList", Mutable, 0);
    CFDictionaryApplyFunction( a2,  (CFDictionaryApplierFunction)_SCNetworkConfigurationCollectInterfaceStorageEntity,  context);
    if (a3) {
      *a3 = v26;
    }
    if (v15) {
      CFRelease(v15);
    }
  }

  return Mutable;
}

CFMutableDictionaryRef _SCNetworkMigrationCreateBSDNameMapping( const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  if ((unint64_t)a1 | (unint64_t)a2)
  {
    if (a1) {
      CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)SCNetworkMigrationMapSourceToTargetName, Mutable);
    }
    if (a2) {
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)SCNetworkMigrationMapSourceToTargetName, Mutable);
    }
  }

  return Mutable;
}

CFDictionaryRef _SCNetworkMigrationCreateServiceMappingUsingBSDNameMapping( const __SCPreferences *a1, const __SCPreferences *a2, const __CFDictionary *a3)
{
  value[1] = *(void **)MEMORY[0x1895F89C0];
  value[0] = 0LL;
  if (a3)
  {
    uint64_t v5 = SCNetworkServiceCopyAll(a1);
    CFTypeID TypeID = CFArrayGetTypeID();
    if (v5 && CFGetTypeID(v5) == TypeID)
    {
      CFArrayRef v7 = SCNetworkServiceCopyAll(a2);
      CFTypeID v8 = CFArrayGetTypeID();
      if (!v7 || CFGetTypeID(v7) != v8)
      {
        uint64_t v90 = __log_SCNetworkConfiguration();
        uint64_t v91 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v90, (os_log_type_t)v91))
        {
          uint64_t v92 = _os_log_pack_size();
          int v93 = (char *)&v94 - ((MEMORY[0x1895F8858](v92) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(5, (uint64_t)v90, v91, v93);
        }

        CFDictionaryRef v14 = 0LL;
        CFMutableDictionaryRef MutableCopy = 0LL;
        uint64_t v11 = 0LL;
        goto LABEL_93;
      }

      CFIndex Count = CFArrayGetCount(v5);
      CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, v5);
      uint64_t v11 = CFArrayCreateMutableCopy(0LL, 0LL, v7);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      CFDictionaryRef v14 = Mutable;
      CFIndex v113 = Count;
      if (Count < 1) {
        goto LABEL_93;
      }
      CFDictionaryRef v99 = a3;
      CFDictionaryRef v107 = Mutable;
      CFIndex v97 = v7;
      CFIndex v98 = v5;
      CFIndex v15 = 0LL;
      int v109 = @"VPN";
      CFArrayRef v103 = @"PPP";
      uint64_t v106 = @"Bond";
      uint64_t v104 = @"Bridge";
      uint64_t v102 = @"VLAN";
      CFIndex v100 = @"IPSec";
      CFIndex v96 = @"6to4";
      CFIndex v95 = @"Loopback";
      CFIndex v101 = (const void *)*MEMORY[0x189604DE0];
      *(void *)&__int128 v13 = 138412290LL;
      __int128 v108 = v13;
      uint64_t v110 = MutableCopy;
      uint64_t v114 = v11;
      while (1)
      {
        value[0] = 0LL;
        CFIndex v16 = CFArrayGetCount(v11);
        SCNetworkSetRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(MutableCopy, v15);
        SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
        if (!Interface)
        {
          uint64_t v56 = __log_SCNetworkConfiguration();
          uint64_t v57 = _SC_syslog_os_log_mapping(5);
          if (!__SC_log_enabled(5, v56, (os_log_type_t)v57)) {
            goto LABEL_67;
          }
LABEL_65:
          uint64_t v60 = _os_log_pack_size();
          uint64_t v61 = (char *)&v94 - ((MEMORY[0x1895F8858](v60) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          CFMutableDictionaryRef MutableCopy = v110;
          *(_WORD *)_os_log_pack_fill() = 0;
          int v62 = 5;
          goto LABEL_66;
        }

        SCNetworkInterfaceRef v19 = Interface;
        EntityType = (const void *)__SCNetworkInterfaceGetEntityType((uint64_t)Interface);
        CFTypeID v21 = CFStringGetTypeID();
        if (EntityType && CFGetTypeID(EntityType) == v21 && (CFEqual(EntityType, v109) || CFEqual(EntityType, v103)))
        {
          EntitySubType = (const void *)__SCNetworkInterfaceGetEntitySubType((uint64_t)v19);
          CFTypeID v23 = CFStringGetTypeID();
          if (!EntitySubType || CFGetTypeID(EntitySubType) != v23)
          {
            uint64_t v56 = __log_SCNetworkConfiguration();
            uint64_t v57 = _SC_syslog_os_log_mapping(5);
            if (!__SC_log_enabled(5, v56, (os_log_type_t)v57)) {
              goto LABEL_67;
            }
            goto LABEL_65;
          }

          CFTypeRef v105 = EntitySubType;
          CFTypeRef v111 = EntityType;
          SCPreferencesRef v112 = ValueAtIndex;
          CFStringRef BSDName = 0LL;
        }

        else
        {
          SCPreferencesRef v112 = ValueAtIndex;
          CFTypeID v25 = SCNetworkInterfaceGetTypeID();
          CFTypeID v26 = CFGetTypeID(v19);
          CFTypeRef v111 = EntityType;
          if (v26 == v25)
          {
            CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(v19);
            if (CFEqual(InterfaceType, v106)) {
              goto LABEL_22;
            }
          }

          if ((CFTypeID v28 = SCNetworkInterfaceGetTypeID(), CFGetTypeID(v19) == v28)
            && (CFStringRef v29 = SCNetworkInterfaceGetInterfaceType(v19), CFEqual(v29, v104))
            || (CFTypeID v30 = SCNetworkInterfaceGetTypeID(), CFGetTypeID(v19) == v30)
            && (CFStringRef v31 = SCNetworkInterfaceGetInterfaceType(v19), CFEqual(v31, v102)))
          {
LABEL_22:
            CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v19);
            CFTypeID v32 = CFStringGetTypeID();
            if (!BSDName || CFGetTypeID(BSDName) != v32) {
              goto LABEL_67;
            }
            CFTypeRef v105 = 0LL;
            value[0] = (void *)BSDName;
          }

          else
          {
            CFTypeID v58 = CFStringGetTypeID();
            if (EntityType
              && CFGetTypeID(v111) == v58
              && (CFEqual(v111, v100) || CFEqual(v111, v96) || CFEqual(v111, v95)))
            {
              goto LABEL_67;
            }

            CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v19);
            CFTypeID v59 = CFStringGetTypeID();
            if (!BSDName || CFGetTypeID(BSDName) != v59) {
              goto LABEL_67;
            }
            if (!CFDictionaryGetValueIfPresent(v99, BSDName, (const void **)value) || !isA_CFString(value[0]))
            {
              uint64_t v56 = __log_SCNetworkConfiguration();
              uint64_t v57 = _SC_syslog_os_log_mapping(6);
              if (!__SC_log_enabled(6, v56, (os_log_type_t)v57)) {
                goto LABEL_67;
              }
              uint64_t v63 = _os_log_pack_size();
              uint64_t v61 = (char *)&v94 - ((MEMORY[0x1895F8858](v63) + 15) & 0xFFFFFFFFFFFFFFF0LL);
              __error();
              CFMutableDictionaryRef MutableCopy = v110;
              uint64_t v64 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v64 = v108;
              *(void *)(v64 + 4) = BSDName;
              int v62 = 6;
LABEL_66:
              __SC_log_send(v62, (uint64_t)v56, v57, v61);
              uint64_t v11 = v114;
              goto LABEL_67;
            }

            CFTypeRef v105 = 0LL;
          }
        }

        if (v16 < 1) {
          goto LABEL_50;
        }
        CFIndex v33 = 0LL;
        while (1)
        {
          uint64_t v34 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v11, v33);
          CFTypeID v35 = SCNetworkServiceGetInterface(v34);
          if (v35) {
            break;
          }
          uint64_t v39 = __log_SCNetworkConfiguration();
          uint64_t v40 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v39, (os_log_type_t)v40))
          {
            uint64_t v41 = _os_log_pack_size();
            uint64_t v42 = (char *)&v94 - ((MEMORY[0x1895F8858](v41) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            uint64_t v43 = (uint64_t)v39;
            uint64_t v44 = v40;
            uint64_t v45 = v42;
LABEL_48:
            __SC_log_send(5, v43, v44, v45);
            uint64_t v11 = v114;
          }

LABEL_74:
        CFDictionaryAddValue(v68, v112, v34);
        CFArrayRemoveValueAtIndex(v11, v33);
LABEL_50:
        int v55 = CFDictionaryContainsKey(v107, v112);
        CFMutableDictionaryRef MutableCopy = v110;
        if (!v55) {
          CFDictionaryAddValue(v107, v112, v101);
        }
LABEL_67:
        if (++v15 == v113)
        {
          uint64_t v5 = v98;
          CFArrayRef v7 = v97;
          CFDictionaryRef v14 = v107;
          if (!v98) {
            goto LABEL_80;
          }
LABEL_93:
          CFRelease(v5);
          if (!v7) {
            goto LABEL_82;
          }
LABEL_81:
          CFRelease(v7);
          goto LABEL_82;
        }
      }

      uint64_t v50 = __log_SCNetworkConfiguration();
      uint64_t v51 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v50, (os_log_type_t)v51))
      {
LABEL_47:
        uint64_t v52 = _os_log_pack_size();
        uint64_t v53 = (char *)&v94 - ((MEMORY[0x1895F8858](v52) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v54 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v54 = v108;
        *(void *)(v54 + 4) = v36;
        uint64_t v43 = (uint64_t)v50;
        uint64_t v44 = v51;
        uint64_t v45 = v53;
        goto LABEL_48;
      }

      goto LABEL_49;
    }

    uint64_t v81 = __log_SCNetworkConfiguration();
    uint64_t v82 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v81, (os_log_type_t)v82))
    {
      uint64_t v83 = _os_log_pack_size();
      CFIndex v84 = (char *)&v94 - ((MEMORY[0x1895F8858](v83) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v81, v82, v84);
    }

    uint64_t v11 = 0LL;
    CFArrayRef v7 = 0LL;
    CFMutableDictionaryRef MutableCopy = 0LL;
    CFDictionaryRef v14 = 0LL;
    if (v5) {
      goto LABEL_93;
    }
LABEL_80:
    if (v7) {
      goto LABEL_81;
    }
LABEL_82:
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v11) {
      CFRelease(v11);
    }
  }

  else
  {
    uint64_t v85 = __log_SCNetworkConfiguration();
    uint64_t v86 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v85, (os_log_type_t)v86))
    {
      uint64_t v87 = _os_log_pack_size();
      CFTypeID v88 = (char *)&v94 - ((MEMORY[0x1895F8858](v87) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v85, v86, v88);
    }

    return 0LL;
  }

  return v14;
}

__CFDictionary *_SCNetworkMigrationCreateSetMapping(const __SCPreferences *a1, const __SCPreferences *a2)
{
  v26[1] = *MEMORY[0x1895F89C0];
  CFArrayRef v4 = SCNetworkSetCopyAll(a1);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  CFTypeID v6 = SCNetworkSetCopyAll(a2);
  if (!v6)
  {
    CFMutableDictionaryRef Mutable = 0LL;
    SCNetworkSetRef v11 = v5;
LABEL_23:
    CFRelease(v11);
    return Mutable;
  }

  CFArrayRef v7 = v6;
  CFMutableDictionaryRef MutableCopy = CFArrayCreateMutableCopy(0LL, 0LL, v6);
  CFIndex Count = CFArrayGetCount(MutableCopy);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  SCNetworkSetRef v11 = SCNetworkSetCopyCurrent(a1);
  if (!v11) {
    goto LABEL_6;
  }
  if (Count >= 1)
  {
    SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, 0LL);
    CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(MutableCopy, 0LL);
    CFStringRef Name = SCNetworkSetGetName(v11);
    SCNetworkSetSetName((SCNetworkSetRef)ValueAtIndex, Name);
    CFDictionaryAddValue(Mutable, v11, ValueAtIndex);
    SCNetworkSetSetCurrent((SCNetworkSetRef)ValueAtIndex);
    CFRelease(ValueAtIndex);
LABEL_6:
    if (CFArrayGetCount(v5) >= 1)
    {
      CFIndex v14 = 0LL;
      do
      {
        CFIndex v15 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v5, v14);
        CFIndex v16 = v15;
        if (!v11 || !CFEqual(v15, v11))
        {
          CFIndex v17 = CFArrayGetCount(MutableCopy);
          uint64_t v18 = SCNetworkSetGetName(v16);
          if (v17 < 1)
          {
            SCNetworkInterfaceRef v19 = SCNetworkSetCreate(a2);
          }

          else
          {
            SCNetworkInterfaceRef v19 = CFArrayGetValueAtIndex(MutableCopy, 0LL);
            CFRetain(v19);
            CFArrayRemoveValueAtIndex(MutableCopy, 0LL);
          }

          SCNetworkSetSetName((SCNetworkSetRef)v19, v18);
          CFDictionaryAddValue(Mutable, v16, v19);
          CFRelease(v19);
        }

        ++v14;
      }

      while (v14 < CFArrayGetCount(v5));
    }

    goto LABEL_20;
  }

  uint64_t v20 = __log_SCNetworkConfiguration();
  uint64_t v21 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
  {
    uint64_t v22 = _os_log_pack_size();
    v26[0] = v26;
    CFTypeID v23 = (char *)v26 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v24 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v24 = 134217984;
    *(void *)(v24 + 4) = Count;
    __SC_log_send(5, (uint64_t)v20, v21, v23);
  }

__CFDictionary *_SCNetworkMigrationCreateServiceSetMapping(const __SCPreferences *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  uint64_t v3 = SCNetworkServiceCopyAll(a1);
  if (v3)
  {
    CFArrayRef v4 = v3;
    if (CFArrayGetCount(v3) >= 1)
    {
      CFIndex v5 = 0LL;
      CFTypeID v6 = (const CFArrayCallBacks *)MEMORY[0x189605228];
      do
      {
        SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
        CFMutableArrayRef v8 = CFArrayCreateMutable(0LL, 0LL, v6);
        CFDictionaryAddValue(Mutable, ValueAtIndex, v8);
        CFRelease(v8);
        ++v5;
      }

      while (v5 < CFArrayGetCount(v4));
    }

    CFRelease(v4);
    uint64_t v9 = SCNetworkSetCopyAll(a1);
    if (v9)
    {
      CFTypeID v10 = v9;
      if (CFArrayGetCount(v9) >= 1)
      {
        CFIndex v11 = 0LL;
        do
        {
          CFIndex v12 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v10, v11);
          __int128 v13 = SCNetworkSetCopyServices(v12);
          if (CFArrayGetCount(v13) >= 1)
          {
            CFIndex v14 = 0LL;
            do
            {
              CFIndex v15 = CFArrayGetValueAtIndex(v13, v14);
              CFPropertyListRef Value = (__CFArray *)CFDictionaryGetValue(Mutable, v15);
              if (Value) {
                CFArrayAppendValue(Value, v12);
              }
              ++v14;
            }

            while (v14 < CFArrayGetCount(v13));
          }

          CFRelease(v13);
          ++v11;
        }

        while (v11 < CFArrayGetCount(v10));
      }

      CFRelease(v10);
    }
  }

  return Mutable;
}

BOOL _SCNetworkMigrationDoServiceMigration( uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, const __CFDictionary *a5, const __CFDictionary *a6)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (a1
    && a2
    && (CFTypeID TypeID = CFDictionaryGetTypeID(), a3)
    && CFGetTypeID(a3) == TypeID
    && (CFTypeID v12 = CFDictionaryGetTypeID(), a4)
    && CFGetTypeID(a4) == v12)
  {
    LODWORD(context) = 6;
    CFTypeID v28 = "BSD name mapping";
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)logMapping_one, &context);
    LODWORD(context) = 6;
    CFTypeID v28 = "SCNetworkService mapping";
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)logMapping_one, &context);
    if (a5)
    {
      LODWORD(context) = 6;
      CFTypeID v28 = "SCNetworkSet mapping";
      CFDictionaryApplyFunction(a5, (CFDictionaryApplierFunction)logMapping_one, &context);
    }

    else
    {
      uint64_t v18 = __log_SCNetworkConfiguration();
      uint64_t v19 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
      {
        uint64_t v20 = _os_log_pack_size();
        uint64_t v21 = (char *)&v26 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v18, v19, v21);
      }
    }

    if (a6)
    {
      LODWORD(context) = 6;
      CFTypeID v28 = "SCNetworkService/SCNetworkSet mapping";
      CFDictionaryApplyFunction(a6, (CFDictionaryApplierFunction)logMapping_one, &context);
    }

    else
    {
      uint64_t v22 = __log_SCNetworkConfiguration();
      uint64_t v23 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v22, (os_log_type_t)v23))
      {
        uint64_t v24 = _os_log_pack_size();
        CFTypeID v25 = (char *)&v26 - ((MEMORY[0x1895F8858](v24) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v22, v23, v25);
      }
    }

    uint64_t context = a2;
    CFTypeID v28 = (const char *)a4;
    CFStringRef v29 = a5;
    CFTypeID v30 = a6;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)ServiceMigrationAddOrReplace, &context);
    return 1LL;
  }

  else
  {
    __int128 v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v13, (os_log_type_t)v14);
    if (result)
    {
      uint64_t v16 = _os_log_pack_size();
      CFIndex v17 = (char *)&v26 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v13, v14, v17);
      return 0LL;
    }
  }

  return result;
}

__CFDictionary *_SCNetworkConfigurationCopyBuiltinMapping( const __SCPreferences *a1, const __SCPreferences *a2)
{
  v26[1] = *MEMORY[0x1895F89C0];
  uint64_t v3 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a1, 1);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    CFIndex Count = CFArrayGetCount(v3);
    CFTypeID v6 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a2, 1);
    CFTypeID v7 = CFArrayGetTypeID();
    if (v6 && CFGetTypeID(v6) == v7)
    {
      if (Count >= 1)
      {
        CFMutableDictionaryRef Mutable = 0LL;
        for (CFIndex i = 0LL; i != Count; ++i)
        {
          SCNetworkSetRef ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v3, i);
          CFIndex v11 = CFArrayGetCount(v6);
          if (v11 >= 1)
          {
            CFIndex v12 = v11;
            CFIndex v13 = 0LL;
            while (1)
            {
              uint64_t v14 = (unsigned __int8 *)CFArrayGetValueAtIndex(v6, v13);
              HardwareAddress = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)ValueAtIndex);
              uint64_t v16 = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v14);
              if (HardwareAddress == v16 || HardwareAddress && v16 && CFEqual(HardwareAddress, v16)) {
                break;
              }
              if (v12 == ++v13)
              {
                CFIndex v13 = 0LL;
                while (1)
                {
                  uint64_t v14 = (unsigned __int8 *)CFArrayGetValueAtIndex(v6, v13);
                  if (v12 == ++v13) {
                    goto LABEL_21;
                  }
                }
              }
            }

uint64_t _SCNetworkMigrationDoServiceOrderMigration(const void *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  unsigned __int8 context = 1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)preserve_service_order, &context);
  return context;
}

uint64_t _SCNetworkMigrationDoSystemMigration(const __SCPreferences *a1, const __SCPreferences *a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  CFArrayRef v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    CFTypeID v7 = &v26[-((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v4, v5, v7);
  }

  if (!a2) {
    return 0LL;
  }
  HostCFStringRef Name = (const __CFString *)SCPreferencesGetHostName(a1);
  if (HostName)
  {
    SCPreferencesSetHostName(a2, HostName);
    uint64_t v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      CFIndex v12 = &v26[-((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v9, v10, v12);
    }
  }

  CFIndex v13 = (const __CFString *)_SCPreferencesCopyLocalHostName(a1);
  if (v13)
  {
    uint64_t v14 = v13;
    SCPreferencesSetLocalHostName(a2, v13);
    CFRelease(v14);
    CFIndex v15 = __log_SCNetworkConfiguration();
    uint64_t v16 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v18 = &v26[-((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v15, v16, v18);
    }
  }

  uint64_t v19 = (const __CFString *)_SCPreferencesCopyComputerName(a1, &v27);
  if (!v19) {
    return 1LL;
  }
  uint64_t v20 = v19;
  SCPreferencesSetComputerName(a2, v19, v27);
  CFRelease(v20);
  uint64_t v21 = __log_SCNetworkConfiguration();
  uint64_t v22 = _SC_syslog_os_log_mapping(5);
  if (!__SC_log_enabled(5, v21, (os_log_type_t)v22)) {
    return 1LL;
  }
  uint64_t v23 = _os_log_pack_size();
  uint64_t v24 = &v26[-((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __error();
  *(_WORD *)_os_log_pack_fill() = 0;
  __SC_log_send(5, (uint64_t)v21, v22, v24);
  return 1LL;
}

uint64_t _SCNetworkConfigurationMigrateIsFilePresent(const __CFURL *a1)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  memset(&v24, 0, sizeof(v24));
  if (!a1)
  {
    uint64_t v10 = __log_SCNetworkConfiguration();
    uint64_t v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      CFIndex v13 = (char *)&v24 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v10, v11, v13);
    }

    return 0LL;
  }

  if (!CFURLGetFileSystemRepresentation(a1, 1u, v25, 1024LL))
  {
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
    {
      uint64_t v16 = _os_log_pack_size();
      uint64_t v17 = (char *)&v24 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
LABEL_14:
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 138412290;
      *(void *)(v18 + 4) = a1;
      int v19 = 5;
LABEL_15:
      __SC_log_send(v19, (uint64_t)v14, v15, v17);
    }

    return 0LL;
  }

  if (!v24.st_size)
  {
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v14, (os_log_type_t)v15)) {
      return 0LL;
    }
    uint64_t v21 = _os_log_pack_size();
    uint64_t v17 = (char *)&v24 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v22 = 138412290;
    *(void *)(v22 + 4) = a1;
    int v19 = 6;
    goto LABEL_15;
  }

  CFRange v2 = CFStringCreateWithCString(0LL, (const char *)v25, 0x8000100u);
  uint64_t v3 = (const void *)__SCPreferencesCreateForMigration(@"System Migration", v2);
  CFRelease(v2);
  if (!v3)
  {
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v14, (os_log_type_t)v15)) {
      return 0LL;
    }
    uint64_t v23 = _os_log_pack_size();
    uint64_t v17 = (char *)&v24 - ((MEMORY[0x1895F8858](v23) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    goto LABEL_14;
  }

  if (__SCPreferencesIsEmpty((uint64_t)v3))
  {
    CFArrayRef v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      CFTypeID v7 = (char *)&v24 - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 138412290;
      *(void *)(v8 + 4) = a1;
      __SC_log_send(5, (uint64_t)v4, v5, v7);
    }

    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  CFRelease(v3);
  return v9;
}

void _SCNetworkConfigurationCollectMissingService(const void *a1, void *a2, const __CFDictionary **a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a2
    && CFGetTypeID(a2) == TypeID
    && _SCNetworkInterfaceIsBuiltin((unsigned __int8 *)a2)
    && !CFDictionaryContainsKey(v6, a1))
  {
    CFArrayAppendValue(v5, a2);
  }

__CFArray *_SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences( const __SCPreferences *a1, int a2)
{
  CFArrayRef v4 = __SCNetworkInterfaceCopyStoredWithPreferences(a1);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
    CFMutableDictionaryRef Mutable = 0LL;
    Companion = v5;
LABEL_11:
    CFRelease(Companion);
    return Mutable;
  }

  CFIndex v7 = Count;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  Companion = SCPreferencesCreateCompanion((uint64_t)a1, 0LL);
  for (CFIndex i = 0LL; i != v7; ++i)
  {
    SCNetworkSetRef ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v5, i);
    if (_SCNetworkInterfaceIsBuiltin(ValueAtIndex) == a2)
    {
      CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0LL, (uint64_t)ValueAtIndex, Companion, 0LL);
      CFArrayAppendValue(Mutable, Copy);
      CFRelease(Copy);
    }
  }

  CFRelease(v5);
  if (Companion) {
    goto LABEL_11;
  }
  return Mutable;
}

CFDictionaryRef _SCNetworkInterfaceStorageCopyMaxUnitPerInterfaceType(const __SCPreferences *a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v1 = __SCNetworkInterfaceCopyStoredWithPreferences(a1);
  if (v1)
  {
    CFRange v2 = v1;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0LL; i != v5; ++i)
      {
        SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == TypeID)
        {
          IOCFStringRef InterfaceType = (const void *)_SCNetworkInterfaceGetIOInterfaceType((uint64_t)ValueAtIndex);
          CFTypeID v10 = CFNumberGetTypeID();
          if (IOInterfaceType && CFGetTypeID(IOInterfaceType) == v10)
          {
            if (CFDictionaryContainsKey(Mutable, IOInterfaceType)
              || (int valuePtr = 0,
                  CFPropertyListRef Value = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr),
                  CFDictionaryAddValue(Mutable, IOInterfaceType, Value),
                  CFRelease(Value),
                  !Value))
            {
              CFPropertyListRef Value = CFDictionaryGetValue(Mutable, IOInterfaceType);
            }

            uint64_t IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit((uint64_t)ValueAtIndex);
            CFTypeID v17 = CFNumberGetTypeID();
            if (IOInterfaceUnit
              && CFGetTypeID(IOInterfaceUnit) == v17
              && CFNumberCompare((CFNumberRef)IOInterfaceUnit, (CFNumberRef)Value, 0LL) == kCFCompareGreaterThan)
            {
              CFDictionarySetValue(Mutable, IOInterfaceType, IOInterfaceUnit);
            }
          }

          else
          {
            uint64_t v12 = __log_SCNetworkConfiguration();
            uint64_t v13 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v12, (os_log_type_t)v13))
            {
              uint64_t v14 = _os_log_pack_size();
              uint64_t v15 = &v23[-((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send(6, (uint64_t)v12, v13, v15);
            }
          }
        }
      }
    }

    CFRelease(v2);
  }

  else
  {
    uint64_t v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      uint64_t v21 = &v23[-((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v18, v19, v21);
    }

    return 0LL;
  }

  return Mutable;
}

uint64_t _SCNetworkConfigurationIsInterfaceNamerMappable(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  int IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
  CFStringRef v6 = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
  if (InterfaceType == v6
    || (CFStringRef v7 = v6, result = 0LL, InterfaceType) && v7 && (result = CFEqual(InterfaceType, v7), (_DWORD)result))
  {
    IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix((uint64_t)a1);
    uint64_t v10 = _SCNetworkInterfaceGetIOInterfaceNamePrefix((uint64_t)a2);
    if (IOInterfaceNamePrefix == (const void *)v10
      || (uint64_t v11 = (const void *)v10, result = 0LL, IOInterfaceNamePrefix)
      && v11
      && (uint64_t result = CFEqual(IOInterfaceNamePrefix, v11), (_DWORD)result))
    {
      LocalizedDisplayCFStringRef Name = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
      CFStringRef v13 = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a2);
      if (LocalizedDisplayName == v13) {
        return 1LL;
      }
      uint64_t v14 = v13;
      if (LocalizedDisplayName)
      {
        if (v13 && CFEqual(LocalizedDisplayName, v13)) {
          return 1LL;
        }
      }

      return IsBuiltin && __SCNetworkConfigurationInterfaceNameIsEquiv(LocalizedDisplayName, v14);
    }
  }

  return result;
}

void _SCNetworkConfigurationCollectInterfaceStorageEntity(uint64_t a1, void *a2, uint64_t a3)
{
  v29[1] = *MEMORY[0x1895F89C0];
  CFIndex v5 = *(const __CFArray **)a3;
  v30.length = CFArrayGetCount(*(CFArrayRef *)a3);
  v30.io_name_t location = 0LL;
  FirstIndexOfCFPropertyListRef Value = CFArrayGetFirstIndexOfValue(v5, v30, a2);
  if (FirstIndexOfValue != -1)
  {
    CFIndex v7 = FirstIndexOfValue;
    SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a3, FirstIndexOfValue);
    UserDefinedCFStringRef Name = (const void *)__SCNetworkInterfaceGetUserDefinedName(ValueAtIndex);
    uint64_t v10 = (const void *)__SCNetworkInterfaceGetUserDefinedName(a2);
    if (UserDefinedName == v10
      || (UserDefinedName ? (BOOL v11 = v10 == 0LL) : (BOOL v11 = 1), !v11 && CFEqual(UserDefinedName, v10)))
    {
      uint64_t v12 = __log_SCNetworkConfiguration();
      uint64_t v13 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v12, (os_log_type_t)v13))
      {
        uint64_t v14 = _os_log_pack_size();
        uint64_t v15 = (char *)v29 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v16 = 138412290;
        *(void *)(v16 + 4) = a2;
        __SC_log_send(7, (uint64_t)v12, v13, v15);
      }

      return;
    }

    CFTypeID v17 = __log_SCNetworkConfiguration();
    uint64_t v18 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v17, (os_log_type_t)v18))
    {
      uint64_t v19 = _os_log_pack_size();
      uint64_t v20 = (char *)v29 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = ValueAtIndex;
      __SC_log_send(7, (uint64_t)v17, v18, v20);
    }

    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)a3, v7);
  }

  *(_BYTE *)(a3 + 16) = 1;
  uint64_t v22 = __SCNetworkInterfaceCopyStorageEntity((uint64_t)a2);
  if (v22)
  {
    uint64_t v23 = v22;
    stat v24 = __log_SCNetworkConfiguration();
    uint64_t v25 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v24, (os_log_type_t)v25))
    {
      uint64_t v26 = _os_log_pack_size();
      CFStringEncoding v27 = (char *)v29 - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v28 = 138412290;
      *(void *)(v28 + 4) = v23;
      __SC_log_send(7, (uint64_t)v24, v25, v27);
    }

    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 8), v23);
    CFRelease(v23);
  }

void SCNetworkMigrationMapSourceToTargetName( const __SCNetworkInterface *a1, const __SCNetworkInterface *a2, __CFDictionary *a3)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  CFTypeID TypeID = CFStringGetTypeID();
  if (BSDName)
  {
    if (CFGetTypeID(BSDName) == TypeID)
    {
      CFStringRef v7 = SCNetworkInterfaceGetBSDName(a2);
      CFTypeID v8 = CFStringGetTypeID();
      if (v7)
      {
        if (CFGetTypeID(v7) == v8 && !CFDictionaryContainsKey(a3, BSDName)) {
          CFDictionaryAddValue(a3, BSDName, v7);
        }
      }
    }
  }

void ServiceMigrationAddOrReplace( SCNetworkServiceRef service, const __SCNetworkService *a2, const __SCPreferences **a3)
{
  v25[1] = *MEMORY[0x1895F89C0];
  CFIndex v5 = *a3;
  CFArrayRef v4 = a3[1];
  CFStringRef v6 = a3[2];
  CFStringRef v7 = a3[3];
  if (*((_OWORD *)a3 + 1) != 0LL)
  {
    CFTypeID TypeID = SCNetworkServiceGetTypeID();
    if (a2)
    {
      if (CFGetTypeID(a2) == TypeID)
      {
        SCNetworkServiceGetName(a2);
        uint64_t v10 = __log_SCNetworkConfiguration();
        uint64_t v11 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v10, (os_log_type_t)v11))
        {
          uint64_t v12 = _os_log_pack_size();
          v25[0] = v25;
          uint64_t v13 = (char *)v25 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v14 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v14 = 138412290;
          *(void *)(v14 + 4) = a2;
          __SC_log_send(6, (uint64_t)v10, v11, v13);
        }

        SCNetworkServiceRemove(a2);
      }
    }
  }

  SCNetworkServiceGetName(service);
  uint64_t v15 = __log_SCNetworkConfiguration();
  uint64_t v16 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v15, (os_log_type_t)v16))
  {
    uint64_t v17 = _os_log_pack_size();
    uint64_t v18 = (char *)v25 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 138412290;
    *(void *)(v19 + 4) = service;
    __SC_log_send(6, (uint64_t)v15, v16, v18);
  }

  if (!__SCNetworkServiceMigrateNew(v5, (uint64_t)service, v4, v6, v7))
  {
    SCNetworkServiceGetName(service);
    uint64_t v20 = __log_SCNetworkConfiguration();
    uint64_t v21 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v20, (os_log_type_t)v21))
    {
      uint64_t v22 = _os_log_pack_size();
      uint64_t v23 = (char *)v25 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)(v24 + 4) = service;
      __SC_log_send(6, (uint64_t)v20, v21, v23);
    }
  }

void preserve_service_order(const __SCNetworkSet *a1, const __SCNetworkSet *a2, _BYTE *a3)
{
  context[4] = *MEMORY[0x1895F89C0];
  if (*a3)
  {
    CFStringRef v6 = (const CFArrayCallBacks *)MEMORY[0x189605228];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    CFTypeID v8 = CFArrayCreateMutable(0LL, 0LL, v6);
    CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(a1);
    if (ServiceOrder)
    {
      uint64_t v10 = ServiceOrder;
      CFArrayRef v11 = SCNetworkSetGetServiceOrder(a2);
      if (v11)
      {
        uint64_t v12 = v11;
        context[0] = 0LL;
        context[1] = v11;
        void context[2] = Mutable;
        void context[3] = a3;
        v36.length = CFArrayGetCount(v10);
        v36.io_name_t location = 0LL;
        CFArrayApplyFunction(v10, v36, (CFArrayApplierFunction)create_migrated_order, context);
        if (*a3)
        {
          v34[0] = *((void *)a2 + 3);
          v34[1] = v8;
          void v34[2] = Mutable;
          _BYTE v34[3] = a3;
          v37.length = CFArrayGetCount(v12);
          v37.io_name_t location = 0LL;
          CFArrayApplyFunction(v12, v37, (CFArrayApplierFunction)create_non_migrated_service_list, v34);
          if (CFArrayGetCount(v8) >= 1)
          {
            CFIndex v13 = 0LL;
            do
            {
              SCNetworkSetRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v13);
              SCNetworkSetRemoveService(a2, ValueAtIndex);
              ++v13;
            }

            while (v13 < CFArrayGetCount(v8));
          }

          SCNetworkSetSetServiceOrder(a2, Mutable);
          if (CFArrayGetCount(v8) >= 1)
          {
            CFIndex v16 = 0LL;
            *(void *)&__int128 v15 = 136315650LL;
            __int128 v31 = v15;
            do
            {
              uint64_t v17 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v16);
              if (!SCNetworkSetAddService(a2, v17))
              {
                SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(v17);
                CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
                uint64_t v20 = __log_SCNetworkConfiguration();
                uint64_t v21 = _SC_syslog_os_log_mapping(5);
                if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
                {
                  uint64_t v22 = _os_log_pack_size();
                  CFIndex v33 = &v31;
                  uint64_t v23 = MEMORY[0x1895F8858](v22);
                  CFTypeID v32 = v20;
                  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  __error();
                  uint64_t v25 = _os_log_pack_fill();
                  int v26 = SCError();
                  CFStringEncoding v27 = Mutable;
                  uint64_t v28 = SCErrorString(v26);
                  CFStringRef ServiceID = SCNetworkServiceGetServiceID(v17);
                  *(_DWORD *)uint64_t v25 = v31;
                  CFRange v30 = @"?";
                  if (BSDName) {
                    CFRange v30 = BSDName;
                  }
                  *(void *)(v25 + 4) = v28;
                  CFMutableDictionaryRef Mutable = v27;
                  *(_WORD *)(v25 + 12) = 2112;
                  *(void *)(v25 + 14) = ServiceID;
                  *(_WORD *)(v25 + 22) = 2112;
                  *(void *)(v25 + 24) = v30;
                  __SC_log_send(5, (uint64_t)v32, v21, v24);
                }
              }

              ++v16;
            }

            while (v16 < CFArrayGetCount(v8));
          }
        }
      }
    }

    CFRelease(Mutable);
    CFRelease(v8);
  }

void create_migrated_order(const void *a1, uint64_t a2)
{
  if (**(_BYTE **)(a2 + 24))
  {
    CFArrayRef v4 = *(const __CFArray **)(a2 + 8);
    uint64_t v3 = *(__CFArray **)(a2 + 16);
    if (CFArrayGetCount(v4) >= 1)
    {
      CFIndex v5 = 0LL;
      while (1)
      {
        SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
        if (CFEqual(a1, ValueAtIndex)) {
          break;
        }
        if (++v5 >= CFArrayGetCount(v4)) {
          return;
        }
      }

      CFArrayAppendValue(v3, a1);
    }
  }

void create_non_migrated_service_list(const __CFString *a1, uint64_t a2)
{
  CFRange v2 = *(_BYTE **)(a2 + 24);
  if (*v2)
  {
    CFIndex v5 = *(const __SCPreferences **)a2;
    CFArrayRef v4 = *(__CFArray **)(a2 + 8);
    CFStringRef v6 = *(const __CFArray **)(a2 + 16);
    v9.length = CFArrayGetCount(v6);
    v9.io_name_t location = 0LL;
    if (CFArrayGetFirstIndexOfValue(v6, v9, a1) == -1)
    {
      SCNetworkServiceRef v7 = SCNetworkServiceCopy(v5, a1);
      if (v7)
      {
        SCNetworkServiceRef v8 = v7;
        CFArrayAppendValue(v4, v7);
        CFRelease(v8);
      }

      else
      {
        *CFRange v2 = 0;
      }
    }
  }

BOOL _SCHelperOpen(const __CFData *a1, mach_port_name_t *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  int v19 = 0;
  *a2 = 0;
  mach_port_name_t v4 = _helper_server;
  CFIndex v5 = (ipc_space_t *)MEMORY[0x1895FBBE0];
  if (!_helper_server)
  {
    do
    {
LABEL_3:
      pthread_mutex_lock(&_helper_lock);
      int v7 = _helper_server;
      if (_helper_server)
      {
        if (v4 != _helper_server) {
          goto LABEL_7;
        }
        mach_port_deallocate(*v5, v4);
      }

      int v7 = __SCHelperServerPort(&v20);
      _helper_server = v7;
      if (!v7)
      {
        int v19 = v20;
        pthread_mutex_unlock(&_helper_lock);
        goto LABEL_12;
      }

uint64_t __SCHelperServerPort(_DWORD *a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  unsigned int v15 = 0;
  getenv("SCHELPER_SERVER");
  int v2 = bootstrap_look_up2();
  *a1 = v2;
  if (v2)
  {
    if (__SCHelperServerPort_once != -1) {
      dispatch_once(&__SCHelperServerPort_once, &__block_literal_global_15);
    }
    getpid();
    int v3 = sandbox_check();
    if (v3)
    {
      if (v3 == 1)
      {
        mach_port_name_t v4 = __log_SCPreferences();
        uint64_t v5 = _SC_syslog_os_log_mapping(5);
        uint64_t result = __SC_log_enabled(5, v4, (os_log_type_t)v5);
        if ((_DWORD)result)
        {
          _os_log_pack_size();
          int v7 = &v14[-((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL)];
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(5, (uint64_t)v4, v5, v7);
          return 0LL;
        }

        return result;
      }

      SCNetworkServiceRef v8 = __log_SCPreferences();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
      {
        _os_log_pack_size();
        uint64_t v10 = &v14[-((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v11 = _os_log_pack_fill();
        int v12 = __error();
        CFIndex v13 = strerror(*v12);
        *(_DWORD *)uint64_t v11 = 136315138;
        *(void *)(v11 + 4) = v13;
        __SC_log_send(5, (uint64_t)v8, v9, v10);
      }
    }
  }

  if (*a1) {
    return 0LL;
  }
  else {
    return v15;
  }
}

uint64_t _SCHelperExec(mach_port_t a1, int a2, const __CFData *a3, _DWORD *a4, void *a5)
{
  v29[1] = *(CFDataRef *)MEMORY[0x1895F89C0];
  CFStringEncoding v27 = 0LL;
  CFDataRef v28 = 0LL;
  uint64_t v26 = 0LL;
  v29[0] = 0LL;
  if (_SCHelperExecCopyBacktrace_once != -1) {
    dispatch_once(&_SCHelperExecCopyBacktrace_once, &__block_literal_global_8);
  }
  if (_SCHelperExecCopyBacktrace_loggingEnabled != 1)
  {
    CFDataRef v11 = 0LL;
    if (a3) {
      goto LABEL_7;
    }
LABEL_10:
    BytePtr = 0LL;
    if (v11) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

  uint64_t v10 = _SC_copyBacktrace();
  CFDataRef v11 = (CFDataRef)v10;
  if (v10)
  {
    _SCSerializeString(v10, v29, 0LL, 0LL);
    CFRelease(v11);
    CFDataRef v11 = v29[0];
  }

  if (!a3) {
    goto LABEL_10;
  }
LABEL_7:
  BytePtr = CFDataGetBytePtr(a3);
  LODWORD(a3) = CFDataGetLength(a3);
  if (v11)
  {
LABEL_8:
    CFIndex v13 = CFDataGetBytePtr(v11);
    int Length = CFDataGetLength(v11);
    mach_error_t v15 = helperexec(a1, a2, (uint64_t)BytePtr, (int)a3, (uint64_t)v13, Length, (int *)&v26, &v27, (_DWORD *)&v26 + 1);
    CFRelease(v11);
    goto LABEL_12;
  }

void _SCHelperClose(mach_port_t *a1)
{
  v5[1] = *MEMORY[0x1895F89C0];
  if (!_SCHelperExec(*a1, 9999, 0LL, 0LL, 0LL))
  {
    int v2 = __log_SCPreferences();
    uint64_t v3 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v2, (os_log_type_t)v3))
    {
      _os_log_pack_size();
      mach_port_name_t v4 = (char *)v5 - ((MEMORY[0x1895F8858]() + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v2, v3, v4);
    }
  }

  if (*a1)
  {
    mach_port_deallocate(*MEMORY[0x1895FBBE0], *a1);
    *a1 = 0;
  }

uint64_t _SCSecKeychainCopySystemKeychain()
{
  return 0LL;
}

uint64_t _SCSecKeychainPasswordItemCopy()
{
  return 0LL;
}

uint64_t _SCSecKeychainPasswordItemExists()
{
  return 0LL;
}

uint64_t _SCSecKeychainPasswordItemRemove()
{
  return 0LL;
}

uint64_t _SCSecKeychainPasswordItemSet()
{
  return 0LL;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemCopy()
{
  return 0LL;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemExists()
{
  return 0LL;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemRemove()
{
  return 0LL;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemSet()
{
  return 0LL;
}

const void *SCNetworkSignatureCopyActiveIdentifierForAddress(uint64_t a1, uint64_t a2)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  CFTypeRef NetworkServiceEntity = 0LL;
  cf[0] = 0LL;
  if (!a2 || *(_BYTE *)(a2 + 1) != 2 || *(_BYTE *)a2 != 16 || *(_DWORD *)(a2 + 4))
  {
    _SCErrorSet(1002);
    int v2 = 0LL;
    uint64_t v3 = 0LL;
LABEL_6:
    _SCErrorSet(1001);
    CFStringRef v4 = 0LL;
    uint64_t v5 = 0LL;
    goto LABEL_7;
  }

  cf[0] = SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, @"State:", @"IPv4");
  int v7 = (const CFArrayCallBacks *)MEMORY[0x189605228];
  int v2 = CFArrayCreate(0LL, cf, 1LL, MEMORY[0x189605228]);
  CFTypeRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  @"State:",  @"[^/]+",  @"IPv4");
  uint64_t v3 = CFArrayCreate(0LL, &NetworkServiceEntity, 1LL, v7);
  SCNetworkServiceRef v8 = SCDynamicStoreCopyMultiple(0LL, v2, v3);
  if (!v8) {
    goto LABEL_6;
  }
  uint64_t v9 = v8;
  if (CFDictionaryGetCount(v8)
    && (v10 = CFDictionaryGetValue(v9, cf[0]), CFTypeID TypeID = CFDictionaryGetTypeID(), v10)
    && CFGetTypeID(v10) == TypeID
    && (int v12 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v10, @"PrimaryService"), isA_CFString(v12)))
  {
    CFStringRef v4 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"State:", v12, @"IPv4");
    CFPropertyListRef Value = (const __CFDictionary *)CFDictionaryGetValue(v9, v4);
    if (isA_CFDictionary(Value) && CFDictionaryGetCount(Value))
    {
      uint64_t v14 = CFDictionaryGetValue(Value, @"NetworkSignature");
      mach_error_t v15 = isA_CFString(v14);
      uint64_t v5 = v15;
      if (v15) {
        CFRetain(v15);
      }
      else {
        _SCErrorSet(1001);
      }
      goto LABEL_29;
    }
  }

  else
  {
    CFStringRef v4 = 0LL;
  }

  _SCErrorSet(1001);
  uint64_t v5 = 0LL;
LABEL_29:
  CFRelease(v9);
LABEL_7:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v5;
}

__CFArray *SCNetworkSignatureCopyActiveIdentifiers()
{
  v44[10] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v0 = (const CFArrayCallBacks *)MEMORY[0x189605228];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  values = (void *)SCDynamicStoreKeyCreateNetworkGlobalEntity(0LL, @"Setup:", @"IPv4");
  int v2 = CFArrayCreate(0LL, (const void **)&values, 1LL, v0);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  @"State:",  @"[^/]+",  @"IPv4");
  CFArrayAppendValue(Mutable, NetworkServiceEntity);
  CFStringRef v4 = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"State:", @"[^/]+", @"IPv6");
  CFArrayAppendValue(Mutable, v4);
  uint64_t v5 = SCDynamicStoreCopyMultiple(0LL, v2, Mutable);
  if (!v5)
  {
    uint64_t v26 = 0LL;
    CFIndex v13 = 0LL;
    goto LABEL_42;
  }

  CFMutableDictionaryRef MutableCopy = v5;
  if (CFDictionaryGetCount(v5))
  {
    uint64_t v40 = NetworkServiceEntity;
    CFRange v37 = v2;
    int v7 = MutableCopy;
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, MutableCopy);
    CFDictionaryRemoveValue(MutableCopy, values);
    CFTypeRef cf = v7;
    CFPropertyListRef Value = CFDictionaryGetValue(v7, values);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    uint64_t v42 = v4;
    if (Value
      && CFGetTypeID(Value) == TypeID
      && (uint64_t v10 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)Value, @"ServiceOrder"),
          CFTypeID v11 = CFArrayGetTypeID(),
          v10)
      && CFGetTypeID(v10) == v11)
    {
      CFIndex Count = CFArrayGetCount(v10);
      CFIndex v13 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
      CFIndex v39 = Count;
      if (Count >= 1)
      {
        CFIndex v14 = 0LL;
        CFIndex range = 0LL;
        CFTypeID v38 = v10;
        do
        {
          v44[0] = @"IPv4";
          v44[1] = @"IPv6";
          SCNetworkSetRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v14);
          CFTypeID v16 = CFStringGetTypeID();
          if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v16)
          {
            uint64_t v17 = 0LL;
            char v18 = 1;
            do
            {
              char v19 = v18;
              CFStringRef v20 = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  @"State:",  ValueAtIndex,  (CFStringRef)v44[v17]);
              uint64_t v21 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, v20);
              CFTypeID v22 = CFDictionaryGetTypeID();
              if (v21 && CFGetTypeID(v21) == v22)
              {
                uint64_t v23 = CFDictionaryGetValue(v21, @"NetworkSignature");
                CFTypeID v24 = CFStringGetTypeID();
                if (v23)
                {
                  if (CFGetTypeID(v23) == v24)
                  {
                    v45.io_name_t location = 0LL;
                    v45.length = range;
                    if (!CFArrayContainsValue(v13, v45, v23))
                    {
                      CFArrayAppendValue(v13, v23);
                      ++range;
                    }
                  }
                }

                CFDictionaryRemoveValue(MutableCopy, v20);
              }

              CFRelease(v20);
              char v18 = 0;
              uint64_t v17 = 1LL;
            }

            while ((v19 & 1) != 0);
          }

          ++v14;
          CFStringRef v4 = v42;
          uint64_t v10 = v38;
        }

        while (v14 != v39);
        CFIndex v25 = range;
LABEL_25:
        CFIndex v27 = CFDictionaryGetCount(MutableCopy);
        CFStringRef NetworkServiceEntity = v40;
        if (!v27)
        {
          uint64_t v26 = 0LL;
          goto LABEL_40;
        }

        uint64_t v28 = v27;
        if (v27 < 11)
        {
          uint64_t v26 = (const void **)v44;
          CFDictionaryGetKeysAndValues(MutableCopy, 0LL, (const void **)v44);
          if (v28 < 1) {
            goto LABEL_40;
          }
        }

        else
        {
          uint64_t v26 = (const void **)malloc(8 * v27);
          CFDictionaryGetKeysAndValues(MutableCopy, 0LL, v26);
        }

        CFStringRef v29 = Mutable;
        for (uint64_t i = 0LL; i != v28; ++i)
        {
          __int128 v31 = (const __CFDictionary *)v26[i];
          CFTypeID v32 = CFDictionaryGetTypeID();
          if (v31)
          {
            if (CFGetTypeID(v31) == v32)
            {
              CFIndex v33 = CFDictionaryGetValue(v31, @"NetworkSignature");
              CFTypeID v34 = CFStringGetTypeID();
              if (v33)
              {
                if (CFGetTypeID(v33) == v34)
                {
                  v46.io_name_t location = 0LL;
                  v46.length = v25;
                  if (!CFArrayContainsValue(v13, v46, v33))
                  {
                    CFArrayAppendValue(v13, v33);
                    ++v25;
                  }
                }
              }
            }
          }
        }

        CFMutableDictionaryRef Mutable = v29;
        CFStringRef NetworkServiceEntity = v40;
        CFStringRef v4 = v42;
LABEL_40:
        CFRelease(cf);
        int v2 = v37;
        if (!MutableCopy) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }

    else
    {
      CFIndex v13 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    }

    CFIndex v25 = 0LL;
    goto LABEL_25;
  }

  uint64_t v26 = 0LL;
  CFIndex v13 = 0LL;
LABEL_41:
  CFRelease(MutableCopy);
LABEL_42:
  if (values) {
    CFRelease(values);
  }
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!v13) {
    goto LABEL_58;
  }
  if (!CFArrayGetCount(v13))
  {
    CFRelease(v13);
LABEL_58:
    _SCErrorSet(1001);
    return 0LL;
  }

  return v13;
}

CFTypeRef SCNetworkSignatureCopyIdentifierForConnectedSocket()
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if ((MEMORY[0] & 2) == 0)
  {
    uint64_t v3 = 0LL;
    CFStringRef v2 = 0LL;
    CFTypeRef v1 = 0LL;
    uint64_t v0 = 0LL;
    int v5 = 1001;
    freeconninfo();
    goto LABEL_5;
  }

  if (!MEMORY[8])
  {
    uint64_t v0 = 0LL;
LABEL_31:
    CFTypeRef v1 = 0LL;
    CFStringRef v2 = 0LL;
LABEL_32:
    uint64_t v3 = 0LL;
    CFStringRef v4 = 0LL;
    goto LABEL_33;
  }

  int v7 = *(unsigned __int8 *)(MEMORY[8] + 1LL);
  if (v7 == 30)
  {
    SCNetworkServiceRef v8 = (const void *)(MEMORY[8] + 8LL);
    uint64_t v9 = &kSCPropNetIPv6Addresses;
  }

  else
  {
    if (v7 != 2)
    {
LABEL_2:
      uint64_t v0 = 0LL;
      CFTypeRef v1 = 0LL;
      CFStringRef v2 = 0LL;
      uint64_t v3 = 0LL;
      CFStringRef v4 = 0LL;
      int v5 = 1002;
      goto LABEL_3;
    }

    SCNetworkServiceRef v8 = (const void *)(MEMORY[8] + 4LL);
    uint64_t v9 = &kSCPropNetIPv4Addresses;
  }

  CFStringRef v10 = *v9;
  CFTypeID v11 = (CFStringRef *)&kSCEntNetIPv6;
  if (v7 == 2) {
    CFTypeID v11 = (CFStringRef *)&kSCEntNetIPv4;
  }
  values[0] = (void *)SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"State:", @"[^/]+", *v11);
  int v12 = CFArrayCreate(0LL, (const void **)values, 1LL, MEMORY[0x189605228]);
  CFRelease(values[0]);
  uint64_t v0 = SCDynamicStoreCopyMultiple(0LL, 0LL, v12);
  CFRelease(v12);
  CFStringRef v2 = CFStringCreateWithCString(0LL, (const char *)values, 0x600u);
  if (!v2)
  {
    CFTypeRef v1 = 0LL;
    goto LABEL_32;
  }

  if (MEMORY[4] && if_indextoname(MEMORY[4], cStr)) {
    CFStringRef v4 = CFStringCreateWithCString(0LL, cStr, 0x600u);
  }
  else {
    CFStringRef v4 = 0LL;
  }
  CFIndex Count = CFDictionaryGetCount(v0);
  uint64_t v14 = Count;
  if (Count >= 11)
  {
    uint64_t v3 = (const void **)malloc(8 * Count);
    CFDictionaryGetKeysAndValues(v0, v3, 0LL);
    goto LABEL_39;
  }

  uint64_t v3 = (const void **)values;
  CFDictionaryGetKeysAndValues(v0, (const void **)values, 0LL);
  if (v14 >= 1)
  {
LABEL_39:
    uint64_t v15 = 0LL;
    while (1)
    {
      CFPropertyListRef Value = (const __CFDictionary *)CFDictionaryGetValue(v0, v3[v15]);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID)
        {
          char v18 = CFDictionaryGetValue(Value, @"NetworkSignature");
          CFTypeID v19 = CFStringGetTypeID();
          if (v18)
          {
            if (CFGetTypeID(v18) == v19)
            {
              if (!v4
                || (v20 = CFDictionaryGetValue(Value, @"InterfaceName"), CFTypeID v21 = CFStringGetTypeID(), v20)
                && CFGetTypeID(v20) == v21
                && CFEqual(v20, v4)
                && ((v22 = CFDictionaryGetValue(Value, @"ConfirmedInterfaceName"), CFTypeID v23 = CFStringGetTypeID(), !v22)
                 || CFGetTypeID(v22) != v23
                 || CFEqual(v22, v4)))
              {
                CFTypeID v24 = (const __CFArray *)CFDictionaryGetValue(Value, v10);
                CFTypeID v25 = CFArrayGetTypeID();
                if (v24)
                {
                  if (CFGetTypeID(v24) == v25)
                  {
                    v29.length = CFArrayGetCount(v24);
                    v29.io_name_t location = 0LL;
                    if (CFArrayContainsValue(v24, v29, v2)) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }

      ++v15;
      int v5 = 1001;
      if (v14 == v15)
      {
        CFTypeRef v1 = 0LL;
        goto LABEL_3;
      }
    }

    CFTypeRef v1 = CFRetain(v18);
    int v5 = 0;
    goto LABEL_3;
  }

  CFTypeRef v1 = 0LL;
LABEL_33:
  int v5 = 1001;
LABEL_3:
  if (v4) {
    CFRelease(v4);
  }
LABEL_5:
  if (v2) {
    CFRelease(v2);
  }
  if (v0) {
    CFRelease(v0);
  }
  if (v5) {
    _SCErrorSet(v5);
  }
  return v1;
}

Boolean CNSetSupportedSSIDs(CFArrayRef ssidArray)
{
  CFStringRef v2 = (uint64_t (*)(CFArrayRef))CNSetSupportedSSIDs_dyfunc;
  if (CNSetSupportedSSIDs_dyfunc) {
    return v2(ssidArray);
  }
  if (__loadCaptiveNetwork_once != -1) {
    dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
  }
  if (__loadCaptiveNetwork_image)
  {
    CFStringRef v2 = (uint64_t (*)(CFArrayRef))dlsym((void *)__loadCaptiveNetwork_image, "__CNSetSupportedSSIDs");
    CNSetSupportedSSIDs_dyfunCC_SHA256_CTX c = v2;
    if (v2) {
      return v2(ssidArray);
    }
  }

  else
  {
    CFStringRef v2 = (uint64_t (*)(CFArrayRef))CNSetSupportedSSIDs_dyfunc;
    if (CNSetSupportedSSIDs_dyfunc) {
      return v2(ssidArray);
    }
  }

  return 0;
}

Boolean CNMarkPortalOnline(CFStringRef interfaceName)
{
  CFStringRef v2 = (uint64_t (*)(CFStringRef))CNMarkPortalOnline_dyfunc;
  if (CNMarkPortalOnline_dyfunc) {
    return v2(interfaceName);
  }
  if (__loadCaptiveNetwork_once != -1) {
    dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
  }
  if (__loadCaptiveNetwork_image)
  {
    CFStringRef v2 = (uint64_t (*)(CFStringRef))dlsym((void *)__loadCaptiveNetwork_image, "__CNMarkPortalOnline");
    CNMarkPortalOnline_dyfunCC_SHA256_CTX c = v2;
    if (v2) {
      return v2(interfaceName);
    }
  }

  else
  {
    CFStringRef v2 = (uint64_t (*)(CFStringRef))CNMarkPortalOnline_dyfunc;
    if (CNMarkPortalOnline_dyfunc) {
      return v2(interfaceName);
    }
  }

  return 0;
}

Boolean CNMarkPortalOffline(CFStringRef interfaceName)
{
  CFStringRef v2 = (uint64_t (*)(CFStringRef))CNMarkPortalOffline_dyfunc;
  if (CNMarkPortalOffline_dyfunc) {
    return v2(interfaceName);
  }
  if (__loadCaptiveNetwork_once != -1) {
    dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
  }
  if (__loadCaptiveNetwork_image)
  {
    CFStringRef v2 = (uint64_t (*)(CFStringRef))dlsym((void *)__loadCaptiveNetwork_image, "__CNMarkPortalOffline");
    CNMarkPortalOffline_dyfunCC_SHA256_CTX c = v2;
    if (v2) {
      return v2(interfaceName);
    }
  }

  else
  {
    CFStringRef v2 = (uint64_t (*)(CFStringRef))CNMarkPortalOffline_dyfunc;
    if (CNMarkPortalOffline_dyfunc) {
      return v2(interfaceName);
    }
  }

  return 0;
}

CFArrayRef CNCopySupportedInterfaces(void)
{
  uint64_t v0 = (uint64_t (*)(void))CNCopySupportedInterfaces_dyfunc;
  if (CNCopySupportedInterfaces_dyfunc) {
    return (CFArrayRef)v0();
  }
  if (__loadCaptiveNetwork_once != -1) {
    dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
  }
  if (__loadCaptiveNetwork_image)
  {
    uint64_t v0 = (uint64_t (*)(void))dlsym((void *)__loadCaptiveNetwork_image, "__CNCopySupportedInterfaces");
    CNCopySupportedInterfaces_dyfunCC_SHA256_CTX c = v0;
    if (v0) {
      return (CFArrayRef)v0();
    }
  }

  else
  {
    uint64_t v0 = (uint64_t (*)(void))CNCopySupportedInterfaces_dyfunc;
    if (CNCopySupportedInterfaces_dyfunc) {
      return (CFArrayRef)v0();
    }
  }

  return 0LL;
}

CFDictionaryRef CNCopyCurrentNetworkInfo(CFStringRef interfaceName)
{
  CFStringRef v2 = (uint64_t (*)(CFStringRef))CNCopyCurrentNetworkInfo_dyfunc;
  if (CNCopyCurrentNetworkInfo_dyfunc) {
    return (CFDictionaryRef)v2(interfaceName);
  }
  if (__loadCaptiveNetwork_once != -1) {
    dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
  }
  if (__loadCaptiveNetwork_image)
  {
    CFStringRef v2 = (uint64_t (*)(CFStringRef))dlsym((void *)__loadCaptiveNetwork_image, "__CNCopyCurrentNetworkInfo");
    CNCopyCurrentNetworkInfo_dyfunCC_SHA256_CTX c = v2;
    if (v2) {
      return (CFDictionaryRef)v2(interfaceName);
    }
  }

  else
  {
    CFStringRef v2 = (uint64_t (*)(CFStringRef))CNCopyCurrentNetworkInfo_dyfunc;
    if (CNCopyCurrentNetworkInfo_dyfunc) {
      return (CFDictionaryRef)v2(interfaceName);
    }
  }

  return 0LL;
}

void *____loadCaptiveNetwork_block_invoke()
{
  uint64_t result = _SC_dlopen("/System/Library/PrivateFrameworks/CaptiveNetwork.framework/CaptiveNetwork");
  __loadCaptiveNetwork_image = (uint64_t)result;
  return result;
}

uint64_t VPNConfigurationCreate()
{
  return 0LL;
}

uint64_t VPNConfigurationCreateWithOptions()
{
  return 0LL;
}

uint64_t VPNConfigurationGetTunnelType()
{
  return 1LL;
}

uint64_t VPNConfigurationCopyAll()
{
  return 0LL;
}

uint64_t VPNConfigurationCopy()
{
  return 0LL;
}

uint64_t VPNConfigurationSet()
{
  return 0LL;
}

uint64_t VPNConfigurationRemove()
{
  return 0LL;
}

uint64_t VPNConfigurationSetName()
{
  return 0LL;
}

uint64_t VPNConfigurationGetName()
{
  return 0LL;
}

uint64_t VPNConfigurationSetEnabled()
{
  return 0LL;
}

uint64_t VPNConfigurationGetEnabled()
{
  return 0LL;
}

uint64_t VPNConfigurationEnableVPNType()
{
  return 1LL;
}

uint64_t VPNConfigurationIsVPNTypeEnabled()
{
  return 1LL;
}

uint64_t VPNConfigurationCopyVendorData()
{
  return 0LL;
}

uint64_t VPNConfigurationSetVendorData()
{
  return 0LL;
}

uint64_t VPNCopyLastError()
{
  return 0LL;
}

uint64_t VPNConfigurationSetCallback()
{
  return 0LL;
}

uint64_t VPNConfigurationSetMessageCallback()
{
  return 0LL;
}

uint64_t VPNConfigurationScheduleWithRunLoop()
{
  return 0LL;
}

uint64_t VPNConfigurationUnscheduleFromRunLoop()
{
  return 0LL;
}

uint64_t VPNConfigurationConnectionStart()
{
  return 0LL;
}

uint64_t VPNConfigurationConnectionStop()
{
  return 0LL;
}

uint64_t VPNConfigurationGetStatus()
{
  return 0xFFFFFFFFLL;
}

uint64_t VPNConfigurationSendMessage()
{
  return 0LL;
}

uint64_t VPNConfigurationCopyIdentities()
{
  return 0LL;
}

uint64_t VPNConfigurationCopyCertificate()
{
  return 0LL;
}

uint64_t VPNConfigurationCopyLastConnectionError()
{
  return 0LL;
}

uint64_t VPNConfigurationSetPersistentData()
{
  return 0LL;
}

uint64_t VPNConfigurationCopyPersistentData()
{
  return 0LL;
}

uint64_t VPNConfigurationValidateCertificate()
{
  return 3LL;
}

uint64_t VPNConfigurationCopyAppRuleIDs()
{
  return 0LL;
}

uint64_t VPNConfigurationCopyAppRule()
{
  return 0LL;
}

uint64_t VPNConfigurationRemoveAppRule()
{
  return 0LL;
}

uint64_t VPNConfigurationSetAppRule()
{
  return 0LL;
}

uint64_t VPNTunnelSetStatus(uint64_t (**a1)(void))
{
  return (*a1)();
}

uint64_t VPNTunnelSetPersistentData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t VPNTunnelFetchCredentialComplete(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t VPNTunnelCopyPersistentData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t VPNTunnelAuthenticate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t VPNTunnelDisplayBanner(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 40))();
}

uint64_t VPNTunnelSetConfigurationEntities(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 48))();
}

uint64_t VPNTunnelSetTunnelSocket(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 56))();
}

uint64_t VPNTunnelCryptoEnable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 64))();
}

uint64_t VPNTunnelCryptoDisable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 72))();
}

uint64_t VPNTunnelCryptoAddConfigurations(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 80))();
}

uint64_t VPNTunnelCryptoRemoveConfigurations(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 88))();
}

uint64_t VPNTunnelCryptoGenerateIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 96))();
}

uint64_t VPNTunnelCryptoStopDataTraffic(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 104))();
}

uint64_t VPNTunnelCryptoStartDataTraffic(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

uint64_t VPNTunnelClearConfiguration(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 120))();
}

uint64_t VPNTunnelIPCSendMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 128))();
}

uint64_t VPNTunnelUpdatePlugin(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 136))();
}

uint64_t VPNTunnelEnvironmentEventComplete(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 144))();
}

uint64_t VPNTunnelCopySocketInfo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 160))();
}

uint64_t VPNTunnelIncrementDataSent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 192))();
}

uint64_t VPNTunnelIncrementDataReceived(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 200))();
}

void VPNTunnelLog( uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a3)
  {
    CFStringRef v11 = CFStringCreateWithFormatAndArguments((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, a3, &a9);
    (*(void (**)(uint64_t, uint64_t, CFStringRef))(a1 + 152))(a1, a2, v11);
    CFRelease(v11);
  }

uint64_t VPNTunnelCopySavedConfiguration(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 168))();
}

uint64_t VPNTunnelCopySavedVendorData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 176))();
}

uint64_t VPNTunnelCopySavedConfigurationName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 184))();
}

uint64_t SCBridgeInterfaceCopyAll(const __SCPreferences *a1)
{
  void context[3] = *MEMORY[0x1895F89C0];
  else {
    Companion = SCPreferencesCreateCompanion((uint64_t)a1, @"NetworkInterfaces.plist");
  }
  context[1] = Companion;
  void context[2] = a1;
  context[0] = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  uint64_t v3 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@", @"VirtualNetworkInterfaces", @"Bridge");
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v3);
  CFRelease(v3);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    int v6 = CFGetAllocator(Value);
    CFTypeRef Copy = CFDictionaryCreateCopy(v6, Value);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)add_configured_interface, context);
    CFRelease(Copy);
  }

  if (Companion) {
    CFRelease(Companion);
  }
  return context[0];
}

void add_configured_interface(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  theArray[1] = *(CFArrayRef *)MEMORY[0x1895F89C0];
  theArray[0] = 0LL;
  uint64_t Private = _SCBridgeInterfaceCreatePrivate(0LL, a1);
  if (!Private) {
    add_configured_interface_cold_1();
  }
  int v6 = (const __SCNetworkInterface *)Private;
  *(void *)(Private + 80) = CFRetain(*(CFTypeRef *)(a3 + 16));
  CFDictionaryRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        for (CFIndex i = 0LL; i != v10; ++i)
        {
          SCNetworkSetRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, i);
          CFTypeID v13 = CFStringGetTypeID();
          if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v13) {
            add_interface(theArray, ValueAtIndex, *(const __SCPreferences **)(a3 + 8));
          }
        }

        CFArrayRef v14 = theArray[0];
        if (theArray[0])
        {
          __SCBridgeInterfaceSetMemberInterfaces((uint64_t)v6, theArray[0]);
          CFRelease(v14);
        }
      }
    }
  }

  uint64_t v15 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"Options");
  CFTypeID v16 = CFDictionaryGetTypeID();
  if (v15)
  {
    if (CFGetTypeID(v15) == v16)
    {
      SCBridgeInterfaceSetOptions(v6, v15);
      uint64_t v15 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"__AUTO__");
    }

    else
    {
      uint64_t v15 = 0LL;
    }
  }

  uint64_t v17 = (const __CFString *)CFDictionaryGetValue(a2, @"UserDefinedName");
  CFTypeID v18 = CFStringGetTypeID();
  if (v17 && CFGetTypeID(v17) == v18)
  {
    SCBridgeInterfaceSetLocalizedDisplayName((uint64_t)v6, v17);
  }

  else
  {
    CFTypeID v19 = CFStringGetTypeID();
    if (v15)
    {
      if (CFGetTypeID(v15) == v19)
      {
        *((void *)v6 + 6) = v15;
        CFStringRef v20 = (const void *)*((void *)v6 + 7);
        if (v20)
        {
          CFRelease(v20);
          *((void *)v6 + 7) = 0LL;
        }
      }
    }
  }

  CFArrayAppendValue(*(CFMutableArrayRef *)a3, v6);
  CFRelease(v6);
}

void __SCBridgeInterfaceListCollectMembers(const __CFArray *a1, __CFSet *a2, int a3)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0LL; i != v7; ++i)
    {
      SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, i);
      CFIndex v10 = ValueAtIndex;
      if (!a3 || !SCBridgeInterfaceGetAllowConfiguredMembers(ValueAtIndex))
      {
        MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v10);
        if (MemberInterfaces)
        {
          int v12 = MemberInterfaces;
          CFIndex v13 = CFArrayGetCount(MemberInterfaces);
          if (v13 >= 1)
          {
            CFIndex v14 = v13;
            for (CFIndex j = 0LL; j != v14; ++j)
            {
              CFTypeID v16 = CFArrayGetValueAtIndex(v12, j);
              CFSetAddValue(a2, v16);
            }
          }
        }
      }
    }
  }

uint64_t SCBridgeInterfaceGetAllowConfiguredMembers(void *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        CFEqual(InterfaceType, @"Bridge")))
  {
    CFStringRef v4 = (const __CFDictionary *)a1[45];
    if (v4)
    {
      CFDictionaryRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, @"AllowConfiguredMembers");
      CFTypeID v6 = CFBooleanGetTypeID();
      if (Value && CFGetTypeID(Value) == v6) {
        return CFBooleanGetValue(Value);
      }
    }

    else
    {
      CFBooleanGetTypeID();
    }
  }

  else
  {
    _SCErrorSet(1002);
  }

  return 0LL;
}

uint64_t SCBridgeInterfaceGetMemberInterfaces(const __SCNetworkInterface *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
      if (CFEqual(InterfaceType, @"Bridge")) {
        return *((void *)a1 + 44);
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

__CFArray *SCBridgeInterfaceCopyAvailableMemberInterfaces(const __SCPreferences *a1)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  uint64_t v3 = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
  CFStringRef v4 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  if (v4)
  {
    int v5 = v4;
    __SCBridgeInterfaceListCollectMembers(v4, v3, 0);
    CFRelease(v5);
  }

  CFTypeID v6 = SCVLANInterfaceCopyAll(a1);
  if (v6)
  {
    CFIndex v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0LL; i != v9; ++i)
      {
        SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v7, i);
        SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(ValueAtIndex);
        CFSetAddValue(v3, PhysicalInterface);
      }
    }

    CFRelease(v7);
  }

  CFIndex v13 = __SCNetworkInterfaceCopyAll_IONetworkInterface(0);
  if (v13)
  {
    CFIndex v14 = v13;
    CFIndex v15 = CFArrayGetCount(v13);
    if (v15 >= 1)
    {
      CFIndex v16 = v15;
      for (CFIndex j = 0LL; j != v16; ++j)
      {
        CFTypeID v18 = CFArrayGetValueAtIndex(v14, j);
        if (v18[344])
        {
          CFTypeID v19 = v18;
          if (!CFSetContainsValue(v3, v18)) {
            CFArrayAppendValue(Mutable, v19);
          }
        }
      }
    }

    CFRelease(v14);
  }

  CFRelease(v3);
  return Mutable;
}

__CFArray *_SCBridgeInterfaceCopyActive()
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (getifaddrs(&v40) == -1)
  {
    uint64_t v17 = __error();
    _SCErrorSet(*v17);
    CFTypeID v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      CFTypeID v21 = (char *)&v37 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      CFTypeID v23 = __error();
      CFTypeID v24 = strerror(*v23);
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = v24;
      __SC_log_send(5, (uint64_t)v18, v19, v21);
    }

    return 0LL;
  }

  int v0 = inet_dgram_socket();
  if (v0 == -1)
  {
    CFTypeID v25 = __error();
    _SCErrorSet(*v25);
    CFMutableDictionaryRef Mutable = 0LL;
    goto LABEL_33;
  }

  int v1 = v0;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  uint64_t v3 = v40;
  if (!v40) {
    goto LABEL_28;
  }
  while (1)
  {
    CFMutableArrayRef v39 = 0LL;
    ifa_data = (unsigned __int8 *)v3->ifa_data;
    if (ifa_data)
    {
      if (v3->ifa_addr->sa_family == 18 && *ifa_data == 209)
      {
        ifa_io_name_t name = v3->ifa_name;
        size_t v6 = strlen(ifa_name);
        if (v6 < 4
          || (ifa_name[v6 - 1] - 48) > 9
          || (ifa_name[v6 - 2] - 48) > 9
          || (ifa_name[v6 - 3] - 48) >= 0xA)
        {
          uint64_t v43 = 0LL;
          __int128 v41 = 0u;
          __int128 v42 = 0u;
          __strlcpy_chk();
          *(void *)&__int128 v42 = 6LL;
          CFIndex v7 = malloc(0x50CuLL);
          if (v7)
          {
            SCNetworkServiceRef v8 = v7;
            unsigned int v9 = 1280;
            size_t v10 = 1292LL;
            while (1)
            {
              bzero(v8, v10);
              *SCNetworkServiceRef v8 = v9;
              *(void *)(v8 + 1) = v8 + 3;
              *((void *)&v42 + 1) = 12LL;
              uint64_t v43 = v8;
              if (ioctl(v1, 0xC028697BuLL, &v41) == -1)
              {
                free(v8);
                goto LABEL_18;
              }

              v9 *= 2;
              size_t v10 = v9 | 0xC;
              SCNetworkServiceRef v8 = reallocf(v8, v10);
              if (!v8) {
                goto LABEL_18;
              }
            }

            CFStringRef v11 = CFStringCreateWithCString(0LL, v3->ifa_name, 0x600u);
            uint64_t Private = (const void *)_SCBridgeInterfaceCreatePrivate(0LL, v11);
            CFRelease(v11);
            if (*v8 >= 0x50u)
            {
              CFTypeID v38 = Mutable;
              uint64_t v13 = 0LL;
              unint64_t v14 = 0LL;
              do
              {
                CFIndex v15 = CFStringCreateWithCString(0LL, (const char *)(*(void *)(v8 + 1) + v13), 0x600u);
                add_interface(&v39, v15, 0LL);
                CFRelease(v15);
                ++v14;
                v13 += 80LL;
              }

              while (v14 < *v8 / 0x50uLL);
              CFIndex v16 = v39;
              free(v8);
              CFMutableDictionaryRef Mutable = v38;
              if (v16)
              {
                __SCBridgeInterfaceSetMemberInterfaces((uint64_t)Private, v16);
                CFRelease(v16);
              }
            }

            else
            {
              free(v8);
            }

            CFArrayAppendValue(Mutable, Private);
            CFRelease(Private);
            goto LABEL_27;
          }

uint64_t inet_dgram_socket()
{
  v9[1] = *MEMORY[0x1895F89C0];
  uint64_t v0 = socket(2, 2, 0);
  if ((_DWORD)v0 == -1)
  {
    int v1 = __log_SCNetworkConfiguration();
    uint64_t v2 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v1, (os_log_type_t)v2))
    {
      uint64_t v3 = _os_log_pack_size();
      CFStringRef v4 = (char *)v9 - ((MEMORY[0x1895F8858](v3) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      size_t v6 = __error();
      CFIndex v7 = strerror(*v6);
      *(_DWORD *)uint64_t v5 = 136315138;
      *(void *)(v5 + 4) = v7;
      __SC_log_send(3, (uint64_t)v1, v2, v4);
    }
  }

  return v0;
}

void add_interface(CFMutableArrayRef *a1, const __CFString *a2, const __SCPreferences *cf)
{
  if (*a1)
  {
    if (!cf)
    {
LABEL_6:
      size_t v6 = (const void *)_SCNetworkInterfaceCreateWithBSDName(0LL, a2, 0);
      if (!v6) {
        return;
      }
      goto LABEL_7;
    }
  }

  else
  {
    *a1 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (!cf) {
      goto LABEL_6;
    }
  }

  size_t v6 = (const void *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(0, cf, a2);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_7:
  CFArrayAppendValue(*a1, v6);
  CFRelease(v6);
}

uint64_t __SCBridgeInterfaceSetMemberInterfaces(uint64_t a1, CFArrayRef theArray)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0LL;
  }
  if (!*(void *)(a1 + 80))
  {
    uint64_t v13 = 1LL;
LABEL_16:
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        CFTypeRef Copy = __SCNetworkInterfaceCreateCopy( 0LL,  (uint64_t)ValueAtIndex,  *(const void **)(a1 + 80),  *(const void **)(a1 + 96));
        CFArrayAppendValue(Mutable, Copy);
        CFRelease(Copy);
      }
    }

    CFRelease(*(CFTypeRef *)(a1 + 352));
    *(void *)(a1 + 352) = Mutable;
    return v13;
  }

  uint64_t v5 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"Bridge",  *(void *)(a1 + 112));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v5);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    CFRelease(v5);
    _SCErrorSet(1001);
    return 0LL;
  }

  SCNetworkServiceRef v8 = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  if (Count >= 1)
  {
    for (CFIndex j = 0LL; j != Count; ++j)
    {
      size_t v10 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(theArray, j);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v10);
      CFArrayAppendValue(v8, BSDName);
    }
  }

  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
  CFDictionarySetValue(MutableCopy, @"Interfaces", v8);
  CFRelease(v8);
  if (CFEqual(Value, MutableCopy)) {
    uint64_t v13 = 1LL;
  }
  else {
    uint64_t v13 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v5, MutableCopy);
  }
  CFRelease(MutableCopy);
  CFRelease(v5);
  if ((_DWORD)v13) {
    goto LABEL_16;
  }
  return v13;
}

uint64_t SCBridgeInterfaceCreate(const void *a1)
{
  if (!a1)
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  uint64_t v2 = CFGetAllocator(a1);
  CFStringRef v3 = CFStringCreateWithFormat(v2, 0LL, @"bridge%ld", 0LL);
  CFStringRef v4 = CFStringCreateWithFormat(v2, 0LL, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", v3);
  if (SCPreferencesPathGetValue((SCPreferencesRef)a1, v4))
  {
    uint64_t v5 = 1LL;
    do
    {
      CFRelease(v4);
      CFRelease(v3);
      CFStringRef v3 = CFStringCreateWithFormat(v2, 0LL, @"bridge%ld", v5);
      CFStringRef v4 = CFStringCreateWithFormat(v2, 0LL, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", v3);
      ++v5;
    }

    while (SCPreferencesPathGetValue((SCPreferencesRef)a1, v4));
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  CFArrayRef v7 = CFArrayCreate(v2, 0LL, 0LL, MEMORY[0x189605228]);
  CFDictionaryAddValue(Mutable, @"Interfaces", v7);
  CFRelease(v7);
  int v8 = SCPreferencesPathSetValue((SCPreferencesRef)a1, v4, Mutable);
  CFRelease(Mutable);
  CFRelease(v4);
  if (!v8)
  {
    CFRelease(v3);
    return 0LL;
  }

  uint64_t Private = _SCBridgeInterfaceCreatePrivate(v2, v3);
  CFRelease(v3);
  *(void *)(Private + 80) = CFRetain(a1);
  return Private;
}

uint64_t SCBridgeInterfaceRemove(SCPreferencesRef *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        CFEqual(InterfaceType, @"Bridge"))
    && a1[10])
  {
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
    uint64_t v5 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"Bridge",  BSDName);
    uint64_t v6 = SCPreferencesPathRemoveValue(a1[10], v5);
    CFRelease(v5);
    return v6;
  }

  else
  {
    _SCErrorSet(1002);
    return 0LL;
  }

uint64_t SCBridgeInterfaceGetOptions(const __SCNetworkInterface *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
      if (CFEqual(InterfaceType, @"Bridge")) {
        return *((void *)a1 + 45);
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

uint64_t SCBridgeInterfaceSetMemberInterfaces(const __SCPreferences **a1, const void *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1) {
    goto LABEL_15;
  }
  if (CFGetTypeID(a1) != TypeID) {
    goto LABEL_15;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
  if (!CFEqual(InterfaceType, @"Bridge")) {
    goto LABEL_15;
  }
  int AllowConfiguredMembers = SCBridgeInterfaceGetAllowConfiguredMembers(a1);
  if (!a2) {
    goto LABEL_12;
  }
  CFTypeID v6 = CFArrayGetTypeID();
  if (CFGetTypeID(a2) != v6)
  {
LABEL_15:
    int v15 = 1002;
LABEL_16:
    _SCErrorSet(v15);
    return 0LL;
  }

  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0LL;
    do
    {
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v9);
      CFTypeID v11 = SCNetworkInterfaceGetTypeID();
      if (!ValueAtIndex
        || CFGetTypeID(ValueAtIndex) != v11
        || !SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex))
      {
        goto LABEL_15;
      }
    }

    while (v8 != ++v9);
  }

uint64_t SCBridgeInterfaceSetLocalizedDisplayName(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1
    || CFGetTypeID((CFTypeRef)a1) != TypeID
    || (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        !CFEqual(InterfaceType, @"Bridge"))
    || a2 && (CFTypeID v6 = CFStringGetTypeID(), CFGetTypeID(a2) != v6))
  {
    int v12 = 1002;
    goto LABEL_12;
  }

  if (*(void *)(a1 + 80))
  {
    CFArrayRef v7 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"Bridge",  *(void *)(a1 + 112));
    CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == v9)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
      CFTypeID v11 = MutableCopy;
      if (a2) {
        CFDictionarySetValue(MutableCopy, @"UserDefinedName", a2);
      }
      else {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
      }
      if (CFEqual(Value, v11)) {
        uint64_t v13 = 1LL;
      }
      else {
        uint64_t v13 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v7, v11);
      }
      CFRelease(v11);
      CFRelease(v7);
      if (!(_DWORD)v13) {
        return v13;
      }
      goto LABEL_21;
    }

    CFRelease(v7);
    int v12 = 1001;
LABEL_12:
    _SCErrorSet(v12);
    return 0LL;
  }

  uint64_t v13 = 1LL;
LABEL_21:
  int v15 = *(const void **)(a1 + 40);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 40) = 0LL;
  }

  if (a2) {
    *(void *)(a1 + 40) = CFStringCreateCopy(0LL, a2);
  }
  return v13;
}

uint64_t SCBridgeInterfaceSetOptions(const __SCNetworkInterface *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
      if (CFEqual(InterfaceType, @"Bridge"))
      {
        if (!a2) {
          return __SCBridgeInterfaceSetOptions((uint64_t)a1, a2);
        }
        CFTypeID v6 = CFDictionaryGetTypeID();
        if (CFGetTypeID(a2) == v6) {
          return __SCBridgeInterfaceSetOptions((uint64_t)a1, a2);
        }
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

uint64_t __SCBridgeInterfaceSetOptions(uint64_t a1, CFDictionaryRef theDict)
{
  value[1] = *(void **)MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 80))
  {
    uint64_t v14 = 1LL;
LABEL_15:
    int v15 = *(const void **)(a1 + 360);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(a1 + 360) = 0LL;
    }

    if (theDict)
    {
      value[0] = 0LL;
      *(void *)(a1 + 360) = CFDictionaryCreateCopy(0LL, theDict);
      if (!*(void *)(a1 + 40))
      {
        if (CFDictionaryGetValueIfPresent(theDict, @"__AUTO__", (const void **)value))
        {
          uint64_t v17 = value[0];
          CFTypeID TypeID = CFStringGetTypeID();
          if (v17)
          {
            if (CFGetTypeID(v17) == TypeID)
            {
              *(void **)(a1 + 48) = value[0];
              CFIndex v19 = *(const void **)(a1 + 56);
              if (v19)
              {
                CFRelease(v19);
                *(void *)(a1 + 56) = 0LL;
              }
            }
          }
        }
      }
    }

    return v14;
  }

  CFStringRef v4 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"Bridge",  *(void *)(a1 + 112));
  uint64_t v5 = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v4);
  CFTypeID v6 = CFDictionaryGetTypeID();
  if (v5 && CFGetTypeID(v5) == v6)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v5);
    CFIndex v8 = MutableCopy;
    if (theDict) {
      CFDictionarySetValue(MutableCopy, @"Options", theDict);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"Options");
    }
    if (CFEqual(v5, v8)) {
      uint64_t v14 = 1LL;
    }
    else {
      uint64_t v14 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v4, v8);
    }
    CFRelease(v8);
    CFRelease(v4);
    if (!(_DWORD)v14) {
      return v14;
    }
    goto LABEL_15;
  }

  CFTypeID v9 = __log_SCNetworkConfiguration();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
  {
    uint64_t v11 = _os_log_pack_size();
    int v12 = (char *)value - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)(v13 + 4) = "__SCBridgeInterfaceSetOptions";
    __SC_log_send(5, (uint64_t)v9, v10, v12);
  }

  CFRelease(v4);
  _SCErrorSet(1001);
  return 0LL;
}

uint64_t __SCBridgeInterfaceSetAutoConfigure(uint64_t a1, int a2)
{
  CFStringRef v4 = *(const __CFDictionary **)(a1 + 360);
  if (v4)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v4);
    BOOL v6 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }

  else
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    BOOL v6 = 1;
    if (a2)
    {
LABEL_3:
      CFDictionaryRemoveValue(MutableCopy, @"AutoConfigure");
      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  CFDictionarySetValue(MutableCopy, @"AutoConfigure", (const void *)*MEMORY[0x189604DE0]);
  if (v4) {
LABEL_4:
  }
    BOOL v6 = CFEqual(v4, MutableCopy) == 0;
LABEL_5:
  if (v6) {
    uint64_t v7 = __SCBridgeInterfaceSetOptions(a1, MutableCopy);
  }
  else {
    uint64_t v7 = 1LL;
  }
  CFRelease(MutableCopy);
  return v7;
}

uint64_t __SCBridgeInterfaceGetAutoConfigure(uint64_t a1)
{
  int v1 = *(const __CFDictionary **)(a1 + 360);
  if (v1)
  {
    CFDictionaryRef Value = (const __CFBoolean *)CFDictionaryGetValue(v1, @"AutoConfigure");
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      return CFBooleanGetValue(Value);
    }
  }

  else
  {
    CFBooleanGetTypeID();
  }

  return 1LL;
}

uint64_t SCBridgeInterfaceSetAllowConfiguredMembers(CFDictionaryRef *a1, int a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1
    || CFGetTypeID(a1) != TypeID
    || (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        !CFEqual(InterfaceType, @"Bridge")))
  {
    _SCErrorSet(1002);
    return 0LL;
  }

  CFDictionaryRef v6 = a1[45];
  if (v6)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, a1[45]);
    BOOL v8 = 0;
    if (a2) {
      goto LABEL_6;
    }
LABEL_13:
    CFDictionaryRemoveValue(MutableCopy, @"AllowConfiguredMembers");
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  BOOL v8 = 1;
  if (!a2) {
    goto LABEL_13;
  }
LABEL_6:
  CFDictionarySetValue(MutableCopy, @"AllowConfiguredMembers", (const void *)*MEMORY[0x189604DE8]);
  if (v6) {
LABEL_7:
  }
    BOOL v8 = CFEqual(v6, MutableCopy) == 0;
LABEL_8:
  if (v8) {
    uint64_t v9 = __SCBridgeInterfaceSetOptions((uint64_t)a1, MutableCopy);
  }
  else {
    uint64_t v9 = 1LL;
  }
  CFRelease(MutableCopy);
  return v9;
}

uint64_t _SCBridgeInterfaceUpdateConfiguration(const __SCPreferences *a1)
{
  if (!a1)
  {
    _SCErrorSet(1002);
    return 0;
  }

  uint64_t v2 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  CFStringRef v3 = v2;
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0LL;
  }
  CFDictionaryRef v6 = _SCBridgeInterfaceCopyActive();
  uint64_t v61 = v3;
  CFIndex v62 = Count;
  uint64_t v63 = a1;
  CFArrayRef theArray = v6;
  if (!v6)
  {
    int v60 = 0;
    CFIndex v67 = 0LL;
LABEL_34:
    unsigned __int8 v5 = 1;
    int v9 = -1;
    goto LABEL_35;
  }

  uint64_t v7 = v6;
  CFIndex v67 = CFArrayGetCount(v6);
  if (v67 < 1)
  {
    int v60 = 0;
    goto LABEL_34;
  }

  CFIndex v8 = 0LL;
  int v9 = -1;
  unsigned __int8 v5 = 1;
  while (1)
  {
    SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v7, v8);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (Count >= 1)
    {
      CFIndex v12 = 0LL;
      while (1)
      {
        uint64_t v13 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v3, v12);
        CFStringRef v14 = SCNetworkInterfaceGetBSDName(v13);
        if (CFEqual(BSDName, v14)) {
          break;
        }
        if (Count == ++v12) {
          goto LABEL_13;
        }
      }

      MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v13);
      uint64_t v17 = MemberInterfaces;
      if (MemberInterfaces) {
        CFIndex v18 = CFArrayGetCount(MemberInterfaces);
      }
      else {
        CFIndex v18 = 0LL;
      }
      CFIndex v19 = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(ValueAtIndex);
      if (v19)
      {
        CFIndex v20 = v19;
        CFIndex v21 = CFArrayGetCount(v19);
        if (v21 >= 1)
        {
          CFIndex v22 = v21;
          CFIndex v23 = 0LL;
          while (1)
          {
            CFTypeID v24 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v20, v23);
            if (!v18 || (v69.io_name_t location = 0LL, v69.length = v18, !CFArrayContainsValue(v17, v69, v24)))
            {
              if (v9 == -1)
              {
                int v9 = inet_dgram_socket();
                if (v9 == -1) {
                  goto LABEL_94;
                }
              }

              int v25 = SCNetworkInterfaceGetBSDName(v24);
            }

            if (v22 == ++v23) {
              goto LABEL_30;
            }
          }
        }
      }

      goto LABEL_30;
    }

LABEL_94:
  CFTypeID v58 = __error();
  _SCErrorSet(*v58);
  unsigned __int8 v5 = 0;
  int v9 = -1;
  CFStringRef v3 = v61;
LABEL_95:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v9 != -1) {
    close(v9);
  }
  return v5;
}

BOOL __bridge_remove_interface(int a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  CFIndex v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v20, 16LL, 0x600u);
  __int128 v21 = xmmword_18124A520;
  CFIndex v22 = v23;
  memset(v23, 0, sizeof(v23));
  _SC_cfstring_to_cstring(a3, (UInt8 *)v23, 16LL, 0x600u);
  if (ioctl(a1, 0x8028697BuLL, &v20) == -1)
  {
    CFIndex v12 = __error();
    _SCErrorSet(*v12);
    uint64_t v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v13, (os_log_type_t)v14);
    if (result)
    {
      uint64_t v15 = _os_log_pack_size();
      CFIndex v16 = (char *)&v20 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      CFIndex v18 = __error();
      CFIndex v19 = strerror(*v18);
      *(_DWORD *)uint64_t v17 = 138412802;
      *(void *)(v17 + 4) = a3;
      *(_WORD *)(v17 + 12) = 2112;
      *(void *)(v17 + 14) = a2;
      *(_WORD *)(v17 + 22) = 2080;
      *(void *)(v17 + 24) = v19;
      __SC_log_send(3, (uint64_t)v13, v14, v16);
      return 0LL;
    }
  }

  else
  {
    CFDictionaryRef v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      int v9 = (char *)&v20 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 138412546;
      *(void *)(v10 + 4) = a2;
      *(_WORD *)(v10 + 12) = 2112;
      *(void *)(v10 + 14) = a3;
      __SC_log_send(6, (uint64_t)v6, v7, v9);
    }

    return 1LL;
  }

  return result;
}

BOOL __bridge_set_mac(int a1, const __CFString *a2, const __CFData *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v24, 16LL, 0x600u);
  unsigned __int8 Length = CFDataGetLength(a3);
  LOBYTE(v25) = Length;
  if (Length >= 0xFuLL)
  {
    _SCErrorSet(1002);
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v7, (os_log_type_t)v8);
    if (!result) {
      return result;
    }
    uint64_t v10 = _os_log_pack_size();
    uint64_t v11 = (char *)&v24 - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    int v13 = v25;
    *(_DWORD *)uint64_t v12 = 138412802;
    *(void *)(v12 + 4) = a2;
    *(_WORD *)(v12 + 12) = 1024;
    *(_DWORD *)(v12 + 14) = v13;
    *(_WORD *)(v12 + 18) = 2048;
    *(void *)(v12 + 20) = 14LL;
LABEL_10:
    __SC_log_send(3, (uint64_t)v7, v8, v11);
    return 0LL;
  }

  v27.io_name_t location = 0LL;
  v27.length = Length;
  CFDataGetBytes(a3, v27, (UInt8 *)&v25 + 2);
  if (ioctl(a1, 0x8020693CuLL, &v24) == -1)
  {
    CFIndex v19 = __error();
    _SCErrorSet(*v19);
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v7, (os_log_type_t)v8);
    if (!result) {
      return result;
    }
    uint64_t v20 = _os_log_pack_size();
    uint64_t v11 = (char *)&v24 - ((MEMORY[0x1895F8858](v20) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    CFIndex v22 = __error();
    CFIndex v23 = strerror(*v22);
    *(_DWORD *)uint64_t v21 = 138412546;
    *(void *)(v21 + 4) = a2;
    *(_WORD *)(v21 + 12) = 2080;
    *(void *)(v21 + 14) = v23;
    goto LABEL_10;
  }

  uint64_t v14 = __log_SCNetworkConfiguration();
  uint64_t v15 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v14, (os_log_type_t)v15))
  {
    uint64_t v16 = _os_log_pack_size();
    uint64_t v17 = (char *)&v24 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v18 = 138412547;
    *(void *)(v18 + 4) = a2;
    *(_WORD *)(v18 + 12) = 2113;
    *(void *)(v18 + 14) = a3;
    __SC_log_send(6, (uint64_t)v14, v15, v17);
  }

  return 1LL;
}

BOOL __bridge_add_interface(const __SCPreferences *a1, int a2, const __CFString *a3, const __CFString *a4)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  set_configured_mtu(a1, a2, a4);
  CFIndex v23 = 0LL;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  _SC_cfstring_to_cstring(a3, (UInt8 *)&v21, 16LL, 0x600u);
  __int128 v22 = xmmword_18124A530;
  CFIndex v23 = v24;
  memset(v24, 0, sizeof(v24));
  _SC_cfstring_to_cstring(a4, (UInt8 *)v24, 16LL, 0x600u);
  if (ioctl(a2, 0x8028697BuLL, &v21) == -1)
  {
    int v13 = __error();
    _SCErrorSet(*v13);
    uint64_t v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v14, (os_log_type_t)v15);
    if (result)
    {
      uint64_t v16 = _os_log_pack_size();
      uint64_t v17 = (char *)&v21 - ((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      CFIndex v19 = __error();
      uint64_t v20 = strerror(*v19);
      *(_DWORD *)uint64_t v18 = 138412802;
      *(void *)(v18 + 4) = a4;
      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v18 + 14) = a3;
      *(_WORD *)(v18 + 22) = 2080;
      *(void *)(v18 + 24) = v20;
      __SC_log_send(3, (uint64_t)v14, v15, v17);
      return 0LL;
    }
  }

  else
  {
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v10 = (char *)&v21 - ((MEMORY[0x1895F8858](v9) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 138412546;
      *(void *)(v11 + 4) = a3;
      *(_WORD *)(v11 + 12) = 2112;
      *(void *)(v11 + 14) = a4;
      __SC_log_send(6, (uint64_t)v7, v8, v10);
    }

    return 1LL;
  }

  return result;
}

void set_configured_mtu(const __SCPreferences *a1, int a2, const __CFString *a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  int valuePtr = 0;
  CFDictionaryRef v6 = SCNetworkSetCopyCurrent(a1);
  if (v6)
  {
    uint64_t v7 = v6;
    CFStringRef SetID = SCNetworkSetGetSetID(v6);
    CFStringRef SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity( 0LL,  (uint64_t)SetID,  (uint64_t)a3,  (uint64_t)@"Ethernet");
    CFDictionaryRef Value = SCPreferencesPathGetValue(a1, SetNetworkInterfaceEntity);
    CFRelease(SetNetworkInterfaceEntity);
    if (!Value) {
      goto LABEL_14;
    }
    uint64_t v11 = CFDictionaryGetValue(Value, @"MTU");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!v11 || CFGetTypeID(v11) != TypeID || !CFNumberGetValue((CFNumberRef)v11, kCFNumberIntType, &valuePtr)) {
      goto LABEL_14;
    }
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    _SC_cfstring_to_cstring(a3, (UInt8 *)&v34, 16LL, 0x8000100u);
    LODWORD(v35) = valuePtr;
    int v13 = ioctl(a2, 0x80206934uLL, &v34);
    uint64_t v14 = __log_SCNetworkConfiguration();
    if (v13 < 0)
    {
      uint64_t v15 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v14, (os_log_type_t)v15))
      {
        uint64_t v26 = _os_log_pack_size();
        uint64_t v17 = &v32[-((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v27 = _os_log_pack_fill();
        int v28 = valuePtr;
        CFRange v29 = __error();
        CFRange v30 = strerror(*v29);
        int v31 = *__error();
        *(_DWORD *)uint64_t v27 = 136316162;
        *(void *)(v27 + 4) = "BridgeConfiguration";
        *(_WORD *)(v27 + 12) = 2080;
        *(void *)(v27 + 14) = &v34;
        *(_WORD *)(v27 + 22) = 1024;
        *(_DWORD *)(v27 + 24) = v28;
        *(_WORD *)(v27 + 28) = 2080;
        *(void *)(v27 + 30) = v30;
        *(_WORD *)(v27 + 38) = 1024;
        *(_DWORD *)(v27 + 40) = v31;
        int v20 = 3;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v15 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
      {
        uint64_t v16 = _os_log_pack_size();
        uint64_t v17 = &v32[-((MEMORY[0x1895F8858](v16) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v18 = _os_log_pack_fill();
        int v19 = valuePtr;
        *(_DWORD *)uint64_t v18 = 136315650;
        *(void *)(v18 + 4) = "BridgeConfiguration";
        *(_WORD *)(v18 + 12) = 2080;
        *(void *)(v18 + 14) = &v34;
        *(_WORD *)(v18 + 22) = 1024;
        *(_DWORD *)(v18 + 24) = v19;
        int v20 = 5;
LABEL_13:
        __SC_log_send(v20, (uint64_t)v14, v15, v17);
      }
    }

uint64_t SCNSManagerCreate(uint64_t a1)
{
  return __SCNSManagerCreateCommon(a1, 0LL, 0);
}

uint64_t __SCNSManagerCreateCommon(uint64_t a1, const AuthorizationOpaqueRef *a2, int a3)
{
  v20[1] = *MEMORY[0x1895F89C0];
  unsigned __int8 v5 = CFStringCreateWithFormat(0LL, 0LL, @"SCNSManager(%@)", a1);
  if (a3) {
    SCPreferencesRef v6 = SCPreferencesCreateWithAuthorization(0LL, v5, 0LL, a2);
  }
  else {
    SCPreferencesRef v6 = SCPreferencesCreate(0LL, v5, 0LL);
  }
  SCPreferencesRef v7 = v6;
  CFRelease(v5);
  if (!v7)
  {
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      int v13 = (char *)v20 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      int v15 = SCError();
      uint64_t v16 = SCErrorString(v15);
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v16;
LABEL_13:
      __SC_log_send(5, (uint64_t)v10, v11, v13);
    }

    return 0LL;
  }

  if (__SCNetworkSettingsInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSettingsInitialize_initialized, &__block_literal_global_17);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    CFRelease(v7);
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
    {
      uint64_t v17 = _os_log_pack_size();
      int v13 = (char *)v20 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = "__SCNSManagerCreateCommon";
      goto LABEL_13;
    }

    return 0LL;
  }

  uint64_t v9 = Instance;
  CFRetain(v7);
  *(void *)(v9 + 16) = v7;
  CFRelease(v7);
  return v9;
}

uint64_t SCNSManagerCreateWithAuthorization(uint64_t a1, const AuthorizationOpaqueRef *a2)
{
  return __SCNSManagerCreateCommon(a1, a2, 1);
}

void SCNSManagerRefresh(uint64_t a1)
{
}

void SCNSManagerRemoveService(uint64_t a1, void *value)
{
  CFStringRef v4 = *(__CFSet **)(a1 + 48);
  if (v4) {
    CFSetRemoveValue(v4, value);
  }
  CFMutableDictionaryRef Mutable = *(__CFSet **)(a1 + 56);
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
    *(void *)(a1 + 56) = Mutable;
  }

  CFSetAddValue(Mutable, value);
}

uint64_t SCNSManagerApplyChanges(SCPreferencesRef *a1)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1[6];
  if (!v2 || !CFSetGetCount(v2))
  {
    CFStringRef v3 = a1[7];
    if (!v3 || !CFSetGetCount(v3))
    {
      unsigned __int8 v5 = _SC_LOG_DEFAULT();
      uint64_t v6 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
      {
        uint64_t v7 = _os_log_pack_size();
        uint64_t v8 = &v35[-((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 136315138;
        *(void *)(v9 + 4) = "SCNSManagerApplyChanges";
        __SC_log_send(5, (uint64_t)v5, v6, v8);
      }

      uint64_t v10 = 1LL;
      goto LABEL_34;
    }
  }

  int v4 = 10;
  while (1)
  {
    if (SCPreferencesLock(a1[2], 1u))
    {
      uint64_t v11 = a1[7];
      if (v11)
      {
        if (CFSetGetCount(v11))
        {
          char context = 0;
          CFSetApplyFunction(a1[7], (CFSetApplierFunction)managerRemove, &context);
          uint64_t v10 = 0LL;
          if (context) {
            goto LABEL_33;
          }
        }
      }

      uint64_t v12 = a1[6];
      if (v12)
      {
        if (CFSetGetCount(v12))
        {
          char v37 = 0;
          CFSetApplyFunction(a1[6], (CFSetApplierFunction)managerChange, &v37);
          uint64_t v10 = 0LL;
          if (v37) {
            goto LABEL_33;
          }
        }
      }

      if (SCPreferencesCommitChanges(a1[2]))
      {
        if (SCPreferencesApplyChanges(a1[2]))
        {
          uint64_t v10 = 1LL;
LABEL_33:
          SCPreferencesUnlock(a1[2]);
          goto LABEL_34;
        }

        uint64_t v25 = _SC_LOG_DEFAULT();
        uint64_t v26 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v25, (os_log_type_t)v26)) {
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v25 = _SC_LOG_DEFAULT();
        uint64_t v26 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v25, (os_log_type_t)v26))
        {
LABEL_31:
          uint64_t v27 = _os_log_pack_size();
          int v28 = &v35[-((MEMORY[0x1895F8858](v27) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
          __error();
          uint64_t v29 = _os_log_pack_fill();
          int v30 = SCError();
          int v31 = SCErrorString(v30);
          *(_DWORD *)uint64_t v29 = 136315394;
          *(void *)(v29 + 4) = "SCNSManagerApplyChanges";
          *(_WORD *)(v29 + 12) = 2080;
          *(void *)(v29 + 14) = v31;
          __SC_log_send(5, (uint64_t)v25, v26, v28);
        }
      }

      uint64_t v10 = 0LL;
      goto LABEL_33;
    }

    if (SCError() != 3005) {
      break;
    }
    SCPreferencesSynchronize(a1[2]);
    if (!--v4) {
      goto LABEL_24;
    }
  }

  int v13 = _SC_LOG_DEFAULT();
  uint64_t v14 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
  {
    uint64_t v15 = _os_log_pack_size();
    uint64_t v16 = &v35[-((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    __error();
    uint64_t v17 = _os_log_pack_fill();
    int v18 = SCError();
    int v19 = SCErrorString(v18);
    *(_DWORD *)uint64_t v17 = 136315394;
    *(void *)(v17 + 4) = "SCNSManagerApplyChanges";
    *(_WORD *)(v17 + 12) = 2080;
    *(void *)(v17 + 14) = v19;
    __SC_log_send(5, (uint64_t)v13, v14, v16);
  }

void *SCNSManagerCopyService(const void **a1, const void *a2, const __CFString *a3, const __CFString *a4)
{
  if (!a3 || a4) {
    return __SCNSManagerCopyService(a1, a2, a3, a4, 0);
  }
  _SCErrorSet(1002);
  return 0LL;
}

void *__SCNSManagerCopyService( const void **a1, const void *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  uint64_t v9 = 0LL;
  v27[1] = *MEMORY[0x1895F89C0];
  BOOL v10 = 1;
  if (a3 && a4)
  {
    uint64_t v12 = (const void *)SCNetworkCategoryCreate(a1[2], a3);
    int v13 = (const __CFArray *)SCNetworkCategoryCopyServices((uint64_t)v12, (uint64_t)a4);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v9 = copy_service_in_list(v13, a2);
      CFRelease(v14);
      if (!v12)
      {
LABEL_6:
        BOOL v10 = a5 != 0;
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      if (!v12) {
        goto LABEL_6;
      }
    }

    CFRelease(v12);
    goto LABEL_6;
  }

CFStringRef SCNSManagerCreateService( SCPreferencesRef *a1, const void *a2, const __CFString *a3, const __CFString *a4)
{
  int v4 = a4;
  v18[1] = *MEMORY[0x1895F89C0];
  if (a3 && !a4)
  {
    _SCErrorSet(1002);
    return v4;
  }

  if (a3)
  {
    uint64_t v7 = (__CFString *)__SCNSServiceCreate(a1, a3, a4, a2, 0LL);
    CFStringRef SetID = 0LL;
    int v4 = 0LL;
    if (!v7) {
      return v4;
    }
    goto LABEL_6;
  }

  uint64_t v9 = SCNetworkSetCopyCurrent(a1[2]);
  if (v9)
  {
    BOOL v10 = v9;
    CFStringRef SetID = SCNetworkSetGetSetID(v9);
    CFRetain(SetID);
    CFRelease(v10);
    uint64_t v11 = (__CFString *)__SCNSServiceCreate(a1, 0LL, v4, a2, 0LL);
    if (!v11)
    {
      int v4 = 0LL;
      if (!SetID) {
        return v4;
      }
      goto LABEL_7;
    }

    uint64_t v7 = v11;
    if (SetID)
    {
      CFRetain(SetID);
      v7[1].info = (uint64_t)SetID;
    }

void *__SCNSServiceCreate( const void *a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5)
{
  if (__SCNetworkSettingsInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSettingsInitialize_initialized, &__block_literal_global_17);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = a1;
    CFRetain(a1);
    if (a2 && a3)
    {
      v11[6] = CFStringCreateCopy(0LL, a2);
      v11[7] = CFStringCreateCopy(0LL, a3);
    }

    if (a4)
    {
      CFRetain(a4);
      v11[4] = a4;
    }

    if (a5)
    {
      CFRetain(a5);
      v11[3] = a5;
    }
  }

  return v11;
}

void __SCNSManagerServiceChanged(uint64_t a1, void *value)
{
  int v4 = *(__CFSet **)(a1 + 56);
  if (v4) {
    CFSetRemoveValue(v4, value);
  }
  CFMutableDictionaryRef Mutable = *(__CFSet **)(a1 + 48);
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
    *(void *)(a1 + 48) = Mutable;
  }

  CFSetAddValue(Mutable, value);
}

void *SCNSManagerCopyCurrentService( const void **a1, SCNetworkInterfaceRef interface, const __CFString *a3)
{
  if (!a3) {
    return __SCNSManagerCopyService(a1, interface, 0LL, 0LL, 1);
  }
  uint64_t v6 = __SCNetworkCategoryManagerCopyActiveValueNoSession(a3, interface);
  if (v6) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = __SCNSManagerCopyService(a1, interface, v7, v6, 1);
  if (v6) {
    CFRelease(v6);
  }
  return v8;
}

uint64_t SCNSManagerSetEventHandler(uint64_t a1, dispatch_queue_s *a2, const void *a3)
{
  int v4 = *(dispatch_object_s **)(a1 + 24);
  if (!a2)
  {
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(a1 + 24) = 0LL;
      uint64_t v9 = *(const void **)(a1 + 32);
      if (v9)
      {
        _Block_release(v9);
        *(void *)(a1 + 32) = 0LL;
      }

      SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 16), 0LL);
      SCPreferencesSetCallback(*(SCPreferencesRef *)(a1 + 16), 0LL, 0LL);
      BOOL v10 = *(const void **)(a1 + 40);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(a1 + 40) = 0LL;
      }
    }

    return 1LL;
  }

  if (!a3 || v4)
  {
    _SCErrorSet(1002);
  }

  else
  {
    uint64_t result = (uint64_t)store_create((void *)a1, a2);
    if (!result) {
      return result;
    }
    uint64_t v8 = (const void *)result;
    if (__SCNSManagerEnablePrefsCallback((SCPreferencesRef *)a1, a2))
    {
      *(void *)(a1 + 24) = a2;
      dispatch_retain(a2);
      *(void *)(a1 + 32) = _Block_copy(a3);
      *(void *)(a1 + 40) = CFRetain(v8);
      CFRelease(v8);
      return 1LL;
    }

    CFRelease(v8);
  }

  return 0LL;
}

uint64_t SCNSServiceGetInterface(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

CFStringRef SCNSServiceGetServiceID(uint64_t a1)
{
  int v1 = *(const __SCNetworkService **)(a1 + 24);
  if (v1) {
    return SCNetworkServiceGetServiceID(v1);
  }
  else {
    return @"n/a";
  }
}

CFStringRef SCNSServiceGetName(uint64_t a1)
{
  int v1 = *(const __SCNetworkService **)(a1 + 24);
  if (v1) {
    return SCNetworkServiceGetName(v1);
  }
  else {
    return @"n/a";
  }
}

CFDictionaryRef SCNSServiceCopyProtocolEntity(uint64_t a1, __CFString *cf1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cf[0] = 0LL;
  if (!__SCNetworkProtocolIsValidType(cf1))
  {
    int v4 = 0LL;
    int v6 = 1002;
    goto LABEL_11;
  }

  if (!__SCNSServiceGetEntity(a1, cf1, cf))
  {
    uint64_t v7 = *(const __SCNetworkService **)(a1 + 24);
    if (v7)
    {
      uint64_t v8 = SCNetworkServiceCopyProtocol(v7, cf1);
      if (v8)
      {
        int v4 = v8;
        CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(v8);
        if (!Configuration) {
          goto LABEL_10;
        }
LABEL_4:
        CFRetain(Configuration);
        if (!v4) {
          return Configuration;
        }
        goto LABEL_12;
      }
    }
  }

  int v4 = 0LL;
  CFDictionaryRef Configuration = (CFDictionaryRef)cf[0];
  if (cf[0]) {
    goto LABEL_4;
  }
LABEL_10:
  int v6 = 1004;
LABEL_11:
  _SCErrorSet(v6);
  CFDictionaryRef Configuration = 0LL;
  if (v4) {
LABEL_12:
  }
    CFRelease(v4);
  return Configuration;
}

uint64_t __SCNSServiceGetEntity(uint64_t a1, void *value, void *a3)
{
  int v6 = *(const __CFSet **)(a1 + 80);
  if (v6 && CFSetContainsValue(v6, value))
  {
    uint64_t v7 = 0LL;
    uint64_t result = 1LL;
  }

  else
  {
    uint64_t result = *(void *)(a1 + 72);
    if (result)
    {
      uint64_t v7 = CFDictionaryGetValue((CFDictionaryRef)result, value);
      uint64_t result = v7 != 0LL;
    }

    else
    {
      uint64_t v7 = 0LL;
    }
  }

  *a3 = v7;
  return result;
}

uint64_t SCNSServiceSetProtocolEntity(uint64_t *a1, const __CFString *cf1, void *a3)
{
  if (__SCNetworkProtocolIsValidType(cf1)) {
    return __SCNSServiceSetEntity(a1, cf1, a3);
  }
  _SCErrorSet(1002);
  return 0LL;
}

uint64_t __SCNSServiceSetEntity(uint64_t *a1, CFTypeRef cf1, void *value)
{
  v19[1] = *MEMORY[0x1895F89C0];
  if (value)
  {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)a1[9];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
      a1[9] = (uint64_t)Mutable;
    }

    CFDictionarySetValue(Mutable, cf1, value);
    uint64_t v7 = (__CFSet *)a1[10];
    if (v7) {
      CFSetRemoveValue(v7, cf1);
    }
LABEL_17:
    __SCNSManagerServiceChanged(a1[2], a1);
    return 1LL;
  }

  uint64_t v8 = (__CFSet *)a1[10];
  if (!v8)
  {
    uint64_t v8 = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
    a1[10] = (uint64_t)v8;
  }

  int v9 = CFEqual(cf1, @"IPv4");
  BOOL v10 = @"IPv6";
  if (!v9 && (v11 = CFEqual(cf1, @"IPv6"), BOOL v10 = @"IPv4", !v11) || !v10 || !CFSetContainsValue(v8, v10))
  {
    CFSetAddValue(v8, cf1);
    int v18 = (__CFDictionary *)a1[9];
    if (v18) {
      CFDictionaryRemoveValue(v18, cf1);
    }
    goto LABEL_17;
  }

  uint64_t v12 = _SC_LOG_DEFAULT();
  uint64_t v13 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v12, (os_log_type_t)v13))
  {
    uint64_t v14 = _os_log_pack_size();
    uint64_t v15 = (char *)v19 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)(v16 + 4) = "__SCNSServiceSetEntity";
    __SC_log_send(3, (uint64_t)v12, v13, v15);
  }

  _SCErrorSet(1002);
  return 0LL;
}

void SCNSServiceUseDefaultProtocolEntities(void *value)
{
  *((_BYTE *)value + 88) = 1;
  uint64_t v2 = (const void *)*((void *)value + 10);
  if (v2)
  {
    CFRelease(v2);
    *((void *)value + 10) = 0LL;
  }

  CFStringRef v3 = (const void *)*((void *)value + 9);
  if (v3)
  {
    CFRelease(v3);
    *((void *)value + 9) = 0LL;
  }

  __SCNSManagerServiceChanged(*((void *)value + 2), value);
}

CFDictionaryRef SCNSServiceCopyActiveEntity(uint64_t a1, __CFString *a2)
{
  int v4 = *(const __CFDictionary **)(a1 + 64);
  if (!v4)
  {
    SCNSServiceRefreshActiveState(a1);
    int v4 = *(const __CFDictionary **)(a1 + 64);
    if (!v4) {
      return 0LL;
    }
  }

  if (!CFDictionaryContainsKey(v4, @"IPv4")
    && !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 64), @"IPv6"))
  {
    return 0LL;
  }

  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  CFDictionaryRef v6 = SCNSServiceCopyProtocolEntity(a1, a2);
  uint64_t v7 = v6;
  if (Value && v6)
  {
    CFDictionaryRef Value = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)dict_merge_value, Value);
LABEL_10:
    CFRelease(v7);
    return Value;
  }

  if (v6)
  {
    CFRetain(v6);
    CFDictionaryRef Value = v7;
    goto LABEL_10;
  }

  if (Value) {
    CFRetain(Value);
  }
  return Value;
}

void SCNSServiceRefreshActiveState(uint64_t a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  uint64_t v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0LL;
  }

  CFStringRef ServiceID = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(a1 + 24));
  cf[0] = SCDynamicStoreKeyCreateNetworkServiceEntity(0LL, @"State:", ServiceID, @"[^/]+");
  int v4 = CFArrayCreate(0LL, cf, 1LL, MEMORY[0x189605228]);
  CFRelease(cf[0]);
  unsigned __int8 v5 = SCDynamicStoreCopyMultiple(0LL, 0LL, v4);
  CFRelease(v4);
  if (v5)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)state_dict_entity_key, Mutable);
    CFRelease(v5);
  }

  else
  {
    CFMutableDictionaryRef Mutable = 0LL;
  }

  *(void *)(a1 + 64) = Mutable;
}

uint64_t SCNSServiceGetCategoryID(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t SCNSServiceGetCategoryValue(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t SCNSServiceSetQoSMarkingPolicy(uint64_t *a1, void *value)
{
  return __SCNSServiceSetEntity(a1, @"QoSMarkingPolicy", value);
}

CFTypeRef SCNSServiceCopyQoSMarkingPolicy(void *a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1895F89C0];
  cf[0] = 0LL;
  uint64_t v2 = (const __SCNetworkService *)a1[3];
  else {
    BOOL v3 = v2 == 0LL;
  }
  if (v3) {
    goto LABEL_6;
  }
  unsigned __int8 v5 = (const __CFString *)a1[6];
  if (v5)
  {
    uint64_t v6 = a1[7];
    uint64_t v7 = (const void *)SCNetworkCategoryCreate(*(const void **)(a1[2] + 16LL), v5);
    CFTypeRef ServiceQoSMarkingPolicy = SCNetworkCategoryGetServiceQoSMarkingPolicy((uint64_t)v7, v6, v2);
    if (v7) {
      CFRelease(v7);
    }
    if (ServiceQoSMarkingPolicy) {
      goto LABEL_12;
    }
LABEL_15:
    _SCErrorSet(1004);
    return ServiceQoSMarkingPolicy;
  }

  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(v2);
  if (!Interface)
  {
LABEL_6:
    CFTypeRef ServiceQoSMarkingPolicy = cf[0];
    if (!cf[0]) {
      goto LABEL_15;
    }
  }

  else
  {
    CFTypeRef ServiceQoSMarkingPolicy = SCNetworkInterfaceGetQoSMarkingPolicy(Interface);
    if (!ServiceQoSMarkingPolicy) {
      goto LABEL_15;
    }
  }

void __SCNSManagerDeallocate(uint64_t a1)
{
  uint64_t v2 = *(const __SCPreferences **)(a1 + 16);
  if (v2)
  {
    SCPreferencesSetDispatchQueue(v2, 0LL);
    SCPreferencesSetCallback(*(SCPreferencesRef *)(a1 + 16), 0LL, 0LL);
    BOOL v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 16) = 0LL;
    }
  }

  int v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 48) = 0LL;
  }

  unsigned __int8 v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 56) = 0LL;
  }

  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 40) = 0LL;
  }

  uint64_t v7 = *(dispatch_object_s **)(a1 + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    _Block_release(v8);
    *(void *)(a1 + 32) = 0LL;
  }

__CFString *__SCNSManagerCopyDescription(const void *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<%s %p> {}", "SCNSManager", a1);
  return Mutable;
}

void __SCNSServiceDeallocate(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0LL;
  }

  BOOL v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0LL;
  }

  int v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0LL;
  }

  unsigned __int8 v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0LL;
  }

  uint64_t v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0LL;
  }

  uint64_t v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0LL;
  }

  uint64_t v8 = (const void *)a1[8];
  if (v8)
  {
    CFRelease(v8);
    a1[8] = 0LL;
  }

  int v9 = (const void *)a1[9];
  if (v9)
  {
    CFRelease(v9);
    a1[9] = 0LL;
  }

  BOOL v10 = (const void *)a1[10];
  if (v10)
  {
    CFRelease(v10);
    a1[10] = 0LL;
  }

__CFString *__SCNSServiceCopyDescription(void *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<%s %p> { service %@", "SCNSService", a1, a1[3]);
  if (a1[6])
  {
    uint64_t v4 = a1[7];
    if (v4) {
      CFStringAppendFormat(Mutable, 0LL, @" category (%@, %@)", a1[6], v4);
    }
  }

  CFStringAppend(Mutable, @" }");
  return Mutable;
}

void managerRemove(void *a1, _BYTE *a2)
{
  v41[1] = *MEMORY[0x1895F89C0];
  if (!*a2)
  {
    BOOL v3 = (const __SCNetworkService *)a1[3];
    if (v3)
    {
      CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3);
      uint64_t v6 = a1[2];
      uint64_t v7 = (const __CFString *)a1[6];
      if (v7)
      {
        uint64_t v8 = (const void *)SCNetworkCategoryCreate(*(const void **)(v6 + 16), v7);
        int v9 = copy_service_for_category_and_ID((uint64_t)v8, a1[7], ServiceID);
        if (v9)
        {
          BOOL v10 = v9;
          int v11 = SCNetworkCategoryRemoveService((uint64_t)v8, a1[7], v9);
          CFRelease(v10);
          if (v11) {
            goto LABEL_25;
          }
          uint64_t v12 = _SC_LOG_DEFAULT();
          uint64_t v13 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v12, (os_log_type_t)v13)) {
            goto LABEL_16;
          }
        }

        else
        {
          uint64_t v12 = _SC_LOG_DEFAULT();
          uint64_t v13 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
          {
LABEL_16:
            uint64_t v21 = _os_log_pack_size();
            uint64_t v22 = (char *)v41 - ((MEMORY[0x1895F8858](v21) + 15) & 0xFFFFFFFFFFFFFFF0LL);
            __error();
            uint64_t v23 = _os_log_pack_fill();
            uint64_t v24 = a1[6];
            uint64_t v25 = a1[7];
            *(_DWORD *)uint64_t v23 = 136315906;
            *(void *)(v23 + 4) = "managerRemove";
            *(_WORD *)(v23 + 12) = 2112;
            *(void *)(v23 + 14) = ServiceID;
            *(_WORD *)(v23 + 22) = 2112;
            *(void *)(v23 + 24) = v24;
            *(_WORD *)(v23 + 32) = 2112;
            *(void *)(v23 + 34) = v25;
            __SC_log_send(5, (uint64_t)v12, v13, v22);
          }
        }

const __SCNetworkService *copy_service_for_category_and_ID(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4 = (const __CFArray *)SCNetworkCategoryCopyServices(a1, a2);
  if (!v4) {
    return 0LL;
  }
  unsigned __int8 v5 = v4;
  uint64_t v6 = copy_service_in_list_by_ID(v4, a3);
  CFRelease(v5);
  return v6;
}

const __SCNetworkService *copy_service_in_list_by_ID(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0LL;
  while (1)
  {
    SCNetworkSetRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(a1, v6);
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(ValueAtIndex);
    if (CFEqual(a2, ServiceID)) {
      break;
    }
    if (v5 == ++v6) {
      return 0LL;
    }
  }

  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

void managerChange(uint64_t a1, _BYTE *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!*a2)
  {
    if (*(void *)(a1 + 24))
    {
      if (!__SCNSServiceUpdateService(a1)) {
        goto LABEL_19;
      }
    }

    else if (!__SCNSServiceInstantiateService(a1))
    {
      goto LABEL_19;
    }

    uint64_t v4 = *(const __CFSet **)(a1 + 80);
    if (v4)
    {
      uint64_t context = a1;
      uint64_t v24 = 0LL;
      CFSetApplyFunction(v4, (CFSetApplierFunction)entityRemove, &context);
      if ((_BYTE)v24) {
        goto LABEL_12;
      }
    }

    CFIndex v5 = *(const __CFDictionary **)(a1 + 72);
    if (v5
      && (uint64_t context = a1,
          uint64_t v24 = 0LL,
          CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)entityChange, &context),
          (_BYTE)v24))
    {
LABEL_12:
      int v6 = 1;
    }

    else
    {
      int v6 = 0;
    }

    uint64_t v7 = *(const void **)(a1 + 80);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 80) = 0LL;
    }

    uint64_t v8 = *(const void **)(a1 + 72);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 72) = 0LL;
    }

    *(_BYTE *)(a1 + 88) = 0;
    if (v6)
    {
LABEL_19:
      uint64_t v9 = *(void *)(a1 + 48);
      BOOL v10 = _SC_LOG_DEFAULT();
      uint64_t v11 = _SC_syslog_os_log_mapping(5);
      BOOL v12 = __SC_log_enabled(5, v10, (os_log_type_t)v11);
      if (v9)
      {
        if (v12)
        {
          uint64_t v13 = _os_log_pack_size();
          uint64_t v14 = (char *)&v22 - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v15 = _os_log_pack_fill();
          uint64_t v16 = *(void *)(a1 + 32);
          uint64_t v17 = *(void *)(a1 + 48);
          uint64_t v18 = *(void *)(a1 + 56);
          *(_DWORD *)uint64_t v15 = 136315906;
          *(void *)(v15 + 4) = "managerChange";
          *(_WORD *)(v15 + 12) = 2112;
          *(void *)(v15 + 14) = v16;
          *(_WORD *)(v15 + 22) = 2112;
          *(void *)(v15 + 24) = v17;
          *(_WORD *)(v15 + 32) = 2112;
          *(void *)(v15 + 34) = v18;
LABEL_24:
          __SC_log_send(5, (uint64_t)v10, v11, v14);
        }
      }

      else if (v12)
      {
        uint64_t v19 = _os_log_pack_size();
        uint64_t v14 = (char *)&v22 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        uint64_t v21 = *(void *)(a1 + 32);
        *(_DWORD *)uint64_t v20 = 136315394;
        *(void *)(v20 + 4) = "managerChange";
        *(_WORD *)(v20 + 12) = 2112;
        *(void *)(v20 + 14) = v21;
        goto LABEL_24;
      }

      *a2 = 1;
    }
  }

uint64_t __SCNSServiceInstantiateService(uint64_t a1)
{
  v23[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = *(const __CFString **)(a1 + 48);
  if (!v3)
  {
    int v6 = *(const __CFString **)(a1 + 40);
    if (v6 && (uint64_t v7 = SCNetworkSetCopy(*(SCPreferencesRef *)(v2 + 16), v6)) != 0LL)
    {
      uint64_t v8 = v7;
      SCNetworkServiceRef service_in_set = create_service_in_set( *(const __SCPreferences **)(v2 + 16),  v7,  *(SCNetworkInterfaceRef *)(a1 + 32));
      CFRelease(v8);
      if (service_in_set) {
        goto LABEL_3;
      }
    }

    else
    {
      uint64_t v9 = _SC_LOG_DEFAULT();
      uint64_t v10 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        BOOL v12 = (char *)v23 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        uint64_t v14 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t v13 = 136315394;
        *(void *)(v13 + 4) = "__SCNSServiceInstantiateService";
        *(_WORD *)(v13 + 12) = 2112;
        *(void *)(v13 + 14) = v14;
        __SC_log_send(5, (uint64_t)v9, v10, v12);
      }
    }

    return 0LL;
  }

  SCNetworkServiceRef service_in_set = create_service_in_category( *(const void **)(v2 + 16),  v3,  *(void *)(a1 + 56),  *(const __SCNetworkInterface **)(a1 + 32));
  if (!service_in_set) {
    return 0LL;
  }
LABEL_3:
  if (SCNetworkServiceEstablishDefaultConfiguration(service_in_set))
  {
    if (!*(void *)(a1 + 72) && !*(void *)(a1 + 80)) {
      *(_BYTE *)(a1 + 88) = 0;
    }
    CFRetain(service_in_set);
    *(void *)(a1 + 24) = service_in_set;
    uint64_t v5 = 1LL;
  }

  else
  {
    uint64_t v15 = _SC_LOG_DEFAULT();
    uint64_t v16 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v18 = (char *)v23 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = SCError();
      uint64_t v21 = SCErrorString(v20);
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)(v19 + 4) = "__SCNSServiceInstantiateService";
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v19 + 14) = v21;
      __SC_log_send(5, (uint64_t)v15, v16, v18);
    }

    uint64_t v5 = 0LL;
  }

  CFRelease(service_in_set);
  return v5;
}

BOOL __SCNSServiceUpdateService(uint64_t a1)
{
  v29[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 16);
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(a1 + 24));
  uint64_t v4 = *(const __CFString **)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = (const void *)SCNetworkCategoryCreate(*(const void **)(v2 + 16), v4);
    int v6 = copy_service_for_category_and_ID((uint64_t)v5, *(void *)(a1 + 56), ServiceID);
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      goto LABEL_5;
    }
    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v13, (os_log_type_t)v14);
    if (result)
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v16 = (char *)v29 - ((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = *(void *)(a1 + 48);
      uint64_t v19 = *(void *)(a1 + 56);
      *(_DWORD *)uint64_t v17 = 136315906;
      *(void *)(v17 + 4) = "__SCNSServiceUpdateService";
      *(_WORD *)(v17 + 12) = 2112;
      *(void *)(v17 + 14) = ServiceID;
      *(_WORD *)(v17 + 22) = 2112;
      *(void *)(v17 + 24) = v18;
      *(_WORD *)(v17 + 32) = 2112;
      *(void *)(v17 + 34) = v19;
LABEL_18:
      __SC_log_send(5, (uint64_t)v13, v14, v16);
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = *(const __CFString **)(a1 + 40);
    if (!v8 || (uint64_t v9 = SCNetworkSetCopy(*(SCPreferencesRef *)(v2 + 16), v8)) == 0LL)
    {
      int v20 = _SC_LOG_DEFAULT();
      uint64_t v21 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v20, (os_log_type_t)v21);
      if (!result) {
        return result;
      }
      uint64_t v22 = _os_log_pack_size();
      uint64_t v23 = (char *)v29 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      uint64_t v25 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)(v24 + 4) = "__SCNSServiceUpdateService";
      *(_WORD *)(v24 + 12) = 2112;
      *(void *)(v24 + 14) = v25;
      __SC_log_send(5, (uint64_t)v20, v21, v23);
      return 0LL;
    }

    uint64_t v10 = v9;
    uint64_t v11 = SCNetworkSetCopyServices(v9);
    if (v11)
    {
      BOOL v12 = v11;
      int v6 = copy_service_in_list_by_ID(v11, ServiceID);
      CFRelease(v12);
      CFRelease(v10);
      if (v6)
      {
LABEL_5:
        CFRelease(*(CFTypeRef *)(a1 + 24));
        CFRetain(v6);
        *(void *)(a1 + 24) = v6;
        CFRelease(v6);
        return 1LL;
      }
    }

    else
    {
      CFRelease(v10);
    }

    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v13, (os_log_type_t)v14);
    if (result)
    {
      uint64_t v26 = _os_log_pack_size();
      uint64_t v16 = (char *)v29 - ((MEMORY[0x1895F8858](v26) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v27 = 136315650;
      *(void *)(v27 + 4) = "__SCNSServiceUpdateService";
      *(_WORD *)(v27 + 12) = 2112;
      *(void *)(v27 + 14) = ServiceID;
      *(_WORD *)(v27 + 22) = 2112;
      *(void *)(v27 + 24) = v28;
      goto LABEL_18;
    }
  }

  return result;
}

SCNetworkServiceRef create_service_in_category( const void *a1, const __CFString *a2, uint64_t a3, const __SCNetworkInterface *a4)
{
  v17[1] = *MEMORY[0x1895F89C0];
  uint64_t v7 = (const void *)SCNetworkCategoryCreate(a1, a2);
  SCNetworkServiceRef v8 = SCNetworkServiceCreate((SCPreferencesRef)a1, a4);
  if (!SCNetworkCategoryAddService((uint64_t)v7, a3, v8))
  {
    uint64_t v9 = _SC_LOG_DEFAULT();
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      BOOL v12 = (char *)v17 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      int v14 = SCError();
      uint64_t v15 = SCErrorString(v14);
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)(v13 + 4) = "create_service_in_category";
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v15;
      __SC_log_send(5, (uint64_t)v9, v10, v12);
    }

    CFRelease(v8);
    SCNetworkServiceRef v8 = 0LL;
  }

  CFRelease(v7);
  return v8;
}

SCNetworkServiceRef create_service_in_set( const __SCPreferences *a1, const __SCNetworkSet *a2, SCNetworkInterfaceRef interface)
{
  v13[1] = *MEMORY[0x1895F89C0];
  SCNetworkServiceRef v4 = SCNetworkServiceCreate(a1, interface);
  if (!SCNetworkSetAddService(a2, v4))
  {
    CFRelease(v4);
    uint64_t v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      SCNetworkServiceRef v8 = (char *)v13 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      int v10 = SCError();
      uint64_t v11 = SCErrorString(v10);
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)(v9 + 4) = "create_service_in_set";
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v11;
      __SC_log_send(5, (uint64_t)v5, v6, v8);
    }

    return 0LL;
  }

  return v4;
}

uint64_t service_establish_default(const __SCNetworkService *a1)
{
  v28[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = SCNetworkServiceCopyProtocols(a1);
  BOOL v3 = v2;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0LL;
      while (1)
      {
        SCNetworkSetRef ValueAtIndex = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v3, v6);
        CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(ValueAtIndex);
        if (!SCNetworkServiceRemoveProtocolType(a1, ProtocolType)) {
          break;
        }
        if (v5 == ++v6) {
          goto LABEL_6;
        }
      }

      int v20 = _SC_LOG_DEFAULT();
      uint64_t v21 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v20, (os_log_type_t)v21)) {
        goto LABEL_12;
      }
      uint64_t v22 = _os_log_pack_size();
      uint64_t v23 = (char *)v28 - ((MEMORY[0x1895F8858](v22) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      int v25 = SCError();
      uint64_t v26 = SCErrorString(v25);
      *(_DWORD *)uint64_t v24 = 136315650;
      *(void *)(v24 + 4) = "service_establish_default";
      *(_WORD *)(v24 + 12) = 2112;
      *(void *)(v24 + 14) = ProtocolType;
      *(_WORD *)(v24 + 22) = 2080;
      *(void *)(v24 + 24) = v26;
      uint64_t v17 = (uint64_t)v20;
      uint64_t v18 = v21;
      uint64_t v19 = v23;
      goto LABEL_11;
    }
  }

void entityRemove(const __CFString *a1, uint64_t a2)
{
  v13[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)a2;
  if (CFEqual(a1, @"QoSMarkingPolicy"))
  {
  }

  else if (SCNetworkServiceRemoveProtocolType(*(SCNetworkServiceRef *)(v4 + 24), a1))
  {
    return;
  }

  if (SCError() != 1004)
  {
    CFIndex v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      SCNetworkServiceRef v8 = (char *)v13 - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      uint64_t v10 = *(void *)(v4 + 24);
      int v11 = SCError();
      uint64_t v12 = SCErrorString(v11);
      *(_DWORD *)uint64_t v9 = 136315906;
      *(void *)(v9 + 4) = "entityRemove";
      *(_WORD *)(v9 + 12) = 2112;
      *(void *)(v9 + 14) = a1;
      *(_WORD *)(v9 + 22) = 2112;
      *(void *)(v9 + 24) = v10;
      *(_WORD *)(v9 + 32) = 2080;
      *(void *)(v9 + 34) = v12;
      __SC_log_send(3, (uint64_t)v5, v6, v8);
    }

    *(_BYTE *)(a2 + 8) = 1;
  }

uint64_t entityChange(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  if (CFEqual(a1, @"QoSMarkingPolicy"))
  {
    uint64_t result = __SCNSServiceSetQoSMarkingPolicy(v6, a2);
    if ((_DWORD)result) {
      return result;
    }
    goto LABEL_3;
  }

  uint64_t result = __SCNSServiceSetProtocol(v6, a1, a2);
  if (!(_DWORD)result) {
LABEL_3:
  }
    *(_BYTE *)(a3 + 8) = 1;
  return result;
}

uint64_t __SCNSServiceSetQoSMarkingPolicy(uint64_t a1, const __CFDictionary *a2)
{
  BOOL v3 = *(const __SCNetworkService **)(a1 + 24);
  uint64_t v4 = *(const __CFString **)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (const void *)SCNetworkCategoryCreate(*(const void **)(*(void *)(a1 + 16) + 16LL), v4);
    uint64_t v7 = SCNetworkCategorySetServiceQoSMarkingPolicy((uint64_t)v6, v5, v3, a2);
    if (v6) {
      CFRelease(v6);
    }
  }

  else
  {
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(*(SCNetworkServiceRef *)(a1 + 24));
    if (Interface) {
      return SCNetworkInterfaceSetQoSMarkingPolicy(Interface, (const __CFString *)a2);
    }
    return 0LL;
  }

  return v7;
}

uint64_t __SCNSServiceSetProtocol(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  v23[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(const __SCNetworkService **)(a1 + 24);
  uint64_t v6 = SCNetworkServiceCopyProtocol(v5, a2);
  if (v6) {
    goto LABEL_2;
  }
  if (!SCNetworkServiceAddProtocolType(v5, a2))
  {
    SCNetworkServiceRef v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v8, (os_log_type_t)v9))
    {
LABEL_13:
      uint64_t v17 = _os_log_pack_size();
      uint64_t v18 = (char *)v23 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = SCError();
      uint64_t v21 = SCErrorString(v20);
      *(_DWORD *)uint64_t v19 = 136315906;
      *(void *)(v19 + 4) = "__SCNSServiceSetProtocol";
      *(_WORD *)(v19 + 12) = 2112;
      *(void *)(v19 + 14) = v5;
      *(_WORD *)(v19 + 22) = 2112;
      *(void *)(v19 + 24) = a2;
      *(_WORD *)(v19 + 32) = 2080;
      *(void *)(v19 + 34) = v21;
      __SC_log_send(3, (uint64_t)v8, v9, v18);
    }

    return 0LL;
  }

  uint64_t v6 = SCNetworkServiceCopyProtocol(v5, a2);
  if (!v6)
  {
    SCNetworkServiceRef v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v8, (os_log_type_t)v9)) {
      goto LABEL_13;
    }
    return 0LL;
  }

LABEL_2:
  if (SCNetworkProtocolSetConfiguration(v6, a3))
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      uint64_t v13 = (char *)v23 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      int v15 = SCError();
      uint64_t v16 = SCErrorString(v15);
      *(_DWORD *)uint64_t v14 = 136315906;
      *(void *)(v14 + 4) = "__SCNSServiceSetProtocol";
      *(_WORD *)(v14 + 12) = 2112;
      *(void *)(v14 + 14) = v5;
      *(_WORD *)(v14 + 22) = 2112;
      *(void *)(v14 + 24) = a2;
      *(_WORD *)(v14 + 32) = 2080;
      *(void *)(v14 + 34) = v16;
      __SC_log_send(3, (uint64_t)v10, v11, v13);
    }

    uint64_t v7 = 0LL;
  }

  CFRelease(v6);
  return v7;
}

const __SCNetworkService *copy_service_in_list(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0LL;
  while (1)
  {
    SCNetworkSetRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(a1, v6);
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
    if (CFEqual(a2, Interface)) {
      break;
    }
    if (v5 == ++v6) {
      return 0LL;
    }
  }

  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

const __SCDynamicStore *store_create(void *a1, dispatch_queue_s *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  context.version = 0LL;
  memset(&context.retain, 0, 24);
  context.info = a1;
  BOOL v3 = SCDynamicStoreCreate(0LL, @"SCNSManager", (SCDynamicStoreCallBack)__SCNSManagerStoreCallback, &context);
  if (!v3)
  {
    uint64_t v12 = _SC_LOG_DEFAULT();
    uint64_t v13 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      int v15 = (char *)&context - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      int v17 = SCError();
      uint64_t v18 = SCErrorString(v17);
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = "store_create";
      *(_WORD *)(v16 + 12) = 2080;
      *(void *)(v16 + 14) = v18;
      __SC_log_send(5, (uint64_t)v12, v13, v15);
    }

    return 0LL;
  }

  uint64_t v4 = v3;
  if (!store_set_notification_keys(v3))
  {
LABEL_6:
    CFRelease(v4);
    return 0LL;
  }

  if (!SCDynamicStoreSetDispatchQueue(v4, a2))
  {
    CFIndex v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      SCNetworkServiceRef v8 = (char *)&context - ((MEMORY[0x1895F8858](v7) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      int v10 = SCError();
      uint64_t v11 = SCErrorString(v10);
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)(v9 + 4) = "store_create";
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v11;
      __SC_log_send(5, (uint64_t)v5, v6, v8);
    }

    goto LABEL_6;
  }

  return v4;
}

uint64_t __SCNSManagerEnablePrefsCallback(SCPreferencesRef *a1, dispatch_queue_s *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  context.version = 0LL;
  memset(&context.retain, 0, 24);
  context.info = a1;
  uint64_t v4 = SCPreferencesSetCallback(a1[2], (SCPreferencesCallBack)__SCNSManagerPrefsCallback, &context);
  if ((_DWORD)v4)
  {
    uint64_t v5 = v4;
    if (SCPreferencesSetDispatchQueue(a1[2], a2)) {
      return 1LL;
    }
    else {
      SCPreferencesSetCallback(a1[2], 0LL, 0LL);
    }
  }

  else
  {
    uint64_t v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v9 = (char *)&context - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = SCError();
      uint64_t v12 = SCErrorString(v11);
      *(_DWORD *)uint64_t v10 = 136315394;
      *(void *)(v10 + 4) = "__SCNSManagerEnablePrefsCallback";
      *(_WORD *)(v10 + 12) = 2080;
      *(void *)(v10 + 14) = v12;
      __SC_log_send(5, (uint64_t)v6, v7, v9);
    }

    return 0LL;
  }

  return v5;
}

uint64_t __SCNSManagerStoreCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a3, 0LL);
  }
  return result;
}

uint64_t store_set_notification_keys(const __SCDynamicStore *a1)
{
  v17[4] = *MEMORY[0x1895F89C0];
  v17[0] = @"IPv4";
  v17[1] = @"IPv6";
  void v17[2] = @"Proxies";
  v17[3] = @"DNS";
  uint64_t v2 = (const CFArrayCallBacks *)MEMORY[0x189605228];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  CFArrayAppendValue(Mutable, @"com.apple.scnetworkcategory");
  uint64_t v4 = CFArrayCreateMutable(0LL, 0LL, v2);
  for (uint64_t i = 0LL; i != 4; ++i)
  {
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( 0LL,  @"State:",  @"[^/]+",  (CFStringRef)v17[i]);
    CFArrayAppendValue(v4, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
  }

  uint64_t v7 = SCDynamicStoreSetNotificationKeys(a1, Mutable, v4);
  if (!(_DWORD)v7)
  {
    uint64_t v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      int v11 = (char *)&v17[-1] - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      int v13 = SCError();
      uint64_t v14 = SCErrorString(v13);
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v12 + 4) = "store_set_notification_keys";
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v14;
      __SC_log_send(5, (uint64_t)v8, v9, v11);
    }
  }

  CFRelease(Mutable);
  CFRelease(v4);
  return v7;
}

uint64_t __SCNSManagerPrefsCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a3, 0LL);
  }
  return result;
}

void dict_merge_value(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void state_dict_entity_key(CFStringRef theString, const void *a2, __CFDictionary *a3)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0LL, theString, @"/");
  if (ArrayBySeparatingStrings)
  {
    uint64_t v6 = ArrayBySeparatingStrings;
    CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
    if (Count >= 1)
    {
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(v6, Count - 1);
      CFDictionarySetValue(a3, ValueAtIndex, a2);
    }

    CFRelease(v6);
  }

CFArrayRef SCVLANInterfaceCopyAll(SCPreferencesRef prefs)
{
  void context[3] = *MEMORY[0x1895F89C0];
  else {
    Companion = SCPreferencesCreateCompanion((uint64_t)prefs, @"NetworkInterfaces.plist");
  }
  context[0] = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  context[1] = Companion;
  void context[2] = prefs;
  BOOL v3 = CFStringCreateWithFormat(0LL, 0LL, @"/%@/%@", @"VirtualNetworkInterfaces", @"VLAN");
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, v3);
  CFRelease(v3);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    uint64_t v6 = CFGetAllocator(Value);
    CFTypeRef Copy = CFDictionaryCreateCopy(v6, Value);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)add_configured_interface_0, context);
    CFRelease(Copy);
  }

  if (Companion) {
    CFRelease(Companion);
  }
  return (CFArrayRef)context[0];
}

void add_configured_interface_0(const __CFString *a1, CFDictionaryRef theDict, uint64_t a3)
{
  CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Interface");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      uint64_t v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Tag");
      CFTypeID v9 = CFNumberGetTypeID();
      if (v8)
      {
        if (CFGetTypeID(v8) == v9)
        {
          uint64_t Private = _SCVLANInterfaceCreatePrivate(0LL, a1);
          if (!Private) {
            add_configured_interface_cold_1_0();
          }
          int v11 = (const __SCNetworkInterface *)Private;
          uint64_t v12 = *(const __SCPreferences **)(a3 + 8);
          if (!v12
            || (int v13 = (const __SCNetworkInterface *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName( 0,  v12,  Value)) == 0LL)
          {
            int v13 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName(0LL, Value, 2);
            if (!v13) {
              add_configured_interface_cold_2();
            }
          }

          *((_BYTE *)v13 + 368) = 1;
          SCVLANInterfaceSetPhysicalInterfaceAndTag(v11, v13, v8);
          CFRelease(v13);
          uint64_t v14 = (const __CFString *)CFDictionaryGetValue(theDict, @"UserDefinedName");
          CFTypeID v15 = CFStringGetTypeID();
          if (v14 && CFGetTypeID(v14) == v15) {
            SCVLANInterfaceSetLocalizedDisplayName(v11, v14);
          }
          uint64_t v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Options");
          CFTypeID v17 = CFDictionaryGetTypeID();
          if (v16)
          {
            if (CFGetTypeID(v16) == v17) {
              SCVLANInterfaceSetOptions(v11, v16);
            }
          }

          *((void *)v11 + 10) = CFRetain(*(CFTypeRef *)(a3 + 16));
          CFArrayAppendValue(*(CFMutableArrayRef *)a3, v11);
          CFRelease(v11);
        }
      }
    }
  }

CFArrayRef SCVLANInterfaceCopyAvailablePhysicalInterfaces(void)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  int v1 = SCPreferencesCreate(0LL, @"SCVLANInterfaceCopyAvailablePhysicalInterfaces", 0LL);
  if (v1)
  {
    uint64_t v2 = v1;
    BOOL v3 = (const __CFArray *)SCBridgeInterfaceCopyAll(v1);
    if (v3)
    {
      uint64_t v4 = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189605258]);
      __SCBridgeInterfaceListCollectMembers(v3, v4, 0);
    }

    else
    {
      uint64_t v4 = 0LL;
    }

    CFRelease(v2);
  }

  else
  {
    uint64_t v4 = 0LL;
    BOOL v3 = 0LL;
  }

  uint64_t v5 = __SCNetworkInterfaceCopyAll_IONetworkInterface(0);
  if (v5)
  {
    uint64_t v6 = v5;
    addAvailableInterfaces(Mutable, v5, v4);
    CFRelease(v6);
  }

  if (v3)
  {
    addAvailableInterfaces(Mutable, v3, 0LL);
    CFRelease(v3);
  }

  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

void addAvailableInterfaces(__CFArray *a1, CFArrayRef theArray, const __CFSet *a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0LL; i != v7; ++i)
    {
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (!a3 || !CFSetContainsValue(a3, ValueAtIndex))
      {
        if (ValueAtIndex[368]) {
          CFArrayAppendValue(a1, ValueAtIndex);
        }
      }
    }
  }

__CFArray *_SCVLANInterfaceCopyActive()
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (getifaddrs(&v31) == -1)
  {
    int v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v16 = &v29[-((MEMORY[0x1895F8858](v15) + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v19;
      __SC_log_send(5, (uint64_t)v13, v14, v16);
    }

    _SCErrorSet(1001);
    return 0LL;
  }

  int v0 = inet_dgram_socket();
  if (v0 == -1)
  {
    int v20 = __error();
    _SCErrorSet(*v20);
    CFMutableDictionaryRef Mutable = 0LL;
    goto LABEL_18;
  }

  int v1 = v0;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, MEMORY[0x189605228]);
  BOOL v3 = v31;
  if (!v31) {
    goto LABEL_13;
  }
  while (1)
  {
    ifa_data = (unsigned __int8 *)v3->ifa_data;
    if (ifa_data)
    {
      if (v3->ifa_addr->sa_family == 18 && *ifa_data == 135) {
        break;
      }
    }

Boolean SCVLANInterfaceSetPhysicalInterfaceAndTag( SCVLANInterfaceRef vlan, SCNetworkInterfaceRef physical, CFNumberRef tag)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!vlan) {
    goto LABEL_18;
  }
  if (CFGetTypeID(vlan) != TypeID) {
    goto LABEL_18;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
  if (!CFEqual(InterfaceType, @"VLAN")) {
    goto LABEL_18;
  }
  CFTypeID v8 = SCNetworkInterfaceGetTypeID();
  if (!physical || CFGetTypeID(physical) != v8) {
    goto LABEL_18;
  }
  if (!*((_BYTE *)physical + 368))
  {
    if (__SCPreferencesUsingDefaultPrefs(*((void *)physical + 10)))
    {
LABEL_18:
      int v20 = 1002;
LABEL_19:
      _SCErrorSet(v20);
      LOBYTE(v19) = 0;
      return v19;
    }

    *((_BYTE *)physical + 368) = 1;
  }

  CFTypeID v9 = CFNumberGetTypeID();
  if (!tag) {
    goto LABEL_18;
  }
  if (CFGetTypeID(tag) != v9) {
    goto LABEL_18;
  }
  CFNumberGetValue(tag, kCFNumberIntType, &valuePtr);
  uint64_t v10 = (const __SCPreferences *)*((void *)vlan + 10);
  if (!v10)
  {
    uint64_t v22 = 0LL;
    LOBYTE(v19) = 1;
    goto LABEL_23;
  }

  VLANInterfaceAndCFNumberRef Tag = findVLANInterfaceAndTag(v10, physical, tag);
  if (VLANInterfaceAndTag)
  {
    uint64_t v12 = VLANInterfaceAndTag;
    int v13 = CFEqual(vlan, VLANInterfaceAndTag);
    CFRelease(v12);
    if (!v13)
    {
      int v20 = 1005;
      goto LABEL_19;
    }
  }

  uint64_t v14 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"VLAN",  *((void *)vlan + 14));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)vlan + 10), v14);
  CFTypeID v16 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v16)
  {
    CFRelease(v14);
    int v20 = 1001;
    goto LABEL_19;
  }

  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(physical);
  CFDictionarySetValue(MutableCopy, @"Interface", BSDName);
  CFDictionarySetValue(MutableCopy, @"Tag", tag);
  if (CFEqual(Value, MutableCopy)) {
    int v19 = 1;
  }
  else {
    int v19 = SCPreferencesPathSetValue(*((SCPreferencesRef *)vlan + 10), v14, MutableCopy);
  }
  CFRelease(MutableCopy);
  CFRelease(v14);
  if (!v19) {
    return v19;
  }
  uint64_t v22 = (const void *)*((void *)vlan + 10);
LABEL_23:
  CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0LL, (uint64_t)physical, v22, *((const void **)vlan + 12));
  uint64_t v24 = (const void *)*((void *)vlan + 47);
  *((void *)vlan + 47) = Copy;
  if (v24) {
    CFRelease(v24);
  }
  int v25 = (const void *)*((void *)vlan + 48);
  *((void *)vlan + 48) = CFRetain(tag);
  if (v25) {
    CFRelease(v25);
  }
  return v19;
}

SCVLANInterfaceRef SCVLANInterfaceCreate( SCPreferencesRef prefs, SCNetworkInterfaceRef physical, CFNumberRef tag)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (!prefs) {
    goto LABEL_11;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!physical || CFGetTypeID(physical) != TypeID) {
    goto LABEL_11;
  }
  if (!*((_BYTE *)physical + 368))
  {
    if (__SCPreferencesUsingDefaultPrefs((uint64_t)prefs))
    {
LABEL_11:
      int v9 = 1002;
      goto LABEL_12;
    }

    *((_BYTE *)physical + 368) = 1;
  }

  CFTypeID v7 = CFNumberGetTypeID();
  if (!tag) {
    goto LABEL_11;
  }
  if (CFGetTypeID(tag) != v7) {
    goto LABEL_11;
  }
  CFNumberGetValue(tag, kCFNumberIntType, &valuePtr);
  VLANInterfaceAndCFNumberRef Tag = findVLANInterfaceAndTag(prefs, physical, tag);
  if (VLANInterfaceAndTag)
  {
    CFRelease(VLANInterfaceAndTag);
    int v9 = 1005;
  }

  else
  {
    uint64_t v12 = CFGetAllocator(prefs);
    CFStringRef v13 = CFStringCreateWithFormat(v12, 0LL, @"vlan%ld", 0LL);
    CFStringRef v14 = CFStringCreateWithFormat(v12, 0LL, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"VLAN", v13);
    if (SCPreferencesPathGetValue(prefs, v14))
    {
      uint64_t v15 = 1LL;
      do
      {
        CFRelease(v14);
        CFRelease(v13);
        CFStringRef v13 = CFStringCreateWithFormat(v12, 0LL, @"vlan%ld", v15);
        CFStringRef v14 = CFStringCreateWithFormat( v12,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"VLAN",  v13);
        ++v15;
      }

      while (SCPreferencesPathGetValue(prefs, v14));
    }

    CFTypeID v16 = CFDictionaryCreate(v12, 0LL, 0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    int v17 = SCPreferencesPathSetValue(prefs, v14, v16);
    CFRelease(v16);
    CFRelease(v14);
    if (v17)
    {
      uint64_t Private = (const __SCNetworkInterface *)_SCVLANInterfaceCreatePrivate(v12, v13);
      CFRelease(v13);
      *((void *)Private + 10) = CFRetain(prefs);
      SCVLANInterfaceSetPhysicalInterfaceAndTag(Private, physical, tag);
      return Private;
    }

    CFRelease(v13);
    int v9 = 1001;
  }

CFTypeRef findVLANInterfaceAndTag(const __SCPreferences *a1, const void *a2, const void *a3)
{
  uint64_t v5 = SCVLANInterfaceCopyAll(a1);
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
LABEL_8:
    CFTypeRef v13 = 0LL;
  }

  else
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0LL;
    while (1)
    {
      SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v5, v8);
      SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(ValueAtIndex);
      CFNumberRef Tag = SCVLANInterfaceGetTag(ValueAtIndex);
      if (PhysicalInterface)
      {
        CFNumberRef v12 = Tag;
        if (Tag)
        {
          if (CFEqual(a2, PhysicalInterface) && CFEqual(a3, v12)) {
            break;
          }
        }
      }

      if (v7 == ++v8) {
        goto LABEL_8;
      }
    }

    CFTypeRef v13 = CFRetain(ValueAtIndex);
  }

  CFRelease(v5);
  return v13;
}

Boolean SCVLANInterfaceRemove(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan
    && CFGetTypeID(vlan) == TypeID
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan), CFEqual(InterfaceType, @"VLAN"))
    && *((void *)vlan + 10))
  {
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(vlan);
    uint64_t v5 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"VLAN",  BSDName);
    Boolean v6 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)vlan + 10), v5);
    CFRelease(v5);
    return v6;
  }

  else
  {
    _SCErrorSet(1002);
    return 0;
  }

SCNetworkInterfaceRef SCVLANInterfaceGetPhysicalInterface(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan)
  {
    if (CFGetTypeID(vlan) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
      if (CFEqual(InterfaceType, @"VLAN")) {
        return (SCNetworkInterfaceRef)*((void *)vlan + 47);
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

CFNumberRef SCVLANInterfaceGetTag(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan)
  {
    if (CFGetTypeID(vlan) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
      if (CFEqual(InterfaceType, @"VLAN")) {
        return (CFNumberRef)*((void *)vlan + 48);
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

CFDictionaryRef SCVLANInterfaceGetOptions(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan)
  {
    if (CFGetTypeID(vlan) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
      if (CFEqual(InterfaceType, @"VLAN")) {
        return (CFDictionaryRef)*((void *)vlan + 49);
      }
    }
  }

  _SCErrorSet(1002);
  return 0LL;
}

Boolean SCVLANInterfaceSetLocalizedDisplayName(SCVLANInterfaceRef vlan, CFStringRef newName)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!vlan
    || CFGetTypeID(vlan) != TypeID
    || (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan), !CFEqual(InterfaceType, @"VLAN"))
    || newName && (CFTypeID v6 = CFStringGetTypeID(), CFGetTypeID(newName) != v6))
  {
    int v12 = 1002;
    goto LABEL_12;
  }

  if (*((void *)vlan + 10))
  {
    CFIndex v7 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"VLAN",  *((void *)vlan + 14));
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)vlan + 10), v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == v9)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
      int v11 = MutableCopy;
      if (newName) {
        CFDictionarySetValue(MutableCopy, @"UserDefinedName", newName);
      }
      else {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
      }
      if (CFEqual(Value, v11)) {
        int v13 = 1;
      }
      else {
        int v13 = SCPreferencesPathSetValue(*((SCPreferencesRef *)vlan + 10), v7, v11);
      }
      CFRelease(v11);
      CFRelease(v7);
      if (!v13) {
        return v13;
      }
      goto LABEL_21;
    }

    CFRelease(v7);
    int v12 = 1001;
LABEL_12:
    _SCErrorSet(v12);
    LOBYTE(v13) = 0;
    return v13;
  }

  LOBYTE(v13) = 1;
LABEL_21:
  uint64_t v15 = (const void *)*((void *)vlan + 5);
  if (v15)
  {
    CFRelease(v15);
    *((void *)vlan + 5) = 0LL;
  }

  if (newName) {
    *((void *)vlan + 5) = CFStringCreateCopy(0LL, newName);
  }
  return v13;
}

Boolean SCVLANInterfaceSetOptions(SCVLANInterfaceRef vlan, CFDictionaryRef newOptions)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan)
  {
    if (CFGetTypeID(vlan) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
      if (CFEqual(InterfaceType, @"VLAN"))
      {
        if (!newOptions) {
          return __SCVLANInterfaceSetOptions((uint64_t)vlan, newOptions);
        }
        CFTypeID v6 = CFDictionaryGetTypeID();
        if (CFGetTypeID(newOptions) == v6) {
          return __SCVLANInterfaceSetOptions((uint64_t)vlan, newOptions);
        }
      }
    }
  }

  _SCErrorSet(1002);
  return 0;
}

uint64_t __SCVLANInterfaceSetOptions(uint64_t a1, CFDictionaryRef theDict)
{
  v17[1] = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 80))
  {
    uint64_t v14 = 1LL;
LABEL_15:
    uint64_t v15 = *(const void **)(a1 + 392);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(a1 + 392) = 0LL;
    }

    if (theDict) {
      *(void *)(a1 + 392) = CFDictionaryCreateCopy(0LL, theDict);
    }
    return v14;
  }

  uint64_t v4 = CFStringCreateWithFormat( 0LL,  0LL,  @"/%@/%@/%@",  @"VirtualNetworkInterfaces",  @"VLAN",  *(void *)(a1 + 112));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v4);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, Value);
    CFIndex v8 = MutableCopy;
    if (theDict) {
      CFDictionarySetValue(MutableCopy, @"Options", theDict);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"Options");
    }
    if (CFEqual(Value, v8)) {
      uint64_t v14 = 1LL;
    }
    else {
      uint64_t v14 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v4, v8);
    }
    CFRelease(v8);
    CFRelease(v4);
    if (!(_DWORD)v14) {
      return v14;
    }
    goto LABEL_15;
  }

  CFTypeID v9 = __log_SCNetworkConfiguration();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
  {
    uint64_t v11 = _os_log_pack_size();
    int v12 = (char *)v17 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)(v13 + 4) = "__SCVLANInterfaceSetOptions";
    __SC_log_send(5, (uint64_t)v9, v10, v12);
  }

  CFRelease(v4);
  _SCErrorSet(1001);
  return 0LL;
}

uint64_t __SCVLANInterfaceSetAutoConfigure(uint64_t a1, int a2)
{
  uint64_t v4 = *(const __CFDictionary **)(a1 + 392);
  if (v4)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0LL, 0LL, v4);
    BOOL v6 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }

  else
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    BOOL v6 = 1;
    if (a2)
    {
LABEL_3:
      CFDictionaryRemoveValue(MutableCopy, @"AutoConfigure");
      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }

  CFDictionarySetValue(MutableCopy, @"AutoConfigure", (const void *)*MEMORY[0x189604DE0]);
  if (v4) {
LABEL_4:
  }
    BOOL v6 = CFEqual(v4, MutableCopy) == 0;
LABEL_5:
  if (v6) {
    uint64_t v7 = __SCVLANInterfaceSetOptions(a1, MutableCopy);
  }
  else {
    uint64_t v7 = 1LL;
  }
  CFRelease(MutableCopy);
  return v7;
}

uint64_t __SCVLANInterfaceGetAutoConfigure(uint64_t a1)
{
  int v1 = *(const __CFDictionary **)(a1 + 392);
  if (v1)
  {
    CFDictionaryRef Value = (const __CFBoolean *)CFDictionaryGetValue(v1, @"AutoConfigure");
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      return CFBooleanGetValue(Value);
    }
  }

  else
  {
    CFBooleanGetTypeID();
  }

  return 1LL;
}

uint64_t _SCVLANInterfaceUpdateConfiguration(const __SCPreferences *a1)
{
  if (!a1)
  {
    _SCErrorSet(1002);
    return 0;
  }

  int v1 = SCVLANInterfaceCopyAll(a1);
  uint64_t v2 = v1;
  if (v1) {
    CFIndex Count = CFArrayGetCount(v1);
  }
  else {
    CFIndex Count = 0LL;
  }
  theDict = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  uint64_t v5 = _SCVLANInterfaceCopyActive();
  BOOL v6 = v5;
  if (!v5)
  {
    int v44 = 0;
    CFIndex v7 = 0LL;
LABEL_23:
    char v42 = 1;
    LODWORD(v9) = -1;
    goto LABEL_24;
  }

  CFIndex v7 = CFArrayGetCount(v5);
  if (v7 < 1)
  {
    int v44 = 0;
    goto LABEL_23;
  }

  CFIndex v8 = 0LL;
  uint64_t v9 = 0xFFFFFFFFLL;
  char v42 = 1;
  while (1)
  {
    SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v6, v8);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (Count >= 1)
    {
      int v12 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v2, 0LL);
      CFStringRef v13 = SCNetworkInterfaceGetBSDName(v12);
      if (CFEqual(BSDName, v13)) {
        goto LABEL_19;
      }
      CFIndex v14 = 1LL;
      do
      {
        if (Count == v14) {
          goto LABEL_15;
        }
        uint64_t v15 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v2, v14);
        CFStringRef v16 = SCNetworkInterfaceGetBSDName(v15);
        ++v14;
      }

      while (!CFEqual(BSDName, v16));
      if (v14 - 1 < Count) {
        goto LABEL_19;
      }
    }

LABEL_56:
          ++v19;
        }

        while (v19 != Count);
      }

      if (!v6) {
        goto LABEL_59;
      }
LABEL_58:
      CFRelease(v6);
      goto LABEL_59;
    }
  }

uint64_t __vlan_clear(int a1, const __CFString *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v14, 16LL, 0x600u);
  *(void *)&__int128 v15 = v12;
  v12[0] = 0LL;
  v12[1] = 0LL;
  __int16 v13 = 0;
  if (ioctl(a1, 0x8020697EuLL, &v14) != -1) {
    return 1LL;
  }
  unsigned __int8 v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    CFIndex v7 = (char *)&v12[-1] - ((MEMORY[0x1895F8858](v6) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    uint64_t v9 = __error();
    uint64_t v10 = strerror(*v9);
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v8 + 4) = v10;
    __SC_log_send(5, (uint64_t)v4, v5, v7);
  }

  _SCErrorSet(1001);
  return 0LL;
}

uint64_t __vlan_set(int a1, const __CFString *a2, const __CFString *a3, const __CFNumber *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  v16[0] = 0LL;
  v16[1] = 0LL;
  __int16 v17 = 0;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v18, 16LL, 0x600u);
  *(void *)&__int128 v19 = v16;
  _SC_cfstring_to_cstring(a3, (UInt8 *)v16, 16LL, 0x600u);
  CFNumberGetValue(a4, kCFNumberIntType, (char *)&v15 + 4);
  __int16 v17 = WORD2(v15);
  if (ioctl(a1, 0x8020697EuLL, &v18) != -1) {
    return 1LL;
  }
  uint64_t v8 = __log_SCNetworkConfiguration();
  uint64_t v9 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v11 = (char *)&v16[-1] - ((MEMORY[0x1895F8858](v10) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    __int16 v13 = __error();
    __int128 v14 = strerror(*v13);
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v12 + 4) = v14;
    __SC_log_send(5, (uint64_t)v8, v9, v11);
  }

  _SCErrorSet(1001);
  return 0LL;
}

char *_scprefs_observer_watch(int a1, char *__s, uint64_t a3, const void *a4)
{
  void block[5] = *MEMORY[0x1895F89C0];
  if (_scprefs_observer_watch_initialized != -1) {
    dispatch_once(&_scprefs_observer_watch_initialized, &__block_literal_global_18);
  }
  size_t v8 = strlen(__s);
  size_t v9 = v8 + 1;
  uint64_t v10 = (char *)malloc(v8 + 41);
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((void *)v10 + 4) = 0LL;
  *(_DWORD *)uint64_t v10 = a1;
  strlcpy(v10 + 40, __s, v9);
  *((void *)v10 + 4) = a3;
  *((void *)v10 + 1) = _Block_copy(a4);
  uint64_t v11 = __log_SCPreferences();
  uint64_t v12 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
  {
    uint64_t v13 = _os_log_pack_size();
    __int128 v14 = (char *)block - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v15 + 4) = v10 + 40;
    __SC_log_send(6, (uint64_t)v11, v12, v14);
  }

  block[0] = MEMORY[0x1895F87A8];
  block[1] = 0x40000000LL;
  block[2] = ___scprefs_observer_watch_block_invoke_1;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = v10;
  dispatch_sync((dispatch_queue_t)prefs_observer_queue, block);
  return v10;
}

void ___scprefs_observer_watch_block_invoke()
{
}

void _prefs_observer_init()
{
  v7[1] = *MEMORY[0x1895F89C0];
  prefs_observer_queue = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.SCPreferencesObserver", 0LL);
  head_0 = 0LL;
  uint32_t v0 = notify_register_dispatch( "com.apple.ManagedConfiguration.profileListChanged",  (int *)&_prefs_observer_init_token,  (dispatch_queue_t)prefs_observer_queue,  &__block_literal_global_8_0);
  if (v0)
  {
    uint32_t v1 = v0;
    uint64_t v2 = __log_SCPreferences();
    uint64_t v3 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v2, (os_log_type_t)v3))
    {
      uint64_t v4 = _os_log_pack_size();
      uint64_t v5 = (char *)v7 - ((MEMORY[0x1895F8858](v4) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v6 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v6 = 67109120;
      v6[1] = v1;
      __SC_log_send(6, (uint64_t)v2, v3, v5);
    }
  }

uint64_t ___scprefs_observer_watch_block_invoke_1(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 24LL) = head_0;
  head_0 = *(void *)(result + 32);
  return result;
}

void _scprefs_observer_cancel(uint64_t a1)
{
  v1[5] = *MEMORY[0x1895F89C0];
  v1[0] = MEMORY[0x1895F87A8];
  v1[1] = 0x40000000LL;
  v1[2] = ___scprefs_observer_cancel_block_invoke;
  v1[3] = &__block_descriptor_tmp_3_0;
  v1[4] = a1;
  dispatch_sync((dispatch_queue_t)prefs_observer_queue, v1);
}

void ___scprefs_observer_cancel_block_invoke(uint64_t a1)
{
  uint32_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = &head_0;
  uint64_t v3 = head_0;
  if ((void *)head_0 != v1)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }

    while ((void *)v3 != v1);
    uint64_t v2 = (uint64_t *)(v4 + 24);
  }

  *uint64_t v2 = v1[3];
  uint64_t v5 = (const void *)v1[2];
  if (v5) {
    CFRelease(v5);
  }
  free(v1);
}

void ___prefs_observer_init_block_invoke()
{
}

void prefs_observer_handle_notifications()
{
  v5[1] = *MEMORY[0x1895F89C0];
  uint32_t v0 = __log_SCPreferences();
  uint64_t v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, (os_log_type_t)v1))
  {
    uint64_t v2 = _os_log_pack_size();
    uint64_t v3 = (char *)v5 - ((MEMORY[0x1895F8858](v2) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(7, (uint64_t)v0, v1, v3);
  }

  for (uint64_t i = head_0; i; uint64_t i = *(void *)(i + 24))
  {
    if (has_changed(i)) {
      dispatch_async(*(dispatch_queue_t *)(i + 32), *(dispatch_block_t *)(i + 8));
    }
  }

BOOL has_changed(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (const char *)(a1 + 40);
  if (*(_DWORD *)a1 == 2) {
    uint64_t v3 = "/Library/Managed Preferences/mobile";
  }
  else {
    uint64_t v3 = 0LL;
  }
  CC_SHA256_Init(&v17);
  snprintf((char *)v19, 0x400uLL, "%s/%s", v3, v2);
  if (stat((const char *)v19, &v18) || (v18.st_mode & 0xF000) != 0x8000)
  {
    CC_SHA256_Final(v19, &v17);
    CFDataRef v5 = 0LL;
  }

  else
  {
    CC_LONG v4 = strlen((const char *)v19);
    CC_SHA256_Update(&v17, v19, v4);
    CC_SHA256_Update(&v17, &v18.st_mtimespec, 0x10u);
    CC_SHA256_Final(v19, &v17);
    CFDataRef v5 = CFDataCreate(0LL, v19, 32LL);
  }

  CFDataRef v6 = *(CFDataRef *)(a1 + 16);
  if (v5 == v6)
  {
    BOOL v7 = 0LL;
    CFDataRef v6 = v5;
    if (v5) {
LABEL_13:
    }
      CFRelease(v6);
  }

  else
  {
    BOOL v7 = 1LL;
    if (v5 && v6)
    {
      int v8 = CFEqual(v5, v6);
      CFDataRef v6 = *(CFDataRef *)(a1 + 16);
      BOOL v7 = v8 == 0;
    }

    if (v6) {
      goto LABEL_13;
    }
  }

  *(void *)(a1 + 16) = v5;
  size_t v9 = __log_SCPreferences();
  if (v7) {
    int v10 = 6;
  }
  else {
    int v10 = 7;
  }
  uint64_t v11 = _SC_syslog_os_log_mapping(v10);
  if (__SC_log_enabled(v10, v9, (os_log_type_t)v11))
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t v13 = (char *)&v17 - ((MEMORY[0x1895F8858](v12) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    uint64_t v15 = "did not change";
    if (v7) {
      uint64_t v15 = "changed";
    }
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)(v14 + 4) = v2;
    *(_WORD *)(v14 + 12) = 2080;
    *(void *)(v14 + 14) = v15;
    __SC_log_send(v10, (uint64_t)v9, v11, v13);
  }

  return v7;
}

__CFArray *VPNServiceCopyAllMatchingExternalID(const __SCPreferences *a1, const void *a2, const void *a3)
{
  if (a1
    && (CFTypeID TypeID = CFStringGetTypeID(), a2)
    && CFGetTypeID(a2) == TypeID
    && (CFTypeID v7 = CFStringGetTypeID(), a3)
    && CFGetTypeID(a3) == v7)
  {
    uint64_t result = copy_matching_services(a1, a2, a3);
    if (result) {
      return result;
    }
  }

  else
  {
    LODWORD(result) = 1002;
  }

  _SCErrorSet((int)result);
  return 0LL;
}

__CFArray *copy_matching_services(const __SCPreferences *a1, const void *a2, const void *a3)
{
  CFDataRef v5 = SCNetworkServiceCopyAll(a1);
  if (!v5) {
    return 0LL;
  }
  CFDataRef v6 = v5;
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    CFMutableDictionaryRef Mutable = 0LL;
  }

  else
  {
    CFIndex v8 = Count;
    uint64_t v9 = 0LL;
    CFMutableDictionaryRef Mutable = 0LL;
    CFIndex v11 = 0LL;
    allocator = (const __CFAllocator *)*MEMORY[0x189604DB0];
    do
    {
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v11);
      if (isA_VPNService(ValueAtIndex))
      {
        CFTypeID TypeID = CFStringGetTypeID();
        if (!a2
          || CFGetTypeID(a2) != TypeID
          || (CFTypeID v14 = CFStringGetTypeID(), !a3)
          || CFGetTypeID(a3) != v14
          || (uint64_t v15 = SCNetworkServiceCopyExternalID(ValueAtIndex, a2)) != 0LL
          && (v16 = v15, int v17 = CFEqual(v15, a3), CFRelease(v16), v17))
        {
          if (!Mutable)
          {
            CFIndex v18 = CFArrayGetCount(v6);
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, v18 + v9, MEMORY[0x189605228]);
          }

          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
      }

      ++v11;
      --v9;
    }

    while (v8 != v11);
  }

  CFRelease(v6);
  return Mutable;
}

__CFArray *VPNServiceCopyAll(const __SCPreferences *a1)
{
  if (a1)
  {
    uint64_t result = copy_matching_services(a1, 0LL, 0LL);
    if (result) {
      return result;
    }
  }

  else
  {
    LODWORD(result) = 1002;
  }

  _SCErrorSet((int)result);
  return 0LL;
}

__CFArray *VPNServiceCopyAppRuleIDs(const void *a1)
{
  if (!isA_VPNService(a1) || (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) == 0LL)
  {
    int v15 = 1002;
LABEL_21:
    _SCErrorSet(v15);
    return 0LL;
  }

  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(Interface);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Configuration
    || CFGetTypeID(Configuration) != TypeID
    || (Value = CFDictionaryGetValue(Configuration, @"AppRules"), CFTypeID v6 = CFArrayGetTypeID(), !Value)
    || CFGetTypeID(Value) != v6)
  {
LABEL_20:
    int v15 = 0;
    goto LABEL_21;
  }

  uint64_t Count = CFArrayGetCount((CFArrayRef)Value);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DB0], Count, MEMORY[0x189605228]);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      SCNetworkSetRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, i);
      CFTypeID v11 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v11)
        {
          uint64_t v12 = CFDictionaryGetValue(ValueAtIndex, @"Identifier");
          CFTypeID v13 = CFStringGetTypeID();
          if (v12)
          {
            if (CFGetTypeID(v12) == v13)
            {
              CFTypeID v14 = CFDictionaryGetValue(ValueAtIndex, @"Identifier");
              CFArrayAppendValue(Mutable, v14);
            }
          }
        }
      }
    }
  }

  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    goto LABEL_20;
  }

  if (!Mutable) {
    goto LABEL_20;
  }
  return Mutable;
}

const __SCNetworkInterface *isA_VPNService(const void *a1)
{
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  uint64_t result = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1);
  if (result)
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(result);
    return (const __SCNetworkInterface *)(CFEqual(InterfaceType, @"VPN") != 0);
  }

  return result;
}

uint64_t VPNServiceSetAppRule(const void *a1, const void *a2, const __CFDictionary *a3)
{
  if (isA_VPNService(a1)
    && (CFTypeID v6 = CFStringGetTypeID(), a2)
    && CFGetTypeID(a2) == v6
    && validate_app_rule(a3, 1)
    && (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) != 0LL)
  {
    CFIndex v8 = Interface;
    CFDictionaryRef Value = CFDictionaryGetValue(a3, @"ExecutableMatch");
    int v10 = CFDictionaryGetValue(a3, @"DNSDomainMatch");
    CFArrayRef theArray = (CFArrayRef)CFDictionaryGetValue(a3, @"AccountIdentifierMatch");
    CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(v8);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Configuration && CFGetTypeID(Configuration) == TypeID)
    {
      CFIndex app_rule = find_app_rule(Configuration, a2);
      CFTypeID v14 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, Configuration);
    }

    else
    {
      CFTypeID v14 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DB0],  0LL,  MEMORY[0x189605240],  MEMORY[0x189605250]);
      CFIndex app_rule = -1LL;
    }

    int v17 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"AppRules");
    CFTypeID v18 = CFArrayGetTypeID();
    if (v17 && CFGetTypeID(v17) == v18) {
      CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(v14, 0LL, v17);
    }
    else {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, 0LL, MEMORY[0x189605228]);
    }
    uint64_t v20 = Mutable;
    CFStringRef v21 = CFDictionaryCreateMutable(v14, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
    CFDictionarySetValue(v21, @"Identifier", a2);
    if (Value && CFArrayGetCount((CFArrayRef)Value) >= 1) {
      CFDictionarySetValue(v21, @"ExecutableMatch", Value);
    }
    if (v10 && CFArrayGetCount((CFArrayRef)v10) >= 1) {
      CFDictionarySetValue(v21, @"DNSDomainMatch", v10);
    }
    if (theArray && CFArrayGetCount(theArray) >= 1) {
      CFDictionarySetValue(v21, @"AccountIdentifierMatch", theArray);
    }
    if (app_rule < 0) {
      CFArrayAppendValue(v20, v21);
    }
    else {
      CFArraySetValueAtIndex(v20, app_rule, v21);
    }
    CFDictionarySetValue(MutableCopy, @"AppRules", v20);
    SCNetworkInterfaceSetConfiguration(v8, MutableCopy);
    CFRelease(MutableCopy);
    CFRelease(v20);
    CFRelease(v21);
    return 1LL;
  }

  else
  {
    _SCErrorSet(1002);
    return 0LL;
  }

__SecTask *validate_app_rule(const void *a1, int a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0LL;
  }
  CFDictionaryRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ExecutableMatch");
  CFTypeID v6 = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == v6)
  {
    CFIndex Count = CFArrayGetCount(Value);
    if (Count >= 1)
    {
      int v41 = 0;
      CFIndex v8 = 0LL;
      allocator = (const __CFAllocator *)*MEMORY[0x189604DB0];
      uint64_t v9 = -1LL;
      while (1)
      {
        SCNetworkSetRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v8);
        CFTypeID v11 = CFDictionaryGetTypeID();
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v11)
        {
          uint64_t v12 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"SigningIdentifier");
          CFTypeID v13 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"DesignatedRequirement");
          CFTypeID v14 = CFStringGetTypeID();
          if (!v12 || CFGetTypeID(v12) != v14) {
            return 0LL;
          }
          uint64_t result = (__SecTask *)CFStringGetLength(v12);
          if (!result) {
            return result;
          }
          if (a2 && CFStringHasPrefix(v12, @"com.apple."))
          {
            uint64_t v9 = 0LL;
            char v16 = 1;
            do
            {
              char v17 = v16;
              if (CFStringCompare(v12, *(&g_apple_app_exceptions + 2 * v9), 0LL) == kCFCompareEqualTo)
              {
                int v41 = 1;
                goto LABEL_20;
              }

              char v16 = 0;
              uint64_t v9 = 1LL;
            }

            while ((v17 & 1) != 0);
            if (v41)
            {
              int v41 = 1;
            }

            else
            {
              uint64_t result = SecTaskCreateFromSelf(allocator);
              if (!result) {
                return result;
              }
              __int128 v19 = result;
              CFTypeRef v20 = SecTaskCopyValueForEntitlement(result, @"com.apple.private.app-vpn-config", 0LL);
              CFTypeID v21 = CFBooleanGetTypeID();
              if (!v20)
              {
                CFRelease(v19);
                return 0LL;
              }

              BOOL v22 = CFGetTypeID(v20) == v21 && CFBooleanGetValue((CFBooleanRef)v20) != 0;
              CFRelease(v20);
              CFRelease(v19);
              if (!v22) {
                return 0LL;
              }
              int v41 = 0;
            }

            uint64_t v9 = 2LL;
            if (v13)
            {
LABEL_21:
              CFTypeID v18 = CFStringGetTypeID();
              if (CFGetTypeID(v13) != v18) {
                return 0LL;
              }
              uint64_t result = (__SecTask *)CFStringGetLength(v13);
              if (!result) {
                return result;
              }
            }
          }

          else
          {
LABEL_20:
            if (v13) {
              goto LABEL_21;
            }
          }
        }

        if (++v8 == Count)
        {
          CFIndex Count = 1LL;
          int v39 = v41;
          goto LABEL_36;
        }
      }
    }

    int v39 = 0;
  }

  else
  {
    int v39 = 0;
    CFIndex Count = 0LL;
  }

  uint64_t v9 = -1LL;
LABEL_36:
  uint64_t v23 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, @"AccountIdentifierMatch");
  CFTypeID v24 = CFArrayGetTypeID();
  if (v23 && CFGetTypeID(v23) == v24)
  {
    CFIndex v25 = CFArrayGetCount(v23);
    if (v25 >= 1)
    {
      int v26 = v39;
      CFIndex v27 = 0LL;
      while (1)
      {
        CFStringRef v28 = CFArrayGetValueAtIndex(v23, v27);
        CFTypeID v29 = CFStringGetTypeID();
        if (!v28 || CFGetTypeID(v28) != v29) {
          return 0LL;
        }
        if (v25 == ++v27)
        {
          CFIndex v25 = 1LL;
          int v39 = v26;
          break;
        }
      }
    }
  }

  else
  {
    CFIndex v25 = 0LL;
  }

  if (!(v25 | Count)) {
    return 0LL;
  }
  int v30 = CFDictionaryGetValue((CFDictionaryRef)a1, @"DNSDomainMatch");
  if (v30)
  {
    uint64_t v31 = v30;
    CFTypeID v32 = CFArrayGetTypeID();
    if (CFGetTypeID(v31) != v32) {
      return 0LL;
    }
    CFIndex v33 = CFArrayGetCount((CFArrayRef)v31);
    if (v33 >= 1)
    {
      CFIndex v34 = 0LL;
      while (1)
      {
        CFStringRef v35 = CFArrayGetValueAtIndex((CFArrayRef)v31, v34);
        CFTypeID v36 = CFStringGetTypeID();
        if (!v35 || CFGetTypeID(v35) != v36) {
          return 0LL;
        }
        if (v33 == ++v34)
        {
          CFIndex v33 = 1LL;
          break;
        }
      }
    }
  }

  else
  {
    CFIndex v33 = 0LL;
  }

  if (v33) {
    BOOL v37 = 1;
  }
  else {
    BOOL v37 = v39 == 0;
  }
  return (__SecTask *)(v37 || v9 < 0);
}

uint64_t find_app_rule(const __CFDictionary *a1, const void *a2)
{
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"AppRules");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value) {
    return -1LL;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return -1LL;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  if (Count < 1) {
    return -1LL;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0LL;
  while (1)
  {
    SCNetworkSetRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v9)
      {
        int v10 = CFDictionaryGetValue(ValueAtIndex, @"Identifier");
        if (CFEqual(a2, v10)) {
          break;
        }
      }
    }

    if (v6 == ++v7) {
      return -1LL;
    }
  }

  return v7;
}

CFTypeRef VPNServiceCopyAppRule(const void *a1, const void *a2)
{
  if (isA_VPNService(a1)
    && (CFTypeID v4 = CFStringGetTypeID(), a2)
    && CFGetTypeID(a2) == v4
    && (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) != 0LL)
  {
    CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(Interface);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Configuration && CFGetTypeID(Configuration) == TypeID)
    {
      uint64_t app_rule = find_app_rule(Configuration, a2);
      if (app_rule < 0)
      {
        int v13 = 1004;
        goto LABEL_11;
      }

      CFIndex v9 = app_rule;
      CFDictionaryRef Value = (const __CFArray *)CFDictionaryGetValue(Configuration, @"AppRules");
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(Value, v9);
    }

    int v13 = 1001;
  }

  else
  {
    int v13 = 1002;
  }

uint64_t VPNServiceRemoveAppRule(const void *a1, const void *a2)
{
  if (!isA_VPNService(a1)
    || (CFTypeID TypeID = CFStringGetTypeID(), !a2)
    || CFGetTypeID(a2) != TypeID
    || (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) == 0LL)
  {
    int v16 = 1002;
LABEL_13:
    _SCErrorSet(v16);
    return 0LL;
  }

  CFIndex v6 = Interface;
  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(Interface);
  CFTypeID v8 = CFDictionaryGetTypeID();
  if (!Configuration || CFGetTypeID(Configuration) != v8) {
    goto LABEL_14;
  }
  uint64_t app_rule = find_app_rule(Configuration, a2);
  if (app_rule < 0)
  {
    int v16 = 1004;
    goto LABEL_13;
  }

  CFIndex v10 = app_rule;
  CFDictionaryRef Value = CFDictionaryGetValue(Configuration, @"AppRules");
  CFTypeID v12 = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != v12)
  {
LABEL_14:
    int v16 = 1001;
    goto LABEL_13;
  }

  int v13 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x189604DB0], 0LL, Configuration);
  int v15 = CFArrayCreateMutableCopy(v13, 0LL, (CFArrayRef)Value);
  CFArrayRemoveValueAtIndex(v15, v10);
  if (CFArrayGetCount(v15) < 1) {
    CFDictionaryRemoveValue(MutableCopy, @"AppRules");
  }
  else {
    CFDictionarySetValue(MutableCopy, @"AppRules", v15);
  }
  SCNetworkInterfaceSetConfiguration(v6, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(v15);
  return 1LL;
}

BOOL VPNServiceIsManagedAppVPN(const void *a1)
{
  uint64_t v1 = SCNetworkServiceCopyExternalID(a1, @"MCVPNUUID");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v1) {
    return 0LL;
  }
  BOOL v3 = CFGetTypeID(v1) == TypeID;
  CFRelease(v1);
  return v3;
}

CFStringRef VPNAppLayerCopyMatchingService( _OWORD *a1, int a2, const unsigned __int8 *a3, const __CFString *a4, __CFString *a5, const __CFString *a6)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  __int128 v12 = a1[1];
  v16[0] = *a1;
  v16[1] = v12;
  int v13 = (void *)copy_path_for_app(v16, a2, a3, a4, a5, a6);
  if (v13 && nw_path_is_flow_divert() && (uuid_clear(uu), nw_path_get_vpn_config_id()))
  {
    uuid_unparse(uu, (char *)v16);
    CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], (const char *)v16, 0x600u);
  }

  else
  {
    CFStringRef v14 = 0LL;
  }

  nw_release(v13);
  return v14;
}

uint64_t copy_path_for_app( void *a1, int a2, const unsigned __int8 *a3, const __CFString *a4, __CFString *host, const __CFString *a6)
{
  nw_parameters_t v12 = nw_parameters_create();
  if (a3 && !uuid_is_null(a3)) {
    nw_parameters_set_e_proc_uuid();
  }
  if (a2) {
    nw_parameters_set_pid();
  }
  if (host)
  {
    CFIndex Length = CFStringGetLength(host);
    CFStringRef v14 = (char *)malloc(Length + 1);
    CFIndex v15 = CFStringGetLength(host);
    if (CFStringGetCString(host, v14, v15 + 1, 0x600u))
    {
      host = (__CFString *)nw_endpoint_create_host(v14, "80");
      if (!v14) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }

    host = 0LL;
    if (v14) {
LABEL_9:
    }
      free(v14);
  }

uint64_t VPNAppLayerGetMatchingServiceIdentifier(int a1, const unsigned __int8 *a2)
{
  CFTypeID v4 = (void *)copy_path_for_app(g_null_audit, a1, a2, 0LL, 0LL, 0LL);
  else {
    uint64_t flow_divert_unit = 0xFFFFFFFFLL;
  }
  nw_release(v4);
  return flow_divert_unit;
}

uint64_t _SCControlPrefsCreate(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a2;
  char v5 = 0;
  return _SCControlPrefsCreateCommon(a1, (uint64_t)&v4, a3);
}

uint64_t _SCControlPrefsCreateCommon(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (__SCControlPrefsInitialize_initialized != -1) {
    dispatch_once(&__SCControlPrefsInitialize_initialized, &__block_literal_global_19);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = strdup(a1);
    prefs = (const __SCPreferences *)get_prefs(Instance);
    if (prefs)
    {
      if (*(void *)a2)
      {
        CFTypeID v8 = prefs;
        context.version = 0LL;
        memset(&context.retain, 0, 24);
        context.info = (void *)Instance;
        *(_OWORD *)(Instance + 48) = *(_OWORD *)a2;
        *(void *)(Instance + 40) = a3;
        if (SCPreferencesSetCallback(prefs, (SCPreferencesCallBack)prefs_changed_sc, &context))
        {
          if (*(_BYTE *)(a2 + 8))
          {
            if (!SCPreferencesSetDispatchQueue(v8, *(dispatch_queue_t *)a2))
            {
              CFIndex v9 = _SC_LOG_DEFAULT();
              uint64_t v10 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v9, (os_log_type_t)v10)) {
                goto LABEL_15;
              }
              goto LABEL_16;
            }
          }

          else
          {
            CFRetain(*(CFTypeRef *)a2);
            if (!SCPreferencesScheduleWithRunLoop(v8, *(CFRunLoopRef *)a2, (CFStringRef)*MEMORY[0x1896051A8]))
            {
              CFIndex v9 = _SC_LOG_DEFAULT();
              uint64_t v10 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
              {
LABEL_15:
                uint64_t v18 = _os_log_pack_size();
                CFIndex v19 = (char *)&context - ((MEMORY[0x1895F8858](v18) + 15) & 0xFFFFFFFFFFFFFFF0LL);
                __error();
                uint64_t v20 = _os_log_pack_fill();
                int v21 = SCError();
                BOOL v22 = SCErrorString(v21);
                *(_DWORD *)uint64_t v20 = 136315138;
                *(void *)(v20 + 4) = v22;
                __SC_log_send(5, (uint64_t)v9, v10, v19);
              }

uint64_t _SCControlPrefsCreateWithQueue(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a2;
  char v5 = 1;
  return _SCControlPrefsCreateCommon(a1, (uint64_t)&v4, a3);
}

uint64_t _SCControlPrefsGetBoolean(uint64_t a1, CFStringRef key)
{
  uint64_t v4 = *(const __SCPreferences **)(a1 + 32);
  if (v4
    || (v5 = CFStringCreateWithFormat( 0LL,  0LL,  @"%s%s",  "/Library/Managed Preferences/mobile/",  *(void *)(a1 + 16)),  *(void *)(a1 + 32) = make_prefs(v5),  CFRelease(v5),  (uint64_t v4 = *(const __SCPreferences **)(a1 + 32)) != 0LL))
  {
    CFPropertyListRef Value = SCPreferencesGetValue(v4, key);
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      goto LABEL_9;
    }
    SCPreferencesSynchronize(v4);
  }

  prefs = (const __SCPreferences *)get_prefs(a1);
  if (!prefs) {
    return 0LL;
  }
  uint64_t v4 = prefs;
  CFPropertyListRef Value = SCPreferencesGetValue(prefs, key);
  CFTypeID v9 = CFBooleanGetTypeID();
  if (!Value || CFGetTypeID(Value) != v9)
  {
    uint64_t v10 = 0LL;
    goto LABEL_11;
  }

uint64_t get_prefs(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result)
  {
    BOOL v3 = CFStringCreateWithCString(0LL, *(const char **)(a1 + 16), 0x8000100u);
    *(void *)(a1 + 24) = make_prefs(v3);
    CFRelease(v3);
    return *(void *)(a1 + 24);
  }

  return result;
}

uint64_t _SCControlPrefsSetBoolean(uint64_t a1, const __CFString *a2, int a3)
{
  prefs = (const __SCPreferences *)get_prefs(a1);
  if (!prefs) {
    return 0LL;
  }
  uint64_t v6 = prefs;
  if (a3) {
    SCPreferencesSetValue(prefs, a2, (CFPropertyListRef)*MEMORY[0x189604DE8]);
  }
  else {
    SCPreferencesRemoveValue(prefs, a2);
  }
  uint64_t v8 = SCPreferencesCommitChanges(v6);
  SCPreferencesSynchronize(v6);
  return v8;
}

uint64_t prefs_changed_sc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(uint64_t (**)(uint64_t))(a3 + 40);
  if (v3) {
    return v3(a3);
  }
  return result;
}

void __SCControlPrefsDeallocate(uint64_t a1)
{
  if (*(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    uint64_t v2 = *(const __SCPreferences **)(a1 + 24);
    if (*(_BYTE *)(a1 + 56))
    {
      SCPreferencesSetDispatchQueue(v2, 0LL);
    }

    else
    {
      SCPreferencesSetCallback(v2, 0LL, 0LL);
      SCPreferencesUnscheduleFromRunLoop( *(SCPreferencesRef *)(a1 + 24),  *(CFRunLoopRef *)(a1 + 48),  (CFStringRef)*MEMORY[0x1896051A8]);
      CFRelease(*(CFTypeRef *)(a1 + 48));
    }
  }

  BOOL v3 = *(void **)(a1 + 16);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 24);
  if (v4) {
    CFRelease(v4);
  }
  char v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

__CFString *__SCControlPrefsCopyDescription(uint64_t a1)
{
  uint64_t v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"<SCControlPrefs %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0LL, @" prefsPlist = %s", *(void *)(a1 + 16));
  if (*(void *)(a1 + 24)) {
    CFStringAppendFormat(Mutable, 0LL, @", prefs = %p", *(void *)(a1 + 24));
  }
  if (*(void *)(a1 + 32)) {
    CFStringAppendFormat(Mutable, 0LL, @", prefs_managed = %p", *(void *)(a1 + 32));
  }
  if (*(void *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0LL, @", callbacCFIndex k = %p", *(void *)(a1 + 40));
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 56)) {
      char v5 = "queue";
    }
    else {
      char v5 = "runloop";
    }
    CFStringAppendFormat(Mutable, 0LL, @", %s = %p", v5, v4);
  }

  CFStringAppendFormat(Mutable, 0LL, @"}");
  return Mutable;
}

uint64_t prefs_changed(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 40);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t __enable_prefs_observer_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v2 = *(uint64_t (**)(void))(result + 40);
  if (v2) {
    return v2();
  }
  return result;
}

void __enable_prefs_observer_block_invoke_2(uint64_t a1)
{
}

uint64_t make_prefs(const __CFString *a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  CFDictionarySetValue(Mutable, @"remove-when-empty", (const void *)*MEMORY[0x189604DE8]);
  uint64_t v3 = SCPreferencesCreateWithOptions(0LL, @"_SCControlPrefs", a1, 0LL, Mutable);
  CFRelease(Mutable);
  return v3;
}

uint64_t SCNetworkCategoryManagerGetTypeID()
{
  if (__SCNetworkCategoryManagerInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryManagerInitialize_initialized, &__block_literal_global_7_0);
  }
  return __kSCNetworkCategoryManagerTypeID;
}

uint64_t SCNetworkCategoryManagerCreateWithInterface( const __CFString *a1, SCNetworkInterfaceRef interface, unsigned int a3, uint64_t a4)
{
  uint64_t Instance = 0LL;
  v15[5] = *MEMORY[0x1895F89C0];
  int v6 = 1002;
  if (a3 <= 1 && !a4)
  {
    uint64_t Instance = 0LL;
    if (a1)
    {
      if (interface)
      {
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
        if (!BSDName) {
          goto LABEL_17;
        }
        CFTypeID v9 = BSDName;
        if (__SCNetworkCategoryManagerInitialize_initialized != -1) {
          dispatch_once(&__SCNetworkCategoryManagerInitialize_initialized, &__block_literal_global_7_0);
        }
        uint64_t Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          *(void *)(Instance + 16) = CFStringCreateCopy(0LL, a1);
          *(_DWORD *)(Instance + 32) = a3;
          *(void *)(Instance + 24) = CFStringCreateCopy(0LL, v9);
        }

        uint64_t v10 = dispatch_queue_create("SCNetworkCategoryManager", 0LL);
        uint64_t v11 = MEMORY[0x1895F87A8];
        *(void *)(Instance + 56) = v10;
        v15[0] = v11;
        v15[1] = 0x40000000LL;
        void v15[2] = __SCNetworkCategoryManagerCreateWithInterface_block_invoke;
        void v15[3] = &__block_descriptor_tmp_22;
        v15[4] = Instance;
        uint64_t v12 = CategoryManagerConnectionCreate(v10, (uint64_t)v15);
        *(void *)(Instance + 48) = v12;
        if (!v12)
        {
          CFRelease((CFTypeRef)Instance);
          goto LABEL_17;
        }

        int v6 = CategoryManagerConnectionRegister( v12,  *(const __CFString **)(Instance + 16),  *(const __CFString **)(Instance + 24),  *(_DWORD *)(Instance + 32));
        if (v6)
        {
          int v13 = v6;
          CFRelease((CFTypeRef)Instance);
          if (v13 == 1)
          {
            uint64_t Instance = 0LL;
            int v6 = 1003;
            goto LABEL_18;
          }

          if (v13 == 2)
          {
            uint64_t Instance = 0LL;
            int v6 = 2002;
            goto LABEL_18;
          }

          if (v13 != 22)
          {
            uint64_t Instance = 0LL;
            int v6 = 1001;
            goto LABEL_18;
          }

void __SCNetworkCategoryManagerCreateWithInterface_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  v22[1] = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 48) == a2)
  {
    switch(a3)
    {
      case 3:
        SCNetworkCategoryManagerDeliverNotification(v5);
        break;
      case 2:
        char v17 = _SC_LOG_DEFAULT();
        uint64_t v18 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
        {
          uint64_t v19 = _os_log_pack_size();
          uint64_t v20 = (char *)v22 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v21 = 136315394;
          *(void *)(v21 + 4) = "SCNetworkCategoryManagerCreateWithInterface_block_invoke";
          *(_WORD *)(v21 + 12) = 2048;
          *(void *)(v21 + 14) = a2;
          __SC_log_send(5, (uint64_t)v17, v18, v20);
        }

        CategoryManagerConnectionSynchronize( *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL),  *(const __CFString **)(*(void *)(a1 + 32) + 16LL),  *(const __CFString **)(*(void *)(a1 + 32) + 24LL),  *(_DWORD *)(*(void *)(a1 + 32) + 32LL),  *(const __CFString **)(*(void *)(a1 + 32) + 40LL));
        break;
      case 1:
        uint64_t v12 = _SC_LOG_DEFAULT();
        uint64_t v13 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
        {
          uint64_t v14 = _os_log_pack_size();
          uint64_t v15 = (char *)v22 - ((MEMORY[0x1895F8858](v14) + 15) & 0xFFFFFFFFFFFFFFF0LL);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v16 = 136315394;
          *(void *)(v16 + 4) = "SCNetworkCategoryManagerCreateWithInterface_block_invoke";
          *(_WORD *)(v16 + 12) = 2048;
          *(void *)(v16 + 14) = a2;
          __SC_log_send(5, (uint64_t)v12, v13, v15);
        }

        break;
    }
  }

  else
  {
    int v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      CFTypeID v9 = (char *)v22 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 48LL);
      *(_DWORD *)uint64_t v10 = 136315650;
      *(void *)(v10 + 4) = "SCNetworkCategoryManagerCreateWithInterface_block_invoke";
      *(_WORD *)(v10 + 12) = 2048;
      *(void *)(v10 + 14) = v11;
      *(_WORD *)(v10 + 22) = 2048;
      *(void *)(v10 + 24) = a2;
      __SC_log_send(5, (uint64_t)v6, v7, v9);
    }
  }

void SCNetworkCategoryManagerDeliverNotification(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  CFStringRef v2 = CategoryManagerConnectionCopyActiveValue(*(_xpc_connection_s **)(a1 + 48), &v17);
  uint64_t v3 = _SC_LOG_DEFAULT();
  uint64_t v4 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
  {
    uint64_t v5 = _os_log_pack_size();
    int v6 = (char *)block - ((MEMORY[0x1895F8858](v5) + 15) & 0xFFFFFFFFFFFFFFF0LL);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    int v8 = v17;
    *(_DWORD *)uint64_t v7 = 136315650;
    *(void *)(v7 + 4) = "SCNetworkCategoryManagerDeliverNotification";
    *(_WORD *)(v7 + 12) = 2112;
    *(void *)(v7 + 14) = v2;
    *(_WORD *)(v7 + 22) = 1024;
    *(_DWORD *)(v7 + 24) = v8;
    __SC_log_send(5, (uint64_t)v3, v4, v6);
  }

  uint64_t v9 = *(void *)(a1 + 64);
  if (v9)
  {
    dispatch_queue_global_t global_queue = *(dispatch_queue_global_t *)(a1 + 72);
    if (!global_queue) {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    }
    block[0] = MEMORY[0x1895F87A8];
    block[1] = 0x40000000LL;
    block[2] = __SCNetworkCategoryManagerDeliverNotification_block_invoke;
    block[3] = &unk_189B65610;
    block[4] = v9;
    void block[5] = v2;
    dispatch_async(global_queue, block);
  }

  else
  {
    uint64_t v11 = _SC_LOG_DEFAULT();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v14 = (char *)block - ((MEMORY[0x1895F8858](v13) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = "SCNetworkCategoryManagerDeliverNotification";
      __SC_log_send(5, (uint64_t)v11, v12, v14);
    }

    if (v2) {
      CFRelease(v2);
    }
  }

void SCNetworkCategoryManagerSetNotifyHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = *MEMORY[0x1895F89C0];
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 0x40000000LL;
  v3[2] = __SCNetworkCategoryManagerSetNotifyHandler_block_invoke;
  v3[3] = &unk_189B654E0;
  v3[5] = a2;
  v3[6] = a1;
  v3[4] = a3;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), v3);
}

void *__SCNetworkCategoryManagerSetNotifyHandler_block_invoke(void *a1)
{
  CFStringRef v2 = (dispatch_object_s *)a1[5];
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v3 = a1[6];
  uint64_t v4 = *(dispatch_object_s **)(v3 + 72);
  if (v4)
  {
    dispatch_release(v4);
    uint64_t v3 = a1[6];
  }

  *(void *)(v3 + 72) = a1[5];
  uint64_t v5 = *(const void **)(a1[6] + 64LL);
  if (v5) {
    _Block_release(v5);
  }
  uint64_t result = (void *)a1[4];
  if (result)
  {
    uint64_t result = _Block_copy(result);
    *(void *)(a1[6] + 64LL) = result;
  }

  return result;
}

BOOL SCNetworkCategoryManagerActivateValue(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v10 = 0LL;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000LL;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 0x40000000LL;
  void v9[2] = __SCNetworkCategoryManagerActivateValue_block_invoke;
  v9[3] = &unk_189B65508;
  void v9[4] = &v10;
  v9[5] = a1;
  v9[6] = a2;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), v9);
  int v2 = *((_DWORD *)v11 + 6);
  if (v2 == 22) {
    int v3 = 1002;
  }
  else {
    int v3 = 1001;
  }
  if (v2 == 2) {
    int v4 = 2002;
  }
  else {
    int v4 = v3;
  }
  if (v2 == 1) {
    int v5 = 1003;
  }
  else {
    int v5 = 1001;
  }
  if (!v2) {
    int v5 = 0;
  }
  if (v2 <= 1) {
    int v6 = v5;
  }
  else {
    int v6 = v4;
  }
  _SCErrorSet(v6);
  BOOL v7 = *((_DWORD *)v11 + 6) == 0;
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t __SCNetworkCategoryManagerActivateValue_block_invoke(uint64_t a1)
{
  uint64_t result = CategoryManagerConnectionActivateValue( *(_xpc_connection_s **)(*(void *)(a1 + 40) + 48LL),  *(const __CFString **)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

CFStringRef __SCNetworkCategoryManagerCopyActiveValueNoSession( const __CFString *a1, SCNetworkInterfaceRef interface)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v6 = 0;
  if (__SCNetworkCategoryManagerCopyActiveValueNoSession_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryManagerCopyActiveValueNoSession_initialized, &__block_literal_global_20);
  }
  if (!__SCNetworkCategoryManagerCopyActiveValueNoSession_connection) {
    return 0LL;
  }
  uint64_t result = SCNetworkInterfaceGetBSDName(interface);
  if (result)
  {
    uint64_t result = CategoryManagerConnectionCopyActiveValueNoSession( (_xpc_connection_s *)__SCNetworkCategoryManagerCopyActiveValueNoSession_connection,  a1,  result,  &v6);
    if (!result)
    {
      int v5 = 1001;
      if (v6 > 1)
      {
        if (v6 == 2)
        {
          int v5 = 2002;
        }

        else if (v6 == 22)
        {
          int v5 = 1002;
        }
      }

      else if (v6)
      {
        if (v6 == 1) {
          int v5 = 1003;
        }
      }

      else
      {
        int v5 = 0;
      }

      _SCErrorSet(v5);
      return 0LL;
    }
  }

  return result;
}

void __SCNetworkCategoryManagerDeallocate(void *a1)
{
  int v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0LL;
  }

  int v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0LL;
  }

  int v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0LL;
  }

  int v5 = (void *)a1[6];
  if (v5)
  {
    xpc_release(v5);
    a1[6] = 0LL;
  }

  int v6 = (dispatch_object_s *)a1[7];
  if (v6)
  {
    dispatch_release(v6);
    a1[7] = 0LL;
  }

  uint64_t v7 = (dispatch_object_s *)a1[9];
  if (v7)
  {
    dispatch_release(v7);
    a1[9] = 0LL;
  }

  int v8 = (const void *)a1[8];
  if (v8)
  {
    _Block_release(v8);
    a1[8] = 0LL;
  }

uint64_t __SCNetworkCategoryManagerEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0LL;
  }
  int v4 = *(const void **)(a1 + 24);
  int v5 = *(const void **)(a2 + 24);
  if (v4 == v5) {
    return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  }
  uint64_t result = 0LL;
  if (v4)
  {
    if (v5)
    {
      uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 24), v5);
      if ((_DWORD)result) {
        return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
      }
    }
  }

  return result;
}

CFHashCode __SCNetworkCategoryManagerHash(uint64_t a1)
{
  CFHashCode v2 = CFHash(*(CFTypeRef *)(a1 + 16));
  int v3 = *(const void **)(a1 + 24);
  if (v3) {
    v2 ^= CFHash(v3);
  }
  return v2;
}

__CFString *__SCNetworkCategoryManagerCopyDescription(uint64_t a1)
{
  CFHashCode v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0LL);
  CFStringAppendFormat( Mutable,  0LL,  @"<%s %p [%p]> { ID = %@, ifio_name_t name = %@, flags = 0x%x }",  "SCNetworkCategoryManager",  a1,  v2,  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(unsigned int *)(a1 + 32));
  return Mutable;
}

void __SCNetworkCategoryManagerDeliverNotification_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t IPMonitorControlCreate()
{
  v4[5] = *MEMORY[0x1895F89C0];
  if (__IPMonitorControlRegisterClass_once != -1) {
    dispatch_once(&__IPMonitorControlRegisterClass_once, &__block_literal_global_21);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v1 = dispatch_queue_create("IPMonitorControl", 0LL);
  mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.IPMonitorControl", v1, 2uLL);
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 0x40000000LL;
  v4[2] = __IPMonitorControlCreate_block_invoke;
  v4[3] = &__block_descriptor_tmp_23;
  v4[4] = Instance;
  xpc_connection_set_event_handler(mach_service, v4);
  *(void *)(Instance + 16) = v1;
  *(void *)(Instance + 24) = mach_service;
  xpc_connection_resume(mach_service);
  return Instance;
}

void __IPMonitorControlCreate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  IPMonitorControlHandleResponse(a2, 1, &v6);
  if (v6)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(const __CFDictionary **)(v3 + 32);
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)ApplyInterfaceRank, *(void **)(v3 + 24));
      uint64_t v3 = *(void *)(a1 + 32);
    }

    int v5 = *(const __CFDictionary **)(v3 + 40);
    if (v5) {
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)ApplyInterfaceAdvisory, *(void **)(v3 + 24));
    }
  }

BOOL IPMonitorControlHandleResponse(void *a1, int a2, char *a3)
{
  v22[1] = *MEMORY[0x1895F89C0];
  uint64_t v6 = MEMORY[0x186E09E78]();
  if (v6 == MEMORY[0x1895F9250])
  {
    if (a2)
    {
      uint64_t v15 = _SC_LOG_DEFAULT();
      uint64_t v16 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v15, (os_log_type_t)v16);
      if (result)
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v18 = (char *)v22 - ((MEMORY[0x1895F8858](v17) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v15, v16, v18);
LABEL_12:
        BOOL result = 0LL;
        goto LABEL_13;
      }

      goto LABEL_13;
    }

    int64_t int64 = xpc_dictionary_get_int64(a1, "Error");
    char v20 = 0;
    BOOL result = int64 == 0;
  }

  else
  {
    string = (const char *)v6;
    if (v6 != MEMORY[0x1895F9268])
    {
      int v8 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v8, (os_log_type_t)v9);
      if (result)
      {
        uint64_t v11 = _os_log_pack_size();
        uint64_t v12 = (char *)v22 - ((MEMORY[0x1895F8858](v11) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        int v14 = 134217984;
LABEL_11:
        *(_DWORD *)uint64_t v13 = v14;
        *(void *)(v13 + 4) = string;
        __SC_log_send(5, (uint64_t)v8, v9, v12);
        goto LABEL_12;
      }

      goto LABEL_13;
    }

    if (a1 != (void *)MEMORY[0x1895F9198])
    {
      string = xpc_dictionary_get_string(a1, (const char *)*MEMORY[0x1895F91B0]);
      int v8 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v8, (os_log_type_t)v9);
      if (result)
      {
        uint64_t v19 = _os_log_pack_size();
        uint64_t v12 = (char *)v22 - ((MEMORY[0x1895F8858](v19) + 15) & 0xFFFFFFFFFFFFFFF0LL);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        int v14 = 136315138;
        goto LABEL_11;
      }

void ApplyInterfaceRank(const __CFString *a1, const __CFNumber *a2, _xpc_connection_s *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (CFStringGetCString(a1, buffer, 16LL, 0x8000100u))
  {
    if (CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr))
    {
      xpc_object_t request_dictionary = create_request_dictionary();
      xpc_dictionary_set_int64(request_dictionary, "Type", 1LL);
      xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
      xpc_dictionary_set_int64(request_dictionary, "PrimaryRank", valuePtr);
      xpc_connection_send_message(a3, request_dictionary);
      xpc_release(request_dictionary);
    }
  }

void ApplyInterfaceAdvisory(const __CFString *a1, const __CFNumber *a2, _xpc_connection_s *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (CFStringGetCString(a1, buffer, 16LL, 0x8000100u))
  {
    if (CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr))
    {
      xpc_object_t request_dictionary = create_request_dictionary();
      xpc_dictionary_set_int64(request_dictionary, "Type", 3LL);
      xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
      xpc_dictionary_set_int64(request_dictionary, "Advisory", valuePtr);
      xpc_connection_send_message(a3, request_dictionary);
      xpc_release(request_dictionary);
    }
  }

uint64_t IPMonitorControlSetInterfacePrimaryRank(void *a1, CFStringRef theString, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t result = CFStringGetCString(theString, buffer, 16LL, 0x8000100u);
  if ((_DWORD)result)
  {
    xpc_object_t request_dictionary = create_request_dictionary();
    xpc_dictionary_set_int64(request_dictionary, "Type", 1LL);
    xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
    xpc_dictionary_set_int64(request_dictionary, "PrimaryRank", a3);
    xpc_object_t v8 = IPMonitorControlSendRequest((uint64_t)a1, request_dictionary);
    xpc_release(request_dictionary);
    if (v8)
    {
      xpc_release(v8);
      CFRetain(theString);
      CFRetain(a1);
      uint64_t v9 = (dispatch_queue_s *)a1[2];
      v10[0] = MEMORY[0x1895F87A8];
      v10[1] = 0x40000000LL;
      void v10[2] = __IPMonitorControlSetInterfacePrimaryRank_block_invoke;
      v10[3] = &__block_descriptor_tmp_7_1;
      v10[4] = a1;
      v10[5] = theString;
      unsigned int v11 = a3;
      dispatch_async(v9, v10);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

xpc_object_t create_request_dictionary()
{
  xpc_object_t v0 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v1 = getprogname();
  if (v1) {
    xpc_dictionary_set_string(v0, "ProcessName", v1);
  }
  return v0;
}

xpc_object_t IPMonitorControlSendRequest(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  HIBYTE(v11) = 0;
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 24), a2);
  if (v4)
  {
    xpc_object_t v5 = v4;
    while (!IPMonitorControlHandleResponse(v5, 0, (char *)&v11 + 7))
    {
      xpc_release(v5);
      if (!HIBYTE(v11))
      {
        uint64_t v6 = _SC_LOG_DEFAULT();
        uint64_t v7 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v6, (os_log_type_t)v7)) {
          return 0LL;
        }
        goto LABEL_9;
      }

      HIBYTE(v11) = 0;
      xpc_object_t v5 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 24), a2);
      if (!v5) {
        goto LABEL_6;
      }
    }
  }

  else
  {
LABEL_6:
    uint64_t v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
LABEL_9:
      uint64_t v8 = _os_log_pack_size();
      uint64_t v9 = (char *)&v11 - ((MEMORY[0x1895F8858](v8) + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v6, v7, v9);
    }

    return 0LL;
  }

  return v5;
}

void __IPMonitorControlSetInterfacePrimaryRank_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 32);
  CFHashCode v2 = *(const void **)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  int valuePtr = v4;
  xpc_object_t v5 = *(__CFDictionary **)(v3 + 32);
  if (!v5)
  {
    if (!v4) {
      goto LABEL_9;
    }
    *(void *)(v3 + 32) = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
LABEL_8:
    CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 32), v2, v7);
    CFRelease(v7);
    goto LABEL_9;
  }

  if (v4) {
    goto LABEL_8;
  }
  CFDictionaryRemoveValue(v5, v2);
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 32)))
  {
    uint64_t v6 = *(const void **)(v3 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v3 + 32) = 0LL;
    }
  }

int64_t IPMonitorControlGetInterfacePrimaryRank(uint64_t a1, CFStringRef theString)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (!CFStringGetCString(theString, buffer, 16LL, 0x8000100u)) {
    return 0LL;
  }
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", 2LL);
  xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
  xpc_object_t v4 = IPMonitorControlSendRequest(a1, request_dictionary);
  if (v4)
  {
    xpc_object_t v5 = v4;
    int64_t int64 = xpc_dictionary_get_int64(v4, "PrimaryRank");
    xpc_release(v5);
  }

  else
  {
    int64_t int64 = 0LL;
  }

  xpc_release(request_dictionary);
  return int64;
}

CFStringRef IPMonitorControlCopyInterfaceRankAssertionNotificationKey(CFStringRef ifname)
{
  return SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, @"State:", ifname, @"RankAssertion");
}

uint64_t InterfaceRankAssertionInfoGetPrimaryRank(const __CFDictionary *a1)
{
  return cfdict_get_number(a1, @"PrimaryRank");
}

uint64_t cfdict_get_number(const __CFDictionary *a1, const void *a2)
{
  v5[1] = *MEMORY[0x1895F89C0];
  v5[0] = 0LL;
  CFPropertyListRef Value = CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0LL;
  }
  CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, v5);
  return v5[0];
}

uint64_t InterfaceRankAssertionInfoGetProcessID(const __CFDictionary *a1)
{
  return cfdict_get_number(a1, @"ProcessID");
}

const void *InterfaceRankAssertionInfoGetProcessName(const __CFDictionary *a1)
{
  return CFDictionaryGetValue(a1, @"ProcessName");
}

uint64_t IPMonitorControlCopyInterfaceRankAssertionInfo(uint64_t a1, const __CFString *a2)
{
  return CopyAssertionOrAdvisoryInfo(a1, a2, 6u, "RankAssertionInfo");
}

uint64_t CopyAssertionOrAdvisoryInfo(uint64_t a1, CFStringRef theString, unsigned int a3, const char *a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (!CFStringGetCString(theString, buffer, 16LL, 0x8000100u)) {
    return 0LL;
  }
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", a3);
  xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
  xpc_object_t v8 = IPMonitorControlSendRequest(a1, request_dictionary);
  if (v8)
  {
    uint64_t v9 = v8;
    if (xpc_dictionary_get_value(v8, a4)) {
      uint64_t v10 = _CFXPCCreateCFObjectFromXPCObject();
    }
    else {
      uint64_t v10 = 0LL;
    }
    xpc_release(v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  xpc_release(request_dictionary);
  return v10;
}

uint64_t IPMonitorControlCopyInterfaceRankAssertionInterfaceNames(uint64_t a1)
{
  return CopyInterfaceNames(a1, 8u);
}

uint64_t CopyInterfaceNames(uint64_t a1, unsigned int a2)
{
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", a2);
  xpc_object_t v5 = IPMonitorControlSendRequest(a1, request_dictionary);
  if (v5)
  {
    uint64_t v6 = v5;
    if (xpc_dictionary_get_value(v5, "InterfaceNames")) {
      uint64_t v7 = _CFXPCCreateCFObjectFromXPCObject();
    }
    else {
      uint64_t v7 = 0LL;
    }
    xpc_release(v6);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  xpc_release(request_dictionary);
  return v7;
}

uint64_t IPMonitorControlSetInterfaceAdvisory( void *a1, CFStringRef theString, unsigned int a3, const __CFString *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t result = CFStringGetCString(theString, buffer, 16LL, 0x8000100u);
  if ((_DWORD)result)
  {
    if (a4) {
      uint64_t v9 = _SC_cfstring_to_cstring(a4, 0LL, 0LL, 0x8000100u);
    }
    else {
      uint64_t v9 = 0LL;
    }
    xpc_object_t request_dictionary = create_request_dictionary();
    xpc_dictionary_set_int64(request_dictionary, "Type", 3LL);
    xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
    xpc_dictionary_set_int64(request_dictionary, "Advisory", a3);
    if (v9)
    {
      xpc_dictionary_set_string(request_dictionary, "Reason", (const char *)v9);
      CFAllocatorDeallocate(0LL, v9);
    }

    xpc_object_t v11 = IPMonitorControlSendRequest((uint64_t)a1, request_dictionary);
    xpc_release(request_dictionary);
    if (v11)
    {
      xpc_release(v11);
      CFRetain(theString);
      CFRetain(a1);
      uint64_t v12 = (dispatch_queue_s *)a1[2];
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 0x40000000LL;
      void v13[2] = __IPMonitorControlSetInterfaceAdvisory_block_invoke;
      v13[3] = &__block_descriptor_tmp_16;
      v13[4] = a1;
      v13[5] = theString;
      unsigned int v14 = a3;
      dispatch_async(v12, v13);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void __IPMonitorControlSetInterfaceAdvisory_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 32);
  CFHashCode v2 = *(const void **)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  int valuePtr = v4;
  xpc_object_t v5 = *(__CFDictionary **)(v3 + 40);
  if (!v5)
  {
    if (!v4) {
      goto LABEL_9;
    }
    *(void *)(v3 + 40) = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
LABEL_8:
    CFNumberRef v7 = CFNumberCreate(0LL, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 40), v2, v7);
    CFRelease(v7);
    goto LABEL_9;
  }

  if (v4) {
    goto LABEL_8;
  }
  CFDictionaryRemoveValue(v5, v2);
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 40)))
  {
    uint64_t v6 = *(const void **)(v3 + 40);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v3 + 40) = 0LL;
    }
  }

BOOL IPMonitorControlIsInterfaceAdvisorySet(uint64_t a1, CFStringRef theString, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (!CFStringGetCString(theString, buffer, 16LL, 0x8000100u)) {
    return 0LL;
  }
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", 4LL);
  xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
  if (a3) {
    xpc_dictionary_set_int64(request_dictionary, "Advisory", a3);
  }
  xpc_object_t v6 = IPMonitorControlSendRequest(a1, request_dictionary);
  xpc_release(request_dictionary);
  if (!v6) {
    return 0LL;
  }
  BOOL v7 = xpc_dictionary_get_BOOL(v6, "AdvisoryIsSet");
  xpc_release(v6);
  return v7;
}

BOOL IPMonitorControlAnyInterfaceAdvisoryIsSet(uint64_t a1)
{
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", 5LL);
  xpc_object_t v3 = IPMonitorControlSendRequest(a1, request_dictionary);
  xpc_release(request_dictionary);
  if (!v3) {
    return 0LL;
  }
  BOOL v4 = xpc_dictionary_get_BOOL(v3, "AdvisoryIsSet");
  xpc_release(v3);
  return v4;
}

CFStringRef IPMonitorControlCopyInterfaceAdvisoryNotificationKey(CFStringRef ifname)
{
  return SCDynamicStoreKeyCreateNetworkInterfaceEntity(0LL, @"State:", ifname, @"Advisory");
}

uint64_t InterfaceAdvisoryInfoGetAdvisory(const __CFDictionary *a1)
{
  return cfdict_get_number(a1, @"Advisory");
}

uint64_t IPMonitorControlCopyInterfaceAdvisoryInfo(uint64_t a1, const __CFString *a2)
{
  return CopyAssertionOrAdvisoryInfo(a1, a2, 7u, "AdvisoryInfo");
}

uint64_t IPMonitorControlCopyInterfaceAdvisoryInterfaceNames(uint64_t a1)
{
  return CopyInterfaceNames(a1, 9u);
}

void __IPMonitorControlDeallocate(void *a1)
{
  CFHashCode v2 = (void *)a1[3];
  if (v2) {
    xpc_release(v2);
  }
  xpc_object_t v3 = (dispatch_object_s *)a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0LL;
  }

  xpc_object_t v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0LL;
  }

CFStringRef __IPMonitorControlCopyDebugDesc(const void *a1)
{
  CFHashCode v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0LL, @"<IPMonitorControl %p>", a1);
}

uint64_t configopen(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  int v16 = 2;
  uint64_t v17 = a2;
  int v18 = 16777472;
  int v19 = a3;
  uint64_t v20 = a4;
  int v21 = 16777472;
  int v22 = a5;
  uint64_t v23 = *MEMORY[0x1895F8468];
  int v24 = a3;
  int v25 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E2000000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3162115, 0x4Cu, 0x3Cu, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988LL;
      }

      else if (msg.msgh_id == 20100)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v12 = 4294966996LL;
            if (HIDWORD(v17))
            {
              if (msg.msgh_remote_port) {
                uint64_t v12 = 4294966996LL;
              }
              else {
                uint64_t v12 = HIDWORD(v17);
              }
            }
          }

          else
          {
            uint64_t v12 = 4294966996LL;
          }

          goto LABEL_23;
        }

        uint64_t v12 = 4294966996LL;
        if (v16 == 1 && msg.msgh_size == 52 && !msg.msgh_remote_port && HIWORD(v18) << 16 == 1114112)
        {
          uint64_t v12 = 0LL;
          int v13 = HIDWORD(v20);
          *a6 = v17;
          *a7 = v13;
          return v12;
        }
      }

      else
      {
        uint64_t v12 = 4294966995LL;
      }

uint64_t configlist(mach_port_t a1, uint64_t a2, int a3, int a4, void *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v17 = 1;
  uint64_t v18 = a2;
  int v19 = 16777472;
  int v20 = a3;
  uint64_t v21 = *MEMORY[0x1895F8468];
  int v22 = a3;
  int v23 = a4;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E2800000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v12 = mach_msg(&msg, 3162115, 0x3Cu, 0x44u, special_reply_port, 0, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v12)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v13 = 4294966988LL;
      }

      else if (msg.msgh_id == 20108)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v13 = 4294966996LL;
            if (HIDWORD(v18))
            {
              if (msg.msgh_remote_port) {
                uint64_t v13 = 4294966996LL;
              }
              else {
                uint64_t v13 = HIDWORD(v18);
              }
            }
          }

          else
          {
            uint64_t v13 = 4294966996LL;
          }

          goto LABEL_24;
        }

        uint64_t v13 = 4294966996LL;
        if (v17 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && HIBYTE(v19) == 1)
        {
          int v14 = v20;
          if (v20 == v22)
          {
            uint64_t v13 = 0LL;
            *a5 = v18;
            *a6 = v14;
            *a7 = v23;
            return v13;
          }
        }
      }

      else
      {
        uint64_t v13 = 4294966995LL;
      }

uint64_t configadd(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, _DWORD *a7)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v17 = 2;
  uint64_t v18 = a2;
  int v19 = 16777472;
  int v20 = a3;
  uint64_t v21 = a4;
  int v22 = 16777472;
  int v23 = a5;
  uint64_t v24 = *MEMORY[0x1895F8468];
  int v25 = a3;
  int v26 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E2900000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3162115, 0x4Cu, 0x34u, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988LL;
      }

      else if (msg.msgh_id == 20109)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v12 = HIDWORD(v18);
              if (!HIDWORD(v18))
              {
                int v15 = v20;
                *a6 = v19;
                *a7 = v15;
                return v12;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v13 = 1;
            }
            else {
              BOOL v13 = HIDWORD(v18) == 0;
            }
            if (v13) {
              uint64_t v12 = 4294966996LL;
            }
            else {
              uint64_t v12 = HIDWORD(v18);
            }
            goto LABEL_22;
          }
        }

        uint64_t v12 = 4294966996LL;
      }

      else
      {
        uint64_t v12 = 4294966995LL;
      }

uint64_t configget(mach_port_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v19 = 1;
  uint64_t v20 = a2;
  int v21 = 16777472;
  int v22 = a3;
  uint64_t v23 = *MEMORY[0x1895F8468];
  int v24 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  v18.msgh_remote_port = a1;
  v18.msgh_local_port = special_reply_port;
  v18.msgh_bits = -2147478253;
  *(void *)&v18.msgh_voucher_port = 0x4E2A00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&v18);
    mach_port_t special_reply_port = v18.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&v18, 3162115, 0x38u, 0x48u, special_reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v13)
    {
      if (v18.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (v18.msgh_id == 20110)
      {
        if ((v18.msgh_bits & 0x80000000) == 0)
        {
          if (v18.msgh_size == 36)
          {
            uint64_t v14 = 4294966996LL;
            if (HIDWORD(v20))
            {
              if (v18.msgh_remote_port) {
                uint64_t v14 = 4294966996LL;
              }
              else {
                uint64_t v14 = HIDWORD(v20);
              }
            }
          }

          else
          {
            uint64_t v14 = 4294966996LL;
          }

          goto LABEL_24;
        }

        uint64_t v14 = 4294966996LL;
        if (v19 == 1 && v18.msgh_size == 64 && !v18.msgh_remote_port && HIBYTE(v21) == 1)
        {
          int v15 = v22;
          if (v22 == v24)
          {
            uint64_t v14 = 0LL;
            *a4 = v20;
            *a5 = v15;
            int v16 = v26;
            *a6 = v25;
            *a7 = v16;
            return v14;
          }
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

uint64_t configset(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int *a7, _DWORD *a8)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  int v18 = 2;
  uint64_t v19 = a2;
  int v20 = 16777472;
  int v21 = a3;
  uint64_t v22 = a4;
  int v23 = 16777472;
  int v24 = a5;
  uint64_t v25 = *MEMORY[0x1895F8468];
  int v26 = a3;
  int v27 = a5;
  int v28 = a6;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E2B00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v12 = mach_msg(&msg, 3162115, 0x50u, 0x34u, special_reply_port, 0, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v12)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v13 = 4294966988LL;
      }

      else if (msg.msgh_id == 20111)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v13 = HIDWORD(v19);
              if (!HIDWORD(v19))
              {
                int v16 = v21;
                *a7 = v20;
                *a8 = v16;
                return v13;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v14 = 1;
            }
            else {
              BOOL v14 = HIDWORD(v19) == 0;
            }
            if (v14) {
              uint64_t v13 = 4294966996LL;
            }
            else {
              uint64_t v13 = HIDWORD(v19);
            }
            goto LABEL_22;
          }
        }

        uint64_t v13 = 4294966996LL;
      }

      else
      {
        uint64_t v13 = 4294966995LL;
      }

uint64_t configremove(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v12 = 1;
  uint64_t v13 = a2;
  int v14 = 16777472;
  int v15 = a3;
  uint64_t v16 = *MEMORY[0x1895F8468];
  int v17 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = special_reply_port;
  v11.msgh_bits = -2147478253;
  *(void *)&v11.msgh_voucher_port = 0x4E2C00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&v11);
    mach_port_t special_reply_port = v11.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&v11, 3162115, 0x38u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (v11.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (v11.msgh_id == 20112)
      {
        if ((v11.msgh_bits & 0x80000000) == 0)
        {
          if (v11.msgh_size == 40)
          {
            if (!v11.msgh_remote_port)
            {
              uint64_t v8 = HIDWORD(v13);
              if (!HIDWORD(v13))
              {
                *a4 = v14;
                return v8;
              }

              goto LABEL_22;
            }
          }

          else if (v11.msgh_size == 36)
          {
            if (v11.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = HIDWORD(v13) == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996LL;
            }
            else {
              uint64_t v8 = HIDWORD(v13);
            }
            goto LABEL_22;
          }
        }

        uint64_t v8 = 4294966996LL;
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

uint64_t configadd_s(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, _DWORD *a7)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v17 = 2;
  uint64_t v18 = a2;
  int v19 = 16777472;
  int v20 = a3;
  uint64_t v21 = a4;
  int v22 = 16777472;
  int v23 = a5;
  uint64_t v24 = *MEMORY[0x1895F8468];
  int v25 = a3;
  int v26 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E2E00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3162115, 0x4Cu, 0x34u, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988LL;
      }

      else if (msg.msgh_id == 20114)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v12 = HIDWORD(v18);
              if (!HIDWORD(v18))
              {
                int v15 = v20;
                *a6 = v19;
                *a7 = v15;
                return v12;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v13 = 1;
            }
            else {
              BOOL v13 = HIDWORD(v18) == 0;
            }
            if (v13) {
              uint64_t v12 = 4294966996LL;
            }
            else {
              uint64_t v12 = HIDWORD(v18);
            }
            goto LABEL_22;
          }
        }

        uint64_t v12 = 4294966996LL;
      }

      else
      {
        uint64_t v12 = 4294966995LL;
      }

uint64_t confignotify(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v12 = 1;
  uint64_t v13 = a2;
  int v14 = 16777472;
  int v15 = a3;
  uint64_t v16 = *MEMORY[0x1895F8468];
  int v17 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = special_reply_port;
  v11.msgh_bits = -2147478253;
  *(void *)&v11.msgh_voucher_port = 0x4E2F00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&v11);
    mach_port_t special_reply_port = v11.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&v11, 3162115, 0x38u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (v11.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (v11.msgh_id == 20115)
      {
        if ((v11.msgh_bits & 0x80000000) == 0)
        {
          if (v11.msgh_size == 40)
          {
            if (!v11.msgh_remote_port)
            {
              uint64_t v8 = HIDWORD(v13);
              if (!HIDWORD(v13))
              {
                *a4 = v14;
                return v8;
              }

              goto LABEL_22;
            }
          }

          else if (v11.msgh_size == 36)
          {
            if (v11.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = HIDWORD(v13) == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996LL;
            }
            else {
              uint64_t v8 = HIDWORD(v13);
            }
            goto LABEL_22;
          }
        }

        uint64_t v8 = 4294966996LL;
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

uint64_t configget_m( mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  int v18 = 2;
  uint64_t v19 = a2;
  int v20 = 16777472;
  int v21 = a3;
  uint64_t v22 = a4;
  int v23 = 16777472;
  int v24 = a5;
  uint64_t v25 = *MEMORY[0x1895F8468];
  int v26 = a3;
  int v27 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E3000000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&msg, 3162115, 0x4Cu, 0x44u, special_reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (msg.msgh_id == 20116)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v14 = 4294966996LL;
            if (HIDWORD(v19))
            {
              if (msg.msgh_remote_port) {
                uint64_t v14 = 4294966996LL;
              }
              else {
                uint64_t v14 = HIDWORD(v19);
              }
            }
          }

          else
          {
            uint64_t v14 = 4294966996LL;
          }

          goto LABEL_24;
        }

        uint64_t v14 = 4294966996LL;
        if (v18 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
        {
          int v15 = v21;
          if (v21 == v23)
          {
            uint64_t v14 = 0LL;
            *a6 = v19;
            *a7 = v15;
            *a8 = v24;
            return v14;
          }
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

uint64_t configset_m(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int *a8)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v16 = 3;
  uint64_t v17 = a2;
  int v18 = 16777472;
  int v19 = a3;
  uint64_t v20 = a4;
  int v21 = 16777472;
  int v22 = a5;
  uint64_t v23 = a6;
  int v24 = 16777472;
  int v25 = a7;
  uint64_t v26 = *MEMORY[0x1895F8468];
  int v27 = a3;
  int v28 = a5;
  int v29 = a7;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E3100000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3162115, 0x60u, 0x30u, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988LL;
      }

      else if (msg.msgh_id == 20117)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v12 = HIDWORD(v17);
              if (!HIDWORD(v17))
              {
                *a8 = v18;
                return v12;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v13 = 1;
            }
            else {
              BOOL v13 = HIDWORD(v17) == 0;
            }
            if (v13) {
              uint64_t v12 = 4294966996LL;
            }
            else {
              uint64_t v12 = HIDWORD(v17);
            }
            goto LABEL_22;
          }
        }

        uint64_t v12 = 4294966996LL;
      }

      else
      {
        uint64_t v12 = 4294966995LL;
      }

uint64_t notifyadd(mach_port_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v13 = 1;
  uint64_t v14 = a2;
  int v15 = 16777472;
  int v16 = a3;
  uint64_t v17 = *MEMORY[0x1895F8468];
  int v18 = a3;
  int v19 = a4;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E3200000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v8 = mach_msg(&msg, 3162115, 0x3Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v8)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v9 = 4294966988LL;
      }

      else if (msg.msgh_id == 20118)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v9 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a5 = v15;
                return v9;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = HIDWORD(v14) == 0;
            }
            if (v10) {
              uint64_t v9 = 4294966996LL;
            }
            else {
              uint64_t v9 = HIDWORD(v14);
            }
            goto LABEL_22;
          }
        }

        uint64_t v9 = 4294966996LL;
      }

      else
      {
        uint64_t v9 = 4294966995LL;
      }

uint64_t notifyremove(mach_port_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v13 = 1;
  uint64_t v14 = a2;
  int v15 = 16777472;
  int v16 = a3;
  uint64_t v17 = *MEMORY[0x1895F8468];
  int v18 = a3;
  int v19 = a4;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E3300000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v8 = mach_msg(&msg, 3162115, 0x3Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v8)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v9 = 4294966988LL;
      }

      else if (msg.msgh_id == 20119)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v9 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a5 = v15;
                return v9;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = HIDWORD(v14) == 0;
            }
            if (v10) {
              uint64_t v9 = 4294966996LL;
            }
            else {
              uint64_t v9 = HIDWORD(v14);
            }
            goto LABEL_22;
          }
        }

        uint64_t v9 = 4294966996LL;
      }

      else
      {
        uint64_t v9 = 4294966995LL;
      }

uint64_t notifychanges(mach_port_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4E3400000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3162115, 0x18u, 0x44u, special_reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v10 = 4294966988LL;
      }

      else if (msg.msgh_id == 20120)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v10 = 4294966996LL;
            if (HIDWORD(v15))
            {
              if (msg.msgh_remote_port) {
                uint64_t v10 = 4294966996LL;
              }
              else {
                uint64_t v10 = HIDWORD(v15);
              }
            }
          }

          else
          {
            uint64_t v10 = 4294966996LL;
          }

          goto LABEL_24;
        }

        uint64_t v10 = 4294966996LL;
        if (v14 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && v16 == 1)
        {
          int v11 = v17;
          if (v17 == v18)
          {
            uint64_t v10 = 0LL;
            *a2 = v15;
            *a3 = v11;
            *a4 = v19;
            return v10;
          }
        }
      }

      else
      {
        uint64_t v10 = 4294966995LL;
      }

uint64_t notifyviaport(mach_port_t a1, int a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v12 = 1;
  int v13 = a2;
  int v15 = 1114112;
  uint64_t v16 = *MEMORY[0x1895F8468];
  int v17 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E3500000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&msg, 3162115, 0x34u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (msg.msgh_id == 20121)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v8 = v14;
              if (!v14)
              {
                *a4 = v15;
                return v8;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = v14 == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996LL;
            }
            else {
              uint64_t v8 = v14;
            }
            goto LABEL_22;
          }
        }

        uint64_t v8 = 4294966996LL;
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

uint64_t notifycancel(mach_port_t a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4E3800000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3162115, 0x18u, 0x30u, special_reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v6 = 4294966988LL;
      }

      else if (msg.msgh_id == 20124)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v6 = v10;
              if (!v10)
              {
                *a2 = v11;
                return v6;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = v10 == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996LL;
            }
            else {
              uint64_t v6 = v10;
            }
            goto LABEL_22;
          }
        }

        uint64_t v6 = 4294966996LL;
      }

      else
      {
        uint64_t v6 = 4294966995LL;
      }

uint64_t notifyset(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v14 = 2;
  uint64_t v15 = a2;
  int v16 = 16777472;
  int v17 = a3;
  uint64_t v18 = a4;
  int v19 = 16777472;
  int v20 = a5;
  uint64_t v21 = *MEMORY[0x1895F8468];
  int v22 = a3;
  int v23 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E3900000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3162115, 0x4Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v9)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v10 = 4294966988LL;
      }

      else if (msg.msgh_id == 20125)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v10 = HIDWORD(v15);
              if (!HIDWORD(v15))
              {
                *a6 = v16;
                return v10;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v11 = 1;
            }
            else {
              BOOL v11 = HIDWORD(v15) == 0;
            }
            if (v11) {
              uint64_t v10 = 4294966996LL;
            }
            else {
              uint64_t v10 = HIDWORD(v15);
            }
            goto LABEL_22;
          }
        }

        uint64_t v10 = 4294966996LL;
      }

      else
      {
        uint64_t v10 = 4294966995LL;
      }

uint64_t notifyviafd(mach_port_t a1, int a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v12 = 1;
  int v13 = a2;
  int v15 = 1114112;
  uint64_t v16 = *MEMORY[0x1895F8468];
  int v17 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E3A00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&msg, 3162115, 0x34u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (msg.msgh_id == 20126)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v8 = v14;
              if (!v14)
              {
                *a4 = v15;
                return v8;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = v14 == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996LL;
            }
            else {
              uint64_t v8 = v14;
            }
            goto LABEL_22;
          }
        }

        uint64_t v8 = 4294966996LL;
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

uint64_t snapshot(mach_port_t a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4E3D00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3162115, 0x18u, 0x30u, special_reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v6 = 4294966988LL;
      }

      else if (msg.msgh_id == 20129)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v6 = v10;
              if (!v10)
              {
                *a2 = v11;
                return v6;
              }

              goto LABEL_22;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = v10 == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996LL;
            }
            else {
              uint64_t v6 = v10;
            }
            goto LABEL_22;
          }
        }

        uint64_t v6 = 4294966996LL;
      }

      else
      {
        uint64_t v6 = 4294966995LL;
      }

uint64_t helperinit(mach_port_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x55F000000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v7)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (msg.msgh_id == 22100)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v8 = 4294966996LL;
          if (v12 == 1 && msg.msgh_size == 52 && !msg.msgh_remote_port && v15 << 16 == 1114112)
          {
            uint64_t v8 = 0LL;
            int v9 = v16;
            *a2 = v13;
            *a3 = v9;
            return v8;
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v8 = 4294966996LL;
          if (v14)
          {
            if (msg.msgh_remote_port) {
              uint64_t v8 = 4294966996LL;
            }
            else {
              uint64_t v8 = v14;
            }
          }
        }

        else
        {
          uint64_t v8 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v8;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v8;
}

uint64_t helperexec( mach_port_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int *a7, void *a8, _DWORD *a9)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  int v18 = 2;
  uint64_t v19 = a3;
  int v20 = 16777472;
  int v21 = a4;
  uint64_t v22 = a5;
  int v23 = 16777472;
  int v24 = a6;
  uint64_t v25 = *MEMORY[0x1895F8468];
  int v26 = a2;
  int v27 = a4;
  int v28 = a6;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x55F100000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&msg, 3, 0x50u, 0x44u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (msg.msgh_id == 22101)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996LL;
          if (v18 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == v24)
            {
              uint64_t v14 = 0LL;
              *a7 = v23;
              *a8 = v19;
              *a9 = v15;
              return v14;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996LL;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996LL;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }

        else
        {
          uint64_t v14 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v14;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v14;
}

uint64_t pppcontroller_attach( mach_port_t a1, uint64_t a2, int a3, int a4, int a5, int a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  int v17 = 4;
  uint64_t v18 = a2;
  int v19 = 16777472;
  int v20 = a3;
  int v21 = a4;
  int v23 = 1245184;
  int v24 = a5;
  int v25 = 1114112;
  int v26 = a6;
  int v27 = 1245184;
  uint64_t v28 = *MEMORY[0x1895F8468];
  int v29 = a3;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x465000000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v12 = mach_msg(&msg, 3, 0x5Cu, 0x3Cu, reply_port, 0, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v12)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v13 = 4294966988LL;
      }

      else if (msg.msgh_id == 18100)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v13 = 4294966996LL;
          if (v17 == 1 && msg.msgh_size == 52 && !msg.msgh_remote_port && HIWORD(v19) << 16 == 1114112)
          {
            uint64_t v13 = 0LL;
            int v14 = v22;
            *a7 = v18;
            *a8 = v14;
            return v13;
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v13 = 4294966996LL;
          if (HIDWORD(v18))
          {
            if (msg.msgh_remote_port) {
              uint64_t v13 = 4294966996LL;
            }
            else {
              uint64_t v13 = HIDWORD(v18);
            }
          }
        }

        else
        {
          uint64_t v13 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v13 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v13;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v13;
}

uint64_t pppcontroller_getstatus(mach_port_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465100000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&msg, 3, 0x18u, 0x34u, reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v7)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v8;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v8 = 4294966988LL;
    }

    else if (msg.msgh_id == 18101)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 44)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v8 = v13;
            if (!v13)
            {
              int v11 = v15;
              *a2 = v14;
              *a3 = v11;
              return v8;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = v13 == 0;
          }
          if (v9) {
            uint64_t v8 = 4294966996LL;
          }
          else {
            uint64_t v8 = v13;
          }
          goto LABEL_23;
        }
      }

      uint64_t v8 = 4294966996LL;
    }

    else
    {
      uint64_t v8 = 4294966995LL;
    }

uint64_t pppcontroller_copyextendedstatus(mach_port_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465200000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3, 0x18u, 0x44u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v9)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v10 = 4294966988LL;
      }

      else if (msg.msgh_id == 18102)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996LL;
          if (v14 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && v16 == 1)
          {
            int v11 = v17;
            if (v17 == v18)
            {
              uint64_t v10 = 0LL;
              *a2 = v15;
              *a3 = v11;
              *a4 = v19;
              return v10;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v10 = 4294966996LL;
          if (HIDWORD(v15))
          {
            if (msg.msgh_remote_port) {
              uint64_t v10 = 4294966996LL;
            }
            else {
              uint64_t v10 = HIDWORD(v15);
            }
          }
        }

        else
        {
          uint64_t v10 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v10 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v10;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v10;
}

uint64_t pppcontroller_copystatistics(mach_port_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465300000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3, 0x18u, 0x44u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v9)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v10 = 4294966988LL;
      }

      else if (msg.msgh_id == 18103)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996LL;
          if (v14 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && v16 == 1)
          {
            int v11 = v17;
            if (v17 == v18)
            {
              uint64_t v10 = 0LL;
              *a2 = v15;
              *a3 = v11;
              *a4 = v19;
              return v10;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v10 = 4294966996LL;
          if (HIDWORD(v15))
          {
            if (msg.msgh_remote_port) {
              uint64_t v10 = 4294966996LL;
            }
            else {
              uint64_t v10 = HIDWORD(v15);
            }
          }
        }

        else
        {
          uint64_t v10 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v10 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v10;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v10;
}

uint64_t pppcontroller_copyuseroptions(mach_port_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465400000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3, 0x18u, 0x44u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v9)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v10 = 4294966988LL;
      }

      else if (msg.msgh_id == 18104)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996LL;
          if (v14 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && v16 == 1)
          {
            int v11 = v17;
            if (v17 == v18)
            {
              uint64_t v10 = 0LL;
              *a2 = v15;
              *a3 = v11;
              *a4 = v19;
              return v10;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v10 = 4294966996LL;
          if (HIDWORD(v15))
          {
            if (msg.msgh_remote_port) {
              uint64_t v10 = 4294966996LL;
            }
            else {
              uint64_t v10 = HIDWORD(v15);
            }
          }
        }

        else
        {
          uint64_t v10 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v10 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v10;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v10;
}

uint64_t pppcontroller_start(mach_port_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v13 = 1;
  uint64_t v14 = a2;
  int v15 = 16777472;
  int v16 = a3;
  uint64_t v17 = *MEMORY[0x1895F8468];
  int v18 = a3;
  int v19 = a4;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x465500000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v8 = mach_msg(&msg, 3, 0x3Cu, 0x30u, reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v8)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v9;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v9 = 4294966988LL;
    }

    else if (msg.msgh_id == 18105)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v9 = HIDWORD(v14);
            if (!HIDWORD(v14))
            {
              *a5 = v15;
              return v9;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = HIDWORD(v14) == 0;
          }
          if (v10) {
            uint64_t v9 = 4294966996LL;
          }
          else {
            uint64_t v9 = HIDWORD(v14);
          }
          goto LABEL_23;
        }
      }

      uint64_t v9 = 4294966996LL;
    }

    else
    {
      uint64_t v9 = 4294966995LL;
    }

uint64_t pppcontroller_stop(mach_port_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v11 = *MEMORY[0x1895F8468];
  unsigned int v12 = a2;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465600000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v6 = mach_msg(&msg, 3, 0x24u, 0x30u, reply_port, 0, 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v6)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v7;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v7 = 4294966988LL;
    }

    else if (msg.msgh_id == 18106)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v7 = v12;
            if (!v12)
            {
              *a3 = v13;
              return v7;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v12 == 0;
          }
          if (v8) {
            uint64_t v7 = 4294966996LL;
          }
          else {
            uint64_t v7 = v12;
          }
          goto LABEL_23;
        }
      }

      uint64_t v7 = 4294966996LL;
    }

    else
    {
      uint64_t v7 = 4294966995LL;
    }

uint64_t pppcontroller_suspend(mach_port_t a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465700000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3, 0x18u, 0x30u, reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v5)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v6;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v6 = 4294966988LL;
    }

    else if (msg.msgh_id == 18107)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v6 = v10;
            if (!v10)
            {
              *a2 = v11;
              return v6;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = v10 == 0;
          }
          if (v7) {
            uint64_t v6 = 4294966996LL;
          }
          else {
            uint64_t v6 = v10;
          }
          goto LABEL_23;
        }
      }

      uint64_t v6 = 4294966996LL;
    }

    else
    {
      uint64_t v6 = 4294966995LL;
    }

uint64_t pppcontroller_resume(mach_port_t a1, _DWORD *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465800000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3, 0x18u, 0x30u, reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v5)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v6;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v6 = 4294966988LL;
    }

    else if (msg.msgh_id == 18108)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v6 = v10;
            if (!v10)
            {
              *a2 = v11;
              return v6;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = v10 == 0;
          }
          if (v7) {
            uint64_t v6 = 4294966996LL;
          }
          else {
            uint64_t v6 = v10;
          }
          goto LABEL_23;
        }
      }

      uint64_t v6 = 4294966996LL;
    }

    else
    {
      uint64_t v6 = 4294966995LL;
    }

uint64_t pppcontroller_notification(mach_port_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v11 = *MEMORY[0x1895F8468];
  unsigned int v12 = a2;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x465900000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v6 = mach_msg(&msg, 3, 0x24u, 0x30u, reply_port, 0, 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v6)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v7;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v7 = 4294966988LL;
    }

    else if (msg.msgh_id == 18109)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v7 = v12;
            if (!v12)
            {
              *a3 = v13;
              return v7;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v12 == 0;
          }
          if (v8) {
            uint64_t v7 = 4294966996LL;
          }
          else {
            uint64_t v7 = v12;
          }
          goto LABEL_23;
        }
      }

      uint64_t v7 = 4294966996LL;
    }

    else
    {
      uint64_t v7 = 4294966995LL;
    }

uint64_t pppcontroller_attach_proxy( mach_port_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  int v18 = 4;
  uint64_t v19 = a2;
  int v20 = 16777472;
  int v21 = a3;
  int v22 = a4;
  int v24 = 1245184;
  int v25 = a5;
  int v26 = 1114112;
  int v27 = a6;
  int v28 = 1245184;
  uint64_t v29 = *MEMORY[0x1895F8468];
  int v30 = a3;
  int v31 = a7;
  int v32 = a8;
  int v33 = a9;
  mach_port_t reply_port = mig_get_reply_port();
  v17.msgh_remote_port = a1;
  v17.msgh_local_port = reply_port;
  v17.msgh_bits = -2147478253;
  *(void *)&v17.msgh_voucher_port = 0x465D00000000LL;
  if (MEMORY[0x1895FD5F8])
  {
    voucher_mach_msg_set(&v17);
    mach_port_t reply_port = v17.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&v17, 3, 0x68u, 0x3Cu, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(v17.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v13)
    {
      if (v17.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (v17.msgh_id == 18113)
      {
        if ((v17.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996LL;
          if (v18 == 1 && v17.msgh_size == 52 && !v17.msgh_remote_port && HIWORD(v20) << 16 == 1114112)
          {
            uint64_t v14 = 0LL;
            int v15 = v23;
            *a10 = v19;
            *a11 = v15;
            return v14;
          }
        }

        else if (v17.msgh_size == 36)
        {
          uint64_t v14 = 4294966996LL;
          if (HIDWORD(v19))
          {
            if (v17.msgh_remote_port) {
              uint64_t v14 = 4294966996LL;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }

        else
        {
          uint64_t v14 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

      mach_msg_destroy(&v17);
      return v14;
    }

    mig_dealloc_reply_port(v17.msgh_local_port);
  }

  return v14;
}

void _SCCopyDescription_cold_1()
{
  __assert_rtn("_SCCopyDescription", "SCD.c", 253, "nFormatOptions != NULL");
}

void _SCDPluginSpawnCommand_cold_1(int a1)
{
}

void _SCDPluginExecCommand2_cold_1(int a1)
{
}

void _SCDPluginExecCommand2_cold_2()
{
  xpc_object_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_0(&dword_1811D3000, MEMORY[0x1895F8DA0], v1, "setenv() failed: %s\n", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void __SCDynamicStoreNormalize_cold_1()
{
  __assert_rtn("__SCDynamicStoreNormalize", "SCDOpen.c", 867, "store != NULL");
}

void __SCDynamicStoreSetDispatchQueue_block_invoke_cold_1()
{
}

void __SCDynamicStoreSetDispatchQueue_block_invoke_3_cold_1()
{
}

void __SCPreferencesIsEmpty_cold_1()
{
  __assert_rtn("__SCPreferencesIsEmpty", "SCP.c", 263, "prefs != NULL");
}

void SCPreferencesCreateCompanion_cold_1()
{
  __assert_rtn("SCPreferencesCreateCompanion", "SCPOpen.c", 873, "newPrefsID != NULL");
}

void __SCPreferencesScheduleWithRunLoop_cold_1()
{
  __assert_rtn("__SCPreferencesScheduleWithRunLoop", "SCPOpen.c", 1231, "prefsPrivate->session != NULL");
}

void lockWithSync_cold_1()
{
  __assert_rtn("lockWithSync", "SCNetworkConfigurationPrivate.c", 184, "prefs != NULL");
}

void ObjectWrapperRelease_cold_1()
{
}

void SCPreferencesPathCreateUniqueChild_cold_1()
{
  __assert_rtn("SCPreferencesPathCreateUniqueChild", "SCPPath.c", 379, "newDict != NULL");
}

void __SCNetworkConnectionCallBack_cold_1()
{
  __assert_rtn("__SCNetworkConnectionCallBack", "SCNetworkConnection.c", 589, "q != NULL");
}

void __SCNetworkConnectionCallBack_cold_2()
{
  __assert_rtn("__SCNetworkConnectionCallBack", "SCNetworkConnection.c", 563, "rl != NULL");
}

void processPreferences_cold_1()
{
  __assert_rtn("processPreferences", "SCNetworkConnectionPrivate.c", 409, "dict != NULL");
}

void SCUserPreferencesSetInterfacePassword_cold_1()
{
  __assert_rtn("SCUserPreferencesSetInterfacePassword", "SCNetworkConnectionPrivate.c", 2249, "newConfig != NULL");
}

void __SCNetworkReachabilityCreatePrivate_cold_1()
{
}

void SCNetworkReachabilityCopyResolvedAddress_cold_1()
{
}

void SCNetworkReachabilityCopyResolvedAddress_cold_2()
{
}

void SCNetworkReachabilityGetInterfaceIndex_cold_1()
{
}

void SCNetworkReachabilityGetInterfaceIndex_cold_2()
{
}

void SCNetworkReachabilityGetFlags_cold_1()
{
}

void SCNetworkReachabilityGetFlags_cold_2()
{
}

void SCNetworkReachabilitySetCallback_cold_1()
{
}

void SCNetworkReachabilitySetCallback_cold_2()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_1()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_2()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_3()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_4()
{
}

void reachPerform_cold_1()
{
}

void SCNetworkReachabilityUnscheduleFromRunLoop_cold_1()
{
}

void SCNetworkReachabilityUnscheduleFromRunLoop_cold_2()
{
}

void SCNetworkReachabilityUnscheduleFromRunLoop_cold_3()
{
}

void SCNetworkReachabilitySetDispatchQueue_cold_1()
{
}

void SCNetworkReachabilitySetDispatchQueue_cold_2()
{
}

void __SCNetworkReachabilityDeallocate_cold_1()
{
}

void __SCNetworkReachabilityDeallocate_cold_2()
{
}

void __SCNetworkReachabilityCopyDescription_cold_1()
{
}

void __SCNetworkReachabilityCopyDescription_cold_2()
{
}

void reachPerformAndUnlock_cold_1()
{
}

void reachPerformAndUnlock_cold_2()
{
}

void reachUpdateAndUnlock_cold_1()
{
}

void createInterface_cold_1()
{
  __assert_rtn("createInterface", "SCNetworkInterface.c", 2755, "interfacePrivate != NULL");
}

void __SCNetworkInterfaceCopyStoredWithPreferences_cold_1()
{
}

void __SCNetworkInterfaceSaveStoredWithPreferences_cold_1()
{
}

void __SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName_cold_1()
{
}

void SCNetworkServiceAddProtocolType_cold_1()
{
  __assert_rtn("SCNetworkServiceAddProtocolType", "SCNetworkService.c", 434, "protocol != NULL");
}

void SCNetworkServiceAddProtocolType_cold_2()
{
  __assert_rtn("SCNetworkServiceAddProtocolType", "SCNetworkService.c", 437, "newEntity != NULL");
}

void SCNetworkServiceCopyAll_cold_1()
{
  __assert_rtn("SCNetworkServiceCopyAll", "SCNetworkService.c", 527, "servicePrivate != NULL");
}

void _SCNetworkServiceCopyActive_cold_1()
{
  __assert_rtn("_SCNetworkServiceCopyActive", "SCNetworkService.c", 681, "servicePrivate != NULL");
}

void _serviceOrder_add_cold_1()
{
  __assert_rtn("_serviceOrder_add", "SCNetworkSet.c", 260, "newOrder != NULL");
}

void SCNetworkSetCopy_cold_1()
{
  __assert_rtn("SCNetworkSetCopy", "SCNetworkSet.c", 714, "setPrivate != NULL");
}

void SCNetworkSetCopyAll_cold_1()
{
  __assert_rtn("SCNetworkSetCopyAll", "SCNetworkSet.c", 779, "setPrivate != NULL");
}

void SCNetworkSetCopyCurrent_cold_1()
{
  __assert_rtn("SCNetworkSetCopyCurrent", "SCNetworkSet.c", 894, "setPrivate != NULL");
}

void SCNetworkSetCreate_cold_1()
{
  __assert_rtn("SCNetworkSetCreate", "SCNetworkSet.c", 1040, "setPrivate != NULL");
}

void SCNetworkSetEstablishDefaultInterfaceConfiguration_cold_1()
{
  __assert_rtn("SCNetworkSetEstablishDefaultInterfaceConfiguration", "SCNetworkSet.c", 2367, "interfaces != NULL");
}

void add_configured_interface_cold_1()
{
  __assert_rtn("add_configured_interface", "BridgeConfiguration.c", 225, "bridge != NULL");
}

void add_configured_interface_cold_1_0()
{
  __assert_rtn("add_configured_interface", "VLANConfiguration.c", 106, "vlan != NULL");
}

void add_configured_interface_cold_2()
{
  __assert_rtn("add_configured_interface", "VLANConfiguration.c", 117, "vlan_physical != NULL");
}

void _SCVLANInterfaceCopyActive_cold_1()
{
  __assert_rtn("_SCVLANInterfaceCopyActive", "VLANConfiguration.c", 401, "vlan != NULL");
}

void _SCVLANInterfaceCopyActive_cold_2()
{
  __assert_rtn("_SCVLANInterfaceCopyActive", "VLANConfiguration.c", 409, "vlan_physical != NULL");
}

void _SCVLANInterfaceCopyActive_cold_3()
{
  __assert_rtn("_SCVLANInterfaceCopyActive", "VLANConfiguration.c", 414, "vlan_tag != NULL");
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1895F82D8](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1895F82E0](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1895F82E8](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1896025D8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x189602630](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate( CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x189602638](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x189602640](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x189602648](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x189602658](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x189602660](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x189602678](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x189602690]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x189602698](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues( CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1896027C8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1896027D0](BOOLean);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x189602800](bundle);
}

CFStringRef CFBundleCopyLocalizedString( CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x189602828](bundle, key, value, tableName);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x189602830]();
}

CFURLRef CFBundleCopyResourceURL( CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x189602850](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1896028A0](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1896028B0](bundleID);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1896028D0](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1896028F0]();
}

Boolean CFCalendarAddComponents( CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...)
{
  return MEMORY[0x189602938](calendar, at, options, componentDesc);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x189602940](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x189602950](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  uint64_t v3 = va_arg(va, void);
  return MEMORY[0x189602958](calendar, v3, at);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x189602988](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1896029B0](alloc, theString);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x189602A10](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x189602A58](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x189602A60](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x189602A68](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy( CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x189602A80](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x189602A98](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x189602AB0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x189602AC8]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x189602AE8](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x189602AF0](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x189602B78]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x189602B90](theDict, key);
}

CFDictionaryRef CFDictionaryCreate( CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x189602BA8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x189602BB0](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable( CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BB8](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy( CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x189602BC8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x189602BD0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x189602BF0]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x189602C00](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x189602C08](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x189602C38](cf1, cf2);
}

CFErrorRef CFErrorCreate( CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x189602C60](allocator, domain, code, userInfo);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x189602D18](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x189602D20](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x189602D30](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x189602D50](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x189602D60]();
}

CFMachPortRef CFMachPortCreate( CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x189602DB0](allocator, callout, context, shouldFreeInfo);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x189602DB8](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort( CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x189602DC0](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return MEMORY[0x189602DD0](port);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x189602E90](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x189602EA0](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate( CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x189602EB0](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString( CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x189602EB8](allocator, formatter, string, rangep, options);
}

CFStringRef CFNumberFormatterCreateStringWithNumber( CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number)
{
  return (CFStringRef)MEMORY[0x189602EC0](allocator, formatter, number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x189602F08]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x189602F10](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x189602F58](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x189602F60](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x189602F68](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x189602F78](applicationID, userName, hostName);
}

CFDictionaryRef CFPreferencesCopyMultiple( CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x189602F80](keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue( CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x189602F88](key, applicationID, userName, hostName);
}

void CFPreferencesSetValue( CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x189602FC0](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData( CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x189602FD0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData( CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x189602FF0](allocator, data, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x189603060](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x189603098](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1896030A0](stream, buffer, bufferLength);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1896030F0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

Boolean CFRunLoopContainsSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  return MEMORY[0x189603118](rl, source, mode);
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x189603130](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x189603138]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x189603140]();
}

Boolean CFRunLoopIsWaiting(CFRunLoopRef rl)
{
  return MEMORY[0x189603150](rl);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopSourceRef CFRunLoopSourceCreate( CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1896031A0](allocator, order, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x189603248](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x189603260](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x189603270](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x189603280](theSet, value);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare( CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C0](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions( CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896033C8](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings( CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x189603400](alloc, theString, separatorString);
}

CFArrayRef CFStringCreateArrayWithFindResults( CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return (CFArrayRef)MEMORY[0x189603408]( alloc,  theString,  stringToFind,  rangeToSearch.location,  rangeToSearch.length,  compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings( CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x189603410](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x189603418](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation( CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x189603420](alloc, theString, *(void *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation( CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603428](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x189603430](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x189603438](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes( CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x189603450](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x189603468](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy( CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x189603470](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x189603490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments( CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x189603498](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1896034A8](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1896034C0](theString, stringToFind, compareOptions);
  result.length = v4;
  result.io_name_t location = v3;
  return result;
}

CFIndex CFStringFindAndReplace( CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1896034C8]( theString,  stringToFind,  replacementString,  rangeToSearch.location,  rangeToSearch.length,  compareOptions);
}

Boolean CFStringFindCharacterFromSet( CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1896034D0](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions( CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1896034D8]( theString,  stringToFind,  rangeToSearch.location,  rangeToSearch.length,  searchOptions,  result);
}

CFIndex CFStringGetBytes( CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1896034F0]( theString,  range.location,  range.length,  *(void *)&encoding,  lossByte,  isExternalRepresentation,  buffer,  maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1896034F8](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x189603500](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x189603510](theString, idx);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x189603538](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x189603540](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x189603548](theString);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x189603560](string);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x189603588]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x189603590]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1896035A0](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1896035A8](theString, suffix);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x189603678]();
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1896036F0](anURL);
}

Boolean CFURLCopyResourcePropertyForKey( CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error)
{
  return MEMORY[0x189603708](url, key, propertyValueTypeRefPtr, error);
}

CFURLRef CFURLCreateFromFileSystemRepresentation( CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x189603780](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase( CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x189603788](allocator, buffer, bufLen, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath( CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1896037C0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase( CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1896037C8](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1896037D0](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation( CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x189603818](url, resolveAgainstBase, buffer, maxBufLen);
}

Boolean CFURLHasDirectoryPath(CFURLRef anURL)
{
  return MEMORY[0x189603838](anURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x189603848](url, error);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x189603870](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x189603880](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x189603888](alloc, uuid);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1896038A0]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1896038B0](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

SInt32 CFUserNotificationDisplayNotice( CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle)
{
  return MEMORY[0x1896038E8]( flags,  iconURL,  soundURL,  localizationURL,  alertHeader,  alertMessage,  defaultButtonTitle,  timeout);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1896082F8](*(void *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x189608320](*(void *)&bootstrapPort, mainPort);
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return MEMORY[0x189608358](*(void *)&object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x189608390](*(void *)&object);
}

kern_return_t IORegistryEntryCreateCFProperties( io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x189608460](*(void *)&entry, properties, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty( io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608468](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryCreateIterator( io_registry_entry_t entry, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x189608478](*(void *)&entry, plane, *(void *)&options, iterator);
}

kern_return_t IORegistryEntryGetLocationInPlane( io_registry_entry_t entry, const io_name_t plane, io_name_t location)
{
  return MEMORY[0x1896084A0](*(void *)&entry, plane, location);
}

kern_return_t IORegistryEntryGetNameInPlane(io_registry_entry_t entry, const io_name_t plane, io_name_t name)
{
  return MEMORY[0x1896084C0](*(void *)&entry, plane, name);
}

kern_return_t IORegistryEntryGetParentEntry( io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1896084C8](*(void *)&entry, plane, parent);
}

kern_return_t IORegistryEntryGetPath(io_registry_entry_t entry, const io_name_t plane, io_string_t path)
{
  return MEMORY[0x1896084E8](*(void *)&entry, plane, path);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x1896084F8](*(void *)&entry, entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty( io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x189608518](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IOServiceGetMatchingServices( mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x189608570](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x189608588](name);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x18960B638](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x18960B660](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1895F8720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x189604550]();
}

uint64_t _CFRuntimeInitStaticInstance()
{
  return MEMORY[0x189604560]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x189604568]();
}

uint64_t _CFStringCreateWithFormatAndArgumentsAux()
{
  return MEMORY[0x1896045B0]();
}

uint64_t _CFStringGetUserDefaultEncoding()
{
  return MEMORY[0x1896045D8]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x189604828]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x189604838]();
}

char ***_NSGetEnviron(void)
{
  return (char ***)MEMORY[0x1895F87C8]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1895F8918](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1895F8A00]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1895F8A08]();
}

void _exit(int a1)
{
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x1895F8DD0]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x1895F8DD8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1895F9328](a1, *(void *)&a2);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1895F9540](a1, a2);
}

mach_port_name_t audit_session_self(void)
{
  return MEMORY[0x1895F95C0]();
}

gid_t audit_token_to_egid(audit_token_t *atoken)
{
  return MEMORY[0x1896140F0](atoken);
}

uid_t audit_token_to_euid(audit_token_t *atoken)
{
  return MEMORY[0x1896140F8](atoken);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x189614100](atoken);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1895F95D0](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1895F95E0](a1, *(void *)&a2);
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return MEMORY[0x1895F9600](a1, a2, a3);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1895F9618](*(void *)&bp, service_name, sp);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1895F9620]();
}

uint64_t bootstrap_look_up_per_user()
{
  return MEMORY[0x1895F9628]();
}

const char *__cdecl bootstrap_strerror(kern_return_t r)
{
  return (const char *)MEMORY[0x1895F9648](*(void *)&r);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1895FA538](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1895FA540](a1, *(void *)&a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

uint64_t copyconninfo()
{
  return MEMORY[0x189608EE8]();
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1895FAA60](from, to, state, *(void *)&flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x1895FAA68]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x1895FAA70](a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1895FAC40](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1895FAD80](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1895FADF0](value);
}

uint64_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1895FAE00](dsema);
}

uint64_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1895FAE08](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create( dispatch_source_type_t type, uintptr_t handle, unint64_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1895FAE50](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1895FAEE8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1895FAF60](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1895FAF78](__handle, __symbol);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x1895FAFB8](*(void *)&a1, *(void *)&a2);
}

uint64_t dyld_process_is_restricted()
{
  return MEMORY[0x1895FB058]();
}

int execv(const char *__path, char *const *__argv)
{
  return MEMORY[0x1895FB188](__path, __argv);
}

void exit(int a1)
{
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1895FB1E0](*(void *)&a1, a2);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1895FB1F0](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1895FB228](*(void *)&a1, a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1895FB268](a1);
}

uint64_t fileport_makeport()
{
  return MEMORY[0x1895FB2B0]();
}

pid_t fork(void)
{
  return MEMORY[0x1895FB350]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1895FB370](*(void *)&a1, a2);
}

void free(void *a1)
{
}

uint64_t freeconninfo()
{
  return MEMORY[0x189608EF0]();
}

void freeifaddrs(ifaddrs *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1895FB448](*(void *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1895FB460](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1895FB4F8](a1, a2, a3, a4, *(void *)&a5);
}

int getdtablesize(void)
{
  return MEMORY[0x1895FB528]();
}

gid_t getegid(void)
{
  return MEMORY[0x1895FB530]();
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1895FB540]();
}

int getgrnam_r(const char *a1, group *a2, char *a3, size_t a4, group **a5)
{
  return MEMORY[0x1895FB570](a1, a2, a3, a4, a5);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1895FB5A0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1895FB628]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1895FB638]();
}

int getpwuid_r(uid_t a1, passwd *a2, char *a3, size_t a4, passwd **a5)
{
  return MEMORY[0x1895FB678](*(void *)&a1, a2, a3, a4, a5);
}

servent *__cdecl getservbyname(const char *a1, const char *a2)
{
  return (servent *)MEMORY[0x1895FB6B8](a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1895FB6E0](a1, a2);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1895FB7C8](*(void *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1895FB7D8](a1);
}

char *__cdecl index(const char *a1, int a2)
{
  return (char *)MEMORY[0x1895FB810](a1, *(void *)&a2);
}

int inet_aton(const char *a1, in_addr *a2)
{
  return MEMORY[0x1895FB820](a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1895FB838](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1895FB840](*(void *)&a1, a2, a3);
}

int initgroups(const char *a1, int a2)
{
  return MEMORY[0x1895FB848](a1, *(void *)&a2);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1895FB850](*(void *)&a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1895FBA20](a1, a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1895FBAC0](*(void *)&error_value);
}

uint64_t mach_get_times()
{
  return MEMORY[0x1895FBAC8]();
}

mach_msg_return_t mach_msg( mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1895FBAE8]( msg,  *(void *)&option,  *(void *)&send_size,  *(void *)&rcv_size,  *(void *)&rcv_name,  *(void *)&timeout,  *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1895FBB10](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_construct( ipc_space_t task, mach_port_options_ptr_t options, mach_port_context_t context, mach_port_name_t *name)
{
  return MEMORY[0x1895FBB18](*(void *)&task, options, context, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1895FBB28](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_destruct( ipc_space_t task, mach_port_name_t name, mach_port_delta_t srdelta, mach_port_context_t guard)
{
  return MEMORY[0x1895FBB30](*(void *)&task, *(void *)&name, *(void *)&srdelta, guard);
}

kern_return_t mach_port_get_attributes( ipc_space_inspect_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt)
{
  return MEMORY[0x1895FBB48](*(void *)&task, *(void *)&name, *(void *)&flavor, port_info_out, port_info_outCnt);
}

kern_return_t mach_port_get_refs( ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_urefs_t *refs)
{
  return MEMORY[0x1895FBB58](*(void *)&task, *(void *)&name, *(void *)&right, refs);
}

kern_return_t mach_port_insert_right( ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1895FBB70](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs( ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1895FBB78](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_names( ipc_space_t task, mach_port_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_port_type_array_t *types, mach_msg_type_number_t *typesCnt)
{
  return MEMORY[0x1895FBB80](*(void *)&task, names, namesCnt, types, typesCnt);
}

kern_return_t mach_port_request_notification( ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous)
{
  return MEMORY[0x1895FBB88]( *(void *)&task,  *(void *)&name,  *(void *)&msgid,  *(void *)&sync,  *(void *)&notify,  *(void *)&notifyPoly,  previous);
}

kern_return_t mach_port_set_attributes( ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1895FBB90]( *(void *)&task,  *(void *)&name,  *(void *)&flavor,  port_info,  *(void *)&port_infoCnt);
}

kern_return_t mach_port_type(ipc_space_t task, mach_port_name_t name, mach_port_type_t *ptype)
{
  return MEMORY[0x1895FBBA8](*(void *)&task, *(void *)&name, ptype);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

uint64_t mig_dealloc_special_reply_port()
{
  return MEMORY[0x1895FBE88]();
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1895FBE98]();
}

uint64_t mig_get_special_reply_port()
{
  return MEMORY[0x1895FBEA0]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1895FBEF0](a1, a2);
}

uint64_t ne_session_always_on_vpn_configs_present()
{
  return MEMORY[0x1895FBFD0]();
}

uint64_t ne_session_app_vpn_configs_present()
{
  return MEMORY[0x1895FBFD8]();
}

uint64_t ne_session_cancel()
{
  return MEMORY[0x1895FBFE0]();
}

uint64_t ne_session_copy_policy_match()
{
  return MEMORY[0x1895FBFF0]();
}

uint64_t ne_session_create()
{
  return MEMORY[0x1895FBFF8]();
}

uint64_t ne_session_get_info()
{
  return MEMORY[0x1895FC008]();
}

uint64_t ne_session_get_status()
{
  return MEMORY[0x1895FC010]();
}

uint64_t ne_session_policy_match_get_service()
{
  return MEMORY[0x1895FC028]();
}

uint64_t ne_session_policy_match_get_service_action()
{
  return MEMORY[0x1895FC030]();
}

uint64_t ne_session_policy_match_get_service_type()
{
  return MEMORY[0x1895FC038]();
}

uint64_t ne_session_release()
{
  return MEMORY[0x1895FC040]();
}

uint64_t ne_session_retain()
{
  return MEMORY[0x1895FC048]();
}

uint64_t ne_session_send_barrier()
{
  return MEMORY[0x1895FC050]();
}

uint64_t ne_session_set_event_handler()
{
  return MEMORY[0x1895FC070]();
}

uint64_t ne_session_start_on_behalf_of()
{
  return MEMORY[0x1895FC080]();
}

uint64_t ne_session_start_with_options()
{
  return MEMORY[0x1895FC088]();
}

uint64_t ne_session_stop()
{
  return MEMORY[0x1895FC090]();
}

uint64_t ne_session_use_as_system_vpn()
{
  return MEMORY[0x1895FC098]();
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1895FC188](*(void *)&token);
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1895FC190](*(void *)&token, check);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1895FC198](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1895FC1B0](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1895FC1B8](name, out_token);
}

uint32_t notify_register_dispatch( const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1895FC1C0](name, out_token, queue, handler);
}

uint64_t nw_array_apply()
{
  return MEMORY[0x189609068]();
}

uint64_t nw_array_get_count()
{
  return MEMORY[0x189609078]();
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x189609510](address);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x189609520](hostname, port);
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x189609538](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x189609558](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x189609570](endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return MEMORY[0x189609580](endpoint);
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1896097F0]();
}

uint64_t nw_interface_get_subtype()
{
  return MEMORY[0x189609820]();
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return MEMORY[0x189609828](interface);
}

uint64_t nw_nat64_copy_prefixes()
{
  return MEMORY[0x189609938]();
}

uint64_t nw_nat64_synthesize_v6()
{
  return MEMORY[0x189609948]();
}

nw_parameters_t nw_parameters_copy(nw_parameters_t parameters)
{
  return (nw_parameters_t)MEMORY[0x189609990](parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1896099E8]();
}

uint64_t nw_parameters_get_required_interface_index()
{
  return MEMORY[0x189609A88]();
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_account_id()
{
  return MEMORY[0x189609AD8]();
}

uint64_t nw_parameters_set_e_proc_uuid()
{
  return MEMORY[0x189609B30]();
}

uint64_t nw_parameters_set_effective_audit_token()
{
  return MEMORY[0x189609B40]();
}

uint64_t nw_parameters_set_effective_bundle_id()
{
  return MEMORY[0x189609B48]();
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x189609BA0]();
}

uint64_t nw_parameters_set_pid()
{
  return MEMORY[0x189609BD0]();
}

uint64_t nw_parameters_set_required_address_family()
{
  return MEMORY[0x189609C40]();
}

uint64_t nw_parameters_set_resolve_ptr()
{
  return MEMORY[0x189609C58]();
}

uint64_t nw_parameters_set_source_application()
{
  return MEMORY[0x189609C78]();
}

uint64_t nw_parameters_set_source_application_by_bundle_id()
{
  return MEMORY[0x189609C80]();
}

uint64_t nw_path_copy_derived_parameters()
{
  return MEMORY[0x189609CE0]();
}

uint64_t nw_path_copy_endpoint()
{
  return MEMORY[0x189609CF8]();
}

uint64_t nw_path_copy_interface()
{
  return MEMORY[0x189609D08]();
}

uint64_t nw_path_copy_netagent_dictionary()
{
  return MEMORY[0x189609D18]();
}

uint64_t nw_path_create_default_evaluator()
{
  return MEMORY[0x189609D40]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x189609D50]();
}

uint64_t nw_path_evaluator_cancel()
{
  return MEMORY[0x189609D60]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x189609D70]();
}

uint64_t nw_path_evaluator_set_cancel_handler()
{
  return MEMORY[0x189609D80]();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return MEMORY[0x189609D90]();
}

uint64_t nw_path_get_flow_divert_unit()
{
  return MEMORY[0x189609E18]();
}

uint64_t nw_path_get_interface_index()
{
  return MEMORY[0x189609E20]();
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return MEMORY[0x189609E60](path);
}

uint64_t nw_path_get_vpn_config_id()
{
  return MEMORY[0x189609E88]();
}

uint64_t nw_path_is_direct()
{
  return MEMORY[0x189609EA0]();
}

uint64_t nw_path_is_flow_divert()
{
  return MEMORY[0x189609EB0]();
}

uint64_t nw_path_is_local()
{
  return MEMORY[0x189609EB8]();
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return MEMORY[0x189609F10](path, *(void *)&interface_type);
}

void nw_release(void *obj)
{
}

uint64_t nw_resolver_cancel()
{
  return MEMORY[0x18960A998]();
}

uint64_t nw_resolver_create_with_endpoint()
{
  return MEMORY[0x18960AA00]();
}

uint64_t nw_resolver_create_with_path()
{
  return MEMORY[0x18960AA08]();
}

uint64_t nw_resolver_set_cancel_handler()
{
  return MEMORY[0x18960AA10]();
}

uint64_t nw_resolver_set_update_handler()
{
  return MEMORY[0x18960AA18]();
}

void *__cdecl nw_retain(void *obj)
{
  return (void *)MEMORY[0x18960AA20](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1895FC250](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1895FC440](subsystem, category);
}

uint64_t os_log_pack_compose()
{
  return MEMORY[0x1895FC448]();
}

uint64_t os_log_pack_send()
{
  return MEMORY[0x1895FC450]();
}

uint64_t os_log_pack_send_and_compose()
{
  return MEMORY[0x1895FC458]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

uint64_t os_log_with_args()
{
  return MEMORY[0x1895FC480]();
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1895FC620]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1895FC6C0]();
}

void perror(const char *a1)
{
}

int pipe(int a1[2])
{
  return MEMORY[0x1895FC7B0](a1);
}

int posix_spawn( pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1895FC7E0](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x1895FC7F0](a1, *(void *)&a2, *(void *)&a3);
}

int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *a1, int a2, const char *a3, int a4, mode_t a5)
{
  return MEMORY[0x1895FC800](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1895FC808](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1895FC810](a1);
}

int posix_spawnattr_destroy(posix_spawnattr_t *a1)
{
  return MEMORY[0x1895FC818](a1);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x1895FC828](a1);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x1895FC840](a1, a2);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1895FC8E0](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int pthread_atfork(void (*a1)(void), void (*a2)(void), void (*a3)(void))
{
  return MEMORY[0x1895FC938](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1895FCA40](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1895FCA60](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA88](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1895FCA90](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA98](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCAA8](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1895FCAB8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1895FCAC0](a1, *(void *)&a2);
}

int pthread_setcanceltype(int a1, int *a2)
{
  return MEMORY[0x1895FCB30](*(void *)&a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1895FCB48](a1, a2);
}

void pthread_testcancel(void)
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC70](__ptr, __size);
}

int remove(const char *a1)
{
  return MEMORY[0x1895FCD08](a1);
}

int rename(const char *__old, const char *__new)
{
  return MEMORY[0x1895FCD50](__old, __new);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1895FCD90]();
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x1895FCE68](__name, __value, *(void *)&__overwrite);
}

int setgid(gid_t a1)
{
  return MEMORY[0x1895FCE78](*(void *)&a1);
}

int setuid(uid_t a1)
{
  return MEMORY[0x1895FCED0](*(void *)&a1);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1895FCF48](*(void *)&a1, a2, a3);
}

int sigprocmask(int a1, const sigset_t *a2, sigset_t *a3)
{
  return MEMORY[0x1895FCF60](*(void *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1895FCFA0](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1895FCFD0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1895FD030](a1, a2);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1895FD078](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1895FD080](*(void *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0A0](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1895FD0B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1895FD100](__s1, __n);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1895FD118](a1, a2, a3);
}

char *__cdecl strrchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD120](__s, *(void *)&__c);
}

char *__cdecl strstr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD148](__big, __little);
}

uint64_t strtoq(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1B0](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1895FD2B0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1895FD2B8](a1, a2, a3, a4, a5);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration( sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x1895FD2C8](*(void *)&state, path);
}

sysdir_search_path_enumeration_state sysdir_start_search_path_enumeration( sysdir_search_path_directory_t dir, sysdir_search_path_domain_mask_t domainMask)
{
  return MEMORY[0x1895FD2D0](*(void *)&dir, *(void *)&domainMask);
}

int unlink(const char *a1)
{
  return MEMORY[0x1895FD468](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1895FD490](*(void *)&a1);
}

void uuid_clear(uuid_t uu)
{
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1895FD4E0](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1895FD4E8](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1895FD548](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1895FD558](*(void *)&target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1895FD5F8](msg);
}

pid_t wait4(pid_t a1, int *a2, int a3, rusage *a4)
{
  return MEMORY[0x1895FD630](*(void *)&a1, a2, *(void *)&a3, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1895FD750](*(void *)&__fd, __buf, __nbyte);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1895FD968](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1895FD9F0](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1895FDB78](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1895FDB98](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDBE8](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1895FDBF8](xdict);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1895FDC00](xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1895FDC20](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1895FDC48](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1895FDC68](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1895FDE70](object);
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1895FDF88](object);
}

uint64_t xpc_user_sessions_enabled()
{
  return MEMORY[0x1895FE0E8]();
}